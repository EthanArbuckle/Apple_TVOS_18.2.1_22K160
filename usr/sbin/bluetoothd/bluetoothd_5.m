BOOL sub_1002337E4(uint64_t a1, const void *a2, unsigned int a3, char a4)
{
  void *v8;
  char *v9;
  char *v10;
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v8 = off_1008D9110;
  v9 = (char *)operator new(0x30uLL);
  *((_WORD *)v9 + 4) = 1;
  *(void *)v9 = &off_100888828;
  *(_DWORD *)(v9 + 10) = *(_DWORD *)a1;
  *((_WORD *)v9 + 7) = *(_WORD *)(a1 + 4);
  *((void *)v9 + 2) = 0LL;
  *((void *)v9 + 3) = 0LL;
  *((void *)v9 + 4) = 0LL;
  if (a3)
  {
    sub_10023D39C((void *)v9 + 2, a3);
    v10 = (char *)*((void *)v9 + 3);
    memmove(v10, a2, a3);
    *((void *)v9 + 3) = &v10[a3];
  }

  v9[40] = a4;
  return sub_10041C240((uint64_t)v8, v9);
}

void sub_1002338BC(_Unwind_Exception *a1)
{
}

BOOL sub_1002338D0(uint64_t a1, const void *a2, unsigned int a3)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v6 = off_1008D9110;
  v7 = (char *)operator new(0x28uLL);
  *((_WORD *)v7 + 4) = 1;
  *(void *)v7 = &off_100888860;
  *(_DWORD *)(v7 + 10) = *(_DWORD *)a1;
  *((_WORD *)v7 + 7) = *(_WORD *)(a1 + 4);
  *((void *)v7 + 2) = 0LL;
  *((void *)v7 + 3) = 0LL;
  *((void *)v7 + 4) = 0LL;
  if (a3)
  {
    sub_10023D39C((void *)v7 + 2, a3);
    v8 = (char *)*((void *)v7 + 3);
    memmove(v8, a2, a3);
    *((void *)v7 + 3) = &v8[a3];
  }

  return sub_10041C240((uint64_t)v6, v7);
}

void sub_1002339A0(_Unwind_Exception *a1)
{
}

BOOL sub_1002339B4(uint64_t a1, unsigned int a2, const void *a3)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v6 = off_1008D9110;
  v7 = (char *)operator new(0x30uLL);
  *((_WORD *)v7 + 4) = 1;
  *(void *)v7 = &off_100888898;
  *(_DWORD *)(v7 + 10) = *(_DWORD *)a1;
  *((_WORD *)v7 + 7) = *(_WORD *)(a1 + 4);
  *((_WORD *)v7 + 8) = a2;
  *((void *)v7 + 3) = 0LL;
  *((void *)v7 + 4) = 0LL;
  *((void *)v7 + 5) = 0LL;
  if (a2)
  {
    sub_10023D39C((void *)v7 + 3, a2);
    v8 = (char *)*((void *)v7 + 4);
    memmove(v8, a3, a2);
    *((void *)v7 + 4) = &v8[a2];
  }

  return sub_10041C240((uint64_t)v6, v7);
}

void sub_100233A88(_Unwind_Exception *a1)
{
}

BOOL sub_100233A9C(uint64_t a1, uint64_t a2)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v4 = off_1008D9110;
  v5 = (char *)operator new(0x18uLL);
  *((_WORD *)v5 + 4) = 1;
  *(void *)v5 = &off_1008888D0;
  *(_DWORD *)(v5 + 10) = *(_DWORD *)a1;
  *((_WORD *)v5 + 7) = *(_WORD *)(a1 + 4);
  *((void *)v5 + 2) = a2;
  return sub_10041C240((uint64_t)v4, v5);
}

BOOL sub_100233B2C(int *a1, int a2, uint64_t a3)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v6 = off_1008D9110;
  v7 = operator new(0x30uLL);
  sub_10023D5D0((uint64_t)v7, a1, a2, a3);
  return sub_10041C240((uint64_t)v6, v7);
}

void sub_100233BB4(_Unwind_Exception *a1)
{
}

BOOL sub_100233BC8(uint64_t a1, char a2, uint64_t a3, unsigned int a4, const void *a5)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v10 = off_1008D9110;
  v11 = (char *)operator new(0x40uLL);
  *((_WORD *)v11 + 4) = 1;
  *(void *)v11 = &off_100888940;
  *(_DWORD *)(v11 + 10) = *(_DWORD *)a1;
  *((_WORD *)v11 + 7) = *(_WORD *)(a1 + 4);
  v11[16] = a2;
  *((void *)v11 + 3) = a3;
  *((_WORD *)v11 + 16) = a4;
  *((void *)v11 + 5) = 0LL;
  *((void *)v11 + 6) = 0LL;
  *((void *)v11 + 7) = 0LL;
  if (a4)
  {
    sub_10023D39C((void *)v11 + 5, a4);
    v12 = (char *)*((void *)v11 + 6);
    memmove(v12, a5, a4);
    *((void *)v11 + 6) = &v12[a4];
  }

  return sub_10041C240((uint64_t)v10, v11);
}

void sub_100233CB4(_Unwind_Exception *a1)
{
}

BOOL sub_100233CC8(uint64_t a1, const void *a2, unsigned int a3, char a4, char a5)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v10 = off_1008D9110;
  v11 = (char *)operator new(0x20uLL);
  *((_WORD *)v11 + 4) = 1;
  *(void *)v11 = &off_100888978;
  *(_DWORD *)(v11 + 10) = *(_DWORD *)a1;
  *((_WORD *)v11 + 7) = *(_WORD *)(a1 + 4);
  *((_WORD *)v11 + 12) = a3;
  v11[26] = a4;
  v11[27] = a5;
  v12 = operator new[](a3);
  *((void *)v11 + 2) = v12;
  memcpy(v12, a2, a3);
  return sub_10041C240((uint64_t)v10, v11);
}

void sub_100233D9C(_Unwind_Exception *a1)
{
}

BOOL sub_100233DB0(uint64_t a1, unsigned int a2, const void *a3)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v6 = off_1008D9110;
  v7 = (char *)operator new(0x20uLL);
  *((_WORD *)v7 + 4) = 1;
  *(void *)v7 = &off_1008889B0;
  *(_DWORD *)(v7 + 10) = *(_DWORD *)a1;
  *((_WORD *)v7 + 7) = *(_WORD *)(a1 + 4);
  *((_WORD *)v7 + 8) = a2;
  v8 = operator new[](a2);
  *((void *)v7 + 3) = v8;
  memcpy(v8, a3, a2);
  return sub_10041C240((uint64_t)v6, v7);
}

void sub_100233E6C(_Unwind_Exception *a1)
{
}

BOOL sub_100233E80(uint64_t a1, unsigned int a2, const void *a3)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v6 = off_1008D9110;
  v7 = (char *)operator new(0x28uLL);
  *((_WORD *)v7 + 4) = 1;
  *(void *)v7 = &off_1008889E8;
  *(_DWORD *)(v7 + 10) = *(_DWORD *)a1;
  *((_WORD *)v7 + 7) = *(_WORD *)(a1 + 4);
  *((void *)v7 + 2) = 0LL;
  *((void *)v7 + 3) = 0LL;
  *((void *)v7 + 4) = 0LL;
  if (a2)
  {
    sub_10023D39C((void *)v7 + 2, a2);
    v8 = (char *)*((void *)v7 + 3);
    memmove(v8, a3, a2);
    *((void *)v7 + 3) = &v8[a2];
  }

  return sub_10041C240((uint64_t)v6, v7);
}

void sub_100233F50(_Unwind_Exception *a1)
{
}

BOOL sub_100233F64(uint64_t a1, char a2, unsigned int a3, const void *a4)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v8 = off_1008D9110;
  v9 = (char *)operator new(0x30uLL);
  *((_WORD *)v9 + 4) = 1;
  *(void *)v9 = &off_100888A20;
  *(_DWORD *)(v9 + 10) = *(_DWORD *)a1;
  *((_WORD *)v9 + 7) = *(_WORD *)(a1 + 4);
  v9[16] = a2;
  *((void *)v9 + 3) = 0LL;
  *((void *)v9 + 4) = 0LL;
  *((void *)v9 + 5) = 0LL;
  if (a3)
  {
    sub_10023DBC8((void *)v9 + 3, a3);
    v10 = (char *)*((void *)v9 + 4);
    memmove(v10, a4, 8LL * a3);
    *((void *)v9 + 4) = &v10[8 * a3];
  }

  return sub_10041C240((uint64_t)v8, v9);
}

void sub_10023403C(_Unwind_Exception *a1)
{
}

BOOL sub_100234050(uint64_t a1, unsigned int a2, const void *a3)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v6 = off_1008D9110;
  v7 = (char *)operator new(0x30uLL);
  *((_WORD *)v7 + 4) = 1;
  *(void *)v7 = &off_100888A58;
  *(_DWORD *)(v7 + 10) = *(_DWORD *)a1;
  *((_WORD *)v7 + 7) = *(_WORD *)(a1 + 4);
  *((_WORD *)v7 + 8) = a2;
  *((void *)v7 + 3) = 0LL;
  *((void *)v7 + 4) = 0LL;
  *((void *)v7 + 5) = 0LL;
  if (a2)
  {
    sub_10023D39C((void *)v7 + 3, a2);
    v8 = (char *)*((void *)v7 + 4);
    memmove(v8, a3, a2);
    *((void *)v7 + 4) = &v8[a2];
  }

  return sub_10041C240((uint64_t)v6, v7);
}

void sub_100234124(_Unwind_Exception *a1)
{
}

BOOL sub_100234138(uint64_t a1, __int16 a2, unsigned int a3, const void *a4)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v8 = off_1008D9110;
  v9 = (char *)operator new(0x30uLL);
  *((_WORD *)v9 + 4) = 1;
  *(void *)v9 = &off_100888A90;
  *(_DWORD *)(v9 + 10) = *(_DWORD *)a1;
  *((_WORD *)v9 + 7) = *(_WORD *)(a1 + 4);
  *((_WORD *)v9 + 8) = a2;
  *((void *)v9 + 3) = 0LL;
  *((void *)v9 + 4) = 0LL;
  *((void *)v9 + 5) = 0LL;
  if (a3)
  {
    sub_10023D39C((void *)v9 + 3, a3);
    v10 = (char *)*((void *)v9 + 4);
    memmove(v10, a4, a3);
    *((void *)v9 + 4) = &v10[a3];
  }

  return sub_10041C240((uint64_t)v8, v9);
}

void sub_100234210(_Unwind_Exception *a1)
{
}

BOOL sub_100234224(uint64_t a1, __int16 a2, unsigned int a3, const void *a4)
{
  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100888C30);
  }
  v8 = off_1008D9110;
  v9 = (char *)operator new(0x20uLL);
  *((_WORD *)v9 + 4) = 1;
  *(void *)v9 = &off_100888AC8;
  *(_DWORD *)(v9 + 10) = *(_DWORD *)a1;
  *((_WORD *)v9 + 7) = *(_WORD *)(a1 + 4);
  *((_WORD *)v9 + 8) = a2;
  *((_WORD *)v9 + 9) = a3;
  v10 = operator new[](a3);
  *((void *)v9 + 3) = v10;
  memcpy(v10, a4, a3);
  return sub_10041C240((uint64_t)v8, v9);
}

void sub_1002342E8(_Unwind_Exception *a1)
{
}

void sub_1002342FC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100888BF0);
  }
  v6 = sub_1003FFEB0(off_1008D5F48, (uint64_t)a3, 1);
  if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 424) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 428))
  {
    if (sub_10021AF3C(a1, (uint64_t)v6))
    {
      v11 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003FE1B4(a3, __p);
        v12 = v17 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v19 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "sending pair status request to magnet for device %s",  buf,  0xCu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v13 = sub_1002E8F6C();
      sub_1003FE1B4(a3, v14);
      (*(void (**)(uint64_t, void **))(*(void *)v13 + 88LL))(v13, v14);
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
  }

  else
  {
    v8 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4((unsigned __int8 *)a2, __p);
      v9 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "sending pair status request to AACP device %s",  buf,  0xCu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100888BF0);
    }
    v10 = sub_1003FFEB0(off_1008D5F48, a2, 1);
    sub_100214D78(a1, (uint64_t)v10, (uint64_t)a3);
  }

void sub_100234554( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100234578(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
}

void sub_100234580(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100888BF0);
  }
  v10 = sub_1003FFEB0(off_1008D5F48, (uint64_t)a3, 1);
  if (*(_DWORD *)a2 != *(_DWORD *)(a1 + 424) || *(unsigned __int16 *)(a2 + 4) != *(unsigned __int16 *)(a1 + 428))
  {
    if (*(_BYTE *)(a1 + 328))
    {
      v12 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003FE1B4((unsigned __int8 *)a2, __p);
        uint64_t v13 = v30 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v32 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "sending store link key request to AACP device %s",  buf,  0xCu);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
      }

      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100888BF0);
      }
      v14 = sub_1003FFEB0(off_1008D5F48, a2, 1);
      sub_100214C40(a1, (uint64_t)v14, (uint64_t)a3, a5, a4);
    }

    return;
  }

  uint64_t v15 = (uint64_t)v10;
  v16 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003FE1B4(a3, __p);
    char v17 = v30 >= 0 ? __p : (void **)__p[0];
    int v18 = *(unsigned __int8 *)(a1 + 432);
    *(_DWORD *)buf = 136315394;
    v32 = v17;
    __int16 v33 = 1024;
    int v34 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "sending store link key request to magnet link for device %s with version %d",  buf,  0x12u);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
  }

  if (*(unsigned __int8 *)(a1 + 432) < 5u)
  {
    uint64_t v23 = sub_1002E8F6C();
    sub_1003FE1B4(a3, v25);
    sub_1003D0100(v15, (uint64_t)__p);
    if (v30 >= 0) {
      v24 = __p;
    }
    else {
      v24 = (void **)__p[0];
    }
    (*(void (**)(uint64_t, void **, void **, uint64_t, uint64_t))(*(void *)v23 + 104LL))( v23,  v25,  v24,  a4,  a5);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (v26 < 0)
    {
      v22 = v25[0];
      goto LABEL_40;
    }
  }

  else
  {
    *(_DWORD *)buf = 0;
    sub_1003D0454(v15, buf);
    uint64_t v19 = sub_1002E8F6C();
    sub_1003FE1B4(a3, v27);
    v20 = __p;
    sub_1003D0100(v15, (uint64_t)__p);
    if (v30 < 0) {
      v20 = (void **)__p[0];
    }
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_100888C50);
    }
    uint64_t v21 = sub_1004272C4((uint64_t)off_1008D60C8, v15);
    (*(void (**)(uint64_t, void *, void **, uint64_t, uint64_t, uint64_t, void))(*(void *)v19 + 112LL))( v19,  v27,  v20,  a4,  a5,  v21,  *(unsigned int *)buf);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0)
    {
      v22 = (void *)v27[0];
LABEL_40:
      operator delete(v22);
    }
  }

void sub_100234914( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10023497C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
}

void sub_100234984(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  if (a4 == 2)
  {
    v6 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR))
    {
      sub_1003FE1B4((unsigned __int8 *)a2, v42);
      int v7 = SHIBYTE(v46);
      v8 = *(_BYTE **)v42;
      sub_1003FE1B4(a3, __p);
      v9 = v42;
      if (v7 < 0) {
        v9 = v8;
      }
      if (v41 >= 0) {
        v10 = __p;
      }
      else {
        v10 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "easy pair failed between devices %s and %s",  buf,  0x16u);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v46) < 0) {
        operator delete(*(void **)v42);
      }
    }
  }

  else
  {
    if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 424) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 428))
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100888BF0);
      }
    }

    else
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100888BF0);
      }
      a3 = (unsigned __int8 *)a2;
    }

    uint64_t v13 = (unsigned __int8 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)a3, 1);
    *(void *)buf = 0LL;
    *(void *)&buf[8] = 0LL;
    sub_100242F28((uint64_t)buf, a1 + 360);
    if (v13)
    {
      v14 = *(void ****)(a1 + 336);
      uint64_t v15 = *(void ****)(a1 + 344);
      if (v14 != v15)
      {
        while (1)
        {
          v16 = *v14;
          if (**v14 == v13) {
            break;
          }
          if (++v14 == v15) {
            goto LABEL_56;
          }
        }

        uint64_t v17 = sub_1002E6BF0();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 328LL))(v17))
        {
          if (sub_10021AF3C(a1, (uint64_t)v13))
          {
            sub_10021539C(a1, (uint64_t)v13);
            uint64_t v18 = sub_1002E8F6C();
            sub_1003FE1B4(v13 + 128, v36);
            (*(void (**)(uint64_t, void **, void))(*(void *)v18 + 144LL))( v18,  v36,  *((unsigned __int8 *)v16 + 10));
            if (v37 < 0) {
              operator delete(v36[0]);
            }
          }
        }

        if (sub_10021AF3C(a1, (uint64_t)v13) && sub_1002274D8((uint64_t)v16))
        {
          __int16 v35 = 0;
          int v34 = 0;
          memset(__p, 0, 12);
          if (qword_1008D60B0 != -1) {
            dispatch_once(&qword_1008D60B0, &stru_100888AF0);
          }
          sub_100431644((uint64_t)off_1008D60A8, (uint64_t)&v34);
          uint64_t v19 = sub_1002E6BF0();
          int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 328LL))(v19);
          uint64_t v21 = &v34;
          if (v20) {
            v22 = &v34;
          }
          else {
            v22 = (int *)(a1 + 424);
          }
          if (v20) {
            uint64_t v21 = (int *)(a1 + 424);
          }
          LODWORD(__p[0]) = *v22;
          WORD2(__p[0]) = *((_WORD *)v22 + 2);
          *(_DWORD *)((char *)__p + 6) = *v21;
          WORD1(__p[1]) = *((_WORD *)v21 + 2);
          char v33 = 0;
          sub_100242CA4(&v33);
          uint64_t v23 = v13 + 128;
          sub_10007F75C(v13 + 128, 2u, (uint64_t)__p);
          sub_100242CD0(&v33);
          v24 = (os_log_s *)qword_1008F7600;
          if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v13, v42);
            v25 = v46 >= 0 ? v42 : *(_BYTE **)v42;
            *(_DWORD *)v38 = 136446210;
            v39 = v25;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Sending message to Phone/Watch to connect to %{public}s",  v38,  0xCu);
            if (SHIBYTE(v46) < 0) {
              operator delete(*(void **)v42);
            }
          }

          uint64_t v26 = sub_1002E8F6C();
          sub_1003FE1B4(v23, v31);
          (*(void (**)(uint64_t, void **, void))(*(void *)v26 + 128LL))(v26, v31, 0LL);
          if (v32 < 0) {
            operator delete(v31[0]);
          }
          sub_100242CD8(&v33);
        }

        else
        {
          v27 = (os_log_s *)qword_1008F7600;
          if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
          {
            char v28 = __p;
            sub_1003CF00C((uint64_t)v13, __p);
            if (v41 < 0) {
              char v28 = (void **)__p[0];
            }
            int v29 = sub_10021AF3C(a1, (uint64_t)v13);
            BOOL v30 = sub_1002274D8((uint64_t)v16);
            *(_DWORD *)v42 = 136446722;
            *(void *)&v42[4] = v28;
            __int16 v43 = 1024;
            int v44 = v29;
            __int16 v45 = 1024;
            int v46 = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Not establishing triangle with %{public}s (magnet check %d, triangle check %d)",  v42,  0x18u);
            if (v41 < 0) {
              operator delete(__p[0]);
            }
          }
        }

        *((_BYTE *)v16 + 728) = 0;
      }
    }

void sub_100234E5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
}

void sub_100234EF4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
}

void sub_100234EFC(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  v3 = (void *)a1[3];
  v4 = a1 + 4;
  if (v3 != a1 + 4)
  {
    do
    {
      uint64_t v5 = v3[5];
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
      v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          int v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          v3 = v7;
        }

        while (!v8);
      }

      v3 = v7;
    }

    while (v7 != v4);
  }

  if (a1[5])
  {
    sub_10023BF24(v2, (void *)a1[4]);
    a1[4] = 0LL;
    a1[5] = 0LL;
    a1[3] = v4;
  }

BOOL sub_100234F9C(uint64_t a1, uint64_t a2)
{
  int v11 = a2;
  unsigned __int16 v12 = WORD2(a2);
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 360);
  uint64_t v4 = *(void *)(a1 + 336);
  uint64_t v3 = *(void *)(a1 + 344);
  if (v4 == v3)
  {
    BOOL v7 = 0LL;
  }

  else
  {
    uint64_t v5 = v4 + 8;
    do
    {
      int v6 = *(_DWORD *)(**(void **)(v5 - 8) + 128LL) ^ v11 | *(unsigned __int16 *)(**(void **)(v5 - 8) + 132LL) ^ v12;
      BOOL v7 = v6 == 0;
      if (v6) {
        BOOL v8 = v5 == v3;
      }
      else {
        BOOL v8 = 1;
      }
      v5 += 8LL;
    }

    while (!v8);
  }

  sub_100242FAC((uint64_t)v10);
  return v7;
}

void sub_100235038(id a1)
{
}

uint64_t sub_10023504C(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1008D9030 != -1) {
      dispatch_once(&qword_1008D9030, &stru_100888D10);
    }
    return sub_100473C20((uint64_t)off_1008D9028, *(void *)(v1 + 32));
  }

  return result;
}

uint64_t sub_1002350B0(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1008D6458 != -1) {
      dispatch_once(&qword_1008D6458, &stru_100888B90);
    }
    return sub_100377810((void *)qword_1008D6450, *(void *)(v1 + 32));
  }

  return result;
}

uint64_t sub_100235114(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1008D9030 != -1) {
      dispatch_once(&qword_1008D9030, &stru_100888D10);
    }
    return sub_100473D20((uint64_t)off_1008D9028, *(void *)(v1 + 32));
  }

  return result;
}

uint64_t sub_100235178(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1008D6458 != -1) {
      dispatch_once(&qword_1008D6458, &stru_100888B90);
    }
    return sub_1003779E0((void *)qword_1008D6450, *(void *)(v1 + 32));
  }

  return result;
}

uint64_t sub_1002351DC(uint64_t a1)
{
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_100888D10);
  }
  return sub_100473D68((uint64_t)off_1008D9028, *(void *)(a1 + 32));
}

uint64_t sub_10023522C(uint64_t a1)
{
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_100888D10);
  }
  return sub_100473DE0((uint64_t)off_1008D9028, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_100235280(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100888B90);
  }
  return sub_1003779A0((void *)qword_1008D6450, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1002352D4(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1008D9030 != -1) {
      dispatch_once(&qword_1008D9030, &stru_100888D10);
    }
    return sub_100473E18((uint64_t)off_1008D9028, *(void *)(v1 + 32));
  }

  return result;
}

uint64_t sub_100235338(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1008D6458 != -1) {
      dispatch_once(&qword_1008D6458, &stru_100888B90);
    }
    return sub_100377A30((void *)qword_1008D6450, *(void *)(v1 + 32));
  }

  return result;
}

uint64_t sub_10023539C(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1008D9030 != -1) {
      dispatch_once(&qword_1008D9030, &stru_100888D10);
    }
    return sub_100473E60((uint64_t)off_1008D9028, *(void *)(v1 + 32));
  }

  return result;
}

uint64_t sub_100235400(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1008D6458 != -1) {
      dispatch_once(&qword_1008D6458, &stru_100888B90);
    }
    return sub_100377A80((void *)qword_1008D6450, *(void *)(v1 + 32));
  }

  return result;
}

void *sub_100235464(void *result, int *a2, char a3, uint64_t a4)
{
  if (!result[6])
  {
    BOOL v7 = result;
    uint64_t v8 = *result;
    int v10 = *(_DWORD *)(*result + 128LL);
    __int16 v11 = *(_WORD *)(v8 + 132);
    v9 = operator new(0x68uLL);
    result = (void *)sub_1002094E4((uint64_t)v9, a2, (uint64_t)&v10, a4, a3);
    v7[6] = v9;
  }

  return result;
}

void sub_1002354E4(_Unwind_Exception *a1)
{
}

const char *sub_1002354F8(uint64_t a1, int a2)
{
  else {
    return off_1008890C0[a2 - 1];
  }
}

uint64_t sub_100235520(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 50529027;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 3;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 40) = 0LL;
  int v6 = (std::string *)(a1 + 56);
  *(_BYTE *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_BYTE *)(a1 + 152) = 0;
  *(void *)(a1 + 416) = a1 + 416;
  *(void *)(a1 + 424) = a1 + 416;
  *(void *)(a1 + 432) = 0LL;
  sub_100242DC4(a1 + 440);
  *(void *)(a1 + 504) = 0LL;
  *(void *)(a1 + 512) = 0LL;
  *(void *)(a1 + 520) = 0LL;
  sub_100242DC4(a1 + 536);
  *(_BYTE *)(a1 + 618) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_BYTE *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 704) = a1 + 712;
  *(_WORD *)(a1 + 728) = 0;
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 752) = 0LL;
  *(void *)(a1 + 744) = 0LL;
  if ((sub_1003DF944(a2) & 1) == 0) {
    *(_WORD *)(a1 + 8) = 0;
  }
  memset(&__str, 0, sizeof(__str));
  uint64_t v7 = sub_1002E6D7C();
  uint64_t v11 = 0LL;
  int v10 = 0;
  if (!sub_1003D55EC(a2, (_DWORD *)&v11 + 1, &v11, (_DWORD *)(a1 + 80), &v10))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
      sub_100661F54();
    }
    *(_DWORD *)(a1 + sub_100242FAC(v40 - 80) = 0;
  }

  *(_DWORD *)(a1 + 93) = 0;
  *(void *)(a1 + 85) = 0LL;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_WORD *)(a1 + 760) = -1;
  if (a3)
  {
    uint64_t v8 = operator new(8uLL);
    void *v8 = &off_1008881F0;
    *(void *)(a1 + 768) = v8;
  }

  sub_100235994(a1);
  *(_BYTE *)(a1 + 528) = 1;
  *(_DWORD *)(a1 + 532) = 0;
  return a1;
}

void sub_100235734( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  v25 = *(void **)(v17 + 736);
  if (v25)
  {
    *(void *)(v17 + 744) = v25;
    operator delete(v25);
  }

  sub_10023BF24(v23, *(void **)(v17 + 712));
  uint64_t v26 = *(void **)(v17 + 680);
  if (v26)
  {
    *(void *)(v17 + 688) = v26;
    operator delete(v26);
  }

  sub_10023DE70((void *)(v17 + 632));

  sub_100242E28(v22);
  v27 = *(void **)(v17 + 504);
  if (v27)
  {
    *(void *)(v17 + 512) = v27;
    operator delete(v27);
  }

  sub_100242E28(v21);
  sub_10023DF50(v20);

  sub_10023BF24(v18, *v19);
  _Unwind_Resume(a1);
}

uint64_t sub_100235808(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0LL;

  uint64_t v3 = *(void **)(a1 + 624);
  if (v3)
  {
    [v3 invalidate];
    uint64_t v4 = *(void **)(a1 + 624);
    *(void *)(a1 + 624) = 0LL;
  }

  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    int v6 = (void *)sub_100209548(v5);
LABEL_5:
    operator delete(v6);
  }

  while (1)
  {
    uint64_t v7 = *(void *)(a1 + 432);
    if (!v7) {
      break;
    }
    uint64_t v8 = *(uint64_t **)(a1 + 424);
    v9 = (void *)v8[2];
    uint64_t v10 = *v8;
    *(void *)(v10 + 8) = v8[1];
    *(void *)v8[1] = v10;
    *(void *)(a1 + 432) = v7 - 1;
    operator delete(v8);
    if (v9)
    {
      uint64_t v11 = (void *)v9[1];
      if (v11) {
        operator delete[](v11);
      }
      int v6 = v9;
      goto LABEL_5;
    }
  }

  uint64_t v12 = *(void *)(a1 + 768);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  sub_100235994(a1);
  uint64_t v13 = *(void **)(a1 + 736);
  if (v13)
  {
    *(void *)(a1 + 744) = v13;
    operator delete(v13);
  }

  sub_10023BF24(a1 + 704, *(void **)(a1 + 712));
  v14 = *(void **)(a1 + 680);
  if (v14)
  {
    *(void *)(a1 + 688) = v14;
    operator delete(v14);
  }

  sub_10023DE70((void *)(a1 + 632));

  sub_100242E28(a1 + 536);
  uint64_t v15 = *(void **)(a1 + 504);
  if (v15)
  {
    *(void *)(a1 + 512) = v15;
    operator delete(v15);
  }

  sub_100242E28(a1 + 440);
  sub_10023DF50((void *)(a1 + 416));

  sub_10023BF24(a1 + 24, *(void **)(a1 + 32));
  return a1;
}

void sub_100235994(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 504);
  uint64_t v3 = *(uint64_t **)(a1 + 512);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
      {
        uint64_t v4 = (void *)sub_10023DFB0(*v2);
        operator delete(v4);
      }

      ++v2;
    }

    while (v2 != v3);
    uint64_t v2 = *(uint64_t **)(a1 + 504);
  }

  *(void *)(a1 + 512) = v2;
}

void *sub_1002359E8@<X0>(char a1@<W1>, void *a2@<X8>)
{
  else {
    uint64_t v2 = off_1008891F0[(char)(a1 - 1)];
  }
  return sub_10002418C(a2, v2);
}

void sub_100235A1C(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2 == 4)
  {
    sub_1003D0100(*a1, (uint64_t)&v6);
    uint64_t v4 = std::string::append(&v6, " 🅛");
  }

  else
  {
    if (a2 != 2)
    {
      sub_10002418C(a3, "");
      return;
    }

    sub_1003D0100(*a1, (uint64_t)&v6);
    uint64_t v4 = std::string::append(&v6, " 🅡");
  }

  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  a3[2] = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)a3 = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100235AD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100235AF0(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2 != 8)
  {
    sub_1003D0100(*(void *)a1, (uint64_t)a3);
    return;
  }

  __int128 v5 = @"AIRPODS_CASE";
  if (*(_DWORD *)(a1 + 80) == 8203) {
    __int128 v5 = @"POWERBEATS_PRO_CASE";
  }
  std::string v6 = v5;
  if (*(_DWORD *)(a1 + 80) == 8203) {
    uint64_t v7 = @"Powerbeats Pro Case";
  }
  else {
    uint64_t v7 = @"AirPods Case";
  }
  uint64_t v8 = v7;
  uint64_t v21 = 0LL;
  __int128 v19 = 0u;
  *(_OWORD *)__p = 0u;
  __int128 v18 = 0u;
  sub_10002418C(__p, "");
  if (sub_1003D9724(*(void *)a1, (uint64_t)&v18))
  {
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      v9 = __p;
      if (HIBYTE(v21) <= 1u) {
        goto LABEL_20;
      }
LABEL_14:
      uint64_t v10 = objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v9,  +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding", v18, v19)));

      uint64_t v8 = (__CFString *)v10;
      uint64_t v11 = (os_log_s *)qword_1008F7560;
      if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(a1 + 80);
        if (v21 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        *(_DWORD *)buf = 67109378;
        int v23 = v12;
        __int16 v24 = 2082;
        v25 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Case for buds with productId = %d reports case name %{public}s",  buf,  0x12u);
      }

      v14 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString uppercaseString](v8, "uppercaseString"));
      uint64_t v15 = objc_claimAutoreleasedReturnValue([v14 stringByReplacingOccurrencesOfString:@" " withString:@"_"]);

      std::string v6 = (__CFString *)v15;
      goto LABEL_20;
    }

    if (__p[1] > (void *)1)
    {
      v9 = (void **)__p[0];
      goto LABEL_14;
    }
  }

void sub_100235D6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100235DB8(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    if (*(void *)(a1 + 144))
    {
      if (*(void *)(a1 + 512) == *(void *)(a1 + 504))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
          sub_100662068();
        }
      }

      else
      {
        __int128 v19 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
        uint64_t v3 = *(uint64_t **)(a1 + 504);
        uint64_t v2 = *(uint64_t **)(a1 + 512);
        if (v3 != v2)
        {
          uint64_t v4 = kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
          uint64_t v5 = kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial;
          uint64_t v6 = kCFACCProperties_Endpoint_AACP_CertificateInfo_Data;
          do
          {
            uint64_t v7 = *v3;
            else {
              unint64_t v8 = *(unsigned __int8 *)(*v3 + 47);
            }
            if (v8 > 1)
            {
              uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned __int8 *)(v7 + 48)));
              int v12 = (void *)(v7 + 24);
              uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
              v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  *(void *)v7,  *(void *)(v7 + 8) - *(void *)v7));
              uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v11,  v4,  v13,  v5,  v14,  v6,  0LL));
              -[NSMutableArray addObject:](v19, "addObject:", v15);
            }

            else
            {
              v9 = (os_log_s *)qword_1008F7560;
              if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
              {
                int v10 = *(unsigned __int8 *)(v7 + 48);
                *(_DWORD *)buf = 67109120;
                LODWORD(v21) = v10;
                _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "dispatchCertificates: Cert of type %d lacks serial number",  buf,  8u);
              }
            }

            ++v3;
          }

          while (v3 != v2);
        }

        int v16 = acc_transportClient_setPropertyForEndpointWithUUID( kCFACCProperties_Endpoint_AACP_CertificateList,  v19,  *(void *)(a1 + 144));
        id v17 = (os_log_s *)qword_1008F7560;
        if (v16)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
          {
            id v18 = -[NSMutableArray count](v19, "count");
            *(_DWORD *)buf = 134217984;
            id v21 = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "dispatchCertificates: Published %lu certificates",  buf,  0xCu);
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
        {
          sub_100662094((uint64_t)buf, (uint64_t)-[NSMutableArray count](v19, "count"), v17);
        }

        sub_100235994(a1);
        *(_BYTE *)(a1 + 528) = 1;
        *(_DWORD *)(a1 + 532) = 0;
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
    {
      sub_10066203C();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
  {
    sub_100662010();
  }

void sub_1002360E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void sub_100236138(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_1006620D0(v2, v3, v4);
  }
  *(_BYTE *)(v1 + 618) = 0;
}

uint64_t sub_100236180(void *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5)
{
  v35[0] = 0LL;
  v35[1] = 0LL;
  sub_100242F28((uint64_t)v35, (uint64_t)(a1 + 45));
  if (*(_DWORD *)(a5 + 16))
  {
    int v10 = *(_DWORD *)(a5 + 20);
    int v12 = (uint64_t *)a1[42];
    uint64_t v11 = (uint64_t *)a1[43];
    if (v11 == v12)
    {
      v27 = (os_log_s *)qword_1008F7560;
      if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v10 == -1;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Warning: registerCustomDataCallback: No AACP connection (isFromDE = %d)",  buf,  8u);
      }

      uint64_t v28 = 312LL;
      goto LABEL_53;
    }

    LODWORD(v13) = 0;
    v14 = 0LL;
    do
    {
      uint64_t v16 = *v12++;
      uint64_t v15 = (uint64_t *)v16;
      unsigned int v17 = *(_DWORD *)(v16 + 80);
      else {
        uint64_t v13 = v17;
      }
    }

    while (v12 != v11);
    BOOL v33 = v10 == -1;
    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_100888C90);
    }
    int v18 = sub_100356660(qword_1008D67D0);
    if (v18)
    {
      if (v10 != -1) {
        goto LABEL_50;
      }
      if (qword_1008D67D8 != -1) {
        dispatch_once(&qword_1008D67D8, &stru_100888C90);
      }
      if (!sub_1003569C8(qword_1008D67D0))
      {
LABEL_50:
        v31 = (os_log_s *)qword_1008F7560;
        if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v10 == -1;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Warning: registerCustomDataCallback: Logging already ongoing (isFromDE = %d)",  buf,  8u);
        }

        uint64_t v28 = 10LL;
        goto LABEL_53;
      }

      if (v14)
      {
        if (qword_1008D67D8 != -1) {
          dispatch_once(&qword_1008D67D8, &stru_100888C90);
        }
        sub_1003568B8(qword_1008D67D0, *v14);
      }

      __int128 v19 = (os_log_s *)qword_1008F7560;
      if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "registerCustomDataCallback: Replacing sysdiagnose callback with DE callback",  buf,  2u);
      }
    }

    int v20 = v18 ^ 1;
    *(void *)(a5 + 8) = v13;
    BOOL v21 = v33;
  }

  else
  {
    uint64_t v22 = (os_log_s *)qword_1008F7560;
    if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "registerCustomDataCallback: Registering client type %d",  buf,  8u);
    }

    BOOL v21 = 0;
    v14 = 0LL;
    int v20 = 0;
  }

  v34[0] = 0LL;
  v34[1] = 0LL;
  sub_100242F28((uint64_t)v34, (uint64_t)(a1 + 81));
  uint64_t v23 = *a4;
  __int16 v24 = (void *)a1[70];
  unint64_t v25 = a1[71];
  uint64_t v37 = *a4;
  if (v24 != (void *)v25)
  {
    while (*v24 != a2 || v37 != v24[1])
    {
      v24 += 4;
      if (v24 == (void *)v25) {
        goto LABEL_33;
      }
    }
  }

  if (v24 == (void *)v25)
  {
LABEL_33:
    *(void *)buf = a2;
    uint64_t v37 = v23;
    int v38 = a3;
    uint64_t v39 = a5;
    if (v25 >= a1[72])
    {
      uint64_t v26 = sub_100240D84(a1 + 70, (uint64_t)buf);
    }

    else
    {
      *(void *)unint64_t v25 = a2;
      *(void *)(v25 + 8) = v23;
      *(_DWORD *)(v25 + 16) = a3;
      uint64_t v26 = v25 + 32;
      *(void *)(v25 + 24) = a5;
    }

    a1[71] = v26;
  }

  if (v14) {
    int v29 = v20;
  }
  else {
    int v29 = 0;
  }
  if (v29 == 1)
  {
    BOOL v30 = (os_log_s *)qword_1008F7560;
    if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "registerCustomDataCallback: Calling triggerAccessoryLogRetrieval (isFromDE = %d)",  buf,  8u);
    }

    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_100888C90);
    }
    sub_100355FC0(qword_1008D67D0, *v14, v21);
  }

  sub_100242FAC((uint64_t)v34);
  uint64_t v28 = 0LL;
LABEL_53:
  sub_100242FAC((uint64_t)v35);
  return v28;
}

void sub_1002365C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1002365F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a1 + 560;
  uint64_t v5 = sub_100240FD0(*(void *)(a1 + 560), *(void *)(a1 + 568), a2, *a3);
  sub_100240F6C(v4, v5, *(void *)(a1 + 568));
  return 0LL;
}

uint64_t sub_100236640(uint64_t a1)
{
  *(void *)a1 = off_1008881B0;
  free(*(void **)(a1 + 64));
  return a1;
}

void sub_100236674(void **a1)
{
  *a1 = off_1008881B0;
  free(a1[8]);
  operator delete(a1);
}

void sub_1002366A8( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  unint64_t v8 = off_1008D60D8;
  if (sub_100236788(a1, *(void *)(a1 + 40)) && sub_100236788(a1, *(void *)(a1 + 48)) && v8[70] != v8[71])
  {
    sub_1003B4E10( a2,  a3,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned int *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  a4);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
  {
    sub_100662140();
  }

BOOL sub_100236788(uint64_t a1, unint64_t a2)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100888D70);
  }
  return sub_100497204(qword_1008D61A0, a2);
}

uint64_t sub_1002367D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = a2;
  if (a2 + 32 != v2)
  {
    uint64_t v4 = a2;
    uint64_t v3 = a2;
    do
    {
      uint64_t v5 = *(void *)(v3 + 32);
      v3 += 32LL;
      uint64_t v6 = *(void *)(v4 + 40);
      *(void *)uint64_t v4 = v5;
      *(void *)(v4 + 8) = v6;
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(v4 + 48);
      *(void *)(v4 + 24) = *(void *)(v4 + 56);
      uint64_t v7 = v4 + 64;
      uint64_t v4 = v3;
    }

    while (v7 != v2);
  }

  *(void *)(a1 + 8) = v3;
  return a2;
}

uint64_t sub_10023682C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned __int8 *a5)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  char v17 = 0;
  sub_100242CA4(&v17);
  uint64_t v9 = sub_10007F92C((unsigned __int8 *)(a2 + 128), a3, a4, a5);
  sub_100242CD0(&v17);
  int v10 = (os_log_s *)qword_1008F7560;
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a2, __p);
      if (v16 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446978;
      __int128 v19 = v11;
      __int16 v20 = 1024;
      unsigned int v21 = a3;
      __int16 v22 = 1024;
      unsigned int v23 = a4;
      __int16 v24 = 1024;
      int v25 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to send custom message to %{public}s: type 0x%x, len %u, error %u",  buf,  0x1Eu);
      goto LABEL_16;
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    if (v16 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446722;
    __int128 v19 = v13;
    __int16 v20 = 1024;
    unsigned int v21 = a3;
    __int16 v22 = 1024;
    unsigned int v23 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Sent custom message to %{public}s: type 0x%x, len %u",  buf,  0x18u);
LABEL_16:
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v12 = sub_1004317E0((uint64_t)off_1008D60A8, v9, 10000);
  sub_100242CD8(&v17);
  return v12;
}

void sub_100236A68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_100236A8C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v7 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    unint64_t v8 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    uint64_t v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "send control command message to %{public}s",  buf,  0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v9 = sub_10007F428((unsigned __int8 *)(a2 + 128), a3, a4);
  sub_100242CD0(__p);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v10 = sub_1004317E0((uint64_t)off_1008D60A8, v9, 10000);
  sub_100242CD8(__p);
  return v10;
}

void sub_100236C28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100236C44(uint64_t a1, uint64_t a2, char *a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v5 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v6 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    int v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "send set country code message to %{public}s",  buf,  0xCu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v7 = operator new(1uLL);
  char v8 = *a3;
  _BYTE *v7 = *a3;
  uint64_t v9 = operator new(2uLL);
  v9[1] = a3[1];
  _BYTE *v9 = v8;
  operator delete(v7);
  uint64_t v10 = operator new(4uLL);
  void v10[2] = a3[2];
  *(_WORD *)uint64_t v10 = *(_WORD *)v9;
  operator delete(v9);
  v10[3] = a3[3];
  uint64_t v11 = operator new(8uLL);
  v11[4] = a3[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v10;
  operator delete(v10);
  v11[5] = a3[5];
  *((_WORD *)v11 + 3) = *((_WORD *)a3 + 3);
  uint64_t v12 = sub_100080A30((unsigned __int8 *)(a2 + 128), v11, 8u);
  sub_100242CD0(__p);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v13 = sub_1004317E0((uint64_t)off_1008D60A8, v12, 10000);
  operator delete(v11);
  sub_100242CD8(__p);
  return v13;
}

void sub_100236E88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100236EBC(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v7 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    char v8 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    uint64_t v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "send set notification filter message to %{public}s",  buf,  0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v9 = sub_10007F4F4((unsigned __int8 *)(a2 + 128), a3, a4);
  sub_100242CD0(__p);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v10 = sub_1004317E0((uint64_t)off_1008D60A8, v9, 10000);
  sub_100242CD8(__p);
  return v10;
}

void sub_100237058( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100237074(uint64_t a1, uint64_t a2, char a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v5 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    char v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "send get capabilities message to %{public}s",  buf,  0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v7 = sub_10007F2DC((unsigned __int8 *)(a2 + 128), a3);
  sub_100242CD0(__p);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v8 = sub_1004317E0((uint64_t)off_1008D60A8, v7, 10000);
  sub_100242CD8(__p);
  return v8;
}

void sub_100237200( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_10023721C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v5 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 134218242;
    uint64_t v13 = a3;
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Send source feature capabilities mask 0x%llx message to %{public}s",  buf,  0x16u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v7 = sub_1000813E4((unsigned __int8 *)(a2 + 128), a3);
  sub_100242CD0(__p);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v8 = sub_1004317E0((uint64_t)off_1008D60A8, v7, 10000);
  sub_100242CD8(__p);
  return v8;
}

void sub_1002373B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1002373D0(uint64_t a1, uint64_t a2)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v3 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    char v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "send request case info message to %{public}s",  buf,  0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v5 = sub_100080304((unsigned __int8 *)(a2 + 128));
  sub_100242CD0(__p);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v6 = sub_1004317E0((uint64_t)off_1008D60A8, v5, 10000);
  sub_100242CD8(__p);
  return v6;
}

void sub_100237554( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100237570(uint64_t a1, uint64_t a2)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v3 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    char v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "query stream state info message to %{public}s",  buf,  0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v5 = sub_10007F4A8((unsigned __int8 *)(a2 + 128));
  sub_100242CD0(__p);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v6 = sub_1004317E0((uint64_t)off_1008D60A8, v5, 10000);
  sub_100242CD8(__p);
  return v6;
}

void sub_1002376F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100237710(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  char v9 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v10 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    char v17 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "send easy pair req message to %{public}s",  buf,  0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v11 = sub_10007F6B8((unsigned __int8 *)(a2 + 128), a3, a4, a5);
  sub_100242CD0(__p);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v12 = sub_1004317E0((uint64_t)off_1008D60A8, v11, 10000);
  sub_100242CD8(__p);
  return v12;
}

void sub_1002378B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1002378D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v5 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "send easy pair req message to %{public}s",  buf,  0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v7 = sub_10007F84C((unsigned __int8 *)(a2 + 128), a3);
  sub_100242CD0(__p);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v8 = sub_1004317E0((uint64_t)off_1008D60A8, v7, 10000);
  sub_100242CD8(__p);
  return v8;
}

void sub_100237A5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100237A78(uint64_t a1, uint64_t a2, char a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v5 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "send get battery info message to %{public}s",  buf,  0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v7 = sub_10007F330((unsigned __int8 *)(a2 + 128), a3);
  sub_100242CD0(__p);
  if ((_DWORD)v7 && os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_10066216C();
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v8 = sub_1004317E0((uint64_t)off_1008D60A8, v7, 10000);
  sub_100242CD8(__p);
  return v8;
}

void sub_100237C30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100237C4C(uint64_t a1, uint64_t a2)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v3 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    char v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "send get in ear state info message to %{public}s",  buf,  0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v5 = sub_10007F390((unsigned __int8 *)(a2 + 128));
  sub_100242CD0(__p);
  if ((_DWORD)v5 && os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_1006621CC();
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v6 = sub_1004317E0((uint64_t)off_1008D60A8, v5, 10000);
  sub_100242CD8(__p);
  return v6;
}

void sub_100237DF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100237E10(uint64_t a1, uint64_t a2)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v3 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    char v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "send get role state info message to %{public}s",  buf,  0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v5 = sub_10007F3DC((unsigned __int8 *)(a2 + 128));
  sub_100242CD0(__p);
  if ((_DWORD)v5 && os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_10066222C();
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v6 = sub_1004317E0((uint64_t)off_1008D60A8, v5, 10000);
  sub_100242CD8(__p);
  return v6;
}

void sub_100237FB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100237FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v5 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "send time stamp message to %{public}s",  buf,  0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v7 = sub_10007FB34((unsigned __int8 *)(a2 + 128), a3);
  sub_100242CD0(__p);
  if ((_DWORD)v7 && os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_10066228C();
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v8 = sub_1004317E0((uint64_t)off_1008D60A8, v7, 10000);
  sub_100242CD8(__p);
  return v8;
}

void sub_10023818C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1002381A8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v7 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v8 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    char v15 = v8;
    __int16 v16 = 1024;
    int v17 = a3;
    __int16 v18 = 1024;
    int v19 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "notify session state to %{public}s, sesssionType -> %d, sessionState -> %d",  buf,  0x18u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  buf[0] = 0;
  sub_100242CA4(buf);
  uint64_t v9 = sub_10007FFE4((unsigned __int8 *)(a2 + 128), a3, a4);
  sub_100242CD0(buf);
  if ((_DWORD)v9 && os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_1006622EC();
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v10 = sub_1004317E0((uint64_t)off_1008D60A8, v9, 10000);
  sub_100242CD8(buf);
  return v10;
}

void sub_10023837C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_100238398(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v7 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v8 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    char v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "send keys to %{public}s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v9 = sub_1000806EC((unsigned __int8 *)(a2 + 128), a3, a4);
  if ((_DWORD)v9 && os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_10066234C();
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v10 = sub_1004317E0((uint64_t)off_1008D60A8, v9, 10000);
  sub_100242CD8(__p);
  return v10;
}

void sub_100238550( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_10023856C(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  uint64_t v5 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    char v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "request keys from %{public}s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v7 = sub_100080498((unsigned __int8 *)(a2 + 128), a3);
  if ((_DWORD)v7 && os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_1006623AC();
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v8 = sub_1004317E0((uint64_t)off_1008D60A8, v7, 10000);
  sub_100242CD8(__p);
  return v8;
}

void sub_10023871C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100238738(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    char v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "send disconnect message to %{public}s",  buf,  0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v5 = sub_10007ECEC((unsigned __int8 *)(a2 + 128));
  sub_100242CD0(__p);
  if ((_DWORD)v5 && os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_10066240C();
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v6 = sub_1004317E0((uint64_t)off_1008D60A8, v5, 10000);
  sub_100242CD8(__p);
  return v6;
}

void sub_1002388A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1002388BC(uint64_t a1, uint64_t a2, int a3, unsigned int a4, const void *a5)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  char v17 = 0;
  sub_100242CA4(&v17);
  uint64_t v9 = sub_100080358((unsigned __int8 *)(a2 + 128), a3, a4, a5);
  sub_100242CD0(&v17);
  uint64_t v10 = (os_log_s *)qword_1008F7560;
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a2, __p);
      if (v16 >= 0) {
        char v11 = __p;
      }
      else {
        char v11 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446978;
      int v19 = v11;
      __int16 v20 = 1024;
      int v21 = a3;
      __int16 v22 = 1024;
      unsigned int v23 = a4;
      __int16 v24 = 1024;
      int v25 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to send device info to %{public}s: type 0x%x, len %u, error %u",  buf,  0x1Eu);
      goto LABEL_16;
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    if (v16 >= 0) {
      char v13 = __p;
    }
    else {
      char v13 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446722;
    int v19 = v13;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 1024;
    unsigned int v23 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Sent device info to %{public}s: type 0x%x, len %u",  buf,  0x18u);
LABEL_16:
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v12 = sub_1004317E0((uint64_t)off_1008D60A8, v9, 10000);
  sub_100242CD8(&v17);
  return v12;
}

void sub_100238AF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_100238B1C(uint64_t a1, uint64_t a2, char a3, char a4, unsigned int a5, const void *a6)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  if (!*((_BYTE *)off_1008D60D8 + 328)) {
    return 111LL;
  }
  char v14 = 0;
  sub_100242CA4(&v14);
  uint64_t v11 = sub_100080190((unsigned __int8 *)(a2 + 128), a3, a4, a5, a6);
  sub_100242CD0(&v14);
  if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_10066246C();
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100888AF0);
  }
  uint64_t v12 = sub_1004317E0((uint64_t)off_1008D60A8, v11, 10000);
  sub_100242CD8(&v14);
  return v12;
}

void sub_100238C4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100238C60(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3 = sub_1000806F4(a2, 1001, (uint64_t)off_100887EF0, a3);
  if ((_DWORD)v3 && os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR)) {
    sub_1006624CC();
  }
  return v3;
}

uint64_t sub_100238CC4(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4)
{
  __int16 v12 = 0;
  char v11 = 0;
  __int16 v10 = 0;
  uint64_t v7 = sub_100173ADC((unsigned __int16)*a4, &v10, &v12, &v11);
  if (!(_DWORD)v7)
  {
    sub_10040F938(a3, 1);
    sub_10040F938(a3, 7);
    sub_10040F974(a3, *a4);
    sub_10040F974(a3, v10);
    sub_10040F974(a3, v12);
    sub_10040F938(a3, v11);
    uint64_t v8 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 184LL))(v8))
    {
      sub_10040F938(a3, 25);
      sub_10040F938(a3, 0);
    }

uint64_t sub_100238E64(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v5 = sub_10056AAD8(a2 + 8) - *(_DWORD *)(a2 + 24);
  int v25 = 0LL;
  unsigned int v6 = v5 << 16;
  if (v5 << 16 >= 1)
  {
    unsigned __int16 v7 = 0;
    unsigned __int16 v8 = 0;
    unsigned __int16 v22 = 0;
    unsigned __int16 v20 = 4;
    while (1)
    {
      int v9 = (char)sub_10040F7B0(a2);
      if (v9 < 0)
      {
        unsigned int v10 = sub_10040F7FC(a2);
        int v5 = HIWORD(v6) - 3;
      }

      else
      {
        unsigned int v10 = sub_10040F7B0(a2);
        LOWORD(v5) = v5 - 2;
      }

      unsigned int v11 = v9 & 0x7F;
      if (v11 > 0xF)
      {
        if (v11 == 16)
        {
          if (v10 != 2) {
            goto LABEL_23;
          }
          unsigned __int16 v8 = sub_10040F7FC(a2);
        }

        else
        {
          if (v11 != 18)
          {
LABEL_21:
            char v16 = (os_log_s *)qword_1008F7560;
            if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              int v27 = v9 & 0x7F;
              _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "parseAACPDescriptor Key not recognized %d",  buf,  8u);
            }

void sub_1002391E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

CFStringRef sub_100239208(unsigned int a1)
{
  if (a1 > 0xC) {
    return @"UNKNOWN";
  }
  else {
    return off_100889230[(char)a1];
  }
}

uint64_t sub_100239230(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  int v6 = sub_10056AAD8(a2 + 8);
  int v7 = *(_DWORD *)(a2 + 24);
  memset(v114, 0, sizeof(v114));
  if (qword_1008D9148 != -1) {
    dispatch_once(&qword_1008D9148, &stru_100888DB0);
  }
  v105 = v5;
  uint64_t v8 = a3 + 128;
  if (*(_DWORD *)(sub_10057E20C((uint64_t)off_1008D9140, a3 + 128) + 32) < 5u)
  {
    BOOL v106 = 0;
  }

  else
  {
    if (qword_1008D9148 != -1) {
      dispatch_once(&qword_1008D9148, &stru_100888DB0);
    }
    BOOL v106 = sub_10057E3E4((uint64_t)off_1008D9140) > 4;
  }

  LOWORD(v110) = v6 - v7;
  int v10 = (v6 - v7) << 16;
  if (v10 >= 1)
  {
    *(void *)&__int128 v9 = 136446466LL;
    __int128 v102 = v9;
    while (2)
    {
      int v11 = (char)sub_10040F7B0(a2);
      if (v11 < 0)
      {
        unsigned int v109 = sub_10040F7FC(a2);
        int v12 = HIWORD(v10) - 3;
      }

      else
      {
        unsigned int v109 = sub_10040F7B0(a2);
        LOWORD(v12) = v110 - 2;
      }

      int v13 = (__int16)v12;
      unsigned int v110 = (__int16)v12 - v109;
      if ((__int16)v12 >= (int)v109)
      {
        int v14 = v11 & 0x7F;
        int v108 = v14;
        switch(v14)
        {
          case 19:
            int v15 = _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup");
            if (v109 > 3) {
              int v16 = v15;
            }
            else {
              int v16 = 0;
            }
            if ((v106 & v16) == 1)
            {
              unsigned __int16 v17 = v109;
              uint64_t v103 = v8;
              do
              {
                int v18 = sub_10040F7FC(a2);
                uint64_t v19 = a2;
                unsigned int v20 = sub_10040F7FC(a2);
                unsigned int v21 = v20;
                if (v18 == 9)
                {
                  unsigned int v30 = (unsigned __int16)v20 / 5u;
                  unsigned int v31 = (os_log_s *)qword_1008F7560;
                  if ((unsigned __int16)v20 % 5u)
                  {
                    if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 67109120;
                      *(_DWORD *)&uint8_t buf[4] = v21;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "Invalid control command length: %u",  buf,  8u);
                    }
                  }

                  else
                  {
                    if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_INFO))
                    {
                      sub_1003CF00C(a3, buf);
                      __int16 v35 = buf;
                      if (SBYTE3(v116) < 0) {
                        __int16 v35 = *(_BYTE **)buf;
                      }
                      *(_DWORD *)v119 = 67109378;
                      *(_DWORD *)&v119[4] = v30;
                      *(_WORD *)&v119[8] = 2082;
                      *(void *)&v119[10] = v35;
                      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "parseAACPSetupComplete rcvd %u control commands from device %{public}s",  v119,  0x12u);
                      if (SBYTE3(v116) < 0) {
                        operator delete(*(void **)buf);
                      }
                    }

                    if (v21)
                    {
                      LOWORD(v36) = 0;
                      do
                      {
                        int v37 = sub_10040F7B0(v19);
                        unsigned int v38 = sub_10040F860(v19);
                        uint64_t v39 = (os_log_s *)qword_1008F7560;
                        BOOL v40 = os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEBUG);
                        if (v40)
                        {
                          v42 = sub_100216F08(v40, v37);
                          sub_100216F34(a1, v37, v38, v119);
                          int v43 = v120;
                          int v44 = *(_BYTE **)v119;
                          sub_1003CF00C(a3, __p);
                          __int16 v45 = v119;
                          if (v43 < 0) {
                            __int16 v45 = v44;
                          }
                          int v46 = __p;
                          if (v113 < 0) {
                            int v46 = *(_BYTE **)__p;
                          }
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = v42;
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = v37;
                          *(_WORD *)&buf[18] = 2082;
                          v116 = v45;
                          __int16 v117 = 2082;
                          v118 = v46;
                          _os_log_debug_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "parseAACPSetupComplete rcvd control command: %{public}s (control cmd 0x%02X) as %{public}s f rom device %{public}s",  buf,  0x26u);
                          if (v113 < 0) {
                            operator delete(*(void **)__p);
                          }
                          if (v120 < 0) {
                            operator delete(*(void **)v119);
                          }
                          uint64_t v8 = v103;
                        }

                        char v41 = (char *)operator new(0x18uLL);
                        *((_WORD *)v41 + 4) = 1;
                        *(void *)char v41 = &off_100888668;
                        *(_DWORD *)(v41 + 10) = *(_DWORD *)v8;
                        *((_WORD *)v41 + 7) = *(_WORD *)(v8 + 4);
                        v41[16] = v37;
                        *((_DWORD *)v41 + 5) = v38;
                        *(void *)buf = v41;
                        sub_10023A5E4(v114, buf);
                        unsigned int v36 = (unsigned __int16)(v36 + 5);
                      }

                      while (v36 < v21);
                    }
                  }
                }

                else if (v18 == 46)
                {
                  int v22 = sub_10040F7B0(a2);
                  int v23 = sub_10040F7B0(a2);
                  unsigned int v24 = sub_10040F7B0(a2);
                  size_t v25 = 8LL * v24;
                  uint64_t v26 = sub_1000B1814(v25);
                  sub_10040F778(v19, v26, v25);
                  int v27 = (os_log_s *)qword_1008F7560;
                  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 67109888;
                    *(_DWORD *)&uint8_t buf[4] = v22;
                    *(_WORD *)&uint8_t buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v23;
                    *(_WORD *)&buf[14] = 1024;
                    *(_DWORD *)&buf[16] = v24;
                    LOWORD(v116) = 1024;
                    *(_DWORD *)((char *)&v116 + 2) = v21;
                    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "parseAACPSetupComplete rcvd tipi table with version %u, audioState %u, sourceCount %u, length %u",  buf,  0x1Au);
                  }

                  __int16 v28 = (char *)operator new(0x30uLL);
                  *((_WORD *)v28 + 4) = 1;
                  *(void *)__int16 v28 = &off_100888A20;
                  *(_DWORD *)(v28 + 10) = *(_DWORD *)v8;
                  *((_WORD *)v28 + 7) = *(_WORD *)(v8 + 4);
                  v28[16] = v23;
                  *((void *)v28 + 3) = 0LL;
                  *((void *)v28 + 4) = 0LL;
                  *((void *)v28 + 5) = 0LL;
                  if (v24)
                  {
                    sub_10023DBC8((void *)v28 + 3, v24);
                    unsigned int v29 = (char *)*((void *)v28 + 4);
                    memmove(v29, v26, v25);
                    *((void *)v28 + 4) = &v29[8 * v24];
                  }

                  *(void *)buf = v28;
                  sub_10023A668((uint64_t)v114, buf);
                  if (v26) {
                    sub_1000B1838(v26);
                  }
                }

                else
                {
                  char v32 = (os_log_s *)qword_1008F7560;
                  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&uint8_t buf[4] = v18;
                    *(_WORD *)&uint8_t buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v21;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "parseAACPSetupComplete unhandled AACP Opcode %u, opcodeLength %u",  buf,  0xEu);
                  }

                  sub_10040F8BC(a2, v21);
                }

                __int16 v33 = v17 - v21;
                unsigned __int16 v17 = v17 - v21 - 4;
                unsigned int v34 = (unsigned __int16)(v33 - 4);
                a2 = v19;
              }

              while (v34 > 3);
            }

            else
            {
              unsigned int v34 = v109;
              unsigned __int16 v17 = v109;
            }

            goto LABEL_108;
          case 20:
            unsigned int v34 = v109;
            unsigned __int16 v17 = v109;
            if (v109 != 19) {
              goto LABEL_108;
            }
            v49 = (os_log_s *)qword_1008F7560;
            if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "parseAACPSetupComplete FC_AACP_AIRPODS_INFO received",  buf,  2u);
            }

            memset(__p, 0, sizeof(__p));
            sub_10040F778(a2, __p, 0x13uLL);
            v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)__p));
            [v105 setObject:v50 forKeyedSubscript:@"AirpodsTimeSinceBoot"];

            v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)&__p[2]));
            [v105 setObject:v51 forKeyedSubscript:@"ConnectionTimeHRB"];

            v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  __p[11]));
            [v105 setObject:v52 forKeyedSubscript:@"NumberConnections24G"];

            v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  __p[12]));
            [v105 setObject:v53 forKeyedSubscript:@"NumberConnectionsHRB"];

            v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  __p[13]));
            [v105 setObject:v54 forKeyedSubscript:@"NumberConnectionsLE"];

            v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  __p[14]));
            [v105 setObject:v55 forKeyedSubscript:@"NumberConnectionsSCO"];

            v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  __p[15]));
            [v105 setObject:v56 forKeyedSubscript:@"NumberAOSLinks"];

            v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  __p[16]));
            [v105 setObject:v57 forKeyedSubscript:@"UtpConnected"];

            v58 = @"UNKNOWN";
            [v105 setObject:v58 forKeyedSubscript:@"AudioState" v102];
            v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  __p[18]));
            [v105 setObject:v59 forKeyedSubscript:@"PendingCrashReport"];

            if (!__p[10]) {
              goto LABEL_112;
            }
            [v105 setObject:&__kCFBooleanTrue forKeyedSubscript:@"BBFCStatusSink"];
            uint64_t v67 = sub_1001EDE10((uint64_t)&__p[4], v60, v61, v62, v63, v64, v65, v66);
            v68 = (os_log_s *)qword_1008F7560;
            if (!os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_112;
            }
            sub_1003CF00C(a3, buf);
            v69 = buf;
            if (SBYTE3(v116) < 0) {
              v69 = *(_BYTE **)buf;
            }
            *(_DWORD *)v119 = v102;
            *(void *)&v119[4] = v69;
            *(_WORD *)&v119[12] = 2082;
            *(void *)&v119[14] = v67;
            _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "BB FastConnect seen by %{public}s BT Addr: %{public}s",  v119,  0x16u);
            if ((SBYTE3(v116) & 0x80000000) == 0) {
              goto LABEL_112;
            }
            v70 = *(void **)buf;
            goto LABEL_77;
          case 21:
            unsigned int v34 = v109;
            unsigned __int16 v17 = v109;
            if (v109 != 4) {
              goto LABEL_108;
            }
            *(_DWORD *)__p = 0;
            sub_10040F778(a2, __p, 4uLL);
            v71 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)__p));
            [v105 setObject:v71 forKeyedSubscript:@"BasebandDuration"];

            v72 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)&__p[2]));
            [v105 setObject:v72 forKeyedSubscript:@"BasebandDurationTotal"];

            v73 = (os_log_s *)qword_1008F7560;
            if (!os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_112;
            }
            sub_1003CF00C(a3, v119);
            v74 = v119;
            if (v120 < 0) {
              v74 = *(_BYTE **)v119;
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = v74;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = *(unsigned __int16 *)__p;
            *(_WORD *)&buf[18] = 1024;
            LODWORD(v116) = *(unsigned __int16 *)&__p[2];
            _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "FastConnect Incoming Baseband time for %{public}s took %u ms Total Baseband %u ms",  buf,  0x18u);
            if ((v120 & 0x80000000) == 0) {
              goto LABEL_112;
            }
            v70 = *(void **)v119;
LABEL_77:
            operator delete(v70);
            goto LABEL_112;
          case 22:
            unsigned int v34 = v109;
            unsigned __int16 v17 = v109;
            if (v109 != 2) {
              goto LABEL_108;
            }
            v75 = (os_log_s *)qword_1008F7560;
            if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_INFO,  "parseAACPSetupComplete FC_AACP_BUD_INEAR_STATE received",  buf,  2u);
            }

            *(_WORD *)v119 = 0;
            sub_10040F778(a2, v119, 2uLL);
            v76 = sub_100239208(v119[0]);
            v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
            [v105 setObject:v77 forKeyedSubscript:@"InEarStatusPrimary"];

            v78 = sub_100239208(v119[1]);
            v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
            [v105 setObject:v79 forKeyedSubscript:@"InEarStatusSecondary"];

            if ((v106 & _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup")) == 1)
            {
              v80 = (char *)operator new(0x18uLL);
              *((_WORD *)v80 + 4) = 1;
              *(void *)v80 = &off_100888470;
              *(_DWORD *)(v80 + 10) = *(_DWORD *)v8;
              *((_WORD *)v80 + 7) = *(_WORD *)(v8 + 4);
              *((_WORD *)v80 + 8) = *(_WORD *)v119;
              *(void *)buf = v80;
              sub_10023A668((uint64_t)v114, buf);
            }

            goto LABEL_112;
          case 23:
            unsigned int v34 = v109;
            unsigned __int16 v17 = v109;
            if (v109 != 4) {
              goto LABEL_108;
            }
            v81 = (os_log_s *)qword_1008F7560;
            if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_INFO,  "parseAACPSetupComplete FC_AACP_ROLE_STATE received",  buf,  2u);
            }

            *(_DWORD *)v119 = 0;
            sub_10040F778(a2, v119, 4uLL);
            if ((v106 & _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup")) == 1)
            {
              v82 = (char *)operator new(0x18uLL);
              *((_WORD *)v82 + 4) = 1;
              *(void *)v82 = &off_1008884A8;
              *(_DWORD *)(v82 + 10) = *(_DWORD *)v8;
              *((_WORD *)v82 + 7) = *(_WORD *)(v8 + 4);
              *((_DWORD *)v82 + 4) = *(_DWORD *)v119;
              *(void *)buf = v82;
              sub_10023A5E4(v114, buf);
            }

            goto LABEL_112;
          case 24:
            if (v109 - 6 > 0xA) {
              goto LABEL_106;
            }
            v83 = (os_log_s *)qword_1008F7560;
            if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_INFO,  "parseAACPSetupComplete FC_AACP_BATTERY_STATE received",  buf,  2u);
            }

            *(void *)buf = 0LL;
            *(void *)&uint8_t buf[8] = 0LL;
            sub_10040F778(a2, buf, v109);
            if (buf[0])
            {
              unint64_t v84 = 0LL;
              v85 = &buf[3];
              do
              {
                int v86 = *(v85 - 2);
                switch(*(v85 - 2))
                {
                  case 1u:
                  case 4u:
                    v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *v85));
                    [v105 setObject:v87 forKeyedSubscript:@"BatteryLevelPrimary"];

                    break;
                  case 2u:
                    v91 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *v85));
                    [v105 setObject:v91 forKeyedSubscript:@"BatteryLevelSecondary"];

                    break;
                  case 3u:
                  case 5u:
                  case 6u:
                  case 7u:
                    goto LABEL_97;
                  case 8u:
                    v92 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *v85));
                    [v105 setObject:v92 forKeyedSubscript:@"BatteryLevelCase"];

                    break;
                  default:
                    if (v86 == 16)
                    {
                      v88 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *v85));
                      [v105 setObject:v88 forKeyedSubscript:@"BatteryLevelPrimary"];

                      v89 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *v85));
                      [v105 setObject:v89 forKeyedSubscript:@"BatteryLevelSecondary"];
                    }

                    else
                    {
LABEL_97:
                      v90 = (os_log_s *)qword_1008F7560;
                      if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v119 = 67109120;
                        *(_DWORD *)&v119[4] = v86;
                        _os_log_error_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_ERROR,  "parseAACPDescriptor unknown battery id %d",  v119,  8u);
                      }
                    }

                    break;
                }

                v85 += 5;
                ++v84;
              }

              while (v84 < buf[0]);
            }

            if ((v106 & _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup")) == 1)
            {
              v93 = (char *)operator new(0x20uLL);
              uint64_t v94 = buf[0];
              *((_WORD *)v93 + 4) = 1;
              *(void *)v93 = &off_100888438;
              *(_DWORD *)(v93 + 10) = *(_DWORD *)v8;
              *((_WORD *)v93 + 7) = *(_WORD *)(v8 + 4);
              v93[16] = v94;
              size_t v95 = 5 * v94;
              v96 = operator new[](5 * v94);
              *((void *)v93 + 3) = v96;
              memcpy(v96, &buf[1], v95);
              *(void *)v119 = v93;
              sub_10023A5E4(v114, v119);
            }

            goto LABEL_112;
          default:
            if (v14 != 4)
            {
              v97 = (os_log_s *)qword_1008F7560;
              if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v14;
                _os_log_error_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_ERROR,  "parseAACPSetupComplete Key not recognized %d",  buf,  8u);
              }

LABEL_112:
            int v10 = v110 << 16;
            continue;
        }
      }

      break;
    }

    v99 = (os_log_s *)qword_1008F7560;
    if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v109;
      _os_log_error_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_ERROR,  "parseAACPSetupComplete not enough data remaining %d for %d",  buf,  0xEu);
    }
  }

  unsigned int v38 = (void ***)sub_100242CD8(v75);
  *(void *)v75 = &v55;
  sub_1002077E0(v38);
  *(void *)v75 = &v58;
  sub_1002077E0((void ***)v75);
  *(void *)v75 = &v61;
  sub_1002077E0((void ***)v75);
  sub_10054A428(v69);
  sub_100242FAC((uint64_t)v72);
}
}

  if ((int)a6 <= 760)
  {
    if ((int)a6 > 707)
    {
      if ((_DWORD)a6 == 708)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
        {
          sub_100366664(uu, v219);
          sub_1006994EC();
        }

        v92 = 307;
        goto LABEL_190;
      }

      if ((_DWORD)a6 == 719)
      {
        __int128 v102 = (os_log_s *)qword_1008F7620;
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
        {
          sub_100366664(uu, buf);
          uint64_t v103 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)v214 = 136446210;
          *(void *)&v214[4] = v103;
          _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  "Disconnected from device %{public}s successfully (remotely-initiated)",  v214,  0xCu);
        }

        v92 = 313;
        goto LABEL_190;
      }

      if ((_DWORD)a6 != 722) {
        goto LABEL_194;
      }
    }

    else if ((_DWORD)a6)
    {
      if ((_DWORD)a6 == 129)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
        {
          sub_100366664(uu, v219);
          sub_100699538();
        }

        goto LABEL_196;
      }

      if ((_DWORD)a6 == 159)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
        {
          sub_100366664(uu, v219);
          sub_100699700();
        }

        v93 = 0;
        v92 = 125;
        goto LABEL_200;
      }

void sub_10023A3FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  _Unwind_Resume(a1);
}

void sub_10023A5E4(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1002411E8(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10023A668(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_1002414FC((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }

  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 9));
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v6 + 8 * (v4 & 0x1FF);
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096LL;
  }
  *(void *)(v7 - 8) = *a2;
  uint64_t v8 = *(void *)(a1 + 40) + 1LL;
  *(void *)(a1 + 32) = v4 - 1;
  *(void *)(a1 + 40) = v8;
}

void *sub_10023A6E4(void *a1, void *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    uint64_t v7 = (char **)(v5 + 8 * (v4 >> 9));
    if (v6 == v5)
    {
      uint64_t v8 = 0LL;
      int v11 = 0LL;
      int v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
    }

    else
    {
      uint64_t v8 = &(*v7)[8 * (v4 & 0x1FF)];
      unint64_t v9 = a2[5] + v4;
      int v10 = (char *)(v5 + 8 * (v9 >> 9));
      int v11 = (char *)(*(void *)v10 + 8 * (v9 & 0x1FF));
    }

    sub_10024180C(a1, v7, v8, v10, v11);
  }

  return a1;
}

uint64_t sub_10023A774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)v55 = 0u;
  __int128 v56 = 0u;
  sub_10040F90C((uint64_t)v55, 0);
  sub_10040F974((uint64_t)v55, 15);
  sub_10040F974((uint64_t)v55, 4);
  if (a2)
  {
    else {
      __int16 v6 = -3;
    }
  }

  else
  {
    __int16 v6 = 122;
  }

  sub_10040F974((uint64_t)v55, 0xFFFF);
  sub_10040F974((uint64_t)v55, v6 & 0xFFFE);
  v54[0] = 0LL;
  v54[1] = 0LL;
  sub_100242F28((uint64_t)v54, a1 + 360);
  if (qword_1008D9148 != -1) {
    dispatch_once(&qword_1008D9148, &stru_100888DB0);
  }
  uint64_t v7 = sub_10057E20C((uint64_t)off_1008D9140, a2 + 128);
  uint64_t v8 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)(v7 + 32);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "composeAACPConfigure: remote fcVersion %u",  buf,  8u);
  }

  if (*(_DWORD *)(v7 + 32) >= 5u && _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup"))
  {
    sub_10040F974((uint64_t)v55, 9);
    *(_OWORD *)buf = 0u;
    __int128 v61 = 0u;
    sub_10040F90C((uint64_t)buf, 0);
    uint64_t v10 = sub_1002E6BF0();
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 344LL))(v10);
    if ((_DWORD)v11 && sub_10021D4BC(v11, a2))
    {
      sub_10040F938((uint64_t)buf, 11);
      unsigned int v12 = 500;
    }

    else
    {
      uint64_t v13 = sub_1002E6BF0();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v13 + 328LL))(v13) & 1) == 0
        && (uint64_t v14 = sub_1002E6BF0(), !(*(unsigned int (**)(uint64_t))(*(void *)v14 + 336LL))(v14))
        || !sub_1003D2B2C(a2, 13)
        || (uint64_t v15 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 720LL))(v15) & 1) != 0))
      {
LABEL_21:
        uint64_t v16 = sub_1002E6BF0();
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 720LL))(v16);
        if ((_DWORD)v17 && sub_10021D4BC(v17, a2))
        {
          sub_10040F938((uint64_t)buf, 11);
          sub_10040F9C4((uint64_t)buf, 0x1F4u);
        }

        int v18 = *(unsigned __int8 *)(a2 + 960);
        int v19 = *(unsigned __int8 *)(a2 + 976);
        sub_10040F938((uint64_t)buf, 19);
        if (v19) {
          unsigned int v20 = 2;
        }
        else {
          unsigned int v20 = 1;
        }
        sub_10040F9C4((uint64_t)buf, v20);
        if (sub_1003D2B2C(a2, 22))
        {
          sub_10040F938((uint64_t)buf, 18);
          if (qword_1008D9108 != -1) {
            dispatch_once(&qword_1008D9108, &stru_100888B70);
          }
          else {
            unsigned int v21 = 2;
          }
          sub_10040F9C4((uint64_t)buf, v21);
        }

        if (v18) {
          goto LABEL_75;
        }
        sub_10040F938((uint64_t)buf, 1);
        unsigned int v22 = sub_1003DF900(a2);
        sub_10040F9C4((uint64_t)buf, v22);
        uint64_t v52 = 0LL;
        uint64_t v53 = 0LL;
        BOOL v23 = sub_1003D55EC(a2, (_DWORD *)&v53 + 1, &v53, (_DWORD *)&v52 + 1, &v52);
        BOOL v24 = v23;
        if (sub_10021C224(v23, a2) && HIDWORD(v52) != 8208 && v24)
        {
          sub_10040F938((uint64_t)buf, 10);
          else {
            unsigned int v25 = 1;
          }
          sub_10040F9C4((uint64_t)buf, v25);
        }

        sub_10040F938((uint64_t)buf, 6);
        unsigned int v26 = sub_1003E0164(a2);
        sub_10040F9C4((uint64_t)buf, v26);
        if (sub_1003D2B2C(a2, 29) && (sub_1003D2B2C(a2, 43) & 1) == 0)
        {
          sub_10040F938((uint64_t)buf, 23);
          unsigned int v27 = sub_1003DFC14(a2);
          sub_10040F9C4((uint64_t)buf, v27);
        }

        if (sub_1003D2B2C(a2, 30))
        {
          if ((sub_1003D2B2C(a2, 38) & 1) == 0)
          {
            sub_10040F938((uint64_t)buf, 22);
            unsigned int v28 = sub_1003DFBD0(a2);
            sub_10040F9C4((uint64_t)buf, v28);
            if ((sub_1003D2B2C(a2, 43) & 1) == 0)
            {
              sub_10040F938((uint64_t)buf, 24);
              unsigned int v29 = sub_1003DFC58(a2);
              sub_10040F9C4((uint64_t)buf, v29);
            }
          }
        }

        if (sub_1003D2B2C(a2, 28))
        {
          sub_10040F938((uint64_t)buf, 26);
          unsigned int v30 = sub_1003DFA7C(a2);
          sub_10040F9C4((uint64_t)buf, v30);
        }

        if (sub_1003D2B2C(a2, 16)
          && sub_1003D2B2C(a2, 1)
          && (sub_1003D2B2C(a2, 43) & 1) == 0)
        {
          sub_10040F938((uint64_t)buf, 27);
          unsigned int v31 = sub_1003DFC9C(a2);
          sub_10040F9C4((uint64_t)buf, v31);
        }

        if (sub_1003E0350(a2, 0x15u) == 1 && sub_1003E0120(a2))
        {
          sub_10040F938((uint64_t)buf, 50);
          unsigned int v32 = sub_1003E0120(a2);
          sub_10040F9C4((uint64_t)buf, v32);
        }

        if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AllowListeningModeOff")
          && sub_1003E0350(a2, 0x13u) == 1)
        {
          sub_10040F938((uint64_t)buf, 52);
          unsigned int v33 = sub_1003E0054(a2);
          sub_10040F9C4((uint64_t)buf, v33);
        }

        unsigned int v34 = sub_1003DF988(a2);
        if (v34)
        {
          sub_10040F938((uint64_t)buf, 32);
        }

        else
        {
          __int16 v35 = (os_log_s *)qword_1008F7560;
          if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C(a2, &__p);
            if (v51 >= 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            int v37 = sub_1003D2B2C(a2, 32);
            int v38 = sub_1003DF988(a2);
            uint64_t v39 = "No";
            *(_DWORD *)v57 = 136446722;
            *(void *)&v57[4] = p_p;
            if (v37) {
              uint64_t v39 = "Yes";
            }
            *(_WORD *)&v57[12] = 2080;
            *(void *)&v57[14] = v39;
            __int16 v58 = 1024;
            int v59 = v38;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%{public}s Initialize setSmartRouteMode via connection Tipi Support = %s current SR Mode =%d",  v57,  0x1Cu);
            if (v51 < 0) {
              operator delete(__p);
            }
          }

          if (!sub_1003DD65C(a2, 1LL)) {
            goto LABEL_75;
          }
          sub_10040F938((uint64_t)buf, 32);
          unsigned int v34 = 1;
        }

        sub_10040F9C4((uint64_t)buf, v34);
LABEL_75:
        sub_10056AB04(v57, *(const void **)&buf[8], v61 - *(void *)&buf[8]);
        __int16 v40 = sub_10056AAD8((uint64_t)v57);
        sub_10040F974((uint64_t)v55, v40);
        *(void *)v57 = &off_10087FAA8;
        if (*(void *)&v57[8]) {
          sub_1002CD254(*(unsigned int **)&v57[8]);
        }
        sub_10056AB04(v57, *(const void **)&buf[8], v61 - *(void *)&buf[8]);
        char v41 = (char *)sub_10056AAF0((uint64_t)v57);
        sub_10056AB04(&__p, *(const void **)&buf[8], v61 - *(void *)&buf[8]);
        int64_t v42 = sub_10056AAD8((uint64_t)&__p);
        sub_10040F91C((uint64_t)v55, v41, v42);
        __p = &off_10087FAA8;
        if (v50) {
          sub_1002CD254(v50);
        }
        *(void *)v57 = &off_10087FAA8;
        if (*(void *)&v57[8]) {
          sub_1002CD254(*(unsigned int **)&v57[8]);
        }
        if (*(void *)&buf[8])
        {
          *(void *)&__int128 v61 = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }

        goto LABEL_83;
      }

      sub_10040F938((uint64_t)buf, 11);
      unsigned int v12 = 150;
    }

    sub_10040F9C4((uint64_t)buf, v12);
    goto LABEL_21;
  }

void sub_10023AF8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  unsigned int v27 = *(void **)(v25 - 88);
  if (v27)
  {
    *(void *)(v25 - sub_100242FAC(v40 - 80) = v27;
    operator delete(v27);
  }

  sub_100242FAC((uint64_t)&a18);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10023B0B0(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v6 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    if (v10 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fast Connect AACP Report Connection attempt for %{public}s",  buf,  0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_100410910(a1, a2, a3);
}

uint64_t sub_10023B1A8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  __int16 v6 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fast Connect AACP Setup Complete result %d",  buf,  8u);
  }

  *(void *)buf = 0LL;
  uint64_t v16 = 0LL;
  sub_100242F28((uint64_t)buf, (uint64_t)(a1 + 45));
  if (qword_1008D9148 != -1) {
    dispatch_once(&qword_1008D9148, &stru_100888DB0);
  }
  uint64_t v7 = sub_10057E20C((uint64_t)off_1008D9140, (uint64_t)(a2 + 128));
  sub_100242F54((uint64_t)buf);
  if ((_DWORD)a3)
  {
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_100888AF0);
    }
    int v8 = sub_1004317E0((uint64_t)off_1008D60A8, a3, 20000);
    sub_100410A5C((uint64_t)a1, (uint64_t)a2, v8);
  }

  else
  {
    sub_100410A5C((uint64_t)a1, (uint64_t)a2, 0);
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    if (_os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup")
      && ((BOOL v9 = sub_1003D55EC((uint64_t)a2, (_DWORD *)&v14 + 1, &v14, (_DWORD *)&v13 + 1, &v13), (_DWORD)v14 == 76)
        ? (BOOL v10 = v9)
        : (BOOL v10 = 0),
          v10))
    {
      BOOL v11 = 1;
      if ((HIDWORD(v13) - 8212) <= 0x10
        && ((1 << (BYTE4(v13) - 20)) & 0x116A1) != 0
        && *(_DWORD *)(v7 + 32) >= 5u)
      {
        if (qword_1008D9148 != -1) {
          dispatch_once(&qword_1008D9148, &stru_100888DB0);
        }
        BOOL v11 = sub_10057E3E4((uint64_t)off_1008D9140) < 5;
      }
    }

    else
    {
      BOOL v11 = 1;
    }

    sub_10021C920(a1, a2, 1, v11);
  }

  return sub_100242FAC((uint64_t)buf);
}

void sub_10023B3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10023B40C(void *a1, uint64_t a2, unsigned int a3, int a4)
{
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_100242F28((uint64_t)v23, (uint64_t)(a1 + 45));
  if (a2)
  {
    for (i = (uint64_t **)a1[42]; i != (uint64_t **)a1[43]; ++i)
    {
      BOOL v9 = *i;
      if (**i == a2)
      {
        break;
      }
    }
  }

  int v10 = _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup") ^ 1;
  if (!a4) {
    LOBYTE(v10) = 1;
  }
  if ((v10 & 1) == 0)
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v20 = 0u;
    BOOL v11 = a1 + 56;
    v24[0] = a2 + 128;
    v19[0] = v24;
    unsigned int v12 = sub_10023F1E0((uint64_t)v11, v24, (uint64_t)&unk_1006C2518, v19);
    sub_10023F4CC((uint64_t)&v20, v12 + 3);
    if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEBUG))
    {
      sub_1003CF00C(a2, v19);
      sub_10066259C();
    }

    if ((void)v21 != *((void *)&v20 + 1))
    {
      uint64_t v13 = (void *)(*((void *)&v20 + 1) + 8 * ((unint64_t)v22 >> 9));
      uint64_t v14 = (void *)(*v13 + 8 * (v22 & 0x1FF));
      uint64_t v15 = *(void *)(*((void *)&v20 + 1) + (((*((void *)&v22 + 1) + (void)v22) >> 6) & 0x3FFFFFFFFFFFFF8LL))
          + 8 * ((*((void *)&v22 + 1) + v22) & 0x1FF);
      while (v14 != (void *)v15)
      {
        if (*v14) {
          (*(void (**)(void))(*(void *)*v14 + 8LL))(*v14);
        }
        if ((void *)((char *)++v14 - *v13) == (void *)4096)
        {
          uint64_t v16 = (void *)v13[1];
          ++v13;
          uint64_t v14 = v16;
        }
      }
    }

    uint64_t v18 = a2 + 128;
    sub_100240180(v11, &v18);
    sub_1002400EC(&v20);
  }

  LOBYTE(v20) = 0;
  sub_100242CA4(&v20);
  sub_1000809A8((unsigned __int8 *)(a2 + 128), a3);
  sub_100242CD8(&v20);
  return sub_100242FAC((uint64_t)v23);
}

void sub_10023B63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_1002400EC((uint64_t *)va);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10023B684(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = sub_10051A4DC(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Playback state is now %s", (uint8_t *)&v5, 0xCu);
  }

  *(_DWORD *)(a1 + 496) = a2;
}

uint64_t sub_10023B73C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v18 = *a3;
  __int16 v19 = *((_WORD *)a3 + 2);
  int v16 = *(_DWORD *)(a2 + 128);
  __int16 v17 = *(_WORD *)(a2 + 132);
  uint64_t v6 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003FE1B4((unsigned __int8 *)&v18, v14);
    int v7 = v15;
    uint64_t v8 = (void **)v14[0];
    sub_1003FE1B4((unsigned __int8 *)&v16, __p);
    uint64_t v9 = v14;
    if (v7 < 0) {
      uint64_t v9 = v8;
    }
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315394;
    __int128 v21 = v9;
    __int16 v22 = 2080;
    BOOL v23 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "passLinkKeyRequest sending store linkkey request to accessory  %s and phone  %s",  buf,  0x16u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }

  (*(void (**)(uint64_t, int *, int *, uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, &v16, &v18, a4, 16LL);
  return 0LL;
}

void sub_10023B8A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10023B8C4(uint64_t a1, uint64_t a2, char a3)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 360);
  if (a2)
  {
    for (i = *(void ***)(a1 + 336); i != *(void ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        uint64_t v10 = sub_100405058();
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        v15[2] = sub_10023BA10;
        v15[3] = &unk_1008800D8;
        v15[4] = a2;
        char v16 = a3;
        sub_100405384(v10, v15);
        uint64_t v11 = sub_1004050C8();
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        v13[2] = sub_10023BA64;
        v13[3] = &unk_1008800D8;
        v13[4] = a2;
        char v14 = a3;
        sub_100405384(v11, v13);
        uint64_t v8 = 0LL;
        goto LABEL_9;
      }
    }
  }

  int v7 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "setAllowsAutoRoute unable to find AACP connection",  v12,  2u);
  }

  uint64_t v8 = 312LL;
LABEL_9:
  sub_100242FAC((uint64_t)v17);
  return v8;
}

void sub_10023B9FC(_Unwind_Exception *a1)
{
}

uint64_t sub_10023BA10(uint64_t a1)
{
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_100888D10);
  }
  return sub_100474DB4((uint64_t)off_1008D9028, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10023BA64(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100888B90);
  }
  return sub_1003798E4((void *)qword_1008D6450, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10023BAB8(uint64_t a1, uint64_t a2, char a3)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 360);
  if (a2)
  {
    for (i = *(void ***)(a1 + 336); i != *(void ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        uint64_t v10 = sub_100405058();
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        v15[2] = sub_10023BC04;
        v15[3] = &unk_1008800D8;
        v15[4] = a2;
        char v16 = a3;
        sub_100405384(v10, v15);
        uint64_t v11 = sub_1004050C8();
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        v13[2] = sub_10023BC58;
        v13[3] = &unk_1008800D8;
        v13[4] = a2;
        char v14 = a3;
        sub_100405384(v11, v13);
        uint64_t v8 = 0LL;
        goto LABEL_9;
      }
    }
  }

  int v7 = (os_log_s *)qword_1008F7560;
  if (os_log_type_enabled((os_log_t)qword_1008F7560, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "setAudioRouteHidden unable to find AACP connection",  v12,  2u);
  }

  uint64_t v8 = 312LL;
LABEL_9:
  sub_100242FAC((uint64_t)v17);
  return v8;
}

void sub_10023BBF0(_Unwind_Exception *a1)
{
}

uint64_t sub_10023BC04(uint64_t a1)
{
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_100888D10);
  }
  return sub_100474EFC((uint64_t)off_1008D9028, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10023BC58(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100888B90);
  }
  return sub_100379A48((void *)qword_1008D6450, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10023BCAC(uint64_t a1)
{
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_100888D10);
  }
  return sub_100475044((uint64_t)off_1008D9028, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10023BD00(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100888B90);
  }
  return sub_100379BAC((void *)qword_1008D6450, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10023BD54(uint64_t a1)
{
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_100888D10);
  }
  return sub_1004750A4((uint64_t)off_1008D9028, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10023BDA8(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100888B90);
  }
  return sub_100379C30((void *)qword_1008D6450, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10023BE04()
{
  return 1LL;
}

void sub_10023BE10(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10023E0B4(a1);
  operator delete(v1);
}

uint64_t sub_10023BE24()
{
  return 3LL;
}

uint64_t sub_10023BE2C()
{
  return 1LL;
}

uint64_t sub_10023BE34()
{
  return 0LL;
}

uint64_t sub_10023BE3C()
{
  return 0LL;
}

uint64_t sub_10023BE6C(unint64_t *a1)
{
  uint64_t result = sub_100236788((uint64_t)a1, a1[2]);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))( a1,  a1[2],  a1[3],  a1[4]);
  }
  return result;
}

_BYTE *(*sub_10023BEB4())(_BYTE *result)
{
  return sub_10040583C;
}

uint64_t sub_10023BEC0()
{
  return 1LL;
}

uint64_t sub_10023BEC8()
{
  return 1LL;
}

uint64_t sub_10023BED0()
{
  return 0LL;
}

void *sub_10023BED8(void *a1)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_100242DC4(a1 + 3);
  return a1;
}

void sub_10023BF08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10023BF24(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10023BF24(a1, *a2);
    sub_10023BF24(a1, a2[1]);
    operator delete(a2);
  }

void sub_10023BF64(uint64_t a1, uint64_t a2)
{
  int v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_10023BFEC(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10023BFEC(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      __int16 v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      __int16 v19 = 0LL;
    }
    __int128 v20 = &v19[8 * v16];
    __p = v19;
    unsigned int v27 = v20;
    unsigned int v28 = v20;
    unsigned int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        BOOL v23 = (char *)sub_100008BA0(v8, v22);
        __int128 v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        unsigned int v27 = v20;
        unsigned int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        unsigned int v27 = v20;
      }
    }

    *(void *)__int128 v20 = *(void *)v3;
    unsigned int v28 = v20 + 8;
    unint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)unint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_10023C1F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10023C228(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 88; i += 8LL)
  {
    uint64_t v3 = *(const void **)(a1 + i);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + i) = 0LL;
    }
  }

  unint64_t v4 = *(const void **)(a1 + 88);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 88) = 0LL;
  }

  return a1;
}

uint64_t sub_10023C280(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_100223060((uint64_t)off_1008D60D8, a1 + 10);
}

void sub_10023C2D8(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_1002231DC(off_1008D60D8, a1 + 10, *(unsigned __int16 *)(a1 + 16), *(unsigned int *)(a1 + 20));
}

void sub_10023C338(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_100223458(off_1008D60D8, (unsigned __int8 *)(a1 + 10), *(_DWORD *)(a1 + 16));
}

uint64_t sub_10023C38C(uint64_t a1, int *a2, unsigned __int16 *a3, unsigned int a4, int a5)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_1008883C8;
  int v5 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v5;
  *(_DWORD *)(a1 + 32) = a5;
  *(void *)(a1 + 24) = 0LL;
  if (!a3)
  {
    uint64_t v10 = "data";
    goto LABEL_14;
  }

  if (a4 != 1)
  {
    if (a4)
    {
      int v7 = *a3;
      *(_WORD *)(a1 + 16) = v7;
      if (v7 == 30)
      {
        if (a4 >= 4)
        {
          uint64_t v8 = a3[1];
LABEL_10:
          *(void *)(a1 + 24) = v8;
          return a1;
        }

uint64_t sub_10023C468(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_100223A1C((uint64_t)off_1008D60D8, a1 + 10, *(unsigned __int16 *)(a1 + 16), *(void *)(a1 + 24));
}

void *sub_10023C4C0(void *a1)
{
  *a1 = &off_100888400;
  uint64_t v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023C4F8(void *__p)
{
  void *__p = &off_100888400;
  uint64_t v2 = (void *)__p[3];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

uint64_t sub_10023C530(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_100223EC8((uint64_t)off_1008D60D8, a1 + 10, *(_BYTE *)(a1 + 16), *(void *)(a1 + 24));
}

void *sub_10023C588(void *a1)
{
  *a1 = &off_100888438;
  uint64_t v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023C5C0(void *__p)
{
  void *__p = &off_100888438;
  uint64_t v2 = (void *)__p[3];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void sub_10023C5F8(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_100225D24((uint64_t)off_1008D60D8, a1 + 10, *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 **)(a1 + 24));
}

void sub_10023C658(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_1002269E0((uint64_t)off_1008D60D8, a1 + 10, (unsigned __int8 *)(a1 + 16));
}

void sub_10023C6B4(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_100226D60((uint64_t)off_1008D60D8, a1 + 10, (unsigned __int8 *)(a1 + 16));
}

void *sub_10023C710(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_100227574((uint64_t)off_1008D60D8, a1 + 10, a1 + 16, *(unsigned __int8 *)(a1 + 22));
}

unsigned __int8 *sub_10023C770(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_100227EA8((uint64_t)off_1008D60D8, a1 + 10, a1 + 16, *(unsigned __int8 *)(a1 + 22));
}

void sub_10023C7D0()
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
}

uint64_t sub_10023C7F8(uint64_t a1, int *a2, unsigned int a3, uint64_t a4, char a5)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_100888588;
  int v8 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v8;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 32) = a5;
  uint64_t v9 = operator new[](16LL * a3);
  *(void *)(a1 + 24) = v9;
  if (a3)
  {
    uint64_t v10 = v9;
    uint64_t v11 = a3;
    do
    {
      _WORD *v10 = *(_WORD *)a4;
      size_t v12 = *(unsigned __int16 *)(a4 + 2);
      v10[1] = v12;
      char v13 = operator new[](v12);
      *((void *)v10 + 1) = v13;
      memcpy(v13, *(const void **)(a4 + 8), v12);
      a4 += 16LL;
      v10 += 8;
      --v11;
    }

    while (v11);
  }

  return a1;
}

void sub_10023C8B0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10023C920(a1);
  operator delete(v1);
}

uint64_t sub_10023C8C4(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_100228150((uint64_t)off_1008D60D8, a1 + 10, *(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_10023C920(uint64_t a1)
{
  *(void *)a1 = off_100888588;
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = 8LL;
    do
    {
      int v5 = *(void **)(*(void *)(a1 + 24) + v4);
      if (v5)
      {
        operator delete[](v5);
        unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
      }

      ++v3;
      v4 += 16LL;
    }

    while (v3 < v2);
  }

  uint64_t v6 = *(void **)(a1 + 24);
  if (v6) {
    operator delete[](v6);
  }
  return a1;
}

void *sub_10023C99C(unsigned __int16 *a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_100229058((uint64_t)off_1008D60D8, (uint64_t)(a1 + 5), a1[8], a1[9], a1[10]);
}

void *sub_10023C9F8(void *a1)
{
  *a1 = &off_1008885F8;
  unsigned int v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023CA30(void *__p)
{
  void *__p = &off_1008885F8;
  unsigned int v2 = (void *)__p[3];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void *sub_10023CA68(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_100229460( (uint64_t)off_1008D60D8,  a1 + 10,  *(_DWORD *)(a1 + 20),  *(unsigned __int16 *)(a1 + 16),  *(void *)(a1 + 24));
}

void sub_10023CACC(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_10022A5BC(a1, a1 + 10, *(_DWORD *)(a1 + 16));
}

void sub_10023CB20(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_10022A6F4((uint64_t)off_1008D60D8, a1 + 10, *(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 20));
}

void *sub_10023CB78(void *a1)
{
  *a1 = &off_1008886A0;
  unsigned int v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023CBB0(void *__p)
{
  void *__p = &off_1008886A0;
  unsigned int v2 = (void *)__p[3];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

std::string *sub_10023CBE8(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022B340( (uint64_t)off_1008D60D8,  (void *)(a1 + 10),  *(unsigned __int8 *)(a1 + 16),  *(unsigned __int16 *)(a1 + 18),  *(void *)(a1 + 24));
}

void *sub_10023CC44(void *a1)
{
  *a1 = &off_1008886D8;
  unsigned int v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023CC7C(void *__p)
{
  void *__p = &off_1008886D8;
  unsigned int v2 = (void *)__p[3];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void sub_10023CCB4(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_10022CCF0( (uint64_t)off_1008D60D8,  (int *)(a1 + 10),  *(unsigned __int8 *)(a1 + 16),  *(unsigned __int16 *)(a1 + 18),  *(const UInt8 **)(a1 + 24));
}

void *sub_10023CD10(void *a1)
{
  *a1 = &off_100888710;
  unsigned int v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023CD48(void *__p)
{
  void *__p = &off_100888710;
  unsigned int v2 = (void *)__p[3];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void sub_10023CD80(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_10022CE90((uint64_t)off_1008D60D8, a1 + 10, *(unsigned __int16 *)(a1 + 16), *(const UInt8 **)(a1 + 24));
}

void *sub_10023CDD8(void *a1)
{
  *a1 = &off_100888748;
  unsigned int v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023CE10(void *__p)
{
  void *__p = &off_100888748;
  unsigned int v2 = (void *)__p[3];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void sub_10023CE48(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_10022D0B8( a1,  a1 + 10,  *(unsigned __int8 *)(a1 + 16),  *(unsigned __int8 *)(a1 + 17),  *(unsigned __int16 *)(a1 + 18),  *(unsigned __int16 **)(a1 + 24));
}

uint64_t sub_10023CEA0(uint64_t a1, int *a2, __int128 *a3)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_100888780;
  int v4 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v4;
  __int128 v5 = *a3;
  *(_OWORD *)(a1 + 30) = *(__int128 *)((char *)a3 + 14);
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v6 = *(const void **)((char *)a3 + 22);
  if (v6)
  {
    size_t v7 = strlen(*(const char **)((char *)a3 + 22)) + 1LL;
    int v8 = operator new[](v7);
    *(void *)(a1 + 48) = v8;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 38) = v8;
  }

  return a1;
}

void *sub_10023CF34(void *a1)
{
  *a1 = &off_100888780;
  unsigned int v2 = (void *)a1[6];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023CF6C(void *__p)
{
  void *__p = &off_100888780;
  unsigned int v2 = (void *)__p[6];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void sub_10023CFA4(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_10022D338((uint64_t)off_1008D60D8, a1 + 10, (unsigned __int8 *)(a1 + 16));
}

void *sub_10023CFF8(void *a1)
{
  *a1 = &off_1008887B8;
  unsigned int v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023D030(void *__p)
{
  void *__p = &off_1008887B8;
  unsigned int v2 = (void *)__p[3];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void *sub_10023D068(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022D888( a1,  a1 + 10,  (unsigned int *)(a1 + 16),  *(unsigned __int16 *)(a1 + 22),  *(unsigned __int8 **)(a1 + 24));
}

uint64_t sub_10023D0BC( uint64_t a1, int *a2, char a3, char a4, char a5, char a6, char *__s, unsigned int a8, void *__src)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1008887F0;
  int v11 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v11;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 17) = a4;
  *(_BYTE *)(a1 + 18) = a5;
  *(_BYTE *)(a1 + 19) = a6;
  sub_10002418C((void *)(a1 + 24), __s);
  *(_WORD *)(a1 + 48) = a8;
  size_t v12 = operator new[](a8);
  *(void *)(a1 + 56) = v12;
  memcpy(v12, __src, a8);
  return a1;
}

void sub_10023D14C(_Unwind_Exception *exception_object)
{
}

void sub_10023D16C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10023D284(a1);
  operator delete(v1);
}

void sub_10023D180(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  unsigned int v2 = off_1008D60D8;
  int v3 = *(unsigned __int8 *)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 17);
  int v5 = *(unsigned __int8 *)(a1 + 18);
  int v6 = *(unsigned __int8 *)(a1 + 19);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_100024238(__p, *(void **)(a1 + 24), *(void *)(a1 + 32));
  }

  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 40);
  }

  sub_10022DA2C((uint64_t)v2, a1 + 10, v3, v4, v5, v6, (char *)__p, *(unsigned __int16 *)(a1 + 48), *(char **)(a1 + 56));
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10023D268( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10023D284(uint64_t a1)
{
  *(void *)a1 = off_1008887F0;
  unsigned int v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void *sub_10023D2CC(void *a1)
{
  *a1 = &off_100888828;
  unsigned int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10023D308(void *__p)
{
  void *__p = &off_100888828;
  unsigned int v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_10023D344(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022DFF4((uint64_t)off_1008D60D8, a1 + 10, a1 + 16, *(unsigned __int8 *)(a1 + 40));
}

char *sub_10023D39C(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000LL) != 0) {
    abort();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *sub_10023D3D8(void *a1)
{
  *a1 = &off_100888860;
  unsigned int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10023D414(void *__p)
{
  void *__p = &off_100888860;
  unsigned int v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_10023D450(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022E7D0((uint64_t)off_1008D60D8, a1 + 10, (void *)(a1 + 16));
}

void *sub_10023D4A4(void *a1)
{
  *a1 = &off_100888898;
  unsigned int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10023D4E0(void *__p)
{
  void *__p = &off_100888898;
  unsigned int v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_10023D51C(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022E99C((uint64_t)off_1008D60D8, a1 + 10, 0LL, (unsigned __int8 **)(a1 + 24));
}

uint64_t sub_10023D57C(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022EE94((uint64_t)off_1008D60D8, a1 + 10, *(void *)(a1 + 16));
}

uint64_t sub_10023D5D0(uint64_t a1, int *a2, int a3, uint64_t a4)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_100888908;
  int v5 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v5;
  *(_BYTE *)(a1 + 16) = a3;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  switch(a3)
  {
    case 0:
      size_t v7 = (char *)operator new(9uLL);
      *(void *)size_t v7 = *(void *)a4;
      v7[8] = *(_BYTE *)(a4 + 8);
      uint64_t v8 = v7 + 9;
      goto LABEL_5;
    case 1:
      size_t v7 = (char *)operator new(0xBuLL);
      *(void *)size_t v7 = *(void *)a4;
      *(_DWORD *)(v7 + 7) = *(_DWORD *)(a4 + 7);
      uint64_t v8 = v7 + 11;
      goto LABEL_5;
    case 2:
    case 3:
      size_t v7 = (char *)operator new(8uLL);
      *(void *)size_t v7 = *(void *)a4;
      uint64_t v8 = v7 + 8;
LABEL_5:
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v8;
      *(void *)(a1 + 40) = v8;
      break;
    default:
      return a1;
  }

  return a1;
}

void *sub_10023D6A4(void *a1)
{
  *a1 = &off_100888908;
  unsigned int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10023D6E0(void *__p)
{
  void *__p = &off_100888908;
  unsigned int v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_10023D71C(uint64_t a1, uint64_t a2)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_10022EFD4(a1, a2, *(unsigned __int8 *)(a1 + 16), (unsigned __int8 **)(a1 + 24));
}

void *sub_10023D768(void *a1)
{
  *a1 = &off_100888940;
  unsigned int v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10023D7A4(void *__p)
{
  void *__p = &off_100888940;
  unsigned int v2 = (void *)__p[5];
  if (v2)
  {
    __p[6] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_10023D7E0(uint64_t a1, uint64_t a2)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022E22C( (uint64_t)off_1008D60D8,  a2,  *(unsigned __int8 *)(a1 + 16),  *(void *)(a1 + 24),  *(unsigned __int16 *)(a1 + 32),  (void *)(a1 + 40));
}

void *sub_10023D83C(void *a1)
{
  *a1 = &off_100888978;
  unsigned int v2 = (void *)a1[2];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023D874(void *__p)
{
  void *__p = &off_100888978;
  unsigned int v2 = (void *)__p[2];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void sub_10023D8AC(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_10022FDD8( (uint64_t)off_1008D60D8,  a1 + 10,  *(const UInt8 **)(a1 + 16),  *(unsigned __int16 *)(a1 + 24),  *(unsigned __int8 *)(a1 + 26),  *(unsigned __int8 *)(a1 + 27));
}

void *sub_10023D90C(void *a1)
{
  *a1 = &off_1008889B0;
  unsigned int v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023D944(void *__p)
{
  void *__p = &off_1008889B0;
  unsigned int v2 = (void *)__p[3];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

uint64_t sub_10023D97C(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022F2CC( (uint64_t)off_1008D60D8,  (unsigned __int8 *)(a1 + 10),  *(unsigned __int16 *)(a1 + 16),  *(void *)(a1 + 24));
}

void *sub_10023D9D4(void *a1)
{
  *a1 = &off_1008889E8;
  unsigned int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10023DA10(void *__p)
{
  void *__p = &off_1008889E8;
  unsigned int v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_10023DA4C(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022F3D8((uint64_t)off_1008D60D8, a1 + 10, (uint64_t *)(a1 + 16));
}

void *sub_10023DAA0(void *a1)
{
  *a1 = &off_100888A20;
  unsigned int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10023DADC(void *__p)
{
  void *__p = &off_100888A20;
  unsigned int v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_10023DB18(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  unsigned int v2 = off_1008D60D8;
  int v3 = *(unsigned __int8 *)(a1 + 16);
  sub_100240540(__p, a1 + 24);
  sub_10022F7BC((uint64_t)v2, a1 + 10, v3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

void sub_10023DBAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10023DBC8(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  uint64_t result = (char *)sub_100008BA0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_10023DC04(void *a1)
{
  *a1 = &off_100888A58;
  unsigned int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10023DC40(void *__p)
{
  void *__p = &off_100888A58;
  unsigned int v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_10023DC7C(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022F5E0((uint64_t)off_1008D60D8, a1 + 10, 0LL, (uint64_t *)(a1 + 24));
}

void *sub_10023DCD4(void *a1)
{
  *a1 = &off_100888A90;
  unsigned int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10023DD10(void *__p)
{
  void *__p = &off_100888A90;
  unsigned int v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_10023DD4C(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  return sub_10022FB8C((uint64_t)off_1008D60D8, a1 + 10, *(unsigned __int8 *)(a1 + 16), (unsigned __int8 **)(a1 + 24));
}

void *sub_10023DDA4(void *a1)
{
  *a1 = &off_100888AC8;
  unsigned int v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10023DDDC(void *__p)
{
  void *__p = &off_100888AC8;
  unsigned int v2 = (void *)__p[3];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void sub_10023DE14(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100888C10);
  }
  sub_10022D5B8( (uint64_t)off_1008D60D8,  a1 + 10,  *(unsigned __int16 *)(a1 + 16),  *(unsigned __int16 *)(a1 + 18),  *(char **)(a1 + 24));
}

uint64_t sub_10023DE70(void *a1)
{
  unsigned int v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      unsigned int v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    size_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_10023DF04((uint64_t)a1);
}

uint64_t sub_10023DF04(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void *sub_10023DF50(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8LL);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0LL;
    if (result != v1)
    {
      do
      {
        unint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }

      while (v4 != v1);
    }
  }

  return result;
}

uint64_t sub_10023DFB0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_10023DFF0(uint64_t a1, int a2, __int128 *a3, unsigned int a4, char *__src, char a6)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 24), *(void **)a3, *((void *)a3 + 1));
    uint64_t v10 = *(char **)(a1 + 8);
  }

  else
  {
    uint64_t v10 = 0LL;
    __int128 v11 = *a3;
    *(void *)(a1 + 40) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v11;
  }

  *(_BYTE *)(a1 + 48) = a6;
  sub_10023E170(a1, v10, __src, &__src[a4], a4);
  return a1;
}

void sub_10023E080(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10023E0B4(uint64_t a1)
{
  *(void *)a1 = off_100887D30;
  *(void *)(a1 + 256) = &off_100887E08;
  *(void *)(a1 + 2sub_100242FAC(v1 - 64) = off_100887E20;
  *(void *)(a1 + 272) = off_100887E48;
  *(void *)(a1 + 2sub_100242FAC(v40 - 80) = &off_100887E78;
  *(void *)(a1 + 288) = off_100887E90;
  *(void *)(a1 + 296) = off_100887EC0;
  sub_100242E28(a1 + 648);
  sub_100242E28(a1 + 584);
  uint64_t v2 = *(void **)(a1 + 560);
  if (v2)
  {
    *(void *)(a1 + 568) = v2;
    operator delete(v2);
  }

  sub_10023BF24(a1 + 536, *(void **)(a1 + 544));
  uint64_t v3 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 64LL))(v3);
  }
  sub_10023E7DC(a1 + 448);

  sub_100242E28(a1 + 360);
  unint64_t v4 = *(void **)(a1 + 336);
  if (v4)
  {
    *(void *)(a1 + 344) = v4;
    operator delete(v4);
  }

  return sub_100213D34(a1);
}

char *sub_10023E170(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  unint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    __int128 v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      abort();
    }
    char v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      uint64_t v17 = (char *)operator new(v15);
    }

    else
    {
      size_t v16 = 0LL;
      uint64_t v17 = 0LL;
    }

    unsigned int v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    unsigned int v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }

      while (v13);
      uint64_t v10 = *(char **)(a1 + 8);
      unsigned int v28 = v17;
    }

    uint64_t v30 = &v27[a5];
    unsigned int v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    unsigned int v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }

  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    __int16 v19 = &__src[a5];
    unint64_t v21 = *(char **)(a1 + 8);
LABEL_17:
    unint64_t v22 = &v5[a5];
    BOOL v23 = &v21[-a5];
    uint64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      uint64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }

      while (v25);
    }

    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }

  __int16 v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  unint64_t v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

uint64_t sub_10023E354(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_10023E3D0((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32LL;
    }

    while (v6);
  }

  return a1;
}

void sub_10023E3B8(_Unwind_Exception *a1)
{
}

uint64_t *sub_10023E3D0(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v6 = (uint64_t **)sub_10023E45C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10023E5F4((uint64_t)a1, a4, v8);
    sub_100029630(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }

  return result;
}

const void **sub_10023E45C(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || sub_100024124((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }

      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }

    __int128 v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        uint64_t v12 = v11;
        __int128 v11 = (const void **)v11[1];
      }

      while (v11);
    }

    else
    {
      size_t v16 = a2;
      do
      {
        uint64_t v12 = (const void **)v16[2];
        BOOL v17 = *v12 == v16;
        size_t v16 = (uint64_t *)v12;
      }

      while (v17);
    }

    return (const void **)sub_10023E6A4((uint64_t)a1, a3, a5);
  }

  if (sub_100024124((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      unint64_t v14 = (const void **)a2[1];
      do
      {
        size_t v15 = v14;
        unint64_t v14 = (const void **)*v14;
      }

      while (v14);
    }

    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        size_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }

      while (!v17);
    }

    if (v15 != v9)
    {
      uint64_t v13 = *a4;
    }

    if (v13)
    {
      *a3 = v15;
      return v15;
    }

    else
    {
      *a3 = (const void **)a2;
    }

    return (const void **)a4;
  }

  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

_BYTE *sub_10023E5F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = a3 + 1;
  size_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_100024238(result, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v7 + 6) = *(void *)(a2 + 16);
  }

  *((_DWORD *)v7 + 14) = *(_DWORD *)(a2 + 24);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10023E688(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10023E740(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_10023E6A4(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (!sub_100024124(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }

void sub_10023E740(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_10023E78C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10023E78C(a1, *(void *)a2);
    sub_10023E78C(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

uint64_t sub_10023E7DC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10023E814(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1002400EC(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_10023E850(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10023E880(_Unwind_Exception *a1)
{
}

void sub_10023E894(id a1)
{
  uint64_t v1 = operator new(0x48uLL);
  sub_10054A778((uint64_t)v1);
  off_1008D90F0 = v1;
}

void sub_10023E8C4(_Unwind_Exception *a1)
{
}

void sub_10023E8D8(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 18) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 108) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 28) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 58) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_10023E9E0(_Unwind_Exception *a1)
{
}

void sub_10023E9F4(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_10023EA24(_Unwind_Exception *a1)
{
}

void sub_10023EA38(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_100266BF8();
  qword_1008D9100 = (uint64_t)v1;
}

void sub_10023EA68(_Unwind_Exception *a1)
{
}

uint64_t sub_10023EA7C(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)sub_10023EACC((uint64_t)a1, a2);
  uint64_t v4 = v3;
  sub_1001FDBCC(a1, v3);
  operator delete(v4);
  return 1LL;
}

uint64_t sub_10023EACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = bswap32(*(_DWORD *)(v3 + 25));
    unsigned int v7 = bswap32(*(_DWORD *)a2);
    if (v6 != v7) {
      goto LABEL_7;
    }
    unsigned int v6 = bswap32(*(unsigned __int16 *)(v3 + 29)) >> 16;
    unsigned int v8 = bswap32(*(unsigned __int16 *)(a2 + 4));
    if (v6 != HIWORD(v8))
    {
      unsigned int v7 = HIWORD(v8);
LABEL_7:
      if (v6 < v7) {
        int v9 = -1;
      }
      else {
        int v9 = 1;
      }
      goto LABEL_10;
    }

    int v9 = 0;
LABEL_10:
    BOOL v10 = v9 < 0;
    if (v9 >= 0) {
      __int128 v11 = (uint64_t *)v3;
    }
    else {
      __int128 v11 = (uint64_t *)(v3 + 8);
    }
    if (!v10) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v11;
  }

  while (*v11);
  if (v5 == v2) {
    return v2;
  }
  unsigned int v12 = bswap32(*(_DWORD *)a2);
  unsigned int v13 = bswap32(*(_DWORD *)(v5 + 25));
  if (v12 != v13) {
    goto LABEL_20;
  }
  unsigned int v12 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  unsigned int v14 = bswap32(*(unsigned __int16 *)(v5 + 29));
  if (v12 != HIWORD(v14))
  {
    unsigned int v13 = HIWORD(v14);
LABEL_20:
    int v15 = v12 < v13 ? -1 : 1;
    if (v15 < 0) {
      return v2;
    }
  }

  return v5;
}

void sub_10023EBA4(id a1)
{
  uint64_t v1 = operator new(0x310uLL);
  sub_10036BB90();
  qword_1008D6450 = (uint64_t)v1;
}

void sub_10023EBD4(_Unwind_Exception *a1)
{
}

void sub_10023EBE8(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003ADFF0((uint64_t)v1);
  off_1008D5F38 = v1;
}

void sub_10023EC18(_Unwind_Exception *a1)
{
}

void sub_10023EC2C(id a1)
{
  uint64_t v1 = operator new(0xF8uLL);
  sub_1003EC784((uint64_t)v1);
  off_1008D60B8 = v1;
}

void sub_10023EC5C(_Unwind_Exception *a1)
{
}

void sub_10023EC70(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10023ECA0(_Unwind_Exception *a1)
{
}

void sub_10023ECB4(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213A00((uint64_t)v1);
  off_1008D60D8 = v1;
}

void sub_10023ECE4(_Unwind_Exception *a1)
{
}

void sub_10023ECF8(id a1)
{
  uint64_t v1 = operator new(0x1B0uLL);
  sub_100213528((uint64_t)v1);
  off_1008D9110 = v1;
}

void sub_10023ED28(_Unwind_Exception *a1)
{
}

void sub_10023ED3C(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_10023ED6C(_Unwind_Exception *a1)
{
}

char *sub_10023ED80(uint64_t **a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v11 = 0LL;
  unsigned int v6 = sub_10023EE14((uint64_t)a1, &v11, a2);
  unsigned int v7 = (char *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    unsigned int v7 = (char *)operator new(0x20uLL);
    __int16 v9 = *((_WORD *)*a4 + 2);
    *(_DWORD *)(v7 + 25) = **a4;
    *(_WORD *)(v7 + 29) = v9;
    v7[31] = 0;
    sub_100029630(a1, v11, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t *sub_10023EE14(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    while (1)
    {
      unsigned int v6 = v4;
      unsigned int v7 = bswap32(*(_DWORD *)a3);
      unsigned int v8 = bswap32(*(_DWORD *)((char *)v6 + 25));
      if (v7 != v8) {
        goto LABEL_8;
      }
      unsigned int v7 = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
      unsigned int v9 = bswap32(*(unsigned __int16 *)((char *)v6 + 29));
      if (v7 == HIWORD(v9))
      {
LABEL_12:
        unsigned int v11 = bswap32(*(_DWORD *)((char *)v6 + 25));
        unsigned int v12 = bswap32(*(_DWORD *)a3);
        if (v11 == v12)
        {
          unsigned int v11 = bswap32(*(unsigned __int16 *)((char *)v6 + 29)) >> 16;
          unsigned int v13 = bswap32(*(unsigned __int16 *)(a3 + 4));
          if (v11 == HIWORD(v13)) {
            goto LABEL_22;
          }
          unsigned int v12 = HIWORD(v13);
        }

        if (v11 < v12) {
          int v14 = -1;
        }
        else {
          int v14 = 1;
        }
        if ((v14 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        uint64_t result = v6 + 1;
        uint64_t v4 = (uint64_t *)v6[1];
        if (!v4) {
          goto LABEL_22;
        }
      }

      else
      {
        unsigned int v8 = HIWORD(v9);
LABEL_8:
        if (v7 < v8) {
          int v10 = -1;
        }
        else {
          int v10 = 1;
        }
        if ((v10 & 0x80000000) == 0) {
          goto LABEL_12;
        }
        uint64_t v4 = (uint64_t *)*v6;
        uint64_t result = v6;
        if (!*v6) {
          goto LABEL_22;
        }
      }
    }
  }

  unsigned int v6 = result;
LABEL_22:
  *a2 = v6;
  return result;
}

uint64_t sub_10023EEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t result = 1LL;
    while (1)
    {
      unsigned int v4 = bswap32(*(_DWORD *)a2);
      unsigned int v5 = bswap32(*(_DWORD *)((char *)v2 + 25));
      if (v4 == v5)
      {
        unsigned int v4 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
        unsigned int v6 = bswap32(*(unsigned __int16 *)((char *)v2 + 29));
        if (v4 == HIWORD(v6)) {
          break;
        }
        unsigned int v5 = HIWORD(v6);
      }

      int v7 = v4 < v5 ? -1 : 1;
      if ((v7 & 0x80000000) == 0) {
        break;
      }
LABEL_19:
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        return 0LL;
      }
    }

    unsigned int v8 = bswap32(*(_DWORD *)((char *)v2 + 25));
    unsigned int v9 = bswap32(*(_DWORD *)a2);
    if (v8 == v9)
    {
      unsigned int v8 = bswap32(*(unsigned __int16 *)((char *)v2 + 29)) >> 16;
      unsigned int v10 = bswap32(*(unsigned __int16 *)(a2 + 4));
      if (v8 == HIWORD(v10))
      {
        int v11 = 0;
LABEL_17:
        if ((v11 & 0x80000000) == 0) {
          return result;
        }
        ++v2;
        goto LABEL_19;
      }

      unsigned int v9 = HIWORD(v10);
    }

    if (v8 < v9) {
      int v11 = -1;
    }
    else {
      int v11 = 1;
    }
    goto LABEL_17;
  }

  return 0LL;
}

char *sub_10023EFAC(char **a1, __int128 *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unsigned int v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x555555555555555LL) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v25 = v7;
  if (v10) {
    int v11 = (char *)sub_10023F114(v7, v10);
  }
  else {
    int v11 = 0LL;
  }
  unsigned int v12 = &v11[24 * v3];
  unint64_t v22 = v11;
  v23.i64[0] = (uint64_t)v12;
  v23.i64[1] = (uint64_t)v12;
  uint64_t v24 = &v11[24 * v10];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100024238(v12, *(void **)a2, *((void *)a2 + 1));
    int v14 = (char *)v23.i64[1];
    unsigned int v12 = (char *)v23.i64[0];
  }

  else
  {
    __int128 v13 = *a2;
    *((void *)v12 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unsigned int v12 = v13;
    int v14 = &v11[24 * v3];
  }

  size_t v16 = *a1;
  unint64_t v15 = (unint64_t)a1[1];
  if ((char *)v15 == *a1)
  {
    int64x2_t v18 = vdupq_n_s64(v15);
  }

  else
  {
    do
    {
      __int128 v17 = *(_OWORD *)(v15 - 24);
      *((void *)v12 - 1) = *(void *)(v15 - 8);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 24;
      *(void *)(v15 - 16) = 0LL;
      *(void *)(v15 - 8) = 0LL;
      *(void *)(v15 - 24) = 0LL;
      v15 -= 24LL;
    }

    while ((char *)v15 != v16);
    int64x2_t v18 = *(int64x2_t *)a1;
  }

  __int16 v19 = v14 + 24;
  *a1 = v12;
  a1[1] = v14 + 24;
  int64x2_t v23 = v18;
  int64_t v20 = a1[2];
  a1[2] = v24;
  uint64_t v24 = v20;
  unint64_t v22 = (char *)v18.i64[0];
  sub_10023F158((uint64_t)&v22);
  return v19;
}

void sub_10023F100(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_10023F114(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100008BD4();
  }
  return operator new(24 * a2);
}

uint64_t sub_10023F158(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10023F18C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unsigned int v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unsigned int v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

void *sub_10023F1E0(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v11 = v8 % v9;
      }
    }

    else
    {
      unint64_t v11 = v8 & (v9 - 1);
    }

    unsigned int v12 = *(void **)(*(void *)a1 + 8 * v11);
    if (v12)
    {
      __int128 v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }

            else
            {
              v14 &= v9 - 1;
            }

            if (v14 != v11) {
              break;
            }
          }

          __int128 v13 = (void *)*v13;
        }

        while (v13);
      }
    }
  }

  else
  {
    unint64_t v11 = 0LL;
  }

  uint64_t v15 = a1 + 16;
  uint64_t v27 = 0LL;
  size_t v16 = (char *)operator new(0x48uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)size_t v16 = 0LL;
  *((void *)v16 + 1) = v8;
  *((void *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  LOBYTE(v27) = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1LL;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_10005141C(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v11 = v8 % v9;
      }
      else {
        unint64_t v11 = v8;
      }
    }

    else
    {
      unint64_t v11 = (v9 - 1) & v8;
    }
  }

  int64x2_t v23 = *(void **)(*(void *)a1 + 8 * v11);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *int64x2_t v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v11) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }

      else
      {
        v24 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  __int128 v13 = (void *)v26[0];
  v26[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_10023F488((uint64_t)v26, 0LL);
  return v13;
}

void sub_10023F470(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10023F488(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1002400EC(v2 + 3);
    }
    operator delete(v2);
  }

uint64_t sub_10023F4CC(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    unint64_t v8 = 0LL;
    unint64_t v11 = 0LL;
    uint8x8_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }

  else
  {
    unint64_t v8 = (uint64_t *)(*(void *)v7 + 8 * (v4 & 0x1FF));
    unint64_t v9 = a2[5] + v4;
    uint8x8_t v10 = (char *)(v5 + 8 * (v9 >> 9));
    unint64_t v11 = (uint64_t *)(*(void *)v10 + 8 * (v9 & 0x1FF));
  }

  sub_10023F574((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_10023F560(_Unwind_Exception *a1)
{
}

void *sub_10023F574(void *a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 3) + ((a4 - a2) << 6) - (((uint64_t)a3 - *(void *)a2) >> 3);
  }
  return sub_10023F5A8(a1, a2, a3, v5);
}

void *sub_10023F5A8(void *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 6) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10023F6D8(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }

  __int128 v13 = (void *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v11 & 0x1FF);
  }
  v23[0] = v8 + 8 * (v11 >> 9);
  v23[1] = v14;
  uint64_t result = sub_10023FC2C((uint64_t)v23, a4);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096LL;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }

      else
      {
        BOOL v19 = (void *)v14;
        do
        {
          uint64_t v20 = *a3++;
          *v19++ = v20;
          if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
          {
            unint64_t v21 = (uint64_t *)a2[1];
            ++a2;
            a3 = v21;
          }
        }

        while (v19 != (void *)v18);
      }

      v17 += (v18 - v14) >> 3;
      if (v13 == result) {
        break;
      }
      uint64_t v22 = v13[1];
      ++v13;
      uint64_t v14 = v22;
    }

    while (v22 != v16);
    a1[5] = v17;
  }

  return result;
}

void sub_10023F6D8(void *a1, unint64_t a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          size_t v29 = (char *)sub_100008BA0((uint64_t)(a1 + 3), v28);
          unsigned int v31 = &v29[8 * (v28 >> 2)];
          unsigned int v32 = (uint64_t *)a1[1];
          unint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            unint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            __int16 v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)__int16 v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          int v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            unint64_t v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            unint64_t v3 = (char *)a1[1];
          }

          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          unint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)unint64_t v3 = v18;
      unint64_t v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10023FC90(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_10023FDA4((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 511LL;
          }
          else {
            uint64_t v64 = 512LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              v79 = (char *)sub_100008BA0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }

              v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_100008BA0((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0LL;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10023FEC0(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        __int16 v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              v49 = (char *)sub_100008BA0((uint64_t)v91, v48);
              char v51 = (uint64_t *)__p[1];
              __int16 v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                __int16 v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              __int128 v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                __int16 v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              __int16 v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                __int16 v40 = (char *)__p[1];
              }

              int64_t v47 = &v40[-8 * (v44 >> 1)];
              __int16 v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)__int16 v40 = *v39;
          __int16 v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_10023FFD4((uint64_t)__p, v57);
      }

      int v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_10023FBEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10023FC2C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }

  return result;
}

void sub_10023FC90(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_100008BA0(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      BOOL v22 = (uint64_t *)a1[1];
      unint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        unint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v24 = 8 * (v23 >> 3);
        uint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)uint64_t v25 = v26;
          v25 += 8;
          v24 -= 8LL;
        }

        while (v24);
      }

      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        unint64_t v6 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        unint64_t v6 = (char *)a1[1];
      }

      uint64_t v17 = &v6[8 * v13];
      unint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }

  *(void *)unint64_t v6 = *a2;
  a1[2] += 8LL;
}

void sub_10023FDA4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(_BYTE **)(a1 + 24);
    uint64_t v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1LL;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_100008BA0(v6, v12);
      unint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8LL;
        }

        while (v19);
      }

      BOOL v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      unint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }

  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void sub_10023FEC0(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_100008BA0(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void sub_10023FFD4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(_BYTE **)(a1 + 16);
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_100008BA0(*(void *)(a1 + 32), v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8LL;
        }

        while (v18);
      }

      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }

  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

uint64_t sub_1002400EC(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_10023DF04((uint64_t)a1);
}

uint64_t sub_100240180(void *a1, void *a2)
{
  uint64_t result = (uint64_t)sub_1002401CC(a1, a2);
  if (result)
  {
    sub_1002402B8(a1, (void *)result, (uint64_t)v4);
    sub_10023F488((uint64_t)v4, 0LL);
    return 1LL;
  }

  return result;
}

void *sub_1002401CC(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69LL * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }

      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }

        else
        {
          v10 &= *(void *)&v2 - 1LL;
        }

        if (v10 != v7) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

void *sub_1002402B8@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  uint8x8_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint8x8_t v6 = (void *)*v6;
  }

  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }

  void *v7 = v10;
  *a2 = 0LL;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1002403EC(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_10024041C(_Unwind_Exception *a1)
{
}

void sub_100240430(id a1)
{
  uint64_t v1 = operator new(0x1C8uLL);
  sub_100352FF0();
  qword_1008D67D0 = (uint64_t)v1;
}

void sub_100240460(_Unwind_Exception *a1)
{
}

void sub_100240474(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_1002404A4(_Unwind_Exception *a1)
{
}

void sub_1002404B8(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1002404E8(_Unwind_Exception *a1)
{
}

void sub_1002404FC(id a1)
{
  uint64_t v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_10024052C(_Unwind_Exception *a1)
{
}

void *sub_100240540(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  unint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    sub_10023DBC8(a1, v5 >> 3);
    uint8x8_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }

  return a1;
}

void sub_1002405A4(id a1)
{
  uint64_t v1 = operator new(0x350uLL);
  sub_100461C70();
  off_1008D9028 = v1;
}

void sub_1002405D4(_Unwind_Exception *a1)
{
}

void sub_1002405E8(id a1)
{
  uint64_t v1 = operator new(0x148uLL);
  sub_10054E6A8();
  off_1008D9120 = v1;
}

void sub_100240618(_Unwind_Exception *a1)
{
}

char *sub_10024062C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    uint8x8_t v6 = result;
    sub_100240688(result, a4);
    uint64_t result = sub_1002406D4((int)v6 + 16, a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }

  return result;
}

void sub_100240680(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_100240688(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    abort();
  }
  uint64_t result = (char *)sub_10023F114((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

char *sub_1002406D4(int a1, __int128 *a2, __int128 *a3, char *__dst)
{
  if (a2 != a3)
  {
    uint8x8_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100024238(__dst, *(void **)v6, *((void *)v6 + 1));
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)__dst + 2) = *((void *)v6 + 2);
        *(_OWORD *)__dst = v7;
      }

      uint8x8_t v6 = (__int128 *)((char *)v6 + 24);
      __dst += 24;
    }

    while (v6 != a3);
  }

  return __dst;
}

void sub_100240744(id a1)
{
  uint64_t v1 = operator new(0x4A8uLL);
  sub_100499870();
  off_1008D60E8 = v1;
}

void sub_100240774(_Unwind_Exception *a1)
{
}

uint64_t **sub_100240788(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  __int128 v7 = a1 + 1;
  uint8x8_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        uint8x8_t v6 = *v9;
        __int128 v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint8x8_t v6 = v9[1];
      if (!v6)
      {
        __int128 v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x30uLL);
    v11[32] = **a4;
    *((void *)v11 + 5) = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void *sub_100240848(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAAABLL) {
    sub_100008BD4();
  }
  return operator new(6 * a2);
}

void sub_10024088C(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100240910(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8LL)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100240910(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100008BA0(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100240BD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100240C24(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 1024LL;
  }

  return v4 ^ 1u;
}

char *sub_100240C80(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      void *v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10023DBC8(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  uint64_t v12 = (void **)(result + 8);
  BOOL v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }

uint64_t sub_100240D84(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 4 > v4) {
    unint64_t v4 = v9 >> 4;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v20 = v7;
  unint64_t v11 = (char *)sub_100240F38(v7, v10);
  uint64_t v12 = &v11[32 * v3];
  __p = v11;
  size_t v17 = v12;
  uint64_t v19 = &v11[32 * v13];
  *(void *)uint64_t v12 = *(void *)a2;
  *((void *)v12 + 1) = *(void *)(a2 + 8);
  *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
  *((void *)v12 + 3) = *(void *)(a2 + 24);
  uint64_t v18 = v12 + 32;
  sub_100240EAC(a1, &__p);
  uint64_t v14 = a1[1];
  if (v18 != v17) {
    v18 += (v17 - v18 + 31) & 0xFFFFFFFFFFFFFFE0LL;
  }
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

void sub_100240E74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100240EAC(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(_DWORD *)(v6 - 16) = *(_DWORD *)(v2 + v5 - 16);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 32LL;
    }

    while (v2 + v5 != v3);
    v4 += v5;
  }

  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_100240F38(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100008BD4();
  }
  return operator new(32 * a2);
}

uint64_t sub_100240F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 32 * ((a3 - a2) >> 5);
      uint64_t v4 = a2;
      do
      {
        uint64_t v6 = *(void *)(v4 + v5 + 8);
        *(void *)uint64_t v4 = *(void *)(v4 + v5);
        *(void *)(v4 + 8) = v6;
        *(_DWORD *)(v4 + 16) = *(_DWORD *)(v4 + v5 + 16);
        *(void *)(v4 + 24) = *(void *)(v4 + v5 + 24);
        v4 += 32LL;
      }

      while (v4 + v5 != v3);
    }

    *(void *)(a1 + 8) = v4;
  }

  return a2;
}

uint64_t sub_100240FD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != a2)
  {
    while (*(void *)result != a3 || a4 != *(void *)(result + 8))
    {
      result += 32LL;
      if (result == a2) {
        return a2;
      }
    }
  }

  if (result == a2) {
    return a2;
  }
  for (uint64_t i = result + 32; i != a2; i += 32LL)
  {
    if (*(void *)i != a3 || a4 != *(void *)(i + 8))
    {
      *(void *)uint64_t result = *(void *)i;
      *(void *)(result + 8) = *(void *)(i + 8);
      *(_DWORD *)(result + 16) = *(_DWORD *)(i + 16);
      *(void *)(result + 24) = *(void *)(i + 24);
      result += 32LL;
    }
  }

  return result;
}

void sub_10024106C(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_10024109C(_Unwind_Exception *a1)
{
}

char *sub_1002410B0(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100241124(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      *(void *)(v7 + 8) = *(void *)(a2 + 8);
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
      *(void *)(v7 + 24) = *(void *)(a2 + 24);
      v7 += 32LL;
      a2 += 32LL;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

char *sub_100241124(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    abort();
  }
  uint64_t result = (char *)sub_100240F38((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_100241160(id a1)
{
  uint64_t v1 = operator new(0x68uLL);
  sub_10049435C();
  off_1008D9130 = v1;
}

void sub_100241190(_Unwind_Exception *a1)
{
}

void sub_1002411A4(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10057DEC8();
  off_1008D9140 = v1;
}

void sub_1002411D4(_Unwind_Exception *a1)
{
}

void sub_1002411E8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100008BA0(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1002414B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002414FC(void **a1)
{
  unint64_t v2 = a1[1];
  BOOL v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = ((v3 - v2) << 6) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x200)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      __p = sub_100008BA0(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      int64_t v41 = operator new(0x1000uLL);
      sub_10023FEC0(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }

      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1LL;
              }
              else {
                unint64_t v23 = (v14 - (_BYTE *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_100008BA0((uint64_t)v46, v23);
              uint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v28 = 8 * (v27 >> 3);
                size_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)size_t v29 = v30;
                  v29 += 8;
                  v28 -= 8LL;
                }

                while (v28);
              }

              __int128 v31 = __p;
              __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }

            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              int64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }

              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }

          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }

        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }

      uint64_t v36 = *a1;
      int v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      uint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 256LL;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      }
      if (v36) {
        operator delete(v36);
      }
    }

    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_10023FC90(a1, &__p);
        uint64_t v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }

      else
      {
        __p = operator new(0x1000uLL);
      }

      sub_10023FDA4((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8) {
        uint64_t v35 = 256LL;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v35;
    }
  }

  else
  {
    a1[4] = v6 + 512;
    __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_10023FDA4((uint64_t)a1, &__p);
  }

void sub_1002417C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10024180C(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  }
  return sub_100241840(a1, a2, a3, v5);
}

void *sub_100241840(void *a1, char **a2, char *a3, unint64_t a4)
{
  int64_t v20 = a2;
  int64_t v21 = a3;
  unint64_t v7 = a1[5];
  if (v7 >= a4)
  {
    uint64_t v14 = a1[1];
    int64_t v15 = (char *)(v14 + 8LL * (a1[4] >> 9));
    if (a1[2] == v14) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = *(void *)v15 + 8 * (a1[4] & 0x1FFLL);
    }
    v22[0] = a2;
    v22[1] = a3;
    uint64_t v18 = (char **)sub_10023FC2C((uint64_t)v22, a4);
    unint64_t v23 = v15;
    uint64_t v24 = v16;
    sub_100241A5C(a2, a3, v18, v19, (uint64_t)&v23);
    return (void *)sub_100241964((uint64_t)a1, v23, v24);
  }

  else
  {
    uint64_t v9 = (char **)sub_10023FC2C((uint64_t)&v20, v7);
    uint64_t v10 = (uint64_t *)v8;
    uint64_t v11 = a1[1];
    if (a1[2] == v11) {
      uint64_t v12 = 0LL;
    }
    else {
      uint64_t v12 = *(void *)(v11 + 8LL * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
    }
    unint64_t v23 = (char *)(v11 + 8LL * (a1[4] >> 9));
    uint64_t v24 = v12;
    sub_100241A5C(v20, v21, v9, v8, (uint64_t)&v23);
    return sub_10023F5A8(a1, v9, v10, a4 - a1[5]);
  }

uint64_t sub_100241964(uint64_t result, char *a2, uint64_t a3)
{
  BOOL v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v8 = (char *)(v6 + 8 * (v5 >> 9));
  if (v7 == v6) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = *(void *)v8 + 8 * (v5 & 0x1FF);
  }
  if (v9 != a3)
  {
    uint64_t v10 = ((v9 - *(void *)v8) >> 3) + ((v8 - a2) << 6);
    uint64_t v11 = a3 - *(void *)a2;
    uint64_t v12 = v10 - (v11 >> 3);
    if (v12 >= 1)
    {
      uint64_t v13 = (char *)(v6 + 8 * (v4 >> 9));
      if (v7 == v6) {
        uint64_t v14 = 0LL;
      }
      else {
        uint64_t v14 = *(void *)v13 + 8 * (*(void *)(result + 32) & 0x1FFLL);
      }
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3) {
        uint64_t v15 = 0LL;
      }
      else {
        uint64_t v15 = (v11 >> 3) + ((a2 - v13) << 6) - ((v14 - *(void *)v13) >> 3);
      }
      sub_10023FC2C((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        uint64_t result = sub_100241BE4(v3, 1);
      while ((result & 1) != 0);
    }
  }

  return result;
}

double sub_100241A5C(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }

  else
  {
    uint64_t v8 = a1 + 1;
    sub_100241B28(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_100241B28(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }

    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }

  sub_100241B28(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_100241B28@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }

    __dst += 8 * v12;
    else {
      --v6;
    }
  }

  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

uint64_t sub_100241BE4(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

  ;
}

void sub_100241C64(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(void *)(a1 + 4) = a2;
}

  ;
}

  ;
}

void sub_100241C9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
}

void sub_100241CA4(uint64_t a1, uint64_t a2, ...)
{
}

  ;
}

uint64_t sub_100241CBC(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)double result = a4;
  *(void *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 2048;
  *(void *)(result + 14) = a3;
  return result;
}

void sub_100241CD4(uint64_t a1, ...)
{
}

uint64_t sub_100241CE4(uint64_t a1, uint64_t a2, ...)
{
  return sub_1003D0100(a1, (uint64_t)va);
}

void sub_100241CF0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_100241D04(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void *sub_100241D28(void *result, uint64_t a2, uint64_t a3, float a4)
{
  if (v4 >= 0) {
    unint64_t v5 = result;
  }
  else {
    unint64_t v5 = (void *)*result;
  }
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2081;
  *(void *)(a2 + 14) = v5;
  return result;
}

void sub_100241D4C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

void sub_100241DA0(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

  ;
}

void sub_100241DBC()
{
  v0 = objc_autoreleasePoolPush();
  sub_10002418C(v2, "com.apple.Preferences");
  int v3 = 1;
  sub_10002418C(v4, "com.apple.SharingViewService");
  int v5 = 2;
  sub_10002418C(v6, "com.apple.HeadphoneProxService");
  int v7 = 3;
  sub_10023E354((uint64_t)&qword_1008F7190, v2, 3LL);
  for (uint64_t i = 0LL; i != -12; i -= 4LL)
  {
    if (SHIBYTE(v6[i + 2]) < 0) {
      operator delete((void *)v6[i]);
    }
  }

  __cxa_atexit((void (*)(void *))sub_1002139D8, &qword_1008F7190, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_100241ED4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0LL;
  while (1)
  {
    v12 -= 32LL;
    if (v12 == -96) {
      _Unwind_Resume(exception_object);
    }
  }

unsigned __int8 *sub_100241F38(unsigned __int8 *a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3) {
    [v3 getUUIDBytes:a1];
  }
  else {
    uuid_clear(a1);
  }

  return a1;
}

void sub_100241F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSUUID *sub_100241F94(const unsigned __int8 *a1)
{
  if (uuid_is_null(a1)) {
    uint64_t v2 = 0LL;
  }
  else {
    uint64_t v2 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", a1);
  }
  return v2;
}

void *sub_100241FD4(void *a1, uint64_t a2)
{
  *a1 = off_1008892D0;
  a1[1] = a2;
  a1[2] = 0LL;
  Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  a1[3] = Mutable;
  CFDictionarySetValue(Mutable, @"Power Source State", @"Battery Power");
  return a1;
}

uint64_t sub_100242044(uint64_t a1)
{
  *(void *)a1 = off_1008892D0;
  CFRelease(*(CFTypeRef *)(a1 + 24));
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    IOPSReleasePowerSource(v3, v2);
  }
  return a1;
}

void sub_100242088(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100242044(a1);
  operator delete(v1);
}

void sub_10024209C(uint64_t *a1)
{
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002420F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10024210C(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  if (!v5)
  {
    IOPSCreatePowerSource(v4);
    sub_1002421DC(a1);
  }

  sub_1002422FC(a1, a2);
  uint64_t v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 24);
    int v9 = 138412290;
    uint64_t v10 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Publishing remote battery report %@",  (uint8_t *)&v9,  0xCu);
  }

  return IOPSSetPowerSourceDetails(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

void sub_1002421DC(uint64_t a1)
{
  int valuePtr = 100;
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), @"Max Capacity", v2);
  CFRelease(v2);
  sub_1003FE1B4((unsigned __int8 *)(*(void *)(a1 + 8) + 128LL), __p);
  if (v6 >= 0) {
    char v3 = __p;
  }
  else {
    char v3 = (void **)__p[0];
  }
  CFStringRef v4 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v3, 0x8000100u);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), @"Accessory Identifier", v4);
  CFRelease(v4);
}

void sub_1002422E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002422FC(uint64_t a1, uint64_t *a2)
{
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a2 + 23)) {
      goto LABEL_7;
    }
LABEL_6:
    CFStringRef v3 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)a2, 0x8000100u);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), @"Name", v3);
    CFRelease(v3);
    goto LABEL_8;
  }

  if (a2[1])
  {
    a2 = (uint64_t *)*a2;
    goto LABEL_6;
  }

void sub_100242558( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100242580(uint64_t a1, const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v3 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), @"Group Identifier", v3);
  CFRelease(v3);
}

void sub_1002425E0(uint64_t a1, const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v3 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), @"Part Name", v3);
  CFRelease(v3);
}

void sub_100242640(uint64_t a1, unsigned int a2)
{
  if (a2 > 4) {
    CFNumberRef v2 = 0LL;
  }
  else {
    CFNumberRef v2 = *(&off_100889320 + (int)a2);
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), @"Part Identifier", v2);
}

void sub_10024266C(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), @"Current Capacity", v3);
  CFRelease(v3);
}

CFNumberRef sub_1002426CC(uint64_t a1, void *a2)
{
  double result = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"Current Capacity");
  if (result) {
    return (const __CFNumber *)(CFNumberGetValue(result, kCFNumberIntType, a2) != 0);
  }
  return result;
}

void sub_100242710(uint64_t a1, int a2)
{
  CFNumberRef v3 = (const void **)&kCFBooleanTrue;
  if (a2 != 1) {
    CFNumberRef v3 = (const void **)&kCFBooleanFalse;
  }
  CFStringRef v4 = *(__CFDictionary **)(a1 + 24);
  if (a2 == 1) {
    CFNumberRef v5 = @"AC Power";
  }
  else {
    CFNumberRef v5 = @"Battery Power";
  }
  CFDictionarySetValue(v4, @"Is Charging", *v3);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), @"Power Source State", v5);
}

uint64_t sub_10024277C()
{
  if (qword_1008EF960 != -1) {
    dispatch_once(&qword_1008EF960, &stru_100889348);
  }
  if (!byte_1008EF958) {
    return 0LL;
  }
  uint64_t v0 = mach_absolute_time();
  kdebug_trace(730005508LL, v0, 0LL, 0LL, 0LL);
  return v0;
}

uint64_t sub_1002427F8()
{
  if (qword_1008EF960 != -1) {
    dispatch_once(&qword_1008EF960, &stru_100889348);
  }
  if (!byte_1008EF958) {
    return 0LL;
  }
  uint64_t v0 = mach_absolute_time();
  kdebug_trace(730005512LL, v0, 0LL, 0LL, 0LL);
  return v0;
}

void sub_100242874(uint64_t a1)
{
  if (qword_1008EF960 != -1) {
    dispatch_once(&qword_1008EF960, &stru_100889348);
  }
  if (byte_1008EF958)
  {
  }

void sub_1002428F8(uint64_t a1)
{
  if (qword_1008EF960 != -1) {
    dispatch_once(&qword_1008EF960, &stru_100889348);
  }
  if (byte_1008EF958)
  {
    uint64_t v2 = 730005532LL;
    if (a1 != 7)
    {
      if (a1 != 8) {
        return;
      }
      uint64_t v2 = 730005536LL;
    }

    kdebug_trace(v2, 0LL, 0LL, 0LL, 0LL);
  }

void sub_100242980(uint64_t a1)
{
  if (qword_1008EF960 != -1) {
    dispatch_once(&qword_1008EF960, &stru_100889348);
  }
  if (byte_1008EF958)
  {
  }

void sub_100242A04(uint64_t a1, unint64_t a2)
{
  if (qword_1008EF960 != -1) {
    dispatch_once(&qword_1008EF960, &stru_100889348);
  }
  if (byte_1008EF958)
  {
    if (a2)
    {
      sub_100494958(a2, (uint64_t)__p);
      a2 = sub_1003A8D54((uint64_t)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v4 = a1 - 15;
  }

void sub_100242AC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100242AE0(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  if (qword_1008EF960 != -1) {
    dispatch_once(&qword_1008EF960, &stru_100889348);
  }
  if (byte_1008EF958)
  {
    if (a2)
    {
      sub_100494958(a2, (uint64_t)__p);
      a2 = sub_1003A8D54((uint64_t)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }

    id v6 = [v5 hash];
  }
}

void sub_100242BB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100242BDC(id a1)
{
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(v4, "Signposts");
  sub_10002418C(__p, "Enabled");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72LL))(v1, v4, __p, &byte_1008EF958);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100242C64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100242C98(_BYTE *a1)
{
  *a1 = 1;
  sub_1000A85A0();
}

_BYTE *sub_100242CA4(_BYTE *a1)
{
  *a1 = 1;
  sub_1000A85A0();
  return a1;
}

uint64_t sub_100242CD0(_BYTE *a1)
{
  *a1 = 0;
  return sub_1000A8688();
}

_BYTE *sub_100242CD8(_BYTE *a1)
{
  if (*a1)
  {
    *a1 = 0;
    sub_1000A8688();
  }

  return a1;
}

pthread_mutex_t *sub_100242D08(pthread_mutex_t *a1)
{
  v4.__sig = 0LL;
  *(void *)v4.__opaque = 0LL;
  pthread_mutexattr_init(&v4);
  pthread_mutexattr_settype(&v4, 2);
  int v2 = pthread_mutex_init(a1, &v4);
  pthread_mutexattr_destroy(&v4);
  if (v2 && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
    sub_1006625E0();
  }
  return a1;
}

pthread_mutex_t *sub_100242DC8(pthread_mutex_t *a1)
{
  if (pthread_mutex_destroy(a1) && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
    sub_100662640();
  }
  return a1;
}

void sub_100242E2C(pthread_mutex_t *a1)
{
  if (pthread_mutex_lock(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_1006626A0();
    }
  }

void sub_100242E7C(pthread_mutex_t *a1)
{
  if (pthread_mutex_unlock(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_100662700();
    }
  }

void sub_100242ECC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    int v2 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_100662760(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  *(_BYTE *)(a1 + 8) = 1;
  sub_100242E2C(*(pthread_mutex_t **)a1);
}

uint64_t sub_100242F28(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_100242ECC(a1);
  return a1;
}

void sub_100242F54(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 8))
  {
    int v2 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_1006627D4(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  *(_BYTE *)(a1 + 8) = 0;
  sub_100242E7C(*(pthread_mutex_t **)a1);
}

uint64_t sub_100242FAC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_100242F54(a1);
  }
  return a1;
}

pthread_cond_t *sub_100242FDC(pthread_cond_t *a1)
{
  if (pthread_cond_init(a1, 0LL) && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
    sub_100662848();
  }
  return a1;
}

pthread_cond_t *sub_100243040(pthread_cond_t *a1)
{
  return sub_100242FDC(a1);
}

pthread_cond_t *sub_100243048(pthread_cond_t *a1)
{
  if (pthread_cond_destroy(a1) && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
    sub_100662848();
  }
  return a1;
}

void sub_1002430AC(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  if (pthread_cond_wait(a1, a2))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_100662848();
    }
  }

void sub_1002430FC(pthread_cond_t *a1, pthread_mutex_t **a2)
{
}

BOOL sub_100243104(pthread_cond_t *a1, pthread_mutex_t *a2, unint64_t a3)
{
  v6.tv_sec = a3 / 0x3E8;
  v6.tv_nsec = 1000000 * (a3 % 0x3E8);
  int v3 = pthread_cond_timedwait_relative_np(a1, a2, &v6);
  int v4 = v3;
  if (v3 && v3 != 60 && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
    sub_100662848();
  }
  return v4 != 60;
}

BOOL sub_1002431A4(pthread_cond_t *a1, pthread_mutex_t **a2, unint64_t a3)
{
  return sub_100243104(a1, *a2, a3);
}

void sub_1002431AC(pthread_cond_t *a1)
{
  if (pthread_cond_signal(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_100662848();
    }
  }

void sub_1002431FC(pthread_cond_t *a1)
{
  if (pthread_cond_broadcast(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_100662848();
    }
  }

uint64_t sub_10024324C(uint64_t a1, char *__s1, char a3)
{
  *(void *)a1 = off_100889378;
  *(void *)(a1 + 8) = strdup(__s1);
  *(_BYTE *)(a1 + 16) = a3;
  sub_100242D08((pthread_mutex_t *)(a1 + 24));
  *(void *)(a1 + 88) = 0LL;
  return a1;
}

uint64_t sub_100243298(uint64_t a1)
{
  *(void *)a1 = off_100889378;
  free(*(void **)(a1 + 8));
  sub_100242DC8((pthread_mutex_t *)(a1 + 24));
  return a1;
}

void sub_1002432DC(pthread_t *a1)
{
  int v2 = a1 + 3;
  uint64_t v3 = 0LL;
  sub_100242ECC((uint64_t)&v2);
  sub_1000BC170(a1 + 11, (void *(__cdecl *)(void *))sub_100243350, a1);
  if ((_BYTE)v3) {
    sub_100242F54((uint64_t)&v2);
  }
}

void sub_100243334( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10) {
    sub_100242F54((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100243350(uint64_t a1)
{
  return 0LL;
}

BOOL sub_100243368(uint64_t a1, integer_t a2, integer_t a3, int a4, int a5)
{
  return sub_1000BC23C(*(_opaque_pthread_t **)(a1 + 88), a2, a3, a4, a5);
}

BOOL sub_100243370(uint64_t a1, int a2)
{
  return sub_1000BC20C(*(_opaque_pthread_t **)(a1 + 88), a2);
}

uint64_t sub_100243378(uint64_t a1)
{
  int v2 = (pthread_mutex_t *)(a1 + 24);
  sub_100242E2C((pthread_mutex_t *)(a1 + 24));
  sub_100242E7C(v2);
  int v3 = *(unsigned __int8 *)(a1 + 16);
  int v4 = *(const char **)(a1 + 8);
  if (v4) {
    sub_1000BC2E0(v4);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)a1 + 8LL))(a1);
  }
  return 0LL;
}

void sub_1002433E0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100243468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002434E4(uint64_t a1)
{
  *(void *)a1 = off_1008893A0;
  *(void *)(a1 + 8) = off_100889440;
  *(void *)(a1 + 16) = off_1008894F0;
  *(void *)(a1 + 24) = off_100889520;
  *(void *)(a1 + 32) = off_100889560;
  *(void *)(a1 + 40) = &off_100889590;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 62) = 0;
  *(void *)(a1 + sub_100242FAC(v1 - 64) = &stru_1008A57D8;
  *(_BYTE *)(a1 + 72) = 1;
  sub_100242DC4(a1 + 80);
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 144) = a1 + 152;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0LL;
  return a1;
}

void sub_100243574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10024358C(uint64_t a1)
{
  if (qword_1008D6788 != -1) {
    dispatch_once(&qword_1008D6788, &stru_1008897E8);
  }
  sub_10024DD9C((uint64_t)off_1008D6780 + 80, a1);
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100889808);
  }
  sub_100594810((uint64_t)off_1008D5F08, a1 + 8, 0);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100889828);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 32);
  uint64_t v2 = sub_1002E90E4();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 32LL))(v2, a1 + 40);
  *(_WORD *)(a1 + 57) = 0;
  return result;
}

void sub_100243674(uint64_t a1)
{
  *(_DWORD *)(a1 + 228) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  unsigned __int8 v19 = 1;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "Magnet");
  sub_10002418C(__p, "AllowPeripheralModeSupport");
  (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v2 + 72LL))(v2, buf, __p, &v19);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(*(void **)buf);
  }
  char v16 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "Magnet");
  sub_10002418C(__p, "EnableAutomaticPairing");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v3 + 72LL))(v3, buf, __p, &v16);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(*(void **)buf);
  }
  char v15 = 0;
  uint64_t v4 = sub_1002E6E00();
  sub_10002418C(buf, "Magnet");
  sub_10002418C(__p, "ForceERTMOnNonReliablePipes");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v4 + 72LL))(v4, buf, __p, &v15);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(*(void **)buf);
  }
  if (v15)
  {
    uint64_t v5 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Forcing ERTM on non reliable pipe",  buf,  2u);
      BOOL v6 = v15 != 0;
    }

    else
    {
      BOOL v6 = 1LL;
    }

    sub_100091438(v6);
  }

  uint64_t v7 = sub_100404FE8();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100244054;
  v12[3] = &unk_1008878D8;
  v12[4] = a1;
  unsigned __int8 v13 = v19;
  char v14 = v16;
  sub_1004054B4(v7, v12);
  uint64_t v8 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Initialized ScalablePipe. Peripheral Support: %d",  buf,  8u);
  }

  uint64_t v9 = sub_1002E8D54();
  sub_1001FC8A8(v9 + 368, a1 + 16);
  uint64_t v10 = sub_100405058();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100244EDC;
  v11[3] = &unk_10087EB20;
  v11[4] = a1;
  sub_1004054B4(v10, v11);
}

void sub_100243950( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10024399C(uint64_t a1, int a2, uint64_t a3, char a4)
{
  int v8 = sub_100100788(a1);
  uint64_t v9 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v18 = a1;
    __int16 v19 = 1024;
    int v20 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Scalable pipe transport has been upgraded handle:%p p:0x%4x",  buf,  0x12u);
  }

  if (a2 == 1)
  {
    uint64_t v10 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_FAULT)) {
      sub_1006628A8(v10, v11, v12);
    }
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008898C8);
  }
  *(_DWORD *)buf = *(_DWORD *)a3;
  LOWORD(v18) = *(_WORD *)(a3 + 4);
  unsigned __int8 v13 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  uint64_t v14 = sub_100404FE8();
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100249DEC;
  v15[3] = &unk_100886EE0;
  char v16 = a4;
  v15[4] = a1;
  void v15[5] = v13;
  sub_100405384(v14, v15);
}

void sub_100243B2C(uint64_t a1, int a2, int a3)
{
  int v6 = sub_100100788(a1);
  uint64_t v7 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136446978;
    uint64_t v10 = sub_100249F90(a2);
    __int16 v11 = 1024;
    int v12 = a3;
    __int16 v13 = 2048;
    uint64_t v14 = a1;
    __int16 v15 = 1024;
    int v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Scalable pipe transport has been downgraded to %{public}s - average transmit throughput was %ukbps, handle %p p:0x%4x",  (uint8_t *)&v9,  0x22u);
  }

  uint64_t v8 = sub_100404FE8();
  sub_100405384(v8, &stru_1008895F8);
}

void sub_100243C24(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v15 = 0LL;
  sub_1000B0740((_DWORD *)&v15 + 1, (__darwin_suseconds_t *)&v15);
  uint64_t v8 = sub_100404FE8();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10024A490;
  v9[3] = &unk_100889618;
  v9[4] = a1;
  char v12 = a2;
  char v13 = a3;
  char v14 = a4;
  int v10 = HIDWORD(v15);
  int v11 = v15;
  sub_100405384(v8, v9);
}

BOOL sub_100243CBC(char a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  uint64_t v16 = sub_100404FE8();
  uint64_t v17 = operator new(0x30uLL);
  v17[4] = 1;
  *(void *)uint64_t v17 = &off_100889688;
  *((_BYTE *)v17 + 10) = a1;
  *((_DWORD *)v17 + 3) = a2;
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = a4;
  *((_DWORD *)v17 + 8) = a5;
  *((_DWORD *)v17 + 9) = a6;
  *((_DWORD *)v17 + 10) = a7;
  *((_DWORD *)v17 + 11) = a8;
  return sub_100405744(v16, v17);
}

BOOL sub_100243D54(char a1, char a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t v16 = sub_100404FE8();
  uint64_t v17 = (char *)operator new(0x30uLL);
  *((_WORD *)v17 + 4) = 1;
  *(void *)uint64_t v17 = &off_1008896C0;
  v17[10] = a1;
  v17[11] = a2;
  *(void *)(v17 + 12) = a3;
  *(void *)(v17 + 20) = a4;
  *((_DWORD *)v17 + 7) = a5;
  *((_DWORD *)v17 + 8) = a6;
  *((_DWORD *)v17 + 9) = a7;
  *((void *)v17 + 5) = a8;
  return sub_100405744(v16, v17);
}

void sub_100243DF4(unsigned __int8 *a1, int a2, int a3, int a4)
{
  char v17 = 0;
  if (sub_10012D5EC((uint64_t)a1))
  {
    unint64_t v8 = ((unint64_t)a1[49] << 40) | ((unint64_t)a1[50] << 32) | ((unint64_t)a1[51] << 24) | ((unint64_t)a1[52] << 16) | ((unint64_t)a1[53] << 8) | a1[54] | ((unint64_t)a1[48] << 48);
LABEL_5:
    sub_10008F9A0(v8, &v17);
    goto LABEL_6;
  }

  if (sub_10012D514((uint64_t)a1))
  {
    unint64_t v8 = ((unint64_t)a1[48] << 40) | ((unint64_t)a1[49] << 32) | ((unint64_t)a1[50] << 24) | ((unint64_t)a1[51] << 16) | ((unint64_t)a1[52] << 8) | a1[53];
    goto LABEL_5;
  }

  int v10 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Invalid handle in error metric CB", buf, 2u);
  }

void sub_100243F54(uint64_t a1, int a2, __int16 a3)
{
  int v6 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    int v12 = a2;
    __int16 v13 = 2048;
    uint64_t v14 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AP wakeup by pipe 0x%04x handle %p", buf, 0x12u);
  }

  uint64_t v7 = sub_100404FE8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10024AD68;
  v8[3] = &unk_10087EB68;
  v8[4] = a1;
  __int16 v9 = a2;
  __int16 v10 = a3;
  sub_100405384(v7, v8);
}

_BYTE *sub_100244054(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v65 = 0;
  sub_100242CA4(&v65);
  if (!sub_1001BEB38()) {
    return sub_100242CD8(&v65);
  }
  uint64_t v3 = sub_1002E6BF0();
  if (sub_10008CF28(*(_BYTE *)(a1 + 40), *(_BYTE *)(a1 + 41)))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR)) {
      sub_1006629A0();
    }
    return sub_100242CD8(&v65);
  }

  unsigned __int8 v64 = 0;
  __int16 v63 = 0;
  __int16 v62 = 0;
  unsigned int v60 = 0;
  unsigned int v61 = -84;
  unsigned __int8 v59 = 0;
  int v58 = 0;
  uint64_t v4 = sub_1002E6E00();
  else {
    int v5 = 0;
  }
  int v58 = v5;
  uint64_t v6 = sub_1002E6E00();
  sub_10002418C(&buf, "Magnet");
  sub_10002418C(__p, "DisableClassic");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, unsigned __int8 *))(*(void *)v6 + 72LL))(v6, &buf, __p, &v64);
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v7 = sub_1002E6E00();
  sub_10002418C(&buf, "Magnet");
  sub_10002418C(__p, "EnableAWDL");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, char *))(*(void *)v7 + 72LL))(v7, &buf, __p, (char *)&v63 + 1);
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v8 = sub_1002E6E00();
  sub_10002418C(&buf, "Magnet");
  sub_10002418C(__p, "HistorySize");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, int *))(*(void *)v8 + 88LL))(v8, &buf, __p, &v58);
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v9 = sub_1002E6E00();
  sub_10002418C(&buf, "Magnet");
  sub_10002418C(__p, "AssertUpgrade");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, __int16 *))(*(void *)v9 + 72LL))(v9, &buf, __p, &v63);
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v10 = sub_1002E6E00();
  sub_10002418C(&buf, "Magnet");
  sub_10002418C(__p, "DisableFlush");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, char *))(*(void *)v10 + 72LL))( v10,  &buf,  __p,  (char *)&v62 + 1);
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v11 = sub_1002E6E00();
  sub_10002418C(&buf, "Magnet");
  sub_10002418C(__p, "EnablePerPacketLogging");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, __int16 *))(*(void *)v11 + 72LL))(v11, &buf, __p, &v62);
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v12 = sub_1002E6E00();
  sub_10002418C(&buf, "Magnet");
  sub_10002418C(__p, "RSSIMinSwitchThreshold");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, unsigned int *))(*(void *)v12 + 88LL))(v12, &buf, __p, &v61);
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v13 = sub_1002E6E00();
  sub_10002418C(&buf, "Magnet");
  sub_10002418C(__p, "ForceMaxLatency");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, unsigned int *))(*(void *)v13 + 128LL))(v13, &buf, __p, &v60);
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v14 = sub_1002E6E00();
  sub_10002418C(&buf, "Magnet");
  sub_10002418C(__p, "enableTSEverywhere");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, unsigned __int8 *))(*(void *)v14 + 72LL))( v14,  &buf,  __p,  &v59);
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)__p);
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)buf);
  }
  if (HIBYTE(v63) && os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR)) {
    sub_100662974();
  }
  int v15 = v64;
  if (v64)
  {
    uint64_t v16 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "User forced disable Classic transport !",  (uint8_t *)&buf,  2u);
      int v15 = v64;
    }

    else
    {
      int v15 = 1;
    }
  }

  BOOL v17 = v15 == 0;
  int v18 = HIBYTE(v63);
  sub_1000B6578();
  __int16 v19 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v61;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "rssiThreshold = %d", (uint8_t *)&buf, 8u);
  }

  sub_10010086C(v61);
  if ((_BYTE)v63)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR)) {
      sub_100662948();
    }
    uint64_t v20 = 200LL;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  sub_10008AC10(v20, 0, 0);
  int v21 = v17 | (2 * v18);
  if (v21)
  {
    v56[0] = *(_OWORD *)&off_100889598;
    v56[1] = *(_OWORD *)&off_1008895A8;
    v56[2] = *(_OWORD *)&off_1008895B8;
    v57 = sub_100243F54;
    if (sub_1000FD178(v21, (uint64_t)v56))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR)) {
        sub_10066291C();
      }
      return sub_100242CD8(&v65);
    }
  }

  else
  {
    uint64_t v22 = sub_1002E6E9C();
    unint64_t v23 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Warning: Transport switching disabled by defaults write",  (uint8_t *)&buf,  2u);
    }
  }

  if (HIBYTE(v62))
  {
    uint64_t v24 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Disabling L2CAP flush on Isoch endpoint !",  (uint8_t *)&buf,  2u);
      BOOL v25 = HIBYTE(v62) != 0;
    }

    else
    {
      BOOL v25 = 1LL;
    }

    sub_1001031D8(v25);
  }

  if ((_BYTE)v62)
  {
    uint64_t v26 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "User forced enable per packet logging",  (uint8_t *)&buf,  2u);
      BOOL v27 = (_BYTE)v62 != 0;
    }

    else
    {
      BOOL v27 = 1LL;
    }

    sub_10008AFE4(v27);
  }

  uint64_t v28 = v60;
  if (v60)
  {
    size_t v29 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v28;
      _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "User forced enable ForceMaxLatency=%u",  (uint8_t *)&buf,  8u);
      uint64_t v28 = v60;
    }

    sub_100091B14(v28);
  }

  int v30 = v59;
  if (v59)
  {
    __int128 v31 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v30;
      _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "User forced enable forceTSEverywhere=%d",  (uint8_t *)&buf,  8u);
      BOOL v32 = v59 != 0;
    }

    else
    {
      BOOL v32 = 1LL;
    }

    sub_100091B20(v32);
  }

  uint64_t v33 = sub_1002E6E9C();
  (*(void (**)(uint64_t))(*(void *)v33 + 3280LL))(v33);
  *(_BYTE *)(v2 + 56) = 1;
  v55[0] = 0LL;
  v55[1] = 0LL;
  sub_100242F28((uint64_t)v55, v2 + 80);
  uint64_t v34 = *(void **)(v2 + 144);
  uint64_t v52 = (void *)(v2 + 152);
  if (v34 != (void *)(v2 + 152))
  {
    do
    {
      uint64_t v35 = v34[5];
      uint64_t v36 = *(char **)(v35 + 32);
LABEL_84:
      int v37 = *(char **)(v35 + 40);
      while (v36 != v37)
      {
        uint64_t v38 = *(unsigned __int8 **)v36;
        uint64_t v73 = sub_100244DF0;
        __int128 buf = *(_OWORD *)&off_1008895D0;
        __int128 v72 = *(_OWORD *)&off_1008895E0;
        if ((char)v38[23] < 0)
        {
          uint64_t v40 = *(void **)v38;
          uint64_t v39 = *((void *)v38 + 1);
        }

        else
        {
          LODWORD(v39) = v38[23];
          uint64_t v40 = v38;
        }

        int v41 = *((_DWORD *)v38 + 7);
        else {
          uint64_t v42 = dword_1006BFA50[v41 - 1];
        }
        int v43 = sub_10008FA18( v40,  (v39 + 1),  *((_DWORD *)v38 + 6),  v42,  v38[36],  v38[37],  v38[38],  v41 == 4,  &buf);
        if (!v43)
        {
          v36 += 8;
          goto LABEL_84;
        }

        uint64_t v44 = (os_log_s *)qword_1008F75C8;
        if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
        {
          sub_100494958(v34[4], (uint64_t)v53);
          uint64_t v47 = v53;
          if (v54 < 0) {
            uint64_t v47 = (void **)v53[0];
          }
          *(_DWORD *)__p = 136446722;
          *(void *)&__p[4] = v38;
          __int16 v67 = 2082;
          v68 = v47;
          __int16 v69 = 1024;
          int v70 = v43;
          _os_log_error_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "Failed to re-register endpoint %{public}s after power cycle, for session %{public}s with result %{bl uetooth:OI_STATUS}u",  __p,  0x1Cu);
          if (v54 < 0) {
            operator delete(v53[0]);
          }
        }

        uint64_t v45 = *(char **)(v35 + 40);
        int64_t v46 = v45 - (v36 + 8);
        if (v45 != v36 + 8) {
          memmove(v36, v36 + 8, v45 - (v36 + 8));
        }
        int v37 = &v36[v46];
        *(void *)(v35 + 40) = &v36[v46];
      }

      unint64_t v48 = (void *)v34[1];
      if (v48)
      {
        do
        {
          uint64_t v49 = v48;
          unint64_t v48 = (void *)*v48;
        }

        while (v48);
      }

      else
      {
        do
        {
          uint64_t v49 = (void *)v34[2];
          BOOL v50 = *v49 == (void)v34;
          uint64_t v34 = v49;
        }

        while (!v50);
      }

      uint64_t v34 = v49;
    }

    while (v49 != v52);
  }

  sub_100242FAC((uint64_t)v55);
  return sub_100242CD8(&v65);
}

void sub_100244A74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
}

uint64_t sub_100244B40()
{
  return 1LL;
}

void sub_100244B48(uint64_t a1, __int16 a2, char *a3, uint64_t a4, int a5, int a6)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  sub_10024CBFC((void *)qword_1008D9150, a2);
  char v11 = sub_1001B9B0C(a1);
  uint64_t v12 = sub_100404FE8();
  uint64_t v13 = operator new(0x48uLL);
  sub_10002418C(__p, a3);
  sub_10024E560((uint64_t)v13, a1, a2, (__int128 *)__p, a5, a6, v11);
  sub_100405744(v12, v13);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100244C3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL sub_100244C74(__int16 a1, int a2)
{
  int v3 = 0;
  if (a2 <= 721)
  {
    if (a2 > 707)
    {
      if (a2 == 708)
      {
        int v3 = 2501;
        goto LABEL_21;
      }

      if (a2 == 719)
      {
        int v3 = 2502;
        goto LABEL_21;
      }
    }

    else
    {
      if (!a2) {
        goto LABEL_21;
      }
      if (a2 == 706)
      {
        int v3 = 2500;
        goto LABEL_21;
      }
    }

void sub_100244D70(unsigned int a1, const void *a2, unsigned int a3, __int16 a4, int a5)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  sub_10024D02C(qword_1008D9150, a1, a2, a3, a4, a5);
}

void sub_100244DF0(char *a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_100404FE8();
  uint64_t v6 = (char *)operator new(0x30uLL);
  sub_10002418C(__p, a1);
  *((_WORD *)v6 + 4) = 1;
  *(void *)uint64_t v6 = &off_1008896F8;
  uint64_t v7 = v6 + 16;
  if (SHIBYTE(v9) < 0)
  {
    sub_100024238(v7, __p[0], (unint64_t)__p[1]);
  }

  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)__p;
    *((void *)v6 + 4) = v9;
  }

  *((_DWORD *)v6 + 10) = a3;
  sub_100405744(v5, v6);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100244EA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_100244EDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D90F8 != -1) {
    dispatch_once(&qword_1008D90F8, &stru_100889848);
  }
  sub_10054A7B0((uint64_t)off_1008D90F0, v1 + 24);
  return sub_100244F34(v1);
}

uint64_t sub_100244F34(uint64_t a1)
{
  if (sub_1002D0A8C())
  {
    uint64_t v2 = (uint64_t (***)(void))sub_1002E90E4();
    uint64_t v3 = (**v2)(v2);
    uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  }

  else
  {
    if (qword_1008D90F8 != -1) {
      dispatch_once(&qword_1008D90F8, &stru_100889848);
    }
    uint64_t v5 = sub_10054AA4C((uint64_t)off_1008D90F0);
    uint64_t v4 = objc_claimAutoreleasedReturnValue(v5);
  }

  uint64_t v6 = (void *)v4;
  uint64_t v8 = *(void **)(a1 + 64);
  uint64_t v7 = (id *)(a1 + 64);
  unsigned int v9 = [v8 isEqualToString:v4];
  if ((v9 & 1) == 0)
  {
    objc_storeStrong(v7, v6);
    uint64_t v10 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = *v7;
      int v13 = 138543362;
      id v14 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Updated country code: %{public}@",  (uint8_t *)&v13,  0xCu);
    }
  }

  return v9 ^ 1;
}

void sub_10024507C(_Unwind_Exception *exception_object)
{
}

void sub_100245094(uint64_t a1)
{
}

void sub_10024509C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ScalablePipe::stackWillStop enter", buf, 2u);
  }

  uint64_t v3 = sub_100405058();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1002451D4;
  v9[3] = &unk_10087EB20;
  v9[4] = a1;
  sub_1004054B4(v3, v9);
  uint64_t v4 = sub_1002E90E4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40LL))(v4, a1 + 40);
  uint64_t v5 = sub_1002E8D54();
  sub_10024E060(v5 + 368, a1 + 16);
  uint64_t v6 = sub_100404FE8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100245224;
  v8[3] = &unk_10087EB20;
  v8[4] = a1;
  sub_1004054B4(v6, v8);
  uint64_t v7 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ScalablePipe::stackWillStop exit", buf, 2u);
  }

void sub_1002451D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D90F8 != -1) {
    dispatch_once(&qword_1008D90F8, &stru_100889848);
  }
  sub_10054A86C((uint64_t)off_1008D90F0, v1 + 24);
}

_BYTE *sub_100245224(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  char v44 = 0;
  sub_100242CA4(&v44);
  if (sub_1001BEB38())
  {
    uint64_t v2 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 88LL))(v2))
    {
      sub_1000FE36C();
      sub_10008D800();
      sub_100242CD0(&v44);
      *(_BYTE *)(v1 + 56) = 0;
      v43[0] = 0LL;
      v43[1] = 0LL;
      sub_100242F28((uint64_t)v43, v1 + 80);
      uint64_t v3 = *(uint64_t **)(v1 + 144);
      int v37 = (uint64_t **)(v1 + 144);
      uint64_t v4 = (uint64_t *)(v1 + 152);
      if (v3 != (uint64_t *)(v1 + 152))
      {
        uint64_t v36 = (uint64_t *)(v1 + 152);
        do
        {
          uint64_t v5 = v3[5];
          uint64_t v7 = *(uint64_t **)(v5 + 32);
          uint64_t v6 = *(uint64_t **)(v5 + 40);
          uint64_t v38 = v6;
          while (v7 != v6)
          {
            uint64_t v8 = v1;
            uint64_t v9 = *v7;
            __int128 v41 = 0u;
            __int128 v42 = 0u;
            __int128 v39 = 0u;
            __int128 v40 = 0u;
            id v10 = *(id *)(v9 + 40);
            id v11 = [v10 countByEnumeratingWithState:&v39 objects:v45 count:16];
            if (v11)
            {
              uint64_t v12 = *(void *)v40;
              do
              {
                for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v40 != v12) {
                    objc_enumerationMutation(v10);
                  }
                  id v14 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
                  uint64_t v15 = sub_10024F00C();
                  sub_100252278(v15, (__int16)[v14 pipeHandle]);
                }

                id v11 = [v10 countByEnumeratingWithState:&v39 objects:v45 count:16];
              }

              while (v11);
            }

            uint64_t v1 = v8;
            [*(id *)(v9 + 40) removeAllObjects];
            ++v7;
            uint64_t v6 = v38;
          }

          uint64_t v16 = (uint64_t *)v3[1];
          if (v16)
          {
            do
            {
              BOOL v17 = v16;
              uint64_t v16 = (uint64_t *)*v16;
            }

            while (v16);
          }

          else
          {
            do
            {
              BOOL v17 = (uint64_t *)v3[2];
              BOOL v18 = *v17 == (void)v3;
              uint64_t v3 = v17;
            }

            while (!v18);
          }

          uint64_t v3 = v17;
          uint64_t v4 = v36;
        }

        while (v17 != v36);
        uint64_t v3 = *v37;
      }

      if (v3 != v4)
      {
        do
        {
          uint64_t v19 = v3[5];
          if (*(_BYTE *)(v19 + 56))
          {
            uint64_t v20 = v3[4];
            int v21 = (void *)sub_10024E10C(v19);
            operator delete(v21);
            uint64_t v22 = sub_1001FDBCC(v37, v3);
            operator delete(v3);
            if (qword_1008D61A8 != -1) {
              dispatch_once(&qword_1008D61A8, &stru_100889868);
            }
            uint64_t v23 = qword_1008D61A0;
            unint64_t v24 = sub_100494CF8(v20);
            sub_1004966BC(v23, v24);
          }

          else
          {
            BOOL v25 = (uint64_t *)v3[1];
            if (v25)
            {
              do
              {
                uint64_t v22 = v25;
                BOOL v25 = (uint64_t *)*v25;
              }

              while (v25);
            }

            else
            {
              do
              {
                uint64_t v22 = (uint64_t *)v3[2];
                BOOL v18 = *v22 == (void)v3;
                uint64_t v3 = v22;
              }

              while (!v18);
            }
          }

          uint64_t v3 = v22;
        }

        while (v22 != v4);
      }

      BOOL v27 = *(unint64_t **)(v1 + 168);
      uint64_t v26 = *(unint64_t **)(v1 + 176);
      while (v27 != v26)
      {
        uint64_t v28 = (void *)*v4;
        if (*v4)
        {
          unint64_t v29 = *v27;
          int v30 = v4;
          do
          {
            unint64_t v31 = v28[4];
            BOOL v32 = v31 >= v29;
            if (v31 >= v29) {
              uint64_t v33 = v28;
            }
            else {
              uint64_t v33 = v28 + 1;
            }
            if (v32) {
              int v30 = v28;
            }
            uint64_t v28 = (void *)*v33;
          }

          while (*v33);
          if (v30 != v4 && v29 >= v30[4])
          {
            uint64_t v34 = *(void *)v30[5];
            if (v34)
            {
              (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(void *)v34 + 24LL))(v34, v27 + 1, 1LL);
              uint64_t v26 = *(unint64_t **)(v1 + 176);
            }
          }
        }

        v27 += 6;
      }

      sub_10024E9C0((uint64_t *)(v1 + 168));
      *(void *)(v1 + 200) = *(void *)(v1 + 192);
      sub_100242FAC((uint64_t)v43);
    }
  }

  return sub_100242CD8(&v44);
}

void sub_100245578( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

void sub_1002455C4(uint64_t a1)
{
}

unint64_t sub_1002455CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 88LL))(v10) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR)) {
      sub_100662A30();
    }
    return 0LL;
  }

  id v11 = (uint64_t **)(a1 + 144);
  uint64_t v12 = *(void **)(a1 + 144);
  if (v12 != (void *)(a1 + 152))
  {
    while (*(void *)v12[5] != a2)
    {
      int v13 = (void *)v12[1];
      if (v13)
      {
        do
        {
          id v14 = v13;
          int v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          id v14 = (void *)v12[2];
          BOOL v15 = *v14 == (void)v12;
          uint64_t v12 = v14;
        }

        while (!v15);
      }

      uint64_t v12 = v14;
      if (v14 == (void *)(a1 + 152)) {
        goto LABEL_10;
      }
    }

    uint64_t v16 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(v12[4], (uint64_t)__p);
      uint64_t v23 = v28 >= 0 ? __p : (void **)__p[0];
      uint64_t v24 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
      *(_DWORD *)__int128 buf = 136446466;
      *(void *)&uint8_t buf[4] = v23;
      __int16 v30 = 2082;
      uint64_t v31 = v24;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Duplicate check-in message from session %{public}s in application %{public}s",  buf,  0x16u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    return 0LL;
  }

void sub_10024591C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100245948(uint64_t a1, uint64_t a2)
{
  v27[0] = 0LL;
  v27[1] = 0LL;
  sub_100242F28((uint64_t)v27, a1 + 80);
  uint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v4 != (uint64_t *)(a1 + 152))
  {
    while (1)
    {
      uint64_t v5 = v4[5];
      if (*(void *)v5 == a2) {
        break;
      }
      uint64_t v6 = (uint64_t *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (uint64_t *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (uint64_t *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }

        while (!v8);
      }

      uint64_t v4 = v7;
    }

    uint64_t v9 = v4[4];
    uint64_t v10 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v9, (uint64_t)__p);
      id v11 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 136446210;
      unint64_t v29 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Unregistering scalable pipe session %{public}s",  buf,  0xCu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    int v12 = *(unsigned __int8 *)(v5 + 57);
    int v13 = *(void **)(a1 + 168);
    uint64_t v14 = *(void *)(a1 + 176);
    while (v13 != (void *)v14)
    {
      if (v9 == *v13)
      {
        sub_10024EA0C((uint64_t)__p, (uint64_t)(v13 + 6), v14, (uint64_t)v13);
        uint64_t v14 = v15;
        for (uint64_t i = *(void *)(a1 + 176); i != v14; i -= 48LL)
        {
        }

        *(void *)(a1 + 176) = v14;
      }

      else
      {
        v13 += 6;
      }
    }

    unint64_t v17 = *(uint64_t **)(v5 + 32);
    *(_BYTE *)(v5 + 56) = 1;
    *(void *)uint64_t v5 = 0LL;
    do
    {
      uint64_t v18 = *v17;
      if (*(_BYTE *)(*v17 + 39) || sub_100245C58(a1, v9, (const void **)*v17))
      {
        ++v17;
      }

      else
      {
        uint64_t v19 = *(uint64_t **)(v5 + 40);
        uint64_t v20 = (char *)v19 - (char *)(v17 + 1);
        if (v19 != v17 + 1) {
          memmove(v17, v17 + 1, (char *)v19 - (char *)(v17 + 1));
        }
        *(void *)(v5 + 40) = (char *)v17 + v20;

        operator delete((void *)v18);
      }
    }

    while (v17 != *(uint64_t **)(v5 + 40));
    if (v17 == *(uint64_t **)(v5 + 32))
    {
LABEL_39:
      sub_1001FDBCC((uint64_t **)(a1 + 144), v4);
      operator delete(v4);
      int v21 = (void *)sub_10024E10C(v5);
      operator delete(v21);
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100889868);
      }
      uint64_t v22 = qword_1008D61A0;
      unint64_t v23 = sub_100494CF8(v9);
      sub_1004966BC(v22, v23);
    }

    if (v12) {
      sub_100245E98(a1);
    }
  }

  return sub_100242FAC((uint64_t)v27);
}

void sub_100245C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100245C58(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a3;
    sub_100494958(a2, (uint64_t)__p);
    if (v21 >= 0) {
      BOOL v8 = __p;
    }
    else {
      BOOL v8 = *(_BYTE **)__p;
    }
    *(_DWORD *)__int128 buf = 136446466;
    unint64_t v23 = v7;
    __int16 v24 = 2082;
    uint64_t v25 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Unregistering endpoint %{public}s on session %{public}s",  buf,  0x16u);
    if (v21 < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (*(_BYTE *)(a1 + 56))
  {
    *((_BYTE *)a3 + 39) = 1;
    buf[0] = 0;
    sub_100242CA4(buf);
    if (*((char *)a3 + 23) < 0)
    {
      uint64_t v10 = *a3;
      uint64_t v9 = a3[1];
    }

    else
    {
      LODWORD(v9) = *((unsigned __int8 *)a3 + 23);
      uint64_t v10 = a3;
    }

    unsigned int v12 = (_DWORD)v9 + 1;
    unsigned int v13 = *((_DWORD *)a3 + 7) - 1;
    if (v13 > 3) {
      int v14 = 1;
    }
    else {
      int v14 = dword_1006BFA50[v13];
    }
    int v15 = sub_1000904F4(v10, v12, *((unsigned int *)a3 + 6), v14);
    if (v15)
    {
      uint64_t v16 = (os_log_s *)qword_1008F75C8;
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__p = 136446466;
        *(void *)&__p[4] = a3;
        __int16 v19 = 1024;
        int v20 = v15;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "Couldn't unregister valid endpoint %{public}s with result %{bluetooth:OI_STATUS}u",  __p,  0x12u);
      }

      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v11 = 10LL;
    }

    sub_100242CD8(buf);
  }

  else
  {
    if ([(id)a3[5] count] && os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_FAULT)) {
      sub_100662A94();
    }
    return 0LL;
  }

  return v11;
}

void sub_100245E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100245E98(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v1 = *(void **)(a1 + 144);
    uint64_t v2 = (void *)(a1 + 152);
    if (v1 != (void *)(a1 + 152))
    {
      do
      {
        uint64_t v3 = v1[5];
        if (*(_BYTE *)(v3 + 57))
        {
          if (!*(_BYTE *)(v3 + 56)) {
            return;
          }
          uint64_t v4 = v1[4];
          uint64_t v5 = (os_log_s *)qword_1008F75C8;
          if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100494958(v4, (uint64_t)__p);
            uint64_t v6 = v11 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)__int128 buf = 136446210;
            unsigned int v13 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s has link requirements but it's zombied",  buf,  0xCu);
            if (v11 < 0) {
              operator delete(__p[0]);
            }
          }
        }

        uint64_t v7 = (void *)v1[1];
        if (v7)
        {
          do
          {
            BOOL v8 = v7;
            uint64_t v7 = (void *)*v7;
          }

          while (v7);
        }

        else
        {
          do
          {
            BOOL v8 = (void *)v1[2];
            BOOL v9 = *v8 == (void)v1;
            uint64_t v1 = v8;
          }

          while (!v9);
        }

        uint64_t v1 = v8;
      }

      while (v8 != v2);
    }

    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    sub_10008AF68();
    sub_100242CD8(__p);
  }

void sub_10024600C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100246028( uint64_t a1, unint64_t a2, void *a3, int a4, unsigned int a5, int a6, int a7, int a8, char a9)
{
  v141[0] = 0LL;
  v141[1] = 0LL;
  sub_100242F28((uint64_t)v141, a1 + 80);
  unint64_t v17 = (void *)(a1 + 152);
  uint64_t v16 = *(void **)(a1 + 152);
  if (!v16) {
    goto LABEL_239;
  }
  uint64_t v18 = (void *)(a1 + 152);
  do
  {
    unint64_t v19 = v16[4];
    BOOL v20 = v19 >= a2;
    if (v19 >= a2) {
      char v21 = v16;
    }
    else {
      char v21 = v16 + 1;
    }
    if (v20) {
      uint64_t v18 = v16;
    }
    uint64_t v16 = (void *)*v21;
  }

  while (*v21);
  if (v18 == v17 || v18[4] > a2)
  {
LABEL_239:
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_FAULT))
    {
      sub_100494958(a2, (uint64_t)__p);
      sub_100662B04();
    }

void sub_100246C04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, int a34, __int16 a35, char a36, char a37, int a38, __int16 a39, char a40, char a41)
{
}

uint64_t sub_100246C90(void *a1, unint64_t a2, char *a3)
{
  v51[0] = 0LL;
  v51[1] = 0LL;
  sub_100242F28((uint64_t)v51, (uint64_t)(a1 + 10));
  uint64_t v6 = (void *)a1[19];
  if (!v6) {
    goto LABEL_98;
  }
  uint64_t v7 = a1 + 19;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == a1 + 19 || v7[4] > a2)
  {
LABEL_98:
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_FAULT))
    {
      sub_100494958(a2, (uint64_t)__p);
      sub_100662B04();
    }

void sub_1002471A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1002471D0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, int a5, int a6, void *a7)
{
  id v13 = a3;
  id v14 = a7;
  if (*(_BYTE *)(a1 + 56))
  {
    size_t v17 = *(void **)(a1 + 152);
    uint64_t v16 = (void *)(a1 + 152);
    uint64_t v15 = v17;
    if (!v17) {
      goto LABEL_53;
    }
    uint64_t v18 = v16;
    do
    {
      unint64_t v19 = v15[4];
      BOOL v20 = v19 >= a2;
      if (v19 >= a2) {
        int v21 = v15;
      }
      else {
        int v21 = v15 + 1;
      }
      if (v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = (void *)*v21;
    }

    while (*v21);
    if (v18 != v16 && v18[4] <= a2)
    {
      uint64_t v22 = (os_log_s *)qword_1008F75C8;
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(a2, (uint64_t)__p);
        unint64_t v23 = (SBYTE7(v49) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int128 buf = 136447234;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v13;
        *(_WORD *)&_BYTE buf[22] = 1024;
        *(_DWORD *)&buf[24] = a4;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = a5;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = a6;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is requesting %{public}@ link requirements of %d pps, %d Bps input, %d Bps output",  buf,  0x28u);
        if (SBYTE7(v49) < 0) {
          operator delete(__p[0]);
        }
      }

      *(_BYTE *)(v18[5] + 57LL) = (_DWORD)a4 != 0;
      int v36 = [v14 isEqualToString:@"com.apple.private.alloy.siri.proxy"];
      if ([v14 isEqualToString:@"metrics"])
      {
        uint64_t v24 = (os_log_s *)qword_1008F75C8;
        if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Metrics!", buf, 2u);
        }

        if (qword_1008D9158 != -1) {
          dispatch_once(&qword_1008D9158, &stru_1008897C8);
        }
        uint64_t v25 = qword_1008D9150;
        uint64_t v26 = sub_100404FE8();
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_10024ADC0;
        *(void *)&buf[24] = &unk_10087EB20;
        *(void *)&buf[32] = v25;
        sub_100405384(v26, buf);
      }

      memcpy(buf, "clientname", 0x400uLL);
      int v40 = 0LL;
      uint64_t v41 = 0LL;
      uint64_t v42 = 0LL;
      sub_100494958(a2, (uint64_t)&v40);
      int v37 = 0LL;
      uint64_t v38 = 0LL;
      uint64_t v39 = 0LL;
      id v27 = v14;
      sub_10002418C(&v37, (char *)[v27 UTF8String]);
      *(_OWORD *)__p = 0u;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v51 = 0u;
      LOBYTE(__p[0]) = 4;
      __int16 v28 = HIBYTE(v39);
      if (v39 >= 0)
      {
        unint64_t v29 = &v37;
      }

      else
      {
        __int16 v28 = v38;
        unint64_t v29 = v37;
      }

      WORD1(__p[0]) = v28;
      __p[1] = v29;
      LOBYTE(v49) = 4;
      __int16 v30 = HIBYTE(v42);
      if (v42 < 0) {
        __int16 v30 = v41;
      }
      uint64_t v31 = &v40;
      if (v42 < 0) {
        uint64_t v31 = v40;
      }
      WORD1(v49) = v30;
      *((void *)&v49 + 1) = v31;
      LOBYTE(v50) = 1;
      WORD1(v50) = 4;
      DWORD2(v50) = a5;
      LOBYTE(v51) = 1;
      WORD1(v51) = 4;
      DWORD2(v51) = a4;
      sub_1000B142C("Magnet", (const char *)buf, __p, 4);
      int v32 = (os_log_s *)qword_1008F75C8;
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
      {
        id v33 = [v27 UTF8String];
        sub_100494958(a2, (uint64_t)v43);
        uint64_t v34 = v44 >= 0 ? v43 : (void **)v43[0];
        *(_DWORD *)uint64_t v45 = 136446466;
        *(void *)&v45[4] = v33;
        __int16 v46 = 2082;
        uint64_t v47 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Magnet clientname %{public}s: %{public}s",  v45,  0x16u);
        if (v44 < 0) {
          operator delete(v43[0]);
        }
      }

      *(void *)uint64_t v45 = 0LL;
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_100889808);
      }
      uint64_t v35 = off_1008D5F08;
      sub_100241F90(v43, v13);
      if (sub_100599890((uint64_t)v35, (unsigned __int8 *)v43, v45))
      {
        LOBYTE(v43[0]) = 0;
        sub_100242CA4(v43);
        sub_10008AC2C(*(uint64_t *)v45, a4, a5, a6, v36);
        sub_100242CD8(v43);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
      {
        sub_100662BD8();
      }

      if (SHIBYTE(v39) < 0) {
        operator delete(v37);
      }
      if (SHIBYTE(v42) < 0) {
        operator delete(v40);
      }
    }

    else
    {
LABEL_53:
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_FAULT))
      {
        sub_100494958(a2, (uint64_t)buf);
        sub_100662B04();
      }
    }
  }
}

void sub_1002476B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_100247728(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, int a6)
{
  id v11 = a3;
  if (*(_BYTE *)(a1 + 56))
  {
    id v14 = *(void **)(a1 + 152);
    id v13 = (void *)(a1 + 152);
    unsigned int v12 = v14;
    if (!v14) {
      goto LABEL_31;
    }
    uint64_t v15 = v13;
    do
    {
      unint64_t v16 = v12[4];
      BOOL v17 = v16 >= a2;
      if (v16 >= a2) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = v12 + 1;
      }
      if (v17) {
        uint64_t v15 = v12;
      }
      unsigned int v12 = (void *)*v18;
    }

    while (*v18);
    if (v15 != v13 && v15[4] <= a2)
    {
      unint64_t v19 = (os_log_s *)qword_1008F75C8;
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(a2, (uint64_t)__p);
        BOOL v20 = v24 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int128 buf = 136447234;
        uint64_t v26 = v20;
        __int16 v27 = 2114;
        id v28 = v11;
        __int16 v29 = 1024;
        int v30 = a4;
        __int16 v31 = 1024;
        int v32 = a5;
        __int16 v33 = 1024;
        int v34 = a6;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is requesting %{public}@ link requirements of latency %d ms, %d Bps input, %d Bps output",  buf,  0x28u);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }

      *(_BYTE *)(v15[5] + 57LL) = a4 != 0;
      char v22 = 0;
      sub_100242CA4(&v22);
      __p[0] = 0LL;
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_100889808);
      }
      int v21 = off_1008D5F08;
      sub_100241F90(buf, v11);
      if (sub_100599890((uint64_t)v21, buf, __p))
      {
        sub_10008AED8((uint64_t)__p[0], a4, a5, a6);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
      {
        sub_100662BD8();
      }

      sub_100242CD8(&v22);
    }

    else
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_FAULT))
      {
        sub_100494958(a2, (uint64_t)buf);
        sub_100662B04();
      }
    }
  }
}

void sub_100247988( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _Unwind_Resume(a1);
}

id sub_1002479BC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, a1 + 80);
  uint64_t v3 = *(void **)(a1 + 144);
  uint64_t v4 = (void *)(a1 + 152);
  if (v3 != (void *)(a1 + 152))
  {
    do
    {
      uint64_t v5 = v3[5];
      for (uint64_t i = *(uint64_t **)(v5 + 32); i != *(uint64_t **)(v5 + 40); ++i)
      {
        uint64_t v7 = *i;
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        __int128 v18 = 0u;
        __int128 v19 = 0u;
        id v8 = *(id *)(v7 + 40);
        id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v19;
          do
          {
            for (uint64_t j = 0LL; j != v9; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v19 != v10) {
                objc_enumerationMutation(v8);
              }
              [v2 addObject:v12];
            }

            id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
          }

          while (v9);
        }
      }

      id v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          id v14 = v13;
          id v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          id v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }

        while (!v15);
      }

      uint64_t v3 = v14;
    }

    while (v14 != v4);
  }

  unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);
  sub_100242FAC((uint64_t)v22);

  return v16;
}

void sub_100247B7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100247BC4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  v29[0] = 0LL;
  v29[1] = 0LL;
  sub_100242F28((uint64_t)v29, a1 + 80);
  uint64_t v3 = *(void **)(a1 + 144);
  __int128 v21 = (void *)(a1 + 152);
  if (v3 != (void *)(a1 + 152))
  {
    do
    {
      uint64_t v4 = v3[5];
      uint64_t v5 = *(void **)(v4 + 32);
      uint64_t v22 = v4;
      while (v5 != *(void **)(v4 + 40))
      {
        unint64_t v23 = v5;
        uint64_t v6 = *v5;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        id v7 = *(id *)(v6 + 40);
        id v8 = [v7 countByEnumeratingWithState:&v25 objects:v31 count:16];
        if (v8)
        {
          uint64_t v9 = *(void *)v26;
          while (2)
          {
            uint64_t v10 = 0LL;
            do
            {
              if (*(void *)v26 != v9) {
                objc_enumerationMutation(v7);
              }
              id v11 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)v10);
              unsigned int v12 = (void *)[v11 identifier:v21];
              unsigned __int8 v13 = [v2 containsObject:v12];

              if ((v13 & 1) == 0)
              {
                uint64_t v24 = 0LL;
                if (qword_1008D5F10 != -1) {
                  dispatch_once(&qword_1008D5F10, &stru_100889808);
                }
                id v14 = off_1008D5F08;
                BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
                sub_100241F90(v30, v15);
                LODWORD(v14) = sub_100599890((uint64_t)v14, v30, &v24);

                if ((_DWORD)v14)
                {
                  if (sub_1001B9B0C(v24))
                  {

                    uint64_t v19 = 1LL;
                    goto LABEL_25;
                  }
                }
              }

              uint64_t v10 = (char *)v10 + 1;
            }

            while (v8 != v10);
            id v8 = [v7 countByEnumeratingWithState:&v25 objects:v31 count:16];
            if (v8) {
              continue;
            }
            break;
          }
        }

        uint64_t v4 = v22;
        uint64_t v5 = v23 + 1;
      }

      unint64_t v16 = (void *)v3[1];
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          unint64_t v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          BOOL v17 = (void *)v3[2];
          BOOL v18 = *v17 == (void)v3;
          uint64_t v3 = v17;
        }

        while (!v18);
      }

      uint64_t v3 = v17;
    }

    while (v17 != v21);
  }

  uint64_t v19 = 0LL;
LABEL_25:
  sub_100242FAC((uint64_t)v29);

  return v19;
}

void sub_100247E20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100247E74(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  v32[0] = 0LL;
  v32[1] = 0LL;
  sub_100242F28((uint64_t)v32, a1 + 80);
  uint64_t v4 = *(void **)(a1 + 144);
  uint64_t v24 = (void *)(a1 + 152);
  if (v4 != (void *)(a1 + 152))
  {
    do
    {
      uint64_t v5 = v4[5];
      uint64_t v6 = *(void **)(v5 + 32);
      uint64_t v25 = v5;
      while (1)
      {
        __int128 v26 = v6;
        if (v6 == *(void **)(v5 + 40)) {
          break;
        }
        uint64_t v7 = *v6;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        id v8 = *(id *)(v7 + 40);
        id v9 = [v8 countByEnumeratingWithState:&v28 objects:v33 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v29;
          while (2)
          {
            for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v29 != v10) {
                objc_enumerationMutation(v8);
              }
              unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 UUIDString]);
              id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);
              unsigned int v15 = [v13 isEqualToString:v14];

              if (v15)
              {
                sub_1004949D8(v4[4], &__p);
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                BOOL v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p));
                [v23 addObject:v17];

                goto LABEL_19;
              }
            }

            id v9 = [v8 countByEnumeratingWithState:&v28 objects:v33 count:16];
            if (v9) {
              continue;
            }
            break;
          }
        }

        uint64_t v5 = v25;
        uint64_t v6 = v26 + 1;
      }

void sub_1002480E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  _Unwind_Resume(a1);
}

void sub_10024817C(_BYTE *a1, uint64_t a2, char a3)
{
  __int16 v38 = 0;
  char v37 = 0;
  sub_100248584((uint64_t)a1, a1 + 57, &v38, &v37, (_BYTE *)&v38 + 1);
  if (a1[57])
  {
    uint64_t v6 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ePA disabled by defaults write", buf, 2u);
    }

    return;
  }

  sub_1002E6E9C();
  uint64_t v7 = sub_1002CDBAC();
  if (!(_DWORD)v7)
  {
    sub_1002E6E9C();
    if (!sub_1002CDC0C()) {
      return;
    }
    BOOL v17 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Enable increased Tx power for Marconi2",  buf,  2u);
    }

    uint64_t v18 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v18 + 184LL))( v18,  a2,  2LL,  0LL,  30LL,  10LL);
    goto LABEL_20;
  }

  id v8 = a1 + 61;
  sub_100248800(v7, a1 + 61);
  uint64_t v9 = sub_1002E6BF0();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 160LL))(v9);
  if ((_DWORD)v10)
  {
    id v11 = (os_log_s *)qword_1008F75C8;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT);
    uint64_t v13 = HIBYTE(v38);
    if (v12)
    {
      int v14 = *v8;
      *(_DWORD *)__int128 buf = 67109376;
      int v40 = HIBYTE(v38);
      __int16 v41 = 1024;
      int v42 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Enabling ePABF on HDR magnet (available >= 4378B1/4378B3), policy: %#x, RSSI threshold: %d dBm",  buf,  0xEu);
    }

    uint64_t v15 = sub_1002E6E9C();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void, void, void))(*(void *)v15 + 128LL))( v15,  0LL,  a2,  v13,  *v8,  0LL,  0LL);
    sub_100248968(v16, a2, 1LL);
    goto LABEL_20;
  }

  uint64_t v19 = a1 + 59;
  BOOL v20 = a1 + 60;
  sub_100248AF8(v10, a3, a1 + 59, a1 + 60);
  sub_100248B58((uint64_t)a1);
  sub_1002E6E9C();
  int v21 = sub_1002CDD88();
  int v22 = a1[60];
  uint64_t v23 = qword_1008F75C8;
  BOOL v24 = os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT);
  uint64_t v25 = HIBYTE(v38);
  if (v21 == v22)
  {
    if (v24)
    {
      int v26 = *v8;
      int v27 = 25 * *v19;
      *(_DWORD *)__int128 buf = 67109888;
      int v40 = HIBYTE(v38);
      __int16 v41 = 1024;
      int v42 = v26;
      __int16 v43 = 1024;
      int v44 = v27;
      __int16 v45 = 1024;
      int v46 = 25 * v21;
      __int128 v28 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, low: %d";
      __int128 v29 = (os_log_s *)v23;
      uint32_t v30 = 26;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, buf, v30);
    }
  }

  else if (v24)
  {
    int v31 = *v8;
    int v32 = 25 * *v19;
    *(_DWORD *)__int128 buf = 67110144;
    int v40 = HIBYTE(v38);
    __int16 v41 = 1024;
    int v42 = v31;
    __int16 v43 = 1024;
    int v44 = v32;
    __int16 v45 = 1024;
    int v46 = 25 * v22;
    __int16 v47 = 1024;
    int v48 = 25 * v21;
    __int128 v28 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, medium: %d, low (unused): %d";
    __int128 v29 = (os_log_s *)v23;
    uint32_t v30 = 32;
    goto LABEL_18;
  }

  uint64_t v33 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v33 + 104LL))( v33,  a2,  3LL,  v25,  *v19,  *v20,  *v8);
  uint64_t v34 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 120LL))(v34, 1LL);
  uint64_t v35 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v35 + 104LL))( v35,  a2,  4LL,  v25,  *v19,  *v20,  *v8);
  uint64_t v36 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 120LL))(v36, 1LL);
LABEL_20:
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_100889888);
  }
  sub_1004267B0((uint64_t)off_1008D60C8, a2, 0xFFFFFFFFLL, 0LL, 702LL, 0LL);
}

void sub_100248584(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  __int16 v19 = 0;
  char v18 = 0;
  uint64_t v9 = sub_1002E6E00();
  sub_10002418C(buf, "ePA");
  sub_10002418C(__p, "DisableMagnetEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v9 + 72LL))(v9, buf, __p, (char *)&v19 + 1);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v10 = sub_1002E6E00();
  sub_10002418C(buf, "ePA");
  sub_10002418C(__p, "DisableReTxEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, __int16 *))(*(void *)v10 + 72LL))(v10, buf, __p, &v19);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v11 = sub_1002E6E00();
  sub_10002418C(buf, "ePA");
  sub_10002418C(__p, "DisableThresholdEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v11 + 72LL))(v11, buf, __p, &v18);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(*(void **)buf);
  }
  *a2 = HIBYTE(v19);
  *a3 = v19;
  *a4 = v18;
  *a5 = 3;
  if (*a3)
  {
    *a5 = 1;
    BOOL v12 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Warning: Disabling ePA for retransmission policy through defaults write",  buf,  2u);
    }
  }

  if (*a4)
  {
    *a5 &= ~1u;
    uint64_t v13 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Warning: Disabling threshold based ePA policy through defaults write",  buf,  2u);
    }
  }

void sub_1002487BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100248800(uint64_t a1, _BYTE *a2)
{
  int v9 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "ePA");
  sub_10002418C(__p, "ePAThreshold");
  int v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v3 + 88LL))(v3, buf, __p, &v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((v11 & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_5;
    }
LABEL_8:
    *a2 = -69;
    return;
  }

  operator delete(*(void **)buf);
  if (!v4) {
    goto LABEL_8;
  }
LABEL_5:
  char v5 = v9;
  *a2 = v9;
  uint64_t v6 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Warning: Setting user defined ePA threshold to %d dBm through defaults write",  buf,  8u);
  }

void sub_10024892C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100248968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1002E6E00();
  uint64_t v6 = sub_1002E6E00();
  uint64_t v7 = (os_log_s *)qword_1008F75C8;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)a3)
  {
    if (!v8) {
      goto LABEL_9;
    }
    __int16 v29 = 0;
    int v9 = "Enabling ePA/beamforming VSE Logging for Magnet";
    uint64_t v10 = (uint8_t *)&v29;
  }

  else
  {
    if (!v8) {
      goto LABEL_9;
    }
    *(_WORD *)__int128 buf = 0;
    int v9 = "Disabling ePA/beamforming VSE Logging for Magnet";
    uint64_t v10 = buf;
  }

  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, v10, 2u);
LABEL_9:
  uint64_t v11 = sub_1002E6E9C();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v11 + 128LL))( v11,  2LL,  a2,  a3,  0LL,  0LL,  0LL);
  uint64_t v13 = (os_log_s *)qword_1008F75C8;
  if (!(_DWORD)v12)
  {
    BOOL v22 = os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_INFO);
    if ((_DWORD)a3)
    {
      if (v22)
      {
        __int16 v27 = 0;
        uint64_t v23 = "Beamforming VSE Logging enabled for Magnet";
        BOOL v24 = (uint8_t *)&v27;
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v23, v24, 2u);
      }
    }

    else if (v22)
    {
      __int16 v26 = 0;
      uint64_t v23 = "Beamforming VSE Logging disabled for Magnet";
      BOOL v24 = (uint8_t *)&v26;
      goto LABEL_20;
    }

    return 0LL;
  }

  uint64_t v14 = v12;
  BOOL v15 = os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR);
  if ((_DWORD)a3)
  {
    if (v15) {
      sub_100662C04(v14, v13, v16, v17, v18, v19, v20, v21);
    }
  }

  else if (v15)
  {
    sub_100662C68(v14, v13, v16, v17, v18, v19, v20, v21);
  }

  return v14;
}

uint64_t sub_100248AF8(uint64_t a1, char a2, _BYTE *a3, _BYTE *a4)
{
  *a3 = sub_1002CDF04();
  sub_1002E6E9C();
  *a4 = sub_1002CDD88();
  sub_1002E6E9C();
  uint64_t result = sub_1002CDD68();
  if ((_DWORD)result)
  {
    if ((a2 & 1) == 0)
    {
      sub_1002E6E9C();
      uint64_t result = sub_1002CE130();
      *a4 = result;
    }
  }

  return result;
}

uint64_t sub_100248B58(uint64_t result)
{
  if (!*(_BYTE *)(result + 57))
  {
    uint64_t v1 = result;
    int v2 = *(unsigned __int8 *)(result + 58);
    uint64_t v3 = sub_1002E6E9C();
    if (v2) {
      uint64_t v4 = 5LL;
    }
    else {
      uint64_t v4 = 0LL;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v3 + 80LL))( v3,  3LL,  v4,  *(unsigned __int8 *)(v1 + 59),  *(unsigned __int8 *)(v1 + 60),  *(char *)(v1 + 61));
    uint64_t v5 = sub_1002E6E9C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v5 + 80LL))( v5,  4LL,  v4,  *(unsigned __int8 *)(v1 + 59),  *(unsigned __int8 *)(v1 + 60),  *(char *)(v1 + 61));
  }

  return result;
}

void sub_100248BDC(uint64_t a1, int a2, int a3)
{
  if (a2 == 1)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = sub_100404FE8();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100248C4C;
    v8[3] = &unk_10087EB68;
    v8[4] = a1;
    int v9 = a3;
    sub_100405384(v7, v8);
  }

void *sub_100248C4C(void *result)
{
  uint64_t v1 = result[4];
  int v2 = *(void **)(v1 + 144);
  uint64_t v3 = (void *)(v1 + 152);
  if (v2 != (void *)(v1 + 152))
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = *(void **)v2[5];
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *, void, void))(*result + 40LL))( result,  v2[4],  *((unsigned int *)v4 + 10));
      }
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          int v2 = v6;
        }

        while (!v7);
      }

      int v2 = v6;
    }

    while (v6 != v3);
  }

  return result;
}

void sub_100248CDC(uint64_t a1)
{
  if (sub_100244F34(a1))
  {
    uint64_t v2 = sub_100404FE8();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100248D44;
    v3[3] = &unk_10087EB20;
    v3[4] = a1;
    sub_100405384(v2, v3);
  }

void sub_100248D44(uint64_t a1)
{
}

void sub_100248D4C(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v2 = sub_1002479BC(a1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v11 + 1) + 8LL * (void)v6);
        uint64_t v10 = 0LL;
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_100889808);
        }
        BOOL v8 = off_1008D5F08;
        sub_100241F90(buf, v7);
        if (sub_100599890((uint64_t)v8, buf, &v10))
        {
          sub_10024CAD0(a1, v10);
        }

        else
        {
          int v9 = (os_log_s *)qword_1008F75C8;
          if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138543362;
            uint64_t v16 = v7;
            _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Could not get handle from uuid %{public}@",  buf,  0xCu);
          }
        }

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v3 countByEnumeratingWithState:&v11 objects:v17 count:16];
    }

    while (v4);
  }
}

void sub_100248F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100248F30(uint64_t a1)
{
}

void sub_100248F38(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (!a3 && *(_BYTE *)(a1 + 56))
  {
    uint64_t v17 = 0LL;
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100889808);
    }
    uint64_t v6 = off_1008D5F08;
    sub_100241F90(buf, v5);
    if (sub_100599890((uint64_t)v6, buf, &v17))
    {
      char v16 = 0;
      sub_100242CA4(&v16);
      if (!sub_1001B9B0C(v17))
      {
        uint64_t v7 = (os_log_s *)qword_1008F75C8;
        if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138543362;
          id v19 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Initiating pipe capability exchange with device %{public}@",  buf,  0xCu);
        }

        uint64_t v8 = sub_10008E1E0(v17);
        if ((_DWORD)v8)
        {
          int v9 = (os_log_s *)qword_1008F75C8;
          if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR)) {
            sub_100662CCC(v8, v9, v10, v11, v12, v13, v14, v15);
          }
        }
      }

      sub_100242CD8(&v16);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
    {
      sub_100662D30();
    }
  }
}

void sub_1002490CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  _Unwind_Resume(a1);
}

void sub_1002490FC(uint64_t a1, void *a2, int a3)
{
}

void sub_100249104(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
  id v11 = a2;
  uint64_t v12 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 67109888;
    int v23 = a3;
    __int16 v24 = 1024;
    int v25 = a4;
    __int16 v26 = 1024;
    int v27 = a5;
    __int16 v28 = 1024;
    int v29 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "CL Ready in ScalablePipe peerVersion:%d peerFeatures:%x localVersion:%d localFeatures:%x",  buf,  0x1Au);
  }

  uint64_t v13 = sub_100404FE8();
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10024927C;
  v15[3] = &unk_100880090;
  uint64_t v17 = a1;
  id v14 = v11;
  id v16 = v14;
  char v20 = a3;
  char v21 = a5;
  int v18 = a4;
  int v19 = a6;
  sub_100405384(v13, v15);
}

void sub_100249254( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10024927C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100889808);
  }
  uint64_t v9 = 0LL;
  uint64_t v3 = off_1008D5F08;
  sub_100241F90(buf, *(void *)(a1 + 32));
  if (sub_100599890((uint64_t)v3, buf, &v9))
  {
    char v8 = 0;
    sub_100242CA4(&v8);
    int v4 = sub_100091610(v9);
    sub_100242CD0(&v8);
    id v5 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v11 = v6;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "device %{public}@ companionLink=%d", buf, 0x12u);
    }

    if (v4)
    {
      uint64_t v7 = (os_log_s *)qword_1008F75C8;
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "This is a companion link, pre-taggine with HasTS",  buf,  2u);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008898A8);
      }
      sub_1005CE490((uint64_t)off_1008D5F28, *(void **)(a1 + 32));
    }

    sub_100242CD8(&v8);
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008898A8);
  }
  sub_1005D7024((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(_BYTE *)(a1 + 56), *(_DWORD *)(a1 + 48));
  *(_BYTE *)(v2 + 224) = *(_BYTE *)(a1 + 57);
  *(_DWORD *)(v2 + 228) = *(_DWORD *)(a1 + 52);
}

void sub_1002494A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

void sub_1002494C0(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
}

void sub_1002494C8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v30[0] = 0LL;
  v30[1] = 0LL;
  sub_100242F28((uint64_t)v30, a1 + 80);
  uint64_t v6 = *(void **)(a1 + 144);
  int v23 = (void *)(a1 + 152);
  if (v6 != (void *)(a1 + 152))
  {
    do
    {
      __int16 v24 = v6;
      uint64_t v7 = (uint64_t *)v6[5];
      if (*v7)
      {
        for (uint64_t i = (void *)v7[4]; i != (void *)v7[5]; uint64_t i = v25 + 1)
        {
          int v25 = i;
          uint64_t v9 = (uint64_t *)*i;
          __int128 v28 = 0u;
          __int128 v29 = 0u;
          __int128 v26 = 0u;
          __int128 v27 = 0u;
          id v10 = (id)v9[5];
          id v11 = [v10 countByEnumeratingWithState:&v26 objects:v31 count:16];
          if (v11)
          {
            uint64_t v12 = *(void *)v27;
            do
            {
              for (uint64_t j = 0LL; j != v11; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v27 != v12) {
                  objc_enumerationMutation(v10);
                }
                unsigned int v15 = [v5 isEqual:v14];

                if (v15)
                {
                  id v16 = v9;
                  uint64_t v17 = *v7;
                  int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  v16));
                  (*(void (**)(uint64_t, void *, id, uint64_t))(*(void *)v17 + 48LL))(v17, v18, v5, a3);
                }
              }

              id v11 = [v10 countByEnumeratingWithState:&v26 objects:v31 count:16];
            }

            while (v11);
          }
        }
      }

      int v19 = v24;
      char v20 = (void *)v24[1];
      if (v20)
      {
        do
        {
          char v21 = v20;
          char v20 = (void *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          char v21 = (void *)v19[2];
          BOOL v22 = *v21 == (void)v19;
          int v19 = v21;
        }

        while (!v22);
      }

      uint64_t v6 = v21;
    }

    while (v21 != v23);
  }

  sub_100242FAC((uint64_t)v30);
}

void sub_1002496DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100249728(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_100249730(uint64_t a1, void *a2, int a3, int a4)
{
  id v6 = a2;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100889808);
  }
  uint64_t v10 = 0LL;
  uint64_t v7 = off_1008D5F08;
  sub_100241F90(buf, v6);
  if (sub_100599890((uint64_t)v7, buf, &v10))
  {
    char v8 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = "high";
      if (a3) {
        uint64_t v9 = "low";
      }
      *(_DWORD *)__int128 buf = 67109378;
      int v12 = a4;
      __int16 v13 = 2082;
      id v14 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "RSSI threshold crossed with RSSI=%d, crossed %{public}s threshold",  buf,  0x12u);
    }

    buf[0] = 0;
    sub_100242CA4(buf);
    sub_1000FF658(v10, a4);
    sub_100242CD8(buf);
  }
}

void sub_100249880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002498B0()
{
  return 1LL;
}

uint64_t sub_1002498B8()
{
  return 1LL;
}

void sub_1002498C0(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100249920;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_1004054B4(v2, v3);
}

uint64_t sub_100249920(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 62))
  {
    uint64_t v2 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "System will sleep, disabling asymmetric peripheral latency",  v4,  2u);
    }

    uint64_t v3 = sub_1002E6E9C();
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 800LL))(v3, 0LL);
    *(_BYTE *)(v1 + 62) = 0;
  }

  return result;
}

void sub_1002499A8(uint64_t a1)
{
  uint64_t v1 = a1 - 16;
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100249920;
  v3[3] = &unk_10087EB20;
  v3[4] = v1;
  sub_1004054B4(v2, v3);
}

void sub_100249A08(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100249A68;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_100249A68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 62))
  {
    id v2 = sub_1002479BC(*(void *)(a1 + 32));
    id v6 = (id)objc_claimAutoreleasedReturnValue(v2);
    if ([v6 count])
    {
      int v3 = sub_100247BC4(v1);

      if (v3)
      {
        int v4 = (os_log_s *)qword_1008F75C8;
        if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Peripheral connection exists, enabling asymmetric peripheral latency",  buf,  2u);
        }

        uint64_t v5 = sub_1002E6E9C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 800LL))(v5, 1LL);
        *(_BYTE *)(v1 + 62) = 1;
      }
    }

    else
    {
    }
  }

void sub_100249B48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100249B5C(uint64_t a1)
{
  uint64_t v1 = a1 - 16;
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100249A68;
  v3[3] = &unk_10087EB20;
  v3[4] = v1;
  sub_100405384(v2, v3);
}

uint64_t sub_100249BBC(uint64_t a1)
{
  if (*(void *)(a1 + 216))
  {
    uint64_t v2 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_FAULT)) {
      sub_100662D90(v2, v3, v4);
    }
  }

  uint64_t v5 = sub_1002E91F8(3LL, 7LL, 0LL);
  *(void *)(a1 + 216) = v5;
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = (os_log_s *)qword_1008F7668;
    if (os_log_type_enabled((os_log_t)qword_1008F7668, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v6 + 16LL))(v6);
      int v10 = 136446210;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Creating %{public}s", (uint8_t *)&v10, 0xCu);
    }
  }

  return sub_10008AFD8(1LL);
}

uint64_t sub_100249CC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 216);
  if (v1)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7668;
    if (!os_log_type_enabled((os_log_t)qword_1008F7668, OS_LOG_TYPE_DEFAULT)
      || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16LL))(v1),
          int v7 = 136446210,
          uint64_t v8 = v4,
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Destroying %{public}s",  (uint8_t *)&v7,  0xCu),  (uint64_t v1 = *(void *)(a1 + 216)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
    }

    *(void *)(a1 + 216) = 0LL;
  }

  else
  {
    uint64_t v5 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "fUpgradeAssertion was NULL when trying to deassert",  (uint8_t *)&v7,  2u);
    }
  }

  return sub_10008AFD8(0LL);
}

void sub_100249DEC(uint64_t a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  sub_100249BBC(qword_1008D9150);
  uint64_t v2 = sub_10024F00C();
  if (sub_1002522E4(v2, *(void *)(a1 + 32)))
  {
    uint64_t v3 = sub_1002E6E9C();
    int v4 = (*(uint64_t (**)(uint64_t, unint64_t, void, uint64_t, uint64_t, void, uint64_t, void))(*(void *)v3 + 72LL))( v3,  *(unsigned int *)(*(void *)(a1 + 32) + 57LL) | ((unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 32) + 61LL) << 32),  0LL,  8LL,  1LL,  0LL,  1LL,  0LL);
    uint64_t v5 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Tag iso link as high priority after upgrade with result %d",  (uint8_t *)v8,  8u);
    }
  }

  if (*(_BYTE *)(a1 + 48))
  {
    if (qword_1008D9158 != -1) {
      dispatch_once(&qword_1008D9158, &stru_1008897C8);
    }
    id v6 = (_BYTE *)qword_1008D9150;
    uint64_t v7 = *(void *)(a1 + 40);
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_1008898E8);
    }
    sub_10024817C(v6, v7, *((_BYTE *)off_1008D6190 + 203));
  }

const char *sub_100249F90(int a1)
{
  if (a1 > 15)
  {
    switch(a1)
    {
      case 16:
        return "USB";
      case 17:
        return "AWDL";
      case 18:
        return "NAN";
      default:
        return "Unknown";
    }
  }

  else
  {
    uint64_t result = "Invalid Transport";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "Bluetooth LE";
        break;
      case 2:
        uint64_t result = "Bluetooth Classic";
        break;
      case 3:
        uint64_t result = "WL";
        break;
      default:
        return "Unknown";
    }
  }

  return result;
}

void sub_10024A034(id a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  sub_100249CC0(qword_1008D9150);
  sub_10008AFD8(0LL);
}

void sub_10024A07C(uint64_t a1, char a2, int a3, int a4, int a5, int a6)
{
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  sub_10040CB94(&v32, 14);
  BYTE4(v32) = a2;
  uint64_t v33 = 0LL;
  __int16 v31 = 0;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100889808);
  }
  id v12 = sub_10059A5A8((uint64_t)off_1008D5F08, a1);
  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (v13)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008898A8);
    }
    uint64_t v14 = sub_1005CC478((uint64_t)off_1008D5F28, v13);
    if (v14) {
      uint64_t v33 = a6 / 1000 + 1000 * a5 - v14;
    }
    if (sub_1002E8D94())
    {
      uint64_t v15 = sub_1002E8D94();
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 40LL))(v15, &v32);
    }

    uint64_t v16 = sub_1002E6E00();
    sub_10002418C(v29, "Magnet");
    sub_10002418C(__p, "EnableRSSIHistory");
    (*(void (**)(uint64_t, void **, void **, __int16 *))(*(void *)v16 + 72LL))(v16, v29, __p, &v31);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    if ((_BYTE)v31)
    {
      uint64_t v17 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 808LL))(v17, a1, 1LL, 1LL);
    }

    uint64_t v18 = sub_1002E6E00();
    sub_10002418C(v29, "Magnet");
    sub_10002418C(__p, "EnableRSSIMonitoring");
    (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v18 + 72LL))(v18, v29, __p, (char *)&v31 + 1);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    if (HIBYTE(v31))
    {
      uint64_t v19 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 816LL))(v19, a1, 1LL);
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008898A8);
    }
    if ((sub_1005CE518((uint64_t)off_1008D5F28, v13) & 1) != 0)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008898A8);
      }
      char v20 = off_1008D5F28;
      sub_10002418C(v25, "_CTKD_");
      char v21 = sub_1005CE5A8((uint64_t)v20, v13, (uint64_t)v25);
      char v22 = v21;
      if (v26 < 0)
      {
        operator delete(v25[0]);
        if ((v22 & 1) != 0)
        {
LABEL_37:
          if (qword_1008D9168 != -1) {
            dispatch_once(&qword_1008D9168, &stru_100889928);
          }
          if (a3) {
            uint64_t v23 = 8000LL;
          }
          else {
            uint64_t v23 = 3000LL;
          }
          if (a4) {
            uint64_t v24 = 2000LL;
          }
          else {
            uint64_t v24 = 1000LL;
          }
          sub_1006424B4(qword_1008D9160, v23, v24);
          goto LABEL_46;
        }
      }

      else if ((v21 & 1) != 0)
      {
        goto LABEL_37;
      }

      if (qword_1008D5F20 == -1)
      {
LABEL_36:
        sub_100620F44(qword_1008D5F18, v13, 0);
        goto LABEL_37;
      }
    }

    else
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008898A8);
      }
      sub_1005CE490((uint64_t)off_1008D5F28, v13);
      if (qword_1008D5F20 == -1) {
        goto LABEL_36;
      }
    }

    dispatch_once(&qword_1008D5F20, &stru_100889908);
    goto LABEL_36;
  }

void sub_10024A42C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10024A490(uint64_t a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  sub_10024A07C( *(void *)(a1 + 32),  *(_BYTE *)(a1 + 48),  *(unsigned __int8 *)(a1 + 49),  *(unsigned __int8 *)(a1 + 50),  *(_DWORD *)(a1 + 40),  *(_DWORD *)(a1 + 44));
}

void sub_10024A4E8( char a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, unsigned int a8)
{
  uint64_t v22 = a3;
  uint64_t v21 = a4;
  uint64_t v11 = a5;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  uint64_t v12 = a7;
  uint64_t v13 = a8;
  sub_10040CB94(&v17, 15);
  BYTE4(v17) = a1;
  DWORD2(v17) = a2;
  __int128 v18 = 0uLL;
  *(void *)&__int128 v19 = v11;
  DWORD2(v19) = a6;
  *(void *)&__int128 v20 = v12;
  *((void *)&v20 + 1) = v13;
  *(void *)&__int128 v18 = sub_1001F42A4((uint64_t)&v22);
  *((void *)&v18 + 1) = sub_1001F42A4((uint64_t)&v21);
  if (sub_1002E8D94())
  {
    uint64_t v14 = sub_1002E8D94();
    (*(void (**)(uint64_t, __int128 *))(*(void *)v14 + 40LL))(v14, &v17);
  }

  uint64_t v15 = sub_10024F00C();
  sub_100254928(v15);
  uint64_t v16 = sub_100404FE8();
  sub_100405384(v16, &stru_100889638);
}

void sub_10024A5BC(id a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  sub_100249CC0(qword_1008D9150);
}

uint64_t sub_10024A5FC( unsigned int a1, char a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, unint64_t a8)
{
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  uint64_t v20 = 0LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v10 = a1;
  uint64_t v11 = a5;
  uint64_t v12 = a7;
  uint64_t v13 = 1000 * (int)a8 + ((int)(a8 >> 16) >> 16);
  sub_10040CB94(&v16, 16);
  *((void *)&v16 + 1) = v10;
  LOBYTE(v17) = a2;
  *((void *)&v17 + 1) = 0LL;
  *(void *)&__int128 v18 = 0LL;
  *((void *)&v18 + 1) = v11;
  LODWORD(v19) = a6;
  *((void *)&v19 + 1) = v12;
  uint64_t v20 = v13;
  *((void *)&v17 + 1) = sub_1001F42A4((uint64_t)&v22);
  *(void *)&__int128 v18 = sub_1001F42A4((uint64_t)&v21);
  uint64_t result = sub_1002E8D94();
  if (result)
  {
    uint64_t v15 = sub_1002E8D94();
    return (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v15 + 40LL))(v15, &v16);
  }

  return result;
}

void sub_10024A6C8(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v17 = 0LL;
  unint64_t v18 = 0LL;
  sub_10040CB94(&v17, 17);
  HIDWORD(v17) = a2;
  unint64_t v18 = __PAIR64__(a4, a3);
  if (sub_1002E8D94())
  {
    uint64_t v10 = sub_1002E8D94();
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 40LL))(v10, &v17);
  }

  uint64_t v11 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v11 + 344LL))(v11) & 1) == 0 && (a4 == 723 || a4 == 705))
  {
    uint64_t v12 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR)) {
      sub_100662EBC(a5, v12);
    }
    if (a5)
    {
      memset(uu, 0, sizeof(uu));
      uuid_clear(uu);
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_100889808);
      }
      if (sub_100593548((uint64_t)off_1008D5F08, a1, uu) && !uuid_is_null(uu))
      {
        uint64_t v13 = (os_log_s *)qword_1008F75C8;
        if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR)) {
          sub_100662E04(uu, v13);
        }
        if (qword_1008D5F20 != -1) {
          dispatch_once(&qword_1008D5F20, &stru_100889908);
        }
        uint64_t v14 = qword_1008D5F18;
        uint64_t v15 = sub_100241F94(uu);
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        sub_100620F44(v14, v16, 1);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
      {
        sub_100662E90();
      }
    }
  }

void sub_10024A8A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024A8C0(uint64_t a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  sub_10024A6C8( *(void *)(a1 + 32),  *(_DWORD *)(a1 + 40),  *(_DWORD *)(a1 + 44),  *(_DWORD *)(a1 + 48),  *(unsigned __int8 *)(a1 + 52));
}

uint64_t sub_10024A914(uint64_t a1, uint64_t a2, int a3)
{
  v49[0] = 0LL;
  v49[1] = 0LL;
  sub_100242F28((uint64_t)v49, a1 + 80);
  uint64_t v5 = *(void **)(a1 + 144);
  uint64_t v35 = (void *)(a1 + 152);
  if (v5 != (void *)(a1 + 152))
  {
    do
    {
      uint64_t v6 = v5[5];
      for (uint64_t i = *(uint64_t **)(v6 + 32); i != *(uint64_t **)(v6 + 40); ++i)
      {
        uint64_t v8 = *i;
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        __int128 v45 = 0u;
        __int128 v46 = 0u;
        id v9 = *(id *)(v8 + 40);
        id v10 = [v9 countByEnumeratingWithState:&v45 objects:v50 count:16];
        if (v10)
        {
          uint64_t v11 = *(void *)v46;
          while (2)
          {
            for (uint64_t j = 0LL; j != v10; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v46 != v11) {
                objc_enumerationMutation(v9);
              }
              uint64_t v13 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)j);
              if ([v13 pipeHandle] == a3)
              {
                sub_1004949D8(v5[4], &v40);
                unint64_t v18 = std::string::append(&v40, "(");
                __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
                v41.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
                *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v19;
                v18->__r_.__value_.__l.__size_ = 0LL;
                v18->__r_.__value_.__l.__cap_ = 0LL;
                v18->__r_.__value_.__r.__words[0] = 0LL;
                int v20 = *(char *)(v8 + 23);
                if (v20 >= 0) {
                  uint64_t v21 = (const std::string::value_type *)v8;
                }
                else {
                  uint64_t v21 = *(const std::string::value_type **)v8;
                }
                if (v20 >= 0) {
                  std::string::size_type v22 = *(unsigned __int8 *)(v8 + 23);
                }
                else {
                  std::string::size_type v22 = *(void *)(v8 + 8);
                }
                uint64_t v23 = std::string::append(&v41, v21, v22);
                __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
                v42.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
                *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v24;
                v23->__r_.__value_.__l.__size_ = 0LL;
                v23->__r_.__value_.__l.__cap_ = 0LL;
                v23->__r_.__value_.__r.__words[0] = 0LL;
                int v25 = std::string::append(&v42, ")");
                __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
                std::string::size_type cap = v25->__r_.__value_.__l.__cap_;
                *(_OWORD *)std::string __p = v26;
                v25->__r_.__value_.__l.__size_ = 0LL;
                v25->__r_.__value_.__l.__cap_ = 0LL;
                v25->__r_.__value_.__r.__words[0] = 0LL;
                uint64_t v27 = sub_1002E9074();
                int v28 = SHIBYTE(cap);
                __int128 v29 = (void **)__p[0];
                char v30 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
                if (v28 >= 0) {
                  __int16 v31 = __p;
                }
                else {
                  __int16 v31 = v29;
                }
                __int16 v38 = &off_10087FAA8;
                uint64_t v39 = 0LL;
                (*(void (**)(uint64_t, uint64_t, void **, void *, uint64_t (***)()))(*(void *)v27 + 40LL))( v27,  4LL,  v31,  v30,  &v38);
                __int16 v38 = &off_10087FAA8;
                if (v39) {
                  sub_1002CD254(v39);
                }

                if (SHIBYTE(cap) < 0) {
                  operator delete(__p[0]);
                }
                goto LABEL_44;
              }
            }

            id v10 = [v9 countByEnumeratingWithState:&v45 objects:v50 count:16];
            if (v10) {
              continue;
            }
            break;
          }
        }
      }

      uint64_t v14 = (void *)v5[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          uint64_t v15 = (void *)v5[2];
          BOOL v16 = *v15 == (void)v5;
          uint64_t v5 = v15;
        }

        while (!v16);
      }

      uint64_t v5 = v15;
    }

    while (v15 != v35);
  }

  sub_100242F54((uint64_t)v49);
  if (a2)
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100889808);
    }
    id v17 = sub_10059A5A8((uint64_t)off_1008D5F08, a2);
    id v9 = (id)objc_claimAutoreleasedReturnValue(v17);
  }

  else
  {
    id v9 = 0LL;
  }

  uint64_t v32 = sub_1002E9074();
  uint64_t v36 = &off_10087FAA8;
  char v37 = 0LL;
  (*(void (**)(uint64_t, uint64_t, const char *, id, uint64_t (***)()))(*(void *)v32 + 40LL))( v32,  4LL,  "com.apple.bluetoothd",  v9,  &v36);
  uint64_t v36 = &off_10087FAA8;
  if (v37) {
    sub_1002CD254(v37);
  }
LABEL_44:

  return sub_100242FAC((uint64_t)v49);
}

void sub_10024AC98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, void *__p, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52)
{
  if (a13) {
    sub_1002CD254(a13);
  }

  sub_100242FAC((uint64_t)&a52);
  _Unwind_Resume(a1);
}

uint64_t sub_10024AD68(uint64_t a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  return sub_10024A914(qword_1008D9150, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

_BYTE *sub_10024ADC0(_BYTE *result)
{
  if (*(_BYTE *)(*((void *)result + 4) + 56LL))
  {
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v30 = 0LL;
    unsigned int v29 = 0;
    int v54 = 0;
    memset(v53, 0, sizeof(v53));
    int v52 = 0;
    memset(v51, 0, sizeof(v51));
    int v50 = 0;
    memset(v49, 0, sizeof(v49));
    int v48 = 0;
    memset(v47, 0, sizeof(v47));
    memset(__dst, 0, sizeof(__dst));
    memset(v45, 0, sizeof(v45));
    char v28 = 0;
    sub_100242CA4(&v28);
    sub_1000FFCD4( (_DWORD *)&v34 + 1,  &v34,  (_DWORD *)&v33 + 1,  (_DWORD *)&v32 + 1,  &v33,  __dst,  (uint64_t)v53,  (uint64_t)v51,  &v32,  (_DWORD *)&v31 + 1,  &v31,  &v30,  (_DWORD *)&v30 + 1,  v45,  (uint64_t)v49,  (uint64_t)v47,  &v29);
    sub_100242CD0(&v28);
    uint64_t v1 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 67111424;
      *(_DWORD *)&uint8_t buf[4] = HIDWORD(v34);
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v34;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v36[0]) = HIDWORD(v33);
      WORD2(v36[0]) = 1024;
      *(_DWORD *)((char *)v36 + 6) = HIDWORD(v32);
      WORD5(v36[0]) = 1024;
      HIDWORD(v36[0]) = v33;
      LOWORD(v36[1]) = 1024;
      *(_DWORD *)((char *)&v36[1] + 2) = v32;
      WORD3(v36[1]) = 1024;
      DWORD2(v36[1]) = HIDWORD(v31);
      WORD6(v36[1]) = 1024;
      *(_DWORD *)((char *)&v36[1] + 14) = v31;
      WORD1(v36[2]) = 1024;
      DWORD1(v36[2]) = HIDWORD(v30);
      WORD4(v36[2]) = 1024;
      *(_DWORD *)((char *)&v36[2] + 10) = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "Stats fetched successfully : lePhy : %d, cumTx : %u, cumRx : %u, coexDen : %x, durationInMs : %u, classicPhy : % d,\t\t\t\t\t\t   cumTx : %u, cumRx : %u, durationInMs : %u, coexDen : %u",  buf,  0x3Eu);
    }

    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    *(_OWORD *)__int128 buf = 0u;
    memset(v36, 0, sizeof(v36));
    unint64_t v3 = v34;
    unint64_t v2 = HIDWORD(v34);
    int v26 = HIDWORD(v33);
    unint64_t v4 = v32;
    unsigned int v23 = HIDWORD(v32);
    unsigned int v24 = v33;
    unsigned int v6 = v31;
    unsigned int v5 = HIDWORD(v31);
    int v8 = v30;
    unsigned int v7 = HIDWORD(v30);
    unint64_t v9 = v29;
    sub_10040CB94(buf, 24);
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    *(_DWORD *)&uint8_t buf[4] = v2;
    *(_DWORD *)&uint8_t buf[8] = v3;
    memset((char *)v36 + 8, 0, 96);
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    *(_DWORD *)&_BYTE buf[12] = v26;
    *(void *)&v36[0] = __PAIR64__(v23, v24);
    *((void *)&v36[6] + 1) = __PAIR64__(v5, v4);
    *(void *)&__int128 v37 = __PAIR64__(v7, v6);
    DWORD2(v37) = v8;
    __int128 v44 = v9;
    do
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v25 = v10;
      uint64_t v27 = &v53[v10];
      uint64_t v14 = &v51[v10];
      uint64_t v15 = &v49[v10];
      BOOL v16 = &v47[v10];
      do
      {
        if (v27[v13])
        {
          unint64_t v4 = v4 & 0xFFFFFFFF00000000LL | v27[v13];
          sub_10024B238(buf, 1, 0, v12 | v11, v4);
        }

        if (v14[v13])
        {
          unint64_t v3 = v3 & 0xFFFFFFFF00000000LL | v14[v13];
          sub_10024B238(buf, 1, 1, v12 | v11, v3);
        }

        if (v15[v13])
        {
          unint64_t v2 = v2 & 0xFFFFFFFF00000000LL | v15[v13];
          sub_10024B238(buf, 2, 0, v12 | v11, v2);
        }

        if (v16[v13])
        {
          unint64_t v9 = v9 & 0xFFFFFFFF00000000LL | v16[v13];
          sub_10024B238(buf, 2, 1, v12 | v11, v9);
        }

        ++v13;
        v12 += (uint64_t)&_mh_execute_header;
      }

      while (v13 != 10);
      ++v11;
      uint64_t v10 = v25 + 10;
    }

    while (v11 != 10);
    for (uint64_t i = 0LL; i != 80; i += 4LL)
    {
      int v18 = __dst[i + 2];
      if (*(_WORD *)&__dst[i]) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v18 == 0;
      }
      if (!v19) {
        sub_10024B598(buf, 1, *(unsigned __int16 *)&__dst[i], (char)v18);
      }
      int v20 = v45[i + 2];
      if (*(_WORD *)&v45[i]) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v20 == 0;
      }
      if (!v21) {
        sub_10024B598(buf, 2, *(unsigned __int16 *)&v45[i], (char)v20);
      }
    }

    if (sub_1002E8D94())
    {
      uint64_t v22 = sub_1002E8D94();
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v22 + 40LL))(v22, buf);
    }

    sub_10024E370(buf);
    return sub_100242CD8(&v28);
  }

  return result;
}

void sub_10024B200( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, __int16 a21, char a22, char a23)
{
}

void sub_10024B238(void *a1, int a2, int a3, unint64_t a4, int a5)
{
  int v6 = a4;
  unint64_t v8 = HIDWORD(a4);
  if (a2 == 2)
  {
    if (a3 == 1)
    {
      BOOL v21 = operator new(0xCuLL);
      *BOOL v21 = v6;
      v21[1] = v8;
      v21[2] = a5;
      unint64_t v22 = a1[23];
      unsigned int v23 = (void *)a1[22];
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v43 = a1[21];
        uint64_t v44 = ((uint64_t)v23 - v43) >> 3;
        uint64_t v45 = v22 - v43;
        uint64_t v46 = v45 >> 2;
        else {
          unint64_t v47 = v46;
        }
        if (v47) {
          int v48 = (char *)sub_100008BA0((uint64_t)(a1 + 23), v47);
        }
        else {
          int v48 = 0LL;
        }
        unsigned __int8 v64 = &v48[8 * v44];
        uint64_t v65 = &v48[8 * v47];
        *(void *)unsigned __int8 v64 = v21;
        unsigned int v24 = v64 + 8;
        __int16 v67 = (char *)a1[21];
        int v66 = (char *)a1[22];
        if (v66 != v67)
        {
          do
          {
            uint64_t v68 = *((void *)v66 - 1);
            v66 -= 8;
            *((void *)v64 - 1) = v68;
            v64 -= 8;
          }

          while (v66 != v67);
          int v66 = (char *)a1[21];
        }

        a1[21] = v64;
        a1[22] = v24;
        a1[23] = v65;
        if (v66) {
          operator delete(v66);
        }
      }

      else
      {
        *unsigned int v23 = v21;
        unsigned int v24 = v23 + 1;
      }

      a1[22] = v24;
    }

    else if (!a3)
    {
      uint64_t v13 = operator new(0xCuLL);
      *uint64_t v13 = v6;
      v13[1] = v8;
      v13[2] = a5;
      unint64_t v14 = a1[20];
      uint64_t v15 = (void *)a1[19];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v31 = a1[18];
        uint64_t v32 = ((uint64_t)v15 - v31) >> 3;
        uint64_t v33 = v14 - v31;
        uint64_t v34 = v33 >> 2;
        else {
          unint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v36 = (char *)sub_100008BA0((uint64_t)(a1 + 20), v35);
        }
        else {
          uint64_t v36 = 0LL;
        }
        int v54 = &v36[8 * v32];
        uint64_t v55 = &v36[8 * v35];
        *(void *)int v54 = v13;
        BOOL v16 = v54 + 8;
        uint64_t v57 = (char *)a1[18];
        __int128 v56 = (char *)a1[19];
        if (v56 != v57)
        {
          do
          {
            uint64_t v58 = *((void *)v56 - 1);
            v56 -= 8;
            *((void *)v54 - 1) = v58;
            v54 -= 8;
          }

          while (v56 != v57);
          __int128 v56 = (char *)a1[18];
        }

        a1[18] = v54;
        a1[19] = v16;
        a1[20] = v55;
        if (v56) {
          operator delete(v56);
        }
      }

      else
      {
        *uint64_t v15 = v13;
        BOOL v16 = v15 + 1;
      }

      a1[19] = v16;
    }
  }

  else if (a2 == 1)
  {
    if (a3 == 1)
    {
      id v17 = operator new(0xCuLL);
      *id v17 = v6;
      v17[1] = v8;
      void v17[2] = a5;
      unint64_t v18 = a1[8];
      BOOL v19 = (void *)a1[7];
      if ((unint64_t)v19 >= v18)
      {
        uint64_t v37 = a1[6];
        uint64_t v38 = ((uint64_t)v19 - v37) >> 3;
        uint64_t v39 = v18 - v37;
        uint64_t v40 = v39 >> 2;
        else {
          unint64_t v41 = v40;
        }
        if (v41) {
          __int128 v42 = (char *)sub_100008BA0((uint64_t)(a1 + 8), v41);
        }
        else {
          __int128 v42 = 0LL;
        }
        unsigned __int8 v59 = &v42[8 * v38];
        unsigned int v60 = &v42[8 * v41];
        *(void *)unsigned __int8 v59 = v17;
        int v20 = v59 + 8;
        uint64_t v62 = (char *)a1[6];
        uint64_t v61 = (char *)a1[7];
        if (v61 != v62)
        {
          do
          {
            uint64_t v63 = *((void *)v61 - 1);
            v61 -= 8;
            *((void *)v59 - 1) = v63;
            v59 -= 8;
          }

          while (v61 != v62);
          uint64_t v61 = (char *)a1[6];
        }

        a1[6] = v59;
        a1[7] = v20;
        a1[8] = v60;
        if (v61) {
          operator delete(v61);
        }
      }

      else
      {
        *BOOL v19 = v17;
        int v20 = v19 + 1;
      }

      a1[7] = v20;
    }

    else if (!a3)
    {
      unint64_t v9 = operator new(0xCuLL);
      _DWORD *v9 = v6;
      v9[1] = v8;
      v9[2] = a5;
      unint64_t v10 = a1[5];
      uint64_t v11 = (void *)a1[4];
      if ((unint64_t)v11 < v10)
      {
        void *v11 = v9;
        uint64_t v12 = v11 + 1;
LABEL_53:
        a1[4] = v12;
        return;
      }

      uint64_t v25 = a1[3];
      uint64_t v26 = ((uint64_t)v11 - v25) >> 3;
      if (!((unint64_t)(v26 + 1) >> 61))
      {
        uint64_t v27 = v10 - v25;
        uint64_t v28 = v27 >> 2;
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          uint64_t v30 = (char *)sub_100008BA0((uint64_t)(a1 + 5), v29);
        }
        else {
          uint64_t v30 = 0LL;
        }
        __int128 v49 = &v30[8 * v26];
        int v50 = &v30[8 * v29];
        *(void *)__int128 v49 = v9;
        uint64_t v12 = v49 + 8;
        int v52 = (char *)a1[3];
        __int128 v51 = (char *)a1[4];
        if (v51 != v52)
        {
          do
          {
            uint64_t v53 = *((void *)v51 - 1);
            v51 -= 8;
            *((void *)v49 - 1) = v53;
            v49 -= 8;
          }

          while (v51 != v52);
          __int128 v51 = (char *)a1[3];
        }

        a1[3] = v49;
        a1[4] = v12;
        a1[5] = v50;
        if (v51) {
          operator delete(v51);
        }
        goto LABEL_53;
      }

void sub_10024B598(void *a1, int a2, int a3, int a4)
{
  if (a2 == 2)
  {
    unint64_t v10 = a1[29];
    uint64_t v11 = (char *)a1[28];
    if ((unint64_t)v11 >= v10)
    {
      BOOL v19 = (char *)a1[27];
      uint64_t v20 = (v11 - v19) >> 2;
      unint64_t v21 = v20 + 1;
      uint64_t v22 = v10 - (void)v19;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        unsigned int v24 = (char *)sub_10024E33C((uint64_t)(a1 + 29), v23);
        BOOL v19 = (char *)a1[27];
        uint64_t v11 = (char *)a1[28];
      }

      else
      {
        unsigned int v24 = 0LL;
      }

      uint64_t v37 = &v24[4 * v20];
      uint64_t v38 = &v24[4 * v23];
      *(_DWORD *)uint64_t v37 = a4;
      uint64_t v12 = v37 + 4;
      while (v11 != v19)
      {
        int v39 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v37 - 1) = v39;
        v37 -= 4;
      }

      a1[27] = v37;
      a1[28] = v12;
      a1[29] = v38;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      *(_DWORD *)uint64_t v11 = a4;
      uint64_t v12 = v11 + 4;
    }

    unint64_t v40 = a1[26];
    a1[28] = v12;
    unint64_t v41 = (char *)a1[25];
    if ((unint64_t)v41 >= v40)
    {
      uint64_t v43 = (char *)a1[24];
      uint64_t v44 = (v41 - v43) >> 2;
      unint64_t v45 = v44 + 1;
      uint64_t v46 = v40 - (void)v43;
      if (v46 >> 1 > v45) {
        unint64_t v45 = v46 >> 1;
      }
      else {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        int v48 = (char *)sub_10024E33C((uint64_t)(a1 + 26), v47);
        uint64_t v43 = (char *)a1[24];
        unint64_t v41 = (char *)a1[25];
      }

      else
      {
        int v48 = 0LL;
      }

      int v52 = &v48[4 * v44];
      uint64_t v53 = &v48[4 * v47];
      *(_DWORD *)int v52 = a3;
      __int128 v42 = v52 + 4;
      while (v41 != v43)
      {
        int v54 = *((_DWORD *)v41 - 1);
        v41 -= 4;
        *((_DWORD *)v52 - 1) = v54;
        v52 -= 4;
      }

      a1[24] = v52;
      a1[25] = v42;
      a1[26] = v53;
      if (v43) {
        operator delete(v43);
      }
    }

    else
    {
      *(_DWORD *)unint64_t v41 = a3;
      __int128 v42 = v41 + 4;
    }

    a1[25] = v42;
  }

  else if (a2 == 1)
  {
    unint64_t v7 = a1[14];
    unint64_t v8 = (char *)a1[13];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v13 = (char *)a1[12];
      uint64_t v14 = (v8 - v13) >> 2;
      unint64_t v15 = v14 + 1;
      uint64_t v16 = v7 - (void)v13;
      if (v16 >> 1 > v15) {
        unint64_t v15 = v16 >> 1;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        unint64_t v18 = (char *)sub_10024E33C((uint64_t)(a1 + 14), v17);
        uint64_t v13 = (char *)a1[12];
        unint64_t v8 = (char *)a1[13];
      }

      else
      {
        unint64_t v18 = 0LL;
      }

      uint64_t v25 = &v18[4 * v14];
      uint64_t v26 = &v18[4 * v17];
      *(_DWORD *)uint64_t v25 = a4;
      unint64_t v9 = v25 + 4;
      while (v8 != v13)
      {
        int v27 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *((_DWORD *)v25 - 1) = v27;
        v25 -= 4;
      }

      a1[12] = v25;
      a1[13] = v9;
      a1[14] = v26;
      if (v13) {
        operator delete(v13);
      }
    }

    else
    {
      *(_DWORD *)unint64_t v8 = a4;
      unint64_t v9 = v8 + 4;
    }

    unint64_t v28 = a1[11];
    a1[13] = v9;
    unint64_t v29 = (char *)a1[10];
    if ((unint64_t)v29 < v28)
    {
      *(_DWORD *)unint64_t v29 = a3;
      uint64_t v30 = v29 + 4;
LABEL_61:
      a1[10] = v30;
      return;
    }

    uint64_t v31 = (char *)a1[9];
    uint64_t v32 = (v29 - v31) >> 2;
    unint64_t v33 = v32 + 1;
    if (!((unint64_t)(v32 + 1) >> 62))
    {
      uint64_t v34 = v28 - (void)v31;
      if (v34 >> 1 > v33) {
        unint64_t v33 = v34 >> 1;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        uint64_t v36 = (char *)sub_10024E33C((uint64_t)(a1 + 11), v35);
        uint64_t v31 = (char *)a1[9];
        unint64_t v29 = (char *)a1[10];
      }

      else
      {
        uint64_t v36 = 0LL;
      }

      __int128 v49 = &v36[4 * v32];
      int v50 = &v36[4 * v35];
      *(_DWORD *)__int128 v49 = a3;
      uint64_t v30 = v49 + 4;
      while (v29 != v31)
      {
        int v51 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *((_DWORD *)v49 - 1) = v51;
        v49 -= 4;
      }

      a1[9] = v49;
      a1[10] = v30;
      a1[11] = v50;
      if (v31) {
        operator delete(v31);
      }
      goto LABEL_61;
    }

uint64_t sub_10024B88C(uint64_t a1, const void **a2)
{
  v57[0] = 0LL;
  v57[1] = 0LL;
  sub_100242F28((uint64_t)v57, a1 + 80);
  unint64_t v4 = *(uint64_t **)(a1 + 144);
  __int128 v56 = (uint64_t *)(a1 + 152);
  if (v4 != (uint64_t *)(a1 + 152))
  {
    char v5 = *((_BYTE *)a2 + 23);
    if (v5 >= 0) {
      int v6 = (const void *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      int v6 = a2[1];
    }
    if (v5 >= 0) {
      unint64_t v7 = (unsigned __int8 *)a2;
    }
    else {
      unint64_t v7 = (unsigned __int8 *)*a2;
    }
    while (2)
    {
      uint64_t v8 = v4[5];
      unint64_t v9 = *(unsigned __int8 ***)(v8 + 32);
      unint64_t v10 = *(unsigned __int8 ***)(v8 + 40);
      while (v9 != v10)
      {
        uint64_t v11 = *v9;
        uint64_t v12 = (*v9)[23];
        if ((v12 & 0x80u) == 0LL) {
          uint64_t v13 = (const void *)(*v9)[23];
        }
        else {
          uint64_t v13 = (const void *)*((void *)*v9 + 1);
        }
        if (v13 == v6)
        {
          if ((v12 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v11, v7, *((void *)*v9 + 1)))
            {
LABEL_29:
              uint64_t v19 = v4[4];
              if (!v11[39] && os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_FAULT)) {
                sub_100662FCC();
              }
              id v20 = [*((id *)v11 + 5) count];
              unint64_t v21 = (os_log_s *)qword_1008F75C8;
              if (v20 && os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_FAULT))
              {
                else {
                  uint64_t v55 = (unsigned __int8 *)*a2;
                }
                *(_DWORD *)__int128 buf = 136446210;
                unsigned __int8 v59 = v55;
                _os_log_fault_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_FAULT,  "Endpoint %{public}s has been unregistered with pipes remaining!",  buf,  0xCu);
                unint64_t v21 = (os_log_s *)qword_1008F75C8;
              }

              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                else {
                  uint64_t v22 = (unsigned __int8 *)*a2;
                }
                *(_DWORD *)__int128 buf = 136446210;
                unsigned __int8 v59 = v22;
                _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Successfully unregistered endpoint %{public}s",  buf,  0xCu);
              }

              unint64_t v23 = *(unsigned __int8 ***)(v8 + 40);
              int64_t v24 = (char *)v23 - (char *)(v9 + 1);
              if (v23 != v9 + 1) {
                memmove(v9, v9 + 1, (char *)v23 - (char *)(v9 + 1));
              }
              *(void *)(v8 + 40) = (char *)v9 + v24;

              operator delete(v11);
              uint64_t v25 = *(void *)v8;
              if (*(void *)v8)
              {
                else {
                  uint64_t v26 = (unsigned __int8 *)*a2;
                }
                int v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v26));
                (*(void (**)(uint64_t, void *))(*(void *)v25 + 32LL))(v25, v27);
              }

              if (*(_BYTE *)(v8 + 56) && *(void *)(v8 + 32) == *(void *)(v8 + 40))
              {
                sub_1001FDBCC((uint64_t **)(a1 + 144), v4);
                operator delete(v4);
                unint64_t v28 = (void *)sub_10024E10C(v8);
                operator delete(v28);
                if (qword_1008D61A8 != -1) {
                  dispatch_once(&qword_1008D61A8, &stru_100889868);
                }
                uint64_t v29 = qword_1008D61A0;
                unint64_t v30 = sub_100494CF8(v19);
                sub_1004966BC(v29, v30);
              }

              goto LABEL_53;
            }
          }

          else
          {
            if (!(*v9)[23]) {
              goto LABEL_29;
            }
            uint64_t v14 = v7;
            unint64_t v15 = *v9;
            while (*v15 == *v14)
            {
              ++v15;
              ++v14;
              if (!--v12) {
                goto LABEL_29;
              }
            }
          }
        }

        ++v9;
      }

      uint64_t v16 = (uint64_t *)v4[1];
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = (uint64_t *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          unint64_t v17 = (uint64_t *)v4[2];
          BOOL v18 = *v17 == (void)v4;
          unint64_t v4 = v17;
        }

        while (!v18);
      }

      unint64_t v4 = v17;
      if (v17 != v56) {
        continue;
      }
      break;
    }
  }

void sub_10024BD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10024BDCC( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5, unsigned int a6, int a7)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100889808);
  }
  id v10 = sub_10059A5A8((uint64_t)off_1008D5F08, a2);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  unsigned __int16 v97 = 2031;
  uint64_t v84 = v11;
  if (!v11)
  {
    int v70 = (os_log_s *)qword_1008F75C8;
    if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134218752;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&_BYTE buf[20] = a5;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = a6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_ERROR,  "Connection manager wasn't tracking a device for connection handle %p, pipeID 0x%x, type %d, priority %d",  buf,  0x1Eu);
    }

    buf[0] = 0;
    sub_100242CA4(buf);
    int v71 = sub_1001B7974(a2);
    sub_100242CD0(buf);
    if (v71)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_ERROR)) {
        sub_100663030();
      }
      uint64_t v79 = sub_1002E6E00();
      sub_1004FC118(v79, 1);
    }

    sub_100242CD8(buf);
    goto LABEL_120;
  }

  if (a7)
  {
    uint64_t v101 = 0LL;
    memset(buf, 0, sizeof(buf));
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100889808);
    }
    sub_10058C504((uint64_t)off_1008D5F08, v11, (uint64_t)buf);
    if (*(void *)buf)
    {
      uint64_t v12 = objc_alloc(&OBJC_CLASS___NSString);
      if ((a4[23] & 0x80u) == 0) {
        uint64_t v13 = a4;
      }
      else {
        uint64_t v13 = *(unsigned __int8 **)a4;
      }
      uint64_t v14 = -[NSString initWithUTF8String:](v12, "initWithUTF8String:", v13);
      id v15 = [*(id *)&buf[8] mutableCopy];
      objc_storeStrong((id *)&buf[8], v15);
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_100889808);
      }
      uint64_t v16 = off_1008D5F08;
      v92[0] = *(id *)buf;
      v92[1] = *(id *)&buf[8];
      __int128 v93 = *(_OWORD *)&buf[16];
      __int128 v94 = *(_OWORD *)&buf[32];
      __int128 v95 = *(_OWORD *)&buf[48];
      int v96 = v101;
      sub_10058C62C((uint64_t)v16, v11, (uint64_t)v92);
    }
  }

  v91[0] = 0LL;
  v91[1] = 0LL;
  uint64_t v17 = a1;
  sub_100242F28((uint64_t)v91, a1 + 80);
  BOOL v18 = *(void **)(a1 + 144);
  if (v18 == (void *)(a1 + 152)) {
    goto LABEL_98;
  }
  uint64_t v80 = (int)(a6 - 1);
  unsigned int v81 = a3;
  do
  {
    uint64_t v19 = (void *)v18[5];
    id v20 = (unsigned __int8 **)v19[4];
    unint64_t v21 = (unsigned __int8 **)v19[5];
    while (v20 != v21)
    {
      uint64_t v22 = *v20;
      signed __int8 v23 = (*v20)[23];
      if (v23 >= 0) {
        uint64_t v24 = (*v20)[23];
      }
      else {
        uint64_t v24 = *((void *)*v20 + 1);
      }
      uint64_t v25 = a4[23];
      int v26 = (char)v25;
      if ((v25 & 0x80u) != 0LL) {
        uint64_t v25 = *((void *)a4 + 1);
      }
      if (v24 != v25) {
        goto LABEL_91;
      }
      if (v26 >= 0) {
        int v27 = a4;
      }
      else {
        int v27 = *(unsigned __int8 **)a4;
      }
      if (((*v20)[23] & 0x80) != 0)
      {
      }

      else if ((*v20)[23])
      {
        unint64_t v28 = *v20;
        uint64_t v29 = (*v20)[23];
        while (*v28 == *v27)
        {
          ++v28;
          ++v27;
          if (!--v29) {
            goto LABEL_37;
          }
        }

        goto LABEL_91;
      }

LABEL_117:
          sub_10024CA38(v17, v81);
          goto LABEL_119;
        }

        uint64_t v52 = (void *)*((void *)v22 + 5);
        uint64_t v53 = -[PipeMapping initWithIdentifier:handle:]( objc_alloc(&OBJC_CLASS___PipeMapping),  "initWithIdentifier:handle:",  v11,  a3);
        [v52 addObject:v53];

        int v54 = (os_log_s *)qword_1008F75C8;
        if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v55 = *(unsigned __int8 **)a4;
          if ((a4[23] & 0x80u) == 0) {
            uint64_t v55 = a4;
          }
          else {
            unsigned int v56 = dword_1006BFA50[v80];
          }
          *(_DWORD *)__int128 buf = 136447746;
          *(void *)&uint8_t buf[4] = v82;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a3;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&_BYTE buf[20] = v55;
          *(_WORD *)&buf[28] = 2114;
          *(void *)&buf[30] = v11;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = a6;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v56;
          *(_WORD *)&buf[50] = 1024;
          *(_DWORD *)&buf[52] = v97;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Successfully created %{public}s pipe 0x%04X to endpoint %{public}s on device %{public}@  with priori ty [%d, stack %d] and MTU=%d",  buf,  0x38u);
        }

        uint64_t v17 = a1;
        if (*v19) {
          (*(void (**)(void, unsigned __int8 *, void *, void, void, unsigned __int8 *, void, void, unint64_t))(*(void *)*v19 + 8LL))( *v19,  a4,  v11,  a5,  a6,  uu,  v22[37],  v90,  __PAIR64__(v85, v89));
        }
      }

      sub_10024CAD0(v17, a2);
      uint64_t v57 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v57 + 960LL))(v57, a2, 1LL, 1LL);
      uint64_t v58 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v58 + 552LL))(v58, 1LL, 1LL);
      unint64_t v21 = (unsigned __int8 **)v19[5];
LABEL_91:
      ++v20;
    }

    unsigned __int8 v59 = (void *)v18[1];
    if (v59)
    {
      do
      {
        unsigned int v60 = v59;
        unsigned __int8 v59 = (void *)*v59;
      }

      while (v59);
    }

    else
    {
      do
      {
        unsigned int v60 = (void *)v18[2];
        BOOL v50 = *v60 == (void)v18;
        BOOL v18 = v60;
      }

      while (!v50);
    }

    BOOL v18 = v60;
  }

  while (v60 != (void *)(a1 + 152));
LABEL_98:
  uint64_t v11 = v84;
  sub_10024CA38(v17, a3);
  sub_100242F54((uint64_t)v91);
  id v61 = sub_1002479BC(a1);
  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
  BOOL v63 = [v62 count] == (id)1;

  if (v63)
  {
    uint64_t v64 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v64 + 848LL))(v64, 1LL, 1LL);
  }

  if (!*(_BYTE *)(a1 + 62))
  {
    id v65 = sub_1002479BC(a1);
    int v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
    if ([v66 count])
    {
      int v67 = sub_100247BC4(a1);

      if (v67)
      {
        uint64_t v68 = (os_log_s *)qword_1008F75C8;
        if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_INFO,  "Peripheral connection exists, enabling asymmetric peripheral latency",  buf,  2u);
        }

        uint64_t v69 = sub_1002E6E9C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v69 + 800LL))(v69, 1LL);
        *(_BYTE *)(a1 + 62) = 1;
      }
    }

    else
    {
    }
  }

void sub_10024C96C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  _Unwind_Resume(a1);
}

_BYTE *sub_10024CA38(uint64_t a1, int a2)
{
  char v11 = 0;
  sub_100242CA4(&v11);
  char v5 = *(char **)(a1 + 192);
  unint64_t v4 = *(char **)(a1 + 200);
  if (v5 != v4)
  {
    uint64_t v6 = 0LL;
    while (*(unsigned __int16 *)&v5[v6] != a2)
    {
      v6 += 2LL;
      if (&v5[v6] == v4) {
        return sub_100242CD8(&v11);
      }
    }

    unint64_t v7 = &v5[v6];
    uint64_t v8 = &v5[v6 + 2];
    int64_t v9 = v4 - v8;
    if (v4 != v8) {
      memmove(&v5[v6], v8, v4 - v8);
    }
    *(void *)(a1 + 200) = &v7[v9];
  }

  return sub_100242CD8(&v11);
}

uint64_t sub_10024CAD0(uint64_t a1, uint64_t a2)
{
  char v14 = 0;
  unsigned __int8 v13 = 1;
  char v12 = 1;
  uint64_t v4 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 120LL))(v4) & 1) != 0 || (sub_1002E6E9C(), sub_1002D0A8C()))
  {
    uint64_t v5 = sub_1002E90E4();
    uint64_t result = (*(uint64_t (**)(uint64_t, void, char *, unsigned __int8 *, char *))(*(void *)v5 + 8LL))( v5,  *(void *)(a1 + 64),  &v14,  &v13,  &v12);
    if (v13 != *(unsigned __int8 *)(a1 + 72))
    {
      *(_BYTE *)(a1 + 72) = v13;
      unint64_t v7 = (os_log_s *)qword_1008F75C8;
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v11 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Updating power settings for BlackMagick",  v11,  2u);
      }

      uint64_t v8 = sub_1002E6E9C();
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v8 + 952LL))(v8, a2, v13);
    }
  }

  else
  {
    unsigned int v9 = [*(id *)(a1 + 64) isEqualToString:@"us"];
    uint64_t v10 = sub_1002E6E9C();
    return (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(void *)v10 + 952LL))(v10, a2, v9 != 0);
  }

  return result;
}

void sub_10024CBFC(void *a1, __int16 a2)
{
  uint64_t v4 = (uint64_t)(a1 + 26);
  unint64_t v5 = a1[26];
  uint64_t v6 = (char *)a1[25];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)a1[24];
    uint64_t v9 = v6 - v8;
    if (v6 - v8 <= -3) {
      abort();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v5 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      char v14 = (char *)sub_10024EF1C(v4, v13);
      uint64_t v8 = (char *)a1[24];
      uint64_t v6 = (char *)a1[25];
    }

    else
    {
      char v14 = 0LL;
    }

    id v15 = &v14[2 * v10];
    uint64_t v16 = &v14[2 * v13];
    *(_WORD *)id v15 = a2;
    unint64_t v7 = v15 + 2;
    while (v6 != v8)
    {
      __int16 v17 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }

    a1[24] = v15;
    a1[25] = v7;
    a1[26] = v16;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *(_WORD *)uint64_t v6 = a2;
    unint64_t v7 = v6 + 2;
  }

  a1[25] = v7;
}

uint64_t sub_10024CCD0(uint64_t a1, int a2, unsigned int a3)
{
  v37[0] = 0LL;
  v37[1] = 0LL;
  sub_100242F28((uint64_t)v37, a1 + 80);
  uint64_t v4 = *(void **)(a1 + 144);
  if (v4 != (void *)(a1 + 152))
  {
    do
    {
      int v31 = v4;
      unint64_t v5 = (uint64_t *)v4[5];
      for (uint64_t i = (uint64_t **)v5[4]; i != (uint64_t **)v5[5]; ++i)
      {
        unint64_t v7 = *i;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        id v8 = (id)v7[5];
        id v9 = [v8 countByEnumeratingWithState:&v33 objects:v44 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v34;
          while (2)
          {
            for (uint64_t j = 0LL; j != v9; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v34 != v10) {
                objc_enumerationMutation(v8);
              }
              unint64_t v12 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)j);
              if ([v12 pipeHandle] == a2)
              {
                char v14 = (os_log_s *)qword_1008F75C8;
                if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned int v15 = [v12 pipeHandle];
                  uint64_t v16 = v7;
                  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
                  *(_DWORD *)__int128 buf = 67109634;
                  unsigned int v39 = v15;
                  __int16 v40 = 2082;
                  uint64_t v41 = v16;
                  __int16 v42 = 2114;
                  int v43 = v17;
                  _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Destroying pipe 0x%04x from endpoint %{public}s on device %{public}@",  buf,  0x1Cu);
                }

                uint64_t v18 = sub_10024F00C();
                sub_100252278(v18, (__int16)[v12 pipeHandle]);
                uint64_t v19 = *v5;
                if (*v5)
                {
                  id v20 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
                  (*(void (**)(uint64_t, uint64_t *, void *, void))(*(void *)v19 + 16LL))(v19, v7, v20, a3);
                }

                id v13 = v12;

                if (v13) {
                  [(id)v7[5] removeObject:v13];
                }
                goto LABEL_21;
              }
            }

            id v9 = [v8 countByEnumeratingWithState:&v33 objects:v44 count:16];
            if (v9) {
              continue;
            }
            break;
          }
        }

        id v13 = 0LL;
LABEL_21:
      }

      unint64_t v21 = v31;
      uint64_t v22 = (void *)v31[1];
      if (v22)
      {
        do
        {
          signed __int8 v23 = v22;
          uint64_t v22 = (void *)*v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          signed __int8 v23 = (void *)v21[2];
          BOOL v24 = *v23 == (void)v21;
          unint64_t v21 = v23;
        }

        while (!v24);
      }

      uint64_t v4 = v23;
    }

    while (v23 != (void *)(a1 + 152));
  }

  sub_100242F54((uint64_t)v37);
  id v25 = sub_1002479BC(a1);
  int v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  BOOL v27 = [v26 count] == 0;

  if (v27)
  {
    uint64_t v28 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 848LL))(v28, 2LL, 1LL);
  }

  return sub_100242FAC((uint64_t)v37);
}

void sub_10024CFD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024D02C(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, __int16 a5, int a6)
{
  unint64_t v12 = *(unsigned __int16 **)(a1 + 192);
  unint64_t v11 = *(unsigned __int16 **)(a1 + 200);
  if (v12 != v11)
  {
    while (*v12 != a2)
    {
      if (++v12 == v11)
      {
        unint64_t v12 = *(unsigned __int16 **)(a1 + 200);
        break;
      }
    }
  }

  if (v12 == v11)
  {
    uint64_t v17 = sub_10024F00C();
    sub_1002529EC(v17, a2, a3, a4, a5, 1, a6);
    if (!a6) {
      return;
    }
    goto LABEL_15;
  }

  id v13 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Queueing initial data on pipe 0x%04x as the scalable pipe hasn't finished registration",  buf,  8u);
  }

  uint64_t v14 = sub_100404FE8();
  unsigned int v15 = operator new(0x28uLL);
  sub_10056AB04(buf, a3, a4);
  void v15[4] = 1;
  *(void *)unsigned int v15 = &off_1008897A0;
  void v15[5] = a2;
  uint64_t v16 = v23;
  *((void *)v15 + 2) = &off_10087FAA8;
  *((void *)v15 + 3) = v16;
  if (v16) {
    sub_1002CD1E0((uint64_t)v16);
  }
  v15[16] = a5;
  *((_BYTE *)v15 + 34) = a6;
  sub_100405744(v14, v15);
  *(void *)__int128 buf = &off_10087FAA8;
  if (v23) {
    sub_1002CD254(v23);
  }
  if (a6)
  {
LABEL_15:
    uint64_t v18 = sub_100404FE8();
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10024D250;
    v19[3] = &unk_10087F980;
    __int16 v20 = a2;
    __int16 v21 = a4;
    sub_100405384(v18, v19);
  }

void sub_10024D210( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t sub_10024D250(uint64_t a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  return sub_10024A914(qword_1008D9150, 0LL, *(unsigned __int16 *)(a1 + 32));
}

void sub_10024D2A8(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  id v9 = a2;
  uint64_t v10 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138544130;
    id v14 = v9;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 1024;
    int v18 = a4;
    __int16 v19 = 1024;
    int v20 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "CountryCode callback: %{public}@ %d %d %d",  buf,  0x1Eu);
  }

  if (sub_100244F34(a1))
  {
    uint64_t v11 = sub_100404FE8();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10024D3EC;
    v12[3] = &unk_10087EB20;
    v12[4] = a1;
    sub_100405384(v11, v12);
  }
}

void sub_10024D3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024D3EC(uint64_t a1)
{
}

void sub_10024D3F4(uint64_t a1, void *a2, int a3, int a4, int a5)
{
}

void sub_10024D3FC(uint64_t a1, int a2)
{
  v4[0] = 0LL;
  v4[1] = v4;
  v4[2] = 0x2020000000LL;
  int v5 = a2;
  unint64_t v2 = *(dispatch_queue_s **)(a1 + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10024D478;
  v3[3] = &unk_100880D70;
  v3[4] = v4;
  void v3[5] = a1;
  dispatch_async(v2, v3);
  _Block_object_dispose(v4, 8);
}

void sub_10024D478(uint64_t a1)
{
}

void sub_10024D48C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 312LL))(v4))
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      uint64_t v10 = (os_log_s *)qword_1008F75C8;
      if (!os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      __int16 v20 = 0;
      uint64_t v11 = "Stack is not ready, cannot update power source";
      unint64_t v12 = (uint8_t *)&v20;
      goto LABEL_13;
    }

    if (*a2 == 2)
    {
      *(_BYTE *)(a1 + 58) = 1;
      if (*(void *)(a1 + 216))
      {
        uint64_t v5 = *(unsigned __int8 *)(a1 + 59);
        uint64_t v6 = *(unsigned __int8 *)(a1 + 60);
        uint64_t v7 = *(char *)(a1 + 61);
        uint64_t v8 = sub_1002E6E9C();
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 80LL))( v8,  3LL,  0LL,  v5,  v6,  v7);
        uint64_t v9 = sub_1002E6E9C();
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 80LL))( v9,  4LL,  0LL,  v5,  v6,  v7);
        uint64_t v10 = (os_log_s *)qword_1008F75C8;
        if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v19 = 0;
          uint64_t v11 = "Wireless charging started: PCAP limits bypassed";
          unint64_t v12 = (uint8_t *)&v19;
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
        }
      }
    }

    else if (*(_BYTE *)(a1 + 58))
    {
      *(_BYTE *)(a1 + 58) = 0;
      if (*(void *)(a1 + 216))
      {
        uint64_t v13 = *(unsigned __int8 *)(a1 + 59);
        uint64_t v14 = *(unsigned __int8 *)(a1 + 60);
        uint64_t v15 = *(char *)(a1 + 61);
        uint64_t v16 = sub_1002E6E9C();
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 80LL))( v16,  3LL,  0LL,  v13,  v14,  v15);
        uint64_t v17 = sub_1002E6E9C();
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 80LL))( v17,  4LL,  0LL,  v13,  v14,  v15);
        uint64_t v10 = (os_log_s *)qword_1008F75C8;
        if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v18 = 0;
          uint64_t v11 = "Wireless charging stopped: PCAP limits enforced";
          unint64_t v12 = (uint8_t *)&v18;
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_10024D664(uint64_t result, _BYTE *a2, _DWORD *a3)
{
  *a2 = *(_BYTE *)(result + 224);
  *a3 = *(_DWORD *)(result + 228);
  return result;
}

uint64_t sub_10024D678(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)qword_1008F75C8;
  if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------ LE Scalable Pipes -------------------",  buf,  2u);
    unint64_t v2 = (os_log_s *)qword_1008F75C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Registered Sessions:", buf, 2u);
  }

  v43[0] = 0LL;
  v43[1] = 0LL;
  sub_100242F28((uint64_t)v43, a1 + 80);
  unint64_t v3 = *(void **)(a1 + 144);
  __int128 v35 = (void *)(a1 + 152);
  if (v3 != (void *)(a1 + 152))
  {
    do
    {
      uint64_t v37 = v3[5];
      uint64_t v4 = (os_log_s *)qword_1008F75C8;
      if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(v3[4], (uint64_t)buf);
        uint64_t v5 = buf;
        if (v48 < 0) {
          uint64_t v5 = *(_BYTE **)buf;
        }
        *(_DWORD *)uint64_t v49 = 136446210;
        BOOL v50 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v49, 0xCu);
        if (v48 < 0) {
          operator delete(*(void **)buf);
        }
        uint64_t v4 = (os_log_s *)qword_1008F75C8;
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = "Yes";
        if (!*(_BYTE *)(v37 + 56)) {
          uint64_t v6 = "No";
        }
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump:    Zombied: %{public}s",  buf,  0xCu);
        uint64_t v4 = (os_log_s *)qword_1008F75C8;
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = "Yes";
        if (!*(_BYTE *)(v37 + 57)) {
          uint64_t v7 = "No";
        }
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump:    Link requirement:  %{public}s",  buf,  0xCu);
        uint64_t v4 = (os_log_s *)qword_1008F75C8;
      }

      __int128 v36 = v3;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Endpoints:", buf, 2u);
      }

      uint64_t v8 = v37;
      for (uint64_t i = *(void **)(v37 + 32); i != *(void **)(v8 + 40); uint64_t i = v38 + 1)
      {
        uint64_t v10 = (uint64_t *)*i;
        uint64_t v11 = (os_log_s *)qword_1008F75C8;
        if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v12 = v10;
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "statedump:       %{public}s",  buf,  0xCu);
          uint64_t v11 = (os_log_s *)qword_1008F75C8;
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *((_DWORD *)v10 + 6);
          uint64_t v14 = "client";
          if (v13 == 1) {
            uint64_t v14 = "server";
          }
          BOOL v15 = v13 == 2;
          uint64_t v16 = "peer-to-peer";
          if (!v15) {
            uint64_t v16 = v14;
          }
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "statedump:          Type: %{public}s",  buf,  0xCu);
          uint64_t v11 = (os_log_s *)qword_1008F75C8;
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = *((int *)v10 + 7);
          if (v17 < 5 && ((0x17u >> v17) & 1) != 0)
          {
            __int16 v18 = (&off_100889948)[v17];
          }

          else
          {
            BOOL v15 = (_DWORD)v17 == 3;
            __int16 v18 = "unknown";
            if (v15) {
              __int16 v18 = "isochronous";
            }
          }

          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "statedump:          Priority: %{public}s",  buf,  0xCu);
          uint64_t v11 = (os_log_s *)qword_1008F75C8;
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v19 = "Yes";
          if (!*((_BYTE *)v10 + 39)) {
            __int16 v19 = "No";
          }
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "statedump:          Zombied: %{public}s",  buf,  0xCu);
          uint64_t v11 = (os_log_s *)qword_1008F75C8;
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v20 = "Non-";
          if (!*((_BYTE *)v10 + 37)) {
            __int16 v20 = "";
          }
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "statedump:          %{public}sReliable Pipe",  buf,  0xCu);
          uint64_t v11 = (os_log_s *)qword_1008F75C8;
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v21 = "NO";
          if (*((_DWORD *)v10 + 7) == 4) {
            __int16 v21 = "YES";
          }
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "statedump:          LE Only: %{public}s",  buf,  0xCu);
          uint64_t v11 = (os_log_s *)qword_1008F75C8;
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "statedump:          Connected devices:",  buf,  2u);
        }

        __int128 v41 = 0u;
        __int128 v42 = 0u;
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        id v22 = (id)v10[5];
        id v23 = [v22 countByEnumeratingWithState:&v39 objects:v44 count:16];
        int v38 = i;
        if (v23)
        {
          uint64_t v24 = *(void *)v40;
          do
          {
            for (uint64_t j = 0LL; j != v23; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v40 != v24) {
                objc_enumerationMutation(v22);
              }
              int v26 = (os_log_s *)qword_1008F75C8;
              if (os_log_type_enabled((os_log_t)qword_1008F75C8, OS_LOG_TYPE_DEFAULT))
              {
                BOOL v27 = v10;
                uint64_t v28 = *(void *)(*((void *)&v39 + 1) + 8LL * (void)j);
                *(_DWORD *)__int128 buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v46 = 2114;
                uint64_t v47 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "statedump:             %{public}s; %{public}@",
                  buf,
                  0x16u);
              }
            }

            id v23 = [v22 countByEnumeratingWithState:&v39 objects:v44 count:16];
          }

          while (v23);
        }

        uint64_t v8 = v37;
      }

      uint64_t v29 = v36;
      int v30 = (void *)v36[1];
      if (v30)
      {
        do
        {
          int v31 = v30;
          int v30 = (void *)*v30;
        }

        while (v30);
      }

      else
      {
        do
        {
          int v31 = (void *)v29[2];
          BOOL v15 = *v31 == (void)v29;
          uint64_t v29 = v31;
        }

        while (!v15);
      }

      unint64_t v3 = v31;
    }

    while (v31 != v35);
  }

  uint64_t v32 = sub_10024F00C();
  nullsub_63(v32, v33);
  return sub_100242FAC((uint64_t)v43);
}

void sub_10024DD34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_10024DD80()
{
  return 1LL;
}

void sub_10024DD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_10024DE24(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10024DE24(uint64_t a1, char *__src, char *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      __int16 v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      __int16 v19 = 0LL;
    }
    __int16 v20 = &v19[8 * v16];
    std::string __p = v19;
    BOOL v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        id v23 = (char *)sub_100008BA0(v8, v22);
        __int16 v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        BOOL v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        BOOL v27 = v20;
      }
    }

    *(void *)__int16 v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_10024E028( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10024E060(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100008A30(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8LL))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_10024E10C(uint64_t a1)
{
  unint64_t v3 = *(uint64_t **)(a1 + 32);
  unint64_t v2 = *(uint64_t **)(a1 + 40);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {

        operator delete((void *)v4);
        unint64_t v2 = *(uint64_t **)(a1 + 40);
      }

      ++v3;
    }

    while (v3 != v2);
    unint64_t v3 = *(uint64_t **)(a1 + 32);
  }

  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }

  return a1;
}

void *sub_10024E19C(void *__dst, __int128 *a2, int a3, int a4, int a5, char a6, char a7, char a8)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100024238(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v15 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v15;
  }

  *((_DWORD *)__dst + 6) = a3;
  *((_DWORD *)__dst + 7) = a4;
  *((_DWORD *)__dst + 8) = a5;
  *((_BYTE *)__dst + 36) = a6;
  *((_BYTE *)__dst + 37) = a7;
  *((_BYTE *)__dst + 38) = a8;
  *((_BYTE *)__dst + 39) = 0;
  __dst[5] = 0LL;
  uint64_t v16 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v17 = (void *)__dst[5];
  __dst[5] = v16;

  return __dst;
}

void sub_10024E250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10024E27C(uint64_t a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  sub_10024A4E8( *(_BYTE *)(a1 + 10),  *(_DWORD *)(a1 + 12),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_DWORD *)(a1 + 32),  *(_DWORD *)(a1 + 36),  *(_DWORD *)(a1 + 40),  *(_DWORD *)(a1 + 44));
}

uint64_t sub_10024E2DC(uint64_t a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  return sub_10024A5FC( *(unsigned __int8 *)(a1 + 10),  *(_BYTE *)(a1 + 11),  *(void *)(a1 + 12),  *(void *)(a1 + 20),  *(_DWORD *)(a1 + 28),  *(_DWORD *)(a1 + 32),  *(_DWORD *)(a1 + 36),  *(void *)(a1 + 40));
}

void *sub_10024E33C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_100008BD4();
  }
  return operator new(4 * a2);
}

void *sub_10024E370(void *a1)
{
  unint64_t v2 = (void **)a1[3];
  unint64_t v3 = (void **)a1[4];
  while (v2 != v3)
  {
    if (*v2) {
      operator delete(*v2);
    }
    ++v2;
  }

  uint64_t v4 = (void **)a1[6];
  uint64_t v5 = (void **)a1[7];
  while (v4 != v5)
  {
    if (*v4) {
      operator delete(*v4);
    }
    ++v4;
  }

  int64_t v6 = (void **)a1[18];
  unint64_t v7 = (void **)a1[19];
  while (v6 != v7)
  {
    if (*v6) {
      operator delete(*v6);
    }
    ++v6;
  }

  uint64_t v8 = (void **)a1[21];
  uint64_t v9 = (void **)a1[22];
  while (v8 != v9)
  {
    if (*v8) {
      operator delete(*v8);
    }
    ++v8;
  }

  uint64_t v10 = (void *)a1[27];
  if (v10)
  {
    a1[28] = v10;
    operator delete(v10);
  }

  uint64_t v11 = (void *)a1[24];
  if (v11)
  {
    a1[25] = v11;
    operator delete(v11);
  }

  uint64_t v12 = (void *)a1[21];
  if (v12)
  {
    a1[22] = v12;
    operator delete(v12);
  }

  int v13 = (void *)a1[18];
  if (v13)
  {
    a1[19] = v13;
    operator delete(v13);
  }

  unint64_t v14 = (void *)a1[12];
  if (v14)
  {
    a1[13] = v14;
    operator delete(v14);
  }

  __int128 v15 = (void *)a1[9];
  if (v15)
  {
    a1[10] = v15;
    operator delete(v15);
  }

  uint64_t v16 = (void *)a1[6];
  if (v16)
  {
    a1[7] = v16;
    operator delete(v16);
  }

  uint64_t v17 = (void *)a1[3];
  if (v17)
  {
    a1[4] = v17;
    operator delete(v17);
  }

  return a1;
}

uint64_t sub_10024E498(uint64_t a1)
{
  *(void *)a1 = &off_1008896F8;
  return a1;
}

void sub_10024E4D4(void **__p)
{
  void *__p = &off_1008896F8;
  operator delete(__p);
}

uint64_t sub_10024E510(uint64_t a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  return sub_10024B88C(qword_1008D9150, (const void **)(a1 + 16));
}

uint64_t sub_10024E560(uint64_t a1, uint64_t a2, __int16 a3, __int128 *a4, int a5, int a6, char a7)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_100889730;
  *(void *)(a1 + 16) = a2;
  *(_WORD *)(a1 + 24) = a3;
  uint64_t v11 = a1 + 32;
  if (*((char *)a4 + 23) < 0)
  {
    sub_100024238((_BYTE *)v11, *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v12 = *a4;
    *(void *)(v11 + 16) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }

  *(_BYTE *)(a1 + sub_100242FAC(v1 - 64) = a7;
  if (a6 == 6) {
    int v13 = 2;
  }
  else {
    int v13 = 3;
  }
  if (a6 == 2) {
    int v14 = 1;
  }
  else {
    int v14 = v13;
  }
  if (a6 == 1) {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = v14;
  return a1;
}

uint64_t sub_10024E600(uint64_t a1)
{
  *(void *)a1 = &off_100889730;
  return a1;
}

void sub_10024E63C(void **__p)
{
  void *__p = &off_100889730;
  operator delete(__p);
}

void sub_10024E678(uint64_t a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  sub_10024BDCC( qword_1008D9150,  *(void *)(a1 + 16),  *(unsigned __int16 *)(a1 + 24),  (unsigned __int8 *)(a1 + 32),  *(_DWORD *)(a1 + 56),  *(_DWORD *)(a1 + 60),  *(unsigned __int8 *)(a1 + 64));
}

uint64_t sub_10024E6E0(uint64_t a1)
{
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_1008897C8);
  }
  return sub_10024CCD0(qword_1008D9150, *(unsigned __int16 *)(a1 + 10), *(_DWORD *)(a1 + 12));
}

void *sub_10024E734(void *a1)
{
  *a1 = &off_1008897A0;
  a1[2] = &off_10087FAA8;
  unint64_t v2 = (unsigned int *)a1[3];
  if (v2) {
    sub_1002CD254(v2);
  }
  return a1;
}

void sub_10024E778(void *__p)
{
  void *__p = &off_1008897A0;
  __p[2] = &off_10087FAA8;
  unint64_t v2 = (unsigned int *)__p[3];
  if (v2) {
    sub_1002CD254(v2);
  }
  operator delete(__p);
}

void sub_10024E7BC(uint64_t a1)
{
  uint64_t v2 = sub_10024F00C();
  unsigned int v3 = *(unsigned __int16 *)(a1 + 10);
  uint64_t v4 = (const void *)sub_10056AAF0(a1 + 16);
  size_t v5 = sub_10056AAD8(a1 + 16);
  sub_1002529EC(v2, v3, v4, v5, *(_WORD *)(a1 + 32), 0, *(_BYTE *)(a1 + 34));
}

void sub_10024E828(id a1)
{
  uint64_t v1 = operator new(0xE8uLL);
  sub_1002434E4((uint64_t)v1);
  qword_1008D9150 = (uint64_t)v1;
}

void sub_10024E858(_Unwind_Exception *a1)
{
}

void sub_10024E86C(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10040D0A0((uint64_t)v1);
  off_1008D6780 = v1;
}

void sub_10024E89C(_Unwind_Exception *a1)
{
}

void sub_10024E8B0(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_10024E8E0(_Unwind_Exception *a1)
{
}

void sub_10024E8F4(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10024E924(_Unwind_Exception *a1)
{
}

void sub_10024E938(id a1)
{
  uint64_t v1 = operator new(0x48uLL);
  sub_10054A778((uint64_t)v1);
  off_1008D90F0 = v1;
}

void sub_10024E968(_Unwind_Exception *a1)
{
}

void sub_10024E97C(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_10024E9AC(_Unwind_Exception *a1)
{
}

void sub_10024E9C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48LL)
  {
  }

  a1[1] = v2;
}

uint64_t sub_10024EA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(void *)a4 = *(void *)v5;
      unint64_t v7 = (void **)(a4 + 8);
      __int128 v8 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)unint64_t v7 = v8;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      uint64_t v9 = *(void *)(v5 + 32);
      *(void *)(a4 + 39) = *(void *)(v5 + 39);
      *(void *)(a4 + 32) = v9;
      a4 += 48LL;
      v5 += 48LL;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

char *sub_10024EAA0(char **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555LL) {
    abort();
  }
  __int128 v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 4);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555LL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v28 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_10024EC04(v7, v10);
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v25 = 0LL;
  v26.i64[0] = 0LL;
  __int128 v12 = &v11[48 * v3];
  int v13 = &v11[48 * v10];
  BOOL v27 = v13;
  *(void *)__int128 v12 = *(void *)a2;
  __int128 v14 = *(_OWORD *)(a2 + 8);
  *((void *)v12 + 3) = *(void *)(a2 + 24);
  *(_OWORD *)(v12 + 8) = v14;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  uint64_t v15 = *(void *)(a2 + 32);
  *(void *)(v12 + 39) = *(void *)(a2 + 39);
  *((void *)v12 + 4) = v15;
  uint64_t v16 = v12 + 48;
  v26.i64[1] = (uint64_t)(v12 + 48);
  unint64_t v18 = *a1;
  unint64_t v17 = (unint64_t)a1[1];
  if ((char *)v17 == *a1)
  {
    int64x2_t v22 = vdupq_n_s64(v17);
  }

  else
  {
    do
    {
      uint64_t v19 = *(void *)(v17 - 48);
      v17 -= 48LL;
      *((void *)v12 - 6) = v19;
      v12 -= 48;
      __int128 v20 = *(_OWORD *)(v17 + 8);
      *((void *)v12 + 3) = *(void *)(v17 + 24);
      *(_OWORD *)(v12 + 8) = v20;
      *(void *)(v17 + 16) = 0LL;
      *(void *)(v17 + 24) = 0LL;
      *(void *)(v17 + 8) = 0LL;
      uint64_t v21 = *(void *)(v17 + 32);
      *(void *)(v12 + 39) = *(void *)(v17 + 39);
      *((void *)v12 + 4) = v21;
    }

    while ((char *)v17 != v18);
    int64x2_t v22 = *(int64x2_t *)a1;
    uint64_t v16 = (char *)v26.i64[1];
    int v13 = v27;
  }

  *a1 = v12;
  a1[1] = v16;
  int64x2_t v26 = v22;
  id v23 = a1[2];
  a1[2] = v13;
  BOOL v27 = v23;
  uint64_t v25 = v22.i64[0];
  sub_10024EC48((uint64_t)&v25);
  return v16;
}

void *sub_10024EC04(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556LL) {
    sub_100008BD4();
  }
  return operator new(48 * a2);
}

uint64_t sub_10024EC48(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10024EC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        uint64_t v5 = *(void *)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

void sub_10024ECD0(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_10024ED00(_Unwind_Exception *a1)
{
}

void sub_10024ED14(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_10024ED44(_Unwind_Exception *a1)
{
}

void sub_10024ED58(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10024ED88(_Unwind_Exception *a1)
{
}

void sub_10024ED9C(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 18) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 108) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 28) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 58) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_10024EEA4(_Unwind_Exception *a1)
{
}

void sub_10024EEB8(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_10024EEE8(_Unwind_Exception *a1)
{
}

void sub_10024EEFC(id a1)
{
  qword_1008D9160 = (uint64_t)operator new(1uLL);
}

void *sub_10024EF1C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_100008BD4();
  }
  return operator new(2 * a2);
}

void sub_10024EF4C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10024EF58(uint64_t result, void *a2, uint64_t a3, float a4)
{
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (void *)*a2;
  }
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2082;
  *(void *)(a3 + 14) = v5;
  return result;
}

void sub_10024EF7C(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

void sub_10024EF8C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

  ;
}

void sub_10024EFB8(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100889AC0);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1);
}

uint64_t sub_10024F00C()
{
  if (qword_1008EF968 != -1) {
    dispatch_once(&qword_1008EF968, &stru_100889970);
  }
  return qword_1008F71A8;
}

void sub_10024F04C(id a1)
{
  uint64_t v1 = operator new(0x90uLL);
  sub_10024F090((uint64_t)v1);
  qword_1008F71A8 = (uint64_t)v1;
}

void sub_10024F07C(_Unwind_Exception *a1)
{
}

uint64_t sub_10024F090(uint64_t a1)
{
  *(void *)a1 = &off_1008899A0;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + sub_100242FAC(v1 - 64) = a1 + 72;
  *(void *)(a1 + sub_100242FAC(v40 - 80) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0LL;
  *(_BYTE *)(a1 + 140) = 0;
  uint64_t v2 = (_BYTE *)(a1 + 140);
  *(_DWORD *)(a1 + 136) = 0;
  qword_1008F71A8 = a1;
  memset(&__attr, 0, sizeof(__attr));
  pthread_attr_init(&__attr);
  pthread_attr_set_qos_class_np(&__attr, QOS_CLASS_USER_INTERACTIVE, 0);
  unint64_t v3 = (dispatch_queue_s *)dispatch_pthread_root_queue_create(0LL, 0LL, &__attr, &stru_1008899D0);
  pthread_attr_destroy(&__attr);
  *(void *)(a1 + 8) = dispatch_queue_create_with_target_V2("com.apple.MobileBluetooth.Pipe", 0LL, v3);
  dispatch_release(v3);
  uint64_t v4 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8LL))(v4))
  {
    unsigned int v26 = 0;
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "Pipe");
    sub_10002418C(__p, "TxSlotSize");
    (*(void (**)(uint64_t, _BYTE *, void **, unsigned int *))(*(void *)v5 + 128LL))(v5, buf, __p, &v26);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v6 = v26;
    if (v26)
    {
      uint64_t v7 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Setting custom Skywalk TxSlotSize to %llu",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v6 = 32LL;
    }

    unsigned int v23 = 0;
    uint64_t v9 = sub_1002E6E00();
    sub_10002418C(buf, "Pipe");
    sub_10002418C(__p, "RxSlotSize");
    (*(void (**)(uint64_t, _BYTE *, void **, unsigned int *))(*(void *)v9 + 128LL))(v9, buf, __p, &v23);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v8 = v23;
    if (v23)
    {
      unint64_t v10 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Setting custom Skywalk RxSlotSize to %llu",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v8 = 32LL;
    }

    uint64_t v11 = sub_1002E6E00();
    sub_10002418C(buf, "Magnet");
    sub_10002418C(__p, "EnableCrossLayerLogs");
    (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(void *)v11 + 72LL))(v11, buf, __p, a1 + 138);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*(_BYTE *)(a1 + 138))
    {
      __int128 v12 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
        sub_100663088(v12);
      }
    }

    uint64_t v13 = sub_1002E6E00();
    sub_10002418C(buf, "Magnet");
    sub_10002418C(__p, "EnableSkywalkDataLogs");
    __int128 v14 = (_BYTE *)(a1 + 139);
    (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(void *)v13 + 72LL))(v13, buf, __p, a1 + 139);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*v14)
    {
      uint64_t v15 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "Enable";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}s Skywalk data logs", buf, 0xCu);
      }
    }

    uint64_t v16 = sub_1002E6E00();
    sub_10002418C(buf, "Magnet");
    sub_10002418C(__p, "EnableSkywalkDataCRC");
    (*(void (**)(uint64_t, _BYTE *, void **, _BYTE *))(*(void *)v16 + 72LL))(v16, buf, __p, v2);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*v2)
    {
      unint64_t v17 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
      {
        if (*v14) {
          unint64_t v18 = "Enable";
        }
        else {
          unint64_t v18 = "Disable";
        }
        *(_DWORD *)__int128 buf = 136446466;
        *(void *)&uint8_t buf[4] = "Enable";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%{public}s Skywalk data logs CRC, %{public}s fSkywalkDataLogs",  buf,  0x16u);
      }
    }
  }

  else
  {
    uint64_t v6 = 32LL;
    uint64_t v8 = 32LL;
  }

  uint64_t v19 = os_nexus_controller_create();
  *(void *)(a1 + 112) = v19;
  __int128 v20 = (os_log_s *)qword_1008F75F8;
  if (v19)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134219008;
      *(void *)&uint8_t buf[4] = 2048LL;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = 1LL;
      *(_WORD *)&_BYTE buf[22] = 2048;
      *(void *)&buf[24] = 1LL;
      *(_WORD *)&buf[32] = 2048;
      *(void *)&buf[34] = v6;
      *(_WORD *)&buf[42] = 2048;
      *(void *)&buf[44] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Creating nexus with NEXUS_ATTR_SLOT_BUF_SIZE: %llu, NEXUS_ATTR_RX_RINGS: %llu, NEXUS_ATTR_TX_RINGS: %llu, NEXUS_ ATTR_TX_SLOTS: %llu, NEXUS_ATTR_RX_SLOTS: %llu",  buf,  0x34u);
    }

    uint64_t v21 = os_nexus_attr_create();
    os_nexus_attr_set(v21, 4LL, 2048LL);
    os_nexus_attr_set(v21, 1LL, 1LL);
    os_nexus_attr_set(v21, 0LL, 1LL);
    os_nexus_attr_set(v21, 2LL, v6);
    os_nexus_attr_set(v21, 3LL, v8);
    strcpy(buf, "com.apple.bluetooth.Pipe");
    memset(&buf[25], 0, 39);
    os_nexus_controller_register_provider(*(void *)(a1 + 112), buf, 0LL, v21, a1 + 120);
    os_nexus_attr_destroy(v21);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR))
  {
    sub_10066305C();
  }

  return a1;
}

void sub_10024F70C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

uint64_t sub_10024F7D0(uint64_t a1)
{
  *(void *)a1 = &off_1008899A0;
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    os_nexus_controller_deregister_provider(v2, a1 + 120);
    os_nexus_controller_destroy(*(void *)(a1 + 112));
  }

  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  sub_10023BF24(a1 + 88, *(void **)(a1 + 96));
  sub_10023BF24(a1 + 64, *(void **)(a1 + 72));
  sub_10025506C(a1 + 40, *(void **)(a1 + 48));
  sub_10023BF24(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_10024F84C(_Unwind_Exception *a1)
{
}

void sub_10024F88C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10024F7D0(a1);
  operator delete(v1);
}

uint64_t sub_10024F8A0(uint64_t a1, int a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  if (!a6)
  {
    uint64_t v15 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
      sub_100663104(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }

  uint64_t v31 = 0LL;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000LL;
  int v34 = 0;
  unsigned int v23 = *(dispatch_queue_s **)(a1 + 8);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  void v26[2] = sub_10024F99C;
  v26[3] = &unk_1008899F8;
  __int16 v29 = a4;
  v26[4] = &v31;
  v26[5] = a1;
  int v27 = a2;
  int v28 = a7;
  char v30 = a8;
  v26[6] = a3;
  v26[7] = a6;
  dispatch_sync(v23, v26);
  uint64_t v24 = *((unsigned int *)v32 + 6);
  _Block_object_dispose(&v31, 8);
  return v24;
}

void sub_10024F99C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = (int *)(a1 + 72);
  uint64_t v4 = *(void *)(v2 + 24);
  if (!v4) {
    goto LABEL_12;
  }
  unsigned int v5 = *(unsigned __int16 *)v3;
  uint64_t v6 = v2 + 24;
  do
  {
    unsigned int v7 = *(unsigned __int16 *)(v4 + 32);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }

  while (*v9);
  if (v6 != v2 + 24 && v5 >= *(unsigned __int16 *)(v6 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
      sub_1006632D0();
    }
    uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v21 = 103;
  }

  else
  {
LABEL_12:
    uint64_t v32 = 0LL;
    if (socketpair(1, 1, 0, (int *)&v32))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
        sub_10066325C();
      }
    }

    else
    {
      int v10 = v32;
      int v11 = fcntl(v32, 3, 0LL);
      fcntl(v10, 4, v11 | 4u);
      __int128 v12 = dispatch_group_create();
      dispatch_source_t v13 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_read,  v10,  0LL,  *(dispatch_queue_t *)(v2 + 8));
      if (v13)
      {
        __int128 v14 = v13;
        dispatch_source_t v15 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_write,  v10,  0LL,  *(dispatch_queue_t *)(v2 + 8));
        if (v15)
        {
          uint64_t v16 = v15;
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3221225472LL;
          handler[2] = sub_10024FD84;
          handler[3] = &unk_10087EB68;
          handler[4] = v2;
          int v30 = v10;
          dispatch_source_set_event_handler(v14, handler);
          dispatch_group_enter(v12);
          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3221225472LL;
          v28[2] = sub_10024FF2C;
          v28[3] = &unk_10087EB20;
          v28[4] = v12;
          dispatch_source_set_cancel_handler(v14, v28);
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472LL;
          void v26[2] = sub_10024FF34;
          v26[3] = &unk_10087EB68;
          v26[4] = v2;
          int v27 = v10;
          dispatch_source_set_event_handler(v16, v26);
          dispatch_group_enter(v12);
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472LL;
          v25[2] = sub_100250190;
          v25[3] = &unk_10087EB20;
          v25[4] = v12;
          dispatch_source_set_cancel_handler(v16, v25);
          dispatch_resume(v14);
          uint64_t v17 = *(dispatch_queue_s **)(v2 + 8);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_100250198;
          block[3] = &unk_10087F980;
          int v24 = v10;
          dispatch_group_notify(v12, v17, block);
          dispatch_release(v12);
          uint64_t v18 = (uint64_t *)operator new(0x1A0uLL);
          sub_1002549F0( (uint64_t)v18,  *(_DWORD *)(a1 + 64),  *(void *)(a1 + 48),  v32,  (uint64_t)v14,  (uint64_t)v16,  SHIDWORD(v32),  *(_DWORD *)(a1 + 68));
          uint64_t v31 = v3;
          sub_1002550B8((uint64_t **)(v2 + 16), (unsigned __int16 *)v3, (uint64_t)&unk_1006C2518, (_WORD **)&v31)[5] = v18;
          __int16 v19 = *(_WORD *)(a1 + 72);
          int v22 = *((_DWORD *)v18 + 50);
          uint64_t v31 = &v22;
          *((_WORD *)sub_100255178((uint64_t **)(v2 + 64), &v22, (uint64_t)&unk_1006C2518, &v31) + 16) = v19;
          *((_BYTE *)v18 + 378) = *(_BYTE *)(a1 + 74);
          **(_DWORD **)(a1 + 56) = *((_DWORD *)v18 + 51);
          return;
        }

        if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
          sub_1006631E8();
        }
        dispatch_release(v14);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR))
      {
        sub_100663174();
      }
    }

    uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v21 = 4;
  }

  *(_DWORD *)(v20 + 24) = v21;
}

void sub_10024FD68(_Unwind_Exception *a1)
{
}

void sub_10024FD84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v2 + 72;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        BOOL v8 = (uint64_t *)v3;
      }
      else {
        BOOL v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      uint64_t v9 = *(void *)(v2 + 24);
      if (!v9) {
        goto LABEL_28;
      }
      uint64_t v10 = *(unsigned __int16 *)(v5 + 32);
      uint64_t v11 = v2 + 24;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        else {
          __int128 v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }

      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        sub_10024FE6C((_BYTE *)v2, v10, *(void *)(v11 + 40));
      }

      else
      {
LABEL_28:
        if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
          sub_100663334();
        }
      }
    }
  }

void sub_10024FE6C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  int v4 = a2;
  if ((sub_100253B40(a1, a2, a3) & 1) == 0)
  {
    uint64_t v5 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
    {
      v6[0] = 67109120;
      v6[1] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Stack is now full on pipe 0x%04x - stopping read source",  (uint8_t *)v6,  8u);
    }

    sub_100254DCC(a3, 1);
  }

void sub_10024FF2C(uint64_t a1)
{
}

void sub_10024FF34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v2 + 72;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        BOOL v8 = (uint64_t *)v3;
      }
      else {
        BOOL v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      uint64_t v9 = *(void *)(v2 + 24);
      if (!v9) {
        goto LABEL_28;
      }
      unsigned int v10 = *(unsigned __int16 *)(v5 + 32);
      uint64_t v11 = v2 + 24;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          __int128 v14 = (uint64_t *)v9;
        }
        else {
          __int128 v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }

      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        sub_10025001C(v2, v10, *(void *)(v11 + 40));
      }

      else
      {
LABEL_28:
        if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
          sub_100663334();
        }
      }
    }
  }

void sub_10025001C(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = (void *)(a3 + 168);
  if (*(void *)(a3 + 168)
    || (uint64_t v9 = (os_log_s *)qword_1008F75F8, os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT))
    && !sub_100663394(v9, v6, v10, v11, v12, v13, v14, v15))
  {
    uint64_t v7 = (uint64_t)(v6 - 5);
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 136) + ((*(void *)(a3 + 160) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                     + 8 * (*(void *)(a3 + 160) & 0x1FFLL));
      if (!sub_100252D94( a1,  a2,  a3,  (unsigned __int8 *)(v8 + 19),  *(void *)(v8 + 8),  *(unsigned __int16 *)(v8 + 16),  *(unsigned __int8 *)(v8 + 18))) {
        break;
      }
      free((void *)v8);
      *(int64x2_t *)(a3 + 160) = vaddq_s64(*(int64x2_t *)(a3 + 160), (int64x2_t)xmmword_1006BFA70);
      sub_100254FCC(v7, 1);
      if (!*(void *)(a3 + 168)) {
        goto LABEL_7;
      }
    }
  }

  else
  {
LABEL_7:
    uint64_t v16 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 67109120;
      int v18 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Socket queue is now empty on pipe 0x%04x - stopping write source",  buf,  8u);
    }

    dispatch_suspend(*(dispatch_object_t *)(a3 + 192));
  }

void sub_100250190(uint64_t a1)
{
}

uint64_t sub_100250198(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t sub_1002501A0(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  return sub_10024F8A0(a1, 0, a2, a3, a5, a5, a6, a7);
}

uint64_t sub_1002501BC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, int *a6, int a7)
{
  uint64_t v14 = (os_log_s *)qword_1008F75F8;
  if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *a6;
    v34[0] = 67110144;
    v34[1] = a3;
    __int16 v35 = 1024;
    int v36 = a4;
    __int16 v37 = 1024;
    int v38 = a5;
    __int16 v39 = 1024;
    int v40 = v16;
    __int16 v41 = 1024;
    int v42 = a7;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "cid:%d pid:%d outMTU:%d sock:%d priority:%d",  (uint8_t *)v34,  0x20u);
  }

  uint64_t v17 = sub_10024F8A0(a1, 1, a2, a3, v15, (uint64_t)a6, a7, 0);
  if (!(_DWORD)v17)
  {
    uint64_t v20 = *(void *)(a1 + 24);
    uint64_t v19 = a1 + 24;
    uint64_t v18 = v20;
    if (!v20) {
      goto LABEL_15;
    }
    uint64_t v21 = v19;
    do
    {
      unsigned int v22 = *(unsigned __int16 *)(v18 + 32);
      BOOL v23 = v22 >= a3;
      if (v22 >= a3) {
        int v24 = (uint64_t *)v18;
      }
      else {
        int v24 = (uint64_t *)(v18 + 8);
      }
      if (v23) {
        uint64_t v21 = v18;
      }
      uint64_t v18 = *v24;
    }

    while (*v24);
    if (v21 == v19 || *(unsigned __int16 *)(v21 + 32) > a3)
    {
LABEL_15:
      char v25 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
        sub_100663420(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      uint64_t v21 = v19;
    }

    *(_WORD *)(*(void *)(v21 + 40) + 376LL) = a5;
  }

  return v17;
}

BOOL sub_100250350(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  return !a1 || !*a1 || sub_10025037C(*a1, a1[1], a2, a3, a4);
}

BOOL sub_10025037C(uint64_t a1, unsigned __int16 a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v5 = a1 + 24;
  uint64_t v6 = v7;
  if (v7)
  {
    uint64_t v8 = v5;
    do
    {
      unsigned int v9 = *(unsigned __int16 *)(v6 + 32);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        uint64_t v11 = (uint64_t *)v6;
      }
      else {
        uint64_t v11 = (uint64_t *)(v6 + 8);
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      uint64_t v6 = *v11;
    }

    while (*v11);
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
    sub_100663490();
  }
  return 0LL;
}

void sub_100250424(uint64_t *a1)
{
  if (a1)
  {
    if (*a1)
    {
      sub_100250484(*a1, a1[1]);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR))
    {
      sub_1006634F4();
    }
  }

void sub_100250484(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    goto LABEL_20;
  }
  uint64_t v5 = a1 + 24;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }

  while (*v8);
  if (v5 != a1 + 24 && *(unsigned __int16 *)(v5 + 32) <= a2)
  {
    for (uint64_t i = *(int64x2_t **)(v5 + 40); i[10].i64[1]; sub_100254FCC((uint64_t)i[8].i64, 1))
    {
      if (!sub_100252D94( a1,  a2,  (uint64_t)i,  (unsigned __int8 *)(v10 + 19),  *(void *)(v10 + 8),  *(unsigned __int16 *)(v10 + 16),  *(unsigned __int8 *)(v10 + 18))) {
        break;
      }
      free((void *)v10);
      i[10] = vaddq_s64(i[10], (int64x2_t)xmmword_1006BFA70);
    }
  }

  else
  {
LABEL_20:
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
      sub_100663520();
    }
  }

uint64_t sub_1002505B4(uint64_t a1, uint64_t a2, int a3, int a4, _WORD *a5, char a6, char a7, uint64_t a8)
{
  uint64_t v25 = 0LL;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000LL;
  int v28 = 0;
  int v16 = (os_log_s *)qword_1008F75F8;
  if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v30 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Registering networkrelay pipe for pipeID:0x%4x",  buf,  8u);
  }

  *a5 = 0;
  uint64_t v17 = *(dispatch_queue_s **)(a1 + 8);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100250718;
  v20[3] = &unk_100889A20;
  __int16 v22 = a3;
  v20[4] = &v25;
  v20[5] = a1;
  int v21 = a4;
  v20[6] = a8;
  v20[7] = a2;
  char v23 = a7;
  v20[8] = a5;
  char v24 = a6;
  dispatch_sync(v17, v20);
  uint64_t v18 = *((unsigned int *)v26 + 6);
  _Block_object_dispose(&v25, 8);
  return v18;
}

void sub_100250718(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = (unsigned __int16 *)(a1 + 76);
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4)
  {
    unsigned int v5 = *v3;
    uint64_t v6 = v2 + 24;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v4 + 32);
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        unsigned int v9 = (uint64_t *)v4;
      }
      else {
        unsigned int v9 = (uint64_t *)(v4 + 8);
      }
      if (v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != v2 + 24 && v5 >= *(unsigned __int16 *)(v6 + 32))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
        sub_1006636BC();
      }
      uint64_t v41 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v42 = 103;
      goto LABEL_101;
    }
  }

  signed int v10 = arc4random_uniform(0xFFFFFFFF);
  int v82 = v10;
  uint64_t v12 = (uint64_t *)(v2 + 72);
  uint64_t v11 = *(void *)(v2 + 72);
  if (v11)
  {
    uint64_t v13 = v2 + 72;
    do
    {
      signed int v14 = *(_DWORD *)(v11 + 28);
      BOOL v15 = v14 < v10;
      if (v14 >= v10) {
        int v16 = (uint64_t *)v11;
      }
      else {
        int v16 = (uint64_t *)(v11 + 8);
      }
      if (!v15) {
        uint64_t v13 = v11;
      }
      uint64_t v11 = *v16;
    }

    while (*v16);
    if ((uint64_t *)v13 != v12 && v10 >= *(_DWORD *)(v13 + 28))
    {
      do
      {
        signed int v17 = arc4random_uniform(0xFFFFFFFF);
        uint64_t v18 = *v12;
        if (!*v12) {
          break;
        }
        uint64_t v19 = v2 + 72;
        do
        {
          signed int v20 = *(_DWORD *)(v18 + 28);
          BOOL v21 = v20 < v17;
          if (v20 >= v17) {
            __int16 v22 = (uint64_t *)v18;
          }
          else {
            __int16 v22 = (uint64_t *)(v18 + 8);
          }
          if (!v21) {
            uint64_t v19 = v18;
          }
          uint64_t v18 = *v22;
        }

        while (*v22);
      }

      while ((uint64_t *)v19 != v12 && v17 >= *(_DWORD *)(v19 + 28));
      int v82 = v17;
    }
  }

  char v23 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v2 + 8));
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100250EA8;
  handler[3] = &unk_10087EB20;
  handler[4] = v23;
  dispatch_source_set_event_handler(v23, handler);
  memset(dst, 0, sizeof(dst));
  uuid_copy(dst, *(const unsigned __int8 **)(a1 + 48));
  uint64_t v24 = sub_1001FDB10(v2 + 88, dst);
  if (v2 + 96 == v24)
  {
    __int16 v26 = 0;
  }

  else
  {
    uint64_t v25 = *(void *)(v24 + 48);
    __int16 v26 = *(_WORD *)(v24 + 56);
    if (v25) {
      goto LABEL_38;
    }
  }

  uint64_t v25 = NRBluetoothPacketParserCreate(*(void *)(a1 + 48), *(void *)(v2 + 8));
  if (!v25)
  {
    int v43 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
      sub_100663584(a1 + 48, v43, v44, v45, v46, v47, v48, v49);
    }
    goto LABEL_100;
  }

void sub_100250E60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_100250EA8(uint64_t a1)
{
  uint64_t v1 = *(dispatch_object_s **)(a1 + 32);
  context = dispatch_get_context(v1);
  if (context)
  {
    uint64_t v3 = context;
    sub_100250FC0((uint64_t)context, 0);
    uint64_t v4 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
    {
      int v5 = v3[66];
      v9[0] = 67109120;
      v9[1] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "TIMER: flushing %u held up packets",  (uint8_t *)v9,  8u);
    }

    if (v3[66])
    {
      __uint64_t v6 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      v3[66] = 0;
      *((void *)v3 + 41) = v6;
      unsigned int v7 = (void *)*((void *)v3 + 2);
      if (v7)
      {
        BOOL v8 = (void (*)(void))v7[2];
        if (v8) {
          v8(*v7);
        }
      }
    }
  }

  else
  {
    dispatch_suspend(v1);
  }

void sub_100250FC0(uint64_t a1, int a2)
{
  unint64_t v3 = *(void *)(a1 + 304);
  unint64_t v4 = 2 * v3;
  if (2 * v3 >= 0x1312D00) {
    unint64_t v4 = 20000000LL;
  }
  if (v4 <= 0xF4240) {
    int64_t v5 = 1000000LL;
  }
  else {
    int64_t v5 = v4;
  }
  int v6 = *(unsigned __int8 *)(a1 + 344);
  if (a2)
  {
    unsigned int v7 = *(dispatch_source_s **)(a1 + 336);
    dispatch_time_t v8 = dispatch_time(0LL, v5);
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    if (!*(_BYTE *)(a1 + 344))
    {
      *(_BYTE *)(a1 + 344) = 1;
      dispatch_resume(*(dispatch_object_t *)(a1 + 336));
    }

    unsigned int v9 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
    {
      signed int v10 = "RE-ARMED";
      if (!v6) {
        signed int v10 = "ARMED";
      }
      int v11 = *(_DWORD *)(a1 + 276);
      unint64_t v12 = *(void *)(a1 + 304) / 0xF4240uLL;
      int v15 = 136446978;
      *(void *)int v16 = v10;
      *(_WORD *)&v16[8] = 1024;
      *(_DWORD *)&v16[10] = v11;
      __int16 v17 = 2048;
      unint64_t v18 = v12;
      __int16 v19 = 2048;
      unint64_t v20 = v5 / 0xF4240uLL;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%{public}s: lenAvg %u, ivalAvg %llu ms, deadline %llu ms",  (uint8_t *)&v15,  0x26u);
    }
  }

  else if (*(_BYTE *)(a1 + 344))
  {
    uint64_t v13 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
    {
      int v14 = *(_DWORD *)(a1 + 276);
      int v15 = 67109376;
      *(_DWORD *)int v16 = v14;
      *(_WORD *)&v16[4] = 2048;
      *(void *)&v16[6] = v3 / 0xF4240;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "DISARMED: lenAvg %u, ivalAvg %llu ms",  (uint8_t *)&v15,  0x12u);
    }

    *(_BYTE *)(a1 + 344) = 0;
    dispatch_suspend(*(dispatch_object_t *)(a1 + 336));
  }

void sub_1002511D0(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    goto LABEL_41;
  }
  int64_t v5 = (uint64_t **)(a1 + 16);
  uint64_t v6 = a1 + 24;
  do
  {
    unsigned int v7 = *(unsigned __int16 *)(v3 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unsigned int v9 = (uint64_t *)v3;
    }
    else {
      unsigned int v9 = (uint64_t *)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 24 && *(unsigned __int16 *)(v6 + 32) <= a2)
  {
    uint64_t v10 = *(void *)(v6 + 40);
    uint64_t v11 = *(void *)(a1 + 72);
    int v12 = *(_DWORD *)(v10 + 200);
    if (!v11) {
      goto LABEL_25;
    }
    uint64_t v13 = a1 + 72;
    do
    {
      int v14 = *(_DWORD *)(v11 + 28);
      BOOL v15 = v14 < v12;
      if (v14 >= v12) {
        int v16 = (uint64_t *)v11;
      }
      else {
        int v16 = (uint64_t *)(v11 + 8);
      }
      if (!v15) {
        uint64_t v13 = v11;
      }
      uint64_t v11 = *v16;
    }

    while (*v16);
    if (v13 == a1 + 72 || v12 < *(_DWORD *)(v13 + 28))
    {
LABEL_25:
      __int16 v17 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a2;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "Wasn't tracking a server socket for pipe 0x%04x",  buf,  8u);
        int v12 = *(_DWORD *)(v10 + 200);
      }
    }

    *(_DWORD *)__int128 buf = v12;
    sub_100255470(a1 + 64, (int *)buf);
    sub_1001FDBCC(v5, (uint64_t *)v6);
    operator delete((void *)v6);
    if (*(_DWORD *)(v10 + 368) == 3)
    {
      uint64_t v18 = *(void *)(v10 + 112);
      *(_BYTE *)(a1 + 137) = 0;
      if (qword_1008D6198 != -1) {
        dispatch_once(&qword_1008D6198, &stru_100889AE0);
      }
      sub_100449064(off_1008D6190, 0);
      LOBYTE(v30) = 0;
      sub_100242CA4(&v30);
      BOOL v19 = sub_10012D5EC(v18);
      sub_100242CD0(&v30);
      if (v19)
      {
        uint64_t v20 = sub_1002E6E9C();
        int v21 = (*(uint64_t (**)(uint64_t, unint64_t, void, uint64_t, void, void, uint64_t, void))(*(void *)v20 + 72LL))( v20,  *(unsigned int *)(v18 + 57) | ((unint64_t)*(unsigned __int16 *)(v18 + 61) << 32),  0LL,  8LL,  0LL,  0LL,  1LL,  0LL);
        __int16 v22 = (os_log_s *)qword_1008F75F8;
        if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Untag iso link as high priority with result %d",  buf,  8u);
        }
      }

      sub_100242CD8(&v30);
    }

    *(void *)__int128 buf = 0LL;
    uint64_t v32 = 0LL;
    uuid_copy(buf, (const unsigned __int8 *)(v10 + 400));
    char v23 = (void *)sub_100254C2C(v10);
    operator delete(v23);
    if (*(void *)(a1 + 104))
    {
      uint64_t v24 = (uint64_t **)(a1 + 88);
      uint64_t v25 = sub_1001FDB10(a1 + 88, buf);
      __int16 v26 = (uint64_t *)v25;
      if (a1 + 96 != v25)
      {
        uint64_t v27 = *(void *)(v25 + 48);
        unsigned int v28 = *(unsigned __int16 *)(v25 + 56);
        if (v28 >= 2)
        {
          unsigned int v30 = buf;
          int v29 = sub_100255238( v24,  buf,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v30);
          v29[6] = v27;
          *((_WORD *)v29 + 28) = v28 - 1;
        }

        else
        {
          free(*(void **)(v25 + 48));
          sub_1001FDBCC(v24, v26);
          operator delete(v26);
        }
      }
    }
  }

  else
  {
LABEL_41:
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
      sub_100663720();
    }
  }

void sub_100251510(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100251530( uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, _WORD *a7, char a8, char a9)
{
  uint64_t v27 = 0LL;
  unsigned int v28 = &v27;
  uint64_t v29 = 0x2020000000LL;
  int v30 = 0;
  __int16 v17 = (os_log_s *)qword_1008F75F8;
  if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109376;
    int v32 = a3;
    __int16 v33 = 1024;
    int v34 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Registering skywalk pipe for pipeID:0x%4x pid:%d",  buf,  0xEu);
  }

  if (*(void *)(a1 + 112))
  {
    *a7 = 0;
    uint64_t v18 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002516B8;
    block[3] = &unk_100889A78;
    __int16 v24 = a3;
    void block[4] = &v27;
    block[5] = a1;
    int v22 = a4;
    int v23 = a6;
    char v25 = a9;
    block[6] = a2;
    block[7] = a7;
    char v26 = a8;
    block[8] = a5;
    dispatch_sync(v18, block);
    uint64_t v19 = *((unsigned int *)v28 + 6);
  }

  else
  {
    uint64_t v19 = 114LL;
  }

  _Block_object_dispose(&v27, 8);
  return v19;
}

void sub_1002516B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = (unsigned __int16 *)(a1 + 80);
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4)
  {
    unsigned int v5 = *v3;
    uint64_t v6 = v2 + 24;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v4 + 32);
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        unsigned int v9 = (uint64_t *)v4;
      }
      else {
        unsigned int v9 = (uint64_t *)(v4 + 8);
      }
      if (v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != v2 + 24 && v5 >= *(unsigned __int16 *)(v6 + 32))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
        sub_10066395C();
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v11 = 103;
      goto LABEL_24;
    }
  }

  __int128 src = 0uLL;
  if (os_nexus_controller_alloc_provider_instance(*(void *)(v2 + 112), v2 + 120, &src))
  {
LABEL_13:
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v11 = 4;
LABEL_24:
    *(_DWORD *)(v10 + 24) = v11;
    return;
  }

  uint64_t v12 = *(void *)(v2 + 112);
  uint64_t v13 = getpid();
  os_nexus_controller_bind_provider_instance(v12, &src, 1LL, v13, 0LL, 0LL, 0LL, 1LL);
  uint64_t v14 = os_nexus_controller_bind_provider_instance( *(void *)(v2 + 112),  &src,  0LL,  *(unsigned int *)(a1 + 72),  0LL,  0LL,  0LL,  1LL);
  uint64_t v15 = os_channel_attr_create(v14);
  os_channel_attr_set(v15, 7LL, 1LL);
  uint64_t v16 = os_channel_create_extended(&src, 1LL, 0LL, 0xFFFFFFFFLL, v15);
  if (!v16)
  {
    __int16 v17 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
      sub_1006638D0(v17);
    }
  }

  *(void *)&handle[1] = 0LL;
  uint64_t v64 = 0LL;
  os_channel_attr_get(v15, 2LL, &v64);
  os_channel_attr_get(v15, 3LL, &handle[1]);
  os_channel_attr_destroy(v15);
  handle[0] = os_channel_get_fd(v16);
  uint64_t v18 = dispatch_group_create();
  uint64_t v19 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_read,  handle[0],  0LL,  *(dispatch_queue_t *)(v2 + 8));
  if (!v19)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
      sub_100663784();
    }
    goto LABEL_13;
  }

  uint64_t v20 = v19;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100251F34;
  handler[3] = &unk_10087EB68;
  handler[4] = v2;
  int v62 = handle[0];
  dispatch_source_set_event_handler(v19, handler);
  dispatch_group_enter(v18);
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472LL;
  v60[2] = sub_10025201C;
  v60[3] = &unk_10087EB20;
  v60[4] = v18;
  dispatch_source_set_cancel_handler(v20, v60);
  int v21 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_write,  handle[0],  0LL,  *(dispatch_queue_t *)(v2 + 8));
  if (!v21)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
      sub_1006637F8();
    }
    dispatch_release(v20);
    goto LABEL_13;
  }

  int v22 = v21;
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472LL;
  v58[2] = sub_100252024;
  v58[3] = &unk_10087EB68;
  v58[4] = v2;
  int v59 = handle[0];
  dispatch_source_set_event_handler(v21, v58);
  dispatch_group_enter(v18);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472LL;
  void v57[2] = sub_10025210C;
  v57[3] = &unk_10087F8E0;
  v57[4] = v16;
  v57[5] = v18;
  dispatch_source_set_cancel_handler(v22, v57);
  dispatch_resume(v20);
  memset(dst, 0, sizeof(dst));
  uuid_copy(dst, (const unsigned __int8 *)&src);
  int v23 = *(dispatch_queue_s **)(v2 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_100252134;
  block[3] = &unk_100889A40;
  void block[4] = v2;
  uuid_copy(v72, dst);
  dispatch_group_notify(v18, v23, block);
  dispatch_release(v18);
  __int16 v24 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v2 + 8));
  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472LL;
  v56[2] = sub_100252158;
  _OWORD v56[3] = &unk_10087EB20;
  v56[4] = v24;
  dispatch_source_set_event_handler(v24, v56);
  uint64_t v25 = *(void *)(a1 + 48);
  char v26 = (uint64_t *)operator new(0x1A0uLL);
  uuid_copy(v70, dst);
  sub_100254A98( (uint64_t)v26,  0,  v25,  v70,  v16,  handle[0],  (uint64_t)v20,  (uint64_t)v22,  (uint64_t)v24,  v64,  handle[1],  *(_DWORD *)(a1 + 76),  *(_BYTE *)(a1 + 82));
  *(void *)__int128 buf = v3;
  sub_1002550B8((uint64_t **)(v2 + 16), v3, (uint64_t)&unk_1006C2518, (_WORD **)buf)[5] = v26;
  unsigned __int16 v27 = *v3;
  *(void *)__int128 buf = handle;
  *((_WORD *)sub_100255178((uint64_t **)(v2 + 64), handle, (uint64_t)&unk_1006C2518, (_DWORD **)buf) + 16) = v27;
  else {
    int v28 = 0;
  }
  unsigned int v55 = 0;
  uint64_t v29 = sub_1002E6E00();
  sub_10002418C(buf, "Pipe");
  sub_10002418C(__p, "overrideMTUSize");
  int v30 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned int *))(*(void *)v29 + 128LL))( v29,  buf,  __p,  &v55);
  unsigned int v31 = v55;
  if (v55) {
    int v32 = v30;
  }
  else {
    int v32 = 0;
  }
  if (v32 == 1)
  {
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (!HIWORD(v31))
    {
      uint64_t v33 = v55;
      **(_WORD **)(a1 + 56) = v55;
      int v34 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
        sub_10066386C(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      goto LABEL_53;
    }
  }

  else
  {
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  if (*(_DWORD *)(a1 + 76) == 3)
  {
    __int16 v41 = 675;
  }

  else if (v28)
  {
    __int16 v41 = 2570;
  }

  else
  {
    __int16 v41 = 2031;
  }

  **(_WORD **)(a1 + 56) = v41;
LABEL_53:
  int v42 = (os_log_s *)qword_1008F75F8;
  if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
  {
    memset(buf, 0, 37);
    uuid_unparse_upper(dst, buf);
    sub_10002418C(__p, buf);
    int v43 = (void **)__p[0];
    if (v54 >= 0) {
      int v43 = __p;
    }
    int v44 = *(unsigned __int16 *)(a1 + 80);
    uint64_t v45 = *(int *)(a1 + 76);
    if (v45 >= 3)
    {
      if ((_DWORD)v45 == 3) {
        uint64_t v46 = "iso";
      }
      else {
        uint64_t v46 = "unknown";
      }
    }

    else
    {
      uint64_t v46 = off_100889B40[v45];
    }

    int v47 = **(unsigned __int16 **)(a1 + 56);
    uint64_t v48 = "No ";
    if (!*(_BYTE *)(a1 + 83)) {
      uint64_t v48 = "";
    }
    int v49 = *(unsigned __int8 *)(a1 + 82);
    *(_DWORD *)__int128 buf = 136447746;
    *(void *)&uint8_t buf[4] = v43;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v44;
    *(_WORD *)&_BYTE buf[18] = 2082;
    *(void *)&_BYTE buf[20] = v46;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v47;
    *(_WORD *)&buf[34] = 2082;
    *(void *)&buf[36] = v48;
    __int16 v66 = 1024;
    int v67 = v28;
    __int16 v68 = 1024;
    int v69 = v49;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Successfully created nexus instance %{public}s for pipeID:%d with priority=%{public}s outMTU=%d %{public}sERTM HDR=%d terminus=%d",  buf,  0x38u);
    if (v54 < 0) {
      operator delete(__p[0]);
    }
  }

  *(_OWORD *)*(void *)(a1 + sub_100242FAC(v1 - 64) = src;
  *((_WORD *)v26 + 188) = **(_WORD **)(a1 + 56);
  *((_BYTE *)v26 + 378) = *(_BYTE *)(a1 + 83);
  if (*(_DWORD *)(a1 + 76) == 3)
  {
    *(_BYTE *)(v2 + 137) = 1;
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_100889AE0);
    }
    sub_100449064(off_1008D6190, 1);
    *((_BYTE *)v26 + 378) = 1;
    uint64_t v50 = sub_1002E6E9C();
    int v51 = (*(uint64_t (**)(uint64_t, unint64_t, void, uint64_t, uint64_t, void, uint64_t, void))(*(void *)v50 + 72LL))( v50,  *(unsigned int *)(v25 + 57) | ((unint64_t)*(unsigned __int16 *)(v25 + 61) << 32),  0LL,  8LL,  1LL,  0LL,  1LL,  0LL);
    int v52 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Tag iso link as high priority with result %d",  buf,  8u);
    }
  }

void sub_100251EEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  _Unwind_Resume(exception_object);
}

void sub_100251F34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v2 + 72;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        BOOL v8 = (uint64_t *)v3;
      }
      else {
        BOOL v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      uint64_t v9 = *(void *)(v2 + 24);
      if (!v9) {
        goto LABEL_28;
      }
      uint64_t v10 = *(unsigned __int16 *)(v5 + 32);
      uint64_t v11 = v2 + 24;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        else {
          uint64_t v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }

      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        sub_10024FE6C((_BYTE *)v2, v10, *(void *)(v11 + 40));
      }

      else
      {
LABEL_28:
        if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
          sub_100663334();
        }
      }
    }
  }

void sub_10025201C(uint64_t a1)
{
}

void sub_100252024(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v2 + 72;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        BOOL v8 = (uint64_t *)v3;
      }
      else {
        BOOL v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      uint64_t v9 = *(void *)(v2 + 24);
      if (!v9) {
        goto LABEL_28;
      }
      unsigned int v10 = *(unsigned __int16 *)(v5 + 32);
      uint64_t v11 = v2 + 24;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          uint64_t v14 = (uint64_t *)v9;
        }
        else {
          uint64_t v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }

      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        sub_10025001C(v2, v10, *(void *)(v11 + 40));
      }

      else
      {
LABEL_28:
        if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
          sub_100663334();
        }
      }
    }
  }

void sub_10025210C(uint64_t a1)
{
}

uint64_t sub_100252134(uint64_t a1)
{
  return os_nexus_controller_free_provider_instance(*(void *)(*(void *)(a1 + 32) + 112LL), a1 + 40);
}

void sub_100252148(uint64_t a1, uint64_t a2)
{
}

void sub_100252158(uint64_t a1)
{
  uint64_t v1 = *(dispatch_object_s **)(a1 + 32);
  context = dispatch_get_context(v1);
  if (context)
  {
    uint64_t v3 = context;
    sub_100250FC0((uint64_t)context, 0);
    uint64_t v4 = v3[28];
    if (v4)
    {
      uint64_t v5 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
      {
        int v6 = *((_DWORD *)v3 + 66);
        v8[0] = 67109120;
        v8[1] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "TIMER: flushing %u held up packets",  (uint8_t *)v8,  8u);
      }

      if (*((_DWORD *)v3 + 66))
      {
        __uint64_t v7 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
        *((_DWORD *)v3 + 66) = 0;
        v3[41] = v7;
        os_channel_sync(v4, 0LL);
      }
    }
  }

  else
  {
    dispatch_suspend(v1);
  }

void sub_100252278(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002522D4;
  v3[3] = &unk_1008878D8;
  v3[4] = a1;
  __int16 v4 = a2;
  dispatch_sync(v2, v3);
}

void sub_1002522D4(uint64_t a1)
{
}

uint64_t sub_1002522E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 == (void *)(a1 + 24)) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v3 = v2[5];
    if (*(void *)(v3 + 112) == a2 && *(_DWORD *)(v3 + 368) == 3) {
      break;
    }
    __int16 v4 = (void *)v2[1];
    if (v4)
    {
      do
      {
        uint64_t v5 = v4;
        __int16 v4 = (void *)*v4;
      }

      while (v4);
    }

    else
    {
      do
      {
        uint64_t v5 = (void *)v2[2];
        BOOL v6 = *v5 == (void)v2;
        uint64_t v2 = v5;
      }

      while (!v6);
    }

    uint64_t v2 = v5;
    if (v5 == (void *)(a1 + 24)) {
      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_100252358(uint64_t a1, __int128 *a2, const void *a3, unsigned __int8 a4)
{
  char v16 = 0;
  sub_100242CA4(&v16);
  uint64_t v7 = sub_10008F624(a2, a3, a4);
  if ((_DWORD)v7)
  {
    BOOL v8 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
      sub_1006639C0(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    uint64_t v7 = 1LL;
  }

  sub_100242CD8(&v16);
  return v7;
}

void sub_1002523EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100252400(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v19 = a3;
  unint64_t v20 = a2;
  uint64_t v3 = (void *)(a1 + 48);
  __int16 v4 = *(void **)(a1 + 48);
  uint64_t v5 = (uint64_t **)(a1 + 40);
  if (v4)
  {
    BOOL v6 = v3;
    do
    {
      unint64_t v7 = v4[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = v4;
      }
      else {
        uint64_t v9 = v4 + 1;
      }
      if (v8) {
        BOOL v6 = v4;
      }
      __int16 v4 = (void *)*v9;
    }

    while (*v9);
    if (v6 != v3 && v6[4] <= a2)
    {
      uint64_t v12 = (void *)v6[6];
      uint64_t v10 = v6 + 6;
      uint64_t v11 = v12;
      if (v12)
      {
        uint64_t v13 = v10;
        do
        {
          unint64_t v14 = v11[4];
          BOOL v15 = v14 >= a3;
          if (v14 >= a3) {
            char v16 = v11;
          }
          else {
            char v16 = v11 + 1;
          }
          if (v15) {
            uint64_t v13 = v11;
          }
          uint64_t v11 = (void *)*v16;
        }

        while (*v16);
        if (v13 != v10 && v13[4] <= a3) {
          return 15LL;
        }
      }
    }
  }

  int v21 = &v20;
  __int16 v17 = sub_1002554E8(v5, &v20, (uint64_t)&unk_1006C2518, (uint64_t **)&v21);
  sub_1002555B0((uint64_t **)v17 + 5, &v19, (uint64_t *)&v19);
  return 0LL;
}

uint64_t sub_1002524D8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 48);
  uint64_t v3 = (void *)(a1 + 48);
  __int16 v4 = v5;
  if (!v5) {
    return 16LL;
  }
  BOOL v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v4 + 1;
    }
    if (v8) {
      BOOL v6 = v4;
    }
    __int16 v4 = (void *)*v9;
  }

  while (*v9);
  if (v6 == v3) {
    return 16LL;
  }
  if (v6[4] > a2) {
    return 16LL;
  }
  uint64_t v12 = (void *)v6[6];
  uint64_t v10 = v6 + 6;
  uint64_t v11 = v12;
  if (!v12) {
    return 16LL;
  }
  uint64_t v13 = v10;
  unint64_t v14 = v11;
  do
  {
    unint64_t v15 = v14[4];
    BOOL v16 = v15 >= a3;
    if (v15 >= a3) {
      __int16 v17 = v14;
    }
    else {
      __int16 v17 = v14 + 1;
    }
    if (v16) {
      uint64_t v13 = v14;
    }
    unint64_t v14 = (void *)*v17;
  }

  while (*v17);
  if (v13 == v10 || v13[4] > a3) {
    return 16LL;
  }
  unint64_t v19 = v10;
  do
  {
    unint64_t v20 = v11[4];
    BOOL v21 = v20 >= a3;
    if (v20 >= a3) {
      int v22 = v11;
    }
    else {
      int v22 = v11 + 1;
    }
    if (v21) {
      unint64_t v19 = v11;
    }
    uint64_t v11 = (void *)*v22;
  }

  while (*v22);
  if (v19 == v10 || v19[4] > a3) {
    unint64_t v19 = v10;
  }
  sub_1001FDBCC((uint64_t **)v10 - 1, v19);
  operator delete(v19);
  return 0LL;
}

void sub_1002525C4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5)
{
  if (qword_1008EF968 != -1) {
    dispatch_once(&qword_1008EF968, &stru_100889970);
  }
  sub_100252634(qword_1008F71A8, a1, a2, a3, a5);
}

void sub_100252634(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char a5)
{
  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a3, a4));
  uint64_t v9 = sub_100404FE8();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100252708;
  v11[3] = &unk_100889AA0;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  id v10 = v8;
  id v12 = v10;
  char v15 = a5;
  sub_100405384(v9, v11);
}

void sub_1002526E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100252708(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(v1 + 40);
  uint64_t v3 = (void *)(v1 + 48);
  if (v2 != (void *)(v1 + 48))
  {
    do
    {
      if (v2[4] == *(void *)(a1 + 48))
      {
        BOOL v8 = (void *)v2[5];
        if (v8 != v2 + 6)
        {
          do
          {
            uint64_t v9 = (void (***)(void, void *, void, void))v8[4];
            memset(uu, 0, sizeof(uu));
            uuid_clear(uu);
            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_100889B00);
            }
            if (sub_100593548((uint64_t)off_1008D5F08, *(void *)(a1 + 48), uu))
            {
              id v10 = sub_100241F94(uu);
              uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
              (**v9)(v9, v11, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
            }

            id v12 = (void *)v8[1];
            if (v12)
            {
              do
              {
                uint64_t v13 = v12;
                id v12 = (void *)*v12;
              }

              while (v12);
            }

            else
            {
              do
              {
                uint64_t v13 = (void *)v8[2];
                BOOL v7 = *v13 == (void)v8;
                BOOL v8 = v13;
              }

              while (!v7);
            }

            BOOL v8 = v13;
          }

          while (v13 != v2 + 6);
        }
      }

      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          BOOL v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }

        while (!v7);
      }

      uint64_t v2 = v6;
    }

    while (v6 != v3);
  }

void sub_1002528A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002528C0(uint64_t a1, int a2, const void *a3, size_t a4, uint64_t a5, char a6)
{
  uint64_t v11 = malloc(a4 + 24);
  id v12 = (os_log_s *)qword_1008F75F8;
  if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
  {
    int v13 = 134218240;
    size_t v14 = a4;
    __int16 v15 = 1024;
    int v16 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Received %zu bytes on pipe id:%04X",  (uint8_t *)&v13,  0x12u);
  }

  *(_WORD *)uint64_t v11 = a2;
  v11[1] = a4;
  *((_BYTE *)v11 + 18) = a6;
  memcpy((char *)v11 + 19, a3, a4);
  sub_100242A04(21LL, 0LL);
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 8), v11, (dispatch_function_t)sub_1002529DC);
}

void sub_1002529DC(unsigned __int16 *a1)
{
}

void sub_1002529EC(uint64_t a1, unsigned int a2, const void *a3, size_t a4, __int16 a5, int a6, char a7)
{
  size_t v14 = malloc(a4 + 24);
  *(_WORD *)size_t v14 = a2;
  v14[1] = a4;
  *((_WORD *)v14 + 8) = a5;
  *((_BYTE *)v14 + 18) = a7;
  memcpy((char *)v14 + 19, a3, a4);
  uint64_t v15 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 8LL))(v15))
  {
    uint64_t v16 = sub_1002E6E9C();
    if ((sub_1002D0A04(v16) & 1) == 0)
    {
      if (a6)
      {
        sub_10008F124(a2);
      }

      else
      {
        char v17 = 0;
        sub_100242CA4(&v17);
        sub_10008F124(a2);
        sub_100242CD0(&v17);
        sub_100242CD8(&v17);
      }
    }
  }

  dispatch_async_f(*(dispatch_queue_t *)(a1 + 8), v14, (dispatch_function_t)sub_1002529DC);
}

void sub_100252AE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100252AF8(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v15 = a2;
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (!v3) {
      goto LABEL_35;
    }
    unsigned int v4 = *a2;
    uint64_t v5 = a1 + 24;
    do
    {
      unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        BOOL v8 = (uint64_t *)v3;
      }
      else {
        BOOL v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
    if (v5 == a1 + 24 || v4 < *(unsigned __int16 *)(v5 + 32))
    {
LABEL_35:
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
        sub_100663A50();
      }
      goto LABEL_28;
    }

    uint64_t v10 = *(void *)(v5 + 40);
    if (*(void *)(v10 + 168))
    {
      sub_1002556DC((void *)(v10 + 128), &v15);
    }

    else
    {
      if (sub_100252D94( a1,  v4,  *(void *)(v5 + 40),  (unsigned __int8 *)a2 + 19,  *((void *)a2 + 1),  a2[8],  *((unsigned __int8 *)a2 + 18)))
      {
LABEL_28:
        free(a2);
        return;
      }

      uint64_t v11 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
      {
        int v12 = *a2;
        *(_DWORD *)__int128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Socket is now full on pipe 0x%04x - starting write source",  buf,  8u);
      }

      sub_1002556DC((void *)(v10 + 128), &v15);
      if (!*(void *)(v10 + 8)) {
        dispatch_resume(*(dispatch_object_t *)(v10 + 192));
      }
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
      sub_100663A24();
    }
    if (qword_1008D9060 != -1) {
      dispatch_once(&qword_1008D9060, &stru_100889B20);
    }
    uint64_t v9 = qword_1008D9058;
    sub_10002418C(buf, "Magnet");
    sub_10002418C(__p, "receivedDataFromStackDispatched");
    sub_10040C784(0.0, v9, (uint64_t *)buf, (uint64_t *)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_100252D58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100252D94( uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6, unsigned int a7)
{
  if (*(_BYTE *)(a1 + 139)) {
    sub_100253658(a1, a4, a5, a6, 1, *(unsigned __int8 *)(a1 + 140));
  }
  if (*(void *)(a3 + 8)) {
    return sub_10025344C(a1, 0LL, a3, (uint64_t)a4, a5, 0LL, a7);
  }
  if (a7)
  {
    uint64_t v15 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WakeUpState=1. Waking up packet", buf, 2u);
    }
  }

  uint64_t v16 = *(void *)(a3 + 224);
  if (!v16)
  {
    size_t v42 = a5 - *(void *)(a3 + 176);
    sub_100242A04(22LL, 0LL);
    int v43 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 134218240;
      *(void *)&uint8_t buf[4] = a5;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Writing %zu bytes to pipe %#06x", buf, 0x12u);
    }

    ssize_t v44 = write(*(_DWORD *)(a3 + 200), &a4[*(void *)(a3 + 176)], v42);
    if (v44 == -1)
    {
      if (*__error() != 35 && os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
        sub_100663AB0();
      }
      return 0LL;
    }

    else
    {
      unint64_t v45 = *(void *)(a3 + 176) + v44;
      if (v45 >= a5)
      {
        *(void *)(a3 + 176) = 0LL;
        return 1LL;
      }

      else
      {
        uint64_t v46 = 0LL;
        *(void *)(a3 + 176) = v45;
      }
    }

    return v46;
  }

  int v53 = a6;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  memset(buf, 0, sizeof(buf));
  uint64_t v17 = *(void *)(a3 + 232);
  if (!v17)
  {
    uint64_t v18 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
      sub_100663C18(v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }

  uint64_t next_slot = os_channel_get_next_slot(v17, 0LL, buf);
  uint64_t v27 = *(void *)(a3 + 176);
  uint64_t v76 = 0LL;
  uint64_t v77 = 0LL;
  unint64_t v49 = a5 - v27;
  if (a5 == v27) {
    goto LABEL_56;
  }
  uint64_t v28 = next_slot;
  uint64_t v48 = v16;
  if (next_slot)
  {
    uint64_t v51 = a1;
    int v52 = a4;
    unint64_t v29 = a5 - v27;
    __int16 v30 = v53;
    char v50 = a7;
    while (1)
    {
      uint64_t v31 = *(void *)(a3 + 176);
      ++*(_DWORD *)(a3 + 264);
      uint64_t packet = os_channel_slot_get_packet(v17, v28);
      uint64_t next_buflet = os_packet_get_next_buflet(packet, 0LL);
      if (!next_buflet && os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
        sub_100663BF0(&v62, v63);
      }
      object_address = (void *)os_buflet_get_object_address(next_buflet);
      LOWORD(v76) = v30;
      BYTE2(v76) = a7;
      LOWORD(v77) = v30;
      os_packet_set_flow_uuid(packet, &v76);
      __int16 v35 = *(_WORD *)&buf[2];
      *(_WORD *)&uint8_t buf[2] = v35;
      unsigned int data_limit = os_buflet_get_data_limit(next_buflet);
      LOWORD(v37) = data_limit;
      if (data_limit >= 0x10000 && os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
        sub_100663BC8(&v60, v61);
      }
      else {
        size_t v37 = v29;
      }
      if ((unsigned __int16)os_buflet_set_data_length(next_buflet, v37)
        && os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT))
      {
        sub_100663BA0(&v58, v59);
      }

      if ((unsigned __int16)os_packet_finalize(packet)
        && os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT))
      {
        sub_100663B78(&v56, v57);
      }

      if ((_DWORD)v37 != *(unsigned __int16 *)&buf[2]
        && os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT))
      {
        sub_100663B50(&v54, v55);
      }

      memcpy(object_address, &v52[v31], v37);
      *(void *)(a3 + 176) = v37 + v31;
      os_channel_set_slot_properties(v17, v28, buf);
      __int16 v30 = v53;
      if (*(_BYTE *)(v51 + 138))
      {
        uint64_t v38 = (os_log_s *)qword_1008F7630;
        if (os_log_type_enabled((os_log_t)qword_1008F7630, OS_LOG_TYPE_DEFAULT))
        {
          int v39 = byte_1008F7638++;
          *(_DWORD *)uint64_t v64 = 67110400;
          int v65 = 20;
          __int16 v66 = 1024;
          int v67 = 60;
          __int16 v68 = 1024;
          int v69 = v53;
          __int16 v70 = 1024;
          int v71 = v53;
          __int16 v72 = 1024;
          int v73 = v37;
          __int16 v74 = 1024;
          int v75 = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "27 {curProtocol: %hhu, nextProtocol: %hhu, curSeqnStart: %hu, curSeqnEnd: %hu, curLen: %hu, logSeqn: %hhu}",  v64,  0x26u);
        }
      }

      v29 -= v37;
      uint64_t v40 = os_channel_get_next_slot(v17, v28, buf);
      if (!v29) {
        break;
      }
      uint64_t v41 = v28;
      uint64_t v28 = v40;
      LOBYTE(a7) = v50;
      if (!v40) {
        goto LABEL_47;
      }
    }

    os_channel_advance_slot(v17, v28);
    uint64_t v16 = v48;
LABEL_56:
    *(void *)(a3 + 176) = 0LL;
    uint64_t v46 = 1LL;
    goto LABEL_57;
  }

  uint64_t v41 = 0LL;
LABEL_47:
  uint64_t v16 = v48;
  if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR))
  {
    sub_100663B24();
    if (!v41) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }

  if (v41) {
LABEL_49:
  }
    os_channel_advance_slot(v17, v41);
LABEL_50:
  uint64_t v46 = 0LL;
LABEL_57:
  __uint64_t v47 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (sub_100253580(a3, v47, v49) || !(_DWORD)v46)
  {
    *(_DWORD *)(a3 + 2sub_100242FAC(v1 - 64) = 0;
    *(void *)(a3 + 328) = v47;
    sub_100250FC0(a3, 0);
    os_channel_sync(v16, 0LL);
  }

  else
  {
    sub_100250FC0(a3, 1);
  }

  return v46;
}

_BYTE *sub_1002533F4()
{
  char v1 = 0;
  sub_100242CA4(&v1);
  sub_10008CAD8((uint64_t)sub_1002525C4, 0LL);
  return sub_100242CD8(&v1);
}

void sub_100253438( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10025344C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v8 = *(void *)(a3 + 176);
  uint64_t v9 = *(void **)(a3 + 16);
  unint64_t v10 = a5 - v8;
  if (a5 == v8)
  {
LABEL_14:
    *(void *)(a3 + 176) = 0LL;
    uint64_t v17 = 1LL;
    goto LABEL_15;
  }

  uint64_t v13 = a7;
  unint64_t v14 = a5 - v8;
  do
  {
    ++*(_DWORD *)(a3 + 264);
    if (v14 >= a5) {
      unint64_t v15 = a5;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v21 = 0LL;
    if (!v9)
    {
      uint64_t v16 = 0LL;
LABEL_10:
      uint64_t v17 = 1LL;
      goto LABEL_11;
    }

    uint64_t v16 = v9[1];
    if (!v16) {
      goto LABEL_10;
    }
    uint64_t v17 = ((uint64_t (*)(void, uint64_t, unint64_t, void, uint64_t, void))v16)( *v9,  a4 + v8,  v15,  &v21,  v13,  0LL);
    uint64_t v16 = (uint64_t)v21;
LABEL_11:
    v8 += v16;
    *(void *)(a3 + 176) = v8;
    v14 -= v16;
  }

  while ((_DWORD)v17 && v14);
  if (!v14) {
    goto LABEL_14;
  }
LABEL_15:
  __uint64_t v18 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (sub_100253580(a3, v18, v10) || !(_DWORD)v17)
  {
    *(_DWORD *)(a3 + 2sub_100242FAC(v1 - 64) = 0;
    *(void *)(a3 + 328) = v18;
    sub_100250FC0(a3, 0);
    if (v9)
    {
      uint64_t v19 = (void (*)(void))v9[2];
      if (v19) {
        v19(*v9);
      }
    }
  }

  else
  {
    sub_100250FC0(a3, 1);
  }

  return v17;
}

BOOL sub_100253580(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 276);
  if ((_DWORD)v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    if (v4) {
      BOOL v5 = *(void *)(a1 + 328) == 0LL;
    }
    else {
      BOOL v5 = 1;
    }
    if (*(_DWORD *)(a1 + 368) == 3) {
      return 1LL;
    }
    a3 = (a3 - v3 + (v3 << *(_DWORD *)(a1 + 280))) >> *(_DWORD *)(a1 + 280);
  }

  else
  {
    if (*(_DWORD *)(a1 + 368) == 3) {
      return 1LL;
    }
    uint64_t v4 = *(void *)(a1 + 304);
    BOOL v5 = 1;
  }

  *(_DWORD *)(a1 + 276) = a3;
  uint64_t v6 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = a2;
  if (v4) {
    unint64_t v7 = (unint64_t)(a2 - v4 - v6 + (v4 << *(_DWORD *)(a1 + 312))) >> *(_DWORD *)(a1 + 312);
  }
  else {
    unint64_t v7 = *(void *)(a1 + 296);
  }
  *(void *)(a1 + 304) = v7;
  if (!v5
    && v7 <= *(void *)(a1 + 296)
    && *(_DWORD *)(a1 + 272) < a3
    && *(_DWORD *)(a1 + 264) < *(_DWORD *)(a1 + 256))
  {
    return (unint64_t)(a2 - *(void *)(a1 + 328)) > *(void *)(a1 + 320);
  }

  return 1LL;
}

void sub_100253658(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4, int a5, int a6)
{
  unint64_t v10 = "ToSocket:";
  if (!a5) {
    unint64_t v10 = "ToStack:";
  }
  unint64_t v29 = v10;
  uint64_t v11 = (os_log_t *)&qword_1008F75F8;
  if (a3 <= 4 && a5 == 1)
  {
    if (a6)
    {
      int v12 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
        sub_100663C88(a3, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }

  char v35 = 0;
  int v28 = a3;
  if (a3)
  {
    unsigned int v19 = 0;
    uint64_t v20 = a3 - 1;
    if (a3 - 1 >= 0x3E9F) {
      uint64_t v20 = 16031LL;
    }
    uint64_t v21 = v20 + 1;
    unsigned int v22 = -1;
    int v23 = 449;
    do
    {
      sprintf(&v35, "%s%02x", &v35, *a2);
      if (a6) {
        unsigned int v22 = dword_1006BFAC0[(*a2 ^ v22)] ^ (v22 >> 8);
      }
      if (!(v23 + 450 * (v19 / 0x1C2)))
      {
        uint64_t v24 = v11;
        uint64_t v25 = *v11;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109634;
          *(_DWORD *)int v32 = a4;
          *(_WORD *)&v32[4] = 2080;
          *(void *)&v32[6] = v29;
          __int16 v33 = 2080;
          int v34 = &v35;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "SkwData:%05u:=%s %s ", buf, 0x1Cu);
        }

        char v35 = 0;
        uint64_t v11 = v24;
      }

      ++a2;
      --v23;
      ++v19;
      --v21;
    }

    while (v21);
  }

  else
  {
    unsigned int v22 = -1;
  }

  char v26 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109634;
    *(_DWORD *)int v32 = a4;
    *(_WORD *)&v32[4] = 2080;
    *(void *)&v32[6] = v29;
    __int16 v33 = 2080;
    int v34 = &v35;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "SkwData:%05u:=%s %s ", buf, 0x1Cu);
    char v26 = *v11;
  }

  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)int v32 = v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Got packet: size=%u  ", buf, 8u);
  }

  if (a6)
  {
    uint64_t v27 = *v11;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)int v32 = v29;
      *(_WORD *)&v32[8] = 1024;
      *(_DWORD *)&v32[10] = a4;
      __int16 v33 = 1024;
      LODWORD(v34) = v22;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%s:Seq=%02u CRC value:0x%08x  ", buf, 0x18u);
    }
  }

void sub_10025399C(void *context)
{
}

void sub_1002539BC(unsigned __int16 a1)
{
}

void sub_1002539D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    goto LABEL_27;
  }
  uint64_t v5 = a1 + 24;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
    BOOL v7 = v6 >= a2;
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }

  while (*v8);
  if (v5 != a1 + 24 && *(unsigned __int16 *)(v5 + 32) <= a2)
  {
    uint64_t v9 = *(void *)(v5 + 40);
    unint64_t v10 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Stack is ready for more data", buf, 2u);
    }

    if (*(void *)(v9 + 8))
    {
      uint64_t v11 = *(void *)(v9 + 24);
      if (v11)
      {
        int v12 = *(void (**)(void))(v11 + 16);
        if (v12) {
          v12(*(void *)(v11 + 24));
        }
      }
    }

    else if (sub_100253B40(a1, a2, v9))
    {
      uint64_t v13 = (os_log_s *)qword_1008F75F8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Starting the read source for the pipe",  v14,  2u);
      }

      sub_100254DCC(v9, 0);
    }
  }

  else
  {
LABEL_27:
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
      sub_100663CEC();
    }
  }

uint64_t sub_100253B40(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 224);
  unsigned int v78 = 0;
  unsigned int v68 = a2;
  uint64_t v66 = v5;
  if (!v5)
  {
    while (1)
    {
      *(void *)__int128 buf = v100;
      LODWORD(v94) = 2570;
      int v37 = *(_DWORD *)(a3 + 372);
      if (v37 == 2) {
        break;
      }
      if (v37 == 1)
      {
        else {
          int v46 = *(unsigned __int16 *)(a3 + 376);
        }
        LODWORD(v94) = v46;
        uint64_t v47 = qword_1008F75F8;
        if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT))
        {
          int v48 = *(_DWORD *)(a3 + 364);
          LODWORD(v96) = 67109376;
          DWORD1(v96) = v46;
          WORD4(v96) = 1024;
          *(_DWORD *)((char *)&v96 + 10) = v48;
          ssize_t v44 = (os_log_s *)v47;
          unint64_t v45 = "MAX buffer size for the L2CAP Channel is %d getWriteBufferUsed=%d";
LABEL_74:
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v45, (uint8_t *)&v96, 0xEu);
        }

        goto LABEL_75;
      }

      if (v37)
      {
        BOOL v39 = 0;
        int v38 = 0;
      }

      else
      {
        char v76 = 0;
        sub_100242CA4(&v76);
        int v38 = sub_100103190(*(void *)(a3 + 112), buf, (int *)&v94);
        sub_100242CD0(&v76);
        BOOL v39 = v38 == 0;
        if (v38)
        {
          uint64_t v40 = (os_log_s *)qword_1008F75F8;
          if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v96) = 67109632;
            DWORD1(v96) = a2;
            WORD4(v96) = 1024;
            *(_DWORD *)((char *)&v96 + 10) = v38;
            HIWORD(v96) = 1024;
            LODWORD(v97) = v94;
            _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "Failed to get a buffer from the stack for pipe 0x%04x with result %{bluetooth:OI_STATUS}u, default size %d",  (uint8_t *)&v96,  0x14u);
          }
        }

        sub_100242CD8(&v76);
      }

void sub_1002544F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

BOOL sub_100254534( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t *a6)
{
  *a6 = 0LL;
  while (1)
  {
    unsigned int v17 = 0;
    char v16 = 0;
    sub_100242CA4(&v16);
    int v11 = sub_100103084(*(void *)(a3 + 112), (int *)&v17);
    if (v11) {
      BOOL v12 = v11 == 5007;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      unsigned int v17 = 1015;
    }
    unsigned int v13 = v17 >= a5 - *a6 ? a5 - *a6 : v17;
    int v14 = sub_10008F3E4( (uint64_t)sub_10025399C,  *(__int128 **)(a3 + 112),  a2,  (char *)(a4 + *a6),  (unsigned __int16)v13,  0);
    sub_100242CD0(&v16);
    *a6 += v13;
    if (v14 != 412) {
      break;
    }
    sub_100242CD8(&v16);
    if (*a6 >= a5) {
      return v14 == 412;
    }
  }

  if (v14 && os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
    sub_100663F24();
  }
  sub_100242CD8(&v16);
  return v14 == 412;
}

void sub_100254674( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12)
{
}

void *sub_100254688(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 364);
  if (v3 + a3 > *(unsigned int *)(a1 + 360))
  {
    uint64_t v7 = sub_1002E6E00();
    sub_1004FC128(v7, 1);
    uint64_t v8 = _os_log_pack_size(12LL);
    uint64_t v10 = (char *)&v15 - ((__chkstk_darwin(v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    int v11 = __error();
    uint64_t v12 = _os_log_pack_fill(v10, v8, *v11, &_mh_execute_header, "Assertion failed: %{public}s");
    *(_DWORD *)uint64_t v12 = 136446210;
    *(void *)(v12 + 4) = "fWriteBufferUsed + length <= fWriteBufferSize";
    os_log_t v13 = os_log_create("com.apple.bluetooth", "CBCrash");
    if (v13) {
      os_log_t v14 = v13;
    }
    else {
      os_log_t v14 = (os_log_t)&_os_log_default;
    }
    qword_1008D9DB8 = os_log_pack_send_and_compose(v10, v14, 16LL, 0LL, 0LL);
    abort_with_payload(18LL, 2LL, v10, v8, qword_1008D9DB8, 0LL);
  }

  int v4 = a3;
  uint64_t result = memcpy((void *)(*(void *)(a1 + 352) + v3), a2, a3);
  *(_DWORD *)(a1 + 364) += v4;
  return result;
}

void *sub_1002547DC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 364);
  if (v2 < a2)
  {
    uint64_t v6 = sub_1002E6E00();
    sub_1004FC128(v6, 1);
    uint64_t v7 = _os_log_pack_size(12LL);
    uint64_t v9 = (char *)&v14 - ((__chkstk_darwin(v7, v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v10 = __error();
    uint64_t v11 = _os_log_pack_fill(v9, v7, *v10, &_mh_execute_header, "Assertion failed: %{public}s");
    *(_DWORD *)uint64_t v11 = 136446210;
    *(void *)(v11 + 4) = "fWriteBufferUsed >= length";
    os_log_t v12 = os_log_create("com.apple.bluetooth", "CBCrash");
    if (v12) {
      os_log_t v13 = v12;
    }
    else {
      os_log_t v13 = (os_log_t)&_os_log_default;
    }
    qword_1008D9DB8 = os_log_pack_send_and_compose(v9, v13, 16LL, 0LL, 0LL);
    abort_with_payload(18LL, 2LL, v9, v7, qword_1008D9DB8, 0LL);
  }

  int v3 = a2;
  uint64_t result = memmove(*(void **)(a1 + 352), (const void *)(*(void *)(a1 + 352) + a2), v2 - a2);
  *(_DWORD *)(a1 + 364) -= v3;
  return result;
}

void sub_100254928(uint64_t a1)
{
  char v1 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100254980;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_sync(v1, block);
}

_BYTE *sub_100254980(_BYTE *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(_BYTE *)(v1 + 136))
  {
    *(_BYTE *)(v1 + 136) = 0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_ERROR)) {
      sub_100663F9C();
    }
    char v2 = 0;
    sub_100242CA4(&v2);
    return sub_100242CD8(&v2);
  }

  return result;
}

uint64_t sub_1002549F0(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 40) = 0LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 112) = a3;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = a5;
  *(void *)(a1 + 192) = a6;
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a7;
  uuid_clear((unsigned __int8 *)(a1 + 208));
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 336) = 0LL;
  *(_DWORD *)(a1 + 368) = a8;
  *(_DWORD *)(a1 + 372) = a2;
  *(_BYTE *)(a1 + 378) = 0;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 392) = 0LL;
  uuid_clear((unsigned __int8 *)(a1 + 400));
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 360) = 0LL;
  return a1;
}

void sub_100254A80(_Unwind_Exception *a1)
{
}

uint64_t sub_100254A98( uint64_t a1, int a2, uint64_t a3, unsigned __int8 *src, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, char a13)
{
  *(_BYTE *)a1 = a13;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 112) = a3;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = a7;
  *(void *)(a1 + 192) = a8;
  *(_DWORD *)(a1 + 200) = a6;
  *(_DWORD *)(a1 + 204) = a6;
  uuid_copy((unsigned __int8 *)(a1 + 208), src);
  *(void *)(a1 + 224) = a5;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(void *)(a1 + 2sub_100242FAC(v1 - 64) = 0LL;
  *(_DWORD *)(a1 + 276) = 0;
  *(void *)(a1 + 288) = 0LL;
  *(void *)(a1 + 304) = 0LL;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 336) = a9;
  *(_BYTE *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = a12;
  *(_DWORD *)(a1 + 372) = a2;
  *(_BYTE *)(a1 + 378) = 0;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 392) = 0LL;
  uuid_clear((unsigned __int8 *)(a1 + 400));
  int v16 = *(_DWORD *)(a1 + 368);
  dispatch_set_context(*(dispatch_object_t *)(a1 + 336), (void *)a1);
  if (a5)
  {
    uint64_t v17 = os_channel_ring_id(a5, 0LL);
    *(void *)(a1 + 232) = os_channel_tx_ring(a5, v17);
    uint64_t v18 = os_channel_ring_id(a5, 2LL);
    *(void *)(a1 + 240) = os_channel_rx_ring(a5, v18);
  }

  *(void *)(a1 + 320) = 250000000LL;
  *(uint32x2_t *)(a1 + 256) = vshr_n_u32(*(uint32x2_t *)(a1 + 248), 1uLL);
  if (v16 == 3) {
    size_t v19 = 675LL;
  }
  else {
    size_t v19 = 4096LL;
  }
  *(_DWORD *)(a1 + 272) = 2496;
  *(void *)(a1 + 296) = 20000000LL;
  *(_DWORD *)(a1 + 2sub_100242FAC(v40 - 80) = 2;
  *(_DWORD *)(a1 + 312) = 2;
  *(void *)(a1 + 352) = malloc(v19);
  *(_DWORD *)(a1 + 360) = v19;
  *(_DWORD *)(a1 + 3sub_100242FAC(v1 - 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + sub_100242FAC(v1 - 64) = 0u;
  *(_OWORD *)(a1 + sub_100242FAC(v40 - 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 108) = 1;
  *(void *)(a1 + 8) = 0LL;
  return a1;
}

void sub_100254C10(_Unwind_Exception *a1)
{
}

uint64_t sub_100254C2C(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    NRBluetoothPacketParserResetContext();
    *(void *)(a1 + 8) = 0LL;
  }

  char v2 = *(dispatch_source_s **)(a1 + 184);
  if (v2)
  {
    dispatch_source_cancel(v2);
    if (*(_BYTE *)(a1 + 120)) {
      dispatch_resume(*(dispatch_object_t *)(a1 + 184));
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 184));
  }

  int v3 = *(dispatch_source_s **)(a1 + 192);
  if (v3)
  {
    dispatch_source_cancel(v3);
    if (!*(void *)(a1 + 168)) {
      dispatch_resume(*(dispatch_object_t *)(a1 + 192));
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 192));
  }

  int v4 = *(dispatch_object_s **)(a1 + 336);
  if (v4)
  {
    dispatch_set_context(v4, 0LL);
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 336));
    if (!*(_BYTE *)(a1 + 344))
    {
      *(_BYTE *)(a1 + 344) = 1;
      dispatch_resume(*(dispatch_object_t *)(a1 + 336));
    }

    dispatch_release(*(dispatch_object_t *)(a1 + 336));
    *(_BYTE *)(a1 + 344) = 0;
    *(void *)(a1 + 336) = 0LL;
  }

  if (*(void *)(a1 + 224))
  {
    *(_OWORD *)(a1 + 268) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(void *)(a1 + 296) = 0LL;
    *(void *)(a1 + 304) = 0LL;
    *(void *)(a1 + 288) = 0LL;
    *(_DWORD *)(a1 + 312) = 0;
    *(void *)(a1 + 320) = 0LL;
    *(void *)(a1 + 328) = 0LL;
  }

  else
  {
    int v5 = *(_DWORD *)(a1 + 204);
    if (v5 != -1)
    {
      close(v5);
      *(_DWORD *)(a1 + 204) = -1;
    }
  }

  while (*(void *)(a1 + 168))
  {
    *(int64x2_t *)(a1 + 160) = vaddq_s64(*(int64x2_t *)(a1 + 160), (int64x2_t)xmmword_1006BFA70);
    sub_100254FCC(a1 + 128, 1);
  }

  uint64_t v6 = *(void **)(a1 + 352);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 352) = 0LL;
  }

  sub_1002400EC((void *)(a1 + 128));
  return a1;
}

void sub_100254DB4(_Unwind_Exception *a1)
{
}

void sub_100254DCC(uint64_t a1, int a2)
{
  char v2 = a2;
  if (*(unsigned __int8 *)(a1 + 120) == a2)
  {
    int v4 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_FAULT)) {
      sub_100663FC8(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  *(_BYTE *)(a1 + 120) = v2;
  if ((v2 & 1) != 0)
  {
    os_log_t v12 = (os_log_s *)qword_1008F75F8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Read Source Suspend", v21, 2u);
    }

    dispatch_suspend(*(dispatch_object_t *)(a1 + 184));
    *(void *)uint64_t v21 = 0LL;
    sub_1000B0400((uint64_t)v21);
    uint64_t v13 = *(__int16 *)&v21[4];
    *(void *)(a1 + 384) = *(int *)v21;
    *(void *)(a1 + 392) = v13;
  }

  else
  {
    *(void *)uint64_t v21 = 0LL;
    sub_1000B0400((uint64_t)v21);
    unint64_t v14 = 1000 * (*(int *)v21 - *(void *)(a1 + 384)) - *(void *)(a1 + 392) + *(__int16 *)&v21[4];
    unint64_t v15 = v14 >> 3;
    unint64_t v16 = v14 / 0x3E8;
    unint64_t v17 = v14 % 0x3E8;
    dispatch_resume(*(dispatch_object_t *)(a1 + 184));
    uint64_t v18 = qword_1008F75F8;
    if (v15 < 0x271)
    {
      if (!os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_INFO)) {
        return;
      }
      *(_DWORD *)uint64_t v21 = 134218240;
      *(void *)&v21[4] = v16;
      __int16 v22 = 2048;
      unint64_t v23 = v17;
      size_t v19 = (os_log_s *)v18;
      os_log_type_t v20 = OS_LOG_TYPE_INFO;
    }

    else
    {
      if (!os_log_type_enabled((os_log_t)qword_1008F75F8, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)uint64_t v21 = 134218240;
      *(void *)&v21[4] = v16;
      __int16 v22 = 2048;
      unint64_t v23 = v17;
      size_t v19 = (os_log_s *)v18;
      os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
    }

    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Read Source Resume.  Suspended for %lld.%03lld seconds",  v21,  0x16u);
  }

uint64_t sub_100254FCC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 512LL;
  }

  return v4 ^ 1u;
}

void sub_100255028(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_100255058(_Unwind_Exception *a1)
{
}

void sub_10025506C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10025506C(a1, *a2);
    sub_10025506C(a1, a2[1]);
    sub_10023BF24((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }

uint64_t **sub_1002550B8(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((void *)v11 + 5) = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t **sub_100255178(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_WORD *)v11 + 16) = 0;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t *sub_100255238( uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0LL;
  uint64_t v6 = (uint64_t **)sub_1001FD824((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1002552D8((uint64_t)a1, a4, v8);
    sub_100029630(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }

  return result;
}

void sub_1002552D8( uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v6 = (unsigned __int8 *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0LL;
  *((_WORD *)v6 + 28) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_10025533C(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_100255354(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 18) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 108) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 28) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 58) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_10025545C(_Unwind_Exception *a1)
{
}

uint64_t sub_100255470(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }

  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0LL;
  }
  sub_1001FDBCC((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1LL;
}

uint64_t *sub_1002554E8(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[7] = 0LL;
    v11[6] = 0LL;
    void v11[4] = v12;
    void v11[5] = (uint64_t)(v11 + 6);
    sub_100029630(a1, (uint64_t)v9, v7, v11);
    return v11;
  }

  return (uint64_t *)v9;
}

uint64_t *sub_1002555B0(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  BOOL v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        BOOL v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        BOOL v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_100029630(a1, (uint64_t)v8, v6, v10);
    return v10;
  }

  return (uint64_t *)v8;
}

void sub_100255668(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_100255698(_Unwind_Exception *a1)
{
}

void sub_1002556AC(id a1)
{
  uint64_t v1 = operator new(0x18uLL);
  *(void *)uint64_t v1 = 0LL;
  v1[2] = 0;
  *((_BYTE *)v1 + 12) = 0;
  v1[4] = 0;
  qword_1008D9058 = (uint64_t)v1;
}

void sub_1002556DC(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100255760(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100255760(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_100008BA0(v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100255A28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100255A74( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_100255AA0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100255AE8(uint64_t a1, char *a2)
{
  uint64_t v3 = sub_10024324C(a1, a2, 1);
  *(void *)uint64_t v3 = off_100889B68;
  *(_BYTE *)(v3 + 96) = 0;
  mach_timebase_info((mach_timebase_info_t)(v3 + 100));
  unint64_t v4 = 20000000 * (unint64_t)*(unsigned int *)(a1 + 104) / *(unsigned int *)(a1 + 100);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 120) = v4;
  return a1;
}

void sub_100255B40(_Unwind_Exception *a1)
{
}

unint64_t sub_100255B60(uint64_t a1, uint64_t a2)
{
  return (unint64_t)*(unsigned int *)(a1 + 100) * a2 / *(unsigned int *)(a1 + 104) / 0xF4240;
}

void sub_100255B88(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AudioSendThread starting", buf, 2u);
  }

  sub_100243370(a1, 63);
  (*(void (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
  char v12 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "DisableDiagnosingLoop");
  int v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v3 + 72LL))(v3, buf, __p, &v12);
  if (v12) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0)
  {
    operator delete(*(void **)buf);
    if (!v5) {
      goto LABEL_14;
    }
  }

  else if (!v5)
  {
    goto LABEL_14;
  }

  uint64_t v6 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "DiagnosingAudioLoop for A2DP disabled by defaults write -  No AudioSendThread overwait / overrun reporting",  buf,  2u);
  }

void sub_100255D18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100255D4C(uint64_t a1, int a2)
{
  uint64_t v4 = mach_absolute_time();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
  if ((_DWORD)result)
  {
    do
    {
      if (a2)
      {
        if (*(_BYTE *)(a1 + 96))
        {
          uint64_t v6 = v4;
        }

        else
        {
          uint64_t v6 = mach_absolute_time();
          if (v6 >= *(void *)(a1 + 112) + v4)
          {
            uint64_t v7 = (os_log_s *)qword_1008F7570;
            uint64_t v8 = v6 - v4;
            if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
            {
              unint64_t v14 = v8 * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240;
              *(_DWORD *)__int128 buf = 67109120;
              int v16 = v14;
              _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "AudioSendThread overrun (%u ms)",  buf,  8u);
            }

            kdebug_trace( 730022148LL,  v8 * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240,  0LL,  0LL,  0LL);
          }
        }

        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
        uint64_t v10 = mach_absolute_time();
        uint64_t v4 = v10;
        if (*(_BYTE *)(a1 + 96)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 56LL))( a1,  (v10 - v6) * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240);
        }
        if (v4 >= v9 + v6 + *(void *)(a1 + 120))
        {
          char v11 = (os_log_s *)qword_1008F7570;
          uint64_t v12 = v4 - v6;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
          {
            unint64_t v13 = v12 * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240;
            *(_DWORD *)__int128 buf = 67109120;
            int v16 = v13;
            _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "AudioSendThread overwait (%u ms)",  buf,  8u);
          }

          kdebug_trace( 730022152LL,  v12 * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240,  0LL,  0LL,  0LL);
        }
      }

      else
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
      }

      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
    }

    while ((result & 1) != 0);
  }

  return result;
}

uint64_t sub_100255FBC(uint64_t a1, char *a2)
{
  uint64_t result = sub_100255AE8(a1, a2);
  *(void *)uint64_t result = off_100889BE0;
  *(_BYTE *)(result + 144) = 0;
  return result;
}

BOOL sub_100255FE0(uint64_t a1)
{
  *(void *)(a1 + 128) = mach_absolute_time();
  unint64_t v2 = 1000
     * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1)
  *(void *)(a1 + 136) = v2;
  *(_BYTE *)(a1 + 144) = 1;
  if (HIDWORD(v2))
  {
    uint64_t v3 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT))
    {
      int v5 = 136446210;
      uint64_t v6 = "fAudioInterval <= UINT32_MAX";
      _os_log_fault_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&v5,  0xCu);
      unint64_t v2 = *(void *)(a1 + 136);
    }
  }

  return sub_100243368(a1, v2, v2 >> 2, v2 >> 2, 0);
}

uint64_t sub_1002560F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128) + *(void *)(a1 + 136);
  *(void *)(a1 + 128) = v2;
  mach_wait_until(v2);
  return *(void *)(a1 + 136);
}

uint64_t sub_100256120(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

void sub_100256128(uint64_t a1, char a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setThreadStarted", v5, 2u);
  }

  *(_BYTE *)(a1 + 144) = a2;
}

uint64_t sub_1002561A0(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = sub_100255AE8(a1, a2);
  *(void *)uint64_t v5 = off_100889C58;
  *(_BYTE *)(v5 + 144) = 0;
  *(_BYTE *)(v5 + 168) = a3;
  if (a3) {
    *(void *)(a1 + 152) = dispatch_semaphore_create(0LL);
  }
  return a1;
}

uint64_t sub_1002561EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 168);
}

uint64_t sub_1002561F4(uint64_t a1)
{
  *(void *)a1 = off_100889C58;
  if (*(_BYTE *)(a1 + 168)) {
    dispatch_release(*(dispatch_object_t *)(a1 + 152));
  }
  return sub_100243298(a1);
}

uint64_t sub_100256238(uint64_t a1)
{
  *(void *)(a1 + 128) = mach_absolute_time();
  unint64_t v2 = 1000
     * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1)
  *(void *)(a1 + 136) = v2;
  *(_BYTE *)(a1 + 144) = 1;
  if (HIDWORD(v2))
  {
    uint64_t v3 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT))
    {
      int v5 = 136446210;
      uint64_t v6 = "fAudioInterval <= UINT32_MAX";
      _os_log_fault_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&v5,  0xCu);
      unint64_t v2 = *(void *)(a1 + 136);
    }
  }

  sub_100243368(a1, v2, v2 >> 2, v2 >> 2, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
  *(void *)(a1 + 160) = 1000 * result * (unint64_t)*(unsigned int *)(a1 + 104) / *(unsigned int *)(a1 + 100);
  if (*(_BYTE *)(a1 + 168)) {
    return sub_100256380(a1);
  }
  return result;
}

uint64_t sub_100256380(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 168))
  {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 152), 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v2 = a1 + 160;
  }

  else
  {
    uint64_t v2 = a1 + 136;
    uint64_t v3 = *(void *)(a1 + 128) + *(void *)(a1 + 136);
    *(void *)(v2 - 8) = v3;
    mach_wait_until(v3);
  }

  return *(void *)v2;
}

uint64_t sub_1002563D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

void sub_1002563D8(uint64_t a1, char a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setThreadStarted", v5, 2u);
  }

  *(_BYTE *)(a1 + 144) = a2;
}

uint64_t sub_100256450(uint64_t result)
{
  if (*(_BYTE *)(result + 168)) {
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(result + 152));
  }
  return result;
}

uint64_t sub_100256470()
{
  return 0LL;
}

void sub_100256518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002565BC(uint64_t a1)
{
  *(void *)a1 = off_100889CD0;
  *(void *)(a1 + 8) = off_100889D78;
  *(void *)(a1 + 16) = &off_100889DA8;
  *(void *)(a1 + 24) = off_100889DC0;
  *(void *)(a1 + 32) = &off_100889E18;
  *(void *)(a1 + 40) = off_100889E30;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 54) = 1;
  *(void *)(a1 + 56) = 0LL;
  *(_DWORD *)(a1 + sub_100242FAC(v1 - 64) = 10;
  *(_DWORD *)(a1 + 68) = 134742017;
  *(void *)(a1 + 72) = 0LL;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + sub_100242FAC(v40 - 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 135) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(_BYTE *)(a1 + 143) = 1;
  *(void *)(a1 + 144) = 0x800000000LL;
  *(_DWORD *)(a1 + 152) = 8;
  *(_WORD *)(a1 + 156) = -1;
  *(_BYTE *)(a1 + 158) = -1;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 1sub_100242FAC(v1 - 64) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0LL;
  *(_DWORD *)(a1 + 224) = 21;
  *(_BYTE *)(a1 + 228) = 0;
  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  uint64_t v2 = (void *)(a1 + 240);
  *(void *)(a1 + 232) = a1 + 240;
  uint64_t v3 = (void *)(a1 + 232);
  *(_DWORD *)(a1 + 259) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 263) = xmmword_1006BFEE0;
  *(_WORD *)(a1 + 279) = 1280;
  sub_10023BF24(a1 + 232, 0LL);
  void *v3 = v2;
  *(void *)(a1 + 248) = 0LL;
  *uint64_t v2 = 0LL;
  sub_100256754(a1);
  *(void *)(a1 + sub_100242FAC(v40 - 80) = *(void *)(a1 + 72);
  return a1;
}

void sub_100256718(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  sub_10023BF24(v2, *v5);
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 120) = v8;
    operator delete(v8);
  }

  uint64_t v9 = *v4;
  if (*v4)
  {
    *(void *)(v1 + sub_100242FAC(v40 - 80) = v9;
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

void sub_100256754(uint64_t a1)
{
  if (_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD"))
  {
    uint64_t v2 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Warning: BandSwitchManager: CoreWifi Defaults right Figaro5GTDD is enabled",  buf,  2u);
    }
  }

  char v29 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "Filippo");
  sub_10002418C(__p, "ForceISM24");
  int v4 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v3 + 72LL))(v3, buf, __p, &v29);
  if (v29) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if ((v31 & 0x80000000) == 0)
  {
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  operator delete(*(void **)buf);
  if (v5) {
LABEL_11:
  }
    *(_DWORD *)(a1 + 152) = 0;
LABEL_12:
  uint64_t v6 = sub_1002E6E00();
  sub_10002418C(buf, "Filippo");
  sub_10002418C(__p, "ForceUnii1");
  int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v6 + 72LL))(v6, buf, __p, &v29);
  if (v29) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v8) {
      goto LABEL_19;
    }
  }

  else if (v8)
  {
LABEL_19:
    unsigned int v9 = 1;
    goto LABEL_68;
  }

  uint64_t v10 = sub_1002E6E00();
  sub_10002418C(buf, "Filippo");
  sub_10002418C(__p, "ForceUnii3");
  int v11 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v10 + 72LL))(v10, buf, __p, &v29);
  if (v29) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v12) {
      goto LABEL_30;
    }
  }

  else if (v12)
  {
LABEL_30:
    unsigned int v9 = 2;
    goto LABEL_68;
  }

  uint64_t v13 = sub_1002E6E00();
  sub_10002418C(buf, "Filippo");
  sub_10002418C(__p, "ForceUnii5a");
  int v14 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v13 + 72LL))(v13, buf, __p, &v29);
  if (v29) {
    int v15 = v14;
  }
  else {
    int v15 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v15) {
      goto LABEL_39;
    }
  }

  else if (v15)
  {
LABEL_39:
    unsigned int v9 = 4;
    goto LABEL_68;
  }

  uint64_t v16 = sub_1002E6E00();
  sub_10002418C(buf, "Filippo");
  sub_10002418C(__p, "ForceUnii5b");
  int v17 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v16 + 72LL))(v16, buf, __p, &v29);
  if (v29) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v18) {
      goto LABEL_48;
    }
  }

  else if (v18)
  {
LABEL_48:
    unsigned int v9 = 5;
    goto LABEL_68;
  }

  uint64_t v19 = sub_1002E6E00();
  sub_10002418C(buf, "Filippo");
  sub_10002418C(__p, "ForceUnii5c");
  int v20 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v19 + 72LL))(v19, buf, __p, &v29);
  if (v29) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(*(void **)buf);
  }
  if (v21)
  {
    unsigned int v9 = 6;
  }

  else
  {
    uint64_t v22 = sub_1002E6E00();
    sub_10002418C(buf, "Filippo");
    sub_10002418C(__p, "ForceUnii5d");
    int v23 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v22 + 72LL))(v22, buf, __p, &v29);
    if (v29) {
      int v24 = v23;
    }
    else {
      int v24 = 0;
    }
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v31 < 0) {
      operator delete(*(void **)buf);
    }
    if (!v24)
    {
      unsigned int v9 = *(_DWORD *)(a1 + 152);
      if (v9 == 8) {
        return;
      }
      goto LABEL_69;
    }

    unsigned int v9 = 7;
  }

void sub_100256C04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100256C74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "void BT::BandSwitchManager::addEventListener(BandSwitchManagerListener *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v3, 0xCu);
  }

void sub_100256D20(uint64_t a1, uint64_t a2)
{
  int v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_10025CB64(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100256DA8(os_unfair_lock_s *a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100256F44;
  v3[3] = &unk_100889E50;
  char v4 = a2;
  sub_100256E88(a1 + 26, v3);
  uint64_t v2 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v6 = "virtual void BT::BandSwitchManager::notifyHRBEnabled(BOOL)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }

void sub_100256E88(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  int v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  char v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    char v4 = v5;
  }

  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100256F1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100256F44(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 8LL))(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_100256F5C(os_unfair_lock_s *a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10025703C;
  v3[3] = &unk_100889E70;
  void v3[4] = a2;
  sub_100256E88(a1 + 26, v3);
  uint64_t v2 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    int v5 = "virtual void BT::BandSwitchManager::notifyBandSwitched(Device *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }

uint64_t sub_10025703C(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32));
}

void sub_100257054(uint64_t a1)
{
  if (sub_1002571CC())
  {
    uint64_t v2 = sub_1002E90E4();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 48LL))(v2, a1 + 16);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100889E90);
    }
    sub_10000876C((uint64_t)off_1008D5F48 + 240, a1 + 40);
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_100889EB0);
    }
    sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 8);
    uint64_t v3 = sub_1002E8EE8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 128LL))(v3, a1 + 24);
    uint64_t v4 = sub_1002E8D54();
    sub_1001FCB98(v4 + 288, a1 + 32);
    if ((_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD") & 1) == 0)
    {
      uint64_t v5 = sub_100404EB8();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      _DWORD v8[2] = sub_1002572A4;
      v8[3] = &unk_10087EB20;
      v8[4] = a1;
      sub_100405384(v5, v8);
    }
  }

  else
  {
    uint64_t v6 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Did not init as Chipset isn't supported",  v7,  2u);
    }
  }

uint64_t sub_1002571CC()
{
  char v7 = 0;
  uint64_t v0 = sub_1002E6E00();
  sub_10002418C(v5, "Device");
  sub_10002418C(__p, "EnableHRB");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v0 + 72LL))(v0, v5, __p, &v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v1 = sub_1002E6E9C();
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2480LL))(v1);
  if (v7) {
    return 1LL;
  }
  else {
    return result;
  }
}

void sub_100257270( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002572A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int16 v8 = 0;
  __int16 v7 = 0;
  char v6 = 0;
  int v5 = 0;
  uint64_t v2 = sub_1002E8D54();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(void *)v2 + 48LL))( v2,  (char *)&v8 + 1,  &v8,  (char *)&v7 + 1,  &v7,  &v6,  &v5);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(v1 + 160) = v7;
    if (HIBYTE(v8))
    {
      int v4 = 1;
    }

    else if ((_BYTE)v8)
    {
      int v4 = 2;
    }

    else
    {
      if (!HIBYTE(v7))
      {
        *(_DWORD *)(v1 + 1sub_100242FAC(v1 - 64) = 0;
        return result;
      }

      int v4 = 3;
    }

    *(_DWORD *)(v1 + 1sub_100242FAC(v1 - 64) = v4;
  }

  return result;
}

void sub_100257344(uint64_t a1)
{
  uint64_t v2 = sub_100404EB8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10025A730;
  v5[3] = &unk_10087EB68;
  v5[4] = a1;
  int v6 = 0;
  sub_100405384(v2, v5);
  uint64_t v3 = sub_100404EB8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002573DC;
  void v4[3] = &unk_10087EB20;
  v4[4] = a1;
  sub_100405384(v3, v4);
}

void sub_1002573DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Update Bands after Stack Start",  (uint8_t *)v4,  2u);
  }

  uint64_t v3 = sub_100404EB8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10025A730;
  void v4[3] = &unk_10087EB68;
  v4[4] = v1;
  int v5 = 3;
  sub_100405384(v3, v4);
}

void sub_100257488(uint64_t a1)
{
}

void sub_100257490(uint64_t a1)
{
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10025A730;
  v3[3] = &unk_10087EB68;
  void v3[4] = a1;
  int v4 = 1;
  sub_100405384(v2, v3);
}

void sub_1002574F8(uint64_t a1)
{
}

const char *sub_100257500(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x15) {
    return "BandSwitchManager: Unknown BSM Event";
  }
  else {
    return off_100889ED0[a2];
  }
}

uint64_t sub_100257524(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315138;
    int v12 = "BOOL BT::BandSwitchManager::BSMHRBEnablementConditionsMet()";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Entering %s",  (uint8_t *)&v11,  0xCu);
  }

  sub_10025778C(a1);
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3 || !*(_BYTE *)(a1 + 52) || !*(_BYTE *)(a1 + 53) || *(_BYTE *)(a1 + 54))
  {
    int v4 = (os_log_s *)qword_1008F76F8;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (!v5) {
      return result;
    }
    LOWORD(v11) = 0;
    __int16 v7 = "BandSwitchManager: BSM isn't ready to enable HRB yet";
    goto LABEL_9;
  }

  if (*(_BYTE *)(a1 + 144))
  {
    __int16 v8 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning: BandSwitchManager: HRB conditions met by overriding, due to defaults rights flag forceHRB being set!",  (uint8_t *)&v11,  2u);
    }

    *(_BYTE *)(a1 + 69) = *(_DWORD *)(a1 + 152);
    return 1LL;
  }

  if (*(_BYTE *)(v3 + 1372)
    && *(_BYTE *)(v3 + 1374)
    && !*(_BYTE *)(a1 + 136)
    && *(unsigned __int8 *)(a1 + 68) >= 2u
    && *(_BYTE *)(a1 + 69)
    && *(_BYTE *)(a1 + 143)
    && !*(_BYTE *)(a1 + 142)
    && !*(_BYTE *)(a1 + 137)
    && !*(_BYTE *)(a1 + 141)
    && !*(_BYTE *)(a1 + 138)
    && !*(_BYTE *)(a1 + 139)
    && *(_BYTE *)(a1 + 145)
    && !*(_BYTE *)(a1 + 140)
    && (*(_DWORD *)(a1 + 164) < 2u || !*(_BYTE *)(a1 + 160)))
  {
    uint64_t v10 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: HRB conditions met",  (uint8_t *)&v11,  2u);
    }

    return 1LL;
  }

  int v4 = (os_log_s *)qword_1008F76F8;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v9)
  {
    LOWORD(v11) = 0;
    __int16 v7 = "BandSwitchManager: HRB conditions are not met";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, 2u);
    return 0LL;
  }

  return result;
}

void sub_10025778C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "---------- BandSwitchManager START DUMP STATE ----------",  (uint8_t *)&buf,  2u);
  }

  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = (os_log_s *)qword_1008F76F8;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (!v5) {
      goto LABEL_26;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    uint64_t v10 = "BandSwitchManager: Device is NULL";
    int v11 = v4;
    uint32_t v12 = 2;
    goto LABEL_25;
  }

  if (v5)
  {
    sub_1003CF00C(v3, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::stringbuf::string_type buf = &buf;
    }
    else {
      p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)unint64_t v46 = 136446210;
    uint64_t v47 = p_buf;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Device                     : %{public}s",  v46,  0xCu);
    int v4 = (os_log_s *)qword_1008F76F8;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 1372LL);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "AoS State                  : %d",  (uint8_t *)&buf,  8u);
    int v4 = (os_log_s *)qword_1008F76F8;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1 + 56) + 1374LL)) {
      __int16 v8 = "Yes";
    }
    else {
      __int16 v8 = "No";
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "AllowedBandSet             : %s",  (uint8_t *)&buf,  0xCu);
    int v4 = (os_log_s *)qword_1008F76F8;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1 + 56) + 1373LL)) {
      BOOL v9 = "HRB";
    }
    else {
      BOOL v9 = "2.4Ghz";
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    uint64_t v10 = "CurrentFrequency           : %s";
    int v11 = v4;
    uint32_t v12 = 12;
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&buf, v12);
  }

uint64_t sub_1002582F4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315138;
    BOOL v9 = "BOOL BT::BandSwitchManager::BSMHRBDebounceConditionsMet()";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Entering %s",  (uint8_t *)&v8,  0xCu);
  }

  sub_10025778C(a1);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 && *(_BYTE *)(v3 + 1372) && !*(_BYTE *)(v3 + 1373))
  {
    int v7 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: HRB Debounce conditions met",  (uint8_t *)&v8,  2u);
    }

    return 1LL;
  }

  else
  {
    int v4 = (os_log_s *)qword_1008F76F8;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v5)
    {
      LOWORD(v8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: HRB Debounce conditions are not met",  (uint8_t *)&v8,  2u);
      return 0LL;
    }
  }

  return result;
}

void sub_100258450(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  uint64_t v3 = (os_log_s *)qword_1008F76F8;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (!v4) {
      return;
    }
    *(_WORD *)std::stringbuf::string_type buf = 0;
    int v16 = "BandSwitchManager: No Metrics to display";
    goto LABEL_27;
  }

  if (v4)
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "---------- BandSwitchManager START DUMP LAST SESSION METRICS ----------",  buf,  2u);
    uint64_t v3 = (os_log_s *)qword_1008F76F8;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    LODWORD(v18) = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Session PID                : 0x%X", buf, 8u);
    uint64_t v3 = (os_log_s *)qword_1008F76F8;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(const char **)(a1 + 192);
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Session Duration           : %llu", buf, 0xCu);
    uint64_t v3 = (os_log_s *)qword_1008F76F8;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(const char **)(a1 + 208);
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    int v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HRB Duration                : %llu", buf, 0xCu);
    uint64_t v3 = (os_log_s *)qword_1008F76F8;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a1 + 228);
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    LODWORD(v18) = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Band Code                  : 0x%X", buf, 8u);
    uint64_t v3 = (os_log_s *)qword_1008F76F8;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Downswitch Reason", buf, 2u);
    uint64_t v3 = (os_log_s *)qword_1008F76F8;
  }

  BOOL v9 = *(void **)(a1 + 232);
  if (v9 != (void *)(a1 + 240))
  {
    do
    {
      BOOL v10 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        int v11 = sub_100257500(v10, *((_DWORD *)v9 + 7));
        int v12 = *((unsigned __int16 *)v9 + 16);
        *(_DWORD *)std::stringbuf::string_type buf = 136315394;
        int v18 = v11;
        __int16 v19 = 1024;
        int v20 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s                         : %d",  buf,  0x12u);
        uint64_t v3 = (os_log_s *)qword_1008F76F8;
      }

      uint64_t v13 = (void *)v9[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          uint64_t v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          int v14 = (void *)v9[2];
          BOOL v15 = *v14 == (void)v9;
          BOOL v9 = v14;
        }

        while (!v15);
      }

      BOOL v9 = v14;
    }

    while (v14 != (void *)(a1 + 240));
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    int v16 = "---------- BandSwitchManager END DUMP LAST SESSION METRICS ----------";
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
  }

uint64_t sub_100258778(uint64_t a1, unsigned int a2)
{
  switch(a2)
  {
    case 0u:
      unsigned int v4 = *(_DWORD *)(a1 + 48);
      if (v4) {
        goto LABEL_5;
      }
      return 0LL;
    case 1u:
      unsigned int v4 = *(_DWORD *)(a1 + 48);
LABEL_5:
      if (v4 > 4 || ((1 << v4) & 0x19) == 0) {
        goto LABEL_18;
      }
      int v7 = (os_log_s *)qword_1008F76F8;
      if (!os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      int v8 = "Unknown BSM State";
      BOOL v9 = "Unknown BSM State";
      if (v4 <= 4) {
        BOOL v9 = off_100889FF8[v4];
      }
      if (a2 == 1) {
        int v8 = "BSM_STATE_IDLE";
      }
      if (!a2) {
        int v8 = "BSM_STATE_OFF";
      }
      int v15 = 136446466;
      int v16 = v9;
      __int16 v17 = 2082;
      int v18 = v8;
      goto LABEL_44;
    case 2u:
      unsigned int v4 = *(_DWORD *)(a1 + 48);
LABEL_18:
      if (v4 != 1) {
        goto LABEL_23;
      }
      int v7 = (os_log_s *)qword_1008F76F8;
      if (!os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      if (a2 > 2) {
        BOOL v10 = "Unknown BSM State";
      }
      else {
        BOOL v10 = off_100889FC0[a2];
      }
      int v15 = 136446466;
      int v16 = "BSM_STATE_IDLE";
      __int16 v17 = 2082;
      int v18 = v10;
      goto LABEL_44;
    case 3u:
      unsigned int v4 = *(_DWORD *)(a1 + 48);
LABEL_23:
      if (v4 != 2) {
        goto LABEL_28;
      }
      int v7 = (os_log_s *)qword_1008F76F8;
      if (!os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      if (a2 > 3) {
        int v11 = "Unknown BSM State";
      }
      else {
        int v11 = off_100889FD8[a2];
      }
      int v15 = 136446466;
      int v16 = "BSM_STATE_ANALYZE";
      __int16 v17 = 2082;
      int v18 = v11;
      goto LABEL_44;
    case 4u:
      unsigned int v4 = *(_DWORD *)(a1 + 48);
LABEL_28:
      if ((v4 & 0xFFFFFFFE) != 2) {
        goto LABEL_37;
      }
      int v7 = (os_log_s *)qword_1008F76F8;
      if (!os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      int v12 = "Unknown BSM State";
      uint64_t v13 = "BSM_STATE_ANALYZE";
      if (v4 != 2) {
        uint64_t v13 = "Unknown BSM State";
      }
      if (v4 == 3) {
        uint64_t v13 = "BSM_STATE_CONFIGURE";
      }
      if (a2 <= 4) {
        int v12 = off_100889FF8[a2];
      }
      int v15 = 136446466;
      int v16 = v13;
      __int16 v17 = 2082;
      int v18 = v12;
LABEL_44:
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: %{public}s -> %{public}s",  (uint8_t *)&v15,  0x16u);
LABEL_45:
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 48) = a2;
      return result;
    default:
LABEL_37:
      int v14 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_FAULT)) {
        sub_100664040(a1, a2, v14);
      }
      return 1LL;
  }

void sub_100258A9C(uint64_t a1, char a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = sub_100404EB8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100258B14;
    v7[3] = &unk_100886EE0;
    v7[4] = a1;
    v7[5] = a3;
    char v8 = a2;
    sub_100405384(v6, v7);
  }

void sub_100258B14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3 && *(_BYTE *)(v3 + 1372) && *(void *)(a1 + 40) != v3 && *(_BYTE *)(a1 + 48))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_ERROR)) {
      sub_100664150();
    }
    return;
  }

  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 != v3)
  {
    int v5 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v4, &__p);
      if (SHIBYTE(v11) >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      int v16 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: AoS update on new device %{public}s.",  buf,  0xCu);
      if (SHIBYTE(v11) < 0) {
        operator delete(__p);
      }
      uint64_t v4 = *(void *)(a1 + 40);
    }

    *(void *)(v2 + 56) = v4;
    uint64_t v3 = v4;
  }

  if (!v3)
  {
    if (!*(_BYTE *)(a1 + 48))
    {
LABEL_22:
      uint64_t v7 = sub_100404EB8();
      std::string __p = _NSConcreteStackBlock;
      uint64_t v10 = 3221225472LL;
      int v11 = sub_10025A730;
      int v12 = &unk_10087EB68;
      uint64_t v13 = v2;
      int v8 = 5;
LABEL_25:
      int v14 = v8;
      sub_100405384(v7, &__p);
      return;
    }

void sub_100258D4C(uint64_t a1, void *a2, char a3, char a4, char a5, char a6, char a7)
{
  id v13 = a2;
  uint64_t v14 = sub_100404EB8();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_100258E34;
  v16[3] = &unk_100881010;
  uint64_t v18 = a1;
  id v15 = v13;
  id v17 = v15;
  char v19 = a3;
  char v20 = a4;
  char v21 = a5;
  char v22 = a6;
  char v23 = a7;
  sub_100405384(v14, v16);
}

void sub_100258E14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100258E34(uint64_t a1)
{
  uint64_t v2 = *(_BYTE **)(a1 + 40);
  uint64_t v3 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(unsigned __int8 *)(a1 + 48);
    int v6 = *(unsigned __int8 *)(a1 + 49);
    int v7 = *(unsigned __int8 *)(a1 + 50);
    int v8 = *(unsigned __int8 *)(a1 + 51);
    int v9 = *(unsigned __int8 *)(a1 + 52);
    *(_DWORD *)std::stringbuf::string_type buf = 138544642;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v5;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&_BYTE buf[20] = v6;
    LOWORD(v15) = 1024;
    *(_DWORD *)((char *)&v15 + 2) = v7;
    HIWORD(v15) = 1024;
    *(_DWORD *)int v16 = v8;
    *(_WORD *)&void v16[4] = 1024;
    *(_DWORD *)&v16[6] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager::locationUpdate - country: %{public}@, ISM 2.4 CC: %u, LEFlag: %u, UNII-1 CC: %u, UNII-3 CC: %u, UNII-5 CC: %u",  buf,  0x2Au);
  }

  v2[156] = *(_BYTE *)(a1 + 50);
  v2[157] = *(_BYTE *)(a1 + 51);
  v2[158] = *(_BYTE *)(a1 + 52);
  v2[53] = 0;
  uint64_t v10 = sub_100404EB8();
  *(void *)std::stringbuf::string_type buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 3221225472LL;
  *(void *)&uint8_t buf[16] = sub_10025A730;
  id v15 = &unk_10087EB68;
  *(void *)int v16 = v2;
  *(_DWORD *)&v16[8] = 2;
  sub_100405384(v10, buf);
  else {
    char v11 = 5;
  }
  v2[275] = v11;
  uint64_t v12 = sub_100404EB8();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100258FE0;
  v13[3] = &unk_10087EB20;
  v13[4] = v2;
  sub_100405460(v12, 1000LL, v13);
}

void sub_100258FE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Update Bands after Location Update",  (uint8_t *)v4,  2u);
  }

  uint64_t v3 = sub_100404EB8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10025A730;
  void v4[3] = &unk_10087EB68;
  v4[4] = v1;
  int v5 = 3;
  sub_100405384(v3, v4);
}

void sub_10025908C(uint64_t a1, void *a2, char a3, char a4, char a5, char a6, char a7)
{
}

BOOL sub_100259094(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  return v1 && *(_BYTE *)(v1 + 1373) != 0;
}

void sub_1002590B4(uint64_t a1, unsigned int a2)
{
  if (a2 == 1)
  {
    sub_100259108(a1);
  }

  else
  {
    if (!a2) {
      *(_BYTE *)(a1 + 52) = 1;
    }
    sub_10025919C(a1, a2);
  }

void sub_100259108(uint64_t a1)
{
  *(_BYTE *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = 0LL;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 70) = 2056;
  *(_DWORD *)(a1 + sub_100242FAC(v1 - 64) = 10;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 54) = 1;
  *(_BYTE *)(a1 + 145) = 1;
  sub_100259DD4(a1);
  uint64_t v1 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: ---------- BSM State Machine Shutdown ----------",  v2,  2u);
  }

void sub_10025919C(uint64_t a1, unsigned int a2)
{
  if (a2 <= 3 && a2 != 1)
  {
    sub_10025955C(a1, a2);
    return;
  }

  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_ERROR)) {
      sub_10066417C();
    }
    if (a2 != 6) {
      goto LABEL_29;
    }
    goto LABEL_18;
  }

  switch(a2)
  {
    case 6u:
LABEL_18:
      char v11 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Debounce Expired",  buf,  2u);
      }

      *(_BYTE *)(a1 + 136) = 0;
      goto LABEL_29;
    case 5u:
      uint64_t v12 = (os_log_s *)qword_1008F76F8;
      if (!*(_BYTE *)(v4 + 1372) && os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "Received AoS End when AoS was already disabled.",  buf,  2u);
        uint64_t v4 = *(void *)(a1 + 56);
        uint64_t v12 = (os_log_s *)qword_1008F76F8;
      }

      *(_BYTE *)(v4 + 1372) = 0;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 67109120;
        LODWORD(v18) = 1;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Resetting hrbClassificationBands VSC with value 0x%x",  buf,  8u);
      }

      uint64_t v13 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 1384LL))(v13, 1LL, 1LL);
      __uint64_t v14 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(void *)(a1 + 184);
      *(void *)(a1 + 192) = v14;
      *(_BYTE *)(a1 + 136) = 0;
      int v9 = (os_log_s *)qword_1008F76F8;
      if (!os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_29;
      }
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      __uint64_t v18 = v14;
      uint64_t v10 = "BandSwitchManager: Ending AoS Session. Duration was 0x%llX nSec";
      break;
    case 4u:
      int v5 = (os_log_s *)qword_1008F76F8;
      if (*(_BYTE *)(v4 + 1372) && os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Received AoS Start when AoS was already enabled.",  buf,  2u);
        uint64_t v4 = *(void *)(a1 + 56);
        int v5 = (os_log_s *)qword_1008F76F8;
      }

      *(_BYTE *)(v4 + 1372) = 1;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(a1 + 68);
        *(_DWORD *)std::stringbuf::string_type buf = 67109120;
        LODWORD(v18) = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Sending hrbClassificationBands VSC with value 0x%X",  buf,  8u);
      }

      uint64_t v7 = sub_1002E6E9C();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 1384LL))( v7,  *(unsigned __int8 *)(a1 + 68),  1LL);
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      sub_1003D55EC(*(void *)(a1 + 56), (_DWORD *)&v16 + 1, &v16, (_DWORD *)&v15 + 1, &v15);
      sub_100259DD4(a1);
      *(_DWORD *)(a1 + 176) = HIDWORD(v15);
      __uint64_t v8 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      *(void *)(a1 + 184) = v8;
      *(_WORD *)(a1 + 70) = 2056;
      int v9 = (os_log_s *)qword_1008F76F8;
      if (!os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_29;
      }
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      __uint64_t v18 = v8;
      uint64_t v10 = "BandSwitchManager: Starting AoS Session at 0x%llX nSec";
      break;
    default:
      goto LABEL_29;
  }

  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0xCu);
LABEL_29:
  if ((sub_100259E6C(a1, a2) & 1) == 0) {
    sub_10025A020(a1);
  }
}

void sub_10025955C(uint64_t a1, unsigned int a2)
{
  if (a2 == 3)
  {
    if (*(_BYTE *)(a1 + 53) && *(_BYTE *)(a1 + 54))
    {
      uint64_t v16 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Sending hrbAllowedBands VSC",  (uint8_t *)v82,  2u);
      }

      uint64_t v17 = sub_1002E6E9C();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v17 + 1376LL))( v17,  *(unsigned __int8 *)(a1 + 68),  1LL);
      __uint64_t v18 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Sending HRB BE blocking VSC",  (uint8_t *)v82,  2u);
      }

      uint64_t v19 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 1488LL))( v19,  6LL,  a1 + 263,  a1 + 269,  a1 + 275,  1LL);
      *(_BYTE *)(a1 + 54) = 0;
    }

    goto LABEL_132;
  }

  if (a2 != 2)
  {
    if (!a2)
    {
      uint64_t v4 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Configuring Retry delay",  (uint8_t *)v82,  2u);
      }

      sub_10025A08C(a1);
      int v5 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Sending hrbControl VSC",  (uint8_t *)v82,  2u);
      }

      uint64_t v6 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 1368LL))(v6, 1LL, 1LL);
      *(_BYTE *)(a1 + 54) = 1;
      uint64_t v7 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Sending Initial hrbAllowedBands VSC",  (uint8_t *)v82,  2u);
      }

      uint64_t v8 = sub_1002E6E9C();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v8 + 1376LL))( v8,  *(unsigned __int8 *)(a1 + 68),  1LL);
      int v9 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        v82[0] = 67109120;
        v82[1] = 1;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Resetting hrbClassificationBands VSC with value 0x%x",  (uint8_t *)v82,  8u);
      }

      uint64_t v10 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 1384LL))(v10, 1LL, 1LL);
      char v11 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Sending Initial HRB BE blocking VSC",  (uint8_t *)v82,  2u);
      }

      uint64_t v12 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 1488LL))( v12,  6LL,  a1 + 263,  a1 + 269,  a1 + 275,  1LL);
    }

    goto LABEL_132;
  }

  uint64_t v13 = (void **)(a1 + 72);
  __uint64_t v14 = *(char **)(a1 + 72);
  *(_BYTE *)(a1 + 68) = 1;
  *(void *)(a1 + sub_100242FAC(v40 - 80) = v14;
  if (*(unsigned __int8 *)(a1 + 156) != 255)
  {
    unint64_t v15 = *(void *)(a1 + 88);
    *(_BYTE *)(a1 + 68) = 3;
    *(_BYTE *)(a1 + 256) = 1;
    if ((unint64_t)v14 >= v15)
    {
      unint64_t v20 = v15 - (void)v14;
      unint64_t v21 = (uint64_t)(v15 - (void)v14) >> 1;
      if (v21 <= 1) {
        unint64_t v21 = 1LL;
      }
      if (v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      char v23 = sub_10024E33C(a1 + 88, v22);
      int v24 = *(char **)(a1 + 72);
      int v25 = *(char **)(a1 + 80);
      uint64_t v27 = &v23[v26];
      *char v23 = 1;
      __uint64_t v14 = (char *)(v23 + 1);
      while (v25 != v24)
      {
        int v28 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *--char v23 = v28;
      }

      *(void *)(a1 + 72) = v23;
      *(void *)(a1 + sub_100242FAC(v40 - 80) = v14;
      *(void *)(a1 + 88) = v27;
      if (v24) {
        operator delete(v24);
      }
    }

    else
    {
      *(_DWORD *)__uint64_t v14 = 1;
      v14 += 4;
    }

    *(void *)(a1 + sub_100242FAC(v40 - 80) = v14;
  }

  if (*(unsigned __int8 *)(a1 + 157) != 255)
  {
    *(_BYTE *)(a1 + 68) |= 4u;
    *(_BYTE *)(a1 + 257) = 1;
    int v29 = *(char **)(a1 + 72);
    v82[0] = 2;
    sub_10025A20C(a1 + 72, v29, v82);
    __uint64_t v14 = *(char **)(a1 + 80);
  }

  if (*(unsigned __int8 *)(a1 + 158) != 255)
  {
    uint64_t v31 = (char **)(a1 + 88);
    int v30 = *(char **)(a1 + 88);
    *(_DWORD *)(a1 + 259) = 16843009;
    if (v14 >= v30)
    {
      int v33 = (char *)*v13;
      uint64_t v34 = (v14 - (_BYTE *)*v13) >> 2;
      unint64_t v35 = v34 + 1;
      uint64_t v36 = v30 - v33;
      if (v36 >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        uint64_t v38 = (char *)sub_10024E33C(a1 + 88, v37);
        int v33 = *(char **)(a1 + 72);
        __uint64_t v14 = *(char **)(a1 + 80);
      }

      else
      {
        uint64_t v38 = 0LL;
      }

      unint64_t v39 = &v38[4 * v34];
      int v30 = &v38[4 * v37];
      *(_DWORD *)unint64_t v39 = 4;
      __int128 v32 = v39 + 4;
      while (v14 != v33)
      {
        int v40 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v39 - 1) = v40;
        v39 -= 4;
      }

      *(void *)(a1 + 72) = v39;
      *(void *)(a1 + sub_100242FAC(v40 - 80) = v32;
      *(void *)(a1 + 88) = v30;
      if (v33)
      {
        operator delete(v33);
        int v30 = *v31;
      }
    }

    else
    {
      *(_DWORD *)__uint64_t v14 = 4;
      __int128 v32 = v14 + 4;
    }

    *(void *)(a1 + sub_100242FAC(v40 - 80) = v32;
    if (v32 >= v30)
    {
      int v42 = (char *)*v13;
      uint64_t v43 = (v32 - (_BYTE *)*v13) >> 2;
      unint64_t v44 = v43 + 1;
      uint64_t v45 = v30 - v42;
      if (v45 >> 1 > v44) {
        unint64_t v44 = v45 >> 1;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        uint64_t v47 = (char *)sub_10024E33C(a1 + 88, v46);
        int v42 = *(char **)(a1 + 72);
        __int128 v32 = *(char **)(a1 + 80);
      }

      else
      {
        uint64_t v47 = 0LL;
      }

      int v48 = &v47[4 * v43];
      int v30 = &v47[4 * v46];
      *(_DWORD *)int v48 = 5;
      int v41 = v48 + 4;
      while (v32 != v42)
      {
        int v49 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *((_DWORD *)v48 - 1) = v49;
        v48 -= 4;
      }

      *(void *)(a1 + 72) = v48;
      *(void *)(a1 + sub_100242FAC(v40 - 80) = v41;
      *(void *)(a1 + 88) = v30;
      if (v42)
      {
        operator delete(v42);
        int v30 = *v31;
      }
    }

    else
    {
      *(_DWORD *)__int128 v32 = 5;
      int v41 = v32 + 4;
    }

    *(void *)(a1 + sub_100242FAC(v40 - 80) = v41;
    if (v41 >= v30)
    {
      uint64_t v51 = (char *)*v13;
      uint64_t v52 = (v41 - (_BYTE *)*v13) >> 2;
      unint64_t v53 = v52 + 1;
      uint64_t v54 = v30 - v51;
      if (v54 >> 1 > v53) {
        unint64_t v53 = v54 >> 1;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        char v56 = (char *)sub_10024E33C(a1 + 88, v55);
        uint64_t v51 = *(char **)(a1 + 72);
        int v41 = *(char **)(a1 + 80);
      }

      else
      {
        char v56 = 0LL;
      }

      unsigned int v57 = &v56[4 * v52];
      int v30 = &v56[4 * v55];
      *(_DWORD *)unsigned int v57 = 6;
      uint64_t v50 = v57 + 4;
      while (v41 != v51)
      {
        int v58 = *((_DWORD *)v41 - 1);
        v41 -= 4;
        *((_DWORD *)v57 - 1) = v58;
        v57 -= 4;
      }

      *(void *)(a1 + 72) = v57;
      *(void *)(a1 + sub_100242FAC(v40 - 80) = v50;
      *(void *)(a1 + 88) = v30;
      if (v51)
      {
        operator delete(v51);
        int v30 = *v31;
      }
    }

    else
    {
      *(_DWORD *)int v41 = 6;
      uint64_t v50 = v41 + 4;
    }

    *(void *)(a1 + sub_100242FAC(v40 - 80) = v50;
    if (v50 >= v30)
    {
      uint64_t v59 = (char *)*v13;
      uint64_t v60 = (v50 - (_BYTE *)*v13) >> 2;
      unint64_t v61 = v60 + 1;
      uint64_t v62 = v30 - v59;
      if (v62 >> 1 > v61) {
        unint64_t v61 = v62 >> 1;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63)
      {
        uint64_t v64 = (char *)sub_10024E33C(a1 + 88, v63);
        uint64_t v59 = *(char **)(a1 + 72);
        uint64_t v50 = *(char **)(a1 + 80);
      }

      else
      {
        uint64_t v64 = 0LL;
      }

      int v65 = &v64[4 * v60];
      uint64_t v66 = &v64[4 * v63];
      *(_DWORD *)int v65 = 7;
      __uint64_t v14 = v65 + 4;
      while (v50 != v59)
      {
        int v67 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v65 - 1) = v67;
        v65 -= 4;
      }

      *(void *)(a1 + 72) = v65;
      *(void *)(a1 + sub_100242FAC(v40 - 80) = v14;
      *(void *)(a1 + 88) = v66;
      if (v59) {
        operator delete(v59);
      }
    }

    else
    {
      *(_DWORD *)uint64_t v50 = 7;
      __uint64_t v14 = v50 + 4;
    }

    *(void *)(a1 + sub_100242FAC(v40 - 80) = v14;
    *(_BYTE *)(a1 + 68) |= 0xF0u;
  }

  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 69) = 1;
  unsigned int v68 = *(int **)(a1 + 72);
  if (v68 == (int *)v14)
  {
    int v70 = *(_DWORD *)(a1 + 152);
  }

  else
  {
    uint64_t v69 = 0LL;
    int v70 = *(_DWORD *)(a1 + 152);
    do
    {
      int v71 = *v68++;
      if (v71 == v70) {
        ++v69;
      }
    }

    while (v68 != (int *)v14);
    if (v69)
    {
LABEL_114:
      *(_BYTE *)(a1 + 69) = v70;
      *(_BYTE *)(a1 + 144) = 1;
      char v72 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: fDebugForceUNIIBand set to a band to a supported band",  (uint8_t *)v82,  2u);
      }

      goto LABEL_119;
    }
  }

  if (v70 != 8)
  {
    if (v70)
    {
      int v73 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: fDebugForceUNIIBand set to a band that is not supported, ignoring fDebugForceUNIIBand",  (uint8_t *)v82,  2u);
      }

      *(_BYTE *)(a1 + 144) = 0;
      goto LABEL_119;
    }

    goto LABEL_114;
  }

void sub_100259DD4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 240);
  uint64_t v1 = *(void **)(a1 + 240);
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0LL;
  *(_BYTE *)(a1 + 228) = 8;
  sub_10023BF24(a1 + 232, v1);
  *(v2 - 1) = v2;
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  uint64_t v3 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Session Metrics cleared",  v4,  2u);
  }

uint64_t sub_100259E6C(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4)
  {
    if ((sub_100257524(a1) & 1) != 0)
    {
LABEL_9:
      uint64_t v7 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        uint64_t v8 = "BandSwitchManager: ---------- Switch from ISM to HRB ----------";
        int v9 = buf;
        goto LABEL_11;
      }

void sub_10025A020(uint64_t a1)
{
  uint64_t v1 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: ---------- BSM State Machine END ----------",  v2,  2u);
  }

void sub_10025A08C(uint64_t a1)
{
  int v7 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "BSM");
  sub_10002418C(__p, "DebounceOverride");
  (*(void (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v2 + 128LL))(v2, buf, __p, &v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(*(void **)buf);
  }
  int v3 = v7;
  if ((v7 - 1) > 0x77)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_ERROR)) {
      sub_1006641A8();
    }
  }

  else
  {
    *(_DWORD *)(a1 + sub_100242FAC(v1 - 64) = v7;
    uint64_t v4 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Overriding Debounce value to %d seconds",  buf,  8u);
    }
  }

void sub_10025A1D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10025A20C(uint64_t a1, char *__src, _DWORD *a3)
{
  uint64_t v4 = __src;
  char v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    __uint64_t v14 = *(_BYTE **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v15 >> 62) {
      abort();
    }
    uint64_t v16 = (__src - v14) >> 2;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      uint64_t v19 = (char *)sub_10024E33C(v7, v18);
    }
    else {
      uint64_t v19 = 0LL;
    }
    std::string __p = v19;
    unint64_t v22 = &v19[4 * v16];
    char v23 = v22;
    int v24 = &v19[4 * v18];
    sub_10025CE28(&__p, a3);
    uint64_t v4 = sub_10025CF34((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(_DWORD *)____int128 src = *a3;
    *(void *)(a1 + 8) = __src + 4;
  }

  else
  {
    uint64_t v10 = __src + 4;
    char v11 = v6 - 4;
    BOOL v12 = v6;
    while (v11 < v6)
    {
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)BOOL v12 = v13;
      v12 += 4;
    }

    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    }
    *(_DWORD *)uint64_t v4 = *a3;
  }

  return v4;
}

void sub_10025A370( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10025A3A8(uint64_t a1, int a2, uint64_t a3)
{
  char v6 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = "2.4Ghz";
    if ((_DWORD)a3 == 1) {
      uint64_t v7 = "HRB";
    }
    int v18 = 136315138;
    uint64_t v19 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Switching band to %s",  (uint8_t *)&v18,  0xCu);
  }

  if ((_DWORD)a3 == 1)
  {
    a3 = *(unsigned __int8 *)(a1 + 69);
    *(_BYTE *)(a1 + 228) = a3;
  }

  else
  {
    if (*(_DWORD *)(a1 + 224) != 6) {
      *(_DWORD *)(a1 + 224) = a2;
    }
    if ((_DWORD)a3) {
      a3 = *(unsigned __int8 *)(a1 + 69);
    }
  }

  unint64_t v8 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    else {
      unint64_t v9 = off_10088A020[(char)a3];
    }
    unint64_t v10 = *(char *)(a1 + 71);
    if (v10 > 8) {
      char v11 = "Unknown BSM Band Code";
    }
    else {
      char v11 = off_10088A020[v10];
    }
    unint64_t v12 = *(char *)(a1 + 70);
    if (v12 > 8) {
      int v13 = "Unknown BSM Band Code";
    }
    else {
      int v13 = off_10088A020[v12];
    }
    int v18 = 136315650;
    uint64_t v19 = v9;
    __int16 v20 = 2080;
    unint64_t v21 = v11;
    __int16 v22 = 2080;
    char v23 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Band to Switch to %s, Band Switch under progress %s, Band Switch Queued %s",  (uint8_t *)&v18,  0x20u);
  }

  *(_BYTE *)(a1 + 70) = a3;
  int v14 = *(unsigned __int8 *)(a1 + 71);
  if (v14 != 8)
  {
    if ((_DWORD)a3 == v14)
    {
      *(_BYTE *)(a1 + 70) = 8;
      uint64_t v16 = (os_log_s *)qword_1008F76F8;
      if (!os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      LOWORD(v18) = 0;
      uint64_t v17 = "BandSwitchManager: redundant Band Switch to the same band, Ignoring Bandswitch";
    }

    else
    {
      uint64_t v16 = (os_log_s *)qword_1008F76F8;
      if (!os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      LOWORD(v18) = 0;
      uint64_t v17 = "BandSwitchManager: Band switch under progress for a different band, will wait for it to complete";
    }

    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v18, 2u);
    goto LABEL_32;
  }

  *(_BYTE *)(a1 + 71) = a3;
  *(_BYTE *)(a1 + 70) = 8;
  unint64_t v15 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v18) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: No bandswitch in progress, starting one ASAP",  (uint8_t *)&v18,  2u);
  }

  sub_10025A650(a1, *(void *)(a1 + 56) + 128LL, a3);
LABEL_32:
  sub_10025A020(a1);
}

BOOL sub_10025A650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 48);
  if (v6 != 4 && !*(_BYTE *)(a1 + 147))
  {
    uint64_t v7 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_FAULT)) {
      sub_1006641D4(v6, v7, v8);
    }
  }

  *(_BYTE *)(a1 + 147) = 0;
  unint64_t v9 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Sending hrbChangeConnectionBand VSC",  v12,  2u);
  }

  uint64_t v10 = sub_1002E6E9C();
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 1408LL))( v10,  a2,  a3,  1LL) == 0;
}

void sub_10025A730(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = (os_log_s *)qword_1008F76F8;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    uint64_t v5 = *(int *)(v2 + 48);
    else {
      unsigned int v6 = off_100889FF8[v5];
    }
    uint64_t v7 = sub_100257500(v4, *(_DWORD *)(a1 + 40));
    int v8 = 136446466;
    unint64_t v9 = v6;
    __int16 v10 = 2082;
    char v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: ---------- BSM State Machine START. Current State: %{public}s, Input Event: %{public}s ----------",  (uint8_t *)&v8,  0x16u);
  }

  sub_1002590B4(v2, *(_DWORD *)(a1 + 40));
}

void sub_10025A820(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100404EB8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10025A894;
  v7[3] = &unk_100886EE0;
  v7[4] = a1;
  v7[5] = a2;
  char v8 = a3;
  sub_100405384(v6, v7);
}

void sub_10025A894(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(int **)(a1 + 40);
  __int16 v4 = *((_WORD *)v2 + 2);
  int v27 = *v2;
  __int16 v28 = v4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100889E90);
  }
  uint64_t v5 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v27, 1);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    int v7 = *(unsigned __int8 *)(a1 + 48);
    if (*(void **)(v3 + 56) != v5)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_ERROR)) {
        sub_1006642AC();
      }
      *(void *)(v3 + 56) = v6;
    }

    sub_1003E5C80(v6, v7 != 1);
    __uint64_t v8 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
    if (v7 == 1)
    {
      __uint64_t v9 = v8 - *(void *)(v3 + 200);
      *(void *)(v3 + 200) = 0LL;
      *(void *)(v3 + 208) = v9;
      *(void *)std::stringbuf::string_type buf = v3 + 224;
      __int16 v10 = sub_100255178((uint64_t **)(v3 + 232), (int *)(v3 + 224), (uint64_t)&unk_1006C2518, (_DWORD **)buf);
      ++*((_WORD *)v10 + 16);
      if (*(_DWORD *)(v3 + 224) == 5) {
        sub_100258450(v3);
      }
      *(_DWORD *)(v3 + 224) = 21;
    }

    else
    {
      *(void *)(v3 + 200) = v8;
    }

    if (*(void *)(v3 + 216))
    {
      __uint64_t v11 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      unint64_t v12 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v13 = (v11 - *(void *)(v3 + 216)) / 0xF4240;
        sub_1003CF00C(*(void *)(v3 + 56), __p);
        if (v32 >= 0) {
          int v14 = __p;
        }
        else {
          int v14 = *(_BYTE **)__p;
        }
        unint64_t v15 = "2.4Ghz";
        *(_DWORD *)std::stringbuf::string_type buf = 136446722;
        if (v7 != 1) {
          unint64_t v15 = "HRB";
        }
        *(void *)&uint8_t buf[4] = v14;
        __int16 v34 = 2080;
        unint64_t v35 = v15;
        __int16 v36 = 2048;
        unint64_t v37 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: ---------- BSM HRB band changed. Device %{public}s Frequency %s ----------(%llu ms)",  buf,  0x20u);
        if (v32 < 0) {
          operator delete(*(void **)__p);
        }
      }

      *(void *)(v3 + 216) = 0LL;
    }

    else
    {
      uint64_t v16 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(*(void *)(v3 + 56), buf);
        uint64_t v17 = *(_BYTE **)buf;
        int v18 = "2.4Ghz";
        if (v36 >= 0) {
          uint64_t v17 = buf;
        }
        if (v7 != 1) {
          int v18 = "HRB";
        }
        *(_DWORD *)std::string __p = 136446466;
        *(void *)&__p[4] = v17;
        __int16 v30 = 2080;
        uint64_t v31 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: ---------- BSM HRB band changed. Device %{public}s Frequency %s ----------(Not initiated by BSM)",  __p,  0x16u);
        if (SHIBYTE(v36) < 0) {
          operator delete(*(void **)buf);
        }
      }
    }

    sub_10025AD80(v3);
    (**(void (***)(uint64_t, void))v3)(v3, *(void *)(v3 + 56));
    (*(void (**)(uint64_t, BOOL))(*(void *)v3 + 8LL))(v3, v7 != 1);
    uint64_t v19 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v20 = *(char *)(v3 + 71);
      if (v20 > 8) {
        unint64_t v21 = "Unknown BSM Band Code";
      }
      else {
        unint64_t v21 = off_10088A020[v20];
      }
      unint64_t v22 = *(char *)(v3 + 70);
      if (v22 > 8) {
        char v23 = "Unknown BSM Band Code";
      }
      else {
        char v23 = off_10088A020[v22];
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136315394;
      *(void *)&uint8_t buf[4] = v21;
      __int16 v34 = 2080;
      unint64_t v35 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Completed BandSwitch to %s and pending %s",  buf,  0x16u);
    }

    uint64_t v24 = *(unsigned __int8 *)(v3 + 70);
    if ((_DWORD)v24 == 8)
    {
      *(_BYTE *)(v3 + 71) = 8;
      *(_BYTE *)(v3 + 147) = 0;
    }

    else
    {
      uint64_t v25 = (os_log_s *)qword_1008F76F8;
      if (*(_BYTE *)(v3 + 136))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Debounce timer is enabled, will not band switch",  buf,  2u);
          uint64_t v25 = (os_log_s *)qword_1008F76F8;
        }

        *(_WORD *)(v3 + 70) = 2056;
        uint64_t v24 = 8LL;
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        else {
          uint64_t v26 = off_10088A020[(char)v24];
        }
        *(_DWORD *)std::stringbuf::string_type buf = 136315138;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Starting pending BandSwitch to %s",  buf,  0xCu);
        uint64_t v24 = *(unsigned __int8 *)(v3 + 70);
      }

      *(_BYTE *)(v3 + 71) = v24;
      *(_BYTE *)(v3 + 147) = 1;
      sub_10025A650(v3, *(void *)(v3 + 56) + 128LL, v24);
      *(_BYTE *)(v3 + 70) = 8;
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_FAULT))
  {
    sub_100664274();
  }

void sub_10025AD80(uint64_t a1)
{
  if (sub_1002582F4(a1))
  {
    *(_BYTE *)(a1 + 136) = 1;
    uint64_t v2 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: AoS enabled on 2.4. Debounce for %d seconds",  buf,  8u);
    }

    uint64_t v4 = sub_100404EB8();
    uint64_t v5 = (1000 * *(_DWORD *)(a1 + 64));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_10025B484;
    void v6[3] = &unk_10087EB20;
    v6[4] = a1;
    sub_100405460(v4, v5, v6);
  }

void sub_10025AE7C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8 = sub_100404EB8();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _DWORD v9[2] = sub_10025AEF8;
  v9[3] = &unk_10087FF20;
  v9[4] = a1;
  void v9[5] = a2;
  char v10 = a4;
  char v11 = a3;
  sub_100405384(v8, v9);
}

void sub_10025AEF8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(int **)(a1 + 40);
  __int16 v4 = *((_WORD *)v2 + 2);
  int v22 = *v2;
  __int16 v23 = v4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100889E90);
  }
  uint64_t v5 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v22, 1);
  uint64_t v6 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v5, __p);
    int v7 = v21 >= 0 ? __p : (void **)__p[0];
    int v8 = *(unsigned __int8 *)(a1 + 48);
    __uint64_t v9 = *(_BYTE *)(a1 + 49) == 1 ? "2.4Ghz" : "HRB";
    *(_DWORD *)std::stringbuf::string_type buf = 136446722;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: HRB band change for device %{public}s failed status:%d. Current band is still %s",  buf,  0x1Cu);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }

  *(_WORD *)(v3 + 70) = 2056;
  if (*(_BYTE *)(a1 + 49) != 1)
  {
    *(_BYTE *)(v3 + 145) = 0;
    uint64_t v10 = *(int *)(v3 + 96);
    uint64_t v11 = *(void *)(v3 + 72);
    uint64_t v12 = *(void *)(v3 + 80) - v11;
    unint64_t v13 = v12 >> 2;
    unint64_t v14 = v10 + 1;
    else {
      uint64_t v15 = v12 >> 2;
    }
    while (1)
    {
      if (v13 <= v14)
      {
        uint64_t v16 = v15;
        goto LABEL_23;
      }

      uint64_t v16 = v14;
      int v17 = *(_DWORD *)(v11 + 4 * v14);
      if (*(_DWORD *)(v3 + 148) != v17) {
        break;
      }
      ++v14;
      if (!*(_BYTE *)(v3 + 146))
      {
        int v17 = *(_DWORD *)(v3 + 148);
        break;
      }
    }

    *(_BYTE *)(v3 + 69) = v17;
    *(_DWORD *)(v3 + 96) = v16;
    *(_BYTE *)(v3 + 145) = 1;
    int v18 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Sufficient Bandwidth for HRB TDD in band %d",  buf,  8u);
      unint64_t v13 = (uint64_t)(*(void *)(v3 + 80) - *(void *)(v3 + 72)) >> 2;
    }

void sub_10025B188(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = sub_100404EB8();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10025B204;
    v5[3] = &unk_10087EB68;
    v5[4] = a1;
    int v6 = a2;
    sub_100405384(v4, v5);
  }

  else
  {
    *(void *)(a1 + 216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  }

void sub_10025B204(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 40);
    LODWORD(v6[0]) = 67109120;
    HIDWORD(v6[0]) = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: ---------- BSM Change Band VSC Failed status:%d, switching to ISM band----------",  (uint8_t *)v6,  8u);
  }

  *(_BYTE *)(v2 + 145) = 0;
  *(_WORD *)(v2 + 70) = 2056;
  uint64_t v5 = sub_100404EB8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10025A730;
  void v6[3] = &unk_10087EB68;
  v6[4] = v2;
  int v7 = 19;
  sub_100405384(v5, v6);
}

void sub_10025B304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100404EB8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10025B368;
  v5[3] = &unk_10087F8E0;
  v5[4] = a1;
  void v5[5] = a2;
  sub_100405384(v4, v5);
}

void sub_10025B368(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(int **)(a1 + 40);
  __int16 v3 = *((_WORD *)v1 + 2);
  int v8 = *v1;
  __int16 v9 = v3;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100889E90);
  }
  uint64_t v4 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v8, 1);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    if (*(void **)(v2 + 56) != v4)
    {
      int v6 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_ERROR)) {
        sub_1006642D8(v5, v6);
      }
      *(void *)(v2 + 56) = v5;
      sub_1003E5C80(v5, 0);
      uint64_t v5 = *(void *)(v2 + 56);
      *(_BYTE *)(v5 + 1372) = 0;
    }

    *(_BYTE *)(v5 + 1374) = 1;
    uint64_t v7 = sub_100404EB8();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_10025A730;
    v10[3] = &unk_10087EB68;
    v10[4] = v2;
    int v11 = 16;
    sub_100405384(v7, v10);
  }

void sub_10025B484(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10025A730;
  v3[3] = &unk_10087EB68;
  void v3[4] = v1;
  int v4 = 6;
  sub_100405384(v2, v3);
}

void sub_10025B4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100404EB8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10025B550;
  v5[3] = &unk_10087F8E0;
  v5[4] = a1;
  void v5[5] = a2;
  sub_100405384(v4, v5);
}

void sub_10025B550(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 == *(void *)(v2 + 56))
  {
    if (*(_BYTE *)(v1 + 1373))
    {
      if (*(void *)(v2 + 184)) {
        *(void *)(v2 + 192) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(void *)(v2 + 184);
      }
      *(void *)(v2 + 208) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(void *)(v2 + 200);
      *(_DWORD *)int v11 = 7;
      *(void *)std::stringbuf::string_type buf = v11;
      uint64_t v4 = sub_100255178((uint64_t **)(v2 + 232), (int *)v11, (uint64_t)&unk_1006C2518, (_DWORD **)buf);
      ++*((_WORD *)v4 + 16);
      *(void *)(v2 + 200) = 0LL;
      sub_1003E5C80(*(void *)(a1 + 40), 0);
      (*(void (**)(uint64_t, void))(*(void *)v2 + 8LL))(v2, 0LL);
      uint64_t v1 = *(void *)(a1 + 40);
    }

    *(_BYTE *)(v1 + 1372) = 0;
    uint64_t v5 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Resetting hrbClassificationBands VSC with value 0x%x",  buf,  8u);
    }

    uint64_t v6 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 1384LL))(v6, 1LL, 1LL);
    *(_BYTE *)(v2 + 143) = 1;
    *(_BYTE *)(v2 + 136) = 0;
    sub_100258450(v2);
    uint64_t v7 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(*(void *)(v2 + 56), buf);
      if (v10 >= 0) {
        int v8 = buf;
      }
      else {
        int v8 = *(uint8_t **)buf;
      }
      *(_DWORD *)int v11 = 136446210;
      uint64_t v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Discarding reference to %{public}s as it disconnected",  v11,  0xCu);
      if (v10 < 0) {
        operator delete(*(void **)buf);
      }
    }

    *(void *)(v2 + 56) = 0LL;
  }

void sub_10025B750(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 40;
  uint64_t v4 = sub_100404EB8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10025B550;
  v5[3] = &unk_10087F8E0;
  v5[4] = v3;
  void v5[5] = a2;
  sub_100405384(v4, v5);
}

void sub_10025B7B4(uint64_t a1, char a2)
{
  if ((_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD") & 1) == 0)
  {
    uint64_t v4 = sub_100404EB8();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10025B834;
    v5[3] = &unk_1008800D8;
    v5[4] = a1;
    char v6 = a2;
    sub_100405384(v4, v5);
  }

void sub_10025B834(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 137) != v2)
  {
    *(_BYTE *)(v1 + 137) = v2;
    uint64_t v3 = sub_100404EB8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10025A730;
    void v4[3] = &unk_10087EB68;
    v4[4] = v1;
    int v5 = 8;
    sub_100405384(v3, v4);
  }

void sub_10025B8B0(uint64_t a1, char a2)
{
}

void sub_10025B8B8(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404EB8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10025B920;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

void sub_10025B920(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 138) != v2)
  {
    *(_BYTE *)(v1 + 138) = v2;
    uint64_t v3 = sub_100404EB8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10025A730;
    void v4[3] = &unk_10087EB68;
    v4[4] = v1;
    int v5 = 9;
    sub_100405384(v3, v4);
  }

void sub_10025B99C(uint64_t a1, char a2)
{
}

void sub_10025B9A4(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404EB8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10025BA0C;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

void sub_10025BA0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 139) != v2)
  {
    *(_BYTE *)(v1 + 139) = v2;
    uint64_t v3 = sub_100404EB8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10025A730;
    void v4[3] = &unk_10087EB68;
    v4[4] = v1;
    int v5 = 10;
    sub_100405384(v3, v4);
  }

void sub_10025BA88(uint64_t a1, char a2)
{
}

void sub_10025BA90(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404EB8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10025BAF8;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

void sub_10025BAF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 140) != v2)
  {
    *(_BYTE *)(v1 + 140) = v2;
    uint64_t v3 = sub_100404EB8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10025A730;
    void v4[3] = &unk_10087EB68;
    v4[4] = v1;
    int v5 = 11;
    sub_100405384(v3, v4);
  }

void sub_10025BB74(uint64_t a1, char a2)
{
}

void sub_10025BB7C(uint64_t a1, char a2)
{
  if ((_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD") & 1) == 0)
  {
    uint64_t v4 = sub_100404EB8();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10025BBFC;
    v5[3] = &unk_1008800D8;
    v5[4] = a1;
    char v6 = a2;
    sub_100405384(v4, v5);
  }

void sub_10025BBFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 141) != v2)
  {
    *(_BYTE *)(v1 + 141) = v2;
    uint64_t v3 = sub_100404EB8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10025A730;
    void v4[3] = &unk_10087EB68;
    v4[4] = v1;
    int v5 = 12;
    sub_100405384(v3, v4);
  }

void sub_10025BC78(uint64_t a1, char a2)
{
}

void sub_10025BC80(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404EB8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10025BCE8;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

void sub_10025BCE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 142) != v2)
  {
    *(_BYTE *)(v1 + 142) = v2;
    uint64_t v3 = sub_100404EB8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10025A730;
    void v4[3] = &unk_10087EB68;
    v4[4] = v1;
    int v5 = 13;
    sub_100405384(v3, v4);
  }

void sub_10025BD64(uint64_t a1, char a2)
{
}

void sub_10025BD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD") & 1) == 0)
  {
    uint64_t v6 = sub_100404EB8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10025BDF8;
    v7[3] = &unk_100888050;
    v7[4] = a1;
    v7[5] = a2;
    void v7[6] = a3;
    sub_100405384(v6, v7);
  }

void sub_10025BDF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = (unsigned __int8 *)(v1 + 160);
  uint64_t v3 = (unsigned __int8 *)(a1 + 40);
  if (*(_DWORD *)(v1 + 164) != *(_DWORD *)(a1 + 44)
    || *v2 != *v3
    || *(unsigned __int8 *)(v1 + 168) != *(unsigned __int8 *)(a1 + 48))
  {
    *(_OWORD *)int v2 = *(_OWORD *)v3;
    uint64_t v4 = sub_100404EB8();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10025A730;
    v5[3] = &unk_10087EB68;
    v5[4] = v1;
    int v6 = 14;
    sub_100405384(v4, v5);
  }

void sub_10025BEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10025BEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100404EB8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10025BF0C;
  v5[3] = &unk_10087F8E0;
  v5[4] = a1;
  void v5[5] = a2;
  sub_100405384(v4, v5);
}

void sub_10025BF0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(int **)(a1 + 40);
  int v3 = *v1;
  *(_DWORD *)(v2 + 259) = *(int *)((char *)v1 + 3);
  *(_DWORD *)(v2 + 256) = v3;
  uint64_t v4 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(v2 + 256);
    int v6 = *(unsigned __int8 *)(v2 + 257);
    int v7 = *(unsigned __int8 *)(v2 + 258);
    int v8 = *(unsigned __int8 *)(v2 + 259);
    int v9 = *(unsigned __int8 *)(v2 + 260);
    int v10 = *(unsigned __int8 *)(v2 + 261);
    int v11 = *(unsigned __int8 *)(v2 + 262);
    *(_DWORD *)int v93 = 67110656;
    *(_DWORD *)&v93[4] = v5;
    *(_WORD *)&v93[8] = 1024;
    *(_DWORD *)&v93[10] = v6;
    *(_WORD *)&v93[14] = 1024;
    *(_DWORD *)&v93[16] = v7;
    *(_WORD *)&v93[20] = 1024;
    *(_DWORD *)&v93[22] = v8;
    *(_WORD *)&v93[26] = 1024;
    *(_DWORD *)&v93[28] = v9;
    LOWORD(v94) = 1024;
    *(_DWORD *)((char *)&v94 + 2) = v10;
    HIWORD(v94) = 1024;
    int v95 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Allowed channels array - unii1 %d, unii3 %d, unii4 %d, unii5a %d, unii5b %d, unii5c %d, unii5d %d",  v93,  0x2Cu);
  }

  uint64_t v12 = *(char *)(v2 + 69);
  unint64_t v13 = *(char **)(v2 + 72);
  *(void *)(v2 + sub_100242FAC(v40 - 80) = v13;
  if (*(_BYTE *)(v2 + 257) && *(unsigned __int8 *)(v2 + 157) != 255)
  {
    unint64_t v14 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v14)
    {
      uint64_t v15 = v14 - (void)v13;
      uint64_t v16 = v15 >> 1;
      else {
        unint64_t v17 = v16;
      }
      int v18 = sub_10024E33C(v2 + 88, v17);
      uint64_t v19 = *(char **)(v2 + 72);
      unint64_t v20 = *(char **)(v2 + 80);
      int v22 = &v18[v21];
      *int v18 = 2;
      unint64_t v13 = (char *)(v18 + 1);
      while (v20 != v19)
      {
        int v23 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *--int v18 = v23;
      }

      *(void *)(v2 + 72) = v18;
      *(void *)(v2 + sub_100242FAC(v40 - 80) = v13;
      *(void *)(v2 + 88) = v22;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      *(_DWORD *)unint64_t v13 = 2;
      v13 += 4;
    }

    *(void *)(v2 + sub_100242FAC(v40 - 80) = v13;
  }

  if (*(_BYTE *)(v2 + 256) && *(unsigned __int8 *)(v2 + 156) != 255)
  {
    unint64_t v24 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v24)
    {
      int v26 = *(char **)(v2 + 72);
      uint64_t v27 = (v13 - v26) >> 2;
      unint64_t v28 = v27 + 1;
      uint64_t v29 = v24 - (void)v26;
      if (v29 >> 1 > v28) {
        unint64_t v28 = v29 >> 1;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        uint64_t v31 = (char *)sub_10024E33C(v2 + 88, v30);
        int v26 = *(char **)(v2 + 72);
        unint64_t v13 = *(char **)(v2 + 80);
      }

      else
      {
        uint64_t v31 = 0LL;
      }

      char v32 = &v31[4 * v27];
      int v33 = &v31[4 * v30];
      *(_DWORD *)char v32 = 1;
      uint64_t v25 = v32 + 4;
      while (v13 != v26)
      {
        int v34 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v32 - 1) = v34;
        v32 -= 4;
      }

      *(void *)(v2 + 72) = v32;
      *(void *)(v2 + sub_100242FAC(v40 - 80) = v25;
      *(void *)(v2 + 88) = v33;
      if (v26) {
        operator delete(v26);
      }
    }

    else
    {
      *(_DWORD *)unint64_t v13 = 1;
      uint64_t v25 = v13 + 4;
    }

    *(void *)(v2 + sub_100242FAC(v40 - 80) = v25;
    unint64_t v13 = v25;
  }

  if (*(_BYTE *)(v2 + 259) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    unint64_t v35 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v35)
    {
      unint64_t v37 = *(char **)(v2 + 72);
      uint64_t v38 = (v13 - v37) >> 2;
      unint64_t v39 = v38 + 1;
      uint64_t v40 = v35 - (void)v37;
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        int v42 = (char *)sub_10024E33C(v2 + 88, v41);
        unint64_t v37 = *(char **)(v2 + 72);
        unint64_t v13 = *(char **)(v2 + 80);
      }

      else
      {
        int v42 = 0LL;
      }

      uint64_t v43 = &v42[4 * v38];
      unint64_t v44 = &v42[4 * v41];
      *(_DWORD *)uint64_t v43 = 4;
      __int16 v36 = v43 + 4;
      while (v13 != v37)
      {
        int v45 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v43 - 1) = v45;
        v43 -= 4;
      }

      *(void *)(v2 + 72) = v43;
      *(void *)(v2 + sub_100242FAC(v40 - 80) = v36;
      *(void *)(v2 + 88) = v44;
      if (v37) {
        operator delete(v37);
      }
    }

    else
    {
      *(_DWORD *)unint64_t v13 = 4;
      __int16 v36 = v13 + 4;
    }

    *(void *)(v2 + sub_100242FAC(v40 - 80) = v36;
    unint64_t v13 = v36;
  }

  if (*(_BYTE *)(v2 + 260) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    unint64_t v46 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v46)
    {
      int v48 = *(char **)(v2 + 72);
      uint64_t v49 = (v13 - v48) >> 2;
      unint64_t v50 = v49 + 1;
      uint64_t v51 = v46 - (void)v48;
      if (v51 >> 1 > v50) {
        unint64_t v50 = v51 >> 1;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        unint64_t v53 = (char *)sub_10024E33C(v2 + 88, v52);
        int v48 = *(char **)(v2 + 72);
        unint64_t v13 = *(char **)(v2 + 80);
      }

      else
      {
        unint64_t v53 = 0LL;
      }

      uint64_t v54 = &v53[4 * v49];
      unint64_t v55 = &v53[4 * v52];
      *(_DWORD *)uint64_t v54 = 5;
      uint64_t v47 = v54 + 4;
      while (v13 != v48)
      {
        int v56 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v54 - 1) = v56;
        v54 -= 4;
      }

      *(void *)(v2 + 72) = v54;
      *(void *)(v2 + sub_100242FAC(v40 - 80) = v47;
      *(void *)(v2 + 88) = v55;
      if (v48) {
        operator delete(v48);
      }
    }

    else
    {
      *(_DWORD *)unint64_t v13 = 5;
      uint64_t v47 = v13 + 4;
    }

    *(void *)(v2 + sub_100242FAC(v40 - 80) = v47;
    unint64_t v13 = v47;
  }

  if (*(_BYTE *)(v2 + 261) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    unint64_t v57 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v57)
    {
      uint64_t v59 = *(char **)(v2 + 72);
      uint64_t v60 = (v13 - v59) >> 2;
      unint64_t v61 = v60 + 1;
      uint64_t v62 = v57 - (void)v59;
      if (v62 >> 1 > v61) {
        unint64_t v61 = v62 >> 1;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63)
      {
        uint64_t v64 = (char *)sub_10024E33C(v2 + 88, v63);
        uint64_t v59 = *(char **)(v2 + 72);
        unint64_t v13 = *(char **)(v2 + 80);
      }

      else
      {
        uint64_t v64 = 0LL;
      }

      int v65 = &v64[4 * v60];
      uint64_t v66 = &v64[4 * v63];
      *(_DWORD *)int v65 = 6;
      int v58 = v65 + 4;
      while (v13 != v59)
      {
        int v67 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v65 - 1) = v67;
        v65 -= 4;
      }

      *(void *)(v2 + 72) = v65;
      *(void *)(v2 + sub_100242FAC(v40 - 80) = v58;
      *(void *)(v2 + 88) = v66;
      if (v59) {
        operator delete(v59);
      }
    }

    else
    {
      *(_DWORD *)unint64_t v13 = 6;
      int v58 = v13 + 4;
    }

    *(void *)(v2 + sub_100242FAC(v40 - 80) = v58;
    unint64_t v13 = v58;
  }

  if (*(_BYTE *)(v2 + 262) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    unint64_t v68 = *(void *)(v2 + 88);
    if ((unint64_t)v13 >= v68)
    {
      int v70 = *(char **)(v2 + 72);
      uint64_t v71 = (v13 - v70) >> 2;
      unint64_t v72 = v71 + 1;
      uint64_t v73 = v68 - (void)v70;
      if (v73 >> 1 > v72) {
        unint64_t v72 = v73 >> 1;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        uint64_t v75 = (char *)sub_10024E33C(v2 + 88, v74);
        int v70 = *(char **)(v2 + 72);
        unint64_t v13 = *(char **)(v2 + 80);
      }

      else
      {
        uint64_t v75 = 0LL;
      }

      int v76 = &v75[4 * v71];
      uint64_t v77 = &v75[4 * v74];
      *(_DWORD *)int v76 = 7;
      uint64_t v69 = v76 + 4;
      while (v13 != v70)
      {
        int v78 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v76 - 1) = v78;
        v76 -= 4;
      }

      *(void *)(v2 + 72) = v76;
      *(void *)(v2 + sub_100242FAC(v40 - 80) = v69;
      *(void *)(v2 + 88) = v77;
      if (v70) {
        operator delete(v70);
      }
    }

    else
    {
      *(_DWORD *)unint64_t v13 = 7;
      uint64_t v69 = v13 + 4;
    }

    *(void *)(v2 + sub_100242FAC(v40 - 80) = v69;
    unint64_t v13 = v69;
  }

  unsigned int v79 = *(char **)(v2 + 72);
  unint64_t v80 = v13;
  if (v79 != v13)
  {
    unint64_t v80 = *(char **)(v2 + 72);
    while (*(_DWORD *)v80 != *(unsigned __int8 *)(v2 + 69))
    {
      v80 += 4;
      if (v80 == v13)
      {
        unint64_t v80 = v13;
        break;
      }
    }
  }

  if (v80 == v13)
  {
    int v81 = *(unsigned __int8 *)(v2 + 145);
    *(_BYTE *)(v2 + 145) = 0;
    if (v13 != v79)
    {
      uint64_t v82 = 0LL;
      unsigned int v83 = 0;
      int v84 = *(_DWORD *)(v2 + 148);
      while (1)
      {
        int v85 = *(_DWORD *)&v79[4 * v82];
        if (v85 != v84) {
          break;
        }
        if (!*(_BYTE *)(v2 + 146)) {
          goto LABEL_127;
        }
        uint64_t v82 = ++v83;
      }

      LOBYTE(v84) = v85;
LABEL_127:
      *(_BYTE *)(v2 + 69) = v84;
      *(_DWORD *)(v2 + 96) = v83;
      *(_BYTE *)(v2 + 145) = 1;
      __int16 v86 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        else {
          int v87 = off_10088A020[(char)v84];
        }
        *(_DWORD *)int v93 = 136315138;
        *(void *)&v93[4] = v87;
        _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Channel map update - Sufficient Bandwidth for HRB TDD in band %s",  v93,  0xCu);
      }
    }

void sub_10025C6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 24;
  uint64_t v4 = sub_100404EB8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10025BF0C;
  v5[3] = &unk_10087F8E0;
  v5[4] = v3;
  void v5[5] = a2;
  sub_100405384(v4, v5);
}

void sub_10025C744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100404EB8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_10025C7B8;
  v8[3] = &unk_100888050;
  v8[4] = a1;
  void v8[5] = a4;
  v8[6] = a3;
  sub_100405384(v7, v8);
}

void sub_10025C7B8(void *a1)
{
  uint64_t v1 = a1[4];
  unsigned int v2 = *(_DWORD *)(v1 + 148);
  unsigned int v3 = v2;
  unint64_t v4 = a1[5] - 1LL;
  if (v4 <= 9 && ((0x3D3u >> v4) & 1) != 0)
  {
    unsigned int v3 = dword_1006BFEF8[v4];
    *(_DWORD *)(v1 + 148) = v3;
  }

  unint64_t v5 = a1[6];
  *(_BYTE *)(v1 + 146) = v5 > 0x28;
  int v6 = *(unsigned __int8 *)(v1 + 145);
  uint64_t v7 = *(char *)(v1 + 69);
  int v8 = (os_log_s *)qword_1008F76F8;
  if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
  {
    if (v2 > 8) {
      int v9 = "Unknown BSM Band Code";
    }
    else {
      int v9 = off_10088A020[v2];
    }
    if (v3 > 8) {
      int v10 = "Unknown BSM Band Code";
    }
    else {
      int v10 = off_10088A020[v3];
    }
    else {
      int v11 = off_10088A020[v7];
    }
    *(_DWORD *)int v26 = 136315906;
    *(void *)&v26[4] = v9;
    *(_WORD *)&v26[12] = 2080;
    *(void *)&v26[14] = v10;
    *(_WORD *)&v26[22] = 2048;
    uint64_t v27 = (void *)v5;
    *(_WORD *)unint64_t v28 = 2080;
    *(void *)&v28[2] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Wi-Fi switched from %s to %s and BW %lluMHz with HRB band %s",  v26,  0x2Au);
  }

  *(_BYTE *)(v1 + 145) = 0;
  if (*(_BYTE *)(v1 + 144))
  {
    uint64_t v12 = (os_log_s *)qword_1008F76F8;
    if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v26 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Wi-Fi band change ignored because forced UNII band is set",  v26,  2u);
    }
  }

  else
  {
    uint64_t v14 = *(void *)(v1 + 72);
    uint64_t v13 = *(void *)(v1 + 80);
    uint64_t v15 = v13 - v14;
    if (v13 == v14)
    {
LABEL_23:
      int v21 = 0;
    }

    else
    {
      uint64_t v16 = 0LL;
      unsigned int v17 = 0;
      unint64_t v18 = v15 >> 2;
      int v19 = *(_DWORD *)(v1 + 148);
      while (1)
      {
        int v20 = *(_DWORD *)(v14 + 4 * v16);
        if (v20 != v19) {
          break;
        }
        if (!*(_BYTE *)(v1 + 146)) {
          goto LABEL_25;
        }
        uint64_t v16 = ++v17;
        if (v18 <= v17) {
          goto LABEL_23;
        }
      }

      LOBYTE(v19) = v20;
LABEL_25:
      *(_BYTE *)(v1 + 69) = v19;
      *(_DWORD *)(v1 + 96) = v17;
      int v21 = 1;
      *(_BYTE *)(v1 + 145) = 1;
      int v22 = (os_log_s *)qword_1008F76F8;
      if (os_log_type_enabled((os_log_t)qword_1008F76F8, OS_LOG_TYPE_DEFAULT))
      {
        else {
          int v23 = off_10088A020[(char)v19];
        }
        else {
          unint64_t v24 = off_10088A020[v7];
        }
        *(_DWORD *)int v26 = 136315394;
        *(void *)&v26[4] = v23;
        *(_WORD *)&v26[12] = 2080;
        *(void *)&v26[14] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "BandSwitchManager: Sufficient Bandwidth for HRB TDD in band %s and previous HRB %s",  v26,  0x16u);
        int v21 = *(unsigned __int8 *)(v1 + 145);
      }
    }

    if (v6 != v21 || *(unsigned __int8 *)(v1 + 69) != v7)
    {
      uint64_t v25 = sub_100404EB8();
      *(void *)int v26 = _NSConcreteStackBlock;
      *(void *)&void v26[8] = 3221225472LL;
      *(void *)&v26[16] = sub_10025A730;
      uint64_t v27 = &unk_10087EB68;
      *(void *)unint64_t v28 = v1;
      *(_DWORD *)&v28[8] = 18;
      sub_100405384(v25, v26);
    }
  }

void sub_10025CAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1 - 24;
  uint64_t v7 = sub_100404EB8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_10025C7B8;
  v8[3] = &unk_100888050;
  v8[4] = v6;
  void v8[5] = a4;
  v8[6] = a3;
  sub_100405384(v7, v8);
}

char *sub_10025CB64(uint64_t a1, char *__src, char *a3)
{
  unsigned int v3 = a3;
  unint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    unint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }

    *(void *)int v20 = *(void *)v3;
    unint64_t v28 = v20 + 8;
    unint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)____int128 src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    int v9 = __src + 8;
    int v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)unint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_10025CD68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10025CDA0(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10025CDD0(_Unwind_Exception *a1)
{
}

void sub_10025CDE4(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10025CE14(_Unwind_Exception *a1)
{
}

void sub_10025CE28(void *a1, _DWORD *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 1;
      }
      uint64_t v17 = (char *)sub_10024E33C(a1[4], v16);
      int v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      int v20 = (int *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v22 = 4 * (v21 >> 2);
        int v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          int v24 = *v20++;
          *(_DWORD *)int v23 = v24;
          v23 += 4;
          v22 -= 4LL;
        }

        while (v22);
      }

      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-4 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[4 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }

  *(_DWORD *)unint64_t v4 = *a2;
  a1[2] = v4 + 4;
}

char *sub_10025CF34(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    BOOL v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }

    while (v8 != v6);
  }

  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }

  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  int64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_10025CFF8(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10025D004(uint64_t a1, uint64_t a2, xpc_connection_t connection, dispatch_object_s *a4)
{
  *(void *)a1 = &off_10088A078;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = connection;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = 0LL;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 96) = 0LL;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + sub_100242FAC(v1 - 64) = 0u;
  *(_OWORD *)(a1 + 74) = 0u;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(_DWORD *)(a1 + 40) = xpc_connection_get_pid(connection);
  xpc_connection_set_context(*(xpc_connection_t *)(a1 + 16), (void *)a1);
  xpc_connection_set_finalizer_f(*(xpc_connection_t *)(a1 + 16), (xpc_finalizer_t)sub_10025D340);
  uint64_t v6 = *(_xpc_connection_s **)(a1 + 16);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_10025D354;
  handler[3] = &unk_100887318;
  handler[4] = a1;
  xpc_connection_set_event_handler(v6, handler);
  xpc_connection_set_target_queue(*(xpc_connection_t *)(a1 + 16), *(dispatch_queue_t *)(a1 + 24));
  xpc_connection_resume(*(xpc_connection_t *)(a1 + 16));
  uid_t euid = xpc_connection_get_euid(*(xpc_connection_t *)(a1 + 16));
  *(_DWORD *)(a1 + 44) = euid;
  memset(uu, 0, sizeof(uu));
  if (mbr_uid_to_uuid(euid, uu))
  {
    BOOL v8 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      int v17 = *(_DWORD *)(a1 + 44);
      uint64_t v18 = __error();
      int v19 = strerror(*v18);
      int v20 = *__error();
      *(_DWORD *)std::stringbuf::string_type buf = 67240706;
      int v25 = v17;
      __int16 v26 = 2082;
      uint64_t v27 = v19;
      __int16 v28 = 1026;
      int v29 = v20;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "mbr_uid_to_uuid for id %{public}d failed: %{public}s (%{public}d)",  buf,  0x18u);
    }

    int v9 = 0LL;
  }

  else
  {
    int v9 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", uu);
  }

  uint64_t v10 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v9;

  if (sub_10025D500(a1))
  {
    int v11 = 2;
LABEL_10:
    *(_DWORD *)(a1 + sub_100242FAC(v40 - 80) = v11;
    goto LABEL_11;
  }

  if (sub_10025D500(a1))
  {
    int v11 = 1;
    goto LABEL_10;
  }

void sub_10025D2C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete(v15);

  _Unwind_Resume(a1);
}

uint64_t sub_10025D340(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_10025D354(uint64_t a1, void *a2)
{
}

void sub_10025D35C(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      sub_10032EA44(v5);
    }
    (*(void (**)(uint64_t, xpc_object_t))(*(void *)a1 + 16LL))(a1, object);
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      sub_10032EB28(v6);
    }
  }

  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    uint64_t v7 = (os_log_s *)qword_1008F75F0;
    if (object == &_xpc_error_connection_invalid)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v8 = (void *)(a1 + 56);
        int v9 = 136446210;
        uint64_t v10 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Closed XPC connection to session %{public}s",  (uint8_t *)&v9,  0xCu);
      }

      (*(void (**)(uint64_t, void))(*(void *)a1 + 24LL))(a1, 0LL);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100664388(object, v7);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100664408();
  }

BOOL sub_10025D500(uint64_t a1)
{
  uint64_t v1 = (void *)xpc_connection_copy_entitlement_value(*(void *)(a1 + 16));
  if (!v1) {
    return 0LL;
  }
  unsigned int v2 = v1;
  BOOL v3 = xpc_get_type(v1) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v2);
  xpc_release(v2);
  return v3;
}

id sub_10025D564(uint64_t a1)
{
  audit_token_t token = v14;
  uint64_t v1 = SecTaskCreateWithAuditToken(0LL, &token);
  unsigned int v2 = v1;
  if (v1)
  {
    CFErrorRef error = 0LL;
    CFStringRef v3 = SecTaskCopySigningIdentifier(v1, &error);
    CFStringRef v4 = v3;
    CFErrorRef v5 = error;
    if (error)
    {
      uint64_t v6 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Failed to copy signing ID - using framework-provided bundle identifier!",  buf,  2u);
        CFErrorRef v5 = error;
      }

      CFRelease(v5);
      if (v4)
      {
        uint64_t v7 = 0LL;
        CFRelease(v4);
LABEL_14:
        CFRelease(v2);
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v7 = (void *)v3;
      if (v3) {
        goto LABEL_14;
      }
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100664498();
      }
    }

    uint64_t v7 = 0LL;
    goto LABEL_14;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
    sub_10066446C();
  }
  uint64_t v7 = 0LL;
LABEL_15:
  if (![v7 length])
  {
    BOOL v8 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UNKNOWN-%0000x",  arc4random_uniform(0xFFFFu));
    uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);

    uint64_t v7 = (void *)v9;
  }

  return v7;
}

void sub_10025D6F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10025D70C(uint64_t a1)
{
  *(void *)a1 = &off_10088A078;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    sub_10032E974(v2);
  }
  if (qword_1008D9178 != -1) {
    dispatch_once(&qword_1008D9178, &stru_10088A0B8);
  }
  sub_1005334B8(qword_1008D9170, *(_DWORD *)(a1 + 40));

  return a1;
}

void sub_10025D7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10025D7E8(uint64_t a1)
{
  return sub_10025D500(a1);
}

void *sub_10025D7F4(void *result, const char *a2)
{
  if (result)
  {
    CFStringRef v3 = result;
    if (xpc_get_type(result) == (xpc_type_t)&_xpc_type_dictionary) {
      return (void *)(xpc_dictionary_get_value(v3, a2) != 0LL);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10025D848( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1 || xpc_get_type(a1) != (xpc_type_t)&_xpc_type_dictionary) {
    return 3LL;
  }
  uint64_t v18 = &a9;
  while (1)
  {
    id v12 = (const char **)v18;
    int v19 = (uint64_t (**)(void, void))(v18 + 1);
    uint64_t v13 = *v12;
    if (!*v12) {
      return 0LL;
    }
    xpc_object_t value = xpc_dictionary_get_value(a1, *v12);
    uint64_t v15 = v19 + 1;
    unint64_t v16 = (uint64_t (*)(xpc_object_t, void))*v19;
    uint64_t v18 = (uint64_t *)(v19 + 2);
    if (!value) {
      break;
    }
    uint64_t result = v16(value, *v15);
LABEL_10:
    if ((_DWORD)result) {
      return result;
    }
  }

  if (!a2)
  {
    uint64_t result = 0LL;
    goto LABEL_10;
  }

  int v17 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    uint64_t v21 = v13;
    _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "No XPC object for key: %{public}s",  buf,  0xCu);
  }

  return 3LL;
}

uint64_t sub_10025D988(void *a1, _BYTE *a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    char value = xpc_int64_get_value(a1);
    uint64_t result = 0LL;
    *a2 = value;
  }

  else
  {
    CFStringRef v4 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006644C4(a1, v4);
    }
    return 3LL;
  }

  return result;
}

uint64_t sub_10025DA04(void *a1, _WORD *a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    __int16 value = xpc_int64_get_value(a1);
    uint64_t result = 0LL;
    *a2 = value;
  }

  else
  {
    CFStringRef v4 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006644C4(a1, v4);
    }
    return 3LL;
  }

  return result;
}

uint64_t sub_10025DA80(void *a1, _DWORD *a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    int value = xpc_int64_get_value(a1);
    uint64_t result = 0LL;
    *a2 = value;
  }

  else
  {
    CFStringRef v4 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006644C4(a1, v4);
    }
    return 3LL;
  }

  return result;
}

uint64_t sub_10025DAFC(void *a1, int64_t *a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    int64_t value = xpc_int64_get_value(a1);
    uint64_t result = 0LL;
    *a2 = value;
  }

  else
  {
    CFStringRef v4 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006644C4(a1, v4);
    }
    return 3LL;
  }

  return result;
}

uint64_t sub_10025DB78(void *a1, int64_t *a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    int64_t value = xpc_int64_get_value(a1);
    uint64_t result = 0LL;
    *a2 = value;
  }

  else
  {
    CFStringRef v4 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006644C4(a1, v4);
    }
    return 3LL;
  }

  return result;
}

uint64_t sub_10025DBF4(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = xpc_data_get_bytes_ptr(a1);
    size_t length = xpc_data_get_length(a1);
    sub_10056AB04(&v8, bytes_ptr, length);
    sub_10002EAC8(a2, (uint64_t)&v8);
    BOOL v8 = &off_10087FAA8;
    if (v9) {
      sub_1002CD254(v9);
    }
    return 0LL;
  }

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_null) {
    return 0LL;
  }
  CFStringRef v4 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
    sub_100664534(a1, v4);
  }
  return 3LL;
}

void sub_10025DCD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10) {
    sub_1002CD254(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_10025DCF4(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = (int8x16_t *)xpc_data_get_bytes_ptr(a1);
    unsigned __int8 length = xpc_data_get_length(a1);
    sub_1006343C4((uint64_t)&v8, bytes_ptr, length);
    double result = *(double *)&v8;
    *(_OWORD *)a2 = v8;
    *(_DWORD *)(a2 + 16) = v9;
  }

  else
  {
    CFStringRef v4 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006645A4(a1, v4);
    }
  }

  return result;
}

uint64_t sub_10025DDD0(void *a1, void *a2)
{
  CFErrorRef v5 = &off_10087FAA8;
  uint64_t v6 = 0LL;
  uint64_t v3 = sub_10025DBF4(a1, (uint64_t)&v5);
  if (!(_DWORD)v3)
  {
    if (sub_10056AAD8((uint64_t)&v5) == 6)
    {
      sub_10056AB74((uint64_t)&v5, a2, 6uLL);
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = 3LL;
    }
  }

  CFErrorRef v5 = &off_10087FAA8;
  if (v6) {
    sub_1002CD254(v6);
  }
  return v3;
}

void sub_10025DE58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10) {
    sub_1002CD254(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025DE74(uint64_t a1, void *a2)
{
  *a2 = a1;
  return 0LL;
}

uint64_t sub_10025DE80(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472LL;
    applier[2] = sub_10025DF38;
    applier[3] = &unk_10088A098;
    applier[4] = a2;
    if (xpc_array_apply(a1, applier)) {
      return 0LL;
    }
    else {
      return 3LL;
    }
  }

  else
  {
    CFStringRef v4 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100664614(a1, v4);
    }
    return 3LL;
  }

BOOL sub_10025DF38(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v24 = 0uLL;
  int v25 = 0;
  sub_10063432C(&v24);
  sub_10025DCF4(a3, (uint64_t)&v24);
  int v6 = v5;
  if (!v5)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    for (uint64_t i = (unsigned __int8 *)*v7; i != (unsigned __int8 *)v7[1]; i += 20)
    {
      uint64_t v7 = *(void **)(a1 + 32);
    }

    unint64_t v9 = v7[2];
    if ((unint64_t)i >= v9)
    {
      unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&i[-*v7] >> 2);
      if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        abort();
      }
      unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - *v7) >> 2);
      uint64_t v14 = 2 * v13;
      if (2 * v13 <= v12 + 1) {
        uint64_t v14 = v12 + 1;
      }
      if (v13 >= 0x666666666666666LL) {
        unint64_t v15 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v16 = (char *)sub_100050420((uint64_t)(v7 + 2), v15);
      }
      else {
        unint64_t v16 = 0LL;
      }
      int v17 = &v16[20 * v12];
      uint64_t v18 = &v16[20 * v15];
      __int128 v19 = v24;
      *((_DWORD *)v17 + 4) = v25;
      *(_OWORD *)int v17 = v19;
      int v11 = v17 + 20;
      uint64_t v21 = (char *)*v7;
      int v20 = (char *)v7[1];
      if (v20 != (char *)*v7)
      {
        do
        {
          __int128 v22 = *(_OWORD *)(v20 - 20);
          *((_DWORD *)v17 - 1) = *((_DWORD *)v20 - 1);
          *(_OWORD *)(v17 - 20) = v22;
          v17 -= 20;
          v20 -= 20;
        }

        while (v20 != v21);
        int v20 = (char *)*v7;
      }

      void *v7 = v17;
      v7[1] = v11;
      v7[2] = v18;
      if (v20) {
        operator delete(v20);
      }
    }

    else
    {
      __int128 v10 = v24;
      *((_DWORD *)i + 4) = v25;
      *(_OWORD *)uint64_t i = v10;
      int v11 = (char *)(i + 20);
    }

    v7[1] = v11;
  }

  return v6 == 0;
}

NSUUID *sub_10025E0F0(void *a1, const char *a2)
{
  int64_t value = (NSUUID *)xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    uint64_t v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_uuid) {
      int64_t value = -[NSUUID initWithUUIDBytes:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDBytes:",  xpc_uuid_get_bytes(v3));
    }
    else {
      int64_t value = 0LL;
    }
  }

  return value;
}

id sub_10025E150(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    uint64_t v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_data)
    {
      bytes_ptr = xpc_data_get_bytes_ptr(v3);
      int v5 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  bytes_ptr,  xpc_data_get_length(v3));
      xpc_object_t value = (xpc_object_t)objc_claimAutoreleasedReturnValue(v5);
    }

    else
    {
      xpc_object_t value = 0LL;
    }
  }

  return value;
}

id sub_10025E1C8(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    uint64_t v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_string)
    {
      CFStringRef v4 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  xpc_string_get_string_ptr(v3));
      xpc_object_t value = (xpc_object_t)objc_claimAutoreleasedReturnValue(v4);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100664684();
      }
      xpc_object_t value = 0LL;
    }
  }

  return value;
}

id sub_10025E254(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    uint64_t v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_int64)
    {
      CFStringRef v4 = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", xpc_int64_get_value(v3));
      xpc_object_t value = (xpc_object_t)objc_claimAutoreleasedReturnValue(v4);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006646E8();
      }
      xpc_object_t value = 0LL;
    }
  }

  return value;
}

uint64_t sub_10025E2E0(void *a1, const char *a2)
{
  uint64_t result = (uint64_t)xpc_dictionary_get_value(a1, a2);
  if (result)
  {
    uint64_t v3 = (void *)result;
    if (xpc_get_type((xpc_object_t)result) == (xpc_type_t)&_xpc_type_int64)
    {
      return xpc_int64_get_value(v3) != 0;
    }

    else if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_BOOL)
    {
      return xpc_BOOL_get_value(v3);
    }

    else
    {
      uint64_t result = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_10066474C();
        return 0LL;
      }
    }
  }

  return result;
}

id sub_10025E384(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  id v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      CFStringRef v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      for (size_t i = 0LL; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          id v3 = v4;
          goto LABEL_16;
        }

        xpc_object_t v6 = xpc_array_get_value(v3, i);
        uint64_t v7 = v6;
        if (!v6) {
          break;
        }
        if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_uuid) {
          break;
        }
        __int128 v8 = -[NSUUID initWithUUIDBytes:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDBytes:",  xpc_uuid_get_bytes(v7));
        if (!v8) {
          break;
        }
        [v4 addObject:v8];
      }

      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006647B0();
      }
      id v3 = 0LL;
LABEL_16:
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006647DC();
      }
      id v3 = 0LL;
    }
  }

  return v3;
}

void sub_10025E4DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10025E4FC(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  id v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      CFStringRef v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      for (size_t i = 0LL; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          id v3 = v4;
          goto LABEL_16;
        }

        xpc_object_t v6 = xpc_array_get_value(v3, i);
        uint64_t v7 = v6;
        if (!v6) {
          break;
        }
        if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_data) {
          break;
        }
        bytes_ptr = xpc_data_get_bytes_ptr(v7);
        unint64_t v9 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  bytes_ptr,  xpc_data_get_length(v7));
        __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        if (!v10) {
          break;
        }
        [v4 addObject:v10];
      }

      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100664840();
      }
      id v3 = 0LL;
LABEL_16:
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006647DC();
      }
      id v3 = 0LL;
    }
  }

  return v3;
}

void sub_10025E66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10025E68C(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  id v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      CFStringRef v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      for (size_t i = 0LL; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          id v3 = v4;
          goto LABEL_18;
        }

        xpc_object_t v6 = xpc_array_get_value(v3, i);
        uint64_t v7 = v6;
        if (v6 && xpc_get_type(v6) == (xpc_type_t)&_xpc_type_data)
        {
          bytes_ptr = xpc_data_get_bytes_ptr(v7);
          __int128 v10 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  bytes_ptr,  xpc_data_get_length(v7));
          __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(v10);
        }

        else
        {
          __int128 v8 = 0LL;
        }

        id v11 = [v8 mutableCopy];

        if (!v11) {
          break;
        }
        [v4 addObject:v11];
      }

      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100664840();
      }
      id v3 = 0LL;
LABEL_18:
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006647DC();
      }
      id v3 = 0LL;
    }
  }

  return v3;
}

void sub_10025E814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10025E840(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  id v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      CFStringRef v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      for (size_t i = 0LL; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          id v3 = v4;
          goto LABEL_16;
        }

        xpc_object_t v6 = xpc_array_get_value(v3, i);
        uint64_t v7 = v6;
        if (!v6) {
          break;
        }
        if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_string) {
          break;
        }
        __int128 v8 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  xpc_string_get_string_ptr(v7));
        unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        if (!v9) {
          break;
        }
        [v4 addObject:v9];
      }

      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006647B0();
      }
      id v3 = 0LL;
LABEL_16:
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006647DC();
      }
      id v3 = 0LL;
    }
  }

  return v3;
}

void sub_10025E994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10025E9B4(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  id v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      CFStringRef v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      size_t count = xpc_array_get_count(v3);
      if (count)
      {
        size_t v6 = 0LL;
        while (1)
        {
          xpc_object_t v7 = xpc_array_get_value(v3, v6);
          __int128 v8 = v7;
          if (!v7) {
            break;
          }
          unint64_t v9 = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", xpc_int64_get_value(v8));
          __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
          if (!v10) {
            break;
          }
          [v4 addObject:v10];

          if (count == ++v6) {
            goto LABEL_12;
          }
        }

        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10066486C();
        }
        id v3 = 0LL;
      }

      else
      {
LABEL_12:
        id v3 = v4;
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006647DC();
      }
      id v3 = 0LL;
    }
  }

  return v3;
}

void sub_10025EB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10025EB38(id a1)
{
  uint64_t v1 = operator new(0x90uLL);
  sub_100532F0C((uint64_t)v1);
  qword_1008D9170 = (uint64_t)v1;
}

void sub_10025EB68(_Unwind_Exception *a1)
{
}

xpc_type_t sub_10025EB7C(xpc_object_t object)
{
  return xpc_get_type(object);
}

void sub_10025EB84(_BYTE *a1)
{
  switch(*a1)
  {
    case 1:
    case 2:
      int v2 = *((unsigned __int16 *)a1 + 1);
      if (v2 == 16 || v2 == 8) {
        goto LABEL_7;
      }
      goto LABEL_20;
    case 3:
      if (*((_WORD *)a1 + 1) == 16)
      {
LABEL_7:
        CFStringRef v4 = (void **)(a1 + 8);
        goto LABEL_19;
      }

      goto LABEL_20;
    case 4:
    case 8:
      CFStringRef v4 = (void **)(a1 + 8);
      id v3 = (void *)*((void *)a1 + 1);
      size_t v5 = *((unsigned __int16 *)a1 + 1);
      goto LABEL_18;
    case 6:
      if (!*((_WORD *)a1 + 1)) {
        goto LABEL_16;
      }
      uint64_t v6 = 0LL;
      unint64_t v7 = 0LL;
      do
      {
        sub_10025EB84(*((void *)a1 + 1) + v6);
        ++v7;
        unint64_t v8 = *((unsigned __int16 *)a1 + 1);
        v6 += 16LL;
      }

      while (v7 < v8);
      goto LABEL_15;
    case 7:
      if (*((_WORD *)a1 + 1))
      {
        uint64_t v9 = 0LL;
        unint64_t v10 = 0LL;
        do
        {
          sub_10025EB84(*((void *)a1 + 1) + v9);
          ++v10;
          unint64_t v8 = *((unsigned __int16 *)a1 + 1);
          v9 += 16LL;
        }

        while (v10 < v8);
LABEL_15:
        size_t v5 = 16 * v8;
      }

      else
      {
LABEL_16:
        size_t v5 = 0LL;
      }

      CFStringRef v4 = (void **)(a1 + 8);
      id v3 = (void *)*((void *)a1 + 1);
LABEL_18:
      bzero(v3, v5);
LABEL_19:
      free(*v4);
LABEL_20:
      bzero(a1, 0x10uLL);
      return;
    default:
      goto LABEL_20;
  }

BOOL sub_10025EC98(uint64_t *a1, uint64_t a2)
{
  if (*((_BYTE *)a1 + 15))
  {
    sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
    goto LABEL_79;
  }

  unsigned int v3 = *((unsigned __int16 *)a1 + 5);
  uint64_t v4 = *((unsigned __int16 *)a1 + 6);
  if (v3 <= v4)
  {
LABEL_79:
    unint64_t v50 = "ByteStream_NumReadBytesAvail(*pByteStream) >= 1";
    goto LABEL_81;
  }

  if (*((_BYTE *)a1 + 14) != 1)
  {
    unint64_t v50 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
LABEL_81:
    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  336,  v50);
  }

  uint64_t v6 = *a1;
  *((_WORD *)a1 + 6) = v4 + 1;
  int v7 = *(unsigned __int8 *)(v6 + v4);
  *(_BYTE *)a2 = v7;
  if ((int)(v3 - (v4 + 1)) <= 1) {
    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  337,  "ByteStream_NumReadBytesAvail(*pByteStream) >= 2");
  }
  size_t v8 = *(unsigned __int16 *)(v6 + v4 + 1);
  *(_WORD *)(a2 + 2) = v8;
  unsigned __int16 v9 = v4 + 3;
  *((_WORD *)a1 + 6) = v4 + 3;
  switch(v7)
  {
    case 0:
      return 1LL;
    case 1:
      if ((_DWORD)v8 != 16)
      {
        if ((_DWORD)v8 == 8)
        {
          unint64_t v10 = malloc(8uLL);
          *(void *)(a2 + 8) = v10;
          if (*((_BYTE *)a1 + 14) != 1)
          {
            unint64_t v53 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
            goto LABEL_96;
          }

          if (*((_BYTE *)a1 + 15))
          {
            sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT"
                                   "_DataElements.cpp");
LABEL_95:
            unint64_t v53 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_UINT64))";
LABEL_96:
            sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  347,  v53);
          }

          uint64_t v11 = *((unsigned __int16 *)a1 + 6);
          goto LABEL_17;
        }

        if ((int)(v3 - v9) <= 3) {
          sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  352,  "ByteStream_NumReadBytesAvail(*pByteStream) >= 4");
        }
        goto LABEL_71;
      }

      uint64_t v27 = malloc(0x10uLL);
      *(void *)(a2 + 8) = v27;
      if (*((_BYTE *)a1 + 14) != 1)
      {
        unint64_t v55 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
        goto LABEL_104;
      }

      if (*((_BYTE *)a1 + 15))
      {
        sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
LABEL_103:
        unint64_t v55 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_UINT128))";
LABEL_104:
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  350,  v55);
      }

      uint64_t v28 = *((unsigned __int16 *)a1 + 6);
      goto LABEL_67;
    case 2:
      if ((_DWORD)v8 != 16)
      {
        if ((_DWORD)v8 == 8)
        {
          unint64_t v10 = malloc(8uLL);
          *(void *)(a2 + 8) = v10;
          if (*((_BYTE *)a1 + 14) == 1)
          {
            if (*((_BYTE *)a1 + 15))
            {
              sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/"
                                     "BT_DataElements.cpp");
            }

            else
            {
              uint64_t v11 = *((unsigned __int16 *)a1 + 6);
              if ((unint64_t)*((unsigned __int16 *)a1 + 5) - v11 > 7)
              {
LABEL_17:
                void *v10 = *(void *)(*a1 + v11);
                __int16 v12 = v11 + 8;
                goto LABEL_72;
              }
            }

            uint64_t v54 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_INT64))";
          }

          else
          {
            uint64_t v54 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
          }

          sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  359,  v54);
        }

        if ((int)(v3 - v9) <= 3) {
          sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  364,  "ByteStream_NumReadBytesAvail(*pByteStream) >= 4");
        }
        goto LABEL_71;
      }

      uint64_t v27 = malloc(0x10uLL);
      *(void *)(a2 + 8) = v27;
      if (*((_BYTE *)a1 + 14) == 1)
      {
        if (*((_BYTE *)a1 + 15))
        {
          sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        }

        else
        {
          uint64_t v28 = *((unsigned __int16 *)a1 + 6);
        }

        int v56 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_INT128))";
      }

      else
      {
        int v56 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
      }

      sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  362,  v56);
    case 3:
      if ((_DWORD)v8 == 16)
      {
        uint64_t v27 = malloc(0x10uLL);
        *(void *)(a2 + 8) = v27;
        if (*((_BYTE *)a1 + 14) == 1)
        {
          if (*((_BYTE *)a1 + 15))
          {
            sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT"
                                   "_DataElements.cpp");
          }

          else
          {
            uint64_t v28 = *((unsigned __int16 *)a1 + 6);
            if (*((unsigned __int16 *)a1 + 5) - (int)v28 > 15)
            {
LABEL_67:
              _OWORD *v27 = *(_OWORD *)(*a1 + v28);
              __int16 v12 = v28 + 16;
              goto LABEL_72;
            }
          }

          unint64_t v52 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (16)";
        }

        else
        {
          unint64_t v52 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
        }

        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  371,  v52);
      }

      if ((int)(v3 - v9) <= 3) {
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  373,  "ByteStream_NumReadBytesAvail(*pByteStream) >= 4");
      }
LABEL_71:
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v6 + (unsigned __int16)(v4 + 3));
      __int16 v12 = *((_WORD *)a1 + 6) + 4;
LABEL_72:
      *((_WORD *)a1 + 6) = v12;
      return 1LL;
    case 4:
      unint64_t v13 = malloc(v8);
      *(void *)(a2 + 8) = v13;
      if (*((_BYTE *)a1 + 14) != 1)
      {
        uint64_t v40 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
LABEL_84:
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  379,  v40);
      }

      uint64_t v14 = v13;
      uint64_t v15 = *a1;
      uint64_t v16 = *((unsigned __int16 *)a1 + 6);
      if (*((_BYTE *)a1 + 15))
      {
        sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        int v17 = 0;
        LODWORD(v8) = *(unsigned __int16 *)(a2 + 2);
      }

      else
      {
        int v17 = *((unsigned __int16 *)a1 + 5) - (_DWORD)v16;
      }

      if (v17 < (int)v8)
      {
        uint64_t v40 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (copy->Size)";
        goto LABEL_84;
      }

      goto LABEL_59;
    case 5:
      if (v3 <= v9) {
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  383,  "ByteStream_NumReadBytesAvail(*pByteStream) >= 1");
      }
      *((_WORD *)a1 + 6) = v4 + 4;
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(v6 + (unsigned __int16)(v4 + 3)) != 0;
      return 1LL;
    case 6:
      int v29 = malloc(16LL * v8);
      *(void *)(a2 + 8) = v29;
      if (v29) {
        BOOL v30 = (_DWORD)v8 == 0;
      }
      else {
        BOOL v30 = 1;
      }
      if (v30) {
        return 0LL;
      }
      uint64_t v31 = 0LL;
      unint64_t v32 = 0LL;
      do
      {
        if ((sub_10025EC98(a1, *(void *)(a2 + 8) + v31) & 1) == 0)
        {
          uint64_t v49 = sub_1002E6E00();
          sub_1004FC118(v49, 1);
        }

        ++v32;
        unint64_t v33 = *(unsigned __int16 *)(a2 + 2);
        v31 += 16LL;
      }

      while (v32 < v33);
      return (_DWORD)v33 != 0;
    case 7:
      int v34 = malloc(16LL * v8);
      *(void *)(a2 + 8) = v34;
      if (v34) {
        BOOL v35 = (_DWORD)v8 == 0;
      }
      else {
        BOOL v35 = 1;
      }
      if (v35) {
        return 0LL;
      }
      uint64_t v36 = 0LL;
      unint64_t v37 = 0LL;
      while ((sub_10025EC98(a1, *(void *)(a2 + 8) + v36) & 1) != 0)
      {
        ++v37;
        unint64_t v33 = *(unsigned __int16 *)(a2 + 2);
        v36 += 16LL;
        if (v37 >= v33) {
          return (_DWORD)v33 != 0;
        }
      }

      unint64_t v41 = (os_log_s *)qword_1008F75D8;
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F75D8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_10066490C(v41, v42, v43, v44, v45, v46, v47, v48);
        return 0LL;
      }

      return result;
    case 8:
      uint64_t v38 = malloc(v8);
      *(void *)(a2 + 8) = v38;
      if (*((_BYTE *)a1 + 14) == 1)
      {
        uint64_t v14 = v38;
        uint64_t v15 = *a1;
        uint64_t v16 = *((unsigned __int16 *)a1 + 6);
        if (*((_BYTE *)a1 + 15))
        {
          sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
          int v39 = 0;
          LODWORD(v8) = *(unsigned __int16 *)(a2 + 2);
        }

        else
        {
          int v39 = *((unsigned __int16 *)a1 + 5) - (_DWORD)v16;
        }

        if (v39 >= (int)v8)
        {
LABEL_59:
          memmove(v14, (const void *)(v15 + v16), v8);
          __int16 v12 = *((_WORD *)a1 + 6) + v8;
          goto LABEL_72;
        }

        uint64_t v51 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (copy->Size)";
      }

      else
      {
        uint64_t v51 = "(*pByteStream).__RWFlag == BYTESTREAM_READ";
      }

      sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  424,  v51);
    default:
      uint64_t v18 = (os_log_s *)qword_1008F75D8;
      if (os_log_type_enabled((os_log_t)qword_1008F75D8, OS_LOG_TYPE_ERROR))
      {
        v57[0] = 67109376;
        v57[1] = v7;
        __int16 v58 = 1024;
        int v59 = v9;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "SDP data element extraction error with type 0x%x, bytestream pos %d",  (uint8_t *)v57,  0xEu);
        uint64_t v18 = (os_log_s *)qword_1008F75D8;
      }

      BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_100664898(v18, v20, v21, v22, v23, v24, v25, v26);
      return 0LL;
  }

BOOL sub_10025F3E0(uint64_t *a1, unsigned __int8 *a2)
{
  if (*((_BYTE *)a1 + 15))
  {
    sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
    goto LABEL_84;
  }

  uint64_t v3 = *((unsigned __int16 *)a1 + 6);
  if (*((unsigned __int16 *)a1 + 5) <= v3)
  {
LABEL_84:
    unint64_t v57 = "ByteStream_NumReadBytesAvail(*pByteStream) >= 1";
    goto LABEL_86;
  }

  if (*((_BYTE *)a1 + 14) != 2)
  {
    unint64_t v57 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_86:
    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  439,  v57);
  }

  char v5 = *a2;
  uint64_t v6 = *a1;
  *((_WORD *)a1 + 6) = v3 + 1;
  *(_BYTE *)(v6 + v3) = v5;
  if (*((_BYTE *)a1 + 15))
  {
    sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
    goto LABEL_88;
  }

  uint64_t v7 = *((unsigned __int16 *)a1 + 6);
  if (*((unsigned __int16 *)a1 + 5) - (int)v7 <= 1)
  {
LABEL_88:
    __int16 v58 = "ByteStream_NumReadBytesAvail(*pByteStream) >= 2";
    goto LABEL_90;
  }

  if (*((_BYTE *)a1 + 14) != 2)
  {
    __int16 v58 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
LABEL_90:
    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  440,  v58);
  }

  *(_BYTE *)(*a1 + v7) = a2[2];
  *(_BYTE *)(*a1 + *((unsigned __int16 *)a1 + 6) + 1) = a2[3];
  __int16 v8 = *((_WORD *)a1 + 6);
  unsigned __int16 v9 = v8 + 2;
  *((_WORD *)a1 + 6) = v8 + 2;
  int v10 = *a2;
  BOOL result = 1LL;
  switch(*a2)
  {
    case 0u:
      return result;
    case 1u:
      int v12 = *((unsigned __int16 *)a2 + 1);
      if (v12 != 16)
      {
        if (v12 == 8)
        {
          if (*((_BYTE *)a1 + 15))
          {
            sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT"
                                   "_DataElements.cpp");
          }

          else
          {
            uint64_t v13 = v9;
            if (*((unsigned __int16 *)a1 + 5) - (unint64_t)v9 > 7)
            {
              if (*((_BYTE *)a1 + 14) != 2)
              {
                uint64_t v14 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
                goto LABEL_108;
              }

              goto LABEL_19;
            }
          }

          uint64_t v14 = "ByteStream_NumReadBytesAvail(*pByteStream) >= (sizeof(OI_UINT64))";
LABEL_108:
          sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp",  450,  v14);
        }

        if (*((_BYTE *)a1 + 15))
        {
          sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        }

        else if (*((unsigned __int16 *)a1 + 5) - v9 > 3)
        {
          if (*((_BYTE *)a1 + 14) != 2)
          {
            uint64_t v40 = "(*pByteStream).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_118;
          }

BOOL sub_10025FC8C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a1 != 3 || *(_BYTE *)a2 != 3) {
    return 0LL;
  }
  int v2 = *(unsigned __int16 *)(a1 + 2);
  if (v2 != 2)
  {
    if (v2 == 16)
    {
      if (*(_WORD *)(a2 + 2) == 16)
      {
        uint64_t v6 = *(uint64_t **)(a1 + 8);
        uint64_t v7 = *(uint64_t **)(a2 + 8);
        uint64_t v9 = *v6;
        uint64_t v8 = v6[1];
        uint64_t v11 = *v7;
        uint64_t v10 = v7[1];
        return v9 == v11 && v8 == v10;
      }

      unsigned int v3 = *(_DWORD *)(a2 + 8);
      uint64_t v4 = *(uint64_t **)(a1 + 8);
      goto LABEL_15;
    }

    if (v2 != 4) {
      return 0LL;
    }
  }

  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (*(_WORD *)(a2 + 2) == 16)
  {
    uint64_t v4 = *(uint64_t **)(a2 + 8);
LABEL_15:
    uint64_t v15 = v3 | 0x10000000000000LL;
    uint64_t v13 = *v4;
    uint64_t v14 = v4[1];
    return v13 == v15 && v14 == 0xFB349B5F80000080LL;
  }

  return v3 == *(_DWORD *)(a2 + 8);
}

uint64_t sub_10025FD88(_BYTE *a1, uint64_t a2)
{
  int v4 = *(unsigned __int16 *)(a2 + 2);
  *((_WORD *)a1 + 1) = v4;
  *a1 = *(_BYTE *)a2;
  switch(*(_BYTE *)a2)
  {
    case 0:
      return 1LL;
    case 1:
    case 2:
      int v5 = *(unsigned __int16 *)(a2 + 2);
      if (v5 == 16) {
        goto LABEL_7;
      }
      if (v5 != 8) {
        goto LABEL_8;
      }
      uint64_t v6 = malloc(8uLL);
      *((void *)a1 + 1) = v6;
      void *v6 = **(void **)(a2 + 8);
      return 1LL;
    case 3:
      if (*(_WORD *)(a2 + 2) == 16)
      {
LABEL_7:
        uint64_t v8 = malloc(0x10uLL);
        *((void *)a1 + 1) = v8;
        _OWORD *v8 = *(_OWORD *)*(void *)(a2 + 8);
      }

      else
      {
LABEL_8:
        *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
      }

      return 1LL;
    case 4:
    case 8:
      uint64_t v7 = malloc(*(unsigned __int16 *)(a2 + 2));
      *((void *)a1 + 1) = v7;
      memcpy(v7, *(const void **)(a2 + 8), *(unsigned __int16 *)(a2 + 2));
      return 1LL;
    case 5:
      a1[8] = *(_BYTE *)(a2 + 8);
      return 1LL;
    case 6:
      uint64_t result = (uint64_t)malloc(16LL * *(unsigned __int16 *)(a2 + 2));
      *((void *)a1 + 1) = result;
      if (!result) {
        return result;
      }
      if (!*(_WORD *)(a2 + 2)) {
        return v4 != 0;
      }
      uint64_t v10 = 0LL;
      unint64_t v11 = 0LL;
      int v12 = 0;
      do
      {
        if ((sub_10025FD88(*((void *)a1 + 1) + 16LL * v12, *(void *)(a2 + 8) + v10) & 1) == 0)
        {
          --*((_WORD *)a1 + 1);
          --v12;
        }

        ++v11;
        ++v12;
        v10 += 16LL;
      }

      while (v11 < *(unsigned __int16 *)(a2 + 2));
      break;
    case 7:
      uint64_t result = (uint64_t)malloc(16LL * *(unsigned __int16 *)(a2 + 2));
      *((void *)a1 + 1) = result;
      if (!result) {
        return result;
      }
      if (!*(_WORD *)(a2 + 2)) {
        return v4 != 0;
      }
      uint64_t v13 = 0LL;
      unint64_t v14 = 0LL;
      do
      {
        if ((sub_10025FD88(*((void *)a1 + 1) + v13, *(void *)(a2 + 8) + v13) & 1) == 0) {
          --*((_WORD *)a1 + 1);
        }
        ++v14;
        v13 += 16LL;
      }

      while (v14 < *(unsigned __int16 *)(a2 + 2));
      break;
    default:
      return 0LL;
  }

  int v4 = *((unsigned __int16 *)a1 + 1);
  return v4 != 0;
}

os_log_t *sub_10025FF5C(os_log_t *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = os_log_create("com.apple.bluetooth", "BTAudio");
  return a1;
}

BOOL sub_10025FF98(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  unsigned int v3 = off_1008D9180;
  *(void *)(a1 + 16) = a2 + (strlen(off_1008D9180) & 0xFFFFFFFFFFFFFFF8LL) + 56;
  size_t v4 = strlen(v3);
  return strncmp((const char *)(a2 + 41), v3, v4) == 0;
}

uint64_t sub_100260008(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  return result;
}

unint64_t sub_100260010(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 40)) {
      return atomic_load((unint64_t *)(v1 + 24));
    }
    *(void *)(v1 + 8) = 0LL;
    *(void *)(v1 + 16) = 0LL;
    unint64_t v2 = atomic_load((unint64_t *)(v1 + 24));
    unsigned int v3 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 - v2, v3));
    uint64_t v5 = *(void *)(a1 + 8);
    *(_BYTE *)(v5 + 40) = 0;
    atomic_store(0LL, (unint64_t *)(v5 + 32));
    uint64_t v1 = *(void *)(a1 + 8);
    if (v1) {
      return atomic_load((unint64_t *)(v1 + 24));
    }
  }

  else if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
  {
    sub_10066499C();
  }

  return 0LL;
}

void *sub_1002600A8(uint64_t a1, char *__dst, size_t a3)
{
  uint64_t v5 = *(size_t **)(a1 + 8);
  size_t v6 = v5[1];
  size_t v7 = *v5;
  size_t v8 = v6 + a3;
  size_t v9 = *v5 - v6;
  if (a3 - v9 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = a3 - v9;
  }
  if (v8 >= v7) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = a3;
  }
  uint64_t result = memcpy(__dst, (const void *)(v6 + *(void *)(a1 + 16)), v11);
  if (v8 >= v7 && v10 != 0) {
    uint64_t result = memcpy(&__dst[v11], *(const void **)(a1 + 16), v10);
  }
  if (v8 >= v7) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v8;
  }
  *(void *)(*(void *)(a1 + 8) + 8LL) = v14;
  return result;
}

unint64_t sub_100260140(uint64_t a1, char *a2, size_t *a3, size_t a4)
{
  uint64_t v6 = a1 + 8;
  uint64_t v5 = *(void **)(a1 + 8);
  if ((unint64_t)(v5[1] + 2LL) > *v5)
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
      sub_1006649C8();
    }
    return 0LL;
  }

  uint64_t v7 = v5[1];
  size_t v8 = *(unsigned __int16 *)(v7 + *(void *)(a1 + 16));
  if (!*(_WORD *)(v7 + *(void *)(a1 + 16))) {
    return 0LL;
  }
  if (v8 >= a4) {
    size_t v8 = a4;
  }
  *a3 = v8;
  size_t v10 = v8 & 1;
  unint64_t v11 = v8 + v10 + 2;
  unint64_t v12 = atomic_load(v5 + 3);
  if (v11 > v12)
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
      sub_1006649F4((uint64_t)a3, v6);
    }
    return 0LL;
  }

  size_t v14 = *(void **)(a1 + 8);
  v14[1] += 2LL;
  v14[1] %= *v14;
  sub_1002600A8(a1, a2, *a3);
  uint64_t v15 = *(void **)(a1 + 8);
  if (v10) {
    v15[1] = (unint64_t)(v15[1] + 1LL) % *v15;
  }
  __int16 v16 = v15 + 4;
  do
    unint64_t v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  return v11;
}

size_t sub_10026027C(uint64_t a1, char *a2, size_t a3)
{
  unint64_t v6 = sub_100260010(a1);
  if (!v6) {
    return 0LL;
  }
  if (v6 < a3) {
    a3 = v6;
  }
  sub_1002600A8(a1, a2, a3);
  uint64_t v7 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
  do
    unint64_t v8 = __ldaxr(v7);
  while (__stlxr(v8 - a3, v7));
  return a3;
}

unint64_t sub_1002602EC(uint64_t a1, char *a2, size_t a3)
{
  unint64_t result = sub_100260010(a1);
  if (result)
  {
    size_t v9 = 0LL;
    unint64_t result = sub_100260140(a1, a2, &v9, a3);
    if (result)
    {
      uint64_t v7 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - result, v7));
      return v9;
    }
  }

  return result;
}

BOOL sub_100260360(uint64_t a1, char *a2, size_t *a3, size_t a4, char *a5, size_t *a6, size_t a7)
{
  unint64_t v14 = sub_100260010(a1);
  if (v14)
  {
    unint64_t v15 = sub_100260140(a1, a2, a3, a4);
    unint64_t v16 = sub_100260140(a1, a5, a6, a7);
    unint64_t v17 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - (v16 + v15), v17));
  }

  return v14 != 0;
}

BOOL sub_100260408(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1 + 8;
  unint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    if (*((_BYTE *)v2 + 40)) {
      return 0LL;
    }
    uint64_t v5 = *v2;
    unint64_t v6 = atomic_load((unint64_t *)v2 + 3);
    if (v5 + ~v6 >= a2)
    {
      return 1LL;
    }

    else
    {
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
        sub_100664A9C(v3);
      }
      BOOL result = 0LL;
      *(_BYTE *)(*(void *)v3 + 4sub_10023F488((uint64_t)va, 0LL) = 1;
    }
  }

  else
  {
    BOOL result = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100664A70();
      return 0LL;
    }
  }

  return result;
}

void sub_1002604C0(uint64_t a1, __int16 a2)
{
  unint64_t v2 = *(unint64_t **)(a1 + 8);
  unint64_t v3 = v2[2];
  unint64_t v4 = *v2;
  if (v3 + 2 <= *v2)
  {
    *(_WORD *)(v3 + *(void *)(a1 + 16)) = a2;
    v2[2] = (v3 + 2) % v4;
  }

  else if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
  {
    sub_100664B18();
  }

void *sub_100260524(uint64_t a1, char *a2, size_t a3)
{
  unint64_t v6 = *(size_t **)(a1 + 8);
  size_t v7 = v6[2];
  size_t v8 = *v6;
  size_t v9 = v7 + a3;
  size_t v10 = *v6 - v7;
  size_t v11 = a3 - v10;
  if (v7 + a3 >= *v6) {
    size_t v12 = *v6 - v7;
  }
  else {
    size_t v12 = a3;
  }
  BOOL result = memcpy((void *)(v7 + *(void *)(a1 + 16)), a2, v12);
  if (v9 >= v8 && a3 != v10) {
    BOOL result = memcpy(*(void **)(a1 + 16), &a2[v12], v11);
  }
  if (v9 >= v8) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v9;
  }
  *(void *)(*(void *)(a1 + 8) + 16LL) = v15;
  return result;
}

void sub_1002605BC(uint64_t a1, char **a2, size_t *a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  {
    size_t v12 = *a2++;
    size_t v11 = v12;
    size_t v13 = *a3++;
    sub_100260524(a1, v11, v13);
  }

  unint64_t v14 = *(void **)(a1 + 8);
  if (a6)
  {
    v14[2] += a6;
    v14[2] %= *v14;
  }

  size_t v15 = v14 + 4;
  do
    unint64_t v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
}

size_t sub_100260658(uint64_t a1, char *a2, unint64_t a3)
{
  size_t v3 = a3;
  if (!sub_100260408(a1, a3)) {
    return 0LL;
  }
  sub_100260524(a1, a2, v3);
  unint64_t v6 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
  do
    unint64_t v7 = __ldaxr(v6);
  while (__stlxr(v7 + v3, v6));
  return v3;
}

unint64_t sub_1002606C4(uint64_t a1, char *a2, size_t a3)
{
  __int16 v3 = a3;
  size_t v10 = a3;
  size_t v11 = a2;
  uint64_t v5 = a3 & 1;
  unint64_t v6 = a3 + v5 + 2;
  if (!sub_100260408(a1, v6)) {
    return 0LL;
  }
  sub_1002605BC(a1, &v11, &v10, 1LL, v3, v5);
  unint64_t v7 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
  do
    unint64_t v8 = __ldaxr(v7);
  while (__stlxr(v8 + v6, v7));
  return v6;
}

unint64_t sub_100260750(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return atomic_load((unint64_t *)(v1 + 32));
  }
  else {
    return 0LL;
  }
}

void sub_10026076C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

uint64_t sub_100260794(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, dispatch_object_s *a4)
{
  unint64_t v7 = (void *)sub_10025D004(a1, a2, a3, a4);
  void *v7 = off_10088A0E8;
  v7[17] = 0LL;
  v7[16] = v7 + 17;
  unint64_t v8 = (uint64_t **)(v7 + 16);
  v7[18] = 0LL;
  size_t v9 = operator new(0x50uLL);
  sub_100569414(v9, a1);
  *(void *)&__int128 v31 = v9;
  size_t v10 = operator new(0x50uLL);
  sub_100330E14(v10, a1);
  *((void *)&v31 + 1) = v10;
  size_t v11 = operator new(0x70uLL);
  sub_10033B010(v11, a1);
  *(void *)&__int128 v32 = v11;
  size_t v12 = operator new(0x70uLL);
  sub_100515F54(v12, a1);
  *((void *)&v32 + 1) = v12;
  size_t v13 = operator new(0x70uLL);
  sub_100352330(v13, a1);
  *(void *)&__int128 v33 = v13;
  unint64_t v14 = operator new(0x68uLL);
  sub_10045C300(v14, a1);
  *((void *)&v33 + 1) = v14;
  size_t v15 = operator new(0x68uLL);
  sub_100420BB8(v15, a1);
  *(void *)&__int128 v34 = v15;
  sub_1002612CC(v8, (unint64_t *)&v31, (unint64_t *)&v34 + 1);
  id v16 = sub_10025D564(*(void *)(a1 + 16));
  uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
  unint64_t v18 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v17;

  uint64_t v39 = 0LL;
  __int128 v37 = 0u;
  memset(v38, 0, sizeof(v38));
  *(_OWORD *)std::string __p = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  sub_10020E564((uint64_t)&v31);
  __int128 v19 = (const char *)[*(id *)(a1 + 96) UTF8String];
  size_t v20 = strlen(v19);
  unsigned __int8 v21 = sub_1001FD17C(&v31, (uint64_t)v19, v20);
  uint64_t v22 = sub_1001FD17C(v21, (uint64_t)"-MBF-", 5LL);
  uint64_t v23 = (void *)std::ostream::operator<<(v22, *(unsigned int *)(a1 + 40));
  unint64_t v24 = sub_1001FD17C(v23, (uint64_t)"-", 1LL);
  std::ostream::operator<<(v24, *(void *)(a1 + 8));
  std::stringbuf::str(&v29, (const std::stringbuf *)((char *)&v31 + 8));
  uint64_t v25 = (void **)(a1 + 56);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
  *(void *)(a1 + 72) = v29.__r_.__value_.__l.__cap_;
  *(_BYTE *)(a1 + 160) = 1;
  unint64_t v26 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = *(_DWORD *)(a1 + 80);
    LODWORD(v29.__r_.__value_.__l.__data_) = 134218498;
    *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = a2;
    WORD2(v29.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
    HIWORD(v29.__r_.__value_.__r.__words[2]) = 1024;
    int v30 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "XpcMBFrameworkConnection connectionID:%lld name:%s accessLevel:%d",  (uint8_t *)&v29,  0x1Cu);
  }

  xpc_retain(a3);
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)&v31 + 8);
  std::ios::~ios(v38);
  return a1;
}

void sub_100260A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100260B0C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(a1 + 56);
    *(_DWORD *)std::stringbuf::string_type buf = 136315138;
    size_t v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "XpcMBFrameworkConnection::handleDisconnection name:%s",  buf,  0xCu);
  }

  *(_BYTE *)(a1 + 160) = 0;
  uint64_t v6 = *(void **)(a1 + 128);
  if (v6 != (void *)(a1 + 136))
  {
    do
    {
      (*(void (**)(void, void, uint64_t))(*(void *)v6[4] + 8LL))(v6[4], *(void *)(a1 + 16), a2);
      if (qword_1008D9138 != -1) {
        dispatch_once(&qword_1008D9138, &stru_10088A118);
      }
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_100260D24;
      v11[3] = &unk_10087EB20;
      uint8_t v11[4] = v6 + 4;
      sub_100494734((uint64_t)off_1008D9130, v11);
      unint64_t v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unint64_t v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          uint64_t v6 = v8;
        }

        while (!v9);
      }

      uint64_t v6 = v8;
    }

    while (v8 != (void *)(a1 + 136));
  }

  if (qword_1008D9138 != -1) {
    dispatch_once(&qword_1008D9138, &stru_10088A118);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100260D40;
  v10[3] = &unk_10087EB20;
  v10[4] = a1;
  sub_100494734((uint64_t)off_1008D9130, v10);
}

uint64_t sub_100260D24(uint64_t a1)
{
  uint64_t result = **(void **)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

void sub_100260D40(uint64_t a1)
{
}

void sub_100260D4C(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    unint64_t v14 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
      sub_100664B44(a1, v14);
    }
    return;
  }

  string = (char *)xpc_dictionary_get_string(xdict, "kCBMsgId");
  uint64_t v5 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = (void *)(a1 + 56);
    int v17 = 136446466;
    unint64_t v18 = string;
    __int16 v19 = 2082;
    size_t v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Received MBFramework XPC message %{public}s from session %{public}s",  (uint8_t *)&v17,  0x16u);
  }

  if (!string)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (!reply) {
      return;
    }
    size_t v12 = reply;
    uint64_t v13 = 19LL;
    goto LABEL_25;
  }

  if (qword_1008D9178 != -1) {
    dispatch_once(&qword_1008D9178, &stru_10088A138);
  }
  sub_1005337E8(qword_1008D9170, string, *(_DWORD *)(a1 + 40));
  unint64_t v7 = *(void **)(a1 + 128);
  if (v7 == (void *)(a1 + 136))
  {
LABEL_17:
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100664BC4();
    }
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (!reply) {
      return;
    }
    size_t v12 = reply;
    uint64_t v13 = 2LL;
LABEL_25:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v12);
    xpc_release(v12);
    return;
  }

  while (!(**(unsigned int (***)(void, xpc_object_t))v7[4])(v7[4], xdict))
  {
    unint64_t v8 = (void *)v7[1];
    if (v8)
    {
      do
      {
        BOOL v9 = v8;
        unint64_t v8 = (void *)*v8;
      }

      while (v8);
    }

    else
    {
      do
      {
        BOOL v9 = (void *)v7[2];
        BOOL v10 = *v9 == (void)v7;
        unint64_t v7 = v9;
      }

      while (!v10);
    }

    unint64_t v7 = v9;
    if (v9 == (void *)(a1 + 136)) {
      goto LABEL_17;
    }
  }

  size_t v15 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
  {
    id v16 = (void *)(a1 + 56);
    int v17 = 136446466;
    unint64_t v18 = string;
    __int16 v19 = 2082;
    size_t v20 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Handled MBFramework XPC message %{public}s from session %{public}s",  (uint8_t *)&v17,  0x16u);
  }

void sub_100260FEC(uint64_t a1, char *string, void *a3, int a4)
{
  *(_OWORD *)keys = *(_OWORD *)&off_10088A108;
  object[0] = xpc_string_create(string);
  object[1] = a3;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_100664C44();
  }
  if (a3) {
    size_t v8 = 2LL;
  }
  else {
    size_t v8 = 1LL;
  }
  xpc_object_t v9 = xpc_dictionary_create((const char *const *)keys, object, v8);
  sub_1002610FC(a1, (uint64_t)string, v9);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v9);
  xpc_release(v9);
  xpc_release(object[0]);
  if (a3)
  {
    if (a4) {
      xpc_release(a3);
    }
  }

void sub_1002610FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_1002E6E00();
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 448LL))(v6);
  if (a3 && v7)
  {
    if (xpc_get_type(a3) == (xpc_type_t)&_xpc_type_error)
    {
      size_t v11 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100664CC4(v11);
      }
    }

    else
    {
      size_t v8 = xpc_copy_description(a3);
      xpc_object_t v9 = (os_log_s *)qword_1008F7718;
      if (os_log_type_enabled((os_log_t)qword_1008F7718, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v10 = (void *)(a1 + 56);
        int v12 = 136446978;
        uint64_t v13 = a2;
        __int16 v14 = 2082;
        size_t v15 = v10;
        __int16 v16 = 1024;
        int count = xpc_dictionary_get_count(a3);
        __int16 v18 = 2080;
        __int16 v19 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Msg:%{public}s, Session:%{public}s, Count:%d, xpc_copy_description(args): %s ",  (uint8_t *)&v12,  0x26u);
      }

      free(v8);
    }
  }

uint64_t sub_100261260(uint64_t a1)
{
  *(void *)a1 = off_10088A0E8;
  sub_10023BF24(a1 + 128, *(void **)(a1 + 136));
  return sub_10025D70C(a1);
}

void sub_100261294(uint64_t a1)
{
  *(void *)a1 = off_10088A0E8;
  sub_10023BF24(a1 + 128, *(void **)(a1 + 136));
  unint64_t v2 = (void *)sub_10025D70C(a1);
  operator delete(v2);
}

uint64_t **sub_1002612CC(uint64_t **result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      size_t v8 = (uint64_t *)v6[1];
    }
    else {
      size_t v8 = v6;
    }
    BOOL v10 = result;
    size_t v11 = v8;
    int v12 = v8;
    if (v8)
    {
      size_t v11 = sub_10026145C((uint64_t)v8);
      while (a2 != a3)
      {
        sub_1002613D0(v5, a2, v8);
        if ((v9 & 1) != 0)
        {
          size_t v8 = v11;
          int v12 = v11;
          if (!v11)
          {
            ++a2;
            break;
          }

          size_t v11 = sub_10026145C((uint64_t)v11);
        }

        else
        {
          size_t v8 = v12;
        }

        ++a2;
        if (!v8) {
          break;
        }
      }
    }

    uint64_t result = (uint64_t **)sub_1002614B0((uint64_t)&v10);
  }

  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)sub_1002555B0(v5, a2, (uint64_t *)a2);
    ++a2;
  }

  return result;
}

void sub_1002613BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1002613D0(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a1 + 1;
  uint64_t v5 = a1[1];
  unint64_t v6 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v6 >= v8) {
          break;
        }
        uint64_t v5 = *v7;
        unint64_t v4 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= v6) {
        return (uint64_t *)v7;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v4 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    int v7 = a1 + 1;
LABEL_9:
    a3[4] = v6;
    sub_100029630(a1, (uint64_t)v7, v4, a3);
  }

  return a3;
}

void *sub_10026145C(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    __int16 v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0LL;
      while (1)
      {
        unint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          unint64_t v4 = (void *)*v4;
        }

        while (v4);
      }
    }

    else
    {
      for (result[1] = 0LL; v3; __int16 v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          __int16 v3 = (void *)*v3;
        }

        while (v3);
      }
    }
  }

  return result;
}

uint64_t sub_1002614B0(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    __int16 v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        unint64_t v2 = v3;
        __int16 v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_10023BF24(*(void *)a1, v2);
  }

  return a1;
}

void sub_100261504(id a1)
{
  uint64_t v1 = operator new(0x68uLL);
  sub_10049435C();
  off_1008D9130 = v1;
}

void sub_100261534(_Unwind_Exception *a1)
{
}

void sub_100261548(id a1)
{
  uint64_t v1 = operator new(0x90uLL);
  sub_100532F0C((uint64_t)v1);
  qword_1008D9170 = (uint64_t)v1;
}

void sub_100261578(_Unwind_Exception *a1)
{
}

  ;
}

uint64_t sub_1002615A4(uint64_t a1, unsigned __int8 a2, char a3)
{
  unint64_t v6 = malloc(0x101uLL);
  *(_BYTE *)(a1 + 16) = a2;
  if (v6)
  {
    *(void *)a1 = v6;
    *(_WORD *)(a1 + 8) = 257;
    *(_WORD *)(a1 + 14) = 2;
    *(_DWORD *)(a1 + 10) = 131329;
    _BYTE *v6 = a2;
    v6[1] = a3;
  }

  else
  {
    int v7 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_ERROR)) {
      sub_100664D04(a2, v7);
    }
  }

  return a1;
}

void sub_100261680(id a1)
{
  uint64_t v1 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "+[BTVCLinkClient btvcLinkClient]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v4, 0xCu);
  }

  unint64_t v2 = objc_alloc_init(&OBJC_CLASS___BTVCLinkClient);
  __int16 v3 = (void *)qword_1008EF978;
  qword_1008EF978 = (uint64_t)v2;
}

void sub_100261960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100261AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100261D1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

id sub_100261D60(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLinkDidUpdateState:*(void *)(a1 + 40)];
}

void sub_100261FA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

id sub_100261FE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didStartAdvertisingType:*(void *)(a1 + 48)];
}

void sub_100262208( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

id sub_100262258(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didStopAdvertisingType:*(void *)(a1 + 56) withError:*(void *)(a1 + 48)];
}

void sub_100262444( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

id sub_10026248C(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didDeferAdvertisingType:*(void *)(a1 + 48)];
}

void sub_1002626AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

id sub_1002626FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didFailToStartAdvertisingOfType:*(void *)(a1 + 56) withError:*(void *)(a1 + 48)];
}

void sub_1002628E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

id sub_100262930(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didStartScanningForType:*(void *)(a1 + 48)];
}

void sub_100262B50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

id sub_100262BA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didFailToStartScanningForType:*(void *)(a1 + 56) WithError:*(void *)(a1 + 48)];
}

void sub_100262E28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_100262E8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didDiscoverType:*(void *)(a1 + 72) withData:*(void *)(a1 + 48) fromPeer:*(void *)(a1 + 56) peerInfo:*(void *)(a1 + 64)];
}

void sub_1002630AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

id sub_1002630FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didLosePeer:*(void *)(a1 + 48) type:*(void *)(a1 + 56)];
}

void sub_100263350( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

id sub_1002633A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didConnectToPeer:*(void *)(a1 + 48) transport:*(void *)(a1 + 64) error:*(void *)(a1 + 56)];
}

void sub_1002635F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_100263648(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didDisconnectFromPeer:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
}

void sub_1002638B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  objc_sync_exit(v13);
  _Unwind_Resume(a1);
}

id sub_100263918(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didSendData:*(void *)(a1 + 48) toPeer:*(void *)(a1 + 56) error:*(void *)(a1 + 64)];
}

void sub_100263B60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_100263BB8(uint64_t a1)
{
  return [*(id *)(a1 + 32) btvcBonjourLink:*(void *)(a1 + 40) didReceiveData:*(void *)(a1 + 48) fromPeer:*(void *)(a1 + 56)];
}

uint64_t sub_100263C04(uint64_t a1)
{
  *(void *)a1 = off_10088A250;
  *(void *)(a1 + 8) = off_10088A348;
  uint64_t v2 = a1 + 88;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_100207EC0(a1 + 88, a1 + 8, "com.apple.BTServer.cloudpairing", 0LL);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + sub_100242FAC(v1 - 64) = 0u;
  sub_100207EFC(v2);
  return a1;
}

void sub_100263C74(_Unwind_Exception *a1)
{
  int v4 = *(void **)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void *sub_100263CA4(void *a1)
{
  *a1 = off_10088A250;
  a1[1] = off_10088A348;
  a1[4] = a1[3];
  sub_100207EF8((uint64_t)(a1 + 11));
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_100263CF8(void *a1)
{
  uint64_t v1 = sub_100263CA4(a1);
  operator delete(v1);
}

uint64_t sub_100263D0C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending get master key message to cloudkit",  v5,  2u);
  }

  xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_100208104(a1 + 88, "getMasterKey", v3, 0LL);
  return 1LL;
}

uint64_t sub_100263DA0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "launchCloudPairing", v4, 2u);
  }

  sub_100208104(a1 + 88, "Start", 0LL, 0LL);
  return 1LL;
}

uint64_t sub_100263E24(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "getDeviceInfoList", v5, 2u);
  }

  xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_100208104(a1 + 88, "getAccessoryKey", v3, 0LL);
  return 1LL;
}

void sub_100263EB8(uint64_t a1, int a2)
{
  int v4 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "logged-out";
    if (a2) {
      uint64_t v5 = "logged-in";
    }
    int v7 = 136446210;
    unint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Account login Status changed %{public}s",  (uint8_t *)&v7,  0xCu);
  }

  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_100208104(a1 + 88, "getSignInStatus", v6, 0LL);
}

void sub_100263FA4(uint64_t a1, uint64_t a2, void **a3)
{
  xpc_object_t v6 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = a3;
    *(_DWORD *)std::stringbuf::string_type buf = 67109635;
    int v12 = a2;
    __int16 v13 = 2160;
    uint64_t v14 = 1752392040LL;
    __int16 v15 = 2081;
    __int16 v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sign in status changed came from cloudkit, status = %d, loginID = %{private, mask.hash}s",  buf,  0x1Cu);
  }

  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100024238(__p, *a3, (unint64_t)a3[1]);
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    BOOL v10 = a3[2];
  }

  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v8 + 16LL))(v8, a2, __p);
  if (SHIBYTE(v10) < 0)
  {
    operator delete(__p[0]);
    if ((a2 & 1) != 0) {
      return;
    }
  }

  else
  {
LABEL_10:
    if ((a2 & 1) != 0) {
      return;
    }
  }

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + sub_100242FAC(v1 - 64) = 0u;
}

void sub_1002640F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100264114(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + sub_100242FAC(v40 - 80) = a2;
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

uint64_t sub_100264138()
{
  uint64_t v0 = sub_1002E8FF0();
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 32LL))(v0);
}

void sub_100264154(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_100208104(a1 + 88, "readOldContainer", v2, 0LL);
}

uint64_t sub_100264194(uint64_t a1)
{
  xpc_object_t v2 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Re-upgradeToManatee, this should be called after Identity is Lost",  buf,  2u);
  }

  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    if (*(_OWORD *)(a1 + 48) == 0LL || *(_OWORD *)(a1 + 64) == 0LL)
    {
      int v4 = (os_log_s *)qword_1008F7588;
      if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "No Master or Hint Key Found generate new ones",  v5,  2u);
      }

      sub_100264280(a1);
      uint64_t result = *(void *)(a1 + 16);
    }

    *(_BYTE *)(a1 + sub_100242FAC(v40 - 80) = 1;
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }

  return result;
}

void sub_100264280(uint64_t a1)
{
  xpc_object_t v2 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "==============Generate New Keys=============",  v3,  2u);
  }

  arc4random_buf((void *)(a1 + 48), 0x10uLL);
  arc4random_buf((void *)(a1 + 64), 0x10uLL);
}

void sub_100264300(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  xpc_object_t v6 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    v20[0] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received length %zu", buf, 0xCu);
  }

  int v7 = *a2;
  if (v7 != 2)
  {
    BOOL v10 = (os_log_s *)qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR)) {
      sub_100664E2C(v7, v10);
    }
    dispatch_time_t v11 = dispatch_time(0LL, 30000000000LL);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_100264648;
    v18[3] = &unk_10087EB20;
    v18[4] = a1;
    int v12 = v18;
    goto LABEL_13;
  }

  if (a3 != 33)
  {
    __int16 v13 = (os_log_s *)qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR)) {
      sub_100664DBC(a3, v13);
    }
    dispatch_time_t v11 = dispatch_time(0LL, 30000000000LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100264700;
    block[3] = &unk_10087EB20;
    void block[4] = a1;
    int v12 = block;
    goto LABEL_13;
  }

  __int128 v8 = *(_OWORD *)(a2 + 1);
  __int128 v21 = *(_OWORD *)(a2 + 17);
  __int128 v22 = v8;
  if (v8 == 0)
  {
    char v9 = (os_log_s *)qword_1008F7588;
    if (v21 != 0) {
      goto LABEL_16;
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR)) {
      sub_100664D90();
    }
    dispatch_time_t v11 = dispatch_time(0LL, 30000000000LL);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_100264708;
    v16[3] = &unk_10087EB20;
    void v16[4] = a1;
    int v12 = v16;
LABEL_13:
    dispatch_after(v11, &_dispatch_main_q, v12);
    return;
  }

  char v9 = (os_log_s *)qword_1008F7588;
LABEL_16:
  __int128 v14 = v21;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + sub_100242FAC(v1 - 64) = v14;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 68157954;
    LODWORD(v20[0]) = 16;
    WORD2(v20[0]) = 2096;
    *(void *)((char *)v20 + 6) = a1 + 48;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Acc Master Key:%.16P", buf, 0x12u);
    char v9 = (os_log_s *)qword_1008F7588;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 68157954;
    LODWORD(v20[0]) = 16;
    WORD2(v20[0]) = 2096;
    *(void *)((char *)v20 + 6) = a1 + 64;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Acc Master Hint:%.16P", buf, 0x12u);
  }

  __int16 v15 = *(void (****)(void, uint64_t, uint64_t))(a1 + 16);
  if (v15) {
    (**v15)(v15, a1 + 48, a1 + 64);
  }
}

void sub_100264648(uint64_t a1)
{
}

void sub_100264650(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  char bytes = 2;
  sub_100264280(a1);
  __int128 v3 = *(_OWORD *)(a1 + 64);
  __int128 v5 = *(_OWORD *)(a1 + 48);
  __int128 v6 = v3;
  xpc_dictionary_set_data(v2, "kMasterKeyBlob", &bytes, 0x21uLL);
  sub_100208104(a1 + 88, "writeMasterKey", v2, 0LL);
}

void sub_100264700(uint64_t a1)
{
}

void sub_100264708(uint64_t a1)
{
}

void sub_100264710(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR)) {
    sub_100664EA0();
  }
  dispatch_time_t v2 = dispatch_time(0LL, 30000000000LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002647B0;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_after(v2, &_dispatch_main_q, block);
}

void sub_1002647B0(uint64_t a1)
{
}

void sub_1002647B8(void *a1, unsigned __int8 *a2, unint64_t a3)
{
  if (a2 && a3 > 1)
  {
    uint64_t v6 = a2[1];
    unsigned int v7 = v6 | (*a2 << 8);
    __int128 v8 = (os_log_s *)qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 67109120;
      v12[1] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received Device info for %d devices",  (uint8_t *)v12,  8u);
    }

    if (a3 - 2 >= 152 * (unint64_t)v7)
    {
      a1[4] = a1[3];
      if (v7)
      {
        char v9 = malloc(152LL * v7);
        memcpy(v9, a2 + 2, 152LL * v7);
        uint64_t v10 = a1[2];
        if (v10) {
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v10 + 8LL))(v10, v9, v6);
        }
        if (v9) {
          free(v9);
        }
      }

      else
      {
        uint64_t v11 = a1[2];
        if (v11) {
          (*(void (**)(uint64_t, void, void))(*(void *)v11 + 8LL))(v11, 0LL, 0LL);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR))
    {
      sub_100664EF8();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR))
  {
    sub_100664ECC();
  }

uint64_t sub_100264964(uint64_t a1, uint64_t a2)
{
  int v4 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v5 = "not reachable";
    if ((_DWORD)a2) {
      __int128 v5 = "reachable";
    }
    int v7 = 136446210;
    __int128 v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "reachability Status is %{public}s",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 24LL))(result, a2);
  }
  return result;
}

uint64_t sub_100264A40(uint64_t a1, uint64_t a2)
{
  int v4 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v5 = "fail";
    if ((_DWORD)a2) {
      __int128 v5 = "success";
    }
    int v7 = 136446210;
    __int128 v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Device info uploaded status from cloudkit with status = %{public}s",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32LL))(result, a2);
  }
  return result;
}

uint64_t sub_100264B1C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v49[0]) = 67109120;
    DWORD1(v49[0]) = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Upload Magic pairing device info to cloud for %d devices",  (uint8_t *)v49,  8u);
  }

  int v7 = *(char **)(a1 + 24);
  *(void *)(a1 + 32) = v7;
  if (a3)
  {
    uint64_t v8 = 0LL;
    char v9 = (void *)(a1 + 40);
    uint64_t v10 = a3;
    do
    {
      uint64_t v11 = *(char **)(a1 + 24);
      if (v11 != v7)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = a2 + 152 * v8;
        while (1)
        {
          __int128 v14 = &v11[v12];
          v49[6] = *(_OWORD *)&v11[v12 + 96];
          v49[7] = *(_OWORD *)&v11[v12 + 112];
          v49[8] = *(_OWORD *)&v11[v12 + 128];
          uint64_t v50 = *(void *)&v11[v12 + 144];
          void v49[2] = *(_OWORD *)&v11[v12 + 32];
          v49[3] = *(_OWORD *)&v11[v12 + 48];
          uint8_t v49[4] = *(_OWORD *)&v11[v12 + 64];
          v49[5] = *(_OWORD *)&v11[v12 + 80];
          v49[0] = *(_OWORD *)&v11[v12];
          v49[1] = *(_OWORD *)&v11[v12 + 16];
          v12 += 152LL;
          if (&v11[v12] == v7) {
            goto LABEL_16;
          }
        }

        size_t v16 = v7 - (v14 + 152);
        if (v16) {
          memmove(&v11[v12], v14 + 152, v16);
        }
        int v7 = &v14[v16];
        *(void *)(a1 + 32) = v7;
      }

void sub_100264E70(_DWORD *a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  unsigned int v3 = a1[8] - a1[6];
  unsigned int v4 = -13797 * (v3 >> 3);
  size_t v5 = v3 & 0xFFF8 | 2;
  uint64_t v6 = malloc(v5);
  _WORD *v6 = bswap32(v4) >> 16;
  (*(void (**)(_DWORD *))(*(void *)a1 + 128LL))(a1);
  int v7 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((void *)a1 + 4) - *((void *)a1 + 3)) >> 3);
    v13[0] = 67109376;
    v13[1] = v5 - 2;
    __int16 v14 = 2048;
    unint64_t v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Size deviceinfo Blob is %d for %lu of devices",  (uint8_t *)v13,  0x12u);
  }

  char v9 = (char *)*((void *)a1 + 3);
  uint64_t v10 = (char *)*((void *)a1 + 4);
  if (v9 != v10)
  {
    int v11 = 2;
    do
    {
      memmove((char *)v6 + (unsigned __int16)v11, v9, 0x98uLL);
      v11 += 152;
      v9 += 152;
    }

    while (v9 != v10);
  }

  xpc_dictionary_set_data(v2, "kDeviceInfoBlob", v6, v5);
  if (*((void *)a1 + 4) == *((void *)a1 + 3)) {
    uint64_t v12 = "deleteAllAccessories";
  }
  else {
    uint64_t v12 = "writeAccessoryKey";
  }
  sub_100208104((uint64_t)(a1 + 22), v12, v2, 0LL);
  free(v6);
}

void sub_100265034(uint64_t a1, void **a2, void **a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = a2;
    unint64_t v8 = a3;
    *(_DWORD *)std::stringbuf::string_type buf = 136315394;
    unint64_t v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Update local device %s with nickname %s",  buf,  0x16u);
  }

  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_100024238(__dst, *a2, (unint64_t)a2[1]);
    }

    else
    {
      *(_OWORD *)__uuid_t dst = *(_OWORD *)a2;
      uint64_t v13 = a2[2];
    }

    if (*((char *)a3 + 23) < 0)
    {
      sub_100024238(__p, *a3, (unint64_t)a3[1]);
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a3;
      int v11 = a3[2];
    }

    (*(void (**)(uint64_t, void **, void **))(*(void *)v9 + 48LL))(v9, __dst, __p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(__dst[0]);
    }
  }

void sub_1002651A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002651DC(uint64_t a1, void **a2)
{
  unsigned int v4 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    size_t v5 = a2;
    *(_DWORD *)std::stringbuf::string_type buf = 136315138;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Remove nickname for local device %s", buf, 0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_100024238(__p, *a2, (unint64_t)a2[1]);
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      unint64_t v8 = a2[2];
    }

    (*(void (**)(uint64_t, void **))(*(void *)v6 + 56LL))(v6, __p);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1002652EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100265310(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  if (a2 && a3 > 1)
  {
    unsigned int v4 = __rev16(*a2);
    unint64_t v5 = (27 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3)) | ((0x86BCA1AF286BCA1BLL
                                                                                                 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3)) >> 8);
    uint64_t v6 = (os_log_s *)qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 67109376;
      unsigned int v10 = (unsigned __int16)v5;
      __int16 v11 = 1024;
      unsigned int v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "localDevice %d devices cloud numDevices %d",  (uint8_t *)&v9,  0xEu);
    }

    int v7 = (os_log_s *)qword_1008F7588;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT);
    if (v4 == (unsigned __int16)v5)
    {
      if (v8)
      {
        int v9 = 67109120;
        unsigned int v10 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received Device info for %d devices matches what we have locally",  (uint8_t *)&v9,  8u);
      }
    }

    else
    {
      if (v8)
      {
        int v9 = 67109120;
        unsigned int v10 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received Device info for %d devices does not match what we have so write back to cloud",  (uint8_t *)&v9,  8u);
      }

      sub_100264E70((_DWORD *)a1);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR))
  {
    sub_100664ECC();
  }

uint64_t sub_1002654C8()
{
  return 1LL;
}

uint64_t sub_1002654D0()
{
  return 1LL;
}

uint64_t sub_1002654D8(void *a1, uint64_t a2)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  a1,  (CFNotificationCallback)sub_100265608,  @"com.apple.bluetooth.cloudpairing.fetch",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  if (a2) {
    BOOL v5 = a1[2] == 0LL;
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t v6 = v5;
  if (v5)
  {
    a1[2] = a2;
    uint64_t v7 = qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 134217984;
      uint64_t v15 = a2;
      BOOL v8 = "Registered listener = %p";
      int v9 = (os_log_s *)v7;
      uint32_t v10 = 12;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v14, v10);
    }
  }

  else
  {
    uint64_t v11 = qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      BOOL v8 = "failed to registe fListener";
      int v9 = (os_log_s *)v11;
      uint32_t v10 = 2;
      goto LABEL_13;
    }
  }

  return v6;
}

void sub_100265608(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Received notification for cloudpairing push\n",  v5,  2u);
  }

  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_100208104(a2 + 88, "getAccessoryKey", v4, 0LL);
}

BOOL sub_100265698(void *a1, uint64_t a2)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.bluetooth.cloudpairing.fetch", 0LL);
  uint64_t v5 = a1[2];
  if (v5 == a2) {
    a1[2] = 0LL;
  }
  return v5 == a2;
}

void sub_1002656E8(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472LL;
  v1[2] = sub_100265740;
  v1[3] = &unk_10087EB20;
  v1[4] = a1;
  sub_100207FA8(a1 + 88, v1);
}

uint64_t sub_100265740(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 216LL))(result);
  }
  return result;
}

void sub_100265758(uint64_t a1)
{
  xpc_object_t v2 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "==============Start Dump MagicPairing structure in cloud=============",  buf,  2u);
    xpc_object_t v2 = (os_log_s *)qword_1008F7588;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Number of devices in list %lu", buf, 0xCu);
  }

  uint64_t v4 = sub_1002E6E00();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 8LL))(v4) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    for (size_t i = (os_log_s *)qword_1008F7588; v5 != *(void *)(a1 + 32); v5 += 152LL)
    {
      __int128 v7 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)v5;
      __int128 v23 = v7;
      __int128 v8 = *(_OWORD *)(v5 + 32);
      __int128 v9 = *(_OWORD *)(v5 + 48);
      __int128 v10 = *(_OWORD *)(v5 + 80);
      v26[0] = *(_OWORD *)(v5 + 64);
      v26[1] = v10;
      __int128 v24 = v8;
      __int128 v25 = v9;
      __int128 v11 = *(_OWORD *)(v5 + 96);
      __int128 v12 = *(_OWORD *)(v5 + 112);
      __int128 v13 = *(_OWORD *)(v5 + 128);
      uint64_t v28 = *(void *)(v5 + 144);
      v26[3] = v12;
      __int128 v27 = v13;
      void v26[2] = v11;
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 67110400;
        LODWORD(v15) = buf[0];
        WORD2(v15) = 1024;
        *(_DWORD *)((char *)&v15 + 6) = buf[1];
        WORD5(v15) = 1024;
        HIDWORD(v15) = buf[2];
        __int16 v16 = 1024;
        int v17 = buf[3];
        __int16 v18 = 1024;
        int v19 = buf[4];
        __int16 v20 = 1024;
        int v21 = buf[5];
        _os_log_impl( (void *)&_mh_execute_header,  i,  OS_LOG_TYPE_DEFAULT,  "Device Address: %02x-%02x-%02x-%02x-%02x-%02x",  v14,  0x26u);
        size_t i = (os_log_s *)qword_1008F7588;
      }

      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 136315138;
        *(void *)&__int128 v15 = (char *)v26 + 10;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Name : %s", v14, 0xCu);
        size_t i = (os_log_s *)qword_1008F7588;
      }

      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 67109120;
        LODWORD(v15) = *(_DWORD *)((char *)&v24 + 6);
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Ratchet %x", v14, 8u);
        size_t i = (os_log_s *)qword_1008F7588;
      }

      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 67109120;
        LODWORD(v15) = *(_DWORD *)((char *)&v27 + 10);
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device supported services %x", v14, 8u);
        size_t i = (os_log_s *)qword_1008F7588;
      }

      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(void *)((char *)&v15 + 6) = (char *)&v24 + 10;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device IRK: %.16P", v14, 0x12u);
        size_t i = (os_log_s *)qword_1008F7588;
      }

      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(void *)((char *)&v15 + 6) = (char *)&v25 + 10;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device EncKey:%.16P", v14, 0x12u);
        size_t i = (os_log_s *)qword_1008F7588;
      }

      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(void *)((char *)&v15 + 6) = (char *)&v23 + 6;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Hint:%.16P", v14, 0x12u);
        size_t i = (os_log_s *)qword_1008F7588;
      }

      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(void *)((char *)&v15 + 6) = &buf[6];
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device AccKey:%.16P", v14, 0x12u);
        size_t i = (os_log_s *)qword_1008F7588;
      }
    }
  }

  else
  {
    size_t i = (os_log_s *)qword_1008F7588;
  }

  if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  i,  OS_LOG_TYPE_DEFAULT,  "==============End Dump MagicPairing structure in cloud=============",  buf,  2u);
  }

void sub_100265BF4(uint64_t a1)
{
  xpc_object_t v2 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Fetching Account status from Cloud pairing",  buf,  2u);
  }

  dispatch_time_t v3 = dispatch_time(0LL, 30000000000LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100265CB0;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_after(v3, &_dispatch_main_q, block);
}

void sub_100265CB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_100208104(v1 + 88, "getSignInStatus", v2, 0LL);
}

void sub_100265CF0(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, _OWORD *a5)
{
  if (*a4 == 0LL || *a5 == 0LL)
  {
    uint64_t v54 = (os_log_s *)qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "upgradeDeviceToManatee Empty Master or Hint Key",  buf,  2u);
      uint64_t v54 = (os_log_s *)qword_1008F7588;
    }

    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 16;
      *(_WORD *)&uint8_t buf[8] = 2096;
      *(void *)&buf[10] = a4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "upgradeDeviceToManatee Acc Master Key:%.16P",  buf,  0x12u);
      uint64_t v54 = (os_log_s *)qword_1008F7588;
    }

    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      sub_100664F58((uint64_t)a5, v54);
    }
  }

  else
  {
    uint64_t v8 = a1 + 48;
    *(_OWORD *)(a1 + 48) = *a4;
    int v67 = (_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + sub_100242FAC(v1 - 64) = *a5;
    __int128 v9 = (os_log_s *)qword_1008F7588;
    __int16 v65 = (_OWORD *)(a1 + 48);
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 16;
      *(_WORD *)&uint8_t buf[8] = 2096;
      *(void *)&buf[10] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "upgradeDeviceToManatee Acc Master Key:%.16P",  buf,  0x12u);
      __int128 v9 = (os_log_s *)qword_1008F7588;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 16;
      *(_WORD *)&uint8_t buf[8] = 2096;
      *(void *)&buf[10] = v67;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "upgradeDeviceToManatee Acc Master Hint:%.16P",  buf,  0x12u);
    }

    xpc_object_t xdict = xpc_dictionary_create(0LL, 0LL, 0LL);
    __int128 v10 = (os_log_s *)qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "upgradeDeviceToManatee Upload Magic pairing device info to cloud for %d devices",  buf,  8u);
    }

    __int128 v11 = *(char **)(a1 + 24);
    *(void *)(a1 + 32) = v11;
    if (a3)
    {
      uint64_t v12 = 0LL;
      __int128 v13 = (void *)(a1 + 40);
      uint64_t v14 = a3;
      do
      {
        __int128 v15 = *(char **)(a1 + 24);
        if (v15 != v11)
        {
          uint64_t v16 = 0LL;
          uint64_t v17 = a2 + 152 * v12;
          while (1)
          {
            __int16 v18 = &v15[v16];
            __int128 v74 = *(_OWORD *)&v15[v16 + 96];
            __int128 v75 = *(_OWORD *)&v15[v16 + 112];
            __int128 v76 = *(_OWORD *)&v15[v16 + 128];
            uint64_t v77 = *(void *)&v15[v16 + 144];
            *(_OWORD *)&_BYTE buf[32] = *(_OWORD *)&v15[v16 + 32];
            __int128 v71 = *(_OWORD *)&v15[v16 + 48];
            __int128 v72 = *(_OWORD *)&v15[v16 + 64];
            __int128 v73 = *(_OWORD *)&v15[v16 + 80];
            *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)&v15[v16];
            *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&v15[v16 + 16];
            v16 += 152LL;
            if (&v15[v16] == v11) {
              goto LABEL_22;
            }
          }

          size_t v20 = v11 - (v18 + 152);
          if (v20) {
            memmove(&v15[v16], v18 + 152, v20);
          }
          __int128 v11 = &v18[v20];
          *(void *)(a1 + 32) = v11;
        }

void sub_100266390(void *a1, const char *a2, void *a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7588;
  if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received %{public}s message from CloudKit",  buf,  0xCu);
  }

  if (!strcmp(a2, "MasterKeysAvailable"))
  {
    xpc_object_t value = xpc_dictionary_get_value(a3, "kMasterKeyBlob");
    size_t length = xpc_data_get_length(value);
    __int128 v13 = (os_log_s *)qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(void *)&uint8_t buf[4] = length;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Client Received length %zu", buf, 0xCu);
    }

    if (value && length == 33)
    {
      memset(buf, 0, 33);
      if (xpc_data_get_bytes(value, buf, 0LL, 0x21uLL) == 33)
      {
        (*(void (**)(void *, uint8_t *, uint64_t))(*a1 + 88LL))(a1, buf, 33LL);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR))
      {
        sub_100665004();
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR)) {
        sub_100664FD8();
      }
      dispatch_time_t v22 = dispatch_time(0LL, 30000000000LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10026692C;
      block[3] = &unk_10087EB20;
      void block[4] = a1;
      dispatch_after(v22, &_dispatch_main_q, block);
    }
  }

  else if (!strcmp(a2, "DeviceInfoAvailable"))
  {
    xpc_object_t v14 = xpc_dictionary_get_value(a3, "kDeviceInfoBlob");
    size_t v15 = xpc_data_get_length(v14);
    if (v14 && (size_t v16 = v15, v15 > 1))
    {
      __int16 buffer = 0;
      if (xpc_data_get_bytes(v14, &buffer, 0LL, 2uLL) == 2)
      {
        uint64_t v17 = HIBYTE(buffer);
        unsigned int v18 = HIBYTE(buffer) | (buffer << 8);
        int v19 = (os_log_s *)qword_1008F7588;
        if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "XPC Received Device info for %d devices",  buf,  8u);
        }

        unint64_t v20 = v16 - 2;
        unint64_t v21 = 152LL * v18;
        if (v20 >= v21)
        {
          a1[4] = a1[3];
          if (v18)
          {
            unint64_t v30 = malloc(152LL * v18);
            if (xpc_data_get_bytes(v14, v30, 2uLL, 152LL * v18) != v21) {
              goto LABEL_50;
            }
            uint64_t v31 = a1[2];
            if (v31) {
              (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v31 + 8LL))(v31, v30, v17);
            }
            if (v30) {
LABEL_50:
            }
              free(v30);
          }

          else
          {
            uint64_t v32 = a1[2];
            if (v32) {
              (*(void (**)(uint64_t, void, void))(*(void *)v32 + 8LL))(v32, 0LL, 0LL);
            }
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR))
        {
          sub_100665030();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_ERROR))
    {
      sub_100664ECC();
    }
  }

  else if (!strcmp(a2, "OnlineStatusChanged"))
  {
    BOOL v23 = xpc_dictionary_get_BOOL(a3, "kOnlineStatus");
    uint64_t v24 = a1[2];
    if (v24) {
      (*(void (**)(uint64_t, BOOL))(*(void *)v24 + 24LL))(v24, v23);
    }
  }

  else if (!strcmp(a2, "SignInStatusChanged"))
  {
    BOOL v25 = xpc_dictionary_get_BOOL(a3, "kSignInStatus");
    string = xpc_dictionary_get_string(a3, "kSignInAppleID");
    __int128 v27 = (os_log_s *)qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109635;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)&uint8_t buf[8] = 2160;
      *(void *)&buf[10] = 1752392040LL;
      *(_WORD *)&_BYTE buf[18] = 2081;
      *(void *)&_BYTE buf[20] = string;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Sign in status changed came from cloudkit, status = %d with loginID: %{private, mask.hash}s",  buf,  0x1Cu);
    }

    uint64_t v28 = a1[2];
    if (v28)
    {
      uint64_t v29 = string ? (char *)string : "";
      sub_10002418C(__p, v29);
      (*(void (**)(uint64_t, BOOL, void **))(*(void *)v28 + 16LL))(v28, v25, __p);
      if (v34 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (!strcmp(a2, "DeviceInfoUploadStatus"))
  {
    BOOL v7 = xpc_dictionary_get_BOOL(a3, "kUploadStatus");
    uint64_t v8 = (os_log_s *)qword_1008F7588;
    if (os_log_type_enabled((os_log_t)qword_1008F7588, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v9 = "fail";
      if (v7) {
        __int128 v9 = "success";
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Device info uploaded status from cloudkit with status = %{public}s",  buf,  0xCu);
    }

    uint64_t v10 = a1[2];
    if (v10) {
      (*(void (**)(uint64_t, BOOL))(*(void *)v10 + 32LL))(v10, v7);
    }
  }

void sub_100266908( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10026692C(uint64_t a1)
{
}

void sub_100266934(uint64_t a1, const char *a2, void *a3)
{
}

void *sub_100266944(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287LL) {
    sub_100008BD4();
  }
  return operator new(152 * a2);
}

  ;
}

uint64_t sub_1002669A4(uint64_t a1)
{
  *(void *)(a1 + 8) = &off_10088A398;
  uint64_t v2 = a1 + 8;
  *(void *)(a1 + 16) = &off_10088A3B0;
  uint64_t v3 = a1 + 16;
  *(void *)a1 = off_10088A370;
  sub_100242DC4(a1 + 24);
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 88) = a1 + 96;
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  uint64_t v4 = sub_1002E8D54();
  sub_100267624(v4 + 608, a1);
  uint64_t v5 = sub_1002E8D54();
  sub_100267914(v5 + 648, v2);
  char v13 = 0;
  uint64_t v6 = sub_1002E8D54();
  (*(void (**)(uint64_t, char *))(*(void *)v6 + 104LL))(v6, &v13);
  if (v13)
  {
    unsigned int v7 = sub_100266B9C();
    *(_BYTE *)(a1 + 112) = v7;
    uint64_t v8 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v9 = "disabled";
      if (v7) {
        __int128 v9 = "enabled";
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      size_t v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "VoiceTrigger state is initially %s",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t v10 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Device not unlocked yet, deferring VoiceTrigger read",  buf,  2u);
    }

    uint64_t v11 = sub_1002E8D54();
    sub_100267C04(v11 + 448, v3);
  }

  return a1;
}

void sub_100266B64(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 136) = v6;
    operator delete(v6);
  }

  sub_10023BF24((uint64_t)(v3 - 1), *v3);
  sub_100242E28(v2);
  _Unwind_Resume(a1);
}

id sub_100266B9C()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[VTPreferences sharedPreferences](&OBJC_CLASS___VTPreferences, "sharedPreferences"));
  id v1 = [v0 voiceTriggerEnabled];

  return v1;
}

void sub_100266BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100266BFC(uint64_t a1, unint64_t a2)
{
  unint64_t v17 = a2;
  char v16 = 0;
  uint64_t v4 = sub_1002E8D54();
  uint64_t v5 = 0LL;
  if (!(*(unsigned int (**)(uint64_t, char *))(*(void *)v4 + 136LL))(v4, &v16))
  {
    if (v16) {
      uint64_t v5 = 1LL;
    }
    else {
      uint64_t v5 = 2LL;
    }
    v15[0] = 0LL;
    v15[1] = 0LL;
    sub_100242F28((uint64_t)v15, a1 + 24);
    uint64_t v8 = *(void **)(a1 + 96);
    unsigned int v7 = (void *)(a1 + 96);
    uint64_t v6 = v8;
    if (!v8) {
      goto LABEL_16;
    }
    __int128 v9 = v7;
    do
    {
      unint64_t v10 = v6[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = v6 + 1;
      }
      if (v11) {
        __int128 v9 = v6;
      }
      uint64_t v6 = (void *)*v12;
    }

    while (*v12);
    if (v9 == v7 || v9[4] > a2)
    {
LABEL_16:
      char v13 = operator new(0x10uLL);
      *char v13 = a2;
      v13[1] = 0LL;
      unsigned int v18 = &v17;
      sub_100029574((uint64_t **)v7 - 1, &v17, (uint64_t)&unk_1006C2518, (uint64_t **)&v18)[5] = (uint64_t)v13;
    }

    sub_100242FAC((uint64_t)v15);
  }

  return v5;
}

void sub_100266CF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100266D04(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7598;
  if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "disabled";
    if (a2) {
      uint64_t v5 = "enabled";
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "APLSIRI support has changed to %{public}s",  (uint8_t *)&buf,  0xCu);
  }

  if (a2) {
    uint64_t v6 = "\r\n+APLSIRI:1\r\n";
  }
  else {
    uint64_t v6 = "\r\n+APLSIRI:2\r\n";
  }
  std::string::assign(&v15, v6);
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 24);
  __int128 buf = 0uLL;
  uint64_t v17 = 0LL;
  sub_100267EF4((uint64_t *)&buf, a1 + 88);
  sub_100242F54((uint64_t)v14);
  unsigned int v7 = (_OWORD *)buf;
  if ((__int128 *)buf != (__int128 *)((char *)&buf + 8))
  {
    do
    {
      if (qword_1008D9030 != -1) {
        dispatch_once(&qword_1008D9030, &stru_10088A3D8);
      }
      uint64_t v8 = off_1008D9028;
      uint64_t v9 = **((void **)v7 + 5);
      else {
        std::string __p = v15;
      }
      sub_10046E020((uint64_t)v8, v9, (char *)&__p);
      unint64_t v10 = (void *)*((void *)v7 + 1);
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          unint64_t v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          BOOL v11 = (_OWORD *)*((void *)v7 + 2);
          BOOL v12 = *(void *)v11 == (void)v7;
          unsigned int v7 = v11;
        }

        while (!v12);
      }

      unsigned int v7 = v11;
    }

    while (v11 != (__int128 *)((char *)&buf + 8));
  }

  sub_10023BF24((uint64_t)&buf, *((void **)&buf + 1));
  sub_100242FAC((uint64_t)v14);
}

void sub_100266F28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23, void *a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100266F88(uint64_t a1)
{
  int v2 = sub_100266B9C();
  sub_100266FB0(a1, v2);
}

void sub_100266FB0(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 112) != a2)
  {
    uint64_t v4 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (a2) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VoiceTrigger status changed to %s", buf, 0xCu);
    }

    *(_BYTE *)(a1 + 112) = a2;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_1002671A4;
    void v6[3] = &unk_10088A3B8;
    char v7 = a2;
    sub_1002670E8((os_unfair_lock_s *)(a1 + 120), v6);
  }

void sub_1002670C0(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  int v2 = sub_100266B9C();
  sub_100266FB0(v1, v2);
}

void sub_1002670E8(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_10026717C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002671A4(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1002671BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_1002671C4(uint64_t a1, unint64_t a2, int a3)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 24);
  uint64_t v8 = *(void **)(a1 + 96);
  uint64_t v7 = (void *)(a1 + 96);
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v9 = v7;
    do
    {
      unint64_t v10 = v6[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        BOOL v12 = v6;
      }
      else {
        BOOL v12 = v6 + 1;
      }
      if (v11) {
        uint64_t v9 = v6;
      }
      uint64_t v6 = (void *)*v12;
    }

    while (*v12);
    if (v9 != v7 && v9[4] <= a2) {
      *(_DWORD *)(v9[5] + 8LL) = a3;
    }
  }

  return sub_100242FAC((uint64_t)v14);
}

uint64_t sub_100267254(uint64_t a1, unint64_t a2, int a3)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 24);
  uint64_t v8 = *(void **)(a1 + 96);
  uint64_t v7 = (void *)(a1 + 96);
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v9 = v7;
    do
    {
      unint64_t v10 = v6[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        BOOL v12 = v6;
      }
      else {
        BOOL v12 = v6 + 1;
      }
      if (v11) {
        uint64_t v9 = v6;
      }
      uint64_t v6 = (void *)*v12;
    }

    while (*v12);
    if (v9 != v7 && v9[4] <= a2) {
      *(_DWORD *)(v9[5] + 12LL) = a3;
    }
  }

  return sub_100242FAC((uint64_t)v14);
}

uint64_t sub_1002672E4(uint64_t a1, unint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 24);
  uint64_t v6 = *(void **)(a1 + 96);
  uint64_t v5 = (void *)(a1 + 96);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v4;
    }
    else {
      unint64_t v10 = v4 + 1;
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }

  while (*v10);
  if (v7 != v5 && v7[4] <= a2) {
    uint64_t v11 = *(unsigned int *)(v7[5] + 8LL);
  }
  else {
LABEL_12:
  }
    uint64_t v11 = 0LL;
  sub_100242FAC((uint64_t)v13);
  return v11;
}

uint64_t sub_100267374(uint64_t a1, unint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 24);
  uint64_t v6 = *(void **)(a1 + 96);
  uint64_t v5 = (void *)(a1 + 96);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v4;
    }
    else {
      unint64_t v10 = v4 + 1;
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }

  while (*v10);
  if (v7 != v5 && v7[4] <= a2) {
    uint64_t v11 = *(unsigned int *)(v7[5] + 12LL);
  }
  else {
LABEL_12:
  }
    uint64_t v11 = 0LL;
  sub_100242FAC((uint64_t)v13);
  return v11;
}

BOOL sub_100267404(uint64_t a1, unint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 24);
  uint64_t v6 = *(void **)(a1 + 96);
  uint64_t v5 = (void *)(a1 + 96);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      unint64_t v10 = v4;
    }
    else {
      unint64_t v10 = v4 + 1;
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }

  while (*v10);
  if (v7 == v5 || v7[4] > a2) {
LABEL_12:
  }
    uint64_t v7 = v5;
  BOOL v11 = v7 != v5;
  sub_100242FAC((uint64_t)v13);
  return v11;
}

uint64_t sub_100267490(uint64_t a1, unint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 24);
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 96);
    uint64_t v5 = (uint64_t *)(a1 + 96);
    uint64_t v4 = v6;
    if (v6)
    {
      uint64_t v7 = v5;
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          unint64_t v10 = v4;
        }
        else {
          unint64_t v10 = v4 + 1;
        }
        if (v9) {
          uint64_t v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }

      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        BOOL v11 = (void *)v7[5];
        if (v11) {
          operator delete(v11);
        }
        sub_1001FDBCC((uint64_t **)v5 - 1, v7);
        operator delete(v7);
      }
    }
  }

  return sub_100242FAC((uint64_t)v13);
}

void sub_10026753C(uint64_t a1)
{
  int v2 = sub_100266B9C();
  sub_100266FB0(a1, v2);
  uint64_t v3 = (os_log_s *)qword_1008F7598;
  if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 112)) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    int v6 = 136315138;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Device is now unlocked, read VoiceTrigger setting as %s",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t v5 = sub_1002E8D54();
  sub_10024E060(v5 + 448, a1 + 16);
}

void sub_100267618(uint64_t a1)
{
}

void sub_100267624(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    int v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  int v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      int v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1002676D8(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_1002676D8(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    unint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        BOOL v23 = (char *)sub_100008BA0(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)unint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)____int128 src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    BOOL v9 = __src + 8;
    unint64_t v10 = v6 - 8;
    BOOL v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1002678DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100267914(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    int v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  int v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      int v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1002679C8(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_1002679C8(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    unint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        BOOL v23 = (char *)sub_100008BA0(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)unint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)____int128 src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    BOOL v9 = __src + 8;
    unint64_t v10 = v6 - 8;
    BOOL v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_100267BCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100267C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    int v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  int v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      int v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_100267CB8(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_100267CB8(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    unint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        BOOL v23 = (char *)sub_100008BA0(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)unint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)____int128 src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    BOOL v9 = __src + 8;
    unint64_t v10 = v6 - 8;
    BOOL v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_100267EBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100267EF4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100267F48(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100267F30(_Unwind_Exception *a1)
{
}

uint64_t *sub_100267F48(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = sub_100267FCC(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_100267FCC(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  int v6 = (void **)sub_100268054(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_100029630(a1, v11, v8, v7);
  }

  return v7;
}

void *sub_100268054(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }

      while (v9);
    }

    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }

      while (v14);
    }

    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }

      while (v16);
    }

    else
    {
      uint64_t v17 = a1 + 1;
    }

void sub_1002681FC(id a1)
{
  uint64_t v1 = operator new(0x350uLL);
  sub_100461C70();
  off_1008D9028 = v1;
}

void sub_10026822C(_Unwind_Exception *a1)
{
}

uint64_t sub_100268240(uint64_t result)
{
  *(void *)uint64_t result = &off_10088A408;
  *(void *)(result + 8) = &off_10088A5E0;
  *(void *)(result + 16) = &off_10088A600;
  *(void *)(result + 24) = &off_10088A620;
  *(void *)(result + 32) = &off_10088A640;
  *(void *)(result + 40) = &off_10088A660;
  *(void *)(result + 48) = &off_10088A680;
  *(void *)(result + 56) = &off_10088A6A0;
  *(_DWORD *)(result + 208) = 0;
  *(void *)(result + sub_100242FAC(v1 - 64) = &off_10088A6C0;
  *(void *)(result + 216) = 0LL;
  *(void *)(result + 224) = 0LL;
  *(void *)(result + 72) = &off_10088A6E0;
  *(void *)(result + 232) = 0LL;
  *(void *)(result + 240) = result;
  *(void *)(result + sub_100242FAC(v40 - 80) = &off_10088A700;
  *(void *)(result + 88) = &off_10088A720;
  *(_DWORD *)(result + 248) = 0;
  *(void *)(result + 96) = &off_10088A740;
  *(void *)(result + 104) = &off_10088A760;
  *(void *)(result + 112) = &off_10088A780;
  *(void *)(result + 120) = &off_10088A7A0;
  *(void *)(result + 256) = 0LL;
  *(void *)(result + 2sub_100242FAC(v1 - 64) = 0LL;
  *(void *)(result + 128) = &off_10088A7C0;
  *(void *)(result + 136) = &off_10088A7E0;
  *(void *)(result + 144) = &off_10088A800;
  *(void *)(result + 152) = &off_10088A820;
  *(void *)(result + 272) = 0LL;
  *(void *)(result + 2sub_100242FAC(v40 - 80) = result + 8;
  *(void *)(result + 160) = &off_10088A840;
  *(void *)(result + 168) = &off_10088A860;
  *(void *)(result + 176) = &off_10088A880;
  *(void *)(result + 184) = &off_10088A8A0;
  *(void *)(result + 192) = &off_10088A8C0;
  *(_DWORD *)(result + 288) = 0;
  *(void *)(result + 200) = &off_10088A8E0;
  *(void *)(result + 296) = 0LL;
  *(void *)(result + 304) = 0LL;
  *(void *)(result + 312) = 0LL;
  *(void *)(result + 320) = result + 16;
  *(_DWORD *)(result + 328) = 0;
  *(void *)(result + 336) = 0LL;
  *(void *)(result + 344) = 0LL;
  *(void *)(result + 352) = 0LL;
  *(void *)(result + 360) = result + 24;
  *(_DWORD *)(result + 368) = 0;
  *(void *)(result + 376) = 0LL;
  *(void *)(result + 384) = 0LL;
  *(void *)(result + 392) = 0LL;
  *(void *)(result + 400) = result + 32;
  *(_DWORD *)(result + 408) = 0;
  *(void *)(result + 416) = 0LL;
  *(void *)(result + 424) = 0LL;
  *(void *)(result + 432) = 0LL;
  *(void *)(result + 440) = result + 40;
  *(_DWORD *)(result + 448) = 0;
  *(void *)(result + 456) = 0LL;
  *(void *)(result + 4sub_100242FAC(v1 - 64) = 0LL;
  *(void *)(result + 472) = 0LL;
  *(void *)(result + 4sub_100242FAC(v40 - 80) = result + 48;
  *(_DWORD *)(result + 488) = 0;
  *(void *)(result + 496) = 0LL;
  *(void *)(result + 504) = 0LL;
  *(void *)(result + 512) = 0LL;
  *(void *)(result + 520) = result + 56;
  *(_DWORD *)(result + 528) = 0;
  *(void *)(result + 544) = 0LL;
  *(void *)(result + 536) = 0LL;
  *(void *)(result + 552) = 0LL;
  *(void *)(result + 560) = result + 64;
  *(_DWORD *)(result + 568) = 0;
  *(void *)(result + 584) = 0LL;
  *(void *)(result + 576) = 0LL;
  *(void *)(result + 592) = 0LL;
  *(void *)(result + 600) = result + 72;
  *(_DWORD *)(result + 608) = 0;
  *(void *)(result + 624) = 0LL;
  *(void *)(result + 616) = 0LL;
  *(void *)(result + 632) = 0LL;
  *(void *)(result + 640) = result + 80;
  *(_DWORD *)(result + 648) = 0;
  *(void *)(result + 6sub_100242FAC(v1 - 64) = 0LL;
  *(void *)(result + 656) = 0LL;
  *(void *)(result + 672) = 0LL;
  *(void *)(result + 6sub_100242FAC(v40 - 80) = result + 88;
  *(_DWORD *)(result + 688) = 0;
  *(void *)(result + 704) = 0LL;
  *(void *)(result + 696) = 0LL;
  *(void *)(result + 712) = 0LL;
  *(void *)(result + 720) = result + 96;
  *(_DWORD *)(result + 728) = 0;
  *(void *)(result + 744) = 0LL;
  *(void *)(result + 736) = 0LL;
  *(void *)(result + 752) = 0LL;
  *(void *)(result + 760) = result + 104;
  *(_DWORD *)(result + 768) = 0;
  *(void *)(result + 784) = 0LL;
  *(void *)(result + 776) = 0LL;
  *(void *)(result + 792) = 0LL;
  *(void *)(result + 800) = result + 112;
  *(_DWORD *)(result + 808) = 0;
  *(void *)(result + 824) = 0LL;
  *(void *)(result + 816) = 0LL;
  *(void *)(result + 832) = 0LL;
  *(void *)(result + 840) = result + 120;
  *(_DWORD *)(result + 848) = 0;
  *(void *)(result + 8sub_100242FAC(v1 - 64) = 0LL;
  *(void *)(result + 856) = 0LL;
  *(void *)(result + 872) = 0LL;
  *(void *)(result + 8sub_100242FAC(v40 - 80) = result + 128;
  *(_DWORD *)(result + 888) = 0;
  *(void *)(result + 904) = 0LL;
  *(void *)(result + 896) = 0LL;
  *(void *)(result + 912) = 0LL;
  *(void *)(result + 920) = result + 136;
  *(_DWORD *)(result + 928) = 0;
  *(void *)(result + 944) = 0LL;
  *(void *)(result + 936) = 0LL;
  *(void *)(result + 952) = 0LL;
  *(void *)(result + 960) = result + 144;
  *(_DWORD *)(result + 968) = 0;
  *(void *)(result + 984) = 0LL;
  *(void *)(result + 976) = 0LL;
  *(void *)(result + 992) = 0LL;
  *(void *)(result + 1000) = result + 152;
  *(_DWORD *)(result + 1008) = 0;
  *(void *)(result + 1024) = 0LL;
  *(void *)(result + 1016) = 0LL;
  *(void *)(result + 1032) = 0LL;
  *(void *)(result + 1040) = result + 160;
  *(_DWORD *)(result + 1048) = 0;
  *(void *)(result + 10sub_100242FAC(v1 - 64) = 0LL;
  *(void *)(result + 1056) = 0LL;
  *(void *)(result + 1072) = 0LL;
  *(void *)(result + 10sub_100242FAC(v40 - 80) = result + 168;
  *(_DWORD *)(result + 1088) = 0;
  *(void *)(result + 1104) = 0LL;
  *(void *)(result + 1096) = 0LL;
  *(void *)(result + 1112) = 0LL;
  *(void *)(result + 1120) = result + 176;
  *(_DWORD *)(result + 1128) = 0;
  *(void *)(result + 1144) = 0LL;
  *(void *)(result + 1136) = 0LL;
  *(void *)(result + 1152) = 0LL;
  *(void *)(result + 1160) = result + 184;
  *(_DWORD *)(result + 1168) = 0;
  *(void *)(result + 1184) = 0LL;
  *(void *)(result + 1176) = 0LL;
  *(void *)(result + 1192) = 0LL;
  *(void *)(result + 1200) = result + 192;
  *(_DWORD *)(result + 1208) = 0;
  *(void *)(result + 1224) = 0LL;
  *(void *)(result + 1216) = 0LL;
  *(void *)(result + 1232) = 0LL;
  *(void *)(result + 1240) = result + 200;
  *(_DWORD *)(result + 1248) = 0;
  return result;
}

void sub_10026856C(os_unfair_lock_s *a1, void **a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a2;
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Hostname has been set to %s", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768LL;
  _DWORD v6[2] = sub_10026877C;
  void v6[3] = &unk_10088A8F0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100024238(&__p, *a2, (unint64_t)a2[1]);
  }

  else
  {
    __int128 __p = *(_OWORD *)a2;
    uint64_t v8 = a2[2];
  }

  sub_1002686C0(a1 + 52, v6);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10026869C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_1002686C0(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    unint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100268754( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_10026877C(uint64_t a1, void (***a2)(void, void **))
{
  if (*(char *)(a1 + 55) < 0)
  {
    sub_100024238(__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
  }

  (**a2)(a2, __p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002687F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10026880C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_10026883C(uint64_t a1)
{
}

void sub_100268850(os_unfair_lock_s *a1, int a2, int a3, int a4)
{
  uint64_t v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v9 = "disabled";
    *(_DWORD *)__int128 buf = 136446722;
    if (a2) {
      BOOL v9 = "enabled";
    }
    unint64_t v15 = v9;
    __int16 v16 = 1024;
    int v17 = a3;
    __int16 v18 = 1024;
    int v19 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Tethering is now %{public}s with %u out of %u clients connected",  buf,  0x18u);
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100268A38;
  v10[3] = &unk_10088A920;
  char v11 = a2;
  char v12 = a3;
  char v13 = a4;
  sub_10026897C(a1 + 62, v10);
}

void sub_10026897C(os_unfair_lock_s *a1, void *a2)
{
  __int128 v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    unint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100268A10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100268A38(unsigned __int8 *a1, uint64_t (***a2)(void, void, void, void))
{
  return (**a2)(a2, a1[32], a1[33], a1[34]);
}

void sub_100268A58(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&__int128 v9 = a2;
  *((void *)&v9 + 1) = a3;
  uint64_t v4 = (os_log_s *)(id)qword_1008F7578;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1001F9F74((uint64_t)&v9, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int128 buf = 136446210;
    char v11 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100268C50;
  void v6[3] = &unk_10088A940;
  __int128 v7 = v9;
  sub_100268B94(a1 + 72, v6);
}

void sub_100268B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100268B94(os_unfair_lock_s *a1, void *a2)
{
  __int128 v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    unint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100268C28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100268C50(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_100268C68(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Airplane Mode is now %d", buf, 8u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100268E0C;
  v5[3] = &unk_10088A960;
  char v6 = a2;
  sub_100268D50(a1 + 82, v5);
}

void sub_100268D50(os_unfair_lock_s *a1, void *a2)
{
  __int128 v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_100268DE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100268E0C(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_100268E24(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Low Power Mode is now %d", buf, 8u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100268F0C;
  v5[3] = &unk_10088A960;
  char v6 = a2;
  sub_100268D50(a1 + 82, v5);
}

uint64_t sub_100268F0C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 8LL))(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_100268F24(os_unfair_lock_s *a1, unsigned int a2, int a3)
{
  char v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 >= 3)
    {
      uint64_t v7 = "systemWillShutDown";
      if (a2 == 3) {
        uint64_t v7 = "systemWillPowerOn";
      }
    }

    else
    {
      uint64_t v7 = off_10088AC08[a2];
    }

    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PowerManagement event: %{public}s",  (uint8_t *)&buf,  0xCu);
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v15 = 0x2020000000LL;
  char v16 = 1;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100269160;
  v11[3] = &unk_10088A988;
  uint8_t v11[4] = &buf;
  unsigned int v12 = a2;
  int v13 = a3;
  sub_1002690A4(a1 + 92, v11);
  if (a2 == 1)
  {
    uint64_t v8 = sub_1002E6E9C();
    (*(void (**)(uint64_t))(*(void *)v8 + 3296LL))(v8);
  }

  uint64_t v9 = *(unsigned __int8 *)(*((void *)&buf + 1) + 24LL);
  _Block_object_dispose(&buf, 8);
  return v9;
}

void sub_10026908C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002690A4(os_unfair_lock_s *a1, void *a2)
{
  __int128 v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_100269138( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100269160(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  switch(*(_DWORD *)(result + 40))
  {
    case 0:
      uint64_t result = (**(uint64_t (***)(uint64_t))a2)(a2);
      goto LABEL_7;
    case 1:
      __int128 v3 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL);
      goto LABEL_5;
    case 2:
      __int128 v3 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL);
LABEL_5:
      uint64_t result = v3(a2);
      break;
    case 4:
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24LL))(a2, *(unsigned int *)(result + 44));
LABEL_7:
      uint64_t v4 = *(void *)(*(void *)(v2 + 32) + 8LL);
      if (*(_BYTE *)(v4 + 24)) {
        char v5 = result;
      }
      else {
        char v5 = 0;
      }
      *(_BYTE *)(v4 + 24) = v5;
      break;
    default:
      return result;
  }

  return result;
}

void sub_100269208(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System keybag unlocked : %d", buf, 8u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1002693AC;
  v5[3] = &unk_10088A9A8;
  char v6 = a2;
  sub_1002692F0(a1 + 112, v5);
}

void sub_1002692F0(os_unfair_lock_s *a1, void *a2)
{
  __int128 v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_100269384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002693AC(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002693C4(os_unfair_lock_s *a1, char a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1002694D4;
  v2[3] = &unk_10088A9C8;
  char v3 = a2;
  sub_100269418(a1 + 122, v2);
}

void sub_100269418(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_1002694AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002694D4(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002694EC(os_unfair_lock_s *a1, int a2, int a3)
{
  char v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = "dis";
    if (a2) {
      uint64_t v7 = "";
    }
    *(_DWORD *)__int128 buf = 67109378;
    int v12 = a3;
    __int16 v13 = 2082;
    BOOL v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Battery capacity is now at %u%% (%{public}scharging)",  buf,  0x12u);
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1002696BC;
  v8[3] = &unk_10088A9E8;
  char v9 = a2;
  char v10 = a3;
  sub_100269600(a1 + 102, v8);
}

void sub_100269600(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_100269694( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002696BC(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
}

void sub_1002696D8(os_unfair_lock_s *a1, unsigned int a2)
{
  if (a2 > 2) {
    uint64_t v4 = "unknown";
  }
  else {
    uint64_t v4 = off_10088AC20[a2];
  }
  char v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    char v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Power source is now %s", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10026989C;
  void v6[3] = &unk_10088AA08;
  unsigned int v7 = a2;
  sub_1002697E0(a1 + 132, v6);
}

void sub_1002697E0(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_100269874( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026989C(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_1002698B4(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    char v5 = "off";
    if (a2) {
      char v5 = "on";
    }
    *(_DWORD *)__int128 buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Microphone is now %{public}s", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100269A70;
  void v6[3] = &unk_10088AA28;
  char v7 = a2;
  sub_1002699B4(a1 + 142, v6);
}

void sub_1002699B4(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_100269A48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100269A70(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_100269A88(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    char v5 = "disabled";
    if (a2) {
      char v5 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Siri is now %{public}s", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100269C44;
  void v6[3] = &unk_10088AA48;
  char v7 = a2;
  sub_100269B88(a1 + 152, v6);
}

void sub_100269B88(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_100269C1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100269C44(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_100269C5C(os_unfair_lock_s *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Siri VoiceTrigger state changed", v3, 2u);
  }

  sub_100269CD4(a1 + 162, &stru_10088AA88);
}

void sub_100269CD4(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_100269D68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_100269D90(id a1, SiriVoiceTriggerListener *a2)
{
}

void sub_100269DA0(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    char v5 = "off";
    if (a2) {
      char v5 = "on";
    }
    *(_DWORD *)__int128 buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Screen state is now %{public}s", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100269F5C;
  void v6[3] = &unk_10088AAA8;
  char v7 = a2;
  sub_100269EA0(a1 + 182, v6);
}

void sub_100269EA0(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_100269F34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100269F5C(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_100269F74(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    char v5 = "Closed";
    if (a2) {
      char v5 = "Lauched";
    }
    *(_DWORD *)__int128 buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GarageBand is now %{public}s", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10026A130;
  void v6[3] = &unk_10088AAC8;
  char v7 = a2;
  sub_10026A074(a1 + 222, v6);
}

void sub_10026A074(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_10026A108( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026A130(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_10026A148(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    char v5 = "Not Allowed";
    if (a2) {
      char v5 = "Allowed";
    }
    *(_DWORD *)__int128 buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Spatial Profile is now %{public}s", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10026A304;
  void v6[3] = &unk_10088AAE8;
  char v7 = a2;
  sub_10026A248(a1 + 252, v6);
}

void sub_10026A248(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_10026A2DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026A304(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_10026A31C(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    char v5 = "Disabled";
    if (a2) {
      char v5 = "Enabled";
    }
    *(_DWORD *)__int128 buf = 136446210;
    char v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "HID 3pp LE to Low Latency is now %{public}s",  buf,  0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10026A4D8;
  void v6[3] = &unk_10088AB08;
  char v7 = a2;
  sub_10026A41C(a1 + 262, v6);
}

void sub_10026A41C(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_10026A4B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026A4D8(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_10026A4F0(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    char v5 = "off";
    if (a2) {
      char v5 = "on";
    }
    *(_DWORD *)__int128 buf = 136446210;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Keyboard is now %{public}s", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10026A6AC;
  void v6[3] = &unk_10088AB28;
  char v7 = a2;
  sub_10026A5F0(a1 + 202, v6);
}

void sub_10026A5F0(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_10026A684( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026A6AC(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_10026A6C4(os_unfair_lock_s *a1, int a2)
{
  else {
    uint64_t v4 = off_10088AC38[a2 - 1];
  }
  char v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    char v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device orientation is now %s", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10026A88C;
  void v6[3] = &unk_10088AB48;
  int v7 = a2;
  sub_10026A7D0(a1 + 212, v6);
}

void sub_10026A7D0(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_10026A864( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026A88C(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_10026A8A4(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "SystemSettingsModel::systemMonitor device lock state changed:%d",  buf,  8u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10026AA48;
  v5[3] = &unk_10088AB68;
  char v6 = a2;
  sub_10026A98C(a1 + 272, v5);
}

void sub_10026A98C(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_10026AA20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026AA48(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_10026AA60(os_unfair_lock_s *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "SystemSettingsModel::systemMonitor first unlock",  v3,  2u);
  }

  sub_10026AAD8(a1 + 282, &stru_10088ABA8);
}

void sub_10026AAD8(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_10026AB6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_10026AB94(id a1, DeviceFirstUnlockedListener *a2)
{
}

void sub_10026ABA4(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "SystemSettingsModel::systemMonitor game console mode changed:%d",  buf,  8u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10026AD48;
  v5[3] = &unk_10088ABC8;
  char v6 = a2;
  sub_10026AC8C(a1 + 292, v5);
}

void sub_10026AC8C(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_10026AD20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026AD48(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_10026AD60(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "SystemSettingsModel::notifySmartCoverStateChanged Smart Cover State Changed:%d",  buf,  8u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10026AF04;
  v5[3] = &unk_10088ABE8;
  int v6 = a2;
  sub_10026AE48(a1 + 302, v5);
}

void sub_10026AE48(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  char v5 = 0LL;
  int v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    int v6 = v4;
    operator delete(v4);
  }
}

void sub_10026AEDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026AF04(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_10026AF1C(os_unfair_lock_s *a1, int a2)
{
  a1[312]._os_unfair_lock_opaque = a2;
  sub_10026AD60(a1, a2);
}

uint64_t sub_10026AF24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1248);
}

void sub_10026B044( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___BTVCLinkAdvertiser;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10026B168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026B1E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_10026B318( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

void sub_10026B34C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(void **)(v2 + 48);
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;

  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0LL;
}

_BYTE *sub_10026B390(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (result[25]) {
    return [result _restartIfNeeded:0];
  }
  return result;
}

void sub_10026B4E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

void sub_10026B51C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0LL;
}

_BYTE *sub_10026B560(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (result[25]) {
    return [result _restartIfNeeded:0];
  }
  return result;
}

id sub_10026B64C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activateWithCompletion:*(void *)(a1 + 40)];
}

void sub_10026B928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10026B9F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _advertisingEnable:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10026BC38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10026BC64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[BTVCLinkAdvertiser _advertisingEnable:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s _restartIfNeeded\n", (uint8_t *)&v3, 0xCu);
  }

  [WeakRetained _restartIfNeeded:1];
}

void sub_10026BD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10026BD94(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_10026BF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026C320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026C430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026C54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026C634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026C760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026C8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026C9BC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10026C9CC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10026C9DC(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

uint64_t sub_10026C9EC@<X0>(unsigned __int8 *a1@<X1>, int a2@<W2>, std::stringbuf::string_type *a3@<X8>)
{
  LODWORD(v3) = a2;
  uint64_t v13 = 0LL;
  __int128 v11 = 0u;
  memset(v12, 0, sizeof(v12));
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v10 = 0u;
  memset(v8, 0, sizeof(v8));
  sub_10020E564((uint64_t)v8);
  if ((_DWORD)v3)
  {
    uint64_t v3 = v3;
    do
    {
      *(_DWORD *)((char *)v8 + *(void *)(*(void *)&v8[0] - 24LL) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v8
                                                                                      + *(void *)(*(void *)&v8[0]
                                                                                                  - 24LL)
                                                                                      + 8) & 0xFFFFFFB5 | 8;
      unsigned int v6 = *a1++;
      std::ostream::operator<<(v8, v6);
      --v3;
    }

    while (v3);
  }

  std::stringbuf::str(a3, (const std::stringbuf *)((char *)v8 + 8));
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v8 + 8);
  return std::ios::~ios(v12);
}

void sub_10026CB00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

NSMutableString *sub_10026CB18(uint64_t a1, int a2)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  uint64_t v4 = v3;
  if (a2 == -1)
  {
    char v5 = @"ALL";
    goto LABEL_5;
  }

  if (!a2)
  {
    char v5 = @"NONE";
LABEL_5:
    -[NSMutableString appendString:](v3, "appendString:", v5);
    return v4;
  }

  for (int i = 0; i != 32; ++i)
  {
    if (((1 << i) & a2) != 0)
    {
      if (-[NSMutableString length](v4, "length")) {
        -[NSMutableString appendString:](v4, "appendString:", @",");
      }
      int v10 = (1 << i) & a2;
      uint64_t v7 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sub_100426610(&v10));
      int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      -[NSMutableString appendString:](v4, "appendString:", v8);
    }
  }

  return v4;
}

void sub_10026CC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSMutableString *sub_10026CC30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  uint64_t v4 = v3;
  if (a2)
  {
    for (uint64_t i = 0LL; i != 64; ++i)
    {
      uint64_t v6 = (1LL << i) & a2;
      if (v6)
      {
        if (-[NSMutableString length](v4, "length")) {
          -[NSMutableString appendString:](v4, "appendString:", @",");
        }
        uint64_t v7 = "ContactSyncSettingsSupported";
        switch(v6)
        {
          case 1LL:
            break;
          case 2LL:
            uint64_t v7 = "ContactSyncSettingsEnabled";
            break;
          case 3LL:
          case 5LL:
          case 6LL:
          case 7LL:
            goto LABEL_11;
          case 4LL:
            uint64_t v7 = "RecentCallsSyncSettingsEnabled";
            break;
          case 8LL:
            uint64_t v7 = "FavoritedSyncSettingsEnabled";
            break;
          default:
            if (v6 == 16)
            {
              uint64_t v7 = "ContactSyncSettingsGranted";
            }

            else if (v6 == 32)
            {
              uint64_t v7 = "MapSyncEnabled";
            }

            else
            {
LABEL_11:
              uint64_t v7 = "Unknown";
            }

            break;
        }

        int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7));
        -[NSMutableString appendString:](v4, "appendString:", v8);
      }
    }
  }

  else
  {
    -[NSMutableString appendString:](v3, "appendString:", @"SyncSettingsCleared");
  }

  return v4;
}

void sub_10026CD84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef sub_10026CDA4(uint64_t a1, int a2)
{
  if (a2 <= 100)
  {
    if (a2 > 10)
    {
      if (a2 == 11) {
        return @"CONNECTION_RESULT";
      }
      if (a2 == 12) {
        return @"DISCONNECTION_RESULT";
      }
    }

    else
    {
      if (a2 == 1) {
        return @"CONNECTION_ATTEMPT";
      }
      if (a2 == 2) {
        return @"DISCONNECTION_ATTEMPT";
      }
    }
  }

  else if (a2 <= 200)
  {
    if (a2 == 101) {
      return @"HANDSFREE_AUDIO_CONNECTED";
    }
    if (a2 == 102) {
      return @"HANDSFREE_AUDIO_DISCONNECTED";
    }
  }

  else
  {
    switch(a2)
    {
      case 201:
        return @"A2DP_AUDIO_CONNECTED";
      case 202:
        return @"A2DP_AUDIO_DISCONNECTED";
      case 412:
        return @"HANDSFREE_AUDIO_CONNECTION_LOOPS";
    }
  }

  return @"Unknown";
}

void *sub_10026CE7C(void *a1)
{
  *a1 = &off_10088AE38;
  sub_100242DC4(a1 + 1);
  a1[9] = 0LL;
  a1[10] = 0LL;
  a1[11] = off_10088AE08;
  *a1 = off_10088AD10;
  a1[13] = 0LL;
  a1[12] = a1 + 13;
  a1[14] = 0LL;
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v3 setListener:a1 + 11];

  objc_autoreleasePoolPop(v2);
  return a1;
}

void sub_10026CF2C(_Unwind_Exception *a1)
{
  sub_10026E7F0(v3, *(void **)(v1 + 104));
  *(void *)uint64_t v1 = v5;
  sub_100242E28(v2);
  _Unwind_Resume(a1);
}

void sub_10026CF60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v16 = a2;
  id v6 = a3;
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 8);
  uint64_t v7 = objc_autoreleasePoolPush();
  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v8 registerApplication:v6 pid:a4];

  objc_autoreleasePoolPop(v7);
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v14 = 0LL;
  id v9 = v6;
  sub_10002418C(__p, (char *)[v9 UTF8String]);
  int v10 = (uint64_t **)(a1 + 96);
  int v17 = __p;
  __int128 v11 = sub_10026E878((uint64_t **)(a1 + 96), (const void **)__p, (uint64_t)&unk_1006C2518, (__int128 **)&v17);
  sub_1002555B0((uint64_t **)v11 + 7, &v16, (uint64_t *)&v16);
  int v17 = __p;
  int v12 = sub_10026E878(v10, (const void **)__p, (uint64_t)&unk_1006C2518, (__int128 **)&v17);
  if (v12 != v11) {
    sub_10026EA0C((uint64_t **)v12 + 7, (void *)v11[7], v11 + 8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  sub_100242FAC((uint64_t)v15);
}

void sub_10026D0A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_10026D0E8(uint64_t **a1, unint64_t a2, void *a3)
{
  unint64_t v16 = a2;
  id v4 = a3;
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, (uint64_t)(a1 + 1));
  std::stringbuf::string_type __p = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  id v5 = v4;
  sub_10002418C(&__p, (char *)[v5 UTF8String]);
  uint64_t v6 = sub_100024098((uint64_t)(a1 + 12), (const void **)&__p);
  uint64_t v7 = (uint64_t *)v6;
  if (a1 + 13 != (uint64_t **)v6)
  {
    sub_10020166C(v6 + 56, &v16);
    if (!v7[9])
    {
      ((void (*)(uint64_t **, unint64_t))(*a1)[13])(a1, v16);
      sub_1001FDBCC(a1 + 12, v7);
      sub_10026E838((uint64_t)(v7 + 4));
      operator delete(v7);
      int v8 = objc_autoreleasePoolPush();
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
      if (v14 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  p_p,  __p,  v13,  v14));
      [v9 unregisterApplication:v11];

      objc_autoreleasePoolPop(v8);
    }
  }

  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)v15);
}

void sub_10026D240( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_10026D290(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v6 = a3;
  id v7 = a4;
  int v8 = objc_autoreleasePoolPush();
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v9 launchApplication:v10 restoringCentrals:v6 peripherals:v7];

  objc_autoreleasePoolPop(v8);
}

void sub_10026D31C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10026D344(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  id v4 = objc_autoreleasePoolPush();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v5 updateApplicationAliveStatus:v6 isAlive:a3];

  objc_autoreleasePoolPop(v4);
}

void sub_10026D3B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10026D3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v4 updateApplicationState:a2];

  objc_autoreleasePoolPop(v3);
}

void sub_10026D420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026D430(uint64_t a1, uint64_t a2)
{
  id v4 = objc_autoreleasePoolPush();
  sub_10026D51C(a1, a2, __p);
  if (v9 >= 0) {
    id v5 = __p;
  }
  else {
    id v5 = (void **)__p[0];
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v7 setCentralBackgroundingSupported:v6];

  objc_autoreleasePoolPop(v4);
}

void sub_10026D4E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026D51C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 8);
  id v6 = *(void **)(a1 + 96);
  if (v6 == (void *)(a1 + 104))
  {
LABEL_16:
    sub_10002418C(a3, "");
  }

  else
  {
    while (1)
    {
      id v7 = (void *)v6[7];
      if (v7 != v6 + 8) {
        break;
      }
LABEL_10:
      __int128 v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          __int128 v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          int v12 = (void *)v6[2];
          BOOL v10 = *v12 == (void)v6;
          id v6 = v12;
        }

        while (!v10);
      }

      id v6 = v12;
      if (v12 == (void *)(a1 + 104)) {
        goto LABEL_16;
      }
    }

    while (v7[4] != a2)
    {
      int v8 = (void *)v7[1];
      if (v8)
      {
        do
        {
          char v9 = v8;
          int v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          char v9 = (void *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          id v7 = v9;
        }

        while (!v10);
      }

      id v7 = v9;
      if (v9 == v6 + 8) {
        goto LABEL_10;
      }
    }

    if (*((char *)v6 + 55) < 0)
    {
      sub_100024238(a3, (void *)v6[4], v6[5]);
    }

    else
    {
      __int128 v13 = *((_OWORD *)v6 + 2);
      a3[2] = v6[6];
      *(_OWORD *)a3 = v13;
    }
  }

  return sub_100242FAC((uint64_t)v15);
}

void sub_10026D644( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10026D65C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_autoreleasePoolPush();
  sub_10026D51C(a1, a2, __p);
  if (v9 >= 0) {
    id v5 = __p;
  }
  else {
    id v5 = (void **)__p[0];
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v7 setPeripheralBackgroundingSupported:v6];

  objc_autoreleasePoolPop(v4);
}

void sub_10026D714( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

id sub_10026D748(uint64_t a1, uint64_t a2)
{
  id v4 = objc_autoreleasePoolPush();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  sub_10026D51C(a1, a2, __p);
  if (v11 >= 0) {
    id v6 = __p;
  }
  else {
    id v6 = (void **)__p[0];
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
  id v8 = [v5 applicationStateForProcess:v7];

  if (v11 < 0) {
    operator delete(__p[0]);
  }

  objc_autoreleasePoolPop(v4);
  return v8;
}

void sub_10026D80C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10026D840(uint64_t a1, const void **a2, char a3)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 8);
  uint64_t v6 = sub_100024098(a1 + 96, a2);
  if (a1 + 104 != v6)
  {
    if (*(void *)(a1 + 72))
    {
      id v7 = *(void **)(v6 + 56);
      id v8 = (void *)(v6 + 64);
      if (v7 != (void *)(v6 + 64))
      {
        do
        {
          uint64_t v9 = v7[4];
          uint64_t v10 = sub_100404FE8();
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 3221225472LL;
          void v15[2] = sub_10026D968;
          v15[3] = &unk_100886EE0;
          void v15[4] = a1;
          void v15[5] = v9;
          char v16 = a3;
          sub_100405384(v10, v15);
          char v11 = (void *)v7[1];
          if (v11)
          {
            do
            {
              int v12 = v11;
              char v11 = (void *)*v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              int v12 = (void *)v7[2];
              BOOL v13 = *v12 == (void)v7;
              id v7 = v12;
            }

            while (!v13);
          }

          id v7 = v12;
        }

        while (v12 != v8);
      }
    }
  }

  return sub_100242FAC((uint64_t)v17);
}

void sub_10026D950( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10026D968(uint64_t a1)
{
  return (***(uint64_t (****)(void, void, void))(*(void *)(a1 + 32) + 72LL))( *(void *)(*(void *)(a1 + 32) + 72LL),  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_10026D984(uint64_t a1, const void **a2, char a3)
{
  return sub_10026D840(a1 - 88, a2, a3);
}

uint64_t sub_10026D98C(uint64_t a1, const void **a2, int a3)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 8);
  uint64_t v6 = sub_100024098(a1 + 96, a2);
  if (a1 + 104 != v6)
  {
    if (*(void *)(a1 + 80))
    {
      id v7 = *(void **)(v6 + 56);
      id v8 = (void *)(v6 + 64);
      if (v7 != (void *)(v6 + 64))
      {
        do
        {
          uint64_t v9 = v7[4];
          uint64_t v10 = sub_100404FE8();
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 3221225472LL;
          void v15[2] = sub_10026DAB4;
          v15[3] = &unk_10087F900;
          void v15[4] = a1;
          void v15[5] = v9;
          int v16 = a3;
          sub_100405384(v10, v15);
          char v11 = (void *)v7[1];
          if (v11)
          {
            do
            {
              int v12 = v11;
              char v11 = (void *)*v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              int v12 = (void *)v7[2];
              BOOL v13 = *v12 == (void)v7;
              id v7 = v12;
            }

            while (!v13);
          }

          id v7 = v12;
        }

        while (v12 != v8);
      }
    }
  }

  return sub_100242FAC((uint64_t)v17);
}

void sub_10026DA9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10026DAB4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 32) + 80LL) + 8LL))( *(void *)(*(void *)(a1 + 32) + 80LL),  *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48));
}

uint64_t sub_10026DAD0(uint64_t a1, const void **a2, int a3)
{
  return sub_10026D98C(a1 - 88, a2, a3);
}

id sub_10026DAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  sub_10026D51C(a1, a2, __p);
  if (v13 >= 0) {
    id v8 = __p;
  }
  else {
    id v8 = (void **)__p[0];
  }
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = [v7 isBackgroundingSupported:v9 central:a3];

  if (v13 < 0) {
    operator delete(__p[0]);
  }

  objc_autoreleasePoolPop(v6);
  return v10;
}

void sub_10026DBAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10026DBE0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  id v8 = objc_autoreleasePoolPush();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  sub_10026D51C(a1, a2, __p);
  if (v14 >= 0) {
    id v10 = __p;
  }
  else {
    id v10 = (void **)__p[0];
  }
  char v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10));
  [v9 takeAssertionForProcess:v11 duration:a3 isUrgent:a4];

  if (v14 < 0) {
    operator delete(__p[0]);
  }

  objc_autoreleasePoolPop(v8);
  return 1LL;
}

void sub_10026DCB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10026DCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  sub_10026D51C(a1, a2, __p);
  if (v11 >= 0) {
    id v8 = __p;
  }
  else {
    id v8 = (void **)__p[0];
  }
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  [v7 showPowerAlert:v9 forDenylistMode:a3 validateBundle:1];

  if (v11 < 0) {
    operator delete(__p[0]);
  }

  objc_autoreleasePoolPop(v6);
}

void sub_10026DDBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10026DDF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  else {
    id v5 = (uint64_t *)*a2;
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
  [v4 showPowerAlert:v6 forDenylistMode:0 validateBundle:0];

  objc_autoreleasePoolPop(v3);
}

void sub_10026DE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026DE90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = objc_autoreleasePoolPush();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  sub_10026D51C(a1, a2, __p);
  if (v13 >= 0) {
    id v10 = __p;
  }
  else {
    id v10 = (void **)__p[0];
  }
  char v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10));
  [v9 showAppLaunchAlert:v11 device:v7 type:a4];

  if (v13 < 0) {
    operator delete(__p[0]);
  }

  objc_autoreleasePoolPop(v8);
}

void sub_10026DF6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10026DFAC(uint64_t a1, uint64_t a2)
{
  id v4 = objc_autoreleasePoolPush();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  sub_10026D51C(a1, a2, __p);
  if (v9 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
  [v5 cancelAppLaunchAlert:v7];

  if (v9 < 0) {
    operator delete(__p[0]);
  }

  objc_autoreleasePoolPop(v4);
}

void sub_10026E068( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10026E09C(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  id v8 = a2;
  uint64_t v6 = objc_autoreleasePoolPush();
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v7 showPairingAlert:v8 type:a3 passkey:a4];

  objc_autoreleasePoolPop(v6);
}

void sub_10026E110( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10026E130()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v1 showPairingAlert:0 type:0 passkey:0];

  objc_autoreleasePoolPop(v0);
}

void sub_10026E17C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026E18C(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v3 cancelPairingAlert:v4];

  objc_autoreleasePoolPop(v2);
}

void sub_10026E1E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10026E208(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 8);
  if (*(void *)(a1 + 72))
  {
    uint64_t v4 = sub_100404FE8();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10026E2E4;
    v5[3] = &unk_1008800B8;
    uint64_t v7 = a1;
    id v6 = v3;
    sub_100405384(v4, v5);
  }

  sub_100242FAC((uint64_t)v8);
}

void sub_10026E2B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10026E2E4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 40) + 72LL) + 8LL))( *(void *)(*(void *)(a1 + 40) + 72LL),  *(void *)(a1 + 32));
}

void sub_10026E2F8(uint64_t a1, void *a2)
{
}

void sub_10026E300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10 = a5;
  id v8 = objc_autoreleasePoolPush();
  char v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v9 displayAirWaveLaunchNotification:a2 forProduct:a3 reason:a4 findMySerialNumber:v10];

  objc_autoreleasePoolPop(v8);
}

void sub_10026E384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10026E3A4(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, void *a5)
{
  id v11 = a4;
  id v8 = a5;
  char v9 = objc_autoreleasePoolPush();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v10 showFoundAccessoryCrashAlert:a2 & 0xFFFFFFFFFFFFLL productID:a3 accessoryName:v11 firmwareVersion:v8];

  objc_autoreleasePoolPop(v9);
}

void sub_10026E434( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10026E458(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, void *a5)
{
  id v11 = a2;
  id v8 = a5;
  char v9 = objc_autoreleasePoolPush();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v10 showFoundAccessoryLogAlert:v11 isCrash:a3 pid:a4 accessoryName:v8];

  objc_autoreleasePoolPop(v9);
}

void sub_10026E4E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10026E50C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v8 showFileRadarNotification:a2 & 0xFFFFFFFFFFFFLL reason:a3 pid:a4];

  objc_autoreleasePoolPop(v7);
}

void sub_10026E574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10026E584(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  id v8 = a2;
  id v6 = objc_autoreleasePoolPush();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  [v7 openTapToRadarWithAccessoryLogs:v8 reason:a3 pid:a4];

  objc_autoreleasePoolPop(v6);
}

void sub_10026E5F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10026E618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = objc_autoreleasePoolPush();
  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](&OBJC_CLASS___BTAppInteraction, "instance"));
  char v13 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a3);
  char v14 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a4);
  uint64_t v15 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a5);
  int v16 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a6);
  [v12 btControllerTapToRadar:a2 reason:v13 cid:v14 cname:v15 cvers:v16];

  objc_autoreleasePoolPop(v11);
}

void sub_10026E700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10026E740(uint64_t a1)
{
  *(void *)a1 = off_10088AD10;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = off_10088AE08;
  sub_10026E7F0(a1 + 96, *(void **)(a1 + 104));
  *(void *)a1 = &off_10088AE38;
  sub_100242E28(a1 + 8);
  return a1;
}

void sub_10026E794(void *a1)
{
  *a1 = off_10088AD10;
  a1[11] = off_10088AE08;
  sub_10026E7F0((uint64_t)(a1 + 12), (void *)a1[13]);
  *a1 = &off_10088AE38;
  sub_100242E28(a1 + 1);
  operator delete(a1);
}

void sub_10026E7F0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10026E7F0(a1, *a2);
    sub_10026E7F0(a1, a2[1]);
    sub_10026E838((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_10026E838(uint64_t a1)
{
}

uint64_t *sub_10026E878(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v11 = 0LL;
  id v6 = (uint64_t **)sub_10023E6A4((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    id v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_10026E92C((uint64_t)a1, a4, v10);
    sub_100029630(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_10026E9C8((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_10026E92C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  id v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = v6 + 4;
  id v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_100024238(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }

  v6[8] = 0LL;
  v6[9] = 0LL;
  v6[7] = v6 + 8;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10026E9B0(_Unwind_Exception *a1)
{
}

void sub_10026E9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10026E838((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

uint64_t **sub_10026EA0C(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    id v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      id v8 = (uint64_t *)v6[1];
    }
    else {
      id v8 = v6;
    }
    char v14 = result;
    uint64_t v15 = v8;
    int v16 = v8;
    if (v8)
    {
      uint64_t v15 = sub_10026145C((uint64_t)v8);
      if (a2 != a3)
      {
        __int128 v9 = a2;
        do
        {
          _OWORD v8[4] = v9[4];
          sub_10026EB6C(v5, v8);
          id v8 = v15;
          int v16 = v15;
          if (v15) {
            uint64_t v15 = sub_10026145C((uint64_t)v15);
          }
          id v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              id v10 = (void *)*v10;
            }

            while (v10);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              __int128 v9 = a2;
            }

            while (!v11);
          }

          if (!v8) {
            break;
          }
          __int128 v9 = a2;
        }

        while (a2 != a3);
      }
    }

    uint64_t result = (uint64_t **)sub_1002614B0((uint64_t)&v14);
  }

  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_10026EBD8(v5, a2 + 4);
      int v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          char v13 = v12;
          int v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          char v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }

        while (!v11);
      }

      a2 = v13;
    }

    while (v13 != a3);
  }

  return result;
}

void sub_10026EB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_10026EB6C(uint64_t **a1, uint64_t *a2)
{
  id v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        id v3 = (uint64_t **)v4;
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }

      uint64_t v4 = (uint64_t *)v4[1];
    }

    while (v4);
    uint64_t v5 = v3 + 1;
  }

  else
  {
    uint64_t v5 = a1 + 1;
  }

uint64_t *sub_10026EBD8(uint64_t **a1, unint64_t *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  unint64_t v5 = *a2;
  v4[4] = *a2;
  id v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        id v6 = (uint64_t **)v7;
        if (v5 >= v7[4]) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        id v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }

      uint64_t v7 = (uint64_t *)v7[1];
    }

    while (v7);
    id v8 = v6 + 1;
  }

  else
  {
    id v8 = a1 + 1;
  }

uint64_t sub_10026EC64(uint64_t a1, int a2)
{
  *(void *)a1 = &off_10088AF10;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 16) = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  *(_BYTE *)(a1 + 24) = 0;
  sub_100242DC4(a1 + 32);
  sub_100242DC4(a1 + 96);
  sub_100242DC4(a1 + 160);
  sub_1002949BC(a1 + 224, a1);
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 2sub_100242FAC(v40 - 80) = 0LL;
  sub_10025FF5C((os_log_t *)(a1 + 288));
  *(void *)(a1 + 312) = 0LL;
  *(void *)(a1 + 320) = 0LL;
  sub_10025FF5C((os_log_t *)(a1 + 328));
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 36_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 389) = 0LL;
  *(_WORD *)(a1 + 397) = 2;
  return a1;
}

void sub_10026ED3C(_Unwind_Exception *a1)
{
}

uint64_t sub_10026ED80(uint64_t a1)
{
  *(void *)a1 = &off_10088AF10;
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2) {
    munmap(v2, *(void *)(a1 + 280));
  }
  uint64_t v3 = *(void **)(a1 + 312);
  if (v3) {
    munmap(v3, *(void *)(a1 + 320));
  }
  CFRelease(*(CFTypeRef *)(a1 + 16));
  sub_1002949E4(a1 + 224);
  sub_100242E28(a1 + 160);
  sub_100242E28(a1 + 96);
  sub_100242E28(a1 + 32);
  return a1;
}

void sub_10026EE04(_Unwind_Exception *a1)
{
}

uint64_t sub_10026EE48(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E00();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 8LL))(v2) & 1) != 0
    || (uint64_t v3 = sub_1002E6E00(), (*(unsigned int (**)(uint64_t))(*(void *)v3 + 24LL))(v3)))
  {
    *(_BYTE *)(a1 + 3sub_100242E28(v1 + 96) = 0;
    valuePtr.byte0 = 0;
    unsigned __int8 v44 = 0;
    uint64_t v4 = sub_1002E6E00();
    sub_10002418C(buf, "BTAudioHALPlugin");
    sub_10002418C(&__p, "EnableAudioCaptures");
    (*(void (**)(uint64_t, _BYTE *, CFUUIDBytes *, CFUUIDBytes *))(*(void *)v4 + 72LL))( v4,  buf,  &__p,  &valuePtr);
    if (v47 < 0) {
      operator delete(*(void **)&__p.byte0);
    }
    if (v49 < 0) {
      operator delete(*(void **)buf);
    }
    if (valuePtr.byte0) {
      sub_10026F4EC(a1, "kBTAudioDebugEnableAudioCaptures", kCFBooleanTrue);
    }
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "BTAudioHALPlugin");
    sub_10002418C(&__p, "BTAudioHALEnableAudioLogging");
    (*(void (**)(uint64_t, _BYTE *, CFUUIDBytes *, uint64_t))(*(void *)v5 + 72LL))(v5, buf, &__p, a1 + 396);
    if (v47 < 0) {
      operator delete(*(void **)&__p.byte0);
    }
    if (v49 < 0) {
      operator delete(*(void **)buf);
    }
    if (*(_BYTE *)(a1 + 396)) {
      CFBooleanRef v6 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v6 = kCFBooleanFalse;
    }
    sub_10026F4EC(a1, "kBTAudioDebugEnableAudioLogging", v6);
    uint64_t v7 = sub_1002E6E00();
    sub_10002418C(buf, "BTAudioHALPlugin");
    sub_10002418C(&__p, "BTAudioDebugEnableUWBSStereoTest");
    (*(void (**)(uint64_t, _BYTE *, CFUUIDBytes *, unsigned __int8 *))(*(void *)v7 + 72LL))( v7,  buf,  &__p,  &v44);
    if (v47 < 0) {
      operator delete(*(void **)&__p.byte0);
    }
    if (v49 < 0) {
      operator delete(*(void **)buf);
    }
    if (v44) {
      CFBooleanRef v8 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v8 = kCFBooleanFalse;
    }
    sub_10026F4EC(a1, "kBTAudioDebugEnableUWBSStereoTest", v8);
    __int128 v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v44;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BTAudioDebugEnableUWBSStereoTest:%d", buf, 8u);
    }
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 112LL))(a1))
  {
    id v10 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device supports Skywalk Path", buf, 2u);
    }

    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
    id v12 = [v11 getAudioSkywalkProvider];

    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    if (!v13)
    {
      char v14 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
        sub_10066535C(v14, v15, v16, v17, v18, v19, v20, v21);
      }
    }

    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = 0LL;
    sub_100242F28((uint64_t)buf, a1 + 160);
    unint64_t v22 = operator new(0x108uLL);
    sub_100457C58(v22, v12, v13, *(unsigned __int8 *)(a1 + 396));
    *(void *)(a1 + 352) = v22;
    v42[4] = a1;
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    void v43[2] = sub_10026F618;
    v43[3] = &unk_10088B020;
    v43[4] = a1;
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_10026F628;
    v42[3] = &unk_10088B040;
    sub_10045748C((uint64_t)v22, v43, 0LL, v42);
    *(void *)&__p.byte0 = 0LL;
    *(void *)&__p.byte8 = 0LL;
    id v23 = sub_100457D44(*(void *)(a1 + 352));
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    [v24 getUUIDBytes:&__p];

    sub_10026F97C(a1, "kBTAudioMsgPropertyNexusUuid", &__p);
    *(void *)&valuePtr.byte0 = 0LL;
    *(void *)&valuePtr.byte8 = 0LL;
    id v25 = sub_100457D4C(*(void *)(a1 + 352));
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    [v26 getUUIDBytes:&valuePtr];

    sub_100242F54((uint64_t)buf);
    sub_10026F97C(a1, "kBTAudioMsgPropertySkywalkKey", &valuePtr);
    sub_100242FAC((uint64_t)buf);
  }

  *(_DWORD *)&valuePtr.byte0 = 0;
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10088B060);
  }
  if (sub_100518504((uint64_t)off_1008D9248, *(void *)(a1 + 360), (float *)&valuePtr.byte0)
    && *(_DWORD *)(a1 + 8) == 1952539500)
  {
    __int128 v27 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = (void *)(a1 + 368);
      *(_DWORD *)__int128 buf = 134218242;
      *(double *)&uint8_t buf[4] = *(float *)&valuePtr.byte0;
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Received initial absolute volume of %f for device %{public}s before publishing",  buf,  0x16u);
    }

    CFNumberRef v29 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
    sub_10026F4EC(a1, "kBTAudioMsgPropertyVolumeScalar", v29);
    CFRelease(v29);
    sub_1002700E0(a1, "kBTAudioMsgPropertyVolumeScalar", *(float *)&valuePtr.byte0);
  }

  *(void *)&__p.byte0 = 0LL;
  *(void *)&__p.byte8 = 0LL;
  sub_100242F28((uint64_t)&__p, a1 + 32);
  uint64_t v30 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Sending publish message", buf, 2u);
  }

  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a1 + 16));
  if (Copy)
  {
    sub_100294A5C(a1 + 224, *(_DWORD *)(a1 + 8), Copy);
    CFRelease(Copy);
    *(_BYTE *)(a1 + 24) = 1;
    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = 0LL;
    uint64_t v32 = sub_100242F28((uint64_t)buf, a1 + 160);
    *(_BYTE *)(a1 + 39_Block_object_dispose(va, 8) = 1;
    sub_100242FAC(v32);
  }

  else
  {
    __int128 v33 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_10066532C(v33, v34, v35, v36, v37, v38, v39, v40);
    }
  }

  return sub_100242FAC((uint64_t)&__p);
}

void sub_10026F448( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  sub_100242FAC(v28 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_10026F4EC(uint64_t a1, const char *a2, const void *a3)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 32);
  CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  xpc_object_t value = 0LL;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), v6, (const void **)&value) && CFEqual(value, a3))
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v6, a3);
    uint64_t v7 = 1LL;
  }

  CFRelease(v6);
  uint64_t v8 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 8LL))(v8))
  {
    __int128 v9 = (void *)_CFXPCCreateXPCObjectFromCFObject(*(void *)(a1 + 16));
    if (v9)
    {
      xpc_release(v9);
    }

    else
    {
      id v10 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
        sub_1006653C4((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }

  sub_100242FAC((uint64_t)v19);
  return v7;
}

void sub_10026F5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10026F618(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 152LL))(*(void *)(a1 + 32));
}

uint64_t sub_10026F628(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 240LL))(*(void *)(a1 + 32));
}

void sub_10026F638(uint64_t a1, float a2)
{
}

uint64_t sub_10026F644(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)(a1 + 368);
    LODWORD(v6) = 136446210;
    *(void *)((char *)&v6 + 4) = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Unpublishing audio device %{public}s",  (uint8_t *)&v6,  0xCu);
  }

  __int128 v6 = 0uLL;
  sub_100242F28((uint64_t)&v6, a1 + 160);
  *(_BYTE *)(a1 + 39_Block_object_dispose(va, 8) = 0;
  sub_100242FAC((uint64_t)&v6);
  __int128 v6 = 0uLL;
  sub_100242F28((uint64_t)&v6, a1 + 160);
  uint64_t v4 = *(void *)(a1 + 352);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_100242F54((uint64_t)&v6);
  sub_100295184(a1 + 224);
  return sub_100242FAC((uint64_t)&v6);
}

void sub_10026F750( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10026F76C(uint64_t a1, uint64_t a2)
{
}

void sub_10026F77C(uint64_t a1, const char *a2, uint64_t a3)
{
  else {
    uint64_t v5 = *(const char **)a3;
  }
  CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
  sub_1002703E8(a1, a2, v6);
  CFRelease(v6);
}

void sub_10026F7E4(uint64_t a1, const void **a2)
{
  else {
    size_t v4 = (size_t)a2[1];
  }
  memset(&v15, 0, sizeof(v15));
  uint64_t v5 = &v15;
  sub_100271C18((uint64_t)&v15, v4 + 1);
  if ((v15.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    else {
      uint64_t v7 = *a2;
    }
    memmove(v5, v7, v4);
  }

  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 45;
  v6.i32[0] = *(_DWORD *)(a1 + 8);
  int16x8_t v8 = (int16x8_t)vmovl_u8(v6);
  *(int16x4_t *)v8.i8 = vrev64_s16(*(int16x4_t *)v8.i8);
  *(_DWORD *)__s = vmovn_s16(v8).u32[0];
  char v14 = 0;
  __int128 v9 = std::string::append(&v15, __s);
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
  v16[0] = v9->__r_.__value_.__l.__size_;
  *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v9->__r_.__value_.__s.__size_;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v12 = v16[0];
  *(void *)(a1 + 36_Block_object_dispose(va, 8) = v10;
  *(void *)(a1 + 376) = v12;
  *(void *)(a1 + 383) = *(void *)((char *)v16 + 7);
  *(_BYTE *)(a1 + 391) = size;
  std::string::operator=((std::string *)(a1 + 232), (const std::string *)(a1 + 368));
  sub_10026F77C(a1, "kBTAudioMsgPropertyDeviceUID", a1 + 368);
}

void sub_10026F940( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10026F964(uint64_t result, uint64_t a2)
{
  *(void *)(result + 360) = a2;
  return result;
}

void sub_10026F96C(uint64_t a1, uint64_t a2)
{
}

void sub_10026F97C(uint64_t a1, const char *a2, CFUUIDBytes *a3)
{
  CFUUIDRef v5 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *a3);
  sub_1002703E8(a1, a2, v5);
  CFRelease(v5);
}

uint64_t sub_10026F9D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isEqualToString:@"Audio/Video"])
  {
    uint64_t v3 = 1LL;
  }

  else if ([v2 isEqualToString:@"PhoneCall"])
  {
    uint64_t v3 = 2LL;
  }

  else if ([v2 isEqualToString:@"VoiceCommand"])
  {
    uint64_t v3 = 3LL;
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  return v3;
}

void sub_10026FA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10026FA58(uint64_t a1)
{
  return *(void *)(a1 + 272) != 0LL;
}

BOOL sub_10026FA68(uint64_t a1)
{
  return *(void *)(a1 + 312) != 0LL;
}

unint64_t sub_10026FA78(uint64_t a1)
{
  return sub_100260010(a1 + 288);
}

unint64_t sub_10026FA80(uint64_t a1)
{
  return sub_100260750(a1 + 288);
}

size_t sub_10026FA88(uint64_t a1, char *a2, size_t a3)
{
  if (!*(void *)(a1 + 272))
  {
    uint8x8_t v6 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
      sub_100665428(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  return sub_10026027C(a1 + 288, a2, a3);
}

unint64_t sub_10026FAF4(uint64_t a1, char *a2, size_t a3)
{
  if (!*(void *)(a1 + 272))
  {
    uint8x8_t v6 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
      sub_100665428(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  return sub_1002602EC(a1 + 288, a2, a3);
}

BOOL sub_10026FB60(uint64_t a1, char *a2, size_t *a3, size_t a4, char *a5, size_t *a6, size_t a7)
{
  if (!*(void *)(a1 + 272))
  {
    char v14 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
      sub_100665428(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }

  return sub_100260360(a1 + 288, a2, a3, a4, a5, a6, a7);
}

size_t sub_10026FBFC(uint64_t a1, char *a2, unint64_t a3, int a4)
{
  if (!*(void *)(a1 + 312))
  {
    uint64_t v8 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
      sub_100665498(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }

  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 96);
  size_t v16 = sub_100260658(a1 + 328, a2, a3);
  sub_10026FCC4(a1, a2, a3, a4);
  sub_100242FAC((uint64_t)v18);
  return v16;
}

void sub_10026FCB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10026FCC4(uint64_t a1, const void *a2, size_t a3, int a4)
{
  if (a4)
  {
    id v23 = 0LL;
    uint64_t v24 = 0LL;
    sub_10056AB04(&v23, a2, a3);
    memset(&v22, 0, sizeof(v22));
    int v5 = *(_DWORD *)(a1 + 8);
    uint8x8_t v6 = "AudioDeviceLEA";
    uint64_t v7 = "AudioDeviceOther";
    if (v5 == 1953719151) {
      uint64_t v7 = "AudioDeviceSCO";
    }
    if (v5 != 1953260897) {
      uint8x8_t v6 = v7;
    }
    if (v5 == 1952539500) {
      uint64_t v8 = "AudioDeviceA2DP";
    }
    else {
      uint64_t v8 = v6;
    }
    std::string::assign(&v22, v8);
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
    uint64_t v10 = v9;
    if (v9)
    {
      [v9 getClientBundleIDs];
    }

    else
    {
      uint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
    }

    uint64_t v11 = sub_1002E9074();
    uint64_t v17 = &off_10087FAA8;
    uint64_t v18 = v24;
    if (v24) {
      sub_1002CD1E0((uint64_t)v24);
    }
    if (v21 >= 0) {
      uint64_t v12 = &v19;
    }
    else {
      uint64_t v12 = v19;
    }
    uint64_t v13 = (void *)(a1 + 368);
    sub_1003D0100(*(void *)(a1 + 360), (uint64_t)__p);
    if (v16 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    (*(void (**)(uint64_t, uint64_t (***)(), uint64_t, void *, void *, void **))(*(void *)v11 + 32LL))( v11,  &v17,  4LL,  v12,  v13,  v14);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = &off_10087FAA8;
    if (v18) {
      sub_1002CD254(v18);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v19);
    }
    id v23 = &off_10087FAA8;
    if (v24) {
      sub_1002CD254(v24);
    }
  }

void sub_10026FE7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  *(void *)(v30 - sub_100242FAC(v1 - 64) = &off_10087FAA8;
  uint64_t v32 = *(unsigned int **)(v30 - 56);
  if (v32) {
    sub_1002CD254(v32);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_10026FF08(uint64_t a1, char *a2, size_t a3, int a4)
{
  if (!*(void *)(a1 + 312)
    && (uint64_t v8 = (os_log_s *)qword_1008F7570, os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)))
  {
    sub_100665498(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2) {
      goto LABEL_4;
    }
  }

  else if (a2)
  {
LABEL_4:
    v25[0] = 0LL;
    v25[1] = 0LL;
    sub_100242F28((uint64_t)v25, a1 + 96);
    unint64_t v16 = sub_1002606C4(a1 + 328, a2, a3);
    sub_10026FCC4(a1, a2, a3, a4);
    sub_100242FAC((uint64_t)v25);
    return v16;
  }

  uint64_t v17 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
    sub_100665508(a3, v17, v18, v19, v20, v21, v22, v23);
  }
  return 0LL;
}

void sub_10026FFF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100270008(uint64_t a1)
{
}

void sub_100270010(uint64_t a1, int a2)
{
  uint64_t v3 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    uint64_t v3 = (const void **)&kCFBooleanFalse;
  }
  size_t v4 = *v3;
  sub_10026F4EC(a1, "kBTAudioMsgPropertyTipiConnected", *v3);
  sub_100294E4C(a1 + 224, (uint64_t)"kBTAudioMsgPropertyTipiConnected", v4);
}

void sub_100270070(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyVolumeIsAbsolute", *v2);
}

void sub_100270098(uint64_t a1, const char *a2, int a3)
{
  uint64_t v3 = (const void **)&kCFBooleanTrue;
  if (!a3) {
    uint64_t v3 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, a2, *v3);
}

void sub_1002700B8(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyTipiSupported", *v2);
}

void sub_1002700E0(uint64_t a1, const char *a2, float a3)
{
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  sub_10026F4EC(a1, a2, v5);
  sub_100294E4C(a1 + 224, (uint64_t)a2, v5);
  CFRelease(v5);
}

void sub_100270158(uint64_t a1, float a2)
{
}

CFNumberRef sub_100270164(uint64_t a1, void *a2)
{
  return sub_100270174(a1, "kBTAudioMsgPropertyVolumeScalar", a2);
}

CFNumberRef sub_100270174(uint64_t a1, const char *a2, void *a3)
{
  uint64_t result = (const __CFNumber *)sub_100270E18(a1, a2);
  if (result) {
    return (const __CFNumber *)(CFNumberGetValue(result, kCFNumberFloatType, a3) != 0);
  }
  return result;
}

void sub_1002701AC(uint64_t a1, int a2)
{
}

void sub_1002701BC(uint64_t a1, const char *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  sub_1002703E8(a1, a2, v5);
  CFRelease(v5);
}

void sub_100270224(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyIsAppleAudioDevice", *v2);
}

void sub_10027024C(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyInEarDetection", *v2);
}

void sub_100270274(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyInEarEnabled", *v2);
}

void sub_10027029C(uint64_t a1, int a2, int a3)
{
}

void sub_1002702AC(uint64_t a1, int a2)
{
}

void sub_1002702BC(uint64_t a1, int a2)
{
}

void sub_1002702CC(uint64_t a1, int a2)
{
}

void sub_1002702DC(uint64_t a1, int a2)
{
}

void sub_1002702EC(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 392) != a2)
  {
    *(_DWORD *)(a1 + 392) = a2;
    sub_1002701BC(a1, "kBTAudioMsgPropertyListenMode", a2);
  }

void sub_100270310(uint64_t a1, int a2)
{
}

void sub_100270320(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyAllowSpatialAudio", *v2);
}

void sub_100270348(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyAccessHeadTrack", *v2);
}

void sub_100270370(uint64_t a1, void *a2)
{
  size_t v4 = a2;
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v4);
  sub_1002703E8(a1, "kBTAudioMsgPropertyForegroundApp", Copy);
  CFRelease(Copy);
}

void sub_1002703D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002703E8(uint64_t a1, const char *a2, const void *a3)
{
}

void sub_100270438(uint64_t a1, int a2, void *a3, int a4)
{
  int valuePtr = a2;
  id v7 = a3;
  uint64_t v8 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    id v14 = v7;
    __int16 v15 = 1024;
    int v16 = a2;
    __int16 v17 = 1024;
    int v18 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Update SpatialAudio App Based to BTHAL %@ Mode %d headTrack %d",  buf,  0x18u);
  }

  if (a4) {
    uint64_t v9 = (const void **)&kCFBooleanTrue;
  }
  else {
    uint64_t v9 = (const void **)&kCFBooleanFalse;
  }
  Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertySpatialBundleID", v7);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertySpatialMode", v11);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertyHeadTrack", *v9);
  sub_10026F4EC(a1, "kBTAudioMsgPropertySpatialAudioAppBasedMode", Mutable);
  sub_100294E4C(a1 + 224, (uint64_t)"kBTAudioMsgPropertySpatialAudioAppBasedMode", Mutable);
  CFRelease(v11);
  CFRelease(Mutable);
}

void sub_1002705E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002705FC(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 397) != a2)
  {
    *(_BYTE *)(a1 + 397) = a2;
    sub_1002701BC(a1, "kBTAudioMsgPropertyOneBudANCMode", a2);
  }

void sub_100270620(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyDOAPSupported", *v2);
}

void sub_100270648(uint64_t a1, CFUUIDBytes *a2)
{
}

void sub_100270658(uint64_t a1, CFUUIDBytes *a2)
{
}

void sub_100270668(uint64_t a1, int a2)
{
}

void sub_100270678(uint64_t a1, int a2)
{
}

void sub_100270688(uint64_t a1, int a2)
{
}

void sub_100270698(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyLiveListenSupported", *v2);
}

void sub_1002706C0(uint64_t a1, float a2)
{
}

void sub_1002706CC(uint64_t a1, const char *a2, float a3)
{
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  sub_1002703E8(a1, a2, v5);
  CFRelease(v5);
}

void sub_100270734(uint64_t a1, int a2)
{
}

void sub_100270744(uint64_t a1, int **a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, a2[1] - *a2, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFNumberRef v5 = Mutable;
    uint8x8_t v6 = *a2;
    while (v6 != a2[1])
    {
      int v7 = *v6++;
      int valuePtr = v7;
      CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &valuePtr);
      CFArrayAppendValue(v5, v8);
      CFRelease(v8);
    }

    uint64_t v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFNumberRef v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setDosimetryVolumeCurve set", v11, 2u);
    }

    sub_1002703E8(a1, "kBTAudioMsgPropertyDosimetryVolumeCurve", v5);
    CFRelease(v5);
  }

  else
  {
    uint64_t v10 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "setDosimetryVolumeCurve failed", buf, 2u);
    }
  }

void sub_100270898(uint64_t a1, int a2)
{
}

void sub_1002708A8(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyWSModeSupported", *v2);
}

void sub_1002708D0(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyWSModeEnabled", *v2);
}

void sub_1002708F8(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyWSIsGuestDevice", *v2);
}

void sub_100270920(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyWSIsGuestNotInContactsDevice", *v2);
}

void sub_100270948(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertySupportSpatialAudio", *v2);
}

void sub_100270970(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertySupportHighQualityBiDirectionalAudio", *v2);
}

void sub_100270998(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (v3) {
    CFStringRef Copy = (NSData *)CFDataCreateCopy(kCFAllocatorDefault, v3);
  }
  else {
    CFStringRef Copy = objc_alloc_init(&OBJC_CLASS___NSData);
  }
  CFNumberRef v5 = (const __CFData *)Copy;
  if (Copy)
  {
    uint8x8_t v6 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 67109120;
      v7[1] = CFDataGetLength(v5);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Spatial Profile Size %d", (uint8_t *)v7, 8u);
    }

    sub_1002703E8(a1, "kBTAudioMsgPropertySoundProfile", v5);
    CFRelease(v5);
  }
}

void sub_100270AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100270ABC(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertySupportSoundProfile", *v2);
}

void sub_100270AE4(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyAdaptiveVolume", *v2);
}

void sub_100270B0C(uint64_t a1, int a2)
{
}

void sub_100270B1C(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyMuteControl", *v2);
}

void sub_100270B44(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyConversationDetect", *v2);
}

void sub_100270B6C(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyBudSideLoudnessEqControlSupported", *v2);
}

void sub_100270B94(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyBudSideLoudnessEqEnabled", *v2);
}

void sub_100270BBC(uint64_t a1, int a2)
{
  id v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    id v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyDigitalCrownSupported", *v2);
}

void sub_100270BE4(uint64_t a1, int a2)
{
  uint64_t v3 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    uint64_t v3 = (const void **)&kCFBooleanFalse;
  }
  size_t v4 = *v3;
  sub_10026F4EC(a1, "kBTAudioMsgPropertyOwnershipHijack", *v3);
  sub_100294E4C(a1 + 224, (uint64_t)"kBTAudioMsgPropertyOwnershipHijack", v4);
}

void sub_100270C44(uint64_t a1, int a2)
{
  uint64_t v3 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    uint64_t v3 = (const void **)&kCFBooleanFalse;
  }
  size_t v4 = *v3;
  sub_10026F4EC(a1, "kBTAudioMsgPropertyAllowAutoRoute", *v3);
  sub_100294E4C(a1 + 224, (uint64_t)"kBTAudioMsgPropertyAllowAutoRoute", v4);
}

void sub_100270CA4(uint64_t a1, int a2)
{
  uint64_t v3 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    uint64_t v3 = (const void **)&kCFBooleanFalse;
  }
  size_t v4 = *v3;
  sub_10026F4EC(a1, "kBTAudioMsgPropertyIsHidden", *v3);
  sub_100294E4C(a1 + 224, (uint64_t)"kBTAudioMsgPropertyIsHidden", v4);
}

void sub_100270D04(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  sub_1002703E8(a1, a2, v5);
  CFRelease(v5);
}

void sub_100270D6C(uint64_t a1, const char *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  sub_1002703E8(a1, a2, v5);
  CFRelease(v5);
}

BOOL sub_100270DD4(uint64_t a1, const char *a2, BOOL *a3)
{
  size_t v4 = (const __CFBoolean *)sub_100270E18(a1, a2);
  CFNumberRef v5 = v4;
  if (v4) {
    *a3 = CFBooleanGetValue(v4) != 0;
  }
  return v5 != 0LL;
}

const void *sub_100270E18(uint64_t a1, const char *a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 32);
  CFStringRef v4 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v4);
  CFRelease(v4);
  sub_100242FAC((uint64_t)v7);
  return Value;
}

void sub_100270E94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFNumberRef sub_100270EAC(uint64_t a1, const char *a2, void *a3)
{
  uint64_t result = (const __CFNumber *)sub_100270E18(a1, a2);
  if (result) {
    return (const __CFNumber *)(CFNumberGetValue(result, kCFNumberIntType, a3) != 0);
  }
  return result;
}

uint64_t sub_100270EE4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 160);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 398);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

void sub_100270F28(uint64_t *a1, char *__s1, const __CFNumber *a3)
{
  if (!strcmp(__s1, "kBTAudioMsgPropertyVolumeScalar"))
  {
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    if (CFNumberGetValue(a3, kCFNumberFloatType, &valuePtr)) {
      (*(void (**)(uint64_t *, float))(*a1 + 208))(a1, *(float *)&valuePtr.__r_.__value_.__l.__data_);
    }
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyInputVolumeScalar"))
  {
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    if (CFNumberGetValue(a3, kCFNumberFloatType, &valuePtr)) {
      (*(void (**)(uint64_t *, float))(*a1 + 216))(a1, *(float *)&valuePtr.__r_.__value_.__l.__data_);
    }
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyOwnershipStateChanged"))
  {
    CFBooleanRef BOOLean = 0LL;
    xpc_object_t value = 0LL;
    memset(&valuePtr, 0, sizeof(valuePtr));
    sub_10002418C(&valuePtr, "");
    if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyOwnershipStateAddr", (const void **)&value))
    {
      CStringPtr = CFStringGetCStringPtr((CFStringRef)value, 0x8000100u);
      std::string::assign(&valuePtr, CStringPtr);
    }

    else {
      BOOL v14 = 0LL;
    }
    __int16 v15 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = "false";
      if (v14) {
        int v16 = "true";
      }
      p_std::string valuePtr = &valuePtr;
      if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 buf = 136446466;
      __int128 v46 = v16;
      __int16 v47 = 2082;
      __int128 v48 = p_valuePtr;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Got ownership state change of %{public}s for device %{public}s",  buf,  0x16u);
    }

    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_10088B080);
    }
    int v18 = off_1008D60D8;
    else {
      std::string __p = valuePtr;
    }
    sub_100217AC8((uint64_t)v18, (unsigned __int8 *)&__p, v14);
    if ((char)valuePtr.__r_.__value_.__s.__size_ < 0)
    {
      uint64_t v19 = (void *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_63:
      operator delete(v19);
    }
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyListenMode"))
  {
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_10088B080);
    }
    sub_10021BE18((uint64_t)off_1008D60D8, a1[45], LODWORD(valuePtr.__r_.__value_.__l.__data_));
  }

  else
  {
    if (!strcmp(__s1, "kBTAudioMsgPropertyDosimetrySensitivity"))
    {
      LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
      CFNumberGetValue(a3, kCFNumberFloat32Type, &valuePtr);
      sub_1003E1728(a1[45], *(float *)&valuePtr.__r_.__value_.__l.__data_);
      return;
    }

    if (strcmp(__s1, "kBTAudioMsgPropertyDosimetryVolumeCurve"))
    {
      uint8x8_t v6 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
        sub_10066556C((uint64_t)__s1, v6, v7, v8, v9, v10, v11, v12);
      }
      return;
    }

    int Count = CFArrayGetCount(a3);
    memset(&valuePtr, 0, sizeof(valuePtr));
    if (Count <= 0)
    {
      uint64_t v35 = a1[45];
      __uuid_t dst = 0LL;
      uint64_t v40 = 0LL;
      uint64_t v38 = 0LL;
    }

    else
    {
      CFIndex v21 = 0LL;
      uint64_t v22 = Count;
      do
      {
        *(_DWORD *)__int128 buf = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a3, v21);
        CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, buf);
        std::string::size_type size = valuePtr.__r_.__value_.__l.__size_;
        if (valuePtr.__r_.__value_.__l.__size_ >= valuePtr.__r_.__value_.__l.__cap_)
        {
          __int128 v26 = (void *)valuePtr.__r_.__value_.__r.__words[0];
          uint64_t v27 = (uint64_t)(valuePtr.__r_.__value_.__l.__size_ - valuePtr.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v28 = v27 + 1;
          int64_t v29 = valuePtr.__r_.__value_.__l.__cap_ - valuePtr.__r_.__value_.__r.__words[0];
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            uint64_t v31 = (char *)sub_10024E33C((uint64_t)&valuePtr.__r_.__value_.__l.__cap_, v30);
            std::string::size_type size = valuePtr.__r_.__value_.__l.__size_;
            __int128 v26 = (void *)valuePtr.__r_.__value_.__r.__words[0];
          }

          else
          {
            uint64_t v31 = 0LL;
          }

          uint64_t v32 = &v31[4 * v27];
          *(_DWORD *)uint64_t v32 = *(_DWORD *)buf;
          std::string::size_type v25 = (std::string::size_type)(v32 + 4);
          while ((void *)size != v26)
          {
            int v33 = *(_DWORD *)(size - 4);
            size -= 4LL;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }

          valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
          valuePtr.__r_.__value_.__l.__size_ = v25;
          valuePtr.__r_.__value_.__l.__cap_ = (std::string::size_type)&v31[4 * v30];
          if (v26) {
            operator delete(v26);
          }
        }

        else
        {
          *(_DWORD *)valuePtr.__r_.__value_.__l.__size_ = *(_DWORD *)buf;
          std::string::size_type v25 = size + 4;
        }

        valuePtr.__r_.__value_.__l.__size_ = v25;
        ++v21;
      }

      while (v21 != v22);
      uint64_t v34 = (const void *)valuePtr.__r_.__value_.__r.__words[0];
      uint64_t v35 = a1[45];
      __uuid_t dst = 0LL;
      uint64_t v40 = 0LL;
      uint64_t v38 = 0LL;
      int64_t v36 = v25 - valuePtr.__r_.__value_.__r.__words[0];
      if (v25 != valuePtr.__r_.__value_.__r.__words[0])
      {
        sub_100271A98(&v38, v36 >> 2);
        uint64_t v37 = (char *)__dst;
        memmove(__dst, v34, v36);
        __uuid_t dst = &v37[4 * (v36 >> 2)];
      }
    }

    sub_1003E1874(v35, (uint64_t)&v38);
    if (v38)
    {
      __uuid_t dst = v38;
      operator delete(v38);
    }

    uint64_t v19 = (void *)valuePtr.__r_.__value_.__r.__words[0];
    if (valuePtr.__r_.__value_.__r.__words[0])
    {
      valuePtr.__r_.__value_.__l.__size_ = valuePtr.__r_.__value_.__r.__words[0];
      goto LABEL_63;
    }
  }

void sub_100271428( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100271498(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
    sub_1006655D0(a2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_1002714E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
    sub_100665634(a2, v3, v4, v5, v6, v7, v8, v9);
  }
}

uint64_t sub_100271528(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1[34] && (uint64_t v10 = (os_log_s *)qword_1008F7570, os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)))
  {
    sub_100665708(v10, v11, v12, v13, v14, v15, v16, v17);
    if (!a2) {
      goto LABEL_6;
    }
  }

  else if (!a2)
  {
    goto LABEL_6;
  }

  if (a3)
  {
    a1[34] = a2;
    a1[35] = a3;
    sub_10025FF98((uint64_t)(a1 + 36), a2);
  }

void sub_100271648( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10027165C(uint64_t a1)
{
  uint64_t v1 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Timed audio delivery speed modification completed",  v2,  2u);
  }

uint64_t sub_1002716CC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200LL))(a1);
  if (*(void *)(a1 + 272) && *(void *)(a1 + 280))
  {
    sub_100260008(a1 + 288);
    uint64_t result = munmap(*(void **)(a1 + 272), *(void *)(a1 + 280));
    *(void *)(a1 + 272) = 0LL;
    *(void *)(a1 + 2sub_100242FAC(v40 - 80) = 0LL;
  }

  if (*(void *)(a1 + 312))
  {
    if (*(void *)(a1 + 320))
    {
      v3[0] = 0LL;
      v3[1] = 0LL;
      sub_100242F28((uint64_t)v3, a1 + 96);
      sub_100260008(a1 + 328);
      sub_100242F54((uint64_t)v3);
      munmap(*(void **)(a1 + 312), *(void *)(a1 + 320));
      *(void *)(a1 + 312) = 0LL;
      *(void *)(a1 + 320) = 0LL;
      return sub_100242FAC((uint64_t)v3);
    }
  }

  return result;
}

void sub_10027176C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100271780(uint64_t a1, const char *a2, const void *a3)
{
  uint64_t result = sub_10026F4EC(a1, a2, a3);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, const char *, const void *))(*(void *)a1 + 160LL))(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1002717DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192LL))(a1);
}

uint64_t sub_1002717EC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "audioPluginBiToUniTransition", v4, 2u);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256LL))(a1);
}

uint64_t sub_100271864(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "audioPluginUniToBiTransition", v4, 2u);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264LL))(a1);
}

uint64_t sub_1002718DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168LL))(a1);
}

uint64_t sub_1002718E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
}

uint64_t sub_1002718F4(uint64_t a1)
{
  if (*(void *)(a1 + 272) || *(void *)(a1 + 312)) {
    sub_1002716CC(a1);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 224LL))(a1);
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 32);
  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a1 + 16));
  if (Copy)
  {
    sub_100294A5C(a1 + 224, *(_DWORD *)(a1 + 8), Copy);
    CFRelease(Copy);
  }

  else
  {
    uint64_t v3 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_10066532C(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }

  return sub_100242FAC((uint64_t)v12);
}

void sub_1002719B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002719CC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AudioDevice self deleting", v3, 2u);
  }

  if (a1) {
    (*(void (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  }
}

uint64_t sub_100271A48(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 248LL))(a1);
}

void sub_100271A54(uint64_t a1, int a2)
{
  uint64_t v2 = (const void **)&kCFBooleanTrue;
  if (!a2) {
    uint64_t v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1002703E8(a1, "kBTAudioMsgPropertyIsGenuineAirPods", *v2);
}

uint64_t sub_100271A7C()
{
  return 0LL;
}

char *sub_100271A98(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    abort();
  }
  uint64_t result = (char *)sub_10024E33C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_100271AD4(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100271B18((uint64_t)v1);
  off_1008D9248 = v1;
}

void sub_100271B04(_Unwind_Exception *a1)
{
}

uint64_t sub_100271B18(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100213C20(a1, 8);
  *uint64_t v2 = off_10089F4F8;
  v2[32] = off_10089F5B8;
  v2[33] = off_10089F5E0;
  v2[34] = &off_10089F628;
  sub_100242DC4(v2 + 35);
  *(void *)(a1 + 344) = a1 + 352;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 360) = 0LL;
  *(void *)(a1 + 36_Block_object_dispose(va, 8) = a1 + 376;
  sub_100242DC4(a1 + 392);
  *(void *)(a1 + 456) = a1 + 464;
  *(void *)(a1 + 4sub_100242FAC(v1 - 64) = 0LL;
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 4sub_100242E28(v1 + 96) = 0LL;
  *(void *)(a1 + 472) = 0LL;
  *(void *)(a1 + 4sub_100242FAC(v40 - 80) = a1 + 488;
  *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 520) = 0LL;
  *(void *)(a1 + 504) = a1 + 512;
  *(void *)(a1 + 512) = 0LL;
  *(_WORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = 0LL;
  return a1;
}

void sub_100271BD4(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  sub_10023BF24(v7, *v5);
  sub_10023BF24(v3, *v8);
  sub_100242E28(v2);
  sub_100213D34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100271C18(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8LL) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000LL;
    *(void *)a1 = v6;
  }

  else
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 23) = a2;
  }

  return a1;
}

void sub_100271C98(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_100271CC8(_Unwind_Exception *a1)
{
}

uint64_t sub_100271CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_10026EC64(a1, 1953260897);
  void *v4 = &off_10088B0B0;
  v4[50] = a2;
  v4[51] = 0LL;
  v4[52] = 0LL;
  v4[53] = 0LL;
  sub_100270070((uint64_t)v4, 1);
  return a1;
}

void sub_100271D34(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 416) = v4;
    operator delete(v4);
  }

  sub_10026ED80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100271D5C(void *a1)
{
  *a1 = &off_10088B0B0;
  uint64_t v2 = (void *)a1[51];
  if (v2)
  {
    a1[52] = v2;
    operator delete(v2);
  }

  return sub_10026ED80((uint64_t)a1);
}

void sub_100271D9C(void *a1)
{
  uint64_t v1 = (void *)sub_100271D5C(a1);
  operator delete(v1);
}

void sub_100271DB4(uint64_t a1, uint64_t a2, CFNumberRef number)
{
  if ((_DWORD)a2 == 10)
  {
    int v5 = 0;
    if (!CFNumberGetValue(number, kCFNumberIntType, &v5)) {
      return;
    }
    uint64_t v4 = *(void (**)(void))(**(void **)(a1 + 400) + 48LL);
    goto LABEL_7;
  }

  if ((_DWORD)a2 != 9)
  {
    sub_100271498(a1, a2);
    return;
  }

  int valuePtr = 0;
  if (CFNumberGetValue(number, kCFNumberIntType, &valuePtr))
  {
    uint64_t v4 = *(void (**)(void))(**(void **)(a1 + 400) + 40LL);
LABEL_7:
    v4();
  }

uint64_t sub_100271E64(uint64_t a1)
{
  return (***(uint64_t (****)(void, uint64_t))(a1 + 400))(*(void *)(a1 + 400), a1);
}

uint64_t sub_100271E78(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 8LL))(*(void *)(a1 + 400), a1);
}

uint64_t sub_100271E8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 16LL))(*(void *)(a1 + 400), a1);
}

uint64_t sub_100271EA0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 32LL))(*(void *)(a1 + 400), a1);
}

uint64_t sub_100271EB4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 24LL))(*(void *)(a1 + 400), a1);
}

BOOL sub_100271EC8(uint64_t a1)
{
  return sub_10026FA58(a1) || sub_10026FA68(a1);
}

uint64_t sub_100271F08(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 56LL))(*(void *)(a1 + 400), a1);
}

uint64_t *sub_100271F1C@<X0>(uint64_t **a1@<X1>, uint64_t **a2@<X2>, void *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  LOBYTE(v11[0]) = 0;
  std::__sort<std::__less<int,int> &,int *>(v6, v7, v11);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  LOBYTE(v11[0]) = 0;
  std::__sort<std::__less<int,int> &,int *>(v8, v9, v11);
  return sub_1002722A0(*a1, a1[1], *a2, a2[1], (uint64_t)a3, v11);
}

void sub_100271F90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100271FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 408);
  if (*(void *)(a1 + 408) != *(void *)(a1 + 416))
  {
    std::string __p = 0LL;
    int v18 = 0LL;
    uint64_t v19 = 0LL;
    sub_100272534(&__p, a2);
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    sub_100271F1C(v3, (uint64_t **)&__p, &v14);
    uint64_t v4 = *(const void **)(a1 + 408);
    size_t v5 = *(void *)(a1 + 416) - (void)v4;
    uint64_t v6 = v14;
    uint64_t v7 = (uint64_t)v15;
    uint64_t v8 = v15 - v14;
    if (v5 == v15 - v14)
    {
      int v9 = memcmp(v4, v14, v5);
    }

    else if (v3 == (uint64_t **)&v14)
    {
LABEL_10:
      if (v6)
      {
        uint64_t v15 = v6;
        operator delete(v6);
      }

      if (__p)
      {
        int v18 = __p;
        operator delete(__p);
      }

      goto LABEL_14;
    }

    sub_100272430((char *)v3, v6, v7, v8 >> 2);
    uint64_t v6 = v14;
    goto LABEL_10;
  }

  if (v3 != (uint64_t **)a2) {
    sub_100272430( (char *)(a1 + 408),  *(char **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
LABEL_14:
  CFMutableArrayRef Mutable = CFArrayCreateMutable( kCFAllocatorDefault,  (uint64_t)(*(void *)(a1 + 416) - *(void *)(a1 + 408)) >> 2,  &kCFTypeArrayCallBacks);
  uint64_t v11 = *(int **)(a1 + 408);
  while (v11 != *(int **)(a1 + 416))
  {
    int v12 = *v11++;
    LODWORD(__p) = v12;
    CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &__p);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
  }

  sub_1002703E8(a1, "kBTAudioMsgPropertySupportedCodecs", Mutable);
  CFRelease(Mutable);
}

void sub_100272140( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100272174(uint64_t a1, uint64_t a2)
{
}

void sub_100272184(uint64_t a1, int a2)
{
}

BOOL sub_100272194(uint64_t a1, BOOL *a2)
{
  return sub_100270DD4(a1, "kBTAudioMsgPropertyIsStereo", a2);
}

void sub_1002721A4(uint64_t a1, int a2)
{
}

CFNumberRef sub_1002721B4(uint64_t a1, void *a2)
{
  return sub_100270EAC(a1, "kBTAudioMsgPropertyDirection", a2);
}

void sub_1002721C4(uint64_t a1, int a2)
{
}

void sub_1002721D4(uint64_t a1, int a2)
{
}

uint64_t sub_1002721E4()
{
  return 0LL;
}

void sub_1002721EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    uint64_t v6 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "LEAAudioDevice readHandler called on data of size %lu",  (uint8_t *)&v5,  0xCu);
  }

void sub_10027228C(uint64_t a1, int a2)
{
}

uint64_t *sub_1002722A0@<X0>( uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t v11 = a5;
  if (result != a2)
  {
    int v9 = a3;
    if (a3 != a4)
    {
      uint64_t v10 = result;
      do
      {
        if (*(_DWORD *)v10 >= *(_DWORD *)v9)
        {
          if (*(_DWORD *)v9 >= *(_DWORD *)v10)
          {
            uint64_t result = sub_100272348(&v11, v10);
            uint64_t v10 = (uint64_t *)((char *)v10 + 4);
          }

          int v9 = (uint64_t *)((char *)v9 + 4);
        }

        else
        {
          uint64_t v10 = (uint64_t *)((char *)v10 + 4);
        }
      }

      while (v10 != a2 && v9 != a4);
      a5 = v11;
    }
  }

  *a6 = a2;
  a6[1] = a4;
  a6[2] = (uint64_t *)a5;
  return result;
}

uint64_t *sub_100272348(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  int v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      CFNumberRef v13 = (char *)sub_10024E33C((uint64_t)v6, v12);
      uint64_t v8 = *(_DWORD **)v4;
      int v5 = *(_DWORD **)(v4 + 8);
    }

    else
    {
      CFNumberRef v13 = 0LL;
    }

    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }

    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    _DWORD *v5 = *a2;
    uint64_t v7 = v5 + 1;
  }

  *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
  return a1;
}

char *sub_100272430(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      void *v7 = 0LL;
      v7[1] = 0LL;
      void v7[2] = 0LL;
    }

    if (a4 >> 62) {
      abort();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_100271A98(v7, v11);
    CFNumberRef v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }

void *sub_100272534(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    sub_100271A98(a1, v5 >> 2);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }

  return a1;
}

uint64_t sub_100272598(uint64_t a1, int a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + sub_100242FAC(v40 - 80) = 0LL;
  uint64_t v4 = (void **)(a1 + 80);
  *(void *)a1 = &off_10088B1D0;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + sub_100242FAC(v1 - 64) = 0LL;
  *(void *)(a1 + 70) = 0LL;
  uint64_t v5 = TSNullClockIdentifier;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + sub_100242E28(v1 + 96) = v5;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = 0LL;
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + sub_100242E28(v1 + 160) = 0;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  sub_100242DC4(a1 + 224);
  *(_BYTE *)(a1 + sub_100242E28(v1 + 160) = 0;
  *(_DWORD *)(a1 + 1sub_100242FAC(v1 - 64) = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 67109120;
    v11[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine Instance created Accuracy=%d",  (uint8_t *)v11,  8u);
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[TSClockManager sharedClockManager](&OBJC_CLASS___TSClockManager, "sharedClockManager"));
  uint64_t v8 = *v4;
  const void *v4 = (void *)v7;

  if (!*v4)
  {
    uint64_t v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Time Synchronization Shared Clock manager initialization failed",  (uint8_t *)v11,  2u);
    }
  }

  *(_WORD *)(a1 + 76) = 0;
  return a1;
}

void sub_100272768(_Unwind_Exception *a1)
{
  uint64_t v9 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 144) = v9;
    operator delete(v9);
  }

  sub_10023BF24(v2, *(void **)(v1 + 112));

  uint64_t v10 = *(std::__shared_weak_count **)(v1 + 16);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002727DC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine Cleanup",  buf,  2u);
  }

  sub_100272A98(a1, 0, *(_DWORD *)(a1 + 164));
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = TSNullClockIdentifier;
  if (v3 == TSNullClockIdentifier)
  {
    id v5 = 0LL;
  }

  else
  {
    uint64_t v6 = *(void **)(a1 + 80);
    id v27 = 0LL;
    unsigned __int8 v7 = [v6 removeUserFilteredClockWithIdentifier:v3 error:&v27];
    id v5 = v27;
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Time Synchronization Shared Clock Engine cleanup Failed",  buf,  2u);
      }
    }
  }

  *(void *)__int128 buf = 0LL;
  uint64_t v26 = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 224);
  uint64_t v9 = *(void **)(a1 + 104);
  uint64_t v10 = (void *)(a1 + 112);
  if (v9 != (void *)(a1 + 112))
  {
    do
    {
      unint64_t v11 = (void *)v9[4];
      if (v11) {
        operator delete(v11);
      }
      unint64_t v12 = (void *)v9[1];
      if (v12)
      {
        do
        {
          CFNumberRef v13 = v12;
          unint64_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          CFNumberRef v13 = (void *)v9[2];
          BOOL v14 = *v13 == (void)v9;
          uint64_t v9 = v13;
        }

        while (!v14);
      }

      uint64_t v9 = v13;
    }

    while (v13 != v10);
  }

  sub_10023BF24(a1 + 104, *(void **)(a1 + 112));
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 104) = v10;
  *(_WORD *)(a1 + 76) = 0;
  unint64_t v15 = *(void **)(a1 + 80);
  *(void *)(a1 + sub_100242FAC(v40 - 80) = 0LL;

  int v16 = *(void **)(a1 + 88);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;

  *(void *)(a1 + sub_100242E28(v1 + 96) = v4;
  __int128 v24 = 0uLL;
  sub_1002102FC(a1 + 176, &v24);
  size_t v17 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1))
  {
    int v18 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v24) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine Cleanup - Completed",  (uint8_t *)&v24,  2u);
  }

  sub_100242FAC((uint64_t)buf);

  sub_100242E28(a1 + 224);
  sub_10023BF24(a1 + 200, *(void **)(a1 + 208));
  sub_100032BD4(a1 + 176);
  uint64_t v21 = *(void **)(a1 + 136);
  if (v21)
  {
    *(void *)(a1 + 144) = v21;
    operator delete(v21);
  }

  sub_10023BF24(a1 + 104, *(void **)(a1 + 112));

  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 16);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  return a1;
}

void sub_100272A78(_Unwind_Exception *a1)
{
  sub_100665778(v1);
  _Unwind_Resume(a1);
}

void sub_100272A98(uint64_t a1, char a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3 == a1 + 112) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 8LL);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1002753A8;
  v5[3] = &unk_10088B208;
  void v5[4] = a1;
  void v5[5] = v4;
  char v7 = a2;
  int v6 = a3;
  sub_1002752EC((os_unfair_lock_s *)(a1 + 128), v5);
}

void sub_100272B20(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 104);
  uint64_t v4 = *(uint64_t **)(a1 + 104);
  id v5 = (uint64_t *)(a1 + 112);
  if (v4 != (uint64_t *)(a1 + 112))
  {
    char v7 = &unk_1008D6000;
    uint64_t v23 = (uint64_t **)(a1 + 104);
    do
    {
      if (*(void *)v4[4] != a2)
      {
        uint64_t v8 = (uint64_t *)v4[1];
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            uint64_t v8 = (uint64_t *)*v8;
          }

          while (v8);
        }

        else
        {
          do
          {
            uint64_t v9 = (uint64_t *)v4[2];
            BOOL v10 = *v9 == (void)v4;
            uint64_t v4 = v9;
          }

          while (!v10);
        }

        goto LABEL_23;
      }

      if (v7[53] != -1LL) {
        dispatch_once(&qword_1008D61A8, &stru_10088B280);
      }
      uint64_t v11 = sub_100496954((void *)qword_1008D61A0, a2);
      unint64_t v12 = (void *)v4[4];
      uint64_t v9 = sub_1001FDBCC(v3, v4);
      operator delete(v4);
      unsigned __int8 v13 = *(_BYTE *)(a1 + 76) - 1;
      *(_BYTE *)(a1 + 76) = v13;
      BOOL v14 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v15 = v7;
        uint64_t v16 = v12[1];
        if (v11)
        {
          sub_100494958(v11, (uint64_t)__p);
          size_t v17 = __p;
          if (v25 < 0) {
            size_t v17 = (void **)__p[0];
          }
          int v18 = *(unsigned __int8 *)(a1 + 76);
          *(_DWORD *)__int128 buf = 134218498;
          uint64_t v27 = v16;
          __int16 v28 = 2082;
          int64_t v29 = (const char *)v17;
          __int16 v30 = 1024;
          int v31 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: removeRemoteTimesyncSesssion  : Remote Timesync BTAddr = %llx] session= %{public}s mNumBTTimeSyncClient=%d",  buf,  0x1Cu);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
        }

        else
        {
          *(_DWORD *)__int128 buf = 134218498;
          uint64_t v27 = v16;
          __int16 v28 = 2082;
          int64_t v29 = "(NULL)";
          __int16 v30 = 1024;
          int v31 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: removeRemoteTimesyncSesssion  : Remote Timesync BTAddr = %llx] session= %{public}s mNumBTTimeSyncClient=%d",  buf,  0x1Cu);
        }

        char v7 = v15;
        uint64_t v3 = v23;
      }

      else if (!v12)
      {
        goto LABEL_23;
      }

      operator delete(v12);
LABEL_23:
      uint64_t v4 = v9;
    }

    while (v9 != v5);
  }

  unint64_t v19 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *(unsigned __int8 *)(a1 + 76);
    *(_DWORD *)__int128 buf = 67109120;
    LODWORD(v27) = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine un-Register : ref count %d ",  buf,  8u);
  }

  if (!*(_BYTE *)(a1 + 76))
  {
    if (*(_BYTE *)(a1 + 77))
    {
      uint64_t v21 = *(void *)(a1 + 192);
      if (v21)
      {
        sub_100273FF0(a1, v21, 0, 0);
        sub_100273FF0(a1, *(void *)(a1 + 192), 0, 1);
        sub_100273FF0(a1, *(void *)(a1 + 192), 0, 2);
        uint64_t v22 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine un-Register : No more reference counter should be freed by parent now",  buf,  2u);
        }
      }
    }
  }

uint64_t sub_100272E64(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_100242F28((uint64_t)v23, a1 + 224);
  if (*(_BYTE *)(a1 + 76))
  {
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }

    if (qword_1008D60F0 != -1) {
      dispatch_once(&qword_1008D60F0, &stru_10088B260);
    }
    unint64_t v12 = (dispatch_queue_s *)*((void *)off_1008D60E8 + 30);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768LL;
    block[2] = sub_100272FCC;
    block[3] = &unk_10088B1D8;
    void block[4] = v9;
    int v18 = v8;
    if (v8)
    {
      unsigned __int8 v13 = (unint64_t *)&v8->__shared_weak_owners_;
      do
        unint64_t v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }

    uint64_t v19 = a3;
    uint64_t v20 = a2;
    int v21 = a4;
    dispatch_async(v12, block);
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  else
  {
    unint64_t v15 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: No Timesync clients, return",  buf,  2u);
    }
  }

  return sub_100242FAC((uint64_t)v23);
}

void sub_100272FCC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5) {
        sub_100273070(v5, *(void *)(a1 + 48), *(void *)(a1 + 56), *(_DWORD *)(a1 + 64));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

void sub_10027305C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100273070(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  int v6 = (_OWORD *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 <= a2)
  {
    _OWORD *v6 = *(_OWORD *)(a1 + 40);
    sub_100275A68(a1, a2, a3);
    *(void *)(a1 + 40) = a3;
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = a2;
    uint64_t result = sub_100273880(a1);
    if ((result & 1) != 0)
    {
      if ((sub_10027593C(a1, a3, *(void *)(a1 + 24)) & 1) == 0) {
        sub_1002757C8((void *)a1, *(void *)(a1 + 40), *(void *)(a1 + 24));
      }
    }

    else
    {
      if (!*(void *)(a1 + 32)) {
        goto LABEL_18;
      }
      uint64_t result = sub_10027593C(a1, *(void *)(a1 + 40), *(void *)(a1 + 24));
      if (!(_DWORD)result || *(void *)(a1 + 40) <= *(void *)v6 || *(void *)(a1 + 48) <= *(void *)(a1 + 32)) {
        goto LABEL_18;
      }
      sub_1002753CC(a1);
      sub_100275708(a1, *(void *)(a1 + 32), *(void *)(a1 + 24));
    }

    uint64_t result = sub_100275708(a1, a2, a3);
LABEL_18:
    *(_DWORD *)(a1 + 72) = a4;
    return result;
  }

  uint64_t v8 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134218240;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Timesync: GPIO Toggle TS wrapped around Previous TS=%llu New TS=%llu",  buf,  0x16u);
  }

  *(void *)__int128 buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 224);
  if (*(void *)(a1 + 88))
  {
    sub_100242F54((uint64_t)buf);
    uint64_t v9 = *(void **)(a1 + 88);
    id v25 = 0LL;
    unsigned __int8 v10 = [v9 resetSyncServiceWithError:&v25];
    id v11 = v25;
    if ((v10 & 1) == 0)
    {
      unint64_t v12 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = [v11 code];
        *(_DWORD *)uint64_t v26 = 67109120;
        unsigned int v27 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Timesync: Timesync Reset Failed with status %x",  v26,  8u);
      }
    }

    _OWORD *v6 = 0u;
    v6[1] = 0u;
  }

  else
  {
    size_t v17 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_1006657E8(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }

  return sub_100242FAC((uint64_t)buf);
}

void sub_1002732CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002732F4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + sub_100242E28(v1 + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_100273318(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_100273328(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4)
{
  if (a3)
  {
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10088B280);
    }
    uint64_t v8 = sub_100496954((void *)qword_1008D61A0, a3);
    uint64_t v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_100494958(v8, (uint64_t)__p);
        if (v17 >= 0) {
          unsigned __int8 v10 = __p;
        }
        else {
          unsigned __int8 v10 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 134218242;
        uint64_t v19 = a2;
        __int16 v20 = 2082;
        uint64_t v21 = (const char *)v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s",  buf,  0x16u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        *(_DWORD *)__int128 buf = 134218242;
        uint64_t v19 = a2;
        __int16 v20 = 2082;
        uint64_t v21 = "(NULL)";
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s",  buf,  0x16u);
      }
    }

    sub_100273548(a1, a3, a2);
    char v11 = *(_BYTE *)(a1 + 76);
  }

  else
  {
    char v11 = *(_BYTE *)(a1 + 76) + 1;
    *(_BYTE *)(a1 + 76) = v11;
  }

  *a4 = v11;
  unint64_t v12 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(unsigned __int8 *)(a1 + 76);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine Register : ref count %d ",  (uint8_t *)__p,  8u);
  }

  char v14 = sub_100273880(a1);
  sub_100272A98(a1, v14, *(_DWORD *)(a1 + 164));
  return 1LL;
}

void sub_100273548(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = (uint64_t **)(a1 + 104);
  int v6 = *(void **)(a1 + 104);
  if (v6 == (void *)(a1 + 112))
  {
LABEL_10:
    unint64_t v12 = operator new(0x10uLL);
    uint64_t v24 = v12;
    void *v12 = a2;
    v12[1] = a3;
    ++*(_BYTE *)(a1 + 76);
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10088B280);
    }
    uint64_t v13 = sub_100496954((void *)qword_1008D61A0, a2);
    sub_1002555B0(v7, (unint64_t *)&v24, (uint64_t *)&v24);
    char v14 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      if (v13)
      {
        sub_100494958(v13, (uint64_t)__p);
        if (v26 >= 0) {
          unint64_t v15 = __p;
        }
        else {
          unint64_t v15 = (void **)__p[0];
        }
        int v16 = *(unsigned __int8 *)(a1 + 76);
        *(_DWORD *)__int128 buf = 134218498;
        uint64_t v28 = a3;
        __int16 v29 = 2082;
        __int16 v30 = (const char *)v15;
        __int16 v31 = 1024;
        int v32 = v16;
        char v17 = "Audio Timesync: Register Remote timesync Completed  : Remote Timesync BTAddr = %llx] session= %{public}s m"
              "NumBTTimeSyncClient=%d";
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v17, buf, 0x1Cu);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        return;
      }

      int v21 = *(unsigned __int8 *)(a1 + 76);
      *(_DWORD *)__int128 buf = 134218498;
      uint64_t v28 = a3;
      __int16 v29 = 2082;
      __int16 v30 = "(NULL)";
      __int16 v31 = 1024;
      int v32 = v21;
      uint64_t v22 = "Audio Timesync: Register Remote timesync Completed  : Remote Timesync BTAddr = %llx] session= %{public}s mNu"
            "mBTTimeSyncClient=%d";
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v22, buf, 0x1Cu);
    }
  }

  else
  {
    while (1)
    {
      uint64_t v8 = (void *)v6[4];
      if (v8[1] == a3 && *v8 == a2) {
        break;
      }
      uint64_t v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          unsigned __int8 v10 = v9;
          uint64_t v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          unsigned __int8 v10 = (void *)v6[2];
          BOOL v11 = *v10 == (void)v6;
          int v6 = v10;
        }

        while (!v11);
      }

      int v6 = v10;
      if (v10 == (void *)(a1 + 112)) {
        goto LABEL_10;
      }
    }

    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10088B280);
    }
    uint64_t v18 = sub_100496954((void *)qword_1008D61A0, a2);
    char v14 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      if (v18)
      {
        sub_100494958(v18, (uint64_t)__p);
        if (v26 >= 0) {
          uint64_t v19 = __p;
        }
        else {
          uint64_t v19 = (void **)__p[0];
        }
        int v20 = *(unsigned __int8 *)(a1 + 76);
        *(_DWORD *)__int128 buf = 134218498;
        uint64_t v28 = a3;
        __int16 v29 = 2082;
        __int16 v30 = (const char *)v19;
        __int16 v31 = 1024;
        int v32 = v20;
        char v17 = "Audio Timesync: Registering  BTAddr = %llx for already registered session= %{public}s dropping! mNumBTTimeSyncClient=%d";
        goto LABEL_26;
      }

      int v23 = *(unsigned __int8 *)(a1 + 76);
      *(_DWORD *)__int128 buf = 134218498;
      uint64_t v28 = a3;
      __int16 v29 = 2082;
      __int16 v30 = "(NULL)";
      __int16 v31 = 1024;
      int v32 = v23;
      uint64_t v22 = "Audio Timesync: Registering  BTAddr = %llx for already registered session= %{public}s dropping! mNumBTTimeSyncClient=%d";
      goto LABEL_30;
    }
  }

uint64_t sub_100273880(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 160))
  {
    if (qword_1008D60F0 != -1) {
      dispatch_once(&qword_1008D60F0, &stru_10088B260);
    }
    uint64_t v2 = off_1008D60E8;
    uint64_t v3 = mach_absolute_time();
    if (sub_1004AA0F0((uint64_t)v2, v3 - *(void *)(a1 + 40), 0) > 10.0)
    {
      unint64_t v7 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Timesync: GPIO Toggle stopped, releasing timesync resources",  buf,  2u);
      }

      *(_OWORD *)__int128 buf = 0uLL;
      sub_100242F28((uint64_t)buf, a1 + 224);
      if (*(void *)(a1 + 80))
      {
        sub_100242F54((uint64_t)buf);
        uint64_t v8 = *(void **)(a1 + 80);
        uint64_t v9 = *(void *)(a1 + 96);
        id v23 = 0LL;
        unsigned __int8 v10 = [v8 removeUserFilteredClockWithIdentifier:v9 error:&v23];
        id v11 = v23;
        if ((v10 & 1) == 0)
        {
          unint64_t v12 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v22 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Time Synchronization Shared Clock Engine cleanup Failed",  v22,  2u);
          }
        }

        uint64_t v13 = *(void **)(a1 + 88);
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;

        *(void *)(a1 + sub_100242E28(v1 + 96) = TSNullClockIdentifier;
        sub_100275614(a1, 0, 1);
        sub_100242FAC((uint64_t)buf);
      }

      else
      {
        char v14 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
          sub_100665818(v14, v15, v16, v17, v18, v19, v20, v21);
        }
        sub_100242FAC((uint64_t)buf);
      }

      return 0LL;
    }

    else
    {
      return 1LL;
    }
  }

  else
  {
    uint64_t result = *(void *)(a1 + 88);
    if (result)
    {
      sub_100275614(a1, [(id)result lockState] == 2, 1);
      uint64_t v5 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(a1 + 160)) {
          int v6 = "Ready";
        }
        else {
          int v6 = "Not Ready";
        }
        *(_DWORD *)__int128 buf = 136315138;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine Lock State = %s",  buf,  0xCu);
      }

      return *(_BYTE *)(a1 + 160) != 0;
    }
  }

  return result;
}

void sub_100273B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100273B2C(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4)
{
  if (a3)
  {
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10088B280);
    }
    uint64_t v8 = sub_100496954((void *)qword_1008D61A0, a3);
    sub_100273DC4(a1, a3, a2);
    uint64_t v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_100494958(v8, (uint64_t)__p);
        if (v17 >= 0) {
          unsigned __int8 v10 = __p;
        }
        else {
          unsigned __int8 v10 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 134218242;
        uint64_t v19 = a2;
        __int16 v20 = 2082;
        uint64_t v21 = (const char *)v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Un Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s",  buf,  0x16u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        *(_DWORD *)__int128 buf = 134218242;
        uint64_t v19 = a2;
        __int16 v20 = 2082;
        uint64_t v21 = "(NULL)";
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Un Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s",  buf,  0x16u);
      }
    }
  }

  else
  {
    --*(_BYTE *)(a1 + 76);
  }

  *a4 = *(_BYTE *)(a1 + 76);
  id v11 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(unsigned __int8 *)(a1 + 76);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine un-Register : ref count %d ",  (uint8_t *)__p,  8u);
  }

  if (!*(_BYTE *)(a1 + 76))
  {
    if (*(_BYTE *)(a1 + 77))
    {
      uint64_t v14 = *(void *)(a1 + 192);
      if (v14)
      {
        sub_100273FF0(a1, v14, 0, 0);
        sub_100273FF0(a1, *(void *)(a1 + 192), 0, 1);
        sub_100273FF0(a1, *(void *)(a1 + 192), 0, 2);
        uint64_t v15 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine un-Register : No more reference counter should be freed by parent now",  (uint8_t *)__p,  2u);
        }
      }
    }
  }

  return 1LL;
}

void sub_100273DC4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6 = *(void **)(a1 + 104);
  uint64_t v4 = a1 + 104;
  uint64_t v5 = v6;
  if (v6 != (void *)(v4 + 8))
  {
    while (1)
    {
      uint64_t v9 = (void *)v5[4];
      if (v9[1] == a3 && *v9 == a2) {
        break;
      }
      unsigned __int8 v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          id v11 = v10;
          unsigned __int8 v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          id v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          uint64_t v5 = v11;
        }

        while (!v12);
      }

      uint64_t v5 = v11;
      if (v11 == (void *)(v4 + 8)) {
        return;
      }
    }

    __int16 v20 = (void *)v5[4];
    --*(_BYTE *)(a1 + 76);
    sub_10020166C(v4, (unint64_t *)&v20);
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10088B280);
    }
    uint64_t v13 = sub_100496954((void *)qword_1008D61A0, a2);
    uint64_t v14 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      if (v13)
      {
        sub_100494958(v13, (uint64_t)__p);
        if (v19 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        int v16 = *(unsigned __int8 *)(a1 + 76);
        *(_DWORD *)__int128 buf = 134218498;
        uint64_t v22 = a3;
        __int16 v23 = 2082;
        uint64_t v24 = (const char *)v15;
        __int16 v25 = 1024;
        int v26 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Unregister Remote timesync Completed  : Remote Timesync BTAddr = %llx] session= %{public}s mNu mBTTimeSyncClient=%d",  buf,  0x1Cu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        int v17 = *(unsigned __int8 *)(a1 + 76);
        *(_DWORD *)__int128 buf = 134218498;
        uint64_t v22 = a3;
        __int16 v23 = 2082;
        uint64_t v24 = "(NULL)";
        __int16 v25 = 1024;
        int v26 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Unregister Remote timesync Completed  : Remote Timesync BTAddr = %llx] session= %{public}s mNu mBTTimeSyncClient=%d",  buf,  0x1Cu);
      }
    }

    if (v20) {
      operator delete(v20);
    }
  }

void sub_100273FF0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_10088B2A0);
  }
  int v8 = *((unsigned __int8 *)off_1008D6190 + 198);
  if (a4)
  {
    if (a4 == 2)
    {
      int v9 = *(_DWORD *)(a1 + 172);
      if (a3)
      {
        int v10 = v9 + 1;
LABEL_12:
        *(_DWORD *)(a1 + 172) = v10;
        goto LABEL_13;
      }

      if (v9)
      {
        int v10 = v9 - 1;
        goto LABEL_12;
      }
    }

uint64_t sub_10027499C(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = TSNullClockIdentifier;
  int v6 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 77)) {
      unint64_t v7 = "Yes";
    }
    else {
      unint64_t v7 = "No";
    }
    int v8 = " No";
    int v10 = 134218498;
    uint64_t v11 = a3;
    __int16 v12 = 2080;
    int v13 = v7;
    __int16 v14 = 2080;
    unsigned int v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Request for TimesyncID, address = %llx Timesync Running=%s Registered ? %s",  (uint8_t *)&v10,  0x20u);
  }

  if (!*(_BYTE *)(a1 + 77)) {
    return 0LL;
  }
  if (!a3 || (uint64_t result = sub_100274B00(a1, a3), (_DWORD)result))
  {
    uint64_t result = *(void *)(a1 + 88);
    if (result)
    {
      if ([(id)result lockState] == 2)
      {
        *a2 = *(void *)(a1 + 96);
        return 1LL;
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100274B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2 == (void *)(a1 + 112))
  {
    char v3 = 0;
  }

  else
  {
    char v3 = 0;
    while (1)
    {
      BOOL v4 = *(void *)(v2[4] + 8LL) == a2;
      if (*(void *)(v2[4] + 8LL) == a2) {
        break;
      }
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          int v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }

        while (!v7);
      }

      v3 |= v4;
      uint64_t v2 = v6;
      if (v6 == (void *)(a1 + 112)) {
        return v3 & 1;
      }
    }

    char v3 = 1;
  }

  return v3 & 1;
}

BOOL sub_100274B7C(uint64_t a1)
{
  int v2 = 2;
  char v3 = (unsigned int *)&v2;
  return *((_DWORD *)sub_100275FD4((uint64_t **)(a1 + 200), &v2, (uint64_t)&unk_1006C2518, &v3) + 8) > 0;
}

void sub_100274BCC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a2)
  {
    if (a3)
    {
      if (a4 == 2)
      {
        int v9 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v1_Block_object_dispose(va, 8) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Start Low",  (uint8_t *)&v18,  2u);
        }

        *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = 1000;
        int v10 = operator new(0x50uLL);
        sub_100275DA8((uint64_t)v10, a2, *(_DWORD *)(a1 + 172) != 0, 1);
        sub_100274F78((void *)(a1 + 176), (uint64_t)v10);
        uint64_t v11 = *(void *)(a1 + 176);
        *(void *)(v11 + 16) = 1000LL;
        sub_100274FE8(v11);
      }

      else if (a4 == 1)
      {
        int v6 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v1_Block_object_dispose(va, 8) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Start High",  (uint8_t *)&v18,  2u);
        }

        *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = 250;
        if (qword_1008D60F0 != -1) {
          dispatch_once(&qword_1008D60F0, &stru_10088B260);
        }
        sub_1004AB4BC((uint64_t)off_1008D60E8, a2, 1LL, 2LL, 2LL, 2LL);
      }

      uint64_t v12 = a1;
      int v13 = 1;
    }

    else
    {
      if (a4 == 2)
      {
        __int16 v14 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v1_Block_object_dispose(va, 8) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Stop Low",  (uint8_t *)&v18,  2u);
        }

        if (*(void *)(a1 + 176))
        {
          if (*(_BYTE *)(a1 + 77))
          {
            __int128 v18 = 0uLL;
            sub_1002102FC(a1 + 176, &v18);
            unsigned int v15 = (std::__shared_weak_count *)*((void *)&v18 + 1);
            if (*((void *)&v18 + 1))
            {
              int v16 = (unint64_t *)(*((void *)&v18 + 1) + 8LL);
              do
                unint64_t v17 = __ldaxr(v16);
              while (__stlxr(v17 - 1, v16));
              if (!v17)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
          }
        }
      }

      else if (a4 == 1)
      {
        int v8 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v1_Block_object_dispose(va, 8) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Stop High",  (uint8_t *)&v18,  2u);
        }

        if (*(_BYTE *)(a1 + 77))
        {
          if (qword_1008D60F0 != -1) {
            dispatch_once(&qword_1008D60F0, &stru_10088B260);
          }
          sub_1004AB4BC((uint64_t)off_1008D60E8, a2, 0LL, 2LL, 0LL, 0LL);
        }
      }

      *(void *)(a1 + 192) = 0LL;
      uint64_t v12 = a1;
      int v13 = 0;
    }

    sub_100275044(v12, v13);
  }

  else
  {
    BOOL v7 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1_Block_object_dispose(va, 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Cannot update Time Sync state, invalid device",  (uint8_t *)&v18,  2u);
    }
  }

uint64_t *sub_100274ED4(uint64_t a1, int a2, int a3)
{
  int v9 = a2;
  BOOL v4 = (uint64_t **)(a1 + 200);
  int v10 = (unsigned int *)&v9;
  uint64_t v5 = sub_100275FD4((uint64_t **)(a1 + 200), &v9, (uint64_t)&unk_1006C2518, &v10);
  int v6 = *((_DWORD *)v5 + 8);
  if (a3) {
    int v7 = v6 + 1;
  }
  else {
    int v7 = v6 - 1;
  }
  *((_DWORD *)v5 + _Block_object_dispose(va, 8) = v7;
  int v10 = (unsigned int *)&v9;
  uint64_t result = sub_100275FD4(v4, &v9, (uint64_t)&unk_1006C2518, &v10);
  return result;
}

void sub_100274F78(void *a1, uint64_t a2)
{
  char v3 = (std::__shared_weak_count *)a1[1];
  __int128 v4 = v7;
  *(void *)&__int128 v7 = *a1;
  *((void *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

uint64_t sub_100274FE8(uint64_t a1)
{
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_10088B260);
  }
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 24LL))(a1, *((void *)off_1008D60E8 + 30));
}

void sub_100275044(uint64_t a1, int a2)
{
  if ((a2 & 1) == 0) {
    sub_100275110(a1);
  }
  *(_BYTE *)(a1 + 77) = a2;
  __int128 v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "Not Running";
    if (a2) {
      uint64_t v5 = "Running";
    }
    int v6 = 136446210;
    __int128 v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Reference Timestamp status: %{public}s ",  (uint8_t *)&v6,  0xCu);
  }

void sub_100275110(uint64_t a1)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  int v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Reset", buf, 2u);
  }

  sub_100275614(a1, 0, 1);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = TSNullClockIdentifier;
  if (v3 != TSNullClockIdentifier)
  {
    uint64_t v5 = *(void **)(a1 + 80);
    id v11 = 0LL;
    unsigned __int8 v6 = [v5 removeUserFilteredClockWithIdentifier:v3 error:&v11];
    id v7 = v11;
    if ((v6 & 1) == 0)
    {
      int v8 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Time Synchronization Shared Clock Engine cleanup Failed",  v10,  2u);
      }
    }
  }

  int v9 = *(void **)(a1 + 88);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + sub_100242E28(v1 + 96) = v4;
}

void sub_10027522C(uint64_t a1, uint64_t a2)
{
  char v3 = sub_100273880(a1);
  sub_100272A98(a1, v3, *(_DWORD *)(a1 + 164));
}

void sub_100275264(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100276394(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1002752EC(os_unfair_lock_s *a1, void *a2)
{
  char v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100275380( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002753A8(uint64_t a1, uint64_t (***a2)(void, void, void, void, void))
{
  return (**a2)( a2,  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 52),  *(unsigned int *)(a1 + 48),  *(void *)(*(void *)(a1 + 32) + 96LL));
}

uint64_t sub_1002753CC(uint64_t a1)
{
  if (*(void *)(a1 + 88))
  {
    uint64_t v1 = 0LL;
    id v2 = 0LL;
    goto LABEL_17;
  }

  uint64_t v4 = *(const char **)(a1 + 96);
  if (v4 == (const char *)TSNullClockIdentifier)
  {
    int64x2_t v5 = vsubq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a1 + 24));
    *(int64x2_t *)(a1 + 56) = v5;
    uint64_t v6 = *(void **)(a1 + 80);
    id v18 = 0LL;
    uint64_t v7 = (const char *)[v6 addUserFilteredClockWithMachInterval:*(_OWORD *)&v5 domainInterval:4 filterShift:0 isAdaptive:&v18 error:];
    id v2 = v18;
    *(void *)(a1 + sub_100242E28(v1 + 96) = v7;
    int v8 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134218242;
      uint64_t v20 = v7;
      __int16 v21 = 2112;
      id v22 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine initializing ID %llu error %@",  buf,  0x16u);
      uint64_t v7 = *(const char **)(a1 + 96);
    }

    if (v7 == v4)
    {
      int v9 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Timesync: Timesync engine initialization failed",  buf,  2u);
      }

      goto LABEL_16;
    }
  }

  else
  {
    id v2 = 0LL;
    uint64_t v7 = *(const char **)(a1 + 96);
  }

  uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) clockWithClockIdentifier:v7]);
  uint64_t v12 = *(void **)(a1 + 88);
  id v11 = (uint64_t *)(a1 + 88);
  uint64_t *v11 = v10;

  int v13 = (void *)*v11;
  if (!*v11)
  {
LABEL_16:
    uint64_t v1 = 0LL;
    goto LABEL_17;
  }

  __int16 v14 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v15 = [v13 lockState];
    int v16 = "Not Ready";
    if (v15 == 2) {
      int v16 = "Ready";
    }
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v20 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Timesync engine Ready Lock State = %s",  buf,  0xCu);
  }

  uint64_t v1 = 1LL;
LABEL_17:

  return v1;
}

void sub_1002755F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100275614(uint64_t a1, int a2, int a3)
{
  if (*(unsigned __int8 *)(a1 + 160) != a2)
  {
    int v4 = a2;
    *(_BYTE *)(a1 + sub_100242E28(v1 + 160) = a2;
    uint64_t v6 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = "Not Ready";
      if (v4) {
        uint64_t v7 = "Ready";
      }
      int v8 = 136315138;
      int v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Notify Timesync State update: %s",  (uint8_t *)&v8,  0xCu);
      LOBYTE(v4) = *(_BYTE *)(a1 + 160) != 0;
    }

    sub_100272A98(a1, v4, a3);
  }

BOOL sub_100275708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = *(void **)(a1 + 88);
  if (v3)
  {
    id v8 = 0LL;
    [v3 addTimestampWithMachAbsolute:a3 andDomainTime:a2 error:&v8];
    id v5 = v8;
    if (v5)
    {
      uint64_t v6 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
        sub_100665878((uint64_t)v5, v6);
      }
    }

    sub_100275614(a1, [*(id *)(a1 + 88) lockState] == 2, 1);
  }

  return v3 != 0LL;
}

void sub_1002757B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002757C8(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_10088B260);
  }
  float v8 = sub_1004AA0F0((uint64_t)off_1008D60E8, a2 - a3, 0);
  int v9 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[7];
    int v14 = 134218752;
    uint64_t v15 = v10;
    __int16 v16 = 2048;
    unint64_t v17 = a2;
    __int16 v18 = 2048;
    uint64_t v19 = v11;
    __int16 v20 = 2048;
    double v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Missed GPIO toggles Missing  Host TS [%llu - %llu] expected approximate delta=%llu, actual delta=%f",  (uint8_t *)&v14,  0x2Au);
  }

  if (v8 < 10.0 && v6 < a2)
  {
    do
    {
      uint64_t v13 = a1[7];
      v6 += v13;
      if (v6 + v13 > a2) {
        break;
      }
      v7 += a1[8];
      sub_100275708((uint64_t)a1, v7, v6);
    }

    while (v6 < a2);
  }

uint64_t sub_10027593C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_10088B260);
  }
  uint64_t v6 = a2 - a3;
  uint64_t v7 = 1LL;
  float v8 = sub_1004AA0F0((uint64_t)off_1008D60E8, v6, 1);
  if (!*(_DWORD *)(a1 + 172))
  {
    float v9 = v8;
    if (v8 > (float)((float)*(unsigned int *)(a1 + 168) * 1.5))
    {
      uint64_t v10 = (os_log_s *)qword_1008F7570;
      uint64_t v7 = 0LL;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 134217984;
        double v13 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: GPIO Toggle more than expected delta=%f",  (uint8_t *)&v12,  0xCu);
        return 0LL;
      }
    }
  }

  return v7;
}

void sub_100275A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  else {
    float v8 = 0LL;
  }
  float v9 = (double)(unint64_t)(a2 - *(void *)(a1 + 32)) / 1000.0;
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_10088B260);
  }
  float v10 = sub_1004AA0F0((uint64_t)off_1008D60E8, v6 - v8, 2);
  if (v10 <= v9) {
    float v11 = v9 - v10;
  }
  else {
    float v11 = v10 - v9;
  }
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_10088B260);
  }
  float v12 = sub_1004AA0F0((uint64_t)off_1008D60E8, a3 - *(void *)(a1 + 24), 1);
  if (v11 >= 3000.0 || qword_1008EF980 == a2)
  {
    int v14 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 134219520;
      double v16 = v9;
      __int16 v17 = 2048;
      double v18 = v10;
      __int16 v19 = 2048;
      double v20 = v11;
      __int16 v21 = 2048;
      double v22 = v12;
      __int16 v23 = 2048;
      uint64_t v24 = a2;
      __int16 v25 = 2048;
      uint64_t v26 = a3;
      __int16 v27 = 2048;
      uint64_t v28 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: FW_prev_Diff = %.1fus, FWDiff_after_TS = %.1fus, delta_after_TS = %.1fus, last_event = %.1fms, f wTimestamp = %llu, hostTimestamp = %llu, Trans_FW_Timestamp = %llu",  (uint8_t *)&v15,  0x48u);
    }
  }

uint64_t sub_100275CA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100273880(a1);
  if ((_DWORD)v6) {
    *a3 = [*(id *)(a1 + 88) convertFromDomainToMachAbsoluteTime:a2];
  }
  return v6;
}

void sub_100275CF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  char v3 = *(std::__shared_weak_count **)(a1 + 184);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  if (v2) {
    sub_100274FE8(v2);
  }
  if (v3)
  {
    uint64_t v6 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100275D84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100275D98(uint64_t a1)
{
  return *(void *)(a1 + 176) != 0LL;
}

uint64_t sub_100275DA8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(_WORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + sub_100242E28(v1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(void *)a1 = &off_10088B238;
  *(void *)(a1 + sub_100242FAC(v1 - 64) = a2;
  *(_DWORD *)(a1 + 72) = a3;
  *(_BYTE *)(a1 + 76) = a4;
  uint64_t v6 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134218240;
    uint64_t v9 = a1;
    __int16 v10 = 1024;
    int v11 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Legacy Timesync Timed Event started (0x%p); Repeating Timer? %d",
      (uint8_t *)&v8,
      0x12u);
  }

  return a1;
}

void *sub_100275E8C(void *a1)
{
  *a1 = &off_10088B238;
  uint64_t v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    uint64_t v6 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Legacy Timesync Timed Event ended (0x%p)",  (uint8_t *)&v5,  0xCu);
  }

  *a1 = off_100896980;
  sub_100032BD4((uint64_t)(a1 + 5));
  char v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_100275F64(void *a1)
{
  uint64_t v1 = sub_100275E8C(a1);
  operator delete(v1);
}

void sub_100275F78(uint64_t a1)
{
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_10088B260);
  }
  sub_1004A23A0((uint64_t)off_1008D60E8, *(void *)(a1 + 64));
}

void (*sub_100275FC8())(uint64_t a1)
{
  return sub_100405938;
}

uint64_t *sub_100275FD4(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 2_Block_object_dispose(va, 8) = **a4;
    sub_100029630(a1, (uint64_t)v9, v7, v11);
    return v11;
  }

  return (uint64_t *)v9;
}

void sub_100276090(id a1)
{
  uint64_t v1 = operator new(0x4A8uLL);
  sub_100499870();
  off_1008D60E8 = v1;
}

void sub_1002760C0(_Unwind_Exception *a1)
{
}

void sub_1002760D4(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_100276104(_Unwind_Exception *a1)
{
}

void sub_100276118(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10_Block_object_dispose(va, 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2_Block_object_dispose(va, 8) = v1 + 232;
  *((void *)v1 + sub_100242E28(v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_100276220(_Unwind_Exception *a1)
{
}

uint64_t *sub_100276234(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  void *v4 = &off_10088B2D0;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  void v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    int v5 = (void *)(a2 + 24);
  }
  else {
    int v5 = 0LL;
  }
  sub_1002762B0((uint64_t)a1, v5, a2);
  return a1;
}

void sub_100276290(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002762B0(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    int v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      int v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        int v4 = (std::__shared_weak_count *)a2[1];
      }

      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        int v10 = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }

void sub_100276364(std::__shared_weak_count *a1)
{
}

uint64_t sub_100276378(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

char *sub_100276394(uint64_t a1, char *__src, char *a3)
{
  char v3 = a3;
  int v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    double v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      __int16 v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      __int16 v19 = 0LL;
    }
    double v20 = &v19[8 * v16];
    std::string __p = v19;
    __int16 v27 = v20;
    uint64_t v28 = v20;
    __int16 v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        __int16 v23 = (char *)sub_100008BA0(v8, v22);
        double v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int16 v27 = v20;
        __int16 v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int16 v27 = v20;
      }
    }

    *(void *)double v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    int v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)____int128 src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    unint64_t v9 = __src + 8;
    int v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int v4 = *(void *)v3;
  }

  return v4;
}

void sub_100276598( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002765D0(uint64_t a1)
{
  *(void *)a1 = off_10088B308;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_10088B548;
  *(void *)(a1 + 16) = off_10088B580;
  *(void *)(a1 + 24) = off_10088B5A0;
  *(void *)(a1 + sub_100242E28(v1 + 32) = off_10088B650;
  *(void *)(a1 + 40) = off_10088B6B0;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &off_10088B6F0;
  *(void *)(a1 + 56) = off_10088B708;
  *(void *)(a1 + sub_100242FAC(v1 - 64) = off_10088B750;
  *(void *)(a1 + 72) = off_10088B770;
  *(void *)(a1 + sub_100242FAC(v40 - 80) = &off_10088B798;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = off_10088B7B0;
  *(void *)(a1 + sub_100242E28(v1 + 96) = off_10088B7E0;
  *(void *)(a1 + 104) = &off_10088B808;
  *(void *)(a1 + 112) = off_10088B820;
  *(void *)(a1 + 120) = &off_10088B848;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = &off_10088B860;
  *(void *)(a1 + 136) = off_10088B878;
  *(void *)(a1 + 144) = &off_10088B8B8;
  *(void *)(a1 + 152) = off_10088B8D0;
  *(void *)(a1 + sub_100242E28(v1 + 160) = off_10088B948;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = &off_10088B970;
  *(_BYTE *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 17_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 1sub_100242FAC(v40 - 80) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 2sub_100242E28(v1 + 32) = 0LL;
  uint64_t v2 = a1 + 232;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 24_Block_object_dispose(va, 8) = a1 + 256;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + sub_1002949E4(v1 + 224) = a1 + 232;
  *(void *)(a1 + 2sub_100242FAC(v1 - 64) = 0LL;
  *(void *)(a1 + 2sub_100242FAC(v40 - 80) = 0LL;
  *(void *)(a1 + 272) = a1 + 280;
  *(_BYTE *)(a1 + 356) = 0;
  *(void *)(a1 + 360) = 0LL;
  *(void *)(a1 + 36_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 2sub_100242E28(v1 + 96) = 0LL;
  *(void *)(a1 + 304) = 0LL;
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 384) = a1 + 392;
  *(_WORD *)(a1 + 40_Block_object_dispose(va, 8) = 256;
  *(_BYTE *)(a1 + 410) = 1;
  int v20 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnectionGracePeriod");
  int v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v3 + 88LL))(v3, buf, __p, &v20);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0)
  {
    operator delete(*(void **)buf);
    if (!v4) {
      goto LABEL_13;
    }
  }

  else if (!v4)
  {
    goto LABEL_13;
  }

  int v5 = v20;
  uint64_t v6 = (os_log_s *)qword_1008F7628;
  if (v20 >= (unsigned __int16)word_1008D9258)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Warning: Using override value (%d) for connection grace period",  buf,  8u);
      LOWORD(v5) = v20;
    }

    word_1008D9258 = v5;
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_1006658EC();
  }

void sub_1002768DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_100291CE8(v24 + 152, *(void **)(v21 + 392));
  sub_100024304((void ***)&a16);

  sub_10023E78C(v23, *(char **)(v21 + 280));
  sub_100291CA0(v22, *(void **)(v21 + 256));
  sub_10023BF24(v24 - 8, *(void **)(v21 + 232));
  uint64_t v26 = *(void **)(v21 + 200);
  if (v26)
  {
    *(void *)(v21 + 20_Block_object_dispose(va, 8) = v26;
    operator delete(v26);
  }

  _Unwind_Resume(a1);
}

void sub_1002769A8(uint64_t a1)
{
  if (qword_1008D6788 != -1) {
    dispatch_once(&qword_1008D6788, &stru_10088BAC0);
  }
  sub_10024DD9C((uint64_t)off_1008D6780 + 80, a1);
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10088BAE0);
  }
  sub_100008EA4(qword_1008D5F58 + 40, a1 + 40);
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088BB00);
  }
  sub_100594810((uint64_t)off_1008D5F08, a1 + 24, 0);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10088BB20);
  }
  sub_10004FAD0((uint64_t)off_1008D6600 + 1872, a1 + 32);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10088BB20);
  }
  sub_10004FAD0((uint64_t)off_1008D6600 + 1904, a1 + 32);
  uint64_t v2 = sub_1002E8E64();
  sub_1004FB2E8(v2, a1 + 8);
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_10088BB40);
  }
  sub_100384B20(qword_1008D9260, a1 + 56);
  uint64_t v3 = sub_1002E8E64();
  sub_1004FB32C(v3, a1 + 16);
  uint64_t v4 = sub_1002E8D54();
  sub_100267C04(v4 + 448, a1 + 80);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10088BB60);
  }
  sub_10062257C(qword_1008D5F18, a1 + 64);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10088BB60);
  }
  sub_1006225C0((void *)qword_1008D5F18, a1 + 72);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088BB80);
  }
  sub_1005DC2BC((uint64_t)off_1008D5F28, a1 + 168);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088BBA0);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 88);
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_10088BBC0);
  }
  sub_100413CBC(qword_1008D9270, a1 + 96);
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_10088BBE0);
  }
  sub_100572580((uint64_t)off_1008D6280, a1 + 112);
  uint64_t v5 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 384LL))(v5))
  {
    if (qword_1008D5F00 != -1) {
      dispatch_once(&qword_1008D5F00, &stru_10088BC00);
    }
    sub_100008BE0((uint64_t)off_1008D5EF8 + 64, a1 + 128);
    if (qword_1008D67A8 != -1) {
      dispatch_once(&qword_1008D67A8, &stru_10088BC20);
    }
    sub_10052AB64(off_1008D67A0, a1 + 136);
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_10088BC40);
    }
    sub_1004229CC(off_1008D60C8, a1 + 144);
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_10088BC60);
    }
    sub_1003AE390(off_1008D5F38, a1 + 152);
    if (qword_1008D9288 != -1) {
      dispatch_once(&qword_1008D9288, &stru_10088BC80);
    }
    sub_1004FF6D4((void *)qword_1008D9280, a1 + 160);
  }

  uint64_t v6 = sub_1002E8D54();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 112LL))(v6, a1 + 312);
  if (*(_BYTE *)(a1 + 312))
  {
    uint64_t v7 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "In buddy setup. Registering for buddy state change notifications.",  buf,  2u);
    }

    uint64_t v8 = sub_1002E8D54();
    sub_1002912E4(v8 + 488, a1 + 120);
  }

  char v21 = 0;
  uint64_t v9 = sub_1002E8D54();
  (*(void (**)(uint64_t, char *))(*(void *)v9 + 104LL))(v9, &v21);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 416LL))(a1, 1LL);
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088BBA0);
  }
  *(_BYTE *)(a1 + 179) = sub_1004313B0((uint64_t)off_1008D60A8);
  uint64_t v10 = sub_1002E6E00();
  *(_BYTE *)(a1 + 356) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 776LL))(v10, a1 + 360);
  out_audit_token_t token = 0;
  uint64_t v11 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "registering for TCC change notifications",  buf,  2u);
  }

  uint64_t v12 = sub_100404FE8();
  notify_register_dispatch("com.apple.tcc.access.changed", &out_token, *(dispatch_queue_t *)(v12 + 8), &stru_10088B980);
  uint64_t v13 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "AppRestorationEnable");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(void *)v13 + 72LL))(v13, buf, __p, a1 + 409);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v23 < 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v14 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 409)) {
      uint64_t v15 = @"Enabled";
    }
    else {
      uint64_t v15 = @"Disabled";
    }
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "AppRestorationEnable is %@ ", buf, 0xCu);
  }

  uint64_t v16 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v17 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = v16;
}

void sub_100277044( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100277080(uint64_t a1)
{
  if (sub_100487D1C())
  {
    uint64_t v2 = (void *)TCCAccessCopyBundleIdentifiersForService(kTCCServiceBluetoothAlways);
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v2));
    uint64_t v4 = *(void **)(a1 + 336);
    *(void *)(a1 + 336) = v3;

    uint64_t v5 = (void *)TCCAccessCopyBundleIdentifiersDisabledForService(kTCCServiceBluetoothAlways);
    uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v5));
    uint64_t v7 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v6;

    uint64_t v8 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 336);
      int v11 = 138543362;
      uint64_t v12 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "BundleId's allowed to use BT:%{public}@",  (uint8_t *)&v11,  0xCu);
      uint64_t v8 = (os_log_s *)qword_1008F7628;
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 344);
      int v11 = 138543362;
      uint64_t v12 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "BundleId's disallowed to use BT:%{public}@",  (uint8_t *)&v11,  0xCu);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_10066594C();
  }

void sub_100277218(_Unwind_Exception *exception_object)
{
}

void sub_100277234(id a1, int a2)
{
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10088BCA0);
  }
  sub_100277274((uint64_t)off_1008D67C0);
}

void sub_100277274(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "TCC changed, lets figure out if one of our sessions needs to be removed",  buf,  2u);
  }

  *(void *)__int128 buf = 0LL;
  uint64_t v37 = 0LL;
  uint32_t v38 = 0LL;
  id v31 = [*(id *)(a1 + 336) copy];
  id v30 = [*(id *)(a1 + 344) copy];
  sub_100277080(a1);
  sub_100277674(a1, v31, v30);
  uint64_t v3 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 344);
    *(_DWORD *)uint64_t v40 = 138543362;
    uint64_t v41 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "bundle ID's not allowed to use bluetooth %{public}@",  v40,  0xCu);
  }

  uint64_t v5 = *(void **)(a1 + 224);
  if (v5 != (void *)(a1 + 232))
  {
    __int16 v29 = &v38;
    do
    {
      uint64_t v6 = (void *)v5[5];
      if (!v6[15] && v6[12])
      {
        unint64_t v7 = v5[4];
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        id v8 = *(id *)(a1 + 344);
        id v9 = [v8 countByEnumeratingWithState:&v32 objects:v39 count:16];
        if (v9)
        {
          uint64_t v10 = *(void *)v33;
          while (2)
          {
            for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v33 != v10) {
                objc_enumerationMutation(v8);
              }
              uint64_t v12 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
              if (objc_msgSend(v12, "isEqualToString:", v6[11], v29, v30))
              {
                uint64_t v13 = (os_log_s *)qword_1008F7680;
                if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t v40 = 138543362;
                  uint64_t v41 = v12;
                  _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Removing restorable bundle %{public}@ because user disabled TCC access to bluetooth",  v40,  0xCu);
                }

                unint64_t v14 = v37;
                if (v37 >= v38)
                {
                  uint64_t v16 = ((uint64_t)v37 - *(void *)buf) >> 3;
                  unint64_t v17 = ((uint64_t)v38 - *(void *)buf) >> 2;
                  if (v17 <= v16 + 1) {
                    unint64_t v17 = v16 + 1;
                  }
                  else {
                    unint64_t v18 = v17;
                  }
                  if (v18) {
                    char v19 = (char *)sub_100008BA0((uint64_t)v29, v18);
                  }
                  else {
                    char v19 = 0LL;
                  }
                  int v20 = &v19[8 * v16];
                  *(void *)int v20 = v7;
                  uint64_t v15 = (unint64_t *)(v20 + 8);
                  uint64_t v22 = *(unint64_t **)buf;
                  char v21 = v37;
                  if (v37 != *(unint64_t **)buf)
                  {
                    do
                    {
                      uint64_t v23 = *--v21;
                      *((void *)v20 - 1) = v23;
                      v20 -= 8;
                    }

                    while (v21 != v22);
                    char v21 = *(unint64_t **)buf;
                  }

                  *(void *)__int128 buf = v20;
                  uint64_t v37 = v15;
                  uint32_t v38 = (unint64_t *)&v19[8 * v18];
                  if (v21) {
                    operator delete(v21);
                  }
                }

                else
                {
                  *uint64_t v37 = v7;
                  uint64_t v15 = v14 + 1;
                }

                uint64_t v37 = v15;
                [*(id *)(a1 + 296) removeObject:v6[11]];
                goto LABEL_37;
              }
            }

            id v9 = [v8 countByEnumeratingWithState:&v32 objects:v39 count:16];
            if (v9) {
              continue;
            }
            break;
          }
        }

void sub_100277614( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100277674(uint64_t a1, void *a2, void *a3)
{
  id v28 = a2;
  id v29 = a3;
  id v25 = [*(id *)(a1 + 336) mutableCopy];
  id v24 = [*(id *)(a1 + 344) mutableCopy];
  if ([v28 count]) {
    [v25 minusSet:v28];
  }
  if ([v29 count]) {
    [v24 minusSet:v29];
  }
  id v5 = [v25 mutableCopy];
  [v5 unionSet:v24];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 anyObject]);

  if (v6)
  {
    unint64_t v7 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BluetoothTCC changed", buf, 2u);
    }

    id v8 = v5;
    if ([v25 count])
    {
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      obuint64_t j = v25;
      id v9 = [obj countByEnumeratingWithState:&v35 objects:v43 count:16];
      if (v9)
      {
        uint64_t v10 = *(void *)v36;
        int v11 = 0xFFFF;
        do
        {
          uint64_t v12 = 0LL;
          do
          {
            if (*(void *)v36 != v10) {
              objc_enumerationMutation(obj);
            }
            uint64_t v13 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)v12);
            unint64_t v14 = (os_log_s *)qword_1008F7628;
            if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138543362;
              *(void *)&uint8_t buf[4] = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "App %{public}@ bluetooth authorization changed",  buf,  0xCu);
            }

            int v15 = [v29 containsObject:v13];
            if (v15) {
              int v11 = 1;
            }
            uint64_t v16 = (os_log_s *)qword_1008F7628;
            if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138544130;
              *(void *)&uint8_t buf[4] = v13;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v15;
              *(_WORD *)&_BYTE buf[18] = 1024;
              *(_DWORD *)&_BYTE buf[20] = v11;
              *(_WORD *)&uint8_t buf[24] = 1024;
              *(_DWORD *)&buf[26] = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Push AWD stats for %{public}@: triggerLoc: %u, prevPermission: %u, currPermission: %u",  buf,  0x1Eu);
            }

            __int128 v41 = 0u;
            __int128 v42 = 0u;
            memset(buf, 0, sizeof(buf));
            id v5 = v8;
            sub_10002418C(&__p, (char *)[v13 UTF8String]);
            sub_1002915D4(buf, &__p, 0, v15, v11, 0, 0, 0, 0xFFFF);
            if (qword_1008D9298 != -1) {
              dispatch_once(&qword_1008D9298, &stru_10088BCC0);
            }
            sub_10040D074(qword_1008D9290, (uint64_t)buf);
            uint64_t v12 = (char *)v12 + 1;
          }

          while (v9 != v12);
          id v9 = [obj countByEnumeratingWithState:&v35 objects:v43 count:16];
        }

        while (v9);
      }

      else
      {
        int v11 = 0xFFFF;
      }
    }

    else
    {
      int v11 = 0xFFFF;
    }

    if ([v24 count])
    {
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      __int128 v30 = 0u;
      __int128 v31 = 0u;
      id obja = v24;
      id v17 = [obja countByEnumeratingWithState:&v30 objects:v39 count:16];
      if (v17)
      {
        uint64_t v18 = *(void *)v31;
        do
        {
          char v19 = 0LL;
          do
          {
            if (*(void *)v31 != v18) {
              objc_enumerationMutation(obja);
            }
            int v20 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)v19);
            char v21 = (os_log_s *)qword_1008F7628;
            if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138543362;
              *(void *)&uint8_t buf[4] = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "App %{public}@ bluetooth authorization changed",  buf,  0xCu);
            }

            int v22 = [v28 containsObject:v20];
            if (v22) {
              int v11 = 0;
            }
            uint64_t v23 = (os_log_s *)qword_1008F7628;
            if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138544130;
              *(void *)&uint8_t buf[4] = v20;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v22;
              *(_WORD *)&_BYTE buf[18] = 1024;
              *(_DWORD *)&_BYTE buf[20] = v11;
              *(_WORD *)&uint8_t buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Push AWD stats for %{public}@: triggerLoc: %u, prevPermission: %u, currPermission: %u",  buf,  0x1Eu);
            }

            __int128 v41 = 0u;
            __int128 v42 = 0u;
            memset(buf, 0, sizeof(buf));
            id v5 = v8;
            sub_10002418C(&__p, (char *)[v20 UTF8String]);
            sub_1002915D4(buf, &__p, 0, v22, v11, 1, 0, 0, 0xFFFF);
            if (qword_1008D9298 != -1) {
              dispatch_once(&qword_1008D9298, &stru_10088BCC0);
            }
            sub_10040D074(qword_1008D9290, (uint64_t)buf);
            char v19 = (char *)v19 + 1;
          }

          while (v17 != v19);
          id v17 = [obja countByEnumeratingWithState:&v30 objects:v39 count:16];
        }

        while (v17);
      }
    }
  }
}

void sub_100277C4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100277D34(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3 = *(void **)(a1 + 232);
  if (v3)
  {
    uint64_t v6 = (uint64_t *)(a1 + 232);
    do
    {
      unint64_t v7 = v3[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        id v9 = v3;
      }
      else {
        id v9 = v3 + 1;
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = (void *)*v9;
    }

    while (*v9);
    if (v6 != (uint64_t *)(a1 + 232) && v6[4] <= a2)
    {
      int v78 = (uint64_t **)(a1 + 224);
      int v81 = (uint64_t *)(a1 + 232);
      int v11 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(a2, (uint64_t)__p);
        uint64_t v12 = (SBYTE7(v110) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Unregistering session %{public}s",  buf,  0xCu);
        if (SBYTE7(v110) < 0) {
          operator delete(__p[0]);
        }
      }

      id v13 = *(id *)(v6[5] + 88);
      uint64_t v80 = v6[5];
      id v14 = *(id *)(v80 + 104);
      unint64_t v15 = a2;
      if ((a3 & 1) == 0)
      {
        if (*(_BYTE *)(v80 + 24) && *(void *)(v80 + 96)) {
          int v16 = (*(uint64_t (**)(void))(*(void *)v80 + 40LL))();
        }
        else {
          int v16 = 0;
        }
        id v17 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *(void **)(a1 + 344);
          LODWORD(__p[0]) = 138543362;
          *(void **)((char *)__p + 4) = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "bundle ID's not allowed to use bluetooth %{public}@",  (uint8_t *)__p,  0xCu);
        }

        if (*(void *)(v80 + 96))
        {
          __int128 v103 = 0u;
          __int128 v104 = 0u;
          __int128 v101 = 0u;
          __int128 v102 = 0u;
          id v19 = *(id *)(a1 + 344);
          id v20 = [v19 countByEnumeratingWithState:&v101 objects:v116 count:16];
          if (v20)
          {
            uint64_t v21 = *(void *)v102;
            while (2)
            {
              for (uint64_t i = 0LL; i != v20; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v102 != v21) {
                  objc_enumerationMutation(v19);
                }
                uint64_t v23 = *(void **)(*((void *)&v101 + 1) + 8LL * (void)i);
                if ([v23 isEqualToString:*(void *)(v80 + 88)])
                {
                  id v24 = (os_log_s *)qword_1008F7680;
                  if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(__p[0]) = 138543362;
                    *(void **)((char *)__p + 4) = v23;
                    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Removing restorable bundle %{public}@ because user disabled TCC access to bluetooth",  (uint8_t *)__p,  0xCu);
                  }

                  [*(id *)(a1 + 296) removeObject:*(void *)(v80 + 88)];
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v80 + 40LL))(v80))
                  {
                    id v25 = (os_log_s *)qword_1008F7680;
                    if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
                    {
                      sub_100494958(a2, (uint64_t)__p);
                      BOOL v26 = (SBYTE7(v110) & 0x80u) == 0 ? __p : (void **)__p[0];
                      *(_DWORD *)__int128 buf = 136446210;
                      *(void *)&uint8_t buf[4] = v26;
                      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Removing restorable session %{public}s due to TCC change",  buf,  0xCu);
                      if (SBYTE7(v110) < 0) {
                        operator delete(__p[0]);
                      }
                    }
                  }

                  unint64_t v15 = a2;
                  goto LABEL_55;
                }
              }

              id v20 = [v19 countByEnumeratingWithState:&v101 objects:v116 count:16];
              if (v20) {
                continue;
              }
              break;
            }
          }

          unint64_t v15 = a2;
          if ((v16 & 1) != 0) {
            goto LABEL_50;
          }
        }

        else if (v16)
        {
LABEL_50:
          __int16 v27 = (os_log_s *)qword_1008F7680;
          if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
          {
            id v28 = *(void **)(v80 + 88);
            LODWORD(__p[0]) = 138543362;
            *(void **)((char *)__p + 4) = v28;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Session %{public}@ is restorable, persisting",  (uint8_t *)__p,  0xCu);
          }

          *(void *)(v80 + 120) = 0LL;
          *(_BYTE *)(v80 + 3_Block_object_dispose(va, 8) = 0;
LABEL_148:

          return 0LL;
        }
      }

void sub_100278944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100278A5C(uint64_t a1, unint64_t a2, _DWORD *a3, _BYTE *a4)
{
  *a3 = 0;
  uint64_t v4 = *(void **)(a1 + 232);
  if (v4)
  {
    BOOL v8 = (void *)(a1 + 232);
    do
    {
      unint64_t v9 = v4[4];
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        int v11 = v4;
      }
      else {
        int v11 = v4 + 1;
      }
      if (v10) {
        BOOL v8 = v4;
      }
      uint64_t v4 = (void *)*v11;
    }

    while (*v11);
    if (v8 != (void *)(a1 + 232) && v8[4] <= a2)
    {
      uint64_t v12 = v8[5];
      *a4 = 0;
      if (!*(_BYTE *)(v12 + 36)) {
        goto LABEL_27;
      }
      if (qword_1008D6788 != -1) {
        dispatch_once(&qword_1008D6788, &stru_10088BAC0);
      }
      int v13 = sub_1002075B4((uint64_t)off_1008D6780);
      if (v13 == 1)
      {
        *a4 = *(_BYTE *)(a1 + 179);
      }

      else
      {
LABEL_27:
        if (*(_BYTE *)(v12 + 37) || !*(_BYTE *)(a1 + 179))
        {
          if (qword_1008D6788 != -1) {
            dispatch_once(&qword_1008D6788, &stru_10088BAC0);
          }
          int v13 = sub_1002075B4((uint64_t)off_1008D6780);
        }

        else
        {
          int v13 = 0;
        }
      }

      *a3 = v13;
    }
  }

  return 0LL;
}

uint64_t sub_100278B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(a2 + 120)) {
    return 0LL;
  }
  uint64_t result = 0LL;
  if (a3)
  {
    if (*(_BYTE *)(a2 + 24))
    {
      uint64_t v9 = sub_1002E8E64();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 40LL))(v9, a3, a4, a5);
      return 1LL;
    }
  }

  return result;
}

void sub_100278BE4(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  if (*(_BYTE *)(a1 + 180))
  {
    uint64_t v2 = *(void **)(a1 + 224);
    if (v2 != (void *)(a1 + 232))
    {
      while (1)
      {
        __int128 v86 = v2;
        int v3 = (*(uint64_t (**)(void))(*(void *)v2[5] + 16LL))(v2[5]);
        uint64_t v4 = (id *)v86[5];
        if (!v3) {
          break;
        }
        if ((*((unsigned int (**)(id *))*v4 + 2))(v4) == 1)
        {
          uint64_t v5 = v86[5];
          __int128 v118 = 0u;
          __int128 v119 = 0u;
          __int128 v120 = 0u;
          __int128 v121 = 0u;
          uint64_t v88 = v5;
          id v6 = *(id *)(v5 + 216);
          id v7 = [v6 countByEnumeratingWithState:&v118 objects:v142 count:16];
          if (v7)
          {
            uint64_t v87 = *(void *)v119;
            do
            {
              for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v119 != v87) {
                  objc_enumerationMutation(v6);
                }
                uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v88 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v118 + 1) + 8 * (void)i)]);
                __int128 v116 = 0u;
                __int128 v117 = 0u;
                __int128 v114 = 0u;
                __int128 v115 = 0u;
                id v10 = v9;
                id v11 = [v10 countByEnumeratingWithState:&v114 objects:v141 count:16];
                if (v11)
                {
                  uint64_t v12 = *(void *)v115;
                  do
                  {
                    for (uint64_t j = 0LL; j != v11; uint64_t j = (char *)j + 1)
                    {
                      if (*(void *)v115 != v12) {
                        objc_enumerationMutation(v10);
                      }
                      uint64_t v14 = *(void *)(*((void *)&v114 + 1) + 8LL * (void)j);
                      unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v14]);
                      [v15 timeIntervalSinceNow];
                      if (v16 >= -30.0) {
                        [v1 addObject:v14];
                      }
                    }

                    id v11 = [v10 countByEnumeratingWithState:&v114 objects:v141 count:16];
                  }

                  while (v11);
                }
              }

              id v7 = [v6 countByEnumeratingWithState:&v118 objects:v142 count:16];
            }

            while (v7);
          }

LABEL_134:
          unint64_t v61 = (char *)v61 + 1;
        }

        while (v59 != v61);
        id v59 = [v58 countByEnumeratingWithState:&v97 objects:v137 count:16];
      }

      while (v59);
    }

    __int128 v93 = 0u;
    __int128 v94 = 0u;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    id v78 = *(id *)(a1 + 328);
    id v79 = [v78 countByEnumeratingWithState:&v91 objects:v126 count:16];
    if (v79)
    {
      uint64_t v80 = *(void *)v92;
      do
      {
        int v81 = 0LL;
        do
        {
          if (*(void *)v92 != v80) {
            objc_enumerationMutation(v78);
          }
          uint64_t v82 = *(void **)(*((void *)&v91 + 1) + 8LL * (void)v81);
          if (([v1 containsObject:v82] & 1) == 0)
          {
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_10088BB80);
            }
            uint64_t v83 = sub_1005CC198((uint64_t)off_1008D5F28, v82, 0);
            if (qword_1008D60D0 != -1) {
              dispatch_once(&qword_1008D60D0, &stru_10088BC40);
            }
            v90[0] = _NSConcreteStackBlock;
            v90[1] = 3221225472LL;
            v90[2] = sub_10028C8AC;
            v90[3] = &unk_1008800B8;
            v90[4] = v82;
            v90[5] = v83;
            sub_100424EB4((uint64_t)off_1008D60C8, v90);
          }

          int v81 = (char *)v81 + 1;
        }

        while (v79 != v81);
        id v79 = [v78 countByEnumeratingWithState:&v91 objects:v126 count:16];
      }

      while (v79);
    }
  }

  else
  {
    __int128 v84 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "Stack is shutting down, unused devices will be cleaned up",  buf,  2u);
    }
  }
}

void sub_100279A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100279BF8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  uint64_t v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v3;
    }
    else {
      BOOL v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }

  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0 && *(_BYTE *)(v9 + 73) != 0;
}

id sub_100279C54(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  uint64_t v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v3;
    }
    else {
      BOOL v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }

  while (*v8);
  if (v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0) {
    return *(id *)(v9 + 192);
  }
  else {
    return 0LL;
  }
}

id sub_100279CB8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  uint64_t v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v3;
    }
    else {
      BOOL v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }

  while (*v8);
  if (v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0) {
    return *(id *)(v9 + 200);
  }
  else {
    return 0LL;
  }
}

id sub_100279D1C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  uint64_t v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v3;
    }
    else {
      BOOL v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }

  while (*v8);
  if (v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0) {
    return *(id *)(v9 + 88);
  }
  else {
    return 0LL;
  }
}

BOOL sub_100279D80(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  uint64_t v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v3;
    }
    else {
      BOOL v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }

  while (*v8);
  if (v5 == v2 || v5[4] > a2) {
LABEL_12:
  }
    uint64_t v5 = v2;
  return v5 != v2;
}

void sub_100279DCC(uint64_t a1, unint64_t a2)
{
  int v14 = 0;
  sub_100278A5C(a1, a2, &v14, &v13);
  if (v14)
  {
    uint64_t v4 = *(void **)(a1 + 232);
    if (v4)
    {
      uint64_t v5 = a1 + 232;
      do
      {
        unint64_t v6 = v4[4];
        BOOL v7 = v6 >= a2;
        if (v6 >= a2) {
          BOOL v8 = v4;
        }
        else {
          BOOL v8 = v4 + 1;
        }
        if (v7) {
          uint64_t v5 = (uint64_t)v4;
        }
        uint64_t v4 = (void *)*v8;
      }

      while (*v8);
      if (v5 != a1 + 232 && *(void *)(v5 + 32) <= a2)
      {
        uint64_t v9 = *(void *)(v5 + 40);
        uint64_t v10 = sub_100404FE8();
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472LL;
        void v12[2] = sub_100279F18;
        v12[3] = &unk_100888050;
        v12[4] = a1;
        void v12[5] = a2;
        v12[6] = v9;
        sub_100405384(v10, v12);
      }
    }
  }

  else
  {
    id v11 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 67109120LL;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Not sending enqueued messages. powerState :%d",  (uint8_t *)&buf,  8u);
    }
  }

void sub_100279F18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v1 + 232);
  uint64_t v2 = (void *)(v1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  unint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = v2;
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      unint64_t v6 = v3;
    }
    int v3 = (void *)*v9;
  }

  while (*v9);
  if (v6 != v2 && v5 >= v6[4])
  {
    sub_10038F728(*(void **)(a1 + 48));
  }

  else
  {
LABEL_12:
    uint64_t v10 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Dropping enqueued messages as session has been terminated",  (uint8_t *)v11,  2u);
    }
  }

uint64_t sub_100279FD4( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned int a5, void *a6, const std::string *a7, unsigned int a8, void *a9, _DWORD *a10, _BYTE *a11, uint64_t a12, int a13, __int16 a14, void *a15)
{
  uint64_t v104 = a12;
  int v105 = a13;
  __int16 v106 = a14;
  id v96 = a2;
  obuint64_t j = a6;
  id v19 = a6;
  id v20 = a9;
  id v97 = a15;
  uint64_t v98 = sub_1002E8E64();
  int v22 = *(void **)(a1 + 224);
  uint64_t v100 = a1;
  unsigned __int8 v23 = (void *)(a1 + 232);
  if (v22 == v23)
  {
LABEL_24:
    unint64_t v102 = 0LL;
    if ((char)a7->__r_.__value_.__s.__size_ < 0)
    {
      uint64_t v33 = (const std::string *)a7->__r_.__value_.__r.__words[0];
      uint64_t size = a7->__r_.__value_.__l.__size_;
    }

    else
    {
      uint64_t size = a7->__r_.__value_.__s.__size_;
      uint64_t v33 = a7;
    }

    if (size >= 20)
    {
      id v34 = (char *)v33 + size;
      uint64_t v35 = v33;
      do
      {
        __int128 v36 = (char *)memchr(v35, 99, size - 19);
        if (!v36) {
          break;
        }
        BOOL v37 = *(void *)v36 == 0x6C7070612E6D6F63LL && *((void *)v36 + 1) == 0x6F7465756C622E65LL;
        if (v37 && *((_DWORD *)v36 + 4) == 1684567151)
        {
          if (v36 != v34 && v36 - (char *)v33 != -1)
          {
            uint64_t v39 = 3LL;
            goto LABEL_43;
          }

          break;
        }

        uint64_t v35 = (const std::string *)(v36 + 1);
        uint64_t size = v34 - (char *)v35;
      }

      while (v34 - (char *)v35 >= 20);
    }

    uint64_t v39 = 4LL;
LABEL_43:
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10088BCE0);
    }
    if (sub_100496120(qword_1008D61A0, (uint64_t)a7, &v102, v39))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100665A28();
      }
      goto LABEL_104;
    }

    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10088BCE0);
    }
    uint64_t v25 = sub_100496954((void *)qword_1008D61A0, v102);
    (**(void (***)(uint64_t, uint64_t, id, void))v98)(v98, v25, v19, a5);
    if (!(_BYTE)v104)
    {
LABEL_75:
      int v47 = (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(void *)v98 + 48LL))(v98, v25, a8 == 0);
      if (BYTE1(v104)) {
        int v48 = 0;
      }
      else {
        int v48 = v47;
      }
      if ((v48 & 1) != 0)
      {
        if (a8)
        {
          if (a8 != 1) {
            goto LABEL_84;
          }
          uint64_t v49 = sub_1002E8D94();
          uint64_t v50 = 10LL;
        }

        else
        {
          uint64_t v49 = sub_1002E8D94();
          uint64_t v50 = 9LL;
        }

        (*(void (**)(uint64_t, id, uint64_t))(*(void *)v49 + 632LL))(v49, v19, v50);
      }

void sub_10027AF84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10027B07C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 304) objectForKey:v5]);

  unint64_t v7 = (os_log_s *)qword_1008F7680;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138543362;
      v22[0] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Death Timer Already Exists For <%{public}@> Skipping",  buf,  0xCu);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240450;
      LODWORD(v22[0]) = a3;
      WORD2(v22[0]) = 2114;
      *(void *)((char *)v22 + 6) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Starting Resurrection Timer (%{public}d secs) for <%{public}@>",  buf,  0x12u);
    }

    unint64_t v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472LL;
    id v17 = sub_10028C28C;
    id v18 = &unk_1008800B8;
    uint64_t v20 = a1;
    id v8 = v5;
    id v19 = v8;
    dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v15);
    uint64_t v10 = (void *)[*(id *)(a1 + 304) objectForKey:v8, v15, v16, v17, v18];
    id v11 = v10;
    if (v10) {
      dispatch_block_cancel(v10);
    }
    uint64_t v12 = *(void **)(a1 + 304);
    id v13 = objc_retainBlock(v9);
    [v12 setObject:v13 forKey:v8];

    uint64_t v14 = sub_100404FE8();
    sub_100405460(v14, 1000 * a3, v9);
  }
}

void sub_10027B268( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10027B2AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  LODWORD(v6) = a5 ^ 1;
  id v7 = a4;
  if (*(_BYTE *)(a2 + 129) == 32) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = v6;
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  id v8 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138543618;
    id v10 = v7;
    __int16 v11 = 1024;
    int v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Session %{public}@ tccRequired : %d",  (uint8_t *)&v9,  0x12u);
  }

  *(_BYTE *)(a2 + 3_Block_object_dispose(va, 8) = 1;
  (*(void (**)(void, uint64_t))(**(void **)(a2 + 120) + 264LL))(*(void *)(a2 + 120), v6);
}

void sub_10027B3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10027B3C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v1 + 232);
  uint64_t v2 = (void *)(v1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  unint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = v2;
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      int v9 = v3;
    }
    else {
      int v9 = v3 + 1;
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    int v3 = (void *)*v9;
  }

  while (*v9);
  if (v6 != v2 && v5 >= v6[4])
  {
    sub_10038F728(*(void **)(a1 + 48));
  }

  else
  {
LABEL_12:
    id v10 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Dropping enqueued messages as session has been terminated",  (uint8_t *)v11,  2u);
    }
  }

uint64_t sub_10027B47C@<X0>(unsigned __int8 *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v40 = 0LL;
  __int128 v38 = 0u;
  memset(v39, 0, sizeof(v39));
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v37 = 0u;
  memset(v35, 0, sizeof(v35));
  sub_10020E564((uint64_t)v35);
  *(_DWORD *)((char *)v35 + *(void *)(*(void *)&v35[0] - 24LL) + 8) &= ~1u;
  sub_1001FD17C(v35, (uint64_t)"AppManagerFlags ", 16LL);
  uint64_t v4 = sub_1001FD17C(v35, (uint64_t)"showPowerPrompt:", 16LL);
  unint64_t v5 = (void *)std::ostream::operator<<(v4, *a1);
  sub_1001FD17C(v5, (uint64_t)" ", 1LL);
  uint64_t v6 = sub_1001FD17C(v35, (uint64_t)"backgroundingDisabled:", 22LL);
  unint64_t v7 = (void *)std::ostream::operator<<(v6, a1[1]);
  sub_1001FD17C(v7, (uint64_t)" ", 1LL);
  BOOL v8 = sub_1001FD17C(v35, (uint64_t)"programmaticPairing:", 20LL);
  int v9 = (void *)std::ostream::operator<<(v8, a1[2]);
  sub_1001FD17C(v9, (uint64_t)" ", 1LL);
  id v10 = sub_1001FD17C(v35, (uint64_t)"needsRestrictedStateOperation:", 30LL);
  __int16 v11 = (void *)std::ostream::operator<<(v10, a1[3]);
  sub_1001FD17C(v11, (uint64_t)" ", 1LL);
  int v12 = sub_1001FD17C(v35, (uint64_t)"overrideRestrictedState:", 24LL);
  id v13 = (void *)std::ostream::operator<<(v12, a1[4]);
  sub_1001FD17C(v13, (uint64_t)" ", 1LL);
  uint64_t v14 = sub_1001FD17C(v35, (uint64_t)"tccExemptAppBundle:", 19LL);
  unint64_t v15 = (void *)std::ostream::operator<<(v14, a1[5]);
  sub_1001FD17C(v15, (uint64_t)" ", 1LL);
  uint64_t v16 = sub_1001FD17C(v35, (uint64_t)"receivesControllerBTClockEvents:", 32LL);
  id v17 = (void *)std::ostream::operator<<(v16, a1[6]);
  sub_1001FD17C(v17, (uint64_t)" ", 1LL);
  id v18 = sub_1001FD17C(v35, (uint64_t)"receivesOfflineADVDataRequests:", 31LL);
  id v19 = (void *)std::ostream::operator<<(v18, a1[7]);
  sub_1001FD17C(v19, (uint64_t)" ", 1LL);
  uint64_t v20 = sub_1001FD17C(v35, (uint64_t)"hasEntitlementBTCentralBackground:", 34LL);
  __int128 v21 = (void *)std::ostream::operator<<(v20, a1[8]);
  sub_1001FD17C(v21, (uint64_t)" ", 1LL);
  int v22 = sub_1001FD17C(v35, (uint64_t)"deviceAccessForMediaSession:", 28LL);
  unsigned __int8 v23 = (void *)std::ostream::operator<<(v22, a1[9]);
  sub_1001FD17C(v23, (uint64_t)" ", 1LL);
  uint64_t v24 = sub_1001FD17C(v35, (uint64_t)"deviceAccessForMediaExtensionSession:", 37LL);
  uint64_t v25 = (void *)std::ostream::operator<<(v24, a1[10]);
  sub_1001FD17C(v25, (uint64_t)" ", 1LL);
  BOOL v26 = sub_1001FD17C(v35, (uint64_t)"deviceAccessPerAccessorySession:", 32LL);
  BOOL v27 = (void *)std::ostream::operator<<(v26, a1[11]);
  sub_1001FD17C(v27, (uint64_t)" ", 1LL);
  uint64_t v28 = sub_1001FD17C(v35, (uint64_t)"deviceAccessPerAccessoryExtensionSession:", 41LL);
  int v29 = (void *)std::ostream::operator<<(v28, a1[12]);
  sub_1001FD17C(v29, (uint64_t)" ", 1LL);
  id v30 = sub_1001FD17C(v35, (uint64_t)"worksWithFindMyDevices:", 23LL);
  int v31 = (void *)std::ostream::operator<<(v30, a1[13]);
  sub_1001FD17C(v31, (uint64_t)" ", 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*(void *)&v35[0] - 24LL)));
  id v32 = std::locale::use_facet(&v41, &std::ctype<char>::id);
  uint64_t v33 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10LL);
  std::locale::~locale(&v41);
  std::ostream::put(v35, v33);
  std::ostream::flush(v35);
  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v35 + 8));
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v35 + 8);
  return std::ios::~ios(v39);
}

void sub_10027B83C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10027B860(uint64_t a1, uint64_t a2, void *a3, int a4, char a5)
{
  uint64_t v29 = a2;
  id v9 = a3;
  if (a4 == 3)
  {
    id v10 = (char *)operator new(0x100uLL);
    sub_10039F400();
  }

  else if (a4 == 1)
  {
    id v10 = (char *)operator new(0x110uLL);
    sub_10039C11C();
  }

  else
  {
    if (a4)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(a2, (uint64_t)v22);
        sub_100665AB8();
      }

      if (a4 == 2 && os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100665A8C();
      }
      uint64_t v20 = 1LL;
      goto LABEL_32;
    }

    id v10 = (char *)operator new(0x1D0uLL);
    sub_100390030();
  }

  v22[0] = 0LL;
  sub_1000B0400((uint64_t)v22);
  uint64_t v11 = SWORD2(v22[0]);
  *((void *)v10 + 1) = SLODWORD(v22[0]);
  *((void *)v10 + 2) = v11;
  uint64_t v12 = sub_1002E8E64();
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 56LL))(v12, v29);
  (*(void (**)(char *, uint64_t))(*(void *)v10 + 24LL))(v10, v13);
  v10[24] = a5;
  if ((*(unsigned int (**)(char *))(*(void *)v10 + 16LL))(v10) == 1)
  {
    __int16 v14 = word_1008D925A++;
    *((_WORD *)v10 + 112) = v14;
  }

  v22[0] = &v29;
  sub_100029574((uint64_t **)(a1 + 224), (unint64_t *)&v29, (uint64_t)&unk_1006C2518, (uint64_t **)v22)[5] = (uint64_t)v10;
  unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  @"com.google.Wear",  @"com.google.SinoWear",  0LL));
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v16 = v15;
  id v17 = [v16 countByEnumeratingWithState:&v25 objects:v32 count:16];
  if (v17)
  {
    uint64_t v18 = *(void *)v26;
    while (2)
    {
      for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v18) {
          objc_enumerationMutation(v16);
        }
        if ([v9 containsString:*(void *)(*((void *)&v25 + 1) + 8 * (void)i)])
        {
          v10[45] = 1;
          goto LABEL_19;
        }
      }

      id v17 = [v16 countByEnumeratingWithState:&v25 objects:v32 count:16];
      if (v17) {
        continue;
      }
      break;
    }
  }

void sub_10027BB7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10027BC04(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v7 = *(void **)(a1 + 232);
  unint64_t v5 = (void *)(a1 + 232);
  uint64_t v6 = v7;
  if (v7)
  {
    BOOL v8 = v5;
    do
    {
      unint64_t v9 = v6[4];
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        uint64_t v11 = v6;
      }
      else {
        uint64_t v11 = v6 + 1;
      }
      if (v10) {
        BOOL v8 = v6;
      }
      uint64_t v6 = (void *)*v11;
    }

    while (*v11);
    if (v8 != v5 && v8[4] <= a2)
    {
      int v12 = (*(uint64_t (**)(void))(*(void *)v8[5] + 16LL))(v8[5]);
      if (a3 == 2 || v12 == a3) {
        return v8[5];
      }
    }
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10088BCE0);
  }
  BOOL v13 = sub_100496CBC(qword_1008D61A0, a2);
  __int16 v14 = (os_log_s *)qword_1008F7628;
  if (v13)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_FAULT))
    {
      if (a3 > 3) {
        unint64_t v15 = @"Unknown";
      }
      else {
        unint64_t v15 = (const __CFString *)*((void *)&off_10088BE00 + (int)a3);
      }
      sub_100494958(a2, (uint64_t)__p);
      if (v19 >= 0) {
        id v17 = __p;
      }
      else {
        id v17 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 138543618;
      __int128 v21 = v15;
      __int16 v22 = 2082;
      __int128 v23 = v17;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Couldn't find a registered %{public}@ app for session %{public}s",  buf,  0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_100665B04(a3, a2, v14);
  }

  return 0LL;
}

void sub_10027BDD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = v6;
  if (v5 && v6)
  {
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 320) objectForKeyedSubscript:v5]);
    if (v8)
    {
      uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));

      BOOL v8 = (void *)v9;
    }

    [v8 addObject:v7];
    [*(id *)(a1 + 320) setObject:v8 forKeyedSubscript:v5];
    BOOL v10 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138543618;
      id v12 = v5;
      __int16 v13 = 2112;
      __int16 v14 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Application %{public}@ for user %@ is interested in FindMy devices",  (uint8_t *)&v11,  0x16u);
    }
  }
}

void sub_10027BF0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10027BF34( uint64_t a1, uint64_t a2, unsigned int a3, void *a4, const std::string *a5, unsigned int a6, void *a7, _DWORD *a8, _BYTE *a9, uint64_t a10)
{
  obuint64_t j = a4;
  id v15 = a4;
  id v59 = a7;
  id v64 = a7;
  uint64_t v62 = sub_1002E8E64();
  id v17 = *(void **)(a1 + 224);
  BOOL v63 = (_BYTE *)a1;
  uint64_t v18 = (void *)(a1 + 232);
  if (v17 == v18)
  {
LABEL_23:
    unint64_t v67 = 0LL;
    if ((char)a5->__r_.__value_.__s.__size_ < 0)
    {
      __int128 v26 = (const std::string *)a5->__r_.__value_.__r.__words[0];
      uint64_t size = a5->__r_.__value_.__l.__size_;
    }

    else
    {
      uint64_t size = a5->__r_.__value_.__s.__size_;
      __int128 v26 = a5;
    }

    if (size >= 20)
    {
      __int128 v27 = (char *)v26 + size;
      __int128 v28 = v26;
      do
      {
        uint64_t v29 = (char *)memchr(v28, 99, size - 19);
        if (!v29) {
          break;
        }
        BOOL v30 = *(void *)v29 == 0x6C7070612E6D6F63LL && *((void *)v29 + 1) == 0x6F7465756C622E65LL;
        if (v30 && *((_DWORD *)v29 + 4) == 1684567151)
        {
          if (v29 != v27 && v29 - (char *)v26 != -1)
          {
            uint64_t v32 = 3LL;
            goto LABEL_42;
          }

          break;
        }

        __int128 v28 = (const std::string *)(v29 + 1);
        uint64_t size = v27 - (char *)v28;
      }

      while (v27 - (char *)v28 >= 20);
    }

    uint64_t v32 = 4LL;
LABEL_42:
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10088BCE0);
    }
    if (sub_100496120(qword_1008D61A0, (uint64_t)a5, &v67, v32))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100665A28();
      }
      goto LABEL_126;
    }

    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10088BCE0);
    }
    uint64_t v19 = sub_100496954((void *)qword_1008D61A0, v67);
    if (!v19) {
      goto LABEL_155;
    }
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10088BCE0);
    }
    if (!sub_100496CBC(qword_1008D61A0, v19))
    {
LABEL_155:
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100665B9C();
      }
      goto LABEL_126;
    }

    (**(void (***)(uint64_t, uint64_t, id, void))v62)(v62, v19, v15, a3);
    if ((a10 & 1) == 0)
    {
LABEL_99:
      if ((*(unsigned int (**)(uint64_t, uint64_t, BOOL))(*(void *)v62 + 48LL))(v62, v19, a6 == 0))
      {
        int v45 = 1;
        if (a6 != 1 || (a10 & 0x100) == 0) {
          goto LABEL_105;
        }
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
        {
          sub_100494958(v19, (uint64_t)buf);
          sub_100665C00();
        }
      }

      int v45 = 0;
LABEL_105:
      int v46 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(v19, (uint64_t)v65);
        int v47 = "unknonw";
        if (a6 == 3) {
          int v47 = "classic";
        }
        if (a6 == 1) {
          int v47 = "peripheral";
        }
        if (!a6) {
          int v47 = "central";
        }
        if (v66 >= 0) {
          int v48 = v65;
        }
        else {
          int v48 = (void **)v65[0];
        }
        *(_DWORD *)std::stringbuf::string_type __p = 136447234;
        *(void *)&__p[4] = v47;
        uint64_t v49 = "on";
        __int16 v70 = 2082;
        *(void *)char v71 = v48;
        if (v45) {
          uint64_t v50 = "on";
        }
        else {
          uint64_t v50 = "off";
        }
        *(_WORD *)&v71[8] = 2082;
        uint64_t v72 = v50;
        if (!v64) {
          uint64_t v49 = "off";
        }
        __int16 v73 = 2082;
        int v74 = v49;
        __int16 v75 = 2114;
        id v76 = v64;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Registering %{public}s session %{public}s with backgrounding: %{public}s, persistence: %{public}s restoreID: %{public}@",  __p,  0x34u);
        if (v66 < 0) {
          operator delete(v65[0]);
        }
      }

      if (!sub_10027B860((uint64_t)v63, v19, v15, a6, v45))
      {
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_10088BCA0);
        }
        uint64_t v52 = sub_10027BC04((uint64_t)off_1008D67C0, v19, a6);
        uint64_t v53 = v52;
        if (v52)
        {
          objc_storeStrong((id *)(v53 + 88), obj);
          objc_storeStrong((id *)(v53 + 96), v59);
          if (*(void *)(v53 + 96)) {
            v63[178] = 1;
          }
          *(_BYTE *)(v53 + 2_Block_object_dispose(va, 8) = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v62 + 56LL))(v62, v19) != 32;
          *(_BYTE *)(v53 + 27) = BYTE2(a10) & 1;
          *(_BYTE *)(v53 + 36) = BYTE3(a10) & 1;
          *(_BYTE *)(v53 + 37) = BYTE4(a10) & 1;
        }

        uint64_t v54 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(v19, (uint64_t)v65);
          uint64_t v55 = v66 >= 0 ? v65 : (void **)v65[0];
          int v56 = v63[179];
          *(_DWORD *)std::stringbuf::string_type __p = 136446978;
          *(void *)&__p[4] = v55;
          __int16 v70 = 1024;
          *(_DWORD *)char v71 = BYTE3(a10) & 1;
          *(_WORD *)&v71[4] = 1024;
          *(_DWORD *)&v71[6] = BYTE4(a10) & 1;
          LOWORD(v72) = 1024;
          *(_DWORD *)((char *)&v72 + 2) = v56;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s : needsRestrictedStateOperation = %d, overrideRestrictedState = %d , denylistMode = %d",  __p,  0x1Eu);
          if (v66 < 0) {
            operator delete(v65[0]);
          }
        }

        if ((a10 & 0x1000000) != 0)
        {
          if (qword_1008D6788 != -1) {
            dispatch_once(&qword_1008D6788, &stru_10088BAC0);
          }
          if (sub_1002075B4((uint64_t)off_1008D6780) == 1)
          {
            *a9 = v63[179];
            *a8 = 1;
            goto LABEL_127;
          }
        }

        if ((a10 & 0x100000000LL) != 0 || !v63[179])
        {
          if (qword_1008D6788 != -1) {
            dispatch_once(&qword_1008D6788, &stru_10088BAC0);
          }
          *a8 = sub_1002075B4((uint64_t)off_1008D6780);
          goto LABEL_127;
        }

void sub_10027CADC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_10027CB3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v1 + 232);
  uint64_t v2 = (void *)(v1 + 232);
  int v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  unint64_t v5 = *(void *)(a1 + 40);
  id v6 = v2;
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      id v6 = v3;
    }
    int v3 = (void *)*v9;
  }

  while (*v9);
  if (v6 != v2 && v5 >= v6[4])
  {
    sub_10038F728(*(void **)(a1 + 48));
  }

  else
  {
LABEL_12:
    BOOL v10 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Dropping enqueued messages as session has been terminated",  (uint8_t *)v11,  2u);
    }
  }

uint64_t sub_10027CBF8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10027BC04(a1, a2, 0);
  if (!v5) {
    return 1LL;
  }
  uint64_t v6 = v5;
  unint64_t v7 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    sub_100494958(a2, (uint64_t)__p);
    if (v11 >= 0) {
      BOOL v8 = __p;
    }
    else {
      BOOL v8 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136446210;
    __int16 v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set session %{public}s needs private mode",  buf,  0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32LL))(v6, a3);
  return 0LL;
}

void sub_10027CD0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088BB80);
  }
  BOOL v4 = sub_1005D4C80((uint64_t)off_1008D5F28, v3);
  BOOL v5 = v4;
  uint64_t v6 = *(void **)(a1 + 224);
  unint64_t v7 = (void *)(a1 + 232);
  if (v6 == (void *)(a1 + 232))
  {
    if (!v4) {
      goto LABEL_27;
    }
    BOOL v17 = 0LL;
    goto LABEL_21;
  }

  __int16 v8 = 0;
  __int16 v9 = 0;
  do
  {
    BOOL v10 = (id *)v6[5];
    if (!(*((unsigned int (**)(id *))*v10 + 2))(v10))
    {
      char v11 = (void *)objc_claimAutoreleasedReturnValue([v10[27] objectForKey:v3]);

      if (v11)
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v10[27] objectForKeyedSubscript:v3]);
        unsigned __int16 v13 = (unsigned __int16)[v12 enableAutoReconnect];
        v9 += v13;
        v8 += v13 ^ 1;
      }
    }

    __int16 v14 = (void *)v6[1];
    if (v14)
    {
      do
      {
        id v15 = v14;
        __int16 v14 = (void *)*v14;
      }

      while (v14);
    }

    else
    {
      do
      {
        id v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        uint64_t v6 = v15;
      }

      while (!v16);
    }

    uint64_t v6 = v15;
  }

  while (v15 != v7);
  if (v8) {
    BOOL v17 = 0LL;
  }
  else {
    BOOL v17 = v9 != 0;
  }
  if (v5 != v17)
  {
LABEL_21:
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10088BB00);
    }
    uint64_t v18 = off_1008D5F08;
    sub_100241F90(v19, v3);
    if (!sub_1005A1B10((uint64_t)v18, v19, v17 ^ 1, v17, 255, 0, 0LL))
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10088BB80);
      }
      sub_1005D4B4C((uint64_t)off_1008D5F28, v3, v17);
    }
  }

void sub_10027CF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10027CF60(uint64_t a1, void *a2)
{
  uint64_t v2 = sub_10028CCE0(a1, a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = sub_10028D0D4((uint64_t)v3, v3);
  BOOL v5 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136446210;
    __int16 v8 = sub_10028D0AC(v4);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "combinedLatencyForDevice returning %{public}s",  (uint8_t *)&v7,  0xCu);
  }

  return v4;
}

void sub_10027D02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10027D044(uint64_t a1, unint64_t a2)
{
  if (sub_10027BC04(a1, a2, 0))
  {
    if (qword_1008D6618 != -1) {
      dispatch_once(&qword_1008D6618, &stru_10088BD20);
    }
    sub_100504EB0(qword_1008D6610, a2);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_100665C4C();
  }

void sub_10027D0D4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10027BC04(a1, a2, 1u);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_10039C970(v4, a2);
    if (*(_BYTE *)(v5 + 24))
    {
      if (*(void *)(v5 + 96)) {
        sub_10027D37C(a1);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_100665C78();
  }

void sub_10027D160(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 232);
  id v3 = (void *)(a1 + 232);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_36;
  }
  uint64_t v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      __int16 v9 = v4;
    }
    else {
      __int16 v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }

  while (*v9);
  if (v6 != v3 && v6[4] <= a2)
  {
    int v10 = (*(uint64_t (**)(void))(*(void *)v6[5] + 16LL))(v6[5]);
    uint64_t v11 = v6[5];
    if (v10 == 3)
    {
      if (v11 && *(void *)(v11 + 224))
      {
        if (qword_1008D67A8 != -1) {
          dispatch_once(&qword_1008D67A8, &stru_10088BC20);
        }
        sub_1005294E8(off_1008D67A0, *(void *)(v11 + 224));
        *(void *)(v11 + sub_1002949E4(v1 + 224) = 0LL;
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
      {
        sub_100665D1C();
      }
    }

    else if (*(_DWORD *)(v11 + 32))
    {
      id v12 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(a2, (uint64_t)__p);
        if (v15 >= 0) {
          unsigned __int16 v13 = __p;
        }
        else {
          unsigned __int16 v13 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 136446210;
        BOOL v17 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Unregistering pairing agent for session %{public}s",  buf,  0xCu);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v11 = v6[5];
      }

      *(_DWORD *)(v11 + sub_100242E28(v1 + 32) = 0;
      if (qword_1008D5F20 != -1) {
        dispatch_once(&qword_1008D5F20, &stru_10088BB60);
      }
      sub_100623F78(qword_1008D5F18, a2);
    }
  }

  else
  {
LABEL_36:
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_FAULT)) {
      sub_100665CA4(a2);
    }
  }

void sub_10027D37C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 178))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v5 = *(void **)(a1 + 224);
    if (v5 != (void *)(a1 + 232))
    {
      do
      {
        int v6 = (*(uint64_t (**)(void))(*(void *)v5[5] + 16LL))(v5[5]);
        uint64_t v7 = v5[5];
        if (v6)
        {
          if ((*(unsigned int (**)(void))(*(void *)v7 + 16LL))(v5[5]) == 1)
          {
            BOOL v8 = (void *)v5[5];
            if (*((_BYTE *)v8 + 24))
            {
              if (v8[12] && (*(unsigned int (**)(void))(*v8 + 40LL))(v5[5]))
              {
                uint64_t v9 = (*(uint64_t (**)(void *))(*v8 + 48LL))(v8);
                int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
                if (v10)
                {
                  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ - %@",  v8[11],  v8[12]));
                  [v4 setObject:v10 forKey:v11];
                  goto LABEL_15;
                }

                goto LABEL_16;
              }
            }
          }
        }

        else if (*(_BYTE *)(v7 + 24) {
               && *(void *)(v7 + 96)
        }
               && (*(unsigned int (**)(void))(*(void *)v7 + 40LL))(v5[5]))
        {
          uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48LL))(v7);
          int v10 = (void *)objc_claimAutoreleasedReturnValue(v12);
          if (v10)
          {
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ - %@",  *(void *)(v7 + 88),  *(void *)(v7 + 96)));
            [v3 setObject:v10 forKey:v11];
LABEL_15:
          }

void sub_10027D710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10027D798(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  uint64_t v2 = (void *)(a1 + 232);
  id v3 = v4;
  if (!v4) {
    return 1LL;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v3;
    }
    else {
      BOOL v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    id v3 = (void *)*v8;
  }

  while (*v8);
  if (v5 != v2 && v5[4] <= a2) {
    return *(unsigned __int8 *)(v5[5] + 129LL);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_10027D7E8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  uint64_t v2 = (void *)(a1 + 232);
  id v3 = v4;
  if (!v4) {
    return 4LL;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v3;
    }
    else {
      BOOL v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    id v3 = (void *)*v8;
  }

  while (*v8);
  if (v5 != v2 && v5[4] <= a2) {
    return (*(uint64_t (**)(void))(*(void *)v5[5] + 16LL))(v5[5]);
  }
  else {
    return 4LL;
  }
}

uint64_t sub_10027D83C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = *(void **)(a1 + 224);
  BOOL v8 = (void *)(a1 + 232);
  if (v7 == v8)
  {
LABEL_10:
    uint64_t v13 = 0LL;
  }

  else
  {
    while (1)
    {
      uint64_t v9 = v7[5];
      if ([*(id *)(v9 + 88) isEqualToString:v5])
      {
      }

      int v10 = (void *)v7[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          int v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v11 = (void *)v7[2];
          BOOL v12 = *v11 == (void)v7;
          BOOL v7 = v11;
        }

        while (!v12);
      }

      BOOL v7 = v11;
      if (v11 == v8) {
        goto LABEL_10;
      }
    }

    uint64_t v13 = 1LL;
  }

  return v13;
}

void sub_10027D900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10027D914(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  uint64_t v2 = (void *)(a1 + 232);
  id v3 = v4;
  if (!v4) {
    return 0LL;
  }
  id v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v3;
    }
    else {
      BOOL v8 = v3 + 1;
    }
    if (v7) {
      id v5 = v3;
    }
    id v3 = (void *)*v8;
  }

  while (*v8);
  return v5 != v2 && v5[4] <= a2 && *(_BYTE *)(v5[5] + 24LL) != 0;
}

BOOL sub_10027D96C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 232);
  uint64_t v2 = (void *)(a1 + 232);
  id v3 = v4;
  if (!v4) {
    return 0LL;
  }
  id v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v3;
    }
    else {
      BOOL v8 = v3 + 1;
    }
    if (v7) {
      id v5 = v3;
    }
    id v3 = (void *)*v8;
  }

  while (*v8);
  return v5 != v2 && v5[4] <= a2 && *(_BYTE *)(v5[5] + 25LL) != 0;
}

id sub_10027D9C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v5 = *(void **)(a1 + 224);
  unint64_t v6 = (void *)(a1 + 232);
  if (v5 != (void *)(a1 + 232))
  {
    do
    {
      int v7 = (*(uint64_t (**)(void))(*(void *)v5[5] + 16LL))(v5[5]);
      BOOL v8 = (void *)v5[5];
      if (v7)
      {
        if ((*(unsigned int (**)(void))(*v8 + 16LL))(v5[5]) == 1)
        {
          BOOL v8 = (void *)v5[5];
          if (sub_10039F35C((uint64_t)v8, (uint64_t)v3)) {
LABEL_7:
          }
            [v4 addObject:v8[11]];
        }
      }

      else if (sub_100396BBC(v5[5], (uint64_t)v3))
      {
        goto LABEL_7;
      }

      uint64_t v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          uint64_t v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          int v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          id v5 = v10;
        }

        while (!v11);
      }

      id v5 = v10;
    }

    while (v10 != v6);
  }

  return v4;
}

void sub_10027DACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10027DAF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 224);
  id v5 = (void *)(a1 + 232);
  if (v4 == v5)
  {
LABEL_12:
    uint64_t v10 = 0LL;
  }

  else
  {
    while (1)
    {
      unint64_t v6 = (_BYTE *)v4[5];
      if (v6[28])
      {
        if (!(*(unsigned int (**)(_BYTE *))(*(void *)v6 + 16LL))(v6)
          && [*(id *)(v4[5] + 88) localizedStandardContainsString:v3]
          && *(_DWORD *)(v4[5] + 344LL))
        {
          break;
        }
      }

      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          int v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
      if (v8 == v5) {
        goto LABEL_12;
      }
    }

    uint64_t v10 = 1LL;
  }

  return v10;
}

void sub_10027DBB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10027DBC4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10027BC04(a1, a2, 2u);
  if (!v4 && os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_FAULT)) {
    sub_100665D94();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16LL))(v4))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16LL))(v4) != 3)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16LL))(v4) == 1)
      {
        id v5 = (os_log_s *)qword_1008F7680;
        if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(a2, (uint64_t)__p);
          unint64_t v6 = (SBYTE7(v76) & 0x80u) == 0 ? __p : (void **)__p[0];
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Resurrecting Peripheral session: %{public}s",  (uint8_t *)&buf,  0xCu);
          if (SBYTE7(v76) < 0) {
            operator delete(__p[0]);
          }
        }

        id v64 = 0LL;
        __int16 v65 = 0LL;
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_10088BCA0);
        }
        sub_10027E690((uint64_t)off_1008D67C0, a2, &v64);
        __int128 buf = 0uLL;
        uint64_t v84 = 0LL;
        char v66 = 0LL;
        unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v67 = 0LL;
        unint64_t v68 = 0LL;
        sub_10027E714(a1, a2, (void **)&buf, (uint64_t *)&v66);
        uint64_t v79 = 0LL;
        __int128 v77 = 0u;
        *(_OWORD *)__int16 v78 = 0u;
        *(_OWORD *)std::stringbuf::string_type __p = 0u;
        __int128 v76 = 0u;
        uuid_clear(uu);
        uint64_t v55 = 0LL;
        __uuid_t dst = 0LL;
        uint64_t v57 = 0LL;
        int v7 = (const void *)buf;
        int64_t v8 = *((void *)&buf + 1) - buf;
        if (*((void *)&buf + 1) != (void)buf)
        {
          sub_10023DBC8(&v55, v8 >> 3);
          BOOL v9 = (char *)__dst;
          memmove(__dst, v7, v8);
          __uuid_t dst = &v9[8 * (v8 >> 3)];
        }

        uint64_t v52 = 0LL;
        uint64_t v53 = 0LL;
        uint64_t v54 = 0LL;
        sub_100291B30(&v52, (uint64_t)v66, (uint64_t)v67, 0x8E38E38E38E38E39LL * ((v67 - (_BYTE *)v66) >> 1));
        sub_100291680((uint64_t)__p, uu, 0, (uint64_t)&v55, (uint64_t *)&v52);
        if (v52)
        {
          uint64_t v53 = v52;
          operator delete(v52);
        }

        uint64_t v10 = v55;
        if (v55)
        {
          __uuid_t dst = v55;
          operator delete(v55);
        }

        sub_100278B78((uint64_t)v10, v4, a2, 10LL, 0LL);
        (*(void (**)(void, void **, uint64_t (***)()))(**(void **)(v4 + 120) + 256LL))( *(void *)(v4 + 120),  __p,  &v64);
        if (v78[0])
        {
          v78[1] = v78[0];
          operator delete(v78[0]);
        }

        if (*((void *)&v76 + 1))
        {
          *(void *)&__int128 v77 = *((void *)&v76 + 1);
          operator delete(*((void **)&v76 + 1));
        }

        if (v66)
        {
          unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v67 = (unsigned __int8 *)v66;
          operator delete(v66);
        }

        if ((void)buf)
        {
          *((void *)&buf + 1) = buf;
          operator delete((void *)buf);
        }

        id v64 = &off_10087FAE8;
        if (v65) {
          sub_1002CD254(v65);
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(a2, (uint64_t)__p);
        sub_100665D48();
      }
    }
  }

  else
  {
    BOOL v11 = (os_log_s *)qword_1008F7680;
    if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(a2, (uint64_t)__p);
      BOOL v12 = (SBYTE7(v76) & 0x80u) == 0 ? __p : (void **)__p[0];
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Resurrecting Central session: %{public}s",  (uint8_t *)&buf,  0xCu);
      if (SBYTE7(v76) < 0) {
        operator delete(__p[0]);
      }
    }

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10088BCA0);
    }
    int v48 = sub_10027E5DC((uint64_t)off_1008D67C0, a2);
    unint64_t v51 = a2;
    __p[0] = 0LL;
    __p[1] = 0LL;
    *(void *)&__int128 v76 = 0LL;
    __int128 v69 = 0u;
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    uint64_t v47 = v4;
    obuint64_t j = *(id *)(v4 + 304);
    id v13 = [obj countByEnumeratingWithState:&v69 objects:v85 count:16];
    if (v13)
    {
      uint64_t v50 = *(void *)v70;
      do
      {
        __int16 v14 = 0LL;
        do
        {
          if (*(void *)v70 != v50) {
            objc_enumerationMutation(obj);
          }
          BOOL v15 = *(void **)(*((void *)&v69 + 1) + 8LL * (void)v14);
          if (qword_1008D5F10 != -1) {
            dispatch_once(&qword_1008D5F10, &stru_10088BB00);
          }
          id v16 = off_1008D5F08;
          sub_100241F90(&buf, v15);
          char v17 = sub_100595874((uint64_t)v16, (unsigned __int8 *)&buf);
          __int128 buf = 0uLL;
          uint64_t v84 = 0LL;
          if (qword_1008D5F60 != -1) {
            dispatch_once(&qword_1008D5F60, &stru_10088BAE0);
          }
          sub_10055561C(qword_1008D5F58, v15, (char **)&buf);
          char v66 = 0LL;
          unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v67 = 0LL;
          unint64_t v68 = 0LL;
          if (qword_1008D5F60 != -1) {
            dispatch_once(&qword_1008D5F60, &stru_10088BAE0);
          }
          sub_100555AAC(qword_1008D5F58, v51, v15, (char **)&v64);
          id v19 = (unsigned int *)v64;
          BOOL v18 = v65;
          if (v64 != (uint64_t (**)())v65)
          {
            do
            {
              __int16 v20 = *(_WORD *)v19;
              id v21 = v15;
              sub_100241F90(src, v21);
              __int16 v82 = v20;
              unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v22 = v67;
              if ((unint64_t)v67 >= v68)
              {
                __int128 v23 = (unsigned __int8 *)sub_10029231C((uint64_t *)&v66, (uint64_t)src);
              }

              else
              {
                uuid_copy(v67, src);
                *((_WORD *)v22 + _Block_object_dispose(va, 8) = v82;
                __int128 v23 = v22 + 18;
              }

              unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v67 = v23;

              id v19 = (unsigned int *)((char *)v19 + 2);
            }

            while (v19 != v18);
            id v19 = (unsigned int *)v64;
          }

          if (v19)
          {
            __int16 v65 = v19;
            operator delete(v19);
          }

          id v24 = operator new(0x48uLL);
          sub_100241F90(v80, v15);
          uint64_t v61 = 0LL;
          uint64_t v62 = 0LL;
          uint64_t v63 = 0LL;
          __int128 v25 = (const void *)buf;
          int64_t v26 = *((void *)&buf + 1) - buf;
          if (*((void *)&buf + 1) != (void)buf)
          {
            sub_10023DBC8(&v61, v26 >> 3);
            id v27 = (char *)v62;
            memmove(v62, v25, v26);
            uint64_t v62 = &v27[8 * (v26 >> 3)];
          }

          __int16 v58 = 0LL;
          id v59 = 0LL;
          uint64_t v60 = 0LL;
          sub_100291B30(&v58, (uint64_t)v66, (uint64_t)v67, 0x8E38E38E38E38E39LL * ((v67 - (_BYTE *)v66) >> 1));
          sub_100291680((uint64_t)v24, v80, v17, (uint64_t)&v61, (uint64_t *)&v58);
          if (v58)
          {
            id v59 = v58;
            operator delete(v58);
          }

          if (v61)
          {
            uint64_t v62 = v61;
            operator delete(v61);
          }

          __int128 v28 = (char *)__p[1];
          if (__p[1] >= (void *)v76)
          {
            int64_t v30 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            unint64_t v31 = (uint64_t)(v76 - (unint64_t)__p[0]) >> 2;
            if (v31 <= v30 + 1) {
              unint64_t v31 = v30 + 1;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32) {
              int v33 = (char *)sub_100008BA0((uint64_t)&v76, v32);
            }
            else {
              int v33 = 0LL;
            }
            id v34 = &v33[8 * v30];
            *(void *)id v34 = v24;
            uint64_t v29 = v34 + 8;
            __int128 v36 = (char *)__p[0];
            uint64_t v35 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                uint64_t v37 = *((void *)v35 - 1);
                v35 -= 8;
                *((void *)v34 - 1) = v37;
                v34 -= 8;
              }

              while (v35 != v36);
              uint64_t v35 = (char *)__p[0];
            }

            __p[0] = v34;
            __p[1] = v29;
            *(void *)&__int128 v76 = &v33[8 * v32];
            if (v35) {
              operator delete(v35);
            }
          }

          else
          {
            *(void *)__p[1] = v24;
            uint64_t v29 = v28 + 8;
          }

          __p[1] = v29;
          if (v66)
          {
            unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v67 = (unsigned __int8 *)v66;
            operator delete(v66);
          }

          if ((void)buf)
          {
            *((void *)&buf + 1) = buf;
            operator delete((void *)buf);
          }

          __int16 v14 = (char *)v14 + 1;
        }

        while (v14 != v13);
        id v13 = [obj countByEnumeratingWithState:&v69 objects:v85 count:16];
      }

      while (v13);
    }

    sub_100278B78(v38, v47, v51, 10LL, 1LL);
    (*(void (**)(void, void **, void *))(**(void **)(v47 + 120) + 248LL))( *(void *)(v47 + 120),  __p,  v48);
    uint64_t v39 = (char *)__p[0];
    uint64_t v40 = (char *)__p[1];
    while (v39 != v40)
    {
      std::locale v41 = *(void **)v39;
      int v42 = *(void **)(*(void *)v39 + 24LL);
      uint64_t v43 = *(void **)(*(void *)v39 + 32LL);
      if (v42 == v43) {
        goto LABEL_93;
      }
      do
      {
        if (*v42) {
          (*(void (**)(void))(*(void *)*v42 + 8LL))(*v42);
        }
        ++v42;
      }

      while (v42 != v43);
      std::locale v41 = *(void **)v39;
      if (*(void *)v39)
      {
LABEL_93:
        id v44 = (void *)v41[6];
        if (v44)
        {
          v41[7] = v44;
          operator delete(v44);
        }

        int v45 = (void *)v41[3];
        if (v45)
        {
          v41[4] = v45;
          operator delete(v45);
        }

        operator delete(v41);
      }

      v39 += 8;
    }

    if (v48)
    {
      int v46 = (void *)sub_10004FD94((uint64_t)v48);
      operator delete(v46);
    }

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  char v66 = v73;
  sub_100292254((void ***)&v66);
}

void sub_10027E454( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char *a47, uint64_t a48)
{
  a47 = &a42;
  sub_100292254((void ***)&a47);
  _Unwind_Resume(a1);
}

void *sub_10027E5DC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_10027BC04(a1, a2, 0);
  if (!v3 || !*(_BYTE *)(v3 + 272)) {
    return 0LL;
  }
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10088BB20);
  }
  return sub_1005F5028((uint64_t)off_1008D6600, a2);
}

void *sub_10027E650(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_10027E690@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_10027BC04(a1, a2, 1u);
  if (result && *(_BYTE *)(result + 226))
  {
    if (qword_1008D6288 != -1) {
      dispatch_once(&qword_1008D6288, &stru_10088BBE0);
    }
    return sub_1005763D0((uint64_t)off_1008D6280, a2, a3);
  }

  else
  {
    *a3 = &off_10087FAE8;
    a3[1] = 0LL;
  }

  return result;
}

void sub_10027E714(uint64_t a1, unint64_t a2, void **a3, uint64_t *a4)
{
  uint64_t v6 = sub_10027BC04(a1, a2, 1u);
  if (v6)
  {
    int v7 = *(unsigned __int16 *)(v6 + 224);
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    obuint64_t j = *(id *)(v6 + 216);
    id v8 = [obj countByEnumeratingWithState:&v36 objects:v42 count:16];
    if (!v8) {
      goto LABEL_36;
    }
    int v9 = v7 << 16;
    uint64_t v10 = *(void *)v37;
    while (1)
    {
      BOOL v11 = 0LL;
      do
      {
        if (*(void *)v37 != v10) {
          objc_enumerationMutation(obj);
        }
        BOOL v12 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)v11);
        uint64_t v33 = 0LL;
        uint64_t v34 = 0LL;
        uint64_t v35 = 0LL;
        unsigned int v13 = [v12 unsignedShortValue];
        if (qword_1008D9268 != -1) {
          dispatch_once(&qword_1008D9268, &stru_10088BB40);
        }
        *(_DWORD *)uuid_t dst = v9 | v13;
        uint64_t v14 = sub_100385F70(qword_1008D9260, (int *)dst, &v33);
        uint64_t v15 = v14;
        if (!v14) {
          goto LABEL_31;
        }
        char v17 = (uint64_t *)a3[1];
        unint64_t v16 = (unint64_t)a3[2];
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v19 = ((char *)v17 - (_BYTE *)*a3) >> 3;
          uint64_t v20 = v16 - (void)*a3;
          uint64_t v21 = v20 >> 2;
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            __int128 v23 = (char *)sub_100008BA0((uint64_t)(a3 + 2), v22);
          }
          else {
            __int128 v23 = 0LL;
          }
          id v24 = (uint64_t *)&v23[8 * v19];
          uint64_t *v24 = v15;
          BOOL v18 = v24 + 1;
          int64_t v26 = (char *)*a3;
          __int128 v25 = (char *)a3[1];
          if (v25 != *a3)
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *--id v24 = v27;
            }

            while (v25 != v26);
            __int128 v25 = (char *)*a3;
          }

          *a3 = v24;
          a3[1] = v18;
          a3[2] = &v23[8 * v22];
          if (v25) {
            operator delete(v25);
          }
        }

        else
        {
          *char v17 = v14;
          BOOL v18 = v17 + 1;
        }

        a3[1] = v18;
        uint64_t v28 = v33;
        if (v33 != v34)
        {
          do
          {
            int v29 = *(_DWORD *)(v28 + 16);
            uuid_copy(dst, (const unsigned __int8 *)v28);
            __int16 v41 = v29 & 0x7FFF;
            unint64_t v30 = a4[1];
            if (v30 >= a4[2])
            {
              uint64_t v31 = sub_10029231C(a4, (uint64_t)dst);
            }

            else
            {
              uuid_copy((unsigned __int8 *)a4[1], dst);
              *(_WORD *)(v30 + 16) = v41;
              uint64_t v31 = v30 + 18;
              a4[1] = v30 + 18;
            }

            a4[1] = v31;
            v28 += 20LL;
          }

          while (v28 != v34);
LABEL_31:
          uint64_t v28 = v33;
        }

        if (v28)
        {
          uint64_t v34 = v28;
          operator delete((void *)v28);
        }

        BOOL v11 = (char *)v11 + 1;
      }

      while (v11 != v8);
      id v8 = [obj countByEnumeratingWithState:&v36 objects:v42 count:16];
      if (!v8)
      {
LABEL_36:

        return;
      }
    }
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
    sub_100665DC0();
  }
}

void sub_10027E9EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
}

void sub_10027EA44(uint64_t a1, unint64_t a2)
{
}

void sub_10027EA4C(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3 = *(void **)(a1 + 232);
  if (v3)
  {
    uint64_t v7 = a1 + 232;
    do
    {
      unint64_t v8 = v3[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = v3;
      }
      else {
        uint64_t v10 = v3 + 1;
      }
      if (v9) {
        uint64_t v7 = (uint64_t)v3;
      }
      uint64_t v3 = (void *)*v10;
    }

    while (*v10);
    if (v7 != a1 + 232)
    {
      unint64_t v11 = *(void *)(v7 + 32);
      if (v11 <= a2)
      {
        BOOL v12 = (void *)sub_10027BC04(a1, v11, 2u);
        if (!v12 && os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_FAULT)) {
          sub_100665DEC();
        }
        char v27 = 0;
        uint64_t v13 = sub_1002E6E00();
        sub_10002418C(buf, "LE");
        sub_10002418C(__p, "PersistUserKilledApplications");
        (*(void (**)(uint64_t, _BYTE *, _BYTE *, char *))(*(void *)v13 + 72LL))(v13, buf, __p, &v27);
        if (v31 < 0) {
          operator delete(*(void **)__p);
        }
        if (v33 < 0) {
          operator delete(*(void **)buf);
        }
        if (a3 && (a3 != 1 || !v27)) {
          goto LABEL_58;
        }
        char v14 = (*(uint64_t (**)(void *))(*v12 + 40LL))(v12);
        if ((v14 & 1) != 0)
        {
          uint64_t v15 = (os_log_s *)qword_1008F7680;
          if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
          {
            sub_100494958(a2, (uint64_t)buf);
            unint64_t v16 = v33 >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)std::stringbuf::string_type __p = 136446466;
            *(void *)&__p[4] = v16;
            __int16 v29 = 1024;
            int v30 = a3;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s will be persisted, as it was performing long-term action.  Kill reason %d",  __p,  0x12u);
            if (v33 < 0) {
              operator delete(*(void **)buf);
            }
          }

          if (qword_1008D6608 != -1) {
            dispatch_once(&qword_1008D6608, &stru_10088BB20);
          }
          (**(void (***)(void *, unint64_t, uint64_t))off_1008D6600)(off_1008D6600, a2, 2LL);
        }

        char v17 = (os_log_s *)qword_1008F7680;
        if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *(void *)(*(void *)(v7 + 40) + 88LL);
          *(_DWORD *)__int128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "appSessionTerminated:{isAlive: false, bundleId: %{public}@}",  buf,  0xCu);
        }

        uint64_t v19 = sub_1002E8E64();
        (*(void (**)(uint64_t, void, void))(*(void *)v19 + 72LL))( v19,  *(void *)(*(void *)(v7 + 40) + 88LL),  0LL);
        if ((v14 & 1) == 0)
        {
LABEL_58:
          if ((*(unsigned int (**)(void *))(*v12 + 40LL))(v12))
          {
            uint64_t v20 = (os_log_s *)qword_1008F7680;
            if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
            {
              sub_100494958(a2, (uint64_t)buf);
              uint64_t v21 = v33 >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)std::stringbuf::string_type __p = 136446466;
              *(void *)&__p[4] = v21;
              __int16 v29 = 1024;
              int v30 = a3;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Removing restorable session %{public}s due to termination reason %d",  __p,  0x12u);
              if (v33 < 0) {
                operator delete(*(void **)buf);
              }
            }
          }

          uint64_t v22 = v12[15];
          __int128 v23 = (os_log_s *)qword_1008F7680;
          BOOL v24 = os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT);
          if (v22)
          {
            if (v24)
            {
              sub_100494958(a2, (uint64_t)buf);
              if (v33 >= 0) {
                __int128 v25 = buf;
              }
              else {
                __int128 v25 = *(_BYTE **)buf;
              }
              *(_DWORD *)std::stringbuf::string_type __p = 136446210;
              *(void *)&__p[4] = v25;
              _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "skipping session %{public}s as it is still alive",  __p,  0xCu);
              if (v33 < 0) {
                operator delete(*(void **)buf);
              }
            }
          }

          else
          {
            if (v24)
            {
              sub_100494958(a2, (uint64_t)buf);
              int64_t v26 = v33 >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)std::stringbuf::string_type __p = 136446210;
              *(void *)&__p[4] = v26;
              _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "unregistering session %{public}s as it is not longer alive",  __p,  0xCu);
              if (v33 < 0) {
                operator delete(*(void **)buf);
              }
            }

            sub_100277D34(a1, a2, 1);
          }
        }
      }
    }
  }

void sub_10027EEA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10027EEE0(uint64_t a1, unint64_t a2, int a3)
{
}

void sub_10027EEE8(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = *(void **)(a1 + 232);
  uint64_t v4 = (void *)(a1 + 232);
  id v5 = v6;
  if (!v6) {
    goto LABEL_38;
  }
  unint64_t v8 = v4;
  do
  {
    unint64_t v9 = v5[4];
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      unint64_t v11 = v5;
    }
    else {
      unint64_t v11 = v5 + 1;
    }
    if (v10) {
      unint64_t v8 = v5;
    }
    id v5 = (void *)*v11;
  }

  while (*v11);
  if (v8 != v4 && v8[4] <= a2)
  {
    BOOL v12 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(a2, (uint64_t)__p);
      uint64_t v13 = (void **)__p[0];
      char v14 = "disabled";
      if (v22 >= 0) {
        uint64_t v13 = __p;
      }
      if (a3) {
        char v14 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136446466;
      BOOL v24 = v13;
      __int16 v25 = 2082;
      int64_t v26 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Registering pairing agent for session %{public}s with programmatic pairing %{public}s",  buf,  0x16u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    if ((*(unsigned int (**)(void))(*(void *)v8[5] + 16LL))(v8[5]) == 3)
    {
      uint64_t v15 = v8[5];
      if (v15)
      {
        uint64_t v17 = *(void *)(v15 + 224);
        unint64_t v16 = (unint64_t *)(v15 + 224);
        if (v17)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
            sub_100665E44();
          }
        }

        else
        {
          __p[0] = 0LL;
          if (qword_1008D67A8 != -1) {
            dispatch_once(&qword_1008D67A8, &stru_10088BC20);
          }
          uint64_t v19 = off_1008D67A0;
          unint64_t v20 = sub_100494CF8(a2);
          if (sub_1005291C0(v19, v20, __p, v16)
            && os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
          {
            sub_100665E18();
          }
        }
      }
    }

    else
    {
      if (a3) {
        int v18 = 2;
      }
      else {
        int v18 = 1;
      }
      *(_DWORD *)(v8[5] + 32LL) = v18;
    }
  }

  else
  {
LABEL_38:
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_FAULT)) {
      sub_100665CA4(a2);
    }
  }

void sub_10027F12C(uint64_t a1, unint64_t a2, void *a3, char a4)
{
  id v7 = a3;
  if (sub_10027F1D0(a1, a2))
  {
    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_10088BB60);
    }
    sub_100623998(qword_1008D5F18, a2, v7, a4);
  }
}

void sub_10027F1BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL sub_10027F1D0(uint64_t a1, unint64_t a2)
{
  id v5 = *(void **)(a1 + 232);
  uint64_t v3 = (void *)(a1 + 232);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }

  while (*v9);
  if (v6 == v3 || v6[4] > a2)
  {
LABEL_12:
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100665CA4(a2);
    return 0LL;
  }

  if (*(_DWORD *)(v6[5] + 32LL) == 2) {
    return 1LL;
  }
  unint64_t v11 = (os_log_s *)qword_1008F7628;
  BOOL result = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_100665E70(a2, v11);
    return 0LL;
  }

  return result;
}

_OWORD *sub_10027F29C(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  if (sub_10027F1D0(a1, a2))
  {
    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_10088BB60);
    }
    uint64_t v6 = sub_100623670(qword_1008D5F18, a2, v5);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

void sub_10027F32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10027F33C(uint64_t a1, unint64_t a2, void *a3, int a4, unsigned int a5)
{
  id v9 = a3;
  if (sub_10027F1D0(a1, a2))
  {
    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_10088BB60);
    }
    sub_100622D00(qword_1008D5F18, v9, a4, a5);
  }
}

void sub_10027F3D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10027F3E4(uint64_t a1, unint64_t a2, void *a3, int a4, uint64_t a5)
{
  id v9 = a3;
  if (sub_10027F1D0(a1, a2))
  {
    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_10088BB60);
    }
    sub_100623058(qword_1008D5F18, a2, v9, a4, a5);
  }
}

void sub_10027F47C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10027F490(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10088BB60);
  }
  sub_100621334(qword_1008D5F18, a2, a3);
}

uint64_t sub_10027F4E8(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10088BB60);
  }
  return sub_10062AC58(qword_1008D5F18, a2);
}

uint64_t sub_10027F538(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10027BC04(a1, a2, 0);
  if (!v6) {
    return 12LL;
  }
  uint64_t v7 = v6;
  uint64_t result = sub_1003902A8(v6, a2, a3);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v7 + 24))
    {
      if (*(void *)(v7 + 96)) {
        sub_10027D37C(a1);
      }
    }

    return 0LL;
  }

  return result;
}

void sub_10027F5B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10027BC04(a1, a2, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_1003909B4(v4, a2);
    if (qword_1008D6618 != -1) {
      dispatch_once(&qword_1008D6618, &stru_10088BD20);
    }
    sub_100504EB0(qword_1008D6610, a2);
    uint64_t v6 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(v5 + 88);
      uint64_t v8 = *(void *)(v5 + 336);
      int v9 = 138543618;
      uint64_t v10 = v7;
      __int16 v11 = 2048;
      uint64_t v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Stopping scan for session %{public}@ - %llu advertisements delivered",  (uint8_t *)&v9,  0x16u);
    }

    if (*(_BYTE *)(v5 + 24))
    {
      if (*(void *)(v5 + 96)) {
        sub_10027D37C(a1);
      }
    }
  }

void sub_10027F6F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10027BC04(a1, a2, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    sub_100390A24(v5, a2, a3);
    uint64_t v7 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(v6 + 88);
      int v9 = 138543618;
      uint64_t v10 = v8;
      __int16 v11 = 1024;
      int v12 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "clearDuplicateFilterCache for session %{public}@ type %d",  (uint8_t *)&v9,  0x12u);
    }
  }

uint64_t sub_10027F7C8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (v5
    && [v5 length]
    && (uint64_t v7 = *(void **)(a1 + 224), v8 = (void *)(a1 + 232), v7 != (void *)(a1 + 232)))
  {
    unsigned __int16 v9 = 0;
    do
    {
      uint64_t v10 = v7[5];
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v10 + 16LL))(v10)
        && [*(id *)(v10 + 88) isEqualToString:v6]
        && (!a3 || *(_BYTE *)(v10 + 129) != 32))
      {
        v9 += (unsigned __int16)[*(id *)(v10 + 216) count];
      }

      __int16 v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          __int16 v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          int v12 = (void *)v7[2];
          BOOL v13 = *v12 == (void)v7;
          uint64_t v7 = v12;
        }

        while (!v13);
      }

      uint64_t v7 = v12;
    }

    while (v12 != v8);
  }

  else
  {
    unsigned __int16 v9 = 0;
  }

  return v9;
}

void sub_10027F8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10027F8D4(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v89 = a3;
  unint64_t v87 = a2;
  id v88 = a4;
  uint64_t v7 = sub_10027BC04(a1, a2, 2u);
  uint64_t v8 = v7;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100665EF0();
    }
    goto LABEL_167;
  }

  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16LL))(v7);
  if (v9)
  {
    if (v9 == 3)
    {
      uint64_t v10 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(v8 + 88);
        *(_DWORD *)__int128 buf = 138543618;
        *(void *)&uint8_t buf[4] = v89;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&_BYTE buf[14] = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "UN: connectDeviceForApp for classic  %{public}@ for %{public}@",  buf,  0x16u);
      }

      sub_10039F654(v8, a2, v89, v88);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
    {
      sub_100665F1C();
    }

    goto LABEL_167;
  }

  sub_100242AE0(17LL, a2, v89);
  int v12 = *(void **)(a1 + 224);
  __int128 v90 = (void *)(a1 + 232);
  uint64_t v85 = a1;
  uint64_t v86 = v8;
  unsigned int v13 = 0;
  if (v12 != (void *)(a1 + 232))
  {
    do
    {
      char v14 = (id *)v12[5];
      if (!(*((unsigned int (**)(id *))*v14 + 2))(v14)
        && [v14[11] isEqualToString:*(void *)(v8 + 88)])
      {
        __int128 v96 = 0u;
        __int128 v97 = 0u;
        __int128 v94 = 0u;
        __int128 v95 = 0u;
        id v15 = v14[27];
        id v16 = [v15 countByEnumeratingWithState:&v94 objects:v109 count:16];
        if (v16)
        {
          uint64_t v17 = *(void *)v95;
          do
          {
            int v18 = 0LL;
            do
            {
              if (*(void *)v95 != v17) {
                objc_enumerationMutation(v15);
              }
              uint64_t v19 = *(void *)(*((void *)&v94 + 1) + 8LL * (void)v18);
              if (qword_1008D5F10 != -1) {
                dispatch_once(&qword_1008D5F10, &stru_10088BB00);
              }
              unint64_t v20 = off_1008D5F08;
              sub_100241F90(buf, v19);
              v13 += sub_100592970(v20, buf);
              int v18 = (char *)v18 + 1;
            }

            while (v16 != v18);
            id v16 = [v15 countByEnumeratingWithState:&v94 objects:v109 count:16];
          }

          while (v16);
        }

        a1 = v85;
        uint64_t v8 = v86;
      }

      uint64_t v21 = (void *)v12[1];
      if (v21)
      {
        do
        {
          char v22 = v21;
          uint64_t v21 = (void *)*v21;
        }

        while (v21);
      }

      else
      {
        do
        {
          char v22 = (void *)v12[2];
          BOOL v23 = *v22 == (void)v12;
          int v12 = v22;
        }

        while (!v23);
      }

      int v12 = v22;
    }

    while (v22 != v90);
  }

  BOOL v24 = (id *)(v8 + 88);
  unsigned __int8 v25 = sub_10027F7C8(a1, *(void **)(v8 + 88), 1);
  sub_1004949D8(a2, (std::string *)buf);
  if (a1 + 280 == sub_100024098(a1 + 272, (const void **)buf))
  {
    BOOL v26 = 1;
  }

  else
  {
    sub_1004949D8(a2, &v108);
    uint64_t v98 = &v108;
    BOOL v26 = v13 + 1 > *((unsigned __int8 *)sub_1002925B8( (uint64_t **)(a1 + 272),  (const void **)&v108.__r_.__value_.__l.__data_,  (uint64_t)&unk_1006C2518,  (_OWORD **)&v98)
                    + 56);
  }

  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v26) {
      goto LABEL_40;
    }
  }

  else if (!v26)
  {
    goto LABEL_40;
  }

  sub_1004949D8(v87, (std::string *)buf);
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  *((_BYTE *)sub_1002925B8((uint64_t **)(a1 + 272), (const void **)buf, (uint64_t)&unk_1006C2518, &v108) + 56) = v13 + 1;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_40:
  if (qword_1008D92A8 != -1) {
    dispatch_once(&qword_1008D92A8, &stru_10088BD00);
  }
  if (v13 >= sub_10064BB38(qword_1008D92A0, *v24))
  {
    char v27 = (os_log_s *)qword_1008F7628;
    BOOL v28 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR);
    if (v28) {
      sub_100665FC0((uint64_t *)(v8 + 88), v27, v29);
    }
    if (*(_BYTE *)(v8 + 129) == 32)
    {
      int v30 = 345;
LABEL_122:
      sub_1002809BC(v28, v87, v8, v89, v30, v13);
      goto LABEL_167;
    }

    memset(buf, 0, 56);
    sub_10002418C(&v108, (char *)[*v24 UTF8String]);
    sub_10040CF14((uint64_t)buf, (__int128 *)&v108, *(_BYTE *)(v8 + 129), v89, v13, 345);
    if (qword_1008D9298 != -1) {
      dispatch_once(&qword_1008D9298, &stru_10088BCC0);
    }
    sub_10040D074(qword_1008D9290, (uint64_t)buf);

    if ((buf[31] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[8]);
    }
  }

  uint64_t v31 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v31 + 336LL))(v31) & 1) != 0
    || (uint64_t v32 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v32 + 344LL))(v32) & 1) != 0)
    || (uint64_t v33 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v33 + 424LL))(v33)))
  {
    if (*(_BYTE *)(v8 + 129) != 32 && !sub_10038FD4C(v8))
    {
      uint64_t v34 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(v87, (uint64_t)&v108);
        if ((v108.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v35 = &v108;
        }
        else {
          uint64_t v35 = (std::string *)v108.__r_.__value_.__r.__words[0];
        }
        id v36 = *v24;
        if (qword_1008D92A8 != -1) {
          dispatch_once(&qword_1008D92A8, &stru_10088BD00);
        }
        int v37 = sub_10064BAD0();
        *(_DWORD *)__int128 buf = 136447234;
        *(void *)&uint8_t buf[4] = v35;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&_BYTE buf[14] = v89;
        *(_WORD *)&_BYTE buf[22] = 2114;
        *(void *)&uint8_t buf[24] = v36;
        *(_WORD *)&_BYTE buf[32] = 1024;
        *(_DWORD *)&buf[34] = v25;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&uint8_t buf[40] = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s trying to connect to device %{public}@, total connections for bundleID %{public}@ = %d, max for this platform=%d",  buf,  0x2Cu);
        uint64_t v8 = v86;
      }

      if (qword_1008D92A8 != -1) {
        dispatch_once(&qword_1008D92A8, &stru_10088BD00);
      }
      if (sub_10064BAD0() <= v25)
      {
        __int16 v75 = (os_log_s *)qword_1008F7628;
        BOOL v76 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT);
        if (v76)
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Exceeded MAX connection limit", buf, 2u);
        }

        sub_1002809BC(v76, v87, v8, v89, 309, 0);
        memset(buf, 0, 24);
        sub_10002418C(buf, (char *)[*v24 UTF8String]);
        uint64_t v77 = sub_1002E9074();
        if (buf[23] >= 0) {
          __int16 v78 = buf;
        }
        else {
          __int16 v78 = *(_BYTE **)buf;
        }
        (*(void (**)(uint64_t, uint64_t, _BYTE *, id))(*(void *)v77 + 48LL))(v77, 1LL, v78, v89);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_167;
      }
    }
  }

  uint64_t v38 = sub_1002E6BF0();
  __int128 v39 = (__CFString *)objc_claimAutoreleasedReturnValue([v88 clientBundleID]);
  if ([v88 connectionUseCase] == (id)327680)
  {
    if (!v39 || (v40 = -[__CFString length](v39, "length"), id v41 = v39, !v40))
    {
      int v42 = (os_log_s *)qword_1008F7628;
      BOOL v43 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT);
      if (v43)
      {
        sub_100494958(v87, (uint64_t)&v108);
        int size = (char)v108.__r_.__value_.__s.__size_;
        int v45 = (std::string *)v108.__r_.__value_.__r.__words[0];
        int v46 = [v88 connectionUseCase];
        if (size >= 0) {
          int v45 = &v108;
        }
        uint64_t v47 = sub_100280C48(v46);
        *(_DWORD *)__int128 buf = 136446722;
        *(void *)&uint8_t buf[4] = v45;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&_BYTE buf[14] = v89;
        *(_WORD *)&_BYTE buf[22] = 2082;
        *(void *)&uint8_t buf[24] = v47;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s trying to connect to device %{public}@ without providing client bundleID for useCase %{public}s",  buf,  0x20u);
      }

      sub_1002809BC(v43, v87, v8, v89, 346, 0);
      id v48 = 0LL;
LABEL_133:

      goto LABEL_167;
    }

    goto LABEL_83;
  }

  if (*(_BYTE *)(v8 + 129) != 32)
  {
    id v41 = *v24;
LABEL_83:
    id v48 = v41;
    goto LABEL_84;
  }

  id v48 = 0LL;
LABEL_84:
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088BB00);
  }
  uint64_t v84 = v39;
  int v49 = sub_1005A18B4((uint64_t)off_1008D5F08, v48, 327680LL);
  int v50 = sub_10027F7C8(a1, v48, 1);
  if (qword_1008D92A8 != -1) {
    dispatch_once(&qword_1008D92A8, &stru_10088BD00);
  }
  unsigned int v51 = sub_10064BBA8(qword_1008D92A0);
  unsigned __int16 v52 = v50 + v49;
  uint64_t v53 = (os_log_s *)qword_1008F7628;
  int v83 = v49;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    sub_100494958(v87, (uint64_t)&v108);
    int v54 = (char)v108.__r_.__value_.__s.__size_;
    std::string::size_type v55 = v108.__r_.__value_.__r.__words[0];
    int v56 = [v88 connectionUseCase];
    if (v54 >= 0) {
      uint64_t v57 = &v108;
    }
    else {
      uint64_t v57 = (std::string *)v55;
    }
    if (v84) {
      __int16 v58 = v84;
    }
    else {
      __int16 v58 = @"none";
    }
    id v59 = sub_100280C48(v56);
    id v60 = *v24;
    int v61 = v52;
    *(_DWORD *)__int128 buf = 136448514;
    *(void *)&uint8_t buf[4] = v57;
    *(_WORD *)&_BYTE buf[12] = 2114;
    *(void *)&_BYTE buf[14] = v89;
    *(_WORD *)&_BYTE buf[22] = 2112;
    *(void *)&uint8_t buf[24] = v58;
    *(_WORD *)&_BYTE buf[32] = 2080;
    *(void *)&buf[34] = v59;
    *(_WORD *)&buf[42] = 2112;
    *(void *)&_BYTE buf[44] = v60;
    *(_WORD *)&buf[52] = 2112;
    *(void *)&buf[54] = v48;
    __int16 v100 = 1024;
    int v101 = v83;
    __int16 v102 = 1024;
    int v103 = v50;
    __int16 v104 = 1024;
    int v105 = v52;
    __int16 v106 = 1024;
    unsigned int v107 = v51;
    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s trying to connect to device %{public}@ clientBundleID %@ useCase %s session bundleID %@ thirdPa rtyBundleID %@ indirect %d direct %d all %d max %d ",  buf,  0x56u);
    uint64_t v8 = v86;
  }

  else
  {
    int v61 = (unsigned __int16)(v50 + v49);
  }

  if (v51 <= v52)
  {
    __int128 v72 = (os_log_s *)qword_1008F7628;
    BOOL v73 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT);
    if (v73)
    {
      sub_100494958(v87, (uint64_t)&v108);
      int v74 = (v108.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v108 : (std::string *)v108.__r_.__value_.__r.__words[0];
      *(_DWORD *)__int128 buf = 136447490;
      *(void *)&uint8_t buf[4] = v74;
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&_BYTE buf[14] = v89;
      *(_WORD *)&_BYTE buf[22] = 1024;
      *(_DWORD *)&uint8_t buf[24] = v61;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v83;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v50;
      *(_WORD *)&uint8_t buf[40] = 1024;
      *(_DWORD *)&buf[42] = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s trying to connect to device %{public}@ max num connections %d (indirect %d direct %d max allo wed %d) reached ",  buf,  0x2Eu);
    }

    sub_1002809BC(v73, v87, v8, v89, 347, 0);
    __int128 v39 = v84;
    goto LABEL_133;
  }

  a1 = v85;
LABEL_101:
  if ([v88 hideFromBTSettings])
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10088BB80);
    }
    sub_1005D4D10((uint64_t)off_1008D5F28, v89, (char)[v88 hideFromBTSettings]);
    uint64_t v62 = *(void **)(a1 + 224);
    if (v62 != v90)
    {
      do
      {
        uint64_t v63 = v62[4];
        id v64 = (void *)v62[5];
        if (!(*(unsigned int (**)(void *))(*v64 + 16LL))(v64))
        {
          uint64_t v65 = v64[15];
          if (v65) {
            (*(void (**)(uint64_t, uint64_t, id, void))(*(void *)v65 + 56LL))(v65, v63, v89, 0LL);
          }
        }

        char v66 = (void *)v62[1];
        if (v66)
        {
          do
          {
            unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v67 = v66;
            char v66 = (void *)*v66;
          }

          while (v66);
        }

        else
        {
          do
          {
            unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v67 = (void *)v62[2];
            BOOL v23 = *v67 == (void)v62;
            uint64_t v62 = v67;
          }

          while (!v23);
        }

        uint64_t v62 = v67;
      }

      while (v67 != v90);
    }
  }

  if (sub_100281374(a1, v87))
  {
    unint64_t v68 = (os_log_s *)qword_1008F7628;
    BOOL v28 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT);
    if (v28)
    {
      sub_100494958(v87, (uint64_t)buf);
      __int128 v69 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      int v70 = *(unsigned __int8 *)(a1 + 356);
      LODWORD(v108.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v108.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
      WORD2(v108.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v108.__r_.__value_.__r.__words[1] + 6) = v70;
      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Rejecting the custom Connection Scan for %{public}s for list type %d",  (uint8_t *)&v108,  0x12u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    unsigned int v13 = 0;
    int v30 = 343;
    goto LABEL_122;
  }

  if (*(_BYTE *)(v8 + 28))
  {
    __int128 v71 = (void *)objc_claimAutoreleasedReturnValue([*v24 lowercaseString]);
    if ([v71 hasPrefix:@"com.apple."])
    {
    }

    else
    {
      BOOL v79 = [v88 connectionUseCase] == 0;

      if (v79) {
        [v88 setConnectionUseCase:23];
      }
    }
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088BB80);
  }
  sub_1005CF688((uint64_t)off_1008D5F28, v89, [v88 initPHYs]);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088BB80);
  }
  sub_1005CF7D0((uint64_t)off_1008D5F28, v89, [v88 PHYOptions]);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088BB80);
  }
  sub_1005CF924((uint64_t)off_1008D5F28, v89, (uint64_t)[v88 enableControllerBTClockUpdates]);
  *(_BYTE *)(v8 + 184) = [v88 enableControllerBTClockUpdates];
  char v80 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v8 + 216) objectForKey:v89]);
  if (v80)
  {
    BOOL v81 = 1;
  }

  else
  {
    __int16 v82 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v8 + 224) objectForKey:v89]);
    BOOL v81 = v82 != 0LL;
  }

  sub_100391320(v8, v87, v89, v88);
  if (!v81 && *(_BYTE *)(v8 + 28))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG))
    {
      sub_100494958(v87, (uint64_t)buf);
      sub_100665F7C();
    }

    sub_1002816A0((os_unfair_lock_s *)a1, v87, v89);
    if ([v88 ancsRequired])
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10088BB80);
      }
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10088BB80);
      }
      if (sub_1005CE3A0((uint64_t)off_1008D5F28, v89))
      {
LABEL_163:
        v91[0] = _NSConcreteStackBlock;
        v91[1] = 3221225472LL;
        void v91[2] = sub_1002817F4;
        v91[3] = &unk_10088B9A8;
        uint64_t v93 = v8;
        id v92 = v89;
        sub_100281738((os_unfair_lock_s *)(a1 + 192), v91);
      }
    }
  }

  sub_10027CD0C(a1, v89);
  if (*(_BYTE *)(v8 + 24) && *(void *)(v8 + 96)) {
    sub_10027D37C(a1);
  }
LABEL_167:
}

void sub_100280850( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21)
{
}

void sub_1002809BC(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, int a5, int a6)
{
  id v10 = a4;
  sub_100242AE0(18LL, a2, v10);
  uint64_t v11 = (uint64_t)sub_100396BBC(a3, (uint64_t)v10);
  if ((v11 & 1) != 0 || (a5 - 341) <= 7 && ((1 << (a5 - 85)) & 0xF1) != 0 || a5 == 202)
  {
    sub_100278B78(v11, a3, a2, 10LL, 1LL);
    sub_100397EA4(a3, v10, a5);
    uint64_t v12 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 344LL))(v12))
    {
      unsigned int v13 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        *(double *)&uint8_t buf[4] = CFAbsoluteTimeGetCurrent() + 5.0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Adding grace period fLastGattAssertionGraceInit %f",  buf,  0xCu);
      }

      *(CFAbsoluteTime *)(a3 + 56) = CFAbsoluteTimeGetCurrent() + 5.0;
    }

    uint64_t v19 = 0LL;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    *(_OWORD *)__int128 buf = 0u;
    sub_10002418C(__p, (char *)[*(id *)(a3 + 88) UTF8String]);
    sub_10040CF14((uint64_t)buf, (__int128 *)__p, *(_BYTE *)(a3 + 129), v10, a6, a5);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (qword_1008D9298 != -1) {
      dispatch_once(&qword_1008D9298, &stru_10088BCC0);
    }
    sub_10040D074(qword_1008D9290, (uint64_t)buf);

    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)&buf[8]);
    }
  }
}

void sub_100280BC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100280C10(uint64_t a1)
{
  return a1;
}

const char *sub_100280C48(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }

        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }

      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }

            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }

            break;
        }
      }

      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }

            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }

            break;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }

          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }

          break;
      }
    }
  }

  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }

        break;
    }
  }

  return result;
}

uint64_t sub_100281374(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 356);
  if (v3 == 2)
  {
    uint64_t v21 = *(__int128 **)(a1 + 360);
    id v40 = *(__int128 **)(a1 + 368);
    if (v21 == v40) {
      return 0LL;
    }
    while (1)
    {
      __dst[1] = 0LL;
      uint64_t v45 = 0LL;
      __dst[0] = 0LL;
      if (*((char *)v21 + 23) < 0)
      {
        sub_100024238(__dst, *(void **)v21, *((void *)v21 + 1));
      }

      else
      {
        __int128 v22 = *v21;
        uint64_t v45 = *((void *)v21 + 2);
        *(_OWORD *)__uuid_t dst = v22;
      }

      sub_100494958(v2, (uint64_t)&__p);
      unsigned __int8 v23 = v43;
      BOOL v24 = __p;
      if ((v43 & 0x80u) == 0) {
        p_p = (char *)&__p;
      }
      else {
        p_p = (char *)__p;
      }
      char v26 = HIBYTE(v45);
      if (v45 >= 0) {
        char v27 = __dst;
      }
      else {
        char v27 = (void **)__dst[0];
      }
      if (v45 >= 0) {
        int64_t v28 = HIBYTE(v45);
      }
      else {
        int64_t v28 = (int64_t)__dst[1];
      }
      if (v28)
      {
        if ((v43 & 0x80u) == 0) {
          int64_t v29 = v43;
        }
        else {
          int64_t v29 = v42;
        }
        int v30 = &p_p[v29];
        if (v29 >= v28)
        {
          int v33 = *(unsigned __int8 *)v27;
          uint64_t v34 = p_p;
          do
          {
            uint64_t v35 = v29 - v28;
            if (v35 == -1) {
              break;
            }
            id v36 = (char *)memchr(v34, v33, v35 + 1);
            if (!v36) {
              break;
            }
            uint64_t v31 = v36;
            if (!memcmp(v36, v27, v28)) {
              goto LABEL_66;
            }
            uint64_t v34 = v31 + 1;
            int64_t v29 = v30 - (v31 + 1);
          }

          while (v29 >= v28);
          uint64_t v31 = v30;
LABEL_66:
          uint64_t v2 = a2;
        }

        else
        {
          uint64_t v31 = &p_p[v29];
        }

        if (v31 == v30) {
          uint64_t v32 = -1LL;
        }
        else {
          uint64_t v32 = v31 - p_p;
        }
      }

      else
      {
        uint64_t v32 = 0LL;
      }

      BOOL v20 = v32 != -1;
      if ((v23 & 0x80) != 0)
      {
        operator delete(v24);
        if ((v45 & 0x8000000000000000LL) == 0) {
          goto LABEL_72;
        }
      }

      else if ((v26 & 0x80) == 0)
      {
        goto LABEL_72;
      }

      operator delete(__dst[0]);
LABEL_72:
      if (v32 == -1)
      {
        uint64_t v21 = (__int128 *)((char *)v21 + 24);
        if (v21 != v40) {
          continue;
        }
      }

      return v20;
    }
  }

  if (v3 != 1) {
    return 0LL;
  }
  uint64_t v4 = *(__int128 **)(a1 + 360);
  __int128 v39 = *(__int128 **)(a1 + 368);
  if (v4 != v39)
  {
    while (1)
    {
      __dst[1] = 0LL;
      uint64_t v45 = 0LL;
      __dst[0] = 0LL;
      if (*((char *)v4 + 23) < 0)
      {
        sub_100024238(__dst, *(void **)v4, *((void *)v4 + 1));
      }

      else
      {
        __int128 v5 = *v4;
        uint64_t v45 = *((void *)v4 + 2);
        *(_OWORD *)__uuid_t dst = v5;
      }

      sub_100494958(v2, (uint64_t)&__p);
      unsigned __int8 v6 = v43;
      uint64_t v7 = __p;
      if ((v43 & 0x80u) == 0) {
        uint64_t v8 = (char *)&__p;
      }
      else {
        uint64_t v8 = (char *)__p;
      }
      char v9 = HIBYTE(v45);
      if (v45 >= 0) {
        id v10 = __dst;
      }
      else {
        id v10 = (void **)__dst[0];
      }
      if (v45 >= 0) {
        int64_t v11 = HIBYTE(v45);
      }
      else {
        int64_t v11 = (int64_t)__dst[1];
      }
      if (v11)
      {
        if ((v43 & 0x80u) == 0) {
          int64_t v12 = v43;
        }
        else {
          int64_t v12 = v42;
        }
        unsigned int v13 = &v8[v12];
        if (v12 >= v11)
        {
          int v16 = *(unsigned __int8 *)v10;
          __int128 v17 = v8;
          do
          {
            uint64_t v18 = v12 - v11;
            if (v18 == -1) {
              break;
            }
            uint64_t v19 = (char *)memchr(v17, v16, v18 + 1);
            if (!v19) {
              break;
            }
            char v14 = v19;
            if (!memcmp(v19, v10, v11)) {
              goto LABEL_29;
            }
            __int128 v17 = v14 + 1;
            int64_t v12 = v13 - (v14 + 1);
          }

          while (v12 >= v11);
          char v14 = v13;
LABEL_29:
          uint64_t v2 = a2;
        }

        else
        {
          char v14 = &v8[v12];
        }

        if (v14 == v13) {
          uint64_t v15 = -1LL;
        }
        else {
          uint64_t v15 = v14 - v8;
        }
      }

      else
      {
        uint64_t v15 = 0LL;
      }

      BOOL v20 = v15 == -1;
      if ((v6 & 0x80) != 0)
      {
        operator delete(v7);
        if ((v45 & 0x8000000000000000LL) == 0) {
          goto LABEL_35;
        }
      }

      else if ((v9 & 0x80) == 0)
      {
        goto LABEL_35;
      }

      operator delete(__dst[0]);
LABEL_35:
      if (v15 == -1)
      {
        uint64_t v4 = (__int128 *)((char *)v4 + 24);
        if (v4 != v39) {
          continue;
        }
      }

      return v20;
    }
  }

  return 1LL;
}

void sub_100281680( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002816A0(os_unfair_lock_s *a1, uint64_t a2, void *a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100288CD0;
  void v6[3] = &unk_10088B9A8;
  id v7 = a3;
  uint64_t v8 = a2;
  id v5 = v7;
  sub_100281738(a1 + 48, v6);
}

void sub_100281720( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100281738(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  id v5 = 0LL;
  unsigned __int8 v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    unsigned __int8 v6 = v4;
    operator delete(v4);
  }
}

void sub_1002817CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002817F4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16LL))( a2,  *(void *)(*(void *)(a1 + 40) + 88LL),  *(void *)(a1 + 32));
}

void sub_100281810(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = sub_10027BC04(a1, a2, 2u);
  if (!a2 || !v7 || (id v10 = (id *)v9) == 0LL || (*(unsigned int (**)(uint64_t))(*(void *)v9 + 16LL))(v9))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_10066602C();
    }
    goto LABEL_7;
  }

  if ([v8 connectionUseCase]
    || (int64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 useCaseList])) != 0
    && (unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v8 useCaseList]),
        id v14 = [v13 count],
        v13,
        v12,
        v14))
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10088BB00);
    }
    int64_t v11 = off_1008D5F08;
    sub_100241F90(v21, v7);
  }

  else
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v10[27] objectForKey:v7]);

    if (v15)
    {
      int v16 = (void *)objc_claimAutoreleasedReturnValue([v10[27] objectForKeyedSubscript:v7]);
      [v16 setOpportunistic:[v8 opportunistic]];
      [v10[27] removeObjectForKey:v7];
      sub_100391320((uint64_t)v10, a2, v7, v16);
      sub_100278BE4(a1);
      goto LABEL_19;
    }

    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v10[28] objectForKey:v7]);

    if (v17)
    {
      int v16 = (void *)objc_claimAutoreleasedReturnValue([v10[28] objectForKeyedSubscript:v7]);
      [v16 setOpportunistic:[v8 opportunistic]];
      [v10[28] setObject:v16 forKeyedSubscript:v7];
LABEL_19:

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v10[10] objectForKey:v7]);
      if (v18)
      {
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_10088BB00);
        }
        uint64_t v19 = off_1008D5F08;
        int v20 = sub_10027CF60(a1, v7);
        sub_100593618((uint64_t)v19, v7, v20, 0);
      }

      goto LABEL_7;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(a2, (uint64_t)v21);
      sub_100666058();
    }
  }

void sub_100281B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100281B60( os_unfair_lock_s *a1, unint64_t a2, uint64_t a3, void *a4, int a5, int a6, unsigned int a7)
{
  id v13 = a4;
  id v14 = v13;
  if (a3 && a2 && v13)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 16LL))(a3) == 3)
    {
      uint64_t v15 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a3 + 88);
        int v24 = 138543618;
        unsigned __int8 v25 = v14;
        __int16 v26 = 2114;
        uint64_t v27 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "UN: disconnectDeviceForApp for classic  %{public}@ for %{public}@",  (uint8_t *)&v24,  0x16u);
      }

      sub_10039FFC8(a3, a2, v14, a5);
    }

    else if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 16LL))(a3))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_10066612C();
      }
    }

    else
    {
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a3 + 216) objectForKey:v14]);
      if (v17)
      {
        BOOL v18 = 1;
      }

      else
      {
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a3 + 224) objectForKey:v14]);
        BOOL v18 = v19 != 0LL;
      }

      sub_10039533C(a3, a2, v14, a5, a6, a7);
      if (v18 && *(_BYTE *)(a3 + 28))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG))
        {
          sub_100494958(a2, (uint64_t)&v24);
          sub_1006660E8();
        }

        sub_1002816A0(a1, a2, v14);
      }

      if (*(_BYTE *)(a3 + 24) && *(void *)(a3 + 96)) {
        sub_10027D37C((uint64_t)a1);
      }
      int v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a3 + 80) objectForKey:v14]);
      BOOL v21 = v20 == 0LL;

      if (!v21)
      {
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_10088BB00);
        }
        __int128 v22 = off_1008D5F08;
        int v23 = sub_10027CF60((uint64_t)a1, v14);
        sub_100593618((uint64_t)v22, v14, v23, 0);
      }

      sub_10027CD0C((uint64_t)a1, v14);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_1006660BC();
  }
}

void sub_100281E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100281E68(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, unsigned int a6)
{
  id v17 = a3;
  if (a2)
  {
    int64_t v11 = *(void **)(a1 + 232);
    if (v11)
    {
      int64_t v12 = (void *)(a1 + 232);
      do
      {
        unint64_t v13 = v11[4];
        BOOL v14 = v13 >= a2;
        if (v13 >= a2) {
          uint64_t v15 = v11;
        }
        else {
          uint64_t v15 = v11 + 1;
        }
        if (v14) {
          int64_t v12 = v11;
        }
        int64_t v11 = (void *)*v15;
      }

      while (*v15);
      if (v12 != (void *)(a1 + 232))
      {
        unint64_t v16 = v12[4];
        if (v16 <= a2) {
          sub_100281B60((os_unfair_lock_s *)a1, v16, v12[5], v17, a4, a5, a6);
        }
      }
    }
  }
}

void sub_100281F18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100281F2C(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  unsigned __int8 v6 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138412290;
    id v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Disconnecting device %@ for all apps",  (uint8_t *)&v13,  0xCu);
  }

  id v7 = *(void **)(a1 + 224);
  if (v7 != (void *)(a1 + 232))
  {
    do
    {
      unint64_t v8 = v7[4];
      uint64_t v9 = v7[5];
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 16LL))(v9)
        || (*(unsigned int (**)(uint64_t))(*(void *)v9 + 16LL))(v9) == 3)
      {
        sub_100281B60((os_unfair_lock_s *)a1, v8, v9, v5, 1, 0, a3);
      }

      id v10 = (void *)v7[1];
      if (v10)
      {
        do
        {
          int64_t v11 = v10;
          id v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          int64_t v11 = (void *)v7[2];
          BOOL v12 = *v11 == (void)v7;
          id v7 = v11;
        }

        while (!v12);
      }

      id v7 = v11;
    }

    while (v11 != (void *)(a1 + 232));
  }
}

void sub_10028208C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002820A4(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  uint64_t v8 = sub_10027BC04(a1, a2, 0);
  if (v8) {
    sub_100390A7C(v8, a2, v9, v7);
  }
}

void sub_100282114( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10028212C(uint64_t a1, unint64_t a2, void *a3, char a4)
{
  id v7 = a3;
  uint64_t v8 = sub_10027BC04(a1, a2, 0);
  if (v8) {
    uint64_t v9 = sub_100396BC8(v8, a2, v7, a4);
  }
  else {
    uint64_t v9 = 12LL;
  }

  return v9;
}

void sub_100282198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002821A8(uint64_t a1, void *a2, uint64_t a3)
{
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v14 = 0LL;
  id v5 = a2;
  sub_10002418C(__p, (char *)[v5 UTF8String]);
  unsigned __int8 v6 = *(void **)(a1 + 224);
  id v7 = (void *)(a1 + 232);
  if (v6 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v8 = (void *)v6[5];
      if (!(*(unsigned int (**)(void *))(*v8 + 16LL))(v8))
      {
        uint64_t v9 = v8[15];
        if (v9) {
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 240LL))(v9, __p, a3);
        }
      }

      id v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          int64_t v11 = v10;
          id v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          int64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          unsigned __int8 v6 = v11;
        }

        while (!v12);
      }

      unsigned __int8 v6 = v11;
    }

    while (v11 != v7);
  }

  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100282294( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002822C0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = sub_10027BC04(a1, a2, 0);
  if (v11)
  {
    __int128 v12 = *(_OWORD *)(a4 + 16);
    v15[0] = *(_OWORD *)a4;
    v15[1] = v12;
    int v16 = *(_DWORD *)(a4 + 32);
    uint64_t v13 = sub_100396D0C(v11, a2, v9, (uint64_t)v15, v10);
  }

  else
  {
    uint64_t v13 = 12LL;
  }

  return v13;
}

void sub_100282360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100282374(uint64_t a1, unint64_t a2, int a3, void *a4, int a5, uint64_t a6)
{
  id v11 = a4;
  uint64_t v12 = sub_10027BC04(a1, a2, 0);
  if (v12) {
    uint64_t v13 = sub_100396DC8(v12, a2, a3, v11, a5, a6);
  }
  else {
    uint64_t v13 = 12LL;
  }

  return v13;
}

void sub_1002823F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100282408( uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, __int128 *a6, uint64_t a7, void *a8)
{
  id v15 = a4;
  id v16 = a8;
  uint64_t v17 = sub_10027BC04(a1, a2, 0);
  if (v17)
  {
    __int128 v18 = a6[1];
    v21[0] = *a6;
    v21[1] = v18;
    uint64_t v19 = sub_100396E6C(v17, a2, a3, v15, a5, v21, a7, v16);
  }

  else
  {
    uint64_t v19 = 12LL;
  }

  return v19;
}

void sub_1002824C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002824D4(uint64_t a1, unint64_t a2)
{
  if (sub_10027BC04(a1, a2, 0)) {
    return sub_100396F48();
  }
  else {
    return 12LL;
  }
}

uint64_t sub_100282510(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_10027BC04(a1, a2, 0);
  if (v6) {
    uint64_t v7 = sub_100396F98(v6, a2, v5);
  }
  else {
    uint64_t v7 = 12LL;
  }

  return v7;
}

void sub_100282574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100282584(uint64_t a1, unint64_t a2, void *a3, __int128 *a4)
{
  id v7 = a3;
  uint64_t v8 = sub_10027BC04(a1, a2, 0);
  if (v8)
  {
    __int128 v9 = a4[1];
    __int128 v12 = *a4;
    v13[0] = v9;
    *(_OWORD *)((char *)v13 + 10) = *(__int128 *)((char *)a4 + 26);
    uint64_t v10 = sub_100397014(v8, a2, v7, &v12);
  }

  else
  {
    uint64_t v10 = 12LL;
  }

  return v10;
}

void sub_100282608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100282618(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_10027BC04(a1, a2, 0);
  if (v6) {
    uint64_t v7 = sub_1003970B8(v6, a2, v5);
  }
  else {
    uint64_t v7 = 12LL;
  }

  return v7;
}

void sub_10028267C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10028268C(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_10027BC04(a1, a2, 0);
  if (v6) {
    uint64_t v7 = sub_100397134(v6, a2, v5);
  }
  else {
    uint64_t v7 = 12LL;
  }

  return v7;
}

void sub_1002826F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100282700(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = sub_10027BC04(a1, a2, 0);
  if (v8)
  {
    __int128 v9 = *(_OWORD *)(a4 + 16);
    v12[0] = *(_OWORD *)a4;
    v12[1] = v9;
    void v12[2] = *(_OWORD *)(a4 + 32);
    int v13 = *(_DWORD *)(a4 + 48);
    uint64_t v10 = sub_1003971B0(v8, a2, v7, (uint64_t)v12);
  }

  else
  {
    uint64_t v10 = 12LL;
  }

  return v10;
}

void sub_10028278C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10028279C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = sub_10027BC04(a1, a2, 0);
  if (v8) {
    uint64_t v9 = sub_10039725C(v8, a2, v7, a4);
  }
  else {
    uint64_t v9 = 12LL;
  }

  return v9;
}

void sub_100282808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100282818(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a3;
  uint64_t v10 = sub_10027BC04(a1, a2, 0);
  if (v10) {
    uint64_t v11 = sub_1003972E8(v10, a2, v9, a4, a5);
  }
  else {
    uint64_t v11 = 12LL;
  }

  return v11;
}

void sub_100282894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002828A4(uint64_t a1, unint64_t a2, void *a3, __int128 *a4)
{
  id v7 = a3;
  uint64_t v8 = sub_10027BC04(a1, a2, 0);
  if (v8)
  {
    __int128 v11 = *a4;
    uint64_t v12 = *((void *)a4 + 2);
    uint64_t v9 = sub_10039737C(v8, a2, v7, (uint64_t)&v11);
  }

  else
  {
    uint64_t v9 = 12LL;
  }

  return v9;
}

void sub_100282928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100282938(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10027BC04(a1, a2, 0);
  if (v5) {
    return sub_100397420(v5, a2, a3);
  }
  else {
    return 12LL;
  }
}

uint64_t sub_10028297C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a3;
  uint64_t v12 = sub_10027BC04(a1, a2, 0);
  if (v12) {
    uint64_t v13 = sub_100397478(v12, a2, v11, a4, a5, a6);
  }
  else {
    uint64_t v13 = 12LL;
  }

  return v13;
}

void sub_100282A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100282A10(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_10027BC04(a1, a2, 0);
  if (v3) {
    return sub_10039751C(v3, a2);
  }
  else {
    return 12LL;
  }
}

uint64_t sub_100282A4C(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_10027BC04(a1, a2, 0);
  if (v6) {
    uint64_t v7 = sub_10039756C(v6, a2, v5);
  }
  else {
    uint64_t v7 = 12LL;
  }

  return v7;
}

void sub_100282AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100282AC0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = sub_10027BC04(a1, a2, 0);
  if (v8) {
    uint64_t v9 = sub_1003975E8(v8, a2, v7, a4);
  }
  else {
    uint64_t v9 = 12LL;
  }

  return v9;
}

void sub_100282B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100282B3C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_10027BC04(a1, a2, 0);
  if (v3)
  {
    uint64_t v4 = v3;
    if (*(void *)(v3 + 120))
    {
      id v5 = *(void **)(a1 + 224);
      uint64_t v6 = (void *)(a1 + 232);
      if (v5 != (void *)(a1 + 232))
      {
        do
        {
          uint64_t v7 = v5[5];
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16LL))(v7) && *(int *)(v7 + 344) >= 1)
          {
            __p[0] = 0LL;
            __p[1] = 0LL;
            uint64_t v12 = 0LL;
            sub_10002418C(__p, (char *)[*(id *)(v7 + 88) UTF8String]);
            (*(void (**)(void, void **, uint64_t))(**(void **)(v4 + 120) + 240LL))( *(void *)(v4 + 120),  __p,  1LL);
            if (SHIBYTE(v12) < 0) {
              operator delete(__p[0]);
            }
          }

          uint64_t v8 = (void *)v5[1];
          if (v8)
          {
            do
            {
              uint64_t v9 = v8;
              uint64_t v8 = (void *)*v8;
            }

            while (v8);
          }

          else
          {
            do
            {
              uint64_t v9 = (void *)v5[2];
              BOOL v10 = *v9 == (void)v5;
              id v5 = v9;
            }

            while (!v10);
          }

          id v5 = v9;
        }

        while (v9 != v6);
      }
    }
  }

void sub_100282C38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100282C54( uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, char a9, char a10, char a11, unsigned __int8 a12, unsigned __int8 a13, char a14, char a15, int a16, int a17)
{
  id v24 = a3;
  uint64_t v25 = sub_10027BC04(a1, a2, 0);
  if (v25)
  {
    if (*(_BYTE *)(v25 + 272))
    {
      char v26 = a15;
      char v27 = a14;
      unsigned __int8 v28 = a13;
      unsigned __int8 v29 = a12;
      char v30 = a11;
      char v31 = a10;
      char v32 = a9;
      if (qword_1008D6618 != -1)
      {
        dispatch_once(&qword_1008D6618, &stru_10088BD20);
        char v32 = a9;
        char v31 = a10;
        char v30 = a11;
        unsigned __int8 v29 = a12;
        unsigned __int8 v28 = a13;
        char v27 = a14;
        char v26 = a15;
      }

      HIBYTE(v35) = v31;
      LOBYTE(v35) = v32;
      uint64_t v33 = sub_100502EE8(qword_1008D6610, a2, v24, a4, a5, a6, a7, a8, v35, v30, v29, v28, v27, v26, a16, a17);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100666184();
      }
      uint64_t v33 = 17LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100666158();
    }
    uint64_t v33 = 1LL;
  }

  return v33;
}

void sub_100282E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100282E1C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (sub_10027BC04(a1, a2, 0))
  {
    if (qword_1008D6618 != -1) {
      dispatch_once(&qword_1008D6618, &stru_10088BD20);
    }
    sub_100504648(qword_1008D6610, a2, v7, a4);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_1006661B0();
  }
}

void sub_100282ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100282EE4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10027BC04(a1, a2, 1u);
  if (!v6) {
    return 12LL;
  }
  uint64_t v7 = v6;
  uint64_t result = sub_10039C1C8(v6, a2, a3);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v7 + 24))
    {
      if (*(void *)(v7 + 96)) {
        sub_10027D37C(a1);
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100282F54(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  uint64_t v6 = sub_10027BC04(a1, a2, 1u);
  if (!v6) {
    return 12LL;
  }
  uint64_t v7 = v6;
  uint64_t result = sub_10039C658(v6, a2, a3);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v7 + 24))
    {
      if (*(void *)(v7 + 96)) {
        sub_10027D37C(a1);
      }
    }

    return 0LL;
  }

  return result;
}

void *sub_100282FC4(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  id v5 = (char *)result[13];
  uint64_t v4 = (char *)result[14];
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        id v5 = (char *)result[14];
        break;
      }
    }
  }

  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      uint64_t result = memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    v3[14] = &v5[v6];
    if (a2) {
      return (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
    }
  }

  return result;
}

void sub_10028305C(uint64_t a1, uint64_t a2, int a3)
{
  int64_t v6 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    sub_100494958(a2, (uint64_t)__p);
    uint64_t v7 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136446466;
    __int128 v18 = v7;
    __int16 v19 = 1024;
    int v20 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "advertisingStoppedForSession session:%{public}s result:%d",  buf,  0x12u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  if (a3 == 116)
  {
    uint64_t v8 = *(void **)(a1 + 224);
    uint64_t v9 = (void *)(a1 + 232);
    if (v8 != (void *)(a1 + 232))
    {
      while (1)
      {
        uint64_t v11 = v8[4];
        uint64_t v10 = v8[5];
        BOOL v12 = (*(unsigned int (**)(uint64_t))(*(void *)v10 + 16LL))(v10) == 1 && v11 == a2;
        if (v12) {
          break;
        }
        uint64_t v13 = (void *)v8[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            uint64_t v14 = (void *)v8[2];
            BOOL v12 = *v14 == (void)v8;
            uint64_t v8 = v14;
          }

          while (!v12);
        }

        uint64_t v8 = v14;
        if (v14 == v9) {
          return;
        }
      }

      sub_10039F094(v10);
    }
  }

void sub_1002831D4(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_1002831DC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10027BC04(a1, a2, 1u);
  if (!v6) {
    return 12LL;
  }
  uint64_t v7 = v6;
  uint64_t result = sub_10039CCBC(v6, a2, a3, *(_BYTE *)(v6 + 24));
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v7 + 24))
    {
      if (*(void *)(v7 + 96)) {
        sub_10027D37C(a1);
      }
    }

    return 0LL;
  }

  return result;
}

void sub_100283250(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10027BC04(a1, a2, 1u);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_10039D4CC(v4, a2);
    if (*(_BYTE *)(v5 + 24))
    {
      if (*(void *)(v5 + 96)) {
        sub_10027D37C(a1);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_1006661DC();
  }

uint64_t sub_1002832DC(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = sub_10027BC04(a1, a2, 2u);
  uint64_t v9 = v8;
  if (v8)
  {
    BOOL v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16LL))(v8) == 1;
    uint64_t v11 = sub_10039DD18(v9, a2, v7, a4, v10);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100666208();
    }
    uint64_t v11 = 3LL;
  }

  return v11;
}

void sub_100283390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002833A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088BB00);
  }
  uint64_t v5 = sub_10059A66C((uint64_t)off_1008D5F08, a2, v4);

  return v5;
}

void sub_10028340C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028341C( uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  uint64_t v11 = sub_10027BC04(a1, a2, 1u);
  if (v11)
  {
    sub_10039E8A4(v11, a2, a3, a4, a5, a6);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_100666234();
  }

void sub_1002834B4(uint64_t a1, unint64_t a2, void *a3, unsigned __int16 a4, uint64_t a5)
{
  id v9 = a3;
  uint64_t v10 = sub_10027BC04(a1, a2, 1u);
  if (v10)
  {
    sub_10039E92C(v10, a2, v9, a4, a5);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_100666260();
  }
}

void sub_10028354C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028355C(uint64_t a1, unint64_t a2, void *a3, unsigned __int8 **a4, char a5)
{
  id v9 = a3;
  uint64_t v10 = sub_10027BC04(a1, a2, 0);
  if (v10)
  {
    sub_100395FEC(v10, a2, v9, a4, a5);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_10066628C();
  }
}

void sub_1002835F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100283604()
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088BB00);
  }
  int v0 = sub_1005B493C((os_unfair_lock_s *)off_1008D5F08);
  uint64_t v1 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = v0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "pauseLeConnectionManager returned %d",  (uint8_t *)v2,  8u);
  }

void sub_1002836D8()
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088BB00);
  }
  int v0 = sub_1005B2610((uint64_t)off_1008D5F08);
  uint64_t v1 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = v0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "resumeConnectionManager returned %d",  (uint8_t *)v2,  8u);
  }

void sub_1002837AC(uint64_t a1, int a2, int a3)
{
  if (a2 == 1)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = sub_100404FE8();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_10028381C;
    v8[3] = &unk_10087EB68;
    _OWORD v8[4] = a1;
    int v9 = a3;
    sub_1004054B4(v7, v8);
  }

void sub_10028381C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 224);
  uint64_t v4 = (void *)(v2 + 232);
  if (v3 != (void *)(v2 + 232))
  {
    do
    {
      uint64_t v6 = v3[4];
      uint64_t v5 = (void *)v3[5];
      int v7 = *(_DWORD *)(a1 + 40);
      uint64_t v8 = (*(uint64_t (**)(void *))(*v5 + 16LL))(v5);
      if ((_DWORD)v8 == 3)
      {
        if (!v7) {
          uint64_t v8 = (*(uint64_t (**)(void *, uint64_t))(*v5 + 72LL))(v5, v6);
        }
        if (!v5[27]) {
          goto LABEL_12;
        }
        sub_100278B78(v8, (uint64_t)v5, v6, 5LL, 1LL);
        int v9 = *(void (***)(void))v5[27];
      }

      else
      {
        if (!v7) {
          uint64_t v8 = (*(uint64_t (**)(void *, uint64_t))(*v5 + 72LL))(v5, v6);
        }
        if (!v5[15]) {
          goto LABEL_12;
        }
        sub_100278B78(v8, (uint64_t)v5, v6, 5LL, 1LL);
        int v9 = (void (**)(void))(*(void *)v5[15] + 200LL);
      }

      (*v9)();
LABEL_12:
      uint64_t v10 = (void *)v3[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v11 = (void *)v3[2];
          BOOL v12 = *v11 == (void)v3;
          uint64_t v3 = v11;
        }

        while (!v12);
      }

      uint64_t v3 = v11;
    }

    while (v11 != v4);
  }

  if (!*(_DWORD *)(a1 + 40))
  {
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_10088BD40);
    }
    if (!*((_BYTE *)off_1008D6190 + 202))
    {
      uint64_t v13 = (os_log_s *)qword_1008F7680;
      if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Power toggled off, clearing state restoration data",  v17,  2u);
      }

      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      id v15 = sub_100283A1C();
      char v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      [v14 removeItemAtURL:v16 error:0];
    }
  }

void sub_100283A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100283A1C()
{
  if (qword_1008EF990 != -1) {
    dispatch_once(&qword_1008EF990, &stru_10088BAA0);
  }
  return (id)qword_1008EF988;
}

void sub_100283A5C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100283AC4;
  v5[3] = &unk_1008800D8;
  void v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

void sub_100283AC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)__int128 buf = 67109120;
    LODWORD(v31) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting AppManager denylist %d", buf, 8u);
  }

  *(_BYTE *)(v2 + 179) = *(_BYTE *)(a1 + 40);
  if (qword_1008D6788 != -1) {
    dispatch_once(&qword_1008D6788, &stru_10088BAC0);
  }
  uint64_t v5 = sub_1002075B4((uint64_t)off_1008D6780);
  if ((_DWORD)v5 == 1)
  {
    int v7 = *(unsigned __int8 *)(a1 + 40);
    BOOL v8 = *(_BYTE *)(a1 + 40) == 0;
    int v9 = *(void **)(v2 + 224);
    if (v9 != (void *)(v2 + 232))
    {
      *(void *)&__int128 v6 = 138543362LL;
      __int128 v29 = v6;
      do
      {
        uint64_t v10 = v9[5];
        uint64_t v11 = *(void *)(v10 + 120);
        if (v11)
        {
          if (*(_BYTE *)(v10 + 36))
          {
            BOOL v12 = (os_log_s *)qword_1008F7628;
            BOOL v13 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT);
            int v14 = *(unsigned __int8 *)(a1 + 40);
            if (v13)
            {
              uint64_t v15 = *(void *)(v10 + 88);
              BOOL v16 = v14 == 0;
              uint64_t v17 = "needs";
              if (v16) {
                uint64_t v17 = "does not need";
              }
              *(_DWORD *)__int128 buf = 138543618;
              uint64_t v31 = v15;
              __int16 v32 = 2082;
              uint64_t v33 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "BundleIdentifier %{public}@ %{public}s restricted state operation. Update manager state",  buf,  0x16u);
              uint64_t v11 = *(void *)(v10 + 120);
              int v14 = *(unsigned __int8 *)(a1 + 40);
            }

            uint64_t v5 = (*(uint64_t (**)(uint64_t, void, BOOL))(*(void *)v11 + 208LL))(v11, 0LL, v14 != 0);
          }

          else if (!*(_BYTE *)(v10 + 37))
          {
            uint64_t v18 = v9[4];
            if (v7)
            {
              (*(void (**)(void, void))(*(void *)v10 + 72LL))(v9[5], v9[4]);
              __int16 v19 = (os_log_s *)qword_1008F7628;
              uint64_t v5 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO);
              if ((_DWORD)v5)
              {
                uint64_t v20 = *(void *)(v10 + 88);
                *(_DWORD *)__int128 buf = v29;
                uint64_t v31 = v20;
                _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Faking off power state for bundleIdentifier %{public}@",  buf,  0xCu);
              }
            }

            sub_100278B78(v5, v10, v18, 5LL, 1LL);
            uint64_t v5 = (*(uint64_t (**)(void, void, BOOL))(**(void **)(v10 + 120) + 200LL))( *(void *)(v10 + 120),  0LL,  v8);
          }
        }

        BOOL v21 = (void *)v9[1];
        if (v21)
        {
          do
          {
            __int128 v22 = v21;
            BOOL v21 = (void *)*v21;
          }

          while (v21);
        }

        else
        {
          do
          {
            __int128 v22 = (void *)v9[2];
            BOOL v16 = *v22 == (void)v9;
            int v9 = v22;
          }

          while (!v16);
        }

        int v9 = v22;
      }

      while (v22 != (void *)(v2 + 232));
    }

    if (v7)
    {
      int v23 = (os_log_s *)qword_1008F7680;
      if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *(unsigned __int8 *)(a1 + 40);
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v31) = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Denylist mode turned %d, clearing state restoration data",  buf,  8u);
      }

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager", v29));
      id v26 = sub_100283A1C();
      char v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      [v25 removeItemAtURL:v27 error:0];

      sub_100278BE4(v2);
    }
  }

  else
  {
    unsigned __int8 v28 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "Ignoring denylist change while power is not ON",  buf,  2u);
    }
  }

void sub_100283E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100283E74(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v3 = a3;
  int v4 = *(void **)(a1 + 232);
  if (!v4) {
    goto LABEL_28;
  }
  int v7 = (void *)(a1 + 232);
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      int v7 = v4;
    }
    int v4 = (void *)*v10;
  }

  while (*v10);
  if (v7 != (void *)(a1 + 232) && v7[4] <= a2)
  {
    (*(void (**)(void, uint64_t))(*(void *)v7[5] + 24LL))(v7[5], a3);
    if (v3 == 16 || v3 == 8)
    {
      *(_BYTE *)(v7[5] + 28LL) = 1;
      if (v3 == 16)
      {
        uint64_t v11 = sub_1002E8E64();
        (*(void (**)(uint64_t, unint64_t))(*(void *)v11 + 104LL))(v11, a2);
        *(void *)std::stringbuf::string_type __p = 0LL;
        sub_1000B0400((uint64_t)__p);
        uint64_t v12 = *(__int16 *)&__p[4];
        uint64_t v13 = v7[5];
        *(void *)(v13 + _Block_object_dispose(va, 8) = *(int *)__p;
        *(void *)(v13 + 16) = v12;
      }
    }

    sub_100494958(v7[4], (uint64_t)__p);
    if (v22 >= 0) {
      int v14 = __p;
    }
    else {
      int v14 = *(_BYTE **)__p;
    }
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14));
    if (v22 < 0) {
      operator delete(*(void **)__p);
    }
    BOOL v16 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type __p = 138543618;
      *(void *)&__p[4] = v15;
      __int16 v20 = 1024;
      int v21 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "AppSession state changed for %{public}@ to state %d",  __p,  0x12u);
    }

    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1002840C8;
    v17[3] = &unk_10088B9C8;
    v17[4] = a2;
    char v18 = v3;
    sub_100281738((os_unfair_lock_s *)(a1 + 192), v17);
  }

  else
  {
LABEL_28:
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_1006662B8();
    }
  }

void sub_100284098( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002840C8(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1002840E4(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

void sub_1002840EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = sub_100284258(a1, v3, 1);
  uint64_t v5 = (void *)(a1 + 232);
  __int128 v6 = (os_log_s *)qword_1008F7628;
  if (v5 == v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_10066631C();
    }
    uint64_t v9 = sub_1002E8E64();
    (*(void (**)(uint64_t, id))(*(void *)v9 + 128LL))(v9, v3);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
    {
      sub_100494958(v4[4], (uint64_t)__p);
      if (v11 >= 0) {
        int v7 = __p;
      }
      else {
        int v7 = (void **)__p[0];
      }
      *(_DWORD *)__int128 buf = 138543618;
      id v13 = v3;
      __int16 v14 = 2082;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Dispatching queued pairing request for device %{public}@ to session %{public}s",  buf,  0x16u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v8 = sub_1002E8E64();
    (*(void (**)(uint64_t))(*(void *)v8 + 120LL))(v8);
  }
}

void sub_10028423C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100284258(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  __int128 v6 = (void *)(a1 + 232);
  int v7 = *(void **)(a1 + 224);
  if (v7 != (void *)(a1 + 232))
  {
    uint64_t v8 = (void *)(a1 + 232);
    while (1)
    {
      uint64_t v9 = v7[5];
      int v10 = *(unsigned __int8 *)(v9 + 129);
      if (v10 == 16)
      {
        char v11 = v7;
        if (!(*(unsigned int (**)(void))(*(void *)v9 + 16LL))(v7[5]))
        {
          char v11 = v8;
        }
      }

      else if (v10 == 32 && (a3 & 1) == 0 && *(_DWORD *)(v9 + 32) == 2)
      {
        if (!(*(unsigned int (**)(void))(*(void *)v9 + 16LL))(v7[5])
          && (sub_100396BBC(v9, (uint64_t)v5) & 1) != 0)
        {
LABEL_24:
          char v11 = v7;
          goto LABEL_25;
        }

        if (v8 == v6) {
          char v11 = v7;
        }
        else {
          char v11 = v8;
        }
      }

      else
      {
        char v11 = v8;
      }

      uint64_t v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          id v13 = v12;
          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          id v13 = (void *)v7[2];
          BOOL v14 = *v13 == (void)v7;
          int v7 = v13;
        }

        while (!v14);
      }

      uint64_t v8 = v11;
      int v7 = v13;
      if (v13 == v6) {
        goto LABEL_25;
      }
    }
  }

  char v11 = (void *)(a1 + 232);
LABEL_25:

  return v11;
}

void sub_10028438C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028439C(uint64_t a1, void *a2)
{
}

void sub_1002843A4()
{
  int v0 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LeConnectionManager Paused now", v1, 2u);
  }

void sub_10028440C()
{
  int v0 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LeConnectionManager Active now", v1, 2u);
  }

void sub_100284474(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (a3) {
    sub_1002844D8(a1, v5, 1u, a3, 1);
  }
}

void sub_1002844C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002844D8(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, int a5)
{
  id v7 = a2;
  int v67 = a5;
  char v70 = a3 | a5;
  unsigned int v71 = a3;
  if ((a3 | a5) == 1)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10088BB80);
    }
    uint64_t v8 = off_1008D5F28;
    sub_10002418C(__p, "_CTKD_");
    int v9 = sub_1005CE5A8((uint64_t)v8, v7, (uint64_t)__p);
    if (v86 < 0) {
      operator delete(__p[0]);
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10088BB80);
    }
    int v10 = sub_1005CF4D8((uint64_t)off_1008D5F28, v7);
    char v11 = (os_log_s *)qword_1008F7660;
    if (os_log_type_enabled((os_log_t)qword_1008F7660, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        id v13 = "ready";
      }
      else {
        id v13 = "disconnected";
      }
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10088BB80);
      }
      sub_1005CC0D4((uint64_t)off_1008D5F28, v7, (uint64_t)&v84);
      if ((v84.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v14 = &v84;
      }
      else {
        BOOL v14 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10088BB80);
      }
      uint64_t v15 = sub_1005CC198((uint64_t)off_1008D5F28, v7, 1);
      id v16 = sub_1005BFF10(v15);
      id v17 = (id)objc_claimAutoreleasedReturnValue(v16);
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10088BB80);
      }
      BOOL v18 = sub_1005CC2D8((uint64_t)off_1008D5F28, v7);
      if (v18)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10088BB80);
        }
        uint64_t v19 = sub_1005CC198((uint64_t)off_1008D5F28, v7, 0);
        id v20 = sub_1005BFF10(v19);
        int v21 = (__CFString *)objc_claimAutoreleasedReturnValue(v20);
      }

      else
      {
        int v21 = &stru_1008A57D8;
      }

      *(_DWORD *)__int128 buf = 136447746;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&_BYTE buf[14] = v7;
      *(_WORD *)&_BYTE buf[22] = 2082;
      *(void *)&uint8_t buf[24] = v14;
      __int16 v93 = 1024;
      int v94 = v10;
      __int16 v95 = 2114;
      id v96 = v17;
      __int16 v97 = 2114;
      uint64_t v98 = v21;
      __int16 v99 = 1024;
      unsigned int v100 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s - {cbuuid: %{public}@, devicename: %{public}s, lmHandle: 0x%x, adv-addr: %{public}@, resolved- addr: %{public}@, result: %d}",  buf,  0x40u);
      if (v18) {
    }
      }

    if (v9) {
      sub_100285584(a1, v7, v71, a4);
    }
    if (v71) {
      sub_10027CD0C(a1, v7);
    }
    char v22 = *(void **)(a1 + 224);
    if (v22 != (void *)(a1 + 232))
    {
      unint64_t v64 = a1 + 104;
      int v23 = "disconnection";
      if (v71) {
        int v23 = "connection";
      }
      uint64_t v62 = v23;
      if (v71) {
        int v24 = 2;
      }
      else {
        int v24 = 1;
      }
      unsigned int v63 = v24;
      if (a4) {
        unsigned int v25 = 0;
      }
      else {
        unsigned int v25 = v71;
      }
      if (a4) {
        char v26 = v71;
      }
      else {
        char v26 = 0;
      }
      unsigned int v65 = v25;
      char v66 = v26;
      *(void *)&__int128 v12 = 67109634LL;
      __int128 v61 = v12;
      while (1)
      {
        unint64_t v27 = v22[4];
        uint64_t v28 = v22[5];
        memset(&v84, 0, sizeof(v84));
        sub_1004949D8(v27, &v84);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 16LL))(v28) == 1)
        {
          if ((v71 & 1) == 0)
          {
            [*(id *)(v28 + 80) removeObjectForKey:v7];
            __int128 v82 = 0u;
            __int128 v83 = 0u;
            __int128 v80 = 0u;
            __int128 v81 = 0u;
            id v29 = *(id *)(v28 + 216);
            id v30 = [v29 countByEnumeratingWithState:&v80 objects:v91 count:16];
            if (v30)
            {
              uint64_t v31 = *(void *)v81;
              do
              {
                for (uint64_t i = 0LL; i != v30; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v81 != v31) {
                    objc_enumerationMutation(v29);
                  }
                  uint64_t v33 = (void *)[*(id *)(v28 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v80 + 1) + 8 * (void)i) v61];
                  [v33 removeObjectForKey:v7];
                }

                id v30 = [v29 countByEnumeratingWithState:&v80 objects:v91 count:16];
              }

              while (v30);
            }

            if (!sub_10039F188(v28, v7, 0) && *(_BYTE *)(v28 + 28))
            {
              uint64_t v34 = (os_log_s *)qword_1008F7628;
              if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG))
              {
                sub_100494958(v27, (uint64_t)v87);
                unsigned __int16 v52 = v87;
                if (v90 < 0) {
                  unsigned __int16 v52 = *(_BYTE **)v87;
                }
                *(void *)__int128 buf = v61;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = v52;
                *(_WORD *)&_BYTE buf[18] = 2114;
                *(void *)&_BYTE buf[20] = v7;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "deviceConnectionChanged, isConnection=%d, Notifying listeners that %{public}s is not interested in %{public}@",  buf,  0x1Cu);
                if (v90 < 0) {
                  operator delete(*(void **)v87);
                }
              }

              sub_1002816A0((os_unfair_lock_s *)a1, v27, v7);
            }
          }

          goto LABEL_103;
        }

void sub_1002850A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a52 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002851B0(uint64_t a1, void *a2, unsigned int a3)
{
}

void sub_1002851B8(uint64_t a1, void *a2, char a3, int a4, char a5, int a6)
{
  id v11 = a2;
  uint64_t v12 = sub_100404FE8();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_100285294;
  v14[3] = &unk_100880090;
  uint64_t v16 = a1;
  id v13 = v11;
  id v15 = v13;
  char v19 = a3;
  char v20 = a5;
  int v17 = a4;
  int v18 = a6;
  sub_100405384(v12, v14);
}

void sub_100285274( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100285294(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(unsigned __int8 *)(a1 + 56);
    int v6 = *(unsigned __int8 *)(a1 + 57);
    int v7 = *(_DWORD *)(a1 + 48);
    int v8 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v18 = v4;
    __int16 v19 = 1024;
    int v20 = v5;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 1024;
    int v24 = v6;
    __int16 v25 = 1024;
    int v26 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PeerInfoCB device:%{public}@ peerVersion:%d peerFeatures:%x localVersoin:%d localFeatures:%x",  buf,  0x24u);
  }

  int v9 = *(void **)(v2 + 224);
  int v10 = (void *)(v2 + 232);
  if (v9 != (void *)(v2 + 232))
  {
    do
    {
      uint64_t v11 = v9[4];
      uint64_t v12 = (void *)v9[5];
      uint64_t v13 = (*(uint64_t (**)(void *))(*v12 + 16LL))(v12);
      if (!(_DWORD)v13) {
        sub_100285400(v13, v11, v12, *(void **)(a1 + 32), 0);
      }
      BOOL v14 = (void *)v9[1];
      if (v14)
      {
        do
        {
          id v15 = v14;
          BOOL v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          id v15 = (void *)v9[2];
          BOOL v16 = *v15 == (void)v9;
          int v9 = v15;
        }

        while (!v16);
      }

      int v9 = v15;
    }

    while (v15 != v10);
  }

void sub_100285400(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  id v8 = a4;
  if ((sub_100396BBC((uint64_t)a3, (uint64_t)v8) & 1) != 0)
  {
    int v9 = (os_log_s *)qword_1008F7628;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      int v11 = 138543362;
      id v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Device %{public}@ ready for CL",  (uint8_t *)&v11,  0xCu);
    }

    sub_100278B78(v10, (uint64_t)a3, a2, 10LL, 1LL);
    sub_100397CF4(a3, v8, a5);
  }
}

void sub_10028551C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100285534(uint64_t a1, void *a2, char a3, int a4, char a5, int a6)
{
}

void sub_10028553C(uint64_t a1, void *a2, unsigned int a3)
{
}

void sub_10028554C(uint64_t a1, void *a2, unsigned int a3)
{
}

void sub_100285560(uint64_t a1, void *a2, unsigned int a3)
{
}

void sub_100285570(uint64_t a1, void *a2, unsigned int a3)
{
}

void sub_100285584(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  if (a4) {
    goto LABEL_17;
  }
  if (!a3) {
    goto LABEL_17;
  }
  id v8 = *(void **)(a1 + 224);
  int v9 = (void *)(a1 + 232);
  if (v8 == (void *)(a1 + 232)) {
    goto LABEL_17;
  }
  while ((*(unsigned int (**)(void))(*(void *)v8[5] + 16LL))(v8[5]))
  {
LABEL_11:
    BOOL v14 = (void *)v8[1];
    if (v14)
    {
      do
      {
        id v15 = v14;
        BOOL v14 = (void *)*v14;
      }

      while (v14);
    }

    else
    {
      do
      {
        id v15 = (void *)v8[2];
        BOOL v16 = *v15 == (void)v8;
        id v8 = v15;
      }

      while (!v16);
    }

    id v8 = v15;
    if (v15 == v9) {
      goto LABEL_17;
    }
  }

  uint64_t v10 = v8[5];
  int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v10 + 216) objectForKeyedSubscript:v7]);
  unsigned int v12 = sub_100396BBC(v10, (uint64_t)v7);
  if (v11) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v13 != 1 || ![v11 enableTransportBridging])
  {

    goto LABEL_11;
  }

  int v17 = (os_log_s *)qword_1008F7628;
  BOOL v18 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    uint64_t v19 = *(void *)(v10 + 88);
    int v20 = 138543618;
    id v21 = v7;
    __int16 v22 = 2114;
    uint64_t v23 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Bridgable device %{public}@ connected for %{public}@",  (uint8_t *)&v20,  0x16u);
  }

  sub_10028D6C4(v18, v10, v7);

LABEL_17:
}

void sub_100285714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100285740(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v10 = a4;
  int v11 = (os_log_s *)qword_1008F7658;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_1008F7658, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    uint64_t v13 = *(void *)(a3 + 88);
    BOOL v14 = "N";
    *(_DWORD *)__int128 buf = 138543874;
    if ((_DWORD)a6) {
      BOOL v14 = "Y";
    }
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&_BYTE buf[12] = 2114;
    *(void *)&_BYTE buf[14] = v13;
    *(_WORD *)&_BYTE buf[22] = 2080;
    *(void *)&uint8_t buf[24] = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "App disconnected - {cbuuid: %{public}@, bundle: %{public}@, reconnecting: %s}",  buf,  0x20u);
  }

  sub_100278B78(v12, a3, a2, 10LL, 1LL);
  sub_10039976C(a3, v10, a5, a6);
  uint64_t v15 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 344LL))(v15))
  {
    BOOL v16 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)__int128 buf = 134217984;
      *(double *)&uint8_t buf[4] = Current + 5.0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Adding grace period fLastGattAssertionGraceInit %f",  buf,  0xCu);
    }

    *(CFAbsoluteTime *)(a3 + 56) = CFAbsoluteTimeGetCurrent() + 5.0;
  }

  uint64_t v22 = 0LL;
  __int128 v21 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_10002418C(__p, (char *)[*(id *)(a3 + 88) UTF8String]);
  sub_10040CF60((uint64_t)buf, (__int128 *)__p, *(_BYTE *)(a3 + 129), v10, a5);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (qword_1008D9298 != -1) {
    dispatch_once(&qword_1008D9298, &stru_10088BCC0);
  }
  sub_10040D074(qword_1008D9290, (uint64_t)buf);
}

void sub_100285980( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_1002859C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v4 = *(void **)(v1 + 232);
  uint64_t v2 = (void *)(v1 + 232);
  id v3 = v4;
  if (v4)
  {
    unint64_t v6 = *(void *)(a1 + 56);
    id v7 = v2;
    do
    {
      unint64_t v8 = v3[4];
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        id v10 = v3;
      }
      else {
        id v10 = v3 + 1;
      }
      if (v9) {
        id v7 = v3;
      }
      id v3 = (void *)*v10;
    }

    while (*v10);
    if (v7 != v2 && v6 >= v7[4])
    {
      [*(id *)(*(void *)(a1 + 64) + 216) removeObjectForKey:*(void *)(a1 + 32)];
      int v11 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        sub_100494958(*(void *)(a1 + 56), (uint64_t)__p);
        if (v16 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        int v14 = *(unsigned __int8 *)(a1 + 72);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v18 = v12;
        __int16 v19 = 2082;
        int v20 = v13;
        __int16 v21 = 1024;
        int v22 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Auto Reconnecting device %{public}@ for session %{public}s linkReady %d",  buf,  0x1Cu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }

      sub_100391320(*(void *)(a1 + 64), *(void *)(a1 + 56), *(void **)(a1 + 32), *(void **)(a1 + 40));
    }
  }

void sub_100285B20(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v11 = a3;
  uint64_t v9 = sub_10027BC04(a1, a2, 0);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 120);
    if (v10) {
      (*(void (**)(uint64_t, void, id, uint64_t, uint64_t))(*(void *)v10 + 48LL))(v10, 0LL, v11, a4, a5);
    }
  }
}

void sub_100285B9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100285BB0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
}

void sub_100285BB8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = a2;
  uint64_t v10 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
  {
    int v17 = 138543362;
    id v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Dispatching connection parameters update for device %{public}@",  (uint8_t *)&v17,  0xCu);
  }

  id v11 = *(void **)(a1 + 224);
  uint64_t v12 = (void *)(a1 + 232);
  if (v11 != v12)
  {
    do
    {
      uint64_t v13 = *(void *)(v11[5] + 120LL);
      if (v13) {
        (*(void (**)(uint64_t, void, id, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 216LL))( v13,  0LL,  v9,  a3,  a4,  a5);
      }
      int v14 = (void *)v11[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          int v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          uint64_t v15 = (void *)v11[2];
          BOOL v16 = *v15 == (void)v11;
          id v11 = v15;
        }

        while (!v16);
      }

      id v11 = v15;
    }

    while (v15 != v12);
  }
}

void sub_100285CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100285D0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_100285D1C( uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v15 = a3;
  id v18 = *(void **)(a1 + 232);
  int v17 = (void *)(a1 + 232);
  BOOL v16 = v18;
  if (!v18) {
    goto LABEL_12;
  }
  __int16 v19 = v17;
  do
  {
    unint64_t v20 = v16[4];
    BOOL v21 = v20 >= a2;
    if (v20 >= a2) {
      int v22 = v16;
    }
    else {
      int v22 = v16 + 1;
    }
    if (v21) {
      __int16 v19 = v16;
    }
    BOOL v16 = (void *)*v22;
  }

  while (*v22);
  if (v19 != v17 && (unint64_t v23 = v19[4], v23 <= a2))
  {
    __int16 v25 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
    {
      sub_100494958(v23, (uint64_t)__p);
      int v26 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 138543618;
      id v31 = v15;
      __int16 v32 = 2082;
      uint64_t v33 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "Dispatching leDeviceTimeSyncResponse for device %{public}@ to session %{public}s",  buf,  0x16u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v27 = *(void *)(v19[5] + 120LL);
    if (v27) {
      (*(void (**)(uint64_t, void, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v27 + 224LL))( v27,  0LL,  v15,  a4,  a5,  a6,  a7,  a8);
    }
  }

  else
  {
LABEL_12:
    int v24 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "leDeviceTimeSyncResponse no session found",  (uint8_t *)__p,  2u);
    }
  }
}

void sub_100285EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100285F10( uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100285F18(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  int v5 = *(void **)(a1 + 224);
  unint64_t v6 = (void *)(a1 + 232);
  if (v5 != v6)
  {
    do
    {
      uint64_t v7 = *(void *)(v5[5] + 120LL);
      if (v7) {
        (*(void (**)(uint64_t, void, id, uint64_t))(*(void *)v7 + 232LL))(v7, 0LL, v11, a3);
      }
      unint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          unint64_t v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          id v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          int v5 = v9;
        }

        while (!v10);
      }

      int v5 = v9;
    }

    while (v9 != v6);
  }
}

void sub_100285FC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100285FD4(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_100285FDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  id v22 = a2;
  id v15 = *(void **)(a1 + 224);
  BOOL v16 = (void *)(a1 + 232);
  if (v15 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v17 = v15[5];
      uint64_t v18 = *(void *)(v17 + 120);
      if (v18 && *(_BYTE *)(v17 + 184))
      {
        if ((_DWORD)a3 == 138)
        {
          if (!(*(unsigned int (**)(void))(*(void *)v17 + 16LL))(v15[5]))
          {
            sub_10039B948(v17, v22, 138, a4, a5, a6, a7, a8);
            goto LABEL_8;
          }

          uint64_t v18 = *(void *)(v17 + 120);
        }

        (*(void (**)(uint64_t, void, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*(void *)v18 + 80LL))( v18,  0LL,  v22,  a3,  a4,  a5,  a6,  a7,  a8);
      }

void sub_100286118( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100286130(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
}

void sub_100286138(uint64_t a1, void *a2, const void *a3)
{
  id v5 = a2;
  unint64_t v6 = *(void **)(a1 + 224);
  uint64_t v7 = (void *)(a1 + 232);
  if (v6 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v8 = v6[5];
      uint64_t v9 = *(void *)(v8 + 120);
      if (v9 && *(_BYTE *)(v8 + 185))
      {
        memcpy(__dst, a3, sizeof(__dst));
        (*(void (**)(uint64_t, void, id, _BYTE *))(*(void *)v9 + 88LL))(v9, 0LL, v5, __dst);
      }

      BOOL v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          id v11 = v10;
          BOOL v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          id v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          unint64_t v6 = v11;
        }

        while (!v12);
      }

      unint64_t v6 = v11;
    }

    while (v11 != v7);
  }
}

void sub_100286248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100286260(uint64_t a1, void *a2, const void *a3)
{
}

void sub_100286268( uint64_t a1, void *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, __int16 a13, int a14, char a15)
{
  id v30 = a2;
  uint64_t v17 = *(void **)(a1 + 224);
  uint64_t v18 = (void *)(a1 + 232);
  if (v17 != v18)
  {
    do
    {
      uint64_t v19 = *(void *)(v17[5] + 120LL);
      if (v19)
      {
        BYTE4(v24) = a15;
        LODWORD(v24) = a14;
        HIWORD(v23) = a13;
        BYTE4(v23) = a12;
        BYTE3(v23) = a11;
        BYTE2(v23) = a10;
        BYTE1(v23) = a9;
        LOBYTE(v23) = a8;
        (*(void (**)(uint64_t, void, id, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 96LL))( v19,  0LL,  v30,  a3,  a4,  a5,  a6,  a7,  v23,  v24);
      }

      unint64_t v20 = (void *)v17[1];
      if (v20)
      {
        do
        {
          BOOL v21 = v20;
          unint64_t v20 = (void *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          BOOL v21 = (void *)v17[2];
          BOOL v22 = *v21 == (void)v17;
          uint64_t v17 = v21;
        }

        while (!v22);
      }

      uint64_t v17 = v21;
    }

    while (v21 != v18);
  }
}

void sub_100286384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
}

void sub_100286398( uint64_t a1, void *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, __int16 a13, int a14, char a15)
{
}

void sub_1002863D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v19 = a2;
  uint64_t v13 = *(void **)(a1 + 224);
  int v14 = (void *)(a1 + 232);
  if (v13 != v14)
  {
    do
    {
      uint64_t v15 = *(void *)(v13[5] + 120LL);
      if (v15) {
        (*(void (**)(uint64_t, void, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 104LL))( v15,  0LL,  v19,  a3,  a4,  a5,  a6,  a7);
      }
      BOOL v16 = (void *)v13[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          BOOL v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          uint64_t v17 = (void *)v13[2];
          BOOL v18 = *v17 == (void)v13;
          uint64_t v13 = v17;
        }

        while (!v18);
      }

      uint64_t v13 = v17;
    }

    while (v17 != v14);
  }
}

void sub_1002864B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002864C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_1002864CC(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = *(void **)(a1 + 224);
  uint64_t v9 = (void *)(a1 + 232);
  if (v8 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v10 = v8[5];
      if (*(void *)(v10 + 120))
      {
        unint64_t v11 = v8[4];
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_10088BB00);
        }
        BOOL v12 = off_1008D5F08;
        sub_100241F90(v19, v7);
        if (sub_100599FF0((uint64_t)v12, v11, v19))
        {
          uint64_t v13 = *(void *)(v10 + 120);
          __int128 v14 = a3[1];
          v18[0] = *a3;
          v18[1] = v14;
          (*(void (**)(uint64_t, void, id, _OWORD *, uint64_t))(*(void *)v13 + 112LL))( v13,  0LL,  v7,  v18,  a4);
        }
      }

      uint64_t v15 = (void *)v8[1];
      if (v15)
      {
        do
        {
          BOOL v16 = v15;
          uint64_t v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          BOOL v16 = (void *)v8[2];
          BOOL v17 = *v16 == (void)v8;
          uint64_t v8 = v16;
        }

        while (!v17);
      }

      uint64_t v8 = v16;
    }

    while (v16 != v9);
  }
}

void sub_100286624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100286640(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
}

void sub_100286648(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 176))
  {
    uint64_t v2 = sub_100404FE8();
    sub_100405460(v2, 5000LL, &stru_10088BA10);
    *(_BYTE *)(a1 + 176) = 1;
  }

void sub_100286688(id a1)
{
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10088BCA0);
  }
  sub_1002866C8((uint64_t)off_1008D67C0);
}

void sub_1002866C8(uint64_t a1)
{
  *(_BYTE *)(a1 + 176) = 0;
  sub_100278BE4(a1);
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088BB00);
  }
  id v2 = sub_10059A34C((uint64_t)off_1008D5F08);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if ([v3 count])
  {

LABEL_6:
    sub_100286648(a1);
    return;
  }

  id v4 = [*(id *)(a1 + 328) count];

  if (v4) {
    goto LABEL_6;
  }
  id v5 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Stopping device disconnection watchdog, as there are no more devices connected",  v6,  2u);
  }

void sub_1002867B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002867C8(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = *(void **)(a1 + 224);
  id v4 = (void *)(a1 + 232);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v5 = v3[5];
      unint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          id v7 = v6;
          unint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          id v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          id v3 = v7;
        }

        while (!v8);
      }

      id v3 = v7;
    }

    while (v7 != v4);
  }
}

void sub_10028686C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100286884(uint64_t a1, void *a2)
{
}

void sub_10028688C( uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8)
{
  id v15 = a3;
  id v16 = a8;
  id v19 = *(void **)(a1 + 232);
  BOOL v18 = (void *)(a1 + 232);
  BOOL v17 = v19;
  if (v19)
  {
    unint64_t v20 = v18;
    do
    {
      unint64_t v21 = v17[4];
      BOOL v22 = v21 >= a2;
      if (v21 >= a2) {
        uint64_t v23 = v17;
      }
      else {
        uint64_t v23 = v17 + 1;
      }
      if (v22) {
        unint64_t v20 = v17;
      }
      BOOL v17 = (void *)*v23;
    }

    while (*v23);
    if (v20 != v18 && v20[4] <= a2 && !(*(unsigned int (**)(void))(*(void *)v20[5] + 16LL))(v20[5]))
    {
      uint64_t v24 = v20[5];
      ++*(void *)(v24 + 336);
      if (*(_BYTE *)(v24 + 186))
      {
        if (qword_1008D5F20 != -1) {
          dispatch_once(&qword_1008D5F20, &stru_10088BB60);
        }
        sub_1006274CC(qword_1008D5F18, 60LL);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10088BB80);
        }
        __int16 v25 = off_1008D5F28;
        sub_10002418C(__p, "PrivateModeDevice");
        sub_1005CCF08((uint64_t)v25, v15, (unsigned __int8 *)__p);
        if (v39 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v26 = *(void *)(a4 + 8);
      id v36 = 0LL;
      uint64_t v37 = 0LL;
      __int16 v35 = 0LL;
      uint64_t v27 = (uint64_t)sub_100050EE8( (char *)&v35,  *(__int128 **)(v26 + 64),  *(__int128 **)(v26 + 72),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v26 + 72) - *(void *)(v26 + 64)) >> 2));
      uint64_t v28 = (unsigned __int8 *)v35;
      char v29 = v36;
      if (v35 == v36)
      {
        id v30 = (unsigned __int8 *)v35;
      }

      else
      {
        while (1)
        {
          *(_OWORD *)__int128 buf = xmmword_1006BDBE4;
          int v41 = 0;
          uint64_t v27 = sub_1001BEC7C(v28, buf);
          if ((v27 & 1) != 0) {
            break;
          }
          v28 += 20;
          if (v28 == v29)
          {
            uint64_t v28 = v29;
            break;
          }
        }

        id v30 = v28;
        uint64_t v28 = v36;
      }

      if (v30 != v28)
      {
        id v31 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Set TAG as CarPlay", buf, 2u);
        }

        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10088BB80);
        }
        __int16 v32 = off_1008D5F28;
        sub_10002418C(v33, "_CARPLAY_DEVICE_");
        uint64_t v27 = sub_1005CCF08((uint64_t)v32, v15, (unsigned __int8 *)v33);
        if (v34 < 0) {
          operator delete(v33[0]);
        }
      }

      sub_100278B78(v27, v24, a2, 10LL, 0LL);
      sub_100397718(v24, v15, a4, a5, a6, a7, v16);
      if (v35)
      {
        id v36 = (unsigned __int8 *)v35;
        operator delete(v35);
      }
    }
  }
}

void sub_100286BA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_100286C10( uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8)
{
}

void sub_100286C18(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  id v7 = *(void **)(a1 + 232);
  uint64_t v5 = (void *)(a1 + 232);
  unint64_t v6 = v7;
  if (v7)
  {
    BOOL v12 = v5;
    do
    {
      unint64_t v13 = v6[4];
      BOOL v14 = v13 >= a2;
      if (v13 >= a2) {
        id v15 = v6;
      }
      else {
        id v15 = v6 + 1;
      }
      if (v14) {
        BOOL v12 = v6;
      }
      unint64_t v6 = (void *)*v15;
    }

    while (*v15);
    if (v12 != v5 && v12[4] <= a2 && !(*(unsigned int (**)(void))(*(void *)v12[5] + 16LL))(v12[5]))
    {
      uint64_t v16 = v12[5];
      BOOL v17 = (os_log_s *)qword_1008F7628;
      BOOL v18 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT);
      if (v18)
      {
        sub_100494958(a2, (uint64_t)__p);
        if (v21 >= 0) {
          id v19 = __p;
        }
        else {
          id v19 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 136446978;
        uint64_t v23 = v19;
        __int16 v24 = 1024;
        int v25 = a3;
        __int16 v26 = 2048;
        uint64_t v27 = a4;
        __int16 v28 = 2048;
        uint64_t v29 = a5;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "leScanComplete session %{public}s result=%d totalRXTimeMS:%llu BtMCRxTimeMS:%llu",  buf,  0x26u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }

      sub_100278B78(v18, v16, a2, 10LL, 0LL);
      sub_100398F38(v16, a2, a3, a4);
    }
  }

void sub_100286DA8(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
}

void *sub_100286DB0(void *result, uint64_t a2, uint64_t a3)
{
  id v3 = (void *)result[28];
  id v4 = result + 29;
  if (v3 != result + 29)
  {
    do
    {
      id v7 = (void *)v3[5];
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v7 + 16LL))(v7);
      if (!(_DWORD)result)
      {
        uint64_t result = (void *)v7[15];
        if (result) {
          uint64_t result = (void *)(*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*result + 64LL))( result,  0LL,  a2,  a3);
        }
      }

      BOOL v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          BOOL v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          id v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          id v3 = v9;
        }

        while (!v10);
      }

      id v3 = v9;
    }

    while (v9 != v4);
  }

  return result;
}

void *sub_100286E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100286DB0((void *)(a1 - 32), a2, a3);
}

void sub_100286E68()
{
  int v0 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LE Scans Paused", v1, 2u);
  }

void sub_100286ED0()
{
  int v0 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LE Scans Resumed", v1, 2u);
  }

void sub_100286F38(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a3;
  BOOL v10 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = 138543874;
    id v20 = v9;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v23 = 1024;
    int v24 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "notifyLeSensorStateChanged: device: %{public}@, state: %d, type: %d",  (uint8_t *)&v19,  0x18u);
  }

  unint64_t v13 = *(void **)(a1 + 232);
  BOOL v12 = (void *)(a1 + 232);
  unint64_t v11 = v13;
  if (v13)
  {
    BOOL v14 = v12;
    do
    {
      unint64_t v15 = v11[4];
      BOOL v16 = v15 >= a2;
      if (v15 >= a2) {
        BOOL v17 = v11;
      }
      else {
        BOOL v17 = v11 + 1;
      }
      if (v16) {
        BOOL v14 = v11;
      }
      unint64_t v11 = (void *)*v17;
    }

    while (*v17);
    if (v14 != v12 && v14[4] <= a2 && !(*(unsigned int (**)(void))(*(void *)v14[5] + 16LL))(v14[5]))
    {
      uint64_t v18 = v14[5];
      if (*(_BYTE *)(v18 + 272)) {
        (*(void (**)(void, unint64_t, id, uint64_t, uint64_t))(**(void **)(v18 + 120) + 280LL))( *(void *)(v18 + 120),  a2,  v9,  a4,  a5);
      }
    }
  }
}

void sub_100287090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002870AC(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  BOOL v14 = *(void **)(a1 + 232);
  unint64_t v13 = (void *)(a1 + 232);
  BOOL v12 = v14;
  if (!v14) {
    goto LABEL_13;
  }
  unint64_t v15 = v13;
  do
  {
    unint64_t v16 = v12[4];
    BOOL v17 = v16 >= a3;
    if (v16 >= a3) {
      uint64_t v18 = v12;
    }
    else {
      uint64_t v18 = v12 + 1;
    }
    if (v17) {
      unint64_t v15 = v12;
    }
    BOOL v12 = (void *)*v18;
  }

  while (*v18);
  if (v15 == v13 || v15[4] > a3 || (*(unsigned int (**)(void))(*(void *)v15[5] + 16LL))(v15[5]))
  {
LABEL_13:
    uint64_t v19 = qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      id v20 = "Received GATT command complete for unregistered central session";
      __int16 v21 = (uint8_t *)__p;
      int v22 = (os_log_s *)v19;
      uint32_t v23 = 2;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, v20, v21, v23);
    }
  }

  else
  {
    uint64_t v24 = v15[5];
    uint64_t v25 = (uint64_t)sub_100396BBC(v24, (uint64_t)v11);
    if ((v25 & 1) != 0)
    {
      if (*(void *)(v24 + 120))
      {
        sub_100278B78(v25, v24, a3, 10LL, 1LL);
        (*(void (**)(void, void, id, uint64_t, uint64_t, uint64_t))(**(void **)(v24 + 120) + 160LL))( *(void *)(v24 + 120),  0LL,  v11,  a4,  a5,  a6);
      }
    }

    else
    {
      __int16 v26 = (os_log_s *)qword_1008F7628;
      if (!os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO)) {
        goto LABEL_16;
      }
      if (!a3)
      {
        *(_DWORD *)__int128 buf = 136446210;
        id v31 = "NULL";
        id v20 = "Received GATT command complete for session %{public}s with unknown device";
        __int16 v21 = buf;
        int v22 = v26;
        uint32_t v23 = 12;
        goto LABEL_15;
      }

      sub_100494958(a3, (uint64_t)__p);
      if (v29 >= 0) {
        uint64_t v27 = __p;
      }
      else {
        uint64_t v27 = (void **)__p[0];
      }
      *(_DWORD *)__int128 buf = 136446210;
      id v31 = (const char *)v27;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Received GATT command complete for session %{public}s with unknown device",  buf,  0xCu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
  }

void sub_1002872E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100287300(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_100287308(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  BOOL v14 = *(void **)(a1 + 232);
  unint64_t v13 = (void *)(a1 + 232);
  BOOL v12 = v14;
  if (v14)
  {
    unint64_t v15 = v13;
    do
    {
      unint64_t v16 = v12[4];
      BOOL v17 = v16 >= a3;
      if (v16 >= a3) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = v12 + 1;
      }
      if (v17) {
        unint64_t v15 = v12;
      }
      BOOL v12 = (void *)*v18;
    }

    while (*v18);
    if (v15 != v13 && v15[4] <= a3 && !(*(unsigned int (**)(void))(*(void *)v15[5] + 16LL))(v15[5]))
    {
      uint64_t v20 = v15[5];
      __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v20 + 216) objectForKeyedSubscript:v11]);
      int v22 = v21;
      if (v21)
      {
        if (*(_BYTE *)(v20 + 24) || (int v23 = *(unsigned __int8 *)(v20 + 129), (v23 & 0x30) != 0))
        {
          uint64_t v24 = (os_log_s *)qword_1008F7628;
          BOOL v25 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO);
          if (v25)
          {
            sub_100494958(a3, (uint64_t)__p);
            __int16 v26 = v38 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)__int128 buf = 138543618;
            uint64_t v40 = v11;
            __int16 v41 = 2082;
            uint64_t v42 = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "Dispatching GATT indication for device %{public}@ to session %{public}s",  buf,  0x16u);
            if (v38 < 0) {
              operator delete(__p[0]);
            }
          }

          if (sub_100278B78(v25, v20, a3, 10LL, 1LL))
          {
            int v27 = *(unsigned __int8 *)(v20 + 129);
            if (v27 == 8 || v27 == 4) {
              (*(void (**)(void, void, void **, uint64_t, uint64_t, void))(**(void **)(v20 + 120)
            }
                                                                                        + 120LL))( *(void *)(v20 + 120),  0LL,  v11,  1LL,  10LL,  0LL);
          }

          sub_10039B690((void *)v20, v11, a4, a5, a6, 0LL);
          goto LABEL_48;
        }

        if (v23 != 2)
        {
          if ([v21 notificationAlerts])
          {
            uint64_t v34 = sub_1002E8E64();
            (*(void (**)(uint64_t, unint64_t, void **, uint64_t))(*(void *)v34 + 96LL))( v34,  a3,  v11,  3LL);
            goto LABEL_48;
          }

          uint64_t v35 = qword_1008F7628;
          if (!os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO)) {
            goto LABEL_48;
          }
          sub_100494958(a3, (uint64_t)__p);
          if (v38 >= 0) {
            id v36 = __p;
          }
          else {
            id v36 = (void **)__p[0];
          }
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v40 = v11;
          __int16 v41 = 2082;
          uint64_t v42 = v36;
          id v31 = "Ignoring indication for device %{public}@ on suspended session %{public}s ";
          __int16 v32 = (os_log_s *)v35;
          uint32_t v33 = 22;
LABEL_38:
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, v31, buf, v33);
          if (v38 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      else
      {
        uint64_t v29 = qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
        {
          sub_100494958(a3, (uint64_t)__p);
          if (v38 >= 0) {
            id v30 = __p;
          }
          else {
            id v30 = (void **)__p[0];
          }
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v40 = v30;
          id v31 = "Received GATT indication for session %{public}s with unknown device";
          __int16 v32 = (os_log_s *)v29;
          uint32_t v33 = 12;
          goto LABEL_38;
        }
      }

void sub_10028768C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002876C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 224);
  if (v4 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v4[5] + 16LL))(v4[5]))
      {
        uint64_t v8 = v4[5];
        if (*(void *)(v8 + 120))
        {
          uint64_t v9 = v4[4];
          if ((sub_100396BBC(v4[5], (uint64_t)v3) & 1) != 0)
          {
            BOOL v10 = (os_log_s *)qword_1008F7628;
            if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
            {
              sub_100494958(v9, (uint64_t)__p);
              id v11 = __p;
              if (v13 < 0) {
                id v11 = (void **)__p[0];
              }
              *(_DWORD *)__int128 buf = 138543618;
              id v15 = v3;
              __int16 v16 = 2082;
              BOOL v17 = v11;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Dispatching GAP name update for device %{public}@ to session %{public}s",  buf,  0x16u);
              if (v13 < 0) {
                operator delete(__p[0]);
              }
            }

            (*(void (**)(void, void, id))(**(void **)(v8 + 120) + 32LL))( *(void *)(v8 + 120),  0LL,  v3);
          }
        }
      }

      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          unint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          unint64_t v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          id v4 = v6;
        }

        while (!v7);
      }

      id v4 = v6;
    }

    while (v6 != (void *)(a1 + 232));
  }
}

void sub_100287874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100287894(uint64_t a1, void *a2)
{
}

void sub_10028789C(uint64_t a1, void *a2, uint64_t *a3)
{
  id v42 = a2;
  uint64_t v5 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v42;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GATT Device %@ services discovered", buf, 0xCu);
  }

  unint64_t v6 = *(void **)(a1 + 224);
  unsigned __int8 v43 = (void *)(a1 + 232);
  if (v6 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v6[5] + 16LL))(v6[5]))
      {
        uint64_t v8 = v6[4];
        BOOL v7 = (void *)v6[5];
        if (sub_100395D28(v7, v42))
        {
          uint64_t v9 = (uint64_t)sub_10039918C((uint64_t)v7, (uint64_t)v42);
          if ((v9 & 1) == 0) {
            sub_100287E84(v9, v8, (uint64_t)v7, v42, 1u);
          }
        }
      }

      if ((*(unsigned int (**)(void))(*(void *)v6[5] + 16LL))(v6[5]) == 1
        && [*(id *)(v6[5] + 232) count])
      {
        uint64_t v11 = v6[4];
        uint64_t v10 = v6[5];
        uint64_t v46 = 0LL;
        uint64_t v47 = 0LL;
        uint64_t v48 = 0LL;
        uint64_t v61 = 0LL;
        __int128 v59 = 0u;
        memset(v60, 0, sizeof(v60));
        __int128 v57 = 0u;
        __int128 v58 = 0u;
        __int128 v55 = 0u;
        __int128 v56 = 0u;
        *(_OWORD *)__int128 buf = 0u;
        __int128 v54 = 0u;
        sub_10020E564((uint64_t)buf);
        for (uint64_t i = *a3; i != a3[1]; i += 20LL)
        {
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
          char v13 = +[BTUUID UUIDWithBytes:length:]( &OBJC_CLASS___BTUUID,  "UUIDWithBytes:length:",  &v49,  sub_10063443C((unsigned __int8 *)i, &v49));
          BOOL v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          if ([*(id *)(v10 + 232) containsObject:v14])
          {
            id v15 = v47;
            if (v47 >= (_DWORD *)v48)
            {
              unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v47 - (_BYTE *)v46) >> 2);
              unint64_t v19 = v18 + 1;
              if (v18 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                abort();
              }
              if (0x999999999999999ALL * ((v48 - (_BYTE *)v46) >> 2) > v19) {
                unint64_t v19 = 0x999999999999999ALL * ((v48 - (_BYTE *)v46) >> 2);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((v48 - (_BYTE *)v46) >> 2) >= 0x666666666666666LL) {
                unint64_t v20 = 0xCCCCCCCCCCCCCCCLL;
              }
              else {
                unint64_t v20 = v19;
              }
              if (v20) {
                __int16 v21 = (char *)sub_100050420((uint64_t)&v48, v20);
              }
              else {
                __int16 v21 = 0LL;
              }
              int v22 = &v21[20 * v18];
              __int128 v23 = *(_OWORD *)i;
              *((_DWORD *)v22 + 4) = *(_DWORD *)(i + 16);
              *(_OWORD *)int v22 = v23;
              BOOL v25 = (char *)v46;
              uint64_t v24 = (char *)v47;
              __int16 v26 = v22;
              if (v47 != v46)
              {
                do
                {
                  __int128 v27 = *(_OWORD *)(v24 - 20);
                  *((_DWORD *)v26 - 1) = *((_DWORD *)v24 - 1);
                  *(_OWORD *)(v26 - 20) = v27;
                  v26 -= 20;
                  v24 -= 20;
                }

                while (v24 != v25);
                uint64_t v24 = (char *)v46;
              }

              BOOL v17 = v22 + 20;
              uint64_t v46 = v26;
              uint64_t v47 = v22 + 20;
              uint64_t v48 = &v21[20 * v20];
              if (v24) {
                operator delete(v24);
              }
            }

            else
            {
              __int128 v16 = *(_OWORD *)i;
              v47[4] = *(_DWORD *)(i + 16);
              *id v15 = v16;
              BOOL v17 = (_DWORD *)v15 + 5;
            }

            uint64_t v47 = v17;
            sub_1006344B4(i, __p);
            if (v51 >= 0) {
              __int16 v28 = __p;
            }
            else {
              __int16 v28 = *(_BYTE **)__p;
            }
            if (v51 >= 0) {
              uint64_t v29 = HIBYTE(v51);
            }
            else {
              uint64_t v29 = *(void *)&__p[8];
            }
            id v30 = sub_1001FD17C(buf, (uint64_t)v28, v29);
            sub_1001FD17C(v30, (uint64_t)" ", 1LL);
            if (SHIBYTE(v51) < 0) {
              operator delete(*(void **)__p);
            }
          }
        }

        if (v47 != v46 && *(void *)(v10 + 120))
        {
          id v31 = (os_log_s *)qword_1008F7628;
          BOOL v32 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO);
          if (v32)
          {
            std::stringbuf::str(&v49, (const std::stringbuf *)&buf[8]);
            int size = (char)v49.__r_.__value_.__s.__size_;
            std::string::size_type v34 = v49.__r_.__value_.__r.__words[0];
            sub_100494958(v11, (uint64_t)v44);
            uint64_t v35 = &v49;
            if (size < 0) {
              uint64_t v35 = (std::stringbuf::string_type *)v34;
            }
            id v36 = v44;
            if (v45 < 0) {
              id v36 = (void **)v44[0];
            }
            *(_DWORD *)std::stringbuf::string_type __p = 136446722;
            *(void *)&__p[4] = v35;
            *(_WORD *)&_BYTE __p[12] = 2114;
            *(void *)&__p[14] = v42;
            __int16 v51 = 2082;
            unsigned __int16 v52 = v36;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "Dispatching solicited services update [%{public}s] for device %{public}@ to session %{public}s",  __p,  0x20u);
            if (v45 < 0) {
              operator delete(v44[0]);
            }
          }

          sub_100278B78(v32, v10, v11, 10LL, 0LL);
          (*(void (**)(void, void, id, void **))(**(void **)(v10 + 120) + 184LL))( *(void *)(v10 + 120),  0LL,  v42,  &v46);
        }

        *(void *)__int128 buf = v41;
        *(void *)&buf[*(void *)(v41 - 24)] = v40;
        if (SHIBYTE(v58) < 0) {
          operator delete(*((void **)&v57 + 1));
        }
        std::streambuf::~streambuf(&buf[8]);
        std::ios::~ios(v60);
        if (v46)
        {
          uint64_t v47 = v46;
          operator delete(v46);
        }
      }

      uint64_t v37 = (void *)v6[1];
      if (v37)
      {
        do
        {
          char v38 = v37;
          uint64_t v37 = (void *)*v37;
        }

        while (v37);
      }

      else
      {
        do
        {
          char v38 = (void *)v6[2];
          BOOL v39 = *v38 == (void)v6;
          unint64_t v6 = v38;
        }

        while (!v39);
      }

      unint64_t v6 = v38;
    }

    while (v38 != v43);
  }
}

void sub_100287DEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, char a39)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  sub_10020E784((uint64_t)&a39);
  if (a23) {
    operator delete(a23);
  }

  _Unwind_Resume(a1);
}

void sub_100287E84(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5)
{
  id v8 = a4;
  uint64_t v9 = (os_log_s *)qword_1008F7628;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    sub_100494958(a2, (uint64_t)__p);
    if (v13 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136315650;
    id v15 = v11;
    __int16 v16 = 2112;
    id v17 = v8;
    __int16 v18 = 1024;
    unsigned int v19 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "sending connectionEvent session:%s device:%@ connected:%d",  buf,  0x1Cu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_100278B78(v10, a3, a2, 5LL, 1LL);
  sub_100399198(a3, v8, a5);
}

void sub_100287FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100287FD0(uint64_t a1, void *a2, uint64_t *a3)
{
}

void sub_100287FD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v13 = a2;
  BOOL v7 = *(void **)(a1 + 224);
  id v8 = (void *)(a1 + 232);
  if (v7 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v7[5] + 16LL))(v7[5]))
      {
        uint64_t v9 = (void *)v7[5];
      }

      BOOL v10 = (void *)v7[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          BOOL v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v11 = (void *)v7[2];
          BOOL v12 = *v11 == (void)v7;
          BOOL v7 = v11;
        }

        while (!v12);
      }

      BOOL v7 = v11;
    }

    while (v11 != v8);
  }
}

void sub_1002880A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002880BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void *sub_1002880C4(void *result)
{
  uint64_t v1 = (void *)result[28];
  id v2 = result + 29;
  if (v1 != result + 29)
  {
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v1[5] + 16LL))(v1[5]);
      if (!(_DWORD)result)
      {
        uint64_t v6 = v1[5];
        uint64_t result = [*(id *)(v6 + 216) count];
        if (result)
        {
          uint64_t result = *(void **)(v6 + 120);
          if (result) {
            uint64_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 192LL))(result, 0LL);
          }
        }
      }

      id v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          id v4 = v3;
          id v3 = (void *)*v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          id v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }

        while (!v5);
      }

      uint64_t v1 = v4;
    }

    while (v4 != v2);
  }

  return result;
}

void *sub_100288170(uint64_t a1)
{
  return sub_1002880C4((void *)(a1 - 40));
}

void sub_100288180(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  uint64_t v11 = 0LL;
  uint64_t v6 = sub_10028827C(a1, a3, &v11);
  if (v6 && v11)
  {
    BOOL v7 = *(void **)(v6 + 216);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (unsigned __int16)a3));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v8]);

    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v9 setObject:v10 forKey:v5];
  }
}

void sub_10028823C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10028827C(uint64_t a1, unsigned int a2, void *a3)
{
  id v3 = *(void **)(a1 + 224);
  id v4 = (void *)(a1 + 232);
  if (v3 == (void *)(a1 + 232)) {
    return 0LL;
  }
  unsigned int v6 = HIWORD(a2);
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(void *)v3[5] + 16LL))(v3[5]) == 1)
    {
      uint64_t result = v3[5];
    }

    id v8 = (void *)v3[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        id v8 = (void *)*v8;
      }

      while (v8);
    }

    else
    {
      do
      {
        uint64_t v9 = (void *)v3[2];
        BOOL v10 = *v9 == (void)v3;
        id v3 = v9;
      }

      while (!v10);
    }

    id v3 = v9;
    if (v9 == v4) {
      return 0LL;
    }
  }

  if (a3) {
    *a3 = v3[4];
  }
  return result;
}

void sub_100288328(uint64_t a1, void *a2, unsigned int a3)
{
}

void *sub_100288330(void *result)
{
  uint64_t v1 = (void *)result[28];
  id v2 = result + 29;
  if (v1 != result + 29)
  {
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v1[5] + 16LL))(v1[5]);
      if ((_DWORD)result != 3)
      {
        uint64_t result = *(void **)(v1[5] + 120LL);
        if (result) {
          uint64_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 168LL))(result, 0LL);
        }
      }

      id v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          id v4 = v3;
          id v3 = (void *)*v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          id v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }

        while (!v5);
      }

      uint64_t v1 = v4;
    }

    while (v4 != v2);
  }

  return result;
}

void *sub_1002883C4(uint64_t a1)
{
  return sub_100288330((void *)(a1 - 56));
}

void sub_1002883CC( os_unfair_lock_s *a1, void *a2, unsigned int *a3, unsigned __int16 *a4, uint64_t a5, unsigned int *a6, char a7)
{
  id v13 = a2;
  uint64_t v34 = 0LL;
  unsigned int v14 = *a3;
  uint64_t v15 = sub_10028827C((uint64_t)a1, *a3, &v34);
  uint64_t v16 = v15;
  uint64_t v17 = v34;
  if (v15) {
    BOOL v18 = v34 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100666408();
    }
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_10088BB40);
    }
    BOOL v32 = &off_10087FAA8;
    uint32_t v33 = 0LL;
    sub_1003864C8(qword_1008D9260, a6, 242LL, (uint64_t)&v32, (int *)a3);
    BOOL v32 = &off_10087FAA8;
    int size = v33;
    if (v33) {
      goto LABEL_37;
    }
  }

  else if (*(_BYTE *)(v15 + 24) || (*(_BYTE *)(v15 + 129) & 0x30) != 0)
  {
    if (!sub_10039F188(v15, v13, 1) && *(_BYTE *)(v16 + 28))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG))
      {
        sub_100494958(v34, (uint64_t)&v32);
        sub_1006663C4();
      }

      sub_1002816A0(a1, v34, v13);
    }

    BOOL v20 = sub_10056AAC8(a5);
    if (v20)
    {
      sub_100278B78(v20, v16, v34, 10LL, 0LL);
      LODWORD(__p.__r_.__value_.__l.__data_) = (unsigned __int16)v14;
      sub_10039D578((void *)v16, 0LL, v13, (unsigned int *)&__p, a4, a6);
      if ((a7 & 1) != 0)
      {
        uint64_t v21 = sub_1002E9074();
        p_p = &__p;
        sub_1004949D8(v34, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        __int128 v23 = *(unsigned int **)(a5 + 8);
        uint64_t v29 = &off_10087FAA8;
        id v30 = v23;
        if (v23) {
          sub_1002CD1E0((uint64_t)v23);
        }
        (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(void *)v21 + 40LL))( v21,  4LL,  p_p,  v13,  &v29);
        uint64_t v29 = &off_10087FAA8;
        if (v30) {
          sub_1002CD254(v30);
        }
      }

      goto LABEL_38;
    }

    unint64_t v24 = *a4;
    if (sub_10056AAD8(a5) >= v24)
    {
      if (qword_1008D9268 != -1) {
        dispatch_once(&qword_1008D9268, &stru_10088BB40);
      }
      uint64_t v25 = qword_1008D9260;
      uint64_t v26 = sub_10056AAF0(a5);
      uint64_t v27 = *a4;
      uint64_t v28 = sub_10056AAD8(a5);
      sub_10056AB04(&__p, (const void *)(v26 + v27), v28 - *a4);
      int v31 = 0;
      sub_1003864C8(v25, a6, 0LL, (uint64_t)&__p, &v31);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    }

    else
    {
      if (qword_1008D9268 != -1) {
        dispatch_once(&qword_1008D9268, &stru_10088BB40);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
      __p.__r_.__value_.__l.__size_ = 0LL;
      sub_1003864C8(qword_1008D9260, a6, 7LL, (uint64_t)&__p, (int *)a3);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    }

    int size = (unsigned int *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_) {
LABEL_37:
    }
      sub_1002CD254(size);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(v17, (uint64_t)&v32);
      sub_100666380();
    }

    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_10088BB40);
    }
    id v36 = &off_10087FAA8;
    uint64_t v37 = 0LL;
    sub_1003864C8(qword_1008D9260, a6, 242LL, (uint64_t)&v36, (int *)a3);
    id v36 = &off_10087FAA8;
    int size = v37;
    if (v37) {
      goto LABEL_37;
    }
  }

void sub_1002887F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  _Unwind_Resume(a1);
}

void sub_1002888A0( uint64_t a1, void *a2, unsigned int *a3, unsigned __int16 *a4, uint64_t a5, unsigned int *a6, char a7)
{
}

void sub_1002888A8(os_unfair_lock_s *a1, void *a2, unsigned int **a3, unsigned int *a4, int a5)
{
  id v9 = a2;
  BOOL v10 = *a3;
  if (*a3 == a3[1])
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_FAULT)) {
      sub_100666468();
    }
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_10088BB40);
    }
    int v22 = &off_10087FAA8;
    __int128 v23 = 0LL;
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    sub_1003864C8(qword_1008D9260, a4, 242LL, (uint64_t)&v22, (int *)&__p);
    int v22 = &off_10087FAA8;
LABEL_17:
    uint64_t v15 = v23;
    if (!v23) {
      goto LABEL_42;
    }
    goto LABEL_18;
  }

  uint64_t v24 = 0LL;
  uint64_t v11 = sub_10028827C((uint64_t)a1, *v10, &v24);
  uint64_t v12 = v11;
  uint64_t v13 = v24;
  if (v11) {
    BOOL v14 = v24 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100666408();
    }
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_10088BB40);
    }
    int v22 = &off_10087FAA8;
    __int128 v23 = 0LL;
    sub_1003864C8(qword_1008D9260, a4, 242LL, (uint64_t)&v22, (int *)v10);
    int v22 = &off_10087FAA8;
    goto LABEL_17;
  }

  if (*(_BYTE *)(v11 + 24) || (*(_BYTE *)(v11 + 129) & 0x30) != 0)
  {
    uint64_t v16 = sub_10039F188(v11, v9, 1);
    if (!(_DWORD)v16 && *(_BYTE *)(v12 + 28))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG))
      {
        sub_100494958(v24, (uint64_t)&v22);
        sub_1006664D8();
      }

      sub_1002816A0(a1, v24, v9);
    }

    uint64_t v17 = a3[1];
    while (v10 != v17)
    {
      unsigned int *v10 = *(unsigned __int16 *)v10;
      v10 += 8;
    }

    sub_100278B78(v16, v12, v24, 10LL, 0LL);
    sub_10039D76C((void *)v12, 0LL, v9, a3, a4);
    if (a5)
    {
      uint64_t v18 = sub_1002E9074();
      sub_1004949D8(v24, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v20 = &off_10087FAA8;
      uint64_t v21 = 0LL;
      (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(void *)v18 + 40LL))( v18,  4LL,  p_p,  v9,  &v20);
      BOOL v20 = &off_10087FAA8;
      if (v21) {
        sub_1002CD254(v21);
      }
    }

    goto LABEL_42;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_100494958(v13, (uint64_t)&v22);
    sub_100666494();
  }

  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_10088BB40);
  }
  uint64_t v26 = &off_10087FAA8;
  uint64_t v27 = 0LL;
  sub_1003864C8(qword_1008D9260, a4, 242LL, (uint64_t)&v26, (int *)v10);
  uint64_t v26 = &off_10087FAA8;
  uint64_t v15 = v27;
  if (v27) {
LABEL_18:
  }
    sub_1002CD254(v15);
LABEL_42:
}

void sub_100288C40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  _Unwind_Resume(a1);
}

void sub_100288CC8(uint64_t a1, void *a2, unsigned int **a3, unsigned int *a4, int a5)
{
}

void sub_100288CD0(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG)) {
    sub_10066651C(a1, v4);
  }
  sub_100494958(*(void *)(a1 + 40), (uint64_t)&__str);
  BOOL v5 = __p;
  sub_100494958(*(void *)(a1 + 40), (uint64_t)__p);
  if ((v14 & 0x80u) == 0) {
    int64_t v6 = v14;
  }
  else {
    int64_t v6 = (int64_t)__p[1];
  }
  if ((v14 & 0x80u) != 0) {
    BOOL v5 = (void **)__p[0];
  }
  BOOL v7 = (char *)v5 + v6;
  if (v6 >= 1)
  {
    id v8 = v5;
    do
    {
      id v9 = memchr(v8, 45, v6);
      if (!v9) {
        break;
      }
      if (*v9 == 45) {
        goto LABEL_14;
      }
      id v8 = (void **)(v9 + 1);
      int64_t v6 = v7 - (_BYTE *)v8;
    }

    while (v7 - (_BYTE *)v8 > 0);
  }

  id v9 = v7;
LABEL_14:
  if (v9 == v7) {
    std::string::size_type v10 = -1LL;
  }
  else {
    std::string::size_type v10 = v9 - (_BYTE *)v5;
  }
  std::string::basic_string(&v16, &__str, 0LL, v10, (std::allocator<char> *)&v17);
  if ((v16.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v11 = &v16;
  }
  else {
    uint64_t v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11));
  (*(void (**)(uint64_t, void *, void, uint64_t))(*(void *)a2 + 24LL))(a2, v12, *(void *)(a1 + 32), 1LL);
}

void sub_100288E40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  _Unwind_Resume(a1);
}

void sub_100288E98(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v4 = v2;
  if (qword_1008D5F30 == -1)
  {
    id v3 = v2;
  }

  else
  {
    dispatch_once(&qword_1008D5F30, &stru_10088BB80);
    id v3 = v4;
  }

  sub_1005C91A4((uint64_t)off_1008D5F28, v3);
}

void sub_100288F00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100288F14(os_unfair_lock_s *a1, unsigned int *a2, void *a3, int a4)
{
  id v7 = a3;
  uint64_t v15 = 0LL;
  unsigned int v8 = *a2;
  uint64_t v9 = sub_10028827C((uint64_t)a1, *a2, &v15);
  uint64_t v10 = v9;
  if (v9) {
    BOOL v11 = v15 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100666408();
    }
  }

  else
  {
    uint64_t v12 = sub_10039F188(v9, v7, 1);
    if (!(_DWORD)v12 && *(_BYTE *)(v10 + 28))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG))
      {
        sub_100494958(v15, (uint64_t)v14);
        sub_1006665E8();
      }

      sub_1002816A0(a1, v15, v7);
    }

    sub_100278B78(v12, v10, v15, 10LL, 0LL);
    unsigned int v13 = (unsigned __int16)v8;
    sub_10039DA5C((void *)v10, 0LL, &v13, v7, a4);
  }
}

void sub_100289080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002890A0(uint64_t a1, unsigned int *a2, void *a3, int a4)
{
}

void sub_1002890A8(uint64_t a1, unsigned int *a2, void *a3)
{
  id v5 = a3;
  uint64_t v13 = 0LL;
  unsigned int v6 = *a2;
  uint64_t v7 = sub_10028827C(a1, *a2, &v13);
  unsigned int v8 = (void *)v7;
  uint64_t v9 = v13;
  if (v7) {
    BOOL v10 = v13 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100666408();
    }
  }

  else
  {
    if (*(void *)(v7 + 120) && *(_BYTE *)(v7 + 24))
    {
      uint64_t v11 = sub_1002E8E64();
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v11 + 40LL))(v11, v9, 10LL, 0LL);
    }

    unsigned int v12 = (unsigned __int16)v6;
    sub_10039DBD0(v8, 0LL, &v12, v5);
  }
}

void sub_10028918C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002891A0(uint64_t a1, unsigned int *a2, void *a3)
{
}

BOOL sub_1002891A8(uint64_t a1, void *a2, BOOL *a3)
{
  id v5 = a2;
  unsigned int v6 = sub_100284258(a1, v5, 0);
  uint64_t v7 = (void *)(a1 + 232);
  if (a3 && v7 != v6) {
    *a3 = *(_DWORD *)(v6[5] + 32LL) == 2;
  }
  BOOL v8 = v7 != v6;

  return v8;
}

void sub_10028921C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10028922C(uint64_t a1, void *a2, BOOL *a3)
{
  return sub_1002891A8(a1 - 64, a2, a3);
}

void sub_100289234(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  BOOL v8 = sub_100284258(a1, v7, 0);
  uint64_t v9 = v8;
  if ((void *)(a1 + 232) == v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_10066662C();
    }
  }

  else
  {
    uint64_t v10 = v8[5];
    if (*(_DWORD *)(v10 + 32) == 2)
    {
      uint64_t v11 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(v9[4], (uint64_t)__p);
        unsigned int v12 = (SBYTE7(v18) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int128 buf = 138543618;
        id v30 = v7;
        __int16 v31 = 2082;
        BOOL v32 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Dispatching programmatic pairing request for device %{public}@ to session %{public}s",  buf,  0x16u);
        if (SBYTE7(v18) < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v13 = *(void *)(v10 + 120);
      if (v13)
      {
        (*(void (**)(uint64_t, void, id, uint64_t, uint64_t))(*(void *)v13 + 128LL))(v13, 0LL, v7, a3, a4);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(v9[4], (uint64_t)__p);
        sub_100666690();
      }
    }

    else
    {
      unsigned __int8 v14 = (os_log_s *)qword_1008F7628;
      if ((_DWORD)a3 == 5)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
          sub_1006666DC();
        }
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        *(_OWORD *)std::string __p = 0u;
        __int128 v18 = 0u;
        sub_1006194CC(__p, 0LL, 0LL);
        if (qword_1008D5F20 != -1) {
          dispatch_once(&qword_1008D5F20, &stru_10088BB60);
        }
        sub_100623058(qword_1008D5F18, 0LL, v7, 0, (uint64_t)__p);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(v9[4], (uint64_t)__p);
          uint64_t v15 = (SBYTE7(v18) & 0x80u) == 0 ? __p : (void **)__p[0];
          *(_DWORD *)__int128 buf = 138543618;
          id v30 = v7;
          __int16 v31 = 2082;
          BOOL v32 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Displaying pairing request alert for device %{public}@ on behalf of session %{public}s",  buf,  0x16u);
          if (SBYTE7(v18) < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v16 = sub_1002E8E64();
        (*(void (**)(uint64_t, id, uint64_t, uint64_t))(*(void *)v16 + 112LL))(v16, v7, a3, a4);
        if ((_DWORD)a3 == 1)
        {
          if (qword_1008D5F20 != -1) {
            dispatch_once(&qword_1008D5F20, &stru_10088BB60);
          }
          sub_100622D00(qword_1008D5F18, v7, 1, a4);
        }
      }
    }
  }
}

void sub_100289584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002895B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002895B8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  sub_100242AE0(20LL, 0LL, v5);
  uint64_t v6 = sub_1002E8E64();
  (*(void (**)(uint64_t, id))(*(void *)v6 + 128LL))(v6, v5);
  id v7 = *(void **)(a1 + 224);
  BOOL v8 = (void *)(a1 + 232);
  if (v7 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v9 = v7[5];
      if (*(_DWORD *)(v9 + 32))
      {
        uint64_t v10 = *(void *)(v9 + 120);
        if (v10) {
          (*(void (**)(uint64_t, void, id, uint64_t))(*(void *)v10 + 136LL))(v10, 0LL, v5, a3);
        }
      }

      uint64_t v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          unsigned int v12 = v11;
          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          unsigned int v12 = (void *)v7[2];
          BOOL v13 = *v12 == (void)v7;
          id v7 = v12;
        }

        while (!v13);
      }

      id v7 = v12;
    }

    while (v12 != v8);
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088BB80);
  }
  unsigned __int8 v14 = off_1008D5F28;
  sub_10002418C(__p, "_CTKD_");
  int v15 = sub_1005CE5A8((uint64_t)v14, v5, (uint64_t)__p);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Pairing completed, checking if %{public}@ has tag _CTKD_ %d",  buf,  0x12u);
  }

  if (v15)
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10088BB00);
    }
    char v17 = off_1008D5F08;
    sub_100241F90(buf, v5);
    BOOL v18 = sub_100595874((uint64_t)v17, buf);
    sub_100285584(a1, v5, v18, a3);
  }

  if (!(_DWORD)a3)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10088BB80);
    }
    __int128 v19 = off_1008D5F28;
    sub_10002418C(v30, "_UNPAIR_AFTER_DISCONNECTION_");
    int v20 = sub_1005CE5A8((uint64_t)v19, v5, (uint64_t)v30);
    char v21 = v20;
    if (v31 < 0)
    {
      operator delete(v30[0]);
      if ((v21 & 1) == 0) {
        goto LABEL_22;
      }
    }

    else if (!v20)
    {
      goto LABEL_22;
    }

    __int128 v22 = *(void **)(a1 + 224);
    if (v22 != v8)
    {
      while (1)
      {
        uint64_t v23 = v22[5];
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v23 + 16LL))(v23))
        {
        }

        __int128 v24 = (void *)v22[1];
        if (v24)
        {
          do
          {
            __int128 v25 = v24;
            __int128 v24 = (void *)*v24;
          }

          while (v24);
        }

        else
        {
          do
          {
            __int128 v25 = (void *)v22[2];
            BOOL v13 = *v25 == (void)v22;
            __int128 v22 = v25;
          }

          while (!v13);
        }

        __int128 v22 = v25;
        if (v25 == v8) {
          goto LABEL_22;
        }
      }

      __int128 v26 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(v22[4], (uint64_t)v29);
        sub_100666740((uint64_t)v5, v29, (uint64_t)v37, v26);
      }

      uint64_t v36 = 0LL;
      __int128 v35 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_10002418C(v27, (char *)[*(id *)(v23 + 88) UTF8String]);
      sub_10040CF14((uint64_t)buf, (__int128 *)v27, *(_BYTE *)(v23 + 129), v5, 0, 178);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (qword_1008D9298 != -1) {
        dispatch_once(&qword_1008D9298, &stru_10088BCC0);
      }
      sub_10040D074(qword_1008D9290, (uint64_t)buf);
    }
  }

void sub_1002899A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30)
{
  _Unwind_Resume(a1);
}

void sub_100289A28(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_100289A30(void *a1, void *a2)
{
  id v9 = a2;
  id v3 = (void *)a1[28];
  if (v3 != a1 + 29)
  {
    do
    {
      uint64_t v4 = v3[5];
      if (*(_DWORD *)(v4 + 32))
      {
        uint64_t v5 = *(void *)(v4 + 120);
        if (v5)
        {
          (*(void (**)(uint64_t, void, id))(*(void *)v5 + 144LL))(v5, 0LL, v9);
          (*(void (**)(void *, id, void))(*a1 + 64LL))(a1, v9, 0LL);
        }
      }

      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          id v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          id v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          id v3 = v7;
        }

        while (!v8);
      }

      id v3 = v7;
    }

    while (v7 != a1 + 29);
  }
}

void sub_100289AF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100289B04(uint64_t a1, void *a2)
{
}

void sub_100289B0C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 224);
  id v7 = (void *)(a1 + 232);
  if (v6 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v6[5] + 16LL))(v6[5]))
      {
        uint64_t v11 = v6[5];
        if (*(void *)(v11 + 120))
        {
          if ((sub_100396BBC(v6[5], (uint64_t)v5) & 1) != 0)
          {
            (*(void (**)(void, void, id, uint64_t))(**(void **)(v11 + 120) + 152LL))( *(void *)(v11 + 120),  0LL,  v5,  a3);
            if (sub_100395D28((void *)v11, v5))
            {
              uint64_t v12 = (uint64_t)sub_10039918C(v11, (uint64_t)v5);
              if ((v12 & 1) == 0) {
                sub_100287E84(v12, v6[4], v11, v5, 1u);
              }
            }
          }
        }
      }

      BOOL v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          BOOL v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          id v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }

        while (!v10);
      }

      uint64_t v6 = v9;
    }

    while (v9 != v7);
  }

  if ((a3 & 1) != 0)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10088BB80);
    }
    id v13 = sub_1005D7650((uint64_t)off_1008D5F28, v5);
    unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

    if (v14)
    {
      int v15 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
      {
        int v16 = 138412290;
        id v17 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Resetting FindMy invalid LTK's for device %@",  (uint8_t *)&v16,  0xCu);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10088BB80);
      }
      sub_1005D7FA8((uint64_t)off_1008D5F28, v5);
    }
  }
}

void sub_100289D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100289D38(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_100289D40(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = mach_continuous_time() * *(unsigned int *)(a1 + 184) / *(unsigned int *)(a1 + 188) / 0x3B9ACA00;
    uint64_t v4 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 134217984;
      uint64_t v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "System Keybag was unlocked, boot time is %lld sec",  (uint8_t *)&v7,  0xCu);
    }

    uint64_t v5 = sub_1002E8D54();
    sub_10024E060(v5 + 448, a1 + 80);
    if (*(_BYTE *)(a1 + 312))
    {
      uint64_t v6 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v7) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "System Keybag was unlocked but buddyHasNotCompleted is true",  (uint8_t *)&v7,  2u);
      }
    }

    else
    {
      sub_100289EA4(a1, v3);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_1006667B0();
  }

void sub_100289EA4(uint64_t a1, unint64_t a2)
{
  id v4 = sub_100283A1C();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = (os_log_s *)qword_1008F7680;
  if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 absoluteString]);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v29 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Reading state restoration data after unlock at %@",  buf,  0xCu);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 URLByDeletingLastPathComponent]);
  id v27 = 0LL;
  unsigned __int8 v10 = [v8 createDirectoryAtURL:v9 withIntermediateDirectories:1 attributes:0 error:&v27];
  id v11 = v27;

  if ((v10 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR)) {
    sub_100666808();
  }
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v13 = sub_100283A1C();
  unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 path]);
  unsigned __int8 v16 = [v12 fileExistsAtPath:v15];

  if ((v16 & 1) != 0)
  {
    id v17 = sub_100283A1C();
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithContentsOfURL:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithContentsOfURL:",  v18));

    if (a2 < 0x12D)
    {
      uint64_t v23 = sub_100404FE8();
      uint64_t v24 = 1000LL * (unsigned __int16)word_1008D925C;
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      void v25[2] = sub_10028AC74;
      v25[3] = &unk_1008800B8;
      void v25[5] = a1;
      __int128 v22 = v25;
      v25[4] = v19;
      sub_100405460(v23, v24, v25);
    }

    else
    {
      uint64_t v20 = sub_100404FE8();
      uint64_t v21 = 1000LL * (unsigned __int16)word_1008D925E;
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      void v26[2] = sub_10028A22C;
      v26[3] = &unk_1008800B8;
      void v26[5] = a1;
      __int128 v22 = v26;
      uint8_t v26[4] = v19;
      sub_100405460(v20, v21, v26);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR))
  {
    sub_1006667DC();
  }
}

void sub_10028A188( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10028A224(uint64_t a1, char a2)
{
}

void sub_10028A22C(uint64_t a1)
{
}

void sub_10028A238(uint64_t a1, void *a2)
{
  id v51 = a2;
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKey:@"centralSessions"]);
  unsigned __int16 v52 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKey:@"peripheralSessions"]);
  uint64_t v54 = sub_1002E8E64();
  id v2 = (os_log_s *)qword_1008F7680;
  if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v53 allKeys]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v52 allKeys]);
    *(_DWORD *)__int128 buf = 138543618;
    *(void *)&uint8_t buf[4] = v3;
    __int16 v69 = 2114;
    char v70 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "RestoreAppSessions - Central:%{public}@ - Peripheral:%{public}@",  buf,  0x16u);
  }

  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  obuint64_t j = v53;
  id v5 = [obj countByEnumeratingWithState:&v63 objects:v72 count:16];
  uint64_t v6 = 0LL;
  if (v5)
  {
    uint64_t v7 = *(void *)v64;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v64 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v63 + 1) + 8LL * (void)v8);
        unsigned __int8 v10 = (os_log_s *)qword_1008F7680;
        if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Restoring session for %{public}@",  buf,  0xCu);
        }

        id v11 = (void **)operator new(0x1D0uLL);
        sub_100390030();
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([obj objectForKeyedSubscript:v9]);
        char v13 = (*((uint64_t (**)(void **, void *))*v11 + 7))(v11, v12);

        if ((v13 & 1) == 0)
        {
          uint64_t v17 = qword_1008F7680;
          if (!os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR)) {
            goto LABEL_15;
          }
          *(_DWORD *)__int128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v9;
          int v15 = (os_log_s *)v17;
          unsigned __int8 v16 = "Failed: Restoring data for Central session: %{public}@";
          goto LABEL_31;
        }

        if (sub_10027D83C(a1, v11[11], v11[12]))
        {
          uint64_t v14 = qword_1008F7680;
          if (!os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR))
          {
LABEL_15:
            (*((void (**)(void **))*v11 + 1))(v11);
            goto LABEL_28;
          }

          *(_DWORD *)__int128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v9;
          int v15 = (os_log_s *)v14;
          unsigned __int8 v16 = "Failed: Central session already exists: %{public}@";
LABEL_31:
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v16, buf, 0xCu);
          goto LABEL_15;
        }

        *(void *)__int128 buf = 0LL;
        sub_1000B0400((uint64_t)buf);
        BOOL v18 = (void *)*(__int16 *)&buf[4];
        v11[1] = (void *)*(int *)buf;
        _DWORD v11[2] = v18;
        (*((void (**)(void **, uint64_t))*v11 + 3))(v11, 2LL);
        *((_BYTE *)v11 + 24) = 1;
        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-central-%@restore-%d",  v11[11],  &stru_1008A57D8,  v6));
        unint64_t v62 = 0LL;
        if (qword_1008D61A8 != -1) {
          dispatch_once(&qword_1008D61A8, &stru_10088BCE0);
        }
        uint64_t v20 = qword_1008D61A0;
        id v21 = v19;
        sub_10002418C(buf, (char *)[v21 UTF8String]);
        int v22 = sub_100496120(v20, (uint64_t)buf, &v62, 4LL);
        int v23 = v22;
        if (v71 < 0)
        {
          operator delete(*(void **)buf);
          if (!v23)
          {
LABEL_24:
            uint64_t v61 = 0LL;
            if (qword_1008D61A8 != -1) {
              dispatch_once(&qword_1008D61A8, &stru_10088BCE0);
            }
            uint64_t v61 = sub_100496954((void *)qword_1008D61A0, v62);
            (**(void (***)(uint64_t))v54)(v54);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 80LL))(v54, v61);
            *(void *)__int128 buf = &v61;
            sub_100029574((uint64_t **)(a1 + 224), (unint64_t *)&v61, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] = (uint64_t)v11;
            (*((void (**)(void **, uint64_t))*v11 + 8))(v11, v61);
            goto LABEL_27;
          }
        }

        else if (!v22)
        {
          goto LABEL_24;
        }

        uint64_t v24 = (os_log_s *)qword_1008F7680;
        if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR))
        {
          __int128 v25 = v11[11];
          *(_DWORD *)__int128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v25;
          _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Failed: Trying to attaching to Central session: %{public}@",  buf,  0xCu);
        }

        (*((void (**)(void **))*v11 + 1))(v11);
LABEL_27:

        uint64_t v6 = (v6 + 1);
LABEL_28:
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v5 != v8);
      id v26 = [obj countByEnumeratingWithState:&v63 objects:v72 count:16];
      id v5 = v26;
    }

    while (v26);
  }

  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  id v27 = v52;
  id v28 = [v27 countByEnumeratingWithState:&v57 objects:v67 count:16];
  if (!v28) {
    goto LABEL_63;
  }
  uint64_t v29 = *(void *)v58;
  uint64_t v30 = v6;
  do
  {
    char v31 = 0LL;
    do
    {
      if (*(void *)v58 != v29) {
        objc_enumerationMutation(v27);
      }
      uint64_t v32 = *(void *)(*((void *)&v57 + 1) + 8LL * (void)v31);
      char v33 = (os_log_s *)qword_1008F7680;
      if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Restoring Peripheral session for %{public}@",  buf,  0xCu);
      }

      uint64_t v34 = (void **)operator new(0x110uLL);
      sub_10039C11C();
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v32]);
      char v36 = (*((uint64_t (**)(void **, void *))*v34 + 7))(v34, v35);

      if ((v36 & 1) == 0)
      {
        uint64_t v40 = qword_1008F7680;
        if (!os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR)) {
          goto LABEL_45;
        }
        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v32;
        char v38 = (os_log_s *)v40;
        BOOL v39 = "Failed: Restoring Data for Peripheral session: %{public}@";
        goto LABEL_61;
      }

      if (sub_10027D83C(a1, v34[11], v34[12]))
      {
        uint64_t v37 = qword_1008F7680;
        if (!os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR))
        {
LABEL_45:
          (*((void (**)(void **))*v34 + 1))(v34);
          goto LABEL_58;
        }

        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v32;
        char v38 = (os_log_s *)v37;
        BOOL v39 = "Failed: Peripheral session already exists %{public}@";
LABEL_61:
        _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, v39, buf, 0xCu);
        goto LABEL_45;
      }

      *(void *)__int128 buf = 0LL;
      sub_1000B0400((uint64_t)buf);
      uint64_t v41 = (void *)*(__int16 *)&buf[4];
      v34[1] = (void *)*(int *)buf;
      _DWORD v34[2] = v41;
      (*((void (**)(void **, uint64_t))*v34 + 3))(v34, 2LL);
      *((_BYTE *)v34 + 24) = 1;
      __int16 v42 = word_1008D925A++;
      *((_WORD *)v34 + 112) = v42;
      unsigned __int8 v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-peripheral-restore-%d",  v34[11],  v30));
      unint64_t v62 = 0LL;
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_10088BCE0);
      }
      uint64_t v44 = qword_1008D61A0;
      id v45 = v43;
      sub_10002418C(buf, (char *)[v45 UTF8String]);
      int v46 = sub_100496120(v44, (uint64_t)buf, &v62, 4LL);
      int v47 = v46;
      if (v71 < 0)
      {
        operator delete(*(void **)buf);
        if (!v47)
        {
LABEL_54:
          uint64_t v61 = 0LL;
          if (qword_1008D61A8 != -1) {
            dispatch_once(&qword_1008D61A8, &stru_10088BCE0);
          }
          uint64_t v61 = sub_100496954((void *)qword_1008D61A0, v62);
          (**(void (***)(uint64_t))v54)(v54);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 88LL))(v54, v61);
          *(void *)__int128 buf = &v61;
          sub_100029574((uint64_t **)(a1 + 224), (unint64_t *)&v61, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] = (uint64_t)v34;
          (*((void (**)(void **, uint64_t))*v34 + 8))(v34, v61);
          goto LABEL_57;
        }
      }

      else if (!v46)
      {
        goto LABEL_54;
      }

      uint64_t v48 = (os_log_s *)qword_1008F7680;
      if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR))
      {
        std::stringbuf::string_type v49 = v34[11];
        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v49;
        _os_log_error_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "Failed: Attaching to Peripheral session: %{public}@",  buf,  0xCu);
      }

      (*((void (**)(void **))*v34 + 1))(v34);
LABEL_57:

      uint64_t v30 = (v30 + 1);
LABEL_58:
      char v31 = (char *)v31 + 1;
    }

    while (v28 != v31);
    id v50 = [v27 countByEnumeratingWithState:&v57 objects:v67 count:16];
    id v28 = v50;
  }

  while (v50);
LABEL_63:
}

void sub_10028AB54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10028AC74(uint64_t a1)
{
}

uint64_t sub_10028AC80(uint64_t a1, int a2, int a3)
{
  switch(a2)
  {
    case 2:
      if (!a3) {
        a1 = sub_10028ACD0(a1);
      }
      break;
    case 3:
      if (!a3) {
        a1 = sub_10028AE60(a1);
      }
      break;
    case 6:
      if (!a3)
      {
        uint64_t v3 = 1LL;
        goto LABEL_8;
      }

      break;
    case 7:
      if (!a3)
      {
        uint64_t v3 = 0LL;
LABEL_8:
        a1 = (uint64_t)sub_10028AFE8((void *)a1, v3);
      }

      break;
    default:
      return a1;
  }

  return a1;
}

uint64_t sub_10028ACD0(uint64_t a1)
{
  unsigned __int8 v9 = 0;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088BBA0);
  }
  uint64_t result = sub_100432384((uint64_t)off_1008D60A8, &v9);
  uint64_t v3 = *(void **)(a1 + 224);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      id v4 = (void *)v3[5];
      uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16LL))(v4);
      if ((_DWORD)result == 3)
      {
        id v5 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 67109120;
          int v11 = v9;
          _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "classic: notifyDiscoverabiltyChanged: %d",  buf,  8u);
        }

        uint64_t result = v4[27];
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 16LL))(result, 0LL, v9);
        }
      }

      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }

        while (!v8);
      }

      uint64_t v3 = v7;
    }

    while (v7 != (void *)(a1 + 232));
  }

  return result;
}

uint64_t sub_10028AE60(uint64_t a1)
{
  unsigned __int8 v9 = 0;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088BBA0);
  }
  uint64_t result = sub_100433078((uint64_t)off_1008D60A8, &v9);
  uint64_t v3 = *(void **)(a1 + 224);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      id v4 = (void *)v3[5];
      uint64_t result = (*(uint64_t (**)(void *))(*v4 + 16LL))(v4);
      if ((_DWORD)result == 3)
      {
        id v5 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109120;
          int v11 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "classic: notifyConnectabilityChanged: %d",  buf,  8u);
        }

        uint64_t result = v4[27];
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 8LL))(result, 0LL, v9);
        }
      }

      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }

        while (!v8);
      }

      uint64_t v3 = v7;
    }

    while (v7 != (void *)(a1 + 232));
  }

  return result;
}

void *sub_10028AFE8(void *result, uint64_t a2)
{
  id v2 = (void *)result[28];
  uint64_t v3 = result + 29;
  if (v2 != result + 29)
  {
    do
    {
      id v5 = (void *)v2[5];
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v5 + 16LL))(v5);
      if ((_DWORD)result == 3)
      {
        uint64_t v6 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109120;
          int v11 = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "classic: notifyInquiryStateChanged: %d",  buf,  8u);
        }

        uint64_t result = (void *)v5[27];
        if (result) {
          uint64_t result = (void *)(*(uint64_t (**)(void *, void, uint64_t))(*result + 24LL))(result, 0LL, a2);
        }
      }

      uint64_t v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          BOOL v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          id v2 = v8;
        }

        while (!v9);
      }

      id v2 = v8;
    }

    while (v8 != v3);
  }

  return result;
}

uint64_t sub_10028B130(uint64_t a1, int a2, int a3)
{
  return sub_10028AC80(a1 - 128, a2, a3);
}

void sub_10028B138(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3 = *(void **)(a1 + 224);
  id v4 = (void *)(a1 + 232);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v7 = (void *)v3[5];
      if ((*(unsigned int (**)(void *))(*v7 + 16LL))(v7) == 3)
      {
        BOOL v8 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109120;
          int v13 = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "classic: pairingStarted incoming?: %d",  buf,  8u);
        }

        if (v7[28]) {
          sub_1003A04A8((uint64_t)v7, 0LL, a2);
        }
      }

      BOOL v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          unsigned __int8 v10 = v9;
          BOOL v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          unsigned __int8 v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }

        while (!v11);
      }

      uint64_t v3 = v10;
    }

    while (v10 != v4);
  }

void sub_10028B288(uint64_t a1, unsigned __int8 *a2, int a3)
{
}

void sub_10028B290(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3 = *(void **)(a1 + 224);
  id v4 = (void *)(a1 + 232);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v7 = (void *)v3[5];
      if ((*(unsigned int (**)(void *))(*v7 + 16LL))(v7) == 3)
      {
        BOOL v8 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109376;
          int v13 = a3;
          __int16 v14 = 1024;
          int v15 = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "classic: pairingComplete: %d (0x%x)",  buf,  0xEu);
        }

        if (v7[28]) {
          sub_1003A05FC((uint64_t)v7, 0LL, a2, a3);
        }
      }

      BOOL v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          unsigned __int8 v10 = v9;
          BOOL v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          unsigned __int8 v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }

        while (!v11);
      }

      uint64_t v3 = v10;
    }

    while (v10 != v4);
  }

void sub_10028B3F0(uint64_t a1, unsigned __int8 *a2, int a3)
{
}

void sub_10028B3F8(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3 = *(void **)(a1 + 224);
  id v4 = (void *)(a1 + 232);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v7 = (void *)v3[5];
      if ((*(unsigned int (**)(void *))(*v7 + 16LL))(v7) == 3)
      {
        BOOL v8 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109376;
          int v13 = a3;
          __int16 v14 = 1024;
          int v15 = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "classic: deviceWillUnpair: %d (0x%x)",  buf,  0xEu);
        }

        if (v7[28]) {
          sub_1003A0770((uint64_t)v7, 0LL, a2);
        }
      }

      BOOL v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          unsigned __int8 v10 = v9;
          BOOL v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          unsigned __int8 v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }

        while (!v11);
      }

      uint64_t v3 = v10;
    }

    while (v10 != v4);
  }

void sub_10028B558(uint64_t a1, unsigned __int8 *a2, int a3)
{
}

void sub_10028B560(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088BB80);
  }
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133],  1u,  0,  0LL,  0LL,  (unsigned __int8 *)v20);
  uint64_t v6 = sub_100241F94((const unsigned __int8 *)v20);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = (os_log_s *)qword_1008F7628;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = a2[1332];
      v17[0] = 67109376;
      v17[1] = v9;
      __int16 v18 = 2048;
      uint64_t v19 = sub_1003D999C((uint64_t)a2);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "UN: notifyDeviceConnected: ACL? %d, sevices: %lu",  (uint8_t *)v17,  0x12u);
    }

    unsigned __int8 v10 = *(void **)(a1 + 224);
    BOOL v11 = (void *)(a1 + 232);
    if (v10 != (void *)(a1 + 232))
    {
      uint64_t v12 = 2 * a2[1332];
      do
      {
        uint64_t v13 = v10[5];
        __int16 v14 = (void *)v10[1];
        if (v14)
        {
          do
          {
            int v15 = v14;
            __int16 v14 = (void *)*v14;
          }

          while (v14);
        }

        else
        {
          do
          {
            int v15 = (void *)v10[2];
            BOOL v16 = *v15 == (void)v10;
            unsigned __int8 v10 = v15;
          }

          while (!v16);
        }

        unsigned __int8 v10 = v15;
      }

      while (v15 != v11);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_10066686C();
  }
}

void sub_10028B760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028B780(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5)
{
  unsigned __int8 v10 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100((uint64_t)a2, (uint64_t)__p);
    BOOL v11 = v20 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)__int128 buf = 136446722;
    *(void *)&uint8_t buf[4] = v11;
    __int16 v22 = 1024;
    int v23 = a3;
    __int16 v24 = 1024;
    int v25 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "AppManager::serviceEvent Device: %{public}s BTServiceID: %d, BTServiceSpecificEvent %d",  buf,  0x18u);
    if (v20 < 0) {
      operator delete(*(void **)__p);
    }
  }

  if ((a4 - 11) < 2)
  {
    sub_10028BA2C(a1, a2, a3, a4, a5);
  }

  else if (a4 == 701)
  {
    uint64_t v13 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a2, buf);
      __int16 v14 = v25 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)std::string __p = 136446210;
      *(void *)&__p[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "UN: notify name changed after remote name request %{public}s",  __p,  0xCu);
      if (SHIBYTE(v25) < 0) {
        operator delete(*(void **)buf);
      }
    }

    if (!(_DWORD)a5)
    {
      int v15 = *(void **)(a1 + 224);
      if (v15 != (void *)(a1 + 232))
      {
        do
        {
          if ((*(unsigned int (**)(void))(*(void *)v15[5] + 16LL))(v15[5]) == 3) {
            (*(void (**)(void, unsigned __int8 *))(**(void **)(v15[5] + 216LL) + 32LL))( *(void *)(v15[5] + 216LL),  a2);
          }
          BOOL v16 = (void *)v15[1];
          if (v16)
          {
            do
            {
              uint64_t v17 = v16;
              BOOL v16 = (void *)*v16;
            }

            while (v16);
          }

          else
          {
            do
            {
              uint64_t v17 = (void *)v15[2];
              BOOL v18 = *v17 == (void)v15;
              int v15 = v17;
            }

            while (!v18);
          }

          int v15 = v17;
        }

        while (v17 != (void *)(a1 + 232));
      }
    }
  }

  else if (a4 == 4)
  {
    if (qword_1008D67E8 != -1) {
      dispatch_once(&qword_1008D67E8, &stru_10088BD60);
    }
    if ((sub_1003C9F70((uint64_t)off_1008D67E0, (uint64_t)a2) & 1) == 0)
    {
      uint64_t v12 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG)) {
        sub_100666898((uint64_t)a2, v12);
      }
      sub_10028B560(a1, a2, a5);
    }
  }

void sub_10028BA2C(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5)
{
  unsigned __int8 v10 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = a4;
    __int16 v16 = 1024;
    int v17 = a3;
    __int16 v18 = 1024;
    int v19 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "UN: notifyServiceConnectionChanged  event: %d, for serviceID: 0x%x, result %d ",  buf,  0x14u);
  }

  if (a4 == 11)
  {
    if ((_DWORD)a5 == 114 || (_DWORD)a5 == 109)
    {
      if ((sub_1003CF350(a2) & 1) != 0)
      {
LABEL_23:
        sub_10028B560(a1, a2, 0LL);
        return;
      }

      char v14 = 0;
      sub_100242CA4(&v14);
      int v13 = 0;
      BOOL v11 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)a2, buf);
        uint64_t v12 = v20 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)id v21 = 136446210;
        __int16 v22 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "UN: force pairing to %{public}s",  v21,  0xCu);
        if (v20 < 0) {
          operator delete(*(void **)buf);
        }
      }

      if (sub_1001F0324((uint64_t)sub_10028BC98, (uint64_t)(a2 + 128), (__int128 *)&unk_10088BA30, &v13, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
          sub_100666924();
        }
      }

      sub_10028B560(a1, a2, 0LL);
      sub_100242CD8(&v14);
    }

    else
    {
      if (a3 == -1 && (_DWORD)a5)
      {
        sub_10028B560(a1, a2, a5);
        return;
      }
    }
  }

void sub_10028BC70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10028BC90(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5)
{
}

void sub_10028BC98(uint64_t a1, int a2)
{
  uint64_t v3 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "UN: Pairing complete with status %d",  (uint8_t *)v4,  8u);
  }

void sub_10028BD38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10028BD9C;
  v5[3] = &unk_10087F8E0;
  void v5[4] = a1;
  void v5[5] = a2;
  sub_100405384(v4, v5);
}

void sub_10028BD9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 224);
  uint64_t v3 = (void *)(v1 + 232);
  if (v2 != (void *)(v1 + 232))
  {
    do
    {
      uint64_t v5 = v2[5];
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          id v2 = v7;
        }

        while (!v8);
      }

      id v2 = v7;
    }

    while (v7 != v3);
  }

void sub_10028BE38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 152;
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10028BD9C;
  v5[3] = &unk_10087F8E0;
  void v5[4] = v3;
  void v5[5] = a2;
  sub_100405384(v4, v5);
}

void sub_10028BEA4(uint64_t a1, unsigned __int8 *a2)
{
  id v2 = *(void **)(a1 + 224);
  uint64_t v3 = (void *)(a1 + 232);
  if (v2 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v5 = v2[5];
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          id v2 = v7;
        }

        while (!v8);
      }

      id v2 = v7;
    }

    while (v7 != v3);
  }

void sub_10028BF3C(uint64_t a1, unsigned __int8 *a2)
{
}

void sub_10028BF44(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (![*(id *)(a1 + 296) containsObject:v3])
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    uint64_t v7 = (os_log_s *)qword_1008F7680;
    if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138543362;
      id v26 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Resurrecting zombie application %{public}@",  buf,  0xCu);
    }

    int v9 = *(void **)(a1 + 224);
    if (v9 == (void *)(a1 + 232))
    {
LABEL_26:
      sub_10027B07C(a1, v3, 15);
      uint64_t v21 = sub_1002E8E64();
      (*(void (**)(uint64_t, id, void *, void *))(*(void *)v21 + 16LL))(v21, v3, v5, v6);
      [*(id *)(a1 + 296) addObject:v3];

      goto LABEL_27;
    }

    *(void *)&__int128 v8 = 138543362LL;
    __int128 v22 = v8;
    while (1)
    {
      uint64_t v10 = v9[5];
      if (objc_msgSend(*(id *)(v10 + 88), "isEqualToString:", v3, v22)
        && *(_BYTE *)(v10 + 24)
        && *(void *)(v10 + 96))
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16LL))(v10) == 1)
        {
          [v6 addObject:*(void *)(v10 + 96)];
          uint64_t v11 = qword_1008F7680;
          if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void **)(v10 + 96);
            *(_DWORD *)__int128 buf = v22;
            id v26 = v12;
            int v13 = (os_log_s *)v11;
            char v14 = "Peripheral session is undead: %{public}@";
LABEL_19:
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 0xCu);
          }
        }

        else
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16LL))(v10))
          {
            int v15 = (os_log_s *)qword_1008F7628;
            if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
              sub_100666984(&v23, v24, v15);
            }
            goto LABEL_20;
          }

          [v5 addObject:*(void *)(v10 + 96)];
          uint64_t v16 = qword_1008F7680;
          if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
          {
            int v17 = *(void **)(v10 + 96);
            *(_DWORD *)__int128 buf = v22;
            id v26 = v17;
            int v13 = (os_log_s *)v16;
            char v14 = "Central session is undead: %{public}@";
            goto LABEL_19;
          }
        }
      }

void sub_10028C254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028C28C(uint64_t a1)
{
}

void sub_10028C298(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)qword_1008F7680;
  if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Verifying Application Resurrected <%{public}@>",  (uint8_t *)&buf,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 304) objectForKey:v3]);
  BOOL v6 = v5 == 0LL;

  uint64_t v7 = (os_log_s *)qword_1008F7680;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Verify Application Resurrected for Id <%{public}@> was not in resurrectionTimers",  (uint8_t *)&buf,  0xCu);
    }
  }

  else
  {
    if (v8)
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Removing Application Id <%{public}@>",  (uint8_t *)&buf,  0xCu);
    }

    [*(id *)(a1 + 304) removeObjectForKey:v3];
  }

  __int128 buf = 0uLL;
  uint64_t v41 = 0LL;
  int v9 = *(void **)(a1 + 224);
  if (v9 == (void *)(a1 + 232))
  {
    char v10 = 0;
  }

  else
  {
    char v10 = 0;
    do
    {
      uint64_t v12 = v9[4];
      uint64_t v11 = v9[5];
      if ([*(id *)(v11 + 88) isEqualToString:v3])
      {
        if (*(void *)(v11 + 120))
        {
          char v10 = 1;
        }

        else
        {
          int v13 = (os_log_s *)qword_1008F7680;
          if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = *(void *)(v11 + 88);
            uint64_t v15 = *(void *)(v11 + 96);
            *(_DWORD *)char v36 = 138543618;
            *(void *)&v36[4] = v14;
            __int16 v37 = 2114;
            uint64_t v38 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Reaping Disconnected Session %{public}@ %{public}@",  v36,  0x16u);
          }

          uint64_t v16 = *((void *)&buf + 1);
          if (*((void *)&buf + 1) >= (unint64_t)v41)
          {
            uint64_t v18 = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
            unint64_t v19 = (uint64_t)&v41[-buf] >> 2;
            if (v19 <= v18 + 1) {
              unint64_t v19 = v18 + 1;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20) {
              uint64_t v21 = (char *)sub_100008BA0((uint64_t)&v41, v20);
            }
            else {
              uint64_t v21 = 0LL;
            }
            __int128 v22 = &v21[8 * v18];
            *(void *)__int128 v22 = v12;
            int v17 = v22 + 8;
            uint8_t v23 = (char *)*((void *)&buf + 1);
            __int16 v24 = (char *)buf;
            if (*((void *)&buf + 1) != (void)buf)
            {
              do
              {
                uint64_t v25 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v22 - 1) = v25;
                v22 -= 8;
              }

              while (v23 != v24);
              uint8_t v23 = (char *)buf;
            }

            *(void *)&__int128 buf = v22;
            *((void *)&buf + 1) = v17;
            uint64_t v41 = &v21[8 * v20];
            if (v23) {
              operator delete(v23);
            }
          }

          else
          {
            **((void **)&buf + 1) = v12;
            int v17 = (void *)(v16 + 8);
          }

          *((void *)&buf + 1) = v17;
        }

        if (!*(_BYTE *)(v11 + 39))
        {
          id v26 = (os_log_s *)qword_1008F7628;
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = *(void *)(v11 + 88);
            *(_DWORD *)char v36 = 138543362;
            *(void *)&v36[4] = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "App Restored but TCCDone missing %{public}@",  v36,  0xCu);
          }

          if ([*(id *)(v11 + 88) isEqual:@"com.teslamotors.TeslaApp"])
          {
            if (qword_1008D9060 != -1) {
              dispatch_once(&qword_1008D9060, &stru_10088BD80);
            }
            uint64_t v28 = qword_1008D9058;
            sub_10002418C(v36, "App Restoration");
            sub_10002418C(__p, "TCCDoneMissing");
            sub_10040C784(60.0, v28, (uint64_t *)v36, (uint64_t *)__p);
            if (v35 < 0) {
              operator delete(__p[0]);
            }
            if (v39 < 0) {
              operator delete(*(void **)v36);
            }
          }
        }
      }

      uint64_t v29 = (void *)v9[1];
      if (v29)
      {
        do
        {
          uint64_t v30 = v29;
          uint64_t v29 = (void *)*v29;
        }

        while (v29);
      }

      else
      {
        do
        {
          uint64_t v30 = (void *)v9[2];
          BOOL v31 = *v30 == (void)v9;
          int v9 = v30;
        }

        while (!v31);
      }

      int v9 = v30;
    }

    while (v30 != (void *)(a1 + 232));
    char v33 = (unint64_t *)*((void *)&buf + 1);
  }

  [*(id *)(a1 + 296) removeObject:v3];
  if ((v10 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
    sub_1006669C0();
  }
  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
}

void sub_10028C720( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, void *__p, uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10028C790(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "Completed";
    if (a2) {
      uint64_t v5 = "Needs to run.";
    }
    int v8 = 136446210;
    int v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Current SetupBuddy state: %{public}s.",  (uint8_t *)&v8,  0xCu);
  }

  *(_BYTE *)(a1 + 312) = a2;
  LOBYTE(v_Block_object_dispose(va, 8) = 0;
  uint64_t v6 = sub_1002E8D54();
  (*(void (**)(uint64_t, int *))(*(void *)v6 + 104LL))(v6, &v8);
  if ((_BYTE)v8)
  {
    if (*(_BYTE *)(a1 + 312)) {
      return;
    }
    sub_100289EA4(a1, 0LL);
  }

  if (!*(_BYTE *)(a1 + 312))
  {
    uint64_t v7 = sub_1002E8D54();
    sub_10024E060(v7 + 488, a1 + 120);
  }

void sub_10028C8A4(uint64_t a1, int a2)
{
}

void sub_10028C8AC(uint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10088BDE0);
  }
  id v2 = sub_10040007C(off_1008D5F48, *(void *)(a1 + 40), 0);
  if (v2)
  {
    uint64_t v3 = (uint64_t)v2;
    if (sub_1003D3370((uint64_t)v2))
    {
      if (qword_1008D60D0 != -1) {
        dispatch_once(&qword_1008D60D0, &stru_10088BC40);
      }
      int v4 = sub_100425684((uint64_t)off_1008D60C8, v3);
      if ((v4 & 0x100000) == 0)
      {
        int v5 = v4;
        uint64_t v6 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
        {
          uint64_t v7 = *(void *)(a1 + 32);
          if (qword_1008D60D0 != -1) {
            dispatch_once(&qword_1008D60D0, &stru_10088BC40);
          }
          *(_DWORD *)__int128 buf = 138543874;
          *(void *)&uint8_t buf[4] = v7;
          *(_WORD *)&_BYTE buf[12] = 1024;
          int v28 = v5;
          __int16 v29 = 1024;
          int v30 = sub_1004272C4((uint64_t)off_1008D60C8, v3);
          _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Attempting to disconnectUnusedDevices to %{public}@ that doesn't have GATT connected (connected services %d, supported services %d)",  buf,  0x18u);
        }

        return;
      }

      int v26 = 0;
      sub_1000B0740(&v26, 0LL);
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10088BB80);
      }
      int v8 = sub_1005CC3F0((uint64_t)off_1008D5F28, *(void **)(a1 + 32)) + (unsigned __int16)word_1008D9258;
      int v9 = v26;
      char v10 = (os_log_s *)qword_1008F7628;
      int v11 = v8 - v26;
      if (v8 >= v26)
      {
        if (!os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO)) {
          return;
        }
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138543618;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&_BYTE buf[12] = 1024;
        int v28 = v11;
        uint64_t v16 = "Device %{public}@ is unused, but is within the grace period for %d more seconds - skipping";
        int v17 = v10;
        os_log_type_t v18 = OS_LOG_TYPE_INFO;
        uint32_t v19 = 18;
        goto LABEL_27;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v8;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Disconnecting due to grace time %d curTime %d",  buf,  0xEu);
      }

      uint64_t v12 = sub_1002E6E00();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 8LL))(v12))
      {
        char v25 = 0;
        uint64_t v13 = sub_1002E6E00();
        sub_10002418C(buf, "CATT");
        sub_10002418C(__p, "DisableClassicGraceTimer");
        (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v13 + 72LL))(v13, buf, __p, &v25);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v30) < 0) {
          operator delete(*(void **)buf);
        }
        if (v25)
        {
          uint64_t v14 = qword_1008F7628;
          if (!os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          uint64_t v15 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v15;
          uint64_t v16 = "Grace timer disabled for classic devices, not disconnecting %{public}@";
          int v17 = (os_log_s *)v14;
          os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
          uint32_t v19 = 12;
LABEL_27:
          _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, buf, v19);
          return;
        }
      }

      uint64_t v21 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Disconnecting GATT for unused classic device %{public}@",  buf,  0xCu);
      }

      if (qword_1008D60D0 != -1) {
        dispatch_once(&qword_1008D60D0, &stru_10088BC40);
      }
      sub_1004287C4((int64x2_t *)off_1008D60C8, v3, 0x100000);
    }
  }

void sub_10028CCA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

NSMutableSet *sub_10028CCE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v31 = 0LL;
  __int128 v29 = 0u;
  memset(v30, 0, sizeof(v30));
  *(_OWORD *)uint64_t v27 = 0u;
  __int128 v28 = 0u;
  memset(v26, 0, sizeof(v26));
  __int128 v25 = 0u;
  sub_1001FCFC8((uint64_t)&v25);
  int v4 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  int v5 = *(void **)(a1 + 224);
  if (v5 != (void *)(a1 + 232))
  {
    while (1)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5[5] + 216) objectForKeyedSubscript:v3]);
      sub_100494958(v5[4], (uint64_t)&__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t size = __p.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t size = __p.__r_.__value_.__l.__size_;
      }
      int v9 = sub_1001FD17C(v26, (uint64_t)p_p, size);
      sub_1001FD17C(v9, (uint64_t)":(ignored) ", 11LL);
LABEL_23:

      int v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          os_log_type_t v18 = v17;
          int v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          os_log_type_t v18 = (void *)v5[2];
          BOOL v19 = *v18 == (void)v5;
          int v5 = v18;
        }

        while (!v19);
      }

      int v5 = v18;
      if (v18 == (void *)(a1 + 232)) {
        goto LABEL_29;
      }
    }

LABEL_13:
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5[5] + 80) objectForKeyedSubscript:v3]);
    if (v6)
    {
      sub_100494958(v5[4], (uint64_t)&__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v10 = &__p;
      }
      else {
        char v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v11 = __p.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v11 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v12 = sub_1001FD17C(v26, (uint64_t)v10, v11);
      uint64_t v13 = sub_1001FD17C(v12, (uint64_t)":", 1LL);
      uint64_t v14 = sub_10028D0AC((int)[v6 intValue]);
      size_t v15 = strlen(v14);
      uint64_t v16 = sub_1001FD17C(v13, (uint64_t)v14, v15);
      sub_1001FD17C(v16, (uint64_t)" ", 1LL);
      -[NSMutableSet addObject:](v4, "addObject:", v6);
    }

    goto LABEL_23;
  }

void sub_10028D01C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_1001FD0F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

const char *sub_10028D0AC(int a1)
{
  else {
    return off_10088BE20[a1 + 11];
  }
}

uint64_t sub_10028D0D4(uint64_t a1, void *a2)
{
  int v59 = 0;
  int v58 = 0;
  int v57 = 0;
  int v56 = 0;
  int v55 = 0;
  __int16 v54 = 0;
  __int16 v53 = 0;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  id v2 = a2;
  id v3 = [v2 countByEnumeratingWithState:&v49 objects:v62 count:16];
  if (v3)
  {
    char v4 = 0;
    uint64_t v5 = 0LL;
    uint64_t v40 = *(void *)v50;
    unsigned __int16 v6 = -1;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v50 != v40) {
          objc_enumerationMutation(v2);
        }
        unsigned int v8 = [*(id *)(*((void *)&v49 + 1) + 8 * (void)v7) intValue];
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_10088BB00);
        }
        if (!sub_100598F90( off_1008D5F08,  v8,  (__int16 *)&v59 + 1,  (__int16 *)&v59,  (__int16 *)&v57,  (__int16 *)&v57 + 1,  (_WORD *)&v58 + 1,  (__int16 *)&v58,  (_WORD *)&v56 + 1,  &v56,  (_WORD *)&v55 + 1,  &v55,  &v54,  (_BYTE *)&v53 + 1,  &v53))
        {
          uint64_t v48 = 0LL;
          __int128 v46 = 0u;
          memset(v47, 0, sizeof(v47));
          *(_OWORD *)std::stringbuf::string_type __p = 0u;
          __int128 v45 = 0u;
          memset(v43, 0, sizeof(v43));
          __int128 v42 = 0u;
          sub_1001FCFC8((uint64_t)&v42);
          int v9 = sub_1001FD17C(v43, (uint64_t)"evaluating sessionLatency:", 26LL);
          char v10 = sub_10028D0AC(v8);
          size_t v11 = strlen(v10);
          uint64_t v12 = sub_1001FD17C(v9, (uint64_t)v10, v11);
          uint64_t v13 = sub_1001FD17C(v12, (uint64_t)" [LeConnectionLatency", 21LL);
          uint64_t v14 = sub_10028D0AC(v5);
          size_t v15 = strlen(v14);
          uint64_t v16 = sub_1001FD17C(v13, (uint64_t)v14, v15);
          int v17 = sub_1001FD17C(v16, (uint64_t)"/", 1LL);
          os_log_type_t v18 = (void *)std::ostream::operator<<(v17, v6);
          BOOL v19 = sub_1001FD17C(v18, (uint64_t)"ms/", 3LL);
          if ((v4 & 1) != 0) {
            uint64_t v20 = "High";
          }
          else {
            uint64_t v20 = "Low";
          }
          if ((v4 & 1) != 0) {
            uint64_t v21 = 4LL;
          }
          else {
            uint64_t v21 = 3LL;
          }
          uint64_t v22 = sub_1001FD17C(v19, (uint64_t)v20, v21);
          sub_1001FD17C(v22, (uint64_t)"]-->", 4LL);
          if ((v4 & 1) != 0) {
            unsigned int v23 = v5;
          }
          else {
            unsigned int v23 = v8;
          }
          else {
            char v4 = (unsigned __int16)v59 == HIWORD(v59);
          }
          else {
            uint64_t v5 = v8;
          }
          char v24 = sub_1001FD17C(v43, (uint64_t)"[LeConnectionLatency", 20LL);
          __int128 v25 = sub_10028D0AC(v5);
          size_t v26 = strlen(v25);
          uint64_t v27 = sub_1001FD17C(v24, (uint64_t)v25, v26);
          __int128 v28 = sub_1001FD17C(v27, (uint64_t)"/", 1LL);
          __int128 v29 = (void *)std::ostream::operator<<(v28, v6);
          int v30 = sub_1001FD17C(v29, (uint64_t)"ms/", 3LL);
          if ((v4 & 1) != 0) {
            uint64_t v31 = "High";
          }
          else {
            uint64_t v31 = "Low";
          }
          if ((v4 & 1) != 0) {
            uint64_t v32 = 4LL;
          }
          else {
            uint64_t v32 = 3LL;
          }
          char v33 = sub_1001FD17C(v30, (uint64_t)v31, v32);
          sub_1001FD17C(v33, (uint64_t)"]", 1LL);
          uint64_t v34 = (os_log_s *)qword_1008F7628;
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
          {
            std::stringbuf::str(&v41, (const std::stringbuf *)((char *)v43 + 8));
            char v35 = &v41;
            if ((v41.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              char v35 = (std::stringbuf::string_type *)v41.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)__int128 buf = 136315138;
            uint64_t v61 = v35;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
          }

          *(void *)&__int128 v42 = v39;
          *(void *)((char *)&v43[-1] + *(void *)(v39 - 24)) = v38;
          *(void *)&v43[0] = v37;
          if (SHIBYTE(v45) < 0) {
            operator delete(__p[1]);
          }
          std::streambuf::~streambuf((char *)v43 + 8);
          std::ios::~ios(v47);
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v3 != v7);
      id v3 = [v2 countByEnumeratingWithState:&v49 objects:v62 count:16];
    }

    while (v3);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_10028D58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028D5D4(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  uint64_t v5 = *(void **)(a1 + 224);
  unsigned __int16 v6 = (void *)(a1 + 232);
  if (v5 != (void *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v5[5] + 16LL))(v5[5]))
      {
        uint64_t v10 = v5[5];
        if (*(void *)(v10 + 120))
        {
          if ((sub_100396BBC(v5[5], (uint64_t)v11) & 1) != 0) {
            (*(void (**)(void, void, id, uint64_t))(**(void **)(v10 + 120) + 176LL))( *(void *)(v10 + 120),  0LL,  v11,  a3);
          }
        }
      }

      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unsigned int v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }

        while (!v9);
      }

      uint64_t v5 = v8;
    }

    while (v8 != v6);
  }
}

void sub_10028D6AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10028D6C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int v5 = *(_BYTE *)(a2 + 129) & 0x30;
  unsigned __int16 v6 = (os_log_s *)qword_1008F7628;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      int v10 = 138543362;
      id v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Foreground active, notifying ServiceManager CTKD device %{public}@ connected to bridge",  (uint8_t *)&v10,  0xCu);
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10088BB80);
    }
    uint64_t v8 = sub_1005CC198((uint64_t)off_1008D5F28, v4, 0);
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_10088BC40);
    }
    sub_100428DBC((uint64_t)off_1008D60C8, v8);
  }

  else if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 88);
    int v10 = 138543618;
    id v11 = v4;
    __int16 v12 = 2114;
    uint64_t v13 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "TransportBridging enabled, CTKD device %{public}@ connected, but %{public}@ is not foregrounded, not bridging.",  (uint8_t *)&v10,  0x16u);
  }
}

void sub_10028D848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028D860(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v33 = 0LL;
  __int128 v31 = 0u;
  memset(v32, 0, sizeof(v32));
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v30 = 0u;
  memset(v28, 0, sizeof(v28));
  __int128 v27 = 0u;
  sub_1001FCFC8((uint64_t)&v27);
  uint64_t v9 = *(void **)(a1 + 224);
  if (v9 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v10 = v9[4];
      id v11 = (id *)v9[5];
      if (!(*((unsigned int (**)(id *))*v11 + 2))(v11))
      {
        sub_100390DB4((uint64_t)v11, v7, v8);
        size_t v15 = (void *)objc_claimAutoreleasedReturnValue([v11[27] objectForKeyedSubscript:v7]);
        if (v15)
        {
          BOOL v16 = sub_100390D94((uint64_t)v11);

          if (v16)
          {
            sub_1004949D8(v10, &v35);
            int v17 = (v35.__r_.__value_.__s.__size_ & 0x80u) == 0
                ? &v35
                : (std::stringbuf::string_type *)v35.__r_.__value_.__r.__words[0];
            uint64_t v18 = (v35.__r_.__value_.__s.__size_ & 0x80u) == 0
                ? v35.__r_.__value_.__s.__size_
                : v35.__r_.__value_.__l.__size_;
            BOOL v19 = sub_1001FD17C(v28, (uint64_t)v17, v18);
            sub_1001FD17C(v19, (uint64_t)",", 1LL);
          }
        }
      }

      __int16 v12 = (void *)v9[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          __int16 v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          uint64_t v13 = (void *)v9[2];
          BOOL v14 = *v13 == (void)v9;
          uint64_t v9 = v13;
        }

        while (!v14);
      }

      uint64_t v9 = v13;
    }

    while (v13 != (void *)(a1 + 232));
  }

  if ((a4 & 1) != 0)
  {
    std::stringbuf::str(&v35, (const std::stringbuf *)((char *)v28 + 8));
    if ((char)v35.__r_.__value_.__s.__size_ < 0)
    {
      std::string::size_type size = v35.__r_.__value_.__l.__size_;
      operator delete(v35.__r_.__value_.__l.__data_);
      if (!size)
      {
LABEL_29:
        uint64_t v22 = sub_1002E9074();
        std::stringbuf::str(&v35, (const std::stringbuf *)((char *)v28 + 8));
        if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unsigned int v23 = &v35;
        }
        else {
          unsigned int v23 = (std::stringbuf::string_type *)v35.__r_.__value_.__r.__words[0];
        }
        __int128 v25 = &off_10087FAA8;
        size_t v26 = 0LL;
        (*(void (**)(uint64_t, uint64_t, std::stringbuf::string_type *, id, uint64_t (***)()))(*(void *)v22 + 40LL))( v22,  4LL,  v23,  v7,  &v25);
        __int128 v25 = &off_10087FAA8;
        if (v26) {
          sub_1002CD254(v26);
        }
        goto LABEL_36;
      }
    }

    else if (!v35.__r_.__value_.__s.__size_)
    {
      goto LABEL_29;
    }

    v34[0] = 0LL;
    v34[1] = 0LL;
    std::ostream::sentry::sentry(v34, v28);
    uint64_t v21 = (char *)v28 + *(void *)(*(void *)&v28[0] - 24LL);
    if ((v21[32] & 5) == 0)
    {
      (*(void (**)(std::stringbuf::string_type *__return_ptr, void, uint64_t, uint64_t, uint64_t))(**((void **)v21 + 5) + 32LL))( &v35,  *((void *)v21 + 5),  -1LL,  1LL,  16LL);
      if (v36 == -1) {
        std::ios_base::clear( (std::ios_base *)((char *)v28 + *(void *)(*(void *)&v28[0] - 24LL)),  *(_DWORD *)((char *)&v28[2] + *(void *)(*(void *)&v28[0] - 24LL)) | 4);
      }
    }

    std::ostream::sentry::~sentry(v34);
    v35.__r_.__value_.__s.__data_[0] = 0;
    sub_1001FD17C(v28, (uint64_t)&v35, 1LL);
    goto LABEL_29;
  }

void sub_10028DBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _Unwind_Resume(a1);
}

void sub_10028DC4C(uint64_t a1, void *a2, void *a3, char a4)
{
}

void sub_10028DC54(void *a1)
{
  id v2 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[36];
    *(_DWORD *)__int128 buf = 67109120;
    int v18 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending Daily LEAppConnect metrics to CoreAnalytics %d",  buf,  8u);
  }

  id v4 = (void *)a1[34];
  uint64_t v5 = a1 + 35;
  if (v4 != a1 + 35)
  {
    do
    {
      char v6 = *((_BYTE *)v4 + 55);
      if (v6 < 0)
      {
        if (v4[5])
        {
LABEL_8:
          if (*((_BYTE *)v4 + 56))
          {
            id v7 = v4 + 4;
            v15[0] = @"BundleID";
            if (v6 < 0) {
              id v7 = (void *)*v7;
            }
            id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  v7,  v15[0]));
            v15[1] = @"ConnectAttemptWatermark";
            v16[0] = v8;
            uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)v4 + 56)));
            v16[1] = v9;
            uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  2LL));

            uint64_t v11 = sub_1002E8D94();
            (*(void (**)(uint64_t, void *))(*(void *)v11 + 328LL))(v11, v10);
          }
        }
      }

      else if (*((_BYTE *)v4 + 55))
      {
        goto LABEL_8;
      }

      __int16 v12 = (void *)v4[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          __int16 v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          uint64_t v13 = (void *)v4[2];
          BOOL v14 = *v13 == (void)v4;
          id v4 = v13;
        }

        while (!v14);
      }

      id v4 = v13;
    }

    while (v13 != v5);
  }

  sub_10023E78C((uint64_t)(a1 + 34), (char *)a1[35]);
  a1[35] = 0LL;
  a1[36] = 0LL;
  a1[34] = v5;
}

void sub_10028DE30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028DE60(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  char v6 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    v16[0] = 67109378;
    v16[1] = a3;
    __int16 v17 = 2114;
    id v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending ancsAuthChanged to %d for device %{public}@",  (uint8_t *)v16,  0x12u);
  }

  id v7 = *(void **)(a1 + 224);
  id v8 = (void *)(a1 + 232);
  if (v7 != (void *)(a1 + 232))
  {
    do
    {
      int v9 = (*(uint64_t (**)(void))(*(void *)v7[5] + 16LL))(v7[5]);
      uint64_t v10 = (id *)v7[5];
      if (v9)
      {
      }

      else
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10[27] objectForKeyedSubscript:v5]);
        __int16 v12 = v11;
      }

      uint64_t v13 = (void *)v7[1];
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          uint64_t v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          BOOL v14 = (void *)v7[2];
          BOOL v15 = *v14 == (void)v7;
          id v7 = v14;
        }

        while (!v15);
      }

      id v7 = v14;
    }

    while (v14 != v8);
  }
}

void sub_10028DFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10028E01C(void *result, __int128 *a2)
{
  id v2 = (void *)result[28];
  uint64_t v3 = result + 29;
  if (v2 != result + 29)
  {
    do
    {
      uint64_t result = *(void **)(v2[5] + 120LL);
      if (result)
      {
        __int128 v8 = *a2;
        uint64_t v9 = *((void *)a2 + 2);
        uint64_t result = (void *)(*(uint64_t (**)(void *, void, __int128 *))(*result + 72LL))(result, 0LL, &v8);
      }

      id v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          id v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          char v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          id v2 = v6;
        }

        while (!v7);
      }

      id v2 = v6;
    }

    while (v6 != v3);
  }

  return result;
}

void *sub_10028E0C0(uint64_t a1, __int128 *a2)
{
  return sub_10028E01C((void *)(a1 - 24), a2);
}

uint64_t sub_10028E0C8(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 224);
  if (v2 == (void *)(a1 + 232)) {
    return 0LL;
  }
  while (v2[5] != a2)
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        id v4 = v3;
        uint64_t v3 = (void *)*v3;
      }

      while (v3);
    }

    else
    {
      do
      {
        id v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        id v2 = v4;
      }

      while (!v5);
    }

    id v2 = v4;
    if (v4 == (void *)(a1 + 232)) {
      return 0LL;
    }
  }

  return v2[4];
}

uint64_t sub_10028E12C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 224);
  BOOL v5 = (void *)(a1 + 232);
  if (v4 == (void *)(a1 + 232))
  {
    unsigned __int16 v6 = 0;
  }

  else
  {
    unsigned __int16 v6 = 0;
    do
    {
      sub_100494958(v4[4], (uint64_t)__p);
      if (v15 >= 0) {
        BOOL v7 = __p;
      }
      else {
        BOOL v7 = (void **)__p[0];
      }
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7));
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      unsigned __int16 v9 = (unsigned __int16)[v8 containsString:v3];

      uint64_t v10 = (void *)v4[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v11 = (void *)v4[2];
          BOOL v12 = *v11 == (void)v4;
          id v4 = v11;
        }

        while (!v12);
      }

      v6 += v9;
      id v4 = v11;
    }

    while (v11 != v5);
  }

  return v6;
}

void sub_10028E22C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10028E260(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 224);
  id v2 = (void *)(a1 + 232);
  if (v1 != (void *)(a1 + 232))
  {
    do
    {
      id v4 = (void *)v1[1];
      if (v4)
      {
        do
        {
          BOOL v5 = v4;
          id v4 = (void *)*v4;
        }

        while (v4);
      }

      else
      {
        do
        {
          BOOL v5 = (void *)v1[2];
          BOOL v6 = *v5 == (void)v1;
          uint64_t v1 = v5;
        }

        while (!v6);
      }

      uint64_t v1 = v5;
    }

    while (v5 != v2);
  }

void sub_10028E2EC(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    id v4 = *(void **)(a1 + 232);
    id v2 = (void *)(a1 + 232);
    id v3 = v4;
    if (v4)
    {
      BOOL v6 = v2;
      do
      {
        unint64_t v7 = v3[4];
        BOOL v8 = v7 >= a2;
        if (v7 >= a2) {
          unsigned __int16 v9 = v3;
        }
        else {
          unsigned __int16 v9 = v3 + 1;
        }
        if (v8) {
          BOOL v6 = v3;
        }
        id v3 = (void *)*v9;
      }

      while (*v9);
      if (v6 != v2 && v6[4] <= a2 && !(*(unsigned int (**)(void))(*(void *)v6[5] + 16LL))(v6[5]))
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10088BB80);
        }
        id v10 = sub_1005C6C74((uint64_t)off_1008D5F28);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        if (sub_100398ACC(v6[5], v11) && os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG))
        {
          sub_100494958(a2, (uint64_t)v12);
          sub_100666A24();
        }
      }
    }
  }

void sub_10028E420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10028E43C(uint64_t result)
{
  *(_BYTE *)(result + 1sub_100242FAC(v40 - 80) = 1;
  return result;
}

uint64_t sub_10028E448(uint64_t result)
{
  *(_BYTE *)(result + 92) = 1;
  return result;
}

id sub_10028E454(uint64_t a1)
{
  *(_BYTE *)(a1 + 1sub_100242FAC(v40 - 80) = 0;
  id result = [*(id *)(a1 + 320) removeAllObjects];
  id v3 = *(void **)(a1 + 224);
  id v4 = (void *)(a1 + 232);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      BOOL v5 = (id *)v3[5];
      id result = (id)(*((uint64_t (**)(id *))*v5 + 2))(v5);
      if (!(_DWORD)result)
      {
        id result = v5[45];
        if (result)
        {
          id result = [result count];
          if (result)
          {
            __int128 v15 = 0u;
            __int128 v16 = 0u;
            __int128 v13 = 0u;
            __int128 v14 = 0u;
            id v9 = v5[45];
            id v10 = [v9 countByEnumeratingWithState:&v13 objects:v17 count:16];
            if (v10)
            {
              uint64_t v11 = *(void *)v14;
              do
              {
                for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v14 != v11) {
                    objc_enumerationMutation(v9);
                  }
                  sub_10039BB08((uint64_t)v5, *(void **)(*((void *)&v13 + 1) + 8LL * (void)i), 0, 0LL);
                }

                id v10 = [v9 countByEnumeratingWithState:&v13 objects:v17 count:16];
              }

              while (v10);
            }

            id result = [v5[45] removeAllObjects];
          }
        }
      }

      BOOL v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          BOOL v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          unint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          id v3 = v7;
        }

        while (!v8);
      }

      id v3 = v7;
    }

    while (v7 != v4);
  }

  return result;
}

void sub_10028E5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10028E600(uint64_t a1)
{
  return sub_10028E454(a1 - 88);
}

void sub_10028E608(uint64_t a1, uint64_t a2)
{
  id v3 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138543362;
    uint64_t v5 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "GATT Device %{public}@ connected",  (uint8_t *)&v4,  0xCu);
  }

void sub_10028E6A8(uint64_t a1, uint64_t a2)
{
}

void sub_10028E6B0(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  BOOL v6 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = 138543362;
    id v20 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "GATT Device %{public}@ disconnected",  (uint8_t *)&v19,  0xCu);
  }

  unint64_t v7 = *(void **)(a1 + 224);
  if (v7 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v8 = v7[4];
      id v9 = (id *)v7[5];
      if (!(*((unsigned int (**)(id *))*v9 + 2))(v9))
      {
        id v10 = sub_10039918C((uint64_t)v9, (uint64_t)v5);
        if ((_DWORD)v10) {
          sub_100287E84((uint64_t)v10, v8, (uint64_t)v9, v5, 0);
        }
        if (a3 == 1)
        {
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9[27] objectForKeyedSubscript:v5]);
          BOOL v12 = v11;
          if (v11)
          {
            id v13 = [v11 enableAutoReconnect];
            sub_100285740((uint64_t)v13, v8, (uint64_t)v9, v5, 0LL, (uint64_t)v13);
          }
        }
      }

      __int128 v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          __int128 v15 = v14;
          __int128 v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          __int128 v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          unint64_t v7 = v15;
        }

        while (!v16);
      }

      unint64_t v7 = v15;
    }

    while (v15 != (void *)(a1 + 232));
  }

  if (a3 == 1)
  {
    unsigned int v17 = [*(id *)(a1 + 328) containsObject:v5];
    id v18 = (os_log_s *)qword_1008F7628;
    if (v17)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 138543362;
        id v20 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Removing %{public}@ from classic gatt device tracking list",  (uint8_t *)&v19,  0xCu);
      }

      [*(id *)(a1 + 328) removeObject:v5];
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_FAULT))
    {
      sub_100666A70();
    }
  }
}

void sub_10028E8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028E904(uint64_t a1, void *a2, int a3)
{
}

void sub_10028E90C(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  uint64_t v8 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543874;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = a3;
    __int16 v25 = 1024;
    int v26 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "GATT Device %{public}@ ready isInitiator=%d mtu=%d",  buf,  0x18u);
  }

  int v20 = 0;
  *(void *)__int128 buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_100241F90(buf, v7);
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_10088BBC0);
  }
  uint64_t v9 = qword_1008D9270;
  uuid_copy(dst, buf);
  if (sub_1004135EC(v9, dst, &v20))
  {
    id v10 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v21 = 138543362;
      id v22 = v7;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Failed to get GATT transport for device %{public}@, this is not good",  v21,  0xCu);
      id v10 = (os_log_s *)qword_1008F7628;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100666B08();
    }
  }

  else
  {
    uint64_t v11 = *(void **)(a1 + 224);
    if (v11 != (void *)(a1 + 232))
    {
      do
      {
        uint64_t v12 = v11[4];
        uint64_t v13 = v11[5];
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v13 + 16LL))(v13) && sub_100399020(v13, v7))
        {
          uint64_t v14 = (uint64_t)sub_10039918C(v13, (uint64_t)v7);
          if ((v14 & 1) == 0) {
            sub_100287E84(v14, v12, v13, v7, 1u);
          }
        }

        __int128 v15 = (void *)v11[1];
        if (v15)
        {
          do
          {
            BOOL v16 = v15;
            __int128 v15 = (void *)*v15;
          }

          while (v15);
        }

        else
        {
          do
          {
            BOOL v16 = (void *)v11[2];
            BOOL v17 = *v16 == (void)v11;
            uint64_t v11 = v16;
          }

          while (!v17);
        }

        uint64_t v11 = v16;
      }

      while (v16 != (void *)(a1 + 232));
    }

    if (v20 == 1)
    {
      if (([*(id *)(a1 + 328) containsObject:v7] & 1) == 0)
      {
        id v18 = (os_log_s *)qword_1008F7628;
        if (v7)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v21 = 138543362;
            id v22 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Keeping track of classic device %{public}@",  v21,  0xCu);
          }

          [*(id *)(a1 + 328) addObject:v7];
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
        {
          sub_100666ADC();
        }
      }
    }

    else
    {
      int v19 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Starting device disconnection watchdog",  v21,  2u);
      }

      sub_1002844D8(a1, v7, 1u, 0, 0);
    }

    sub_100286648(a1);
  }
}

void sub_10028EC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028EC64(uint64_t a1, void *a2, int a3, int a4)
{
}

uint64_t sub_10028EC6C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088BB80);
  }
  int v3 = sub_1005CC500((uint64_t)off_1008D5F28, v2);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10088BB60);
  }
  BOOL v4 = sub_10061C0F8(qword_1008D5F18, v2);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088BB80);
  }
  uint64_t v5 = sub_1005CC198((uint64_t)off_1008D5F28, v2, 0);
  if (v5)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_10088BDE0);
    }
    BOOL v6 = (unsigned __int8 *)sub_10040007C(off_1008D5F48, v5, 0);
    if (v6) {
      LODWORD(v5) = sub_1003CF350(v6);
    }
    else {
      LODWORD(v5) = 0;
    }
  }

  id v7 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138544130;
    id v10 = v2;
    __int16 v11 = 1024;
    int v12 = v5;
    __int16 v13 = 1024;
    BOOL v14 = v4;
    __int16 v15 = 1024;
    BOOL v16 = v3 != 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Device %{public}@ classicPaired %d, lePaired %d, discoveredViaLeScan %d",  (uint8_t *)&v9,  0x1Eu);
  }

  return v5 & ((v3 == 0) & ~v4);
}

void sub_10028EE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10028EE80(uint64_t a1, unint64_t a2)
{
  BOOL v4 = *(void **)(a1 + 232);
  id v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }

  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0 && *(_BYTE *)(v9 + 24) != 0;
}

BOOL sub_10028EEDC(uint64_t a1, unint64_t a2)
{
  BOOL v4 = *(void **)(a1 + 232);
  id v2 = (void *)(a1 + 232);
  int v3 = v4;
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = (void *)*v8;
  }

  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (uint64_t v9 = v5[5]) != 0 && *(_BYTE *)(v9 + 24) && *(void *)(v9 + 96) != 0LL;
}

void sub_10028EF40(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v2, "setDateFormat:", @"yyyy-MM-dd H:mm:ss");
  int v3 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    *(void *)__int16 v25 = CFAbsoluteTimeGetCurrent();
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump:         fScreenOffWakeHistoryMap: %f",  buf,  0xCu);
  }

  BOOL v4 = *(void **)(a1 + 384);
  int v20 = (void *)(a1 + 392);
  if (v4 != (void *)(a1 + 392))
  {
    do
    {
      uint64_t v5 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = v4 + 4;
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)__int16 v25 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:         %{public}s:", buf, 0xCu);
      }

      uint64_t v21 = 0LL;
      uint64_t v22 = 0LL;
      uint64_t v23 = 0LL;
      sub_1002928B0(&v21, (uint64_t)(v4 + 7));
      for (uint64_t i = v22; (uint64_t *)i != &v21; uint64_t i = *(void *)(i + 8))
      {
        double v8 = *(double *)(i + 16);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v8));
        id v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v2, "stringFromDate:", v9));
        LODWORD(v11) = llround((v8 - floor(v8)) * 1000.0);
        int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@.%000d",  v10,  v11));
        __int16 v13 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = *(unsigned __int8 *)(i + 24);
          id v15 = [v12 UTF8String];
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          *(_DWORD *)__int128 buf = 67109890;
          *(_DWORD *)__int16 v25 = v14;
          *(_WORD *)&v25[4] = 2082;
          *(void *)&void v25[6] = v15;
          __int16 v26 = 2048;
          double v27 = v8;
          __int16 v28 = 2048;
          double v29 = Current - v8;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "statedump:       reason %d time:%{public}s %.3f secs(%-12.2f secs ago)",  buf,  0x26u);
        }
      }

      sub_10023DF50(&v21);
      BOOL v17 = (void *)v4[1];
      if (v17)
      {
        do
        {
          id v18 = v17;
          BOOL v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          id v18 = (void *)v4[2];
          BOOL v19 = *v18 == (void)v4;
          BOOL v4 = v18;
        }

        while (!v19);
      }

      BOOL v4 = v18;
    }

    while (v18 != v20);
  }
}

void sub_10028F224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10028F278(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 140) - 1;
  if (v2 < 5 && ((0x17u >> v2) & 1) != 0) {
    return 1LL;
  }
  uint64_t v5 = *(void **)(a1 + 232);
  int v3 = (void *)(a1 + 232);
  BOOL v4 = v5;
  if (!v5) {
    return 0LL;
  }
  unint64_t v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v4 + 1;
    }
    if (v8) {
      unint64_t v6 = v4;
    }
    BOOL v4 = (void *)*v9;
  }

  while (*v9);
  if (v6 == v3 || v6[4] > a2) {
    return 0LL;
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v6[5] + 88) lowercaseString]);
  id v10 = [v11 hasPrefix:@"com.apple."];

  return (uint64_t)v10;
}

void sub_10028F324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10028F334(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a3;
  uint64_t v10 = sub_10027BC04(a1, a2, 0);
  if (v10) {
    uint64_t v11 = sub_10039BA74(v10, a2, v9, a4, a5);
  }
  else {
    uint64_t v11 = 12LL;
  }

  return v11;
}

void sub_10028F3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10028F3C0(uint64_t a1, unint64_t a2, void *a3, int a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = sub_10027BC04(a1, a2, 2u);
  if (v11)
  {
    int v12 = *(void **)(a1 + 224);
    __int16 v13 = (void *)(a1 + 232);
    if (v12 == (void *)(a1 + 232))
    {
LABEL_13:
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v11 + 16LL))(v11))
      {
        uint64_t v19 = sub_10039BB08(v11, v9, a4, v10);
        goto LABEL_20;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100666B98();
      }
    }

    else
    {
      while (1)
      {
        if (v12[4] != a2)
        {
          int v14 = (void *)v12[5];
          if (!(*(unsigned int (**)(void *))(*v14 + 16LL))(v14))
          {
            id v15 = (void *)v14[45];
            if (v15)
            {
            }
          }
        }

        BOOL v16 = (void *)v12[1];
        if (v16)
        {
          do
          {
            BOOL v17 = v16;
            BOOL v16 = (void *)*v16;
          }

          while (v16);
        }

        else
        {
          do
          {
            BOOL v17 = (void *)v12[2];
            BOOL v18 = *v17 == (void)v12;
            int v12 = v17;
          }

          while (!v18);
        }

        int v12 = v17;
        if (v17 == v13) {
          goto LABEL_13;
        }
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100666BC4();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_100666B6C();
  }

  uint64_t v19 = 3LL;
LABEL_20:

  return v19;
}

void sub_10028F560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028F584(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100404FE8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10028F634;
  void v6[3] = &unk_1008800B8;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100405384(v4, v6);
}

void sub_10028F614( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10028F634(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "FastLEConnection:AppManager::fastLeConnectionDisabledForDevice device %@",  (uint8_t *)&v12,  0xCu);
  }

  id v5 = *(void **)(v2 + 224);
  unint64_t v6 = (void *)(v2 + 232);
  if (v5 != v6)
  {
    do
    {
      id v7 = (id *)v5[5];
      if (!(*((unsigned int (**)(id *))*v7 + 2))(v7))
      {
        id v11 = v7[45];
        if (v11)
        {
          if ([v11 count]) {
            [v7[45] removeObject:*(void *)(a1 + 32)];
          }
        }
      }

      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          uint64_t v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          id v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          id v5 = v9;
        }

        while (!v10);
      }

      id v5 = v9;
    }

    while (v9 != v6);
  }

void sub_10028F768(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100404FE8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10028F818;
  void v6[3] = &unk_1008800B8;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100405384(v4, v6);
}

void sub_10028F7F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10028F818(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v11 = 138543362;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Device %{public}@ evicted", (uint8_t *)&v11, 0xCu);
  }

  id v5 = *(void **)(v2 + 224);
  unint64_t v6 = (void *)(v2 + 232);
  if (v5 != v6)
  {
    do
    {
      id v7 = (void *)v5[5];
      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          uint64_t v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          id v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          id v5 = v9;
        }

        while (!v10);
      }

      id v5 = v9;
    }

    while (v9 != v6);
  }

void sub_10028F934(uint64_t a1, void *a2)
{
}

void sub_10028F93C(uint64_t a1)
{
  uint64_t v1 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "statedump: ---------------- Application Manager ----------------",  buf,  2u);
    uint64_t v1 = (os_log_s *)qword_1008F7628;
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 176)) {
      uint64_t v2 = "running";
    }
    else {
      uint64_t v2 = "stopped";
    }
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "statedump: Cleanup Timer: %{public}s",  buf,  0xCu);
    uint64_t v1 = (os_log_s *)qword_1008F7628;
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "statedump: Known Classic GATT peripheral UUID's:",  buf,  2u);
  }

  __int128 v187 = 0u;
  __int128 v188 = 0u;
  __int128 v185 = 0u;
  __int128 v186 = 0u;
  obuint64_t j = *(id *)(a1 + 328);
  id v3 = [obj countByEnumeratingWithState:&v185 objects:v214 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v186;
    do
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v186 != v4) {
          objc_enumerationMutation(obj);
        }
        unint64_t v6 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = *(void *)(*((void *)&v185 + 1) + 8LL * (void)i);
          *(_DWORD *)__int128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: \t%{public}@", buf, 0xCu);
        }
      }

      id v3 = [obj countByEnumeratingWithState:&v185 objects:v214 count:16];
    }

    while (v3);
  }

  uint64_t v8 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "statedump: CBCentralSessions interested in devices:",  buf,  2u);
  }

  BOOL v10 = *(void **)(a1 + 224);
  __int16 v135 = (void *)(a1 + 232);
  if (v10 != (void *)(a1 + 232))
  {
    *(void *)&__int128 v9 = 136446210LL;
    __int128 v132 = v9;
    do
    {
      uint64_t v12 = v10[4];
      int v11 = (id *)v10[5];
      int v134 = v10;
      if (!(*((unsigned int (**)(id *))*v11 + 2))(v11))
      {
        BOOL v17 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(v12, (uint64_t)buf);
          BOOL v18 = buf;
          if (SBYTE1(v198) < 0) {
            BOOL v18 = *(_BYTE **)buf;
          }
          *(_DWORD *)v212 = v132;
          v213 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "statedump: \t%{public}s:",  v212,  0xCu);
          if (SBYTE1(v198) < 0) {
            operator delete(*(void **)buf);
          }
          BOOL v17 = (os_log_s *)qword_1008F7628;
        }

        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "statedump:         deviceConnections:",  buf,  2u);
        }

        if (objc_msgSend(v11[27], "count", v132))
        {
          __int128 v183 = 0u;
          __int128 v184 = 0u;
          __int128 v181 = 0u;
          __int128 v182 = 0u;
          id obja = v11[27];
          id v19 = [obja countByEnumeratingWithState:&v181 objects:v211 count:16];
          if (v19)
          {
            uint64_t v20 = *(void *)v182;
            uint64_t v136 = *(void *)v182;
            v137 = v11;
            do
            {
              uint64_t v21 = 0LL;
              id v138 = v19;
              do
              {
                if (*(void *)v182 != v20) {
                  objc_enumerationMutation(obja);
                }
                id v143 = *(id *)(*((void *)&v181 + 1) + 8LL * (void)v21);
                uint64_t v22 = (void *)[v11[27] objectForKeyedSubscript:];
                uint64_t v23 = (os_log_s *)qword_1008F7628;
                if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138543362;
                  *(void *)&uint8_t buf[4] = v143;
                  _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "statedump: \t\t         Peripheral:%{public}@",  buf,  0xCu);
                  uint64_t v23 = (os_log_s *)qword_1008F7628;
                }

                if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                {
                  else {
                    int v24 = 78;
                  }
                  int v142 = v24;
                  else {
                    int v25 = 78;
                  }
                  int v141 = v25;
                  else {
                    int v26 = 78;
                  }
                  int v140 = v26;
                  id v139 = [v22 delay];
                  else {
                    int v27 = 78;
                  }
                  else {
                    int v28 = 78;
                  }
                  else {
                    int v29 = 78;
                  }
                  else {
                    int v30 = 78;
                  }
                  unsigned int v31 = [v22 hideFromBTSettings];
                  unsigned int v32 = [v22 enableAutoReconnect];
                  *(_DWORD *)__int128 buf = 67111424;
                  if (v31) {
                    int v33 = 89;
                  }
                  else {
                    int v33 = 78;
                  }
                  *(_DWORD *)&uint8_t buf[4] = v142;
                  if (v32) {
                    int v34 = 89;
                  }
                  else {
                    int v34 = 78;
                  }
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v141;
                  LOWORD(v197) = 1024;
                  *(_DWORD *)((char *)&v197 + 2) = v140;
                  HIWORD(v197) = 2048;
                  id v198 = v139;
                  __int16 v199 = 1024;
                  int v200 = v27;
                  __int16 v201 = 1024;
                  int v202 = v28;
                  __int16 v203 = 1024;
                  int v204 = v29;
                  __int16 v205 = 1024;
                  int v206 = v30;
                  __int16 v207 = 1024;
                  int v208 = v33;
                  __int16 v209 = 1024;
                  int v210 = v34;
                  _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "statedump: \t\t         \toptions: connectAlrts:%c disconAlrts:%c notifAlrts:%c delay:%lu ObjDisc:%c TrsprtBrdge:%c noLeGATT:%c ANCS:%c hide:%c autoReconn:%c",  buf,  0x42u);
                  uint64_t v20 = v136;
                  int v11 = v137;
                  id v19 = v138;
                }

                uint64_t v21 = (char *)v21 + 1;
              }

              while (v19 != v21);
              id v19 = [obja countByEnumeratingWithState:&v181 objects:v211 count:16];
            }

            while (v19);
          }
        }

        std::stringbuf::string_type v35 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "statedump:         pending deviceConnections:",  buf,  2u);
        }

        if ([v11[28] count])
        {
          __int128 v179 = 0u;
          __int128 v180 = 0u;
          __int128 v177 = 0u;
          __int128 v178 = 0u;
          id objb = v11[28];
          id v36 = [objb countByEnumeratingWithState:&v177 objects:v195 count:16];
          if (v36)
          {
            uint64_t v37 = *(void *)v178;
            do
            {
              for (uint64_t j = 0LL; j != v36; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v178 != v37) {
                  objc_enumerationMutation(objb);
                }
                id v39 = *(id *)(*((void *)&v177 + 1) + 8LL * (void)j);
                uint64_t v40 = (os_log_s *)qword_1008F7628;
                if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138543362;
                  *(void *)&uint8_t buf[4] = v39;
                  _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "statedump: \t\t         Peripheral:%{public}@",  buf,  0xCu);
                }
              }

              id v36 = [objb countByEnumeratingWithState:&v177 objects:v195 count:16];
            }

            while (v36);
          }
        }

        (*((void (**)(id *))*v11 + 15))(v11);
        id v41 = v11[45];
        if (v41 && [v41 count])
        {
          __int128 v42 = (os_log_s *)qword_1008F7628;
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "statedump:         Fast LE Connection Devices:",  buf,  2u);
          }

          __int128 v175 = 0u;
          __int128 v176 = 0u;
          __int128 v173 = 0u;
          __int128 v174 = 0u;
          id objc = v11[45];
          id v43 = [objc countByEnumeratingWithState:&v173 objects:v194 count:16];
          if (v43)
          {
            uint64_t v44 = *(void *)v174;
            do
            {
              for (k = 0LL; k != v43; k = (char *)k + 1)
              {
                if (*(void *)v174 != v44) {
                  objc_enumerationMutation(objc);
                }
                id v46 = *(id *)(*((void *)&v173 + 1) + 8LL * (void)k);
                int v47 = (os_log_s *)qword_1008F7628;
                if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138543362;
                  *(void *)&uint8_t buf[4] = v46;
                  _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "statedump: \t\t         Peripheral:%{public}@",  buf,  0xCu);
                }
              }

              id v43 = [objc countByEnumeratingWithState:&v173 objects:v194 count:16];
            }

            while (v43);
          }
        }
      }

      uint64_t v13 = v134;
      int v14 = (void *)v134[1];
      if (v14)
      {
        do
        {
          id v15 = v14;
          int v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          id v15 = (void *)v13[2];
          BOOL v16 = *v15 == (void)v13;
          uint64_t v13 = v15;
        }

        while (!v16);
      }

      BOOL v10 = v15;
    }

    while (v15 != v135);
  }

  uint64_t v48 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "statedump: CBPeripheralSession interested in devices:",  buf,  2u);
  }

  __int128 v49 = *(void **)(a1 + 224);
  if (v49 != v135)
  {
    do
    {
      uint64_t v51 = v49[4];
      __int128 v50 = (id *)v49[5];
      if ((*((unsigned int (**)(id *))*v50 + 2))(v50) == 1)
      {
        __int128 v52 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(v51, (uint64_t)buf);
          __int16 v53 = buf;
          if (SBYTE1(v198) < 0) {
            __int16 v53 = *(_BYTE **)buf;
          }
          *(_DWORD *)v212 = 136446210;
          v213 = v53;
          _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "statedump: \t%{public}s:",  v212,  0xCu);
          if (SBYTE1(v198) < 0) {
            operator delete(*(void **)buf);
          }
          __int128 v52 = (os_log_s *)qword_1008F7628;
        }

        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "statedump:         devices Read/Write GATT:",  buf,  2u);
        }

        id v54 = v50[32];
        BOOL v55 = [v54 count] == 0;

        if (!v55)
        {
          __int128 v171 = 0u;
          __int128 v172 = 0u;
          __int128 v169 = 0u;
          __int128 v170 = 0u;
          id objd = v50[32];
          id v56 = [objd countByEnumeratingWithState:&v169 objects:v193 count:16];
          if (v56)
          {
            uint64_t v57 = *(void *)v170;
            do
            {
              for (m = 0LL; m != v56; m = (char *)m + 1)
              {
                if (*(void *)v170 != v57) {
                  objc_enumerationMutation(objd);
                }
                id v59 = *(id *)(*((void *)&v169 + 1) + 8LL * (void)m);
                __int128 v60 = (os_log_s *)qword_1008F7628;
                if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138543362;
                  *(void *)&uint8_t buf[4] = v59;
                  _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "statedump: \t\t         Peripheral:%{public}@",  buf,  0xCu);
                }
              }

              id v56 = [objd countByEnumeratingWithState:&v169 objects:v193 count:16];
            }

            while (v56);
          }
        }
      }

      uint64_t v61 = (void *)v49[1];
      if (v61)
      {
        do
        {
          unint64_t v62 = v61;
          uint64_t v61 = (void *)*v61;
        }

        while (v61);
      }

      else
      {
        do
        {
          unint64_t v62 = (void *)v49[2];
          BOOL v16 = *v62 == (void)v49;
          __int128 v49 = v62;
        }

        while (!v16);
      }

      __int128 v49 = v62;
    }

    while (v62 != v135);
  }

  __int128 v63 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "statedump: Registered Connecton Events:",  buf,  2u);
  }

  __int128 v64 = *(void **)(a1 + 224);
  if (v64 != v135)
  {
    do
    {
      uint64_t v66 = v64[4];
      uint64_t v65 = v64[5];
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v65 + 16LL))(v65)
        && (*(void *)(v65 + 256) || [*(id *)(v65 + 232) count]))
      {
        __int16 v69 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(v66, (uint64_t)buf);
          char v70 = SBYTE1(v198) >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v212 = 136446210;
          v213 = v70;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "statedump: \t%{public}s:",  v212,  0xCu);
          if (SBYTE1(v198) < 0) {
            operator delete(*(void **)buf);
          }
        }

        if (*(_BYTE *)(v65 + 273))
        {
          char v71 = (os_log_s *)qword_1008F7628;
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "statedump: \t\tAll Devices", buf, 2u);
          }
        }

        else
        {
          __int128 v72 = *(void **)(v65 + 240);
          if (v72 != (void *)(v65 + 248))
          {
            do
            {
              id v73 = (os_log_s *)qword_1008F7628;
              if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
              {
                sub_1006344B4((uint64_t)(v72 + 4), buf);
                id v74 = SBYTE1(v198) >= 0 ? buf : *(_BYTE **)buf;
                *(_DWORD *)v212 = 136446210;
                v213 = v74;
                _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "statedump: \t\tGATT Service:%{public}s",  v212,  0xCu);
                if (SBYTE1(v198) < 0) {
                  operator delete(*(void **)buf);
                }
              }

              uint64_t v75 = (void *)v72[1];
              if (v75)
              {
                do
                {
                  unint64_t v76 = v75;
                  uint64_t v75 = (void *)*v75;
                }

                while (v75);
              }

              else
              {
                do
                {
                  unint64_t v76 = (void *)v72[2];
                  BOOL v16 = *v76 == (void)v72;
                  __int128 v72 = v76;
                }

                while (!v16);
              }

              __int128 v72 = v76;
            }

            while (v76 != (void *)(v65 + 248));
          }

          __int128 v167 = 0u;
          __int128 v168 = 0u;
          __int128 v165 = 0u;
          __int128 v166 = 0u;
          id obje = *(id *)(v65 + 232);
          id v77 = [obje countByEnumeratingWithState:&v165 objects:v192 count:16];
          if (v77)
          {
            uint64_t v78 = *(void *)v166;
            do
            {
              for (n = 0LL; n != v77; n = (char *)n + 1)
              {
                if (*(void *)v166 != v78) {
                  objc_enumerationMutation(obje);
                }
                __int128 v80 = (os_log_s *)qword_1008F7628;
                if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v81 = *(void *)(*((void *)&v165 + 1) + 8LL * (void)n);
                  *(_DWORD *)__int128 buf = 138543362;
                  *(void *)&uint8_t buf[4] = v81;
                  _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "statedump: \t\tPeripheral:%{public}@",  buf,  0xCu);
                }
              }

              id v77 = [obje countByEnumeratingWithState:&v165 objects:v192 count:16];
            }

            while (v77);
          }
        }
      }

      int v67 = (void *)v64[1];
      if (v67)
      {
        do
        {
          unint64_t v68 = v67;
          int v67 = (void *)*v67;
        }

        while (v67);
      }

      else
      {
        do
        {
          unint64_t v68 = (void *)v64[2];
          BOOL v16 = *v68 == (void)v64;
          __int128 v64 = v68;
        }

        while (!v16);
      }

      __int128 v64 = v68;
    }

    while (v68 != v135);
  }

  __int128 v82 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "statedump: Apps allowed to use bluetooth:",  buf,  2u);
  }

  __int128 v163 = 0u;
  __int128 v164 = 0u;
  __int128 v161 = 0u;
  __int128 v162 = 0u;
  id objf = *(id *)(a1 + 336);
  id v83 = [objf countByEnumeratingWithState:&v161 objects:v191 count:16];
  if (v83)
  {
    uint64_t v84 = *(void *)v162;
    do
    {
      for (iuint64_t i = 0LL; ii != v83; iuint64_t i = (char *)ii + 1)
      {
        if (*(void *)v162 != v84) {
          objc_enumerationMutation(objf);
        }
        char v86 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          id v87 = [*(id *)(*((void *)&v161 + 1) + 8 * (void)ii) UTF8String];
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = v87;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "statedump: \t%{public}s:", buf, 0xCu);
        }
      }

      id v83 = [objf countByEnumeratingWithState:&v161 objects:v191 count:16];
    }

    while (v83);
  }

  __int16 v88 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "statedump: Apps disallowed to use bluetooth:",  buf,  2u);
  }

  __int128 v159 = 0u;
  __int128 v160 = 0u;
  __int128 v157 = 0u;
  __int128 v158 = 0u;
  id objg = *(id *)(a1 + 344);
  id v89 = [objg countByEnumeratingWithState:&v157 objects:v190 count:16];
  if (v89)
  {
    uint64_t v90 = *(void *)v158;
    do
    {
      for (juint64_t j = 0LL; jj != v89; juint64_t j = (char *)jj + 1)
      {
        if (*(void *)v158 != v90) {
          objc_enumerationMutation(objg);
        }
        id v92 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          id v93 = [*(id *)(*((void *)&v157 + 1) + 8 * (void)jj) UTF8String];
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = v93;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "statedump: \t%{public}s:", buf, 0xCu);
        }
      }

      id v89 = [objg countByEnumeratingWithState:&v157 objects:v190 count:16];
    }

    while (v89);
  }

  int v94 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "statedump: Apps Interested in FindMy devices:",  buf,  2u);
  }

  [*(id *)(a1 + 320) enumerateKeysAndObjectsUsingBlock:&stru_10088BA80];
  __int16 v95 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "statedump: Sessions with pending FindMy device connections:",  buf,  2u);
  }

  id v96 = *(void **)(a1 + 224);
  if (v96 != v135)
  {
    do
    {
      __int16 v97 = (void *)v96[5];
      if (!(*(unsigned int (**)(void *))(*v97 + 16LL))(v97) && v97[37])
      {
        unsigned int v100 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v101 = v97[11];
          *(_DWORD *)__int128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v101;
          _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "statedump:     %{public}@:", buf, 0xCu);
        }

        __int16 v102 = (void *)v97[35];
        int v103 = v97 + 36;
        if (v102 != v97 + 36)
        {
          __int16 v104 = (os_log_s *)qword_1008F7628;
          do
          {
            if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v105 = v102[4];
              *(_DWORD *)__int128 buf = 138543362;
              *(void *)&uint8_t buf[4] = v105;
              _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEFAULT,  "statedump:     %{public}@:",  buf,  0xCu);
              __int16 v104 = (os_log_s *)qword_1008F7628;
            }

            __int16 v106 = (void *)v102[1];
            if (v106)
            {
              do
              {
                unsigned int v107 = v106;
                __int16 v106 = (void *)*v106;
              }

              while (v106);
            }

            else
            {
              do
              {
                unsigned int v107 = (void *)v102[2];
                BOOL v16 = *v107 == (void)v102;
                __int16 v102 = v107;
              }

              while (!v16);
            }

            __int16 v102 = v107;
          }

          while (v107 != v103);
        }
      }

      uint64_t v98 = (void *)v96[1];
      if (v98)
      {
        do
        {
          __int16 v99 = v98;
          uint64_t v98 = (void *)*v98;
        }

        while (v98);
      }

      else
      {
        do
        {
          __int16 v99 = (void *)v96[2];
          BOOL v16 = *v99 == (void)v96;
          id v96 = v99;
        }

        while (!v16);
      }

      id v96 = v99;
    }

    while (v99 != v135);
  }

  std::string v108 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEFAULT,  "statedump: Sessions with pending latency requirements for device connections:",  buf,  2u);
  }

  __int16 v109 = *(void **)(a1 + 224);
  if (v109 != v135)
  {
    do
    {
      if (!(*(unsigned int (**)(void))(*(void *)v109[5] + 16LL))(v109[5]))
      {
        uint64_t v110 = v109[5];
        __int16 v111 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v110 + 80) allKeys]);
        BOOL v112 = [v111 count] == 0;

        if (!v112)
        {
          __int128 v113 = (os_log_s *)qword_1008F7628;
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
          {
            sub_100494958(v109[4], (uint64_t)buf);
            __int16 v114 = buf;
            if (SBYTE1(v198) < 0) {
              __int16 v114 = *(_BYTE **)buf;
            }
            *(_DWORD *)v212 = 136446210;
            v213 = v114;
            _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_DEFAULT,  "statedump:     %{public}s:",  v212,  0xCu);
            if (SBYTE1(v198) < 0) {
              operator delete(*(void **)buf);
            }
          }

          __int128 v155 = 0u;
          __int128 v156 = 0u;
          __int128 v153 = 0u;
          __int128 v154 = 0u;
          id objh = *(id *)(v110 + 80);
          id v115 = [objh countByEnumeratingWithState:&v153 objects:v189 count:16];
          if (v115)
          {
            uint64_t v116 = *(void *)v154;
            do
            {
              for (kk = 0LL; kk != v115; kk = (char *)kk + 1)
              {
                if (*(void *)v154 != v116) {
                  objc_enumerationMutation(objh);
                }
                __int128 v118 = (os_log_s *)qword_1008F7628;
                if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v119 = *(void *)(*((void *)&v153 + 1) + 8LL * (void)kk);
                  __int128 v120 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v110 + 80) objectForKeyedSubscript:v119]);
                  __int128 v121 = sub_10028D0AC((int)[v120 intValue]);
                  *(_DWORD *)__int128 buf = 138543618;
                  *(void *)&uint8_t buf[4] = v119;
                  *(_WORD *)&_BYTE buf[12] = 2080;
                  v197 = v121;
                  _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "statedump:         %{public}@-->%s",  buf,  0x16u);
                }
              }

              id v115 = [objh countByEnumeratingWithState:&v153 objects:v189 count:16];
            }

            while (v115);
          }
        }
      }

      __int128 v122 = (void *)v109[1];
      if (v122)
      {
        do
        {
          __int128 v123 = v122;
          __int128 v122 = (void *)*v122;
        }

        while (v122);
      }

      else
      {
        do
        {
          __int128 v123 = (void *)v109[2];
          BOOL v16 = *v123 == (void)v109;
          __int16 v109 = v123;
        }

        while (!v16);
      }

      __int16 v109 = v123;
    }

    while (v123 != v135);
  }

  __int128 v124 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "statedump: CBCentralManager LE Sessions:",  buf,  2u);
  }

  __int128 v125 = *(void **)(a1 + 224);
  if (v125 != v135)
  {
    do
    {
      uint64_t v126 = v125[4];
      if (!(*(unsigned int (**)(void))(*(void *)v125[5] + 16LL))(v125[5]))
      {
        v127 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(v126, (uint64_t)buf);
          v128 = SBYTE1(v198) >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v212 = 136446210;
          v213 = v128;
          _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEFAULT,  "statedump: \t%{public}s:",  v212,  0xCu);
          if (SBYTE1(v198) < 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      __int16 v129 = (void *)v125[1];
      if (v129)
      {
        do
        {
          int v130 = v129;
          __int16 v129 = (void *)*v129;
        }

        while (v129);
      }

      else
      {
        do
        {
          int v130 = (void *)v125[2];
          BOOL v16 = *v130 == (void)v125;
          __int128 v125 = v130;
        }

        while (!v16);
      }

      __int128 v125 = v130;
    }

    while (v130 != v135);
  }

  __int16 v131 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEFAULT,  "statedump: fScreenOffWakeHistoryMap:",  buf,  2u);
  }

  sub_10028EF40(a1);
}

void sub_100291098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27)
{
}

void sub_10029115C(id a1, NSString *a2, NSSet *a3, BOOL *a4)
{
  unint64_t v6 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543618;
    uint64_t v8 = a2;
    __int16 v9 = 2112;
    BOOL v10 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump: \t%{public}@:%@",  (uint8_t *)&v7,  0x16u);
  }

void sub_100291230(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1002917F4(a1);
  operator delete(v1);
}

void sub_100291258(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_100291260(uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t sub_100291270(uint64_t a1)
{
  return sub_1002917F4(a1 - 136);
}

void sub_100291278(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1002917F4(a1 - 136);
  operator delete(v1);
}

uint64_t sub_100291294(uint64_t a1)
{
  return sub_1002917F4(a1 - 152);
}

void sub_10029129C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1002917F4(a1 - 152);
  operator delete(v1);
}

uint64_t sub_1002912C0(uint64_t a1)
{
  return sub_1002917F4(a1 - 160);
}

void sub_1002912C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1002917F4(a1 - 160);
  operator delete(v1);
}

void sub_1002912E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  id v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    unint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  unint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      unint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_100291398(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_100291398(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  uint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      id v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      id v19 = 0LL;
    }
    uint64_t v20 = &v19[8 * v16];
    std::stringbuf::string_type __p = v19;
    int v27 = v20;
    int v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_100008BA0(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::stringbuf::string_type __p = v23;
        int v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int v27 = v20;
      }
    }

    *(void *)uint64_t v20 = *(void *)v3;
    int v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)____int128 src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    __int16 v9 = __src + 8;
    BOOL v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_10029159C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1002915D4( _DWORD *a1, const std::string *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v17 = sub_10040CB94(a1, 25);
  *((void *)v17 + 1) = 0LL;
  *((void *)v17 + 2) = 0LL;
  *((void *)v17 + 3) = 0LL;
  std::string::operator=((std::string *)(v17 + 2), a2);
  a1[8] = a3;
  a1[9] = a4;
  a1[10] = a5;
  a1[11] = a6;
  a1[12] = a7;
  a1[13] = a8;
  a1[14] = a9;
  return a1;
}

void sub_100291664(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100291680(uint64_t a1, const unsigned __int8 *a2, char a3, uint64_t a4, uint64_t *a5)
{
  *(_BYTE *)(a1 + 16) = a3;
  sub_100240540((void *)(a1 + 24), a4);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + sub_100242FAC(v1 - 64) = 0LL;
  sub_100291B30((void *)(a1 + 48), *a5, a5[1], 0x8E38E38E38E38E39LL * ((a5[1] - *a5) >> 1));
  return a1;
}

void sub_1002916FC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + sub_100242E28(v1 + 32) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void sub_100291718(id a1)
{
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v7 = 0LL;
  sub_10002418C(__p, "");
  uint64_t v1 = sub_1002E8D54();
  (*(void (**)(uint64_t, void **))(*(void *)v1 + 168LL))(v1, __p);
  if (v7 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:]( &OBJC_CLASS___NSURL,  "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:",  v2,  1LL,  0LL));
  uint64_t v4 = objc_claimAutoreleasedReturnValue( [v3 URLByAppendingPathComponent:@"/Library/Database/com.apple.bluetooth-restoration-v1.plist"]);
  id v5 = (void *)qword_1008EF988;
  qword_1008EF988 = v4;

  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002917C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002917F4(uint64_t a1)
{
  *(void *)a1 = off_10088B308;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_10088B548;
  *(void *)(a1 + 16) = off_10088B580;
  *(void *)(a1 + 24) = off_10088B5A0;
  *(void *)(a1 + sub_100242E28(v1 + 32) = off_10088B650;
  *(void *)(a1 + 40) = off_10088B6B0;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &off_10088B6F0;
  *(void *)(a1 + 56) = off_10088B708;
  *(void *)(a1 + sub_100242FAC(v1 - 64) = off_10088B750;
  *(void *)(a1 + 72) = off_10088B770;
  *(void *)(a1 + sub_100242FAC(v40 - 80) = &off_10088B798;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = off_10088B7B0;
  *(void *)(a1 + sub_100242E28(v1 + 96) = off_10088B7E0;
  *(void *)(a1 + 104) = &off_10088B808;
  *(void *)(a1 + 112) = off_10088B820;
  *(void *)(a1 + 120) = &off_10088B848;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = &off_10088B860;
  *(void *)(a1 + 136) = off_10088B878;
  *(void *)(a1 + 144) = &off_10088B8B8;
  *(void *)(a1 + 152) = off_10088B8D0;
  *(void *)(a1 + sub_100242E28(v1 + 160) = off_10088B948;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = &off_10088B970;
  sub_100291CE8(a1 + 384, *(void **)(a1 + 392));
  uint64_t v4 = (void **)(a1 + 360);
  sub_100024304(&v4);

  sub_10023E78C(a1 + 272, *(char **)(a1 + 280));
  sub_100291CA0(a1 + 248, *(void **)(a1 + 256));
  sub_10023BF24(a1 + 224, *(void **)(a1 + 232));
  uint64_t v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(void *)(a1 + 20_Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t *sub_100291924(uint64_t *a1, const void ***a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100291978(a1, *a2, a2 + 1);
  return a1;
}

void sub_100291960(_Unwind_Exception *a1)
{
}

uint64_t *sub_100291978(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    id v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      id result = sub_1002919FC(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }

        while (!v9);
      }

      uint64_t v4 = (const void **)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_1002919FC(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v9 = 0LL;
  BOOL v10 = 0LL;
  unint64_t v6 = (uint64_t **)sub_10023E45C(a1, a2, &v10, &v9, a3);
  id result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100291A88((uint64_t)a1, a4, v8);
    sub_100029630(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }

  return result;
}

void *sub_100291A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  void *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  id result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    id result = sub_100024238(result, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)id result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }

  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100291B14(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10023E740(v2, v3);
  _Unwind_Resume(a1);
}

void sub_100291B30(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    sub_100291B80(a1, a4);
    sub_100291BD0((uint64_t)a1, a2, a3);
  }

char *sub_100291B80(void *a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E39LL) {
    abort();
  }
  id result = (char *)sub_100291C58((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[18 * v4];
  return result;
}

void sub_100291BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a2 + v7;
      uuid_copy((unsigned __int8 *)(v4 + v7), (const unsigned __int8 *)(a2 + v7));
      *(_WORD *)(v4 + v7 + 16) = *(_WORD *)(a2 + v7 + 16);
      v7 += 18LL;
    }

    while (v8 + 18 != a3);
    v4 += v7;
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
}

void sub_100291C50(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_100291C58(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E39LL) {
    sub_100008BD4();
  }
  return operator new(18 * a2);
}

void sub_100291CA0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100291CA0(a1, *a2);
    sub_100291CA0(a1, a2[1]);

    operator delete(a2);
  }

void sub_100291CE8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100291CE8(a1, *a2);
    sub_100291CE8(a1, a2[1]);
    sub_100291D30((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_100291D30(uint64_t a1)
{
}

void sub_100291D6C(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10040D0A0((uint64_t)v1);
  off_1008D6780 = v1;
}

void sub_100291D9C(_Unwind_Exception *a1)
{
}

void sub_100291DB0(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_100551DD0();
  qword_1008D5F58 = (uint64_t)v1;
}

void sub_100291DE0(_Unwind_Exception *a1)
{
}

void sub_100291DF4(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_100291E24(_Unwind_Exception *a1)
{
}

void sub_100291E38(id a1)
{
  uint64_t v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_100291E68(_Unwind_Exception *a1)
{
}

void sub_100291E7C(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100380B10();
  qword_1008D9260 = (uint64_t)v1;
}

void sub_100291EAC(_Unwind_Exception *a1)
{
}

void sub_100291EC0(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_100291EF0(_Unwind_Exception *a1)
{
}

void sub_100291F04(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_100291F34(_Unwind_Exception *a1)
{
}

void sub_100291F48(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_100291F78(_Unwind_Exception *a1)
{
}

void sub_100291F8C(id a1)
{
  uint64_t v1 = operator new(0x50uLL);
  sub_100411DB0((uint64_t)v1);
  qword_1008D9270 = (uint64_t)v1;
}

void sub_100291FBC(_Unwind_Exception *a1)
{
}

void sub_100291FD0(id a1)
{
  uint64_t v1 = operator new(0x42C0uLL);
  sub_10056DFB4();
  off_1008D6280 = v1;
}

void sub_100292000(_Unwind_Exception *a1)
{
}

void sub_100292014(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10040749C((uint64_t)v1);
  off_1008D5EF8 = v1;
}

void sub_100292044(_Unwind_Exception *a1)
{
}

void sub_100292058(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_100292088(_Unwind_Exception *a1)
{
}

void sub_10029209C(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_1002920CC(_Unwind_Exception *a1)
{
}

void sub_1002920E0(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003ADFF0((uint64_t)v1);
  off_1008D5F38 = v1;
}

void sub_100292110(_Unwind_Exception *a1)
{
}

void sub_100292124(id a1)
{
  uint64_t v1 = operator new(0x90uLL);
  sub_1004FD008((uint64_t)v1);
  qword_1008D9280 = (uint64_t)v1;
}

void sub_100292154(_Unwind_Exception *a1)
{
}

void sub_100292168(id a1)
{
  uint64_t v1 = operator new(0x1A0uLL);
  sub_1002765D0((uint64_t)v1);
  off_1008D67C0 = v1;
}

void sub_100292198(_Unwind_Exception *a1)
{
}

void sub_1002921AC(id a1)
{
  qword_1008D9290 = (uint64_t)operator new(1uLL);
}

void sub_1002921CC(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1002921FC(_Unwind_Exception *a1)
{
}

void sub_100292210(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10064B7C8();
  qword_1008D92A0 = (uint64_t)v1;
}

void sub_100292240(_Unwind_Exception *a1)
{
}

void sub_100292254(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 9;
        sub_1002922D8((uint64_t)(v1 + 2), v4);
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_1002922D8(uint64_t a1, void *a2)
{
  id v3 = (void *)a2[6];
  if (v3)
  {
    a2[7] = v3;
    operator delete(v3);
  }

  uint64_t v4 = (void *)a2[3];
  if (v4)
  {
    a2[4] = v4;
    operator delete(v4);
  }

uint64_t sub_10029231C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x8E38E38E38E38E39LL * ((a1[1] - *a1) >> 1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E38LL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x8E38E38E38E38E39LL * ((v8 - v2) >> 1);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x71C71C71C71C71CLL) {
    unint64_t v10 = 0xE38E38E38E38E38LL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    int v11 = (char *)sub_100291C58(v7, v10);
  }
  else {
    int v11 = 0LL;
  }
  std::stringbuf::string_type __p = v11;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (unsigned __int8 *)&v11[18 * v3];
  uint64_t v16 = v15;
  uint64_t v17 = &v11[18 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_WORD *)v15 + _Block_object_dispose(va, 8) = *(_WORD *)(a2 + 16);
  v16 += 18;
  sub_1002924C0(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    uint64_t v16 = &v15[(v16 - v15 - 18) % 0x12uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_10029246C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002924C0(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v5 == *a1)
  {
    uint64_t v7 = a2[1];
  }

  else
  {
    do
    {
      uint64_t v7 = v6 - 18;
      uuid_copy((unsigned __int8 *)(v6 - 18), (const unsigned __int8 *)(v5 - 18));
      *(_WORD *)(v6 - 2) = *(_WORD *)(v5 - 2);
      v5 -= 18LL;
      v6 -= 18LL;
    }

    while (v5 != v4);
  }

  a2[1] = v7;
  uint64_t v8 = *a1;
  *a1 = v7;
  a2[1] = v8;
  uint64_t v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

void sub_100292574(id a1)
{
  uint64_t v1 = operator new(0x48uLL);
  sub_100502AF0((uint64_t)v1);
  qword_1008D6610 = (uint64_t)v1;
}

void sub_1002925A4(_Unwind_Exception *a1)
{
}

_OWORD *sub_1002925B8(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v12 = 0LL;
  uint64_t v6 = (void **)sub_10023E6A4((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0LL;
    _DWORD v9[2] = 0LL;
    void *v9 = 0LL;
    *((_BYTE *)v7 + 56) = 0;
    sub_100029630(a1, v12, v8, (uint64_t *)v7);
  }

  return v7;
}

void sub_100292654(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10_Block_object_dispose(va, 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2_Block_object_dispose(va, 8) = v1 + 232;
  *((void *)v1 + sub_100242E28(v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_10029275C(_Unwind_Exception *a1)
{
}

void sub_100292770(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_1003C97E4((uint64_t)v1);
  off_1008D67E0 = v1;
}

void sub_1002927A0(_Unwind_Exception *a1)
{
}

void sub_1002927B4(id a1)
{
  uint64_t v1 = operator new(0x18uLL);
  *(void *)uint64_t v1 = 0LL;
  v1[2] = 0;
  *((_BYTE *)v1 + 12) = 0;
  v1[4] = 0;
  qword_1008D9058 = (uint64_t)v1;
}

void sub_1002927E4(id a1)
{
  uint64_t v1 = operator new(0x70uLL);
  sub_1003639FC((uint64_t)v1);
  qword_1008D9048 = (uint64_t)v1;
}

void sub_100292814(_Unwind_Exception *a1)
{
}

void sub_100292828(id a1)
{
  uint64_t v1 = operator new(0xE8uLL);
  sub_100243588((uint64_t)v1);
  qword_1008D9150 = (uint64_t)v1;
}

void sub_100292858(_Unwind_Exception *a1)
{
}

void sub_10029286C(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10029289C(_Unwind_Exception *a1)
{
}

void *sub_1002928B0(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1LL;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x20uLL);
      v7[1] = *(_OWORD *)(v3 + 16);
      *(void *)uint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }

    while (v3 != a2);
  }

  return a1;
}

void sub_100292934(_Unwind_Exception *a1)
{
}

void *sub_100292948(void *result, uint64_t a2, uint64_t a3, float a4)
{
  if (v4 >= 0) {
    uint64_t v5 = result;
  }
  else {
    uint64_t v5 = (void *)*result;
  }
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = v5;
  *(_WORD *)(a3 + 12) = 2114;
  *(void *)(a3 + 14) = a2;
  return result;
}

  ;
}

uint64_t sub_100292980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, ...)
{
  *(void *)(v3 - 24) = a2;
  return sub_100494958(a1, (uint64_t)va);
}

void sub_100292990( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void *sub_1002929A4(void *result, uint64_t a2, int a3, float a4)
{
  if (v4 >= 0) {
    uint64_t v5 = result;
  }
  else {
    uint64_t v5 = (void *)*result;
  }
  *(float *)a2 = a4;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + _Block_object_dispose(va, 8) = 2082;
  *(void *)(a2 + 10) = v5;
  return result;
}

void sub_1002929C8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1002929D8(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

void sub_1002929E8(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_100292A00(uint64_t a1)
{
  if (sub_100487C60())
  {
    uint64_t v2 = (void **)operator new(0x70uLL);
    sub_10045133C((uint64_t)v2);
    unint64_t v21 = v2;
    int v20 = 1;
    unint64_t v22 = &v20;
    uint64_t v3 = sub_100294740((uint64_t **)(a1 + 8), &v20, (uint64_t)&unk_1006C2518, &v22);
    int v4 = (uint64_t *)v21;
    unint64_t v21 = 0LL;
    uint64_t v5 = v3[5];
    void v3[5] = v4;
    if (v5)
    {
      (*(void (**)(uint64_t *))(*v5 + 8))(v5);
      uint64_t v6 = v21;
      unint64_t v21 = 0LL;
      if (v6) {
        sub_100294800((uint64_t)&v21, v6);
      }
    }

    uint64_t v7 = (void **)operator new(0x108uLL);
    sub_10054F920((uint64_t)v7);
    unint64_t v21 = v7;
    int v20 = 2;
    unint64_t v22 = &v20;
    uint64_t v8 = sub_100294740((uint64_t **)(a1 + 8), &v20, (uint64_t)&unk_1006C2518, &v22);
    uint64_t v9 = (uint64_t *)v21;
    unint64_t v21 = 0LL;
    uint64_t v10 = v8[5];
    void v8[5] = v9;
    if (v10)
    {
      (*(void (**)(uint64_t *))(*v10 + 8))(v10);
      int v11 = (char *)v21;
      unint64_t v21 = 0LL;
      if (v11) {
        sub_100294854((uint64_t)&v21, v11);
      }
    }

    sub_100292BC0((void *)a1, 1LL);
    sub_100292D6C(a1);
  }

  else
  {
    uint64_t v12 = (os_log_s *)qword_1008F7608;
    if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_ERROR)) {
      sub_100666BF8(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }

void sub_100292B68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  int v11 = a10;
  a10 = 0LL;
  if (v11) {
    sub_100294854((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100292BC0(void *a1, uint64_t a2)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, (uint64_t)(a1 + 8));
  int v4 = (os_log_s *)qword_1008F7608;
  if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "remote and installed";
    if ((_DWORD)a2) {
      uint64_t v5 = "installed";
    }
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Querying %s assets", buf, 0xCu);
  }

  id v6 = [[MAAssetQuery alloc] initWithType:*a1];
  [v6 setDoNotBlockBeforeFirstUnlock:1];
  [v6 setDoNotBlockOnNetworkStatus:a2];
  if ((_DWORD)a2) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = 2LL;
  }
  [v6 returnTypes:v7];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002936E0;
  v10[3] = &unk_10088BED8;
  uint64_t v12 = a1;
  char v13 = a2;
  id v8 = v6;
  id v11 = v8;
  [v8 queryMetaData:v10];

  return sub_100242FAC((uint64_t)v14);
}

void sub_100292D30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100292D6C(uint64_t a1)
{
  char v13 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "MobileAsset");
  sub_10002418C(__p, "EnableFiveMinDownloads");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v2 + 72LL))(v2, buf, __p, &v13);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  int64_t v4 = XPC_ACTIVITY_INTERVAL_1_DAY;
  if (v12 < 0) {
    operator delete(*(void **)buf);
  }
  if (v13) {
    int v5 = v3;
  }
  else {
    int v5 = 0;
  }
  if (v5 == 1)
  {
    id v6 = (os_log_s *)qword_1008F7608;
    if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Warning: Enabling aggressive 5 minute download timer!",  buf,  2u);
    }

    int64_t v4 = XPC_ACTIVITY_INTERVAL_5_MIN;
  }

  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
  xpc_dictionary_set_uint64(v7, XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE, 0x400uLL);
  xpc_dictionary_set_int64(v7, XPC_ACTIVITY_INTERVAL, v4);
  xpc_dictionary_set_string(v7, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_10029344C;
  v8[3] = &unk_10088BE90;
  _OWORD v8[4] = a1;
  xpc_activity_register("com.apple.bluetooth.mobileassets", v7, v8);
  xpc_release(v7);
}

void sub_100292F38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100292F6C(void *a1)
{
  uint64_t v1 = a1;
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, (uint64_t)(a1 + 8));
  uint64_t v2 = (void *)v1[2];
  v1 += 2;
  sub_1002948EC((uint64_t)(v1 - 1), v2);
  *(v1 - 1) = v1;
  void *v1 = 0LL;
  v1[1] = 0LL;
  return sub_100242FAC((uint64_t)v4);
}

uint64_t sub_100292FBC(uint64_t a1, int a2)
{
  int v9 = a2;
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 64);
  int64_t v4 = *(uint64_t **)(a1 + 16);
  if (!v4)
  {
LABEL_7:
    uint64_t v6 = 0LL;
    goto LABEL_8;
  }

  while (1)
  {
    int v5 = *((_DWORD *)v4 + 8);
    if (v5 <= a2) {
      break;
    }
LABEL_6:
    int64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      goto LABEL_7;
    }
  }

  if (v5 < a2)
  {
    ++v4;
    goto LABEL_6;
  }

  uint64_t v6 = *sub_100293054(a1 + 8, &v9);
LABEL_8:
  sub_100242FAC((uint64_t)v8);
  return v6;
}

void sub_100293040(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100293054(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    abort();
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }

    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }

void sub_1002930A0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7608;
  if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: ---------------- MobileAsset Manager ----------------",  (uint8_t *)&buf,  2u);
    uint64_t v2 = (os_log_s *)qword_1008F7608;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 128);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fRetryLocalAssetReadCounter:%d",  (uint8_t *)&buf,  8u);
  }

  int v4 = *(void **)(a1 + 8);
  if (v4 != (void *)(a1 + 16))
  {
    do
    {
      id v5 = sub_100502708(v4[5]);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      if (v6)
      {
        xpc_object_t v7 = (os_log_s *)qword_1008F7608;
        if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT))
        {
          sub_1002932A4(v6, &buf);
          id v8 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)char v13 = 136446210;
          uint64_t v14 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v13, 0xCu);
        }
      }

      int v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          char v10 = v9;
          int v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          char v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          int v4 = v10;
        }

        while (!v11);
      }

      int v4 = v10;
    }

    while (v10 != (void *)(a1 + 16));
  }

void sub_10029328C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002932A4(void *a1@<X1>, std::string *a2@<X8>)
{
  id v3 = a1;
  std::stringbuf::string_type __p = 0LL;
  size_t v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_1002946BC(v3, &__p);
  unsigned int v5 = sub_1002940F8(v4, v3);
  if (v16 >= 0) {
    size_t v6 = HIBYTE(v16);
  }
  else {
    size_t v6 = v15;
  }
  memset(&v13, 0, sizeof(v13));
  xpc_object_t v7 = &v13;
  sub_100271C18((uint64_t)&v13, v6 + 2);
  if ((v13.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    xpc_object_t v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (v16 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    memmove(v7, p_p, v6);
  }

  strcpy((char *)v7 + v6, " v");
  std::to_string(&v12, v5);
  if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v9 = &v12;
  }
  else {
    int v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v12.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
  }
  BOOL v11 = std::string::append(&v13, (const std::string::value_type *)v9, size);
  *a2 = *v11;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
}

void sub_1002933F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void sub_10029344C(uint64_t a1, xpc_activity_t activity)
{
  id v3 = *(uint64_t **)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  unsigned int v5 = (os_log_s *)qword_1008F7608;
  if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 134217984;
    xpc_activity_state_t v15 = state;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "com.apple.bluetooth.mobileassets activity triggered with state %ld",  (uint8_t *)&v14,  0xCu);
  }

  if (state == 2)
  {
    sub_10029354C(v3);
    if (!xpc_activity_set_state(activity, 5LL))
    {
      size_t v6 = (os_log_s *)qword_1008F7608;
      if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_ERROR)) {
        sub_100666C2C(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }

id sub_10029354C(uint64_t *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7608;
  if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Downloading MobileBluetoothAssets catalog",  buf,  2u);
  }

  uint64_t v3 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1002935F8;
  v5[3] = &unk_10088BEB0;
  void v5[4] = a1;
  return +[MAAsset startCatalogDownload:then:](&OBJC_CLASS___MAAsset, "startCatalogDownload:then:", v3, v5);
}

void sub_1002935F8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = (os_log_s *)qword_1008F7608;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    int v6 = 136315138;
    uint64_t v7 = sub_1002936BC(v5, a2);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Catalog download completed with result: %s",  (uint8_t *)&v6,  0xCu);
  }

  if (!a2) {
    sub_100292BC0(v3, 0LL);
  }
}

const char *sub_1002936BC(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x24) {
    return "UnknownDownloadResultType";
  }
  else {
    return off_10088BF88[a2];
  }
}

void sub_1002936E0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  BOOL v5 = (os_log_s *)qword_1008F7608;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    uint64_t v7 = sub_100293B28(v6, a2);
    int v8 = *(unsigned __int8 *)(v4 + 128);
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Mobile asset query completed with result: %s fRetryLocalAssetReadCounter:%d",  buf,  0x12u);
  }

  if (!a2 || a2 == 2 && *(_BYTE *)(a1 + 48))
  {
    memset(buf, 0, sizeof(buf));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    sub_100293B4C(v4, v9, (uint64_t)buf);

    uint64_t v10 = *(uint8_t **)buf;
    if (*(uint8_t **)buf != &buf[8])
    {
      do
      {
        if (*(_BYTE *)(a1 + 48))
        {
          uint64_t v11 = (os_log_s *)qword_1008F7608;
          if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT))
          {
            sub_1002932A4(*((void **)v10 + 5), &__p);
            p_p = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t v24 = 136315138;
            int v25 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reading %s asset", v24, 0xCu);
          }

          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v10 + 32);
          uint64_t v13 = sub_100294740((uint64_t **)(v4 + 8), (int *)v10 + 8, (uint64_t)&unk_1006C2518, &__p);
          (*(void (**)(uint64_t *, void))(*v13[5] + 16))(v13[5], *((void *)v10 + 5));
          *(_BYTE *)(v4 + 12_Block_object_dispose(va, 8) = 0;
        }

        else if ([*((id *)v10 + 5) wasLocal])
        {
          int v14 = (os_log_s *)qword_1008F7608;
          if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEBUG))
          {
            sub_1002932A4(*((void **)v10 + 5), &__p);
            xpc_activity_state_t v15 = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              xpc_activity_state_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t v24 = 136315138;
            int v25 = v15;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s asset is already present, no need to redownload",  v24,  0xCu);
          }
        }

        else
        {
          sub_100293DA8(v4, *((void **)v10 + 5));
        }

        uint64_t v16 = (uint8_t *)*((void *)v10 + 1);
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = *(uint8_t **)v16;
          }

          while (v16);
        }

        else
        {
          do
          {
            uint64_t v17 = (uint8_t *)*((void *)v10 + 2);
            BOOL v18 = *(void *)v17 == (void)v10;
            uint64_t v10 = v17;
          }

          while (!v18);
        }

        uint64_t v10 = v17;
      }

      while (v17 != &buf[8]);
    }

    sub_100294944((uint64_t)buf, *(void **)&buf[8]);
  }

  else if (*(_BYTE *)(a1 + 48))
  {
    unsigned int v20 = *(unsigned __int8 *)(v4 + 128);
    if (v20 <= 4)
    {
      *(_BYTE *)(v4 + 12_Block_object_dispose(va, 8) = v20 + 1;
      dispatch_time_t v21 = dispatch_time(0LL, 5000000000LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100293F40;
      block[3] = &unk_10087EB20;
      void block[4] = v4;
      dispatch_after(v21, &_dispatch_main_q, block);
    }
  }

  if (*(_BYTE *)(a1 + 48) && !*(void *)(v4 + 24))
  {
    if (qword_1008D9060 != -1) {
      dispatch_once(&qword_1008D9060, &stru_10088BF68);
    }
    uint64_t v19 = qword_1008D9058;
    sub_10002418C(buf, "MobileAsset");
    sub_10002418C(&__p, "No assets found from querying local assets");
    sub_10040C784(0.0, v19, (uint64_t *)buf, (uint64_t *)&__p);
  }

void sub_100293AC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_100293B28(uint64_t a1, unint64_t a2)
{
  if (a2 > 0xE) {
    return "UnknownQueryResultType";
  }
  else {
    return off_10088C0B0[a2];
  }
}

void sub_100293B4C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  BOOL v6 = (uint64_t **)(a3 + 8);
  *(void *)(a3 + 16) = 0LL;
  *(void *)a3 = a3 + 8;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  obuint64_t j = v5;
  id v7 = [obj countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v23;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)v9);
        int v21 = 0;
        int v11 = sub_100293F4C(a1, v10);
        int v21 = v11;
        uint64_t v12 = *v6;
        if (!*v6)
        {
LABEL_11:
          int v26 = &v21;
          int v14 = sub_100294740((uint64_t **)a3, &v21, (uint64_t)&unk_1006C2518, &v26);
          xpc_activity_state_t v15 = v10;
          uint64_t v16 = v14[5];
          v14[5] = v15;
          goto LABEL_12;
        }

        while (1)
        {
          int v13 = *((_DWORD *)v12 + 8);
          if (v11 >= v13) {
            break;
          }
LABEL_10:
          uint64_t v12 = (uint64_t *)*v12;
          if (!v12) {
            goto LABEL_11;
          }
        }

        if (v13 < v11)
        {
          ++v12;
          goto LABEL_10;
        }

        int v26 = &v21;
        uint64_t v16 = sub_100294740((uint64_t **)a3, &v21, (uint64_t)&unk_1006C2518, &v26)[5];
        id v17 = sub_1002940F8((uint64_t)v16, v16);
        if (sub_1002940F8((uint64_t)v17, v10) > v17)
        {
          int v26 = &v21;
          BOOL v18 = sub_100294740((uint64_t **)a3, &v21, (uint64_t)&unk_1006C2518, &v26);
          objc_storeStrong((id *)v18 + 5, v10);
        }

void sub_100293D58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_100294944(v9, *(void **)(v9 + 8));
  _Unwind_Resume(a1);
}

void sub_100293DA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)qword_1008F7608;
  if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT))
  {
    sub_1002932A4(v3, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    int v13 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Downloading %s asset", buf, 0xCu);
  }

  [v3 logAsset];
  id v6 = objc_alloc_init(&OBJC_CLASS___MADownloadOptions);
  [v6 setDiscretionary:0];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100294170;
  v8[3] = &unk_10088BF20;
  uint64_t v10 = a1;
  id v7 = v3;
  id v9 = v7;
  [v7 startDownload:v6 then:v8];
}

void sub_100293F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100293F40(uint64_t a1)
{
  return sub_100292BC0(*(void *)(a1 + 32), 1LL);
}

BOOL sub_100293F4C(uint64_t a1, void *a2)
{
  std::string __p = 0LL;
  __int128 v13 = 0uLL;
  sub_1002946BC(a2, &__p);
  if (SHIBYTE(v13) < 0)
  {
    p_p = (unint64_t *)__p;
    if ((void)v13 != 21LL)
    {
      if ((void)v13 != 23LL
        || (*(void *)__p == 0x6C42656C69626F4DLL ? (BOOL v6 = *((void *)__p + 1) == 0x4468746F6F746575LL) : (BOOL v6 = 0),
            v6 ? (BOOL v7 = *(void *)((char *)__p + 15) == 0x6573616261746144LL) : (BOOL v7 = 0),
            !v7))
      {
        uint64_t v4 = 0LL;
LABEL_33:
        operator delete(p_p);
        return v4;
      }

      uint64_t v4 = 1LL;
      if ((HIBYTE(v13) & 0x80) == 0) {
        return v4;
      }
LABEL_32:
      p_p = (unint64_t *)__p;
      goto LABEL_33;
    }
  }

  else
  {
    if (HIBYTE(v13) != 21)
    {
      if (HIBYTE(v13) != 23) {
        return 0LL;
      }
      return __p == (void *)0x6C42656C69626F4DLL
          && (void)v13 == 0x4468746F6F746575LL
          && *(void *)((char *)&v13 + 7) == 0x6573616261746144LL;
    }

    p_p = (unint64_t *)&__p;
  }

  unint64_t v8 = 0x4D6F62696C65426CLL;
  unint64_t v9 = bswap64(*p_p);
  if (v9 == 0x4D6F62696C65426CLL
    && (unint64_t v8 = 0x7565746F6F746843LL, v9 = bswap64(p_p[1]), v9 == 0x7565746F6F746843LL)
    && (unint64_t v8 = 0x7468436F6E666967LL, v9 = bswap64(*(unint64_t *)((char *)p_p + 13)), v9 == 0x7468436F6E666967LL))
  {
    int v10 = 0;
  }

  else if (v9 < v8)
  {
    int v10 = -1;
  }

  else
  {
    int v10 = 1;
  }

  uint64_t v4 = 2 * (v10 == 0);
  if ((HIBYTE(v13) & 0x80) != 0) {
    goto LABEL_32;
  }
  return v4;
}

id sub_1002940F8(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a2 attributes]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:ASAttributeContentVersion]);
  id v4 = [v3 intValue];

  return v4;
}

void sub_100294154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100294170(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (os_log_s *)qword_1008F7608;
  if (!os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_5;
  }
  p_p = &__p;
  sub_1002932A4(*(void **)(a1 + 32), &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unint64_t v8 = sub_1002936BC(v7, a2);
  *(_DWORD *)std::string buf = 136315394;
  id v17 = p_p;
  __int16 v18 = 2080;
  id v19 = v8;
  _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s asset download completed with result: %s",  buf,  0x16u);
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a2) {
      return;
    }
  }

  else
  {
LABEL_5:
    if (a2) {
      return;
    }
  }

  *(_DWORD *)std::string buf = sub_100293F4C(v4, *(void **)(a1 + 32));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  unint64_t v9 = sub_100294740((uint64_t **)(v4 + 8), (int *)buf, (uint64_t)&unk_1006C2518, &__p);
  id v10 = sub_100502708((uint64_t)v9[5]);
  int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  uint64_t v12 = sub_100294740((uint64_t **)(v4 + 8), (int *)buf, (uint64_t)&unk_1006C2518, &__p);
  (*(void (**)(uint64_t *, void))(*v12[5] + 16))(v12[5], *(void *)(a1 + 32));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _OWORD v13[2] = sub_100294598;
  v13[3] = &unk_10088BEF8;
  int v14 = *(_DWORD *)buf;
  sub_1002944DC((os_unfair_lock_s *)(v4 + 32), v13);
}

void sub_100294360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100294378(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  BOOL v6 = v5;
  if (!v5 || [v5 state] == (id)5 || objc_msgSend(v6, "state") == (id)6)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 assetId]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 assetId]);
    uint64_t v7 = [v9 isEqualToString:v10] ^ 1;
  }

  return v7;
}

void sub_100294424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100294450(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002945B0;
  void v4[3] = &unk_10088BF20;
  id v5 = a2;
  uint64_t v6 = a1;
  id v3 = v5;
  [v3 purge:v4];
}

void sub_1002944C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1002944DC(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock(a1);
  id v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  id v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    id v4 = v5;
  }

  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100294570( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100294598(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_1002945B0(uint64_t a1, unint64_t a2)
{
  id v4 = (os_log_s *)qword_1008F7608;
  if (os_log_type_enabled((os_log_t)qword_1008F7608, OS_LOG_TYPE_DEFAULT))
  {
    sub_1002932A4(*(void **)(a1 + 32), &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (a2 > 0xB) {
      uint64_t v6 = "UnknownPurgeResultType";
    }
    else {
      uint64_t v6 = off_10088C128[a2];
    }
    *(_DWORD *)std::string buf = 136315394;
    unint64_t v9 = p_p;
    __int16 v10 = 2080;
    int v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Outdated %s asset has been purged with result %s",  buf,  0x16u);
  }

void sub_1002946BC(void *a1@<X1>, void *a2@<X8>)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([a1 attributes]);
  id v3 = objc_claimAutoreleasedReturnValue([v4 objectForKey:@"AssetName"]);
  sub_10002418C(a2, (char *)[v3 UTF8String]);
}

void sub_100294720( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t **sub_100294740(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    __int16 v11[8] = **a4;
    *((void *)v11 + 5) = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_100294800(uint64_t a1, void **a2)
{
  if (a2)
  {
    *a2 = off_10088BF50;

    sub_100242E28(a2 + 1);
    operator delete(a2);
  }

void sub_100294854(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10023E78C((uint64_t)(a2 + 232), *((char **)a2 + 30));
    sub_10023BF24((uint64_t)(a2 + 208), *((void **)a2 + 27));
    sub_10023E78C((uint64_t)(a2 + 184), *((char **)a2 + 24));
    sub_10023BF24((uint64_t)(a2 + 160), *((void **)a2 + 21));
    sub_10023E78C((uint64_t)(a2 + 136), *((char **)a2 + 18));
    sub_10023E78C((uint64_t)(a2 + 112), *((char **)a2 + 15));
    sub_10023E78C((uint64_t)(a2 + 88), *((char **)a2 + 12));
    *(void *)a2 = off_10088BF50;

    sub_100242E28(a2 + 8);
    operator delete(a2);
  }

void sub_1002948EC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002948EC(a1, *a2);
    sub_1002948EC(a1, a2[1]);
    uint64_t v4 = a2[5];
    a2[5] = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    operator delete(a2);
  }

void sub_100294944(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100294944(a1, *a2);
    sub_100294944(a1, a2[1]);

    operator delete(a2);
  }

void sub_10029498C(id a1)
{
  uint64_t v1 = operator new(0x18uLL);
  *(void *)uint64_t v1 = 0LL;
  v1[2] = 0;
  *((_BYTE *)v1 + 12) = 0;
  v1[4] = 0;
  qword_1008D9058 = (uint64_t)v1;
}

void sub_1002949BC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10088C198;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + sub_100242E28(v1 + 32) = a2;
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  atomic_store(0, (unsigned __int8 *)(a1 + 41));
}

uint64_t sub_1002949E4(uint64_t a1)
{
  *(void *)a1 = &off_10088C198;
  return a1;
}

void sub_100294A20(void **__p)
{
  void *__p = &off_10088C198;
  operator delete(__p);
}

void sub_100294A5C(uint64_t a1, int a2, void *a3)
{
  if (a3)
  {
    id v5 = a3;
    uint64_t v6 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
      *(_DWORD *)std::string buf = 138412290;
      unsigned int v20 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Publishing device with the following properties %@",  buf,  0xCu);
    }

    atomic_store(1u, (unsigned __int8 *)(a1 + 40));
    CFRetain(v5);
    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100294BEC;
    block[3] = &unk_10087F900;
    void block[4] = a1;
    void block[5] = v5;
    int v18 = a2;
    dispatch_async((dispatch_queue_t)[v8 getXpcQueue], block);
  }

  else
  {
    unint64_t v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100666C60(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }

void sub_100294BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100294BEC(uint64_t a1)
{
  *(_OWORD *)keys = *(_OWORD *)off_10088C1A8;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)_CFXPCCreateXPCObjectFromCFObject(*(void *)(a1 + 40));
  values[0] = xpc_int64_create(*(int *)(a1 + 48));
  values[1] = v3;
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)keys, values, 2uLL);
  id v5 = v4;
  if (v3) {
    BOOL v6 = v4 == 0LL;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    id v7 = *(id *)(a1 + 40);
    int v8 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 description]);
      *(_DWORD *)std::string buf = 67109634;
      BOOL v15 = v3 == 0LL;
      __int16 v16 = 1024;
      BOOL v17 = v5 == 0LL;
      __int16 v18 = 2112;
      id v19 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create an xpc msg (reason: xpcProperties %d, xpcArgs %d) to send publish msg with following parameters %@",  buf,  0x18u);
    }

    (*(void (**)(void))(**(void **)(v2 + 32) + 80LL))(*(void *)(v2 + 32));
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
    if (*(char *)(v2 + 31) < 0)
    {
      sub_100024238(__p, *(void **)(v2 + 8), *(void *)(v2 + 16));
    }

    else
    {
      __int128 v9 = *(_OWORD *)(v2 + 8);
      uint64_t v13 = *(void *)(v2 + 24);
      *(_OWORD *)std::string __p = v9;
    }

    [v7 publishAndRegisterDevice:2 withArgs:v5 uid:__p device:v2];
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }

  CFRelease(*(CFTypeRef *)(a1 + 40));
  xpc_release(v5);
  if (v3)
  {
    xpc_release(v3);
  }

  else
  {
    uint64_t v10 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100666C90((int *)(a1 + 48), v10);
    }
  }

  xpc_release(values[0]);
}

void sub_100294E14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_100294E4C(uint64_t a1, uint64_t a2, const void *a3)
{
  BOOL v6 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEBUG)) {
    sub_100666D04(a2, v6);
  }
  CFRetain(a3);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100294F1C;
  block[3] = &unk_100888050;
  void block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_async((dispatch_queue_t)[v7 getXpcQueue], block);
}

void sub_100294F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100294F1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v5 = *(char **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  BOOL v6 = (uint64_t *)(a1 + 40);
  keys = v5;
  xpc_object_t values = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject(v4);
  xpc_object_t v7 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  sub_100294FFC(v2, 3LL, (uint64_t)v7);
  xpc_release(v7);
  if (values)
  {
    xpc_release(values);
  }

  else
  {
    int v8 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100666D74(v6, v8);
    }
  }

  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_100294FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEBUG)) {
    sub_100666DE8(a2, v6, v7, v8, v9, v10, v11, v12);
  }
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
  if (*(char *)(a1 + 31) < 0)
  {
    sub_100024238(__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 24);
  }

  [v13 sendMsg:a2 withArgs:a3 uid:__p];
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002950C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1002950EC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100295174;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_async((dispatch_queue_t)[v2 getXpcQueue], block);
}

void sub_100295164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100295174(uint64_t a1)
{
}

void sub_100295184(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 41);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 41));
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if ((v3 & 1) != 0 && os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Close called when Plugin device is already in closing state.",  buf,  2u);
    uint64_t v4 = (os_log_s *)qword_1008F7570;
  }

  atomic_store(1u, v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending XpcAudioPluginDevice close", buf, 2u);
  }

  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 40));
  if ((v5 & 1) != 0)
  {
    sub_100294FFC(a1, 4LL, 0LL);
  }

  else
  {
    BOOL v6 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100666E4C(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002952EC;
    block[3] = &unk_10087EB20;
    void block[4] = a1;
    dispatch_async((dispatch_queue_t)[v14 getXpcQueue], block);
  }

void sub_1002952DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002952EC(uint64_t a1)
{
  return sub_1002952F4(*(void *)(a1 + 32));
}

uint64_t sub_1002952F4(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 41));
  unsigned __int8 v3 = (os_log_s *)qword_1008F7570;
  if ((v2 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "readyForDelete called when Plugin device isn't in closing state.",  buf,  2u);
    unsigned __int8 v3 = (os_log_s *)qword_1008F7570;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "XpcAudioPluginDevice is closing ready for delete",  v5,  2u);
  }

  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72LL))(*(void *)(a1 + 32));
}

void sub_1002953C0(uint64_t a1, xpc_object_t xdict)
{
  unsigned __int8 v3 = (unsigned __int8 *)(a1 + 40);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 40));
  if ((v4 & 1) == 0 || (unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 41)), (v5 & 1) != 0))
  {
    __int16 v18 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100666E7C(v3, a1, v18);
    }
  }

  else
  {
    int64_t int64 = xpc_dictionary_get_int64(xdict, "kBTAudioMsgId");
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgs");
    uint64_t v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEBUG)) {
      sub_100666F10(int64, v9, v10, v11, v12, v13, v14, v15);
    }
    switch((int)int64)
    {
      case 3:
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472LL;
        void v22[2] = sub_100295728;
        v22[3] = &unk_10088C1B8;
        v22[4] = a1;
        xpc_dictionary_apply(value, v22);
        return;
      case 5:
        sub_100295620(a1, value);
        return;
      case 6:
        id v19 = *(void (**)(void))(**(void **)(a1 + 32) + 16LL);
        goto LABEL_23;
      case 7:
        id v19 = *(void (**)(void))(**(void **)(a1 + 32) + 24LL);
        goto LABEL_23;
      case 9:
      case 10:
      case 11:
        __int16 v16 = (const void *)_CFXPCCreateCFObjectFromXPCObject(value);
        BOOL v17 = *(void (**)(void))(**(void **)(a1 + 32) + 48LL);
        goto LABEL_12;
      case 14:
        sub_1002956D0(a1, (uint64_t)value);
        return;
      case 20:
        unsigned int v20 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v22[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Received Uni-Bi Direction Transition",  (uint8_t *)v22,  2u);
        }

        id v19 = *(void (**)(void))(**(void **)(a1 + 32) + 40LL);
        goto LABEL_23;
      case 21:
        int v21 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v22[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Received Bi-Uni Direction Transition",  (uint8_t *)v22,  2u);
        }

        id v19 = *(void (**)(void))(**(void **)(a1 + 32) + 32LL);
LABEL_23:
        v19();
        break;
      default:
        __int16 v16 = (const void *)_CFXPCCreateCFObjectFromXPCObject(value);
        BOOL v17 = *(void (**)(void))(**(void **)(a1 + 32) + 88LL);
LABEL_12:
        v17();
        CFRelease(v16);
        break;
    }
  }

uint64_t sub_100295620(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgDeviceSharedMemoryOutput");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgDeviceSharedMemoryInput");
  region = 0LL;
  if (value) {
    xpc_object_t value = (void *)xpc_shmem_map(value, &region);
  }
  uint64_t v9 = 0LL;
  if (v5)
  {
    size_t v6 = xpc_shmem_map(v5, &v9);
    uint64_t v7 = v9;
  }

  else
  {
    uint64_t v7 = 0LL;
    size_t v6 = 0LL;
  }

  return (*(uint64_t (**)(void, void *, void *, void *, size_t))(**(void **)(a1 + 32) + 8LL))( *(void *)(a1 + 32),  region,  value,  v7,  v6);
}

void sub_1002956D0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = (const __CFBoolean *)_CFXPCCreateCFObjectFromXPCObject(a2);
  if (v3)
  {
    unsigned __int8 v4 = v3;
    BOOL v5 = CFBooleanGetValue(v3) != 0;
    (*(void (**)(void, BOOL))(**(void **)(a1 + 32) + 56LL))(*(void *)(a1 + 32), v5);
    CFRelease(v4);
  }

uint64_t sub_100295728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = (const void *)_CFXPCCreateCFObjectFromXPCObject(a3);
  (***(void (****)(void, uint64_t, const void *))(v4 + 32))(*(void *)(v4 + 32), a2, v5);
  CFRelease(v5);
  return 1LL;
}

uint64_t sub_100295780(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64LL))(*(void *)(a1 + 32));
}

void sub_100295790( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_1002957A0(int a1, char *__s1, const char *a3, int a4)
{
  unsigned int v21 = 0;
  if (!strcmp(__s1, "00:00:00:00:00:00"))
  {
    uint64_t v15 = (os_log_s *)qword_1008F75E0;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT);
    if ((_DWORD)result)
    {
      sub_100666F74(v15, v16, v17);
      return 0LL;
    }
  }

  else
  {
    if (!a1) {
      return 4294902295LL;
    }
    uint64_t result = 4294902295LL;
    if (a1 <= 1024)
    {
      v8.i32[0] = a1;
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.i32[0] <= 1u)
      {
        CFStringRef v11 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
        if (v11)
        {
          CFStringRef v12 = v11;
          CFMutableArrayRef Mutable = (__CFDictionary *)sub_100295AE0((int *)&v21, __s1, 0LL, 0);
          uint64_t v14 = (os_log_s *)qword_1008F75E0;
          if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109120;
            unsigned int v23 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "BTKCSetData calling _BTKCGetDataCopy, returned %d",  buf,  8u);
          }

          if (v21 == -34019)
          {
            if (!Mutable) {
              goto LABEL_41;
            }
            goto LABEL_40;
          }

          if (!Mutable)
          {
            CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  3LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            if (!Mutable)
            {
              unsigned int v21 = 4;
LABEL_41:
              CFRelease(v12);
              return v21;
            }
          }

          if (a1 > 63)
          {
            if (a1 <= 255)
            {
              if (a1 == 64)
              {
                __int16 v18 = @"MagicAccKey";
              }

              else
              {
                if (a1 != 128) {
                  goto LABEL_38;
                }
                __int16 v18 = @"MagicAccHint";
              }
            }

            else
            {
              switch(a1)
              {
                case 256:
                  __int16 v18 = @"MagicAccRachet";
                  break;
                case 512:
                  __int16 v18 = @"GuestAccIRK";
                  break;
                case 1024:
                  __int16 v18 = @"GuestAccEncKey";
                  break;
                default:
                  goto LABEL_38;
              }
            }
          }

          else
          {
            __int16 v18 = @"Pincode";
            switch(a1)
            {
              case 1:
                break;
              case 2:
                __int16 v18 = @"LinkKey";
                break;
              case 3:
              case 5:
              case 6:
              case 7:
                goto LABEL_38;
              case 4:
                __int16 v18 = @"LinkKeyType";
                break;
              case 8:
                __int16 v18 = @"LocalAddress";
                break;
              default:
                if (a1 == 16)
                {
                  __int16 v18 = @"MagicAccIRK";
                }

                else
                {
                  if (a1 != 32) {
                    goto LABEL_38;
                  }
                  __int16 v18 = @"MagicAccEncKey";
                }

                break;
            }
          }

          CFDictionarySetValue(Mutable, v18, v12);
LABEL_38:
          unsigned int v19 = sub_1002961E4(__s1, 0LL, Mutable, 0LL, 0, a4, 1);
          unsigned int v21 = v19;
          unsigned int v20 = (os_log_s *)qword_1008F75E0;
          if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109120;
            unsigned int v23 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "BTKCSetData calling _BTKCSetData, returned %d",  buf,  8u);
          }

const void *sub_100295AE0(int *a1, const char *a2, const __CFString *a3, int a4)
{
  CFTypeRef result = 0LL;
  CFStringRef v7 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  if (a3) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = @"MobileBluetooth";
  }
  CFDictionaryAddValue(Mutable, kSecAttrService, v9);
  CFDictionaryAddValue(Mutable, kSecAttrAccount, v7);
  uint8x8_t v10 = (const void *)kSecUseSystemKeychain;
  CFDictionaryAddValue(Mutable, kSecUseSystemKeychain, kCFBooleanTrue);
  CFDictionaryAddValue(Mutable, kSecMatchLimit, kSecMatchLimitOne);
  CFDictionaryAddValue(Mutable, kSecReturnData, kCFBooleanTrue);
  if (a4) {
    CFBooleanRef v11 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v11 = kCFBooleanFalse;
  }
  CFDictionaryAddValue(Mutable, kSecAttrSynchronizable, v11);
  CFDictionaryAddValue(Mutable, kSecReturnAttributes, kCFBooleanTrue);
  OSStatus v12 = SecItemCopyMatching(Mutable, &result);
  int v13 = v12;
  if (!result || v12)
  {
    if (v12 == -25300)
    {
      int v29 = 0LL;
      int v13 = -25300;
LABEL_37:
      CFStringRef v19 = v7;
      goto LABEL_46;
    }

uint64_t sub_1002961E4( const char *a1, const char *a2, const void *a3, const __CFString *a4, int a5, int a6, char a7)
{
  OSStatus v12 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v37 = a1;
    __int16 v38 = 1024;
    int v39 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "_BTKCSetData found keychain item for device %{public}s with result %d, updating",  buf,  0x12u);
  }

  if (CFDictionaryGetCount((CFDictionaryRef)a3))
  {
    int v29 = a1;
    CFStringRef v13 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x8000100u);
    CFDataRef value = CFPropertyListCreateData(kCFAllocatorDefault, a3, kCFPropertyListXMLFormat_v1_0, 0LL, 0LL);
    if (a2) {
      CFStringRef v14 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
    }
    else {
      CFStringRef v14 = 0LL;
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
    if (a4) {
      __int16 v18 = a4;
    }
    else {
      __int16 v18 = @"MobileBluetooth";
    }
    uint64_t v30 = v18;
    CFDictionaryAddValue(Mutable, kSecAttrService, v18);
    CFStringRef v32 = v13;
    CFDictionaryAddValue(Mutable, kSecAttrAccount, v13);
    CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, @"com.apple.bluetooth");
    if (a5) {
      CFBooleanRef v19 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v19 = kCFBooleanFalse;
    }
    CFBooleanRef v31 = v19;
    CFDictionaryAddValue(Mutable, kSecAttrSynchronizable, v19);
    unsigned int v20 = (const void *)kSecUseSystemKeychain;
    CFDictionaryAddValue(Mutable, kSecUseSystemKeychain, kCFBooleanTrue);
    OSStatus v21 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(v21, kSecValueData, value);
    if (v14) {
      CFDictionaryAddValue(v21, kSecAttrLabel, v14);
    }
    if ((a7 & 1) == 0) {
      CFDictionaryAddValue(v21, kSecAttrSysBound, &off_1008C2A38);
    }
    if (a6) {
      CFDictionaryAddValue(v21, kSecAttrAccessible, kSecAttrAccessibleUntilReboot);
    }
    if (a5) {
      CFDictionaryAddValue(v21, kSecAttrSyncViewHint, @"PCS-MasterKey");
    }
    __int128 v22 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v37 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "updating keychain data for device %{public}s",  buf,  0xCu);
    }

    OSStatus v23 = SecItemUpdate(Mutable, v21);
    CFRelease(v21);
    CFRelease(Mutable);
    if (!v23)
    {
      uint64_t v16 = 0LL;
      CFStringRef v27 = v32;
      CFDataRef v25 = value;
      goto LABEL_44;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_1006670CC();
    }
    OSStatus v24 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(v24, kSecClass, kSecClassGenericPassword);
    CFDictionaryAddValue(v24, kSecAttrService, v30);
    CFDictionaryAddValue(v24, kSecAttrAccount, v32);
    CFDataRef v25 = value;
    CFDictionaryAddValue(v24, kSecValueData, value);
    OSStatus v26 = (const void **)&kSecAttrAccessibleAlwaysPrivate;
    if (!a5) {
      OSStatus v26 = (const void **)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }
    if (a6) {
      OSStatus v26 = (const void **)&kSecAttrAccessibleUntilReboot;
    }
    CFDictionaryAddValue(v24, kSecAttrAccessible, *v26);
    CFDictionaryAddValue(v24, v20, kCFBooleanTrue);
    CFDictionaryAddValue(v24, kSecAttrAccessGroup, @"com.apple.bluetooth");
    CFDictionaryAddValue(v24, kSecAttrSynchronizable, v31);
    if (a5) {
      CFDictionaryAddValue(v24, kSecAttrSyncViewHint, @"PCS-MasterKey");
    }
    if ((a7 & 1) == 0) {
      CFDictionaryAddValue(v24, kSecAttrSysBound, &off_1008C2A38);
    }
    CFStringRef v27 = v32;
    if (v14) {
      CFDictionaryAddValue(v24, kSecAttrLabel, v14);
    }
    uint64_t v16 = SecItemAdd(v24, 0LL);
    if ((_DWORD)v16 && os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
    {
      sub_10066706C();
      if (!v24) {
        goto LABEL_44;
      }
    }

    else if (!v24)
    {
LABEL_44:
      if (v27) {
        CFRelease(v27);
      }
      if (v25) {
        CFRelease(v25);
      }
      if (v14) {
        CFRelease(v14);
      }
      return v16;
    }

    CFRelease(v24);
    goto LABEL_44;
  }

  BOOL v15 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "will not update an empty dict.", buf, 2u);
  }

  return 0LL;
}

uint64_t sub_1002967A0(int a1, const char *a2, char *a3, int *a4, const __CFDictionary **a5, int8x8_t a6)
{
  unsigned int v18 = 0;
  if (!a1) {
    return 4294902295LL;
  }
  uint64_t result = 4294902295LL;
  if (a1 <= 256)
  {
    a6.i32[0] = a1;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(a6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.i32[0] <= 1u)
    {
      OSStatus v12 = *a5;
      if (*a5) {
        goto LABEL_5;
      }
      *a5 = (const __CFDictionary *)sub_100295AE0((int *)&v18, a2, 0LL, 0);
      CFStringRef v14 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        unsigned int v20 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "BTKCGetData calling _BTKCGetDataCopy, returned %d",  buf,  8u);
      }

      uint64_t result = 4294933277LL;
      if (v18 != -34019)
      {
        OSStatus v12 = *a5;
        if (!*a5)
        {
          *a3 = 0;
          *a4 = 0;
          return 4294902294LL;
        }

uint64_t sub_1002969F4(char *a1, unsigned int a2)
{
  unsigned int v17 = 0;
  uint64_t v4 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109634;
    unsigned int v19 = a2;
    __int16 v20 = 1040;
    int v21 = 6;
    __int16 v22 = 2096;
    OSStatus v23 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Deleting keychain data (mask=%02x) for %{bluetooth:BD_ADDR}.6P)",  buf,  0x18u);
  }

  BOOL v5 = (__CFDictionary *)sub_100295AE0((int *)&v17, a1, 0LL, 0);
  size_t v6 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    unsigned int v19 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "BTKCDeleteData calling _BTKCGetDataCopy, returned %d",  buf,  8u);
  }

  if (v17 == -34019)
  {
    if (!v5) {
      return 4294933277LL;
    }
    goto LABEL_42;
  }

  if (!v17 && !v5)
  {
    uint8x8_t v8 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10066712C(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return 4294902294LL;
  }

  if (!v5) {
    return 4294902294LL;
  }
  if ((a2 & 1) != 0)
  {
    CFDictionaryRemoveValue(v5, @"Pincode");
    if ((a2 & 2) == 0)
    {
LABEL_15:
      if ((a2 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_32;
    }
  }

  else if ((a2 & 2) == 0)
  {
    goto LABEL_15;
  }

  CFDictionaryRemoveValue(v5, @"LinkKey");
  if ((a2 & 4) == 0)
  {
LABEL_16:
    if ((a2 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }

uint64_t sub_100296CF0(char *cStr, const __CFString *a2, int a3)
{
  CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    uint64_t v11 = 0LL;
    if (!v6) {
      return v11;
    }
    goto LABEL_12;
  }

  uint8x8_t v8 = Mutable;
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  if (a2) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = @"MobileBluetooth";
  }
  CFDictionaryAddValue(v8, kSecAttrService, v9);
  CFDictionaryAddValue(v8, kSecAttrAccount, v6);
  if (a3) {
    CFBooleanRef v10 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v10 = kCFBooleanFalse;
  }
  CFDictionaryAddValue(v8, kSecAttrSynchronizable, v10);
  CFDictionaryAddValue(v8, kSecUseSystemKeychain, kCFBooleanTrue);
  uint64_t v11 = SecItemDelete(v8);
  if ((_DWORD)v11)
  {
    uint64_t v12 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136446722;
      uint64_t v15 = cStr;
      __int16 v16 = 1024;
      int v17 = v11;
      __int16 v18 = 1024;
      int v19 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Failed to remove item from keychain for device %{public}s with result %d sync=%d",  (uint8_t *)&v14,  0x18u);
    }
  }

  CFRelease(v8);
  if (v6) {
LABEL_12:
  }
    CFRelease(v6);
  return v11;
}

uint64_t sub_100296EDC(void **a1)
{
  CFTypeRef result = 0LL;
  *(_OWORD *)__int16 buffer = 0u;
  __int128 v33 = 0u;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0LL;
  }
  unsigned __int8 v3 = Mutable;
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(v3, kSecAttrService, @"MobileBluetooth");
  CFDictionaryAddValue(v3, kSecMatchLimit, kSecMatchLimitAll);
  CFDictionaryAddValue(v3, kSecReturnAttributes, kCFBooleanTrue);
  CFDictionaryAddValue(v3, kSecUseSystemKeychain, kCFBooleanTrue);
  OSStatus v4 = SecItemCopyMatching(v3, &result);
  CFTypeRef v5 = result;
  if (!v4 && result)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)result);
    if (Count)
    {
      CFIndex v7 = 0LL;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)result, v7);
        if (ValueAtIndex)
        {
          Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kSecAttrAccount);
          if (CFStringGetCString(Value, buffer, 32LL, 0x8000100u))
          {
            __int16 v28 = 0;
            int v27 = 0;
            if (!(_BYTE)v27)
            {
              uint64_t v14 = 1LL;
              while (v14 != 6)
              {
                if (*((unsigned __int8 *)&v27 + v14++))
                {
                  break;
                }
              }

CFStringRef sub_100297290(int a1)
{
  switch(a1)
  {
    case 0:
    case 5:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Long-term Key";
      goto LABEL_16;
    case 1:
    case 6:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Long-term Key Length";
      goto LABEL_16;
    case 2:
    case 7:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Long-term Key Type";
      goto LABEL_16;
    case 3:
    case 8:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Encrypted Diversifier";
      goto LABEL_16;
    case 4:
    case 9:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Random Number";
      goto LABEL_16;
    case 10:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Remote IRK";
      goto LABEL_16;
    case 12:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Remote CSRK";
      goto LABEL_16;
    case 13:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Local CSRK";
      goto LABEL_16;
    case 14:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Local Sign Counter";
      goto LABEL_16;
    case 15:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Remote Sign Counter";
      goto LABEL_16;
    case 16:
      uint64_t v1 = kCFAllocatorDefault;
      unsigned __int8 v2 = @"Derive LKLTK";
LABEL_16:
      CFStringRef result = CFStringCreateCopy(v1, v2);
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
        sub_1006671F4();
      }
      CFStringRef result = 0LL;
      break;
  }

  return result;
}

id sub_100297410(const void *a1, int a2, const void *a3)
{
  CFBooleanRef v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  CFTypeRef result = 0LL;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFIndex v7 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
    CFDictionaryAddValue(v7, kSecAttrService, a1);
    CFDictionaryAddValue(v7, kSecMatchLimit, kSecMatchLimitAll);
    CFDictionaryAddValue(v7, kSecReturnAttributes, kCFBooleanTrue);
    CFDictionaryAddValue(v7, kSecUseSystemKeychain, kCFBooleanTrue);
    if (a2) {
      CFBooleanRef v8 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v8 = kCFBooleanFalse;
    }
    CFDictionaryAddValue(v7, kSecAttrSynchronizable, v8);
    OSStatus v9 = SecItemCopyMatching(v7, &result);
    if (v9 || !result)
    {
      int v29 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v3_Block_object_dispose(va, 8) = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Failed to query keychain with result %d",  buf,  8u);
      }
    }

    else
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)result);
      if (Count >= 1)
      {
        for (CFIndex i = 0LL; i != Count; ++i)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)result, i);
          uint64_t v13 = ValueAtIndex;
          if (ValueAtIndex)
          {
            Value = (void *)CFDictionaryGetValue(ValueAtIndex, kSecAttrAccount);
            if (Value)
            {
              id v15 = Value;
              unint64_t v16 = sub_1005C02B0(v15);
              if (v16)
              {
                if (a3)
                {
                  uint64_t v17 = (os_log_s *)qword_1008F75E0;
                  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)std::string buf = 134217984;
                    __int16 v38 = a3;
                    _os_log_fault_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "Local address is not zero!! 0x%llx",  buf,  0xCu);
                  }
                }

                uint64_t v18 = CFDictionaryGetValue(v13, kSecAttrLabel);
                if (v18
                  && (uint64_t v19 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v18)) != 0LL)
                {
                  unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v16));
                  [v31 setObject:v20 forKey:v19];
                }

                else
                {
                  __int16 v22 = (os_log_s *)qword_1008F75E0;
                  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)std::string buf = 138543362;
                    __int16 v38 = v18;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Unable to build UUID from string %{public}@",  buf,  0xCu);
                  }
                }

                a3 = 0LL;
              }

              else
              {
                OSStatus v23 = (os_log_s *)qword_1008F75E0;
                if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
                  sub_1006672C8(&v34, v35, v23);
                }
              }
            }

            else
            {
              int v21 = (os_log_s *)qword_1008F75E0;
              if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
                sub_100667294(&v32, v33, v21);
              }
            }
          }
        }
      }
    }

    if (result) {
      CFRelease(result);
    }
    CFRelease(v7);
    __int16 v28 = v31;
    id v27 = v31;
  }

  else
  {
    OSStatus v24 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_100667260(v24, v25, v26);
    }
    id v27 = 0LL;
    __int16 v28 = v31;
  }

  return v27;
}

void sub_10029785C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id sub_1002978A8(const void *a1)
{
  return sub_100297410(@"BluetoothLE", 0, a1);
}

id sub_1002978BC()
{
  return sub_100297410(@"BluetoothLESync", 1, 0LL);
}

uint64_t sub_1002978D0(uint64_t a1, void *a2, int a3, const void **a4)
{
  id v7 = a2;
  if (CFDictionaryGetCount((CFDictionaryRef)*a4) < 1)
  {
    sub_1005BFC20(a1, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v10 = sub_100296CF0((char *)p_p, @"BluetoothLE", a3);
  }

  else
  {
    CFBooleanRef v8 = &__p;
    sub_1005BFC20(a1, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      CFBooleanRef v8 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    id v9 = objc_claimAutoreleasedReturnValue([v7 UUIDString]);
    uint64_t v10 = sub_1002961E4( (const char *)v8,  (const char *)[v9 UTF8String],  *a4,  @"BluetoothLE",  a3,  0,  1);
  }

  CFRelease(@"BluetoothLE");

  return v10;
}

void sub_1002979E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100297A24( uint64_t a1, void *a2, unsigned int a3, const UInt8 *a4, CFIndex a5, int a6, const void **a7, int a8)
{
  id v37 = a2;
  unsigned int v38 = 0;
  else {
    uint64_t v14 = @"BluetoothLE";
  }
  if (!a4)
  {
    id v15 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
      sub_1006672FC(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }

  CFStringRef v23 = sub_100297290(a3);
  CFMutableArrayRef Mutable = (__CFDictionary *)*a7;
  if (!*a7)
  {
    sub_1005BFC20(a1, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    *a7 = sub_100295AE0((int *)&v38, (const char *)p_p, v14, a6);
    id v27 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "BTKCSetLEData calling _BTKCGetDataCopy, returned %d",  (uint8_t *)&__p,  8u);
    }

    if (v38 == -34019) {
      goto LABEL_51;
    }
    CFMutableArrayRef Mutable = (__CFDictionary *)*a7;
    if (!*a7)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  6LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      *a7 = Mutable;
      if (!Mutable) {
        goto LABEL_10;
      }
    }
  }

  if (a5)
  {
    CFDataRef v25 = CFDataCreate(kCFAllocatorDefault, a4, a5);
    if (!v25)
    {
LABEL_10:
      unsigned int v38 = 4;
      goto LABEL_51;
    }
  }

  else
  {
    CFDictionaryRemoveValue(Mutable, v23);
    CFDataRef v25 = 0LL;
  }

  if (a3 >= 5)
  {
    if (a3 - 5 > 4)
    {
      Value = (__CFDictionary *)*a7;
      if (a5)
      {
        CFDictionarySetValue(Value, v23, v25);
        goto LABEL_38;
      }

void sub_100297DF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100297E4C(uint64_t a1, void *a2, unsigned int a3, const UInt8 *a4, CFIndex a5, int a6)
{
  id v11 = a2;
  CFTypeRef cf = 0LL;
  uint64_t v12 = sub_100297A24(a1, v11, a3, a4, a5, a6, &cf, 1);
  if (cf) {
    CFRelease(cf);
  }

  return v12;
}

void sub_100297ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100297EE8( uint64_t a1, unsigned int a2, UInt8 **a3, _DWORD *a4, const __CFString *a5, int a6, const __CFDictionary **a7)
{
  CFStringRef v14 = sub_100297290(a2);
  unsigned int v34 = 0;
  if (!a3)
  {
    id v15 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
      sub_1006672FC(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }

  *a4 = 0;
  CFStringRef v23 = *a7;
  if (*a7)
  {
    OSStatus v24 = (os_log_s *)qword_1008F75E0;
    if (!os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "_BTKCCopyLEData using cached dictionary",  (uint8_t *)&buf,  2u);
LABEL_15:
    CFStringRef v23 = *a7;
    if (!*a7) {
      goto LABEL_24;
    }
LABEL_16:
    if (a2 >= 5)
    {
      if (a2 - 5 > 4)
      {
LABEL_21:
        Value = (const __CFData *)CFDictionaryGetValue(v23, v14);
        int v29 = Value;
        if (Value)
        {
          CFIndex Length = CFDataGetLength(Value);
          CFIndex v31 = Length;
          if (Length)
          {
            id v32 = (UInt8 *)operator new[](Length);
            *a3 = v32;
            v36.location = 0LL;
            v36.size_t length = v31;
            CFDataGetBytes(v29, v36, v32);
            *a4 = v31;
          }
        }

        goto LABEL_24;
      }

      id v27 = @"Local Encryption";
    }

    else
    {
      id v27 = @"Remote Encryption";
    }

    CFStringRef v23 = (const __CFDictionary *)CFDictionaryGetValue(v23, v27);
    if (!v23) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }

  sub_1005BFC20(a1, &buf);
  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_std::stringbuf::string_type buf = &buf;
  }
  else {
    p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
  }
  *a7 = (const __CFDictionary *)sub_100295AE0((int *)&v34, (const char *)p_buf, a5, a6);
  uint64_t v26 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "_BTKCCopyLEData calling _BTKCGetDataCopy, returned %d",  (uint8_t *)&buf,  8u);
  }

  if (v34 != -34019) {
    goto LABEL_15;
  }
LABEL_24:
  if (v14) {
    CFRelease(v14);
  }
  return v34;
}

void sub_100298138( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029815C(uint64_t a1, unsigned int a2, UInt8 **a3, _DWORD *a4, const __CFString *a5, int a6)
{
  CFTypeRef cf = 0LL;
  uint64_t v6 = sub_100297EE8(a1, a2, a3, a4, a5, a6, (const __CFDictionary **)&cf);
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_10029819C( uint64_t result, unsigned int a2, UInt8 **a3, _DWORD *a4, _DWORD *a5, int a6, const __CFDictionary **a7)
{
  int v10 = 0;
  if (a3)
  {
    if (a6) {
      id v9 = @"BluetoothLESync";
    }
    else {
      id v9 = @"BluetoothLE";
    }
    CFTypeRef result = sub_100297EE8(result, a2, a3, &v10, v9, a6, a7);
    *a4 = v10;
    *a5 = result;
  }

  return result;
}

void sub_1002981F8( uint64_t a1, unsigned int a2, UInt8 **a3, _DWORD *a4, _DWORD *a5, UInt8 **a6, _DWORD *a7, _DWORD *a8)
{
  int v27 = 0;
  if (a3 && a4)
  {
    int v16 = sub_10029815C(a1, a2, a3, &v27, @"BluetoothLE", 0);
LABEL_9:
    *a4 = v27;
    goto LABEL_10;
  }

  if (a6 && a7
    || (uint64_t v17 = (os_log_s *)qword_1008F75E0, !os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)))
  {
    if (!a3) {
      goto LABEL_12;
    }
  }

  else
  {
    sub_10066736C(v17, v18, v19, v20, v21, v22, v23, v24);
    if (!a3) {
      goto LABEL_12;
    }
  }

  int v16 = sub_10029815C(a1, a2, a3, &v27, @"BluetoothLE", 0);
  if (a4) {
    goto LABEL_9;
  }
LABEL_10:
  if (a5) {
    *a5 = v16;
  }
LABEL_12:
  if (a6)
  {
    int v25 = sub_10029815C(a1, a2, a6, &v27, @"BluetoothLESync", 1);
    uint64_t v26 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v29 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "BTKCCopyLEData is calling _BTKCCopyLEData, returned %d",  buf,  8u);
    }

    if (a7) {
      *a7 = v27;
    }
    if (a8) {
      *a8 = v25;
    }
  }

uint64_t sub_1002983AC(uint64_t a1, uint64_t a2, int a3)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v6 = sub_100296CF0((char *)p_p, @"BluetoothLE", 0);
  uint64_t v7 = v6;
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!(_DWORD)v7) {
      goto LABEL_10;
    }
  }

  else if (!(_DWORD)v6)
  {
    goto LABEL_10;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
    sub_1006673DC();
  }
LABEL_10:
  if (a3)
  {
    sub_1005BFC20(a1, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFBooleanRef v8 = &__p;
    }
    else {
      CFBooleanRef v8 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v7 = sub_100296CF0((char *)v8, @"BluetoothLESync", 1);
    if ((_DWORD)v7)
    {
      id v9 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Could not erase LE Data from synced keychain with result %d",  (uint8_t *)&__p,  8u);
      }
    }
  }

  return v7;
}

void sub_10029851C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100298544(int a1, UInt8 *a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v15 = 0;
  if ((a1 - 18) > 0xFFFFFFF1)
  {
    uint64_t v6 = off_10088C1F8[a1 - 4];
LABEL_10:
    uint64_t v7 = (const __CFDictionary *)sub_100295AE0((int *)&v15, v6, @"BluetoothGlobal", 0);
    unsigned int v8 = v15;
    if (v15)
    {
      id v9 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 67109120;
        unsigned int v17 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "_BTKCGetDataCopy returned %d", buf, 8u);
        unsigned int v8 = v15;
      }

      if (v8 == -34019)
      {
        if (!v7) {
          return 4294933277LL;
        }
        goto LABEL_23;
      }
    }

    if (v7)
    {
      Value = (const __CFData *)CFDictionaryGetValue(v7, @"KEY");
      if (Value && (uint64_t v12 = Value, TypeID = CFDataGetTypeID(), TypeID == CFGetTypeID(v12)))
      {
        unsigned int Length = CFDataGetLength(v12);
        *a4 = Length;
        if (Length)
        {
          v18.size_t length = Length;
          v18.location = 0LL;
          CFDataGetBytes(v12, v18, a2);
        }
      }

      else
      {
        unsigned int v15 = -65004;
      }

uint64_t sub_10029871C(unsigned int a1, const UInt8 *a2, unsigned int a3)
{
  if (a1 - 18 > 0xFFFFFFF1 || (uint64_t v6 = 4294902295LL, a1 <= 0x13) && ((1 << a1) & 0x80006) != 0)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      unsigned int v8 = Mutable;
      CFDataRef v9 = CFDataCreate(kCFAllocatorDefault, a2, a3);
      if (v9)
      {
        CFDataRef v10 = v9;
        CFDictionarySetValue(v8, @"KEY", v9);
        uint64_t v6 = 0LL;
        switch(a1)
        {
          case 1u:
            id v11 = "Encryption Root";
            goto LABEL_17;
          case 2u:
            id v11 = "Identity Root";
            goto LABEL_17;
          case 4u:
            id v11 = "Cloud Master Key Root";
            goto LABEL_17;
          case 5u:
            id v11 = "Cloud Private Key Root";
            goto LABEL_17;
          case 6u:
            id v11 = "Cloud Public Key Root";
            goto LABEL_17;
          case 7u:
            id v11 = "Cloud Nonce Root";
            goto LABEL_17;
          case 8u:
            id v11 = "Identity Root Key";
            goto LABEL_17;
          case 9u:
            id v11 = "Cloud FC Address";
LABEL_17:
            uint64_t v12 = v8;
            char v13 = 1;
            goto LABEL_27;
          case 0xAu:
            id v11 = "CT TTK BUFF";
            goto LABEL_26;
          case 0xBu:
            id v11 = "CT TKPeriod";
            goto LABEL_26;
          case 0xCu:
            id v11 = "CT Last RPI And Address";
            goto LABEL_26;
          case 0xDu:
            id v11 = "CT TEK BUFF V2 LEN";
            goto LABEL_26;
          case 0xEu:
            id v11 = "CT TEK BUFF V2";
            goto LABEL_26;
          case 0xFu:
            id v11 = "Local Device Identifier";
            goto LABEL_26;
          case 0x11u:
            id v11 = "Non Connectable identity root";
            goto LABEL_26;
          case 0x13u:
            id v11 = "Non Connectable identity address";
LABEL_26:
            uint64_t v12 = v8;
            char v13 = 0;
LABEL_27:
            uint64_t v6 = sub_1002961E4(v11, 0LL, v12, @"BluetoothGlobal", 0, 0, v13);
            break;
          default:
            break;
        }

        CFRelease(v10);
      }

      else
      {
        uint64_t v6 = 4LL;
      }

      CFRelease(v8);
    }

    else
    {
      return 4LL;
    }
  }

  return v6;
}

uint64_t sub_100298924(int a1)
{
  if (a1 == 4) {
    return sub_100296CF0("Cloud Master Key Root", @"BluetoothGlobal", 0);
  }
  else {
    return 4294902295LL;
  }
}

uint64_t sub_10029894C(const void *a1)
{
  unsigned __int8 v2 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    uint64_t v12 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Deleting all keychain data for service:%@",  (uint8_t *)&v11,  0xCu);
  }

  if (a1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      OSStatus v4 = Mutable;
      CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
      CFDictionaryAddValue(v4, kSecAttrService, a1);
      CFDictionaryAddValue(v4, kSecAttrSynchronizable, kCFBooleanFalse);
      CFDictionaryAddValue(v4, kSecUseSystemKeychain, kCFBooleanTrue);
      CFDictionaryAddValue(v4, kSecAttrAccessGroup, @"com.apple.bluetooth");
      do
        uint64_t v5 = SecItemDelete(v4);
      while (!(_DWORD)v5);
      uint64_t v6 = v5;
      CFRelease(v4);
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10066743C(v7, v8, v9);
    }
    return 3LL;
  }

  return v6;
}

uint64_t sub_100298B00()
{
  return 0LL;
}

void sub_100298B38(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_100298B68(_Unwind_Exception *a1)
{
}

void sub_100298B7C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_100298BA8(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100298BB4( uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6, int a7)
{
  uint64_t v14 = sub_100255FBC(a1, "HFPSendThread");
  *(void *)uint64_t v14 = off_10088C278;
  *(void *)(v14 + 152) = a2;
  *(_WORD *)(v14 + 16_Block_object_dispose(va, 8) = a3;
  *(void *)(v14 + 176) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 184) = operator new[](a6 * a4);
  *(_DWORD *)(a1 + 216) = a7;
  *(void *)(a1 + 2sub_100242E28(v1 + 32) = a5;
  *(_BYTE *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 242) = 0;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = *(_OWORD *)off_10088C360;
  *(void *)(a1 + 2sub_100242FAC(v1 - 64) = "Streaming";
  *(_OWORD *)(a1 + 272) = *(_OWORD *)off_10088C378;
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = "SharedBufferExhausted";
  *(_DWORD *)(a1 + 2sub_100242E28(v1 + 96) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  *(_DWORD *)(a1 + 304) = 1;
  *(void *)(a1 + 32_Block_object_dispose(va, 8) = "Finalizing";
  *(_OWORD *)(a1 + 312) = *(_OWORD *)off_10088C390;
  *(_DWORD *)(a1 + 336) = 0;
  unsigned int v15 = sub_10045CF60(a2, a3);
  if (!v15)
  {
    int v16 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
      sub_1006674E0(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }

  *(void *)(a1 + sub_100242E28(v1 + 160) = v15;
  unint64_t v24 = a4;
  if (a5)
  {
    int v25 = *(_DWORD *)(a1 + 216);
    if (v25 > 254)
    {
      unsigned int v26 = v25 - 255;
      unint64_t v24 = a5;
      if (v26 < 2) {
        goto LABEL_16;
      }
    }

    else
    {
      if ((v25 - 127) < 4)
      {
        unint64_t v24 = a5;
        goto LABEL_16;
      }

      if (v25 == 1)
      {
        unint64_t v24 = 2 * a5;
        goto LABEL_16;
      }

      if (v25 == 2)
      {
        unint64_t v24 = 4 * a5;
        goto LABEL_16;
      }
    }

    int v27 = (os_log_s *)qword_1008F7598;
    BOOL v28 = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT);
    unint64_t v24 = a4;
    if (v28)
    {
      sub_100667470(v27, v29, v30, v31, v32, v33, v34, v35);
      unint64_t v24 = a4;
    }
  }

void sub_100298EB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_100298F24(uint64_t a1)
{
  *(void *)a1 = off_10088C278;
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, *(void *)(a1 + 152) + 760LL);
  unsigned __int8 v2 = sub_10045CF60(*(void *)(a1 + 152), *(unsigned __int16 *)(a1 + 168));
  if (v2) {
    sub_1005023FC((uint64_t)v2);
  }
  *(void *)(a1 + 176) = 0LL;
  sub_100242FAC((uint64_t)v5);
  unsigned __int8 v3 = *(void **)(a1 + 184);
  if (v3) {
    operator delete[](v3);
  }
  return sub_100255B54(a1);
}

void sub_100298FA0(_Unwind_Exception *a1)
{
  unsigned __int8 v3 = *(void **)(v1 + 184);
  if (v3) {
    operator delete[](v3);
  }
  sub_100255B54(v1);
  _Unwind_Resume(a1);
}

void sub_100298FD4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100298F24(a1);
  operator delete(v1);
}

unint64_t sub_100298FE8(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)qword_1008F7598;
  if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 216);
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "calculateSleepIntervalInUs codec type:%d",  (uint8_t *)v6,  8u);
  }

  int v4 = *(_DWORD *)(a1 + 216);
  unint64_t result = 7500LL;
  if (v4 > 129)
  {
    if (v4 == 130) {
      return 10000LL;
    }
    if (v4 != 255)
    {
      if (v4 == 256) {
        return result;
      }
    }

    return 15000LL;
  }

  if (v4 != 2)
  {
    if (v4 == 127) {
      return result;
    }
    return (unint64_t)(float)((float)((float)((float)*(unint64_t *)(a1 + 224) / 16000.0) * 1000.0) * 1000.0);
  }

  return (unint64_t)((float)*(unint64_t *)(a1 + 224) / 32000.0 * 1000.0 * 1000.0);
}

uint64_t sub_10029913C(uint64_t a1)
{
  unsigned __int8 v2 = (uint64_t *)(a1 + 160);
  uint64_t v1 = *(void *)(a1 + 160);
  if (!v1)
  {
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    sub_100667550();
    return 0LL;
  }

  int v3 = *(_DWORD *)(a1 + 216);
  if (v3 == 129) {
    return 1LL;
  }
  if (v3 != 128) {
    return 0LL;
  }
  uint64_t v4 = sub_1002073AC(v1 + 400);
  if (v4) {
    return sub_1003D2B2C(v4, 41);
  }
  uint64_t v6 = (os_log_s *)qword_1008F7598;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    sub_100667580(v2, v6);
    return 0LL;
  }

  return result;
}

uint64_t sub_1002991F0(uint64_t a1)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  unsigned __int8 v2 = (uint64_t *)(a1 + 152);
  sub_100242F28((uint64_t)v13, *(void *)(a1 + 152) + 760LL);
  int v3 = sub_10045CF60(*v2, *(unsigned __int16 *)(a1 + 168));
  if (v3 && v3[74] == a1)
  {
    unint64_t v5 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242)) {
      goto LABEL_11;
    }
    unint64_t v6 = *(void *)(a1 + 224);
    uint64_t v7 = (os_log_s *)qword_1008F7598;
    if (v6 > v5 && os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      unsigned int v15 = "fAudioBytesOutstanding >= fAudioBufferSize";
      _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      unint64_t v6 = *(void *)(a1 + 224);
      LOWORD(v5) = *(_WORD *)(a1 + 242);
      uint64_t v7 = (os_log_s *)qword_1008F7598;
    }

    unsigned __int16 v8 = v5 - v6;
    *(_WORD *)(a1 + 242) = v8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      LODWORD(v15) = v8;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Draining controller voice to %d bytes",  buf,  8u);
      unsigned __int16 v8 = *(_WORD *)(a1 + 242);
    }

    if (!v8) {
LABEL_11:
    }
      sub_100299428(a1, 1u);
    if (*(_DWORD *)(a1 + 296) != 2) {
      goto LABEL_22;
    }
    if (*(_BYTE *)(a1 + 300))
    {
      unint64_t v9 = 576LL - *(unsigned __int16 *)(a1 + 242);
      unint64_t v10 = *(void *)(a1 + 224);
      *(_BYTE *)(a1 + 300) = 0;
      uint64_t v11 = v9 / v10;
    }

    else
    {
      uint64_t v11 = 1LL;
    }

    if (sub_10029913C(a1))
    {
      if (!sub_10026FA80(*(void *)(a1 + 160))) {
        goto LABEL_22;
      }
      if (sub_10026FA80(*(void *)(a1 + 160)) >= 4 && !*(_WORD *)(a1 + 242))
      {
        uint64_t v11 = 2LL;
        do
        {
LABEL_21:
          sub_1002996BC(a1);
          --v11;
        }

        while (v11);
        goto LABEL_22;
      }
    }

    if (v11) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v4 = 1LL;
    goto LABEL_23;
  }

  uint64_t v4 = 0LL;
LABEL_23:
  sub_100242FAC((uint64_t)v13);
  return v4;
}

void sub_100299404( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100299428(uint64_t a1, unsigned int a2)
{
  v33[0] = 0LL;
  v33[1] = 0LL;
  sub_100242F28((uint64_t)v33, *(void *)(a1 + 152) + 760LL);
  uint64_t v4 = *(unsigned int *)(a1 + 296);
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      if (!(_DWORD)v4)
      {
        goto LABEL_22;
      }

      if ((_DWORD)v4 == 2)
      {
        if (sub_10029913C(a1))
        {
          if (sub_10026FA80(*(void *)(a1 + 160)) > 1) {
            goto LABEL_26;
          }
        }

        else
        {
          uint64_t v23 = *(void *)(a1 + 192);
        }

        int v22 = 1;
        goto LABEL_25;
      }
    }

    else if (a2)
    {
      char v13 = (os_log_s *)qword_1008F7598;
      if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
        sub_100667470(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }

    else if ((_DWORD)v4 == 1)
    {
      if (*(_WORD *)(a1 + 242))
      {
        unint64_t v5 = (os_log_s *)qword_1008F7598;
        if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
          sub_1006675F4(v5, v6, v7, v8, v9, v10, v11, v12);
        }
      }

      if (sub_10029913C(a1))
      {
        if (sub_10026FA80(*(void *)(a1 + 160)) < 2) {
          goto LABEL_26;
        }
        goto LABEL_21;
      }

      uint64_t v21 = *(void *)(a1 + 192);
      if (sub_10026FA78(*(void *)(a1 + 160)) + v21 >= *(void *)(a1 + 224) * *(int *)(a1 + 304))
      {
LABEL_21:
        *(_BYTE *)(a1 + 300) = 1;
LABEL_22:
        int v22 = 2;
LABEL_25:
        *(_DWORD *)(a1 + 2sub_100242E28(v1 + 96) = v22;
      }
    }
  }

void sub_10029969C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002996BC(uint64_t a1)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, *(void *)(a1 + 152) + 760LL);
  int v2 = *(_DWORD *)(a1 + 336);
  switch(v2)
  {
    case 2:
      goto LABEL_7;
    case 1:
LABEL_6:
      sub_100299794(a1);
      *(_DWORD *)(a1 + 336) = 2;
LABEL_7:
      *(void *)(a1 + 192) = 0LL;
      *(void *)(a1 + 200) = 0LL;
      *(_DWORD *)(a1 + 336) = 0;
      return sub_100242FAC((uint64_t)v12);
    case 0:
      if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 104LL))(a1))
      {
        sub_100299428(a1, 2u);
        return sub_100242FAC((uint64_t)v12);
      }

      *(_DWORD *)(a1 + 336) = 1;
      goto LABEL_6;
  }

  int v3 = (os_log_s *)qword_1008F7598;
  if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
    sub_100667470(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return sub_100242FAC((uint64_t)v12);
}

void sub_100299780( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100299794(uint64_t a1)
{
  int v2 = *(char **)(a1 + 184);
  unint64_t v3 = *(void *)(a1 + 192);
  if (!v2)
  {
    uint64_t v4 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
      sub_1006676DC(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  for (; v3; v3 -= v12)
  {
    if (v3 >= *(void *)(a1 + 224)) {
      unint64_t v12 = *(void *)(a1 + 224);
    }
    else {
      unint64_t v12 = v3;
    }
    char v13 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(unsigned __int16 *)(a1 + 242);
      *(_DWORD *)std::stringbuf::string_type buf = 134218752;
      unint64_t v24 = v12;
      __int16 v25 = 2048;
      unint64_t v26 = v3;
      __int16 v27 = 1024;
      int v28 = v17;
      __int16 v29 = 2048;
      uint64_t v30 = v12 + v17;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  ">> Sending, %zu bytes of total %zu. Oustanding %d -> %lu",  buf,  0x26u);
    }

    if (*(void *)(a1 + 176))
    {
      buf[0] = 0;
      sub_100242CA4(buf);
      sub_1001199E4(*(unsigned __int16 **)(a1 + 176), v2, (unsigned __int16)v12, 1);
      sub_100242CD0(buf);
      sub_100242CD8(buf);
    }

    else
    {
      uint64_t v14 = (os_log_s *)qword_1008F7598;
      if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_ERROR)) {
        sub_1006676A8(&v19, v20, v14);
      }
    }

    unsigned int v15 = (unsigned __int16)(*(_WORD *)(a1 + 242) + v12);
    *(_WORD *)(a1 + 242) += v12;
    if (v15 >= 0x2D1)
    {
      uint64_t v16 = (os_log_s *)qword_1008F7598;
      if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
        sub_100667664(v21, &v22, v16);
      }
    }

    v2 += v12;
  }

  return 1LL;
}

void sub_100299988( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

size_t sub_1002999A4(uint64_t a1)
{
  int v2 = *(char **)(a1 + 184);
  unint64_t v3 = sub_10026FA78(*(void *)(a1 + 160));
  unint64_t v4 = *(void *)(a1 + 224);
  if (v3 >= v4)
  {
    size_t result = sub_10026FA88(*(void *)(a1 + 160), v2, v4 * *(int *)(a1 + 220));
    if (result)
    {
      size_t v9 = result;
      *(void *)(a1 + 192) = result;
      uint64_t v10 = (os_log_s *)qword_1008F7598;
      if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v11 = sub_10026FA78(*(void *)(a1 + 160));
        int v12 = *(unsigned __int16 *)(a1 + 242);
        int v13 = 134218496;
        unint64_t v14 = v9;
        __int16 v15 = 2048;
        unint64_t v16 = v11;
        __int16 v17 = 1024;
        int v18 = v12;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Filling, read %zu bytes, shared %zu, oustanding %d",  (uint8_t *)&v13,  0x1Cu);
      }

      return 1LL;
    }
  }

  else
  {
    uint64_t v5 = (os_log_s *)qword_1008F7598;
    size_t result = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      unint64_t v7 = sub_10026FA78(*(void *)(a1 + 160));
      unint64_t v8 = *(void *)(a1 + 192);
      int v13 = 134218240;
      unint64_t v14 = v7;
      __int16 v15 = 2048;
      unint64_t v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Filling done, not enough data.  shared %zu, fill %zu",  (uint8_t *)&v13,  0x16u);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100299B20(uint64_t a1)
{
  return sub_100299428(a1, 0);
}

uint64_t sub_100299B28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 176) = a2;
  return result;
}

uint64_t sub_100299B30(uint64_t a1)
{
  return *(void *)(a1 + 176);
}

BOOL sub_100299B38(uint64_t a1)
{
  int v2 = *(_BYTE **)(a1 + 208);
  int v3 = sub_1002075B4(*(void *)(a1 + 184) + 400LL);
  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "SeamlessAudioTransition") && v3 == 130)
  {
    if (*(_BYTE *)(a1 + 333))
    {
      if (sub_10029A090(a1))
      {
LABEL_5:
        *(void *)(a1 + 2sub_100242E28(v1 + 32) = 0LL;
        *(void *)(a1 + 216) = *(void *)(a1 + 248);
LABEL_6:
        sub_100501F78(*(void *)(a1 + 184));
        return 1LL;
      }

      return 0LL;
    }

    goto LABEL_9;
  }

  if ((v3 - 128) < 3 || v3 == 255)
  {
LABEL_9:
    if (*(void *)(a1 + 216))
    {
      uint64_t v5 = (os_log_s *)qword_1008F7598;
      if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
        sub_100667888(v5, v6, v7, v8, v9, v10, v11, v12);
      }
    }

    unint64_t v13 = *(void *)(a1 + 248);
    if (v13 <= 1)
    {
      unint64_t v14 = (os_log_s *)qword_1008F7598;
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      goto LABEL_14;
    }

    unint64_t v21 = sub_10026FA80(*(void *)(a1 + 184));
    unint64_t v22 = sub_10026FAF4(*(void *)(a1 + 184), v2 + 2, *(void *)(a1 + 248) - 2LL);
    if (v22)
    {
      unint64_t v23 = v22;
      char v24 = *(_BYTE *)(a1 + 264);
      *(_BYTE *)(a1 + 2sub_100242FAC(v1 - 64) = v24 + 1;
      *int v2 = v24;
      v2[1] = v22;
      __int16 v25 = (os_log_s *)qword_1008F7598;
      if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v61 = *(void *)(a1 + 248);
        unint64_t v26 = v23 + 4;
        int v64 = 134218240;
        *(void *)uint64_t v65 = v61;
        *(_WORD *)&v65[8] = 2048;
        *(void *)&v65[10] = v23 + 4;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "Buffer Length: %zu, offset: %lu",  (uint8_t *)&v64,  0x16u);
      }

      else
      {
        unint64_t v26 = v23 + 4;
      }

      unint64_t v27 = *(void *)(a1 + 248);
      if (v27 < v26)
      {
        int v28 = (os_log_s *)qword_1008F7598;
        if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT))
        {
          int v64 = 67109120;
          *(_DWORD *)uint64_t v65 = v27;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_FAULT,  "Byte offset exceeds data buffer length, buffer length: %d",  (uint8_t *)&v64,  8u);
          unint64_t v27 = *(void *)(a1 + 248);
        }
      }

      if (v27 >= v26)
      {
        unint64_t v50 = sub_10026FAF4(*(void *)(a1 + 184), &v2[v23 + 4], v27 - v26);
        __int16 v51 = (os_log_s *)qword_1008F7598;
        if (v50)
        {
          unint64_t v52 = v50;
          if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_INFO))
          {
            int v53 = *(unsigned __int8 *)(a1 + 264);
            uint64_t v54 = *(void *)(a1 + 248);
            int v55 = *(unsigned __int16 *)(a1 + 266);
            int v64 = 67110400;
            *(_DWORD *)uint64_t v65 = v53;
            *(_WORD *)&v65[4] = 2048;
            *(void *)&v65[6] = v23;
            *(_WORD *)&v65[14] = 2048;
            *(void *)&v65[16] = v52;
            __int16 v66 = 2048;
            uint64_t v67 = v54;
            __int16 v68 = 1024;
            int v69 = v55;
            __int16 v70 = 1024;
            int v71 = v55 + 1;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_INFO,  "HF Seq:%hhu, Sending %zu+%zu of %zu filled. Outstanding %d -> %d",  (uint8_t *)&v64,  0x32u);
          }

          char v56 = *(_BYTE *)(a1 + 264);
          *(_BYTE *)(a1 + 2sub_100242FAC(v1 - 64) = v56 + 1;
          uint64_t v57 = &v2[v23];
          _DWORD v57[2] = v56;
          v57[3] = v52;
          unint64_t v58 = (unint64_t)&v2[-*(void *)(a1 + 208)];
          unint64_t v59 = *(void *)(a1 + 248);
          if (v58 > v59)
          {
            __int128 v60 = (os_log_s *)qword_1008F7598;
            if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
              sub_100667808(v58, v59, v60);
            }
          }

          goto LABEL_5;
        }

        BOOL result = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEBUG);
        if (result)
        {
          sub_1006677DC();
          return 0LL;
        }
      }

      else
      {
        __int16 v29 = (os_log_s *)qword_1008F7598;
        BOOL result = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_ERROR);
        if (result)
        {
          sub_10066774C(v27, v29, v30, v31, v32, v33, v34, v35);
          return 0LL;
        }
      }
    }

    else
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        sub_1006677B0();
        return 0LL;
      }
    }

    return result;
  }

  if (*(void *)(a1 + 216))
  {
    __int16 v36 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
      sub_100667888(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }

  unint64_t v13 = *(void *)(a1 + 248);
  if (v13 > 1)
  {
    unint64_t v44 = sub_10026FAF4(*(void *)(a1 + 184), v2 + 2, v13 - 2);
    int v45 = (os_log_s *)qword_1008F7598;
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEBUG);
    if (v44)
    {
      if (result)
      {
        uint64_t v62 = *(void *)(a1 + 248);
        int v63 = *(unsigned __int16 *)(a1 + 266);
        int v64 = 134218752;
        *(void *)uint64_t v65 = v44;
        *(_WORD *)&v65[8] = 2048;
        *(void *)&v65[10] = v62;
        *(_WORD *)&v65[18] = 1024;
        *(_DWORD *)&v65[20] = v63;
        __int16 v66 = 1024;
        LODWORD(v67) = v63 + 1;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "HF Sending %zu of %zu filled. Oustanding %d -> %d ",  (uint8_t *)&v64,  0x22u);
      }

      char v46 = *(_BYTE *)(a1 + 264);
      *(_BYTE *)(a1 + 2sub_100242FAC(v1 - 64) = v46 + 1;
      *int v2 = v46;
      v2[1] = v44;
      __int16 v47 = &v2[-*(void *)(a1 + 208)];
      unint64_t v48 = *(void *)(a1 + 248);
      if ((unint64_t)v47 > v48)
      {
        __int16 v49 = (os_log_s *)qword_1008F7598;
        if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT))
        {
          int v64 = 134218240;
          *(void *)uint64_t v65 = v47;
          *(_WORD *)&v65[8] = 2048;
          *(void *)&v65[10] = v48;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_FAULT,  "wrote %ld bytes to audio buffer when max size is %zu",  (uint8_t *)&v64,  0x16u);
          unint64_t v48 = *(void *)(a1 + 248);
        }
      }

      *(void *)(a1 + 2sub_100242E28(v1 + 32) = 0LL;
      *(void *)(a1 + 216) = v48;
      goto LABEL_6;
    }

    if (result)
    {
      sub_1006678F8();
      return 0LL;
    }
  }

  else
  {
    unint64_t v14 = (os_log_s *)qword_1008F7598;
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_14:
      sub_10066774C(v13, v14, v15, v16, v17, v18, v19, v20);
      return 0LL;
    }
  }

  return result;
}

BOOL sub_10029A090(uint64_t a1)
{
  int v2 = *(char **)(a1 + 208);
  if (*(void *)(a1 + 216))
  {
    int v3 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
      sub_100667888(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }

  unint64_t v11 = sub_10026FAF4(*(void *)(a1 + 184), v2, *(void *)(a1 + 248));
  unint64_t v12 = v11;
  if (v11)
  {
    bzero(&v2[v11], *(void *)(a1 + 248) - v11);
    uint64_t v13 = mach_absolute_time();
    uint64_t v14 = *(void *)(a1 + 184);
    if (*(_BYTE *)(a1 + 268))
    {
      uint64_t v15 = *(void *)(v14 + 576);
      if (v15)
      {
        sub_10029A470(a1, v2);
        uint64_t v16 = *(void *)(a1 + 184);
        *(_WORD *)(v16 + 572) += sub_100255B60(a1, v13 - v15) / (10LL * *(int *)(a1 + 244));
        sub_10029A470(a1, v2);
        uint64_t v14 = *(void *)(a1 + 184);
      }

      *(_BYTE *)(a1 + 26_Block_object_dispose(va, 8) = 0;
    }

    unsigned int v17 = *(unsigned __int16 *)(v14 + 572);
    v2[5] = (v17 >> 15) | 0xF8;
    v2[6] = v17 >> 7;
    v2[7] = v17 & 0x7F;
    uint64_t v18 = *(void *)(a1 + 184);
    ++*(_WORD *)(v18 + 572);
    if (*(_BYTE *)(v18 + 396))
    {
      sub_10029A470(a1, v2);
      uint64_t v18 = *(void *)(a1 + 184);
    }

    *(void *)(a1 + 2sub_100242E28(v1 + 32) = 0LL;
    *(void *)(a1 + 216) = *(void *)(a1 + 248);
    sub_100501F78(v18);
    *(void *)(*(void *)(a1 + 184) + 576LL) = v13;
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEBUG))
  {
    sub_100667924();
  }

  return v12 != 0;
}

uint64_t sub_10029A208(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 240);
  uint64_t result = 2LL;
  if ((int)v1 <= 129)
  {
    if ((_DWORD)v1 == 127) {
      return 1LL;
    }
    goto LABEL_8;
  }

  if ((_DWORD)v1 != 256)
  {
    if ((_DWORD)v1 == 255) {
      return result;
    }
    if ((_DWORD)v1 != 130)
    {
LABEL_8:
      int v3 = (os_log_s *)qword_1008F7598;
      if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_ERROR)) {
        sub_100667950(v1, v3, v4, v5, v6, v7, v8, v9);
      }
    }
  }

  return 1LL;
}

uint64_t sub_10029A290(uint64_t a1, int a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 176);
  sub_100242F28((uint64_t)v12, *(void *)(a1 + 176) + 760LL);
  uint64_t v5 = sub_10045CF60(*v4, *(unsigned __int16 *)(a1 + 192));
  if (v5 && v5[74] == a1)
  {
    if (*(_DWORD *)(a1 + 240) != 130)
    {
      unint64_t v6 = sub_10026FA80(*(void *)(a1 + 184));
      if (v6 < sub_10029A208(a1))
      {
LABEL_9:
        unsigned int v7 = *(_DWORD *)(a1 + 172) + a2;
        *(_DWORD *)(a1 + 172) = v7;
        if (v7 < 0x3D) {
          return sub_100242FAC((uint64_t)v12);
        }
        uint64_t v8 = (os_log_s *)qword_1008F7598;
        if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_ERROR))
        {
          int v10 = *(unsigned __int16 *)(*(void *)(a1 + 184) + 572LL);
          unsigned int v11 = 10 * *(_DWORD *)(a1 + 244);
          *(_DWORD *)std::stringbuf::string_type buf = 67109632;
          unsigned int v14 = v7;
          __int16 v15 = 1024;
          int v16 = v10;
          __int16 v17 = 1024;
          int v18 = v7 / v11;
          _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Overwait detected %d currentSequenceNumber %d incrementing sequenceNumber by %d",  buf,  0x14u);
          unsigned int v7 = *(_DWORD *)(a1 + 172);
        }

        *(_WORD *)(*(void *)(a1 + 184) + 572LL) += v7 / (10 * *(_DWORD *)(a1 + 244));
LABEL_14:
        *(_DWORD *)(a1 + 172) = 0;
        return sub_100242FAC((uint64_t)v12);
      }

      if (*(_DWORD *)(a1 + 240) != 130) {
        goto LABEL_14;
      }
    }

    if (sub_10026FA80(*(void *)(a1 + 184))) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_ERROR)) {
    sub_1006679B4();
  }
  return sub_100242FAC((uint64_t)v12);
}

void sub_10029A454( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10029A470(uint64_t a1, _BYTE *a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7598;
  if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = a2[9] | ((a2[8] & 0xF) << 8);
    int v6 = (a2[3] << 7) & 0x7F80 | ((a2[2] & 7) << 15) | a2[4] & 0x7F;
    int v7 = a2[1] | ((*a2 & 7) << 8);
    int v8 = (a2[6] << 7) & 0x7F80 | ((a2[5] & 1) << 15) | a2[7] & 0x7F;
    uint64_t v9 = *(void *)(a1 + 184);
    int v10 = *(unsigned __int16 *)(v9 + 572);
    int v11 = *(unsigned __int8 *)(a1 + 268);
    uint64_t v12 = *(void *)(v9 + 576);
    v13[0] = 67110912;
    v13[1] = v7;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 1024;
    int v17 = v5;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 1024;
    int v21 = v10;
    __int16 v22 = 1024;
    int v23 = v11;
    __int16 v24 = 2048;
    uint64_t v25 = v12;
    __int16 v26 = 2048;
    uint64_t v27 = mach_absolute_time();
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "bluetoothd: FrameNumber: %d; HostTime(ms): %d; FrameLength: %d sequenceNumberDecoded %d, newSequenceNumber %d fInt"
      "erIOSessionSeqCompensation %d anchortimestamp %llu currentTimestamp %llu",
      (uint8_t *)v13,
      0x3Au);
  }

uint64_t sub_10029A5C8( uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6, int a7, int a8)
{
  uint64_t v16 = sub_1002561A0(a1, "HFPSendThreadHostCodec", a8);
  *(void *)uint64_t v16 = off_10088C2F8;
  *(_DWORD *)(v16 + 172) = 0;
  *(void *)(v16 + 176) = a2;
  *(_WORD *)(v16 + 192) = a3;
  *(void *)(v16 + 200) = 0LL;
  *(void *)(a1 + sub_1002949E4(v1 + 224) = 0LL;
  *(void *)(a1 + 2sub_100242E28(v1 + 32) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = operator new[](a6 * a4);
  *(_DWORD *)(a1 + 240) = a7;
  *(void *)(a1 + 256) = a5;
  *(_BYTE *)(a1 + 2sub_100242FAC(v1 - 64) = 0;
  *(_WORD *)(a1 + 266) = 0;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)off_10088C360;
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = "Streaming";
  *(_OWORD *)(a1 + 2sub_100242E28(v1 + 96) = *(_OWORD *)off_10088C378;
  *(void *)(a1 + 312) = "SharedBufferExhausted";
  *(_DWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 1;
  *(void *)(a1 + 352) = "Finalizing";
  *(_OWORD *)(a1 + 336) = *(_OWORD *)off_10088C390;
  *(_DWORD *)(a1 + 360) = 0;
  if (a7 == 130) {
    *(_BYTE *)(a1 + 26_Block_object_dispose(va, 8) = 1;
  }
  int v17 = sub_10045CF60(a2, a3);
  if (!v17)
  {
    __int16 v18 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
      sub_1006674E0(v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }

  *(void *)(a1 + 184) = v17;
  unint64_t v26 = a4;
  if (a5)
  {
    int v27 = *(_DWORD *)(a1 + 240);
    if (v27 <= 127)
    {
      if (v27 == 1)
      {
        unint64_t v26 = 2 * a5;
        goto LABEL_20;
      }

      if (v27 == 2)
      {
        unint64_t v26 = 4 * a5;
        goto LABEL_20;
      }

      unint64_t v26 = a5;
      if (v27 == 127) {
        goto LABEL_20;
      }
    }

    else
    {
      if ((v27 - 128) < 3 || v27 == 255)
      {
        *(_BYTE *)(a1 + sub_100242E28(v1 + 96) = 1;
        unint64_t v26 = a5;
        goto LABEL_20;
      }

      unint64_t v26 = a5;
      if (v27 == 256) {
        goto LABEL_20;
      }
    }

    int v28 = (os_log_s *)qword_1008F7598;
    BOOL v29 = os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT);
    unint64_t v26 = a4;
    if (v29)
    {
      sub_100667470(v28, v30, v31, v32, v33, v34, v35, v36);
      unint64_t v26 = a4;
    }
  }

void sub_10029A928( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_10029A994(uint64_t a1)
{
  *(void *)a1 = off_10088C2F8;
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, *(void *)(a1 + 176) + 760LL);
  int v2 = sub_10045CF60(*(void *)(a1 + 176), *(unsigned __int16 *)(a1 + 192));
  if (v2) {
    sub_1005023FC((uint64_t)v2);
  }
  *(void *)(a1 + 200) = 0LL;
  *(_BYTE *)(a1 + sub_100242E28(v1 + 96) = 0;
  sub_100242FAC((uint64_t)v5);
  int v3 = *(void **)(a1 + 208);
  if (v3) {
    operator delete[](v3);
  }
  return sub_1002561F4(a1);
}

void sub_10029AA14(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 + 208);
  if (v3) {
    operator delete[](v3);
  }
  sub_1002561F4(v1);
  _Unwind_Resume(a1);
}

void sub_10029AA48(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10029A994(a1);
  operator delete(v1);
}

unint64_t sub_10029AA5C(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008F7598;
  if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 240);
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "calculateSleepIntervalInUs codec type:%d",  (uint8_t *)v6,  8u);
  }

  int v4 = *(_DWORD *)(a1 + 240);
  unint64_t result = 7500LL;
  if (v4 > 129)
  {
    if (v4 == 130) {
      return 10000LL;
    }
    if (v4 != 255)
    {
      if (v4 == 256) {
        return result;
      }
    }

    return 15000LL;
  }

  if (v4 != 2)
  {
    if (v4 == 127) {
      return result;
    }
    return (unint64_t)(float)((float)((float)((float)*(unint64_t *)(a1 + 248) / 16000.0) * 1000.0) * 1000.0);
  }

  return (unint64_t)((float)*(unint64_t *)(a1 + 248) / 32000.0 * 1000.0 * 1000.0);
}

uint64_t sub_10029ABB0(uint64_t a1)
{
  v23[0] = 0LL;
  v23[1] = 0LL;
  int v2 = (uint64_t *)(a1 + 176);
  sub_100242F28((uint64_t)v23, *(void *)(a1 + 176) + 760LL);
  int v3 = sub_10045CF60(*v2, *(unsigned __int16 *)(a1 + 192));
  if (v3 && v3[74] == a1)
  {
    if (!*(_WORD *)(a1 + 266)) {
      goto LABEL_16;
    }
    char v5 = sub_1002561EC(a1);
    unint64_t v6 = *(unsigned __int16 *)(a1 + 266);
    unint64_t v7 = *(void *)(a1 + 248);
    if ((v5 & 1) != 0)
    {
      unsigned __int16 v8 = v7 <= v6 ? v6 - v7 : 0;
    }

    else
    {
      if (v7 > v6)
      {
        uint64_t v9 = (os_log_s *)qword_1008F7598;
        if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 136446210;
          v25[0] = "fAudioBytesOutstanding >= fAudioBufferSize";
          _os_log_fault_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  buf,  0xCu);
          unint64_t v7 = *(void *)(a1 + 248);
          LOWORD(v6) = *(_WORD *)(a1 + 266);
        }
      }

      unsigned __int16 v8 = v6 - v7;
    }

    *(_WORD *)(a1 + 266) = v8;
    int v10 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v22 = sub_10026FA80(*(void *)(a1 + 184));
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      LODWORD(v25[0]) = v8;
      WORD2(v25[0]) = 2048;
      *(void *)((char *)v25 + 6) = v22;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Draining controller voice to %d bytes, frame available %zu",  buf,  0x12u);
      unsigned __int16 v8 = *(_WORD *)(a1 + 266);
    }

    if (!v8) {
LABEL_16:
    }
      sub_10029AEBC(a1, 1u);
    unint64_t v11 = sub_10026FA80(*(void *)(a1 + 184));
    if (*(_DWORD *)(a1 + 320) != 2) {
      goto LABEL_37;
    }
    if (*(_BYTE *)(a1 + 324))
    {
      unint64_t v12 = 576LL - *(unsigned __int16 *)(a1 + 266);
      unint64_t v13 = *(void *)(a1 + 248);
      *(_BYTE *)(a1 + 324) = 0;
      uint64_t v14 = v12 / v13;
    }

    else
    {
      uint64_t v14 = 1LL;
    }

    int v15 = *(_DWORD *)(a1 + 240);
    if ((v15 - 127) < 4 || v15 == 256)
    {
      if (!sub_10026FA80(*(void *)(a1 + 184)))
      {
LABEL_37:
        uint64_t v4 = 1LL;
        goto LABEL_38;
      }

      int v16 = sub_1002561EC(a1);
      uint64_t v17 = *(void *)(a1 + 184);
      if (v16)
      {
        unint64_t v18 = sub_10026FA80(v17);
        uint64_t v14 = v18 / sub_10029A208(a1);
      }

      else
      {
        unint64_t v19 = sub_10026FA80(v17);
        if (v19 <= sub_10029A208(a1))
        {
          uint64_t v14 = 1LL;
          goto LABEL_36;
        }

        unint64_t v20 = sub_10026FA80(*(void *)(a1 + 184));
        if (v20 >= 2 * (sub_10029A208(a1) & 0x7FuLL) && !*(_WORD *)(a1 + 266))
        {
          uint64_t v14 = 2LL;
          goto LABEL_36;
        }
      }
    }

    if (!v14) {
      goto LABEL_37;
    }
    do
    {
LABEL_36:
      sub_10029B180(a1);
      --v14;
    }

    while (v14);
    goto LABEL_37;
  }

  uint64_t v4 = 0LL;
LABEL_38:
  sub_100242FAC((uint64_t)v23);
  return v4;
}

void sub_10029AE94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10029AEBC(uint64_t a1, unsigned int a2)
{
  v37[0] = 0LL;
  v37[1] = 0LL;
  sub_100242F28((uint64_t)v37, *(void *)(a1 + 176) + 760LL);
  uint64_t v4 = *(unsigned int *)(a1 + 320);
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 2)
        {
          int v15 = *(_DWORD *)(a1 + 240);
          if ((v15 - 127) < 4 || v15 == 256)
          {
            unint64_t v16 = sub_10026FA80(*(void *)(a1 + 184));
          }

          else
          {
            uint64_t v36 = *(void *)(a1 + 216);
          }

          int v17 = 1;
LABEL_20:
          *(_DWORD *)(a1 + 320) = v17;
        }
      }

      else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24LL))(a1))
      {
        goto LABEL_19;
      }
    }

    else if (a2)
    {
      unint64_t v18 = (os_log_s *)qword_1008F7598;
      if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
        sub_100667470(v18, v19, v20, v21, v22, v23, v24, v25);
      }
    }

    else if ((_DWORD)v4 == 1)
    {
      if (*(_WORD *)(a1 + 266))
      {
        char v5 = (os_log_s *)qword_1008F7598;
        if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
          sub_1006675F4(v5, v6, v7, v8, v9, v10, v11, v12);
        }
      }

      int v13 = *(_DWORD *)(a1 + 240);
      if ((v13 - 127) >= 4 && v13 != 256)
      {
        uint64_t v35 = *(void *)(a1 + 216);
        goto LABEL_10;
      }

      unint64_t v14 = sub_10026FA80(*(void *)(a1 + 184));
      if (v14 >= sub_10029A208(a1))
      {
LABEL_10:
        *(_BYTE *)(a1 + 324) = 1;
LABEL_19:
        int v17 = 2;
        goto LABEL_20;
      }
    }
  }

void sub_10029B160( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10029B180(uint64_t a1)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, *(void *)(a1 + 176) + 760LL);
  int v2 = *(_DWORD *)(a1 + 360);
  switch(v2)
  {
    case 2:
      goto LABEL_7;
    case 1:
LABEL_6:
      sub_10029B250(a1);
      *(_DWORD *)(a1 + 360) = 2;
LABEL_7:
      *(void *)(a1 + 216) = 0LL;
      *(void *)(a1 + sub_1002949E4(v1 + 224) = 0LL;
      *(_DWORD *)(a1 + 360) = 0;
      return sub_100242FAC((uint64_t)v12);
    case 0:
      if (!sub_100299B38(a1))
      {
        sub_10029AEBC(a1, 2u);
        return sub_100242FAC((uint64_t)v12);
      }

      *(_DWORD *)(a1 + 360) = 1;
      goto LABEL_6;
  }

  int v3 = (os_log_s *)qword_1008F7598;
  if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
    sub_100667470(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return sub_100242FAC((uint64_t)v12);
}

void sub_10029B23C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10029B250(uint64_t a1)
{
  int v2 = *(char **)(a1 + 208);
  unint64_t v3 = *(void *)(a1 + 216);
  if (!v2)
  {
    uint64_t v4 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
      sub_1006676DC(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  for (; v3; v3 -= v12)
  {
    if (v3 >= *(void *)(a1 + 248)) {
      unint64_t v12 = *(void *)(a1 + 248);
    }
    else {
      unint64_t v12 = v3;
    }
    int v13 = (os_log_s *)qword_1008F7598;
    if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(unsigned __int16 *)(a1 + 266);
      *(_DWORD *)std::stringbuf::string_type buf = 134218752;
      unint64_t v24 = v12;
      __int16 v25 = 2048;
      unint64_t v26 = v3;
      __int16 v27 = 1024;
      int v28 = v17;
      __int16 v29 = 2048;
      uint64_t v30 = v12 + v17;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  ">> Sending, %zu bytes of total %zu. Oustanding %d -> %lu",  buf,  0x26u);
    }

    if (*(void *)(a1 + 200))
    {
      buf[0] = 0;
      sub_100242CA4(buf);
      if (*(_BYTE *)(a1 + 332))
      {
        uint64_t v14 = sub_1002073AC(*(void *)(a1 + 184) + 400LL);
        sub_1001F6F84(v14 + 128, v2, (unsigned __int16)v12);
      }

      else
      {
        sub_1001199E4(*(unsigned __int16 **)(a1 + 200), v2, (unsigned __int16)v12, 1);
      }

      sub_100242CD0(buf);
      sub_100242CD8(buf);
    }

    else
    {
      int v15 = (os_log_s *)qword_1008F7598;
      if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_ERROR)) {
        sub_1006676A8(&v19, v20, v15);
      }
    }

    *(_WORD *)(a1 + 266) += v12;
    if ((sub_1002561EC(a1) & 1) == 0 && *(unsigned __int16 *)(a1 + 266) >= 0x2D1u)
    {
      unint64_t v16 = (os_log_s *)qword_1008F7598;
      if (os_log_type_enabled((os_log_t)qword_1008F7598, OS_LOG_TYPE_FAULT)) {
        sub_100667664(v21, &v22, v16);
      }
    }

    v2 += v12;
  }

  return 1LL;
}

void sub_10029B478( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10029B49C(uint64_t a1)
{
  uint64_t result = sub_1002561EC(a1);
  if ((_DWORD)result) {
    return sub_100256450(a1);
  }
  return result;
}

uint64_t sub_10029B4DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 200) = a2;
  return result;
}

uint64_t sub_10029B4E4(uint64_t a1)
{
  return *(void *)(a1 + 200);
}

uint64_t sub_10029B4EC(uint64_t a1, int a2)
{
  uint64_t v4 = sub_10029BED0(a1, a2);
  *(void *)uint64_t v4 = off_10088C3B8;
  *(_BYTE *)(v4 + 1176) = 0;
  *(_DWORD *)(v4 + 11sub_100242FAC(v40 - 80) = 4135;
  *(int32x2_t *)(v4 + 1184) = vdup_n_s32(0x80000007);
  *(_WORD *)(v4 + 1192) = 0;
  *(void *)(v4 + 1216) = 0LL;
  *(_DWORD *)(v4 + 1430) = 0;
  *(_DWORD *)(v4 + 1440) = 0;
  *(_WORD *)(v4 + 1444) = 0;
  *(_DWORD *)(v4 + 1203) = 0;
  *(_WORD *)(v4 + 1207) = 0;
  if ((a2 - 2000) < 0x7D0
    || ((a2 - 1) < 0x7CF ? (BOOL v5 = a2 == 9) : (BOOL v5 = 1), !v5 || a2 == 6000))
  {
    *(_BYTE *)(a1 + sub_100242E28(v1 + 160) = 1;
  }

  char v48 = 0;
  uint64_t v6 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "SupportsMultipleAdvertising");
  int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v6 + 72LL))(v6, buf, __p, &v48);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v7) {
      goto LABEL_21;
    }
  }

  else if (!v7)
  {
    goto LABEL_21;
  }

  uint64_t v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (v48) {
      uint64_t v9 = "enabled";
    }
    else {
      uint64_t v9 = "disabled";
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning: Overriding Multiple Advertising support - %{public}s",  buf,  0xCu);
  }

  *(_BYTE *)(a1 + sub_100242E28(v1 + 160) = v48;
LABEL_21:
  uint64_t v10 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 360LL))(v10) & 1) == 0)
  {
    uint64_t v11 = sub_1002E6BF0();
    char v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 336LL))(v11);
    char v13 = (a2 - 2000) < 0xFFFFF837 ? 1 : v12;
    if ((v13 & 1) == 0)
    {
      LOBYTE(v44) = 0;
      uint64_t v14 = sub_1002E6E00();
      sub_10002418C(buf, "CATT");
      sub_10002418C(__p, "AllowAppleDevices");
      (*(void (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v14 + 72LL))(v14, buf, __p, &v44);
      if (v47 < 0) {
        operator delete(__p[0]);
      }
      if (v50 < 0) {
        operator delete(*(void **)buf);
      }
      int v15 = v44;
      unint64_t v16 = (os_log_s *)qword_1008F7578;
      BOOL v17 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
      if (v15)
      {
        if (v17)
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Warning: Allowing CATT between Apple Devices, transport switch will be turned off",  buf,  2u);
        }
      }

      else
      {
        if (v17)
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Enable transport switch on non-iPad devices",  buf,  2u);
        }

        *(_DWORD *)(a1 + 1180) |= 0x100000u;
      }
    }
  }

  if (a2 == 19)
  {
    *(_DWORD *)(a1 + 1180) |= 0x200000u;
  }

  else if ((a2 - 19) >= 0x7BD && (*(_DWORD *)(a1 + 708) - 2001) > 0x7CE)
  {
    goto LABEL_61;
  }

  LOBYTE(v44) = 0;
  *(_DWORD *)(a1 + 1180) |= 0x40000u;
  uint64_t v18 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "DisableSensorTrack");
  (*(void (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v18 + 72LL))(v18, buf, __p, &v44);
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (v50 < 0) {
    operator delete(*(void **)buf);
  }
  if ((_BYTE)v44)
  {
    uint8_t v19 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Force Disable SensorTrack", buf, 2u);
    }
  }

  else
  {
    *(_DWORD *)(a1 + 1180) |= 8u;
  }

  if ((a2 - 20) < 0x7BC || (*(_DWORD *)(a1 + 708) - 2001) <= 0x7CE)
  {
    *(_DWORD *)(a1 + 1180) |= 0x1000000u;
    LOBYTE(v44) = 0;
    uint64_t v20 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "DisableControllerBTClock");
    int v21 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v20 + 72LL))(v20, buf, __p, &v44);
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    if (v50 < 0) {
      operator delete(*(void **)buf);
    }
    if ((_BYTE)v44) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    if (v22 == 1)
    {
      *(_BYTE *)(a1 + 120_Block_object_dispose(va, 8) = 1;
      uint64_t v23 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Force Disable  DisableControllerBTClock",  buf,  2u);
      }

      *(_DWORD *)(a1 + 1180) &= ~0x1000000u;
    }
  }

void sub_10029BE08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_10029BF58(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_10029BED0(uint64_t a1, int a2)
{
  *(void *)a1 = off_10088E498;
  uint64_t v4 = a1 + 72;
  sub_100242DC4(a1 + 8);
  sub_100242DC4(v4);
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 136) = a1 + 144;
  *(_BYTE *)(a1 + sub_100242E28(v1 + 160) = 0;
  *(_DWORD *)(a1 + 1sub_100242FAC(v1 - 64) = 0;
  *(_DWORD *)(a1 + 70_Block_object_dispose(va, 8) = a2;
  *(_DWORD *)(a1 + 712) = 0;
  return a1;
}

void sub_10029BF44(_Unwind_Exception *a1)
{
}

uint64_t sub_10029BF58(uint64_t a1)
{
  *(void *)a1 = off_10088E498;
  sub_10023BF24(a1 + 136, *(void **)(a1 + 144));
  sub_100242E28(a1 + 72);
  sub_100242E28(a1 + 8);
  return a1;
}

void sub_10029BFA4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_1008EF9B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1008EF9B8))
  {
    sub_10002418C(&xmmword_1008EF9A0, "");
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008EF9A0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1008EF9B8);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10029C0DC;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EF9C0 != -1) {
    dispatch_once(&qword_1008EF9C0, block);
  }
  if (byte_1008EF9B7 < 0)
  {
    sub_100024238((_BYTE *)a2, (void *)xmmword_1008EF9A0, *((unint64_t *)&xmmword_1008EF9A0 + 1));
  }

  else
  {
    *(_OWORD *)a2 = xmmword_1008EF9A0;
    *(void *)(a2 + 16) = unk_1008EF9B0;
  }

void sub_10029C0C4(_Unwind_Exception *a1)
{
}

void sub_10029C0DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __s = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  if (*(_DWORD *)(v1 + 708) != 22) {
    goto LABEL_20;
  }
  uint64_t v2 = sub_1002E6B38();
  if (SHIBYTE(v11) < 0)
  {
    uint64_t v3 = v10;
    if (!v10) {
      goto LABEL_20;
    }
    p_s = __s;
  }

  else
  {
    uint64_t v3 = HIBYTE(v11);
    if (!HIBYTE(v11)) {
      goto LABEL_20;
    }
    p_s = (void **)&__s;
  }

  if (v3 >= 2)
  {
    BOOL v5 = (char *)p_s + v3;
    uint64_t v6 = p_s;
    do
    {
      int v7 = (char *)memchr(v6, 67, v3 - 1);
      if (!v7) {
        break;
      }
      if (*(_WORD *)v7 == 12355)
      {
        if (v7 != v5 && v7 - (char *)p_s != -1)
        {
          uint64_t v8 = "C0";
          goto LABEL_19;
        }

        break;
      }

      uint64_t v6 = (void **)(v7 + 1);
      uint64_t v3 = v5 - (char *)v6;
    }

    while (v5 - (char *)v6 >= 2);
  }

  uint64_t v8 = "C2";
  if (sub_10029C238((uint64_t *)&__s, "C2", 0LL) != -1LL
    || (uint64_t v8 = "C3", sub_10029C238((uint64_t *)&__s, "C3", 0LL) != -1LL))
  {
LABEL_19:
    std::string::assign((std::string *)&xmmword_1008EF9A0, v8);
  }

void sub_10029C21C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10029C238(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }

  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }

  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1LL;
  }
  int64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = (const void *)(v5 + a3);
    uint64_t v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        unint64_t v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        char v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        uint64_t v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }

      while (v11 >= v8);
    }

    char v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1LL;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }

  return a3;
}

uint64_t sub_10029C30C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10029C380;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EF9D0 != -1) {
    dispatch_once(&qword_1008EF9D0, block);
  }
  return byte_1008EF9C8;
}

void sub_10029C380(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::stringbuf::string_type __p = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  if (*(_DWORD *)(v1 + 708) == 23)
  {
    uint64_t v2 = sub_1002E6B38();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 64LL))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_3;
        }
        p_p = (char *)__p;
      }

      else
      {
        uint64_t v3 = HIBYTE(v10);
        if (!HIBYTE(v10)) {
          goto LABEL_3;
        }
        p_p = (char *)&__p;
      }

      if (v3 >= 2)
      {
        uint64_t v5 = &p_p[v3];
        unint64_t v6 = p_p;
        do
        {
          size_t v7 = (char *)memchr(v6, 66, v3 - 1);
          if (!v7) {
            break;
          }
          if (*(_WORD *)v7 == 12354)
          {
            if (v7 != v5 && v7 - p_p != -1) {
              byte_1008EF9C8 = 1;
            }
            break;
          }

          unint64_t v6 = v7 + 1;
          uint64_t v3 = v5 - (_BYTE *)v6;
        }

        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }

void sub_10029C49C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029C4B8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10029C52C;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EF9E0 != -1) {
    dispatch_once(&qword_1008EF9E0, block);
  }
  return byte_1008EF9D8;
}

void sub_10029C52C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::stringbuf::string_type __p = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  if (*(_DWORD *)(v1 + 708) == 23)
  {
    uint64_t v2 = sub_1002E6B38();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 64LL))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_3;
        }
        p_p = (char *)__p;
      }

      else
      {
        uint64_t v3 = HIBYTE(v10);
        if (!HIBYTE(v10)) {
          goto LABEL_3;
        }
        p_p = (char *)&__p;
      }

      if (v3 >= 2)
      {
        uint64_t v5 = &p_p[v3];
        unint64_t v6 = p_p;
        do
        {
          size_t v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7) {
            break;
          }
          if (*(_WORD *)v7 == 12355)
          {
            if (v7 != v5 && v7 - p_p != -1) {
              byte_1008EF9D8 = 1;
            }
            break;
          }

          unint64_t v6 = v7 + 1;
          uint64_t v3 = v5 - (_BYTE *)v6;
        }

        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }

void sub_10029C648( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029C664(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10029C6D8;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EF9F0 != -1) {
    dispatch_once(&qword_1008EF9F0, block);
  }
  return byte_1008EF9E8;
}

void sub_10029C6D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::stringbuf::string_type __p = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  if (*(_DWORD *)(v1 + 708) == 23)
  {
    uint64_t v2 = sub_1002E6B38();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 64LL))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_3;
        }
        p_p = (char *)__p;
      }

      else
      {
        uint64_t v3 = HIBYTE(v10);
        if (!HIBYTE(v10)) {
          goto LABEL_3;
        }
        p_p = (char *)&__p;
      }

      if (v3 >= 2)
      {
        uint64_t v5 = &p_p[v3];
        unint64_t v6 = p_p;
        do
        {
          size_t v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7) {
            break;
          }
          if (*(_WORD *)v7 == 12867)
          {
            if (v7 != v5 && v7 - p_p != -1) {
              byte_1008EF9E8 = 1;
            }
            break;
          }

          unint64_t v6 = v7 + 1;
          uint64_t v3 = v5 - (_BYTE *)v6;
        }

        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }

void sub_10029C7F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029C810(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10029C884;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFA00 != -1) {
    dispatch_once(&qword_1008EFA00, block);
  }
  return byte_1008EF9F8;
}

void sub_10029C884(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::stringbuf::string_type __p = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  if (*(_DWORD *)(v1 + 708) == 25)
  {
    uint64_t v2 = sub_1002E6B38();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 64LL))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_3;
        }
        p_p = (char *)__p;
      }

      else
      {
        uint64_t v3 = HIBYTE(v10);
        if (!HIBYTE(v10)) {
          goto LABEL_3;
        }
        p_p = (char *)&__p;
      }

      if (v3 >= 2)
      {
        uint64_t v5 = &p_p[v3];
        unint64_t v6 = p_p;
        do
        {
          size_t v7 = (char *)memchr(v6, 66, v3 - 1);
          if (!v7) {
            break;
          }
          if (*(_WORD *)v7 == 12354)
          {
            if (v7 != v5 && v7 - p_p != -1) {
              byte_1008EF9F8 = 1;
            }
            break;
          }

          unint64_t v6 = v7 + 1;
          uint64_t v3 = v5 - (_BYTE *)v6;
        }

        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }

void sub_10029C9A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029C9BC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10029CA30;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFA10 != -1) {
    dispatch_once(&qword_1008EFA10, block);
  }
  return byte_1008EFA08;
}

void sub_10029CA30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::stringbuf::string_type __p = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  if (*(_DWORD *)(v1 + 708) == 25)
  {
    uint64_t v2 = sub_1002E6B38();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 64LL))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_3;
        }
        p_p = (char *)__p;
      }

      else
      {
        uint64_t v3 = HIBYTE(v10);
        if (!HIBYTE(v10)) {
          goto LABEL_3;
        }
        p_p = (char *)&__p;
      }

      if (v3 >= 2)
      {
        uint64_t v5 = &p_p[v3];
        unint64_t v6 = p_p;
        do
        {
          size_t v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7) {
            break;
          }
          if (*(_WORD *)v7 == 12867)
          {
            if (v7 != v5 && v7 - p_p != -1) {
              byte_1008EFA08 = 1;
            }
            break;
          }

          unint64_t v6 = v7 + 1;
          uint64_t v3 = v5 - (_BYTE *)v6;
        }

        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }

void sub_10029CB4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029CB68(uint64_t a1)
{
  int v12 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "Magnet");
  sub_10002418C(__p, "ForcedLERSSIValue");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v2 + 88LL))(v2, buf, __p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0)
  {
    operator delete(*(void **)buf);
    if (v3) {
      goto LABEL_5;
    }
LABEL_9:
    *(_BYTE *)(a1 + 1194) = 0;
    goto LABEL_10;
  }

  if (!v3) {
    goto LABEL_9;
  }
LABEL_5:
  __int16 v4 = v12;
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Enable force LE RSSI CFDataRef value = %d dBm", buf, 8u);
  }

  *(_BYTE *)(a1 + 1194) = 1;
  *(_WORD *)(a1 + 11sub_100242E28(v1 + 96) = v4;
LABEL_10:
  uint64_t v6 = sub_1002E6E00();
  sub_10002418C(buf, "Magnet");
  sub_10002418C(__p, "ForcedClassicRSSIValue");
  int v7 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v6 + 88LL))(v6, buf, __p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0)
  {
    operator delete(*(void **)buf);
    if (v7) {
      goto LABEL_14;
    }
LABEL_18:
    *(_BYTE *)(a1 + 1195) = 0;
    return;
  }

  if (!v7) {
    goto LABEL_18;
  }
LABEL_14:
  __int16 v8 = v12;
  uint64_t v9 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Enable force Classic RSSI CFDataRef value = %d dBm",  buf,  8u);
  }

  *(_BYTE *)(a1 + 1195) = 1;
  *(_WORD *)(a1 + 119_Block_object_dispose(va, 8) = v8;
}

void sub_10029CD7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10029CDC0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 7) {
      return 1LL;
    }
  }

  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1LL;
  }

  return v1 == 6000;
}

BOOL sub_10029CE00(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 708);
  return v1 == 6000 || (v1 - 22) < 0x7BA;
}

BOOL sub_10029CE20(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 22) < 0x7BA;
}

BOOL sub_10029CE34(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 22) < 0x7BA;
}

BOOL sub_10029CE48(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 22) < 0x7BA;
}

BOOL sub_10029CE5C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 20) < 6;
}

BOOL sub_10029CE70(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 708);
  return v1 == 6000 || (v1 - 20) < 6;
}

BOOL sub_10029CE8C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 22) < 0x7BA;
}

BOOL sub_10029CEA0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 22) < 0x7BA;
}

BOOL sub_10029CEB4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 22) < 4;
}

BOOL sub_10029CEC8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 19) < 7;
}

BOOL sub_10029CEDC()
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 21) < 0x7BB;
}

uint64_t sub_10029CF00()
{
  return 0LL;
}

BOOL sub_10029CF08(uint64_t a1)
{
  if (qword_1008EFA18 != -1) {
    dispatch_once(&qword_1008EFA18, &stru_10088D208);
  }
  BOOL v2 = sub_1002D102C(a1, 0x14u);
  BOOL result = 0LL;
  if (v2 && byte_1008EFA20)
  {
    __int16 v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (byte_1008EFA21) {
        uint64_t v5 = "Enabled";
      }
      else {
        uint64_t v5 = "Disabled";
      }
      int v6 = 136315138;
      int v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Overriding Apple Enhanced Advertising Report support to : %s",  (uint8_t *)&v6,  0xCu);
    }

    return byte_1008EFA21 != 0;
  }

  return result;
}

void sub_10029D020(id a1)
{
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(v4, "LE");
  sub_10002418C(__p, "AppleExtendedAdvertisingReport");
  byte_1008EFA20 = (*(uint64_t (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72LL))( v1,  v4,  __p,  &byte_1008EFA21);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_10029D0B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10029D0E4()
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 21) < 5;
}

BOOL sub_10029D108(uint64_t a1)
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 1) <= 0x7CE
      && (*(_DWORD *)(a1 + 708) - 22) < 4;
}

BOOL sub_10029D150(uint64_t a1)
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 1) <= 0x7CE
      && (*(_DWORD *)(a1 + 708) - 23) < 3;
}

uint64_t sub_10029D198(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 7) {
      return 1LL;
    }
  }

  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1LL;
  }

  return 0LL;
}

BOOL sub_10029D1D0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 21) < 5;
}

BOOL sub_10029D1E4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 2001) < 0x7CF;
}

BOOL sub_10029D1F8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 20) < 6;
}

BOOL sub_10029D20C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (!v1) {
    return 0LL;
  }
  if (v1 > 0x7CF) {
    return v1 <= 0xF9F && v1 != 2000;
  }
  return v1 - 20 < 6;
}

BOOL sub_10029D24C()
{
  return sub_100361020() == 28 || sub_100361020() == 23;
}

BOOL sub_10029D27C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 2001) < 0x7CF;
}

uint64_t sub_10029D290()
{
  unsigned int v0 = sub_100361020() - 186;
  return (v0 < 0x20) & (0xF3FF0F0F >> v0);
}

BOOL sub_10029D2C0()
{
  return sub_100361020() == 150;
}

BOOL sub_10029D2DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1200)) {
    return *(_BYTE *)(a1 + 1201) != 0;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 708);
  BOOL v4 = v3 - 1 > 0x7CE || v3 > 0x13;
  int v5 = (1 << v3) & 0x83000;
  BOOL v6 = v4 || v5 == 0;
  if (v6 || (uint64_t v7 = sub_1002E6BF0(), !(*(unsigned int (**)(uint64_t))(*(void *)v7 + 360LL))(v7)))
  {
    BOOL result = 0LL;
    *(_BYTE *)(a1 + 1201) = 0;
  }

  else
  {
    BOOL result = 1LL;
    *(_BYTE *)(a1 + 1201) = 1;
  }

  return result;
}

BOOL sub_10029D360(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 1) < 0x7CF;
}

BOOL sub_10029D374(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 22) < 0x7BA;
}

BOOL sub_10029D388(uint64_t a1)
{
  return *(_DWORD *)(a1 + 708) == 22;
}

BOOL sub_10029D398(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 22) < 0x7BA;
}

uint64_t sub_10029D3AC(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (v1 - 1 > 0x7CE) {
    return 0LL;
  }
  if (v1 > 0x16) {
    return 2LL;
  }
  return v1 == 22;
}

uint64_t sub_10029D3E0(_DWORD *a1)
{
  else {
    return (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 24LL))(a1) ^ 1;
  }
}

BOOL sub_10029D418(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (!v1) {
    return 0LL;
  }
  if (v1 <= 0x7CF)
  {
    if (v1 <= 0x13) {
      return 0LL;
    }
    return *(_BYTE *)(a1 + 1208) == 0;
  }

  uint64_t v2 = 0LL;
  if (v1 <= 0xF9F && v1 != 2000) {
    return *(_BYTE *)(a1 + 1208) == 0;
  }
  return v2;
}

uint64_t sub_10029D460(_DWORD *a1)
{
  unsigned int v1 = a1[177];
  if (!v1) {
    return 0LL;
  }
  if (v1 > 0x7CF) {
    return v1 - 2001 < 0x7CF;
  }
  if (v1 < 0x14) {
    return 0LL;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 24LL))(a1))
  {
    unsigned int v1 = a1[177];
    if (v1 >= 0x7D0) {
      return v1 - 2001 < 0x7CF;
    }
    return 0LL;
  }

  return 1LL;
}

BOOL sub_10029D4CC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 2001) < 0x7CF;
}

BOOL sub_10029D4E0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (!v1) {
    return 0LL;
  }
  if (v1 <= 0x7CF) {
    return v1 > 0x12;
  }
  return v1 < 0xFA0 && v1 != 2000;
}

BOOL sub_10029D51C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 20) < 0x7BC;
}

BOOL sub_10029D530(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 23) < 0x7B9;
}

uint64_t sub_10029D544(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (v1 < 0x7D0)
  {
    if (v1 > 0xE) {
      return 1LL;
    }
  }

  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_10029D578(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (!v1) {
    return v1 == 6000;
  }
  if (v1 > 0x7CF)
  {
    if (v1 > 0xF9F || v1 == 2000) {
      return v1 == 6000;
    }
    return 1LL;
  }

  if (v1 - 19 < 7) {
    return 1LL;
  }
  return v1 == 6000;
}

uint64_t sub_10029D5C0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (!v1) {
    return v1 == 6000;
  }
  if (v1 > 0x7CF)
  {
    if (v1 > 0xF9F || v1 == 2000) {
      return v1 == 6000;
    }
    return 1LL;
  }

  if (v1 - 19 < 7) {
    return 1LL;
  }
  return v1 == 6000;
}

BOOL sub_10029D608(uint64_t a1)
{
  return *(_DWORD *)(a1 + 708) == 25;
}

BOOL sub_10029D618(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 7) {
      return 1LL;
    }
  }

  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1LL;
  }

  return v1 >> 4 > 0x176;
}

uint64_t sub_10029D658(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 4) {
      return 1LL;
    }
  }

  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_10029D690(_DWORD *a1)
{
  uint64_t v1 = 25LL;
  if ((a1[177] - 2001) >= 0x7CF)
  {
    else {
      return 22LL;
    }
  }

  return v1;
}

BOOL sub_10029D6D8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 2001) < 0x7CF;
}

uint64_t sub_10029D6EC(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (!v1) {
    return 0;
  }
  if (v1 > 0x7CF)
  {
    if (v1 <= 0xF9F && v1 != 2000) {
      return 2;
    }
    return 0;
  }

  if (v1 < 0x13) {
    return 0;
  }
  if (v1 < 0x16) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_10029D738(_DWORD *a1)
{
  int v1 = a1[177];
  if ((v1 - 1) <= 0x7CE
    && ((v1 - 22) < 2
     || v1 == 25 && ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 56LL))(a1) & 1) != 0))
  {
    return 32LL;
  }

  else
  {
    return 8LL;
  }

uint64_t sub_10029D788(_DWORD *a1)
{
  uint64_t result = _os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    unsigned int v3 = a1[177];
    if (v3 - 22 <= 0x7B9
      && (v3 < 0x18 || v3 == 25 && ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 48LL))(a1) & 1) == 0))
    {
      return 8LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL sub_10029D7FC(uint64_t a1)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16LL))(&v3);
  int v1 = std::string::compare(&v3, "C2");
  return v1 >= 0;
}

unint64_t sub_10029D858(uint64_t a1)
{
  int v2 = sub_100361020();
  else {
    return 0LL;
  }
}

unint64_t sub_10029D8A4(uint64_t a1)
{
  int v2 = sub_100361020();
  else {
    return 0LL;
  }
}

uint64_t sub_10029D8F0()
{
  return 0LL;
}

uint64_t sub_10029D8F8()
{
  return 0LL;
}

uint64_t sub_10029D900()
{
  return 0LL;
}

uint64_t sub_10029D908()
{
  return 0LL;
}

uint64_t sub_10029D910(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2352LL))(a1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2360LL))(a1) & 1) != 0)
  {
    return 1LL;
  }

  else
  {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2376LL))(a1);
  }

uint64_t sub_10029D96C()
{
  unsigned int v0 = sub_100361020() - 156;
  return (v0 < 0x3E) & (0x3CFFC3C3C0000003uLL >> v0);
}

uint64_t sub_10029D9A0()
{
  return 1LL;
}

uint64_t sub_10029D9A8(uint64_t a1)
{
  return (char)-*(_BYTE *)(a1 + 1202);
}

uint64_t sub_10029D9B8()
{
  return 0LL;
}

uint64_t sub_10029D9C0(_DWORD *a1)
{
  unsigned int v2 = a1[177];
  if (!v2) {
    return 0LL;
  }
  if (v2 > 0x7CF) {
    return v2 - 2001 < 0x7CF;
  }
  if (v2 < 0x15) {
    return 0LL;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 24LL))(a1))
  {
    unsigned int v2 = a1[177];
    if (v2 >= 0x7D0) {
      return v2 - 2001 < 0x7CF;
    }
    return 0LL;
  }

  return 1LL;
}

BOOL sub_10029DA40(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (!v1) {
    return 0LL;
  }
  if (v1 <= 0x7CF) {
    return v1 > 0x15;
  }
  return v1 < 0xFA0 && v1 != 2000;
}

BOOL sub_10029DA7C(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 1180) & 8) == 0) {
    return 0LL;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (!v1) {
    return 0LL;
  }
  if (v1 <= 0x7CF) {
    return v1 > 0x12;
  }
  BOOL result = 0LL;
  if (v1 <= 0xF9F && v1 != 2000) {
    return 1LL;
  }
  return result;
}

BOOL sub_10029DAC0(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 1180) & 8) == 0) {
    return 0LL;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (!v1) {
    return 0LL;
  }
  if (v1 <= 0x7CF) {
    return v1 > 0x15;
  }
  BOOL result = 0LL;
  if (v1 <= 0xF9F && v1 != 2000) {
    return 1LL;
  }
  return result;
}

BOOL sub_10029DB04(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 1180) & 8) != 0 && (*(_DWORD *)(a1 + 708) - 21) < 0x7BB;
}

uint64_t sub_10029DB28(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 1183) & 0x10) == 0) {
    return 0LL;
  }
  int v1 = *(_DWORD *)(a1 + 708);
  if (v1 == 21) {
    return 1LL;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16LL))(&v4);
  BOOL v2 = std::string::compare(&v4, "C2") >= 0;
  return v2;
}

BOOL sub_10029DBB4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 19) < 0x7BD;
}

unint64_t sub_10029DBC8(uint64_t a1)
{
  int v2 = sub_100361020();
  else {
    return 0LL;
  }
}

uint64_t sub_10029DC14()
{
  return 0LL;
}

BOOL sub_10029DC1C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 23) < 0x7B9;
}

uint64_t sub_10029DC30()
{
  return 0LL;
}

uint64_t sub_10029DC38()
{
  return 0LL;
}

uint64_t sub_10029DC40()
{
  return _os_feature_enabled_impl("AudioDSP", "EnhancedAirPodsVoiceTVOS");
}

BOOL sub_10029DC54(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 23) < 0x7B9;
}

BOOL sub_10029DC68(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 23) < 0x7B9;
}

BOOL sub_10029DC7C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 23) < 0x7B9;
}

BOOL sub_10029DC90(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 22) < 0x7BA;
}

BOOL sub_10029DCA4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 23) < 0x7B9;
}

BOOL sub_10029DCB8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 2001) < 0x7CF;
}

uint64_t sub_10029DCCC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 70_Block_object_dispose(va, 8) = a2;
  return 0LL;
}

uint64_t sub_10029DCD8()
{
  return 0LL;
}

uint64_t sub_10029DCE0()
{
  return 0LL;
}

uint64_t sub_10029DCE8(uint64_t a1)
{
  char v18 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "OverrideSupportLEAdvTxPowerIncrease");
  int v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v2 + 72LL))(v2, buf, __p, &v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0)
  {
    operator delete(*(void **)buf);
    if (v3) {
      goto LABEL_5;
    }
LABEL_12:
    uint64_t v7 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 384LL))(v7))
    {
      unsigned int v8 = *(_DWORD *)(a1 + 708);
      if (v8 - 1 <= 0x7CE)
      {
        if (v8 == 23)
        {
          int v9 = sub_100361020();
          return (v9 & 0xFFFFFFFD) != 0xE9 && (v9 & 0xFFFFFFFE) != 236 && (v9 - 238) > 8;
        }

        if (v8 > 0x17) {
          return 1LL;
        }
      }
    }

    else
    {
      uint64_t v12 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 352LL))(v12))
      {
        int v13 = *(_DWORD *)(a1 + 708);
        if ((v13 - 1) <= 0x7CE)
        {
          if (v13 == 22)
          {
            int v13 = *(_DWORD *)(a1 + 708);
          }
        }
      }

      else
      {
        uint64_t v14 = sub_1002E6BF0();
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 344LL))(v14);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v15 = sub_100361020() - 207;
        if (v15 <= 0xA) {
          return (0x79Fu >> v15) & 1;
        }
      }
    }

    return 0LL;
  }

  if (!v3) {
    goto LABEL_12;
  }
LABEL_5:
  std::string v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (v18) {
      int v5 = "enabled";
    }
    else {
      int v5 = "disabled";
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Warning: Support LE Adv Tx Power Increase - %{public}s",  buf,  0xCu);
  }

  return v18 != 0;
}

void sub_10029DF18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029DF54()
{
  return 0LL;
}

BOOL sub_10029DF6C()
{
  char v10 = 0;
  uint64_t v0 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "OverrideSupportLEConnTxPowerIncrease");
  int v1 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v0 + 72LL))(v0, buf, __p, &v10);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0)
  {
    operator delete(*(void **)buf);
    if (v1) {
      goto LABEL_5;
    }
  }

  else if (v1)
  {
LABEL_5:
    uint64_t v2 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v10) {
        int v3 = "enabled";
      }
      else {
        int v3 = "disabled";
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Warning: Support LE Connection Tx Power Increase - %{public}s",  buf,  0xCu);
    }

    return v10 != 0;
  }

  uint64_t v5 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 384LL))(v5) & 1) == 0)
  {
    uint64_t v6 = sub_1002E6BF0();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 352LL))(v6) & 1) == 0)
    {
      uint64_t v7 = sub_1002E6BF0();
      (*(void (**)(uint64_t))(*(void *)v7 + 344LL))(v7);
    }
  }

  return 0LL;
}

void sub_10029E0E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029E120(uint64_t a1)
{
  else {
    return 32LL;
  }
}

BOOL sub_10029E13C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 2001) < 0x7CF;
}

BOOL sub_10029E150(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 2001) < 0x7CF;
}

BOOL sub_10029E164(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 2001) < 0x7CF;
}

BOOL sub_10029E178(uint64_t a1)
{
  return *(_DWORD *)(a1 + 708) > 0x16u;
}

uint64_t sub_10029E188(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (v1)
  {
    if (v1 > 0x7CF)
    {
      if (v1 - 2002 < 0x7CE) {
        return 1LL;
      }
    }

    else if (v1 - 20 < 6)
    {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_10029E1C0()
{
  return 0LL;
}

uint64_t sub_10029E1C8()
{
  return 0LL;
}

uint64_t sub_10029E1D0()
{
  return 0LL;
}

BOOL sub_10029E1D8(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  if (!v1) {
    return 0LL;
  }
  if (v1 > 0x7CF) {
    return v1 <= 0xF9F && v1 != 2000;
  }
  return v1 > 0x15;
}

uint64_t sub_10029E214(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x58u);
}

uint64_t sub_10029E260(uint64_t a1, char a2, __int16 a3, uint64_t a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10029E2C4;
  void v6[3] = &unk_10088D228;
  void v6[4] = a4;
  __int16 v7 = a3;
  char v8 = a2;
  return sub_1002D04D0(a1, 88LL, a5, v6, 0LL);
}

uint64_t sub_10029E2C4(uint64_t a1)
{
  unint64_t v2 = sub_1001BEE0C(*(void *)(a1 + 32));
  int v12 = v2;
  __int16 v13 = WORD2(v2);
  uint64_t v3 = sub_10012D890((uint64_t)&v12);
  if (v3)
  {
    uint64_t v4 = sub_100194B58(v3, *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
    uint64_t v5 = v4;
    if (*(_BYTE *)(a1 + 42) || (_DWORD)v4 != 408)
    {
LABEL_8:
      if (!(_DWORD)v5) {
        return v5;
      }
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v5 = 101LL;
  }

  uint64_t v6 = sub_10012D954(*(void *)(a1 + 32));
  if (v6)
  {
    uint64_t v5 = sub_100194B58(v6, *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
    goto LABEL_8;
  }

uint64_t sub_10029E450(uint64_t a1, int a2, __int16 a3, uint64_t a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10029E4B4;
  void v6[3] = &unk_10088D248;
  void v6[4] = a4;
  __int16 v8 = a3;
  int v7 = a2;
  return sub_1002D04D0(a1, 88LL, a5, v6, 0LL);
}

uint64_t sub_10029E4B4(uint64_t a1)
{
  unint64_t v2 = sub_1001BEE0C(*(void *)(a1 + 32));
  int v12 = v2;
  __int16 v13 = WORD2(v2);
  uint64_t v3 = sub_10012D890((uint64_t)&v12);
  if (v3)
  {
    uint64_t v4 = sub_100194C74(v3, *(unsigned __int16 *)(a1 + 44), *(unsigned __int8 *)(a1 + 40));
    uint64_t v5 = v4;
    if (*(_DWORD *)(a1 + 40) || (_DWORD)v4 != 408)
    {
LABEL_8:
      if (!(_DWORD)v5) {
        return v5;
      }
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v5 = 101LL;
  }

  uint64_t v6 = sub_10012D954(*(void *)(a1 + 32));
  if (v6)
  {
    uint64_t v5 = sub_100194C74(v6, *(unsigned __int16 *)(a1 + 44), *(unsigned __int8 *)(a1 + 40));
    goto LABEL_8;
  }

uint64_t sub_10029E624(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC2u);
}

uint64_t sub_10029E670(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_10029E6D0;
  v3[3] = &unk_10088D268;
  void v3[4] = a1;
  char v4 = a2;
  return sub_1002D04D0(a1, 194LL, a2, v3, 0LL);
}

uint64_t sub_10029E6D0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD **)(a1 + 32);
  if (v1[177] == 9)
  {
    std::stringbuf::string_type __p = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v2 = sub_1002E6B38();
    int v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 64LL))(v2, &__p);
    char v4 = HIBYTE(v18);
    if (v3) {
      goto LABEL_3;
    }
    if (v18 < 0)
    {
      uint64_t v12 = v17;
      if (!v17)
      {
LABEL_4:
        operator delete(__p);
        goto LABEL_5;
      }

      p_p = (char *)__p;
      goto LABEL_23;
    }

    if (HIBYTE(v18))
    {
      p_p = (char *)&__p;
      uint64_t v12 = HIBYTE(v18);
LABEL_23:
      if (v12 >= 2)
      {
        __int16 v13 = &p_p[v12];
        uint64_t v14 = p_p;
        do
        {
          unsigned int v15 = (char *)memchr(v14, 66, v12 - 1);
          if (!v15) {
            break;
          }
          if (*(_WORD *)v15 == 12354)
          {
            if (v15 != v13 && v15 - p_p != -1) {
              v1[295] &= ~0x100000u;
            }
            break;
          }

          uint64_t v14 = v15 + 1;
          uint64_t v12 = v13 - (_BYTE *)v14;
        }

        while (v13 - (_BYTE *)v14 >= 2);
      }

void sub_10029E904( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029E928(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x102u);
}

uint64_t sub_10029E974(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_10029E9D4;
  v3[3] = &unk_10088D268;
  void v3[4] = a1;
  char v4 = a2;
  return sub_1002D04D0(a1, 258LL, a2, v3, 0LL);
}

uint64_t sub_10029E9D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(v1 + 1184);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "fEnabledFilteringFeatures: %x",  (uint8_t *)v5,  8u);
  }

  return sub_10018DB34();
}

uint64_t sub_10029EAA4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC3u);
}

uint64_t sub_10029EAF0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10029EB54;
  v5[3] = &unk_10088D288;
  void v5[4] = a2;
  void v5[5] = a3;
  char v6 = a4;
  return sub_1002D04D0(a1, 195LL, a4, v5, 0LL);
}

uint64_t sub_10029EB54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (BYTE6(v2))
  {
    if (BYTE6(v2) != 1 || (~v2 & 0xC00000000000LL) != 0)
    {
      char v4 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
      {
        int v6 = 136446210;
        uint64_t v7 = "BTAddressIsPublic(address) || BTAddressIsStatic(address)";
        _os_log_fault_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&v6,  0xCu);
        uint64_t v2 = *(void *)(a1 + 32);
      }
    }
  }

  LOBYTE(v6) = BYTE5(v2);
  BYTE1(v6) = BYTE4(v2);
  BYTE2(v6) = BYTE3(v2);
  HIBYTE(v6) = BYTE2(v2);
  LOBYTE(v7) = BYTE1(v2);
  BYTE1(v7) = v2;
  return sub_10018DCDC((v2 & 0xFF000000000000LL) != 0, (uint64_t)&v6, *(void *)(a1 + 40));
}

uint64_t sub_10029EC84(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xFBu);
}

uint64_t sub_10029ECD0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10029ED30;
  v5[3] = &unk_10088D268;
  void v5[4] = a2;
  char v6 = a4;
  return sub_1002D04D0(a1, 251LL, a4, v5, 0LL);
}

uint64_t sub_10029ED30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (BYTE6(v2))
  {
    if (BYTE6(v2) != 1 || (~v2 & 0xC00000000000LL) != 0)
    {
      char v4 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
      {
        int v6 = 136446210;
        uint64_t v7 = "BTAddressIsPublic(address) || BTAddressIsStatic(address)";
        _os_log_fault_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&v6,  0xCu);
        uint64_t v2 = *(void *)(a1 + 32);
      }
    }
  }

  return sub_10018DC44(0, v2);
}

uint64_t sub_10029EE28(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC4u);
}

uint64_t sub_10029EE74(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10029EED0;
  void v4[3] = &unk_10088D268;
  void v4[4] = a2;
  char v5 = a3;
  return sub_1002D04D0(a1, 196LL, a3, v4, 0LL);
}

uint64_t sub_10029EED0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (BYTE6(v2))
  {
    if (BYTE6(v2) != 1 || (~v2 & 0xC00000000000LL) != 0)
    {
      char v4 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
      {
        int v6 = 136446210;
        uint64_t v7 = "BTAddressIsPublic(address) || BTAddressIsStatic(address)";
        _os_log_fault_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&v6,  0xCu);
        uint64_t v2 = *(void *)(a1 + 32);
      }
    }
  }

  LOBYTE(v6) = BYTE5(v2);
  BYTE1(v6) = BYTE4(v2);
  BYTE2(v6) = BYTE3(v2);
  HIBYTE(v6) = BYTE2(v2);
  LOBYTE(v7) = BYTE1(v2);
  BYTE1(v7) = v2;
  return sub_10018DD70((v2 & 0xFF000000000000LL) != 0, (uint64_t)&v6);
}

uint64_t sub_10029EFF8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC5u);
}

uint64_t sub_10029F044(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_10029F0A0;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 197LL, a2, v3, 0LL);
}

uint64_t sub_10029F0A0()
{
  return sub_10018DE04();
}

uint64_t sub_10029F0B8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC6u);
}

uint64_t sub_10029F104(uint64_t a1, int a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 72);
  if (*(_DWORD *)(sub_1002E6E9C() + 708) && *(_DWORD *)(sub_1002E6E9C() + 708) <= 0x7CFu)
  {
    char v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      char v5 = sub_1002CE354(a1, 198);
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      char v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
    }

    if (sub_1002CF254(a1, 198LL))
    {
      buf[0] = 0;
      sub_100242CA4(buf);
      int v6 = sub_10018DE8C();
      sub_100242CD0(buf);
      if (!v6)
      {
        if (!a2) {
          goto LABEL_11;
        }
        if (qword_1008D60B0 != -1) {
          dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
        }
        int v6 = sub_1004336D8((uint64_t)off_1008D60A8, 198LL);
        if (!v6)
        {
LABEL_11:
          int v6 = 0;
          *(_BYTE *)(a1 + 1176) = 1;
        }
      }

      sub_1002D06F4(a1, 0xC6u);
      sub_100242CD8(buf);
      uint64_t v7 = v6 != 0;
    }

    else
    {
      uint64_t v7 = 2LL;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 1180) |= 0x100000u;
    else {
      *(_BYTE *)(a1 + 1176) = 1;
    }
    *(_DWORD *)(a1 + 1184) |= 1u;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 344LL))(a1, 1LL);
    uint64_t v7 = 0LL;
  }

  sub_100242FAC((uint64_t)v9);
  return v7;
}

void sub_10029F30C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10029F340(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC6u);
}

uint64_t sub_10029F38C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC7u);
}

uint64_t sub_10029F3D8(uint64_t a1, int a2)
{
  if (!*(_BYTE *)(a1 + 1176)) {
    return 0LL;
  }
  if (*(_DWORD *)(sub_1002E6E9C() + 708) && *(_DWORD *)(sub_1002E6E9C() + 708) <= 0x7CFu)
  {
    sub_1002D04D0(a1, 198LL, a2, &stru_10088D2E8, 0LL);
    *(_BYTE *)(a1 + 1176) = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_10029F658;
    v8[3] = &unk_10088D268;
    void v8[4] = a1;
    char v9 = a2;
    return sub_1002D04D0(a1, 199LL, a2, v8, 0LL);
  }

  else
  {
    *(int8x8_t *)(a1 + 11sub_100242FAC(v40 - 80) = vand_s8(*(int8x8_t *)(a1 + 1180), (int8x8_t)0xFFFFFFFEFFEFFFFFLL);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 336LL))(a1, 1LL))
    {
      BOOL v4 = 0LL;
      *(_DWORD *)(a1 + 1180) |= 0x100000u;
    }

    else
    {
      *(_BYTE *)(a1 + 1176) = 0;
      char v5 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 136446210;
        char v11 = sub_1002CE354(a1, 199);
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
      }

      if (!sub_1002CF254(a1, 199LL)) {
        return 2LL;
      }
      buf[0] = 0;
      sub_100242CA4(buf);
      int v6 = sub_10018DF14();
      sub_100242CD0(buf);
      if (!v6)
      {
        if (a2)
        {
          if (qword_1008D60B0 != -1) {
            dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
          }
          sub_1004336D8((uint64_t)off_1008D60A8, 199LL);
        }

        *(_BYTE *)(a1 + 1176) = 1;
      }

      sub_1002D06F4(a1, 0xC7u);
      sub_100242CD8(buf);
      BOOL v4 = v6 != 0;
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 344LL))(a1, 1LL);
  }

  return v4;
}

void sub_10029F630( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

int sub_10029F64C(id a1)
{
  return sub_10018DF14();
}

uint64_t sub_10029F658(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 2440LL))(v1))
  {
    char v4 = 0;
    return sub_10018E14C((uint64_t)&v4, 0LL);
  }

  else if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 2432LL))(v1))
  {
    char v3 = 0;
    return sub_10018E0B8((uint64_t)&v3);
  }

  else
  {
    return sub_10018DF9C();
  }

uint64_t sub_10029F744(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC7u);
}

uint64_t sub_10029F790( uint64_t a1, __int128 *a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10029F844;
  v10[3] = &unk_10088D308;
  __int128 v11 = *a2;
  int v12 = *((_DWORD *)a2 + 4);
  char v13 = a3;
  char v14 = a4;
  char v15 = a5;
  char v16 = a6;
  void v10[4] = a1;
  void v10[5] = a7;
  v10[6] = a8;
  unsigned __int8 v17 = a9;
  return sub_1002D04D0(a1, 199LL, a9, v10, 0LL);
}

uint64_t sub_10029F844(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  if (!v1[1176]) {
    return 114LL;
  }
  v5[0] = 0LL;
  v5[1] = 0LL;
  uint64_t v3 = sub_10063443C((unsigned __int8 *)(a1 + 56), v5);
  if ((*(_BYTE *)(a1 + 79) || *(void *)(a1 + 40) || *(void *)(a1 + 48))
    && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_100667C00();
  }

  return sub_10018E0B8((uint64_t)v5);
}

uint64_t sub_10029F9C8(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  __int128 v8 = *a2;
  int v9 = *((_DWORD *)a2 + 4);
  return (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, void, void, void, char))(*(void *)a1 + 416LL))( a1,  &v8,  a3,  a4,  a5,  0LL,  0LL,  0LL,  a6);
}

uint64_t sub_10029FA3C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC7u);
}

uint64_t sub_10029FA88(uint64_t a1, __int128 *a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10029FB20;
  void v4[3] = &unk_10088D328;
  void v4[4] = a1;
  __int128 v5 = *a2;
  int v6 = *((_DWORD *)a2 + 4);
  char v7 = a3;
  return sub_1002D04D0(a1, 199LL, a3, v4, 0LL);
}

uint64_t sub_10029FB20(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  if (!v1[1176]) {
    return 114LL;
  }
  v4[0] = 0LL;
  v4[1] = 0LL;
  uint64_t v2 = sub_10063443C((unsigned __int8 *)(a1 + 40), v4);
  return sub_10018E024((uint64_t)v4);
}

uint64_t sub_10029FC5C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x98u);
}

uint64_t sub_10029FCA8(uint64_t a1, uint64_t a2, char a3, char a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10029FD10;
  void v6[3] = &unk_10088D228;
  void v6[4] = a2;
  char v7 = a3;
  char v8 = a4;
  char v9 = a5;
  return sub_1002D04D0(a1, 152LL, a5, v6, 0LL);
}

uint64_t sub_10029FD10(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 42)) {
    uint64_t v1 = sub_10029FC5C;
  }
  else {
    uint64_t v1 = 0LL;
  }
  return sub_10018C40C(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), (uint64_t)v1);
}

uint64_t sub_10029FD38(int a1, int a2)
{
  char v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "leaBuffersize %d", (uint8_t *)v6, 8u);
  }

  LOBYTE(dword_1008EFA24) = a2;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x9Au);
}

uint64_t sub_10029FE20(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_10029FE8C;
  v3[3] = &unk_10087EB20;
  void v3[4] = a2;
  return sub_1002D04D0(a1, 154LL, 1, &stru_10088D348, v3);
}

int sub_10029FE80(id a1)
{
  return sub_10018C2FC();
}

uint64_t sub_10029FE8C(uint64_t result)
{
  **(void **)(result + sub_100242E28(v1 + 32) = dword_1008EFA24;
  return result;
}

uint64_t sub_10029FEA0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x9Bu);
}

uint64_t sub_10029FEEC(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10029FF48;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 155LL, a3, v4, 0LL);
}

uint64_t sub_10029FF48()
{
  return sub_10018C384();
}

uint64_t sub_10029FF68(int a1, char a2)
{
  LOBYTE(dword_1008EFA24) = a2;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xCCu);
}

uint64_t sub_10029FFBC(uint64_t a1, _BYTE *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2392LL))(a1) & 1) != 0)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    void v5[2] = sub_1002A0058;
    v5[3] = &unk_10087EB20;
    void v5[4] = a2;
    return sub_1002D04D0(a1, 204LL, 1, &stru_10088D388, v5);
  }

  else
  {
    uint64_t result = 0LL;
    *a2 = 0;
  }

  return result;
}

int sub_1002A004C(id a1)
{
  return sub_10018E270();
}

uint64_t sub_1002A0058(uint64_t result)
{
  **(_BYTE **)(result + sub_100242E28(v1 + 32) = dword_1008EFA24;
  return result;
}

uint64_t sub_1002A006C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xCDu);
}

uint64_t sub_1002A00B8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 72);
  char v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    char v7 = sub_1002CE354(a1, 205);
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    char v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }

  if (sub_1002CF254(a1, 205LL))
  {
    uint64_t v8 = sub_1002A02B0(a1);
    if (!(_DWORD)v8)
    {
      buf[0] = 0;
      sub_100242CA4(buf);
      int v9 = sub_10018E2F8(a2, a3);
      sub_100242CD0(buf);
      if (!v9)
      {
        if (qword_1008D60B0 != -1) {
          dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
        }
        int v9 = sub_1004336D8((uint64_t)off_1008D60A8, 205LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 624LL))(a1, 1LL);
      }

      uint64_t v8 = v9 != 0;
      sub_100242CD8(buf);
    }

    sub_1002D06F4(a1, 0xCDu);
  }

  else
  {
    uint64_t v8 = 2LL;
  }

  sub_100242FAC((uint64_t)v11);
  return v8;
}

void sub_1002A027C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002A02B0(uint64_t a1)
{
  void v3[4] = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002A0618;
  void v4[3] = &unk_10088D3C8;
  void v4[4] = a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A062C;
  v3[3] = &unk_10087EB20;
  return sub_1002D04D0(a1, 203LL, 1, v4, v3);
}

uint64_t sub_1002A0350(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xCFu);
}

uint64_t sub_1002A039C(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002A043C;
  v9[3] = &unk_10088D228;
  v9[4] = a2;
  __int16 v10 = a3;
  char v11 = a4;
  return sub_1002D04D0(a1, 207LL, a4, v9, 0LL);
}

uint64_t sub_1002A043C(uint64_t a1)
{
  return sub_10018E390(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_1002A0460(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD0u);
}

uint64_t sub_1002A04AC(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A0540;
  v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  return sub_1002D04D0(a1, 208LL, 1, &stru_10088D3A8, v3);
}

int sub_1002A0534(id a1)
{
  return sub_10018E428();
}

uint64_t sub_1002A0540(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 1180LL) &= ~0x10000u;
  return result;
}

uint64_t sub_1002A0554(_DWORD *a1, int a2)
{
  int v4 = a1[295];
  if (!a2)
  {
    if ((v4 & 0x10000) != 0)
    {
      unsigned int v5 = v4 & 0xFFFEFFFF;
      goto LABEL_9;
    }

    return 0LL;
  }

  if ((v4 & 0x10000) != 0) {
    return 0LL;
  }
  unsigned int v5 = v4 | 0x10000;
LABEL_9:
  a1[295] = v5;
  return (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 336LL))(a1, 1LL);
}

uint64_t sub_1002A05CC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xCBu);
}

uint64_t sub_1002A0618()
{
  return sub_10018CC20();
}

uint64_t sub_1002A062C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 1192LL) = 1;
  return result;
}

uint64_t sub_1002A063C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD1u);
}

uint64_t sub_1002A0688( uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, char a6, char a7, char a8, uint64_t a9)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1002A0720;
  v11[3] = &unk_10088D3E8;
  __int16 v12 = a3;
  uint8_t v11[4] = a2;
  void v11[5] = a4;
  __int16 v13 = a5;
  char v14 = a6;
  char v15 = a7;
  char v16 = a8;
  v11[6] = a9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002A076C;
  v10[3] = &unk_10087EB20;
  void v10[4] = a1;
  return sub_1002D04D0(a1, 209LL, 1, v11, v10);
}

uint64_t sub_1002A0720(uint64_t a1)
{
  return sub_10018ED50( *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 56),  *(void *)(a1 + 40),  *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_1002A076C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 752LL))(*(void *)(a1 + 32), 1LL);
}

uint64_t sub_1002A0780(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD2u);
}

uint64_t sub_1002A07CC( uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, char a6, char a7, uint64_t a8)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002A0840;
  v9[3] = &unk_10088D408;
  __int16 v10 = a3;
  v9[4] = a2;
  void v9[5] = a4;
  __int16 v11 = a5;
  char v12 = a6;
  char v13 = a7;
  void v9[6] = a8;
  return sub_1002D04D0(a1, 210LL, 1, v9, &stru_10088D428);
}

uint64_t sub_1002A0840(uint64_t a1)
{
  return sub_10018ED50( *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 56),  *(void *)(a1 + 40),  *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_1002A0890( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14)
{
  unsigned int v14 = a5;
  char v41 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 3520LL))(a1))
  {
    if (a3 >= 0x16) {
      uint64_t v17 = 22LL;
    }
    else {
      uint64_t v17 = a3;
    }
    if (v14 >= 0x16) {
      unsigned int v14 = 22;
    }
  }

  else
  {
    unsigned int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3504LL))(a1);
    if (v18 >= a3) {
      uint64_t v17 = a3;
    }
    else {
      uint64_t v17 = v18;
    }
    unsigned int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3504LL))(a1);
    if (v19 < v14) {
      unsigned int v14 = v19;
    }
  }

  uint64_t v20 = sub_1002A0B04(a1, a2, v17, a4, v14, a6, a7, a8, a9, a10, a11, a12, a13, a14, (uint64_t)&v41);
  if (!(_DWORD)v20)
  {
    unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3504LL))(a1);
    uint64_t v20 = 0LL;
    if (a5 < 0x17 || a3 < 0x17 || v21 < 0x17) {
      return v20;
    }
    unsigned int v22 = (unsigned __int16)(a3 - v17);
    size_t v23 = v22 >= 3 ? 3LL : (unsigned __int16)(a3 - v17);
    size_t v24 = v22 <= 2 ? v23 ^ 3 : 0LL;
    bzero((char *)&__dst + v23, v24);
    memcpy(&__dst, (const void *)(a2 + 22), v23);
    unsigned int v25 = (unsigned __int16)(a5 - v14);
    size_t v26 = v25 >= 3 ? 3LL : (unsigned __int16)(a5 - v14);
    size_t v27 = v25 <= 2 ? v26 ^ 3 : 0LL;
    bzero((char *)&v39 + v26, v27);
    memcpy(&v39, (const void *)(a4 + 22), v26);
    if (!v39 && v40 == 0 && !__dst && v38 == 0) {
      return 0LL;
    }
    uint64_t v20 = sub_1002A0D78(a1, v41, (uint64_t)&__dst, 3, (uint64_t)&v39, 3);
    if ((_DWORD)v20 && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100667C64();
    }
  }

  return v20;
}

uint64_t sub_1002A0B04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, uint64_t a15)
{
  uint64_t v21 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v21 + 592LL))(v21) & 1) == 0)
  {
    uint64_t v22 = sub_1002E6BF0();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v22 + 384LL))(v22)
      || !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 3496LL))(a1))
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, BOOL, uint64_t))(*(void *)a1 + 640LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8 == 2,  a9);
    }
  }

  char v23 = a12 | 2;
  if (a13) {
    char v23 = a12;
  }
  if (a14) {
    LOBYTE(v24) = v23;
  }
  else {
    LOBYTE(v24) = v23 | 4;
  }
  if ((_DWORD)a7 == 19 && *(_BYTE *)(a1 + 1446)) {
    int v24 = *(_DWORD *)(a1 + 1448);
  }
  uint64_t v25 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 3520LL))(v25))
  {
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_1002A0EF4;
    v42[3] = &unk_10088D448;
    __int16 v43 = a3;
    v42[4] = a2;
    void v42[5] = a4;
    __int16 v44 = a5;
    char v45 = a6;
    char v46 = a7;
    char v47 = a8;
    v42[6] = a9;
    char v48 = a10;
    char v49 = a11;
    char v50 = v24;
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_1002A0F54;
    v41[3] = &unk_10087F8E0;
    v41[4] = a1;
    v41[5] = a15;
    size_t v26 = v42;
    size_t v27 = v41;
  }

  else
  {
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    void v32[2] = sub_1002A0F94;
    v32[3] = &unk_10088D448;
    __int16 v33 = a3;
    v32[4] = a2;
    v32[5] = a4;
    __int16 v34 = a5;
    char v35 = a6;
    char v36 = a7;
    char v37 = a8;
    v32[6] = a9;
    char v38 = a10;
    char v39 = a11;
    char v40 = v24;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1002A0FF4;
    v31[3] = &unk_10087EB20;
    v31[4] = a1;
    size_t v26 = v32;
    size_t v27 = v31;
  }

  return sub_1002D04D0(a1, 217LL, 1, v26, v27);
}

uint64_t sub_1002A0D78(uint64_t a1, char a2, uint64_t a3, __int16 a4, uint64_t a5, __int16 a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3520LL))(a1);
  if ((_DWORD)result)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _DWORD v13[2] = sub_1002A16F0;
    v13[3] = &unk_10088D4E8;
    char v16 = a2;
    __int16 v14 = a4;
    void v13[4] = a3;
    void v13[5] = a5;
    __int16 v15 = a6;
    return sub_1002D04D0(a1, 225LL, 1, v13, 0LL);
  }

  return result;
}

uint64_t sub_1002A0E24()
{
  return 0LL;
}

uint64_t sub_1002A0E2C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD9u);
}

uint64_t sub_1002A0E78(int a1, char a2, char a3, char a4)
{
  LOBYTE(xmmword_1008EFA30) = a2;
  BYTE1(xmmword_1008EFA30) = a3;
  uint64_t v6 = sub_1002E6E9C();
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD9u);
}

uint64_t sub_1002A0EF4(uint64_t a1)
{
  return sub_10018E7E8( *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 56),  *(void *)(a1 + 40),  *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_1002A0F54(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 752LL))(*(void *)(a1 + 32), 1LL);
  **(_BYTE **)(a1 + 40) = BYTE2(xmmword_1008EFA30);
  return result;
}

uint64_t sub_1002A0F94(uint64_t a1)
{
  return sub_10018E71C( *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 56),  *(void *)(a1 + 40),  *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_1002A0FF4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 752LL))(*(void *)(a1 + 32), 1LL);
}

uint64_t sub_1002A1008(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xDCu);
}

uint64_t sub_1002A1054(uint64_t a1, char a2, char a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002A10D8;
  void v6[3] = &unk_10088D468;
  char v7 = a2;
  char v8 = a3;
  void v6[4] = a4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A10F4;
  v5[3] = &unk_10087EB20;
  void v5[4] = a1;
  return sub_1002D04D0(a1, 220LL, 1, v6, v5);
}

uint64_t sub_1002A10D8(uint64_t a1)
{
  return sub_10018E8B4(*(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(void *)(a1 + 32));
}

uint64_t sub_1002A10F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 752LL))(*(void *)(a1 + 32), 1LL);
}

uint64_t sub_1002A1108(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xB3u);
}

uint64_t sub_1002A1154(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  uint64_t v16 = sub_1002E6BF0();
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  _OWORD v18[2] = sub_1002A1228;
  v18[3] = &unk_10088D488;
  char v19 = a2;
  char v20 = a3;
  char v21 = a4;
  char v22 = a5;
  char v23 = a6;
  char v24 = a7;
  char v25 = a8;
  return sub_1002D04D0(a1, 179LL, 1, v18, 0LL);
}

uint64_t sub_1002A1228(unsigned __int8 *a1)
{
  return sub_10018E4B0(a1[32], a1[33], a1[34], a1[35], a1[36]);
}

uint64_t sub_1002A1254(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xB4u);
}

uint64_t sub_1002A12A0( uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10, char a11)
{
  uint64_t v19 = sub_1002E6BF0();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  __int128 v21[2] = sub_1002A1384;
  v21[3] = &unk_10088D4A8;
  char v22 = a2;
  char v23 = a3;
  char v24 = a4;
  uint8_t v21[4] = a5;
  v21[5] = a6;
  char v25 = a8;
  char v26 = a9;
  v21[6] = a7;
  v21[7] = a10;
  char v27 = a11;
  return sub_1002D04D0(a1, 180LL, 1, v21, 0LL);
}

uint64_t sub_1002A1384(uint64_t a1)
{
  return sub_10018E65C( *(unsigned __int8 *)(a1 + 64),  *(unsigned __int8 *)(a1 + 65),  *(unsigned __int8 *)(a1 + 66),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 67),  *(unsigned __int8 *)(a1 + 68));
}

uint64_t sub_1002A13D8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xDAu);
}

uint64_t sub_1002A1424( uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, char a6, char a7, char a8, uint64_t a9, char a10, char a11, char a12)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_1002A14B4;
  v13[3] = &unk_10088D448;
  __int16 v14 = a3;
  void v13[4] = a2;
  void v13[5] = a4;
  __int16 v15 = a5;
  char v16 = a6;
  char v17 = a7;
  char v18 = a8;
  void v13[6] = a9;
  char v19 = a10;
  char v20 = a11;
  char v21 = a12;
  return sub_1002D04D0(a1, 218LL, 1, v13, 0LL);
}

uint64_t sub_1002A14B4(uint64_t a1)
{
  return sub_10018E71C( *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 56),  *(void *)(a1 + 40),  *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_1002A1514(int a1, int a2, int a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    __int16 v9 = 1024;
    int v10 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Advanced match filter : Total %d  remainaing: %d",  (uint8_t *)v8,  0xEu);
  }

  LOBYTE(xmmword_1008EFA30) = a2;
  BYTE1(xmmword_1008EFA30) = a3;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xE0u);
}

uint64_t sub_1002A1614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002A1680;
  void v4[3] = &unk_10087F8E0;
  void v4[4] = a2;
  void v4[5] = a3;
  return sub_1002D04D0(a1, 224LL, 1, &stru_10088D4C8, v4);
}

int sub_1002A1674(id a1)
{
  return sub_10018E9F8();
}

uint64_t sub_1002A1680(uint64_t result)
{
  **(_BYTE **)(result + sub_100242E28(v1 + 32) = xmmword_1008EFA30;
  **(_BYTE **)(result + 40) = BYTE1(xmmword_1008EFA30);
  return result;
}

uint64_t sub_1002A16A4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xE1u);
}

uint64_t sub_1002A16F0(uint64_t a1)
{
  return sub_10018EA80( *(unsigned __int8 *)(a1 + 52),  *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 48),  *(void *)(a1 + 40),  *(unsigned __int16 *)(a1 + 50));
}

uint64_t sub_1002A1710( int a1, unsigned int a2, unsigned int a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10, int a11, int a12, int a13, unsigned int a14, unsigned int a15, unsigned int a16, unsigned int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, int a32, int a33, int a34, int a35, int a36, int a37, int a38, int a39, int a40, int a41, int a42, int a43, int a44, int a45, int a46, int a47, int a48, int a49, int a50,int a51,int a52,int a53,int a54,int a55,int a56,int a57,int a58)
{
  unint64_t v62 = __PAIR64__(a7, a6);
  unint64_t v64 = __PAIR64__(a3, a2);
  int v58 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109632;
    int v67 = v64;
    __int16 v68 = 1024;
    int v69 = HIDWORD(v64);
    __int16 v70 = 1024;
    int v71 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_INFO,  "getLPCoreStatisticsCB : TotalTime %d:%d:%d ",  buf,  0x14u);
  }

  *(void *)&xmmword_1008EFA30 = v64;
  DWORD2(xmmword_1008EFA30) = a4;
  HIDWORD(xmmword_1008EFA30) = a5;
  *(void *)&xmmword_1008EFA40 = v62;
  DWORD2(xmmword_1008EFA40) = a8;
  HIDWORD(xmmword_1008EFA40) = a9;
  dword_1008EFA50 = a10;
  dword_1008EFA54 = a11;
  dword_1008EFA58 = a12;
  dword_1008EFA5C = a13;
  *(void *)&xmmword_1008EFA60 = __PAIR64__(a15, a14);
  *((void *)&xmmword_1008EFA60 + 1) = __PAIR64__(a17, a16);
  dword_1008EFA70 = a18;
  dword_1008EFA74 = a19;
  dword_1008EFA78 = a20;
  dword_1008EFA7C = a21;
  dword_1008EFA80 = a22;
  dword_1008EFA84 = a23;
  dword_1008EFA88 = a24;
  dword_1008EFA8C = a25;
  dword_1008EFA90 = a26;
  dword_1008EFA94 = a27;
  dword_1008EFA98 = a28;
  dword_1008EFA9C = a29;
  dword_1008EFAA0 = a30;
  dword_1008EFAA4 = a31;
  dword_1008EFAA8 = a32;
  dword_1008EFAAC = a33;
  dword_1008EFAB0 = a34;
  dword_1008EFAB4 = a35;
  dword_1008EFAB8 = a36;
  dword_1008EFABC = a37;
  dword_1008EFAC0 = a38;
  dword_1008EFAC4 = a39;
  dword_1008EFAC8 = a40;
  dword_1008EFACC = a41;
  dword_1008EFAD0 = a42;
  dword_1008EFAD4 = a43;
  dword_1008EFAD8 = a44;
  dword_1008EFADC = a45;
  dword_1008EFAE0 = a46;
  dword_1008EFAE4 = a47;
  dword_1008EFAE8 = a48;
  dword_1008EFAEC = a49;
  dword_1008EFAF0 = a50;
  dword_1008EFAF4 = a51;
  dword_1008EFAF8 = a52;
  dword_1008EFAFC = a53;
  dword_1008EFB00 = a54;
  dword_1008EFB04 = a55;
  dword_1008EFB08 = a56;
  dword_1008EFB0C = a57;
  dword_1008EFB10 = a58;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xE2u);
}

uint64_t sub_1002A1ABC()
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v5 = 0u;
  __int128 v6 = 0u;
  __int128 v3 = 0u;
  __int128 v4 = 0u;
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10088DB08);
  }
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  sub_1005F0454((uint64_t)off_1008D6600, (uint64_t)&v9);
  sub_1001C55C0(0x5Fu, 0, &v3);
  v2[6] = v9;
  v2[7] = v10;
  v2[0] = v3;
  v2[1] = v4;
  _DWORD v2[2] = v5;
  v2[3] = v6;
  void v2[4] = v7;
  v2[5] = v8;
  uint64_t result = sub_1002E8D94();
  if (result)
  {
    uint64_t v1 = sub_1002E8D94();
    return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v1 + 208LL))(v1, v2);
  }

  return result;
}

uint64_t sub_1002A1B78( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20, __int128 a21, __int128 a22, __int128 a23, __int128 a24, __int128 a25, __int128 a26, __int128 a27, __int128 a28, __int128 a29, __int128 a30, __int128 a31, __int128 a32, __int128 a33, uint64_t a34)
{
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472LL;
  v62[2] = sub_1002A1C7C;
  v62[3] = &unk_10088D508;
  int v63 = a2;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  void v35[2] = sub_1002A1C90;
  v35[3] = &unk_10088D528;
  _OWORD v35[4] = a3;
  v35[5] = a4;
  v35[6] = a5;
  char v35[7] = a6;
  v35[8] = a7;
  v35[9] = a8;
  __int128 v36 = a9;
  __int128 v37 = a10;
  __int128 v38 = a11;
  __int128 v39 = a12;
  __int128 v40 = a13;
  __int128 v41 = a14;
  __int128 v42 = a15;
  __int128 v43 = a16;
  __int128 v44 = a17;
  __int128 v45 = a18;
  __int128 v46 = a19;
  __int128 v47 = a20;
  __int128 v48 = a21;
  __int128 v49 = a22;
  __int128 v50 = a23;
  __int128 v51 = a24;
  __int128 v52 = a25;
  __int128 v53 = a26;
  __int128 v54 = a27;
  __int128 v55 = a28;
  __int128 v56 = a29;
  __int128 v57 = a30;
  __int128 v58 = a31;
  __int128 v59 = a32;
  __int128 v60 = a33;
  uint64_t v61 = a34;
  return sub_1002D04D0(a1, 226LL, 1, v62, v35);
}

uint64_t sub_1002A1C7C()
{
  return sub_10018EB2C();
}

uint64_t sub_1002A1C90(uint64_t result)
{
  uint64_t v1 = *(_DWORD **)(result + 40);
  **(_DWORD **)(result + sub_100242E28(v1 + 32) = xmmword_1008EFA30;
  _DWORD *v1 = DWORD1(xmmword_1008EFA30);
  uint64_t v2 = *(_DWORD **)(result + 56);
  **(_DWORD **)(result + 4_Block_object_dispose(va, 8) = DWORD2(xmmword_1008EFA30);
  *uint64_t v2 = HIDWORD(xmmword_1008EFA30);
  __int128 v3 = *(_DWORD **)(result + 72);
  **(_DWORD **)(result + sub_100242FAC(v1 - 64) = xmmword_1008EFA40;
  _DWORD *v3 = DWORD1(xmmword_1008EFA40);
  __int128 v4 = *(_DWORD **)(result + 88);
  **(_DWORD **)(result + sub_100242FAC(v40 - 80) = DWORD2(xmmword_1008EFA40);
  _DWORD *v4 = HIDWORD(xmmword_1008EFA40);
  __int128 v5 = *(_DWORD **)(result + 104);
  **(_DWORD **)(result + sub_100242E28(v1 + 96) = dword_1008EFA50;
  _DWORD *v5 = dword_1008EFA54;
  __int128 v6 = *(_DWORD **)(result + 120);
  **(_DWORD **)(result + 112) = dword_1008EFA58;
  _DWORD *v6 = dword_1008EFA5C;
  __int128 v7 = *(_DWORD **)(result + 136);
  **(_DWORD **)(result + 12_Block_object_dispose(va, 8) = xmmword_1008EFA60;
  _DWORD *v7 = DWORD1(xmmword_1008EFA60);
  __int128 v8 = *(_DWORD **)(result + 152);
  **(_DWORD **)(result + 144) = DWORD2(xmmword_1008EFA60);
  _DWORD *v8 = HIDWORD(xmmword_1008EFA60);
  __int128 v9 = *(_DWORD **)(result + 168);
  **(_DWORD **)(result + sub_100242E28(v1 + 160) = dword_1008EFA70;
  _DWORD *v9 = dword_1008EFA74;
  __int128 v10 = *(_DWORD **)(result + 184);
  **(_DWORD **)(result + 176) = dword_1008EFA78;
  _DWORD *v10 = dword_1008EFA7C;
  __int16 v11 = *(_DWORD **)(result + 200);
  **(_DWORD **)(result + 192) = dword_1008EFA80;
  _DWORD *v11 = dword_1008EFA84;
  char v12 = *(_DWORD **)(result + 216);
  **(_DWORD **)(result + 20_Block_object_dispose(va, 8) = dword_1008EFA88;
  _DWORD *v12 = dword_1008EFA8C;
  char v13 = *(_DWORD **)(result + 232);
  **(_DWORD **)(result + sub_1002949E4(v1 + 224) = dword_1008EFA90;
  *char v13 = dword_1008EFA94;
  __int16 v14 = *(_DWORD **)(result + 248);
  **(_DWORD **)(result + 240) = dword_1008EFA98;
  _DWORD *v14 = dword_1008EFA9C;
  __int16 v15 = *(_DWORD **)(result + 264);
  **(_DWORD **)(result + 256) = dword_1008EFAA0;
  *__int16 v15 = dword_1008EFAA4;
  char v16 = *(_DWORD **)(result + 280);
  **(_DWORD **)(result + 272) = dword_1008EFAA8;
  _DWORD *v16 = dword_1008EFAAC;
  char v17 = *(_DWORD **)(result + 296);
  **(_DWORD **)(result + 28_Block_object_dispose(va, 8) = dword_1008EFAB0;
  *char v17 = dword_1008EFAB4;
  char v18 = *(_DWORD **)(result + 312);
  **(_DWORD **)(result + 304) = dword_1008EFAB8;
  *char v18 = dword_1008EFABC;
  char v19 = *(_DWORD **)(result + 328);
  **(_DWORD **)(result + 320) = dword_1008EFAC0;
  *char v19 = dword_1008EFAC4;
  char v20 = *(_DWORD **)(result + 344);
  **(_DWORD **)(result + 336) = dword_1008EFAC8;
  *char v20 = dword_1008EFACC;
  char v21 = *(_DWORD **)(result + 360);
  **(_DWORD **)(result + 352) = dword_1008EFAD0;
  *char v21 = dword_1008EFAD4;
  char v22 = *(_DWORD **)(result + 376);
  **(_DWORD **)(result + 36_Block_object_dispose(va, 8) = dword_1008EFAD8;
  _DWORD *v22 = dword_1008EFADC;
  char v23 = *(_DWORD **)(result + 392);
  **(_DWORD **)(result + 384) = dword_1008EFAE0;
  *char v23 = dword_1008EFAE4;
  char v24 = *(_DWORD **)(result + 408);
  **(_DWORD **)(result + 400) = dword_1008EFAE8;
  _DWORD *v24 = dword_1008EFAEC;
  char v25 = *(_DWORD **)(result + 424);
  **(_DWORD **)(result + 416) = dword_1008EFAF0;
  _DWORD *v25 = dword_1008EFAF4;
  char v26 = *(_DWORD **)(result + 440);
  **(_DWORD **)(result + 4sub_100242E28(v1 + 32) = dword_1008EFAF8;
  *char v26 = dword_1008EFAFC;
  char v27 = *(_DWORD **)(result + 456);
  **(_DWORD **)(result + 44_Block_object_dispose(va, 8) = dword_1008EFB00;
  _DWORD *v27 = dword_1008EFB04;
  int v28 = *(_DWORD **)(result + 472);
  **(_DWORD **)(result + 4sub_100242FAC(v1 - 64) = dword_1008EFB08;
  *int v28 = dword_1008EFB0C;
  **(_DWORD **)(result + 4sub_100242FAC(v40 - 80) = dword_1008EFB10;
  return result;
}

uint64_t sub_1002A1ED8(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "BD_VSC_LE_META_GET_SCAN_STATS completed status %d.",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xE3u);
}

uint64_t sub_1002A1FAC(uint64_t a1, char a2)
{
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2232LL))(a1);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002A202C;
  void v6[3] = &unk_10088D368;
  char v7 = a2;
  char v8 = v4;
  return sub_1002D04D0(a1, 227LL, 1, v6, 0LL);
}

uint64_t sub_1002A202C()
{
  return sub_10018EBB4();
}

uint64_t sub_1002A2044(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xDBu);
}

uint64_t sub_1002A2090(uint64_t a1, char a2)
{
  void v3[4] = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002A2108;
  void v4[3] = &unk_10088D2A8;
  char v5 = a2;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A2118;
  v3[3] = &unk_10087EB20;
  return sub_1002D04D0(a1, 219LL, 1, v4, v3);
}

uint64_t sub_1002A2108()
{
  return sub_10018E970();
}

uint64_t sub_1002A2118(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 752LL))(*(void *)(a1 + 32), 1LL);
}

uint64_t sub_1002A212C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xDEu);
}

uint64_t sub_1002A2178(uint64_t a1, char a2, uint64_t a3, char a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002A21FC;
  void v6[3] = &unk_10088D548;
  void v6[4] = a1;
  void v6[5] = a3;
  char v7 = a2;
  char v8 = a4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A22EC;
  v5[3] = &unk_10087EB20;
  void v5[4] = a1;
  return sub_1002D04D0(a1, 222LL, 1, v6, v5);
}

uint64_t sub_1002A21FC(uint64_t a1)
{
  return sub_10018ECC8();
}

uint64_t sub_1002A22EC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 752LL))(*(void *)(a1 + 32), 1LL);
}

uint64_t sub_1002A2300(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xDFu);
}

uint64_t sub_1002A234C(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002A23D4;
  v7[3] = &unk_10088D228;
  v7[4] = a2;
  char v8 = a3;
  char v9 = a5;
  char v10 = a4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002A23F4;
  void v6[3] = &unk_10087EB20;
  void v6[4] = a1;
  return sub_1002D04D0(a1, 223LL, 1, v7, v6);
}

uint64_t sub_1002A23D4()
{
  return sub_10018ECC8();
}

uint64_t sub_1002A23F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 752LL))(*(void *)(a1 + 32), 1LL);
}

uint64_t sub_1002A2408(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xABu);
}

uint64_t sub_1002A2454(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A24B0;
  v3[3] = &unk_10088D508;
  int v4 = a2;
  return sub_1002D04D0(a1, 171LL, 1, v3, 0LL);
}

uint64_t sub_1002A24B0()
{
  return sub_10018CCA8();
}

uint64_t sub_1002A24C0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xCEu);
}

uint64_t sub_1002A250C(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  _DWORD v2[2] = sub_1002A2578;
  v2[3] = &unk_10087EB20;
  void v2[4] = a1;
  return sub_1002D04D0(a1, 206LL, 1, &stru_10088D568, v2);
}

int sub_1002A256C(id a1)
{
  return sub_10018EDFC();
}

uint64_t sub_1002A2578(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 1180LL) &= ~0x40000u;
  return result;
}

uint64_t sub_1002A258C(_DWORD *a1, int a2)
{
  int v2 = a1[295];
  if (!a2)
  {
    if ((v2 & 0x40000) != 0)
    {
      unsigned int v3 = v2 & 0xFFFBFFFF;
      goto LABEL_7;
    }

    return 0LL;
  }

  if ((v2 & 0x40000) != 0) {
    return 0LL;
  }
  unsigned int v3 = v2 | 0x40000;
LABEL_7:
  a1[295] = v3;
  return (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 336LL))(a1, 1LL);
}

uint64_t sub_1002A25C4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD8u);
}

uint64_t sub_1002A2610(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A266C;
  v3[3] = &unk_10088D3C8;
  void v3[4] = a2;
  return sub_1002D04D0(a1, 216LL, 1, v3, 0LL);
}

uint64_t sub_1002A266C()
{
  return sub_10018EE84();
}

uint64_t sub_1002A267C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD8u);
}

uint64_t sub_1002A26C8(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A2724;
  v3[3] = &unk_10088D3C8;
  void v3[4] = a2;
  return sub_1002D04D0(a1, 216LL, 1, v3, 0LL);
}

uint64_t sub_1002A2724()
{
  return sub_10018EF0C();
}

uint64_t sub_1002A2734(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD8u);
}

uint64_t sub_1002A2780(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002A27E0;
  void v4[3] = &unk_10088D268;
  char v5 = a2;
  void v4[4] = a3;
  return sub_1002D04D0(a1, 221LL, 1, v4, 0LL);
}

uint64_t sub_1002A27E0(uint64_t a1)
{
  return sub_10018EF94(*(_BYTE *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_1002A27FC(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002A285C;
  void v4[3] = &unk_10088D268;
  char v5 = a2;
  void v4[4] = a3;
  return sub_1002D04D0(a1, 221LL, 1, v4, 0LL);
}

uint64_t sub_1002A285C(uint64_t a1)
{
  return sub_10018EF94(*(_BYTE *)(a1 + 40), 1u, *(void *)(a1 + 32));
}

uint64_t sub_1002A2878(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD8u);
}

uint64_t sub_1002A28C4(uint64_t a1)
{
  return sub_1002D04D0(a1, 216LL, 1, &stru_10088D588, 0LL);
}

int sub_1002A28DC(id a1)
{
  return sub_10018F03C();
}

uint64_t sub_1002A28E8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD5u);
}

uint64_t sub_1002A2934(_DWORD *a1, int a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, (uint64_t)(a1 + 18));
  if (*(_DWORD *)(sub_1002E6E9C() + 708) && *(_DWORD *)(sub_1002E6E9C() + 708) <= 0x7CFu)
  {
    int v4 = a1[295];
    if (a2)
    {
      if ((v4 & 0x80000) == 0)
      {
        unsigned int v5 = v4 | 0x80000;
LABEL_12:
        a1[295] = v5;
        uint64_t v6 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 336LL))(a1, 1LL);
        goto LABEL_7;
      }
    }

    else if ((v4 & 0x80000) != 0)
    {
      unsigned int v5 = v4 & 0xFFF7FFFF;
      goto LABEL_12;
    }

    uint64_t v7 = 0LL;
    goto LABEL_8;
  }

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002A2A34;
  v9[3] = &unk_10088D2A8;
  char v10 = a2;
  uint64_t v6 = sub_1002D04D0((uint64_t)a1, 213LL, 1, v9, 0LL);
LABEL_7:
  uint64_t v7 = v6;
LABEL_8:
  sub_100242FAC((uint64_t)v11);
  return v7;
}

void sub_1002A2A20(_Unwind_Exception *a1)
{
}

uint64_t sub_1002A2A34()
{
  return sub_10018F0C4();
}

uint64_t sub_1002A2A44(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD3u);
}

uint64_t sub_1002A2A90(uint64_t a1, uint64_t a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A2AF8;
  v5[3] = &unk_10088D468;
  void v5[4] = a2;
  char v6 = a3;
  char v7 = a4;
  return sub_1002D04D0(a1, 211LL, a4, v5, 0LL);
}

uint64_t sub_1002A2AF8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 41)) {
    uint64_t v1 = sub_1002A2A44;
  }
  else {
    uint64_t v1 = 0LL;
  }
  return sub_10018F14C(*(void *)(a1 + 32), *(_BYTE *)(a1 + 40) != 0, 0xBB8u, (uint64_t)v1);
}

uint64_t sub_1002A2B28(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x9Fu);
}

uint64_t sub_1002A2B74(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002A2BD0;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 159LL, a3, v4, 0LL);
}

uint64_t sub_1002A2BD0()
{
  return sub_10018C584();
}

uint64_t sub_1002A2BF0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xA0u);
}

uint64_t sub_1002A2C3C(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002A2C98;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 160LL, a3, v4, 0LL);
}

uint64_t sub_1002A2C98()
{
  return sub_10018C60C();
}

uint64_t sub_1002A2CB8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x15u);
}

uint64_t sub_1002A2D04(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002A2D60;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 21LL, a3, v4, 0LL);
}

uint64_t sub_1002A2D60()
{
  return sub_10018FB00();
}

uint64_t sub_1002A2D88(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xA7u);
}

uint64_t sub_1002A2DD4(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002A2E30;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 167LL, a3, v4, 0LL);
}

uint64_t sub_1002A2E30()
{
  return sub_10018C694();
}

uint64_t sub_1002A2E50(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x19u);
}

uint64_t sub_1002A2E9C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 72);
  char v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    char v7 = sub_1002CE354(a1, 25);
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    char v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }

  if (sub_1002CF254(a1, 25LL))
  {
    buf[0] = 0;
    sub_100242CA4(buf);
    if ((_DWORD)a3) {
      char v8 = sub_1002A2E50;
    }
    else {
      char v8 = 0LL;
    }
    int v9 = sub_10018F618(a2, (uint64_t)v8);
    sub_100242CD0(buf);
    if (v9)
    {
      if (v9 == 101)
      {
        a3 = 3LL;
      }

      else if (v9 == 122)
      {
        a3 = 7LL;
      }

      else
      {
        a3 = 1LL;
      }
    }

    else if ((_DWORD)a3)
    {
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
      }
      a3 = sub_1004336D8((uint64_t)off_1008D60A8, 25LL) != 0;
      goto LABEL_20;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100667CC4();
    }
LABEL_20:
    sub_1002D06F4(a1, 0x19u);
    sub_100242CD8(buf);
    goto LABEL_21;
  }

  a3 = 2LL;
LABEL_21:
  sub_100242FAC((uint64_t)v11);
  return a3;
}

void sub_1002A306C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002A30A0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xA5u);
}

uint64_t sub_1002A30EC(uint64_t a1, uint64_t a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A3154;
  v5[3] = &unk_10088D468;
  void v5[4] = a2;
  char v6 = a3;
  char v7 = a4;
  return sub_1002D04D0(a1, 165LL, a4, v5, 0LL);
}

uint64_t sub_1002A3154(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 41)) {
    uint64_t v1 = sub_1002A30A0;
  }
  else {
    uint64_t v1 = 0LL;
  }
  return sub_10018C71C(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)v1);
}

uint64_t sub_1002A3178(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC8u);
}

uint64_t sub_1002A31C4(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002A3220;
  void v4[3] = &unk_10088D268;
  void v4[4] = a2;
  char v5 = a3;
  return sub_1002D04D0(a1, 200LL, a3, v4, 0LL);
}

uint64_t sub_1002A3220(uint64_t a1)
{
  __int16 v3 = -21335;
  char v4 = -80;
  if (*(_BYTE *)(a1 + 40)) {
    uint64_t v1 = sub_1002A3178;
  }
  else {
    uint64_t v1 = 0LL;
  }
  return sub_10018F238(*(void *)(a1 + 32), (uint64_t)&v3, 3LL, (uint64_t)v1);
}

uint64_t sub_1002A3270(int a1, char a2, char a3)
{
  LOBYTE(xmmword_1008EFA30) = a2;
  BYTE1(xmmword_1008EFA30) = a3;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC9u);
}

uint64_t sub_1002A32CC( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13)
{
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1002A3380;
  v15[3] = &unk_10088D5C8;
  char v16 = a3;
  void v15[4] = a1;
  void v15[5] = a2;
  char v17 = a6;
  char v18 = a7;
  char v19 = a8;
  char v20 = a9;
  char v21 = a10;
  char v22 = a11;
  char v23 = a12;
  char v24 = a13;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_1002A347C;
  v14[3] = &unk_10087F8E0;
  void v14[4] = a4;
  v14[5] = a5;
  return sub_1002D04D0(a1, 201LL, 1, v15, v14);
}

uint64_t sub_1002A3380(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  LOBYTE(a2) = *(_BYTE *)(a1 + 48);
  LODWORD(v2) = vcvtpd_s64_f64((double)*(unint64_t *)&a2 / 1.25);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 2416LL))(v4);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6) {
    return sub_10018F4CC(v7);
  }
  else {
    return sub_10018F304(v7);
  }
}

uint64_t sub_1002A347C(uint64_t result)
{
  **(_BYTE **)(result + sub_100242FAC(v1 - 32) = xmmword_1008EFA30;
  **(_BYTE **)(result + 40) = BYTE1(xmmword_1008EFA30);
  return result;
}

uint64_t sub_1002A34A0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xCAu);
}

uint64_t sub_1002A34EC(uint64_t a1, uint64_t a2, int a3)
{
  v16[0] = 0LL;
  v16[1] = 0LL;
  sub_100242F28((uint64_t)v16, a1 + 72);
  char v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    int v6 = sub_1002CE354(a1, 202);
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    char v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }

  if (!sub_1002CF254(a1, 202LL))
  {
    uint64_t v8 = 2LL;
    goto LABEL_19;
  }

  char v15 = 0;
  sub_100242CA4(&v15);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2424LL))(a1))
  {
    uint64_t v9 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      char v10 = "Error sending SensorIncreaseScanParams, sensor track V3 not supported ";
      __int16 v11 = (os_log_s *)v9;
      uint32_t v12 = 2;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    }

void sub_1002A3740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1002A3774(int a1, char a2, char a3)
{
  LOBYTE(xmmword_1008EFA30) = a2;
  BYTE1(xmmword_1008EFA30) = a3;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC9u);
}

uint64_t sub_1002A37D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002A384C;
  void v6[3] = &unk_10088D5E8;
  void v6[4] = a1;
  void v6[5] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A3924;
  v5[3] = &unk_10087F8E0;
  void v5[4] = a3;
  void v5[5] = a4;
  return sub_1002D04D0(a1, 201LL, 1, v6, v5);
}

uint64_t sub_1002A384C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2416LL))(v2);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4) {
    return sub_10018F4CC(v5);
  }
  else {
    return sub_10018F304(v5);
  }
}

uint64_t sub_1002A3924(uint64_t result)
{
  **(_BYTE **)(result + sub_100242FAC(v1 - 32) = xmmword_1008EFA30;
  **(_BYTE **)(result + 40) = BYTE1(xmmword_1008EFA30);
  return result;
}

uint64_t sub_1002A3948(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xD4u);
}

uint64_t sub_1002A3994( uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8)
{
  if (!a2) {
    return 3LL;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002A3A14;
  v9[3] = &unk_10088D608;
  void v9[4] = a2;
  __int16 v10 = a3;
  __int16 v11 = a4;
  __int16 v12 = a5;
  __int16 v13 = a6;
  __int16 v14 = a7;
  __int16 v15 = a8;
  return sub_1002D04D0(a1, 212LL, 1, v9, 0LL);
}

uint64_t sub_1002A3A14(uint64_t a1)
{
  uint64_t v5 = 0LL;
  uint64_t v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  v4[0] = v1 + 1;
  v4[1] = *(void *)(a1 + 40);
  LODWORD(v5) = *(_DWORD *)(a1 + 48);
  BYTE4(v5) = v2;
  return sub_10018F708(v4);
}

uint64_t sub_1002A3A60(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x1Eu);
}

uint64_t sub_1002A3AAC(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A3B08;
  v3[3] = &unk_10088D3C8;
  void v3[4] = a2;
  return sub_1002D04D0(a1, 30LL, 1, v3, 0LL);
}

uint64_t sub_1002A3B08()
{
  return sub_1001910C0();
}

uint64_t sub_1002A3B18(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x1Fu);
}

uint64_t sub_1002A3B64(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A3BC0;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 31LL, 1, v3, 0LL);
}

uint64_t sub_1002A3BC0()
{
  return sub_100191148();
}

uint64_t sub_1002A3BD4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x20u);
}

uint64_t sub_1002A3C20(uint64_t a1, uint64_t a2, char a3, char a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A3C84;
  v5[3] = &unk_10088D468;
  void v5[4] = a2;
  char v6 = a3;
  char v7 = a4;
  return sub_1002D04D0(a1, 32LL, 1, v5, 0LL);
}

uint64_t sub_1002A3C84(uint64_t a1)
{
  return sub_100190F28( *(unsigned __int16 **)(a1 + 32),  *(unsigned __int8 *)(a1 + 40),  *(unsigned __int8 *)(a1 + 41),  (uint64_t)sub_1002A3BD4);
}

uint64_t sub_1002A3CA0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x28u);
}

uint64_t sub_1002A3CEC(uint64_t a1, uint64_t a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002A3D4C;
  void v4[3] = &unk_10088D268;
  void v4[4] = a2;
  char v5 = a3;
  return sub_1002D04D0(a1, 40LL, 1, v4, 0LL);
}

uint64_t sub_1002A3D4C(uint64_t a1)
{
  return sub_1001913B0(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)sub_1002A3CA0);
}

uint64_t sub_1002A3D64(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xAAu);
}

uint64_t sub_1002A3DB0(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A3E0C;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 170LL, 1, v3, 0LL);
}

uint64_t sub_1002A3E0C()
{
  return sub_10018D14C();
}

uint64_t sub_1002A3E1C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x36u);
}

uint64_t sub_1002A3E68(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088DB28);
  }
  uint64_t v11 = 0LL;
  char v6 = off_1008D5F08;
  sub_100241F90(v12, v5);
  if (sub_100599890((uint64_t)v6, v12, &v11))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_1002A3FA0;
    v9[3] = &unk_10088D268;
    void v9[4] = v11;
    char v10 = a3;
    uint64_t v7 = sub_1002D04D0(a1, 54LL, 1, v9, 0LL);
  }

  else
  {
    uint64_t v7 = 7LL;
  }

  return v7;
}

void sub_1002A3F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002A3FA0(uint64_t a1)
{
  return sub_100191688(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)sub_1002A3E1C);
}

uint64_t sub_1002A3FB8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xB5u);
}

uint64_t sub_1002A4004(uint64_t a1, char a2, __int16 a3, char a4, __int16 a5, char a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002A4070;
  v7[3] = &unk_10088D488;
  char v10 = a2;
  __int16 v8 = a3;
  char v11 = a4;
  __int16 v9 = a5;
  char v12 = a6;
  return sub_1002D04D0(a1, 181LL, 1, v7, 0LL);
}

uint64_t sub_1002A4070()
{
  return sub_10018D25C();
}

uint64_t sub_1002A4094(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xB8u);
}

uint64_t sub_1002A40E0(uint64_t a1, char a2, __int16 a3, char a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A4144;
  v5[3] = &unk_10088D508;
  char v7 = a2;
  __int16 v6 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 184LL, 1, v5, 0LL);
}

uint64_t sub_1002A4144()
{
  return sub_10018D2E4();
}

uint64_t sub_1002A4160(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC0u);
}

uint64_t sub_1002A41AC(uint64_t a1, __int16 a2, char a3, char a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A4214;
  v5[3] = &unk_10088D628;
  void v5[4] = a1;
  __int16 v6 = a2;
  char v7 = a4;
  char v8 = a3;
  return sub_1002D04D0(a1, 192LL, 1, v5, 0LL);
}

uint64_t sub_1002A4214(uint64_t a1)
{
  char v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v3 = sub_1002CE354(*(void *)(a1 + 32), 192);
    int v4 = *(unsigned __int16 *)(a1 + 40);
    int v5 = *(unsigned __int8 *)(a1 + 42);
    int v7 = 136446722;
    char v8 = v3;
    __int16 v9 = 1024;
    int v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending: %{public}s LM Handle 0x%02x  enable %d",  (uint8_t *)&v7,  0x18u);
  }

  return sub_10018D914();
}

uint64_t sub_1002A42F4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xC1u);
}

uint64_t sub_1002A4340(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A439C;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 193LL, 1, v3, 0LL);
}

uint64_t sub_1002A439C()
{
  return sub_10018DA24();
}

uint64_t sub_1002A43B4(int a1, int a2)
{
  dword_1008EFA24 = a2;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xB6u);
}

uint64_t sub_1002A4408(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A4474;
  v3[3] = &unk_10087EB20;
  void v3[4] = a2;
  return sub_1002D04D0(a1, 182LL, 1, &stru_10088D648, v3);
}

int sub_1002A4468(id a1)
{
  return sub_10018D36C();
}

uint64_t sub_1002A4474(uint64_t result)
{
  **(_DWORD **)(result + sub_100242FAC(v1 - 32) = dword_1008EFA24;
  return result;
}

uint64_t sub_1002A4488(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xB7u);
}

uint64_t sub_1002A44D4(uint64_t a1, char a2, __int16 a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002A4534;
  void v4[3] = &unk_10088D668;
  char v6 = a2;
  __int16 v5 = a3;
  return sub_1002D04D0(a1, 183LL, 1, v4, 0LL);
}

uint64_t sub_1002A4534()
{
  return sub_10018D3F4();
}

uint64_t sub_1002A454C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xB9u);
}

uint64_t sub_1002A4598(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002A45F8;
  void v4[3] = &unk_10088D268;
  char v5 = a2;
  void v4[4] = a3;
  return sub_1002D04D0(a1, 185LL, 1, v4, 0LL);
}

uint64_t sub_1002A45F8(uint64_t a1)
{
  return sub_10018D504(*(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32), (uint64_t)sub_1002A454C);
}

uint64_t sub_1002A4610(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xBBu);
}

uint64_t sub_1002A465C(uint64_t a1, int a2, int a3, int a4)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002A46CC;
  v7[3] = &unk_10088D288;
  if (!a2) {
    a3 = 0;
  }
  if (!a2) {
    a4 = 0;
  }
  void v7[4] = a1;
  char v10 = a2;
  int v8 = a3;
  int v9 = a4;
  return sub_1002D04D0(a1, 187LL, 1, v7, 0LL);
}

uint64_t sub_1002A46CC(uint64_t a1)
{
  char v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v3 = sub_1002CE354(*(void *)(a1 + 32), 187);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    int v5 = *(_DWORD *)(a1 + 40);
    int v6 = *(_DWORD *)(a1 + 44);
    int v8 = 136446978;
    int v9 = v3;
    __int16 v10 = 1024;
    int v11 = v4;
    __int16 v12 = 1024;
    int v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending: %{public}s enable %d, duration %d, interval %d",  (uint8_t *)&v8,  0x1Eu);
  }

  return sub_10018D65C();
}

uint64_t sub_1002A47AC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xBCu);
}

uint64_t sub_1002A47F8(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A4854;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 188LL, 1, v3, 0LL);
}

uint64_t sub_1002A4854()
{
  return sub_10018D6E4();
}

uint64_t sub_1002A4864(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xBDu);
}

uint64_t sub_1002A48B0(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002A4910;
  void v4[3] = &unk_10088D268;
  char v5 = a2;
  void v4[4] = a3;
  return sub_1002D04D0(a1, 189LL, 1, v4, 0LL);
}

uint64_t sub_1002A4910()
{
  return sub_10018D76C();
}

uint64_t sub_1002A4928(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xBEu);
}

uint64_t sub_1002A4974(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A49D0;
  v3[3] = &unk_10088D3C8;
  void v3[4] = a2;
  return sub_1002D04D0(a1, 190LL, 1, v3, 0LL);
}

uint64_t sub_1002A49D0()
{
  return sub_10018D7F4();
}

uint64_t sub_1002A49E0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xBFu);
}

uint64_t sub_1002A4A2C(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A4A88;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 191LL, 1, v3, 0LL);
}

uint64_t sub_1002A4A88()
{
  return sub_10018D47C();
}

uint64_t sub_1002A4A98(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xF3u);
}

uint64_t sub_1002A4AE4(uint64_t a1, void *a2, char a3, char a4)
{
  id v7 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2744LL))(a1))
  {
    uint64_t v14 = 0LL;
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10088DB28);
    }
    int v8 = off_1008D5F08;
    sub_100241F90(v15, v7);
    if (sub_100599890((uint64_t)v8, v15, &v14))
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_1002A4C4C;
      v11[3] = &unk_10088D468;
      char v12 = a3;
      char v13 = a4;
      uint8_t v11[4] = v14;
      uint64_t v9 = sub_1002D04D0(a1, 243LL, 1, v11, 0LL);
    }

    else
    {
      uint64_t v9 = 7LL;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}

void sub_1002A4C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002A4C4C(uint64_t a1)
{
  __int16 v4 = 0;
  if (*(_BYTE *)(a1 + 40))
  {
    LOBYTE(v4) = sub_10019DEE0(0);
    unsigned int v2 = 1;
  }

  else
  {
    unsigned int v2 = 0;
  }

  if (*(_BYTE *)(a1 + 41)) {
    *(_BYTE *)((unint64_t)&v4 | v2) = sub_10019DEE0(1u);
  }
  return sub_1001959B8();
}

uint64_t sub_1002A4CD4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x10Au);
}

uint64_t sub_1002A4D20(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_1002E6E9C();
  unsigned int v7 = a3 & 0xFFFFFFFE;
  if (a2) {
    unsigned int v7 = a3 & 0xFFFFFFFE | a2 | 0xA;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002A4DC8;
  v9[3] = &unk_10088D508;
  unsigned int v10 = v7;
  return sub_1002D04D0(a1, 266LL, 1, v9, 0LL);
}

uint64_t sub_1002A4DC8()
{
  return sub_100192E40();
}

uint64_t sub_1002A4DD8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x10Cu);
}

uint64_t sub_1002A4E24(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A4E80;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 268LL, 1, v3, 0LL);
}

uint64_t sub_1002A4E80()
{
  return sub_100192EC8();
}

uint64_t sub_1002A4E90(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xF4u);
}

uint64_t sub_1002A4EDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2744LL))(a1))
  {
    uint64_t v8 = 0LL;
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10088DB28);
    }
    char v4 = off_1008D5F08;
    sub_100241F90(v9, v3);
    if (sub_100599890((uint64_t)v4, v9, &v8))
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      void v7[2] = sub_1002A502C;
      v7[3] = &unk_10088D3C8;
      void v7[4] = v8;
      uint64_t v5 = sub_1002D04D0(a1, 244LL, 1, v7, 0LL);
    }

    else
    {
      uint64_t v5 = 7LL;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_1002A500C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002A502C()
{
  return sub_100195AC8();
}

uint64_t sub_1002A5044(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2744LL))(a1))
  {
    uint64_t v8 = 0LL;
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10088DB28);
    }
    char v4 = off_1008D5F08;
    sub_100241F90(v9, v3);
    if (sub_100599890((uint64_t)v4, v9, &v8))
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      void v7[2] = sub_1002A5194;
      v7[3] = &unk_10088D3C8;
      void v7[4] = v8;
      uint64_t v5 = sub_1002D04D0(a1, 244LL, 1, v7, 0LL);
    }

    else
    {
      uint64_t v5 = 7LL;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_1002A5174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002A5194()
{
  return sub_100195AC8();
}

uint64_t sub_1002A51B0(uint64_t a1)
{
  return sub_1002D04D0(a1, 28LL, 0, &stru_10088D688, &stru_10088D6A8);
}

int sub_1002A51CC(id a1)
{
  return sub_100190A60();
}

uint64_t sub_1002A51DC(uint64_t a1, const void *a2, unsigned int a3, const void *a4, unsigned int a5)
{
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 8);
  char v19 = 0LL;
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_1002BB998((uint64_t *)&v19, a1 + 136);
  sub_100242F54((uint64_t)v21);
  char v17 = 0LL;
  char v18 = 0LL;
  sub_10056AB04(&v17, a2, a3);
  int v15 = 0LL;
  char v16 = 0LL;
  sub_10056AB04(&v15, a4, a5);
  unsigned int v10 = v19;
  if (v19 != v20)
  {
    do
    {
      (*(void (**)(void *, uint64_t (***)(), uint64_t (***)()))*v10[4])( v10[4],  &v17,  &v15);
      int v11 = v10[1];
      if (v11)
      {
        do
        {
          char v12 = (void **)v11;
          int v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          char v12 = (void **)v10[2];
          BOOL v13 = *v12 == v10;
          unsigned int v10 = v12;
        }

        while (!v13);
      }

      unsigned int v10 = v12;
    }

    while (v12 != v20);
  }

  int v15 = &off_10087FAA8;
  if (v16) {
    sub_1002CD254(v16);
  }
  char v17 = &off_10087FAA8;
  if (v18) {
    sub_1002CD254(v18);
  }
  sub_10023BF24((uint64_t)&v19, v20[0]);
  sub_100242FAC((uint64_t)v21);
  return 0LL;
}

void sub_1002A5318( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  if (a6) {
    sub_1002CD254(a6);
  }
  sub_10023BF24((uint64_t)va, v9);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A5384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 8);
  char v16 = 0LL;
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_1002BB998((uint64_t *)&v16, a1 + 136);
  sub_100242F54((uint64_t)v18);
  uint64_t v10 = v16;
  if (v16 != v17)
  {
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFLL;
    do
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v10[4] + 72LL))(v10[4], v11, a3, a4, a5);
      char v12 = v10[1];
      if (v12)
      {
        do
        {
          BOOL v13 = (void **)v12;
          char v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          BOOL v13 = (void **)v10[2];
          BOOL v14 = *v13 == v10;
          uint64_t v10 = v13;
        }

        while (!v14);
      }

      uint64_t v10 = v13;
    }

    while (v13 != v17);
  }

  sub_10023BF24((uint64_t)&v16, v17[0]);
  sub_100242FAC((uint64_t)v18);
  return 0LL;
}

void sub_1002A547C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_10023BF24((uint64_t)va, v5);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002A54A8(uint64_t a1, char a2)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088DB28);
  }
  sub_1005B5918((uint64_t)off_1008D5F08, a1, a2);
}

uint64_t sub_1002A5500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 3056LL))( v8,  a1,  a2,  a3,  a4);
}

void sub_1002A554C(uint64_t a1, char a2, uint64_t a3, int a4, __int16 a5, int a6, int a7)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088DB28);
  }
  sub_1005B59D4((uint64_t)off_1008D5F08, a1, a2, a3, a4, a5, a6, a7);
}

void sub_1002A55E4( uint64_t a1, int a2, int a3, int a4, int a5, char *a6, unsigned int a7, char a8, char a9, char a10, __int16 a11, char a12, char a13, char a14)
{
  char v14 = a7;
  int v19 = a2;
  char v21 = a6;
  if (a7 >= 2)
  {
    char v23 = a6 + 1;
    char v22 = *a6;
    uint64_t v24 = a7 - 1LL;
    char v21 = a6;
    char v25 = a6 + 1;
    do
    {
      int v27 = *v25++;
      char v26 = v27;
      if (v27 < v22)
      {
        char v22 = v26;
        char v21 = v23;
      }

      char v23 = v25;
      --v24;
    }

    while (v24);
  }

  if (qword_1008D5F10 != -1)
  {
    int v31 = a4;
    int v32 = a5;
    int v29 = a3;
    char v30 = a8;
    dispatch_once(&qword_1008D5F10, &stru_10088DB28);
    int v19 = a2;
    a3 = v29;
    a8 = v30;
    a4 = v31;
    a5 = v32;
  }

  sub_100594684((uint64_t)off_1008D5F08, a1, v19, a3, a4, a5, (uint64_t)a6, v14, a8, a9, a10, *v21, a11, 0, a13, a14);
}

void sub_1002A571C(uint64_t a1, int a2, char a3)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088DB28);
  }
  sub_1005B5D4C((uint64_t)off_1008D5F08, a1, a2 == 2, a3);
}

uint64_t sub_1002A5788(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E8F6C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 40LL))(v4, a1, a2);
}

void sub_1002A57BC(uint64_t a1, int a2)
{
  if (a2)
  {
    char v2 = a2;
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
    }
    sub_100431B3C((uint64_t)off_1008D60A8, a1, v2);
  }

uint64_t sub_1002A581C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 3008LL))( v10,  a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_1002A5878(_BYTE *a1, unsigned int a2)
{
  if (sub_1002CD6A0()) {
    unsigned __int16 v4 = 217;
  }
  else {
    unsigned __int16 v4 = 215;
  }
  sub_1002E6E9C();
  if (!sub_1002CD6A0()) {
    v4 -= 2;
  }
  if ((*a1 & 0x80) != 0)
  {
    if (a2 < 0xC9) {
      v4 -= 18;
    }
  }

  else if ((*a1 & 0x60) != 0 {
         && (uint64_t v5 = sub_1002E6BF0(), !(*(unsigned int (**)(uint64_t))(*(void *)v5 + 384LL))(v5)))
  }
  {
    v4 -= 34;
  }

  else
  {
    v4 -= 38;
  }

  if (a2 != v4) {
    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp",  4456,  "expectedEnhancedLinkQualityInfoSize == vseSize && expectedEnhancedLinkQualityInfoSize <= sizeof(EnhancedLinkQualityInfo)");
  }
  memcpy(v8, a1, v4);
  uint64_t v6 = sub_1002E6E9C();
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v6 + 3016LL))(v6, v8);
  return v4;
}

uint64_t sub_1002A59AC(void *__src, size_t __n)
{
  if ((_DWORD)__n == 173) {
    uint64_t v2 = 173LL;
  }
  else {
    uint64_t v2 = 220LL;
  }
  memset(v5, 0, 176);
  if ((_DWORD)v2 != (_DWORD)__n) {
    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp",  4473,  "(expectedEnhancedLinkQualityHRBInfoSize == vseSize) && expectedEnhancedLinkQualityHRBInfoSize <= sizeof(EnhancedLi nkQualityInfo_HRB)");
  }
  memcpy(v5, __src, __n);
  uint64_t v3 = sub_1002E6E9C();
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v3 + 3024LL))(v3, v5);
  return v2;
}

uint64_t sub_1002A5A74(_OWORD *a1, int a2)
{
  if (a2 != 189) {
    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp",  4488,  "expectedadditionalBtCoexStatsInfoSize == vseSize && expectedadditionalBtCoexStatsInfoSize <= sizeof(additionalBtCoexStatsInfo)");
  }
  __int128 v2 = a1[9];
  v9[8] = a1[8];
  v9[9] = v2;
  v10[0] = a1[10];
  *(_OWORD *)((char *)v10 + 13) = *(_OWORD *)((char *)a1 + 173);
  __int128 v3 = a1[5];
  void v9[4] = a1[4];
  void v9[5] = v3;
  __int128 v4 = a1[7];
  void v9[6] = a1[6];
  void v9[7] = v4;
  __int128 v5 = a1[1];
  v9[0] = *a1;
  v9[1] = v5;
  __int128 v6 = a1[3];
  void v9[2] = a1[2];
  v9[3] = v6;
  uint64_t v7 = sub_1002E6E9C();
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v7 + 3032LL))(v7, v9);
  return 189LL;
}

uint64_t sub_1002A5B28(__int128 *a1, int a2)
{
  if (a2 != 24) {
    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp",  4500,  "expectedBeamformingStatsSize == vseSize");
  }
  __int128 v4 = *a1;
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v2 = sub_1002E6E9C();
  (*(void (**)(uint64_t, __int128 *))(*(void *)v2 + 3040LL))(v2, &v4);
  return 24LL;
}

uint64_t sub_1002A5B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 3048LL))(v6, a1, a2, a3);
}

void sub_1002A5BCC(_OWORD *a1)
{
  if (sub_1002E8D94())
  {
    uint64_t v2 = malloc(0xFBuLL);
    if (v2)
    {
      __int128 v3 = v2;
      __int128 v4 = a1[13];
      v2[12] = a1[12];
      v2[13] = v4;
      v2[14] = a1[14];
      *(_OWORD *)((char *)v2 + 235) = *(_OWORD *)((char *)a1 + 235);
      __int128 v5 = a1[9];
      _OWORD v2[8] = a1[8];
      v2[9] = v5;
      __int128 v6 = a1[11];
      v2[10] = a1[10];
      v2[11] = v6;
      __int128 v7 = a1[5];
      void v2[4] = a1[4];
      void v2[5] = v7;
      __int128 v8 = a1[7];
      v2[6] = a1[6];
      v2[7] = v8;
      __int128 v9 = a1[1];
      *uint64_t v2 = *a1;
      v2[1] = v9;
      __int128 v10 = a1[3];
      _DWORD v2[2] = a1[2];
      v2[3] = v10;
      v13[0] = 0LL;
      v13[1] = v13;
      _DWORD v13[2] = 0x4012000000LL;
      v13[3] = sub_1002A5CF8;
      void v13[4] = nullsub_175;
      uint64_t v14 = 0LL;
      int v15 = 0LL;
      void v13[5] = &unk_1007C41D6;
      sub_10040CB94(&v14, 0);
      int v15 = v3;
      uint64_t v11 = sub_100404FE8();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      void v12[2] = sub_1002A5D08;
      _OWORD v12[3] = &unk_100880D70;
      v12[4] = v13;
      void v12[5] = v3;
      sub_100405384(v11, v12);
      _Block_object_dispose(v13, 8);
    }
  }

void sub_1002A5CE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

__n128 sub_1002A5CF8(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1002A5D08(uint64_t a1)
{
  uint64_t v2 = sub_1002E8D94();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120LL))(v2, *(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
  free(*(void **)(a1 + 40));
}

void sub_1002A5D44(_OWORD *a1)
{
  if (sub_1002E8D94())
  {
    uint64_t v2 = malloc(0xDCuLL);
    if (v2)
    {
      __int128 v3 = v2;
      __int128 v4 = a1[11];
      v2[10] = a1[10];
      v2[11] = v4;
      v2[12] = a1[12];
      *(_OWORD *)((char *)v2 + 204) = *(_OWORD *)((char *)a1 + 204);
      __int128 v5 = a1[7];
      v2[6] = a1[6];
      v2[7] = v5;
      __int128 v6 = a1[9];
      _OWORD v2[8] = a1[8];
      v2[9] = v6;
      __int128 v7 = a1[3];
      _DWORD v2[2] = a1[2];
      v2[3] = v7;
      __int128 v8 = a1[5];
      void v2[4] = a1[4];
      void v2[5] = v8;
      __int128 v9 = a1[1];
      *uint64_t v2 = *a1;
      v2[1] = v9;
      v12[0] = 0LL;
      v12[1] = v12;
      void v12[2] = 0x4012000000LL;
      _OWORD v12[3] = sub_1002A5E68;
      v12[4] = nullsub_176;
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      void v12[5] = &unk_1007C41D6;
      sub_10040CB94(&v13, 1);
      uint64_t v14 = v3;
      uint64_t v10 = sub_100404FE8();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_1002A5E78;
      v11[3] = &unk_100880D70;
      uint8_t v11[4] = v12;
      void v11[5] = v3;
      sub_100405384(v10, v11);
      _Block_object_dispose(v12, 8);
    }
  }

void sub_1002A5E50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

__n128 sub_1002A5E68(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1002A5E78(uint64_t a1)
{
  uint64_t v2 = sub_1002E8D94();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120LL))(v2, *(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
  free(*(void **)(a1 + 40));
}

void sub_1002A5EB4(_OWORD *a1)
{
  if (sub_1002E8D94())
  {
    uint64_t v2 = malloc(0x40uLL);
    if (v2)
    {
      __int128 v3 = v2;
      __int128 v4 = a1[1];
      *uint64_t v2 = *a1;
      v2[1] = v4;
      __int128 v5 = a1[3];
      _DWORD v2[2] = a1[2];
      v2[3] = v5;
      v8[0] = 0LL;
      v8[1] = v8;
      _DWORD v8[2] = 0x4012000000LL;
      v8[3] = sub_1002A5FA8;
      void v8[4] = nullsub_177;
      uint64_t v9 = 0LL;
      uint64_t v10 = 0LL;
      void v8[5] = &unk_1007C41D6;
      sub_10040CB94(&v9, 2);
      uint64_t v10 = v3;
      uint64_t v6 = sub_100404FE8();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      void v7[2] = sub_1002A5FB8;
      v7[3] = &unk_100880D70;
      void v7[4] = v8;
      void v7[5] = v3;
      sub_100405384(v6, v7);
      _Block_object_dispose(v8, 8);
    }
  }

void sub_1002A5F90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

__n128 sub_1002A5FA8(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1002A5FB8(uint64_t a1)
{
  uint64_t v2 = sub_1002E8D94();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120LL))(v2, *(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
  free(*(void **)(a1 + 40));
}

void sub_1002A5FF4(_OWORD *a1)
{
  if (sub_1002E8D94())
  {
    uint64_t v2 = malloc(0xE0uLL);
    if (v2)
    {
      __int128 v3 = v2;
      __int128 v4 = a1[11];
      v2[10] = a1[10];
      v2[11] = v4;
      __int128 v5 = a1[13];
      v2[12] = a1[12];
      v2[13] = v5;
      __int128 v6 = a1[7];
      v2[6] = a1[6];
      v2[7] = v6;
      __int128 v7 = a1[9];
      _OWORD v2[8] = a1[8];
      v2[9] = v7;
      __int128 v8 = a1[3];
      _DWORD v2[2] = a1[2];
      v2[3] = v8;
      __int128 v9 = a1[5];
      void v2[4] = a1[4];
      void v2[5] = v9;
      __int128 v10 = a1[1];
      *uint64_t v2 = *a1;
      v2[1] = v10;
      v13[0] = 0LL;
      v13[1] = v13;
      _DWORD v13[2] = 0x4012000000LL;
      v13[3] = sub_1002A6110;
      void v13[4] = nullsub_178;
      uint64_t v14 = 0LL;
      int v15 = 0LL;
      void v13[5] = &unk_1007C41D6;
      sub_10040CB94(&v14, 3);
      int v15 = v3;
      uint64_t v11 = sub_100404FE8();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      void v12[2] = sub_1002A6120;
      _OWORD v12[3] = &unk_100880D70;
      v12[4] = v13;
      void v12[5] = v3;
      sub_100405384(v11, v12);
      _Block_object_dispose(v13, 8);
    }
  }

void sub_1002A60F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

__n128 sub_1002A6110(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1002A6120(uint64_t a1)
{
  uint64_t v2 = sub_1002E8D94();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120LL))(v2, *(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
  free(*(void **)(a1 + 40));
}

void sub_1002A615C(_OWORD *a1)
{
  if (sub_1002E8D94())
  {
    uint64_t v2 = malloc(0xDAuLL);
    if (v2)
    {
      __int128 v3 = v2;
      __int128 v4 = a1[11];
      v2[10] = a1[10];
      v2[11] = v4;
      v2[12] = a1[12];
      *(_OWORD *)((char *)v2 + 202) = *(_OWORD *)((char *)a1 + 202);
      __int128 v5 = a1[7];
      v2[6] = a1[6];
      v2[7] = v5;
      __int128 v6 = a1[9];
      _OWORD v2[8] = a1[8];
      v2[9] = v6;
      __int128 v7 = a1[3];
      _DWORD v2[2] = a1[2];
      v2[3] = v7;
      __int128 v8 = a1[5];
      void v2[4] = a1[4];
      void v2[5] = v8;
      __int128 v9 = a1[1];
      *uint64_t v2 = *a1;
      v2[1] = v9;
      v12[0] = 0LL;
      v12[1] = v12;
      void v12[2] = 0x4012000000LL;
      _OWORD v12[3] = sub_1002A6280;
      v12[4] = nullsub_179;
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      void v12[5] = &unk_1007C41D6;
      sub_10040CB94(&v13, 4);
      uint64_t v14 = v3;
      uint64_t v10 = sub_100404FE8();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_1002A6290;
      v11[3] = &unk_100880D70;
      uint8_t v11[4] = v12;
      void v11[5] = v3;
      sub_100405384(v10, v11);
      _Block_object_dispose(v12, 8);
    }
  }

void sub_1002A6268( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

__n128 sub_1002A6280(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1002A6290(uint64_t a1)
{
  uint64_t v2 = sub_1002E8D94();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120LL))(v2, *(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
  free(*(void **)(a1 + 40));
}

void sub_1002A62CC(_OWORD *a1)
{
  if (sub_1002E8D94())
  {
    uint64_t v2 = malloc(0xF0uLL);
    if (v2)
    {
      __int128 v3 = v2;
      __int128 v4 = a1[13];
      v2[12] = a1[12];
      v2[13] = v4;
      v2[14] = a1[14];
      __int128 v5 = a1[9];
      _OWORD v2[8] = a1[8];
      v2[9] = v5;
      __int128 v6 = a1[11];
      v2[10] = a1[10];
      v2[11] = v6;
      __int128 v7 = a1[5];
      void v2[4] = a1[4];
      void v2[5] = v7;
      __int128 v8 = a1[7];
      v2[6] = a1[6];
      v2[7] = v8;
      __int128 v9 = a1[1];
      *uint64_t v2 = *a1;
      v2[1] = v9;
      __int128 v10 = a1[3];
      _DWORD v2[2] = a1[2];
      v2[3] = v10;
      v13[0] = 0LL;
      v13[1] = v13;
      _DWORD v13[2] = 0x4012000000LL;
      v13[3] = sub_1002A63F0;
      void v13[4] = nullsub_180;
      uint64_t v14 = 0LL;
      int v15 = 0LL;
      void v13[5] = &unk_1007C41D6;
      sub_10040CB94(&v14, 5);
      int v15 = v3;
      uint64_t v11 = sub_100404FE8();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      void v12[2] = sub_1002A6400;
      _OWORD v12[3] = &unk_100880D70;
      v12[4] = v13;
      void v12[5] = v3;
      sub_100405384(v11, v12);
      _Block_object_dispose(v13, 8);
    }
  }

void sub_1002A63D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

__n128 sub_1002A63F0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1002A6400(uint64_t a1)
{
  uint64_t v2 = sub_1002E8D94();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 120LL))(v2, *(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
  free(*(void **)(a1 + 40));
}

uint64_t sub_1002A643C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3064LL))(v4, a1, a2);
}

uint64_t sub_1002A6470(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 3072LL))(v2, a1);
}

uint64_t sub_1002A649C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3080LL))(v4, a1, a2);
}

uint64_t sub_1002A64D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 3088LL))( v10,  a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_1002A6530(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3096LL))(v4, a1, a2);
}

uint64_t sub_1002A6564(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3104LL))(v4, a1, a2);
}

uint64_t sub_1002A6598(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3112LL))(v4, a1, a2);
}

uint64_t sub_1002A65CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 3120LL))(v6, a1, a2, a3);
}

uint64_t sub_1002A6610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3128LL))(v4, a1, a2);
}

uint64_t sub_1002A6644( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  uint64_t v16 = sub_1002E6E9C();
  __int16 v18 = a8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16))(*(void *)v16 + 3136LL))( v16,  a1,  a2,  a3,  a4,  a5,  a6,  a7,  v18);
}

uint64_t sub_1002A66CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 3144LL))( v8,  a1,  a2,  a3,  a4);
}

uint64_t sub_1002A6718(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3152LL))(v4, a1, a2);
}

uint64_t sub_1002A674C(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 3160LL))(v2, a1);
}

uint64_t sub_1002A6778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3184LL))(v4, a1, a2);
}

uint64_t sub_1002A67AC(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 3192LL))(v2, a1);
}

uint64_t sub_1002A67D8(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 3200LL))(v2, a1);
}

uint64_t sub_1002A6804(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 3216LL))(v2, a1);
}

uint64_t sub_1002A6830(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 3208LL))(v2, a1);
}

uint64_t sub_1002A685C(uint64_t a1)
{
  __int128 v12 = 0u;
  v13[0] = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v9 = 0u;
  *(_WORD *)((char *)&v9 + 7) = *(_WORD *)(a1 + 85);
  BYTE6(v9) = *(_BYTE *)(a1 + 87);
  WORD5(v9) = *(_WORD *)(a1 + 88);
  BYTE9(v9) = *(_BYTE *)(a1 + 90);
  WORD5(v11) = *(_DWORD *)(a1 + 14);
  WORD4(v11) = *(_WORD *)(a1 + 4);
  HIWORD(v11) = *(_DWORD *)(a1 + 18) + WORD5(v11);
  WORD6(v10) = *(_DWORD *)(a1 + 26);
  int v1 = *(_DWORD *)(a1 + 30);
  HIWORD(v10) = v1;
  WORD6(v11) = *(_DWORD *)(a1 + 81);
  WORD3(v12) = *(_DWORD *)(a1 + 38) + *(_DWORD *)(a1 + 22) + *(_DWORD *)(a1 + 54);
  WORD2(v12) = *(_DWORD *)(a1 + 42) + WORD6(v10) + *(_DWORD *)(a1 + 58);
  int v2 = *(_DWORD *)(a1 + 62);
  int v3 = *(_DWORD *)(a1 + 46) + v1;
  WORD3(v13[0]) = v3 + *(_DWORD *)(a1 + 34) + *(_DWORD *)(a1 + 50) + v2 + *(_DWORD *)(a1 + 66);
  WORD1(v13[0]) = v3 + v2;
  WORD2(v13[1]) = *(_WORD *)(a1 + 99);
  *(void *)((char *)v13 + 12) = *(void *)(a1 + 91);
  *(_OWORD *)((char *)&v13[1] + 6) = *(_OWORD *)(a1 + 101);
  __int128 v4 = *(_OWORD *)(a1 + 117);
  __int128 v5 = *(_OWORD *)(a1 + 133);
  __int128 v6 = *(_OWORD *)(a1 + 149);
  *(_OWORD *)((char *)&v13[5] + 5) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)((char *)&v13[4] + 6) = v6;
  *(_OWORD *)((char *)&v13[3] + 6) = v5;
  *(_OWORD *)((char *)&v13[2] + 6) = v4;
  uint64_t v7 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v7 + 3016LL))(v7, &v9);
}

uint64_t sub_1002A69D8(uint64_t a1)
{
  __int128 v5 = 0u;
  __int128 v6 = 0u;
  memset(&v9[1], 0, 143);
  __int128 v8 = 0u;
  v9[0] = 0u;
  __int128 v7 = 0u;
  WORD1(v5) = *(_WORD *)a1;
  __int16 v1 = *(_WORD *)(a1 + 2);
  __int16 v2 = *(_WORD *)(a1 + 4);
  LOWORD(v6) = v2 + v1;
  WORD1(v6) = v2;
  WORD3(v6) = *(_WORD *)(a1 + 8);
  WORD6(v5) = *(_WORD *)(a1 + 12);
  *(_WORD *)((char *)&v5 + 7) = *(_WORD *)(a1 + 15);
  BYTE6(v5) = *(_BYTE *)(a1 + 17);
  WORD5(v5) = *(_WORD *)(a1 + 18);
  BYTE9(v5) = BYTE11(v5);
  *(void *)((char *)v9 + 12) = *(void *)(a1 + 21);
  WORD2(v9[1]) = *(_WORD *)(a1 + 29);
  *(_OWORD *)((char *)&v9[1] + 6) = *(_OWORD *)(a1 + 31);
  *(_OWORD *)((char *)&v9[5] + 5) = *(_OWORD *)(a1 + 94);
  *(_OWORD *)((char *)&v9[4] + 6) = *(_OWORD *)(a1 + 79);
  *(_OWORD *)((char *)&v9[3] + 6) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)((char *)&v9[2] + 6) = *(_OWORD *)(a1 + 47);
  if (*(_BYTE *)(a1 + 14) == 2) {
    HIWORD(v5) = v1;
  }
  uint64_t v3 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v3 + 3016LL))(v3, &v5);
}

uint64_t sub_1002A6B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3168LL))(v4, a1, a2);
}

uint64_t sub_1002A6B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 3176LL))( v8,  a1,  a2,  a3,  a4);
}

uint64_t sub_1002A6B88(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 1080LL))(v2, a1);
}

uint64_t sub_1002A6BB4(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 1088LL))(v2, a1);
}

uint64_t sub_1002A6BE0(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 1096LL))(v2, a1);
}

uint64_t sub_1002A6C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 1104LL))( v8,  a1 & 0xFFFFFFFFFFFFLL,  a2,  a3,  a4);
}

uint64_t sub_1002A6C58(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 1112LL))(v2, a1);
}

uint64_t sub_1002A6C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 3224LL))(v4, a1, a2);
}

uint64_t sub_1002A6CB8(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = sub_1002E6E9C();
  __int128 v5 = a2[3];
  _DWORD v8[2] = a2[2];
  v8[3] = v5;
  void v8[4] = a2[4];
  __int128 v6 = a2[1];
  v8[0] = *a2;
  v8[1] = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v4 + 3232LL))(v4, a1, v8);
}

uint64_t sub_1002A6D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12
                                                                                                  + 3240LL))( v12,  a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_1002A6DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 3248LL))( v10,  a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_1002A6DFC(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 3256LL))(v2, a1);
}

uint64_t sub_1002A6E28(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 3264LL))(v2, a1);
}

uint64_t sub_1002A6E54(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 3272LL))(v2, a1);
}

uint64_t sub_1002A6E80(uint64_t a1, void (**a2)(uint64_t a1, char a2))
{
  if (!a2) {
    return 1LL;
  }
  *a2 = sub_1002A54A8;
  a2[1] = (void (*)(uint64_t, char))sub_1002A5500;
  a2[42] = (void (*)(uint64_t, char))sub_1002A55E4;
  a2[43] = (void (*)(uint64_t, char))sub_1002A554C;
  a2[2] = (void (*)(uint64_t, char))sub_1002A571C;
  a2[3] = (void (*)(uint64_t, char))sub_1002A5788;
  a2[4] = (void (*)(uint64_t, char))sub_1002A57BC;
  a2[5] = (void (*)(uint64_t, char))sub_1002A581C;
  a2[6] = (void (*)(uint64_t, char))sub_1002A5B88;
  a2[7] = (void (*)(uint64_t, char))sub_1002A5BCC;
  a2[8] = (void (*)(uint64_t, char))sub_1002A5D44;
  a2[9] = (void (*)(uint64_t, char))sub_1002A5EB4;
  a2[10] = (void (*)(uint64_t, char))sub_1002A5FF4;
  a2[11] = (void (*)(uint64_t, char))sub_1002A615C;
  a2[30] = (void (*)(uint64_t, char))sub_1002A685C;
  a2[31] = (void (*)(uint64_t, char))sub_1002A69D8;
  a2[12] = (void (*)(uint64_t, char))sub_1002A62CC;
  a2[13] = (void (*)(uint64_t, char))sub_1002A5878;
  a2[14] = (void (*)(uint64_t, char))sub_1002A59AC;
  a2[15] = (void (*)(uint64_t, char))sub_1002A5A74;
  a2[16] = (void (*)(uint64_t, char))sub_1002A643C;
  a2[17] = (void (*)(uint64_t, char))sub_1002A6470;
  a2[18] = (void (*)(uint64_t, char))sub_1002A649C;
  a2[19] = (void (*)(uint64_t, char))sub_1002A64D0;
  a2[20] = (void (*)(uint64_t, char))nullsub_181;
  a2[21] = (void (*)(uint64_t, char))sub_1002A6530;
  a2[22] = (void (*)(uint64_t, char))sub_1002A6564;
  a2[23] = (void (*)(uint64_t, char))sub_1002A6598;
  a2[24] = (void (*)(uint64_t, char))sub_1002A65CC;
  a2[25] = (void (*)(uint64_t, char))sub_1002A6610;
  a2[28] = (void (*)(uint64_t, char))sub_1002A66CC;
  a2[29] = (void (*)(uint64_t, char))sub_1002A6718;
  a2[26] = (void (*)(uint64_t, char))sub_1002A674C;
  a2[27] = (void (*)(uint64_t, char))sub_1002A6644;
  a2[32] = (void (*)(uint64_t, char))sub_1002A6B08;
  a2[33] = (void (*)(uint64_t, char))sub_1002A6B3C;
  a2[34] = (void (*)(uint64_t, char))sub_1002A6778;
  a2[35] = (void (*)(uint64_t, char))sub_1002A67D8;
  a2[36] = (void (*)(uint64_t, char))sub_1002A67AC;
  a2[37] = (void (*)(uint64_t, char))sub_1002A6804;
  a2[38] = (void (*)(uint64_t, char))sub_1002A6830;
  a2[39] = (void (*)(uint64_t, char))nullsub_182;
  a2[40] = (void (*)(uint64_t, char))nullsub_183;
  a2[41] = (void (*)(uint64_t, char))sub_1002A5B28;
  a2[44] = (void (*)(uint64_t, char))sub_1002A6B88;
  a2[45] = (void (*)(uint64_t, char))sub_1002A6BB4;
  a2[46] = (void (*)(uint64_t, char))sub_1002A6BE0;
  a2[47] = (void (*)(uint64_t, char))sub_1002A6C0C;
  a2[48] = (void (*)(uint64_t, char))sub_1002A6C58;
  a2[49] = (void (*)(uint64_t, char))sub_1002A6C84;
  a2[50] = (void (*)(uint64_t, char))sub_1002A6CB8;
  int v3 = _os_feature_enabled_impl("BluetoothFeatures", "ADVOverConnection");
  uint64_t result = 0LL;
  __int128 v5 = sub_1002A6D3C;
  if (!v3) {
    __int128 v5 = 0LL;
  }
  a2[52] = (void (*)(uint64_t, char))v5;
  a2[53] = (void (*)(uint64_t, char))sub_1002A6DA0;
  a2[54] = (void (*)(uint64_t, char))sub_1002A6DFC;
  a2[55] = (void (*)(uint64_t, char))sub_1002A6E28;
  a2[56] = (void (*)(uint64_t, char))sub_1002A6E54;
  return result;
}

uint64_t sub_1002A7100(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xACu);
}

uint64_t sub_1002A714C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 4u);
}

uint64_t sub_1002A7198(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 5u);
}

uint64_t sub_1002A71E4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x27u);
}

uint64_t sub_1002A7230(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x97u);
}

uint64_t sub_1002A727C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x32u);
}

uint64_t sub_1002A72C8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x5Fu);
}

uint64_t sub_1002A7314(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x7Cu);
}

uint64_t sub_1002A7360(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x7Fu);
}

uint64_t sub_1002A73AC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x80u);
}

uint64_t sub_1002A73F8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x81u);
}

uint64_t sub_1002A7444(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x82u);
}

uint64_t sub_1002A7490(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xA9u);
}

uint64_t sub_1002A74DC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x34u);
}

uint64_t sub_1002A7528(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  int v35 = 0;
  int v36 = a2;
  __int16 v37 = WORD2(a2);
  v34[0] = 0LL;
  v34[1] = 0LL;
  sub_100242F28((uint64_t)v34, a1 + 72);
  if (sub_1002CF254(a1, 4LL))
  {
    int v15 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = sub_1002CE354(a1, 4);
      *(_DWORD *)std::stringbuf::string_type buf = 136447746;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v39 = 1024;
      int v40 = a4;
      __int16 v41 = 1024;
      int v42 = a5;
      __int16 v43 = 1024;
      int v44 = a6;
      __int16 v45 = 1024;
      int v46 = a3;
      __int16 v47 = 1040;
      int v48 = 6;
      __int16 v49 = 2096;
      __int128 v50 = &v36;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Sending: %{public}s, requesterID 0x%x, high %d, enableEPA %d, type %d, addr %{bluetooth:BD_ADDR}.6P",  buf,  0x34u);
    }

    char v33 = 0;
    sub_100242CA4(&v33);
    if (a7) {
      char v17 = sub_1002A714C;
    }
    else {
      char v17 = 0LL;
    }
    int v18 = sub_10018F980((uint64_t)&v36, a4, a5, &v35, (uint64_t)v17);
    sub_100242CD0(&v33);
    if (!v18 && a7)
    {
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
      }
      int v18 = sub_1004336D8((uint64_t)off_1008D60A8, 4LL);
    }

    sub_1002D06F4(a1, 4u);
    uint64_t v19 = v18 != 3603 && v18 != 0;
    if ((v18 == 3603 || !v18) && a6)
    {
      if (a3 == 22 || a3 == 17) {
        char v21 = 60;
      }
      else {
        char v21 = 45;
      }
      if (a8) {
        LOBYTE(v22) = 75;
      }
      else {
        LOBYTE(v22) = v21;
      }
      int v32 = 0;
      uint64_t v23 = sub_1002E6E00();
      sub_10002418C(buf, "ePA");
      sub_10002418C(__p, "iPAMaxThreshold");
      int v24 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v23 + 88LL))(v23, buf, __p, &v32);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v42) < 0) {
        operator delete(*(void **)buf);
      }
      if (v24)
      {
        int v22 = -v32;
        char v25 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Warning: Setting user defined iPA-Max threshold to -%d dBm through defaults write",  buf,  8u);
        }
      }

      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      void v27[2] = sub_1002A78E4;
      v27[3] = &unk_10088D368;
      char v28 = v22;
      char v29 = a7;
      uint64_t v19 = sub_1002D04D0(a1, 172LL, a7, v27, 0LL);
    }

    sub_100242CD8(&v33);
  }

  else
  {
    uint64_t v19 = 2LL;
  }

  sub_100242FAC((uint64_t)v34);
  return v19;
}

void sub_1002A7878( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, int a21, __int16 a22, char a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  sub_100242CD8(&a24);
  sub_100242FAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A78E4()
{
  return sub_10018CF08();
}

uint64_t sub_1002A7904(uint64_t a1, uint64_t a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002A7964;
  void v4[3] = &unk_10088D268;
  void v4[4] = a2;
  char v5 = a3;
  return sub_1002D04D0(a1, 5LL, 1, v4, 0LL);
}

uint64_t sub_1002A7964(uint64_t a1)
{
  return sub_1001912E0(*(void *)(a1 + 32) + 128LL);
}

uint64_t sub_1002A7980(uint64_t a1, char a2, char a3, char a4, char a5, char a6)
{
  if (*(_DWORD *)(sub_1002E6E9C() + 708) < 0x13u)
  {
    if (*(_DWORD *)(sub_1002E6E9C() + 708) < 0xFu)
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      void v16[2] = sub_1002A7B0C;
      v16[3] = &unk_10088D508;
      char v17 = a3;
      char v18 = a4;
      char v19 = a5;
      char v20 = a6;
      uint64_t v12 = v16;
      uint64_t v13 = a1;
      uint64_t v14 = 39LL;
    }

    else
    {
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      void v21[2] = sub_1002A7AF0;
      v21[3] = &unk_10088D668;
      char v22 = a3;
      char v23 = a4;
      char v24 = a6;
      uint64_t v12 = v21;
      uint64_t v13 = a1;
      uint64_t v14 = 50LL;
    }
  }

  else
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    void v25[2] = sub_1002A7AD0;
    v25[3] = &unk_10088D508;
    char v26 = a2;
    char v27 = a3;
    char v28 = a4;
    char v29 = a6;
    uint64_t v12 = v25;
    uint64_t v13 = a1;
    uint64_t v14 = 95LL;
  }

  return sub_1002D04D0(v13, v14, 1, v12, 0LL);
}

uint64_t sub_1002A7AD0()
{
  return sub_1001947A0();
}

uint64_t sub_1002A7AF0()
{
  return sub_100194718();
}

uint64_t sub_1002A7B0C()
{
  return sub_1001911D0();
}

uint64_t sub_1002A7B2C(uint64_t a1, char a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002A7B8C;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 169LL, 1, v4, 0LL);
}

uint64_t sub_1002A7B8C()
{
  return sub_10018D1D4();
}

uint64_t sub_1002A7BA4(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, char a7)
{
  if (*(_DWORD *)(sub_1002E6E9C() + 708) < 0x13u)
  {
    if (*(_DWORD *)(sub_1002E6E9C() + 708) < 0xFu)
    {
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      void v18[2] = sub_1002A7E38;
      v18[3] = &unk_10088D628;
      void v18[4] = a2;
      char v19 = a4;
      char v20 = a5;
      char v21 = a6;
      char v22 = a7;
      uint64_t v14 = v18;
      uint64_t v15 = a1;
      uint64_t v16 = 39LL;
    }

    else
    {
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      void v23[2] = sub_1002A7DA4;
      v23[3] = &unk_10088D228;
      v23[4] = a2;
      char v24 = a4;
      char v25 = a5;
      char v26 = a7;
      uint64_t v14 = v23;
      uint64_t v15 = a1;
      uint64_t v16 = 50LL;
    }
  }

  else
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    void v27[2] = sub_1002A7D0C;
    v27[3] = &unk_10088D628;
    void v27[4] = a2;
    char v28 = a3;
    char v29 = a4;
    char v30 = a5;
    char v31 = a7;
    uint64_t v14 = v27;
    uint64_t v15 = a1;
    uint64_t v16 = 95LL;
  }

  return sub_1002D04D0(v15, v16, 1, v14, 0LL);
}

uint64_t sub_1002A7D0C(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v1 = sub_10010EEE0(*(void *)(a1 + 32) + 128LL, &v4);
  if (!(_DWORD)v1) {
    return sub_1001947A0();
  }
  uint64_t v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100667D30();
  }
  return v2;
}

uint64_t sub_1002A7DA4(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v1 = sub_10010EEE0(*(void *)(a1 + 32) + 128LL, &v4);
  if (!(_DWORD)v1) {
    return sub_100194718();
  }
  uint64_t v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100667D30();
  }
  return v2;
}

uint64_t sub_1002A7E38(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v1 = sub_10010EEE0(*(void *)(a1 + 32) + 128LL, &v4);
  if (!(_DWORD)v1) {
    return sub_1001911D0();
  }
  uint64_t v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100667D30();
  }
  return v2;
}

uint64_t sub_1002A7ED0(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A7F2C;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 151LL, 1, v3, 0LL);
}

uint64_t sub_1002A7F2C()
{
  return sub_100191258();
}

uint64_t sub_1002A7F3C(uint64_t a1, char a2, int a3, char a4, char a5, char a6, char a7)
{
  if (!a3) {
    return 7LL;
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1002A7FB8;
  v8[3] = &unk_10088D488;
  char v10 = a4;
  char v11 = a5;
  char v12 = a7;
  char v13 = a6;
  char v14 = a2;
  __int16 v9 = a3;
  return sub_1002D04D0(a1, 124LL, 1, v8, 0LL);
}

uint64_t sub_1002A7FB8()
{
  return sub_100194828();
}

uint64_t sub_1002A8038(uint64_t a1, char a2, uint64_t a3, char a4, char a5, char a6, char a7)
{
  if (!a3) {
    return 2LL;
  }
  uint64_t v22 = 0LL;
  uint64_t v13 = sub_10010EEE0(a3 + 128, &v22);
  if ((_DWORD)v13)
  {
    uint64_t v14 = v13;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100667D30();
    }
  }

  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_1002A8140;
    v16[3] = &unk_10088D6C8;
    char v17 = a4;
    char v18 = a5;
    char v19 = a7;
    char v20 = a6;
    char v21 = a2;
    void v16[4] = v22;
    return sub_1002D04D0(a1, 124LL, 1, v16, 0LL);
  }

  return v14;
}

uint64_t sub_1002A8140()
{
  return sub_100194828();
}

uint64_t sub_1002A81C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (!a2) {
    return 7LL;
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A8230;
  v5[3] = &unk_10088D288;
  char v6 = a3;
  void v5[4] = a2;
  void v5[5] = a4;
  return sub_1002D04D0(a1, 124LL, 1, v5, 0LL);
}

uint64_t sub_1002A8230(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v1 = sub_10010EEE0(*(void *)(a1 + 32) + 128LL, &v4);
  if (!(_DWORD)v1) {
    return sub_100194828();
  }
  uint64_t v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100667D30();
  }
  return v2;
}

uint64_t sub_1002A82C4(uint64_t a1, char a2, uint64_t a3, char a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A8328;
  v5[3] = &unk_10088D468;
  void v5[4] = a3;
  char v6 = a2;
  char v7 = a4;
  return sub_1002D04D0(a1, 127LL, 1, v5, 0LL);
}

uint64_t sub_1002A8328()
{
  return sub_1001948B0();
}

uint64_t sub_1002A8378(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (!a3) {
    return 2LL;
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1002A83E8;
  v5[3] = &unk_10088D468;
  void v5[4] = a3;
  char v6 = a2;
  char v7 = a4;
  return sub_1002D04D0(a1, 128LL, 1, v5, 0LL);
}

uint64_t sub_1002A83E8()
{
  return sub_100194938();
}

uint64_t sub_1002A8400(uint64_t a1, char a2, uint64_t a3)
{
  if (!a3) {
    return 2LL;
  }
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 72);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1002A84C0;
  v8[3] = &unk_10088D268;
  void v8[4] = a3;
  char v9 = a2;
  uint64_t v6 = sub_1002D04D0(a1, 129LL, 1, v8, 0LL);
  sub_100242FAC((uint64_t)v10);
  return v6;
}

void sub_1002A84AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1002A84C0()
{
  return sub_100194A48();
}

uint64_t sub_1002A84D8(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002A8534;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 130LL, 1, v3, 0LL);
}

uint64_t sub_1002A8534()
{
  return sub_100194AD0();
}

uint64_t sub_1002A8544(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002A85B0;
  v7[3] = &unk_10088D628;
  void v7[4] = a2;
  char v8 = a3;
  char v9 = a4;
  char v10 = a5;
  char v11 = a6;
  return sub_1002D04D0(a1, 52LL, 1, v7, 0LL);
}

uint64_t sub_1002A85B0()
{
  return sub_1001949C0();
}

uint64_t sub_1002A85D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, a1 + 8);
  char v20 = 0LL;
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_1002BB998((uint64_t *)&v20, a1 + 136);
  char v12 = sub_10012D6D8(a2);
  if (sub_10012D514((uint64_t)v12))
  {
    uint64_t v13 = sub_10012DB30((uint64_t)v12);
    uint64_t v14 = v20;
    if (v20 != v21)
    {
      uint64_t v15 = v13;
      do
      {
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v14[4] + 8LL))( v14[4],  v15,  a3,  a4,  a5,  a6);
        uint64_t v16 = v14[1];
        if (v16)
        {
          do
          {
            char v17 = (void **)v16;
            uint64_t v16 = (void *)*v16;
          }

          while (v16);
        }

        else
        {
          do
          {
            char v17 = (void **)v14[2];
            BOOL v18 = *v17 == v14;
            uint64_t v14 = v17;
          }

          while (!v18);
        }

        uint64_t v14 = v17;
      }

      while (v17 != v21);
    }
  }

  sub_10023BF24((uint64_t)&v20, v21[0]);
  sub_100242FAC((uint64_t)v22);
  return 0LL;
}

void sub_1002A86F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  char v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_10023BF24((uint64_t)va, v5);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A8724(uint64_t a1, uint64_t a2)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 8);
  char v12 = 0LL;
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_1002BB998((uint64_t *)&v12, a1 + 136);
  char v4 = sub_10012D6D8(*(unsigned __int16 *)(a2 + 2));
  if (sub_10012D514((uint64_t)v4))
  {
    uint64_t v5 = sub_10012DB30((uint64_t)v4);
    uint64_t v6 = v12;
    if (v12 != v13)
    {
      uint64_t v7 = v5;
      do
      {
        (*(void (**)(void *, uint64_t, uint64_t))(*v6[4] + 16LL))(v6[4], a2, v7);
        char v8 = v6[1];
        if (v8)
        {
          do
          {
            char v9 = (void **)v8;
            char v8 = (void *)*v8;
          }

          while (v8);
        }

        else
        {
          do
          {
            char v9 = (void **)v6[2];
            BOOL v10 = *v9 == v6;
            uint64_t v6 = v9;
          }

          while (!v10);
        }

        uint64_t v6 = v9;
      }

      while (v9 != v13);
    }
  }

  sub_10023BF24((uint64_t)&v12, v13[0]);
  sub_100242FAC((uint64_t)v14);
  return 0LL;
}

void sub_1002A8814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_10023BF24((uint64_t)va, v5);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A8844(uint64_t a1, unsigned __int16 *a2)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 8);
  char v12 = 0LL;
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_1002BB998((uint64_t *)&v12, a1 + 136);
  char v4 = sub_10012D6D8(*a2);
  if (sub_10012D514((uint64_t)v4))
  {
    uint64_t v5 = sub_10012DB30((uint64_t)v4);
    uint64_t v6 = v12;
    if (v12 != v13)
    {
      uint64_t v7 = v5;
      do
      {
        (*(void (**)(void *, unsigned __int16 *, uint64_t))(*v6[4] + 24LL))(v6[4], a2, v7);
        char v8 = v6[1];
        if (v8)
        {
          do
          {
            char v9 = (void **)v8;
            char v8 = (void *)*v8;
          }

          while (v8);
        }

        else
        {
          do
          {
            char v9 = (void **)v6[2];
            BOOL v10 = *v9 == v6;
            uint64_t v6 = v9;
          }

          while (!v10);
        }

        uint64_t v6 = v9;
      }

      while (v9 != v13);
    }
  }

  sub_10023BF24((uint64_t)&v12, v13[0]);
  sub_100242FAC((uint64_t)v14);
  return 0LL;
}

void sub_1002A8934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_10023BF24((uint64_t)va, v5);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A8964(uint64_t a1, uint64_t a2)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 8);
  char v12 = 0LL;
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_1002BB998((uint64_t *)&v12, a1 + 136);
  char v4 = sub_10012D6D8(*(unsigned __int16 *)(a2 + 7));
  if (sub_10012D514((uint64_t)v4))
  {
    uint64_t v5 = sub_10012DB30((uint64_t)v4);
    uint64_t v6 = v12;
    if (v12 != v13)
    {
      uint64_t v7 = v5;
      do
      {
        (*(void (**)(void *, uint64_t, uint64_t))(*v6[4] + 32LL))(v6[4], a2, v7);
        char v8 = v6[1];
        if (v8)
        {
          do
          {
            char v9 = (void **)v8;
            char v8 = (void *)*v8;
          }

          while (v8);
        }

        else
        {
          do
          {
            char v9 = (void **)v6[2];
            BOOL v10 = *v9 == v6;
            uint64_t v6 = v9;
          }

          while (!v10);
        }

        uint64_t v6 = v9;
      }

      while (v9 != v13);
    }
  }

  sub_10023BF24((uint64_t)&v12, v13[0]);
  sub_100242FAC((uint64_t)v14);
  return 0LL;
}

void sub_1002A8A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_10023BF24((uint64_t)va, v5);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A8A84(uint64_t a1, uint64_t a2)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 8);
  char v12 = 0LL;
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_1002BB998((uint64_t *)&v12, a1 + 136);
  char v4 = sub_10012D6D8(*(unsigned __int16 *)(a2 + 2));
  if (sub_10012D514((uint64_t)v4))
  {
    uint64_t v5 = sub_10012DB30((uint64_t)v4);
    uint64_t v6 = v12;
    if (v12 != v13)
    {
      uint64_t v7 = v5;
      do
      {
        (*(void (**)(void *, uint64_t, uint64_t))(*v6[4] + 40LL))(v6[4], a2, v7);
        char v8 = v6[1];
        if (v8)
        {
          do
          {
            char v9 = (void **)v8;
            char v8 = (void *)*v8;
          }

          while (v8);
        }

        else
        {
          do
          {
            char v9 = (void **)v6[2];
            BOOL v10 = *v9 == v6;
            uint64_t v6 = v9;
          }

          while (!v10);
        }

        uint64_t v6 = v9;
      }

      while (v9 != v13);
    }
  }

  sub_10023BF24((uint64_t)&v12, v13[0]);
  sub_100242FAC((uint64_t)v14);
  return 0LL;
}

void sub_1002A8B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_10023BF24((uint64_t)va, v5);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A8BA4(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3 = ((unint64_t)a2[2] << 40) | ((unint64_t)a2[3] << 32) | ((unint64_t)a2[4] << 24) | ((unint64_t)a2[5] << 16) | ((unint64_t)a2[6] << 8) | a2[7];
  char v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)a2;
    sub_1005BF8CC(v3, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if (a2[8]) {
      uint64_t v7 = "ACL";
    }
    else {
      uint64_t v7 = "SCO";
    }
    int v8 = a2[10];
    int v9 = a2[11];
    if (a2[9]) {
      BOOL v10 = "eLNAOn";
    }
    else {
      BOOL v10 = "eLNAByPass";
    }
    *(_DWORD *)std::stringbuf::string_type buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v22 = 2080;
    char v23 = p_p;
    if (v8) {
      char v11 = "BTSC";
    }
    else {
      char v11 = "BTMC";
    }
    __int16 v24 = 2080;
    char v25 = v7;
    char v12 = "Central";
    __int16 v26 = 2080;
    if (v9) {
      char v12 = "Peripheral";
    }
    char v27 = v10;
    __int16 v28 = 2080;
    char v29 = v11;
    __int16 v30 = 2080;
    char v31 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Scan Core Classic Connection Event: lm handle: 0x%x, BT address: %s, link type: %s, Elna mode: %s, Initiated Core: %s, role: %s",  buf,  0x3Au);
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10088DB48);
  }
  uint64_t v13 = sub_10040007C(off_1008D5F48, v3, 0);
  if (v13)
  {
    uint64_t v14 = (uint64_t)v13;
    int v15 = a2[10];
    if (a2[10])
    {
      if (v15 == 1)
      {
        ++v13[707];
      }

      else
      {
        char v17 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
        {
          sub_1003CF00C(v14, buf);
          if (SBYTE3(v25) >= 0) {
            char v19 = buf;
          }
          else {
            char v19 = *(uint8_t **)buf;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 67109378;
          HIDWORD(__p.__r_.__value_.__r.__words[0]) = v15;
          LOWORD(__p.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v19;
          _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Scan Core Classic Connection Event: Invalid core initiator value %d for %{public}s",  (uint8_t *)&__p,  0x12u);
          if (SBYTE3(v25) < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
    }

    else
    {
      ++v13[708];
    }
  }

  else
  {
    uint64_t v16 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100667D90(v3, v16);
    }
  }

  return 0LL;
}

uint64_t sub_1002A8E78(uint64_t a1, const void *a2)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10088DB08);
  }
  sub_1005EDE4C((uint64_t)off_1008D6600, __dst);
  return 0LL;
}

uint64_t sub_1002A8EE0(uint64_t a1, _DWORD *a2)
{
  unint64_t v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG)) {
    sub_100667E40(a2, v3);
  }
  return 0LL;
}

uint64_t sub_1002A8F2C(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  v4[0] = *(_OWORD *)a2;
  v4[1] = v2;
  int v5 = *(_DWORD *)(a2 + 32);
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_10088DB68);
  }
  sub_10044D278((uint64_t)off_1008D6190, v4);
  return 0LL;
}

void sub_1002A8F90(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088DB88);
  }
  *(void *)uuid_t uu = 0LL;
  uint64_t v16 = 0LL;
  sub_1005C8684((uint64_t)off_1008D5F28, a3, 0, 1u, 0LL, 0LL, uu);
  if (uuid_is_null(uu))
  {
    int v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int16 *)(a2 + 204);
      v14[0] = 67109120;
      v14[1] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Something is wrong. Skipping update LE metrics connectionHandle : %d",  (uint8_t *)v14,  8u);
    }
  }

  else if (*(_WORD *)(a2 + 18))
  {
    if ((unsigned __int16)(*(_WORD *)(a2 + 18) + 127) <= 0x93u)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10088DB88);
      }
      uint64_t v7 = off_1008D5F28;
      int v8 = sub_100241F94(uu);
      int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      sub_1005D442C((uint64_t)v7, v9, *(__int16 *)(a2 + 18));
    }

    unsigned int v10 = *(unsigned __int16 *)(a2 + 21) + *(unsigned __int16 *)(a2 + 23);
    if (v10)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10088DB88);
      }
      char v11 = off_1008D5F28;
      char v12 = sub_100241F94(uu);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      sub_1005D4538((uint64_t)v11, v13, 100 * *(unsigned __int16 *)(a2 + 23) / v10);
    }
  }

void sub_1002A9174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A9190(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v4 = *(unsigned __int16 *)(a2 + 202);
  if (*(_WORD *)(a2 + 202))
  {
    if (*a3)
    {
LABEL_3:
      int v6 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(unsigned __int16 *)(a2 + 6);
        int v8 = *(unsigned __int16 *)(a2 + 14);
        int v9 = *(__int16 *)(a2 + 16);
        int v10 = *(unsigned __int16 *)(a2 + 30);
        int v11 = *(unsigned __int16 *)(a2 + 32);
        int v12 = *(unsigned __int16 *)(a2 + 34);
        int v13 = *(unsigned __int16 *)(a2 + 36);
        int v14 = *(unsigned __int8 *)(a2 + 185);
        int v15 = *(unsigned __int8 *)(a2 + 187);
        int v16 = *(unsigned __int8 *)(a2 + 189);
        int v17 = *(unsigned __int8 *)(a2 + 191);
        int v18 = *(unsigned __int8 *)(a2 + 193);
        int v19 = *(unsigned __int8 *)(a2 + 195);
        int v20 = *(unsigned __int8 *)(a2 + 197);
        int v21 = *(unsigned __int8 *)(a2 + 199);
        int v22 = *(unsigned __int8 *)(a2 + 201);
        int v23 = *(unsigned __int8 *)(a2 + 190);
        int v24 = *(unsigned __int8 *)(a2 + 192);
        int v25 = *(unsigned __int8 *)(a2 + 194);
        int v26 = *(unsigned __int8 *)(a2 + 184);
        int v27 = *(unsigned __int8 *)(a2 + 186);
        int v28 = *(unsigned __int8 *)(a2 + 188);
        int v29 = *(unsigned __int8 *)(a2 + 196);
        int v30 = *(unsigned __int8 *)(a2 + 198);
        int v51 = *(unsigned __int8 *)(a2 + 200);
        *(_DWORD *)std::stringbuf::string_type buf = 67115520;
        int v53 = v4;
        __int16 v54 = 1024;
        int v55 = v7;
        __int16 v56 = 1024;
        int v57 = v8;
        __int16 v58 = 1024;
        int v59 = v9;
        __int16 v60 = 1024;
        int v61 = v10;
        __int16 v62 = 1024;
        int v63 = v11;
        __int16 v64 = 1024;
        int v65 = v12;
        __int16 v66 = 1024;
        int v67 = v13;
        __int16 v68 = 1024;
        int v69 = v14;
        __int16 v70 = 1024;
        int v71 = v15;
        __int16 v72 = 1024;
        int v73 = v16;
        __int16 v74 = 1024;
        int v75 = v17;
        __int16 v76 = 1024;
        int v77 = v18;
        __int16 v78 = 1024;
        int v79 = v19;
        __int16 v80 = 1024;
        int v81 = v20;
        __int16 v82 = 1024;
        int v83 = v21;
        __int16 v84 = 1024;
        int v85 = v22;
        __int16 v86 = 1024;
        int v87 = v23;
        __int16 v88 = 1024;
        int v89 = v24;
        __int16 v90 = 1024;
        int v91 = v25;
        __int16 v92 = 1024;
        int v93 = v26;
        __int16 v94 = 1024;
        int v95 = v27;
        __int16 v96 = 1024;
        int v97 = v28;
        __int16 v98 = 1024;
        int v99 = v29;
        __int16 v100 = 1024;
        int v101 = v30;
        __int16 v102 = 1024;
        int v103 = v51;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Classic [0x%x]: time %3d, coex %3d, rssi %3d, tx [S=%3d:F=%3d], rx [S=%3d:F=%3d], Pkt Tx{%d %d %d}{%d %d %d}{% d %d %d} Rx{%d %d %d}{%d %d %d}{%d %d %d}",  buf,  0x9Eu);
      }

      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_10088DB48);
      }
      char v31 = sub_1003FFEB0(off_1008D5F48, (uint64_t)a3, 1);
      if (v31)
      {
        uint64_t v32 = (uint64_t)v31;
        int v33 = *(__int16 *)(a2 + 16);
        int v34 = *(unsigned __int16 *)(a2 + 36);
        unsigned int v35 = *(unsigned __int16 *)(a2 + 34) + v34;
        if (v35) {
          sub_1003D598C(v32, 100 * v34 / v35);
        }
      }

      return;
    }

    uint64_t v36 = 1LL;
    while (v36 != 6)
    {
      if (a3[v36++])
      {
        break;
      }
    }
  }

  __int128 v38 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v39 = *(unsigned __int16 *)(a2 + 204);
    int v40 = *(unsigned __int16 *)(a2 + 4);
    int v41 = *(unsigned __int16 *)(a2 + 12);
    int v42 = *(__int16 *)(a2 + 18);
    int v43 = *(unsigned __int16 *)(a2 + 21);
    int v44 = *(unsigned __int16 *)(a2 + 23);
    int v45 = *(unsigned __int16 *)(a2 + 25);
    int v46 = *(unsigned __int16 *)(a2 + 27);
    int v47 = *(unsigned __int8 *)(a2 + 180);
    int v48 = *(unsigned __int8 *)(a2 + 181);
    int v49 = *(unsigned __int8 *)(a2 + 182);
    int v50 = *(unsigned __int8 *)(a2 + 183);
    *(_DWORD *)std::stringbuf::string_type buf = 67111936;
    int v53 = v39;
    __int16 v54 = 1024;
    int v55 = v40;
    __int16 v56 = 1024;
    int v57 = v41;
    __int16 v58 = 1024;
    int v59 = v42;
    __int16 v60 = 1024;
    int v61 = v43;
    __int16 v62 = 1024;
    int v63 = v44;
    __int16 v64 = 1024;
    int v65 = v45;
    __int16 v66 = 1024;
    int v67 = v46;
    __int16 v68 = 1024;
    int v69 = v47;
    __int16 v70 = 1024;
    int v71 = v48;
    __int16 v72 = 1024;
    int v73 = v49;
    __int16 v74 = 1024;
    int v75 = v50;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Le [0x%x]: time %3d, coex %3d, rssi %3d, tx [S=%3d:F=%3d], rx [S=%3d:F=%3d], 1M {rx %d, tx %d}, 2M {rx %d, tx %d}",  buf,  0x4Au);
  }

uint64_t sub_1002A9528(uint64_t a1, _WORD *a2)
{
  __int16 v4 = a2[2];
  __int16 v5 = a2[3];
  __int16 v6 = a2[4];
  __int16 v7 = a2[5];
  __int16 v23 = a2[9];
  int v24 = *(unsigned __int16 *)((char *)a2 + 23);
  int v26 = *(unsigned __int16 *)((char *)a2 + 21);
  int v27 = *(unsigned __int16 *)((char *)a2 + 25);
  int v25 = *(unsigned __int16 *)((char *)a2 + 27);
  int v8 = (unsigned __int16)a2[16];
  int v28 = (unsigned __int16)a2[15];
  int v29 = (unsigned __int16)a2[17];
  int v9 = (unsigned __int16)a2[18];
  *(void *)(a1 + 1216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_10088DB68);
  }
  unsigned __int16 v10 = v6 + v4;
  unsigned __int16 v11 = v7 + v5;
  char v12 = sub_100449464(off_1008D6190);
  if (*(_BYTE *)(a1 + 1434)
    || (unsigned int v13 = v11 + v10, v13 > *(unsigned __int16 *)(a1 + 1430))
    || v13 < *(unsigned __int16 *)(a1 + 1432))
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10088DB28);
    }
    int v14 = off_1008D5F08;
    int v15 = sub_10012D6D8((unsigned __int16)a2[102]);
    sub_1005B5B68((uint64_t)v14, (uint64_t)v15, v10, v11, v12, *(void *)(a1 + 1216), 0);
  }

  if (*(_BYTE *)(a1 + 1435))
  {
    __int16 v16 = *(_WORD *)(a1 + 1438);
    unsigned __int16 v17 = (unsigned __int16)(v16 + 1) <= 0xFFF0u ? v16 + 1 : 0;
    *(_WORD *)(a1 + 143_Block_object_dispose(va, 8) = v17;
    if (!(v17 % *(unsigned __int16 *)(a1 + 1436)))
    {
      unsigned int v18 = 100 * v9 / (v9 + v29);
      uint64_t v19 = *(void *)(a1 + 1216);
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_10088DB28);
      }
      int v20 = off_1008D5F08;
      int v21 = sub_10012D6D8((unsigned __int16)a2[102]);
      LOWORD(v30) = v23;
      WORD1(v30) = 100 * v24 / (v24 + v26);
      WORD2(v30) = v26;
      WORD3(v30) = 100 * v8 / (v8 + v28);
      WORD4(v30) = v28;
      WORD5(v30) = 100 * v25 / (v25 + v27);
      WORD6(v30) = v27;
      HIWORD(v30) = v18;
      __int16 v31 = v29;
      int v32 = 0;
      __int16 v33 = 0;
      uint64_t v34 = v19;
      sub_1005B5C5C((uint64_t)v20, (uint64_t)v21, &v30, 0);
    }
  }

  return 0LL;
}

uint64_t sub_1002A97AC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    __int16 v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int16 *)(a2 + 202);
      int v7 = *(unsigned __int16 *)(a2 + 204);
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PhyStats caused system to wake up -- Classic connection handle = 0x%02x, LE connection handle = 0x%02x",  buf,  0xEu);
    }

    uint64_t v8 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 8LL))(v8))
    {
      int v9 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(unsigned __int16 *)(a2 + 202);
        int v11 = *(unsigned __int16 *)(a2 + 204);
        *(_DWORD *)std::stringbuf::string_type buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PhyStats caused system to wake up -- Classic connection handle = 0x%02x, LE connection handle = 0x%02x -- gett ing ABCSnapshot ",  buf,  0xEu);
      }

      sub_10040CA80("PhyStats", "parseWakeupCause", 60.0);
    }
  }

  if (*(_BYTE *)(a1 + 1194) && *(_WORD *)(a2 + 18)) {
    *(_WORD *)(a2 + 1_Block_object_dispose(va, 8) = *(_WORD *)(a1 + 1196);
  }
  if (*(_BYTE *)(a1 + 1195) && *(_WORD *)(a2 + 16)) {
    *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 1198);
  }
  uint64_t v12 = sub_1002E6E9C();
  if ((sub_1002D0A04(v12) & 1) == 0)
  {
    unsigned int v13 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_100667F20(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }

  uint64_t v21 = sub_1002E6E9C();
  uint64_t result = sub_1002D0A04(v21);
  if ((_DWORD)result)
  {
    __int128 v23 = *(_OWORD *)(a2 + 176);
    __int128 v95 = *(_OWORD *)(a2 + 160);
    v96[0] = v23;
    *(_OWORD *)((char *)v96 + 14) = *(_OWORD *)(a2 + 190);
    __int128 v24 = *(_OWORD *)(a2 + 112);
    __int128 v91 = *(_OWORD *)(a2 + 96);
    __int128 v92 = v24;
    __int128 v25 = *(_OWORD *)(a2 + 144);
    __int128 v93 = *(_OWORD *)(a2 + 128);
    __int128 v94 = v25;
    __int128 v26 = *(_OWORD *)(a2 + 48);
    __int128 v87 = *(_OWORD *)(a2 + 32);
    __int128 v88 = v26;
    __int128 v27 = *(_OWORD *)(a2 + 80);
    __int128 v89 = *(_OWORD *)(a2 + 64);
    __int128 v90 = v27;
    __int128 v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)a2;
    __int128 v86 = v28;
    if (*(_BYTE *)(a1 + 1193))
    {
      sub_10008E758(0LL, (uint64_t)buf);
      __int128 v29 = v96[0];
      *(_OWORD *)(a1 + 1384) = v95;
      *(_OWORD *)(a1 + 1400) = v29;
      *(_OWORD *)(a1 + 1414) = *(_OWORD *)((char *)v96 + 14);
      __int128 v30 = v92;
      *(_OWORD *)(a1 + 1320) = v91;
      *(_OWORD *)(a1 + 1336) = v30;
      __int128 v31 = v94;
      *(_OWORD *)(a1 + 1352) = v93;
      *(_OWORD *)(a1 + 136_Block_object_dispose(va, 8) = v31;
      __int128 v32 = v88;
      *(_OWORD *)(a1 + 1256) = v87;
      *(_OWORD *)(a1 + 1272) = v32;
      __int128 v33 = v90;
      *(_OWORD *)(a1 + 128_Block_object_dispose(va, 8) = v89;
      *(_OWORD *)(a1 + 1304) = v33;
      __int128 v34 = v86;
      *(_OWORD *)(a1 + 1sub_1002949E4(v1 + 224) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 1240) = v34;
      *(void *)(a1 + 1216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
      return 0LL;
    }

    int v55 = 0;
    if (sub_1000FF56C((uint64_t)buf, &v55))
    {
      __int128 v35 = v96[0];
      *(_OWORD *)(a1 + 1384) = v95;
      *(_OWORD *)(a1 + 1400) = v35;
      *(_OWORD *)(a1 + 1414) = *(_OWORD *)((char *)v96 + 14);
      __int128 v36 = v92;
      *(_OWORD *)(a1 + 1320) = v91;
      *(_OWORD *)(a1 + 1336) = v36;
      __int128 v37 = v94;
      *(_OWORD *)(a1 + 1352) = v93;
      *(_OWORD *)(a1 + 136_Block_object_dispose(va, 8) = v37;
      __int128 v38 = v88;
      *(_OWORD *)(a1 + 1256) = v87;
      *(_OWORD *)(a1 + 1272) = v38;
      __int128 v39 = v90;
      *(_OWORD *)(a1 + 128_Block_object_dispose(va, 8) = v89;
      *(_OWORD *)(a1 + 1304) = v39;
      __int128 v40 = v86;
      *(_OWORD *)(a1 + 1sub_1002949E4(v1 + 224) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 1240) = v40;
      *(void *)(a1 + 1216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
      sub_1002A9528(a1, (_WORD *)a2);
      uint64_t v41 = sub_100404EB8();
      v71[1] = 3221225472LL;
      __int128 v82 = v94;
      __int128 v83 = v95;
      v84[0] = v96[0];
      *(_OWORD *)((char *)v84 + 14) = *(_OWORD *)((char *)v96 + 14);
      __int128 v78 = v90;
      __int128 v79 = v91;
      __int128 v80 = v92;
      __int128 v81 = v93;
      __int128 v74 = v86;
      __int128 v75 = v87;
      __int128 v76 = v88;
      __int128 v77 = v89;
      v71[0] = _NSConcreteStackBlock;
      v71[2] = sub_1002A9CF8;
      v71[3] = &unk_10088D6E8;
      __int128 v73 = *(_OWORD *)buf;
      int v72 = v55;
      sub_100405384(v41, v71);
      return 0LL;
    }

    uint64_t v42 = sub_1002E6BF0();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v42 + 336LL))(v42) || !*(_WORD *)(a2 + 204))
    {
LABEL_28:
      __int16 v53 = 0;
      int v52 = 0;
      if (*(_WORD *)(a2 + 202))
      {
        int v47 = sub_10012D6D8(*(unsigned __int16 *)(a2 + 202));
        if (sub_10012D514((uint64_t)v47))
        {
          uint64_t v48 = sub_10012DB30((uint64_t)v47);
          int v52 = *(_DWORD *)v48;
          __int16 v53 = *(_WORD *)(v48 + 4);
        }
      }

      uint64_t v49 = sub_100404EB8();
      v56[1] = 3321888768LL;
      __int128 v66 = v94;
      __int128 v67 = v95;
      *(_OWORD *)__int16 v68 = v96[0];
      *(_OWORD *)&v68[14] = *(_OWORD *)((char *)v96 + 14);
      __int128 v62 = v90;
      __int128 v63 = v91;
      __int128 v64 = v92;
      __int128 v65 = v93;
      __int128 v58 = v86;
      __int128 v59 = v87;
      __int128 v60 = v88;
      __int128 v61 = v89;
      v56[0] = _NSConcreteStackBlock;
      v56[2] = sub_1002A9D54;
      _OWORD v56[3] = &unk_10088D708;
      v56[4] = a1;
      __int128 v57 = *(_OWORD *)buf;
      int v69 = v52;
      __int16 v70 = v53;
      sub_100405384(v49, v56);
      if (sub_1002E8D94())
      {
        uint64_t v50 = sub_1002E8D94();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 568LL))(v50, a2);
      }

      return 0LL;
    }

    int v43 = sub_10012D6D8(*(unsigned __int16 *)(a2 + 204));
    if (sub_10012D5EC((uint64_t)v43))
    {
      int v44 = (unsigned __int8 *)sub_10012DADC((uint64_t)v43);
      if (v44)
      {
        unint64_t v45 = ((unint64_t)v44[1] << 40) | ((unint64_t)v44[2] << 32) | ((unint64_t)v44[3] << 24) | ((unint64_t)v44[4] << 16) | ((unint64_t)v44[5] << 8) | v44[6] | ((unint64_t)*v44 << 48);
        if (v45)
        {
          uint64_t v46 = sub_100404EB8();
          v54[0] = _NSConcreteStackBlock;
          v54[1] = 3221225472LL;
          void v54[2] = sub_1002A9D4C;
          v54[3] = &unk_100888050;
          v54[4] = a1;
          v54[5] = a2;
          v54[6] = v45;
          sub_100405384(v46, v54);
          goto LABEL_28;
        }
      }
    }

    int v51 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v52) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "No BT address to update PhyStats",  (uint8_t *)&v52,  2u);
    }

    return 1LL;
  }

  return result;
}

uint64_t sub_1002A9CF8(uint64_t a1)
{
  if (qword_1008D9168 != -1) {
    dispatch_once(&qword_1008D9168, &stru_10088DBA8);
  }
  return sub_100642470(qword_1008D9160, a1 + 36, *(unsigned int *)(a1 + 32));
}

void sub_1002A9D4C(uint64_t a1)
{
}

void sub_1002A9D54(uint64_t a1)
{
}

uint64_t sub_1002A9D60(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 246);
  *(_WORD *)(result + 250) = *(_WORD *)(a2 + 250);
  *(_DWORD *)(result + 246) = v2;
  return result;
}

uint64_t sub_1002A9D78(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 3LL;
  }
  if (sub_1002E8D94())
  {
    uint64_t v5 = sub_1002E8D94();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 528LL))(v5, a2);
  }

  if (a3) {
    sub_10040CA80("HIDLatencyStats", "parseWakeupCause", 60.0);
  }
  return 0LL;
}

uint64_t sub_1002A9DE4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  __int128 v3 = a3[3];
  _DWORD v6[2] = a3[2];
  void v6[3] = v3;
  void v6[4] = a3[4];
  __int128 v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  sub_1001AF5A4(a2, v6);
  return 0LL;
}

uint64_t sub_1002A9E50(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *a2;
    int v5 = *((_DWORD *)a2 + 1);
    int v6 = a2[8];
    int v7 = *((_DWORD *)a2 + 3);
    int v8 = *((_DWORD *)a2 + 4);
    int v9 = *((_DWORD *)a2 + 5);
    int v10 = *((_DWORD *)a2 + 6);
    int v11 = *((_DWORD *)a2 + 7);
    int v12 = *((_DWORD *)a2 + 8);
    int v14 = *((_DWORD *)a2 + 9);
    int v13 = *((_DWORD *)a2 + 10);
    int v15 = *((_DWORD *)a2 + 11);
    int v16 = *((_DWORD *)a2 + 12);
    int v17 = (char)a2[52];
    int v18 = (char)a2[53];
    int v19 = (char)a2[54];
    v21[0] = 67112960;
    v21[1] = v4;
    __int16 v22 = 1024;
    int v23 = v5;
    __int16 v24 = 1024;
    int v25 = v6;
    __int16 v26 = 1024;
    int v27 = v7;
    __int16 v28 = 1024;
    int v29 = v8;
    __int16 v30 = 1024;
    int v31 = v9;
    __int16 v32 = 1024;
    int v33 = v10;
    __int16 v34 = 1024;
    int v35 = v11;
    __int16 v36 = 1024;
    int v37 = v12;
    __int16 v38 = 1024;
    int v39 = v14;
    __int16 v40 = 1024;
    int v41 = v13;
    __int16 v42 = 1024;
    int v43 = v15;
    __int16 v44 = 1024;
    int v45 = v16;
    __int16 v46 = 1024;
    int v47 = v17;
    __int16 v48 = 1024;
    int v49 = v18;
    __int16 v50 = 1024;
    int v51 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "vseAdvStatsEvent - ver %u duration %u (secs) instance %u num ADVs [total %u NonExtended %u Extended %u] Ch [37 %u 38 %u 39 %u] FailedOnAllCh %u Denied by [Coex %u BT %u Others %u] txPower [min %d max %d mode %d]",  (uint8_t *)v21,  0x62u);
  }

  return 0LL;
}

uint64_t sub_1002A9F9C(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_1002A9FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return 0LL;
}

uint64_t sub_1002A9FE8(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    return 3LL;
  }
  __int128 v3 = (os_log_s *)qword_1008F7578;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v4)
  {
    int v6 = *a2;
    sub_1002AA0F8(a2[1], __p);
    if (v10 >= 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    int v8 = a2[2];
    *(_DWORD *)std::stringbuf::string_type buf = 67109634;
    int v12 = v6;
    __int16 v13 = 2080;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "vseAntennaRestrictEvent - version %u status %s AntennaBlockingBitMask 0x%02x",  buf,  0x18u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  return result;
}

void *sub_1002AA0F8@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 0xB) {
    int v2 = "Unknown";
  }
  else {
    int v2 = off_10088DC28[(char)a1];
  }
  return sub_10002418C(a2, v2);
}

uint64_t sub_1002AA124(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    return 3LL;
  }
  __int128 v3 = (os_log_s *)qword_1008F7578;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v4)
  {
    int v6 = *a2;
    int v7 = a2[7];
    int v8 = a2[4];
    int v9 = "Switched";
    if (!a2[8]) {
      int v9 = "Not Switched";
    }
    if (a2[9]) {
      char v10 = "Gated By Hybrid Coex";
    }
    else {
      char v10 = "None";
    }
    v11[0] = 67110146;
    v11[1] = v6;
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 2080;
    int v17 = v9;
    __int16 v18 = 2080;
    int v19 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "vseAntennaDiversityEvent - version %u ThresholdTriggered %u DiversityRSSIThreshold %u DiversityAntennaSwitched %s ReasonForGating %s",  (uint8_t *)v11,  0x28u);
    return 0LL;
  }

  return result;
}

void *sub_1002AA248@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 0x12) {
    int v2 = "NA";
  }
  else {
    int v2 = off_10088DC88[(char)a1];
  }
  return sub_10002418C(a2, v2);
}

uint64_t sub_1002AA274(uint64_t a1, __int128 *a2, char a3)
{
  uint64_t v6 = sub_1002E6E9C();
  if (sub_1002D0A74(v6))
  {
    __int128 v7 = a2[9];
    __int128 v23 = a2[8];
    __int128 v24 = v7;
    *(_OWORD *)int v25 = a2[10];
    __int128 v8 = a2[5];
    __int128 v19 = a2[4];
    __int128 v20 = v8;
    __int128 v9 = a2[7];
    __int128 v21 = a2[6];
    __int128 v22 = v9;
    __int128 v10 = a2[1];
    __int128 v15 = *a2;
    __int128 v16 = v10;
    __int128 v11 = a2[3];
    __int128 v17 = a2[2];
    __int128 v18 = v11;
    *(void *)&_BYTE v25[14] = *(void *)((char *)a2 + 174);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002AA370;
    block[3] = &unk_10088D738;
    void block[4] = a1;
    char v26 = a3;
    dispatch_async(global_queue, block);
  }

  return 0LL;
}

_BYTE *sub_1002AA370(uint64_t a1)
{
  __int16 v61 = 0;
  int v60 = 0;
  char v59 = 0;
  sub_100242CA4(&v59);
  int v2 = sub_10012D6D8(*(unsigned __int16 *)(a1 + 40));
  BOOL v3 = sub_10012D5EC((uint64_t)v2);
  if (v3)
  {
    *((_BYTE *)v2 + 2sub_100242FAC(v40 - 80) = *(_BYTE *)(a1 + 222);
LABEL_4:
    sub_100242CD0(&v59);
    __int16 v48 = 0LL;
    goto LABEL_5;
  }

  sub_100242CD0(&v59);
  *(_DWORD *)__int128 v62 = v60;
  *(_WORD *)&void v62[4] = v61;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10088DB48);
  }
  __int16 v48 = sub_1003FFEB0(off_1008D5F48, (uint64_t)v62, 1);
LABEL_5:
  uint64_t v4 = 0LL;
  LOWORD(v5) = 0;
  int v6 = 0;
  memset(&v58, 0, sizeof(v58));
  memset(&v57, 0, sizeof(v57));
  memset(&v56, 0, sizeof(v56));
  memset(&v55, 0, sizeof(v55));
  memset(&v54, 0, sizeof(v54));
  memset(&v53, 0, sizeof(v53));
  do
  {
    std::to_string((std::string *)v62, *(char *)(a1 + v4 + 42));
    if (v62[23] >= 0) {
      __int128 v7 = v62;
    }
    else {
      __int128 v7 = *(const std::string::value_type **)v62;
    }
    if (v62[23] >= 0) {
      std::string::size_type v8 = v62[23];
    }
    else {
      std::string::size_type v8 = *(void *)&v62[8];
    }
    std::string::append(&v58, v7, v8);
    if ((v62[23] & 0x80000000) != 0) {
      operator delete(*(void **)v62);
    }
    std::to_string((std::string *)v62, *(char *)(a1 + v4 + 72));
    if (v62[23] >= 0) {
      __int128 v9 = v62;
    }
    else {
      __int128 v9 = *(const std::string::value_type **)v62;
    }
    if (v62[23] >= 0) {
      std::string::size_type v10 = v62[23];
    }
    else {
      std::string::size_type v10 = *(void *)&v62[8];
    }
    std::string::append(&v57, v9, v10);
    if ((v62[23] & 0x80000000) != 0) {
      operator delete(*(void **)v62);
    }
    std::string::append(&v58, " ");
    std::string::append(&v57, " ");
    v6 += *(char *)(a1 + v4 + 42);
    int v5 = (__int16)(v5 + *(char *)(a1 + v4++ + 72));
  }

  while (v4 != 30);
  BOOL v46 = v3;
  uint64_t v47 = (uint64_t)v2;
  uint64_t v11 = 0LL;
  int v12 = 0;
  int v13 = 0;
  do
  {
    uint64_t v14 = a1 + v11;
    if ((v11 & 1) != 0)
    {
      unint64_t v22 = *(char *)(v14 + 102);
      __int128 v23 = "Unknown";
      if (v22 <= 3) {
        __int128 v23 = off_10088DD40[v22];
      }
      sub_10002418C(v62, v23);
      if (v62[23] >= 0) {
        __int128 v24 = v62;
      }
      else {
        __int128 v24 = *(const std::string::value_type **)v62;
      }
      if (v62[23] >= 0) {
        std::string::size_type v25 = v62[23];
      }
      else {
        std::string::size_type v25 = *(void *)&v62[8];
      }
      std::string::append(&v55, v24, v25);
      if ((v62[23] & 0x80000000) != 0) {
        operator delete(*(void **)v62);
      }
      sub_1002AA248(*(unsigned __int8 *)(a1 + v11 + 162), v62);
      if (v62[23] >= 0) {
        char v26 = v62;
      }
      else {
        char v26 = *(const std::string::value_type **)v62;
      }
      if (v62[23] >= 0) {
        std::string::size_type v27 = v62[23];
      }
      else {
        std::string::size_type v27 = *(void *)&v62[8];
      }
      std::string::append(&v53, v26, v27);
      if ((v62[23] & 0x80000000) != 0) {
        operator delete(*(void **)v62);
      }
      std::string::append(&v55, " ");
      __int128 v21 = &v53;
    }

    else
    {
      unint64_t v15 = *(char *)(v14 + 102);
      __int128 v16 = "Unknown";
      if (v15 <= 3) {
        __int128 v16 = off_10088DD20[v15];
      }
      sub_10002418C(v62, v16);
      if (v62[23] >= 0) {
        __int128 v17 = v62;
      }
      else {
        __int128 v17 = *(const std::string::value_type **)v62;
      }
      if (v62[23] >= 0) {
        std::string::size_type v18 = v62[23];
      }
      else {
        std::string::size_type v18 = *(void *)&v62[8];
      }
      std::string::append(&v56, v17, v18);
      if ((v62[23] & 0x80000000) != 0) {
        operator delete(*(void **)v62);
      }
      sub_1002AA248(*(unsigned __int8 *)(a1 + v11 + 162), v62);
      if (v62[23] >= 0) {
        __int128 v19 = v62;
      }
      else {
        __int128 v19 = *(const std::string::value_type **)v62;
      }
      if (v62[23] >= 0) {
        std::string::size_type v20 = v62[23];
      }
      else {
        std::string::size_type v20 = *(void *)&v62[8];
      }
      std::string::append(&v54, v19, v20);
      if ((v62[23] & 0x80000000) != 0) {
        operator delete(*(void **)v62);
      }
      std::string::append(&v56, " ");
      __int128 v21 = &v54;
    }

    std::string::append(v21, " ");
    v12 += *(unsigned __int8 *)(v14 + 102);
    v13 += *(unsigned __int8 *)(a1 + v11++ + 162);
  }

  while (v11 != 60);
  __int16 v28 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = *(unsigned __int16 *)(a1 + 40);
    __int16 v30 = "Yes";
    if (!*(_BYTE *)(a1 + 222)) {
      __int16 v30 = "No";
    }
    int v31 = &v58;
    if ((v58.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v31 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    __int16 v32 = &v57;
    if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v32 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    int v33 = &v56;
    if ((v56.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v33 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    __int16 v34 = &v55;
    if ((v55.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v34 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    int v35 = &v54;
    if ((v54.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v35 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    __int16 v36 = &v53;
    if ((v53.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v36 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int128 v62 = 67111170;
    *(_DWORD *)&void v62[4] = v29;
    *(_WORD *)&v62[8] = 1024;
    *(_DWORD *)&v62[10] = v29;
    *(_WORD *)&v62[14] = 2080;
    *(void *)&v62[16] = v30;
    *(_WORD *)&v62[24] = 2082;
    *(void *)&v62[26] = v31;
    *(_WORD *)&v62[34] = 2082;
    *(void *)&v62[36] = v32;
    *(_WORD *)&v62[44] = 2082;
    *(void *)&v62[46] = v33;
    *(_WORD *)&v62[54] = 2082;
    __int128 v63 = v34;
    __int16 v64 = 2082;
    __int128 v65 = v35;
    __int16 v66 = 2082;
    __int128 v67 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Disconnect connection handle: 0x%x (%d) wakeUp: %s SNR: %{public}s RSSI: %{public}s\n Retransmission Rx: %{public}s Retransmission Tx: %{public}s Packet Type Rx: %{public}s Packet Type Tx: %{public}s",  v62,  0x54u);
  }

  memset(v62, 0, sizeof(v62));
  *(_WORD *)__int128 v62 = *(_WORD *)(a1 + 40);
  sub_1002AA248( (((v13 + ((-30583 * (__int16)v13) >> 16)) >> 5)
                    + (((v13 + ((-30583 * (__int16)v13) >> 16)) & 0x8000) >> 15)),
    &v51);
  if ((v62[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v62[16]);
  }
  *(_OWORD *)&v62[16] = v51;
  *(void *)&v62[32] = v52;
  *(void *)&v62[48] = v48;
  sub_1001B998C(v47, &v62[2]);
  v62[44] = v46;
  uint64_t v37 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 8LL))(v37))
  {
    uint64_t v38 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v38 + 408LL))(v38))
    {
      if (v5 >= 30 && v46)
      {
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_10088DB28);
        }
        id v39 = sub_10059A5A8((uint64_t)off_1008D5F08, v47);
        __int16 v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10088DB88);
        }
        int v41 = off_1008D5F28;
        sub_10002418C(__p, "BluetoothTVRemote");
        int v42 = sub_1005CE5A8((uint64_t)v41, v40, (uint64_t)__p);
        int v43 = v42;
        if (v50 < 0)
        {
          operator delete(__p[0]);
          if (!v43)
          {
LABEL_98:

            goto LABEL_99;
          }
        }

        else if (!v42)
        {
          goto LABEL_98;
        }

        sub_10040CA80("AppleTVInternal", "AppleTVRemoteDisconnectionInvalidRSSI", 60.0);
        goto LABEL_98;
      }
    }
  }

void sub_1002AAAE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
}

uint64_t sub_1002AABF4(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_10012D6D8(a2);
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "HDR PPT = %d", (uint8_t *)v7, 8u);
  }

  return 0LL;
}

uint64_t sub_1002AACBC(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_10012D6D8(a2);
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "HDR Change connection Packet Type = %d",  (uint8_t *)v7,  8u);
  }

  return 0LL;
}

uint64_t sub_1002AAD84(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = sub_10012D6D8(a2);
  uint64_t v5 = sub_10012DB30((uint64_t)v4);
  int v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    int v10 = 67109120;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "HRB Band changed band = %02X", (uint8_t *)&v10, 8u);
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10088DB48);
  }
  int v7 = *(_DWORD *)v5;
  LOWORD(v11) = *(_WORD *)(v5 + 4);
  int v10 = v7;
  std::string::size_type v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v10, 0);
  if (qword_1008D6778 != -1) {
    dispatch_once(&qword_1008D6778, &stru_10088DBC8);
  }
  sub_100201504(qword_1008D6770, (uint64_t)v8, a3);
  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_1008D6170 != -1) {
      dispatch_once(&qword_1008D6170, &stru_10088DBE8);
    }
    sub_10025A820(qword_1008D6168, v5, a3);
  }

  return 0LL;
}

uint64_t sub_1002AAF34(uint64_t a1, int a2, int a3, int a4)
{
  int v6 = sub_10012D6D8(a2);
  uint64_t v7 = sub_10012DB30((uint64_t)v6);
  std::string::size_type v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109376;
    v10[1] = a3;
    __int16 v11 = 1024;
    int v12 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "HRB Band changed Failed, band = %02X, status = %d",  (uint8_t *)v10,  0xEu);
  }

  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_1008D6170 != -1) {
      dispatch_once(&qword_1008D6170, &stru_10088DBE8);
    }
    sub_10025AE7C(qword_1008D6168, v7, a3, a4);
  }

  return 0LL;
}

uint64_t sub_1002AB074(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "HRB Peripheral Allowed Bands Received, bands = %02X",  (uint8_t *)v9,  8u);
  }

  int v6 = sub_10012D6D8(a2);
  uint64_t v7 = sub_10012DB30((uint64_t)v6);
  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_1008D6170 != -1) {
      dispatch_once(&qword_1008D6170, &stru_10088DBE8);
    }
    sub_10025B304(qword_1008D6168, v7);
  }

  return 0LL;
}

uint64_t sub_1002AB188(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "HRB Band Classification Request band = %d",  (uint8_t *)v5,  8u);
  }

  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_1008D6170 != -1) {
      dispatch_once(&qword_1008D6170, &stru_10088DBE8);
    }
    nullsub_63(qword_1008D6168, a2);
  }

  return 0LL;
}

uint64_t sub_1002AB27C( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  __int128 v17 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67110912;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(vsub_100242FAC(v1 - 32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = a3;
    HIWORD(vsub_100242FAC(v1 - 32) = 1024;
    *(_DWORD *)int v33 = a4;
    *(_WORD *)&v33[4] = 1024;
    *(_DWORD *)&v33[6] = a5;
    __int16 v34 = 1024;
    int v35 = a6;
    __int16 v36 = 1024;
    int v37 = a7;
    __int16 v38 = 1024;
    int v39 = a8;
    __int16 v40 = 1024;
    int v41 = a9;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Advanced Sniff Mode Change status = %d lmHandle=%x, mode=%d anchorPointHost=%d anchorPointController=%d maxAge=%d( ms), maxRetry=%d(frames), sniffInterval=%d(slots)",  buf,  0x32u);
  }

  v28[0] = 0LL;
  v28[1] = 0LL;
  sub_100242F28((uint64_t)v28, a1 + 8);
  *(void *)std::stringbuf::string_type buf = 0LL;
  __int16 v32 = 0LL;
  *(void *)int v33 = 0LL;
  sub_1002BB998((uint64_t *)buf, a1 + 136);
  sub_100242F54((uint64_t)v28);
  std::string::size_type v18 = sub_10012D6D8(a3);
  if (sub_10012D514((uint64_t)v18))
  {
    uint64_t v19 = sub_10012DB30((uint64_t)v18);
    std::string::size_type v20 = *(void ***)buf;
    if (*(void ***)buf != &v32)
    {
      uint64_t v21 = v19;
      do
      {
        LOWORD(v27) = a9;
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*v20[4] + 80LL))( v20[4],  a2,  v21,  a4,  a5,  a6,  a7,  a8,  v27);
        unint64_t v22 = v20[1];
        if (v22)
        {
          do
          {
            __int128 v23 = (void **)v22;
            unint64_t v22 = (void *)*v22;
          }

          while (v22);
        }

        else
        {
          do
          {
            __int128 v23 = (void **)v20[2];
            BOOL v24 = *v23 == v20;
            std::string::size_type v20 = v23;
          }

          while (!v24);
        }

        std::string::size_type v20 = v23;
      }

      while (v23 != &v32);
    }
  }

  else
  {
    std::string::size_type v25 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int v29 = 67109120;
      int v30 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "vseAdvancedSniffModeChange Bad lmHandle: %x",  v29,  8u);
    }
  }

  sub_10023BF24((uint64_t)buf, v32);
  sub_100242FAC((uint64_t)v28);
  return 0LL;
}

void sub_1002AB4CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

uint64_t sub_1002AB508(uint64_t a1, int a2, int a3, int a4, int a5)
{
  __int128 v9 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109888;
    v11[1] = a2;
    __int16 v12 = 1024;
    int v13 = a3;
    __int16 v14 = 1024;
    int v15 = a4;
    __int16 v16 = 1024;
    int v17 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Advanced Sniff Anchor Point Timestamp Report lmHandle=%x sniffInterval=%x anchorPointHost=%d anchorPointController=%d",  (uint8_t *)v11,  0x1Au);
  }

  return 0LL;
}

uint64_t sub_1002AB5E0(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109376;
    v7[1] = a2;
    __int16 v8 = 1024;
    int v9 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Flow Status lmHandle=%x flow=%d",  (uint8_t *)v7,  0xEu);
  }

  return 0LL;
}

uint64_t sub_1002AB69C(uint64_t a1, const void *a2, unsigned int a3)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10088DB08);
  }
  sub_1005E8124((uint64_t)off_1008D6600, a2, a3);
  return 0LL;
}

uint64_t sub_1002AB6FC(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "AdvRead Buffer Full VSE", v5, 2u);
  }

  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10088DB08);
  }
  nullsub_63(off_1008D6600, a2);
  return 0LL;
}

uint64_t sub_1002AB7A0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a2 + 6);
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Match Buffer Data Match Event VSE - payload = %d",  (uint8_t *)v6,  8u);
  }

  return 0LL;
}

uint64_t sub_1002AB848(uint64_t a1, _OWORD *a2)
{
  BOOL v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    int v4 = *(_DWORD *)a2;
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Match Buffer Read VSE - native clock = %d",  (uint8_t *)v6,  8u);
  }

  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10088DB08);
  }
  sub_1005EA694((uint64_t)off_1008D6600, a2);
  return 0LL;
}

uint64_t sub_1002AB928(uint64_t a1, uint64_t a2)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10088DB08);
  }
  sub_1005EB568((uint64_t)off_1008D6600, a2);
  return 0LL;
}

uint64_t sub_1002AB980(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x96u);
}

uint64_t sub_1002AB9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 8);
  int v13 = 0LL;
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_1002BB998((uint64_t *)&v13, a1 + 136);
  __int16 v8 = v13;
  if (v13 != v14)
  {
    do
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v8[4] + 48LL))(v8[4], a2, a3, a4);
      int v9 = v8[1];
      if (v9)
      {
        do
        {
          int v10 = (void **)v9;
          int v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          int v10 = (void **)v8[2];
          BOOL v11 = *v10 == v8;
          __int16 v8 = v10;
        }

        while (!v11);
      }

      __int16 v8 = v10;
    }

    while (v10 != v14);
  }

  sub_10023BF24((uint64_t)&v13, v14[0]);
  sub_100242FAC((uint64_t)v15);
  return 0LL;
}

void sub_1002ABAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1002ABAD8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x91u);
}

uint64_t sub_1002ABB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 8);
  int v17 = 0LL;
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_1002BB998((uint64_t *)&v17, a1 + 136);
  __int16 v12 = v17;
  if (v17 != v18)
  {
    do
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v12[4] + 56LL))( v12[4],  a2,  a3,  a4,  a5,  a6);
      int v13 = v12[1];
      if (v13)
      {
        do
        {
          __int16 v14 = (void **)v13;
          int v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          __int16 v14 = (void **)v12[2];
          BOOL v15 = *v14 == v12;
          __int16 v12 = v14;
        }

        while (!v15);
      }

      __int16 v12 = v14;
    }

    while (v14 != v18);
  }

  sub_10023BF24((uint64_t)&v17, v18[0]);
  sub_100242FAC((uint64_t)v19);
  return 0LL;
}

void sub_1002ABC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1002ABC48(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002ABCA4;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 145LL, a3, v4, 0LL);
}

uint64_t sub_1002ABCA4()
{
  return sub_10018CD30();
}

uint64_t sub_1002ABCC4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x92u);
}

uint64_t sub_1002ABD10(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002ABD6C;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 146LL, a3, v4, 0LL);
}

uint64_t sub_1002ABD6C()
{
  return sub_10018CDB8();
}

uint64_t sub_1002ABDA4(int a1, int a2)
{
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "power %d", (uint8_t *)v6, 8u);
  }

  LODWORD(xmmword_1008EFA30) = a2;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0);
}

uint64_t sub_1002ABE8C(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002ABEF8;
  v3[3] = &unk_10087EB20;
  void v3[4] = a2;
  return sub_1002D04D0(a1, 0LL, 1, &stru_10088D758, v3);
}

int sub_1002ABEEC(id a1)
{
  return sub_10018FB88();
}

uint64_t sub_1002ABEF8(uint64_t result)
{
  **(_DWORD **)(result + sub_100242FAC(v1 - 32) = xmmword_1008EFA30;
  return result;
}

uint64_t sub_1002ABF0C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x17u);
}

uint64_t sub_1002ABF58(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002ABFB4;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 23LL, a3, v4, 0LL);
}

uint64_t sub_1002ABFB4()
{
  return sub_10018FC10();
}

uint64_t sub_1002ABFD4(int a1, int a2)
{
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "isWbsSupported %d", (uint8_t *)v6, 8u);
  }

  LOBYTE(xmmword_1008EFA30) = a2;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x93u);
}

uint64_t sub_1002AC0BC(uint64_t a1, uint64_t a2, int a3)
{
  void v4[4] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002AC130;
  v5[3] = &unk_10088D2A8;
  char v6 = a3;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002AC148;
  void v4[3] = &unk_10087EB20;
  return sub_1002D04D0(a1, 147LL, a3, v5, v4);
}

uint64_t sub_1002AC130()
{
  return sub_10018C274();
}

uint64_t sub_1002AC148(uint64_t result)
{
  **(_BYTE **)(result + sub_100242FAC(v1 - 32) = (_BYTE)xmmword_1008EFA30 != 0;
  return result;
}

uint64_t sub_1002AC164(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 8u);
}

uint64_t sub_1002AC1B0(uint64_t a1, uint64_t a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002AC218;
  v5[3] = &unk_10088D468;
  void v5[4] = a2;
  char v6 = a3;
  char v7 = a4;
  return sub_1002D04D0(a1, 8LL, a4, v5, 0LL);
}

uint64_t sub_1002AC218(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 41)) {
    uint64_t v1 = sub_1002AC164;
  }
  else {
    uint64_t v1 = 0LL;
  }
  return sub_10018FD20(*(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32) + 128LL, (uint64_t)v1);
}

uint64_t sub_1002AC240(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x94u);
}

uint64_t sub_1002AC28C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002AC2F4;
  v5[3] = &unk_10088D468;
  void v5[4] = a2;
  char v6 = a3;
  char v7 = a4;
  return sub_1002D04D0(a1, 148LL, a4, v5, 0LL);
}

uint64_t sub_1002AC2F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 41)) {
    uint64_t v1 = sub_1002AC240;
  }
  else {
    uint64_t v1 = 0LL;
  }
  return sub_10018CE40(*(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32) + 128LL, (uint64_t)v1);
}

uint64_t sub_1002AC31C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xADu);
}

uint64_t sub_1002AC368(uint64_t a1, int a2, int a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002AC3CC;
  v5[3] = &unk_10088D268;
  int v6 = a2;
  int v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 173LL, a4, v5, 0LL);
}

uint64_t sub_1002AC3CC()
{
  return sub_10018CF90();
}

uint64_t sub_1002AC3EC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 1u);
}

uint64_t sub_1002AC438(uint64_t a1)
{
  return sub_1002D04D0(a1, 1LL, 1, &stru_10088D778, 0LL);
}

int sub_1002AC450(id a1)
{
  return sub_10018FDE8();
}

uint64_t sub_1002AC460(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 6u);
}

uint64_t sub_1002AC4AC(uint64_t a1)
{
  char v10 = 9;
  int v9 = 134809857;
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 72);
  int v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    BOOL v3 = sub_1002CE354(a1, 1);
    int v4 = sub_1002CE354(a1, 6);
    *(_DWORD *)std::stringbuf::string_type buf = 136446466;
    __int16 v12 = v3;
    __int16 v13 = 2082;
    __int16 v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Sending: %{public}s and %{public}s", buf, 0x16u);
  }

  if (sub_1002CF254(a1, 1LL) && sub_1002CF254(a1, 6LL))
  {
    buf[0] = 0;
    sub_100242CA4(buf);
    int v5 = sub_10018FE70((uint64_t)&v9);
    sub_100242CD0(buf);
    if (!v5)
    {
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
      }
      sub_1004336D8((uint64_t)off_1008D60A8, 6LL);
      sub_100242C98(buf);
      int v5 = sub_10018FDE8();
      sub_100242CD0(buf);
      if (!v5)
      {
        if (qword_1008D60B0 != -1) {
          dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
        }
        int v5 = sub_1004336D8((uint64_t)off_1008D60A8, 1LL);
      }
    }

    sub_1002D06F4(a1, 1u);
    sub_1002D06F4(a1, 6u);
    uint64_t v6 = v5 != 0;
    sub_100242CD8(buf);
  }

  else
  {
    sub_1002D06F4(a1, 1u);
    sub_1002D06F4(a1, 6u);
    uint64_t v6 = 2LL;
  }

  sub_100242FAC((uint64_t)v8);
  return v6;
}

void sub_1002AC6D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002AC70C(int a1, int a2, int a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    __int16 v9 = 1024;
    int v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "connection handle %x rssi %d", (uint8_t *)v8, 0xEu);
  }

  LOBYTE(xmmword_1008EFA30) = a3;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 3u);
}

uint64_t sub_1002AC804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002AC87C;
  v5[3] = &unk_10088D3C8;
  void v5[4] = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002AC88C;
  void v4[3] = &unk_10087EB20;
  return sub_1002D04D0(a1, 3LL, 1, v5, v4);
}

uint64_t sub_1002AC87C(uint64_t a1)
{
  return sub_10018FF04(*(void *)(a1 + 32), (uint64_t)sub_1002AC70C);
}

uint64_t sub_1002AC88C(uint64_t result)
{
  **(_BYTE **)(result + sub_100242FAC(v1 - 32) = xmmword_1008EFA30;
  return result;
}

uint64_t sub_1002AC8A0()
{
  return 0LL;
}

uint64_t sub_1002AC8A8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 1u);
}

uint64_t sub_1002AC8F4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 7u);
}

uint64_t sub_1002AC940(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 9u);
}

uint64_t sub_1002AC98C(uint64_t a1, uint64_t a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 72);
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    int v5 = sub_1002CE354(a1, 1);
    uint64_t v6 = sub_1002CE354(a1, 7);
    int v7 = sub_1002CE354(a1, 9);
    *(_DWORD *)std::stringbuf::string_type buf = 136446722;
    __int16 v12 = v5;
    __int16 v13 = 2082;
    __int16 v14 = v6;
    __int16 v15 = 2082;
    __int16 v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Sending: %{public}s, %{public}s, %{public}s",  buf,  0x20u);
  }

  if (sub_1002CF254(a1, 1LL) && sub_1002CF254(a1, 7LL) && sub_1002CF254(a1, 9LL))
  {
    buf[0] = 0;
    sub_100242CA4(buf);
    uint64_t v8 = sub_10018FDE8();
    sub_100242CD0(buf);
    if (!(_DWORD)v8)
    {
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
      }
      uint64_t v8 = sub_1004336D8((uint64_t)off_1008D60A8, 1LL);
      if (!(_DWORD)v8)
      {
        sub_100242C98(buf);
        uint64_t v8 = sub_10018FFB4();
        sub_100242CD0(buf);
        if (!(_DWORD)v8)
        {
          if (qword_1008D60B0 != -1) {
            dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
          }
          uint64_t v8 = sub_1004336D8((uint64_t)off_1008D60A8, 7LL);
          if (!(_DWORD)v8)
          {
            sub_100242C98(buf);
            uint64_t v8 = sub_10019003C(a2 + 128, (uint64_t)sub_1002AC940);
            sub_100242CD0(buf);
            if (!(_DWORD)v8)
            {
              if (qword_1008D60B0 != -1) {
                dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
              }
              uint64_t v8 = sub_1004336D8((uint64_t)off_1008D60A8, 9LL);
            }
          }
        }
      }
    }

    sub_1002D06F4(a1, 1u);
    sub_1002D06F4(a1, 7u);
    sub_1002D06F4(a1, 9u);
    sub_100242CD8(buf);
  }

  else
  {
    sub_1002D06F4(a1, 1u);
    sub_1002D06F4(a1, 7u);
    sub_1002D06F4(a1, 9u);
    uint64_t v8 = 3601LL;
  }

  sub_100242FAC((uint64_t)v10);
  return v8;
}

void sub_1002ACC54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1002ACC88(uint64_t a1, uint64_t a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 72);
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "setScoRouteI2S16K", v7, 2u);
  }

  BOOL v5 = sub_1002AC98C(a1, a2) != 0;
  sub_100242FAC((uint64_t)v8);
  return v5;
}

void sub_1002ACD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_1002ACD44(uint64_t a1, uint64_t a2)
{
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "setScoRouteI2S8K", v6, 2u);
  }

  return sub_1002AC98C(a1, a2) != 0;
}

uint64_t sub_1002ACDD0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xFu);
}

uint64_t sub_1002ACE1C(uint64_t a1, __int16 a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002ACE7C;
  void v4[3] = &unk_10088D468;
  void v4[4] = a3;
  __int16 v5 = a2;
  return sub_1002D04D0(a1, 15LL, 1, v4, 0LL);
}

uint64_t sub_1002ACE7C(uint64_t a1)
{
  return sub_1001900EC(*(void *)(a1 + 32));
}

uint64_t sub_1002ACE94(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x10u);
}

uint64_t sub_1002ACEE0(uint64_t a1, __int16 a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002ACF40;
  void v4[3] = &unk_10088D468;
  void v4[4] = a3;
  __int16 v5 = a2;
  return sub_1002D04D0(a1, 16LL, 1, v4, 0LL);
}

uint64_t sub_1002ACF40(uint64_t a1)
{
  return sub_100190180(*(void *)(a1 + 32));
}

uint64_t sub_1002ACF58(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xEu);
}

uint64_t sub_1002ACFA4(uint64_t a1, __int16 a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002AD004;
  void v4[3] = &unk_10088D468;
  void v4[4] = a3;
  __int16 v5 = a2;
  return sub_1002D04D0(a1, 14LL, 1, v4, 0LL);
}

uint64_t sub_1002AD004(uint64_t a1)
{
  return sub_100190214(*(void *)(a1 + 32));
}

uint64_t sub_1002AD01C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xDu);
}

uint64_t sub_1002AD068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002AD0C4;
  v5[3] = &unk_10088D5E8;
  void v5[4] = a4;
  void v5[5] = a3;
  return sub_1002D04D0(a1, 13LL, 1, v5, 0LL);
}

uint64_t sub_1002AD0C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v12 = 0u;
  sub_10040F90C((uint64_t)__p, 0);
  sub_10040F974((uint64_t)__p, **(_WORD **)(a1 + 40));
  sub_10040F974((uint64_t)__p, 0);
  sub_10040F938((uint64_t)__p, *(_BYTE *)(*(void *)(a1 + 40) + 2LL));
  sub_10040F974((uint64_t)__p, *(_WORD *)(*(void *)(a1 + 40) + 4LL));
  sub_10056AB04(&v9, __p[1], v12 - (unint64_t)__p[1]);
  uint64_t v3 = sub_10056AAF0((uint64_t)&v9);
  sub_10056AB04(&v7, __p[1], v12 - (unint64_t)__p[1]);
  unsigned __int8 v4 = sub_10056AAD8((uint64_t)&v7);
  uint64_t v5 = sub_1001902A8(v2 + 128, v3, v4, (uint64_t)sub_1002AD01C);
  int v7 = &off_10087FAA8;
  if (v8) {
    sub_1002CD254(v8);
  }
  __int16 v9 = &off_10087FAA8;
  if (v10) {
    sub_1002CD254(v10);
  }
  if (__p[1])
  {
    *(void **)&__int128 v12 = __p[1];
    operator delete(__p[1]);
  }

  return v5;
}

void sub_1002AD1CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (a12) {
    sub_1002CD254(a12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AD230(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x99u);
}

uint64_t sub_1002AD27C(uint64_t a1, char a2, char a3, uint64_t a4)
{
  if (*(_DWORD *)(sub_1002E6E9C() + 708) < 0x7D0u || *(_DWORD *)(sub_1002E6E9C() + 708) > 0xF9Fu)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1002AD3D0;
    _OWORD v12[3] = &unk_10088D268;
    v12[4] = a4;
    char v13 = a2;
    uint64_t v8 = v12;
    uint64_t v9 = a1;
    uint64_t v10 = 153LL;
  }

  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    _DWORD v14[2] = sub_1002AD368;
    v14[3] = &unk_10088D468;
    void v14[4] = a4;
    char v15 = a2;
    char v16 = a3;
    uint64_t v8 = v14;
    uint64_t v9 = a1;
    uint64_t v10 = 91LL;
  }

  return sub_1002D04D0(v9, v10, 1, v8, 0LL);
}

uint64_t sub_1002AD368()
{
  return sub_100191578();
}

uint64_t sub_1002AD384(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x5Bu);
}

uint64_t sub_1002AD3D0(uint64_t a1)
{
  return sub_10018C4CC(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)sub_1002AD230);
}

uint64_t sub_1002AD3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 128;
  if (sub_1002CD6F0())
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _DWORD v13[2] = sub_1002AD50C;
    v13[3] = &unk_10088D5E8;
    void v13[4] = v6;
    void v13[5] = a3;
    int v7 = v13;
    uint64_t v8 = a1;
    uint64_t v9 = 150LL;
  }

  else if (*(_DWORD *)(sub_1002E6E9C() + 708) < 0x7D0u || *(_DWORD *)(sub_1002E6E9C() + 708) > 0xF9Fu)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_1002AD5CC;
    v11[3] = &unk_10088D5E8;
    uint8_t v11[4] = v6;
    void v11[5] = a3;
    int v7 = v11;
    uint64_t v8 = a1;
    uint64_t v9 = 149LL;
  }

  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1002AD560;
    _OWORD v12[3] = &unk_10088D5E8;
    v12[4] = a3;
    void v12[5] = v6;
    int v7 = v12;
    uint64_t v8 = a1;
    uint64_t v9 = 91LL;
  }

  return sub_1002D04D0(v8, v9, 1, v7, 0LL);
}

uint64_t sub_1002AD50C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 40);
  return sub_100190460( *(void *)(a1 + 32),  *v1,  v1[1],  v1[2],  v1[3],  v1[4],  v1[5],  v1[6],  v1[16],  (uint64_t)sub_1002AB980);
}

uint64_t sub_1002AD560(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v2 + 17) == 1)
  {
    uint64_t result = sub_10010EEE0(v1, &v4);
    if ((_DWORD)result) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_10010EF2C(v1, &v4);
    if ((_DWORD)result) {
      return result;
    }
  }

  return sub_100191578();
}

uint64_t sub_1002AD5CC(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 40);
  return sub_100190370(*(void *)(a1 + 32), *(unsigned __int8 *)v1, v1[4], v1[5], v1[6], v1[7], (uint64_t)sub_1002AD5F4);
}

uint64_t sub_1002AD5F4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x95u);
}

uint64_t sub_1002AD640(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 2u);
}

uint64_t sub_1002AD68C(uint64_t a1, __int16 a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002AD6E8;
  v3[3] = &unk_10088D368;
  __int16 v4 = a2;
  return sub_1002D04D0(a1, 2LL, 1, v3, 0LL);
}

uint64_t sub_1002AD6E8()
{
  return sub_100190568();
}

uint64_t sub_1002AD6F8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xA6u);
}

uint64_t sub_1002AD744(uint64_t a1, __int16 a2, char a3, char a4, char a5, char a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002AD7B4;
  v7[3] = &unk_10088D798;
  __int16 v8 = a2;
  char v9 = a3;
  char v10 = a4;
  char v11 = a5;
  char v12 = a6;
  return sub_1002D04D0(a1, 166LL, 1, v7, &stru_10088D7B8);
}

uint64_t sub_1002AD7B4(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 34);
  return sub_10018C9F4((uint64_t)&v2);
}

uint64_t sub_1002AD7F0(int a1, const void *a2, size_t __n)
{
  word_1008EFB30 = __n;
  memcpy(&xmmword_1008EFA30, a2, __n);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x12u);
}

uint64_t sub_1002AD850( uint64_t a1, char a2, __int16 a3, char a4, uint64_t a5, char a6, __int16 a7, __int16 a8, char a9, char a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15)
{
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  _DWORD v17[2] = sub_1002AD90C;
  v17[3] = &unk_10088D248;
  __int16 v18 = a3;
  char v21 = a2;
  char v22 = a4;
  char v23 = a6;
  __int16 v19 = a7;
  __int16 v20 = a8;
  char v24 = a9;
  char v25 = a10;
  char v26 = a11;
  char v27 = a12;
  char v28 = a13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_1002AD974;
  v16[3] = &unk_10087F8E0;
  void v16[4] = a14;
  void v16[5] = a15;
  return sub_1002D04D0(a1, 18LL, 1, v17, v16);
}

uint64_t sub_1002AD90C(uint64_t a1)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  __int16 v4 = 0;
  LOBYTE(v2) = *(_BYTE *)(a1 + 32);
  WORD1(v2) = *(unsigned __int8 *)(a1 + 38);
  BYTE4(v2) = *(_BYTE *)(a1 + 39);
  BYTE6(v2) = *(_BYTE *)(a1 + 40);
  LODWORD(v3) = *(_DWORD *)(a1 + 34);
  HIDWORD(v3) = *(_DWORD *)(a1 + 41);
  LOBYTE(v4) = *(_BYTE *)(a1 + 45);
  return sub_100190678((uint64_t)&v2);
}

void *sub_1002AD974(void *result)
{
  uint64_t v1 = (_WORD *)*((void *)result + 4);
  if ((unsigned __int16)word_1008EFB30 <= (unsigned __int16)*v1)
  {
    _WORD *v1 = word_1008EFB30;
    return memcpy(*((void **)result + 5), &xmmword_1008EFA30, (unsigned __int16)word_1008EFB30);
  }

  return result;
}

uint64_t sub_1002AD9A8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x13u);
}

uint64_t sub_1002AD9F4(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002ADA54;
  void v4[3] = &unk_10088D268;
  char v5 = a2;
  void v4[4] = a3;
  return sub_1002D04D0(a1, 19LL, 1, v4, 0LL);
}

uint64_t sub_1002ADA54(uint64_t a1)
{
  char v7 = *(_BYTE *)(a1 + 40);
  uint64_t v1 = *(__int16 **)(a1 + 32);
  __int16 v8 = *v1;
  uint64_t v2 = *(void *)(v1 + 1);
  __int16 v10 = v1[5];
  uint64_t v9 = v2;
  char v11 = *((_BYTE *)v1 + 12);
  char v12 = *((_BYTE *)v1 + 13);
  uint64_t v3 = *(void *)(v1 + 7);
  __int16 v14 = v1[11];
  uint64_t v13 = v3;
  char v15 = *((_BYTE *)v1 + 24);
  char v16 = *((_BYTE *)v1 + 25);
  uint64_t v4 = *(void *)(v1 + 13);
  __int16 v18 = v1[17];
  uint64_t v17 = v4;
  char v19 = *((_BYTE *)v1 + 36);
  char v20 = *((_BYTE *)v1 + 37);
  uint64_t v5 = *(void *)(v1 + 19);
  __int16 v22 = v1[23];
  uint64_t v21 = v5;
  return sub_10019070C((uint64_t)&v7);
}

uint64_t sub_1002ADB2C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x14u);
}

uint64_t sub_1002ADB78(uint64_t a1, char a2, int a3, char a4, uint64_t a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002ADBE0;
  void v6[3] = &unk_10088D248;
  char v8 = a2;
  int v7 = a3;
  char v9 = a4;
  void v6[4] = a5;
  return sub_1002D04D0(a1, 20LL, 1, v6, 0LL);
}

uint64_t sub_1002ADBE0(uint64_t a1)
{
  v5[0] = 1;
  v5[1] = *(_BYTE *)(a1 + 44);
  int v1 = *(_DWORD *)(a1 + 40);
  _DWORD v5[2] = v1 != 3;
  v5[3] = (v1 - 1) < 2;
  void v5[4] = v1 == 2;
  void v5[5] = *(_BYTE *)(a1 + 45);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  __int16 v3 = *((_WORD *)v2 + 4);
  uint64_t v6 = *v2;
  __int16 v7 = v3;
  return sub_1001907A0((uint64_t)v5);
}

uint64_t sub_1002ADC8C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xA2u);
}

uint64_t sub_1002ADCD8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x1Au);
}

uint64_t sub_1002ADD24(uint64_t a1, uint64_t a2, char a3)
{
  if (*(_DWORD *)(sub_1002E6E9C() + 708) >= 6u
    && (uint64_t v6 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 120LL))(v6)))
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _DWORD v13[2] = sub_1002ADE0C;
    v13[3] = &unk_10088D268;
    void v13[4] = a2;
    char v14 = a3;
    __int16 v7 = v13;
    uint64_t v8 = a1;
    uint64_t v9 = 26LL;
  }

  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_1002ADE24;
    v11[3] = &unk_10088D268;
    char v12 = a3;
    uint8_t v11[4] = a2;
    __int16 v7 = v11;
    uint64_t v8 = a1;
    uint64_t v9 = 162LL;
  }

  return sub_1002D04D0(v8, v9, 1, v7, 0LL);
}

uint64_t sub_1002ADE0C()
{
  return sub_100190950();
}

uint64_t sub_1002ADE24()
{
  return sub_10018C96C();
}

uint64_t sub_1002ADE3C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x18u);
}

uint64_t sub_1002ADE88(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002ADEE4;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 24LL, 1, v3, 0LL);
}

uint64_t sub_1002ADEE4()
{
  return sub_1001905F0();
}

uint64_t sub_1002ADEF4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x16u);
}

uint64_t sub_1002ADF40(uint64_t a1, void *a2, __int16 a3)
{
  id v5 = a2;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10088DB28);
  }
  uint64_t v11 = 0LL;
  uint64_t v6 = off_1008D5F08;
  sub_100241F90(v12, v5);
  if (sub_100599890((uint64_t)v6, v12, &v11))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    _DWORD v9[2] = sub_1002AE078;
    v9[3] = &unk_10088D468;
    void v9[4] = v11;
    __int16 v10 = a3;
    uint64_t v7 = sub_1002D04D0(a1, 22LL, 1, v9, 0LL);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

void sub_1002AE05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002AE078(uint64_t a1)
{
  return sub_100190834(*(void *)(a1 + 32));
}

uint64_t sub_1002AE090(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xCu);
}

uint64_t sub_1002AE0DC(uint64_t a1, __int16 a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002AE138;
  v3[3] = &unk_10088D368;
  __int16 v4 = a2;
  return sub_1002D04D0(a1, 12LL, 1, v3, 0LL);
}

uint64_t sub_1002AE138()
{
  return sub_1001908C8();
}

uint64_t sub_1002AE148(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xF6u);
}

uint64_t sub_1002AE194(uint64_t a1, __int16 a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002AE1F0;
  v3[3] = &unk_10088D368;
  __int16 v4 = a2;
  return sub_1002D04D0(a1, 246LL, 1, v3, 0LL);
}

uint64_t sub_1002AE1F0()
{
  return sub_100194DA8();
}

uint64_t sub_1002AE200(int a1, const void *a2, size_t __n)
{
  word_1008EFB30 = __n;
  memcpy(&xmmword_1008EFA30, a2, __n);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x11u);
}

uint64_t sub_1002AE260(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002AE2DC;
  void v6[3] = &unk_10088D2A8;
  char v7 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002AE2EC;
  v5[3] = &unk_10087F8E0;
  void v5[4] = a3;
  void v5[5] = a4;
  return sub_1002D04D0(a1, 17LL, 1, v6, v5);
}

uint64_t sub_1002AE2DC()
{
  return sub_1001909D8();
}

void *sub_1002AE2EC(void *result)
{
  int v1 = (_WORD *)*((void *)result + 4);
  if ((unsigned __int16)word_1008EFB30 <= (unsigned __int16)*v1)
  {
    _WORD *v1 = word_1008EFB30;
    return memcpy(*((void **)result + 5), &xmmword_1008EFA30, (unsigned __int16)word_1008EFB30);
  }

  return result;
}

uint64_t sub_1002AE320(int a1, int a2, int a3, int a4, int a5)
{
  __int16 v10 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109888;
    v12[1] = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = a4;
    __int16 v17 = 1024;
    int v18 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "transmitting %d, receiving %d, sleep %d, others %d",  (uint8_t *)v12,  0x1Au);
  }

  LOWORD(xmmword_1008EFA30) = a2;
  WORD1(xmmword_1008EFA30) = a3;
  WORD2(xmmword_1008EFA30) = a4;
  WORD3(xmmword_1008EFA30) = a5;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x9Cu);
}

uint64_t sub_1002AE444(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1002AE4C4;
  v8[3] = &unk_10088D368;
  __int16 v9 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002AE4DC;
  v7[3] = &unk_10087FA48;
  void v7[4] = a3;
  void v7[5] = a4;
  void v7[6] = a5;
  void v7[7] = a6;
  return sub_1002D04D0(a1, 156LL, 1, v8, v7);
}

uint64_t sub_1002AE4C4()
{
  return sub_10018C7D4();
}

uint64_t sub_1002AE4DC(uint64_t result)
{
  int v1 = *(_WORD **)(result + 40);
  **(_WORD **)(result + sub_100242FAC(v1 - 32) = xmmword_1008EFA30;
  _WORD *v1 = WORD1(xmmword_1008EFA30);
  uint64_t v2 = *(_WORD **)(result + 56);
  **(_WORD **)(result + 4_Block_object_dispose(va, 8) = WORD2(xmmword_1008EFA30);
  *uint64_t v2 = WORD3(xmmword_1008EFA30);
  return result;
}

uint64_t sub_1002AE510(int a1, int a2, int a3)
{
  LODWORD(xmmword_1008EFA30) = a2;
  DWORD1(xmmword_1008EFA30) = a3;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x9Eu);
}

uint64_t sub_1002AE568(int a1, int *a2)
{
  __int16 v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *a2;
    LODWORD(v5) = a2[1];
    LODWORD(v6) = a2[2];
    LODWORD(v7) = a2[3];
    LODWORD(v_Block_object_dispose(va, 8) = a2[4];
    double v15 = (float)a2[38] / 100.0;
    LODWORD(v9) = a2[42];
    double v16 = (float)a2[41] / 100.0;
    LODWORD(v10) = a2[43];
    LODWORD(v11) = a2[44];
    LODWORD(v12) = a2[45];
    LODWORD(v13) = a2[46];
    int v38 = 67112192;
    double v17 = (double)a2[47];
    int v39 = v14;
    __int16 v40 = 2048;
    *(double *)int v41 = (double)v5 / 100.0;
    *(_WORD *)&v41[8] = 2048;
    *(double *)&v41[10] = (double)v6 / 100.0;
    *(_WORD *)&v41[18] = 2048;
    *(double *)&v41[20] = (double)v7 / 100.0;
    *(_WORD *)&v41[28] = 2048;
    *(double *)&v41[30] = (double)v8 / 100.0;
    *(_WORD *)&v41[38] = 2048;
    *(double *)&v41[40] = v15;
    *(_WORD *)&v41[48] = 2048;
    *(double *)&v41[50] = v16;
    *(_WORD *)&v41[58] = 2048;
    *(double *)&v41[60] = (double)v9 / 100.0;
    __int16 v42 = 2048;
    double v43 = (double)v10 / 100.0;
    __int16 v44 = 2048;
    double v45 = (double)v11 / 100.0;
    __int16 v46 = 2048;
    double v47 = (double)v12 / 100.0;
    __int16 v48 = 2048;
    double v49 = (double)v13 / 100.0;
    __int16 v50 = 2048;
    double v51 = v17 / 100.0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): commandType %d, txPct %0.1f%%, rxPct %0.1f%%, sleepPct %0.1f%%, idlePct %0.1f%% LP:%0.1f%% EPA:%0.1f %% TxBfEPA:%0.1f%% RxScan%0.1f%%, MainCore:%0.1f%%:%0.1f%%, ScanCore:%0.1f%%: %0.1f%%",  (uint8_t *)&v38,  0x80u);
    __int16 v4 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = a2[50];
    int v22 = a2[51];
    LODWORD(v1_Block_object_dispose(va, 8) = a2[52];
    LODWORD(v19) = a2[53];
    int v38 = 67110912;
    LODWORD(v20) = a2[55];
    double v23 = (double)a2[54] / 100.0;
    uint64_t v24 = *((void *)a2 + 28);
    uint64_t v25 = *((void *)a2 + 29);
    int v39 = v21;
    __int16 v40 = 1024;
    *(_DWORD *)int v41 = v22;
    *(_WORD *)&v41[4] = 2048;
    *(double *)&void v41[6] = (double)v18 / 100.0;
    *(_WORD *)&v41[14] = 2048;
    *(double *)&v41[16] = (double)v19 / 100.0;
    *(_WORD *)&v41[24] = 2048;
    *(double *)&v41[26] = v23;
    *(_WORD *)&v41[34] = 2048;
    *(double *)&v41[36] = (double)v20 / 100.0;
    *(_WORD *)&v41[44] = 2048;
    *(void *)&v41[46] = v24;
    *(_WORD *)&v41[54] = 2048;
    *(void *)&v41[56] = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): ipa5g %u, epa5g %u, txbf5gTxPct %0.1f%%, mrc5gRxPct %0.1f%%, epa5gTxPct %0.1f%%, txbf5gEpaRxPct %0.1 f%%, duration5gTx %llu, duration5gRx %llu",  (uint8_t *)&v38,  0x4Au);
  }

  __int128 v26 = *(_OWORD *)a2;
  __int128 v27 = *((_OWORD *)a2 + 2);
  xmmword_1008EFB50 = *((_OWORD *)a2 + 1);
  xmmword_1008EFB60 = v27;
  xmmword_1008EFB40 = v26;
  __int128 v28 = *((_OWORD *)a2 + 3);
  __int128 v29 = *((_OWORD *)a2 + 4);
  __int128 v30 = *((_OWORD *)a2 + 6);
  xmmword_1008EFB90 = *((_OWORD *)a2 + 5);
  xmmword_1008EFBA0 = v30;
  xmmword_1008EFB70 = v28;
  xmmword_1008EFB80 = v29;
  __int128 v31 = *((_OWORD *)a2 + 7);
  __int128 v32 = *((_OWORD *)a2 + 8);
  __int128 v33 = *((_OWORD *)a2 + 10);
  xmmword_1008EFBD0 = *((_OWORD *)a2 + 9);
  *(_OWORD *)&dword_1008EFBE0 = v33;
  xmmword_1008EFBB0 = v31;
  xmmword_1008EFBC0 = v32;
  __int128 v34 = *((_OWORD *)a2 + 11);
  __int128 v35 = *((_OWORD *)a2 + 12);
  __int128 v36 = *((_OWORD *)a2 + 14);
  xmmword_1008EFC10 = *((_OWORD *)a2 + 13);
  *(_OWORD *)&qword_1008EFC20 = v36;
  xmmword_1008EFBF0 = v34;
  unk_1008EFC00 = v35;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x9Du);
}

uint64_t sub_1002AE844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v50[0] = 0LL;
  v50[1] = 0LL;
  sub_100242F28((uint64_t)v50, a1 + 72);
  sub_1002E6E9C();
  BOOL v5 = sub_1002CD740();
  uint64_t v6 = sub_1002E6E9C();
  int v7 = sub_1002CD764(v6);
  uint64_t v8 = sub_1002E6E9C();
  BOOL v9 = sub_1002CD80C(v8);
  BOOL v10 = v9;
  if (v5) {
    char v11 = 2;
  }
  else {
    char v11 = 1;
  }
  if (v7) {
    char v11 = 3;
  }
  if (v9) {
    unsigned __int8 v12 = 5;
  }
  else {
    unsigned __int8 v12 = v11;
  }
  unint64_t v13 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = sub_1002CE354(a1, 157);
    *(_DWORD *)std::stringbuf::string_type buf = 136446466;
    uint64_t v52 = v14;
    __int16 v53 = 1024;
    int v54 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): Sending: %{public}s, version=%d",  buf,  0x12u);
  }

  if (sub_1002CF254(a1, 157LL))
  {
    char v49 = 0;
    sub_100242CA4(&v49);
    int v15 = sub_10018C85C();
    sub_100242CD0(&v49);
    if (!v15)
    {
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
      }
      int v15 = sub_1004336D8((uint64_t)off_1008D60A8, 157LL);
      if (!v15)
      {
        __int128 v16 = xmmword_1008EFB50;
        *(_OWORD *)a3 = xmmword_1008EFB40;
        *(_OWORD *)(a3 + 16) = v16;
        __int128 v17 = xmmword_1008EFB70;
        *(_OWORD *)(a3 + sub_100242FAC(v1 - 32) = xmmword_1008EFB60;
        *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v17;
        __int128 v18 = xmmword_1008EFB90;
        *(_OWORD *)(a3 + sub_100242FAC(v1 - 64) = xmmword_1008EFB80;
        *(_OWORD *)(a3 + sub_100242FAC(v40 - 80) = v18;
        __int128 v19 = xmmword_1008EFBB0;
        *(_OWORD *)(a3 + sub_100242E28(v1 + 96) = xmmword_1008EFBA0;
        *(_OWORD *)(a3 + 112) = v19;
        *(_OWORD *)(a3 + 12_Block_object_dispose(va, 8) = xmmword_1008EFBC0;
        *(void *)(a3 + 1memset(&v5[11], 0, 44) = xmmword_1008EFBD0;
        if (sub_1002CF254(a1, 158LL))
        {
          unint64_t v20 = (os_log_s *)qword_1008F7578;
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            int v21 = sub_1002CE354(a1, 158);
            *(_DWORD *)std::stringbuf::string_type buf = 136446210;
            uint64_t v52 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): Sending: %{public}s",  buf,  0xCu);
          }

          sub_100242C98(&v49);
          int v15 = sub_10018C8E4();
          sub_100242CD0(&v49);
          if (!v15)
          {
            if (qword_1008D60B0 != -1) {
              dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
            }
            int v15 = sub_1004336D8((uint64_t)off_1008D60A8, 158LL);
            if (!v15)
            {
              *(void *)(a3 + 152) = xmmword_1008EFA30;
              int v22 = DWORD2(xmmword_1008EFBD0);
              int v23 = HIDWORD(xmmword_1008EFBD0);
              if (!v5)
              {
                int v22 = 0;
                int v23 = 0;
              }

              *(_DWORD *)(a3 + sub_100242E28(v1 + 160) = v22;
              *(_DWORD *)(a3 + 1sub_100242FAC(v1 - 64) = v23;
              int v24 = dword_1008EFBE0;
              int v25 = unk_1008EFBE4;
              if (!v5)
              {
                int v24 = 0;
                int v25 = 0;
              }

              *(_DWORD *)(a3 + 16_Block_object_dispose(va, 8) = v24;
              *(_DWORD *)(a3 + 172) = v25;
              int v26 = dword_1008EFBE8;
              int v27 = unk_1008EFBEC;
              if (!v7) {
                int v27 = 0;
              }
              int v28 = xmmword_1008EFBF0;
              int v29 = DWORD1(xmmword_1008EFBF0);
              if (!v7)
              {
                int v28 = 0;
                int v29 = 0;
              }

              *(_DWORD *)(a3 + 184) = v28;
              *(_DWORD *)(a3 + 18_Block_object_dispose(va, 8) = v29;
              int v30 = DWORD2(xmmword_1008EFBF0);
              int v31 = HIDWORD(xmmword_1008EFBF0);
              if (!v7)
              {
                int v30 = 0;
                int v31 = 0;
              }

              *(_DWORD *)(a3 + 192) = v30;
              *(_DWORD *)(a3 + 1sub_100242E28(v1 + 96) = v31;
              int v32 = dword_1008EFC08;
              int v33 = unk_1008EFC0C;
              if (!v10)
              {
                int v32 = 0;
                int v33 = 0;
              }

              *(_DWORD *)(a3 + 216) = v32;
              *(_DWORD *)(a3 + 220) = v33;
              __int16 v34 = xmmword_1008EFC10;
              if (!v10) {
                __int16 v34 = 0;
              }
              *(_WORD *)(a3 + sub_1002949E4(v1 + 224) = v34;
              __int16 v35 = WORD2(xmmword_1008EFC10);
              if (!v10) {
                __int16 v35 = 0;
              }
              *(_WORD *)(a3 + 226) = v35;
              __int16 v36 = WORD4(xmmword_1008EFC10);
              if (!v10) {
                __int16 v36 = 0;
              }
              *(_WORD *)(a3 + 22_Block_object_dispose(va, 8) = v36;
              if (!v10) {
                int v26 = 0;
              }
              *(_DWORD *)(a3 + 176) = v26;
              *(_DWORD *)(a3 + 1sub_100242FAC(v40 - 80) = v27;
              uint64_t v38 = qword_1008EFC20;
              uint64_t v37 = unk_1008EFC28;
              if (!v10)
              {
                uint64_t v38 = 0LL;
                uint64_t v37 = 0LL;
              }

              *(void *)(a3 + 2sub_100242FAC(v1 - 32) = v38;
              *(void *)(a3 + 240) = v37;
            }
          }
        }

        else
        {
          int v15 = 0;
        }
      }
    }

    sub_1002D06F4(a1, 0x9Du);
    sub_1002D06F4(a1, 0x9Eu);
    uint64_t v47 = v15 != 0;
    sub_100242CD8(&v49);
  }

  else
  {
    int v39 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100667F90(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    sub_1002D06F4(a1, 0x9Du);
    sub_1002D06F4(a1, 0x9Eu);
    uint64_t v47 = 2LL;
  }

  sub_100242FAC((uint64_t)v50);
  return v47;
}

void sub_1002AEC40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

uint64_t sub_1002AEC88( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, unsigned int a14, unsigned int a15)
{
  unint64_t v20 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67112448;
    int v26 = a2;
    __int16 v27 = 1024;
    int v28 = a3;
    __int16 v29 = 1024;
    int v30 = a4;
    __int16 v31 = 1024;
    int v32 = a5;
    __int16 v33 = 1024;
    int v34 = a6;
    __int16 v35 = 1024;
    int v36 = a7;
    __int16 v37 = 1024;
    int v38 = a8;
    __int16 v39 = 1024;
    int v40 = a9;
    __int16 v41 = 1024;
    int v42 = a10;
    __int16 v43 = 1024;
    int v44 = a11;
    __int16 v45 = 1024;
    int v46 = a12;
    __int16 v47 = 1024;
    int v48 = a13;
    __int16 v49 = 1024;
    unsigned int v50 = a14;
    __int16 v51 = 1024;
    unsigned int v52 = a15;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): durationTotal %d, durationActive %d, durationIdle %d, durationSleep %d disableCounter %d, iPATxBT %d , ePATxBT %d, iPATxLE %d, ePATxLE %d, connectedRxBT %d, connectedRxLE %d, scanRxBT %d scanRxLE %d, totalPHYCal %d",  buf,  0x56u);
  }

  LODWORD(xmmword_1008EFA30) = a2;
  DWORD1(xmmword_1008EFA30) = a3;
  DWORD2(xmmword_1008EFA30) = a4;
  HIDWORD(xmmword_1008EFA30) = a5;
  LODWORD(xmmword_1008EFA40) = a6;
  DWORD1(xmmword_1008EFA40) = a7;
  DWORD2(xmmword_1008EFA40) = a8;
  HIDWORD(xmmword_1008EFA40) = a9;
  dword_1008EFA50 = a10;
  dword_1008EFA54 = a11;
  dword_1008EFA58 = a12;
  dword_1008EFA5C = a13;
  *(void *)&xmmword_1008EFA60 = __PAIR64__(a15, a14);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x2Eu);
}

uint64_t sub_1002AEE70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, uint64_t a12)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_1002AEF04;
  v13[3] = &unk_10088D7F8;
  void v13[4] = a2;
  void v13[5] = a3;
  void v13[6] = a4;
  void v13[7] = a5;
  v13[8] = a6;
  v13[9] = a7;
  _OWORD v13[10] = a8;
  __int128 v14 = a9;
  __int128 v15 = a10;
  __int128 v16 = a11;
  uint64_t v17 = a12;
  return sub_1002D04D0(a1, 46LL, 1, &stru_10088D7D8, v13);
}

int sub_1002AEEF8(id a1)
{
  return sub_100191868();
}

uint64_t sub_1002AEF04(uint64_t result)
{
  int v1 = *(_DWORD **)(result + 40);
  **(_DWORD **)(result + sub_100242FAC(v1 - 32) = xmmword_1008EFA30;
  _DWORD *v1 = DWORD1(xmmword_1008EFA30);
  uint64_t v2 = *(_DWORD **)(result + 56);
  **(_DWORD **)(result + 4_Block_object_dispose(va, 8) = DWORD2(xmmword_1008EFA30);
  *uint64_t v2 = HIDWORD(xmmword_1008EFA30);
  __int16 v3 = *(_DWORD **)(result + 72);
  **(_DWORD **)(result + sub_100242FAC(v1 - 64) = xmmword_1008EFA40;
  _DWORD *v3 = DWORD1(xmmword_1008EFA40);
  __int16 v4 = *(_DWORD **)(result + 88);
  **(_DWORD **)(result + sub_100242FAC(v40 - 80) = DWORD2(xmmword_1008EFA40);
  _DWORD *v4 = HIDWORD(xmmword_1008EFA40);
  BOOL v5 = *(_DWORD **)(result + 104);
  **(_DWORD **)(result + sub_100242E28(v1 + 96) = dword_1008EFA50;
  _DWORD *v5 = dword_1008EFA54;
  uint64_t v6 = *(_DWORD **)(result + 120);
  **(_DWORD **)(result + 112) = dword_1008EFA58;
  _DWORD *v6 = dword_1008EFA5C;
  int v7 = *(_DWORD **)(result + 136);
  **(_DWORD **)(result + 12_Block_object_dispose(va, 8) = xmmword_1008EFA60;
  _DWORD *v7 = DWORD1(xmmword_1008EFA60);
  return result;
}

uint64_t sub_1002AEF9C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x2Fu);
}

uint64_t sub_1002AEFE8(uint64_t a1)
{
  return sub_1002D04D0(a1, 47LL, 1, &stru_10088D818, 0LL);
}

int sub_1002AF000(id a1)
{
  return sub_1001918F0();
}

uint64_t sub_1002AF00C(int a1, int a2, int a3, int a4, int a5)
{
  BOOL v10 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109888;
    v12[1] = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = a4;
    __int16 v17 = 1024;
    int v18 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "total %d, successful %d, downgraded %d, involuntaryDowngraded %d",  (uint8_t *)v12,  0x1Au);
  }

  LODWORD(xmmword_1008EFA30) = a2;
  DWORD1(xmmword_1008EFA30) = a3;
  DWORD2(xmmword_1008EFA30) = a4;
  HIDWORD(xmmword_1008EFA30) = a5;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x30u);
}

uint64_t sub_1002AF128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002AF198;
  void v6[3] = &unk_10087FA48;
  void v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  v6[7] = a5;
  return sub_1002D04D0(a1, 48LL, 1, &stru_10088D838, v6);
}

int sub_1002AF18C(id a1)
{
  return sub_100191978();
}

uint64_t sub_1002AF198(uint64_t result)
{
  int v1 = *(_DWORD **)(result + 40);
  **(_DWORD **)(result + sub_100242FAC(v1 - 32) = xmmword_1008EFA30;
  _DWORD *v1 = DWORD1(xmmword_1008EFA30);
  uint64_t v2 = *(_DWORD **)(result + 56);
  **(_DWORD **)(result + 4_Block_object_dispose(va, 8) = DWORD2(xmmword_1008EFA30);
  *uint64_t v2 = HIDWORD(xmmword_1008EFA30);
  return result;
}

uint64_t sub_1002AF1CC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x31u);
}

uint64_t sub_1002AF218(uint64_t a1)
{
  return sub_1002D04D0(a1, 49LL, 1, &stru_10088D858, 0LL);
}

int sub_1002AF230(id a1)
{
  return sub_100191A00();
}

uint64_t sub_1002AF23C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xA8u);
}

uint64_t sub_1002AF288(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002AF2E4;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 168LL, 1, v3, 0LL);
}

uint64_t sub_1002AF2E4()
{
  return sub_10018CA88();
}

uint64_t sub_1002AF2F4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x1Du);
}

uint64_t sub_1002AF340(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002AF3A8;
  void v6[3] = &unk_10088D228;
  void v6[4] = a2;
  char v7 = a3;
  char v8 = a4;
  char v9 = a5;
  return sub_1002D04D0(a1, 29LL, 1, v6, 0LL);
}

uint64_t sub_1002AF3A8(uint64_t a1)
{
  return sub_100190FE8( *(void *)(a1 + 32) + 128LL,  *(unsigned __int8 *)(a1 + 40),  *(unsigned __int8 *)(a1 + 41),  *(unsigned __int8 *)(a1 + 42),  (uint64_t)sub_1002AF2F4);
}

uint64_t sub_1002AF3CC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x2Bu);
}

uint64_t sub_1002AF418(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 6; ++i)
  {
    char v3 = byte_1008D92B0[i];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_1002AF4B8;
    v5[3] = &unk_10088D2A8;
    char v6 = v3;
    uint64_t result = sub_1002D04D0(a1, 43LL, 1, v5, 0LL);
  }

  return result;
}

uint64_t sub_1002AF4B8()
{
  return sub_100191600();
}

uint64_t sub_1002AF4C8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x2Cu);
}

uint64_t sub_1002AF514(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  v30[0] = 0LL;
  v30[1] = 0LL;
  sub_100242F28((uint64_t)v30, a1 + 72);
  char v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    char v9 = sub_1002CE354(a1, 44);
    buf[0] = 136446210;
    *(void *)&buf[1] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Sending: %{public}s", (uint8_t *)buf, 0xCu);
  }

  if (!sub_1002CF254(a1, 44LL))
  {
    uint64_t v15 = 2LL;
    goto LABEL_32;
  }

  BOOL v10 = (os_log_s *)qword_1008F7578;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    unsigned __int8 v12 = "Disabling";
    if ((_DWORD)a2) {
      unsigned __int8 v12 = "Enabling";
    }
    buf[0] = 136315138;
    *(void *)&buf[1] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s FW Log Streaming", (uint8_t *)buf, 0xCu);
  }

  __int16 v13 = IOBTDebug::create((IOBTDebug *)v11);
  if (!v13)
  {
    unint64_t v20 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100667FC0(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    int v16 = 0;
    goto LABEL_30;
  }

  if ((_DWORD)a2
    && ((uint8_t buf[2] = 1,
         *(void *)std::stringbuf::string_type buf = 0x200000000LL,
         uint64_t v31 = 0x10000000080000LL,
         int v32 = 0x4000,
         *(_DWORD *)(sub_1002E6E9C() + 708) == 15)
      ? (unsigned int v14 = 1)
      : (unsigned int v14 = 3),
        IOBTDebug::enableLogging((uint64_t)v13, a3, a4, buf, (int *)&v31, v14)))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100667FF0();
    }
  }

  else
  {
    LOBYTE(v31) = 0;
    sub_100242CA4(&v31);
    int v16 = sub_100191754(a2, a3);
    sub_100242CD0(&v31);
    if (v16)
    {
      __int16 v17 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Warning: BT_VSC_EnableDisableFwLogStreaming failed",  (uint8_t *)buf,  2u);
      }
    }

    sub_100242CD8(&v31);
    if ((a2 & 1) == 0)
    {
      int v18 = IOBTDebug::disableLogging((IOBTDebug *)v13);
      __int128 v19 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 67109120;
        buf[1] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Disabling BT debug driver logging with status %x",  (uint8_t *)buf,  8u);
      }
    }

    if (v16) {
      goto LABEL_30;
    }
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  int v16 = sub_1004336D8((uint64_t)off_1008D60A8, 44LL);
LABEL_30:
  sub_1002D06F4(a1, 0x2Cu);
  uint64_t v15 = v16 != 0;
  if (v13)
  {
    IOBTDebug::~IOBTDebug((IOBTDebug *)v13);
    operator delete(v28);
  }

void sub_1002AF854( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1002AF8B0(int a1, _DWORD *a2, unsigned int a3)
{
  if (!a1 && a2 && a3 >= 4)
  {
    LOBYTE(xmmword_1008EFA30) = 4;
    *(_DWORD *)((char *)&xmmword_1008EFA30 + 1) = *a2;
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xA3u);
}

uint64_t sub_1002AF924(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1002AF9A8;
  v8[3] = &unk_10088D668;
  char v9 = a2;
  char v10 = a3;
  char v11 = a4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002AF9C4;
  v7[3] = &unk_10087F8E0;
  void v7[4] = a6;
  void v7[5] = a5;
  return sub_1002D04D0(a1, 163LL, 1, v8, v7);
}

uint64_t sub_1002AF9A8()
{
  return sub_10018CB10();
}

void *sub_1002AF9C4(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result)
  {
    size_t v3 = xmmword_1008EFA30;
    **(_WORD **)(a1 + 40) = xmmword_1008EFA30;
    return memcpy(result, (char *)&xmmword_1008EFA30 + 1, v3);
  }

  return result;
}

uint64_t sub_1002AF9EC(int a1, uint64_t *a2, unsigned int a3)
{
  if (!a1 && a2 && a3 >= 9)
  {
    LOBYTE(xmmword_1008EFA30) = 9;
    uint64_t v4 = *a2;
    BYTE9(xmmword_1008EFA30) = *((_BYTE *)a2 + 8);
    *(void *)((char *)&xmmword_1008EFA30 + 1) = v4;
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xA4u);
}

uint64_t sub_1002AFA68( uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_1002AFAFC;
  v11[3] = &unk_10088D798;
  char v12 = a2;
  char v13 = a3;
  char v14 = a4;
  char v15 = a5;
  char v16 = a6;
  char v17 = a7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002AFB24;
  v10[3] = &unk_10087F8E0;
  void v10[4] = a9;
  void v10[5] = a8;
  return sub_1002D04D0(a1, 164LL, 1, v11, v10);
}

uint64_t sub_1002AFAFC()
{
  return sub_10018CB98();
}

void *sub_1002AFB24(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result)
  {
    size_t v3 = xmmword_1008EFA30;
    **(_WORD **)(a1 + 40) = xmmword_1008EFA30;
    return memcpy(result, (char *)&xmmword_1008EFA30 + 1, v3);
  }

  return result;
}

uint64_t sub_1002AFB4C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x2Du);
}

uint64_t sub_1002AFB98(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002AFBF4;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 45LL, 1, v3, 0LL);
}

uint64_t sub_1002AFBF4()
{
  return sub_1001944A8();
}

uint64_t sub_1002AFC04(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x33u);
}

uint64_t sub_1002AFC50(uint64_t a1)
{
  return sub_1002D04D0(a1, 51LL, 1, &stru_10088D878, 0LL);
}

int sub_1002AFC68(id a1)
{
  return sub_100190AE8();
}

uint64_t sub_1002AFC74(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x29u);
}

uint64_t sub_1002AFCC0(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002AFD1C;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 41LL, 1, v3, 0LL);
}

uint64_t sub_1002AFD1C()
{
  return sub_100191468();
}

uint64_t sub_1002AFD2C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x2Au);
}

uint64_t sub_1002AFD78(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002AFDD4;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 42LL, 1, v3, 0LL);
}

uint64_t sub_1002AFDD4()
{
  return sub_1001914F0();
}

uint64_t sub_1002AFDE4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x35u);
}

uint64_t sub_1002AFE30(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002AFE8C;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 53LL, 1, v3, 0LL);
}

uint64_t sub_1002AFE8C()
{
  return sub_100193FE0();
}

uint64_t sub_1002AFE9C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x37u);
}

uint64_t sub_1002AFEE8(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002AFF44;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 55LL, a3, v4, 0LL);
}

uint64_t sub_1002AFF44()
{
  return sub_100191A88();
}

uint64_t sub_1002AFF64(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xAEu);
}

uint64_t sub_1002AFFB0(uint64_t a1, char a2, char a3, __int16 a4, __int16 a5, __int16 a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B001C;
  v7[3] = &unk_10088D3C8;
  char v11 = a2;
  char v12 = a3;
  __int16 v8 = a4;
  __int16 v9 = a5;
  __int16 v10 = a6;
  return sub_1002D04D0(a1, 174LL, 1, v7, 0LL);
}

uint64_t sub_1002B001C()
{
  return sub_100194E30();
}

uint64_t sub_1002B0040(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xB0u);
}

uint64_t sub_1002B008C(uint64_t a1, uint64_t a2, int a3, __int16 a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B00F0;
  v5[3] = &unk_10088D248;
  void v5[4] = a2;
  int v6 = a3;
  __int16 v7 = a4;
  return sub_1002D04D0(a1, 176LL, 1, v5, 0LL);
}

uint64_t sub_1002B00F0()
{
  return sub_100194EB8();
}

uint64_t sub_1002B010C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x38u);
}

uint64_t sub_1002B0158(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002B01B4;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 56LL, a3, v4, 0LL);
}

uint64_t sub_1002B01B4(uint64_t a1)
{
  uint64_t result = sub_100191B10();
  BYTE10(xmmword_1008F6D5_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 32);
  return result;
}

uint64_t sub_1002B01FC(int a1, int a2)
{
  char v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Proprietary (HDR) Local Read Features=%d",  (uint8_t *)v6,  8u);
  }

  dword_1008F6D54 = a2;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x39u);
}

uint64_t sub_1002B02E8(uint64_t a1, int a2)
{
  return sub_1002D04D0(a1, 57LL, a2, &stru_10088D898, 0LL);
}

int sub_1002B0300(id a1)
{
  return sub_100191B98();
}

uint64_t sub_1002B030C(int a1, int a2, int a3)
{
  char v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    LODWORD(v17) = 67109120;
    HIDWORD(v17) = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Proprietary (HDR) Remote Read Features=%d",  (uint8_t *)&v17,  8u);
  }

  __int16 v7 = sub_10012D6D8(a2);
  if (sub_10012D514((uint64_t)v7))
  {
    *((_DWORD *)v7 + 73) = a3;
  }

  else if (sub_1000A86F0())
  {
    sub_1001EE134( (uint64_t)"Device disconnected during the name request. Ignoring event.",  v8,  v9,  v10,  v11,  v12,  v13,  v14,  v17);
    char v15 = (os_log_s *)sub_100086554(0x5Cu);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_100668050(v15);
    }
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x3Au);
}

uint64_t sub_1002B044C(uint64_t a1, __int16 a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  __int128 v4[2] = sub_1002B04A4;
  void v4[3] = &unk_10088D368;
  __int16 v5 = a2;
  return sub_1002D04D0(a1, 58LL, a3, v4, 0LL);
}

uint64_t sub_1002B04A4()
{
  return sub_100191C20();
}

uint64_t sub_1002B04B4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x3Bu);
}

uint64_t sub_1002B0500(uint64_t a1, __int16 a2, int a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B0568;
  v5[3] = &unk_10088D488;
  __int16 v7 = a2;
  int v6 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 59LL, a4, v5, 0LL);
}

uint64_t sub_1002B0568()
{
  return sub_100191CA8();
}

uint64_t sub_1002B058C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x3Cu);
}

uint64_t sub_1002B05D8( uint64_t a1, __int16 a2, int a3, int a4, __int16 a5, __int16 a6, char a7, int a8, unsigned __int8 a9)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002B0650;
  v10[3] = &unk_10088D608;
  __int16 v14 = a2;
  int v11 = a3;
  int v12 = a4;
  __int16 v15 = a5;
  __int16 v16 = a6;
  char v17 = a7;
  int v13 = a8;
  unsigned __int8 v18 = a9;
  return sub_1002D04D0(a1, 60LL, a9, v10, 0LL);
}

uint64_t sub_1002B0650()
{
  return sub_100191D30();
}

uint64_t sub_1002B0684(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x3Du);
}

uint64_t sub_1002B06D0( uint64_t a1, uint64_t a2, int a3, int a4, __int16 a5, __int16 a6, char a7, int a8, unsigned __int8 a9)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002B0748;
  v10[3] = &unk_10088D8B8;
  void v10[4] = a2;
  int v11 = a3;
  int v12 = a4;
  __int16 v14 = a5;
  __int16 v15 = a6;
  char v16 = a7;
  int v13 = a8;
  unsigned __int8 v17 = a9;
  return sub_1002D04D0(a1, 61LL, a9, v10, 0LL);
}

uint64_t sub_1002B0748()
{
  return sub_100191DB8();
}

uint64_t sub_1002B077C(int a1, uint64_t a2, int a3, int a4)
{
  __int16 v7 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109632;
    v9[1] = a1;
    __int16 v10 = 1024;
    int v11 = a3;
    __int16 v12 = 1024;
    int v13 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "SCO Buffer Size Control callback status=%d controllerBufferSize=%d controllerNumBuffer=%d",  (uint8_t *)v9,  0x14u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  uint64_t result = sub_1004335B8(a1, 0x3Eu);
  if (!a1)
  {
    sub_100119AD8(a3, 1);
    return sub_100119B1C();
  }

  return result;
}

uint64_t sub_1002B0888(uint64_t a1, char a2, __int16 a3, char a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B08F0;
  void v6[3] = &unk_10088D8D8;
  char v8 = a2;
  __int16 v7 = a3;
  char v9 = a4;
  char v10 = a5;
  return sub_1002D04D0(a1, 62LL, a5, v6, 0LL);
}

uint64_t sub_1002B08F0()
{
  return sub_100191E40();
}

uint64_t sub_1002B0918(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HBR Control callback status=%d", (uint8_t *)v4, 8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x3Fu);
}

uint64_t sub_1002B09EC(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B0A48;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 63LL, a3, v4, 0LL);
}

uint64_t sub_1002B0A48()
{
  return sub_100191EC8();
}

uint64_t sub_1002B0A68(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "HRB Allowed Bands callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x40u);
}

uint64_t sub_1002B0B3C(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B0B98;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 64LL, a3, v4, 0LL);
}

uint64_t sub_1002B0B98()
{
  return sub_100191F50();
}

uint64_t sub_1002B0BB8(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "HRB Classification Bands callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x41u);
}

uint64_t sub_1002B0C8C(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B0CE8;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 65LL, a3, v4, 0LL);
}

uint64_t sub_1002B0CE8()
{
  return sub_100191FD8();
}

uint64_t sub_1002B0D08(uint64_t a1, uint64_t a2, __int16 a3, char a4, __int16 a5, char a6, char a7, char a8)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _DWORD v9[2] = sub_1002B0D7C;
  v9[3] = &unk_10088D5E8;
  void v9[4] = a2;
  __int16 v10 = a3;
  char v12 = a4;
  __int16 v11 = a5;
  char v13 = a6;
  char v14 = a7;
  char v15 = a8;
  return sub_1002D04D0(a1, 66LL, 1, v9, 0LL);
}

uint64_t sub_1002B0D7C()
{
  return sub_100192060();
}

uint64_t sub_1002B0DA0(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "HRB Change Connection Band callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_1008D6170 != -1) {
      dispatch_once(&qword_1008D6170, &stru_10088DBE8);
    }
    sub_10025B188(qword_1008D6168, a1);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x43u);
}

uint64_t sub_1002B0EC4(uint64_t a1, __int16 a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B0F2C;
  v5[3] = &unk_10088D508;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 67LL, a4, v5, 0LL);
}

uint64_t sub_1002B0F2C()
{
  return sub_1001920E8();
}

uint64_t sub_1002B0F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10012D87C(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1400LL))(a1, v7, a3, a4);
}

uint64_t sub_1002B0F9C(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "HRB Write Scan Enable callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x44u);
}

uint64_t sub_1002B1070(uint64_t a1, char a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B10D8;
  v5[3] = &unk_10088D668;
  char v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 68LL, a4, v5, 0LL);
}

uint64_t sub_1002B10D8()
{
  return sub_100192170();
}

uint64_t sub_1002B10FC(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "HRB Write Page Scan Activity callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x45u);
}

uint64_t sub_1002B11D0(uint64_t a1, __int16 a2, __int16 a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B1238;
  v5[3] = &unk_10088D8D8;
  __int16 v6 = a2;
  __int16 v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 69LL, a4, v5, 0LL);
}

uint64_t sub_1002B1238()
{
  return sub_1001921F8();
}

uint64_t sub_1002B125C(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "HRB Set AFH Host Channle Classification callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x47u);
}

uint64_t sub_1002B1330(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B1398;
  v7[3] = &unk_10088D8B8;
  char v8 = a2;
  void v7[4] = a3;
  void v7[5] = a4;
  void v7[6] = a5;
  char v9 = a6;
  return sub_1002D04D0(a1, 71LL, a6, v7, 0LL);
}

uint64_t sub_1002B1398()
{
  return sub_100192280();
}

uint64_t sub_1002B13C0(int a1, int a2, int a3, char a4, int a5, int *a6, int *a7, int *a8, char a9)
{
  unsigned __int8 v17 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v22[0] = 67109888;
    v22[1] = a1;
    __int16 v23 = 1024;
    int v24 = a2;
    __int16 v25 = 1024;
    int v26 = a3;
    __int16 v27 = 1024;
    int v28 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Get Essential Power Database Entries status=%d vscVersion=%d, countryCode=%d, pCap=%d",  (uint8_t *)v22,  0x1Au);
  }

  LOBYTE(xmmword_1008EFA30) = a2;
  BYTE1(xmmword_1008EFA30) = a3;
  BYTE2(xmmword_1008EFA30) = a4;
  BYTE3(xmmword_1008EFA30) = a5;
  int v18 = *a6;
  BYTE8(xmmword_1008EFA30) = *((_BYTE *)a6 + 4);
  DWORD1(xmmword_1008EFA30) = v18;
  int v19 = *a7;
  BYTE13(xmmword_1008EFA30) = *((_BYTE *)a7 + 4);
  *(_DWORD *)((char *)&xmmword_1008EFA30 + 9) = v19;
  int v20 = *a8;
  BYTE2(xmmword_1008EFA40) = *((_BYTE *)a8 + 4);
  *(_DWORD *)((char *)&xmmword_1008EFA30 + 14) = v20;
  BYTE3(xmmword_1008EFA40) = a9;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x48u);
}

uint64_t sub_1002B1538( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1002B15D0;
  _OWORD v12[3] = &unk_10088D8F8;
  v12[4] = a2;
  void v12[5] = a3;
  void v12[6] = a4;
  void v12[7] = a5;
  unsigned __int8 v13 = a10;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_1002B1604;
  v11[3] = &unk_10088D918;
  void v11[4] = a2;
  void v11[5] = a6;
  void v11[6] = a3;
  void v11[7] = a4;
  __int16 v11[8] = a7;
  v11[9] = a8;
  v11[10] = a9;
  v11[11] = a5;
  return sub_1002D04D0(a1, 72LL, a10, v12, v11);
}

uint64_t sub_1002B15D0()
{
  return sub_100192308();
}

uint64_t sub_1002B1604(uint64_t result)
{
  **(_BYTE **)(result + sub_100242FAC(v1 - 32) = xmmword_1008EFA30;
  **(_BYTE **)(result + 40) = BYTE1(xmmword_1008EFA30);
  **(_BYTE **)(result + 4_Block_object_dispose(va, 8) = BYTE2(xmmword_1008EFA30);
  **(_BYTE **)(result + 56) = BYTE3(xmmword_1008EFA30);
  uint64_t v1 = *(void *)(result + 64);
  int v2 = DWORD1(xmmword_1008EFA30);
  *(_BYTE *)(v1 + 4) = BYTE8(xmmword_1008EFA30);
  *(_DWORD *)uint64_t v1 = v2;
  uint64_t v3 = *(void *)(result + 72);
  int v4 = *(_DWORD *)((char *)&xmmword_1008EFA30 + 9);
  *(_BYTE *)(v3 + 4) = BYTE13(xmmword_1008EFA30);
  *(_DWORD *)uint64_t v3 = v4;
  uint64_t v5 = *(void *)(result + 80);
  int v6 = *(_DWORD *)((char *)&xmmword_1008EFA30 + 14);
  *(_BYTE *)(v5 + 4) = BYTE2(xmmword_1008EFA40);
  *(_DWORD *)uint64_t v5 = v6;
  **(_BYTE **)(result + 8_Block_object_dispose(va, 8) = BYTE3(xmmword_1008EFA40);
  return result;
}

uint64_t sub_1002B1688(int a1, __int16 a2, char a3, char a4, char a5, char a6, char a7, char a8, int a9)
{
  char v15 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    int v20 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "HRB Read Enhanced Transmit Power Level callback status=%d",  buf,  8u);
  }

  LOWORD(xmmword_1008EFA30) = a2;
  BYTE2(xmmword_1008EFA30) = a3;
  BYTE3(xmmword_1008EFA30) = a4;
  BYTE4(xmmword_1008EFA30) = a5;
  BYTE5(xmmword_1008EFA30) = a6;
  BYTE6(xmmword_1008EFA30) = a7;
  BYTE7(xmmword_1008EFA30) = a8;
  DWORD2(xmmword_1008EFA30) = a9;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x4Bu);
}

uint64_t sub_1002B17E8( uint64_t a1, __int16 a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, uint64_t a12)
{
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_1002B188C;
  v18[3] = &unk_10088D508;
  __int16 v19 = a2;
  char v20 = a3;
  char v21 = a4;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_1002B18B0;
  v13[3] = &unk_10088D938;
  void v13[4] = a5;
  void v13[5] = a6;
  void v13[6] = a7;
  void v13[7] = a8;
  __int128 v14 = a9;
  __int128 v15 = a10;
  __int128 v16 = a11;
  uint64_t v17 = a12;
  return sub_1002D04D0(a1, 75LL, a4, v18, v13);
}

uint64_t sub_1002B188C()
{
  return sub_100192390();
}

uint64_t sub_1002B18B0(uint64_t result)
{
  uint64_t v1 = *(_BYTE **)(result + 40);
  **(_WORD **)(result + sub_100242FAC(v1 - 32) = xmmword_1008EFA30;
  _BYTE *v1 = BYTE2(xmmword_1008EFA30);
  **(_BYTE **)(result + 4_Block_object_dispose(va, 8) = BYTE3(xmmword_1008EFA30);
  **(_BYTE **)(result + 56) = BYTE4(xmmword_1008EFA30);
  **(_BYTE **)(result + sub_100242FAC(v1 - 64) = BYTE5(xmmword_1008EFA30);
  **(_BYTE **)(result + 72) = BYTE6(xmmword_1008EFA30);
  **(_BYTE **)(result + sub_100242FAC(v40 - 80) = BYTE7(xmmword_1008EFA30);
  **(_BYTE **)(result + 8_Block_object_dispose(va, 8) = BYTE8(xmmword_1008EFA30);
  **(_BYTE **)(result + sub_100242E28(v1 + 96) = BYTE9(xmmword_1008EFA30);
  **(_BYTE **)(result + 104) = BYTE10(xmmword_1008EFA30);
  **(_BYTE **)(result + 112) = BYTE11(xmmword_1008EFA30);
  return result;
}

uint64_t sub_1002B193C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18 = sub_10012D87C(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1448LL))( a1,  v18,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15);
}

uint64_t sub_1002B19D8(int a1, uint64_t *a2, __int128 *a3)
{
  int v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v16[0] = 67109120;
    v16[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "HRB Read AFH Channel Map callback status=%d",  (uint8_t *)v16,  8u);
  }

  if (!a1)
  {
    uint64_t v7 = *a2;
    WORD4(xmmword_1008EFA30) = *((_WORD *)a2 + 4);
    *(void *)&xmmword_1008EFA30 = v7;
    __int128 v8 = a3[4];
    __int128 v9 = a3[5];
    __int128 v10 = a3[3];
    *(_OWORD *)((char *)&dword_1008EFA58 + 2) = a3[2];
    *(_OWORD *)((char *)&dword_1008EFA88 + 2) = v9;
    *(_OWORD *)((char *)&dword_1008EFA78 + 2) = v8;
    *(__int128 *)((char *)&xmmword_1008EFA60 + 10) = v10;
    __int128 v11 = a3[8];
    __int128 v12 = a3[9];
    __int128 v13 = a3[7];
    *(_OWORD *)((char *)&dword_1008EFA98 + 2) = a3[6];
    *(_OWORD *)((char *)&dword_1008EFAC8 + 2) = v12;
    *(_OWORD *)((char *)&dword_1008EFAB8 + 2) = v11;
    *(_OWORD *)((char *)&dword_1008EFAA8 + 2) = v13;
    __int128 v14 = *a3;
    *(__int128 *)((char *)&xmmword_1008EFA40 + 10) = a3[1];
    *(__int128 *)((char *)&xmmword_1008EFA30 + 10) = v14;
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x46u);
}

uint64_t sub_1002B1B14(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, int a5)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B1B98;
  v7[3] = &unk_10088D668;
  __int16 v8 = a2;
  char v9 = a5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B1BB8;
  void v6[3] = &unk_10087F8E0;
  void v6[4] = a3;
  void v6[5] = a4;
  return sub_1002D04D0(a1, 70LL, a5, v7, v6);
}

uint64_t sub_1002B1B98()
{
  return sub_100192418();
}

__n128 sub_1002B1BB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = xmmword_1008EFA30;
  *(_WORD *)(v1 + _Block_object_dispose(va, 8) = WORD4(xmmword_1008EFA30);
  *(void *)uint64_t v1 = v2;
  uint64_t v3 = *(void *)(a1 + 40);
  __int128 v4 = *(__int128 *)((char *)&xmmword_1008EFA40 + 10);
  *(_OWORD *)uint64_t v3 = *(__int128 *)((char *)&xmmword_1008EFA30 + 10);
  *(_OWORD *)(v3 + 16) = v4;
  __int128 v5 = *(_OWORD *)((char *)&dword_1008EFA58 + 2);
  __int128 v6 = *(__int128 *)((char *)&xmmword_1008EFA60 + 10);
  __int128 v7 = *(_OWORD *)((char *)&dword_1008EFA88 + 2);
  *(_OWORD *)(v3 + sub_100242FAC(v1 - 64) = *(_OWORD *)((char *)&dword_1008EFA78 + 2);
  *(_OWORD *)(v3 + sub_100242FAC(v40 - 80) = v7;
  *(_OWORD *)(v3 + sub_100242FAC(v1 - 32) = v5;
  *(_OWORD *)(v3 + 4_Block_object_dispose(va, 8) = v6;
  __n128 result = *(__n128 *)((char *)&dword_1008EFA98 + 2);
  __int128 v9 = *(_OWORD *)((char *)&dword_1008EFAA8 + 2);
  __int128 v10 = *(_OWORD *)((char *)&dword_1008EFAC8 + 2);
  *(_OWORD *)(v3 + 12_Block_object_dispose(va, 8) = *(_OWORD *)((char *)&dword_1008EFAB8 + 2);
  *(_OWORD *)(v3 + 1memset(&v5[11], 0, 44) = v10;
  *(__n128 *)(v3 + sub_100242E28(v1 + 96) = result;
  *(_OWORD *)(v3 + 112) = v9;
  return result;
}

uint64_t sub_1002B1C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10012D87C(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1464LL))( a1,  v9,  a3,  a4,  a5);
}

uint64_t sub_1002B1C6C(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "HRB Read Limit Channel Map callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x49u);
}

uint64_t sub_1002B1D40(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B1D9C;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 73LL, a3, v4, 0LL);
}

uint64_t sub_1002B1D9C()
{
  return sub_1001924A0();
}

uint64_t sub_1002B1DBC(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "HRB Set Band Edges callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x4Au);
}

uint64_t sub_1002B1E90(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B1EF8;
  v7[3] = &unk_10088D8B8;
  char v8 = a2;
  void v7[4] = a3;
  void v7[5] = a4;
  void v7[6] = a5;
  char v9 = a6;
  return sub_1002D04D0(a1, 74LL, a6, v7, 0LL);
}

uint64_t sub_1002B1EF8()
{
  return sub_100192528();
}

uint64_t sub_1002B1F20(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Enhanced Tx Test callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x4Cu);
}

uint64_t sub_1002B1FF4( uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, uint64_t a7, char a8, char a9, char a10, char a11, __int16 a12, char a13, char a14, unsigned __int8 a15)
{
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  _DWORD v16[2] = sub_1002B209C;
  v16[3] = &unk_10088D328;
  char v18 = a3;
  char v19 = a4;
  char v20 = a5;
  char v21 = a6;
  void v16[4] = a2;
  void v16[5] = a7;
  char v22 = a8;
  char v23 = a9;
  char v24 = a10;
  char v25 = a11;
  __int16 v17 = a12;
  char v26 = a13;
  char v27 = a14;
  unsigned __int8 v28 = a15;
  return sub_1002D04D0(a1, 76LL, a15, v16, 0LL);
}

uint64_t sub_1002B209C(uint64_t a1)
{
  return sub_1001925B0(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 50));
}

uint64_t sub_1002B2108( uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, __int16 a11, unsigned __int8 a12)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_1002B219C;
  v13[3] = &unk_10088D608;
  void v13[4] = a2;
  __int16 v14 = a3;
  char v16 = a4;
  char v17 = a5;
  char v18 = a6;
  char v19 = a7;
  char v20 = a8;
  char v21 = a9;
  char v22 = a10;
  __int16 v15 = a11;
  unsigned __int8 v23 = a12;
  return sub_1002D04D0(a1, 77LL, a12, v13, 0LL);
}

uint64_t sub_1002B219C(uint64_t a1)
{
  return sub_100192668(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_1002B2204(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Enhanced Rx Test callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x4Eu);
}

uint64_t sub_1002B22D8( uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11, __int16 a12, unsigned __int8 a13)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  _DWORD v14[2] = sub_1002B2374;
  v14[3] = &unk_10088D6C8;
  char v16 = a2;
  char v17 = a3;
  char v18 = a4;
  char v19 = a5;
  char v20 = a6;
  char v21 = a7;
  char v22 = a8;
  char v23 = a9;
  char v24 = a10;
  char v25 = a11;
  __int16 v15 = a12;
  unsigned __int8 v26 = a13;
  return sub_1002D04D0(a1, 78LL, a13, v14, 0LL);
}

uint64_t sub_1002B2374(uint64_t a1)
{
  return sub_100192708(*(unsigned __int8 *)(a1 + 34), *(unsigned __int8 *)(a1 + 35));
}

uint64_t sub_1002B23DC(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Advanced Sniff Mode callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x4Fu);
}

uint64_t sub_1002B24B0( uint64_t a1, __int16 a2, __int16 a3, char a4, char a5, char a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11, __int16 a12, char a13, char a14, unsigned __int8 a15)
{
  char v20 = a13;
  __int16 v21 = a12;
  __int16 v22 = a11;
  if (*(_BYTE *)(a1 + 1452))
  {
    char v26 = a4;
    char v27 = a6;
    char v23 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      int v24 = *(unsigned __int8 *)(a1 + 1453);
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v44 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "Advanced Sniff Mode Override MaxRetryInFrames=%d",  buf,  8u);
    }

    a5 = *(_BYTE *)(a1 + 1453);
    char v20 = a13;
    a6 = v27;
    a4 = v26;
    __int16 v21 = a12;
    __int16 v22 = a11;
  }

  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  void v28[2] = sub_1002B2640;
  v28[3] = &unk_10088D958;
  __int16 v29 = a2;
  __int16 v30 = a3;
  char v37 = a4;
  char v38 = a5;
  char v39 = a6;
  __int16 v31 = a7;
  __int16 v32 = a8;
  __int16 v33 = a9;
  __int16 v34 = a10;
  __int16 v35 = v22;
  __int16 v36 = v21;
  char v40 = v20;
  char v41 = a14;
  unsigned __int8 v42 = a15;
  return sub_1002D04D0(a1, 79LL, a15, v28, 0LL);
}

uint64_t sub_1002B2640(uint64_t a1)
{
  return sub_1001927B0(*(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
}

uint64_t sub_1002B26B0(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Exit Advanced Sniff Mode callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x50u);
}

uint64_t sub_1002B2784(uint64_t a1, __int16 a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B27E0;
  void v4[3] = &unk_10088D668;
  __int16 v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 80LL, a3, v4, 0LL);
}

uint64_t sub_1002B27E0()
{
  return sub_100192868();
}

uint64_t sub_1002B2800(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Advanced Sniff Reconfigure callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x51u);
}

uint64_t sub_1002B28D4( uint64_t a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5, char a6, __int16 a7, int a8)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _DWORD v9[2] = sub_1002B2948;
  v9[3] = &unk_10088D628;
  __int16 v10 = a2;
  __int16 v11 = a3;
  __int16 v12 = a4;
  __int16 v13 = a5;
  char v15 = a6;
  __int16 v14 = a7;
  char v16 = a8;
  return sub_1002D04D0(a1, 81LL, a8, v9, 0LL);
}

uint64_t sub_1002B2948()
{
  return sub_1001928F0();
}

uint64_t sub_1002B297C(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Set Peripheral Max Age callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x52u);
}

uint64_t sub_1002B2A50(uint64_t a1, __int16 a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B2AB8;
  v5[3] = &unk_10088D508;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 82LL, a4, v5, 0LL);
}

uint64_t sub_1002B2AB8()
{
  return sub_100192978();
}

uint64_t sub_1002B2ADC(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "LMP Flow callback status=%d", (uint8_t *)v4, 8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x53u);
}

uint64_t sub_1002B2BB0(uint64_t a1, __int16 a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B2C18;
  v5[3] = &unk_10088D508;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 83LL, a4, v5, 0LL);
}

uint64_t sub_1002B2C18()
{
  return sub_100192A00();
}

uint64_t sub_1002B2C3C(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "AoS Empty Packet Report callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x54u);
}

uint64_t sub_1002B2D10(uint64_t a1, __int16 a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B2D78;
  v5[3] = &unk_10088D508;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 84LL, a4, v5, 0LL);
}

uint64_t sub_1002B2D78()
{
  return sub_100192A88();
}

uint64_t sub_1002B2D9C(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Control AoS callback status=%d", (uint8_t *)v4, 8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x55u);
}

uint64_t sub_1002B2E70(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B2ECC;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 85LL, a3, v4, 0LL);
}

uint64_t sub_1002B2ECC()
{
  return sub_100192B10();
}

uint64_t sub_1002B2EEC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x56u);
}

uint64_t sub_1002B2F38(uint64_t a1, void *a2, char a3, char a4, char a5)
{
  id v9 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2512LL))(a1))
  {
    uint64_t v17 = 0LL;
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10088DB28);
    }
    __int16 v10 = off_1008D5F08;
    sub_100241F90(v18, v9);
    if (sub_100599890((uint64_t)v10, v18, &v17))
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      _DWORD v13[2] = sub_1002B30A8;
      v13[3] = &unk_10088D228;
      void v13[4] = v17;
      char v14 = a3;
      char v15 = a4;
      char v16 = a5;
      uint64_t v11 = sub_1002D04D0(a1, 86LL, 1, v13, 0LL);
    }

    else
    {
      uint64_t v11 = 7LL;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  return v11;
}

void sub_1002B3088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002B30A8()
{
  return sub_10018E54C();
}

uint64_t sub_1002B30CC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x57u);
}

uint64_t sub_1002B3118(uint64_t a1, char a2, char a3, char a4, int a5, char a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2520LL))(a1);
  if ((_DWORD)result)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _DWORD v13[2] = sub_1002B31C8;
    v13[3] = &unk_10088D3C8;
    char v15 = a2;
    char v16 = a3;
    char v17 = a4;
    int v14 = a5;
    char v18 = a6;
    return sub_1002D04D0(a1, 87LL, 1, v13, 0LL);
  }

  return result;
}

uint64_t sub_1002B31C8()
{
  return sub_10018E5D4();
}

uint64_t sub_1002B31EC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x5Au);
}

uint64_t sub_1002B3238(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B3294;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 90LL, 1, v3, 0LL);
}

uint64_t sub_1002B3294()
{
  return sub_100194FC8();
}

uint64_t sub_1002B32A4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x5Cu);
}

uint64_t sub_1002B32F0(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B334C;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 92LL, a3, v4, 0LL);
}

uint64_t sub_1002B334C()
{
  return sub_100192B98();
}

uint64_t sub_1002B336C(int a1, int a2, int a3, int a4)
{
  char v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109632;
    v10[1] = a2;
    __int16 v11 = 1024;
    int v12 = a3;
    __int16 v13 = 1024;
    int v14 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "ePA GPIO state: enabled %d, num %d, sleep %d",  (uint8_t *)v10,  0x14u);
  }

  LOBYTE(xmmword_1008EFA30) = a2;
  BYTE1(xmmword_1008EFA30) = a3;
  BYTE2(xmmword_1008EFA30) = a4;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x5Du);
}

uint64_t sub_1002B3484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B3508;
  v7[3] = &unk_10088D2A8;
  char v8 = a5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B3520;
  void v6[3] = &unk_100888050;
  void v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  return sub_1002D04D0(a1, 93LL, a5, v7, v6);
}

uint64_t sub_1002B3508()
{
  return sub_100192C20();
}

_BYTE **sub_1002B3520(_BYTE **result)
{
  *result[4] = xmmword_1008EFA30;
  *result[5] = BYTE1(xmmword_1008EFA30);
  *result[6] = BYTE2(xmmword_1008EFA30);
  return result;
}

uint64_t sub_1002B3550(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xFCu);
}

uint64_t sub_1002B359C(uint64_t a1, char a2, char a3, char a4, char a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B3604;
  void v6[3] = &unk_10088D508;
  char v7 = a2;
  char v8 = a3;
  char v9 = a4;
  char v10 = a5;
  return sub_1002D04D0(a1, 252LL, 1, v6, 0LL);
}

uint64_t sub_1002B3604()
{
  return sub_100195050();
}

uint64_t sub_1002B3624(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x5Eu);
}

uint64_t sub_1002B3670(uint64_t a1, uint64_t a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B36D0;
  void v4[3] = &unk_10088D268;
  void v4[4] = a2;
  char v5 = a3;
  return sub_1002D04D0(a1, 94LL, 1, v4, 0LL);
}

uint64_t sub_1002B36D0()
{
  return sub_1001950D8();
}

uint64_t sub_1002B36E8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xAFu);
}

uint64_t sub_1002B3734(uint64_t a1, char a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B379C;
  v5[3] = &unk_10088D668;
  char v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 175LL, a4, v5, 0LL);
}

uint64_t sub_1002B379C()
{
  return sub_10018FC98();
}

uint64_t sub_1002B37C0(int a1, const void *a2, size_t __n)
{
  *(_DWORD *)((char *)&xmmword_1008EFA30 + 9) = 0;
  *(void *)((char *)&xmmword_1008EFA30 + 1) = 0LL;
  LOBYTE(xmmword_1008EFA30) = __n;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xB1u);
}

uint64_t sub_1002B383C(int a1, const void *a2, size_t __n)
{
  unk_1008EFB1C = 0u;
  *(_OWORD *)((char *)&dword_1008EFB10 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFB00 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFAF0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFAE0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFAD0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFAC0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFAB0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFAA0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFA90 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFA80 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFA70 + 1) = 0u;
  *(__int128 *)((char *)&xmmword_1008EFA60 + 1) = 0u;
  *(_OWORD *)((char *)&dword_1008EFA50 + 1) = 0u;
  *(__int128 *)((char *)&xmmword_1008EFA40 + 1) = 0u;
  *(__int128 *)((char *)&xmmword_1008EFA30 + 1) = 0u;
  LOBYTE(xmmword_1008EFA30) = __n;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xB2u);
}

uint64_t sub_1002B38F4(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, int a5)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B3978;
  v7[3] = &unk_10088D668;
  __int16 v8 = a2;
  char v9 = a5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B3998;
  void v6[3] = &unk_10087F8E0;
  void v6[4] = a3;
  void v6[5] = a4;
  return sub_1002D04D0(a1, 177LL, a5, v7, v6);
}

uint64_t sub_1002B3978()
{
  return sub_100195160();
}

void sub_1002B3998(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (xmmword_1008EFA30 > 0xCu)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_1006680E8();
      }
    }

    else
    {
      **(_BYTE **)(a1 + 40) = xmmword_1008EFA30;
      memcpy(*(void **)(a1 + 32), (char *)&xmmword_1008EFA30 + 1, xmmword_1008EFA30);
    }
  }

uint64_t sub_1002B3A18(uint64_t a1, __int16 a2, char a3, uint64_t a4, uint64_t a5, int a6)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1002B3A9C;
  v8[3] = &unk_10088D508;
  __int16 v9 = a2;
  char v10 = a3;
  char v11 = a6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B3AC0;
  v7[3] = &unk_10087F8E0;
  void v7[4] = a4;
  void v7[5] = a5;
  return sub_1002D04D0(a1, 178LL, a6, v8, v7);
}

uint64_t sub_1002B3A9C()
{
  return sub_1001951E8();
}

void sub_1002B3AC0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (xmmword_1008EFA30 > 0xFBu)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066814C();
      }
    }

    else
    {
      **(_BYTE **)(a1 + 40) = xmmword_1008EFA30;
      memcpy(*(void **)(a1 + 32), (char *)&xmmword_1008EFA30 + 1, xmmword_1008EFA30);
    }
  }

uint64_t sub_1002B3B40(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x17u);
}

uint64_t sub_1002B3B8C(uint64_t a1, char a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B3BF4;
  v5[3] = &unk_10088D668;
  char v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 23LL, a4, v5, 0LL);
}

uint64_t sub_1002B3BF4()
{
  return sub_100195270();
}

uint64_t sub_1002B3C20(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x60u);
}

uint64_t sub_1002B3C6C(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B3CC8;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 96LL, 1, v3, 0LL);
}

uint64_t sub_1002B3CC8()
{
  return sub_100192CA8();
}

uint64_t sub_1002B3CD8(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  __int16 v13 = 0LL;
  int v14 = 0LL;
  sub_10056AB04(&v13, a2, a3);
  if (a3 >= 3)
  {
    char v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a2;
      unsigned int v7 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      int v16 = v6;
      __int16 v17 = 1024;
      unsigned int v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "HostwakeReport: type(%d), reasonCode(%d)",  buf,  0xEu);
    }
  }

  uint64_t v8 = sub_100404EB8();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768LL;
  _DWORD v10[2] = sub_1002B3E6C;
  v10[3] = &unk_10088D978;
  char v11 = &off_10087FAA8;
  int v12 = v14;
  if (v14) {
    sub_1002CD1E0((uint64_t)v14);
  }
  sub_100405384(v8, v10);
  char v11 = &off_10087FAA8;
  if (v12) {
    sub_1002CD254(v12);
  }
  __int16 v13 = &off_10087FAA8;
  if (v14) {
    sub_1002CD254(v14);
  }
  return 0LL;
}

void sub_1002B3E28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, uint64_t a15, unsigned int *a16)
{
  if (a14) {
    sub_1002CD254(a14);
  }
  if (a16) {
    sub_1002CD254(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B3E6C(uint64_t a1)
{
  uint64_t v2 = sub_1002E9074();
  uint64_t v3 = *(unsigned int **)(a1 + 40);
  char v4 = &off_10087FAA8;
  char v5 = v3;
  if (v3) {
    sub_1002CD1E0((uint64_t)v3);
  }
  (*(void (**)(uint64_t, uint64_t (***)(), void, const char *, const char *, const char *))(*(void *)v2 + 32LL))( v2,  &v4,  0LL,  "",  "",  "");
  char v4 = &off_10087FAA8;
  if (v5) {
    sub_1002CD254(v5);
  }
}

void sub_1002B3EE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10) {
    sub_1002CD254(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B3F04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + sub_100242FAC(v1 - 32) = &off_10087FAA8;
  *(void *)(a1 + 40) = v3;
  if (v3) {
    sub_1002CD1E0(v3);
  }
}

void sub_1002B3F24(uint64_t a1)
{
  *(void *)(a1 + sub_100242FAC(v1 - 32) = &off_10087FAA8;
  uint64_t v1 = *(unsigned int **)(a1 + 40);
  if (v1) {
    sub_1002CD254(v1);
  }
}

uint64_t sub_1002B3F40(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x61u);
}

uint64_t sub_1002B3F8C(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B3FE8;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 97LL, 1, v3, 0LL);
}

uint64_t sub_1002B3FE8()
{
  return sub_100192D30();
}

uint64_t sub_1002B3FF8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x62u);
}

uint64_t sub_1002B4044(uint64_t a1, int a2, char a3, __int16 a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B40A8;
  v5[3] = &unk_10088D488;
  int v6 = a2;
  char v8 = a3;
  __int16 v7 = a4;
  return sub_1002D04D0(a1, 98LL, 1, v5, 0LL);
}

uint64_t sub_1002B40A8()
{
  return sub_100192DB8();
}

uint64_t sub_1002B40C4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x63u);
}

uint64_t sub_1002B4110(uint64_t a1, __int16 a2, __int16 a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B4170;
  void v4[3] = &unk_10088D508;
  __int16 v5 = a2;
  __int16 v6 = a3;
  return sub_1002D04D0(a1, 99LL, 1, v4, 0LL);
}

uint64_t sub_1002B4170()
{
  return sub_100192F50();
}

uint64_t sub_1002B4188(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x64u);
}

uint64_t sub_1002B41D4( uint64_t a1, __int16 a2, char a3, char a4, char a5, uint64_t a6, char a7, char a8, __int16 a9, __int16 a10, char a11, __int16 a12, __int16 a13)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  _DWORD v14[2] = sub_1002B4270;
  v14[3] = &unk_10088D9A8;
  __int16 v15 = a2;
  char v20 = a3;
  char v21 = a4;
  char v22 = a5;
  void v14[4] = a6;
  char v23 = a7;
  char v24 = a8;
  __int16 v16 = a9;
  __int16 v17 = a10;
  char v25 = a11;
  __int16 v18 = a12;
  __int16 v19 = a13;
  return sub_1002D04D0(a1, 100LL, 1, v14, 0LL);
}

uint64_t sub_1002B4270(uint64_t a1)
{
  return sub_10018F568(*(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 50));
}

uint64_t sub_1002B42D4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x66u);
}

uint64_t sub_1002B4320(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B437C;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 102LL, 1, v3, 0LL);
}

uint64_t sub_1002B437C()
{
  return sub_100194690();
}

uint64_t sub_1002B438C(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "enable2MBPHYForDenylistedDevicesCB status %d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x65u);
}

uint64_t sub_1002B4460(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B44BC;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 101LL, 1, v3, 0LL);
}

uint64_t sub_1002B44BC()
{
  return sub_1001952F8();
}

uint64_t sub_1002B44CC(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "enableWirelessSplitterCB status %d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x67u);
}

uint64_t sub_1002B45A0( uint64_t a1, char a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _DWORD v9[2] = sub_1002B4610;
  v9[3] = &unk_10088D5C8;
  void v9[4] = a3;
  void v9[5] = a4;
  char v14 = a2;
  __int16 v10 = a5;
  __int16 v11 = a6;
  __int16 v12 = a7;
  __int16 v13 = a8;
  return sub_1002D04D0(a1, 103LL, 1, v9, 0LL);
}

uint64_t sub_1002B4610(uint64_t a1)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  uint64_t result = sub_10010EEE0(*(void *)(a1 + 32), &v4);
  if (!(_DWORD)result)
  {
    uint64_t result = sub_10010EEE0(*(void *)(a1 + 40), &v3);
    if (!(_DWORD)result) {
      return sub_1001953C4();
    }
  }

  return result;
}

uint64_t sub_1002B467C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x68u);
}

uint64_t sub_1002B46C8( uint64_t a1, __int16 a2, char a3, uint64_t a4, char a5, __int16 a6, char a7, char a8, char a9)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _DWORD v10[2] = sub_1002B4744;
  v10[3] = &unk_10088D288;
  __int16 v11 = a2;
  char v13 = a3;
  void v10[4] = a4;
  char v14 = a5;
  __int16 v12 = a6;
  char v15 = a7;
  char v16 = a8;
  char v17 = a9;
  return sub_1002D04D0(a1, 104LL, 1, v10, 0LL);
}

uint64_t sub_1002B4744(uint64_t a1)
{
  return sub_100193060(*(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_1002B4790(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x72u);
}

uint64_t sub_1002B47DC( uint64_t a1, __int16 a2, char a3, uint64_t a4, char a5, __int16 a6, char a7, char a8, char a9, char a10, char a11, uint64_t a12, uint64_t a13)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  _DWORD v14[2] = sub_1002B4870;
  v14[3] = &unk_10088D9C8;
  __int16 v15 = a2;
  char v17 = a3;
  char v18 = a5;
  __int16 v16 = a6;
  char v19 = a7;
  char v20 = a8;
  char v21 = a9;
  char v22 = a10;
  char v23 = a11;
  void v14[4] = a4;
  void v14[5] = a12;
  void v14[6] = a13;
  return sub_1002D04D0(a1, 114LL, 1, v14, 0LL);
}

uint64_t sub_1002B4870(uint64_t a1)
{
  return sub_100193610(*(unsigned __int16 *)(a1 + 56), 0LL, *(unsigned __int8 *)(a1 + 60), *(void *)(a1 + 32));
}

uint64_t sub_1002B48D4( uint64_t a1, __int16 a2, char a3, uint64_t a4, char a5, __int16 a6, char a7, char a8, char a9, char a10, char a11, uint64_t a12, uint64_t a13)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  _DWORD v14[2] = sub_1002B4968;
  v14[3] = &unk_10088D9C8;
  __int16 v15 = a2;
  char v17 = a3;
  char v18 = a5;
  __int16 v16 = a6;
  char v19 = a7;
  char v20 = a8;
  char v21 = a9;
  char v22 = a10;
  char v23 = a11;
  void v14[4] = a4;
  void v14[5] = a12;
  void v14[6] = a13;
  return sub_1002D04D0(a1, 114LL, 1, v14, 0LL);
}

uint64_t sub_1002B4968(uint64_t a1)
{
  return sub_100193610(*(unsigned __int16 *)(a1 + 56), 1LL, *(unsigned __int8 *)(a1 + 60), *(void *)(a1 + 32));
}

uint64_t sub_1002B49CC(uint64_t a1, __int16 a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B4A28;
  v3[3] = &unk_10088D368;
  __int16 v4 = a2;
  return sub_1002D04D0(a1, 114LL, 1, v3, 0LL);
}

uint64_t sub_1002B4A28(uint64_t a1)
{
  __int16 v3 = 0;
  int v2 = 0;
  return sub_100193610(*(unsigned __int16 *)(a1 + 32), 2LL, 0LL, (uint64_t)&v2);
}

uint64_t sub_1002B4A84(int a1, char a2, char a3, char a4, char a5)
{
  LOBYTE(xmmword_1008EFA30) = a2;
  BYTE1(xmmword_1008EFA30) = a3;
  BYTE2(xmmword_1008EFA30) = a4;
  BYTE3(xmmword_1008EFA30) = a5;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x69u);
}

uint64_t sub_1002B4AE8(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _WORD *a5)
{
  v18[0] = 0uLL;
  sub_100242F28((uint64_t)v18, a1 + 72);
  __int16 v9 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    __int16 v10 = sub_1002CE354(a1, 105);
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    *(void *)char v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }

  if (sub_1002CF254(a1, 105LL))
  {
    char v17 = 0;
    sub_100242CA4(&v17);
    int v11 = sub_1001930F0();
    sub_100242CD0(&v17);
    if (!v11)
    {
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
      }
      int v11 = sub_1004336D8((uint64_t)off_1008D60A8, 105LL);
      *a3 = BYTE1(xmmword_1008EFA30);
      *a4 = BYTE2(xmmword_1008EFA30);
      *a5 = BYTE3(xmmword_1008EFA30);
    }

    memset((char *)&v18[1] + 8, 0, 56);
    if (BYTE1(xmmword_1008EFA30) <= 0x64u)
    {
      if (BYTE1(xmmword_1008EFA30))
      {
        if (BYTE1(xmmword_1008EFA30) % 0x14u) {
          uint64_t v12 = BYTE1(xmmword_1008EFA30) / 0x14u + 1LL;
        }
        else {
          uint64_t v12 = BYTE1(xmmword_1008EFA30) / 0x14u;
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }
    }

    else
    {
      uint64_t v12 = 6LL;
    }

    *((_DWORD *)&v18[1] + v12 + 2) = 1;
    if ((*a4 & 1) != 0)
    {
      if (BYTE3(xmmword_1008EFA30) <= 0x64u)
      {
        if (BYTE3(xmmword_1008EFA30))
        {
          if (BYTE3(xmmword_1008EFA30) % 0x14u) {
            uint64_t v14 = BYTE3(xmmword_1008EFA30) / 0x14u + 1LL;
          }
          else {
            uint64_t v14 = BYTE3(xmmword_1008EFA30) / 0x14u;
          }
        }

        else
        {
          uint64_t v14 = 0LL;
        }
      }

      else
      {
        uint64_t v14 = 6LL;
      }

      *((_DWORD *)&v18[3] + v14 + 1) = 1;
    }

    *(_DWORD *)std::stringbuf::string_type buf = 1;
    *(_OWORD *)char v20 = *(_OWORD *)((char *)&v18[1] + 8);
    *(_OWORD *)&v20[12] = *(_OWORD *)((char *)&v18[2] + 4);
    v21[0] = *(_OWORD *)((char *)&v18[3] + 4);
    *(_OWORD *)((char *)v21 + 12) = v18[4];
    if (sub_1002E8D94())
    {
      uint64_t v15 = sub_1002E8D94();
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v15 + 200LL))(v15, buf);
    }

    sub_1002D06F4(a1, 0x69u);
    uint64_t v13 = v11 != 0;
    sub_100242CD8(&v17);
  }

  else
  {
    uint64_t v13 = 2LL;
  }

  sub_100242FAC((uint64_t)v18);
  return v13;
}

void sub_1002B4D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1002B4DC4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x6Au);
}

uint64_t sub_1002B4E10( _DWORD *a1, unsigned int a2, __int16 a3, int a4, int a5, int a6, int a7, char a8, char a9, unsigned __int16 a10, unsigned __int16 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, char a16)
{
  __int16 v24 = a3 & 0xFFF0 | (a4 != 0) | (2 * (a5 != 0)) | (4 * (a6 != 0)) | (8 * (a7 != 0));
  uint64_t v25 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 256LL))(v25))
  {
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472LL;
    v58[2] = sub_1002B5258;
    v58[3] = &unk_10088D9E8;
    __int16 v59 = a2;
    __int16 v60 = v24 & 0xFF1F | (32 * (a9 != 0)) | ((a10 != 0) << 6) | ((a11 != 0) << 7);
    char v63 = a4;
    __int16 v61 = a5;
    char v64 = a6;
    char v65 = a7;
    char v66 = a8;
    char v67 = a9;
    unsigned __int16 v62 = a11;
    unsigned __int8 v68 = a13;
    v58[4] = a12;
    void v58[5] = a14;
    v58[6] = a15;
    char v69 = a16;
    char v26 = v58;
    uint64_t v27 = (uint64_t)a1;
    uint64_t v28 = 108LL;
    return sub_1002D04D0(v27, v28, 1, v26, 0LL);
  }

  uint64_t v30 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 248LL))(v30))
  {
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_1002B5318;
    v48[3] = &unk_10088D6C8;
    __int16 v49 = a2;
    __int16 v50 = v24 & 0xFF1F | (32 * (a9 != 0)) | ((a10 != 0) << 6) | ((a11 != 0) << 7);
    char v53 = a4;
    __int16 v51 = a5;
    char v54 = a6;
    char v55 = a7;
    char v56 = a8;
    char v57 = a9;
    unsigned __int16 v52 = a11;
    char v26 = v48;
    uint64_t v27 = (uint64_t)a1;
    uint64_t v28 = 107LL;
    return sub_1002D04D0(v27, v28, 1, v26, 0LL);
  }

  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  v40[2] = sub_1002B53B8;
  v40[3] = &unk_10088D468;
  __int16 v41 = a2;
  __int16 v42 = v24;
  char v44 = a4;
  __int16 v43 = a5;
  char v45 = a6;
  char v46 = a7;
  char v47 = a8;
  uint64_t v29 = sub_1002D04D0((uint64_t)a1, 106LL, 1, v40, 0LL);
  __int16 v33 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    __int16 v34 = sub_1002CE354((uint64_t)a1, 106);
    *(_DWORD *)std::stringbuf::string_type buf = 136446466;
    int v71 = v34;
    __int16 v72 = 1024;
    int v73 = v29;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%{public}s returned with result: %d", buf, 0x12u);
  }

  uint64_t v35 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v35 + 352LL))(v35))
  {
    unsigned int v36 = a1[177];
    if (v36)
    {
      if (v36 <= 0x7CF && !(_DWORD)v29)
      {
        unsigned int v37 = a9 != 0;
        if (a10) {
          v37 |= 2u;
        }
        uint64_t v29 = a11 ? v37 | 4 : v37;
        if ((_DWORD)v29)
        {
          int v38 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 2464LL))(a1);
          uint64_t v39 = *(void *)a1;
          if (v38) {
            return (*(uint64_t (**)(_DWORD *, void, uint64_t, void, void, void, uint64_t, void, uint64_t, uint64_t, char))(v39 + 2832))( a1,  a2,  v29,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16);
          }
          else {
            return (*(uint64_t (**)(_DWORD *, void, uint64_t, void, void, void))(v39 + 2824))( a1,  a2,  v29,  a9,  a10,  a11);
          }
        }
      }
    }
  }

  return v29;
}

uint64_t sub_1002B5258(uint64_t a1)
{
  return sub_100193298( *(unsigned __int16 *)(a1 + 56),  *(unsigned __int16 *)(a1 + 58),  *(unsigned __int8 *)(a1 + 64),  *(unsigned __int16 *)(a1 + 60),  *(unsigned __int8 *)(a1 + 65),  *(unsigned __int8 *)(a1 + 66),  *(unsigned __int8 *)(a1 + 67));
}

uint64_t sub_1002B52CC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x6Cu);
}

uint64_t sub_1002B5318(uint64_t a1)
{
  return sub_100193200(*(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
}

uint64_t sub_1002B536C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x6Bu);
}

uint64_t sub_1002B53B8()
{
  return sub_100193178();
}

uint64_t sub_1002B53E4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x6Du);
}

uint64_t sub_1002B5430(uint64_t a1, __int16 a2, char a3, char a4, __int16 a5, __int16 a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B549C;
  v7[3] = &unk_10088D3C8;
  __int16 v8 = a2;
  char v11 = a3;
  char v12 = a4;
  __int16 v9 = a5;
  __int16 v10 = a6;
  return sub_1002D04D0(a1, 109LL, 1, v7, 0LL);
}

uint64_t sub_1002B549C()
{
  return sub_100193350();
}

uint64_t sub_1002B54C0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x6Eu);
}

uint64_t sub_1002B550C( uint64_t a1, __int16 a2, char a3, char a4, __int16 a5, __int16 a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, char a11)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1002B5590;
  _OWORD v12[3] = &unk_10088D448;
  __int16 v13 = a2;
  char v16 = a3;
  char v17 = a4;
  __int16 v14 = a5;
  __int16 v15 = a6;
  char v18 = a8;
  v12[4] = a7;
  void v12[5] = a9;
  void v12[6] = a10;
  char v19 = a11;
  return sub_1002D04D0(a1, 110LL, 1, v12, 0LL);
}

uint64_t sub_1002B5590(uint64_t a1)
{
  return sub_1001933D8(*(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 62), *(char *)(a1 + 63));
}

uint64_t sub_1002B55E8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x6Fu);
}

uint64_t sub_1002B5634(uint64_t a1, __int16 a2, char a3, char a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B5698;
  v5[3] = &unk_10088D508;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 111LL, 1, v5, 0LL);
}

uint64_t sub_1002B5698()
{
  return sub_100193478();
}

uint64_t sub_1002B56B4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x70u);
}

uint64_t sub_1002B5700(uint64_t a1, __int16 a2, char a3, char a4, char a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B5768;
  void v6[3] = &unk_10088D8D8;
  __int16 v7 = a2;
  char v8 = a3;
  char v9 = a4;
  char v10 = a5;
  return sub_1002D04D0(a1, 112LL, 1, v6, 0LL);
}

uint64_t sub_1002B5768()
{
  return sub_100193500();
}

uint64_t sub_1002B5788(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x71u);
}

uint64_t sub_1002B57D4(uint64_t a1, __int16 a2, __int16 a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B5834;
  void v4[3] = &unk_10088D508;
  __int16 v5 = a2;
  __int16 v6 = a3;
  return sub_1002D04D0(a1, 113LL, 1, v4, 0LL);
}

uint64_t sub_1002B5834()
{
  return sub_100193588();
}

uint64_t sub_1002B584C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x73u);
}

uint64_t sub_1002B5898(uint64_t a1, __int16 a2, char a3, char a4, uint64_t a5)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_1002B5940;
  v11[3] = &unk_10088D628;
  __int16 v12 = a2;
  char v13 = a3;
  char v14 = a4;
  void v11[4] = a5;
  return sub_1002D04D0(a1, 115LL, 1, v11, 0LL);
}

uint64_t sub_1002B5940()
{
  return sub_1001936C0();
}

uint64_t sub_1002B5960(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x74u);
}

uint64_t sub_1002B59AC(uint64_t a1, __int16 a2, char a3, char a4, char a5, char a6)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_1002B5A5C;
  v13[3] = &unk_10088D798;
  __int16 v14 = a2;
  char v15 = a3;
  char v16 = a4;
  char v17 = a5;
  char v18 = a6;
  return sub_1002D04D0(a1, 116LL, 1, v13, 0LL);
}

uint64_t sub_1002B5A5C()
{
  return sub_100193748();
}

uint64_t sub_1002B5A80(int a1, int a2, int a3)
{
  __int16 v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    __int16 v9 = 1024;
    int v10 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Match Buffer Read : subOpcode %d, numEntries %d",  (uint8_t *)v8,  0xEu);
  }

  LOBYTE(xmmword_1008EFA30) = a2;
  BYTE1(xmmword_1008EFA30) = a3;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x75u);
}

uint64_t sub_1002B5B80(uint64_t a1, __int16 a2, uint64_t a3)
{
  void v4[4] = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B5BF8;
  v5[3] = &unk_10088D368;
  __int16 v6 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B5C08;
  void v4[3] = &unk_10087EB20;
  return sub_1002D04D0(a1, 117LL, 1, v5, v4);
}

uint64_t sub_1002B5BF8()
{
  return sub_1001937D0();
}

uint64_t sub_1002B5C08(uint64_t result)
{
  **(_BYTE **)(result + sub_100242FAC(v1 - 32) = BYTE1(xmmword_1008EFA30);
  return result;
}

uint64_t sub_1002B5C1C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x76u);
}

uint64_t sub_1002B5C68(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B5CC4;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 118LL, a3, v4, 0LL);
}

uint64_t sub_1002B5CC4()
{
  return sub_100193858();
}

uint64_t sub_1002B5CE4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x77u);
}

uint64_t sub_1002B5D30(uint64_t a1, __int16 a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B5D98;
  v5[3] = &unk_10088D508;
  __int16 v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 119LL, a4, v5, 0LL);
}

uint64_t sub_1002B5D98()
{
  return sub_1001938E0();
}

uint64_t sub_1002B5DBC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x78u);
}

uint64_t sub_1002B5E08(uint64_t a1, char a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B5E70;
  v5[3] = &unk_10088D668;
  char v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 120LL, a4, v5, 0LL);
}

uint64_t sub_1002B5E70()
{
  return sub_100193968();
}

uint64_t sub_1002B5E94(int a1, int a2)
{
  __int16 v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Read Connection Event Counter : connEventCounter %d",  (uint8_t *)v6,  8u);
  }

  LOWORD(xmmword_1008EFA30) = a2;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x79u);
}

uint64_t sub_1002B5F7C(uint64_t a1, __int16 a2, uint64_t a3, int a4)
{
  void v5[4] = a3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B5FFC;
  void v6[3] = &unk_10088D668;
  __int16 v7 = a2;
  char v8 = a4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B601C;
  v5[3] = &unk_10087EB20;
  return sub_1002D04D0(a1, 121LL, a4, v6, v5);
}

uint64_t sub_1002B5FFC()
{
  return sub_1001939F0();
}

uint64_t sub_1002B601C(uint64_t result)
{
  **(_WORD **)(result + sub_100242FAC(v1 - 32) = xmmword_1008EFA30;
  return result;
}

uint64_t sub_1002B6030(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x7Au);
}

uint64_t sub_1002B607C(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, int a6)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _DWORD v9[2] = sub_1002B610C;
  v9[3] = &unk_10088D4E8;
  void v9[4] = a1;
  void v9[5] = a2;
  char v11 = a5;
  __int16 v10 = a3;
  char v12 = a4;
  char v13 = a6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B616C;
  v7[3] = &unk_1008800D8;
  void v7[4] = a2;
  char v8 = a5;
  return sub_1002D04D0(a1, 122LL, a6, v9, v7);
}

uint64_t sub_1002B610C(uint64_t a1)
{
  return 408LL;
}

uint64_t sub_1002B616C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 22sub_10026E9C8(v1, 0LL) = *(_BYTE *)(result + 40) != 0;
  return result;
}

uint64_t sub_1002B6184(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x7Bu);
}

uint64_t sub_1002B61D0(uint64_t a1, char a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B622C;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 123LL, a3, v4, 0LL);
}

uint64_t sub_1002B622C()
{
  return sub_100193B00();
}

uint64_t sub_1002B624C(int a1, __int128 *a2)
{
  xmmword_1008EFA30 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[2];
  __int128 v5 = a2[4];
  xmmword_1008EFA60 = a2[3];
  *(_OWORD *)&dword_1008EFA70 = v5;
  xmmword_1008EFA40 = v3;
  *(_OWORD *)&dword_1008EFA50 = v4;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xFDu);
}

uint64_t sub_1002B62B8(uint64_t a1, int a2, uint64_t a3)
{
  void v4[4] = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B6334;
  v5[3] = &unk_10088D2A8;
  char v6 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B634C;
  void v4[3] = &unk_10087EB20;
  return sub_1002D04D0(a1, 253LL, a2, v5, v4);
}

uint64_t sub_1002B6334()
{
  return sub_100193B88();
}

__n128 sub_1002B634C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v1 = xmmword_1008EFA30;
  __n128 result = (__n128)xmmword_1008EFA40;
  __int128 v3 = *(_OWORD *)&dword_1008EFA50;
  __int128 v4 = *(_OWORD *)&dword_1008EFA70;
  *(_OWORD *)(v1 + 4_Block_object_dispose(va, 8) = xmmword_1008EFA60;
  *(_OWORD *)(v1 + sub_100242FAC(v1 - 64) = v4;
  *(__n128 *)(v1 + 16) = result;
  *(_OWORD *)(v1 + sub_100242FAC(v1 - 32) = v3;
  return result;
}

uint64_t sub_1002B6374(uint64_t a1, int a2, int a3, uint64_t a4)
{
  void v5[4] = a4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B63EC;
  void v6[3] = &unk_10088D8D8;
  int v7 = a2;
  char v8 = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B640C;
  v5[3] = &unk_10087EB20;
  return sub_1002D04D0(a1, 253LL, a3, v6, v5);
}

uint64_t sub_1002B63EC()
{
  return sub_100193C10();
}

__n128 sub_1002B640C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v1 = xmmword_1008EFA30;
  __n128 result = (__n128)xmmword_1008EFA40;
  __int128 v3 = *(_OWORD *)&dword_1008EFA50;
  __int128 v4 = *(_OWORD *)&dword_1008EFA70;
  *(_OWORD *)(v1 + 4_Block_object_dispose(va, 8) = xmmword_1008EFA60;
  *(_OWORD *)(v1 + sub_100242FAC(v1 - 64) = v4;
  *(__n128 *)(v1 + 16) = result;
  *(_OWORD *)(v1 + sub_100242FAC(v1 - 32) = v3;
  return result;
}

uint64_t sub_1002B6434(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xFEu);
}

uint64_t sub_1002B6480(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B64E4;
  void v6[3] = &unk_10088D4E8;
  int v7 = a2;
  void v6[4] = a3;
  void v6[5] = a4;
  char v8 = a5;
  return sub_1002D04D0(a1, 254LL, a5, v6, 0LL);
}

uint64_t sub_1002B64E4(uint64_t a1)
{
  return sub_100193C98(*(unsigned int *)(a1 + 48), *(void *)(a1 + 32), *(void **)(a1 + 40));
}

uint64_t sub_1002B6508(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xFFu);
}

uint64_t sub_1002B6554(uint64_t a1, char a2, char a3, char a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B65BC;
  void v6[3] = &unk_10088D508;
  char v7 = a2;
  char v8 = a3;
  char v9 = a4;
  char v10 = a5;
  return sub_1002D04D0(a1, 255LL, a5, v6, 0LL);
}

uint64_t sub_1002B65BC()
{
  return sub_100193D38();
}

uint64_t sub_1002B65E4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x100u);
}

uint64_t sub_1002B6630(uint64_t a1, char a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B6698;
  v5[3] = &unk_10088D668;
  char v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_1002D04D0(a1, 256LL, a4, v5, 0LL);
}

uint64_t sub_1002B6698()
{
  return sub_100193DC0();
}

uint64_t sub_1002B66BC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x101u);
}

uint64_t sub_1002B6708(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002B6764;
  void v4[3] = &unk_10088D268;
  void v4[4] = a2;
  char v5 = a3;
  return sub_1002D04D0(a1, 257LL, a3, v4, 0LL);
}

uint64_t sub_1002B6764()
{
  return sub_100193E48();
}

uint64_t sub_1002B6784(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xF7u);
}

uint64_t sub_1002B67D0(uint64_t a1, char a2, char a3, char a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B6838;
  void v6[3] = &unk_10088D508;
  char v7 = a2;
  char v8 = a3;
  char v9 = a4;
  char v10 = a5;
  return sub_1002D04D0(a1, 247LL, a5, v6, 0LL);
}

uint64_t sub_1002B6838()
{
  return sub_100193ED0();
}

uint64_t sub_1002B6860(_DWORD *a1)
{
  unsigned int v1 = a1[177];
  if (v1 < 0x7D0)
  {
    if (v1)
    {
      uint64_t v4 = sub_1002E6BF0();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 344LL))(v4) & 1) != 0)
      {
        return 1;
      }

      else
      {
        uint64_t v5 = sub_1002E6BF0();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 384LL))(v5))
        {
          else {
            return 5;
          }
        }

        else if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 1976LL))(a1))
        {
          return 5;
        }

        else
        {
          return 4;
        }
      }
    }
  }

  else
  {
    if (v1 < 0xFA0) {
      return 4;
    }
    if (v1 == 6000) {
      return 5;
    }
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
    sub_1006681B0();
  }
  return 0;
}

uint64_t sub_1002B694C(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1002B6974(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x7Du);
}

uint64_t sub_1002B69C0(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B6A1C;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 125LL, 1, v3, 0LL);
}

uint64_t sub_1002B6A1C()
{
  return sub_100194F40();
}

uint64_t sub_1002B6A2C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x85u);
}

uint64_t sub_1002B6A78(uint64_t a1, int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B6AD4;
  v3[3] = &unk_10088D508;
  int v4 = a2;
  return sub_1002D04D0(a1, 133LL, 1, v3, 0LL);
}

uint64_t sub_1002B6AD4()
{
  return sub_1001917E0();
}

uint64_t sub_1002B6AE4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x7Eu);
}

uint64_t sub_1002B6B30(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B6B8C;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 126LL, 1, v3, 0LL);
}

uint64_t sub_1002B6B8C()
{
  return sub_100192FD8();
}

uint64_t sub_1002B6B9C(uint64_t a1, char a2, char a3, __int16 a4, __int16 a5)
{
  uint64_t v9 = sub_100404EB8();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_1002B6C20;
  v11[3] = &unk_10087FF00;
  char v14 = a2;
  char v15 = a3;
  __int16 v12 = a4;
  __int16 v13 = a5;
  sub_100405384(v9, v11);
  return 0LL;
}

uint64_t sub_1002B6C20(uint64_t a1)
{
  uint64_t v2 = sub_1002E9074();
  return (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)v2 + 56LL))( v2,  *(unsigned __int8 *)(a1 + 36),  *(unsigned __int8 *)(a1 + 37),  *(unsigned __int16 *)(a1 + 32),  *(unsigned __int16 *)(a1 + 34));
}

uint64_t sub_1002B6C58(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x83u);
}

uint64_t sub_1002B6CA4(uint64_t a1, __int16 a2, int a3, int a4, uint64_t a5, __int16 a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B6D0C;
  v7[3] = &unk_10088D608;
  __int16 v10 = a2;
  int v8 = a3;
  int v9 = a4;
  void v7[4] = a5;
  __int16 v11 = a6;
  return sub_1002D04D0(a1, 131LL, 1, v7, 0LL);
}

uint64_t sub_1002B6D0C()
{
  return sub_100194530();
}

uint64_t sub_1002B6D2C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x87u);
}

uint64_t sub_1002B6D78( uint64_t a1, char a2, __int16 a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, __int16 a11, __int16 a12, __int16 a13, char a14, int a15, int a16, int a17, char a18, int a19)
{
  uint64_t v27 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v27 + 744LL))(v27) & 1) != 0)
  {
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1002B6EEC;
    v31[3] = &unk_10088D448;
    char v40 = a2;
    __int16 v36 = a3;
    char v41 = a4;
    char v42 = a5;
    char v43 = a6;
    char v44 = a7;
    char v45 = a8;
    char v46 = a9;
    char v47 = a10;
    __int16 v37 = a11;
    __int16 v38 = a12;
    __int16 v39 = a13;
    char v48 = a14;
    int v32 = a15;
    int v33 = a16;
    char v49 = a18;
    int v34 = a17;
    int v35 = a19;
    return sub_1002D04D0(a1, 135LL, 1, v31, 0LL);
  }

  else
  {
    uint64_t v29 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      uint64_t v28 = 2LL;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "isRssiStatisticAndDetectionEnabled is not supported",  buf,  2u);
    }

    else
    {
      return 2LL;
    }
  }

  return v28;
}

uint64_t sub_1002B6EEC(uint64_t a1)
{
  return sub_1001945B8( *(unsigned __int8 *)(a1 + 56),  *(unsigned __int16 *)(a1 + 48),  *(unsigned __int8 *)(a1 + 57),  *(char *)(a1 + 58),  *(char *)(a1 + 59));
}

uint64_t sub_1002B6F74(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v8 + 768LL))(v8) & 1) != 0)
  {
    *(_WORD *)(a1 + 1430) = a2;
    *(_WORD *)(a1 + 14sub_100242FAC(v1 - 32) = a3;
    *(_BYTE *)(a1 + 1434) = a4 != 0;
    int v9 = (os_log_s *)qword_1008F7578;
    uint64_t v10 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      v13[0] = 67109376;
      v13[1] = a2;
      __int16 v14 = 1024;
      int v15 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "configureMinMaxUsageNotification is now : max:%d min:%d",  (uint8_t *)v13,  0xEu);
      return 0LL;
    }
  }

  else
  {
    __int16 v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13[0]) = 0;
      uint64_t v10 = 2LL;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "isBluetoothUsageEnabled is not supported",  (uint8_t *)v13,  2u);
    }

    else
    {
      return 2LL;
    }
  }

  return v10;
}

uint64_t sub_1002B70BC(uint64_t a1, char a2, int a3)
{
  uint64_t v6 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 776LL))(v6) & 1) != 0)
  {
    *(_BYTE *)(a1 + 1435) = a2;
    *(_WORD *)(a1 + 143_Block_object_dispose(va, 8) = 0;
    *(_WORD *)(a1 + 1436) = a3;
    char v7 = (os_log_s *)qword_1008F7578;
    uint64_t v8 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109120;
      v11[1] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "configurePhyStatisticsUsageNotification is now : subrate Factor:%d",  (uint8_t *)v11,  8u);
      return 0LL;
    }
  }

  else
  {
    int v9 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      uint64_t v8 = 2LL;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "isBluetoothPhyStatisticsUsageEnabled is not supported",  (uint8_t *)v11,  2u);
    }

    else
    {
      return 2LL;
    }
  }

  return v8;
}

uint64_t sub_1002B71EC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x84u);
}

uint64_t sub_1002B7238(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B7294;
  v3[3] = &unk_10088D2A8;
  char v4 = a2;
  return sub_1002D04D0(a1, 132LL, 1, v3, 0LL);
}

uint64_t sub_1002B7294()
{
  return sub_100193F58();
}

uint64_t sub_1002B72A4(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9)
{
  uint64_t v17 = sub_1002E6E9C();
  BOOL v18 = sub_1002D1240(v17, 5);
  uint64_t v19 = sub_1002E6E9C();
  int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 2560LL))(v19);
  uint64_t result = 3LL;
  if (a2)
  {
    if (v18) {
      int v22 = 2;
    }
    else {
      int v22 = 1;
    }
    if (v20) {
      int v23 = 3;
    }
    else {
      int v23 = v22;
    }
    if (v23 == 3)
    {
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472LL;
      void v32[2] = sub_1002B74F8;
      v32[3] = &unk_10088D248;
      v32[4] = a2;
      char v33 = a3;
      char v34 = a4;
      char v35 = a5;
      char v36 = a7;
      char v37 = a8;
      char v38 = a9;
      __int16 v24 = v32;
      uint64_t v25 = a1;
      uint64_t v26 = 237LL;
    }

    else if (v23 == 1)
    {
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      v39[2] = sub_1002B7454;
      v39[3] = &unk_10088D228;
      v39[4] = a2;
      char v40 = a3;
      char v41 = a4;
      char v42 = a5;
      __int16 v24 = v39;
      uint64_t v25 = a1;
      uint64_t v26 = 231LL;
    }

    else
    {
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      void v27[2] = sub_1002B75AC;
      v27[3] = &unk_10088D628;
      void v27[4] = a2;
      char v28 = a3;
      char v29 = a4;
      char v30 = a5;
      char v31 = a6;
      __int16 v24 = v27;
      uint64_t v25 = a1;
      uint64_t v26 = 233LL;
    }

    return sub_1002D04D0(v25, v26, 1, v24, 0LL);
  }

  return result;
}

uint64_t sub_1002B7454(uint64_t a1)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v4 = 1LL;
  unsigned int v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  uint64_t v5 = v1 + 1;
  LOBYTE(v6) = v2;
  BYTE1(v6) = *(_BYTE *)(a1 + 40);
  WORD1(v6) = *(_WORD *)(a1 + 41);
  return sub_10018F7A0((uint64_t)&v4);
}

uint64_t sub_1002B74AC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xE7u);
}

uint64_t sub_1002B74F8(uint64_t a1)
{
  v4[0] = 3LL;
  unsigned int v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  v4[1] = v1 + 1;
  char v5 = v2;
  char v6 = *(_BYTE *)(a1 + 40);
  __int16 v7 = *(_WORD *)(a1 + 41);
  char v8 = 0;
  char v9 = *(_BYTE *)(a1 + 43);
  __int16 v10 = *(_WORD *)(a1 + 44);
  return sub_10018F7A0((uint64_t)v4);
}

uint64_t sub_1002B7560(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xEDu);
}

uint64_t sub_1002B75AC(uint64_t a1)
{
  char v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v4 = 2LL;
  unsigned int v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  char v5 = v1 + 1;
  LOBYTE(v6) = v2;
  *(_DWORD *)((char *)&v6 + 1) = *(_DWORD *)(a1 + 40);
  return sub_10018F7A0((uint64_t)&v4);
}

uint64_t sub_1002B75FC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xE9u);
}

uint64_t sub_1002B7648(int a1, int a2, int a3, int a4)
{
  char v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109888;
    v10[1] = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "pollStatsForDevicesAddedToFilterAcceptListWithOptionsCB: status %d, numAdvs %u, rssi %d, lastRssiTimeDifference %u msec",  (uint8_t *)v10,  0x1Au);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xE8u);
}

uint64_t sub_1002B7750(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 3LL;
  }
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B77B8;
  v3[3] = &unk_10088D3C8;
  void v3[4] = a2;
  return sub_1002D04D0(a1, 232LL, 1, v3, 0LL);
}

uint64_t sub_1002B77B8(uint64_t a1)
{
  uint64_t v5 = 0LL;
  unsigned int v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  uint64_t v4 = v1 + 1;
  LOBYTE(v5) = v2;
  return sub_10018F838(&v4);
}

uint64_t sub_1002B77F4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x86u);
}

uint64_t sub_1002B7840( uint64_t a1, char a2, __int16 a3, __int16 a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  if (*(_DWORD *)(a1 + 708) > 0x16u) {
    char v10 = a7;
  }
  else {
    char v10 = 0;
  }
  if ((v10 & 1) == 0)
  {
    a8 = 0;
    a9 = 0;
    a10 = 0;
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  _DWORD v14[2] = sub_1002B78E4;
  v14[3] = &unk_10088D228;
  char v17 = a2;
  __int16 v15 = a3;
  __int16 v16 = a4;
  char v18 = a5;
  char v19 = a6;
  char v20 = v10;
  char v21 = a8;
  char v22 = a9;
  char v23 = a10;
  return sub_1002D04D0(a1, 134LL, 1, v14, 0LL);
}

uint64_t sub_1002B78E4(uint64_t a1)
{
  return sub_10018D87C(*(unsigned __int8 *)(a1 + 36), *(unsigned __int16 *)(a1 + 32));
}

uint64_t sub_1002B7938(uint64_t a1, int a2, int a3)
{
  if (qword_1008D92C0 != -1) {
    dispatch_once(&qword_1008D92C0, &stru_10088DC08);
  }
  uint64_t v6 = sub_100292FBC(qword_1008D92B8, 2);
  if (a3)
  {
    if (a2 == 1)
    {
      uint64_t v27 = 0LL;
      char v28 = 0LL;
      uint64_t v29 = 0LL;
      sub_10054FB04(v6, (uint64_t *)&v27);
      unsigned int v7 = *(_DWORD *)(a1 + 708);
      if (v7 - 1 <= 0x7CE)
      {
        LODWORD(__p[0]) = v7 > 0xC;
LABEL_7:
        v25[0] = __p;
        char v8 = sub_1002BBE00(&v27, (int *)__p, (uint64_t)&unk_1006C2518, (_DWORD **)v25);
LABEL_29:
        uint64_t v10 = *((unsigned __int8 *)v8 + 32);
        sub_10023BF24((uint64_t)&v27, v28);
        return v10;
      }

      goto LABEL_14;
    }

    return 100LL;
  }

  switch(a2)
  {
    case 131091:
      uint64_t v27 = 0LL;
      char v28 = 0LL;
      uint64_t v29 = 0LL;
      uint64_t v11 = sub_10054FBA8(v6, (uint64_t *)&v27);
      if (GestaltGetDeviceClass(v11) != 7)
      {
        uint64_t v10 = 100LL;
LABEL_33:
        sub_10023E78C((uint64_t)&v27, v28);
        return v10;
      }

      sub_100361240((uint64_t)v25);
      unint64_t v12 = v26;
      if ((v26 & 0x80u) != 0) {
        unint64_t v12 = (unint64_t)v25[1];
      }
      if (v12)
      {
        sub_100361240((uint64_t)__p);
        BOOL v13 = &v28 != (char **)sub_100024098((uint64_t)&v27, (const void **)__p);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if ((v26 & 0x80) == 0) {
          goto LABEL_23;
        }
      }

      else
      {
        BOOL v13 = 0;
        if ((v26 & 0x80) == 0)
        {
LABEL_23:
          if (v13)
          {
            sub_100361240((uint64_t)v25);
            __p[0] = v25;
          }

          else
          {
            int v14 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
              sub_10066821C(v14, v15, v16, v17, v18, v19, v20, v21);
            }
            uint64_t v10 = 5LL;
          }

          goto LABEL_33;
        }
      }

      operator delete(v25[0]);
      goto LABEL_23;
    case 4:
      return sub_10054FB64(v6);
    case 3:
      uint64_t v27 = 0LL;
      char v28 = 0LL;
      uint64_t v29 = 0LL;
      sub_10054FB04(v6, (uint64_t *)&v27);
      unsigned int v9 = *(_DWORD *)(a1 + 708);
      if (v9 - 1 <= 0x7CE)
      {
        LODWORD(__p[0]) = v9 > 0xC;
        goto LABEL_7;
      }

void sub_1002B7C74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21, void *a22)
{
}

uint64_t sub_1002B7CF0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xEAu);
}

uint64_t sub_1002B7D3C(uint64_t a1, int a2, int a3, int a4, char a5)
{
  int v10 = *(unsigned __int8 *)(a1 + 1203);
  if (v10 == a2 && (!a2 || *(unsigned __int16 *)(a1 + 1206) == a3 && *(unsigned __int16 *)(a1 + 1204) == a4))
  {
    uint64_t v11 = (os_log_s *)qword_1008F7578;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      BOOL v13 = "No";
      *(_DWORD *)std::stringbuf::string_type buf = 136315650;
      if (a2) {
        BOOL v13 = "Yes";
      }
      uint64_t v29 = v13;
      __int16 v30 = 1024;
      *(_DWORD *)char v31 = a3;
      *(_WORD *)&void v31[4] = 1024;
      *(_DWORD *)&v31[6] = a4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "btscLeSetConnectionScan: same as current ScanCore config enable %s interval %d window %d",  buf,  0x18u);
      return 0LL;
    }
  }

  else
  {
    int v14 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = "Yes";
      int v16 = *(unsigned __int16 *)(a1 + 1206);
      int v17 = *(unsigned __int16 *)(a1 + 1204);
      if (v10) {
        uint64_t v18 = "Yes";
      }
      else {
        uint64_t v18 = "No";
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136316418;
      if (!a2) {
        uint64_t v15 = "No";
      }
      uint64_t v29 = v18;
      __int16 v30 = 2080;
      *(void *)char v31 = v15;
      *(_WORD *)&v31[8] = 1024;
      int v32 = v16;
      __int16 v33 = 1024;
      int v34 = a3;
      __int16 v35 = 1024;
      int v36 = v17;
      __int16 v37 = 1024;
      int v38 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "btscLeSetConnectionScan: ScanCore Connection Scan Params to be updated enabled %s -> %s interval %d -> %d window %d -> %d",  buf,  0x2Eu);
    }

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    void v23[2] = sub_1002B7F88;
    v23[3] = &unk_10088D798;
    char v26 = a2;
    __int16 v24 = a3;
    __int16 v25 = a4;
    char v27 = a5;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1002B7FA8;
    v19[3] = &unk_10088DA08;
    void v19[4] = a1;
    char v22 = a2;
    __int16 v20 = a3;
    __int16 v21 = a4;
    return sub_1002D04D0(a1, 234LL, 1, v23, v19);
  }

  return result;
}

uint64_t sub_1002B7F88(uint64_t a1)
{
  return sub_10018F8D0(*(unsigned __int8 *)(a1 + 36), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 34));
}

uint64_t sub_1002B7FA8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(_BYTE *)(v1 + 1203) = *(_BYTE *)(result + 44);
  *(_WORD *)(v1 + 1206) = *(_WORD *)(result + 40);
  *(_WORD *)(v1 + 1204) = *(_WORD *)(result + 42);
  return result;
}

BOOL sub_1002B7FC8()
{
  return sub_100361020() == 156;
}

uint64_t sub_1002B7FE4(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xF8u);
}

uint64_t sub_1002B8030(uint64_t a1, char a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 3416LL))(a1) & 1) != 0)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_1002B8140;
    void v6[3] = &unk_10088D2A8;
    char v7 = a2;
    return sub_1002D04D0(a1, 248LL, 1, v6, 0LL);
  }

  else
  {
    uint64_t v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      unsigned int v9 = sub_1002CE354(a1, 248);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "setAGCTableOverrideCB %{public}s is not implemented on this platform",  buf,  0xCu);
    }

    return 2LL;
  }

uint64_t sub_1002B8140()
{
  return sub_10019544C();
}

void sub_1002B8150(int a1, __int128 *a2, int a3)
{
  if (a3 == 32)
  {
    __int128 v4 = a2[1];
    xmmword_1008EFA30 = *a2;
    xmmword_1008EFA40 = v4;
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
    }
    sub_1004335B8(a1, 0xF9u);
  }

  else
  {
    uint64_t v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066824C(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }

uint64_t sub_1002B81E8(uint64_t a1, uint64_t a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002B8258;
  void v4[3] = &unk_1008800D8;
  void v4[4] = a2;
  char v5 = a3;
  return sub_1002D04D0(a1, 249LL, 1, &stru_10088DA28, v4);
}

int sub_1002B824C(id a1)
{
  return sub_1001954D4();
}

void *sub_1002B8258(uint64_t a1)
{
  else {
    size_t v1 = *(unsigned __int8 *)(a1 + 40);
  }
  return memcpy(*(void **)(a1 + 32), &xmmword_1008EFA30, v1);
}

uint64_t sub_1002B827C(uint64_t a1, const void *a2, size_t __n)
{
  int v3 = __n;
  if ((_DWORD)a1)
  {
    uint64_t v4 = a1;
    byte_1008EFB2B = 0;
    char v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668334(v3, v4, v5);
    }
  }

  else if (__n > 0xFB)
  {
    uint64_t v6 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_1006682B8(v3, v6);
    }
    byte_1008EFB2B = 0;
    LODWORD(v4) = 114;
  }

  else
  {
    byte_1008EFB2B = __n;
    memcpy(&xmmword_1008EFA30, a2, __n);
    LODWORD(v4) = 0;
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(v4, 0xFAu);
}

uint64_t sub_1002B8370(uint64_t a1, int a2, char a3, uint64_t a4)
{
  if ((a3 + 4) > 5u)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    _DWORD v7[2] = sub_1002B8444;
    v7[3] = &unk_10088D8D8;
    int v8 = a2;
    char v9 = a3;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_1002B845C;
    v5[3] = &unk_1008800D8;
    char v6 = a3;
    void v5[4] = a4;
    return sub_1002D04D0(a1, 250LL, 1, v7, v5);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_1006683A8();
    }
    return 3LL;
  }

uint64_t sub_1002B8444()
{
  return sub_10019555C();
}

void sub_1002B845C(uint64_t a1)
{
  if (byte_1008EFB2B == *(_BYTE *)(a1 + 40))
  {
    memcpy(*(void **)(a1 + 32), &xmmword_1008EFA30, byte_1008EFB2B);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_100668408();
  }

BOOL sub_1002B84D0()
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 1) < 0x12;
}

uint64_t sub_1002B84F4(uint64_t a1, unsigned int a2)
{
  else {
    return a2 >> 1;
  }
}

uint64_t sub_1002B8518()
{
  unsigned int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  unsigned int v1 = v0 - 1;
  if (v0 <= 0x15) {
    unsigned int v2 = 28;
  }
  else {
    unsigned int v2 = 102;
  }
  if (v1 >= 0x7CF) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1002B854C()
{
  unsigned int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  unsigned int v1 = v0 - 1;
  if (v0 <= 0x15) {
    unsigned __int8 v2 = 63;
  }
  else {
    unsigned __int8 v2 = -38;
  }
  if (v1 >= 0x7CF) {
    return 0;
  }
  return v2;
}

uint64_t sub_1002B8584(uint64_t a1, _OWORD *a2, void *a3)
{
  *a2 = *(_OWORD *)(a1 + 1224);
  __int128 v3 = *(_OWORD *)(a1 + 1240);
  __int128 v4 = *(_OWORD *)(a1 + 1256);
  __int128 v5 = *(_OWORD *)(a1 + 1288);
  a2[3] = *(_OWORD *)(a1 + 1272);
  a2[4] = v5;
  a2[1] = v3;
  a2[2] = v4;
  __int128 v6 = *(_OWORD *)(a1 + 1304);
  __int128 v7 = *(_OWORD *)(a1 + 1320);
  __int128 v8 = *(_OWORD *)(a1 + 1352);
  a2[7] = *(_OWORD *)(a1 + 1336);
  a2[8] = v8;
  a2[5] = v6;
  a2[6] = v7;
  __int128 v9 = *(_OWORD *)(a1 + 1368);
  __int128 v10 = *(_OWORD *)(a1 + 1384);
  __int128 v11 = *(_OWORD *)(a1 + 1400);
  *(_OWORD *)((char *)a2 + 190) = *(_OWORD *)(a1 + 1414);
  a2[10] = v10;
  a2[11] = v11;
  a2[9] = v9;
  *a3 = *(void *)(a1 + 1216);
  return 0LL;
}

uint64_t sub_1002B85D8(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x88u);
}

uint64_t sub_1002B8624( uint64_t a1, char a2, char a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, char a11)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1002B86A0;
  _OWORD v12[3] = &unk_10088D3E8;
  char v20 = a2;
  char v21 = a3;
  int v13 = a4;
  int v14 = a5;
  int v15 = a6;
  int v16 = a7;
  int v17 = a8;
  int v18 = a9;
  int v19 = a10;
  char v22 = a11;
  return sub_1002D04D0(a1, 136LL, 1, v12, 0LL);
}

uint64_t sub_1002B86A0(uint64_t a1)
{
  return sub_1001955E4(*(unsigned __int8 *)(a1 + 60), *(unsigned __int8 *)(a1 + 61));
}

uint64_t sub_1002B86F0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x89u);
}

uint64_t sub_1002B873C(uint64_t a1, char a2, char a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002B879C;
  void v4[3] = &unk_10088D368;
  char v5 = a2;
  char v6 = a3;
  return sub_1002D04D0(a1, 137LL, 1, v4, 0LL);
}

uint64_t sub_1002B879C()
{
  return sub_100195684();
}

BOOL sub_1002B87B4()
{
  int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  unsigned int v1 = v0 - 2001;
  unsigned int v2 = v0 - 21;
  return v1 < 0x7CF || v2 < 5;
}

uint64_t sub_1002B87E0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xECu);
}

uint64_t sub_1002B882C(uint64_t a1, __int16 a2, char a3, char a4, char a5, char a6, char a7)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1002B889C;
  v8[3] = &unk_10088D488;
  __int16 v9 = a2;
  char v10 = a3;
  char v11 = a4;
  char v12 = a5;
  char v13 = a6;
  char v14 = a7;
  return sub_1002D04D0(a1, 236LL, 1, v8, 0LL);
}

uint64_t sub_1002B889C()
{
  return sub_10018E1E8();
}

uint64_t sub_1002B88C4(int a1, int a2)
{
  __int128 v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "loadMSFFileCB: status = %d", (uint8_t *)v6, 8u);
  }

  if ((a1 || a2) && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_10066846C();
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x103u);
}

uint64_t sub_1002B89D0(uint64_t a1, char a2, __int16 a3, uint64_t a4, __int16 a5, int a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1002B8A38;
  v7[3] = &unk_10088D6C8;
  char v10 = a2;
  __int16 v8 = a3;
  void v7[4] = a4;
  __int16 v9 = a5;
  return sub_1002D04D0(a1, 259LL, a6, v7, 0LL);
}

uint64_t sub_1002B8A38(uint64_t a1)
{
  return sub_10019570C( *(unsigned __int8 *)(a1 + 44),  *(_WORD *)(a1 + 40),  *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 42));
}

uint64_t sub_1002B8A58(int a1)
{
  unsigned int v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "loadPwrRegulatoryFileCB: status = %d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x104u);
}

uint64_t sub_1002B8B2C(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002B8B90;
  v5[3] = &unk_10088D468;
  void v5[4] = a2;
  __int16 v6 = a3;
  return sub_1002D04D0(a1, 260LL, a4, v5, 0LL);
}

uint64_t sub_1002B8B90(uint64_t a1)
{
  return sub_1001957C4(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_1002B8BA8(int a1)
{
  unsigned int v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "loadPwrRegulatoryFileA3CB: status = %d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x105u);
}

uint64_t sub_1002B8C7C(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B8CE0;
  void v6[3] = &unk_10088D628;
  __int16 v7 = a2;
  void v6[4] = a3;
  __int16 v8 = a4;
  return sub_1002D04D0(a1, 261LL, a5, v6, 0LL);
}

uint64_t sub_1002B8CE0(uint64_t a1)
{
  return sub_10019587C(*(unsigned __int16 *)(a1 + 40), *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
}

uint64_t sub_1002B8CFC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x106u);
}

uint64_t sub_1002B8D48(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1002B8DA4;
  v3[3] = &unk_10088D3C8;
  void v3[4] = a2;
  return sub_1002D04D0(a1, 262LL, 1, v3, 0LL);
}

uint64_t sub_1002B8DA4(uint64_t a1)
{
  return sub_100195D70(*(void *)(a1 + 32));
}

uint64_t sub_1002B8DB4()
{
  return 0LL;
}

uint64_t sub_1002B8DBC()
{
  return 0LL;
}

uint64_t sub_1002B8DC4()
{
  unsigned __int8 v7 = 0;
  uint64_t v0 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "SupportsChannelSounding");
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v0 + 72LL))( v0,  buf,  __p,  &v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0)
  {
    operator delete(*(void **)buf);
    if (!(_DWORD)v1) {
      return v1;
    }
  }

  else if (!(_DWORD)v1)
  {
    return v1;
  }

  int v2 = v7;
  uint64_t v1 = v7 != 0;
  __int128 v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Overriding Channel sounding support to : %d",  buf,  8u);
  }

  return v1;
}

void sub_1002B8EF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B8F2C()
{
  return 0LL;
}

uint64_t sub_1002B8F34(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xEEu);
}

uint64_t sub_1002B8F80(unsigned __int8 *a1, uint64_t a2, char a3, int a4, uint64_t a5)
{
  char v10 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = sub_1005BFB9C(a2);
    char v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    int v13 = a1[1444];
    *(_DWORD *)std::stringbuf::string_type buf = 138412802;
    char v21 = v12;
    __int16 v22 = 1024;
    int v23 = a4;
    __int16 v24 = 1024;
    int v25 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "FastLEConnection:writeStoredLTKForDevice %@ length:%d fStoredLTKCount:%d",  buf,  0x18u);
  }

  unsigned int v14 = a1[1444];
  else {
    unsigned int v15 = 8;
  }
  if (v15 <= v14) {
    return 23LL;
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  _DWORD v17[2] = sub_1002B9118;
  v17[3] = &unk_10088D8B8;
  void v17[4] = a1;
  void v17[5] = a2;
  char v18 = a3;
  char v19 = a4;
  v17[6] = a5;
  return sub_1002D04D0((uint64_t)a1, 238LL, 1, v17, 0LL);
}

uint64_t sub_1002B9118(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_100195930();
  if (!(_DWORD)result) {
    ++*(_BYTE *)(v1 + 1444);
  }
  return result;
}

uint64_t sub_1002B9160(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xEFu);
}

uint64_t sub_1002B91AC(unsigned __int8 *a1, uint64_t a2, char a3)
{
  char v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = sub_1005BFB9C(a2);
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    int v9 = a1[1444];
    *(_DWORD *)std::stringbuf::string_type buf = 138412546;
    unsigned int v14 = v8;
    __int16 v15 = 1024;
    int v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "FastLEConnection:removeStoredLTKForDevice %@ fStoredLTKCount:%d",  buf,  0x12u);
  }

  if (!a1[1444]) {
    return 0LL;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_1002B9300;
  v11[3] = &unk_10088D288;
  void v11[4] = a1;
  void v11[5] = a2;
  char v12 = a3;
  return sub_1002D04D0((uint64_t)a1, 239LL, 1, v11, 0LL);
}

uint64_t sub_1002B9300(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_100195A40();
  if (!(_DWORD)result) {
    --*(_BYTE *)(v1 + 1444);
  }
  return result;
}

uint64_t sub_1002B9340(int a1, int a2, size_t __size, const void *a4)
{
  int v4 = a1;
  if (!a1)
  {
    char v6 = a2;
    int v4 = 105;
    if (a2)
    {
      unsigned int v7 = __size;
      if ((_DWORD)__size)
      {
        if (a4)
        {
          int v9 = malloc(__size);
          *((void *)&xmmword_1008EFA30 + 1) = v9;
          if (v9)
          {
            LOBYTE(xmmword_1008EFA30) = v6;
            WORD1(xmmword_1008EFA30) = v7;
            memcpy(v9, a4, v7);
            int v4 = 0;
          }

          else
          {
            int v4 = 106;
          }
        }
      }
    }
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(v4, 0xF0u);
}

uint64_t sub_1002B93F8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  __int16 v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *a3;
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    int v13 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "FastLEConnection:readLocalControllerCachedInfo maxLen:%d",  buf,  8u);
  }

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_1002B9530;
  v11[3] = &unk_100888050;
  void v11[4] = a3;
  void v11[5] = a2;
  void v11[6] = a4;
  return sub_1002D04D0(a1, 240LL, 1, &stru_10088DA48, v11);
}

int sub_1002B9524(id a1)
{
  return sub_100195B50();
}

void sub_1002B9530(uint64_t a1)
{
  uint64_t v2 = *((void *)&xmmword_1008EFA30 + 1);
  uint64_t v3 = WORD1(xmmword_1008EFA30);
  if (*((void *)&xmmword_1008EFA30 + 1)) {
    BOOL v4 = WORD1(xmmword_1008EFA30) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    **(_BYTE **)(a1 + sub_100242FAC(v1 - 32) = 0;
    **(_BYTE **)(a1 + 40) = 0;
  }

  else
  {
    char v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = xmmword_1008EFA30;
      __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v2, v3));
      v12[0] = 67109378;
      v12[1] = v7;
      __int16 v13 = 2112;
      unsigned int v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "FastLEConnection:readLocalControllerCachedInfo version:%d data:%@",  (uint8_t *)v12,  0x12u);
    }

    unsigned int v9 = **(unsigned __int8 **)(a1 + 32);
    **(_BYTE **)(a1 + 40) = xmmword_1008EFA30;
    if (WORD1(xmmword_1008EFA30) < v9) {
      LOBYTE(v9) = BYTE2(xmmword_1008EFA30);
    }
    **(_BYTE **)(a1 + sub_100242FAC(v1 - 32) = v9;
    char v10 = *(void **)(a1 + 48);
    id v11 = (void *)*((void *)&xmmword_1008EFA30 + 1);
    memcpy(v10, *((const void **)&xmmword_1008EFA30 + 1), WORD1(xmmword_1008EFA30));
    free(v11);
  }

uint64_t sub_1002B968C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xF1u);
}

uint64_t sub_1002B96D8(unsigned __int8 *a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  char v12 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = sub_1005BFB9C(a2);
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    int v15 = a1[1445];
    *(_DWORD *)std::stringbuf::string_type buf = 138413314;
    int v25 = v14;
    __int16 v26 = 1024;
    int v27 = a3;
    __int16 v28 = 1024;
    int v29 = a4;
    __int16 v30 = 1024;
    unsigned int v31 = a5;
    __int16 v32 = 1024;
    int v33 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "FastLEConnection:writePeerControllerCachedInfo %@ resolvedAddress:%d version:%d length:%d fStoredPeerControllerCachedInfo:%d",  buf,  0x24u);
  }

  unsigned int v16 = a1[1445];
  else {
    unsigned int v17 = 8;
  }
  uint64_t result = 23LL;
  if (v17 > v16)
  {
    v20[0] = _NSConcreteStackBlock;
    if (a5 >= 0x17) {
      __int16 v19 = 23;
    }
    else {
      __int16 v19 = a5;
    }
    v20[1] = 3221225472LL;
    void v20[2] = sub_1002B9894;
    void v20[3] = &unk_10088DA68;
    v20[4] = a1;
    v20[5] = a2;
    char v22 = a3;
    BOOL v23 = a4 != 0;
    __int16 v21 = v19;
    v20[6] = a6;
    return sub_1002D04D0((uint64_t)a1, 241LL, 1, v20, 0LL);
  }

  return result;
}

uint64_t sub_1002B9894(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_100195BD8();
  if (!(_DWORD)result) {
    ++*(_BYTE *)(v1 + 1445);
  }
  return result;
}

uint64_t sub_1002B98E0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xF1u);
}

uint64_t sub_1002B992C(unsigned __int8 *a1, uint64_t a2, char a3)
{
  char v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = sub_1005BFB9C(a2);
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    int v9 = a1[1445];
    *(_DWORD *)std::stringbuf::string_type buf = 138412546;
    unsigned int v14 = v8;
    __int16 v15 = 1024;
    int v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "FastLEConnection:removePeerControllerCachedInfo %@ fStoredPeerControllerCachedInfo:%d",  buf,  0x12u);
  }

  if (!a1[1445]) {
    return 0LL;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_1002B9A80;
  v11[3] = &unk_10088D288;
  void v11[4] = a1;
  void v11[5] = a2;
  char v12 = a3;
  return sub_1002D04D0((uint64_t)a1, 241LL, 1, v11, 0LL);
}

uint64_t sub_1002B9A80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_100195BD8();
  if (!(_DWORD)result) {
    --*(_BYTE *)(v1 + 1445);
  }
  return result;
}

uint64_t sub_1002B9ACC(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0xF2u);
}

uint64_t sub_1002B9B18(uint64_t a1, int a2)
{
  BOOL v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    int v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "FastLEConnection:setMaxInstantUpdateForFastLEConnection %d",  buf,  8u);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002B9C28;
  void v6[3] = &unk_10088D2A8;
  char v7 = a2;
  return sub_1002D04D0(a1, 242LL, 1, v6, 0LL);
}

uint64_t sub_1002B9C28()
{
  return sub_100195C60();
}

uint64_t sub_1002B9C38(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x108u);
}

uint64_t sub_1002B9C84(uint64_t a1, int a2, char a3, int a4, char a5, char a6)
{
  char v12 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    int v22 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "FastLEConnection:setLEAdvTxPowerIncrease %d",  buf,  8u);
  }

  if ((a4 - 21) <= 0xAEu)
  {
    id v13 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v22 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "TxPowerDesired is not supported (%d dBm)",  buf,  8u);
    }

    return 11LL;
  }

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1002B9E1C;
  v15[3] = &unk_10088D8D8;
  char v16 = a2;
  char v17 = a3;
  char v18 = a4;
  char v19 = a5;
  char v20 = a6;
  return sub_1002D04D0(a1, 264LL, 1, v15, 0LL);
}