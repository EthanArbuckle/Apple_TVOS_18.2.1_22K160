void sub_10048ADE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100242CD8(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10048ADF4()
{
  char v2 = 0;
  sub_100242CA4(&v2);
  uint64_t v0 = sub_1000F9264();
  if ((_DWORD)v0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_100683E44();
    }
    uint64_t v0 = 1LL;
  }

  sub_100242CD8(&v2);
  return v0;
}

void sub_10048AE68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10048AE7C(uint64_t a1)
{
  uint64_t v2 = sub_1002E8D54();
  sub_10024E060(v2 + 368, a1 + 288);
  uint64_t v3 = sub_1002E8D54();
  sub_10024E060(v3 + 728, a1 + 280);
  uint64_t v4 = sub_1002E8D54();
  sub_10024E060(v4 + 1168, a1 + 304);
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089ACC0);
  }
  sub_10052AC9C((uint64_t)off_1008D67A0, a1 + 272);
  return 0LL;
}

_BYTE *sub_10048AF0C(uint64_t a1, unint64_t a2, int a3)
{
  v6 = (os_log_s *)(id)qword_1008F7730;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v7 = sub_1003D0670(a2);
    sub_1003CF00C(a2, __p);
    v8 = "Not Connected";
    if (v7) {
      v8 = "Connected";
    }
    if (v20 >= 0) {
      v9 = __p;
    }
    else {
      v9 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    v22 = v8;
    __int16 v23 = 2082;
    v24 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s HID device %{public}s will unpair",  buf,  0x16u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }

  char v18 = 0;
  sub_100242CA4(&v18);
  uint64_t v10 = sub_1000F73D8(a2 + 128);
  uint64_t v11 = v10;
  if (v10) {
    BOOL v12 = *(_BYTE *)(v10 + 7) != 0;
  }
  else {
    BOOL v12 = 0;
  }
  sub_100242CD0(&v18);
  if (!a3 && ((v12 | !sub_1003D0670(a2)) & 1) == 0)
  {
    sub_100242C98(&v18);
    sub_10048B17C(a1, a2);
    sub_100242CD0(&v18);
    if (!v11)
    {
LABEL_22:
      *(_WORD *)(a1 + 560) = 0;
      return sub_100242CD8(&v18);
    }

    __p[0] = 0LL;
    __p[1] = 0LL;
    sub_100242F28((uint64_t)__p, a1 + 448);
    BOOL v13 = sub_1002431A4((pthread_cond_t *)(a1 + 512), (pthread_mutex_t **)__p, 0x7D0uLL);
    v14 = (os_log_s *)qword_1008F7730;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      if (v15)
      {
        *(_WORD *)buf = 0;
        v16 = "HID recanted Successfully";
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
      }
    }

    else if (v15)
    {
      *(_WORD *)buf = 0;
      v16 = "HID timedout waiting to recant";
      goto LABEL_20;
    }

    sub_100242FAC((uint64_t)__p);
    goto LABEL_22;
  }

  return sub_100242CD8(&v18);
}

void sub_10048B138( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, char a13)
{
}

uint64_t sub_10048B17C(uint64_t a1, unint64_t a2)
{
  if ((sub_1000A86F0() & 1) == 0)
  {
    uint64_t v4 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_FAULT)) {
      sub_100683F3C(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  uint64_t v12 = sub_100411370((void *)a1, a2);
  uint64_t v13 = sub_1000F73D8(a2 + 128);
  if (v13) {
    *(_BYTE *)(v13 + 7) = 1;
  }
  v14 = (os_log_s *)(id)qword_1008F7730;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
    {
      sub_1003CF00C(a2, __p);
      if (v24 >= 0) {
        BOOL v15 = __p;
      }
      else {
        BOOL v15 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446210;
      v26 = (const char *)v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Unplugging virtual cable to device %{public}s",  buf,  0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)buf = 136446210;
      v26 = "NULL";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Unplugging virtual cable to device %{public}s",  buf,  0xCu);
    }
  }

  if (sub_1003D5620(a2))
  {
    int v16 = sub_1003D562C(a2);
    if (v16) {
      v17 = (char *)&unk_1006C33BC;
    }
    else {
      v17 = (char *)&unk_1006C33BE;
    }
    *(_WORD *)(a1 + 560) = v12;
    if (v16) {
      size_t v18 = 2LL;
    }
    else {
      size_t v18 = 1LL;
    }
    int v19 = sub_1000F997C(v12, 3, v17, v18);
  }

  else
  {
    int v19 = sub_1000F93B4(v12, 5u, (uint64_t)sub_10048C0F4);
  }

  int v20 = v19;
  if (!v19) {
    return 0LL;
  }
  v21 = (os_log_s *)(id)qword_1008F7730;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    if (a2)
    {
      sub_1003CF00C(a2, __p);
      sub_100683EF4();
    }

    else
    {
      sub_100683EA4((uint64_t)buf, v20, v21);
    }
  }

  return 1LL;
}

void sub_10048B3B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_BYTE *sub_10048B3D4(uint64_t a1, unint64_t a2, int a3)
{
  return sub_10048AF0C(a1 - 272, a2, a3);
}

uint64_t sub_10048B3DC(uint64_t a1, unint64_t a2)
{
  char v16 = 0;
  sub_100242CA4(&v16);
  __int16 v15 = 0;
  if (sub_1003D5890(a2))
  {
    uint64_t v4 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      uint64_t v5 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      size_t v18 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Connecting to device %{public}s using Type S connection policy",  buf,  0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = &unk_10089AC20;
LABEL_9:

    int v7 = sub_1000F9390(a2 + 128, (uint64_t *)&off_10089AC00, &v15, v6);
    goto LABEL_26;
  }

  if (sub_1003D56C8(a2) && sub_1003D56D8(a2))
  {
    uint64_t v4 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      uint64_t v8 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      size_t v18 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Connecting to device %{public}s using Apple Mouse/TP connection policy",  buf,  0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = &unk_10089AC50;
    goto LABEL_9;
  }

  uint64_t v9 = (os_log_s *)(id)qword_1008F7730;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v10 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    size_t v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Connecting to device %{public}s using default connection policy",  buf,  0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  int v7 = sub_1000F9390(a2 + 128, (uint64_t *)&off_10089AC00, &v15, 0LL);
LABEL_26:
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_100683FAC();
    }
    uint64_t v11 = 1LL;
  }

  else
  {
    sub_10041127C(a1, a2, v15);
    uint64_t v11 = 0LL;
  }

  sub_100242CD8(&v16);
  return v11;
}

void sub_10048B6A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100242CD8(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10048B6E0(void *a1, unint64_t a2)
{
  __int16 v12 = 0;
  char v11 = 0;
  sub_100242CA4(&v11);
  if (!sub_10010F8B0(a2 + 128, &v12) && v12 == 97 && sub_1003D17A4(a2))
  {
    uint64_t v4 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      uint64_t v5 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      char v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Forcing disconnect for unauthorized Type S device %{public}s",  buf,  0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    int v6 = sub_10010D064(a2 + 128);
    if (!v6)
    {
      uint64_t v9 = 0LL;
      goto LABEL_17;
    }

    int v7 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed to force disconnect unauthorized Type S device with result %{bluetooth:OI_STATUS}u",  (uint8_t *)__p,  8u);
    }

    goto LABEL_16;
  }

  int v8 = sub_100411370(a1, a2);
  uint64_t v9 = sub_1000F93B0(v8);
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_10068400C();
    }
LABEL_16:
    uint64_t v9 = 1LL;
  }

void sub_10048B8BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  sub_100242CD8(&a12);
  _Unwind_Resume(a1);
}

void sub_10048B8E4(uint64_t a1, uint64_t a2)
{
}

void sub_10048B8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100492EB8(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_10048B974(uint64_t a1, uint64_t a2)
{
}

void sub_10048B97C(void *a1, int a2, int a3, int a4)
{
  unsigned __int16 v42 = a2;
  int v8 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a2;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "sendControlOpCfm for op 0x%x with handle 0x%x returned status %d",  buf,  0x14u);
  }

  uint64_t v9 = (uint64_t **)a1[73];
  if (!v9)
  {
LABEL_8:
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_10068406C();
    }
    return;
  }

  while (1)
  {
    unsigned int v10 = *((unsigned __int16 *)v9 + 16);
    if (v42 >= v10) {
      break;
    }
LABEL_7:
    uint64_t v9 = (uint64_t **)*v9;
    if (!v9) {
      goto LABEL_8;
    }
  }

  if (v10 < v42)
  {
    ++v9;
    goto LABEL_7;
  }

  if (!sub_10041146C(a1, v42) || (sub_1000B6578() & 1) == 0)
  {
    char v11 = sub_10036D800((uint64_t)(a1 + 72), &v42);
    __int16 v12 = v11;
    if (*((_BYTE *)v11 + 72))
    {
      int v13 = *((unsigned __int8 *)v11 + 73);
      int v14 = *((unsigned __int8 *)v11 + 74);
      int v15 = *((_DWORD *)v11 + 19);
      char v16 = (void *)v11[10];
      size_t v17 = v11[11];
      if (*((_BYTE *)v11 + 73))
      {
        int v18 = sub_1000F9868(v42, *((_BYTE *)v11 + 74), *((_DWORD *)v11 + 19), 0xFFFF);
        goto LABEL_51;
      }

      *(_OWORD *)buf = 0u;
      unsigned __int16 v20 = v42;
      buf[0] = 5;
      *(_WORD *)&buf[2] = v42;
      *(_WORD *)&uint8_t buf[4] = 255;
      *(_OWORD *)&buf[16] = v17;
      if (v16) {
        BOOL v21 = v17 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      char v22 = v21;
      char v33 = v22;
      if (v21)
      {
        v34 = 0LL;
        char v23 = 0;
      }

      else
      {
        *(void *)&buf[8] = operator new[](v17);
        v34 = *(void **)&buf[8];
        memcpy(*(void **)&buf[8], v16, v17);
        char v23 = 1;
      }

      buf[24] = v23;
      if (*((_BYTE *)v12 + 64))
      {
        int v24 = sub_10048A888((uint64_t)buf);
        v25 = (os_log_s *)qword_1008F7730;
        if (v24 == 2)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v41 = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "HID Perf Mode is stopping", v41, 2u);
          }

          *((_BYTE *)v12 + 64) = 0;
          goto LABEL_32;
        }

        if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR))
        {
          sub_10068412C();
          v26 = v34;
          int v18 = 104;
        }

        else
        {
          int v18 = 104;
          v26 = v34;
        }
      }

      else
      {
LABEL_32:
        __int16 v40 = 1;
        v35[0] = 5;
        unsigned __int16 v36 = v20;
        __int16 v37 = 255;
        __p = 0LL;
        size_t v39 = v17;
        if (v17)
        {
          v26 = v34;
          __p = operator new[](v17);
          memcpy(__p, v34, v17);
          char v27 = 1;
        }

        else
        {
          char v27 = 0;
          v26 = v34;
        }

        LOBYTE(v40) = v27;
        sub_100492C80((uint64_t)(v12 + 4), (uint64_t)v35);
        if ((_BYTE)v40 && __p) {
          operator delete[](__p);
        }
        if (v14 == 2)
        {
          int v28 = sub_1000F9AF8(v42, 2, (char *)v16, (unsigned __int16)v17);
        }

        else
        {
          if (v14 != 3)
          {
            int v18 = 101;
            goto LABEL_47;
          }

          int v28 = sub_1000F997C(v42, 3, (char *)v16, (unsigned __int16)v17);
        }

        int v18 = v28;
      }

void sub_10048BDF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, char a15)
{
  if (a15 && __p) {
    operator delete[](__p);
  }
  if (!a11) {
    a10 = 1;
  }
  if ((a10 & 1) == 0) {
    operator delete[](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10048BE40(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned __int16 v17 = a2;
  uint64_t v4 = (uint64_t **)a1[73];
  if (!v4)
  {
LABEL_7:
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_100684158();
    }
    return 1LL;
  }

  uint64_t v6 = (uint64_t)(a1 + 72);
  while (1)
  {
    unsigned int v7 = *((unsigned __int16 *)v4 + 16);
    if (v7 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v4 = (uint64_t **)*v4;
    if (!v4) {
      goto LABEL_7;
    }
  }

  if (v7 < a2)
  {
    ++v4;
    goto LABEL_6;
  }

  uint64_t v9 = sub_10036D800(v6, &v17);
  unsigned int v10 = v9;
  if (!*((_BYTE *)v9 + 9))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_1006841F0();
    }
    return 1LL;
  }

  if (*((_BYTE *)v9 + 8))
  {
    char v11 = (os_log_s *)qword_1008F7730;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v12)
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a3;
      __int16 v19 = 1024;
      int v20 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Device already suspended with reason %d for handle 0x%x, do nothing",  buf,  0xEu);
      return 0LL;
    }
  }

  else
  {
    uint64_t v13 = sub_10041146C(a1, v17);
    uint64_t result = sub_1003D5620(v13);
    if ((_DWORD)result)
    {
      int v14 = (os_log_s *)(id)qword_1008F7730;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v13, buf);
        if (v21 >= 0) {
          int v15 = buf;
        }
        else {
          int v15 = *(uint8_t **)buf;
        }
        if (a3 > 3) {
          char v16 = "??";
        }
        else {
          char v16 = off_10089ADE0[a3];
        }
        *(_DWORD *)char v22 = 136446466;
        char v23 = v15;
        __int16 v24 = 2082;
        v25 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Sending SUSPEND command to device %{public}s due to reason %{public}s",  v22,  0x16u);
        if (v21 < 0) {
          operator delete(*(void **)buf);
        }
      }

      if (sub_1000F93B4(v17, 3u, (uint64_t)sub_10048C0F4))
      {
        uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
          sub_100684250();
          return 0LL;
        }
      }

      else
      {
        uint64_t result = 0LL;
        *((_BYTE *)v10 + 8) = 1;
        *((_DWORD *)v10 + 17) = 0;
      }
    }
  }

  return result;
}

void sub_10048C0DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048C0F4(int a1, int a2, int a3)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  sub_10048B97C((void *)qword_1008D93F0, a1, a2, a3);
}

uint64_t sub_10048C15C(void *a1, unsigned int a2, unsigned int a3)
{
  unsigned __int16 v21 = a2;
  uint64_t v3 = (uint64_t **)a1[73];
  if (!v3)
  {
LABEL_7:
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_1006842B0();
    }
    return 1LL;
  }

  uint64_t v6 = (uint64_t)(a1 + 72);
  while (1)
  {
    unsigned int v7 = *((unsigned __int16 *)v3 + 16);
    if (v7 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v3 = (uint64_t **)*v3;
    if (!v3) {
      goto LABEL_7;
    }
  }

  if (v7 < a2)
  {
    ++v3;
    goto LABEL_6;
  }

  uint64_t v9 = sub_10036D800(v6, &v21);
  unsigned int v10 = v9;
  if (!*((_BYTE *)v9 + 9))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_100684314();
    }
    return 1LL;
  }

  if (!*((_BYTE *)v9 + 8)) {
    return 0LL;
  }
  uint64_t v11 = sub_10041146C(a1, v21);
  uint64_t result = sub_1003D5620(v11);
  if ((_DWORD)result)
  {
    BOOL v12 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v11, __p);
      uint64_t v13 = v20 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = *((int *)v10 + 17);
      int v15 = v14 > 5 ? "??" : off_10089AE00[v14];
      char v16 = a3 > 5 ? "??" : off_10089AE00[a3];
      *(_DWORD *)buf = 136446722;
      char v23 = v13;
      __int16 v24 = 2082;
      v25 = v15;
      __int16 v26 = 2082;
      char v27 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Sending EXIT_SUSPEND command to device %{public}s, reason %{public}s -> %{public}s",  buf,  0x20u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    int v17 = sub_1000F93B4(v21, 4u, (uint64_t)sub_10048C0F4);
    int v18 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Exit Suspend returned status: %{bluetooth:OI_STATUS}u",  buf,  8u);
    }

    if (v17)
    {
      uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_100684374();
        return 0LL;
      }
    }

    else
    {
      *((_BYTE *)v10 + 8) = 0;
      *((_DWORD *)v10 + 17) = a3;
      return 335LL;
    }
  }

  return result;
}

void sub_10048C3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10048C410(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v2 = *(uint64_t ***)(a1 + 584);
  if (!v2) {
    return 0LL;
  }
  uint64_t v4 = a1 + 576;
  while (1)
  {
    unsigned int v5 = *((unsigned __int16 *)v2 + 16);
    if (v5 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v2 = (uint64_t **)*v2;
    if (!v2) {
      return 0LL;
    }
  }

  if (v5 < a2)
  {
    ++v2;
    goto LABEL_6;
  }

  uint64_t v6 = sub_10036D800(v4, &v8);
  if (*(_BYTE *)(a1 + 562)) {
    return 0LL;
  }
  return *((_DWORD *)v6 + 17) == 2;
}

BOOL sub_10048C488(uint64_t a1, unsigned int a2)
{
  return sub_10048C410(a1 - 256, a2);
}

_BYTE *sub_10048C490(uint64_t a1, int a2)
{
  char v7 = 0;
  sub_100242CA4(&v7);
  uint64_t v4 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = "Off";
    if (a2) {
      unsigned int v5 = "On";
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Screen state changed to %{public}s", buf, 0xCu);
  }

  *(_BYTE *)(a1 + 562) = a2;
  if (a2) {
    sub_10048C5A8(a1, 1);
  }
  else {
    sub_10048C684((void *)a1, 1u);
  }
  return sub_100242CD8(&v7);
}

void sub_10048C58C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10048C5A8(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 576);
  uint64_t v3 = (void *)(a1 + 584);
  if (v2 != (void *)(a1 + 584))
  {
    do
    {
      __int16 v6 = *((_WORD *)v2 + 16);
      uint64_t v7 = sub_100404EB8();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_10048DC70;
      v12[3] = &unk_100893818;
      v12[4] = a1;
      __int16 v14 = v6;
      int v13 = a2;
      sub_100405384(v7, v12);
      unsigned __int16 v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          unsigned __int16 v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }

        while (!v10);
      }

      uint64_t v2 = v9;
    }

    while (v9 != v3);
  }

  return 1LL;
}

uint64_t sub_10048C684(void *a1, unsigned int a2)
{
  uint64_t v2 = (void *)a1[72];
  uint64_t v3 = a1 + 73;
  if (v2 != a1 + 73)
  {
    do
    {
      sub_10048BE40(a1, *((unsigned __int16 *)v2 + 16), a2);
      __int16 v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          __int16 v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }

        while (!v8);
      }

      uint64_t v2 = v7;
    }

    while (v7 != v3);
  }

  return 1LL;
}

_BYTE *sub_10048C708(uint64_t a1, int a2)
{
  return sub_10048C490(a1 - 280, a2);
}

uint64_t sub_10048C710(uint64_t a1)
{
  char v5 = 0;
  sub_100242CA4(&v5);
  uint64_t v2 = (os_log_s *)qword_1008F7730;
  if (*(_BYTE *)(a1 + 562))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_1006843D4();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "System can sleep and screen state is off, suspending HID",  v4,  2u);
    }

    sub_10048C684((void *)a1, 2u);
  }

  sub_100242CD8(&v5);
  return 1LL;
}

void sub_10048C7BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10048C7D0(uint64_t a1)
{
  return 1LL;
}

void sub_10048C7EC(uint64_t a1)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10048C860;
  block[3] = &unk_10087EB20;
  block[4] = a1;
  dispatch_sync(v3, block);
}

void sub_10048C860(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 576);
  uint64_t v3 = (void *)(v1 + 584);
  if (v2 != (void *)(v1 + 584))
  {
    do
    {
      uint64_t v4 = *((unsigned __int16 *)v2 + 32);
      uint64_t v5 = sub_1002E6E00();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5) & 1) != 0
        || (uint64_t v6 = sub_1002E6E00(), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 480LL))(v6)))
      {
        uint64_t v7 = sub_10012D6D8(v4);
        uint64_t v8 = sub_1002E8D94();
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)v8 + 560LL))(v8, v7, v4);
        if (!byte_1008F1118)
        {
          uint64_t v9 = sub_1002E6E9C();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 1032LL))( v9,  v4,  1LL,  0LL))
          {
            BOOL v10 = (os_log_s *)qword_1008F7730;
            if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v4;
              _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to disable HID Latency Statistics for connection handle 0x%02x",  (uint8_t *)__p,  8u);
            }
          }
        }
      }

      uint64_t v11 = sub_1002E6E00();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v11 + 8LL))(v11) & 1) == 0)
      {
        uint64_t v12 = sub_1002E6E00();
      }

      int v13 = sub_10012D6D8(v4);
      if (!v13) {
        goto LABEL_32;
      }
      uint64_t v14 = sub_10012DB30((uint64_t)v13);
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_10089AD20);
      }
      int v15 = *(_DWORD *)v14;
      WORD2(__p[0]) = *(_WORD *)(v14 + 4);
      LODWORD(__p[0]) = v15;
      char v16 = (unsigned __int8 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
      uint64_t v17 = qword_1008F7730;
      if (v16)
      {
        int v18 = (os_log_s *)(id)qword_1008F7730;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)v16, __p);
          __int16 v19 = __p;
          if (v32 < 0) {
            __int16 v19 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136446210;
          v34 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "PowerManagementEventSystemWillSleep: device %{public}s",  buf,  0xCu);
          if (v32 < 0) {
            operator delete(__p[0]);
          }
        }

        int v20 = sub_1003CF350(v16);
        unsigned __int16 v21 = (os_log_s *)qword_1008F7730;
        BOOL v22 = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT);
        if (v20)
        {
          if (v22)
          {
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Disabling phy stats for HCI LM Handle 0x%02X",  (uint8_t *)__p,  8u);
          }

          uint64_t v23 = sub_1002E6E9C();
          (*(void (**)(uint64_t, void, uint64_t, unint64_t, uint64_t))(*(void *)v23 + 320LL))( v23,  0LL,  1LL,  ((unint64_t)v16[128] << 40) | ((unint64_t)v16[129] << 32) | ((unint64_t)v16[130] << 24) | ((unint64_t)v16[131] << 16) | ((unint64_t)v16[132] << 8) | v16[133],  1LL);
          v16[1122] = 0;
          __int16 v24 = (os_log_s *)(id)qword_1008F7730;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            if (qword_1008D5F50 != -1) {
              dispatch_once(&qword_1008D5F50, &stru_10089AD20);
            }
            int v25 = sub_1004020D4((uint64_t)off_1008D5F48);
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v25;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "disablePhyStats, current number of devices %d",  (uint8_t *)__p,  8u);
          }

          goto LABEL_32;
        }

        if (v22)
        {
          LOWORD(__p[0]) = 0;
          __int16 v26 = v21;
          char v27 = "disablePhyStats: device is not paired!!!";
          goto LABEL_31;
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        __int16 v26 = (os_log_s *)v17;
        char v27 = "PowerManagementEventSystemWillSleep: device is NULL";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)__p, 2u);
      }

void sub_10048CC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048CCA8(uint64_t a1)
{
}

void sub_10048CCB0(uint64_t a1)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10048CD24;
  block[3] = &unk_10087EB20;
  block[4] = a1;
  dispatch_async(v3, block);
}

void sub_10048CD24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 576);
  uint64_t v3 = (void *)(v1 + 584);
  if (v2 != (void *)(v1 + 584))
  {
    do
    {
      uint64_t v4 = *((unsigned __int16 *)v2 + 32);
      uint64_t v5 = sub_1002E6E00();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5) & 1) != 0
        || (uint64_t v6 = sub_1002E6E00(), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 480LL))(v6)))
      {
        uint64_t v7 = sub_10012D6D8(v4);
        uint64_t v8 = *((unsigned __int16 *)v2 + 68);
        uint64_t v9 = sub_1002E8D94();
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(void *)v9 + 544LL))( v9,  v4,  v7,  1LL,  v8);
        if (!byte_1008F1118)
        {
          uint64_t v10 = sub_1002E6E9C();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 1032LL))( v10,  v4,  1LL,  1LL))
          {
            uint64_t v11 = (os_log_s *)qword_1008F7730;
            if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v4;
              _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to enable HID Latency Statistics for connection handle 0x%02x",  (uint8_t *)__p,  8u);
            }
          }
        }
      }

      uint64_t v12 = sub_1002E6E00();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 8LL))(v12) & 1) != 0
        || (uint64_t v13 = sub_1002E6E00(), (*(unsigned int (**)(uint64_t))(*(void *)v13 + 472LL))(v13)))
      {
        uint64_t v14 = sub_10012D6D8(v4);
        if (v14)
        {
          uint64_t v15 = sub_10012DB30((uint64_t)v14);
          if (qword_1008D5F50 != -1) {
            dispatch_once(&qword_1008D5F50, &stru_10089AD20);
          }
          int v16 = *(_DWORD *)v15;
          WORD2(__p[0]) = *(_WORD *)(v15 + 4);
          LODWORD(__p[0]) = v16;
          uint64_t v17 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
          int v18 = (os_log_s *)qword_1008F7730;
          if (v17)
          {
            __int16 v19 = (os_log_s *)(id)qword_1008F7730;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C((uint64_t)v17, __p);
              int v20 = __p;
              if (v26 < 0) {
                int v20 = (void **)__p[0];
              }
              *(_DWORD *)buf = 136446210;
              int v28 = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "PowerManagementEventSystemWillSleep: device %{public}s",  buf,  0xCu);
              if (v26 < 0) {
                operator delete(__p[0]);
              }
            }

            sub_10048D034(v21, (uint64_t)v17);
          }

          else if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "PowerManagementEventSystemWillSleep: device is NULL",  (uint8_t *)__p,  2u);
          }
        }
      }

      BOOL v22 = (void *)v2[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          BOOL v22 = (void *)*v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          uint64_t v23 = (void *)v2[2];
          BOOL v24 = *v23 == (void)v2;
          uint64_t v2 = v23;
        }

        while (!v24);
      }

      uint64_t v2 = v23;
    }

    while (v23 != v3);
  }

void sub_10048D01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048D034(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = sub_1002D0A0C();
  uint64_t v4 = sub_1002E6E9C();
  if (sub_1002D0A04(v4) && v3)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_10089AD20);
    }
    unsigned int v5 = sub_1004020D4((uint64_t)off_1008D5F48);
    uint64_t v6 = (os_log_s *)qword_1008F7730;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT);
    if (v5 >= v3)
    {
      if (v7)
      {
        *(_DWORD *)buf = 67109376;
        unsigned int v12 = v5;
        __int16 v13 = 1024;
        unsigned int v14 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Max HID GCs reached, not adding current %d max %d",  buf,  0xEu);
      }
    }

    else
    {
      if (v7)
      {
        *(_DWORD *)buf = 67109376;
        unsigned int v12 = v5;
        __int16 v13 = 1024;
        unsigned int v14 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "HID GCs connected, enabling stat, current number of devices %d max %d",  buf,  0xEu);
      }

      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
      uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100491FC8;
      block[3] = &unk_10087EB20;
      block[4] = a2;
      dispatch_async(v9, block);
    }
  }

void sub_10048D1DC(uint64_t a1)
{
}

uint64_t sub_10048D1E4(void *a1, unint64_t a2)
{
  uint64_t result = sub_100411370(a1, a2);
  unsigned __int16 v6 = result;
  if ((_DWORD)result)
  {
    unsigned int v5 = sub_10036D800((uint64_t)(a1 + 72), &v6);
    return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)*v5 + 24LL))(*v5, a2);
  }

  return result;
}

void sub_10048D238(uint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned int a4)
{
  unsigned __int16 v8 = a2;
  BOOL v7 = sub_10036D800(a1 + 576, &v8);
  sub_10048D2A8(a1);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)*v7 + 64LL))(*v7, a3, a4);
  sub_10048D334(a1);
}

void sub_10048D2A8(uint64_t a1)
{
  if (IsAppleInternalBuild())
  {
    uint64_t v2 = (os_log_s *)*(id *)(a1 + 416);
    unsigned int v3 = v2;
    os_signpost_id_t v4 = *(void *)(a1 + 432);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v3,  OS_SIGNPOST_INTERVAL_BEGIN,  v4,  "HIDInterruptData",  (const char *)&unk_100821BB5,  v5,  2u);
    }
  }

void sub_10048D334(uint64_t a1)
{
  if (IsAppleInternalBuild())
  {
    uint64_t v2 = (os_log_s *)*(id *)(a1 + 416);
    unsigned int v3 = v2;
    os_signpost_id_t v4 = *(void *)(a1 + 432);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v3,  OS_SIGNPOST_INTERVAL_END,  v4,  "HIDInterruptData",  (const char *)&unk_100821BB5,  v5,  2u);
    }
  }

void sub_10048D3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000F71B4(a2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (*(_BYTE *)(v3 + 76))
    {
      unsigned int v5 = (os_log_s *)qword_1008F7730;
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(v4 + 77);
        int v7 = *(unsigned __int8 *)(v4 + 76);
        int v11 = 67109376;
        int v12 = v6;
        __int16 v13 = 1024;
        int v14 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Could not send pending control channel operation 0x%x due to pending operation 0x%x",  (uint8_t *)&v11,  0xEu);
      }
    }

    else
    {
      unsigned __int16 v8 = (_BYTE *)(v3 + 77);
      if (*(_BYTE *)(v3 + 77) == 5)
      {
        uint64_t v9 = (os_log_s *)qword_1008F7730;
        if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = *v8;
          int v11 = 67109376;
          int v12 = a2;
          __int16 v13 = 1024;
          int v14 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sending pending control virtual cable unpluged for handle 0x%x, queued operation 0x%x",  (uint8_t *)&v11,  0xEu);
        }

        if (sub_1000F93B4(a2, 5u, (uint64_t)sub_10048C0F4))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
            sub_100684400();
          }
        }

        else
        {
          *v8 &= 0xFAu;
        }
      }
    }
  }

uint64_t sub_10048D558(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unsigned __int16 v14 = a2;
  int v10 = sub_10036D800(a1 + 576, &v14);
  int v11 = (os_log_s *)qword_1008F7730;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    *(_DWORD *)buf = 67109376;
    int v16 = v14;
    __int16 v17 = 1024;
    int v18 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "getReportResponse for handle 0x%x success %d",  buf,  0xEu);
  }

  sub_10048D3C0(v12, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)*v10 + 72LL))( *v10,  a3,  a4,  a5,  a6);
}

uint64_t sub_10048D660(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v11 = a2;
  int v6 = sub_10036D800(a1 + 576, &v11);
  int v7 = (os_log_s *)qword_1008F7730;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    *(_DWORD *)buf = 67109376;
    int v13 = v11;
    __int16 v14 = 1024;
    int v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "setReportResponse for handle 0x%x success %d",  buf,  0xEu);
  }

  if (*((_BYTE *)v6 + 9))
  {
    sub_10048D3C0(v8, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*v6 + 80LL))(*v6, a3, a4);
  }

  else
  {
    int v10 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v13 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Device start pending on setReportResponse - starting device with status %d",  buf,  8u);
    }

    *((_BYTE *)v6 + 9) = 1;
    return (*(uint64_t (**)(uint64_t))(*(void *)*v6 + 32LL))(*v6);
  }

uint64_t sub_10048D7C4(uint64_t a1, int a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 320);
  uint64_t v4 = *(void **)(a1 + 576);
  if (v4 == (void *)(a1 + 584))
  {
LABEL_9:
    uint64_t v8 = 0LL;
  }

  else
  {
    while (*((unsigned __int16 *)v4 + 32) != a2)
    {
      unsigned int v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          unsigned int v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          int v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }

        while (!v7);
      }

      uint64_t v4 = v6;
      if (v6 == (void *)(a1 + 584)) {
        goto LABEL_9;
      }
    }

    uint64_t v8 = *((unsigned __int16 *)v4 + 16);
  }

  sub_100242FAC((uint64_t)v10);
  return v8;
}

uint64_t sub_10048D868(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 576);
  if (v2 == (void *)(a1 + 584)) {
    return 0LL;
  }
  while (v2[5] != a2)
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = (void *)*v3;
      }

      while (v3);
    }

    else
    {
      do
      {
        uint64_t v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }

      while (!v5);
    }

    uint64_t v2 = v4;
    if (v4 == (void *)(a1 + 584)) {
      return 0LL;
    }
  }

  return *((unsigned __int16 *)v2 + 16);
}

uint64_t sub_10048D8CC(void *a1, uint64_t a2, unsigned __int16 a3)
{
  unsigned __int16 v25 = a3;
  BOOL v5 = sub_10036D800((uint64_t)(a1 + 72), &v25);
  if (!sub_1003D518C(a2))
  {
    int v6 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_FAULT)) {
      sub_1006844C4(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  __int16 v14 = (os_log_s *)(id)qword_1008F7730;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D01A0(a2, (uint64_t)&__p);
    int v15 = v24 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Performing HID handshake for device %{public}s",  buf,  0xCu);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
  }

  if ((sub_1000B6578() & 1) == 0
    && !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)*v5 + 16LL))(*v5, a2))
  {
    return 1LL;
  }

  *(_OWORD *)buf = xmmword_1006C3490;
  __p = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  __int16 v17 = (__int128 *)__p;
  int v16 = v23;
  BOOL v18 = (char *)v23 - (_BYTE *)__p == 16 && (*((_WORD *)__p + 1) == 1) & *((_BYTE *)__p + 8);
  while (v17 != v16)
  {
    __int128 v21 = *v17;
    sub_10025EB84(&v21);
    ++v17;
    int v16 = v23;
  }

  if (v18)
  {
    uint64_t v19 = sub_1000F9A20(v25, 1);
    if ((_DWORD)v19)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
        sub_100684464();
      }
      uint64_t v19 = 1LL;
    }
  }

  else
  {
LABEL_24:
    sub_10048DB3C(a1, v25);
    uint64_t v19 = 0LL;
  }

  if (__p)
  {
    uint64_t v23 = (__int128 *)__p;
    operator delete(__p);
  }

  return v19;
}

void sub_10048DB04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10048DB3C(void *a1, unsigned int a2)
{
  unsigned __int16 v11 = a2;
  uint64_t v4 = sub_10041146C(a1, a2);
  if (sub_1003D56C8(v4) && (sub_1003D56D8(v4) & 1) == 0 && sub_1003D56E4(v4))
  {
    if (sub_1003D56BC(v4))
    {
      BOOL v5 = (os_log_s *)qword_1008F7730;
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Delaying setting sniff rate for 250ms",  buf,  2u);
      }

      uint64_t v6 = sub_100404EB8();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_10048F590;
      v8[3] = &unk_1008878D8;
      v8[4] = a1;
      __int16 v9 = a2;
      sub_100405460(v6, 250LL, v8);
    }

    else
    {
      sub_10048F438((uint64_t)a1, a2);
    }
  }

  else
  {
    uint64_t v7 = sub_10036D800((uint64_t)(a1 + 72), &v11);
    *((_BYTE *)v7 + 9) = 1;
    (*(void (**)(uint64_t))(*(void *)*v7 + 32LL))(*v7);
  }

_BYTE *sub_10048DC70(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  char v4 = 0;
  sub_100242CA4(&v4);
  sub_10048C15C(v2, *(unsigned __int16 *)(a1 + 44), *(_DWORD *)(a1 + 40));
  return sub_100242CD8(&v4);
}

void sub_10048DCBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10048DCD0(uint64_t a1, unint64_t a2, int a3, int a4, char a5)
{
  int v10 = sub_100411064(a1, a2);
  if (a4) {
    int v11 = 0;
  }
  else {
    int v11 = v10;
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Denying connection attempt",  (uint8_t *)__p,  2u);
    }
  }

  if (sub_1003D5890(a2))
  {
    uint64_t v13 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      __int16 v14 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Accepting connection from device %{public}s using Type S connection policy",  buf,  0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t result = sub_1000F93AC(a3, (uint64_t)&off_10089AC00, &unk_10089AC20, v11);
  }

  else if (sub_1003D56C8(a2) && sub_1003D56D8(a2))
  {
    int v16 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      __int16 v17 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Accepting connection from device %{public}s using Apple Mouse/TP connection policy",  buf,  0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t result = sub_1000F93AC(a3, (uint64_t)&off_10089AC00, &unk_10089AC50, v11);
  }

  else
  {
    BOOL v18 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      uint64_t v19 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Accepting connection from device %{public}s using default connection policy",  buf,  0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t result = sub_1000F93AC(a3, (uint64_t)&off_10089AC00, 0LL, v11);
  }

  char v20 = v11 ^ 1;
  if ((_DWORD)result) {
    char v20 = 1;
  }
  if ((v20 & 1) == 0)
  {
    uint64_t result = sub_10041127C(a1, a2, a3);
    if ((a5 & 1) == 0) {
      return sub_100410910(a1, a2, 1);
    }
  }

  return result;
}

void sub_10048DFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10048E004(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089AD20);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v6 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  uint64_t v7 = (os_log_s *)(id)qword_1008F7730;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v6, __p);
    uint64_t v8 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    __int16 v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received incoming connection attempt from HID device %{public}s",  buf,  0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_10041126C(a1))
  {
    int v10 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v6, __p);
      int v11 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      __int16 v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Outgoing attempt already exists, withdraw outgoing attempt for device %{public}s",  buf,  0xCu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_100410A5C(a1, (uint64_t)v6, 314);
  }

  uint64_t v12 = (os_log_s *)(id)qword_1008F7730;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v6, __p);
    uint64_t v13 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    __int16 v17 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Delaying response to incoming HID connection request for device %{public}s as SDP is missing",  buf,  0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  if (qword_1008D9600 != -1) {
    dispatch_once(&qword_1008D9600, &stru_10089AD40);
  }
  sub_10041AA14(qword_1008D95F8, (uint64_t)v6, a1 + 264, 1, 2);
  return sub_100410910(a1, (uint64_t)v6, 1);
}

void sub_10048E2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10048E300(void *a1, int a2, uint64_t a3)
{
  unsigned __int16 v60 = a2;
  uint64_t v6 = sub_10041146C(a1, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (os_log_s *)(id)qword_1008F7730;
    __int16 v9 = v8;
    if ((_DWORD)a3)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(v7, buf);
        sub_1006731E0();
      }

      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_10089AD60);
      }
      int v10 = sub_1004317E0((uint64_t)off_1008D60A8, a3, 20000);
      sub_100410A5C((uint64_t)a1, v7, v10);
      return;
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v7, v77);
      int v11 = v78 >= 0 ? v77 : *(_BYTE **)v77;
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)v62 = 2082;
      *(void *)&v62[2] = v11;
      __int16 v63 = 1024;
      int v64 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "HID connection on handle 0x%x for device %{public}s with status %d",  buf,  0x18u);
      if (v78 < 0) {
        operator delete(*(void **)v77);
      }
    }

    sub_100410A5C((uint64_t)a1, v7, 0);
    uint64_t v12 = a1[73];
    if (v12)
    {
      uint64_t v13 = a1 + 73;
      do
      {
        unsigned int v14 = *(unsigned __int16 *)(v12 + 32);
        BOOL v15 = v14 >= v60;
        if (v14 >= v60) {
          int v16 = (uint64_t *)v12;
        }
        else {
          int v16 = (uint64_t *)(v12 + 8);
        }
        if (v15) {
          uint64_t v13 = (void *)v12;
        }
        uint64_t v12 = *v16;
      }

      while (*v16);
      if (v13 != a1 + 73 && v60 >= *((unsigned __int16 *)v13 + 16))
      {
        __int16 v17 = (os_log_s *)qword_1008F7730;
        if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_FAULT)) {
          sub_1006845E8(v17, v18, v19, v20, v21, v22, v23, v24);
        }
      }
    }

    int v25 = sub_1003D56A4(v7);
    char v26 = (os_log_s *)(id)qword_1008F7730;
    BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if (v25)
    {
      if (v27)
      {
        sub_1003CF00C(v7, buf);
        int v28 = v64 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v77 = 136446210;
        *(void *)&v77[4] = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Creating KeyboardInputDevice for device %{public}s",  v77,  0xCu);
        if (SHIBYTE(v64) < 0) {
          operator delete(*(void **)buf);
        }
      }

      char v29 = operator new(0x170uLL);
      sub_1001FE168((uint64_t)v29, (uint64_t)(a1 + 32), v60);
    }

    else
    {
      if (v27)
      {
        sub_1003CF00C(v7, buf);
        BOOL v30 = v64 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v77 = 136446210;
        *(void *)&v77[4] = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Creating GenericInputDevice for device %{public}s",  v77,  0xCu);
        if (SHIBYTE(v64) < 0) {
          operator delete(*(void **)buf);
        }
      }

      char v29 = operator new(0xC0uLL);
      sub_100208600((uint64_t)v29, (uint64_t)(a1 + 32), v60);
    }

    uint64_t v31 = mach_continuous_time();
    *(_WORD *)buf = v60;
    *(void *)v62 = v29;
    *(_WORD *)&v62[8] = 0;
    uint64_t v65 = v31;
    __int16 v66 = 0;
    __p = 0LL;
    uint64_t v70 = 0LL;
    char v67 = 0;
    int v68 = 0;
    char v72 = 0;
    __int16 v71 = 0;
    int v73 = 0;
    char v74 = 0;
    uint64_t v75 = 0LL;
    uint64_t v76 = 24LL;
    sub_1004931C0((uint64_t)(a1 + 72), (unsigned __int16 *)buf, (uint64_t)buf);
    if ((_BYTE)v71 && __p) {
      operator delete[](__p);
    }
    char v32 = sub_10036D800((uint64_t)(a1 + 72), &v60);
    *((_BYTE *)v32 + 72) = 0;
    v32[10] = 0LL;
    v32[11] = 0LL;
    if (sub_1003D518C(v7) && sub_1003D55CC(v7))
    {
      if (sub_10048D8CC(a1, v7, v60))
      {
        char v33 = (os_log_s *)(id)qword_1008F7730;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          sub_1003CF00C(v7, buf);
          sub_100684598();
        }

        sub_1000F93B0(v60);
        return;
      }
    }

    else
    {
      v34 = (os_log_s *)(id)qword_1008F7730;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v7, buf);
        v35 = v64 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v77 = 136446210;
        *(void *)&v77[4] = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Delaying handshake for device %{public}s as SDP is missing",  v77,  0xCu);
        if (SHIBYTE(v64) < 0) {
          operator delete(*(void **)buf);
        }
      }

      if (qword_1008D9600 != -1) {
        dispatch_once(&qword_1008D9600, &stru_10089AD40);
      }
      sub_10041AA14(qword_1008D95F8, v7, (uint64_t)(a1 + 33), 1, 2);
    }

    v59 = 0LL;
    if (!sub_10010EEE0(v7 + 128, (uint64_t *)&v59) && v59)
    {
      uint64_t v36 = sub_10012D7D4(v59);
      *((_WORD *)v32 + 12) = v36;
      uint64_t v37 = sub_1003D5884(v7);
      if ((_DWORD)v37) {
        sub_10048EB6C(v37, v38, (uint64_t)v59);
      }
      size_t v39 = v59;
      int v40 = *((unsigned __int8 *)v59 + 152);
      *((_WORD *)v32 + 49) = v40;
      if (v40 == 2)
      {
        *((_WORD *)v32 + 48) = v39[68];
        sub_1003E59F4(v7, v39[68]);
      }

      uint64_t v41 = sub_1002E6E00();
      uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
      if ((v42 & 1) != 0
        || (v43 = sub_1002E6E00(), uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 472LL))(v43), (_DWORD)v42))
      {
        sub_10048D034(v42, v7);
      }

      uint64_t v44 = sub_1002E6BF0();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v44 + 384LL))(v44) & 1) != 0
        || (uint64_t v45 = sub_1002E6E00(), ((*(uint64_t (**)(uint64_t))(*(void *)v45 + 8LL))(v45) & 1) != 0)
        || (uint64_t v46 = sub_1002E6E00(), (*(unsigned int (**)(uint64_t))(*(void *)v46 + 480LL))(v46)))
      {
        uint64_t v47 = sub_1002E6E00();
        sub_10002418C(buf, "HID");
        sub_10002418C(v77, "TestABC");
        (*(void (**)(uint64_t, uint8_t *, _BYTE *, char *))(*(void *)v47 + 72LL))( v47,  buf,  v77,  &byte_1008F1118);
        if (v78 < 0) {
          operator delete(*(void **)v77);
        }
        if (SHIBYTE(v64) < 0) {
          operator delete(*(void **)buf);
        }
        uint64_t v48 = sub_1002E8D94();
        (*(void (**)(uint64_t, unsigned __int16 *, uint64_t))(*(void *)v48 + 536LL))(v48, v59, v36);
        uint64_t v49 = sub_1002E8D94();
        (*(void (**)(uint64_t, uint64_t, unsigned __int16 *, uint64_t, void))(*(void *)v49 + 544LL))( v49,  v36,  v59,  1LL,  *((unsigned __int16 *)v32 + 48));
        *(_DWORD *)buf = 0;
        *(_DWORD *)v77 = 0;
        uint64_t v58 = 0LL;
        sub_1003D55EC(v7, buf, v77, (_DWORD *)&v58 + 1, &v58);
        uint64_t v50 = sub_1002E8D94();
        (*(void (**)(uint64_t, uint64_t, void, void, void, void))(*(void *)v50 + 552LL))( v50,  v36,  *(unsigned int *)buf,  *(unsigned int *)v77,  HIDWORD(v58),  v58);
        uint64_t v51 = sub_100404EB8();
        v56[0] = _NSConcreteStackBlock;
        v56[1] = 3221225472LL;
        v56[2] = sub_10048EC14;
        v56[3] = &unk_1008878D8;
        __int16 v57 = v36;
        v56[4] = v59;
        sub_100405384(v51, v56);
      }

      if (sub_1003D589C(v7))
      {
        uint64_t v52 = sub_100404EB8();
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472LL;
        v55[2] = sub_10048ED44;
        v55[3] = &unk_10087EB20;
        v55[4] = v59;
        sub_100405384(v52, v55);
      }
    }

    uint64_t v53 = sub_100404EB8();
    v54[0] = _NSConcreteStackBlock;
    v54[1] = 3221225472LL;
    v54[2] = sub_10048EE3C;
    v54[3] = &unk_10087EB20;
    v54[4] = a1;
    sub_100405384(v53, v54);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR))
  {
    sub_100684534();
  }

void sub_10048EABC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, char a40)
{
  _Unwind_Resume(a1);
}

void sub_10048EB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v11 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Overriding connection packet type to single slot",  v11,  2u);
  }

  if (sub_10011E974(a3, 13080LL, v5, v6, v7, v8, v9, v10))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_100684658();
    }
  }

uint64_t sub_10048EC14(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int16 *)(a1 + 40);
    int v7 = 136315394;
    uint64_t v8 = "connectionCallback_block_invoke";
    __int16 v9 = 1024;
    int v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s -- Enable HID Latency Statistics event for connection handle 0x%02x",  (uint8_t *)&v7,  0x12u);
  }

  uint64_t v4 = sub_1002E6E9C();
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v4 + 1032LL))( v4,  *(unsigned __int16 *)(a1 + 40),  1LL,  1LL);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_1006846B8();
    }
    uint64_t result = sub_1002E8D94();
    if (result)
    {
      uint64_t v6 = sub_1002E8D94();
      return (*(uint64_t (**)(uint64_t, void, void))(*(void *)v6 + 536LL))( v6,  *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 40));
    }
  }

  return result;
}

uint64_t sub_10048ED44(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)v2 + 3384LL))(v2, 0LL, *(void *)(a1 + 32));
}

void sub_10048ED74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting active mode check timer", buf, 2u);
  }

  dispatch_time_t v5 = dispatch_time(0LL, 6000000000LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100490F90;
  v6[3] = &unk_10087F8E0;
  v6[4] = a1;
  v6[5] = a2;
  dispatch_after(v5, &_dispatch_main_q, v6);
}

void *sub_10048EE3C(uint64_t a1)
{
  return sub_10048EE44(*(os_unfair_lock_s **)(a1 + 32));
}

void *sub_10048EE44(os_unfair_lock_s *a1)
{
  v55 = &v55;
  v56 = (void **)&v55;
  uint64_t v57 = 0LL;
  v54[0] = 0LL;
  v54[1] = 0LL;
  sub_100242F28((uint64_t)v54, (uint64_t)&a1[80]);
  uint64_t v2 = *(os_unfair_lock_s **)&a1[144]._os_unfair_lock_opaque;
  if (v2 != &a1[146])
  {
    uint64_t v3 = v57;
    uint64_t v4 = v55;
    do
    {
      dispatch_time_t v5 = operator new(0x18uLL);
      v5[8] = v2[8]._os_unfair_lock_opaque;
      *(void *)dispatch_time_t v5 = v4;
      *((void *)v5 + 1) = &v55;
      *((void *)v4 + 1) = v5;
      ++v3;
      v55 = v5;
      uint64_t v57 = v3;
      uint64_t v6 = *(os_unfair_lock_s **)&v2[2]._os_unfair_lock_opaque;
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = *(os_unfair_lock_s **)&v6->_os_unfair_lock_opaque;
        }

        while (v6);
      }

      else
      {
        do
        {
          int v7 = *(os_unfair_lock_s **)&v2[4]._os_unfair_lock_opaque;
          BOOL v8 = *(void *)&v7->_os_unfair_lock_opaque == (void)v2;
          uint64_t v2 = v7;
        }

        while (!v8);
      }

      uint64_t v2 = v7;
      uint64_t v4 = v5;
    }

    while (v7 != &a1[146]);
  }

  sub_100242F54((uint64_t)v54);
  __int16 v9 = v56;
  if (v56 == (void **)&v55)
  {
    char v11 = 0;
    char v10 = 0;
    char v39 = 0;
    char v33 = 0;
    char v36 = 0;
    char v37 = 1;
  }

  else
  {
    char v33 = 0;
    char v39 = 0;
    char v10 = 0;
    char v11 = 0;
    char v36 = 0;
    char v37 = 1;
    do
    {
      uint64_t v12 = sub_10041146C(a1, *((unsigned __int16 *)v9 + 8));
      uint64_t v13 = v12;
      if (v12)
      {
        int v14 = sub_1003E01A8(v12);
        switch(v14)
        {
          case 12:
            ++v36;
            break;
          case 18:
            ++v11;
            break;
          case 24:
            ++v10;
            break;
        }

        char v15 = sub_1003D5638(v13);
        __int16 v16 = sub_1003E01A8(v13);
        ++v33;
        v39 += v15;
        if ((unsigned __int16)((24576 * v16) | ((unsigned __int16)(-21845 * v16) >> 3)) >= 0xAABu
          && !sub_1003D5638(v13)
          || (__int16 v17 = sub_1003E01A8(v13),
              (unsigned __int16)((24576 * v17) | ((unsigned __int16)(-21845 * v17) >> 3)) >= 0xAABu)
          && sub_1003E01A8(v13) != 12
          && sub_1003D5638(v13))
        {
          char v37 = 0;
        }
      }

      __int16 v9 = (void **)v9[1];
    }

    while (v9 != (void **)&v55);
  }

  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  char v34 = v11;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089ACE0);
  }
  id v18 = sub_10059A34C((uint64_t)off_1008D5F08);
  id obj = (id)objc_claimAutoreleasedReturnValue(v18);
  id v19 = [obj countByEnumeratingWithState:&v50 objects:v60 count:16];
  char v35 = v10;
  char v32 = a1;
  char v20 = 0;
  if (v19)
  {
    uint64_t v21 = *(void *)v51;
    do
    {
      uint64_t v22 = 0LL;
      do
      {
        if (*(void *)v51 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v23 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)v22);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089ADC0);
        }
        if (sub_1005D4FEC((uint64_t)off_1008D5F28, v23))
        {
          if (qword_1008D5F10 != -1) {
            dispatch_once(&qword_1008D5F10, &stru_10089ACE0);
          }
          uint64_t v24 = off_1008D5F08;
          sub_100241F90(v59, v23);
          int v25 = sub_10059A848((uint64_t)v24, v59);
          switch(v25)
          {
            case 6:
              ++v36;
              break;
            case 9:
              ++v34;
              break;
            case 12:
              ++v35;
              break;
          }

          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089ADC0);
          }
          char v26 = off_1008D5F28;
          sub_10002418C(__p, "IsXboxBLEController");
          char v27 = sub_1005CE5A8((uint64_t)v26, v23, (uint64_t)__p);
          if (v49 < 0) {
            operator delete(__p[0]);
          }
          if (qword_1008D5F10 != -1) {
            dispatch_once(&qword_1008D5F10, &stru_10089ACE0);
          }
          int v28 = off_1008D5F08;
          sub_100241F90(v59, v23);
          ++v20;
          v39 += v27;
          if (sub_10059A848((uint64_t)v28, v59) != 6)
          {
            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_10089ACE0);
            }
            char v29 = off_1008D5F08;
            sub_100241F90(v58, v23);
            int v30 = sub_10059A848((uint64_t)v29, v58);
            v37 &= (unsigned __int16)((unsigned __int16)((((-21845 * v30) & 0xFFF8u) >> 2) | (-16384 * v30)) >> 1) < 0xAABu;
          }
        }

        uint64_t v22 = (char *)v22 + 1;
      }

      while (v19 != v22);
      id v19 = [obj countByEnumeratingWithState:&v50 objects:v60 count:16 v32];
    }

    while (v19);
  }

  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  v40[2] = sub_1004912C0;
  v40[3] = &unk_10089AC80;
  char v41 = v33;
  char v42 = v20;
  char v43 = v39;
  char v44 = v36;
  char v45 = v34;
  char v46 = v35;
  char v47 = v37 & 1;
  sub_100491204(v32 + 96, v40);
  sub_100242FAC((uint64_t)v54);
  return sub_10023DF50(&v55);
}

void sub_10048F3C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37)
{
}

void sub_10048F438(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v14 = a2;
  uint64_t v4 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempting to force HID sniff rate", buf, 2u);
  }

  char v12 = 33;
  int v11 = 35127750;
  if (sub_1000F997C(a2, 3, (char *)&v11, 5uLL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_100684748();
    }
    uint64_t v5 = *(void *)(a1 + 584);
    if (!v5) {
      goto LABEL_22;
    }
    uint64_t v6 = a1 + 584;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v5 + 32);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        __int16 v9 = (uint64_t *)v5;
      }
      else {
        __int16 v9 = (uint64_t *)(v5 + 8);
      }
      if (v8) {
        uint64_t v6 = v5;
      }
      uint64_t v5 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 584 && *(unsigned __int16 *)(v6 + 32) <= a2)
    {
      char v10 = sub_10036D800(a1 + 576, &v14);
      *((_BYTE *)v10 + 9) = 1;
      (*(void (**)(uint64_t))(*(void *)*v10 + 32LL))(*v10);
    }

    else
    {
LABEL_22:
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
        sub_10068471C();
      }
    }
  }

_BYTE *sub_10048F590(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v4 = 0;
  sub_100242CA4(&v4);
  sub_10048F438(v2, *(unsigned __int16 *)(a1 + 40));
  return sub_100242CD8(&v4);
}

void sub_10048F5D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10048F5EC(uint64_t a1, unsigned int a2, int a3)
{
  unsigned __int16 v47 = a2;
  uint64_t v6 = sub_10041146C((void *)a1, a2);
  v46[0] = 0LL;
  v46[1] = 0LL;
  sub_100242F28((uint64_t)v46, a1 + 320);
  uint64_t v7 = *(void *)(a1 + 584);
  if (!v7) {
    goto LABEL_12;
  }
  BOOL v8 = (uint64_t *)(a1 + 584);
  uint64_t v9 = a1 + 584;
  do
  {
    unsigned int v10 = *(unsigned __int16 *)(v7 + 32);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      char v12 = (uint64_t *)v7;
    }
    else {
      char v12 = (uint64_t *)(v7 + 8);
    }
    if (v11) {
      uint64_t v9 = v7;
    }
    uint64_t v7 = *v12;
  }

  while (*v12);
  if ((uint64_t *)v9 != v8 && *(unsigned __int16 *)(v9 + 32) <= a2)
  {
    unsigned __int16 v14 = sub_10036D800(a1 + 576, &v47);
    sub_100242F54((uint64_t)v46);
    char v15 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D01A0(v6, (uint64_t)buf);
      __int16 v16 = v49 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)__int128 v50 = 136446466;
      __int128 v51 = v16;
      __int16 v52 = 1024;
      int v53 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Received disconnection indication on device %{public}s reason %d",  v50,  0x12u);
      if (v49 < 0) {
        operator delete(*(void **)buf);
      }
    }

    uint64_t v17 = v14[2];
    *(_DWORD *)buf = 0;
    *(_DWORD *)__int128 v50 = 0;
    uint64_t v45 = 0LL;
    BOOL v18 = sub_1003D55EC(v6, buf, v50, (_DWORD *)&v45 + 1, &v45);
    int v19 = *(_DWORD *)(v6 + 1164);
    if (v19) {
      int v19 = *(_DWORD *)(v6 + 1168) / v19;
    }
    unsigned int v20 = *(_DWORD *)(v6 + 1156);
    if (v20) {
      unsigned int v20 = *(_DWORD *)(v6 + 1160) / v20;
    }
    if (*(_BYTE *)(v6 + 1122)) {
      int v21 = v19;
    }
    else {
      int v21 = 128;
    }
    if (*(_BYTE *)(v6 + 1122)) {
      char v22 = v20;
    }
    else {
      char v22 = -1;
    }
    sub_10048FA74(v18, a3, *(int *)v50, SHIDWORD(v45), v17, v21, v22);
    uint64_t v23 = sub_1002E6E9C();
    uint64_t v24 = sub_1002D0A04(v23);
    if ((_DWORD)v24 && *(_BYTE *)(v6 + 1122)) {
      sub_10048FB20(v24, v6);
    }
    uint64_t v25 = sub_1002E6BF0();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v25 + 384LL))(v25) & 1) != 0
      || (uint64_t v26 = sub_1002E6E00(), (*(unsigned int (**)(uint64_t))(*(void *)v26 + 8LL))(v26)))
    {
      sub_100242ECC((uint64_t)v46);
      uint64_t v27 = *v8;
      if (!*v8) {
        goto LABEL_46;
      }
      uint64_t v28 = a1 + 584;
      do
      {
        unsigned int v29 = *(unsigned __int16 *)(v27 + 32);
        BOOL v30 = v29 >= v47;
        if (v29 >= v47) {
          uint64_t v31 = (uint64_t *)v27;
        }
        else {
          uint64_t v31 = (uint64_t *)(v27 + 8);
        }
        if (v30) {
          uint64_t v28 = v27;
        }
        uint64_t v27 = *v31;
      }

      while (*v31);
      else {
LABEL_46:
      }
        uint64_t v32 = 0LL;
      sub_100242F54((uint64_t)v46);
      if ((_DWORD)v32)
      {
        char v44 = 0;
        sub_100242CA4(&v44);
        char v33 = sub_10012D6D8(v32);
        sub_100242CD0(&v44);
        uint64_t v34 = sub_1002E8D94();
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)v34 + 560LL))(v34, v33, v32);
        uint64_t v35 = sub_1002E8D94();
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)v35 + 536LL))(v35, v33, v32);
        uint64_t v36 = sub_100404EB8();
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3221225472LL;
        v42[2] = sub_10048FB94;
        v42[3] = &unk_100893D28;
        __int16 v43 = v32;
        sub_100405384(v36, v42);
        sub_100242CD8(&v44);
      }
    }

    (*(void (**)(uint64_t, void))(*(void *)*v14 + 40LL))(*v14, 0LL);
    (*(void (**)(uint64_t))(*(void *)*v14 + 48LL))(*v14);
    *((_BYTE *)v14 + 72) = 0;
    char v37 = (void *)v14[10];
    if (v37) {
      free(v37);
    }
    v14[10] = 0LL;
    sub_100242ECC((uint64_t)v46);
    sub_100493384(a1 + 576, &v47);
    sub_100242F54((uint64_t)v46);
    int v38 = *(unsigned __int16 *)(a1 + 560);
    if (v38 == v47) {
      LOWORD(v38) = 0;
    }
    *(_WORD *)(a1 + 560) = v38;
    sub_100411718(a1, v6, 0, a3);
    uint64_t v39 = sub_100404EB8();
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_10048FBFC;
    v41[3] = &unk_10087EB20;
    v41[4] = a1;
    sub_100405384(v39, v41);
  }

  else
  {
LABEL_12:
    uint64_t v13 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "No session for handle %d, likely because the interrupt channel failed to establish",  buf,  8u);
    }
  }

  return sub_100242FAC((uint64_t)v46);
}

void sub_10048FA2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void sub_10048FA74(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6, char a7)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  unsigned __int16 v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100491E50;
  v15[3] = &unk_1008873C8;
  int v16 = a4;
  int v17 = a3;
  v15[4] = a5;
  char v20 = a7;
  int v18 = a6;
  int v19 = a2;
  dispatch_async(v14, v15);
}

void sub_10048FB20(uint64_t a1, uint64_t a2)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  char v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004920D8;
  block[3] = &unk_10087EB20;
  block[4] = a2;
  dispatch_async(v4, block);
}

void sub_10048FB94(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, uint64_t, void))(*(void *)v2 + 1032LL))( v2,  *(unsigned __int16 *)(a1 + 32),  1LL,  0LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_1006847A8();
    }
  }

void *sub_10048FBFC(uint64_t a1)
{
  return sub_10048EE44(*(os_unfair_lock_s **)(a1 + 32));
}

_BYTE *sub_10048FC04(void *a1, unint64_t a2, int a3)
{
  int v6 = sub_100411370(a1, a2);
  char v22 = 0;
  sub_100242CA4(&v22);
  if (v6)
  {
    if (a3)
    {
      uint64_t v7 = (os_log_s *)(id)qword_1008F7730;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a2, __p);
        sub_1006848C4();
      }

void sub_10048FE60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100242CD8(&a15);
  _Unwind_Resume(a1);
}

_BYTE *sub_10048FEA0(uint64_t a1, unint64_t a2, int a3)
{
  return sub_10048FC04((void *)(a1 - 264), a2, a3);
}

void sub_10048FEA8(void *a1, int a2)
{
  uint64_t v3 = (unsigned __int8 *)sub_10041146C(a1, a2);
  int v4 = sub_1000F93B0(a2);
  uint64_t v5 = (os_log_s *)(id)qword_1008F7730;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v3)
    {
      sub_1003CF00C((uint64_t)v3, __p);
      if (v8 >= 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v10 = (const char *)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Remote unplugging virtual cable to device %{public}s",  buf,  0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v10 = "NULL";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Remote unplugging virtual cable to device %{public}s",  buf,  0xCu);
    }
  }

  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089ACC0);
  }
  sub_10052F37C((uint64_t)off_1008D67A0, v3);
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_10068400C();
    }
  }

void sub_100490044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10049005C(void *a1, unsigned int a2, int a3, int a4)
{
  if (a3 && os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR))
  {
    sub_10068496C();
    if (a4) {
      goto LABEL_4;
    }
LABEL_8:
    sub_10048DB3C(a1, a2);
    return;
  }

  if (!a4) {
    goto LABEL_8;
  }
LABEL_4:
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
    sub_10068490C();
  }
  sub_1000F93B0(a2);
}

void sub_1004900FC(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = "no";
    __int16 v21 = 1024;
    int v19 = 67109890;
    if (a5) {
      uint64_t v16 = "yes";
    }
    else {
      uint64_t v16 = "no";
    }
    unsigned int v20 = a2;
    unsigned int v22 = a4;
    if (a6) {
      uint64_t v15 = "yes";
    }
    __int16 v23 = 2082;
    uint64_t v24 = v16;
    __int16 v25 = 2082;
    int v26 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Received input report indication: handle=%d, length=%d, first=%{public}s, final=%{public}s",  (uint8_t *)&v19,  0x22u);
  }

  if (*(_BYTE *)(a7 + 9))
  {
    uint64_t v17 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEBUG))
    {
      int v18 = *(_DWORD *)(a7 + 12);
      int v19 = 67109632;
      unsigned int v20 = a2;
      __int16 v21 = 1024;
      unsigned int v22 = a4;
      __int16 v23 = 1024;
      LODWORD(v24) = v18;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "attrs BTCLK: handle=%d, length=%d, BTCLK=%08x",  (uint8_t *)&v19,  0x14u);
    }
  }

  sub_10048C15C(a1, a2, 2u);
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  sub_10048D238(qword_1008D93F0, a2, a3, a4);
}

uint64_t sub_1004902D0(uint64_t a1, int a2, char a3)
{
  if (!a2) {
    return dword_1006C344C[a3 & 0xF];
  }
  if (a2 == 2604) {
    return 3758097110LL;
  }
  return 3758097084LL;
}

uint64_t sub_100490300(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  char v8 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109632;
    v12[1] = a2;
    __int16 v13 = 1024;
    int v14 = a4;
    __int16 v15 = 1024;
    int v16 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Received output report confirmation: handle=%d, length=%d, status=%{bluetooth:OI_STATUS}u",  (uint8_t *)v12,  0x14u);
  }

  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  if (a5 == 2604) {
    unsigned int v9 = -536870186;
  }
  else {
    unsigned int v9 = -536870212;
  }
  if (a5) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0LL;
  }
  return sub_10048D660(qword_1008D93F0, a2, a5 == 0, v10);
}

void sub_10049041C()
{
  uint64_t v0 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Received boot-mode keyboard report", v1, 2u);
  }

uint64_t sub_100490480( uint64_t a1, unsigned __int16 a2, int a3, int a4, uint64_t a5, unsigned int a6, int a7, int a8)
{
  __int16 v15 = (os_log_s *)qword_1008F7730;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_INFO);
  if (v16)
  {
    uint64_t v17 = "no";
    v22[0] = 67109890;
    v22[1] = a4;
    if (a7) {
      int v18 = "yes";
    }
    else {
      int v18 = "no";
    }
    __int16 v23 = 1024;
    unsigned int v24 = a6;
    if (a8) {
      uint64_t v17 = "yes";
    }
    __int16 v25 = 2082;
    int v26 = v18;
    __int16 v27 = 2082;
    uint64_t v28 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Received get report confirmation: reportType=%d, length=%d, first=%{public}s, final=%{public}s",  (uint8_t *)v22,  0x22u);
  }

  if (a3)
  {
    BOOL v16 = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR);
    if (v16) {
      sub_100684998();
    }
  }

  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  uint64_t v19 = qword_1008D93F0;
  uint64_t v20 = sub_1004902D0(v16, 0, a3);
  return sub_10048D558(v19, a2, a3 == 0, v20, a5, a6);
}

uint64_t sub_100490620(uint64_t a1, int a2, int a3, _BYTE *a4, int a5, int a6)
{
  unsigned __int16 v27 = a2;
  uint64_t v12 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v29) = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Received set report confirmation: handle=%d, handshake=%d, status=%d",  buf,  0x14u);
  }

  v26[0] = 0LL;
  v26[1] = 0LL;
  sub_100242F28((uint64_t)v26, a1 + 320);
  for (i = *(uint64_t ***)(a1 + 584); i; i = (uint64_t **)*i)
  {
    unsigned int v14 = *((unsigned __int16 *)i + 16);
    if (v27 >= v14)
    {
      if (v14 >= v27)
      {
        __int16 v15 = sub_10036D800(a1 + 576, &v27);
        *(_OWORD *)buf = 0u;
        __int128 v29 = 0u;
        buf[0] = *((_BYTE *)v15 + 32);
        *(_DWORD *)&buf[2] = *(_DWORD *)((char *)v15 + 34);
        size_t v16 = v15[6];
        *(void *)&__int128 v29 = v16;
        BYTE9(v29) = *((_BYTE *)v15 + 57);
        if (v16)
        {
          uint64_t v17 = operator new[](v16);
          *(void *)&uint8_t buf[8] = v17;
          memcpy(v17, (const void *)v15[5], v16);
          char v18 = 1;
        }

        else
        {
          uint64_t v17 = 0LL;
          char v18 = 0;
        }

        BYTE8(v29) = v18;
        if (sub_10048A888((uint64_t)buf) == 1 && !a3 && !a6)
        {
          uint64_t v19 = (os_log_s *)qword_1008F7730;
          if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)__int16 v25 = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "HID Perf Mode is running", v25, 2u);
          }

          *((_BYTE *)v15 + 64) = 1;
        }

        if (v16 && v17) {
          operator delete[](v17);
        }
        break;
      }

      ++i;
    }
  }

  sub_100242F54((uint64_t)v26);
  if (a3)
  {
    uint64_t v20 = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v20) {
      sub_100684998();
    }
  }

  else if (*(_WORD *)(a1 + 560) && *(unsigned __int16 *)(a1 + 560) == v27)
  {
    if (a5 == 1)
    {
      if (*a4 != 65) {
        goto LABEL_33;
      }
    }

    else if (a5 != 2 || *a4 != 64 || a4[1] != 3)
    {
      goto LABEL_33;
    }

    *(_WORD *)(a1 + 560) = 0;
    memset(buf, 0, sizeof(buf));
    sub_100242F28((uint64_t)buf, a1 + 448);
    sub_1002431AC((pthread_cond_t *)(a1 + 512));
    uint64_t v20 = sub_100242FAC((uint64_t)buf);
  }

void sub_10049092C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_100242FAC((uint64_t)va1);
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100490964(void *a1, unsigned int a2)
{
  int v4 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received idle indication on handle %d",  (uint8_t *)v7,  8u);
  }

  uint64_t v5 = sub_1002E6BF0();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 408LL))(v5);
  if ((_DWORD)result) {
    return sub_10048BE40(a1, a2, 3u);
  }
  return result;
}

void sub_100490A34(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089AD20);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v14) = *(_WORD *)(a2 + 4);
  uint64_t v7 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  if (v7)
  {
    char v8 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v7, __p);
      if (v12 >= 0) {
        unsigned int v9 = __p;
      }
      else {
        unsigned int v9 = (void **)__p[0];
      }
      uint64_t v10 = "good";
      *(_DWORD *)buf = 136446722;
      if (a4) {
        uint64_t v10 = "poor";
      }
      unsigned int v14 = v9;
      __int16 v15 = 2080;
      size_t v16 = v10;
      __int16 v17 = 1024;
      int v18 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s identified with %s sniff interval %u",  buf,  0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1003DD3D0((uint64_t)v7, a4);
  }

void sub_100490BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100490BCC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = sub_10012D87C(a2);
  unsigned int v9 = sub_10048D7C4(a1, v8);
  uint64_t v10 = sub_10012D890(a2);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089AD20);
  }
  LODWORD(v25[0]) = *(_DWORD *)a2;
  WORD2(v25[0]) = *(_WORD *)(a2 + 4);
  uint64_t result = sub_1003FFEB0(off_1008D5F48, (uint64_t)v25, 1);
  if (v9)
  {
    uint64_t v12 = (uint64_t)result;
    v25[0] = 0LL;
    v25[1] = 0LL;
    sub_100242F28((uint64_t)v25, a1 + 320);
    uint64_t v13 = *(void *)(a1 + 584);
    if (!v13) {
      goto LABEL_27;
    }
    unsigned int v14 = (unsigned __int16 *)(a1 + 584);
    __int16 v15 = (unsigned __int16 *)(a1 + 584);
    do
    {
      unsigned int v16 = *(unsigned __int16 *)(v13 + 32);
      BOOL v17 = v16 >= v9;
      if (v16 >= v9) {
        int v18 = (uint64_t *)v13;
      }
      else {
        int v18 = (uint64_t *)(v13 + 8);
      }
      if (v17) {
        __int16 v15 = (unsigned __int16 *)v13;
      }
      uint64_t v13 = *v18;
    }

    while (*v18);
    if (v15 != v14 && v9 >= v15[16])
    {
      if (a4 == 2)
      {
        v15[68] = a3;
        if (v12) {
          sub_1003E59F4(v12, a3);
        }
        uint64_t v19 = sub_1002E6BF0();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v19 + 384LL))(v19) & 1) != 0
          || (uint64_t v20 = sub_1002E6E00(), (*(unsigned int (**)(uint64_t))(*(void *)v20 + 8LL))(v20)))
        {
          uint64_t v21 = sub_1002E8D94();
          uint64_t v22 = sub_10012D87C(a2);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 560LL))(v21, v10, v22);
          uint64_t v23 = sub_1002E8D94();
          uint64_t v24 = sub_10012D87C(a2);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23 + 544LL))( v23,  v24,  v10,  1LL,  a3);
        }
      }

      v15[69] = a4;
    }

    else
    {
LABEL_27:
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
        sub_1006849F8();
      }
    }

    return (void *)sub_100242FAC((uint64_t)v25);
  }

  return result;
}

void sub_100490DAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100490DC0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  int v8 = (os_log_s *)(id)qword_1008F7730;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005BF8CC( ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5],  &__p);
    unsigned int v9 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
       ? &__p
       : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    unsigned int v14 = "void BT::HIDProfile::modeChangedInd(const OI_BD_ADDR *, uint16_t, uint8_t)";
    __int16 v15 = 2080;
    unsigned int v16 = v9;
    __int16 v17 = 1024;
    int v18 = 625 * a3;
    __int16 v19 = 1024;
    int v20 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s: Sniff interval changed: device %s, interval %u us, mode %d",  buf,  0x22u);
  }

  sub_100490BCC(a1, (uint64_t)a2, a3, a4);
  if (a3 <= 0x18 && a4 == 2)
  {
    uint64_t v10 = sub_100404EB8();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100490F88;
    v11[3] = &unk_10087EB20;
    v11[4] = a1;
    sub_100405384(v10, v11);
  }

void sub_100490F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100490F88(uint64_t a1)
{
  return sub_10048EE44(*(os_unfair_lock_s **)(a1 + 32));
}

void sub_100490F90(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = sub_100411370(v2, *(void *)(a1 + 40));
  unsigned __int16 v11 = v3;
  uint64_t v4 = v2[73];
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = v2 + 73;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v4 + 32);
    BOOL v7 = v6 >= v3;
    if (v6 >= v3) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = (void *)v4;
    }
    uint64_t v4 = *v8;
  }

  while (*v8);
  if (v5 != v2 + 73 && v3 >= *((unsigned __int16 *)v5 + 16))
  {
    if (!*((_WORD *)sub_10036D800((uint64_t)(v2 + 72), &v11) + 49))
    {
      unsigned int v9 = (os_log_s *)qword_1008F7730;
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Active mode HID detected, marking as Poor",  v10,  2u);
      }

      sub_1003DD3D0(*(void *)(a1 + 40), 1);
    }
  }

  else
  {
LABEL_21:
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_100684A24();
    }
  }

void sub_100491098(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (qword_1008D5F30 == -1)
  {
    uint64_t v4 = v3;
  }

  else
  {
    dispatch_once(&qword_1008D5F30, &stru_10089ADC0);
    uint64_t v4 = v5;
  }
}

void sub_100491110( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100491124(uint64_t a1, void *a2)
{
}

void *sub_100491130(uint64_t a1)
{
  return sub_10048EE44((os_unfair_lock_s *)(a1 - 296));
}

void sub_100491138(uint64_t a1)
{
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100491198;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

void *sub_100491198(uint64_t a1)
{
  return sub_10048EE44(*(os_unfair_lock_s **)(a1 + 32));
}

void sub_1004911A0(uint64_t a1)
{
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100491198;
  v3[3] = &unk_10087EB20;
  v3[4] = a1 - 296;
  sub_100405384(v2, v3);
}

void sub_100491204(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock(a1);
  id v5 = 0LL;
  unsigned int v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    unsigned int v6 = v4;
    operator delete(v4);
  }
}

void sub_100491298( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004912C0( unsigned __int8 *a1, uint64_t (***a2)(void, void, void, void, void, void, void, void))
{
  return (**a2)(a2, a1[32], a1[33], a1[34], a1[35], a1[36], a1[37], a1[38]);
}

void sub_1004912F0(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Console mode enablement changed to %d",  (uint8_t *)v6,  8u);
  }

  *(_BYTE *)(a1 + 563) = a2;
  uint64_t v5 = sub_100404EB8();
  sub_100405384(v5, &stru_10089ACA0);
}

void sub_1004913B4(uint64_t a1, int a2)
{
}

uint64_t sub_1004913BC(void *a1, uint64_t a2, int a3, int a4)
{
  char v21 = 0;
  sub_100242CA4(&v21);
  unsigned int v8 = sub_10048D868((uint64_t)a1, a2);
  unsigned __int16 v20 = v8;
  unsigned int v9 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    unsigned int v23 = v8;
    __int16 v24 = 1024;
    int v25 = a3;
    __int16 v26 = 1024;
    int v27 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Getting report - {handle: 0x%x, type %d, ID: %d}",  buf,  0x14u);
  }

  if (sub_10048C15C(a1, v8, 3u) != 335)
  {
    uint64_t v12 = 1LL;
    goto LABEL_21;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
    sub_100684ADC();
  }
  uint64_t v10 = (uint64_t **)a1[73];
  if (!v10)
  {
LABEL_11:
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_100684AB0();
    }
    goto LABEL_18;
  }

  while (1)
  {
    unsigned int v11 = *((unsigned __int16 *)v10 + 16);
    if (v8 >= v11) {
      break;
    }
LABEL_10:
    uint64_t v10 = (uint64_t **)*v10;
    if (!v10) {
      goto LABEL_11;
    }
  }

  if (v11 < v8)
  {
    ++v10;
    goto LABEL_10;
  }

  uint64_t v13 = sub_10036D800((uint64_t)(a1 + 72), &v20);
  unsigned int v14 = v13;
  unsigned int v15 = *((unsigned __int8 *)v13 + 72);
  if (*((_BYTE *)v13 + 72))
  {
    int v16 = *((unsigned __int8 *)v13 + 74);
    int v17 = *((_DWORD *)v13 + 19);
    int v18 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109632;
      unsigned int v23 = v15;
      __int16 v24 = 1024;
      int v25 = v16;
      __int16 v26 = 1024;
      int v27 = v17;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "Get report queue already occupied - {isEntryValid %d, reportType %d, reportID %d}",  buf,  0x14u);
    }

void sub_100491628( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100491648(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_1004913BC((void *)(a1 - 256), a2, a3, a4);
}

uint64_t sub_100491650(void *a1, uint64_t a2, int a3, int a4, void *a5, size_t a6)
{
  char v51 = 0;
  sub_100242CA4(&v51);
  int v12 = sub_10048D868((uint64_t)a1, a2);
  unsigned __int16 v50 = v12;
  uint64_t v13 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v12;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&uint8_t buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = a4;
    *(_WORD *)&buf[20] = 2048;
    *(void *)&buf[22] = a6;
    *(_WORD *)&buf[30] = 1040;
    *(_DWORD *)int v53 = a6;
    *(_WORD *)&v53[4] = 2098;
    *(void *)&v53[6] = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Set report {handle: %d, type: %d, ID: %d, size: %zu, {%{public}.*P}",  buf,  0x2Eu);
  }

  if (sub_10048C15C(a1, v50, 4u) != 335)
  {
    v49[0] = 0LL;
    v49[1] = 0LL;
    sub_100242F28((uint64_t)v49, (uint64_t)(a1 + 40));
    int v16 = (uint64_t **)a1[73];
    if (!v16) {
      goto LABEL_56;
    }
    while (1)
    {
      unsigned int v17 = *((unsigned __int16 *)v16 + 16);
      if (v50 >= v17)
      {
        if (v17 >= v50)
        {
          uint64_t v22 = sub_10036D800((uint64_t)(a1 + 72), &v50);
          *(_OWORD *)buf = 0u;
          unsigned __int16 v23 = v50;
          buf[0] = 5;
          *(_WORD *)&buf[2] = v50;
          *(_WORD *)&uint8_t buf[4] = 255;
          *(_OWORD *)&uint8_t buf[16] = a6;
          if (a5) {
            BOOL v24 = a6 == 0;
          }
          else {
            BOOL v24 = 1;
          }
          char v25 = v24;
          if (v24)
          {
            __int16 v26 = 0LL;
            char v27 = 0;
          }

          else
          {
            __int16 v26 = operator new[](a6);
            *(void *)&uint8_t buf[8] = v26;
            memcpy(v26, a5, a6);
            char v27 = 1;
          }

          uint8_t buf[24] = v27;
          if (!*((_BYTE *)v22 + 64)) {
            goto LABEL_37;
          }
          int v28 = sub_10048A888((uint64_t)buf);
          __int128 v29 = (os_log_s *)qword_1008F7730;
          if (v28 == 2)
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t v48 = 0;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "HID Perf Mode is stopping", v48, 2u);
            }

            *((_BYTE *)v22 + 64) = 0;
LABEL_37:
            __int16 v47 = 1;
            v42[0] = 5;
            unsigned __int16 v43 = v23;
            __int16 v44 = 255;
            std::stringbuf::string_type __p = 0LL;
            size_t v46 = a6;
            if (a6)
            {
              std::stringbuf::string_type __p = operator new[](a6);
              memcpy(__p, v26, a6);
              char v30 = 1;
            }

            else
            {
              char v30 = 0;
            }

            LOBYTE(v47) = v30;
            sub_100492C80((uint64_t)(v22 + 4), (uint64_t)v42);
            if ((_BYTE)v47 && __p) {
              operator delete[](__p);
            }
            char v34 = 0;
          }

          else
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
              sub_10068412C();
            }
            char v34 = 1;
          }

          if (v26) {
            char v35 = v25;
          }
          else {
            char v35 = 1;
          }
          if ((v35 & 1) == 0) {
            operator delete[](v26);
          }
          if ((v34 & 1) != 0)
          {
            sub_100242FAC((uint64_t)v49);
            goto LABEL_65;
          }

void sub_100491BB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (v19) {
    char v22 = v20;
  }
  else {
    char v22 = 1;
  }
  if ((v22 & 1) == 0) {
    operator delete[](v19);
  }
  sub_100242FAC((uint64_t)&a14);
  sub_100242CD8(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100491C24(uint64_t a1, uint64_t a2, int a3, int a4, void *a5, size_t a6)
{
  return sub_100491650((void *)(a1 - 256), a2, a3, a4, a5, a6);
}

uint64_t sub_100491C2C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v10 = 0;
  sub_100242CA4(&v10);
  uint64_t v6 = sub_10048D868(a1, a2);
  uint64_t v7 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    int v12 = v6;
    __int16 v13 = 1024;
    unsigned int v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Send Hid Control {handle: %d, controlOP: %d}",  buf,  0xEu);
  }

  if ((a3 - 3) > 1u || sub_1000F93B4(v6, a3, (uint64_t)sub_10048C0F4))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_100684BC0();
    }
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  sub_100242CD8(&v10);
  return v8;
}

void sub_100491D6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100491D88(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_100491C2C(a1 - 256, a2, a3);
}

_BYTE *sub_100491D90(void *a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clearing SDP record", buf, 2u);
  }

  char v8 = 0;
  sub_100242CA4(&v8);
  int v5 = sub_10048D868((uint64_t)a1, a2);
  uint64_t v6 = sub_10041146C(a1, v5);
  sub_1003CED44(v6);
  return sub_100242CD8(&v8);
}

void sub_100491E34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

_BYTE *sub_100491E48(uint64_t a1, uint64_t a2)
{
  return sub_100491D90((void *)(a1 - 256), a2);
}

uint64_t sub_100491E50(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 44) | (*(_DWORD *)(a1 + 40) << 16);
  uint64_t v3 = mach_continuous_time() - *(void *)(a1 + 32);
  mach_timebase_info info = 0LL;
  mach_timebase_info(&info);
  unint64_t v4 = v3 * info.numer / info.denom / 0x3B9ACA00;
  int v5 = *(char *)(a1 + 56);
  if (v5 >= 11) {
    LOBYTE(v5) = 10 * (*(_BYTE *)(a1 + 56) / 0xAu);
  }
  int v6 = (char)v5;
  int v8 = *(_DWORD *)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 52);
  v12[0] = v2;
  v12[1] = v8;
  _DWORD v12[2] = (char)v5;
  v12[3] = v4;
  v12[4] = v7;
  unsigned int v9 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110144;
    int v15 = v2;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 1024;
    int v19 = v6;
    __int16 v20 = 1024;
    int v21 = v4;
    __int16 v22 = 1024;
    int v23 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Posting HID Session Metric: Pid|Vid %x, RSSI Average %d, PER Average %d%%, Duration %ds, Disconnection Reason %d",  buf,  0x20u);
  }

  uint64_t result = sub_1002E8D94();
  if (result)
  {
    uint64_t v11 = sub_1002E8D94();
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v11 + 160LL))(v11, v12);
  }

  return result;
}

void sub_100491FC8(uint64_t a1)
{
  if (sub_1003CF350(*(unsigned __int8 **)(a1 + 32)))
  {
    uint64_t v2 = sub_1002E6E9C();
    uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
    int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v2 + 320LL))( v2,  1LL,  1LL,  ((unint64_t)v3[128] << 40) | ((unint64_t)v3[129] << 32) | ((unint64_t)v3[130] << 24) | ((unint64_t)v3[131] << 16) | ((unint64_t)v3[132] << 8) | v3[133],  1LL);
    int v5 = (os_log_s *)qword_1008F7730;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        *(_WORD *)int v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to enable phy stats", v7, 2u);
      }
    }

    else
    {
      if (v6)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Enabled phy stats", buf, 2u);
      }

      *(_BYTE *)(*(void *)(a1 + 32) + 1122LL) = 1;
    }
  }

void sub_1004920D8(uint64_t a1)
{
  int v2 = sub_1003CF350(*(unsigned __int8 **)(a1 + 32));
  uint64_t v3 = (os_log_s *)qword_1008F7730;
  if (v2)
  {
    int v4 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = sub_10012D87C(*(void *)(a1 + 32) + 128LL);
      int v10 = 67109120;
      int v11 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Disabling phy stats for HCI LM Handle 0x%02X",  (uint8_t *)&v10,  8u);
    }

    uint64_t v6 = sub_1002E6E9C();
    int v7 = *(unsigned __int8 **)(a1 + 32);
    (*(void (**)(uint64_t, void, uint64_t, unint64_t, uint64_t))(*(void *)v6 + 320LL))( v6,  0LL,  1LL,  ((unint64_t)v7[128] << 40) | ((unint64_t)v7[129] << 32) | ((unint64_t)v7[130] << 24) | ((unint64_t)v7[131] << 16) | ((unint64_t)v7[132] << 8) | v7[133],  1LL);
    *(_BYTE *)(*(void *)(a1 + 32) + 1122LL) = 0;
    int v8 = (os_log_s *)(id)qword_1008F7730;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_10089AD20);
      }
      int v9 = sub_1004020D4((uint64_t)off_1008D5F48);
      int v10 = 67109120;
      int v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "disablePhyStats, current number of devices %d",  (uint8_t *)&v10,  8u);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "disablePhyStats: device is not paired!!!",  (uint8_t *)&v10,  2u);
  }

void sub_1004922B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004922DC()
{
  return 5LL;
}

void sub_1004922F8(uint64_t a1, uint64_t a2)
{
  int v4 = *(char **)(a1 + 8);
  int v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004923AC(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_1004923AC(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  int v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    __int16 v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    __int16 v20 = &v19[8 * v16];
    std::stringbuf::string_type __p = v19;
    char v27 = v20;
    int v28 = v20;
    __int128 v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        __int16 v20 = &v23[8 * (v22 >> 2)];
        std::stringbuf::string_type __p = v23;
        char v27 = v20;
        __int128 v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        char v27 = v20;
      }
    }

    *(void *)__int16 v20 = *(void *)v3;
    int v28 = v20 + 8;
    int v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    int v9 = __src + 8;
    int v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004925B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004925E8(uint64_t a1, int a2)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  return sub_10048E004(qword_1008D93F0, a1, a2);
}

void sub_100492640(int a1, uint64_t a2)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  sub_10048E300((void *)qword_1008D93F0, a1, a2);
}

void sub_100492698(__int16 a1, int a2)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  int v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100492B84;
  block[3] = &unk_10087FF00;
  __int16 v8 = a1;
  int v7 = a2;
  dispatch_async(v5, block);
}

void sub_10049271C(int a1)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  sub_10048FEA8((void *)qword_1008D93F0, a1);
}

uint64_t sub_10049276C(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, int a6, int a7)
{
  unsigned __int16 v13 = a1;
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  return sub_100490480(a1, v13, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1004927FC(int a1, int a2, _BYTE *a3, int a4, int a5)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  return sub_100490620(qword_1008D93F0, a1, a2, a3, a4, a5);
}

void sub_10049287C(unsigned int a1, int a2, int a3)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  sub_10049005C((void *)qword_1008D93F0, a1, a2, a3);
}

void sub_1004928E4(unsigned int a1, uint64_t a2, unsigned int a3, int a4, int a5, uint64_t a6)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  sub_1004900FC((void *)qword_1008D93F0, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10049296C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v5 = a3;
  int v6 = a1;
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  return sub_100490300(a1, v6, a3, v5, a4);
}

void sub_1004929CC()
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  sub_10049041C();
}

uint64_t sub_100492A0C(unsigned int a1)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  return sub_100490964((void *)qword_1008D93F0, a1);
}

void sub_100492A5C(int *a1, __int16 a2, char a3)
{
  int v9 = *a1;
  __int16 v10 = *((_WORD *)a1 + 2);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  int v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100492BD8;
  v7[3] = &unk_1008800D8;
  __int16 v8 = a2;
  char v11 = a3;
  dispatch_async(v6, v7);
}

void sub_100492AF0(int *a1, __int16 a2, char a3)
{
  int v9 = *a1;
  __int16 v10 = *((_WORD *)a1 + 2);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  int v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100492C28;
  v7[3] = &unk_1008800D8;
  __int16 v8 = a2;
  char v11 = a3;
  dispatch_async(v6, v7);
}

uint64_t sub_100492B84(uint64_t a1)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  return sub_10048F5EC(qword_1008D93F0, *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32));
}

void sub_100492BD8(uint64_t a1)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  sub_100490A34(a1, a1 + 34, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_100492C28(uint64_t a1)
{
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089ADA0);
  }
  sub_100490DC0( qword_1008D93F0,  (unsigned __int8 *)(a1 + 34),  *(unsigned __int16 *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_100492C80(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  size_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  int v5 = *(void **)(a1 + 8);
  if (v5 && *(_BYTE *)(a1 + 24))
  {
    operator delete[](v5);
    *(void *)(a1 + 8) = 0LL;
    size_t v4 = *(void *)(a1 + 16);
  }

  if (v4)
  {
    int v6 = operator new[](v4);
    *(void *)(a1 + 8) = v6;
    memcpy(v6, *(const void **)(a2 + 8), v4);
    char v7 = 1;
  }

  else
  {
    char v7 = 0;
  }

  *(_BYTE *)(a1 + 24) = v7;
  return a1;
}

uint64_t sub_100492D14(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(_WORD *)(a1 + 24) = 1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  size_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  if (v3)
  {
    int v5 = operator new[](v3);
    *(void *)(a1 + 8) = v5;
    memcpy(v5, *(const void **)(a2 + 8), v3);
    char v6 = 1;
  }

  else
  {
    char v6 = 0;
  }

  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

void sub_100492D98(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100492D98(a1, *a2);
    sub_100492D98(a1, a2[1]);
    if (*((_BYTE *)a2 + 96))
    {
      size_t v4 = (void *)a2[10];
      if (v4) {
        operator delete[](v4);
      }
    }

    operator delete(a2);
  }

void sub_100492DEC(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_100492E1C(_Unwind_Exception *a1)
{
}

void sub_100492E30(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_100492E60(_Unwind_Exception *a1)
{
}

void sub_100492E74(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_100551DD0();
  qword_1008D5F58 = (uint64_t)v1;
}

void sub_100492EA4(_Unwind_Exception *a1)
{
}

char *sub_100492EB8(uint64_t a1, char *__src, char *a3)
{
  size_t v3 = a3;
  size_t v4 = __src;
  char v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unsigned __int16 v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    __int16 v20 = &v19[8 * v16];
    std::stringbuf::string_type __p = v19;
    char v27 = v20;
    int v28 = v20;
    __int128 v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        __int16 v20 = &v23[8 * (v22 >> 2)];
        std::stringbuf::string_type __p = v23;
        char v27 = v20;
        __int128 v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        char v27 = v20;
      }
    }

    *(void *)__int16 v20 = *(void *)v3;
    int v28 = v20 + 8;
    size_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    int v9 = __src + 8;
    __int16 v10 = v6 - 8;
    char v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)size_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004930BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004930F4(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_100493124(_Unwind_Exception *a1)
{
}

void sub_100493138(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  sub_10041A094(v1);
  qword_1008D95F8 = (uint64_t)v1;
}

void sub_100493168(_Unwind_Exception *a1)
{
}

void sub_10049317C(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1004931AC(_Unwind_Exception *a1)
{
}

uint64_t *sub_1004931C0(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  int v5 = (uint64_t **)(a1 + 8);
  size_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    unsigned int v6 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v4;
        unsigned int v8 = *((unsigned __int16 *)v4 + 16);
        if (v6 >= v8) {
          break;
        }
        size_t v4 = *v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }

      if (v8 >= v6) {
        break;
      }
      size_t v4 = v7[1];
      if (!v4)
      {
        int v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    memset(v10, 0, sizeof(v10));
    sub_100493278(a1, a3, v10);
    sub_100029630((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    return v10[0];
  }

  return (uint64_t *)v7;
}

__n128 sub_100493278@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  unsigned int v6 = a3 + 1;
  unint64_t v7 = (char *)operator new(0x98uLL);
  *a3 = v7;
  void *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  *((_WORD *)v7 + 16) = *(_WORD *)a2;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v7 + 50) = *(_OWORD *)(a2 + 18);
  sub_100492D14((uint64_t)(v7 + 72), a2 + 40);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v7 + 120) = *(_OWORD *)(a2 + 88);
  __n128 result = *(__n128 *)(a2 + 104);
  *(__n128 *)(v7 + 136) = result;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100493318(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_100493334(v2, v3);
  _Unwind_Resume(a1);
}

void sub_100493334(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((_BYTE *)__p + 96))
    {
      size_t v3 = (void *)__p[10];
      if (v3) {
        operator delete[](v3);
      }
    }
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_100493384(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = (uint64_t *)v2;
    }
    else {
      unint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }

  while (*v7);
  sub_1004933E8((uint64_t **)a1, v4);
  return 1LL;
}

uint64_t *sub_1004933E8(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = sub_1001FDBCC(a1, (uint64_t *)a2);
  if (*(_BYTE *)(a2 + 96))
  {
    uint64_t v4 = *(void **)(a2 + 80);
    if (v4) {
      operator delete[](v4);
    }
  }

  operator delete((void *)a2);
  return v3;
}

void sub_10049342C(id a1)
{
  uint64_t v1 = operator new(0x148uLL);
  sub_100493598();
  off_1008D9728 = v1;
}

void sub_10049345C(_Unwind_Exception *a1)
{
}

void sub_100493470(id a1)
{
  uint64_t v1 = operator new(0x258uLL);
  sub_10048A948((uint64_t)v1);
  qword_1008D93F0 = (uint64_t)v1;
}

void sub_1004934A0(_Unwind_Exception *a1)
{
}

void sub_1004934B4(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_1004934E4(_Unwind_Exception *a1)
{
}

  ;
}

uint64_t sub_100493510(uint64_t a1)
{
  *(void *)sub_10041BFD4(a1, "HidService", 32) = &off_10089AE40;
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089AF38);
  }
  sub_10041C264(a1, qword_1008D93F0);
  return a1;
}

void sub_100493584(_Unwind_Exception *a1)
{
}

uint64_t sub_10049359C(uint64_t a1, _WORD *a2)
{
  __int128 v33 = xmmword_1006C3490;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  int v28 = 0;
  int v29 = 0;
  uint64_t v4 = v30;
  unsigned int v3 = v31;
  if (v30 == v31)
  {
LABEL_19:
    LODWORD(v6) = 0;
    unint64_t v7 = 0LL;
    goto LABEL_20;
  }

  while (1)
  {
    if (*(_BYTE *)v4 != 6)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
        sub_100684C94(&v26, v27);
      }
      goto LABEL_18;
    }

    if (v4[1] != 2)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
        sub_100684C94(&v24, v25);
      }
      goto LABEL_18;
    }

    uint64_t v5 = *((void *)v4 + 1);
    if (*(_BYTE *)v5 != 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
        sub_100684C94(&v22, v23);
      }
      goto LABEL_18;
    }

    if (*(_DWORD *)(v5 + 8) != 34)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
        sub_100684CBC(&v20, v21);
      }
      goto LABEL_18;
    }

    if (*(_BYTE *)(v5 + 16) == 4) {
      break;
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_ERROR)) {
      sub_100684C94(&v18, v19);
    }
LABEL_18:
    v4 += 8;
    unsigned int v3 = v31;
    if (v4 == (_WORD *)v31) {
      goto LABEL_19;
    }
  }

  size_t v6 = *(unsigned __int16 *)(v5 + 18);
  unint64_t v14 = *(const void **)(v5 + 24);
  uint64_t v15 = malloc(v6);
  unint64_t v7 = v15;
  if (v15) {
    memcpy(v15, v14, v6);
  }
  else {
    LODWORD(v6) = 0;
  }
  uint64_t v4 = v3;
LABEL_20:
  unsigned int v8 = v30;
  if (v30 != v4)
  {
    do
    {
      *(void *)buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      *(_OWORD *)buf = *v8;
      sub_10025EB84(buf);
      ++v8;
    }

    while (v8 != v31);
  }

  if (!v7)
  {
LABEL_33:
    uint64_t v11 = 1LL;
    goto LABEL_40;
  }

  sub_100493A34((uint64_t)a2, 0x201u, (_WORD *)&v29 + 1);
  sub_100493A34((uint64_t)a2, 0x205u, &v29);
  sub_100493A34((uint64_t)a2, 0x202u, (_WORD *)&v28 + 1);
  sub_100493A34((uint64_t)a2, 0x203u, &v28);
  int v9 = (os_log_s *)qword_1008F7730;
  if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)a2, __p);
    __int16 v10 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136316418;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&uint8_t buf[14] = HIWORD(v29);
    __int16 v35 = 1024;
    int v36 = (unsigned __int16)v29;
    __int16 v37 = 1024;
    int v38 = HIWORD(v28);
    __int16 v39 = 1024;
    int v40 = (unsigned __int16)v28;
    __int16 v41 = 1024;
    int v42 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Caching HID info for %s: vendorID=0x%x vendorIDSource=0x%x productID=0x%x version=0x%x descriptorSize=%u",  buf,  0x2Au);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v6 > 0x1000)
  {
    uint64_t v12 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "Read HID descriptor size %u from SDP which is too large!",  buf,  8u);
      uint64_t v12 = (os_log_s *)qword_1008F7730;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100684C20(v6, v12);
    }
    uint64_t v11 = 1LL;
  }

  else
  {
    sub_10056AB04(buf, v7, v6);
    sub_1003D536C(a2, (uint64_t)buf, SHIWORD(v29), v29, SHIWORD(v28), v28);
    *(void *)buf = &off_10087FAA8;
    if (*(void *)&buf[8]) {
      sub_1002CD254(*(unsigned int **)&buf[8]);
    }
    uint64_t v11 = 0LL;
  }

  free(v7);
LABEL_40:
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }

  return v11;
}

void sub_1004939E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, unsigned int *a30)
{
  if (a30) {
    sub_1002CD254(a30);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100493A34(uint64_t a1, unsigned int a2, _WORD *a3)
{
  v11[0] = 131075LL;
  v11[1] = 4608LL;
  std::stringbuf::string_type __p = 0LL;
  int v9 = 0LL;
  uint64_t v10 = 0LL;
  int v4 = sub_1003D4C9C(a1, (uint64_t)v11, a2, &__p);
  uint64_t v5 = __p;
  if (v4)
  {
    size_t v6 = v9;
    if (v5 != v6)
    {
      do
      {
        __int128 v7 = *v5;
        sub_10025EB84(&v7);
        ++v5;
      }

      while (v5 != v9);
      uint64_t v5 = __p;
    }
  }

  if (v5)
  {
    int v9 = v5;
    operator delete(v5);
  }

void sub_100493AF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100493B10(uint64_t a1, _WORD *a2)
{
  __int128 v15 = xmmword_1006C3490;
  int v14 = 0;
  memset(v17, 0, sizeof(v17));
  char v13 = 0;
  int v12 = 0;
  if (sub_1003D518C((uint64_t)a2))
  {
    BOOL v4 = sub_1003D2E50((uint64_t)a2, &v15, 4u);
    if (v4)
    {
      sub_10049359C(v4, a2);
LABEL_11:
      int v7 = 4;
      goto LABEL_16;
    }

void sub_100493CCC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  __int128 v16 = xmmword_1006C3490;
  memset(v19, 0, sizeof(v19));
  char v15 = 0;
  int v13 = 0;
  int v14 = 0;
  *a3 = 0;
  sub_1003D53C4(a2);
  if (sub_1003D0454(a2, &v13))
  {
    if ((v13 & 0x1F00) != 0x500) {
      return;
    }
    if ((v13 & 0x40) != 0) {
      goto LABEL_14;
    }
    if ((v13 & 0x80) == 0)
    {
      goto LABEL_14;
    }

    uint64_t v5 = sub_1002E6BF0();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 360LL))(v5) & 1) != 0
      || (uint64_t v6 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 424LL))(v6)))
    {
      int v7 = (os_log_s *)qword_1008F7730;
      if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003D0100(a2, (uint64_t)__p);
        if (v12 >= 0) {
          unsigned int v8 = __p;
        }
        else {
          unsigned int v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315138;
        char v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Allowing HID Pointing Device %s", buf, 0xCu);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }

      goto LABEL_14;
    }

    unsigned int v9 = (os_log_s *)qword_1008F7730;
    if (os_log_type_enabled((os_log_t)qword_1008F7730, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D01A0(a2, (uint64_t)__p);
      uint64_t v10 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      char v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Rejecting HID Pointing Device %s", buf, 0xCu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    if (sub_1003D518C(a2))
    {
      if (!sub_1003D2E50(a2, &v16, 4u)) {
        return;
      }
      goto LABEL_14;
    }

    if (sub_1003E235C(a2, v19, &v15) && v15 && !sub_10011B978((unsigned __int8 *)v19, 4388, &v14)
      || sub_1003D0268(a2) == 24)
    {
LABEL_14:
      *a3 = 1;
    }
  }

uint64_t sub_100493F54(uint64_t a1, unint64_t a2, const char *a3)
{
  if (strcmp(a3, "BT_KEY_HID_VIRTUAL_CABLE_UNPLUG")) {
    return 2LL;
  }
  char v7 = 0;
  sub_100242CA4(&v7);
  if (qword_1008D93F8 != -1) {
    dispatch_once(&qword_1008D93F8, &stru_10089AF38);
  }
  uint64_t v5 = sub_10048B17C(qword_1008D93F0, a2);
  sub_100242CD8(&v7);
  return v5;
}

void sub_100494004( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100494018(uint64_t a1, _BYTE *a2, int a3, char a4)
{
  sub_1003D592C(a2, a3 != 0, a4);
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_10089AF58);
  }
  uint64_t result = sub_1003CA060((uint64_t)off_1008D67E0, (uint64_t)a2, 32);
  if ((_DWORD)result)
  {
    if (qword_1008D93F8 != -1) {
      dispatch_once(&qword_1008D93F8, &stru_10089AF38);
    }
    return sub_10048D1E4((void *)qword_1008D93F0, (unint64_t)a2);
  }

  return result;
}

void sub_1004940CC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10041C0C4(a1);
  operator delete(v1);
}

void sub_1004940E0(id a1)
{
  uint64_t v1 = operator new(0x258uLL);
  sub_10048AA64();
  qword_1008D93F0 = (uint64_t)v1;
}

void sub_100494110(_Unwind_Exception *a1)
{
}

void sub_100494124(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_1003C97E4((uint64_t)v1);
  off_1008D67E0 = v1;
}

void sub_100494154(_Unwind_Exception *a1)
{
}

void sub_100494168(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100494178(char *__s, unint64_t *a2)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089AF78);
  }
  uint64_t v4 = qword_1008D61A0;
  sub_10002418C(__p, __s);
  uint64_t v5 = sub_100496120(v4, (uint64_t)__p, a2, 5LL);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_100494210( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10049422C(unint64_t *a1)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089AF78);
  }
  uint64_t result = sub_1004966BC(qword_1008D61A0, *a1);
  if (!(_DWORD)result) {
    *a1 = 0LL;
  }
  return result;
}

void sub_100494288(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1004942B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1004942CC(uint64_t a1)
{
  *(void *)a1 = off_10089AFA8;
  *(void *)(a1 + 8) = off_10089AFF8;
  *(void *)(a1 + 16) = &off_10089B018;
  sub_100242DC4(a1 + 24);
  *(_BYTE *)(a1 + 88) = 0;
  uint64_t v2 = operator new(0x10uLL);
  sub_100404F28(v2, (uint64_t)"BT CallbackMgr");
  *(void *)(a1 + 96) = v2;
  return a1;
}

void sub_100494338(_Unwind_Exception *a1)
{
}

void *sub_100494360(void *a1)
{
  *a1 = off_10089AFA8;
  a1[1] = off_10089AFF8;
  a1[2] = &off_10089B018;
  uint64_t v2 = a1[12];
  if (v2)
  {
    unsigned int v3 = (void *)sub_100405360(v2);
    operator delete(v3);
  }

  sub_100242E28(a1 + 3);
  return a1;
}

void sub_1004943B4(void *a1)
{
  uint64_t v1 = sub_100494360(a1);
  operator delete(v1);
}

uint64_t sub_1004943C8(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 24);
  sub_100404F30(*(void *)(a1 + 96), QOS_CLASS_USER_INITIATED);
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089B038);
  }
  sub_1003B423C(qword_1008D61A0 + 8, a1 + 8);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089B058);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 16);
  return sub_100242FAC((uint64_t)v3);
}

void sub_100494488( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10049449C(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 24);
  sub_1004052F8(*(void *)(a1 + 96));
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089B038);
  }
  sub_100009168(qword_1008D61A0 + 8, a1 + 8);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089B058);
  }
  sub_100009168((uint64_t)off_1008D60A8 + 80, a1 + 16);
  return sub_100242FAC((uint64_t)v3);
}

void sub_100494558( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10049456C(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 24);
  *(_BYTE *)(a1 + 88) = 1;
  return sub_100242FAC((uint64_t)v3);
}

uint64_t sub_1004945B0(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 8);
  *(_BYTE *)(a1 + 72) = 1;
  return sub_100242FAC((uint64_t)v3);
}

uint64_t sub_1004945F4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CallbackManager::stackWillStop enter", buf, 2u);
  }

  *(void *)buf = 0LL;
  uint64_t v7 = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 24);
  *(_BYTE *)(a1 + 88) = 0;
  unsigned int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CallbackManager::stackWillStop exit", v5, 2u);
  }

  return sub_100242FAC((uint64_t)buf);
}

uint64_t sub_1004946BC(uint64_t a1)
{
  return sub_1004945F4(a1 - 16);
}

uint64_t sub_1004946C4(uint64_t a1, _BYTE *a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 24);
  sub_100405744(*(void *)(a1 + 96), a2);
  return sub_100242FAC((uint64_t)v5);
}

void sub_100494710( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100494734(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 24);
  sub_100405384(*(void *)(a1 + 96), v3);
  sub_100242FAC((uint64_t)v4);
}

void sub_100494788( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_1004947A8(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1004947D8(_Unwind_Exception *a1)
{
}

void sub_1004947EC(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10049481C(_Unwind_Exception *a1)
{
}

uint64_t sub_100494830(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6 = sub_100242DC4(a1);
  *(void *)(v6 + 64) = 0LL;
  *(_BYTE *)(v6 + 72) = 0;
  uint64_t v7 = v6 + 80;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100024238((_BYTE *)v7, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }

  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(_WORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = a3;
  return a1;
}

void sub_1004948AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1004948C4(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1);
  sub_100242FAC((uint64_t)v3);
  sub_10023BF24(a1 + 104, *(void **)(a1 + 112));
  return sub_100242E28(a1);
}

void sub_100494924(_Unwind_Exception *a1)
{
}

uint64_t sub_100494958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  if (*(char *)(a1 + 103) < 0)
  {
    sub_100024238((_BYTE *)a2, *(void **)(a1 + 80), *(void *)(a1 + 88));
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 80);
    *(void *)(a2 + 16) = *(void *)(a1 + 96);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1004949C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004949D8@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  v36[0] = 0LL;
  v36[1] = 0LL;
  sub_100242F28((uint64_t)v36, a1);
  std::string::size_type v4 = *(unsigned __int8 *)(a1 + 103);
  if (*(char *)(a1 + 103) < 0)
  {
    uint64_t v5 = *(_BYTE **)(a1 + 80);
    uint64_t v6 = *(void *)(a1 + 88);
    if (!v6) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v5 = (_BYTE *)(a1 + 80);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 103);
    if (!*(_BYTE *)(a1 + 103)) {
      goto LABEL_17;
    }
  }

  uint64_t v7 = &v5[v6];
  __int128 v8 = v5;
  unsigned int v9 = v7;
  do
  {
    if (*v8 == 45)
    {
      uint64_t v10 = &_mh_execute_header.magic + 1;
      while (v10 != 8)
      {
        if (&v8[v10] == v7) {
          goto LABEL_15;
        }
        int v11 = v8[v10];
        int v12 = aCentral_1[v10++];
        if (v11 != v12) {
          goto LABEL_7;
        }
      }

      unsigned int v9 = v8;
    }

void sub_100494C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100494C98(uint64_t a1, const std::string *a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  std::string::operator=((std::string *)(a1 + 80), a2);
  return sub_100242FAC((uint64_t)v5);
}

void sub_100494CE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100494CF8(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(void *)(a1 + 64);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_100494D3C(uint64_t a1, uint64_t a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(void *)(a1 + 64) = a2;
  sub_100242F54((uint64_t)v5);
  return sub_100242FAC((uint64_t)v5);
}

void sub_100494D88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100494D9C(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1);
  *(_BYTE *)(a1 + 72) = 1;
  *(void *)(a1 + 64) = 0LL;
  *(_BYTE *)(a1 + 137) = 0;
  return sub_100242FAC((uint64_t)v3);
}

uint64_t sub_100494DE8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v6[1] = 0LL;
  unint64_t v7 = a2;
  v6[0] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  __int128 v8 = &v7;
  sub_100029574((uint64_t **)(a1 + 104), &v7, (uint64_t)&unk_1006C2518, (uint64_t **)&v8)[5] = a3;
  return sub_100242FAC((uint64_t)v6);
}

void sub_100494E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100494E68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10002418C(a2, off_10089B078[*(int *)(a1 + 140)]);
}

void sub_100494E80(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 72);
  id v3 = (os_log_s *)qword_1008F7578;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4) {
      return;
    }
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v6 = (void *)(a1 + 80);
    sub_100494E68(a1, __p);
    if (v13 >= 0) {
      unint64_t v7 = __p;
    }
    else {
      unint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)buf = 134218498;
    uint64_t v15 = v5;
    __int16 v16 = 2082;
    char v17 = v6;
    __int16 v18 = 2082;
    uint64_t v19 = v7;
    __int128 v8 = "statedump: SM: %p Detached %{public}s type:%{public}s";
  }

  else
  {
    if (!v4) {
      return;
    }
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = (void *)(a1 + 80);
    sub_100494E68(a1, __p);
    if (v13 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    *(_DWORD *)buf = 134218498;
    uint64_t v15 = v9;
    __int16 v16 = 2082;
    char v17 = v10;
    __int16 v18 = 2082;
    uint64_t v19 = v11;
    __int128 v8 = "statedump: SM: %p Attached %{public}s type:%{public}s";
  }

  _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v8, buf, 0x20u);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_100495000(uint64_t a1)
{
  *(void *)a1 = off_10089B0B8;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  sub_100242DC4(a1 + 40);
  *(_WORD *)(a1 + 106) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 280) = 0LL;
  *(_WORD *)(a1 + 104) = getpid();
  unint64_t v3 = 4294901760LL;
  BOOL v4 = &v3;
  sub_100029574((uint64_t **)(a1 + 144), &v3, (uint64_t)&unk_1006C2518, (uint64_t **)&v4)[5] = 4294901760LL;
  unint64_t v3 = 4294901762LL;
  BOOL v4 = &v3;
  sub_100029574((uint64_t **)(a1 + 144), &v3, (uint64_t)&unk_1006C2518, (uint64_t **)&v4)[5] = 4294901760LL;
  unint64_t v3 = 4294901761LL;
  BOOL v4 = &v3;
  sub_100029574((uint64_t **)(a1 + 144), &v3, (uint64_t)&unk_1006C2518, (uint64_t **)&v4)[5] = 4294901760LL;
  return a1;
}

void sub_1004951BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char **a15, uint64_t a16, void **a17)
{
  char v26 = *a17;
  if (*a17)
  {
    *(void *)(v17 + 24) = v26;
    operator delete(v26);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100495254(uint64_t a1)
{
  *(void *)a1 = off_10089B0B8;
  sub_100495CA4(a1);
  sub_10023BF24(a1 + 264, *(void **)(a1 + 272));
  sub_10023BF24(a1 + 240, *(void **)(a1 + 248));
  sub_10023BF24(a1 + 216, *(void **)(a1 + 224));
  sub_10023BF24(a1 + 192, *(void **)(a1 + 200));
  sub_10023BF24(a1 + 168, *(void **)(a1 + 176));
  sub_10023BF24(a1 + 144, *(void **)(a1 + 152));
  sub_10023E78C(a1 + 120, *(char **)(a1 + 128));
  sub_100242E28(a1 + 40);
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1004952F0(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(void *)(v1 + 24) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void sub_10049536C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100495254(a1);
  operator delete(v1);
}

uint64_t sub_100495380(uint64_t a1)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 40);
  if (!*(_BYTE *)(a1 + 108))
  {
    *(_BYTE *)(a1 + 108) = 1;
    sub_100242F54((uint64_t)v10);
    sub_1002E6E00();
    if (qword_1008D92C0 != -1) {
      dispatch_once(&qword_1008D92C0, &stru_10089B138);
    }
    sub_100292A00(qword_1008D92B8);
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_10089B158);
    }
    sub_100447778((uint64_t)off_1008D6190);
    if (qword_1008D9138 != -1) {
      dispatch_once(&qword_1008D9138, &stru_10089B178);
    }
    (**(void (***)(void *))off_1008D9130)(off_1008D9130);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_10089B198);
    }
    (**(void (***)(void *))off_1008D5F48)(off_1008D5F48);
    if (qword_1008D5F00 != -1) {
      dispatch_once(&qword_1008D5F00, &stru_10089B1B8);
    }
    (**(void (***)(void *))off_1008D5EF8)(off_1008D5EF8);
    if (qword_1008D67B8 != -1) {
      dispatch_once(&qword_1008D67B8, &stru_10089B1D8);
    }
    (**(void (***)(void *))off_1008D67B0)(off_1008D67B0);
    if (qword_1008D67A8 != -1) {
      dispatch_once(&qword_1008D67A8, &stru_10089B1F8);
    }
    (**(void (***)(void *))off_1008D67A0)(off_1008D67A0);
    if (qword_1008D67E8 != -1) {
      dispatch_once(&qword_1008D67E8, &stru_10089B218);
    }
    (**(void (***)(void *))off_1008D67E0)(off_1008D67E0);
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_10089B238);
    }
    (**(void (***)(void *))off_1008D60C8)(off_1008D60C8);
    if (qword_1008D63D8 != -1) {
      dispatch_once(&qword_1008D63D8, &stru_10089B258);
    }
    (*(void (**)(void *))(*(void *)off_1008D63D0 + 72LL))(off_1008D63D0);
    if (qword_1008D90F8 != -1) {
      dispatch_once(&qword_1008D90F8, &stru_10089B278);
    }
    (**(void (***)(void *))off_1008D90F0)(off_1008D90F0);
    if (qword_1008D9168 != -1) {
      dispatch_once(&qword_1008D9168, &stru_10089B298);
    }
    sub_100642448();
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10089B118);
    }
    (**(void (***)(void *))off_1008D60A8)(off_1008D60A8);
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_10089B2B8);
    }
    (**(void (***)(void *))off_1008D5F38)(off_1008D5F38);
    if (qword_1008D9600 != -1) {
      dispatch_once(&qword_1008D9600, &stru_10089B2D8);
    }
    sub_10041A1C0(qword_1008D95F8);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089B2F8);
    }
    (**(void (***)(void *))off_1008D5F28)(off_1008D5F28);
    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_10089B318);
    }
    sub_10061E4A4(qword_1008D5F18);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089B338);
    }
    sub_10058E5C4((uint64_t)off_1008D5F08);
    if (qword_1008D6288 != -1) {
      dispatch_once(&qword_1008D6288, &stru_10089B358);
    }
    sub_10056DFB8((uint64_t)off_1008D6280);
    if (qword_1008D6608 != -1) {
      dispatch_once(&qword_1008D6608, &stru_10089B378);
    }
    sub_1005DDAE0((uint64_t)off_1008D6600);
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_10089B398);
    }
    sub_100381F68((void *)qword_1008D9260);
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089B3B8);
    }
    sub_1002769A8((uint64_t)off_1008D67C0);
    if (qword_1008D9158 != -1) {
      dispatch_once(&qword_1008D9158, &stru_10089B3D8);
    }
    sub_10024358C(qword_1008D9150);
    if (qword_1008D9050 != -1) {
      dispatch_once(&qword_1008D9050, &stru_10089B3F8);
    }
    sub_100363A40(qword_1008D9048);
    if (qword_1008D6618 != -1) {
      dispatch_once(&qword_1008D6618, &stru_10089B418);
    }
    sub_100502B1C(qword_1008D6610);
    if (qword_1008D93E0 != -1) {
      dispatch_once(&qword_1008D93E0, &stru_10089B438);
    }
    sub_1004F66AC((uint64_t)off_1008D93D8);
    if (qword_1008D9148 != -1) {
      dispatch_once(&qword_1008D9148, &stru_10089B458);
    }
    (*(void (**)(void *))(*(void *)off_1008D9140 + 32LL))(off_1008D9140);
    if (qword_1008D60F0 != -1) {
      dispatch_once(&qword_1008D60F0, &stru_10089B478);
    }
    sub_100499874((uint64_t)off_1008D60E8);
    id v2 = +[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager");
    sub_1002E90E4();
    sub_1002E8E5C();
    if (qword_1008D9278 != -1) {
      dispatch_once(&qword_1008D9278, &stru_10089B498);
    }
    sub_100411DDC(qword_1008D9270);
    sub_1002E6CF8();
    if (qword_1008D6798 != -1) {
      dispatch_once(&qword_1008D6798, &stru_10089B4B8);
    }
    sub_1001F7970(qword_1008D6790);
    if (qword_1008D9060 != -1) {
      dispatch_once(&qword_1008D9060, &stru_10089B4D8);
    }
    sub_10040C5A8(qword_1008D9058);
    uint64_t v3 = sub_1002E8D94();
    (*(void (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    if (qword_1008D6788 != -1) {
      dispatch_once(&qword_1008D6788, &stru_10089B4F8);
    }
    (**(void (***)(void *))off_1008D6780)(off_1008D6780);
    uint64_t v4 = sub_10024F00C();
    sub_10024EFB8(v4);
    uint64_t v5 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 352LL))(v5))
    {
      if (qword_1008D9700 != -1) {
        dispatch_once(&qword_1008D9700, &stru_10089B518);
      }
      (*(void (**)(void *))(*(void *)off_1008D96F8 + 8LL))(off_1008D96F8);
    }

    if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
    {
      if (qword_1008D6170 != -1) {
        dispatch_once(&qword_1008D6170, &stru_10089B538);
      }
      sub_100257054(qword_1008D6168);
    }

    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_10089B318);
    }
    uint64_t v6 = sub_100619F1C(qword_1008D5F18);
    if ((_DWORD)v6)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_100684CE4();
      }
      uint64_t v8 = sub_1002E6E00();
      sub_10002418C(v9, "");
      sub_1004FB370(v8, v6, (uint64_t)v9, 1);
    }

    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_10089B158);
    }
    if (!sub_1004475D0()) {
      errx(1, "Failed to start the Bluetooth daemon\n");
    }
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_100495C70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100495CA4(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 40);
  if (*(_BYTE *)(a1 + 108))
  {
    sub_100242F54((uint64_t)v3);
    if (qword_1008D6788 != -1) {
      dispatch_once(&qword_1008D6788, &stru_10089B4F8);
    }
    (*(void (**)(void *))(*(void *)off_1008D6780 + 8LL))(off_1008D6780);
    if (qword_1008D60F0 != -1) {
      dispatch_once(&qword_1008D60F0, &stru_10089B478);
    }
    sub_10049A71C((unint64_t)off_1008D60E8);
    if (qword_1008D93E0 != -1) {
      dispatch_once(&qword_1008D93E0, &stru_10089B438);
    }
    sub_1004F68D0((uint64_t)off_1008D93D8);
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10089B118);
    }
    (*(void (**)(void *))(*(void *)off_1008D60A8 + 8LL))(off_1008D60A8);
    if (qword_1008D90F8 != -1) {
      dispatch_once(&qword_1008D90F8, &stru_10089B278);
    }
    (*(void (**)(void *))(*(void *)off_1008D90F0 + 8LL))(off_1008D90F0);
    if (qword_1008D63D8 != -1) {
      dispatch_once(&qword_1008D63D8, &stru_10089B258);
    }
    (*(void (**)(void *))(*(void *)off_1008D63D0 + 80LL))(off_1008D63D0);
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_10089B238);
    }
    (*(void (**)(void *))(*(void *)off_1008D60C8 + 8LL))(off_1008D60C8);
    if (qword_1008D67A8 != -1) {
      dispatch_once(&qword_1008D67A8, &stru_10089B1F8);
    }
    (*(void (**)(void *))(*(void *)off_1008D67A0 + 8LL))(off_1008D67A0);
    if (qword_1008D67E8 != -1) {
      dispatch_once(&qword_1008D67E8, &stru_10089B218);
    }
    (*(void (**)(void *))(*(void *)off_1008D67E0 + 8LL))(off_1008D67E0);
    if (qword_1008D67B8 != -1) {
      dispatch_once(&qword_1008D67B8, &stru_10089B1D8);
    }
    (*(void (**)(void *))(*(void *)off_1008D67B0 + 8LL))(off_1008D67B0);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_10089B198);
    }
    (*(void (**)(void *))(*(void *)off_1008D5F48 + 8LL))(off_1008D5F48);
    if (qword_1008D5F00 != -1) {
      dispatch_once(&qword_1008D5F00, &stru_10089B1B8);
    }
    (*(void (**)(void *))(*(void *)off_1008D5EF8 + 8LL))(off_1008D5EF8);
    if (qword_1008D9138 != -1) {
      dispatch_once(&qword_1008D9138, &stru_10089B178);
    }
    (*(void (**)(void *))(*(void *)off_1008D9130 + 8LL))(off_1008D9130);
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_10089B2B8);
    }
    (*(void (**)(void *))(*(void *)off_1008D5F38 + 8LL))(off_1008D5F38);
    if (qword_1008D6608 != -1) {
      dispatch_once(&qword_1008D6608, &stru_10089B378);
    }
    sub_1005F046C((uint64_t)off_1008D6600);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089B2F8);
    }
    (*(void (**)(void *))(*(void *)off_1008D5F28 + 8LL))(off_1008D5F28);
    if (qword_1008D9278 != -1) {
      dispatch_once(&qword_1008D9278, &stru_10089B498);
    }
    sub_1004121EC(qword_1008D9270);
    if (qword_1008D92C0 != -1) {
      dispatch_once(&qword_1008D92C0, &stru_10089B138);
    }
    sub_100292F6C((void *)qword_1008D92B8);
    sub_100242ECC((uint64_t)v3);
    *(_BYTE *)(a1 + 108) = 0;
  }

  return sub_100242FAC((uint64_t)v3);
}

void sub_10049610C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100496120(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  char v6 = v5;
  if ((v5 & 0x80u) != 0LL) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    sub_100242F28((uint64_t)v19, a1 + 40);
    if (!*(_BYTE *)(a1 + 108))
    {
      sub_100242F54((uint64_t)v19);
      (**(void (***)(uint64_t))a1)(a1);
      sub_100242ECC((uint64_t)v19);
    }

    if (a1 + 128 == sub_100024098(a1 + 120, (const void **)a2))
    {
      unint64_t v13 = sub_1004963F0(a1, a2);
      if (v13)
      {
        int v14 = operator new(0x90uLL);
        sub_1004948C0(v14, a2, a4);
        *(void *)buf = a2;
        sub_10049942C((uint64_t **)(a1 + 120), (const void **)a2, (uint64_t)&unk_1006C2518, (__int128 **)buf)[7] = (uint64_t)v14;
        sub_100494D3C((uint64_t)v14, v13);
        sub_100242F54((uint64_t)v19);
        sub_1004965A4((os_unfair_lock_s *)a1, (uint64_t)v14);
        uint64_t v15 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          else {
            __int16 v16 = *(const void **)a2;
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = v16;
          __int16 v21 = 2048;
          char v22 = v14;
          __int16 v23 = 2048;
          unint64_t v24 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Attached session for %{public}s with session: %p, session handle: %p",  buf,  0x20u);
        }

        uint64_t v12 = 0LL;
        *a3 = v13;
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v10 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        else {
          __int16 v18 = *(const void **)a2;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v18;
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Session %{public}s already attached",  buf,  0xCu);
        uint64_t v10 = (os_log_s *)qword_1008F7578;
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
        sub_100684D84();
      }
    }

    uint64_t v12 = 100LL;
LABEL_21:
    sub_100242FAC((uint64_t)v19);
    return v12;
  }

  int v11 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100684D10((void *)a2, v6 < 0, v11);
  }
  return 100LL;
}

void sub_1004963B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

unint64_t sub_1004963F0(uint64_t a1, uint64_t a2)
{
  int v3 = HIBYTE(*(unsigned __int16 *)(a1 + 104));
  int v4 = *(_WORD *)(a1 + 104);
  uint64_t v5 = (void *)(a1 + 152);
  __int16 v6 = *(_WORD *)(a1 + 106);
  unsigned int v7 = 1;
  while (1)
  {
    if (v6 == -2) {
      __int16 v6 = 0;
    }
    else {
      ++v6;
    }
    *(_WORD *)(a1 + 106) = v6;
    uint64_t v8 = *(char *)(a2 + 23) >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    unsigned __int8 v9 = *v8;
    if (*v8)
    {
      uint64_t v10 = v8 + 1;
      int v11 = 5381;
      do
      {
        int v11 = 33 * v11 + v9;
        int v12 = *v10++;
        unsigned __int8 v9 = v12;
      }

      while (v12);
    }

    else
    {
      int v11 = 5381;
    }

    int v13 = 33 * (33 * (33 * (v3 + 33 * v11) + v4) + ((unsigned __int16)(v6 & 0xFF00) >> 8)) + v6;
    if ((unsigned __int16)(v13 - 1) <= 0xFFFCu)
    {
      unint64_t v14 = (unint64_t)(unsigned __int16)v13 << 16;
      uint64_t v15 = (void *)*v5;
      if (!*v5) {
        break;
      }
      __int16 v16 = v5;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v14;
        if (v17 >= v14) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = v15 + 1;
        }
        if (v18) {
          __int16 v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }

      while (*v19);
      if (v16 == v5 || v16[4] > v14) {
        break;
      }
    }

    BOOL v18 = v7++ >= 0xFF;
    if (v18) {
      goto LABEL_30;
    }
  }

  unint64_t v24 = (unint64_t)(unsigned __int16)v13 << 16;
  if ((_WORD)v13)
  {
    unint64_t v23 = (unint64_t)(unsigned __int16)v13 << 16;
    char v25 = &v23;
    sub_100029574((uint64_t **)(a1 + 144), &v23, (uint64_t)&unk_1006C2518, (uint64_t **)&v25)[5] = v14;
    char v25 = &v24;
    sub_100029574((uint64_t **)(a1 + 168), &v24, (uint64_t)&unk_1006C2518, (uint64_t **)&v25)[5] = v14;
    return v24;
  }

void sub_1004965A4(os_unfair_lock_s *a1, uint64_t a2)
{
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_100494958(a2, (uint64_t)__p);
    if (v8 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending 'session attached' event for session %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100496E28;
  v6[3] = &unk_10089B0D8;
  v6[4] = a2;
  sub_100496D6C(a1 + 2, v6);
}

uint64_t sub_1004966BC(uint64_t a1, unint64_t a2)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 40);
  if (!*(_BYTE *)(a1 + 108))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100684E24();
    }
    uint64_t v10 = 1LL;
    goto LABEL_29;
  }

  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100684E50();
    }
    goto LABEL_22;
  }

  uint64_t v4 = sub_100496954((void *)a1, a2);
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100684E7C();
    }
LABEL_22:
    uint64_t v10 = 7LL;
    goto LABEL_29;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v17 = v4;
    __int16 v18 = 2048;
    uint64_t v19 = (void *)a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Detach session: %p, session handle: %p",  buf,  0x16u);
  }

  sub_100242F54((uint64_t)v15);
  sub_100496A60((os_unfair_lock_s *)a1, v4);
  sub_100242ECC((uint64_t)v15);
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 != a1 + 128)
  {
    while (*(void *)(v6 + 56) != v4)
    {
      unsigned int v7 = *(void **)(v6 + 8);
      if (v7)
      {
        do
        {
          char v8 = v7;
          unsigned int v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          char v8 = *(void **)(v6 + 16);
          BOOL v9 = *v8 == v6;
          uint64_t v6 = (uint64_t)v8;
        }

        while (!v9);
      }

      uint64_t v6 = (uint64_t)v8;
      if (v8 == (void *)(a1 + 128)) {
        goto LABEL_28;
      }
    }

    int v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = (void *)(v6 + 32);
      *(_DWORD *)buf = 134218242;
      uint64_t v17 = v4;
      __int16 v18 = 2082;
      uint64_t v19 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Erasing session %p from SessionMap for %{public}s",  buf,  0x16u);
    }

    sub_1002EE450((uint64_t **)(a1 + 120), v6);
  }

void sub_100496934( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100496954(void *a1, unint64_t a2)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, (uint64_t)(a1 + 5));
  if (!a2) {
    goto LABEL_23;
  }
  uint64_t v4 = (void *)a1[19];
  if (!v4) {
    goto LABEL_23;
  }
  uint64_t v5 = a1 + 19;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      char v8 = v4;
    }
    else {
      char v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == a1 + 19 || v5[4] > a2 || (v9 = (void *)a1[15], uint64_t v10 = a1 + 16, v9 == a1 + 16))
  {
LABEL_23:
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v11 = v5[5];
    while (1)
    {
      uint64_t v12 = v9[7];
      if (v12)
      {
        if (sub_100494CF8(v9[7]) == v11) {
          break;
        }
      }

      int v13 = (void *)v9[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          int v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          unint64_t v14 = (void *)v9[2];
          BOOL v15 = *v14 == (void)v9;
          BOOL v9 = v14;
        }

        while (!v15);
      }

      BOOL v9 = v14;
      if (v14 == v10) {
        goto LABEL_23;
      }
    }
  }

  sub_100242FAC((uint64_t)v17);
  return v12;
}

void sub_100496A4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100496A60(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_100494958(a2, (uint64_t)__p);
    if (v8 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending 'session detached' event for session %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100496E5C;
  v6[3] = &unk_10089B0D8;
  v6[4] = a2;
  sub_100496D6C(a1 + 2, v6);
}

void sub_100496B78(void *a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = a1 + 19;
    int v3 = (void *)a1[19];
    if (v3)
    {
      unint64_t v6 = (uint64_t **)(a1 + 18);
      BOOL v7 = a1 + 19;
      do
      {
        unint64_t v8 = v3[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          uint64_t v10 = v3;
        }
        else {
          uint64_t v10 = v3 + 1;
        }
        if (v9) {
          BOOL v7 = v3;
        }
        int v3 = (void *)*v10;
      }

      while (*v10);
      if (v7 != v4 && v7[4] <= a2)
      {
        sub_1001FDBCC((uint64_t **)a1 + 18, v7);
        operator delete(v7);
        uint64_t v11 = *v6;
        if (*v6 != v4)
        {
          do
          {
            if (v11[5] == a2) {
              void v11[5] = 0LL;
            }
            uint64_t v12 = (uint64_t *)v11[1];
            if (v12)
            {
              do
              {
                int v13 = v12;
                uint64_t v12 = (uint64_t *)*v12;
              }

              while (v12);
            }

            else
            {
              do
              {
                int v13 = (uint64_t *)v11[2];
                BOOL v14 = *v13 == (void)v11;
                uint64_t v11 = v13;
              }

              while (!v14);
            }

            uint64_t v11 = v13;
          }

          while (v13 != v4);
        }

        uint64_t v17 = (void *)a1[22];
        __int16 v16 = a1 + 22;
        BOOL v15 = v17;
        if (!v17) {
          goto LABEL_34;
        }
        __int16 v18 = v16;
        do
        {
          unint64_t v19 = v15[4];
          BOOL v20 = v19 >= a2;
          if (v19 >= a2) {
            __int16 v21 = v15;
          }
          else {
            __int16 v21 = v15 + 1;
          }
          if (v20) {
            __int16 v18 = v15;
          }
          BOOL v15 = (void *)*v21;
        }

        while (*v21);
        if (v18 == v16 || v18[4] > a2) {
LABEL_34:
        }
          __int16 v18 = v16;
        sub_1001FDBCC((uint64_t **)v16 - 1, v18);
        operator delete(v18);
      }
    }
  }

BOOL sub_100496CBC(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 40);
  uint64_t v4 = *(void **)(a1 + 120);
  uint64_t v5 = (void *)(a1 + 128);
  if (v4 == (void *)(a1 + 128))
  {
    BOOL v7 = 0LL;
  }

  else
  {
    do
    {
      uint64_t v6 = v4[7];
      BOOL v7 = v6 == a2;
      if (v6 == a2) {
        break;
      }
      unint64_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          unint64_t v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          BOOL v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }

        while (!v10);
      }

      uint64_t v4 = v9;
    }

    while (v9 != v5);
  }

  sub_100242FAC((uint64_t)v12);
  return v7;
}

void sub_100496D6C(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100496E00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100496E28(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  uint64_t v3 = sub_100494CF8(*(void *)(a1 + 32));
  return (**a2)(a2, v3);
}

uint64_t sub_100496E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100494CF8(*(void *)(a1 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8LL))(a2, v3);
}

unint64_t sub_100496E90(uint64_t a1, unint64_t a2)
{
  v33[1] = 0LL;
  unint64_t v34 = a2;
  v33[0] = 0LL;
  sub_100242F28((uint64_t)v33, a1 + 40);
  uint64_t v4 = sub_100496954((void *)a1, a2);
  if (a2)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (uint64_t **)(a1 + 168);
    __p[0] = &v34;
    unint64_t v7 = sub_100029574((uint64_t **)(a1 + 168), &v34, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5];
    if (v7)
    {
      unint64_t v32 = 0LL;
      unint64_t v8 = (void *)(a1 + 152);
      unint64_t v9 = v7;
      while (++v9 < (v7 | 0xFFFF))
      {
        BOOL v10 = (void *)*v8;
        if (*v8)
        {
          uint64_t v11 = (void *)(a1 + 152);
          do
          {
            unint64_t v12 = v10[4];
            BOOL v13 = v12 >= v9;
            if (v12 >= v9) {
              BOOL v14 = v10;
            }
            else {
              BOOL v14 = v10 + 1;
            }
            if (v13) {
              uint64_t v11 = v10;
            }
            BOOL v10 = (void *)*v14;
          }

          while (*v14);
          if (v11 != v8 && v9 >= v11[4]) {
            continue;
          }
        }

        unint64_t v32 = v9;
        uint64_t v15 = v34;
        __p[0] = &v32;
        sub_100029574((uint64_t **)(a1 + 144), &v32, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5] = v15;
        uint64_t v16 = v32;
        __p[0] = &v34;
        sub_100029574(v6, &v34, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5] = v16;
LABEL_43:
        unint64_t v17 = v32;
        goto LABEL_44;
      }

      __int16 v18 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
      {
        if (v5)
        {
          sub_100494958(v5, (uint64_t)__p);
          if (v31 >= 0) {
            unint64_t v19 = __p;
          }
          else {
            unint64_t v19 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136446210;
          int v36 = (const char *)v19;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Handles for session %{public}s wrapped!",  buf,  0xCu);
          if (v31 < 0) {
            operator delete(__p[0]);
          }
        }

        else
        {
          *(_DWORD *)buf = 136446210;
          int v36 = "(NULL)";
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Handles for session %{public}s wrapped!",  buf,  0xCu);
        }
      }

      uint64_t v20 = v34;
      unint64_t v21 = v34;
      while (++v21 < v7)
      {
        uint64_t v22 = (void *)*v8;
        if (*v8)
        {
          unint64_t v23 = (void *)(a1 + 152);
          do
          {
            unint64_t v24 = v22[4];
            BOOL v25 = v24 >= v21;
            if (v24 >= v21) {
              char v26 = v22;
            }
            else {
              char v26 = v22 + 1;
            }
            if (v25) {
              unint64_t v23 = v22;
            }
            uint64_t v22 = (void *)*v26;
          }

          while (*v26);
          if (v23 != v8 && v21 >= v23[4]) {
            continue;
          }
        }

        unint64_t v32 = v21;
LABEL_42:
        __p[0] = &v32;
        sub_100029574((uint64_t **)(a1 + 144), &v32, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5] = v20;
        goto LABEL_43;
      }

      if (v32) {
        goto LABEL_42;
      }
      int v28 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        if (v5)
        {
          sub_100494958(v5, (uint64_t)__p);
          sub_100684EE8();
        }

        else
        {
          sub_100684EA8((uint64_t)buf, v28, v29);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
    {
      sub_100684E50();
    }
  }

  unint64_t v17 = 0LL;
LABEL_44:
  sub_100242FAC((uint64_t)v33);
  return v17;
}

void sub_1004971D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

BOOL sub_100497204(uint64_t a1, unint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 40);
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 152);
    uint64_t v5 = (void *)(a1 + 152);
    uint64_t v4 = v6;
    if (!v6) {
      goto LABEL_13;
    }
    unint64_t v7 = v5;
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        BOOL v10 = v4;
      }
      else {
        BOOL v10 = v4 + 1;
      }
      if (v9) {
        unint64_t v7 = v4;
      }
      uint64_t v4 = (void *)*v10;
    }

    while (*v10);
    if (v7 == v5 || v7[4] > a2) {
LABEL_13:
    }
      unint64_t v7 = v5;
    BOOL v11 = v7 != v5;
  }

  else
  {
    BOOL v11 = 0LL;
  }

  sub_100242FAC((uint64_t)v13);
  return v11;
}

uint64_t sub_10049729C(uint64_t a1, unint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 40);
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100684F30();
    }
    goto LABEL_16;
  }

  uint64_t v6 = *(void **)(a1 + 152);
  uint64_t v5 = (void *)(a1 + 152);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_16;
  }
  unint64_t v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      BOOL v10 = v4;
    }
    else {
      BOOL v10 = v4 + 1;
    }
    if (v9) {
      unint64_t v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }

  while (*v10);
  if (v7 == v5 || v7[4] > a2)
  {
LABEL_16:
    uint64_t v11 = 0LL;
    goto LABEL_17;
  }

  uint64_t v11 = v7[5];
LABEL_17:
  sub_100242FAC((uint64_t)v13);
  return v11;
}

uint64_t sub_100497354(uint64_t a1, unint64_t a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 40);
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 152);
    uint64_t v5 = (uint64_t *)(a1 + 152);
    uint64_t v4 = v6;
    if (v6)
    {
      unint64_t v7 = v5;
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          BOOL v10 = v4;
        }
        else {
          BOOL v10 = v4 + 1;
        }
        if (v9) {
          unint64_t v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }

      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        sub_1001FDBCC((uint64_t **)v5 - 1, v7);
        operator delete(v7);
      }
    }
  }

  return sub_100242FAC((uint64_t)v12);
}

uint64_t sub_1004973F0(uint64_t a1, unint64_t a2, int a3, int a4)
{
  v30[1] = 0LL;
  unint64_t v31 = a2;
  v30[0] = 0LL;
  sub_100242F28((uint64_t)v30, a1 + 40);
  if (a2)
  {
    if (*(void *)(a1 + 112) == a2)
    {
      uint64_t v22 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_100684F5C(a2, v22);
      }
    }

    else
    {
      BOOL v10 = *(void **)(a1 + 200);
      BOOL v9 = (void *)(a1 + 200);
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_14;
      }
      uint64_t v11 = v9;
      do
      {
        unint64_t v12 = v8[4];
        BOOL v13 = v12 >= a2;
        if (v12 >= a2) {
          BOOL v14 = v8;
        }
        else {
          BOOL v14 = v8 + 1;
        }
        if (v13) {
          uint64_t v11 = v8;
        }
        unint64_t v8 = (void *)*v14;
      }

      while (*v14);
      if (v11 == v9 || v11[4] > a2) {
LABEL_14:
      }
        uint64_t v11 = v9;
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_10089B0F8);
      }
      uint64_t v15 = sub_100496954((void *)qword_1008D61A0, a2);
      uint64_t v16 = v15;
      if (v11 == v9)
      {
        *(void *)buf = &v31;
        unint64_t v23 = sub_100029574((uint64_t **)v9 - 1, &v31, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        *((_DWORD *)v23 + 10) = a3;
        *((_DWORD *)v23 + 11) = a4;
        uint64_t v24 = qword_1008F7578;
        if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO)) {
          return sub_100242FAC((uint64_t)v30);
        }
        unint64_t v25 = v31;
        sub_100494958(v16, (uint64_t)__p);
        if (v29 >= 0) {
          char v26 = __p;
        }
        else {
          char v26 = (void **)__p[0];
        }
        *(_DWORD *)buf = 134218754;
        *(void *)&uint8_t buf[4] = v25;
        __int16 v33 = 1024;
        int v34 = a3;
        __int16 v35 = 1024;
        int v36 = a4;
        __int16 v37 = 2082;
        int v38 = v26;
        unint64_t v19 = "Adding handle-identifier mapping for handle : %p \t with pid %d, pidVersion %d for session %{public}s";
        uint64_t v20 = (os_log_s *)v24;
        os_log_type_t v21 = OS_LOG_TYPE_INFO;
      }

      else
      {
        if (!v15) {
          return sub_100242FAC((uint64_t)v30);
        }
        uint64_t v17 = qword_1008F7578;
        if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
          return sub_100242FAC((uint64_t)v30);
        }
        sub_100494958(v16, (uint64_t)__p);
        if (v29 >= 0) {
          __int16 v18 = __p;
        }
        else {
          __int16 v18 = (void **)__p[0];
        }
        *(_DWORD *)buf = 134218754;
        *(void *)&uint8_t buf[4] = a2;
        __int16 v33 = 1024;
        int v34 = a3;
        __int16 v35 = 1024;
        int v36 = a4;
        __int16 v37 = 2082;
        int v38 = v18;
        unint64_t v19 = "Handle identifier entry already exists. Don't add handle : %p \t with pid %d, pidVersion %d for se"
              "ssion %{public}s";
        uint64_t v20 = (os_log_s *)v17;
        os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
      }

      _os_log_impl((void *)&_mh_execute_header, v20, v21, v19, buf, 0x22u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  return sub_100242FAC((uint64_t)v30);
}

void sub_100497694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1004976BC(uint64_t a1, unint64_t a2, int a3, int a4)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 40);
  if (!a2)
  {
LABEL_18:
    uint64_t v15 = 0LL;
    goto LABEL_19;
  }

  BOOL v10 = *(void **)(a1 + 200);
  BOOL v9 = (void *)(a1 + 200);
  unint64_t v8 = v10;
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      BOOL v14 = v8;
    }
    else {
      BOOL v14 = v8 + 1;
    }
    if (v13) {
      uint64_t v11 = v8;
    }
    unint64_t v8 = (void *)*v14;
  }

  while (*v14);
  if (v11 == v9 || v11[4] > a2 || *((_DWORD *)v11 + 10) != a3 || *((_DWORD *)v11 + 11) != a4)
  {
LABEL_16:
    uint64_t v16 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      unint64_t v20 = a2;
      __int16 v21 = 1024;
      int v22 = a3;
      __int16 v23 = 1024;
      int v24 = a4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Invalid handle identifier mapping found for handle %p with pid %d, pidVersion %d",  buf,  0x18u);
    }

    goto LABEL_18;
  }

  uint64_t v15 = 1LL;
LABEL_19:
  sub_100242FAC((uint64_t)v18);
  return v15;
}

uint64_t sub_10049780C(uint64_t a1, unint64_t a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 40);
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 200);
    uint64_t v5 = (uint64_t *)(a1 + 200);
    uint64_t v4 = v6;
    if (v6)
    {
      unint64_t v7 = v5;
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          BOOL v10 = v4;
        }
        else {
          BOOL v10 = v4 + 1;
        }
        if (v9) {
          unint64_t v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }

      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        sub_1001FDBCC((uint64_t **)v5 - 1, v7);
        operator delete(v7);
      }
    }
  }

  return sub_100242FAC((uint64_t)v12);
}

char *sub_1004978A8(uint64_t a1, int a2, char *a3, size_t a4)
{
  if (!a4) {
    return 0LL;
  }
  *(void *)BOOL v10 = 0xE00000001LL;
  int v11 = 1;
  int v12 = a2;
  bzero(v8, 0x288uLL);
  size_t v7 = 648LL;
  if (sysctl(v10, 4u, v8, &v7, 0LL, 0LL)) {
    *a3 = 0;
  }
  else {
    strlcpy(a3, v9, a4);
  }
  return a3;
}

BOOL sub_100497980(uint64_t a1, unint64_t a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 40);
  uint64_t v4 = (void *)(a1 + 272);
  uint64_t v5 = *(void **)(a1 + 272);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = (void *)(a1 + 272);
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      BOOL v9 = v5;
    }
    else {
      BOOL v9 = v5 + 1;
    }
    if (v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = (void *)*v9;
  }

  while (*v9);
  if (v6 == v4 || v6[4] > a2) {
LABEL_12:
  }
    uint64_t v6 = (void *)(a1 + 272);
  BOOL v10 = v6 != v4;
  sub_100242FAC((uint64_t)v12);
  return v10;
}

uint64_t sub_100497A10(uint64_t a1, unint64_t a2, int a3, int a4)
{
  v19[1] = 0LL;
  unint64_t v20 = a2;
  v19[0] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 40);
  BOOL v10 = *(void **)(a1 + 224);
  BOOL v9 = (void *)(a1 + 224);
  BOOL v8 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  int v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      BOOL v14 = v8;
    }
    else {
      BOOL v14 = v8 + 1;
    }
    if (v13) {
      int v11 = v8;
    }
    BOOL v8 = (void *)*v14;
  }

  while (*v14);
  if (v11 != v9 && v11[4] <= a2)
  {
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10089B0F8);
    }
    uint64_t v17 = sub_100496954((void *)qword_1008D61A0, a2);
    if (v17 && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(v17, (uint64_t)v18);
      sub_100684FD8();
    }
  }

  else
  {
LABEL_12:
    v18[0] = (uint64_t *)&v20;
    uint64_t v15 = sub_100029574((uint64_t **)v9 - 1, &v20, (uint64_t)&unk_1006C2518, v18);
    *((_DWORD *)v15 + 10) = a3;
    *((_DWORD *)v15 + 11) = a4;
  }

  return sub_100242FAC((uint64_t)v19);
}

void sub_100497B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100497B94(uint64_t a1, unint64_t a2, int a3, int a4)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, a1 + 40);
  if (!a2)
  {
LABEL_20:
    uint64_t v15 = 0LL;
    goto LABEL_21;
  }

  BOOL v10 = *(void **)(a1 + 224);
  BOOL v9 = (void *)(a1 + 224);
  BOOL v8 = v10;
  if (!v10) {
    goto LABEL_16;
  }
  int v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      BOOL v14 = v8;
    }
    else {
      BOOL v14 = v8 + 1;
    }
    if (v13) {
      int v11 = v8;
    }
    BOOL v8 = (void *)*v14;
  }

  while (*v14);
  if (v11 == v9 || v11[4] > a2 || *((_DWORD *)v11 + 10) != a3 || *((_DWORD *)v11 + 11) != a4)
  {
LABEL_16:
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10089B0F8);
    }
    uint64_t v16 = sub_100496954((void *)qword_1008D61A0, a2);
    if (v16)
    {
      uint64_t v17 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(v16, (uint64_t)__p);
        if (v21 >= 0) {
          unint64_t v19 = __p;
        }
        else {
          unint64_t v19 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446722;
        int v24 = v19;
        __int16 v25 = 1024;
        int v26 = a3;
        __int16 v27 = 1024;
        int v28 = a4;
        _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Invalid SessionProcessIdentifierMapping for session %{public}s with pid %d, pidVersion %d",  buf,  0x18u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    goto LABEL_20;
  }

  uint64_t v15 = 1LL;
LABEL_21:
  sub_100242FAC((uint64_t)v22);
  return v15;
}

void sub_100497D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

unint64_t sub_100497D78(uint64_t a1, unint64_t a2)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 40);
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 224);
    uint64_t v5 = (uint64_t *)(a1 + 224);
    uint64_t v4 = v6;
    if (!v6) {
      goto LABEL_13;
    }
    unint64_t v7 = v5;
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        BOOL v10 = v4;
      }
      else {
        BOOL v10 = v4 + 1;
      }
      if (v9) {
        unint64_t v7 = v4;
      }
      uint64_t v4 = (void *)*v10;
    }

    while (*v10);
    if (v7 != v5 && v7[4] <= a2)
    {
      sub_1001FDBCC((uint64_t **)v5 - 1, v7);
      operator delete(v7);
      a2 = 1LL;
    }

    else
    {
LABEL_13:
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_10089B0F8);
      }
      uint64_t v11 = sub_100496954((void *)qword_1008D61A0, a2);
      if (v11 && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(v11, (uint64_t)v13);
        sub_100685020();
      }

      a2 = 0LL;
    }
  }

  sub_100242FAC((uint64_t)v14);
  return a2;
}

void sub_100497EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100497EE8(uint64_t a1, unint64_t a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 40);
  if (a2)
  {
    uint64_t v4 = *(void **)(a1 + 272);
    if (!v4) {
      goto LABEL_13;
    }
    uint64_t v5 = (void *)(a1 + 272);
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unint64_t v8 = v4;
      }
      else {
        unint64_t v8 = v4 + 1;
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = (void *)*v8;
    }

    while (*v8);
    if (v5 != (void *)(a1 + 272) && v5[4] <= a2)
    {
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_10089B0F8);
      }
      uint64_t v10 = sub_100496954((void *)qword_1008D61A0, a2);
      if (v10 && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(v10, (uint64_t)v11);
        sub_100685068();
      }
    }

    else
    {
LABEL_13:
      v11[0] = a2;
      sub_1002555B0((uint64_t **)(a1 + 264), (unint64_t *)v11, v11);
    }
  }

  return sub_100242FAC((uint64_t)v12);
}

void sub_100498028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10049804C(uint64_t a1, unint64_t a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 40);
  if (a2)
  {
    uint64_t v4 = *(void **)(a1 + 272);
    if (v4)
    {
      uint64_t v5 = (uint64_t **)(a1 + 264);
      unint64_t v6 = (uint64_t *)(a1 + 272);
      BOOL v7 = (uint64_t *)(a1 + 272);
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          uint64_t v10 = v4;
        }
        else {
          uint64_t v10 = v4 + 1;
        }
        if (v9) {
          BOOL v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }

      while (*v10);
      if (v7 != v6 && v7[4] <= a2)
      {
        sub_1001FDBCC(v5, v7);
        operator delete(v7);
      }
    }
  }

  return sub_100242FAC((uint64_t)v12);
}

uint64_t sub_1004980E4(uint64_t a1, unint64_t a2, int a3)
{
  v12[1] = 0LL;
  unint64_t v13 = a2;
  v12[0] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 40);
  if (a2)
  {
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10089B0F8);
    }
    uint64_t v6 = sub_100496954((void *)qword_1008D61A0, a2);
    if (v6)
    {
      BOOL v7 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(v6, (uint64_t)__p);
        if (v11 >= 0) {
          unint64_t v8 = __p;
        }
        else {
          unint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = a3;
        __int16 v15 = 2048;
        unint64_t v16 = a2;
        __int16 v17 = 2082;
        __int16 v18 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Local device event mask %x for handle : %p \t for session %{public}s",  buf,  0x1Cu);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }

      *(void *)buf = &v13;
      *((_DWORD *)sub_1004510C8((uint64_t **)(a1 + 240), &v13, (uint64_t)&unk_1006C2518, (void **)buf) + 10) = a3;
    }
  }

  return sub_100242FAC((uint64_t)v12);
}

void sub_10049826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_10049828C(uint64_t a1, unint64_t a2)
{
  v13[1] = 0LL;
  unint64_t v14 = a2;
  v13[0] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 40);
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_1006850B0();
    }
    goto LABEL_19;
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089B0F8);
  }
  if (!sub_100496954((void *)qword_1008D61A0, a2)) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void **)(a1 + 248);
  uint64_t v5 = (void *)(a1 + 248);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_19;
  }
  BOOL v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      BOOL v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }

  while (*v10);
  if (v7 == v5 || v7[4] > a2)
  {
LABEL_19:
    uint64_t v11 = 0LL;
    goto LABEL_20;
  }

  __int16 v15 = &v14;
  uint64_t v11 = *((unsigned int *)sub_1004510C8((uint64_t **)v5 - 1, &v14, (uint64_t)&unk_1006C2518, &v15) + 10);
LABEL_20:
  sub_100242FAC((uint64_t)v13);
  return v11;
}

void sub_1004983A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1004983C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 112) = a2;
  return result;
}

void sub_1004983C8(uint64_t a1)
{
  id v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------ Session Manager ------------------",  buf,  2u);
    id v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int16 *)(a1 + 106);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: Session count (lifetime): %d",  buf,  8u);
    id v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Current sessions:", buf, 2u);
  }

  uint64_t v4 = *(void **)(a1 + 120);
  if (v4 != (void *)(a1 + 128))
  {
    do
    {
      sub_100494E80(v4[7]);
      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          uint64_t v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }

        while (!v7);
      }

      uint64_t v4 = v6;
    }

    while (v6 != (void *)(a1 + 128));
  }

  char v38 = 0;
  uint64_t v8 = sub_1002E6E00();
  sub_10002418C(buf, "BTSessionManager");
  sub_10002418C(__p, "StateDumpHandleMapLogging");
  int v9 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v8 + 72LL))(v8, buf, __p, &v38);
  if (v38) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if ((v41[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v10) {
      return;
    }
  }

  else if (!v10)
  {
    return;
  }

  uint64_t v11 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump: External handle map:", buf, 2u);
    uint64_t v11 = (os_log_s *)qword_1008F7578;
  }

  unint64_t v12 = *(void **)(a1 + 144);
  if (v12 != (void *)(a1 + 152))
  {
    do
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = v12[4];
        uint64_t v14 = v12[5];
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v13;
        __int16 v40 = 2048;
        *(void *)__int16 v41 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %p", buf, 0x16u);
        uint64_t v11 = (os_log_s *)qword_1008F7578;
      }

      __int16 v15 = (void *)v12[1];
      if (v15)
      {
        do
        {
          unint64_t v16 = v15;
          __int16 v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          unint64_t v16 = (void *)v12[2];
          BOOL v7 = *v16 == (void)v12;
          unint64_t v12 = v16;
        }

        while (!v7);
      }

      unint64_t v12 = v16;
    }

    while (v16 != (void *)(a1 + 152));
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump: Handle identifier map:", buf, 2u);
    uint64_t v11 = (os_log_s *)qword_1008F7578;
  }

  __int16 v17 = *(void **)(a1 + 192);
  if (v17 != (void *)(a1 + 200))
  {
    do
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = v17[4];
        int v19 = *((_DWORD *)v17 + 10);
        int v20 = *((_DWORD *)v17 + 11);
        *(_DWORD *)buf = 134218496;
        *(void *)&uint8_t buf[4] = v18;
        __int16 v40 = 1024;
        *(_DWORD *)__int16 v41 = v19;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = v20;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %d, %u", buf, 0x18u);
        uint64_t v11 = (os_log_s *)qword_1008F7578;
      }

      char v21 = (void *)v17[1];
      if (v21)
      {
        do
        {
          int v22 = v21;
          char v21 = (void *)*v21;
        }

        while (v21);
      }

      else
      {
        do
        {
          int v22 = (void *)v17[2];
          BOOL v7 = *v22 == (void)v17;
          __int16 v17 = v22;
        }

        while (!v7);
      }

      __int16 v17 = v22;
    }

    while (v22 != (void *)(a1 + 200));
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "statedump: Session-Process identifier map:",  buf,  2u);
    uint64_t v11 = (os_log_s *)qword_1008F7578;
  }

  __int16 v23 = *(void **)(a1 + 216);
  if (v23 != (void *)(a1 + 224))
  {
    do
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = v23[4];
        int v25 = *((_DWORD *)v23 + 10);
        int v26 = *((_DWORD *)v23 + 11);
        *(_DWORD *)buf = 134218496;
        *(void *)&uint8_t buf[4] = v24;
        __int16 v40 = 1024;
        *(_DWORD *)__int16 v41 = v25;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = v26;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %d, %u", buf, 0x18u);
        uint64_t v11 = (os_log_s *)qword_1008F7578;
      }

      __int16 v27 = (void *)v23[1];
      if (v27)
      {
        do
        {
          int v28 = v27;
          __int16 v27 = (void *)*v27;
        }

        while (v27);
      }

      else
      {
        do
        {
          int v28 = (void *)v23[2];
          BOOL v7 = *v28 == (void)v23;
          __int16 v23 = v28;
        }

        while (!v7);
      }

      __int16 v23 = v28;
    }

    while (v28 != (void *)(a1 + 224));
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "statedump: Handle-Masked Local device events map:",  buf,  2u);
  }

  char v29 = *(void **)(a1 + 240);
  uint64_t v30 = (void *)(a1 + 248);
  if (v29 != (void *)(a1 + 248))
  {
    unint64_t v31 = (os_log_s *)qword_1008F7578;
    do
    {
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v32 = v29[4];
        int v33 = *((_DWORD *)v29 + 10);
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v32;
        __int16 v40 = 1024;
        *(_DWORD *)__int16 v41 = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %u", buf, 0x12u);
        unint64_t v31 = (os_log_s *)qword_1008F7578;
      }

      int v34 = (void *)v29[1];
      if (v34)
      {
        do
        {
          __int16 v35 = v34;
          int v34 = (void *)*v34;
        }

        while (v34);
      }

      else
      {
        do
        {
          __int16 v35 = (void *)v29[2];
          BOOL v7 = *v35 == (void)v29;
          char v29 = v35;
        }

        while (!v7);
      }

      char v29 = v35;
    }

    while (v35 != v30);
  }

void sub_10049899C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004989D8(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495000((uint64_t)v1);
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_100498A08(_Unwind_Exception *a1)
{
}

void sub_100498A1C(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_100498A4C(_Unwind_Exception *a1)
{
}

void sub_100498A60(id a1)
{
  uint64_t v1 = operator new(0x88uLL);
  v1[2] = 0LL;
  void *v1 = @"com.apple.MobileAsset.MobileBluetoothAssets";
  v1[1] = v1 + 2;
  v1[3] = 0LL;
  *((_DWORD *)v1 + 8) = 0;
  v1[5] = 0LL;
  v1[6] = 0LL;
  v1[7] = 0LL;
  sub_100242DC4(v1 + 8);
  *((_BYTE *)v1 + 128) = 0;
  qword_1008D92B8 = (uint64_t)v1;
}

void sub_100498AD0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 48) = v6;
    operator delete(v6);
  }

  sub_1002948EC(v2, *(void **)(v1 + 16));

  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void sub_100498B0C(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 18) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 108) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 28) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 58) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_100498C14(_Unwind_Exception *a1)
{
}

void sub_100498C28(id a1)
{
  uint64_t v1 = operator new(0x68uLL);
  sub_10049435C();
  off_1008D9130 = v1;
}

void sub_100498C58(_Unwind_Exception *a1)
{
}

void sub_100498C6C(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_100498C9C(_Unwind_Exception *a1)
{
}

void sub_100498CB0(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10040749C((uint64_t)v1);
  off_1008D5EF8 = v1;
}

void sub_100498CE0(_Unwind_Exception *a1)
{
}

void sub_100498CF4(id a1)
{
  uint64_t v1 = operator new(0x198uLL);
  sub_100534AB0();
  off_1008D67B0 = v1;
}

void sub_100498D24(_Unwind_Exception *a1)
{
}

void sub_100498D38(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_100498D68(_Unwind_Exception *a1)
{
}

void sub_100498D7C(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_1003C97E4((uint64_t)v1);
  off_1008D67E0 = v1;
}

void sub_100498DAC(_Unwind_Exception *a1)
{
}

void sub_100498DC0(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_100498DF0(_Unwind_Exception *a1)
{
}

void sub_100498E04(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_100451734((uint64_t)v1);
  off_1008D63D0 = v1;
}

void sub_100498E34(_Unwind_Exception *a1)
{
}

void sub_100498E48(id a1)
{
  uint64_t v1 = operator new(0x48uLL);
  sub_10054A778((uint64_t)v1);
  off_1008D90F0 = v1;
}

void sub_100498E78(_Unwind_Exception *a1)
{
}

void sub_100498E8C(id a1)
{
  qword_1008D9160 = (uint64_t)operator new(1uLL);
}

void sub_100498EAC(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003ADFF0((uint64_t)v1);
  off_1008D5F38 = v1;
}

void sub_100498EDC(_Unwind_Exception *a1)
{
}

void sub_100498EF0(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  sub_10041A094(v1);
  qword_1008D95F8 = (uint64_t)v1;
}

void sub_100498F20(_Unwind_Exception *a1)
{
}

void sub_100498F34(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_100498F64(_Unwind_Exception *a1)
{
}

void sub_100498F78(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_100498FA8(_Unwind_Exception *a1)
{
}

void sub_100498FBC(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_100498FEC(_Unwind_Exception *a1)
{
}

void sub_100499000(id a1)
{
  uint64_t v1 = operator new(0x42C0uLL);
  sub_10056DFB4();
  off_1008D6280 = v1;
}

void sub_100499030(_Unwind_Exception *a1)
{
}

void sub_100499044(id a1)
{
  uint64_t v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_100499074(_Unwind_Exception *a1)
{
}

void sub_100499088(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100380B10();
  qword_1008D9260 = (uint64_t)v1;
}

void sub_1004990B8(_Unwind_Exception *a1)
{
}

void sub_1004990CC(id a1)
{
  uint64_t v1 = operator new(0x1A0uLL);
  sub_1002769A4();
  off_1008D67C0 = v1;
}

void sub_1004990FC(_Unwind_Exception *a1)
{
}

void sub_100499110(id a1)
{
  uint64_t v1 = operator new(0xE8uLL);
  sub_100243588((uint64_t)v1);
  qword_1008D9150 = (uint64_t)v1;
}

void sub_100499140(_Unwind_Exception *a1)
{
}

void sub_100499154(id a1)
{
  uint64_t v1 = operator new(0x70uLL);
  sub_1003639FC((uint64_t)v1);
  qword_1008D9048 = (uint64_t)v1;
}

void sub_100499184(_Unwind_Exception *a1)
{
}

void sub_100499198(id a1)
{
  uint64_t v1 = operator new(0x48uLL);
  sub_100502AF0((uint64_t)v1);
  qword_1008D6610 = (uint64_t)v1;
}

void sub_1004991C8(_Unwind_Exception *a1)
{
}

void sub_1004991DC(id a1)
{
  uint64_t v1 = operator new(0xF0uLL);
  sub_1004F66A8((uint64_t)v1);
  off_1008D93D8 = v1;
}

void sub_10049920C(_Unwind_Exception *a1)
{
}

void sub_100499220(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10057DEC8();
  off_1008D9140 = v1;
}

void sub_100499250(_Unwind_Exception *a1)
{
}

void sub_100499264(id a1)
{
  uint64_t v1 = operator new(0x4A8uLL);
  sub_100499870();
  off_1008D60E8 = v1;
}

void sub_100499294(_Unwind_Exception *a1)
{
}

void sub_1004992A8(id a1)
{
  uint64_t v1 = operator new(0x50uLL);
  sub_100411DB0((uint64_t)v1);
  qword_1008D9270 = (uint64_t)v1;
}

void sub_1004992D8(_Unwind_Exception *a1)
{
}

void sub_1004992EC(id a1)
{
  uint64_t v1 = operator new(0xF0uLL);
  sub_1001F78E8((uint64_t)v1);
  qword_1008D6790 = (uint64_t)v1;
}

void sub_10049931C(_Unwind_Exception *a1)
{
}

void sub_100499330(id a1)
{
  uint64_t v1 = operator new(0x18uLL);
  *(void *)uint64_t v1 = 0LL;
  v1[2] = 0;
  *((_BYTE *)v1 + 12) = 0;
  v1[4] = 0;
  qword_1008D9058 = (uint64_t)v1;
}

void sub_100499360(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10040D0A0((uint64_t)v1);
  off_1008D6780 = v1;
}

void sub_100499390(_Unwind_Exception *a1)
{
}

void sub_1004993A4(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003AA490((uint64_t)v1);
  off_1008D96F8 = v1;
}

void sub_1004993D4(_Unwind_Exception *a1)
{
}

void sub_1004993E8(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100256C70();
  qword_1008D6168 = (uint64_t)v1;
}

void sub_100499418(_Unwind_Exception *a1)
{
}

uint64_t *sub_10049942C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v9 = 0LL;
  uint64_t v6 = (uint64_t **)sub_10023E6A4((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1004994CC((uint64_t)a1, a4, v8);
    sub_100029630(a1, v9, v6, v8[0]);
    return v8[0];
  }

  return result;
}

_BYTE *sub_1004994CC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = a3 + 1;
  BOOL v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_100024238(result, *(void **)v9, *((void *)v9 + 1));
  }

  else
  {
    __int128 v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t result = v10;
  }

  *((void *)v7 + 7) = 0LL;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100499560(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10023E740(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10049957C(uint64_t a1)
{
  *(void *)a1 = off_10089B568;
  *(void *)(a1 + 8) = off_10089B730;
  *(void *)(a1 + 16) = off_10089B760;
  *(void *)(a1 + 24) = off_10089B7A0;
  *(void *)(a1 + 32) = &off_10089B830;
  *(void *)(a1 + sub_100242E28(v1 + 40) = &off_10089B848;
  *(void *)(a1 + 48) = &off_10089B860;
  *(void *)(a1 + 56) = &off_10089B878;
  *(void *)(a1 + 64) = &off_10089B890;
  *(void *)(a1 + 72) = off_10089B8A8;
  *(void *)(a1 + 80) = &off_10089B8D0;
  *(void *)(a1 + 88) = off_10089B8E8;
  *(void *)(a1 + 96) = &off_10089B908;
  *(void *)(a1 + 104) = &off_10089B920;
  *(void *)(a1 + 112) = &off_10089B938;
  *(void *)(a1 + 120) = &off_10089B950;
  *(void *)(a1 + 128) = off_10089B968;
  *(void *)(a1 + 136) = off_10089B9B8;
  *(void *)(a1 + 144) = off_10089B9E8;
  *(_BYTE *)(a1 + 160) = 0;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  uint64_t v2 = (void *)(a1 + 216);
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 224) = 0LL;
  sub_100242DC4(a1 + 264);
  *(_WORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 347) = 0;
  *(_OWORD *)(a1 + 331) = 0u;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 360) = 0x404E000000000000LL;
  *(_BYTE *)(a1 + 368) = 0;
  *(void *)(a1 + 810) = 0LL;
  *(void *)(a1 + 824) = 0LL;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_DWORD *)(a1 + 848) = 3;
  *(_BYTE *)(a1 + 853) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 992) = 0;
  *(void *)(a1 + 1000) = 0LL;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(void *)(a1 + 1080) = 0LL;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(void *)(a1 + 896) = 0LL;
  *(void *)(a1 + 1088) = a1 + 1096;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(void *)(a1 + 1120) = a1 + 1128;
  *(void *)(a1 + 1152) = 0LL;
  *(void *)(a1 + 1184) = 0LL;
  *(_OWORD *)(a1 + 1168) = 0u;
  uint64_t v3 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_DEFAULT, -1);
  *(void *)(a1 + 2sub_100242E28(v1 + 40) = dispatch_queue_create("com.apple.AudioLinkManagerSerialQueue", v3);
  uint64_t v4 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INTERACTIVE, -1);
  *(void *)(a1 + 248) = dispatch_queue_create("com.apple.AudioLinkManagerLowLatencyQueue", v4);
  mach_timebase_info((mach_timebase_info_t)(a1 + 256));
  uint64_t v5 = 0LL;
  *(_WORD *)(a1 + 982) = 0;
  *(void *)(a1 + 984) = 0LL;
  *(_WORD *)(a1 + 852) = 1;
  *(_WORD *)(a1 + 904) = 1;
  *(_DWORD *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 1060) = 0;
  *(void *)(a1 + 1044) = 0LL;
  *(void *)(a1 + 1052) = 0LL;
  *(void *)(a1 + 1036) = 0LL;
  do
  {
    *(_WORD *)(a1 + v5 + 916) = -25444;
    v5 += 6LL;
  }

  while (v5 != 18);
  *(void *)(a1 + 184) = 0LL;
  *(_BYTE *)(a1 + 934) = 0;
  uint64_t v6 = operator new(0x110uLL);
  sub_100035270((uint64_t)v6);
  *uint64_t v2 = v6;
  BOOL v7 = operator new(2uLL);
  sub_100026EC0(v7);
  *(void *)(a1 + 224) = v7;
  uint64_t v8 = *(void **)(a1 + 352);
  *(void *)(a1 + 352) = 0LL;

  return a1;
}

void sub_1004997C0(_Unwind_Exception *a1)
{
  __int128 v10 = (void **)(v1 + 1000);

  sub_10023BF24(v5, *(void **)(v1 + 1128));
  sub_10023BF24(v4, *(void **)(v1 + 1096));
  uint64_t v11 = *v10;
  if (*v10)
  {
    *(void *)(v1 + 1008) = v11;
    operator delete(v11);
  }

  sub_100032BD4(v1 + 880);
  sub_100242E28(v3);
  sub_10023BF24(v2, *v7);
  _Unwind_Resume(a1);
}

void sub_100499874(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089BC30);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 8);
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100499954;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_async(v2, block);
  uint64_t v3 = sub_1002E6E9C();
  sub_1002D0870(v3, a1);
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_10089BCF0);
  }
  sub_100447B0C((uint64_t)off_1008D6190, a1 + 128);
}

uint64_t sub_100499954(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_10089BC50);
  }
  sub_1004B55D0((uint64_t)off_1008D9028 + 328, v1 + 72);
  uint64_t v2 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 144LL))(v2) & 1) != 0
    || (uint64_t v3 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v3 + 152LL))(v3)))
  {
    uint64_t v4 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v22[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Current platform supports enhanced diversity, subscribing to device orientation update",  (uint8_t *)v22,  2u);
    }

    uint64_t v5 = sub_1002E8D54();
    sub_1004B5894(v5 + 848, v1 + 64);
    uint64_t v6 = sub_1002E8D54();
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 248LL))(v6);
    *(_DWORD *)(v1 + 856) = v7;
    uint64_t v8 = (os_log_s *)qword_1008F7570;
    if (v7)
    {
      int v9 = v7;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        v22[0] = 67109120;
        v22[1] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Device orientation initialized to %u",  (uint8_t *)v22,  8u);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
    {
      sub_100685108();
    }
  }

  uint64_t v10 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v10 + 792LL))(v10, 0LL))
  {
    uint64_t v11 = sub_1002E8D54();
    sub_1004B5B84(v11 + 888, v1 + 80);
    uint64_t v12 = sub_1002E8D54();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 216LL))(v12, *(void *)(v1 + 216) + 2LL);
  }

  uint64_t v13 = sub_1002E8D54();
  sub_1004B5E74(v13 + 968, v1 + 104);
  uint64_t v14 = sub_1002E8D54();
  sub_1004922F8(v14 + 1168, v1 + 120);
  uint64_t v15 = sub_1002E8D54();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 200LL))(v15, *(void *)(v1 + 216) + 4LL);
  uint64_t v16 = sub_1002E8D54();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 224LL))(v16, v1 + 904);
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  sub_1004B6164(qword_1008D6450 + 432, v1 + 24);
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_10089BC90);
  }
  sub_1004229CC(off_1008D60C8, v1 + 40);
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089BCB0);
  }
  sub_1003B423C(qword_1008D61A0 + 8, v1 + 88);
  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_1008D6170 != -1) {
      dispatch_once(&qword_1008D6170, &stru_10089BCD0);
    }
    sub_100256C74(qword_1008D6168, v1 + 144);
  }

  if (*(_BYTE *)(v1 + 328))
  {
    sub_100499D54(v1);
    sub_10049A034(v1);
    uint64_t v17 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v17 + 792LL))(v17, 1LL))
    {
      uint64_t v18 = sub_1002E8D54();
      sub_1004B6428(v18 + 928, v1 + 96);
      uint64_t v19 = sub_1002E8D54();
      (*(void (**)(uint64_t))(*(void *)v19 + 232LL))(v19);
      uint64_t v20 = sub_1002E8D54();
      sub_1004B6718(v20 + 1008, v1 + 112);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
  {
    sub_1006850DC();
  }

  *(_BYTE *)(v1 + 1144) = 0;
  *(void *)(v1 + 1112) = 0LL;
  *(void *)(v1 + 1160) = 0xFFFFFFFF00000000LL;
  std::string::assign((std::string *)(v1 + 1168), "");
  notify_register_check("com.apple.bluetooth.GuestConnected", (int *)(v1 + 1164));
  std::string::assign((std::string *)(v1 + 1064), "Off");
  *(_DWORD *)(v1 + 1032) = -1;
  return notify_register_check("com.apple.bluetooth.SmartRoutingDisconnectReason", (int *)(v1 + 1032));
}

void sub_100499D54(uint64_t a1)
{
  uint64_t v2 = sub_1002E6BF0();
  uint64_t v3 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 384LL))(v3))
  {
    uint64_t v4 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 320LL))(v4))
    {
      uint64_t v5 = sub_1002E6E00();
      (*(void (**)(uint64_t))(*(void *)v5 + 328LL))(v5);
    }

    goto LABEL_28;
  }

  sub_1004AFC34();
  uint64_t v6 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 424LL))(v6))
  {
    uint64_t v7 = sub_1002E6E00();
    sub_10002418C(buf, "MRC");
    sub_10002418C(__p, "DisableMRC");
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v7 + 72LL))( v7,  buf,  __p,  a1 + 992);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(*(void **)buf);
    }
    if (*(_BYTE *)(a1 + 992))
    {
      int v9 = (os_log_s *)qword_1008F7570;
      if (!os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      *(_WORD *)buf = 0;
      uint64_t v10 = "Global MRC disabled for this platform";
    }

    else
    {
      int v9 = (os_log_s *)qword_1008F7570;
      if (!os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      *(_WORD *)buf = 0;
      uint64_t v10 = "Global MRC enabled for this platform";
    }

    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
  }

void sub_10049A000( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10049A034(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 331))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEBUG)) {
      sub_100685134();
    }
  }

  else
  {
    unsigned __int8 v50 = 2;
    int v49 = 5;
    v47[0] = 0LL;
    v47[1] = 0LL;
    uint64_t v48 = 0LL;
    v45[0] = 0LL;
    v45[1] = 0LL;
    uint64_t v46 = 0LL;
    uint64_t v2 = sub_1002E6E00();
    sub_10002418C(buf, "LinkAdaptiveBitrateAAC");
    sub_10002418C(__p, "configs");
    (*(void (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v2 + 88LL))(v2, buf, __p, &v50);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(*(void **)buf);
    }
    char v3 = v50;
    if (v50 >= 2u) {
      char v3 = 2;
    }
    unsigned __int8 v50 = v3;
    uint64_t v4 = sub_1002E6E00();
    sub_10002418C(buf, "LinkAdaptiveBitrateAAC");
    sub_10002418C(__p, "bitrateCount");
    (*(void (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v4 + 88LL))(v4, buf, __p, &v49);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "LinkAdaptiveBitrateAAC");
    sub_10002418C(__p, "thresholds");
    (*(void (**)(uint64_t, _BYTE *, void **, void **))(*(void *)v5 + 56LL))(v5, buf, __p, v47);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v6 = (void *)HIBYTE(v48);
    int v7 = SHIBYTE(v48);
    if (v48 < 0) {
      uint64_t v6 = v47[1];
    }
    if (v6)
    {
      uint64_t v8 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (void **)v47[0];
        if (v7 >= 0) {
          int v9 = v47;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Setting custom AAC Link Adaptive bitrate thresholds based on defaults write: %s",  buf,  0xCu);
      }
    }

    uint64_t v10 = sub_1002E6E00();
    sub_10002418C(buf, "LinkAdaptiveBitrateAAC");
    sub_10002418C(__p, "rates");
    (*(void (**)(uint64_t, _BYTE *, void **, void **))(*(void *)v10 + 56LL))(v10, buf, __p, v45);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v11 = (void *)HIBYTE(v46);
    int v12 = SHIBYTE(v46);
    if (v46 < 0) {
      uint64_t v11 = v45[1];
    }
    if (v11)
    {
      uint64_t v13 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (void **)v45[0];
        if (v12 >= 0) {
          uint64_t v14 = v45;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Setting custom AAC Link Adaptive bitrates based on defaults write: %s",  buf,  0xCu);
      }
    }

    *(void *)(a1 + 1008) = *(void *)(a1 + 1000);
    if (v50)
    {
      unint64_t v15 = 0LL;
      uint64_t v16 = "\n#2F7ddd";
      do
      {
        char v17 = operator new(0x18uLL);
        uint64_t v18 = v17;
        if (v15) {
          int v19 = 33023;
        }
        else {
          int v19 = 2;
        }
        int v20 = v49;
        *(_BYTE *)char v17 = v49;
        v17[1] = v19;
        if (v20 < 0) {
          size_t v21 = -1LL;
        }
        else {
          size_t v21 = 2LL * v20;
        }
        *((void *)v18 + 2) = operator new[](v21);
        *((void *)v18 + 1) = operator new[](v20 - 1LL);
        int v22 = (void *)HIBYTE(v48);
        if (v48 < 0) {
          int v22 = v47[1];
        }
        if (!v22)
        {
          __int16 v23 = (void *)HIBYTE(v46);
          if (v46 < 0) {
            __int16 v23 = v45[1];
          }
          if (!v23)
          {
            char v37 = (os_log_s *)qword_1008F7570;
            if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Setting default AAC Link Adaptive rates",  buf,  2u);
              int v20 = v49;
            }

            if (v20 >= 1)
            {
              memcpy(*((void **)v18 + 2), (char *)&unk_1006C359C + 10 * v15, 2LL * v20);
              if (v20 != 1)
              {
                uint64_t v38 = 0LL;
                do
                {
                  *(_BYTE *)(*((void *)v18 + 1) + v38) = v16[v38];
                  ++v38;
                }

                while (v38 < v49 - 1LL);
              }
            }
          }
        }

        uint64_t v24 = *(void **)(a1 + 1008);
        unint64_t v25 = *(void *)(a1 + 1016);
        if ((unint64_t)v24 >= v25)
        {
          uint64_t v27 = *(void *)(a1 + 1000);
          uint64_t v28 = ((uint64_t)v24 - v27) >> 3;
          uint64_t v29 = v25 - v27;
          uint64_t v30 = v29 >> 2;
          else {
            unint64_t v31 = v30;
          }
          if (v31) {
            uint64_t v32 = (char *)sub_100008BA0(a1 + 1016, v31);
          }
          else {
            uint64_t v32 = 0LL;
          }
          int v33 = &v32[8 * v28];
          *(void *)int v33 = v18;
          int v26 = v33 + 8;
          int v34 = *(char **)(a1 + 1008);
          __int16 v35 = *(char **)(a1 + 1000);
          if (v34 != v35)
          {
            do
            {
              uint64_t v36 = *((void *)v34 - 1);
              v34 -= 8;
              *((void *)v33 - 1) = v36;
              v33 -= 8;
            }

            while (v34 != v35);
            int v34 = *(char **)(a1 + 1000);
          }

          *(void *)(a1 + 1000) = v33;
          *(void *)(a1 + 1008) = v26;
          *(void *)(a1 + 1016) = &v32[8 * v31];
          if (v34) {
            operator delete(v34);
          }
        }

        else
        {
          *uint64_t v24 = v18;
          int v26 = v24 + 1;
        }

        *(void *)(a1 + 1008) = v26;
        ++v15;
        v16 += 4;
      }

      while (v15 < v50);
    }

    if (SHIBYTE(v48) < 0)
    {
      sub_100024238(__dst, v47[0], (unint64_t)v47[1]);
    }

    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v47;
      uint64_t v42 = v48;
    }

    if (SHIBYTE(v46) < 0)
    {
      sub_100024238(v39, v45[0], (unint64_t)v45[1]);
    }

    else
    {
      *(_OWORD *)__int16 v39 = *(_OWORD *)v45;
      uint64_t v40 = v46;
    }

    sub_1004AD074(a1, (uint64_t)__dst, (const char *)v39, v50);
    if (SHIBYTE(v40) < 0) {
      operator delete(v39[0]);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(__dst[0]);
    }
    sub_1004AD390(a1);
    *(void *)(a1 + 1024) = 0x100007F00A000F4LL;
    *(_BYTE *)(a1 + 331) = 1;
    if (SHIBYTE(v46) < 0) {
      operator delete(v45[0]);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete(v47[0]);
    }
  }

void sub_10049A65C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void sub_10049A71C(unint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089BC30);
  }
  sub_100009168((uint64_t)off_1008D60A8 + 80, a1 + 8);
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10049A7FC;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_async(v2, block);
  uint64_t v3 = sub_1002E6E9C();
  sub_1002D08D4(v3, a1);
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_10089BCF0);
  }
  sub_100447B9C((uint64_t)off_1008D6190, a1 + 128);
}

uint64_t sub_10049A7FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 208))
  {
    uint64_t v2 = (void *)(v1 + 192);
    uint64_t v3 = *(void **)(v1 + 192);
    uint64_t v4 = (void *)(v1 + 200);
    if (v3 == (void *)(v1 + 200)) {
      goto LABEL_14;
    }
    do
    {
      unint64_t v5 = v3[4];
      if (*(void *)v3[5]) {
        sub_10049ABA4(v1, v3[4]);
      }
      *(void *)&__int128 v30 = v5;
      sub_10020166C(v1 + 192, (unint64_t *)&v30);
      if (qword_1008D6778 != -1) {
        dispatch_once(&qword_1008D6778, &stru_10089BD10);
      }
      sub_100200A5C(qword_1008D6770, v5);
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          int v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }

        while (!v8);
      }

      uint64_t v3 = v7;
    }

    while (v7 != v4);
    if (*(void *)(v1 + 208))
    {
LABEL_14:
      int v9 = (void *)*v2;
      if ((void *)*v2 != v4)
      {
        do
        {
          unint64_t v10 = v9[4];
          if (*(void *)(v9[5] + 8LL)) {
            sub_10049B3BC((uint64_t *)v1, v9[4]);
          }
          *(void *)&__int128 v30 = v10;
          sub_10020166C(v1 + 192, (unint64_t *)&v30);
          if (qword_1008D6778 != -1) {
            dispatch_once(&qword_1008D6778, &stru_10089BD10);
          }
          sub_100200A5C(qword_1008D6770, v10);
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              int v12 = v11;
              uint64_t v11 = (void *)*v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              int v12 = (void *)v9[2];
              BOOL v8 = *v12 == (void)v9;
              int v9 = v12;
            }

            while (!v8);
          }

          int v9 = v12;
        }

        while (v12 != v4);
      }
    }
  }

  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_10089BC50);
  }
  sub_100009168((uint64_t)off_1008D9028 + 328, v1 + 72);
  uint64_t v13 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v13 + 144LL))(v13) & 1) != 0
    || (uint64_t v14 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v14 + 152LL))(v14)))
  {
    uint64_t v15 = sub_1002E8D54();
    sub_10024E060(v15 + 848, v1 + 64);
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089BCB0);
  }
  sub_100009168(qword_1008D61A0 + 8, v1 + 88);
  __int128 v30 = 0uLL;
  sub_1002102FC(v1 + 880, &v30);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    char v17 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = sub_1002E8D54();
  sub_10024E060(v19 + 968, v1 + 104);
  uint64_t v20 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v20 + 792LL))(v20, 0LL))
  {
    uint64_t v21 = sub_1002E8D54();
    sub_10024E060(v21 + 888, v1 + 80);
  }

  uint64_t v22 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v22 + 792LL))(v22, 1LL))
  {
    uint64_t v23 = sub_1002E8D54();
    sub_10024E060(v23 + 928, v1 + 96);
    uint64_t v24 = sub_1002E8D54();
    sub_10024E060(v24 + 1008, v1 + 112);
  }

  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  sub_100009168(qword_1008D6450 + 432, v1 + 24);
  for (uint64_t i = *(void *)(v1 + 1000); i != *(void *)(v1 + 1008); i += 8LL)
  {
    int v26 = *(void **)i;
    uint64_t v27 = *(void **)(*(void *)i + 16LL);
    if (v27) {
      operator delete[](v27);
    }
    uint64_t v28 = (void *)v26[1];
    if (v28) {
      operator delete[](v28);
    }
    operator delete(v26);
  }

  *(_BYTE *)(v1 + 331) = 0;
  uint64_t result = notify_cancel(*(_DWORD *)(v1 + 1032));
  *(_DWORD *)(v1 + 1032) = -1;
  return result;
}

uint64_t sub_10049ABA4(uint64_t a1, unint64_t a2)
{
  unint64_t v44 = a2;
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 200);
    if (v3)
    {
      uint64_t v4 = (uint64_t **)(a1 + 192);
      uint64_t v5 = a1 + 200;
      do
      {
        unint64_t v6 = v3[4];
        BOOL v7 = v6 >= a2;
        if (v6 >= a2) {
          BOOL v8 = v3;
        }
        else {
          BOOL v8 = v3 + 1;
        }
        if (v7) {
          uint64_t v5 = (uint64_t)v3;
        }
        uint64_t v3 = (void *)*v8;
      }

      while (*v8);
      if (v5 != a1 + 200 && *(void *)(v5 + 32) <= a2)
      {
        *(void *)buf = &v44;
        if (!*(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5])
        {
LABEL_46:
          *(void *)buf = &v44;
          if (*(void *)(sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 16))
          {
            *(void *)buf = &v44;
            uint64_t v39 = *(void *)(sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 16);
            if (v39)
            {
              uint64_t v40 = (void *)sub_100328D20(v39);
              operator delete(v40);
            }

            *(void *)buf = &v44;
            *(void *)(sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 16) = 0LL;
          }

          *(void *)buf = &v44;
          if (*(void *)(sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 24))
          {
            *(void *)buf = &v44;
            __int16 v41 = *(void **)(sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 24);
            if (v41) {
              operator delete(v41);
            }
            *(void *)buf = &v44;
            *(void *)(sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 24) = 0LL;
          }

          goto LABEL_54;
        }

        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        *(void *)buf = &v44;
        *(CFAbsoluteTime *)(*(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 96LL) = Current;
        *(void *)buf = &v44;
        double v10 = *(double *)(*(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 96LL);
        *(void *)buf = &v44;
        double v11 = *(double *)(*(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 88LL);
        *(void *)buf = &v44;
        int v12 = sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        double v13 = v10 - v11;
        sub_1004A9FF8(*(void **)v12[5], (int)v13, 1, 0);
        sub_1002E6E9C();
        if (sub_1002CD6F0())
        {
          *(void *)buf = &v44;
          uint64_t v14 = *(void **)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5];
          *(void *)buf = &v44;
          uint64_t v15 = *(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5];
          unsigned int v16 = *(_DWORD *)(v15 + 408);
          if (v16) {
            int v17 = *(_DWORD *)(v15 + 404) / v16;
          }
          else {
            int v17 = 0;
          }
          sub_1004A1DC8(v14, v17);
        }

        sub_1002E6E9C();
        if (sub_1002CDD44()
          && (uint64_t v18 = sub_1002E6E00(), ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 528LL))(v18) & 1) == 0))
        {
          uint64_t v23 = qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_INFO))
          {
            *(void *)buf = &v44;
            uint64_t v24 = *(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5];
            unsigned int v25 = *(_DWORD *)(v24 + 400);
            if (v25) {
              float v26 = *(float *)(v24 + 396) / (float)v25;
            }
            else {
              float v26 = 0.0;
            }
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = (int)v13;
            *(_WORD *)&uint8_t buf[8] = 2048;
            *(double *)&buf[10] = v26;
            uint64_t v20 = "A2DP streaming duration is: %u seconds Average pacekt interval= %f";
            uint64_t v21 = (os_log_s *)v23;
            uint32_t v22 = 18;
            goto LABEL_28;
          }
        }

        else
        {
          uint64_t v19 = qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = (int)v13;
            uint64_t v20 = "A2DP streaming duration is: %u seconds";
            uint64_t v21 = (os_log_s *)v19;
            uint32_t v22 = 8;
LABEL_28:
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, v20, buf, v22);
          }
        }

        if (*(_BYTE *)(a1 + 905)) {
          int v27 = *(_DWORD *)(a1 + 840);
        }
        else {
          int v27 = 0;
        }
        *(void *)buf = &v44;
        *(_DWORD *)(*(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 440LL) = v27;
        sub_1004AA160(a1, (uint64_t)buf);
        uint64_t v45 = &v44;
        uint64_t v28 = *(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)&v45)[5];
        uint64_t v29 = v28 + 448;
        *(_OWORD *)uint64_t v29 = *(_OWORD *)buf;
        *(void *)(v29 + 16) = *(void *)&buf[16];
        *(void *)buf = &v44;
        __int128 v30 = sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        std::string::assign((std::string *)(*(void *)v30[5] + 168LL), "2.4G");
        *(void *)buf = &v44;
        *(_BYTE *)(*(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 192LL) = 0;
        if (*(_BYTE *)(v44 + 1373))
        {
          *(void *)buf = &v44;
          unint64_t v31 = sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
          std::string::assign((std::string *)(*(void *)v31[5] + 168LL), "5G");
        }

        *(void *)buf = &v44;
        if (*(_BYTE *)(sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 32))
        {
          *(void *)buf = &v44;
          *(_BYTE *)(*(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 192LL) = 1;
        }

        uint64_t v32 = sub_1002E8D94();
        *(void *)buf = &v44;
        int v33 = sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        (*(void (**)(uint64_t, void))(*(void *)v32 + 80LL))(v32, *(void *)v33[5]);
        *(void *)(a1 + 8sub_100242E28(v1 + 40) = 0LL;
        *(_OWORD *)(a1 + 824) = 0u;
        sub_1002E6E9C();
        if (sub_1002CD6F0())
        {
          *(void *)buf = &v44;
          if (*(_DWORD *)(*(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 108LL))
          {
            *(void *)buf = &v44;
            unsigned int v34 = *(_DWORD *)(*(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 104LL);
            *(void *)buf = &v44;
            uint64_t v35 = (float)((float)((float)v34
                                              / (float)*(unsigned int *)(*(void *)sub_100029574( v4,  &v44,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 108LL))
                                      * 100.0);
          }

          else
          {
            uint64_t v35 = 0LL;
          }

          uint64_t v36 = sub_1002E9074();
          (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)v36 + 16LL))( v36,  v13,  v35,  (100 - v35));
        }

        *(void *)buf = &v44;
        uint64_t v37 = *(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5];
        if (v37)
        {
          uint64_t v38 = (void *)sub_1004B6C34(v37);
          operator delete(v38);
        }

        *(void *)buf = &v44;
        *(void *)sub_100029574(v4, &v44, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] = 0LL;
        goto LABEL_46;
      }
    }
  }

void sub_10049B398( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10049B3BC(uint64_t *result, unint64_t a2)
{
  uint64_t v32 = a2;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = (void *)result[25];
    if (v3)
    {
      uint64_t v4 = (uint64_t **)(result + 24);
      uint64_t v5 = result + 25;
      do
      {
        unint64_t v6 = v3[4];
        BOOL v7 = v6 >= a2;
        if (v6 >= a2) {
          BOOL v8 = v3;
        }
        else {
          BOOL v8 = v3 + 1;
        }
        if (v7) {
          uint64_t v5 = v3;
        }
        uint64_t v3 = (void *)*v8;
      }

      while (*v8);
      if (v5 != result + 25 && v5[4] <= a2)
      {
        *(void *)buf = &v32;
        uint64_t result = sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        if (*(void *)(result[5] + 8))
        {
          uint64_t v9 = sub_1002E6E00();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8LL))(v9))
          {
            double v10 = (os_log_s *)qword_1008F7570;
            if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)buf = &v32;
              int v11 = *(_DWORD *)(sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                              + 100);
              int v12 = *((_DWORD *)v2 + 261);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v11;
              __int16 v34 = 1024;
              int v35 = v12;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "AudioQuality trigger %d, codec %u",  buf,  0xEu);
            }

            uint64_t v13 = sub_1002E6BF0();
            if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 328LL))(v13))
            {
              *(void *)buf = &v32;
              uint64_t v14 = sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
              if (*(_DWORD *)(v14[5] + 96))
              {
                int v15 = *((_DWORD *)v2 + 261);
              }
            }

            *(void *)buf = &v32;
            *(_DWORD *)(sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 100) = 0;
          }

          int v16 = *((_DWORD *)v2 + 58);
          *(void *)buf = &v32;
          *(_DWORD *)(*(void *)(sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                                + 8)
                    + 232LL) = v16;
          *(void *)buf = &v32;
          int v17 = sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
          std::string::assign((std::string *)(*(void *)(v17[5] + 8) + 136LL), "2.4G");
          *(void *)buf = &v32;
          *(_BYTE *)(*(void *)(sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                               + 8)
                   + 160LL) = 0;
          if (*(_BYTE *)(v32 + 1373))
          {
            *(void *)buf = &v32;
            uint64_t v18 = sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
            std::string::assign((std::string *)(*(void *)(v18[5] + 8) + 136LL), "5G");
          }

          *(void *)buf = &v32;
          if (*(_BYTE *)(sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 32))
          {
            *(void *)buf = &v32;
            *(_BYTE *)(*(void *)(sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                                 + 8)
                     + 160LL) = 1;
          }

          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          *(void *)buf = &v32;
          *(CFAbsoluteTime *)(*(void *)(sub_100029574( v4,  (unint64_t *)&v32,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8)
                            + 88LL) = Current;
          *(void *)buf = &v32;
          double v20 = *(double *)(*(void *)(sub_100029574( v4,  (unint64_t *)&v32,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8)
                          + 88LL);
          *(void *)buf = &v32;
          double v21 = v20
              - *(double *)(*(void *)(sub_100029574( v4,  (unint64_t *)&v32,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8)
                          + 80LL);
          *(void *)buf = &v32;
          *(_DWORD *)(*(void *)(sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                                + 8)
                    + 164LL) = v21;
          *(void *)buf = &v32;
          *(_DWORD *)(*(void *)(sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                                + 8)
                    + 176LL) = *((_DWORD *)v2 + 259);
          *(void *)buf = &v32;
          *(_DWORD *)(*(void *)(sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                                + 8)
                    + 180LL) = *((_DWORD *)v2 + 260);
          uint64_t v22 = sub_1002E8D94();
          *(void *)buf = &v32;
          uint64_t v23 = sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
          (*(void (**)(uint64_t, void))(*(void *)v22 + 96LL))(v22, *(void *)(v23[5] + 8));
          sub_1004A29C8((uint64_t)v2, v32);
          uint64_t v24 = sub_1002E6BF0();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 128LL))(v24))
          {
            *(void *)buf = &v32;
            if (*(_DWORD *)(*(void *)(sub_100029574( v4,  (unint64_t *)&v32,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8)
                           + 104LL))
            {
              *(void *)buf = &v32;
              float v25 = (float)*(unsigned int *)(*(void *)(sub_100029574( v4,  (unint64_t *)&v32,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8)
                                           + 128LL);
              *(void *)buf = &v32;
              uint64_t v26 = (float)((float)(v25
                                                / (float)*(unsigned int *)(*(void *)(sub_100029574( v4,  (unint64_t *)&v32,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8)
                                                                         + 104LL))
                                        * 100.0);
            }

            else
            {
              uint64_t v26 = 0LL;
            }

            *(void *)buf = &v32;
            if (*(_DWORD *)(*(void *)(sub_100029574( v4,  (unint64_t *)&v32,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8)
                           + 108LL))
            {
              *(void *)buf = &v32;
              float v27 = (float)*(unsigned int *)(*(void *)(sub_100029574( v4,  (unint64_t *)&v32,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8)
                                           + 132LL);
              *(void *)buf = &v32;
              uint64_t v28 = (float)((float)(v27
                                                / (float)*(unsigned int *)(*(void *)(sub_100029574( v4,  (unint64_t *)&v32,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8)
                                                                         + 108LL))
                                        * 100.0);
            }

            else
            {
              uint64_t v28 = 0LL;
            }

            uint64_t v29 = sub_1002E9074();
            *(void *)buf = &v32;
            __int128 v30 = sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
            (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, void))(*(void *)v29 + 24LL))( v29,  *(unsigned int *)(*(void *)(v30[5] + 8) + 164LL),  v26,  (100 - v26),  v28,  (100 - v28));
          }

          *(void *)buf = &v32;
          uint64_t v31 = *(void *)(sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 8);
          if (v31)
          {
            operator delete((void *)v31);
          }

          *(void *)buf = &v32;
          uint64_t result = sub_100029574(v4, (unint64_t *)&v32, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
          *(void *)(result[5] + 8) = 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_10049BA98(uint64_t a1)
{
  *(_BYTE *)(a1 + 328) = 1;
  sub_100499D54(a1);
  sub_10049A034(a1);
  int v2 = *(_DWORD *)(sub_1002E6E9C() + 708);
  if ((v2 - 1) > 0x7CE)
  {
    if ((v2 - 2000) <= 0x7CF)
    {
      sub_10049BCB8((_WORD *)a1, v2);
      sub_10049BE6C(a1, v2);
      sub_10049C05C(a1, v2);
    }
  }

  else if (v2 == 19 || v2 == 15)
  {
    uint64_t v4 = sub_1002E6BF0();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 144LL))(v4) & 1) == 0)
    {
      *(_WORD *)(a1 + 810) = 256;
      if (v2 == 19) {
        uint64_t v5 = 97LL;
      }
      else {
        uint64_t v5 = 81LL;
      }
      unint64_t v6 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reading back ptb", v17, 2u);
      }

      uint64_t v7 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 584LL))(v7, v5, a1 + 810, a1 + 384);
    }
  }

  uint64_t v8 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v8 + 792LL))(v8, 1LL))
  {
    uint64_t v9 = sub_1002E8D54();
    sub_1004B6428(v9 + 928, a1 + 96);
    uint64_t v10 = sub_1002E8D54();
    (*(void (**)(uint64_t))(*(void *)v10 + 232LL))(v10);
    uint64_t v11 = sub_1002E8D54();
    sub_1004B5E74(v11 + 968, a1 + 104);
    uint64_t v12 = sub_1002E8D54();
    sub_1004B6718(v12 + 1008, a1 + 112);
  }

  uint64_t v13 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 152LL))(v13))
  {
    uint64_t v14 = sub_1002E8D54();
    sub_1001FC8A8(v14 + 368, a1 + 136);
  }

  uint64_t v15 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v15 + 88LL))(v15, 1LL, 0LL);
  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming")
    && sub_100112C40((uint64_t)sub_10049C1D0, 0LL)
    && os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
  {
    sub_100685164();
  }

  return sub_10049C324(a1, 0);
}

uint64_t sub_10049BCB8(_WORD *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Reading back PPR power table for N1x1",  (uint8_t *)v12,  2u);
  }

  if (a2 == 2000)
  {
    a1[406] = 10;
    uint64_t v5 = sub_1002E6E9C();
    return (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *))(*(void *)v5 + 584LL))( v5,  145LL,  a1 + 406,  a1 + 320);
  }

  else
  {
    v12[0] = 0LL;
    v12[1] = 0LL;
    __int16 v13 = 0;
    a1[406] = 18;
    uint64_t v7 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, _WORD *, void *))(*(void *)v7 + 584LL))(v7, 148LL, a1 + 406, v12);
    a1[320] = *(_WORD *)((char *)v12 + 1);
    a1[406] = 18;
    uint64_t v8 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, _WORD *, void *))(*(void *)v8 + 584LL))(v8, 149LL, a1 + 406, v12);
    a1[321] = *(_WORD *)((char *)v12 + 1);
    a1[406] = 18;
    uint64_t v9 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, _WORD *, void *))(*(void *)v9 + 584LL))(v9, 150LL, a1 + 406, v12);
    a1[322] = *(_WORD *)((char *)v12 + 1);
    a1[406] = 18;
    uint64_t v10 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, _WORD *, void *))(*(void *)v10 + 584LL))(v10, 152LL, a1 + 406, v12);
    a1[323] = *(_WORD *)((char *)v12 + 1);
    a1[406] = 18;
    uint64_t v11 = sub_1002E6E9C();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, void *))(*(void *)v11 + 584LL))( v11,  153LL,  a1 + 406,  v12);
    a1[324] = *(_WORD *)((char *)v12 + 1);
    a1[406] = 10;
  }

  return result;
}

uint64_t sub_10049BE6C(uint64_t a1, int a2)
{
  __int16 v17 = 128;
  *(_WORD *)(a1 + 814) = 0;
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reading back REG power table for N1x1", v16, 2u);
  }

  if (a2 != 2000)
  {
    __int16 v17 = 128;
    uint64_t v8 = sub_1002E6E9C();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v8 + 584LL))( v8,  154LL,  &v17,  a1 + 650);
    int v9 = result;
    unsigned __int8 v10 = v17;
    if ((_DWORD)result) {
      unsigned __int8 v10 = 0;
    }
    unsigned __int8 v11 = v10;
    if (!(_DWORD)result && ((char)v10 & 0x80000000) == 0)
    {
      __int16 v17 = 128 - v10;
      uint64_t v12 = sub_1002E6E9C();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v12 + 584LL))( v12,  155LL,  &v17,  a1 + v11 + 650);
      if ((_DWORD)result) {
        goto LABEL_24;
      }
      v11 += v17;
    }

    if (!v9 && (v11 & 0x80) == 0)
    {
      __int16 v17 = 128 - v11;
      uint64_t v13 = sub_1002E6E9C();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v13 + 584LL))( v13,  156LL,  &v17,  a1 + v11 + 650);
      if ((_DWORD)result) {
        goto LABEL_24;
      }
      v11 += v17;
    }

    if (v9 || (v11 & 0x80) != 0)
    {
LABEL_20:
      if (!v9 && (v11 & 0x80) == 0)
      {
        __int16 v17 = 128 - v11;
        uint64_t v15 = sub_1002E6E9C();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v15 + 584LL))( v15,  162LL,  &v17,  a1 + v11 + 650);
        if (!(_DWORD)result) {
          v11 += v17;
        }
      }

      goto LABEL_24;
    }

    __int16 v17 = 128 - v11;
    uint64_t v14 = sub_1002E6E9C();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v14 + 584LL))( v14,  161LL,  &v17,  a1 + v11 + 650);
    if (!(_DWORD)result)
    {
      v11 += v17;
      goto LABEL_20;
    }

uint64_t sub_10049C05C(uint64_t a1, int a2)
{
  __int16 v16 = 32;
  *(_WORD *)(a1 + 816) = 0;
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reading back SAR power table for N1x1", v15, 2u);
  }

  if (a2 != 2000)
  {
    __int16 v16 = 32;
    uint64_t v8 = sub_1002E6E9C();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v8 + 584LL))( v8,  163LL,  &v16,  a1 + 778);
    int v9 = result;
    if ((_DWORD)result) {
      unsigned __int8 v10 = 0;
    }
    else {
      unsigned __int8 v10 = v16;
    }
    if ((_DWORD)result) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = v10 > 0x1Fu;
    }
    if (!v11)
    {
      __int16 v16 = 32 - v10;
      uint64_t v12 = sub_1002E6E9C();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v12 + 584LL))( v12,  164LL,  &v16,  a1 + v10 + 778);
      if ((_DWORD)result)
      {
LABEL_21:
        __int16 v7 = v10;
        goto LABEL_22;
      }

      v10 += v16;
    }

    if (v9) {
      BOOL v13 = 1;
    }
    else {
      BOOL v13 = v10 > 0x1Fu;
    }
    if (!v13)
    {
      __int16 v16 = 32 - v10;
      uint64_t v14 = sub_1002E6E9C();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v14 + 584LL))( v14,  165LL,  &v16,  a1 + v10 + 778);
      if (!(_DWORD)result) {
        v10 += v16;
      }
    }

    goto LABEL_21;
  }

  uint64_t v5 = sub_1002E6E9C();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v5 + 584LL))( v5,  147LL,  &v16,  a1 + 778);
  if ((_DWORD)result) {
    return result;
  }
  __int16 v7 = v16;
LABEL_22:
  *(_WORD *)(a1 + 816) = v7;
  return result;
}

void sub_10049C1D0(int a1, unsigned __int8 *a2, int a3, __int16 a4, uint64_t a5)
{
  uint64_t v10 = sub_10012D890((uint64_t)a2);
  if (!a1)
  {
    if ((a3 & 0xFFFFFFFD) != 0)
    {
      BOOL v11 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        v12[0] = 67109120;
        v12[1] = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "legacyModeChangeEvent received with invalid mode: %d",  (uint8_t *)v12,  8u);
      }
    }

    else if (a2 && v10)
    {
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_10089BC10);
      }
      sub_1004B459C((uint64_t)off_1008D60E8, 0, a2, a3, a4, a5);
    }
  }

uint64_t sub_10049C324(uint64_t a1, char a2)
{
  __int16 v17 = 0;
  uint64_t v16 = 0LL;
  __int16 v15 = 10;
  uint64_t v4 = sub_1002E6BF0();
  if (*(_DWORD *)(a1 + 856) == 6) {
    char v5 = a2;
  }
  else {
    char v5 = 1;
  }
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    if (!*(_BYTE *)(a1 + 853)) {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 400LL))(v10))
    {
      uint64_t v11 = sub_1002E6E00();
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 408LL))(v11);
    }

    else
    {
      uint64_t v7 = 186LL;
    }

    uint64_t v12 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 416LL))(v12))
    {
      uint64_t v13 = sub_1002E6E00();
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 424LL))(v13);
    }

    else
    {
      uint64_t v6 = 186LL;
    }

    *(_BYTE *)(a1 + 853) = 1;
    uint64_t v8 = 3LL;
  }

  uint64_t v14 = sub_1002E6E9C();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, uint64_t *))(*(void *)v14 + 896LL))( v14,  4095LL,  9LL,  v8,  v7,  v6,  &v15,  &v16);
  *(_BYTE *)(a1 + 853) = v5 ^ ((_DWORD)result == 0);
  return result;
}

uint64_t sub_10049C488(uint64_t a1)
{
  return sub_10049BA98(a1 - 8);
}

void sub_10049C490(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AudioLinkManager::stackWillStop enter", buf, 2u);
  }

  *(_BYTE *)(a1 + 328) = 0;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10049C5CC;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_sync(v3, block);
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AudioLinkManager::stackWillStop enter", buf, 2u);
  }

  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming")
    && sub_100112C50((uint64_t)sub_10049C1D0)
    && os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
  {
    sub_1006851C4();
  }

uint64_t sub_10049C5CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = *(void *)(v1 + 864);
  if (result)
  {
    uint64_t v3 = (void *)(v1 + 864);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
    *uint64_t v3 = 0LL;
    v3[1] = 0LL;
  }

  return result;
}

void sub_10049C604(uint64_t a1)
{
}

void sub_10049C60C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 950) = 0u;
  *(_OWORD *)(a1 + 966) = 0u;
  *(_OWORD *)(a1 + 934) = 0u;
  int v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_10049C674;
  v3[3] = &unk_10087F8E0;
  v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

void sub_10049C674(uint64_t a1)
{
}

void sub_10049C680(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 - 144;
  *(_OWORD *)(a1 + 806) = 0u;
  *(_OWORD *)(a1 + 822) = 0u;
  *(_OWORD *)(a1 + 790) = 0u;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 96);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10049C674;
  v4[3] = &unk_10087F8E0;
  v4[4] = v2;
  v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_10049C6E8(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[110];
  uint64_t v3 = (std::__shared_weak_count *)a1[111];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }

  uint64_t v6 = (dispatch_queue_s *)a1[30];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_10049C798;
  block[3] = &unk_10089BA00;
  void block[4] = v2;
  uint64_t v10 = v3;
  if (v3)
  {
    uint64_t v7 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v11 = a2;
  dispatch_async(v6, block);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10049C798(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5) {
        sub_100272B1C(v5, a1[6]);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

void sub_10049C824( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10049C838(uint64_t a1, uint64_t a2)
{
}

void sub_10049C840(uint64_t a1, char a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_10049C89C;
  v3[3] = &unk_1008800D8;
  v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

uint64_t sub_10049C89C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(v1 + 208))
  {
    uint64_t v2 = result;
    uint64_t result = sub_1002E6E9C();
    unsigned int v3 = *(_DWORD *)(result + 708);
    if (v3 - 1 <= 0x7CE && (v3 != 15 ? (BOOL v4 = v3 >= 0x13) : (BOOL v4 = 1), v4))
    {
      uint64_t v5 = sub_1002E6E9C();
      return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v5 + 560LL))( v5,  *(unsigned __int8 *)(v2 + 40),  1LL);
    }

    else
    {
      uint64_t v6 = *(void **)(v1 + 192);
      if (v6 != (void *)(v1 + 200))
      {
        do
        {
          sub_10049C9AC(v1, v6[4], *(_DWORD *)(v6[5] + 76LL), (char *)(v1 + 862));
          sub_10049CBDC(v1, *(_BYTE *)(v2 + 40), (_BYTE *)(v1 + 860), (_BYTE *)(v1 + 861));
          uint64_t result = sub_10049CC60(v1);
          unint64_t v7 = (void *)v6[1];
          if (v7)
          {
            do
            {
              unint64_t v8 = v7;
              unint64_t v7 = (void *)*v7;
            }

            while (v7);
          }

          else
          {
            do
            {
              unint64_t v8 = (void *)v6[2];
              BOOL v9 = *v8 == (void)v6;
              uint64_t v6 = v8;
            }

            while (!v9);
          }

          uint64_t v6 = v8;
        }

        while (v8 != (void *)(v1 + 200));
      }
    }
  }

  return result;
}

void sub_10049C9AC(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  int v20 = 0;
  uint64_t v7 = sub_1002E6E00();
  sub_10002418C(buf, "ePA");
  sub_10002418C(__p, "ePAThreshold");
  int v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v7 + 88LL))(v7, buf, __p, &v20);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if ((v22 & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v11 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 384LL))(v11))
    {
      char v12 = -62;
LABEL_25:
      *a4 = v12;
      return;
    }

    if (a3 == 1)
    {
      uint64_t v15 = sub_1003D2B2C(a2, 12);
      if ((v15 & 1) != 0 || (sub_1004A37A0(v15, a2) & 1) != 0)
      {
        char v14 = -57;
        goto LABEL_22;
      }

      BOOL v16 = !sub_1003D0874(a2);
      char v14 = -68;
      char v17 = -73;
    }

    else
    {
      if (a3 != 2)
      {
LABEL_23:
        char v12 = *a4 + 12;
        goto LABEL_25;
      }

      uint64_t v13 = sub_1003D2B2C(a2, 12);
      if ((v13 & 1) != 0 || (sub_1004A37A0(v13, a2) & 1) != 0)
      {
        char v14 = -62;
LABEL_22:
        *a4 = v14;
        goto LABEL_23;
      }

      BOOL v16 = !sub_1003D0874(a2);
      char v14 = -69;
      char v17 = -74;
    }

    if (!v16) {
      char v14 = v17;
    }
    goto LABEL_22;
  }

  operator delete(*(void **)buf);
  if (!v8) {
    goto LABEL_8;
  }
LABEL_5:
  char v9 = v20;
  *a4 = v20;
  uint64_t v10 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Warning: Setting user defined ePA threshold to %d dBm through defaults write",  buf,  8u);
  }

void sub_10049CBA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10049CBDC(uint64_t a1, char a2, _BYTE *a3, _BYTE *a4)
{
  *a3 = sub_1002CDF04();
  sub_1002E6E9C();
  *a4 = sub_1002CDD88();
  sub_1002E6E9C();
  if (sub_1002CDD68() && (a2 & 1) == 0)
  {
    sub_1002E6E9C();
    *a4 = sub_1002CE130();
  }

  uint64_t result = sub_1004AB928(a1);
  if ((_DWORD)result)
  {
    uint64_t result = sub_100361020();
    if ((_DWORD)result == 149) {
      *a3 = 48;
    }
  }

  return result;
}

uint64_t sub_10049CC60(uint64_t result)
{
  if (!*(_BYTE *)(result + 329))
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(sub_1002E6E9C() + 708) >= 0x13u)
    {
      char v10 = 0;
      uint64_t v2 = sub_1002E6E00();
      sub_10002418C(buf, "ePA");
      sub_10002418C(__p, "DisableReTxEPA");
      (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v2 + 72LL))(v2, buf, __p, &v10);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (v9 < 0) {
        operator delete(*(void **)buf);
      }
      if (!v10)
      {
        uint64_t v4 = 2LL;
        goto LABEL_12;
      }

      unsigned int v3 = (os_log_s *)qword_1008F7570;
      uint64_t v4 = 0LL;
      if (!os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
LABEL_12:
        uint64_t v5 = sub_1002E6E9C();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v5 + 80LL))( v5,  1LL,  v4,  *(unsigned __int8 *)(v1 + 860),  *(unsigned __int8 *)(v1 + 861),  *(char *)(v1 + 862));
      }

      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Warning: Disabling ePA for retransmission policy through defaults write",  buf,  2u);
    }

    uint64_t v4 = 0LL;
    goto LABEL_12;
  }

  return result;
}

void sub_10049CD8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10049CDC0(uint64_t a1, char a2)
{
  uint64_t v2 = a1 - 16;
  unsigned int v3 = *(dispatch_queue_s **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10049C89C;
  v4[3] = &unk_1008800D8;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

void sub_10049CE1C(uint64_t a1, __int128 *a2, int *a3)
{
  v15[0] = 0LL;
  v15[1] = v15;
  void v15[2] = 0x11012000000LL;
  v15[3] = sub_10049CFC4;
  v15[4] = nullsub_441;
  void v15[5] = &unk_1007C41D6;
  __int128 v4 = a2[11];
  __int128 v26 = a2[10];
  __int128 v27 = v4;
  v28[0] = a2[12];
  *(_OWORD *)((char *)v28 + 15) = *(__int128 *)((char *)a2 + 207);
  __int128 v5 = a2[7];
  __int128 v22 = a2[6];
  __int128 v23 = v5;
  __int128 v6 = a2[9];
  __int128 v24 = a2[8];
  __int128 v25 = v6;
  __int128 v7 = a2[3];
  __int128 v18 = a2[2];
  __int128 v19 = v7;
  __int128 v8 = a2[5];
  __int128 v20 = a2[4];
  __int128 v21 = v8;
  __int128 v9 = a2[1];
  __int128 v16 = *a2;
  __int128 v17 = v9;
  int v13 = *a3;
  __int16 v14 = *((_WORD *)a3 + 2);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089BD30);
  }
  char v10 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v13, 0);
  uint64_t v11 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10049D00C;
  block[3] = &unk_10087FEE0;
  void block[5] = a1;
  block[6] = v10;
  void block[4] = v15;
  dispatch_async(v11, block);
  _Block_object_dispose(v15, 8);
}

void sub_10049CFAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

__n128 sub_10049CFC4(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 80);
  __int128 v4 = *(_OWORD *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 144);
  __int128 v7 = *(_OWORD *)(a2 + 160);
  __int128 v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  __n128 result = *(__n128 *)(a2 + 208);
  __int128 v10 = *(_OWORD *)(a2 + 224);
  __int128 v11 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 255) = *(_OWORD *)(a2 + 255);
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 2sub_100242E28(v1 + 40) = v11;
  *(__n128 *)(a1 + 20_Block_object_dispose(va, 8) = result;
  return result;
}

double sub_10049D00C(void *a1, double result)
{
  __int128 v3 = a1 + 6;
  unint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v4 = a1[5];
    __int128 v5 = *(void **)(v4 + 200);
    if (v5)
    {
      __int128 v7 = (uint64_t **)(v4 + 192);
      uint64_t v8 = v4 + 200;
      do
      {
        unint64_t v9 = v5[4];
        BOOL v10 = v9 >= v2;
        if (v9 >= v2) {
          __int128 v11 = v5;
        }
        else {
          __int128 v11 = v5 + 1;
        }
        if (v10) {
          uint64_t v8 = (uint64_t)v5;
        }
        __int128 v5 = (void *)*v11;
      }

      while (*v11);
      if (v8 != v4 + 200 && v2 >= *(void *)(v8 + 32))
      {
        sub_10049DBD0(a1[5], v2, (_BYTE *)(*(void *)(a1[4] + 8LL) + 48LL));
        sub_1002E6E9C();
        if (!sub_1002CD6A0()) {
          *(_WORD *)(*(void *)(a1[4] + 8LL) + 225LL) = 0;
        }
        uint64_t v12 = sub_1002E6BF0();
        uint64_t v13 = sub_1002E6E00();
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 288LL))(v13);
        if ((v14 & 1) == 0 && *(_DWORD *)(v4 + 848) != 3) {
          sub_10049E32C( v14,  *(unsigned __int8 *)(*(void *)(a1[4] + 8LL) + 49LL),  (unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 213LL));
        }
        int v64 = v3;
        if (*(void *)sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5]
          && *(unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 66LL) <= *(unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 64LL))
        {
          int v64 = v3;
          uint64_t v15 = *(void *)sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5];
          *(void *)(v15 + 416) += *(char *)(*(void *)(a1[4] + 8LL) + 54LL);
          ++*(_DWORD *)(v15 + 424);
          int v64 = v3;
          uint64_t v16 = *(void *)sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5];
          int v17 = *(char *)(*(void *)(a1[4] + 8LL) + 55LL);
          if (*(_DWORD *)(v16 + 428) > v17) {
            *(_DWORD *)(v16 + 42_Block_object_dispose(va, 8) = v17;
          }
          int v64 = v3;
          uint64_t v18 = *(void *)sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5];
          int v19 = *(char *)(*(void *)(a1[4] + 8LL) + 56LL);
          if (*(_DWORD *)(v18 + 432) < v19) {
            *(_DWORD *)(v18 + 432) = v19;
          }
          int v64 = v3;
          if (*(void *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 24))
          {
            uint64_t v20 = *(char *)(*(void *)(a1[4] + 8LL) + 54LL);
            int v64 = v3;
            uint64_t v22 = *(void *)(a1[4] + 8LL);
            if (*(_WORD *)(v22 + 64))
            {
              LOWORD(v21) = *(_WORD *)(v22 + 66);
              float v23 = (float)((float)v21 * 100.0) / (float)*(unsigned __int16 *)(v22 + 64);
            }

            else
            {
              float v23 = 0.0;
            }

            int v64 = v3;
          }

          __int128 v24 = *(_BYTE **)(v4 + 216);
          if (v24[8])
          {
            int v64 = v3;
            __int128 v25 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            *(_DWORD *)(*(void *)v25[5] + 436LL) |= 2u;
            __int128 v24 = *(_BYTE **)(v4 + 216);
          }

          if (v24[7])
          {
            int v64 = v3;
            sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            __int128 v24 = *(_BYTE **)(v4 + 216);
          }

          if (v24[5])
          {
            int v64 = v3;
            __int128 v26 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            *(_DWORD *)(*(void *)v26[5] + 436LL) |= 4u;
            __int128 v24 = *(_BYTE **)(v4 + 216);
          }

          if (v24[6])
          {
            int v64 = v3;
            __int128 v27 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            *(_DWORD *)(*(void *)v27[5] + 436LL) |= 8u;
            __int128 v24 = *(_BYTE **)(v4 + 216);
          }

          if (v24[1])
          {
            int v64 = v3;
            uint64_t v28 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            *(_DWORD *)(*(void *)v28[5] + 436LL) |= 0x20u;
            __int128 v24 = *(_BYTE **)(v4 + 216);
          }

          if (v24[4])
          {
            int v64 = v3;
            uint64_t v29 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            *(_DWORD *)(*(void *)v29[5] + 436LL) |= 0x80u;
            __int128 v24 = *(_BYTE **)(v4 + 216);
          }

          if (v24[3])
          {
            int v64 = v3;
            __int128 v30 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            *(_DWORD *)(*(void *)v30[5] + 436LL) |= 0x10u;
            __int128 v24 = *(_BYTE **)(v4 + 216);
          }

          if (v24[2])
          {
            int v64 = v3;
            uint64_t v31 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            *(_DWORD *)(*(void *)v31[5] + 436LL) |= 0x40u;
          }

          uint64_t v32 = *(void *)(a1[4] + 8LL);
          if (*(_WORD *)(v32 + 64)) {
            unsigned int v33 = 100 * *(unsigned __int16 *)(v32 + 66) / *(unsigned __int16 *)(v32 + 64);
          }
          else {
            unsigned int v33 = 0;
          }
          int v64 = v3;
          if (*(_DWORD *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 64) == 1)
          {
            unint64_t v34 = *v3;
            int v64 = v3;
            int v35 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            sub_10049E47C(v4, v34, v33, *(unsigned __int8 *)(v35[5] + 70));
          }

          sub_1000381A0(*(void *)(v4 + 216), a1[6], v33, *(void *)(a1[4] + 8LL) + 48LL, 0);
          sub_10003AE54(*(void *)(v4 + 216), a1[6], v33, *(void *)(a1[4] + 8LL) + 48LL);
          int v64 = v3;
          if (*(_BYTE *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 56))
          {
            unint64_t v36 = *v3;
            int v64 = v3;
            uint64_t v37 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            sub_10049E894(v4, v36, v33, *(_BYTE *)(v37[5] + 70));
          }

          int v64 = v3;
          uint64_t v38 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
          *(_DWORD *)(*(void *)v38[5] + 104LL) += *(unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 60LL);
          int v64 = v3;
          uint64_t v39 = *(void *)sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5];
          unsigned int v40 = *(unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 64LL);
          *(_DWORD *)(v39 + 108) += v40;
          if (v40 <= 0x1D) {
            ++*(void *)(v39 + 512);
          }
          int v64 = v3;
          *(_BYTE *)(*(void *)sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 388LL) = *(_BYTE *)(*(void *)(a1[4] + 8LL) + 54LL);
          int v64 = v3;
          __int16 v41 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
          *(int32x2_t *)(*(void *)v41[5] + 404LL) = vadd_s32( *(int32x2_t *)(*(void *)v41[5] + 404LL),  (int32x2_t)(v33 | 0x100000000LL));
          uint64_t v42 = sub_1002E6E00();
          if (((*(uint64_t (**)(uint64_t))(*(void *)v42 + 288LL))(v42) & 1) == 0)
          {
            uint64_t v43 = *(void *)(a1[4] + 8LL) + 48LL;
            int v64 = v3;
            unsigned int v44 = *(unsigned __int16 *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 58);
            int v64 = v3;
            if (v44 >= *(unsigned __int16 *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5]
                                            + 60))
            {
              int v64 = v3;
              uint64_t v45 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
              __int16 v47 = (unsigned __int16 *)(v45[5] + 60);
            }

            else
            {
              int v64 = v3;
              uint64_t v45 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
              __int16 v47 = (unsigned __int16 *)(v45[5] + 58);
            }

            sub_10049EDC0(v46, (uint64_t)v45, v43, *v47, *v3);
            if (qword_1008D6778 != -1) {
              dispatch_once(&qword_1008D6778, &stru_10089BD10);
            }
            uint64_t v48 = qword_1008D6770;
            unint64_t v49 = a1[6];
            uint64_t v50 = *(void *)(a1[4] + 8LL) + 48LL;
            int v64 = v3;
            unsigned int v51 = *(unsigned __int16 *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 58);
            int v64 = v3;
            if (v51 >= *(unsigned __int16 *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5]
                                            + 60))
            {
              int v64 = v3;
              char v52 = (__int16 *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 60);
            }

            else
            {
              int v64 = v3;
              char v52 = (__int16 *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 58);
            }

            __int16 v53 = *v52;
            uint64_t v54 = *(void *)(v4 + 216);
            int v64 = v3;
            v55 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
            __int16 v56 = sub_100038AC8(v54, *(_DWORD *)(*(void *)(v55[5] + 40) + 20LL), *v3);
            sub_100201148(v48, v49, v50, v53, v56);
          }
        }

        int v64 = v3;
        int v64 = v3;
        unsigned int v57 = *(unsigned __int16 *)(*(void *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5]
                                              + 40)
                                  + 16LL);
        if (v57 < 0x97)
        {
          if (v57 == 150) {
            goto LABEL_73;
          }
        }

        else
        {
          int v64 = v3;
          if (*(_DWORD *)(*(void *)sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 312LL) <= 0x95u)
          {
LABEL_73:
            int v64 = v3;
            if (*(void *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 8))
            {
              sub_10049F768(v4, a1[6], *(void *)(a1[4] + 8LL) + 48LL);
              uint64_t v58 = sub_1002E6E00();
              if (((*(uint64_t (**)(uint64_t))(*(void *)v58 + 288LL))(v58) & 1) == 0)
              {
                sub_10049FE28(v4, *(void *)(a1[4] + 8LL) + 48LL, a1[6]);
                sub_10002915C(*(void *)(v4 + 224), a1[6], *(void *)(a1[4] + 8LL) + 48LL);
                if (qword_1008D6778 != -1) {
                  dispatch_once(&qword_1008D6778, &stru_10089BD10);
                }
                uint64_t v59 = qword_1008D6770;
                unint64_t v60 = a1[6];
                uint64_t v61 = *(void *)(a1[4] + 8LL) + 48LL;
                int v64 = v3;
                v62 = sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64);
                sub_100201148(v59, v60, v61, 0, *(_WORD *)(*(void *)(v62[5] + 40) + 16LL));
              }
            }

            int v64 = v3;
            if (*(_BYTE *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 72))
            {
              int v64 = v3;
              if (*(_DWORD *)(sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 76) == 2)
              {
                uint64_t v63 = sub_1002E6E00();
              }
            }

            return sub_1004A0474(v4, a1[6], *(void *)(a1[4] + 8LL) + 48LL);
          }
        }

        int v64 = v3;
        *(_DWORD *)(*(void *)sub_100029574(v7, (unint64_t *)v3, (uint64_t)&unk_1006C2518, &v64)[5] + 312LL) = v57;
        goto LABEL_73;
      }
    }
  }

  return result;
}

void sub_10049DBD0(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v65 = a2;
  unsigned int v4 = *(unsigned __int8 *)(a1 + 934);
  if (v4 <= 1)
  {
    a3[221] = v4;
LABEL_48:
    uint64_t v29 = 0LL;
    LOBYTE(v6) = 0;
    uint64_t v7 = 0LL;
    __int128 v30 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = a3 + 86;
    do
    {
      if (((a3[(v29 >> 3) + 76] >> (v29 & 7)) & 1) != 0)
      {
        LOBYTE(v6) = v6 + 1;
        if (v30 >= v31)
        {
          uint64_t v33 = (uint64_t)&v30[-v7 + 1];
          if (v33 < 0) {
            abort();
          }
          else {
            size_t v34 = v33;
          }
          if (v34) {
            int v35 = (char *)operator new(v34);
          }
          else {
            int v35 = 0LL;
          }
          unint64_t v36 = &v30[(void)v35 - v7];
          *unint64_t v36 = v32[v29];
          uint64_t v37 = v36 + 1;
          if (v30 != (char *)v7)
          {
            uint64_t v38 = &v30[~v7];
            do
            {
              char v39 = *--v30;
              (v38--)[(void)v35] = v39;
            }

            while (v30 != (char *)v7);
            unint64_t v36 = v35;
          }

          uint64_t v31 = &v35[v34];
          if (v7) {
            operator delete((void *)v7);
          }
          __int128 v30 = v37;
          uint64_t v7 = (uint64_t)v36;
        }

        else
        {
          *v30++ = v32[v29];
        }
      }

      ++v29;
    }

    while (v29 != 79);
    if ((_BYTE)v6)
    {
      unint64_t v40 = 126 - 2 * __clz((unint64_t)&v30[-v7]);
      __int16 v41 = &v30[-v7];
      else {
        uint64_t v42 = v40;
      }
      sub_1004B88AC(v7, v30, v42, 1);
      double v43 = (double)v6;
      unint64_t v44 = (unint64_t)(ceil(v43 * 0.5) + -1.0);
      if ((unint64_t)v41 <= v44
        || (a3[217] = *(_BYTE *)(v7 + v44),
            unint64_t v45 = (unint64_t)(ceil(v43 * 0.75) + -1.0),
            (unint64_t)v41 <= v45)
        || (a3[218] = *(_BYTE *)(v7 + v45),
            unint64_t v46 = (unint64_t)(ceil(v43 * 0.9) + -1.0),
            (unint64_t)v41 <= v46))
      {
        abort();
      }

      a3[219] = *(_BYTE *)(v7 + v46);
    }

    else
    {
      LOBYTE(v6) = 0;
      *(_WORD *)(a3 + 217) = 0;
      a3[219] = 0;
    }

    goto LABEL_86;
  }

  if (!*(_BYTE *)(a1 + 935)) {
    LOBYTE(v4) = 0;
  }
  a3[221] = v4;
  if (!*(_BYTE *)(a1 + 935)) {
    goto LABEL_48;
  }
  uint64_t v5 = 0LL;
  int v6 = 0;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  unint64_t v9 = 0LL;
  BOOL v10 = a3 + 86;
  do
  {
    unsigned int v11 = a3[(v5 >> 3) + 76];
    if (v8 >= v9)
    {
      uint64_t v12 = (uint64_t)&v8[-v7 + 1];
      if (v12 < 0) {
        abort();
      }
      else {
        size_t v13 = v12;
      }
      if (v13) {
        uint64_t v14 = (char *)operator new(v13);
      }
      else {
        uint64_t v14 = 0LL;
      }
      uint64_t v15 = &v8[(void)v14 - v7];
      *uint64_t v15 = v10[v5];
      uint64_t v16 = v15 + 1;
      if (v8 != (char *)v7)
      {
        int v17 = &v8[~v7];
        do
        {
          char v18 = *--v8;
          (v17--)[(void)v14] = v18;
        }

        while (v8 != (char *)v7);
        uint64_t v15 = v14;
      }

      unint64_t v9 = &v14[v13];
      if (v7) {
        operator delete((void *)v7);
      }
      uint64_t v7 = (uint64_t)v15;
      uint64_t v8 = v16;
    }

    else
    {
      *v8++ = v10[v5];
    }

    v6 += (v11 >> (v5++ & 7)) & 1;
  }

  while (v5 != 79);
  uint64_t v19 = 0LL;
  while (1)
  {
    char v20 = *(_BYTE *)(a1 + v19 + 935);
    if (!v20) {
      break;
    }
    if (v8 >= v9)
    {
      uint64_t v21 = (uint64_t)&v8[-v7 + 1];
      if (v21 < 0) {
        abort();
      }
      else {
        size_t v22 = v21;
      }
      if (v22) {
        float v23 = (char *)operator new(v22);
      }
      else {
        float v23 = 0LL;
      }
      __int128 v24 = &v8[(void)v23 - v7];
      *__int128 v24 = v20;
      __int128 v25 = v24 + 1;
      if (v8 != (char *)v7)
      {
        __int128 v26 = &v8[~v7];
        do
        {
          char v27 = *--v8;
          (v26--)[(void)v23] = v27;
        }

        while (v8 != (char *)v7);
        __int128 v24 = v23;
      }

      unint64_t v9 = &v23[v22];
      if (v7) {
        operator delete((void *)v7);
      }
      uint64_t v7 = (uint64_t)v24;
      uint64_t v8 = v25;
    }

    else
    {
      *v8++ = v20;
    }

    if (++v19 == 47)
    {
      int v28 = 126;
      goto LABEL_79;
    }
  }

  int v28 = v19 + 79;
LABEL_79:
  unint64_t v47 = 126 - 2 * __clz((unint64_t)&v8[-v7]);
  uint64_t v48 = &v8[-v7];
  else {
    uint64_t v49 = v47;
  }
  sub_1004B7F8C(v7, v8, v49, 1);
  double v50 = (double)v28;
  unint64_t v51 = (unint64_t)(ceil((double)v28 * 0.5) + -1.0);
  if ((unint64_t)v48 <= v51
    || (a3[217] = *(_BYTE *)(v7 + v51), unint64_t v52 = (unint64_t)(ceil(v50 * 0.75) + -1.0), (unint64_t)v48 <= v52)
    || (a3[218] = *(_BYTE *)(v7 + v52), unint64_t v53 = (unint64_t)(ceil(v50 * 0.9) + -1.0), (unint64_t)v48 <= v53))
  {
    abort();
  }

  a3[219] = *(_BYTE *)(v7 + v53);
  a3[222] = v28;
LABEL_86:
  a3[220] = v6;
  unint64_t v54 = v65;
  *(_BYTE *)(a1 + 934) = 0;
  if (v54)
  {
    v55 = *(void **)(a1 + 200);
    if (v55)
    {
      __int16 v56 = (uint64_t **)(a1 + 192);
      unsigned int v57 = (void *)(a1 + 200);
      do
      {
        unint64_t v58 = v55[4];
        BOOL v59 = v58 >= v54;
        if (v58 >= v54) {
          unint64_t v60 = v55;
        }
        else {
          unint64_t v60 = v55 + 1;
        }
        if (v59) {
          unsigned int v57 = v55;
        }
        v55 = (void *)*v60;
      }

      while (*v60);
      if (v57 != (void *)(a1 + 200) && v54 >= v57[4])
      {
        __int16 v66 = &v65;
        if (*(void *)sub_100029574((uint64_t **)(a1 + 192), &v65, (uint64_t)&unk_1006C2518, (uint64_t **)&v66)[5])
        {
          __int16 v66 = &v65;
          uint64_t v61 = sub_100029574(v56, &v65, (uint64_t)&unk_1006C2518, (uint64_t **)&v66);
          sub_1004AD658((uint64_t)v61, *(_DWORD **)v61[5], (uint64_t)a3);
        }

        __int16 v66 = &v65;
        if (*(void *)(sub_100029574(v56, &v65, (uint64_t)&unk_1006C2518, (uint64_t **)&v66)[5] + 8))
        {
          __int16 v66 = &v65;
          v62 = sub_100029574(v56, &v65, (uint64_t)&unk_1006C2518, (uint64_t **)&v66);
          sub_1004AD658((uint64_t)v62, *(_DWORD **)(v62[5] + 8), (uint64_t)a3);
        }

        __int16 v66 = &v65;
        if (*(void *)(sub_100029574(v56, &v65, (uint64_t)&unk_1006C2518, (uint64_t **)&v66)[5] + 16))
        {
          __int16 v66 = &v65;
          uint64_t v63 = sub_100029574(v56, &v65, (uint64_t)&unk_1006C2518, (uint64_t **)&v66);
          sub_1004AD658((uint64_t)v63, *(_DWORD **)(v63[5] + 16), (uint64_t)a3);
        }
      }
    }
  }

  if (v7) {
    operator delete((void *)v7);
  }
}

void sub_10049E1F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10049E220(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v11 = a2;
  unsigned int v4 = (uint64_t **)(a1 + 192);
  uint64_t v12 = &v11;
  if (*(void *)sub_100029574((uint64_t **)(a1 + 192), &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5])
  {
    uint64_t v12 = &v11;
    uint64_t v5 = sub_100029574(v4, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
    uint64_t v6 = *(void *)v5[5];
    if (v6) {
      uint64_t v7 = (_DWORD *)(v6 + 36);
    }
    else {
      uint64_t v7 = 0LL;
    }
    sub_1004AD60C((uint64_t)v5, v7, a3);
  }

  uint64_t v12 = &v11;
  if (*(void *)(sub_100029574(v4, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 8))
  {
    uint64_t v12 = &v11;
    uint64_t v8 = sub_100029574(v4, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
    uint64_t v9 = *(void *)(v8[5] + 8);
    if (v9) {
      BOOL v10 = (_DWORD *)(v9 + 36);
    }
    else {
      BOOL v10 = 0LL;
    }
    sub_1004AD60C((uint64_t)v8, v10, a3);
  }

double sub_10049E32C(uint64_t a1, int a2, unsigned __int16 *a3)
{
  uint64_t v5 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 136LL))(v5))
  {
    uint64_t v7 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = a3[2];
      double v9 = (double)(v8 >> 1) * 100.0;
      unsigned int v10 = *a3;
      unsigned int v11 = a3[1];
      v14[0] = 67111424;
      int v12 = a3[3];
      int v13 = a3[4];
      v14[1] = v8;
      __int16 v15 = 1024;
      int v16 = a2;
      __int16 v17 = 2048;
      double v18 = v9 / (double)v10;
      __int16 v19 = 2048;
      double v20 = v9 / (double)v11;
      __int16 v21 = 1024;
      unsigned int v22 = v8 >> 1;
      __int16 v23 = 1024;
      int v24 = (v8 & 1) + (v8 >> 1);
      __int16 v25 = 1024;
      unsigned int v26 = v10;
      __int16 v27 = 1024;
      unsigned int v28 = v11;
      __int16 v29 = 1024;
      int v30 = v12;
      __int16 v31 = 1024;
      int v32 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "DiversityReport:%3d switches in%3d sec. ReTx for {Ant0,Ant1} ~= {%3.0f%%,%3.0f%%} ((%2d ..%3d) / {%3d,%3d}). Goo d pkts b/w switches min =%3d, max =%3d",  (uint8_t *)v14,  0x46u);
    }
  }

  return result;
}

uint64_t *sub_10049E47C(uint64_t a1, unint64_t a2, unsigned int a3, int a4)
{
  unint64_t v23 = a2;
  uint64_t v7 = (uint64_t **)(a1 + 192);
  *(void *)buf = &v23;
  if (*(__int16 *)(sub_100029574((uint64_t **)(a1 + 192), &v23, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 68) < 0)
  {
    int v13 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "A2DP Link Adaptive Packet Type: Ignoring first retransmission rate report (%d%%)",  buf,  8u);
    }

    goto LABEL_13;
  }

  *(void *)buf = &v23;
  double result = sub_100029574(v7, &v23, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
  if (*(_BYTE *)(*(void *)(result[5] + 40) + 2LL)) {
    return result;
  }
  if (a3 <= 0x1D && !a4)
  {
    if (a3 <= 0xA)
    {
      *(void *)buf = &v23;
      double result = sub_100029574(v7, &v23, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
      if (*(_BYTE *)(result[5] + 71))
      {
        *(void *)buf = &v23;
        double v9 = sub_100029574(v7, &v23, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        ++*(_WORD *)(v9[5] + 68);
        *(void *)buf = &v23;
        double result = sub_100029574(v7, &v23, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        if (*(__int16 *)(result[5] + 68) >= 6)
        {
          unsigned int v10 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&uint8_t buf[4] = a3;
            __int16 v25 = 2082;
            unsigned int v26 = "No";
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "A2DP Link Adaptive Packet Type: Reverting to default support (%d%%) Purged %{public}s",  buf,  0x12u);
          }

          __int16 v11 = sub_1004ABA48(a1, v23);
          uint64_t v12 = sub_1004050C8();
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472LL;
          void v19[2] = sub_1004ABC0C;
          v19[3] = &unk_100893D28;
          __int16 v20 = v11;
          sub_100405384(v12, v19);
          *(void *)buf = &v23;
          *(_BYTE *)(sub_100029574(v7, &v23, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 71) = 0;
LABEL_22:
          *(void *)buf = &v23;
          uint64_t v14 = v7;
          goto LABEL_14;
        }
      }

      return result;
    }

void sub_10049E894(uint64_t a1, unint64_t a2, unsigned int a3, char a4)
{
  unint64_t v29 = a2;
  uint64_t v7 = (uint64_t **)(a1 + 192);
  *(void *)buf = &v29;
  unint64_t v8 = *(_DWORD *)(sub_100029574((uint64_t **)(a1 + 192), &v29, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 80) == 33023;
  uint64_t v9 = *(void *)(a1 + 1000);
  if ((*(void *)(a1 + 1008) - v9) >> 3 <= v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_10068527C();
    }
  }

  else
  {
    unsigned int v10 = *(unsigned __int8 **)(v9 + 8 * v8);
    if (v10)
    {
      __int16 v11 = *(void **)(a1 + 200);
      if (!v11) {
        goto LABEL_54;
      }
      uint64_t v12 = a1 + 200;
      do
      {
        unint64_t v13 = v11[4];
        BOOL v14 = v13 >= v29;
        if (v13 >= v29) {
          __int16 v15 = v11;
        }
        else {
          __int16 v15 = v11 + 1;
        }
        if (v14) {
          uint64_t v12 = (uint64_t)v11;
        }
        __int16 v11 = (void *)*v15;
      }

      while (*v15);
      if (v12 == a1 + 200 || v29 < *(void *)(v12 + 32))
      {
LABEL_54:
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
          sub_100685250();
        }
        return;
      }

      unsigned __int8 v16 = *v10 - 1;
      if ((a4 & 1) == 0)
      {
        __int16 v17 = (unsigned __int8 *)*((void *)v10 + 1);
        if (*v17 <= a3)
        {
          if ((*v10 - 1) >= 2u)
          {
            uint64_t v18 = 0LL;
            while (v17[v18] > a3 || v17[v18 + 1] <= a3)
            {
            }

            unsigned __int8 v16 = v18 + 1;
          }
        }

        else
        {
          unsigned __int8 v16 = 0;
        }
      }

void sub_10049EDC0(float a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (*(_WORD *)(a3 + 16))
  {
    LOWORD(a1) = *(_WORD *)(a3 + 18);
    double v8 = (float)((float)((float)LODWORD(a1) * 100.0) / (float)*(unsigned __int16 *)(a3 + 16));
  }

  else
  {
    double v8 = 0.0;
  }

  uint64_t v9 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 176LL))(v9))
  {
    uint64_t v10 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 2480LL))(v10))
    {
      uint64_t v11 = qword_1008F7570;
      if (!os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v12 = *(unsigned __int16 *)(a3 + 2);
      int v13 = *(unsigned __int16 *)(a3 + 18);
      int v14 = *(unsigned __int16 *)(a3 + 16);
      int v15 = *(unsigned __int16 *)(a3 + 179);
      int v77 = *(char *)(a3 + 217);
      int v79 = *(char *)(a3 + 218);
      int v81 = *(char *)(a3 + 219);
      uint64_t v16 = 222LL;
      int v112 = a4;
      int v17 = *(unsigned __int8 *)(a3 + v16);
      int v18 = *(unsigned __int16 *)(a3 + 14);
      int v72 = *(unsigned __int16 *)(a3 + 183);
      int v73 = *(char *)(a3 + 9);
      int v74 = *(unsigned __int16 *)(a3 + 185);
      int v75 = *(char *)(a3 + 6);
      int v76 = *(unsigned __int16 *)(a3 + 187);
      int v78 = *(unsigned __int16 *)(a3 + 189);
      int v80 = *(unsigned __int16 *)(a3 + 191);
      int v82 = *(unsigned __int16 *)(a3 + 193);
      int v84 = *(unsigned __int16 *)(a3 + 195);
      int v86 = *(unsigned __int16 *)(a3 + 197);
      int v88 = *(unsigned __int16 *)(a3 + 199);
      int v90 = *(unsigned __int16 *)(a3 + 201);
      int v92 = *(unsigned __int16 *)(a3 + 203);
      int v94 = *(unsigned __int16 *)(a3 + 205);
      int v96 = *(unsigned __int16 *)(a3 + 207);
      int v98 = *(unsigned __int16 *)(a3 + 209);
      int v101 = *(unsigned __int16 *)(a3 + 211);
      int v104 = *(unsigned __int16 *)(a3 + 213);
      int v108 = *(unsigned __int16 *)(a3 + 177);
      sub_1003D01A0(a5, (uint64_t)__p);
      int v119 = v12;
      __int16 v19 = (void **)__p[0];
      if (v117 >= 0) {
        __int16 v19 = __p;
      }
      __int16 v120 = 2048;
      *(_DWORD *)buf = 67117058;
      double v121 = v8;
      int v123 = v13;
      __int16 v122 = 1024;
      __int16 v124 = 1024;
      int v125 = v14;
      __int16 v126 = 1024;
      int v127 = v15;
      __int16 v128 = 1024;
      int v129 = v13 - v15;
      __int16 v130 = 1024;
      int v131 = v73;
      __int16 v132 = 1024;
      int v133 = v75;
      __int16 v134 = 1024;
      int v135 = v77;
      __int16 v136 = 1024;
      int v137 = v79;
      __int16 v138 = 1024;
      int v139 = v81;
      __int16 v140 = 1024;
      int v141 = v17;
      __int16 v142 = 1024;
      int v143 = v18;
      __int16 v144 = 1024;
      *(_DWORD *)v145 = v72;
      *(_WORD *)&v145[4] = 1024;
      *(_DWORD *)&v145[6] = v74;
      __int16 v146 = 1024;
      *(_DWORD *)v147 = v76;
      *(_WORD *)&v147[4] = 1024;
      *(_DWORD *)&v147[6] = v78;
      __int16 v148 = 1024;
      int v149 = v80;
      __int16 v150 = 1024;
      int v151 = v82;
      __int16 v152 = 1024;
      int v153 = v84;
      __int16 v154 = 1024;
      *(_DWORD *)v155 = v86;
      *(_WORD *)&v155[4] = 1024;
      *(_DWORD *)&v155[6] = v88;
      __int16 v156 = 1024;
      int v157 = v90;
      __int16 v158 = 1024;
      int v159 = v92;
      __int16 v160 = 1024;
      int v161 = v94;
      __int16 v162 = 1024;
      int v163 = v96;
      __int16 v164 = 1024;
      int v165 = v98;
      __int16 v166 = 1024;
      int v167 = v101;
      __int16 v168 = 1024;
      int v169 = v104;
      __int16 v170 = 1024;
      int v171 = v112;
      __int16 v172 = 1024;
      int v173 = v108;
      __int16 v174 = 2080;
      v175 = v19;
      __int16 v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d / %3d), NAK = %4d, NoSync = %4d, TxPwr = %2d dBm, RS"
            "SI = %4d, {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts = %3d, 3EDRTx pkts = %3d, HDR4Tx pkts = %"
            "3d, HDR8Tx pkts = %3d,  1SlotTx pkts = %3d, 3SlotTx pkts = %3d, 5SlotTx pkts = %3d, CoexDenial = %3d, CoexRe"
            "quest = %3d, 3EDRRx pkts = %3d, HDR4Rx pkts = %3d, HDR8Rx pkts = %3d, 1SlotRx pkts = %3d, 3SlotRx pkts = %3d"
            ", 5SlotRx pkts = %3d, TxFlush pkts =%3d, Tx2Flush pkts = %3d, rate = %3d kbps Flow off = %d devicename = %s";
      uint64_t v21 = (os_log_s *)v11;
      uint32_t v22 = 202;
      goto LABEL_36;
    }
  }

  uint64_t v23 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v23 + 176LL))(v23) && sub_1003D06C0(a5))
  {
    uint64_t v24 = qword_1008F7570;
    if (!os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v113 = a4;
    int v25 = *(unsigned __int16 *)(a3 + 2);
    int v26 = *(unsigned __int16 *)(a3 + 18);
    int v27 = *(unsigned __int16 *)(a3 + 16);
    int v28 = *(unsigned __int16 *)(a3 + 179);
    int v95 = *(char *)(a3 + 217);
    int v99 = *(char *)(a3 + 218);
    int v105 = *(char *)(a3 + 219);
    uint64_t v29 = 222LL;
    int v30 = *(unsigned __int8 *)(a3 + v29);
    int v83 = *(unsigned __int16 *)(a3 + 14);
    int v85 = *(unsigned __int16 *)(a3 + 183);
    int v87 = *(char *)(a3 + 9);
    int v89 = *(unsigned __int16 *)(a3 + 185);
    int v91 = *(char *)(a3 + 6);
    int v93 = *(unsigned __int16 *)(a3 + 187);
    int v97 = *(unsigned __int16 *)(a3 + 195);
    int v102 = *(unsigned __int16 *)(a3 + 197);
    int v109 = *(unsigned __int16 *)(a3 + 177);
    sub_1003D01A0(a5, (uint64_t)__p);
    if (v117 >= 0) {
      __int16 v31 = __p;
    }
    else {
      __int16 v31 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67114242;
    int v119 = v25;
    __int16 v120 = 2048;
    double v121 = v8;
    __int16 v122 = 1024;
    int v123 = v26;
    __int16 v124 = 1024;
    int v125 = v27;
    __int16 v126 = 1024;
    int v127 = v28;
    __int16 v128 = 1024;
    int v129 = v26 - v28;
    __int16 v130 = 1024;
    int v131 = v87;
    __int16 v132 = 1024;
    int v133 = v91;
    __int16 v134 = 1024;
    int v135 = v95;
    __int16 v136 = 1024;
    int v137 = v99;
    __int16 v138 = 1024;
    int v139 = v105;
    __int16 v140 = 1024;
    int v141 = v30;
    __int16 v142 = 1024;
    int v143 = v83;
    __int16 v144 = 1024;
    *(_DWORD *)v145 = v85;
    *(_WORD *)&v145[4] = 1024;
    *(_DWORD *)&v145[6] = v89;
    __int16 v146 = 1024;
    *(_DWORD *)v147 = v93;
    *(_WORD *)&v147[4] = 1024;
    *(_DWORD *)&v147[6] = v97;
    __int16 v148 = 1024;
    int v149 = v102;
    __int16 v150 = 1024;
    int v151 = v113;
    __int16 v152 = 1024;
    int v153 = v109;
    __int16 v154 = 2080;
    *(void *)v155 = v31;
    __int16 v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d / %3d), NAK = %4d, NoSync = %4d, TxPwr = %2d dBm, RSSI"
          " = %4d, {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts = %3d, 3EDR pkts = %3d, HDR4 pkts = %3d, HDR8"
          " pkts = %3d, CoexDenial = %3d, CoexRequest = %3d, rate = %3d kbps Flow off = %d devicename = %s";
    uint64_t v21 = (os_log_s *)v24;
    uint32_t v22 = 136;
    goto LABEL_36;
  }

  uint64_t v32 = sub_1002E6BF0();
  int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 816LL))(v32);
  uint64_t v34 = qword_1008F7570;
  BOOL v35 = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT);
  if (!v33)
  {
    if (!v35) {
      return;
    }
    int v115 = a4;
    int v53 = *(unsigned __int16 *)(a3 + 2);
    int v54 = *(unsigned __int16 *)(a3 + 18);
    int v55 = *(unsigned __int16 *)(a3 + 16);
    int v56 = *(char *)(a3 + 9);
    int v57 = *(char *)(a3 + 6);
    int v58 = *(char *)(a3 + 217);
    int v59 = *(char *)(a3 + 218);
    int v60 = *(char *)(a3 + 219);
    uint64_t v61 = 222LL;
    int v62 = *(unsigned __int8 *)(a3 + v61);
    int v63 = *(unsigned __int16 *)(a3 + 14);
    int v64 = *(unsigned __int16 *)(a3 + 177);
    if (a5)
    {
      uint64_t v65 = a5;
      int v66 = *(char *)(a3 + 219);
      int v107 = *(unsigned __int16 *)(a3 + 14);
      int v111 = *(unsigned __int16 *)(a3 + 177);
      int v67 = *(unsigned __int8 *)(a3 + v61);
      sub_1003D01A0(v65, (uint64_t)__p);
      int v68 = __p;
      if (v117 < 0) {
        int v68 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67112450;
      int v119 = v53;
      __int16 v120 = 2048;
      double v121 = v8;
      __int16 v122 = 1024;
      int v123 = v54;
      __int16 v124 = 1024;
      int v125 = v55;
      __int16 v126 = 1024;
      int v127 = v56;
      __int16 v128 = 1024;
      int v129 = v57;
      __int16 v130 = 1024;
      int v131 = v58;
      __int16 v132 = 1024;
      int v133 = v59;
      __int16 v134 = 1024;
      int v135 = v66;
      __int16 v136 = 1024;
      int v137 = v67;
      __int16 v138 = 1024;
      int v139 = v107;
      __int16 v140 = 1024;
      int v141 = v115;
      __int16 v142 = 1024;
      int v143 = v111;
      __int16 v144 = 2080;
      *(void *)v145 = v68;
      __int16 v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), TxPwr =%2d dBm, RSSI =%4d, {50,75,90}th Noise"
            " = {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
      uint64_t v21 = (os_log_s *)v34;
      uint32_t v22 = 94;
      goto LABEL_36;
    }

    *(_DWORD *)buf = 67112450;
    int v119 = v53;
    __int16 v120 = 2048;
    double v121 = v8;
    __int16 v122 = 1024;
    int v123 = v54;
    __int16 v124 = 1024;
    int v125 = v55;
    __int16 v126 = 1024;
    int v127 = v56;
    __int16 v128 = 1024;
    int v129 = v57;
    __int16 v130 = 1024;
    int v131 = v58;
    __int16 v132 = 1024;
    int v133 = v59;
    __int16 v134 = 1024;
    int v135 = v60;
    __int16 v136 = 1024;
    int v137 = v62;
    __int16 v138 = 1024;
    int v139 = v63;
    __int16 v140 = 1024;
    int v141 = v115;
    __int16 v142 = 1024;
    int v143 = v64;
    __int16 v144 = 2080;
    *(void *)v145 = "(NULL)";
    v69 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), TxPwr =%2d dBm, RSSI =%4d, {50,75,90}th Noise ="
          " {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
    uint64_t v70 = (os_log_s *)v34;
    uint32_t v71 = 94;
LABEL_40:
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, v69, buf, v71);
    return;
  }

  if (!v35) {
    return;
  }
  int v114 = a4;
  int v36 = *(unsigned __int16 *)(a3 + 2);
  int v37 = *(unsigned __int16 *)(a3 + 18);
  int v38 = *(unsigned __int16 *)(a3 + 16);
  int v39 = *(unsigned __int16 *)(a3 + 179);
  int v40 = *(char *)(a3 + 9);
  int v41 = *(char *)(a3 + 6);
  int v42 = *(char *)(a3 + 217);
  int v43 = *(char *)(a3 + 218);
  int v44 = *(char *)(a3 + 219);
  uint64_t v45 = 222LL;
  int v46 = *(unsigned __int8 *)(a3 + v45);
  int v47 = *(unsigned __int16 *)(a3 + 14);
  int v48 = *(unsigned __int16 *)(a3 + 177);
  if (!a5)
  {
    *(_DWORD *)buf = 67112962;
    int v119 = v36;
    __int16 v120 = 2048;
    double v121 = v8;
    __int16 v122 = 1024;
    int v123 = v37;
    __int16 v124 = 1024;
    int v125 = v38;
    __int16 v126 = 1024;
    int v127 = v39;
    __int16 v128 = 1024;
    int v129 = v37 - v39;
    __int16 v130 = 1024;
    int v131 = v40;
    __int16 v132 = 1024;
    int v133 = v41;
    __int16 v134 = 1024;
    int v135 = v42;
    __int16 v136 = 1024;
    int v137 = v43;
    __int16 v138 = 1024;
    int v139 = v44;
    __int16 v140 = 1024;
    int v141 = v46;
    __int16 v142 = 1024;
    int v143 = v47;
    __int16 v144 = 1024;
    *(_DWORD *)v145 = v114;
    *(_WORD *)&v145[4] = 1024;
    *(_DWORD *)&v145[6] = v48;
    __int16 v146 = 2080;
    *(void *)v147 = "(NULL)";
    v69 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), NAK =%4d, NoSync =%4d, TxPwr =%2d dBm, RSSI =%4"
          "d, {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
    uint64_t v70 = (os_log_s *)v34;
    uint32_t v71 = 106;
    goto LABEL_40;
  }

  uint64_t v49 = a5;
  int v106 = *(unsigned __int16 *)(a3 + 14);
  int v110 = *(unsigned __int16 *)(a3 + 177);
  int v100 = *(char *)(a3 + 219);
  int v103 = *(unsigned __int8 *)(a3 + v45);
  int v50 = *(char *)(a3 + 218);
  int v51 = *(char *)(a3 + 9);
  sub_1003D01A0(v49, (uint64_t)__p);
  unint64_t v52 = __p;
  if (v117 < 0) {
    unint64_t v52 = (void **)__p[0];
  }
  *(_DWORD *)buf = 67112962;
  int v119 = v36;
  __int16 v120 = 2048;
  double v121 = v8;
  __int16 v122 = 1024;
  int v123 = v37;
  __int16 v124 = 1024;
  int v125 = v38;
  __int16 v126 = 1024;
  int v127 = v39;
  __int16 v128 = 1024;
  int v129 = v37 - v39;
  __int16 v130 = 1024;
  int v131 = v51;
  __int16 v132 = 1024;
  int v133 = v41;
  __int16 v134 = 1024;
  int v135 = v42;
  __int16 v136 = 1024;
  int v137 = v50;
  __int16 v138 = 1024;
  int v139 = v100;
  __int16 v140 = 1024;
  int v141 = v103;
  __int16 v142 = 1024;
  int v143 = v106;
  __int16 v144 = 1024;
  *(_DWORD *)v145 = v114;
  *(_WORD *)&v145[4] = 1024;
  *(_DWORD *)&v145[6] = v110;
  __int16 v146 = 2080;
  *(void *)v147 = v52;
  __int16 v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), NAK =%4d, NoSync =%4d, TxPwr =%2d dBm, RSSI =%4d,"
        " {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
  uint64_t v21 = (os_log_s *)v34;
  uint32_t v22 = 106;
LABEL_36:
  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
  if (v117 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t *sub_10049F768(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v41 = a2;
  unsigned int v4 = (uint64_t **)(a1 + 192);
  int v42 = &v41;
  int v42 = &v41;
  uint64_t v5 = *(void *)(sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42)[5] + 8);
  *(void *)(v5 + 192) += *(char *)(a3 + 6);
  ++*(_DWORD *)(v5 + 200);
  int v42 = &v41;
  uint64_t v6 = *(void *)(sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42)[5] + 8);
  int v7 = *(char *)(a3 + 7);
  if (*(_DWORD *)(v6 + 204) > v7) {
    *(_DWORD *)(v6 + 204) = v7;
  }
  int v42 = &v41;
  uint64_t v8 = *(void *)(sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42)[5] + 8);
  int v9 = *(char *)(a3 + 8);
  if (*(_DWORD *)(v8 + 208) < v9) {
    *(_DWORD *)(v8 + 20_Block_object_dispose(va, 8) = v9;
  }
  int v42 = &v41;
  uint64_t v10 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v10[5] + 8) + 96LL) += *(unsigned __int16 *)(a3 + 34);
  int v42 = &v41;
  uint64_t v11 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v11[5] + 8) + 100LL) += *(unsigned __int16 *)(a3 + 58);
  int v42 = &v41;
  int v12 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v12[5] + 8) + 104LL) += *(unsigned __int16 *)(a3 + 46);
  int v42 = &v41;
  int v13 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v13[5] + 8) + 108LL) += *(unsigned __int16 *)(a3 + 70);
  int v42 = &v41;
  int v14 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v14[5] + 8) + 112LL) += *(unsigned __int16 *)(a3 + 40)
  int v42 = &v41;
  int v15 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v15[5] + 8) + 116LL) += *(unsigned __int16 *)(a3 + 64) + 2 * *(unsigned __int16 *)(a3 + 74);
  int v42 = &v41;
  uint64_t v16 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v16[5] + 8) + 120LL) += *(unsigned __int16 *)(a3 + 36) + *(unsigned __int16 *)(a3 + 32);
  int v42 = &v41;
  int v17 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v17[5] + 8) + 124LL) += *(unsigned __int16 *)(a3 + 60) + *(unsigned __int16 *)(a3 + 56);
  int v42 = &v41;
  int v18 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v18[5] + 8) + 128LL) += *(unsigned __int16 *)(a3 + 44);
  int v42 = &v41;
  __int16 v19 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  *(_DWORD *)(*(void *)(v19[5] + 8) + 132LL) += *(unsigned __int16 *)(a3 + 68);
  if (*(_WORD *)(a3 + 70))
  {
    int v42 = &v41;
    __int16 v20 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
    LOWORD(v21) = *(_WORD *)(a3 + 70);
    *(_DWORD *)(*(void *)(v20[5] + 8) + 216LL) = (float)((float)((float)(*(unsigned __int16 *)(a3 + 64)
                                                                                       + 2
                                                                                       * *(unsigned __int16 *)(a3 + 74))
                                                                               * 100.0)
                                                                       / (float)v21);
    int v42 = &v41;
    uint32_t v22 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
    LOWORD(v23) = *(_WORD *)(a3 + 70);
    *(_DWORD *)(*(void *)(v22[5] + 8) + 220LL) = (float)((float)((float)(*(unsigned __int16 *)(a3 + 60)
                                                                                       + *(unsigned __int16 *)(a3 + 56))
                                                                               * 100.0)
                                                                       / (float)v23);
  }

  int v42 = &v41;
  double result = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
  if (*(_BYTE *)(*(void *)(result[5] + 8) + 237LL))
  {
    if (*(_BYTE *)(v41 + 1373))
    {
      int v42 = &v41;
      int v25 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
      ++*(_DWORD *)(*(void *)(v25[5] + 8) + 244LL);
    }

    else
    {
      int v42 = &v41;
      int v26 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
      ++*(_DWORD *)(*(void *)(v26[5] + 8) + 240LL);
    }

    uint64_t v27 = *(unsigned __int16 *)(a3 + 12);
    int v42 = &v41;
    int v28 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
    *(void *)(*(void *)(v28[5] + 8) + 248LL) += v27;
    uint64_t v29 = *(unsigned __int16 *)(a3 + 18);
    int v42 = &v41;
    int v30 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
    *(void *)(*(void *)(v30[5] + 8) + 256LL) += v29;
    uint64_t v31 = *(unsigned __int16 *)(a3 + 211);
    int v42 = &v41;
    uint64_t v32 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
    *(void *)(*(void *)(v32[5] + 8) + 264LL) += v31;
    uint64_t v33 = *(unsigned __int16 *)(a3 + 213);
    int v42 = &v41;
    uint64_t v34 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
    *(void *)(*(void *)(v34[5] + 8) + 272LL) += v33;
    uint64_t v35 = *(unsigned __int16 *)(a3 + 16);
    int v42 = &v41;
    int v36 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
    *(void *)(*(void *)(v36[5] + 8) + 280LL) += v35;
    int v42 = &v41;
    double v37 = (double)*(unint64_t *)(*(void *)(sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42)[5]
                                                  + 8)
                                      + 256LL);
    int v42 = &v41;
    LODWORD(v35) = (v37
                                / (double)*(unint64_t *)(*(void *)(sub_100029574( v4,  &v41,  (uint64_t)&unk_1006C2518,  (uint64_t **)&v42)[5] + 8)
                                                              + 280LL)
                                * 100.0);
    int v42 = &v41;
    *(_DWORD *)(*(void *)(sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42)[5] + 8) + 216LL) = v35;
    uint64_t v38 = *(unsigned __int16 *)(a3 + 20);
    int v42 = &v41;
    int v39 = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
    *(void *)(*(void *)(v39[5] + 8) + 288LL) += v38;
    uint64_t v40 = *(unsigned __int16 *)(a3 + 22);
    int v42 = &v41;
    double result = sub_100029574(v4, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)&v42);
    *(void *)(*(void *)(result[5] + 8) + 296LL) += v40;
  }

  return result;
}

void sub_10049FE28(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v64 = 0LL;
  uint64_t v65 = 0LL;
  sub_1004B03E8(a1, a3, (unsigned int *)&v65 + 1, (unsigned int *)&v65, (unsigned int *)&v64, (_DWORD *)&v64 + 1, a2);
  uint64_t v5 = sub_1002E6E9C();
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 2480LL))(v5);
  uint64_t v7 = qword_1008F7570;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (!v8) {
      return;
    }
    int v36 = *(char *)(a2 + 6);
    int v37 = *(char *)(a2 + 9);
    int v38 = v65;
    int v39 = HIDWORD(v65);
    unsigned int v40 = *(unsigned __int16 *)(a2 + 46);
    double v41 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 40)
                                + *(unsigned __int16 *)(a2 + 28)
                                + *(unsigned __int16 *)(a2 + 50))
                        * 100.0)
                / (float)v40);
    unsigned int v42 = *(unsigned __int16 *)(a2 + 70);
    double v43 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 64)
                                + *(unsigned __int16 *)(a2 + 52)
                                + *(unsigned __int16 *)(a2 + 74))
                        * 100.0)
                / (float)v42);
    double v44 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 36) + *(unsigned __int16 *)(a2 + 32)) * 100.0) / (float)v40);
    double v45 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 60) + *(unsigned __int16 *)(a2 + 56)) * 100.0) / (float)v42);
    unsigned int v46 = *(unsigned __int16 *)(a2 + 44);
    double v47 = (float)((float)((float)(int)(*(unsigned __int16 *)(a2 + 68) + v46) * 100.0) / (float)(int)(v42 + v40));
    double v48 = (float)((float)((float)v46 * 100.0) / (float)v40);
    int v49 = *(char *)(a2 + 217);
    int v50 = *(char *)(a2 + 218);
    int v51 = *(char *)(a2 + 219);
    int v52 = *(unsigned __int8 *)(a2 + 220);
    if (a3)
    {
      uint64_t v53 = a3;
      int v54 = HIDWORD(v64);
      int v55 = *(char *)(a2 + 9);
      int v56 = v51;
      sub_1003D01A0(v53, (uint64_t)__p);
      int v57 = __p;
      if (v63 < 0) {
        int v57 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67112962;
      int v67 = v36;
      __int16 v68 = 1024;
      int v69 = v55;
      __int16 v70 = 1024;
      int v71 = v39;
      __int16 v72 = 1024;
      int v73 = v38;
      __int16 v74 = 1024;
      int v75 = v54;
      __int16 v76 = 2048;
      double v77 = v41;
      __int16 v78 = 2048;
      double v79 = v43;
      __int16 v80 = 2048;
      double v81 = v44;
      __int16 v82 = 2048;
      double v83 = v45;
      __int16 v84 = 2048;
      double v85 = v47;
      __int16 v86 = 2048;
      double v87 = v48;
      __int16 v88 = 1024;
      int v89 = v49;
      __int16 v90 = 1024;
      int v91 = v50;
      __int16 v92 = 1024;
      int v93 = v56;
      __int16 v94 = 1024;
      int v95 = v52;
      __int16 v96 = 2080;
      *(void *)int v97 = v57;
      uint64_t v33 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX "
            "[TX: %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%"
            ", 50/75/90th Noise = (%4d,%4d,%4d) for %2d ch devicename= %s";
      uint64_t v34 = (os_log_s *)v7;
      uint32_t v35 = 126;
      goto LABEL_12;
    }

    *(_DWORD *)buf = 67112962;
    int v67 = v36;
    __int16 v68 = 1024;
    int v69 = v37;
    __int16 v70 = 1024;
    int v71 = HIDWORD(v65);
    __int16 v72 = 1024;
    int v73 = v65;
    __int16 v74 = 1024;
    int v75 = HIDWORD(v64);
    __int16 v76 = 2048;
    double v77 = v41;
    __int16 v78 = 2048;
    double v79 = v43;
    __int16 v80 = 2048;
    double v81 = v44;
    __int16 v82 = 2048;
    double v83 = v45;
    __int16 v84 = 2048;
    double v85 = v47;
    __int16 v86 = 2048;
    double v87 = (float)((float)((float)v46 * 100.0) / (float)v40);
    __int16 v88 = 1024;
    int v89 = v49;
    __int16 v90 = 1024;
    int v91 = v50;
    __int16 v92 = 1024;
    int v93 = v51;
    __int16 v94 = 1024;
    int v95 = v52;
    __int16 v96 = 2080;
    *(void *)int v97 = "(NULL)";
    int v58 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX [T"
          "X: %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%, 50"
          "/75/90th Noise = (%4d,%4d,%4d) for %2d ch devicename= %s";
    int v59 = (os_log_s *)v7;
    uint32_t v60 = 126;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, v58, buf, v60);
    return;
  }

  if (!v8) {
    return;
  }
  int v9 = *(char *)(a2 + 6);
  int v10 = *(char *)(a2 + 9);
  int v11 = v65;
  unsigned int v12 = *(unsigned __int16 *)(a2 + 46);
  float v13 = (float)v12;
  double v14 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 40)
                              + *(unsigned __int16 *)(a2 + 28)
                              + *(unsigned __int16 *)(a2 + 50))
                      * 100.0)
              / (float)v12);
  unsigned int v15 = *(unsigned __int16 *)(a2 + 70);
  double v16 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 64)
                              + *(unsigned __int16 *)(a2 + 52)
                              + *(unsigned __int16 *)(a2 + 74))
                      * 100.0)
              / (float)v15);
  double v17 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 36) + *(unsigned __int16 *)(a2 + 32)) * 100.0) / (float)v12);
  double v18 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 60) + *(unsigned __int16 *)(a2 + 56)) * 100.0) / (float)v15);
  unsigned int v19 = *(unsigned __int16 *)(a2 + 44);
  int v20 = *(unsigned __int16 *)(a2 + 68) + v19;
  int v21 = v15 + v12;
  double v22 = (float)((float)((float)v20 * 100.0) / (float)v21);
  double v23 = (float)((float)((float)v19 * 100.0) / v13);
  int v24 = *(char *)(a2 + 217);
  int v25 = *(char *)(a2 + 218);
  int v26 = *(char *)(a2 + 219);
  int v27 = *(unsigned __int8 *)(a2 + 220);
  int v28 = *(unsigned __int16 *)(a2 + 215);
  if (!a3)
  {
    *(_DWORD *)buf = 67113218;
    int v67 = v9;
    __int16 v68 = 1024;
    int v69 = v10;
    __int16 v70 = 1024;
    int v71 = HIDWORD(v65);
    __int16 v72 = 1024;
    int v73 = v65;
    __int16 v74 = 1024;
    int v75 = HIDWORD(v64);
    __int16 v76 = 2048;
    double v77 = v14;
    __int16 v78 = 2048;
    double v79 = v16;
    __int16 v80 = 2048;
    double v81 = v17;
    __int16 v82 = 2048;
    double v83 = v18;
    __int16 v84 = 2048;
    double v85 = (float)((float)((float)v20 * 100.0) / (float)v21);
    __int16 v86 = 2048;
    double v87 = v23;
    __int16 v88 = 1024;
    int v89 = v24;
    __int16 v90 = 1024;
    int v91 = v25;
    __int16 v92 = 1024;
    int v93 = v26;
    __int16 v94 = 1024;
    int v95 = v27;
    __int16 v96 = 1024;
    *(_DWORD *)int v97 = v28;
    *(_WORD *)&v97[4] = 2080;
    *(void *)&v97[6] = "(NULL)";
    int v58 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX [T"
          "X: %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%, 50"
          "/75/90th Noise = (%4d,%4d,%4d) for %2d, eSCONak pkts = %3d, ch devicename= %s";
    int v59 = (os_log_s *)v7;
    uint32_t v60 = 132;
    goto LABEL_16;
  }

  uint64_t v29 = a3;
  int v30 = HIDWORD(v64);
  int v31 = HIDWORD(v65);
  int v61 = v28;
  sub_1003D01A0(v29, (uint64_t)__p);
  uint64_t v32 = __p;
  if (v63 < 0) {
    uint64_t v32 = (void **)__p[0];
  }
  *(_DWORD *)buf = 67113218;
  int v67 = v9;
  __int16 v68 = 1024;
  int v69 = v10;
  __int16 v70 = 1024;
  int v71 = v31;
  __int16 v72 = 1024;
  int v73 = v11;
  __int16 v74 = 1024;
  int v75 = v30;
  __int16 v76 = 2048;
  double v77 = v14;
  __int16 v78 = 2048;
  double v79 = v16;
  __int16 v80 = 2048;
  double v81 = v17;
  __int16 v82 = 2048;
  double v83 = v18;
  __int16 v84 = 2048;
  double v85 = v22;
  __int16 v86 = 2048;
  double v87 = v23;
  __int16 v88 = 1024;
  int v89 = v24;
  __int16 v90 = 1024;
  int v91 = v25;
  __int16 v92 = 1024;
  int v93 = v26;
  __int16 v94 = 1024;
  int v95 = v27;
  __int16 v96 = 1024;
  *(_DWORD *)int v97 = v61;
  *(_WORD *)&v97[4] = 2080;
  *(void *)&v97[6] = v32;
  uint64_t v33 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX [TX:"
        " %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%, 50/75/"
        "90th Noise = (%4d,%4d,%4d) for %2d, eSCONak pkts = %3d, ch devicename= %s";
  uint64_t v34 = (os_log_s *)v7;
  uint32_t v35 = 132;
LABEL_12:
  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v33, buf, v35);
  if (v63 < 0) {
    operator delete(__p[0]);
  }
}

double sub_1004A0474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = a2;
  uint64_t v5 = (uint64_t **)(a1 + 192);
  double v16 = &v15;
  if (*(void *)(sub_100029574((uint64_t **)(a1 + 192), &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16)[5] + 16))
  {
    double v16 = &v15;
    if (*(void *)sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16)[5])
    {
      double v16 = &v15;
      if (*(_DWORD *)(*(void *)(sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16)[5] + 16) + 180LL))
      {
        if (*(_WORD *)(a3 + 16)) {
          unsigned int v7 = 100 * *(unsigned __int16 *)(a3 + 18) / *(unsigned __int16 *)(a3 + 16);
        }
        else {
          unsigned int v7 = 0;
        }
        double v16 = &v15;
        uint64_t v8 = *(void *)(sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16)[5] + 16);
        *(_DWORD *)(v8 + 172) += v7;
        ++*(_DWORD *)(v8 + 148);
        double v16 = &v15;
        uint64_t v9 = *(void *)(sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16)[5] + 16);
        *(_DWORD *)(v9 + 176) += *(char *)(a3 + 6);
        ++*(_DWORD *)(v9 + 168);
        double v16 = &v15;
        uint64_t v10 = *(void *)(sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16)[5] + 16);
        int v11 = *(char *)(a3 + 7);
        if (*(_DWORD *)(v10 + 160) > v11) {
          *(_DWORD *)(v10 + 160) = v11;
        }
        double v16 = &v15;
        uint64_t v12 = *(void *)(sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16)[5] + 16);
        int v13 = *(char *)(a3 + 8);
        if (*(_DWORD *)(v12 + 156) < v13) {
          *(_DWORD *)(v12 + 156) = v13;
        }
      }

      double v16 = &v15;
      double v14 = sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16);
      ++*(_DWORD *)(*(void *)(v14[5] + 16) + 184LL);
      double v16 = &v15;
    }
  }

  return result;
}

double sub_1004A06DC(uint64_t a1, uint64_t a2)
{
  unint64_t v10 = a2;
  __int128 v3 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Trigger A2dpPacketFlush metrics", buf, 2u);
  }

  unsigned int v4 = (uint64_t **)(a1 + 192);
  *(void *)buf = &v10;
  if (*(_BYTE *)(sub_100029574((uint64_t **)(a1 + 192), &v10, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 72))
  {
    *(void *)buf = &v10;
    if (*(_DWORD *)(sub_100029574((uint64_t **)(a1 + 192), &v10, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 76) == 2)
    {
      *(void *)buf = &v10;
      if (*(_DWORD *)(*(void *)(sub_100029574((uint64_t **)(a1 + 192), &v10, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                                 + 16)
                     + 180LL) >= 0xAu)
      {
        sub_1004B4CC0(a1, v10);
        uint64_t v5 = sub_1002E8D94();
        *(void *)buf = &v10;
        int v6 = sub_100029574(v4, &v10, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        (*(void (**)(uint64_t, void))(*(void *)v5 + 88LL))(v5, *(void *)(v6[5] + 16));
        *(void *)buf = &v10;
        if (*(void *)sub_100029574(v4, &v10, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5])
        {
          *(void *)buf = &v10;
          unsigned int v7 = sub_100029574(v4, &v10, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
          ++*(_DWORD *)(*(void *)v7[5] + 256LL);
        }
      }
    }
  }

  *(void *)buf = &v10;
  uint64_t v8 = *(void *)(sub_100029574(v4, &v10, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 16);
  *(_DWORD *)(v8 + 14_Block_object_dispose(va, 8) = 0;
  *(void *)(v8 + 156) = 4294967169LL;
  *(void *)(v8 + 16_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v8 + 176) = 0LL;
  *(_DWORD *)(v8 + 184) = 0;
  double result = *(double *)"";
  *(_OWORD *)uint64_t v8 = *(_OWORD *)"";
  *(_OWORD *)(v8 + 16) = xmmword_1006C3550;
  *(_DWORD *)(v8 + 32) = 0;
  return result;
}

void sub_1004A08FC(uint64_t a1, __int128 *a2, int *a3)
{
  v15[0] = 0LL;
  v15[1] = v15;
  void v15[2] = 0x10C12000000LL;
  v15[3] = sub_1004A0AA4;
  v15[4] = nullsub_442;
  void v15[5] = &unk_1007C41D6;
  __int128 v4 = a2[11];
  __int128 v26 = a2[10];
  __int128 v27 = v4;
  v28[0] = a2[12];
  *(_OWORD *)((char *)v28 + 12) = *(__int128 *)((char *)a2 + 204);
  __int128 v5 = a2[7];
  __int128 v22 = a2[6];
  __int128 v23 = v5;
  __int128 v6 = a2[9];
  __int128 v24 = a2[8];
  __int128 v25 = v6;
  __int128 v7 = a2[3];
  __int128 v18 = a2[2];
  __int128 v19 = v7;
  __int128 v8 = a2[5];
  __int128 v20 = a2[4];
  __int128 v21 = v8;
  __int128 v9 = a2[1];
  __int128 v16 = *a2;
  __int128 v17 = v9;
  int v13 = *a3;
  __int16 v14 = *((_WORD *)a3 + 2);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089BD30);
  }
  unint64_t v10 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v13, 0);
  int v11 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A0AEC;
  block[3] = &unk_10087FEE0;
  void block[5] = a1;
  block[6] = v10;
  void block[4] = v15;
  dispatch_async(v11, block);
  _Block_object_dispose(v15, 8);
}

void sub_1004A0A8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

__n128 sub_1004A0AA4(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 80);
  __int128 v4 = *(_OWORD *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 144);
  __int128 v7 = *(_OWORD *)(a2 + 160);
  __int128 v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  __n128 result = *(__n128 *)(a2 + 208);
  __int128 v10 = *(_OWORD *)(a2 + 224);
  __int128 v11 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 252) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 2sub_100242E28(v1 + 40) = v11;
  *(__n128 *)(a1 + 20_Block_object_dispose(va, 8) = result;
  return result;
}

void sub_1004A0AEC(void *a1)
{
  unint64_t v1 = a1[6];
  if (v1)
  {
    uint64_t v3 = a1[5];
    __int128 v4 = *(void **)(v3 + 200);
    if (v4)
    {
      __int128 v5 = (void *)(v3 + 200);
      do
      {
        unint64_t v6 = v4[4];
        BOOL v7 = v6 >= v1;
        if (v6 >= v1) {
          __int128 v8 = v4;
        }
        else {
          __int128 v8 = v4 + 1;
        }
        if (v7) {
          __int128 v5 = v4;
        }
        __int128 v4 = (void *)*v8;
      }

      while (*v8);
      if (v5 != (void *)(v3 + 200) && v1 >= v5[4])
      {
        uint64_t v9 = sub_1002E6E00();
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 288LL))(v9);
        if ((v10 & 1) == 0)
        {
          *(_BYTE *)(v3 + 934) = *(_BYTE *)(*(void *)(a1[4] + 8LL) + 220LL);
          uint64_t v11 = *(void *)(a1[4] + 8LL);
          __int128 v12 = *(_OWORD *)(v11 + 221);
          __int128 v13 = *(_OWORD *)(v11 + 237);
          *(_OWORD *)(v3 + 966) = *(_OWORD *)(v11 + 252);
          *(_OWORD *)(v3 + 935) = v12;
          *(_OWORD *)(v3 + 951) = v13;
          sub_1004A0BB4(v10, (unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 48LL), a1[6]);
        }
      }
    }
  }

void sub_1004A0BB4(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  &stru_1008A57D8));
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  &stru_1008A57D8));
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  &stru_1008A57D8));
  char v8 = *((_BYTE *)a2 + 172);
  if ((v8 & 1) != 0)
  {
    [v5 appendString:@"ISM 2.4"];
    char v8 = *((_BYTE *)a2 + 172);
  }

  if ((v8 & 2) != 0)
  {
    [v5 appendString:@"UNII-1 "];
    char v8 = *((_BYTE *)a2 + 172);
  }

  if ((v8 & 4) != 0)
  {
    [v5 appendString:@"UNII-3 "];
    char v8 = *((_BYTE *)a2 + 172);
  }

  if ((v8 & 8) != 0)
  {
    [v5 appendString:@"UNII-4 "];
    char v8 = *((_BYTE *)a2 + 172);
  }

  if ((v8 & 0x10) != 0)
  {
    [v5 appendString:@"UNII-5A "];
    char v8 = *((_BYTE *)a2 + 172);
  }

  if ((v8 & 0x20) != 0)
  {
    [v5 appendString:@"UNII-5B "];
    char v8 = *((_BYTE *)a2 + 172);
  }

  if ((v8 & 0x40) != 0)
  {
    [v5 appendString:@"UNII-5C "];
    char v8 = *((_BYTE *)a2 + 172);
  }

  if (v8 < 0) {
    [v5 appendString:@"UNII-5D "];
  }
  for (uint64_t i = 2LL; i != 12; ++i)
    [v6 appendFormat:@"%02X "];
  do
  {
    [v7 appendFormat:@"%d ", *(unsigned __int16 *)((char *)a2 + i)];
    i += 2LL;
  }

  while (i != 172);
  uint64_t v10 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *a2;
    sub_1003D01A0(a3, (uint64_t)__p);
    if (v14 >= 0) {
      __int128 v12 = __p;
    }
    else {
      __int128 v12 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110146;
    int v16 = v11;
    __int16 v17 = 2112;
    __int128 v18 = v5;
    __int16 v19 = 2112;
    __int128 v20 = v6;
    __int16 v21 = 2112;
    __int128 v22 = v7;
    __int16 v23 = 2080;
    __int128 v24 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "A2DP HRB LinkQualityReport: Handle = %d, band = %@, AFH Channel Map: [%@], AFH Frequency Map: [%@], devicename = %s",  buf,  0x30u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1004A0E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004A0E74(uint64_t a1, __int128 *a2, int *a3)
{
  v14[0] = 0LL;
  v14[1] = v14;
  _DWORD v14[2] = 0xF012000000LL;
  v14[3] = sub_1004A1008;
  v14[4] = nullsub_443;
  v14[5] = &unk_1007C41D6;
  __int128 v4 = a2[9];
  __int128 v23 = a2[8];
  __int128 v24 = v4;
  v25[0] = a2[10];
  *(_OWORD *)((char *)v25 + 13) = *(__int128 *)((char *)a2 + 173);
  __int128 v5 = a2[5];
  __int128 v19 = a2[4];
  __int128 v20 = v5;
  __int128 v6 = a2[7];
  __int128 v21 = a2[6];
  __int128 v22 = v6;
  __int128 v7 = a2[1];
  __int128 v15 = *a2;
  __int128 v16 = v7;
  __int128 v8 = a2[3];
  __int128 v17 = a2[2];
  __int128 v18 = v8;
  int v12 = *a3;
  __int16 v13 = *((_WORD *)a3 + 2);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089BD30);
  }
  uint64_t v9 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v12, 0);
  uint64_t v10 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A1048;
  block[3] = &unk_10087FEE0;
  void block[5] = a1;
  block[6] = v9;
  void block[4] = v14;
  dispatch_async(v10, block);
  _Block_object_dispose(v14, 8);
}

void sub_1004A0FF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

__n128 sub_1004A1008(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 64);
  __int128 v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v2;
  *(_OWORD *)(a1 + 64) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 112);
  __int128 v6 = *(_OWORD *)(a2 + 128);
  __int128 v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v6;
  __n128 result = *(__n128 *)(a2 + 176);
  __int128 v9 = *(_OWORD *)(a2 + 192);
  __int128 v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 221) = *(_OWORD *)(a2 + 221);
  *(_OWORD *)(a1 + 192) = v9;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = v10;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

void sub_1004A1048(void *a1)
{
  unint64_t v1 = a1[6];
  if (v1)
  {
    uint64_t v3 = a1[5];
    __int128 v6 = *(void **)(v3 + 200);
    __int128 v4 = (void *)(v3 + 200);
    __int128 v5 = v6;
    if (v6)
    {
      __int128 v7 = v4;
      do
      {
        unint64_t v8 = v5[4];
        BOOL v9 = v8 >= v1;
        if (v8 >= v1) {
          __int128 v10 = v5;
        }
        else {
          __int128 v10 = v5 + 1;
        }
        if (v9) {
          __int128 v7 = v5;
        }
        __int128 v5 = (void *)*v10;
      }

      while (*v10);
      if (v7 != v4 && v1 >= v7[4])
      {
        uint64_t v11 = sub_1002E6E00();
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 288LL))(v11);
        if ((v12 & 1) == 0) {
          sub_1004A10DC(v12, (unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 48LL), a1[6]);
        }
      }
    }
  }

void sub_1004A10DC(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v4 = 0LL;
  char v5 = *((_BYTE *)a2 + 9);
  char v6 = *((_BYTE *)a2 + 39);
  char v7 = v6;
  char v8 = v5;
  do
  {
    int v9 = *((char *)a2 + v4 + 10);
    if (v9 < v8) {
      char v8 = *((_BYTE *)a2 + v4 + 10);
    }
    if (v9 > v5) {
      char v5 = *((_BYTE *)a2 + v4 + 10);
    }
    int v10 = *((char *)a2 + v4 + 40);
    if (v10 < v7) {
      char v7 = *((_BYTE *)a2 + v4 + 40);
    }
    if (v10 > v6) {
      char v6 = *((_BYTE *)a2 + v4 + 40);
    }
    ++v4;
  }

  while (v4 != 29);
  uint64_t v11 = 0LL;
  unsigned __int8 v12 = 0;
  unsigned __int8 v13 = 0;
  unsigned __int8 v14 = 0;
  unsigned __int8 v15 = 0;
  unsigned __int8 v16 = 0;
  unsigned __int8 v17 = 0;
  unsigned __int8 v18 = 0;
  unsigned __int8 v19 = 0;
  do
  {
    switch(HIBYTE(a2[v11 + 34]))
    {
      case 0:
        ++v19;
        break;
      case 1:
        ++v18;
        break;
      case 2:
        ++v17;
        break;
      case 3:
        ++v16;
        break;
      default:
        break;
    }

    switch(LOBYTE(a2[v11 + 35]))
    {
      case 0:
        ++v15;
        break;
      case 1:
        ++v14;
        break;
      case 2:
        ++v13;
        break;
      case 3:
        ++v12;
        break;
      default:
        break;
    }

    ++v11;
  }

  while ((unint64_t)(v11 * 2 - 2) < 0x39);
  unsigned __int8 v41 = v18;
  unsigned __int8 v43 = v17;
  unsigned __int8 v45 = v16;
  log = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *(unsigned __int16 *)((char *)a2 + 7);
    int v21 = *a2;
    int v22 = v5;
    int v23 = v15;
    int v24 = *(unsigned __int16 *)((char *)a2 + 3);
    int v25 = v7;
    int v26 = v6;
    int v27 = *(unsigned __int16 *)((char *)a2 + 5);
    int v28 = v41;
    int v29 = v45;
    uint64_t v30 = a3;
    if (a3)
    {
      int v46 = v43;
      int v48 = v29;
      int v42 = v19;
      int v44 = v28;
      int v38 = v13;
      int v39 = v12;
      int v31 = v14;
      int v32 = v23;
      int v33 = v21;
      int v34 = v20;
      int v35 = v22;
      int v36 = v25;
      sub_1003D01A0(v30, (uint64_t)__p);
      int v37 = __p;
      if (v50 < 0) {
        int v37 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67113218;
      int v52 = v34;
      __int16 v53 = 1024;
      int v54 = v33;
      __int16 v55 = 1024;
      int v56 = v24;
      __int16 v57 = 1024;
      int v58 = v27;
      __int16 v59 = 1024;
      int v60 = v8;
      __int16 v61 = 1024;
      int v62 = v35;
      __int16 v63 = 1024;
      int v64 = v36;
      __int16 v65 = 1024;
      int v66 = v26;
      __int16 v67 = 1024;
      int v68 = v32;
      __int16 v69 = 1024;
      int v70 = v31;
      __int16 v71 = 1024;
      int v72 = v38;
      __int16 v73 = 1024;
      int v74 = v39;
      __int16 v75 = 1024;
      int v76 = v42;
      __int16 v77 = 1024;
      int v78 = v44;
      __int16 v79 = 1024;
      int v80 = v46;
      __int16 v81 = 1024;
      int v82 = v48;
      __int16 v83 = 2080;
      __int16 v84 = (const char *)v37;
      _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "A2DP BtCoexLinkStats: Handle = %d, BtClock = %5d, CoexReq = %4d, CoexReqDenied = %4d, SNR-Last30Tran (min, max): (%3d, %3d), RSSI-Last30Tran (min, max): (%4d, %4d), TxInfo-Last30Pkts (Good, ReTxNak, ReTxNoSync, Poll) (%2d, % 2d, %2d, %2d),  RxInfo-Last30Pkts (Good, CrcErr, HeaderErr, NoSync) (%2d, %2d, %2d, %2d), devicename = %s",  buf,  0x6Cu);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)buf = 67113218;
      int v52 = v20;
      __int16 v53 = 1024;
      int v54 = v21;
      __int16 v55 = 1024;
      int v56 = v24;
      __int16 v57 = 1024;
      int v58 = v27;
      __int16 v59 = 1024;
      int v60 = v8;
      __int16 v61 = 1024;
      int v62 = v22;
      __int16 v63 = 1024;
      int v64 = v7;
      __int16 v65 = 1024;
      int v66 = v6;
      __int16 v67 = 1024;
      int v68 = v23;
      __int16 v69 = 1024;
      int v70 = v14;
      __int16 v71 = 1024;
      int v72 = v13;
      __int16 v73 = 1024;
      int v74 = v12;
      __int16 v75 = 1024;
      int v76 = v19;
      __int16 v77 = 1024;
      int v78 = v41;
      __int16 v79 = 1024;
      int v80 = v43;
      __int16 v81 = 1024;
      int v82 = v45;
      __int16 v83 = 2080;
      __int16 v84 = "(NULL)";
      _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "A2DP BtCoexLinkStats: Handle = %d, BtClock = %5d, CoexReq = %4d, CoexReqDenied = %4d, SNR-Last30Tran (min, max): (%3d, %3d), RSSI-Last30Tran (min, max): (%4d, %4d), TxInfo-Last30Pkts (Good, ReTxNak, ReTxNoSync, Poll) (%2d, % 2d, %2d, %2d),  RxInfo-Last30Pkts (Good, CrcErr, HeaderErr, NoSync) (%2d, %2d, %2d, %2d), devicename = %s",  buf,  0x6Cu);
    }
  }

void sub_1004A14C8(uint64_t a1, __int128 *a2, int *a3)
{
  v9[0] = 0LL;
  v9[1] = v9;
  v9[2] = 0x4812000000LL;
  void v9[3] = sub_1004A15E8;
  v9[4] = nullsub_444;
  v9[5] = &unk_1007C41D6;
  __int128 v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  int v7 = *a3;
  __int16 v8 = *((_WORD *)a3 + 2);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089BD30);
  }
  uint64_t v4 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v7, 0);
  char v5 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A1600;
  block[3] = &unk_10087FEE0;
  void block[5] = a1;
  block[6] = v4;
  void block[4] = v9;
  dispatch_async(v5, block);
  _Block_object_dispose(v9, 8);
}

void sub_1004A15D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

__n128 sub_1004A15E8(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_1004A1600(void *a1)
{
  unint64_t v1 = a1[6];
  if (v1)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = *(void **)(v3 + 200);
    if (v4)
    {
      uint64_t v5 = v3 + 200;
      do
      {
        unint64_t v6 = v4[4];
        BOOL v7 = v6 >= v1;
        if (v6 >= v1) {
          __int16 v8 = v4;
        }
        else {
          __int16 v8 = v4 + 1;
        }
        if (v7) {
          uint64_t v5 = (uint64_t)v4;
        }
        uint64_t v4 = (void *)*v8;
      }

      while (*v8);
      if (v5 != v3 + 200 && v1 >= *(void *)(v5 + 32))
      {
        uint64_t v9 = sub_1002E6BF0();
        uint64_t v10 = sub_1002E6E00();
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 288LL))(v10);
        if ((v11 & 1) == 0 && *(_DWORD *)(v3 + 848) != 3) {
          sub_1004A182C(v11, *(void *)(a1[4] + 8LL) + 48LL);
        }
      }
    }
  }

uint64_t *sub_1004A16D8(uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  unint64_t v12 = a2;
  uint64_t v4 = (uint64_t **)(a1 + 192);
  unsigned __int8 v13 = &v12;
  if (*(void *)sub_100029574((uint64_t **)(a1 + 192), &v12, (uint64_t)&unk_1006C2518, (uint64_t **)&v13)[5])
  {
    unsigned __int8 v13 = &v12;
    uint64_t v5 = *(void *)sub_100029574(v4, &v12, (uint64_t)&unk_1006C2518, (uint64_t **)&v13)[5];
    if (v5) {
      unint64_t v6 = (_DWORD *)(v5 + 36);
    }
    else {
      unint64_t v6 = 0LL;
    }
    int v7 = v6[1];
    *v6 += a3[3];
    v6[1] = v7 + a3[4];
    v6[6] += a3[5];
  }

  unsigned __int8 v13 = &v12;
  __n128 result = sub_100029574(v4, &v12, (uint64_t)&unk_1006C2518, (uint64_t **)&v13);
  if (*(void *)(result[5] + 8))
  {
    unsigned __int8 v13 = &v12;
    __n128 result = sub_100029574(v4, &v12, (uint64_t)&unk_1006C2518, (uint64_t **)&v13);
    uint64_t v9 = *(void *)(result[5] + 8);
    if (v9) {
      uint64_t v10 = (_DWORD *)(v9 + 36);
    }
    else {
      uint64_t v10 = 0LL;
    }
    int v11 = v10[1];
    *v10 += a3[3];
    v10[1] = v11 + a3[4];
    v10[6] += a3[5];
  }

  return result;
}

void sub_1004A182C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 160LL))(v3))
  {
    uint64_t v4 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int16 *)(a2 + 6);
      int v6 = *(unsigned __int16 *)(a2 + 8);
      unsigned int v7 = *(unsigned __int16 *)(a2 + 10);
      unsigned int v8 = *(unsigned __int16 *)(a2 + 12);
      int v9 = *(unsigned __int16 *)(a2 + 14);
      unsigned int v10 = *(unsigned __int16 *)(a2 + 16);
      unsigned int v11 = *(unsigned __int16 *)(a2 + 22);
      int v12 = *(unsigned __int16 *)(a2 + 18);
      int v13 = *(char *)(a2 + 20);
      int v14 = *(char *)(a2 + 21);
      v15[0] = 67112192;
      v15[1] = v5;
      __int16 v16 = 1024;
      int v17 = v6;
      __int16 v18 = 1024;
      unsigned int v19 = v7;
      __int16 v20 = 1024;
      unsigned int v21 = v8;
      __int16 v22 = 1024;
      int v23 = v9;
      __int16 v24 = 1024;
      unsigned int v25 = v10;
      __int16 v26 = 1024;
      unsigned int v27 = v11;
      __int16 v28 = 1024;
      int v29 = v12;
      __int16 v30 = 1024;
      int v31 = v13;
      __int16 v32 = 1024;
      int v33 = v14;
      __int16 v34 = 2048;
      double v35 = (float)((float)((float)v10 * 100.0) / (float)v8);
      __int16 v36 = 2048;
      double v37 = (float)((float)((float)v7 * 100.0) / (float)v8);
      __int16 v38 = 2048;
      double v39 = (float)((float)((float)v11 * 100.0) / (float)v8);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BeamformingReport: Packets on {Ant0, Ant1, Beamforming} = {%3d, %3d, %3d}; Total tx packets = %3d, Total retx pa"
        "ckets = %3d; Total ePA packets = %3d; Total packets beamforming+ePA = %3d; Sync Timeout = %3d; RSSI{Ant0, Ant1} "
        "= {%4d, %4d}; {ePA, Beamforming, ePA+Beamforming} Usage = {%4.1f%%, %4.1f%%, %4.1f%%}",
        (uint8_t *)v15,
        0x5Cu);
    }
  }

void sub_1004A19AC(uint64_t a1, uint64_t a2, __int16 a3, int a4, __int16 a5, __int16 a6)
{
  if (a4)
  {
    __int16 v8 = a4;
    *(_DWORD *)buf = *(_DWORD *)a2;
    LOWORD(v20) = *(_WORD *)(a2 + 4);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_10089BD30);
    }
    unsigned int v11 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 0);
    int v12 = *(dispatch_queue_s **)(a1 + 240);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1004A1B10;
    block[3] = &unk_100888050;
    void block[4] = a1;
    void block[5] = v11;
    __int16 v15 = a3;
    __int16 v16 = v8;
    __int16 v17 = a5;
    __int16 v18 = a6;
    dispatch_async(v12, block);
  }

  else
  {
    int v13 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "A2DP LinkQualityReport Error - totalTxPacketCount is %d",  buf,  8u);
    }
  }

void sub_1004A1B10(uint64_t a1)
{
  __int128 v2 = (unint64_t *)(a1 + 40);
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned int v7 = *(void **)(v4 + 200);
    int v5 = (void *)(v4 + 200);
    int v6 = v7;
    if (v7)
    {
      __int16 v8 = (uint64_t **)(v5 - 1);
      int v9 = v5;
      do
      {
        unint64_t v10 = v6[4];
        BOOL v11 = v10 >= v1;
        if (v10 >= v1) {
          int v12 = v6;
        }
        else {
          int v12 = v6 + 1;
        }
        if (v11) {
          int v9 = v6;
        }
        int v6 = (void *)*v12;
      }

      while (*v12);
      if (v9 != v5 && v1 >= v9[4])
      {
        *(void *)buf = a1 + 40;
        if (*(void *)sub_100029574(v8, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5])
        {
          char v21 = 0;
          if (*v2)
          {
            uint64_t v13 = sub_1002E6E00();
            if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 280LL))(v13))
            {
              uint64_t v14 = sub_1002E6E9C();
              (*(void (**)(uint64_t, unint64_t, char *))(*(void *)v14 + 304LL))(v14, *v2 + 128, &v21);
            }
          }

          unsigned int v15 = *(unsigned __int16 *)(a1 + 48);
          unsigned int v16 = *(unsigned __int16 *)(a1 + 50);
          __int16 v17 = (os_log_s *)qword_1008F7570;
          if (v15 > v16 && os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = 100 * v15 / v16;
            _os_log_fault_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "A2DP LinkQualityReport - re-transmission stats are invalid %u",  buf,  8u);
            __int16 v17 = (os_log_s *)qword_1008F7570;
          }

          if (*(unsigned __int16 *)(a1 + 52) > *(unsigned __int16 *)(a1 + 54)
            && os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = 100;
            _os_log_fault_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "A2DP LinkQualityReport - CRC Rate is invalid %u",  buf,  8u);
            __int16 v17 = (os_log_s *)qword_1008F7570;
          }

          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v18 = *(unsigned __int16 *)(a1 + 48);
            unsigned int v19 = *(unsigned __int16 *)(a1 + 50);
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)&uint8_t buf[4] = v21;
            __int16 v23 = 2048;
            double v24 = (double)v18 * 100.0 / (double)v19;
            __int16 v25 = 1024;
            unsigned int v26 = v18;
            __int16 v27 = 1024;
            unsigned int v28 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "A2DP LinkQualityReport: RSSI =%4d, ReTx = %3.1f (%3d/%3d)",  buf,  0x1Eu);
          }

          *(void *)buf = v2;
          int v20 = sub_100029574(v8, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
          sub_1004A1DC8( *(void **)v20[5],  100 * *(unsigned __int16 *)(a1 + 48) / *(unsigned __int16 *)(a1 + 50));
        }
      }
    }
  }

void sub_1004A1DC8(void *a1, int a2)
{
  int v5 = (char *)a1[45];
  unint64_t v4 = a1[46];
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v7 = (char *)a1[44];
    uint64_t v8 = (v5 - v7) >> 2;
    unint64_t v9 = v8 + 1;
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      int v12 = (char *)sub_10024E33C((uint64_t)(a1 + 46), v11);
      unsigned int v7 = (char *)a1[44];
      int v5 = (char *)a1[45];
    }

    else
    {
      int v12 = 0LL;
    }

    uint64_t v13 = &v12[4 * v8];
    uint64_t v14 = &v12[4 * v11];
    *(_DWORD *)uint64_t v13 = a2;
    int v6 = v13 + 4;
    while (v5 != v7)
    {
      int v15 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }

    a1[44] = v13;
    a1[45] = v6;
    a1[46] = v14;
    if (v7) {
      operator delete(v7);
    }
  }

  else
  {
    *(_DWORD *)int v5 = a2;
    int v6 = v5 + 4;
  }

  a1[45] = v6;
}

void sub_1004A1E98(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 332) != a2)
  {
    *(_BYTE *)(a1 + 332) = a2;
    uint64_t v3 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109120;
      v4[1] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "fDynamicTimelineLogging set to %d ",  (uint8_t *)v4,  8u);
    }
  }

void sub_1004A1F48(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v29 = a2;
  uint64_t v6 = sub_1002E6E00();
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 272LL))(v6);
  char v28 = 1;
  uint64_t v8 = sub_1002E6E00();
  sub_10002418C(&buf, "Enable FW Logs");
  sub_10002418C(__p, "FWEnhancedLoggingEnable");
  (*(void (**)(uint64_t, __int128 *, void **, char *))(*(void *)v8 + 72LL))(v8, &buf, __p, &v28);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)buf);
  }
  uint64_t v9 = sub_1002E6E00();
  BOOL v10 = ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8LL))(v9) & (v7 == 0)) == 1 && v28 != 0;
  unint64_t v11 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = @"Skipping";
    if (v10) {
      int v12 = @"Evaluating";
    }
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Dynamic Timeline Logging Trigger : %@ ",  (uint8_t *)&buf,  0xCu);
  }

  if (v10)
  {
    if (*(void *)(a1 + 352))
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 352)];
      double v15 = v14;
    }

    else
    {
      double v15 = 80.0;
    }

    if (*(_BYTE *)(a1 + 332))
    {
      unsigned int v16 = (os_log_s *)qword_1008F7570;
      if (!os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(buf) = 0;
      __int16 v17 = "Timeline logging currently running";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&buf, 2u);
      return;
    }

    if (v15 < *(double *)(a1 + 360))
    {
      unsigned int v16 = (os_log_s *)qword_1008F7570;
      if (!os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(buf) = 0;
      __int16 v17 = "Timeline logging ran less than 60 secs ago";
      goto LABEL_22;
    }

    sub_1004A1E98(a1, 1);
    unsigned int v18 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Enabling firmware logs", (uint8_t *)&buf, 2u);
    }

    sub_1002E6E9C();
    if (sub_1002CDD44())
    {
      unsigned int v19 = *(dispatch_queue_s **)(a1 + 240);
      *(void *)&__int128 buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472LL;
      int v31 = sub_1004AB390;
      __int16 v32 = &unk_10087F8E0;
      uint64_t v33 = a1;
      unint64_t v34 = a2;
      dispatch_async(v19, &buf);
      if (*(_DWORD *)(sub_1002E6E9C() + 708) == 15) {
        int v20 = 2048;
      }
      else {
        int v20 = 3072;
      }
      if (*(_DWORD *)(a1 + 336) != v20) {
        *(_DWORD *)(a1 + 336) = v20;
      }
      if (*(_DWORD *)(a1 + 340) != 4) {
        *(_DWORD *)(a1 + 3sub_100242E28(v1 + 40) = 4;
      }
      *(_DWORD *)(a1 + 344) = 531;
      *(void *)&__int128 buf = &v29;
      if (*(_DWORD *)(sub_100029574((uint64_t **)(a1 + 192), &v29, (uint64_t)&unk_1006C2518, (uint64_t **)&buf)[5] + 76) == 1
        || (*(void *)&__int128 buf = &v29,
            *(_DWORD *)(sub_100029574((uint64_t **)(a1 + 192), &v29, (uint64_t)&unk_1006C2518, (uint64_t **)&buf)[5] + 76) == 5))
      {
        *(_DWORD *)(a1 + 344) |= 8u;
      }

      uint64_t v21 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v21 + 1232LL))( v21,  1LL,  *(unsigned int *)(a1 + 336),  *(unsigned int *)(a1 + 340));
      uint64_t v22 = sub_1002E6E9C();
      (*(void (**)(uint64_t, void))(*(void *)v22 + 3352LL))(v22, *(unsigned int *)(a1 + 344));
    }

    dispatch_time_t v23 = dispatch_time(0LL, 1000000000 * a3);
    double v24 = *(dispatch_queue_s **)(a1 + 240);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    _OWORD v25[2] = sub_1004A23F8;
    v25[3] = &unk_10087EB20;
    v25[4] = a1;
    dispatch_after(v23, v24, v25);
  }

void sub_1004A2358( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  _Unwind_Resume(a1);
}

void sub_1004A23A0(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004AB390;
  v3[3] = &unk_10087F8E0;
  v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

void sub_1004A23F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 332))
  {
    __int128 v2 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disabling firmware logs", v6, 2u);
    }

    uint64_t v3 = sub_1002E6E9C();
    (*(void (**)(uint64_t, void, void, void))(*(void *)v3 + 1232LL))(v3, 0LL, 0LL, 0LL);
    uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    int v5 = *(void **)(v1 + 352);
    *(void *)(v1 + 352) = v4;

    sub_1004A1E98(v1, 0);
    *(_BYTE *)(v1 + 36_Block_object_dispose(va, 8) = 0;
  }

void sub_1004A24B0(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  if (a2 && a3)
  {
    BOOL v10 = 0LL;
    unint64_t v11 = 0LL;
    sub_10056AB04(&v10, a3, a4);
    uint64_t v6 = *(dispatch_queue_s **)(a1 + 248);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768LL;
    block[2] = sub_1004A2590;
    block[3] = &unk_10089BA30;
    void block[4] = a2 + 128;
    uint64_t v8 = &off_10087FAA8;
    uint64_t v9 = v11;
    if (v11) {
      sub_1002CD1E0((uint64_t)v11);
    }
    dispatch_async(v6, block);
    uint64_t v8 = &off_10087FAA8;
    if (v9) {
      sub_1002CD254(v9);
    }
    BOOL v10 = &off_10087FAA8;
    if (v11) {
      sub_1002CD254(v11);
    }
  }

void sub_1004A2574(_Unwind_Exception *exception_object)
{
  *(void *)(v2 - 32) = v1;
  uint64_t v4 = *(unsigned int **)(v2 - 24);
  if (v4) {
    sub_1002CD254(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1004A2590(uint64_t a1)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_10089BD50);
  }
  return sub_100229400((uint64_t)off_1008D60D8, *(void *)(a1 + 32), 0x100000, a1 + 40);
}

void sub_1004A25E8(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
}

void sub_1004A25F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A264C;
  block[3] = &unk_100886EE0;
  char v6 = a4;
  void block[4] = a1;
  void block[5] = a2;
  dispatch_async(v4, block);
}

void sub_1004A264C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 48)) {
      int v5 = "Publish ";
    }
    else {
      int v5 = "Unpublish ";
    }
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v25 = 2048;
    uint64_t v26 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency : HFP Device %{public}s, device: %p",  buf,  0x16u);
  }

  int v7 = (unint64_t *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    int v8 = *(unsigned __int8 *)(a1 + 48);
    unint64_t v11 = *(void **)(v2 + 200);
    BOOL v10 = (void *)(v2 + 200);
    uint64_t v9 = v11;
    int v12 = (uint64_t **)(v10 - 1);
    if (v8)
    {
      if (!v9) {
        goto LABEL_19;
      }
      uint64_t v13 = v10;
      do
      {
        unint64_t v14 = v9[4];
        BOOL v15 = v14 >= v6;
        if (v14 >= v6) {
          unsigned int v16 = v9;
        }
        else {
          unsigned int v16 = v9 + 1;
        }
        if (v15) {
          uint64_t v13 = v9;
        }
        uint64_t v9 = (void *)*v16;
      }

      while (*v16);
      if (v13 == v10 || v6 < v13[4])
      {
LABEL_19:
        __int16 v17 = operator new(0x70uLL);
        sub_10003BCE8((uint64_t)v17, 0, 0, 0);
        *(void *)__int128 buf = v7;
        sub_100029574(v12, v7, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] = (uint64_t)v17;
      }

      *(void *)__int128 buf = v7;
      *(_BYTE *)(sub_100029574(v12, v7, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 87) = 1;
      if (qword_1008D6778 != -1) {
        dispatch_once(&qword_1008D6778, &stru_10089BD10);
      }
      sub_1002008D0(qword_1008D6770, *v7);
    }

    else if (v9)
    {
      unsigned int v18 = v10;
      do
      {
        unint64_t v19 = v9[4];
        BOOL v20 = v19 >= v6;
        if (v19 >= v6) {
          uint64_t v21 = v9;
        }
        else {
          uint64_t v21 = v9 + 1;
        }
        if (v20) {
          unsigned int v18 = v9;
        }
        uint64_t v9 = (void *)*v21;
      }

      while (*v21);
      if (v18 != v10 && v6 >= v18[4])
      {
        *(void *)__int128 buf = v7;
        *(_BYTE *)(sub_100029574((uint64_t **)v10 - 1, v7, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 87) = 0;
        *(void *)__int128 buf = v7;
        if (!*(_BYTE *)(sub_100029574((uint64_t **)v10 - 1, v7, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 87))
        {
          *(void *)__int128 buf = v7;
          if (!*(_BYTE *)(sub_100029574((uint64_t **)v10 - 1, v7, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 88))
          {
            *(void *)__int128 buf = v7;
            uint64_t v22 = (uint64_t *)sub_100029574((uint64_t **)v10 - 1, v7, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5];
            if (v22)
            {
              dispatch_time_t v23 = sub_1004B6A08(v22);
              operator delete(v23);
            }

            sub_10020166C((uint64_t)(v10 - 1), v7);
            if (qword_1008D6778 != -1) {
              dispatch_once(&qword_1008D6778, &stru_10089BD10);
            }
            sub_100200A5C(qword_1008D6770, *v7);
          }
        }
      }
    }
  }

void sub_1004A294C(_Unwind_Exception *a1)
{
}

void sub_1004A2968(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 168);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A264C;
  block[3] = &unk_100886EE0;
  char v6 = a4;
  void block[4] = a1 - 72;
  void block[5] = a2;
  dispatch_async(v4, block);
}

uint64_t sub_1004A29C8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 1060) = 0;
  *(void *)(a1 + 1052) = 0LL;
  *(_OWORD *)(a1 + 1036) = 0u;
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_10089BC50);
  }
  return sub_10045DA10((uint64_t)off_1008D9028, a2);
}

void sub_1004A2A2C(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5)
{
  int v5 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A2A90;
  block[3] = &unk_10087F900;
  char v8 = a4;
  char v9 = a5;
  void block[4] = a1;
  void block[5] = a2;
  __int16 v7 = a3;
  dispatch_async(v5, block);
}

void sub_1004A2A90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 50)) {
      uint64_t v4 = "Start";
    }
    else {
      uint64_t v4 = "Stop";
    }
    int v5 = "enabled";
    if (!*(_BYTE *)(a1 + 51)) {
      int v5 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v33 = 2080;
    unint64_t v34 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "HFP Stream State: %s Advanced Transport: %s",  buf,  0x16u);
  }

  sub_1004A2F8C(v2, *(_BYTE *)(a1 + 50));
  char v6 = *(_BYTE *)(a1 + 50);
  uint64_t v7 = v2 + 200;
  char v8 = *(void **)(v2 + 200);
  char v9 = (unint64_t *)(a1 + 40);
  if (v6)
  {
    if (!v8) {
      goto LABEL_20;
    }
    unint64_t v10 = *v9;
    uint64_t v11 = v2 + 200;
    do
    {
      unint64_t v12 = v8[4];
      BOOL v13 = v12 >= v10;
      if (v12 >= v10) {
        unint64_t v14 = v8;
      }
      else {
        unint64_t v14 = v8 + 1;
      }
      if (v13) {
        uint64_t v11 = (uint64_t)v8;
      }
      char v8 = (void *)*v14;
    }

    while (*v14);
    if (v11 != v7 && v10 >= *(void *)(v11 + 32))
    {
      char v27 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003D032C(v10, (uint64_t)buf);
        if (v35 >= 0) {
          char v28 = buf;
        }
        else {
          char v28 = *(_BYTE **)buf;
        }
        *(_DWORD *)__int16 v30 = 136315138;
        *(void *)&v30[4] = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Device %s, already exists in AudioLinkManagerDevices updating values",  v30,  0xCu);
        if (v35 < 0) {
          operator delete(*(void **)buf);
        }
        char v6 = *(_BYTE *)(a1 + 50);
      }

      *(void *)__int128 buf = a1 + 40;
      *(_BYTE *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 72) = v6;
      *(void *)__int128 buf = a1 + 40;
      unsigned int v16 = sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)buf);
      *(_DWORD *)(v16[5] + 76) = 1;
    }

    else
    {
LABEL_20:
      BOOL v15 = operator new(0x70uLL);
      sub_10003BCE8((uint64_t)v15, 1, 0, 1);
      *(void *)__int128 buf = a1 + 40;
      unsigned int v16 = sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)buf);
      v16[5] = (uint64_t)v15;
    }

    if (*(_BYTE *)(a1 + 51)) {
      sub_100028FF8(*(void *)(v2 + 224), *(unsigned __int8 *)(a1 + 50), *(void *)(a1 + 40));
    }
    sub_1004A3098((uint64_t)v16, *(void *)(a1 + 40), 1);
    sub_1004A32E0(v2, *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
  }

  else
  {
    if (v8)
    {
      unint64_t v17 = *v9;
      uint64_t v18 = v2 + 200;
      do
      {
        unint64_t v19 = v8[4];
        BOOL v20 = v19 >= v17;
        if (v19 >= v17) {
          uint64_t v21 = v8;
        }
        else {
          uint64_t v21 = v8 + 1;
        }
        if (v20) {
          uint64_t v18 = (uint64_t)v8;
        }
        char v8 = (void *)*v21;
      }

      while (*v21);
      if (v18 != v7 && v17 >= *(void *)(v18 + 32))
      {
        uint64_t v22 = (os_log_s *)qword_1008F7570;
        char v23 = 0;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003D032C(v17, (uint64_t)buf);
          if (v35 >= 0) {
            double v24 = buf;
          }
          else {
            double v24 = *(_BYTE **)buf;
          }
          *(_DWORD *)__int16 v30 = 136315138;
          *(void *)&v30[4] = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Device %s, already exists in AudioLinkManagerDevices updating values",  v30,  0xCu);
          if (v35 < 0) {
            operator delete(*(void **)buf);
          }
          char v23 = *(_BYTE *)(a1 + 50);
        }

        *(void *)__int128 buf = a1 + 40;
        *(_BYTE *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 72) = v23;
        *(void *)__int128 buf = a1 + 40;
        *(_DWORD *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 76) = 0;
        if (*(_BYTE *)(sub_1000273C4(*(void *)(v2 + 224), *v9) + 3)) {
          sub_100028FF8(*(void *)(v2 + 224), *(unsigned __int8 *)(a1 + 50), *(void *)(a1 + 40));
        }
        sub_10049B3BC((uint64_t *)v2, *v9);
      }
    }

    if (*(void *)(v2 + 208)) {
      sub_1004A36F0(v2, *v9, 1);
    }
    char v29 = 0;
    uint64_t v25 = sub_1002E6E00();
    sub_10002418C(buf, "HFP");
    sub_10002418C(v30, "audioFeedback");
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, char *))(*(void *)v25 + 72LL))(v25, buf, v30, &v29);
    if (v31 < 0) {
      operator delete(*(void **)v30);
    }
    if (v35 < 0) {
      operator delete(*(void **)buf);
    }
    if (v29)
    {
      uint64_t v26 = sub_1003D2B2C(*v9, 12);
    }
  }

  sub_1004A3814(v2, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 50), 1);
}

void sub_1004A2F44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004A2F8C(uint64_t a1, char a2)
{
  if (*(_BYTE *)(a1 + 328))
  {
    char v18 = 0;
    sub_100242CA4(&v18);
    if (sub_100115774(a2, v3, v4, v5, v6, v7, v8, v9)
      && os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
    {
      sub_100685318();
    }

    if (sub_10011592C(a2, v10, v11, v12, v13, v14, v15, v16))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
        sub_1006852EC();
      }
    }

    sub_100242CD0(&v18);
    sub_100242CD8(&v18);
  }

  else
  {
    unint64_t v17 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Stack is not ready, cannot configure interlaced inquiry scans",  buf,  2u);
    }
  }

void sub_1004A3084( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1004A3098(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 && a3 == 2)
  {
    uint64_t v4 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v23 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Enabling A2DP Link Quality Mode",  (uint8_t *)&v23,  2u);
    }

    uint64_t v5 = sub_1002E6E00();
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 280LL))(v5);
    *(_DWORD *)&v26[10] = 0;
    *(void *)&void v26[2] = 0LL;
    __int16 v23 = 1;
    uint64_t v7 = sub_1002E6BF0();
    char v24 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 136LL))(v7);
    uint64_t v8 = sub_1002E6BF0();
    char v25 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 160LL))(v8);
    v26[1] = 0;
    uint64_t v9 = sub_1002E6BF0();
    uint64_t v10 = sub_1002E6BF0();
    v26[0] = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 160LL))(v10);
    if (v6) {
      __int16 v11 = 5;
    }
    else {
      __int16 v11 = 20;
    }
    *(_WORD *)&v26[4] = v11;
    *(_WORD *)&v26[6] = -1;
    *(_WORD *)&v26[8] = v11;
    *(_WORD *)&v26[10] = -1;
    v26[12] = 1;
    uint64_t v12 = sub_1002E6BF0();
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 176LL))(v12);
    if (v13) {
      LOBYTE(v13) = sub_1003D06C0(a2);
    }
    void v26[2] = v13;
    v26[13] = 1;
LABEL_21:
    uint64_t v22 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(void *)v22 + 536LL))(v22, 18LL, &v23, a2);
    return;
  }

  if (a2)
  {
    if (a3 == 1)
    {
      uint64_t v14 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 128LL))(v14))
      {
        uint64_t v15 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v23 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Enabling HFP Link Quality Mode",  (uint8_t *)&v23,  2u);
        }

        *(_DWORD *)&v26[8] = 0;
        *(void *)uint64_t v26 = 0LL;
        __int16 v23 = 1;
        uint64_t v16 = sub_1002E6BF0();
        char v24 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 136LL))(v16);
        uint64_t v17 = sub_1002E6BF0();
        char v25 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 160LL))(v17);
        uint64_t v18 = sub_1002E6BF0();
        v26[0] = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 160LL))(v18);
        uint64_t v19 = sub_1002E6BF0();
        int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 176LL))(v19);
        BOOL v21 = 0;
        if (v20) {
          BOOL v21 = sub_1003D06C0(a2);
        }
        void v26[2] = v21;
        *(_WORD *)&v26[12] = 513;
        goto LABEL_21;
      }
    }
  }

void sub_1004A32E0(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v25 = a2;
  if (*(_BYTE *)(a1 + 328))
  {
    if (!a2) {
      goto LABEL_14;
    }
    uint64_t v4 = *(void **)(a1 + 200);
    if (!v4) {
      goto LABEL_14;
    }
    int v6 = (uint64_t **)(a1 + 192);
    uint64_t v7 = (void *)(a1 + 200);
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = v4;
      }
      else {
        uint64_t v10 = v4 + 1;
      }
      if (v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = (void *)*v10;
    }

    while (*v10);
    if (v7 != (void *)(a1 + 200) && v7[4] <= a2)
    {
      char v24 = 0;
      sub_100242CA4(&v24);
      char v12 = sub_10012EB98();
      char v13 = sub_10011257C(v25 + 128);
      char v14 = sub_1000F14A4(a3);
      sub_100242CD0(&v24);
      *(void *)__int128 buf = &v25;
      if (*(void *)(sub_100029574(v6, (unint64_t *)&v25, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 8))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
          sub_100685370();
        }
        *(void *)__int128 buf = &v25;
        uint64_t v15 = *(void *)(sub_100029574(v6, (unint64_t *)&v25, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 8);
        if (v15)
        {
          operator delete((void *)v15);
        }

        *(void *)__int128 buf = &v25;
        *(void *)(sub_100029574(v6, (unint64_t *)&v25, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + _Block_object_dispose(va, 8) = 0LL;
      }

      uint64_t v16 = operator new(0x130uLL);
      sub_1004B6F4C((uint64_t)v16, v25, a3, v13 ^ 1, v12, v14);
      *(void *)__int128 buf = &v25;
      *(void *)(sub_100029574(v6, (unint64_t *)&v25, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + _Block_object_dispose(va, 8) = v16;
      if (qword_1008D9030 != -1) {
        dispatch_once(&qword_1008D9030, &stru_10089BC50);
      }
      int v17 = sub_10045D894((uint64_t)off_1008D9028, v25);
      *(_DWORD *)(a1 + 1044) = v17;
      if (v17)
      {
        *(void *)__int128 buf = &v25;
        *(_DWORD *)(*(void *)(sub_100029574(v6, (unint64_t *)&v25, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                              + 8)
                  + 172LL) = v17;
        if (qword_1008D9030 != -1) {
          dispatch_once(&qword_1008D9030, &stru_10089BC50);
        }
        char v18 = sub_100461A08((uint64_t)off_1008D9028, *(_DWORD *)(a1 + 1044));
        *(void *)__int128 buf = &v25;
        *(_BYTE *)(*(void *)(sub_100029574(v6, (unint64_t *)&v25, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                             + 8)
                 + 236LL) = v18;
      }

      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(void *)__int128 buf = &v25;
      *(CFAbsoluteTime *)(*(void *)(sub_100029574( v6,  (unint64_t *)&v25,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8)
                        + 80LL) = Current;
      uint64_t v20 = mach_absolute_time();
      uint64_t v21 = *(void *)(a1 + 184);
      uint64_t v22 = *(unsigned int *)(a1 + 256);
      unint64_t v23 = *(unsigned int *)(a1 + 260);
      *(void *)__int128 buf = &v25;
      *(void *)(*(void *)(sub_100029574(v6, (unint64_t *)&v25, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                            + 8)
                + 224LL) = (v20 - v21) * v22 / v23 / 0xF4240;
      sub_100242CD8(&v24);
    }

    else
    {
LABEL_14:
      __int16 v11 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "HFP start, but no valid device handler",  buf,  2u);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
  {
    sub_100685344();
  }

void sub_1004A36C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004A36F0(uint64_t result, uint64_t a2, int a3)
{
  if (*(void *)(result + 208))
  {
    uint64_t v5 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Disabling Link Quality Mode",  (uint8_t *)v8,  2u);
    }

    __int16 v9 = 0;
    if (a3 == 1) {
      char v6 = 2;
    }
    else {
      char v6 = 1;
    }
    v8[0] = 0LL;
    v8[1] = 0LL;
    HIBYTE(v9) = v6;
    uint64_t v7 = sub_1002E6E9C();
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v7 + 536LL))(v7, 18LL, v8, a2);
  }

  return result;
}

uint64_t sub_1004A37A0(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  int v5 = 0;
  uint64_t v4 = 0LL;
  BOOL v2 = sub_1003D55EC(a2, &v6, &v5, (_DWORD *)&v4 + 1, &v4);
  uint64_t result = 0LL;
  if (v2 && v5 == 76)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

void sub_1004A3814(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v6 = a2;
  uint64_t v23 = a2;
  sub_1004AF568(a1, a2, a3, a4);
  if (a3)
  {
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_10089BCF0);
    }
    sub_1004AE8C4((_BYTE *)a1, v6, *((_BYTE *)off_1008D6190 + 203), a4);
    uint64_t v8 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 112LL))(v8))
    {
      uint64_t v9 = sub_100405058();
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      _DWORD v22[2] = sub_1004AFB94;
      v22[3] = &unk_10087EB20;
      uint8_t v22[4] = a1;
      sub_1004054B4(v9, v22);
    }
  }

  else
  {
    uint64_t v10 = sub_1002E6BF0();
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 112LL))(v10);
    if ((_DWORD)v11)
    {
      uint64_t v12 = sub_100405058();
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_1004AFBE4;
      v21[3] = &unk_10087EB20;
      void v21[4] = a1;
      sub_1004054B4(v12, v21);
    }

    sub_1004AF324(v11, v6);
    char v13 = *(void **)(a1 + 200);
    if (v13)
    {
      char v14 = (uint64_t **)(a1 + 192);
      uint64_t v15 = a1 + 200;
      do
      {
        unint64_t v16 = v13[4];
        BOOL v17 = v16 >= v6;
        if (v16 >= v6) {
          char v18 = v13;
        }
        else {
          char v18 = v13 + 1;
        }
        if (v17) {
          uint64_t v15 = (uint64_t)v13;
        }
        char v13 = (void *)*v18;
      }

      while (*v18);
      if (v15 != a1 + 200 && *(void *)(v15 + 32) <= v6)
      {
        char v24 = (unint64_t *)&v23;
        *(_BYTE *)(sub_100029574(v14, (unint64_t *)&v23, (uint64_t)&unk_1006C2518, (uint64_t **)&v24)[5] + 72) = 0;
        __int16 v19 = *(_WORD *)(a1 + 1030);
        char v24 = (unint64_t *)&v23;
        *(_WORD *)(sub_100029574(v14, (unint64_t *)&v23, (uint64_t)&unk_1006C2518, (uint64_t **)&v24)[5] + 5_Block_object_dispose(va, 8) = v19;
        __int16 v20 = *(_WORD *)(a1 + 1030);
        char v24 = (unint64_t *)&v23;
        *(_WORD *)(sub_100029574(v14, (unint64_t *)&v23, (uint64_t)&unk_1006C2518, (uint64_t **)&v24)[5] + 60) = v20;
        char v24 = (unint64_t *)&v23;
        *(_DWORD *)(sub_100029574(v14, (unint64_t *)&v23, (uint64_t)&unk_1006C2518, (uint64_t **)&v24)[5] + 76) = 0;
        unint64_t v6 = v23;
      }
    }
  }

  sub_10003A358(*(void *)(a1 + 216), v6, a3);
}

void sub_1004A3A58(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5)
{
  int v5 = *(dispatch_queue_s **)(a1 + 168);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A2A90;
  block[3] = &unk_10087F900;
  char v8 = a4;
  char v9 = a5;
  void block[4] = a1 - 72;
  void block[5] = a2;
  __int16 v7 = a3;
  dispatch_async(v5, block);
}

void sub_1004A3AC0(void *a1, uint64_t a2, __int16 a3, char a4, char a5, __int16 a6, __int16 a7)
{
  uint64_t v7 = a1[110];
  char v8 = (std::__shared_weak_count *)a1[111];
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }

  uint64_t v11 = (dispatch_queue_s *)a1[30];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_1004A3B88;
  block[3] = &unk_10089BA60;
  __int16 v16 = a3;
  void block[4] = a1;
  void block[5] = a2;
  char v19 = a4;
  __int16 v17 = a6;
  void block[6] = v7;
  uint64_t v15 = v8;
  if (v8)
  {
    uint64_t v12 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  char v20 = a5;
  __int16 v18 = a7;
  dispatch_async(v11, block);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1004A3B88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 1096);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 64);
  uint64_t v5 = v2 + 1096;
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      char v8 = (uint64_t *)v3;
    }
    else {
      char v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }

  while (*v8);
  if (v5 != v2 + 1096 && v4 >= *(unsigned __int16 *)(v5 + 32))
  {
    sub_1003D0CA0(*(void *)(a1 + 40), *(_BYTE *)(a1 + 70));
    int v9 = 1;
  }

  else
  {
LABEL_12:
    int v9 = 0;
  }

  int v10 = sub_1004A4798(v2, *(unsigned __int16 *)(a1 + 64));
  uint64_t v11 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 8LL))(v11))
  {
    uint64_t v12 = sub_1004050C8();
    v93[0] = _NSConcreteStackBlock;
    v93[1] = 3221225472LL;
    v93[2] = sub_1004A48CC;
    v93[3] = &unk_10087EB20;
    v93[4] = *(void *)(a1 + 40);
    sub_100405384(v12, v93);
  }

  unint64_t v13 = (unint64_t *)(a1 + 40);
  unint64_t v14 = *(void *)(a1 + 40);
  if (v14)
  {
    char v15 = *(_BYTE *)(a1 + 70);
    if (v15)
    {
      __int16 v16 = *(void **)(v2 + 200);
      if (!v16) {
        goto LABEL_28;
      }
      uint64_t v17 = v2 + 200;
      do
      {
        unint64_t v18 = v16[4];
        BOOL v19 = v18 >= v14;
        if (v18 >= v14) {
          char v20 = v16;
        }
        else {
          char v20 = v16 + 1;
        }
        if (v19) {
          uint64_t v17 = (uint64_t)v16;
        }
        __int16 v16 = (void *)*v20;
      }

      while (*v20);
      if (v17 != v2 + 200 && v14 >= *(void *)(v17 + 32))
      {
        int v68 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003D032C(v14, (uint64_t)__p);
          if (SBYTE3(v96) >= 0) {
            __int16 v69 = __p;
          }
          else {
            __int16 v69 = *(_BYTE **)__p;
          }
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = v69;
          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Device %s, already exists in AudioLinkManagerDevices updating values",  buf,  0xCu);
          if (SBYTE3(v96) < 0) {
            operator delete(*(void **)__p);
          }
          char v15 = *(_BYTE *)(a1 + 70);
        }

        *(void *)std::stringbuf::string_type __p = a1 + 40;
        *(_BYTE *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p)[5] + 72) = v15;
        __int16 v70 = *(_WORD *)(a1 + 66);
        *(void *)std::stringbuf::string_type __p = a1 + 40;
        *(_WORD *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p)[5] + 5_Block_object_dispose(va, 8) = v70;
        __int16 v71 = *(_WORD *)(a1 + 66);
        *(void *)std::stringbuf::string_type __p = a1 + 40;
        *(_WORD *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p)[5] + 60) = v71;
        *(void *)std::stringbuf::string_type __p = a1 + 40;
        *(_DWORD *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p)[5] + 76) = 2;
        uint64_t v72 = sub_1002E6E00();
        char v25 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 8LL))(v72);
      }

      else
      {
LABEL_28:
        uint64_t v21 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003D032C(v14, (uint64_t)__p);
          uint64_t v22 = SBYTE3(v96) >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Adding device %s, to AudioLinkManagerDevices",  buf,  0xCu);
          if (SBYTE3(v96) < 0) {
            operator delete(*(void **)__p);
          }
        }

        uint64_t v23 = operator new(0x70uLL);
        sub_10003BCE8((uint64_t)v23, *(_BYTE *)(a1 + 70), *(_WORD *)(a1 + 66), 2);
        *(void *)std::stringbuf::string_type __p = a1 + 40;
        sub_100029574((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5] = (uint64_t)v23;
        uint64_t v24 = sub_1002E6E00();
        char v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
      }

      if ((v25 & 1) != 0) {
        sub_100039784(*(void *)(v2 + 216), *v13);
      }
      uint64_t v26 = sub_1002E6BF0();
      char v27 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 792LL))(v26, 2LL);
      if ((_DWORD)v27)
      {
        char v28 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type __p = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Adaptive Latency reset counter when streaming start",  __p,  2u);
        }

        *(void *)std::stringbuf::string_type __p = a1 + 40;
        char v27 = sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p);
        *(_WORD *)(*(void *)(v27[5] + 40) + 44LL) = -1;
      }

      sub_1004A3098((uint64_t)v27, *(void *)(a1 + 40), 2);
      sub_1004A4938((_BYTE *)v2, *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 64));
      if (v10)
      {
        char v29 = operator new(0x60uLL);
        sub_10053A75C(v29, *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 64));
        *(void *)(v2 + 864) = v29;
        uint64_t v30 = v29[8];
        *(void *)(v2 + 872) = v30;
        char v31 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type __p = 134217984;
          *(void *)&__p[4] = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Dynamic Audio delivery Context ID: %llu",  __p,  0xCu);
        }
      }

      *(void *)std::stringbuf::string_type __p = 0LL;
      *(void *)&__p[8] = 0LL;
      __int16 v32 = *(std::__shared_weak_count **)(a1 + 56);
      if (v32)
      {
        __int16 v33 = std::__shared_weak_count::lock(v32);
        *(void *)&__p[8] = v33;
        if (v33)
        {
          uint64_t v34 = *(void *)(a1 + 48);
          *(void *)std::stringbuf::string_type __p = v34;
          char v35 = v34 ? v9 : 1;
          if ((v35 & 1) == 0) {
            sub_100273FF0(v34, *v13, 1, 0);
          }
        }
      }

      else
      {
        __int16 v33 = 0LL;
      }

      uint64_t v48 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)v48 + 792LL))(v48, 0LL))
      {
        if (*(_BYTE *)(a1 + 71))
        {
          __int16 v49 = *(_WORD *)(a1 + 64);
          unint64_t v50 = *(void *)(a1 + 40);
          int v51 = sub_100038B28(*(void *)(v2 + 216), *(unsigned __int16 *)(a1 + 68));
          sub_1004A4E0C(v2, v49, v50, v51);
        }

        else if (v9)
        {
          sub_1000352CC(*(void *)(v2 + 216), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 64));
        }
      }

      uint64_t v73 = sub_1002E6E00();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v73 + 432LL))(v73) && sub_1004B6A94(0LL))
      {
        *(_BYTE *)(v2 + 982) = 1;
        sub_1004A50E4(v2);
      }

      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          unint64_t v75 = __ldaxr(p_shared_owners);
        while (__stlxr(v75 - 1, p_shared_owners));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }

LABEL_131:
      int v80 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        int v81 = *(unsigned __int16 *)(a1 + 64);
        int v82 = "disabled";
        int v83 = *(unsigned __int8 *)(a1 + 71);
        if (v9) {
          int v82 = "enabled";
        }
        int v84 = *(unsigned __int16 *)(a1 + 66);
        double v85 = "started";
        int v86 = *(unsigned __int16 *)(a1 + 68);
        if (!*(_BYTE *)(a1 + 70)) {
          double v85 = "stopped";
        }
        *(_DWORD *)std::stringbuf::string_type __p = 67110402;
        *(_DWORD *)&__p[4] = v81;
        double v87 = "not supported";
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = v82;
        if (v83) {
          double v87 = "supported";
        }
        __int16 v95 = 2080;
        __int16 v96 = v85;
        __int16 v97 = 2080;
        int v98 = v87;
        __int16 v99 = 1024;
        int v100 = v84;
        __int16 v101 = 1024;
        int v102 = v86;
        _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "StreamStateChanged for handle %d Wireless Splitter aggregation is %s music playback is %s with latency %s with bitrate %u Dynamic Latency JBL %d",  __p,  0x32u);
      }

      if (*(void *)(v2 + 1104) >= 2uLL) {
        sub_1004A5F28(v2, *(unsigned __int8 *)(a1 + 70));
      }
      uint64_t v89 = *(void *)(a1 + 40);
      uint64_t v88 = a1 + 40;
      sub_1004A5FD4(v2, v89, *(unsigned __int8 *)(v88 + 30));
      sub_1004A3814(v2, *(void *)v88, *(unsigned __int8 *)(v88 + 30), 2);
      sub_1004A62C0(v90, *(void *)v88, *(unsigned __int8 *)(v88 + 30));
      return;
    }
  }

  __int16 v36 = *(void **)(v2 + 200);
  if (v36)
  {
    uint64_t v37 = v2 + 200;
    do
    {
      unint64_t v38 = v36[4];
      BOOL v39 = v38 >= v14;
      if (v38 >= v14) {
        unsigned int v40 = v36;
      }
      else {
        unsigned int v40 = v36 + 1;
      }
      if (v39) {
        uint64_t v37 = (uint64_t)v36;
      }
      __int16 v36 = (void *)*v40;
    }

    while (*v40);
    if (v37 != v2 + 200 && v14 >= *(void *)(v37 + 32))
    {
      sub_1004A52FC(v2, 0xBu, *(void *)(a1 + 40));
      uint64_t v52 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 792LL))(v52, 2LL))
      {
        __int16 v53 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type __p = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Adaptive Latency stream stop", __p, 2u);
        }

        sub_100038198(*(void *)(v2 + 216), 150);
        uint64_t v54 = *(void *)(a1 + 40);
        uint64_t v55 = *(void *)(v2 + 216);
        *(void *)std::stringbuf::string_type __p = a1 + 40;
        int v56 = sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p);
        int v57 = sub_100037DE0(v55, v54, *(_DWORD *)(*(void *)(v56[5] + 40) + 20LL), 6);
        sub_1004A5914(v2, v54, v57);
        uint64_t v58 = sub_1004050C8();
        v91[0] = _NSConcreteStackBlock;
        v91[1] = 3221225472LL;
        v91[2] = sub_1004A5AA0;
        v91[3] = &unk_100893D28;
        __int16 v92 = *(_WORD *)(a1 + 64);
        sub_100405384(v58, v91);
        sub_1004A5AF4(v2, *(void *)(a1 + 40));
      }

      __int16 v59 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003D032C(*v13, (uint64_t)__p);
        int v60 = SBYTE3(v96) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)__int128 buf = 136315138;
        *(void *)&uint8_t buf[4] = v60;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "Device %s, already exists in AudioLinkManagerDevices updating values",  buf,  0xCu);
        if (SBYTE3(v96) < 0) {
          operator delete(*(void **)__p);
        }
      }

      char v61 = *(_BYTE *)(a1 + 70);
      *(void *)std::stringbuf::string_type __p = a1 + 40;
      *(_BYTE *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p)[5] + 72) = v61;
      __int16 v62 = *(_WORD *)(a1 + 66);
      *(void *)std::stringbuf::string_type __p = a1 + 40;
      *(_WORD *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p)[5] + 5_Block_object_dispose(va, 8) = v62;
      __int16 v63 = *(_WORD *)(a1 + 66);
      *(void *)std::stringbuf::string_type __p = a1 + 40;
      *(_WORD *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p)[5] + 60) = v63;
      *(void *)std::stringbuf::string_type __p = a1 + 40;
      *(_DWORD *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p)[5] + 76) = 0;
      sub_10049ABA4(v2, *(void *)(a1 + 40));
      *(void *)std::stringbuf::string_type __p = a1 + 40;
      if (*(_DWORD *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p)[5] + 64))
      {
        *(void *)std::stringbuf::string_type __p = a1 + 40;
        *(_WORD *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)__p)[5] + 6_Block_object_dispose(va, 8) = 0;
      }

      uint64_t v64 = *(void *)(v2 + 864);
      if (v64)
      {
        *(void *)(v2 + 872) = 0LL;
        (*(void (**)(uint64_t))(*(void *)v64 + 16LL))(v64);
        *(void *)(v2 + 864) = 0LL;
      }

      *(void *)std::stringbuf::string_type __p = 0LL;
      *(void *)&__p[8] = 0LL;
      __int16 v65 = *(std::__shared_weak_count **)(a1 + 56);
      if (v65)
      {
        int v66 = std::__shared_weak_count::lock(v65);
        *(void *)&__p[8] = v66;
        if (v66)
        {
          uint64_t v67 = *(void *)(a1 + 48);
          *(void *)std::stringbuf::string_type __p = v67;
          if (v67)
          {
            if (*(_BYTE *)(v67 + 77)) {
              sub_100273FF0(v67, *v13, 0, 0);
            }
          }
        }
      }

      else
      {
        int v66 = 0LL;
      }

      uint64_t v76 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)v76 + 792LL))(v76, 0LL))
      {
        if (*(_BYTE *)(a1 + 71)
          || (*(void *)__int128 buf = a1 + 40,
              *(_BYTE *)(*(void *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 40)
                       + 3LL)))
        {
          sub_1004A5AF4(v2, *v13);
        }
      }

      uint64_t v77 = sub_1002E6E00();
      if (v66)
      {
        int v78 = (unint64_t *)&v66->__shared_owners_;
        do
          unint64_t v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }

      goto LABEL_129;
    }
  }

  if (!v14)
  {
LABEL_129:
    if (*(void *)(v2 + 208)) {
      sub_1004A36F0(v2, *v13, 2);
    }
    goto LABEL_131;
  }

  unsigned __int8 v41 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
    sub_10068539C(v14, v41);
  }
  int v42 = *(std::__shared_weak_count **)(a1 + 56);
  if (v42)
  {
    unsigned __int8 v43 = std::__shared_weak_count::lock(v42);
    *(void *)&__p[8] = v43;
    if (v43)
    {
      int v44 = v43;
      uint64_t v45 = *(void *)(a1 + 48);
      *(void *)std::stringbuf::string_type __p = v45;
      if (v45 && *(_BYTE *)(v45 + 77)) {
        sub_100273FF0(v45, *v13, 0, 0);
      }
      int v46 = (unint64_t *)&v44->__shared_owners_;
      do
        unint64_t v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }

  __int16 v49 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "LeConnectionLatencyVeryHighSupervisionTimeout");
  unint64_t v50 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v49 + 88LL))(v49, buf, __p, &v94);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v50) {
      goto LABEL_142;
    }
  }

  else if (!v50)
  {
    goto LABEL_142;
  }

  int v51 = v94;
  uint64_t v52 = (os_log_s *)qword_1008F7620;
  if ((v94 - 100) >= 0x7C9D && os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v51;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_FAULT,  "Override rejected latency supervisionTimeout:%d LeConnectionLatencyVeryHigh",  buf,  8u);
    LOWORD(v51) = v94;
    uint64_t v52 = (os_log_s *)qword_1008F7620;
  }

  *(_WORD *)(a1 + 1102) = v51;
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v51;
    _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Override latency supervisionTimeout:%d LeConnectionLatencyVeryHigh",  buf,  8u);
  }

void sub_1004A4758( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_1004A4798(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + 1096;
  uint64_t v3 = *(void *)(a1 + 1096);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v4 = a1 + 1096;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v3 + 32);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      BOOL v7 = (uint64_t *)v3;
    }
    else {
      BOOL v7 = (uint64_t *)(v3 + 8);
    }
    if (v6) {
      uint64_t v4 = v3;
    }
    uint64_t v3 = *v7;
  }

  while (*v7);
  if (v4 == v2 || *(unsigned __int16 *)(v4 + 32) > a2) {
LABEL_12:
  }
    uint64_t v4 = a1 + 1096;
  char v8 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = sub_1004AAE04();
    sub_1002E6E9C();
    v11[0] = 67109632;
    v11[1] = v4 != v2;
    __int16 v12 = 1024;
    int v13 = v9;
    __int16 v14 = 1024;
    BOOL v15 = sub_1002CDD44();
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Dynamic Audio Delivery aggregation=%d, Timesync Support=%d GPIO Toggle=%d",  (uint8_t *)v11,  0x14u);
  }

  uint64_t result = sub_1004AAE04();
  if ((_DWORD)result)
  {
    sub_1002E6E9C();
    LODWORD(result) = sub_1002CDD44();
    if (v4 == v2) {
      return result;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1004A48CC(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  uint64_t v2 = (void *)qword_1008D6450;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = sub_1002E6E00();
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 584LL))(v4);
  return sub_100378160(v2, v3, v5);
}

_BYTE *sub_1004A4938(_BYTE *result, uint64_t a2, unsigned int a3)
{
  unint64_t v28 = a2;
  if (a2)
  {
    uint64_t v4 = result;
    char v27 = 0;
    sub_100242CA4(&v27);
    char v5 = sub_10012EB98();
    char v6 = sub_10011257C(v28 + 128);
    sub_100242CD0(&v27);
    if (*((void *)v4 + 138) < 2uLL) {
      goto LABEL_14;
    }
    uint64_t v7 = *((void *)v4 + 137);
    if (!v7) {
      goto LABEL_14;
    }
    char v8 = v4 + 1096;
    do
    {
      unsigned int v9 = *(unsigned __int16 *)(v7 + 32);
      BOOL v10 = v9 >= a3;
      if (v9 >= a3) {
        uint64_t v11 = (uint64_t *)v7;
      }
      else {
        uint64_t v11 = (uint64_t *)(v7 + 8);
      }
      if (v10) {
        char v8 = (_BYTE *)v7;
      }
      uint64_t v7 = *v11;
    }

    while (*v11);
    if (v8 != v4 + 1096 && *((unsigned __int16 *)v8 + 16) <= a3)
    {
      if (*(_BYTE *)(v28 + 960)) {
        int v24 = 1;
      }
      else {
        int v24 = 2;
      }
      int v25 = v24 | 4;
      int v26 = v24 | 8;
      if (*(_WORD *)(v28 + 986) == 2048) {
        int v12 = v25;
      }
      else {
        int v12 = v26;
      }
    }

    else
    {
LABEL_14:
      int v12 = 0;
    }

    int v13 = (uint64_t **)(v4 + 192);
    char v29 = &v28;
    if (*(void *)sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5])
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
        sub_1006854A0();
      }
      char v29 = &v28;
      uint64_t v14 = *(void *)sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5];
      if (v14)
      {
        BOOL v15 = (void *)sub_1004B6C34(v14);
        operator delete(v15);
      }

      char v29 = &v28;
      *(void *)sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] = 0LL;
    }

    __int16 v16 = operator new(0x208uLL);
    sub_1004B6CCC((uint64_t)v16, v28, a3, v6 ^ 1, v5, v12);
    char v29 = &v28;
    *(void *)sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] = v16;
    char v29 = &v28;
    if (*(void *)sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5])
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      char v29 = &v28;
      *(CFAbsoluteTime *)(*(void *)sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] + 88LL) = Current;
      char v29 = &v28;
      unint64_t v18 = sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29);
      ++*(_DWORD *)(*(void *)v18[5] + 384LL);
    }

    char v29 = &v28;
    if (*(void *)(sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] + 16))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
        sub_100685474();
      }
      char v29 = &v28;
      uint64_t v19 = *(void *)(sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] + 16);
      if (v19)
      {
        char v20 = (void *)sub_100328D20(v19);
        operator delete(v20);
      }

      char v29 = &v28;
      *(void *)(sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] + 16) = 0LL;
    }

    uint64_t v21 = operator new(0xC0uLL);
    sub_1004B6E44((uint64_t)v21);
    char v29 = &v28;
    *(void *)(sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] + 16) = v21;
    char v29 = &v28;
    if (*(void *)(sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] + 24))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
        sub_100685448();
      }
      char v29 = &v28;
      uint64_t v22 = *(void **)(sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] + 24);
      if (v22) {
        operator delete(v22);
      }
      char v29 = &v28;
      *(void *)(sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] + 24) = 0LL;
    }

    uint64_t v23 = (char *)operator new(0x80uLL);
    *(void *)uint64_t v23 = 0LL;
    *((_DWORD *)v23 + 2) = 0;
    *(_OWORD *)(v23 + 56) = 0u;
    *(_OWORD *)(v23 + 72) = 0u;
    *(_OWORD *)(v23 + 84) = 0u;
    *((void *)v23 + 14) = 0LL;
    *((void *)v23 + 15) = 0LL;
    *((void *)v23 + 13) = 0LL;
    char v29 = &v28;
    *(void *)(sub_100029574(v13, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5] + 24) = v23;
    return sub_100242CD8(&v27);
  }

  return result;
}

void sub_1004A4DD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t *sub_1004A4E0C(uint64_t a1, __int16 a2, unint64_t a3, int a4)
{
  unint64_t v16 = a3;
  char v6 = (uint64_t **)(a1 + 192);
  uint64_t v17 = &v16;
  *(_WORD *)(sub_100029574((uint64_t **)(a1 + 192), &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17)[5] + 84) = a2;
  uint64_t v17 = &v16;
  *(_BYTE *)(*(void *)(sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17)[5] + 40) + 1LL) = 0;
  uint64_t v17 = &v16;
  *(_BYTE *)(*(void *)(sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17)[5] + 40) + 2LL) = 1;
  uint64_t v17 = &v16;
  *(_BYTE *)(*(void *)(sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17)[5] + 40) + 3LL) = 1;
  uint64_t v17 = &v16;
  *(_DWORD *)(*(void *)(sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17)[5] + 40) + 20LL) = a4;
  sub_100039784(*(void *)(a1 + 216), v16);
  uint64_t v17 = &v16;
  if (**(_BYTE **)(sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17)[5] + 40))
  {
    uint64_t v7 = sub_1002E8D54();
    (*(void (**)(uint64_t, void))(*(void *)v7 + 152LL))(v7, *(void *)(a1 + 216));
    uint64_t v8 = sub_1002E8D54();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 208LL))(v8, *(void *)(a1 + 216) + 1LL, 1LL);
    uint64_t v9 = sub_1002E8D54();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 200LL))(v9, *(void *)(a1 + 216) + 4LL);
    uint64_t v10 = sub_1002E8D54();
    sub_1003CBF90(v10 + 728, a1 + 32);
    uint64_t v11 = sub_1002E8D54();
    sub_1004B7704(v11 + 808, a1 + 48);
    unint64_t v12 = *(void *)(a1 + 216);
    unint64_t v13 = v16;
    uint64_t v17 = &v16;
    uint64_t v14 = sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17);
    sub_1000352CC(v12, v13, *(unsigned __int16 *)(v14[5] + 84));
  }

  uint64_t v17 = &v16;
  uint64_t result = sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17);
  if (*(void *)result[5])
  {
    uint64_t v17 = &v16;
    *(void *)(*(void *)sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17)[5] + 144LL) = 0LL;
    uint64_t v17 = &v16;
    *(void *)(*(void *)sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17)[5] + 152LL) = 0LL;
    uint64_t v17 = &v16;
    *(void *)(*(void *)sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17)[5] + 128LL) = 0LL;
    uint64_t v17 = &v16;
    *(void *)(*(void *)sub_100029574(v6, &v16, (uint64_t)&unk_1006C2518, (uint64_t **)&v17)[5] + 136LL) = 0LL;
    return sub_1004ACD54((uint64_t *)a1, v16);
  }

  return result;
}

void sub_1004A50E4(uint64_t a1)
{
  *(_BYTE *)(a1 + 983) = 0;
  uint64_t v10 = 0LL;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000LL;
  uint64_t v2 = off_1008F1130;
  unint64_t v13 = off_1008F1130;
  if (!off_1008F1130)
  {
    uint64_t v3 = sub_1004B6B64();
    uint64_t v2 = dlsym(v3, "tailspin_config_create_with_current_state");
    uint64_t v11[3] = (uint64_t)v2;
    off_1008F1130 = v2;
  }

  _Block_object_dispose(&v10, 8);
  if (!v2)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "tailspin_config_t BT::soft_tailspin_config_create_with_current_state()"));
    [v8 handleFailureInFunction:v9 file:@"AudioLinkManager.mm" lineNumber:94 description:@"%s" dlerror()];
LABEL_12:

    __break(1u);
    return;
  }

  uint64_t v4 = ((uint64_t (*)(void))v2)();
  *(void *)(a1 + 984) = v4;
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  uint64_t v10 = 0LL;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000LL;
  char v6 = off_1008F1138;
  unint64_t v13 = off_1008F1138;
  if (!off_1008F1138)
  {
    uint64_t v7 = sub_1004B6B64();
    char v6 = dlsym(v7, "tailspin_enabled_set");
    uint64_t v11[3] = (uint64_t)v6;
    off_1008F1138 = v6;
  }

  _Block_object_dispose(&v10, 8);
  if (!v6)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void BT::soft_tailspin_enabled_set(tailspin_config_t, BOOL)"));
    [v8 handleFailureInFunction:v9 file:@"AudioLinkManager.mm" lineNumber:106 description:@"%s" dlerror()];
    goto LABEL_12;
  }

  ((void (*)(uint64_t, uint64_t))v6)(v5, 1LL);
  sub_1004B0FBC(*(void *)(a1 + 984), 64LL);
  sub_1004B0FBC(*(void *)(a1 + 984), 48LL);
  sub_1004B10EC(*(void *)(a1 + 984));
}

void sub_1004A52C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1004A52FC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v42 = a3;
  uint64_t v6 = *(void *)(a1 + 224);
  if (v6)
  {
  }

  unint64_t v43 = a3;
  *(void *)__int128 buf = &v43;
  uint64_t v7 = *(unsigned int *)(*(void *)(sub_100029574( (uint64_t **)(a1 + 192),  &v43,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 40)
                       + 24LL);
  unint64_t v43 = v42;
  *(void *)__int128 buf = &v43;
  uint64_t v8 = *(void *)(sub_100029574((uint64_t **)(a1 + 192), &v43, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 40);
  uint64_t v9 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a1 + 216);
    uint64_t v11 = *(void *)(v10 + 8LL * a2 + 168);
    v10 += 48LL;
    uint64_t v12 = *(void *)(v10 + 8 * v7);
    uint64_t v13 = *(void *)(v10 + 8LL * *(unsigned int *)(v8 + 24));
    unint64_t v43 = v42;
    *(void *)__int128 buf = &v43;
    int v14 = *(_DWORD *)(*(void *)(sub_100029574((uint64_t **)(a1 + 192), &v43, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                                + 40)
                    + 20LL);
    *(_DWORD *)__int128 buf = 136447234;
    *(void *)&uint8_t buf[4] = v11;
    __int16 v45 = 2082;
    uint64_t v46 = v12;
    __int16 v47 = 2082;
    uint64_t v48 = v13;
    __int16 v49 = 1024;
    int v50 = 0;
    __int16 v51 = 1024;
    int v52 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Low Latency Game pre Transition: %{public}s. State: %{public}s -> %{public}s. handled %d. latency %d",  buf,  0x2Cu);
  }

  switch(a2)
  {
    case 0u:
      if ((_DWORD)v7 != 9) {
        goto LABEL_50;
      }
      *(_DWORD *)(v8 + 24) = 1;
      BOOL v15 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Low Latency Game exit completed, re-evaluate latency mode",  buf,  2u);
      }

      goto LABEL_39;
    case 2u:
      if ((_DWORD)v7 == 12)
      {
        *(_DWORD *)(v8 + 24) = 13;
        sub_100028EF0(*(void *)(a1 + 224), 2, v42);
        goto LABEL_47;
      }

      if ((_DWORD)v7 != 2 && (_DWORD)v7 != 1) {
        goto LABEL_50;
      }
      *(_DWORD *)(v8 + 24) = 5;
      uint64_t v17 = *(void *)(a1 + 224);
      unint64_t v18 = v42;
      uint64_t v16 = 1LL;
      int v19 = 1;
LABEL_25:
      sub_100028FA4(v17, v19, v18);
      goto LABEL_51;
    case 3u:
      if ((_DWORD)v7 == 8)
      {
        int v20 = 7;
LABEL_38:
        *(_DWORD *)(v8 + 24) = v20;
LABEL_39:
        unint64_t v26 = *(void *)(a1 + 216);
        unint64_t v27 = v42;
        *(void *)__int128 buf = &v42;
        unint64_t v28 = sub_100029574((uint64_t **)(a1 + 192), (unint64_t *)&v42, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        sub_1000352CC(v26, v27, *(unsigned __int16 *)(v28[5] + 84));
        goto LABEL_47;
      }

      if ((_DWORD)v7 == 5)
      {
        int v20 = 4;
        goto LABEL_38;
      }

      char v29 = (os_log_s *)qword_1008F7570;
      uint64_t v16 = 0LL;
      if (!os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_51;
      }
      uint64_t v30 = *(void *)(*(void *)(a1 + 216) + 8 * v7 + 48);
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Low Latency Game transitionStateMachine: got FTO in state %{public}s",  buf,  0xCu);
LABEL_50:
      uint64_t v16 = 0LL;
      goto LABEL_51;
    case 4u:
      if ((_DWORD)v7 != 6) {
        goto LABEL_50;
      }
      *(_DWORD *)(v8 + 24) = 13;
      sub_100028EF0(*(void *)(a1 + 224), 2, v42);
      sub_1004B1F54(a1, v42);
      goto LABEL_47;
    case 6u:
      if ((_DWORD)v7 != 13) {
        goto LABEL_50;
      }
      *(_DWORD *)(v8 + 24) = 10;
      goto LABEL_47;
    case 8u:
      sub_10003B840(*(void *)(a1 + 216), v42);
      sub_10002912C(*(void *)(a1 + 224), v42);
      uint64_t v16 = 1LL;
      sub_100028EF0(*(void *)(a1 + 224), 1, v42);
      *(_DWORD *)(v8 + 24) = 8;
      uint64_t v17 = *(void *)(a1 + 224);
      unint64_t v18 = v42;
      int v19 = 3;
      goto LABEL_25;
    case 0xAu:
      if ((_DWORD)v7 == 7)
      {
        *(_DWORD *)(v8 + 24) = 9;
        uint64_t v31 = *(void *)(a1 + 224);
        unint64_t v32 = v42;
        int v33 = 0;
LABEL_46:
        sub_100028FA4(v31, v33, v32);
LABEL_47:
        uint64_t v16 = 1LL;
        goto LABEL_51;
      }

      if ((_DWORD)v7 == 4)
      {
        if (*(_DWORD *)(sub_1004AD5C4(a1, v42) + 20) != 10)
        {
          uint64_t v34 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
            sub_1006854CC((unint64_t *)&v42, a1, v34);
          }
          goto LABEL_50;
        }

        *(_DWORD *)(v8 + 24) = 6;
        uint64_t v31 = *(void *)(a1 + 224);
        unint64_t v32 = v42;
        int v33 = 2;
        goto LABEL_46;
      }

      if ((_DWORD)v7) {
        goto LABEL_50;
      }
      uint64_t v16 = 1LL;
      *(_DWORD *)(v8 + 24) = 1;
      sub_1004B1EC8(a1);
LABEL_51:
      uint64_t v35 = *(unsigned int *)(v8 + 24);
      if ((_DWORD)v7 != (_DWORD)v35)
      {
        __int16 v36 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v37 = *(void *)(a1 + 216);
          uint64_t v38 = *(void *)(v37 + 8LL * a2 + 168);
          v37 += 48LL;
          uint64_t v39 = *(void *)(v37 + 8 * v7);
          uint64_t v40 = *(void *)(v37 + 8 * v35);
          *(_DWORD *)__int128 buf = 136446978;
          *(void *)&uint8_t buf[4] = v38;
          __int16 v45 = 2082;
          uint64_t v46 = v39;
          __int16 v47 = 2082;
          uint64_t v48 = v40;
          __int16 v49 = 1024;
          int v50 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Low Latency Game Transition: %{public}s. State: %{public}s -> %{public}s. handled %d",  buf,  0x26u);
        }
      }

      return v16;
    case 0xBu:
      sub_10003B840(*(void *)(a1 + 216), v42);
      sub_10002912C(*(void *)(a1 + 224), v42);
      if ((_DWORD)v7) {
        BOOL v21 = (_DWORD)v7 == 14;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21)
      {
        *(_DWORD *)(v8 + 24) = 0;
        sub_100028FA4(*(void *)(a1 + 224), 0, v42);
        sub_100028EF0(*(void *)(a1 + 224), 1, v42);
        uint64_t v22 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Low Latency Game stopped, re-evaluate latency mode",  buf,  2u);
        }

        unint64_t v23 = *(void *)(a1 + 216);
        unint64_t v24 = v42;
        *(void *)__int128 buf = &v42;
        int v25 = sub_100029574((uint64_t **)(a1 + 192), (unint64_t *)&v42, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        sub_1000352CC(v23, v24, *(unsigned __int16 *)(v25[5] + 84));
      }

      goto LABEL_50;
    default:
      uint64_t v16 = sub_1004B4698(a1, a2, v42);
      goto LABEL_51;
  }

void sub_1004A5914(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 1)
  {
    if (!*(_BYTE *)(a1 + 335))
    {
      if (qword_1008D60D0 != -1) {
        dispatch_once(&qword_1008D60D0, &stru_10089BC90);
      }
      sub_1004267B0((uint64_t)off_1008D60C8, a2, 16LL, 9LL, 110LL, 0LL);
      *(_BYTE *)(a1 + 335) = 1;
      return;
    }

    goto LABEL_11;
  }

  if (a3 != 2 || !*(_BYTE *)(a1 + 335))
  {
LABEL_11:
    uint64_t v6 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = "dynamicLowLatencyExit";
      if (a3 == 1) {
        uint64_t v7 = "dynamicLowLatencyEnter";
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Warning: Recieved duplicate notification for %s",  (uint8_t *)&v8,  0xCu);
    }

    return;
  }

  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_10089BC90);
  }
  sub_1004267B0((uint64_t)off_1008D60C8, a2, 16LL, 9LL, 111LL, 0LL);
  *(_BYTE *)(a1 + 335) = 0;
}

uint64_t sub_1004A5AA0(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  return sub_10037B7AC(qword_1008D6450, *(unsigned __int16 *)(a1 + 32), 6);
}

uint64_t *sub_1004A5AF4(uint64_t a1, unint64_t a2)
{
  unint64_t v15 = a2;
  uint64_t v3 = (uint64_t **)(a1 + 192);
  *(void *)__int128 buf = &v15;
  if (**(_BYTE **)(sub_100029574((uint64_t **)(a1 + 192), &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 40))
  {
    uint64_t v4 = sub_1002E8D54();
    sub_10024E060(v4 + 728, a1 + 32);
    uint64_t v5 = sub_1002E8D54();
    sub_10024E060(v5 + 808, a1 + 48);
  }

  *(void *)__int128 buf = &v15;
  *(_DWORD *)(*(void *)(sub_100029574(v3, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 40) + 20LL) = 6;
  *(void *)__int128 buf = &v15;
  *(_BYTE *)(*(void *)(sub_100029574(v3, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 40) + 1LL) = 0;
  *(void *)__int128 buf = &v15;
  *(void *)(*(void *)(sub_100029574(v3, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 40) + 8LL) = 0LL;
  *(void *)__int128 buf = &v15;
  *(_BYTE *)(*(void *)(sub_100029574(v3, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 40) + 2LL) = 0;
  *(void *)__int128 buf = &v15;
  *(_BYTE *)(*(void *)(sub_100029574(v3, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 40) + 3LL) = 0;
  *(void *)__int128 buf = &v15;
  *(_DWORD *)(*(void *)(sub_100029574(v3, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 40) + 24LL) = 0;
  uint64_t v6 = sub_1002E8D54();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 216LL))(v6, *(void *)(a1 + 216) + 2LL);
  uint64_t v7 = sub_1002E8D54();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 224LL))(v7, a1 + 904);
  unint64_t v8 = *(void *)(a1 + 216);
  *(_WORD *)(v8 + 5) = 0;
  *(_WORD *)unint64_t v8 = 1;
  *(_BYTE *)(v8 + 3) = 0;
  **(_BYTE **)(a1 + 224) = 0;
  if (*(_BYTE *)(v8 + 2) || *(_BYTE *)(v8 + 8) || *(_BYTE *)(v8 + 7))
  {
    uint64_t v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(unsigned __int8 *)(v8 + 8);
      int v11 = *(unsigned __int8 *)(v8 + 7);
      *(_DWORD *)__int128 buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v10;
      __int16 v17 = 1024;
      int v18 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency: Re-enable LLM, fSpatialVideoOn = %d fSpatialMusicOn = %d",  buf,  0xEu);
      unint64_t v8 = *(void *)(a1 + 216);
    }

    unint64_t v12 = v15;
    *(void *)__int128 buf = &v15;
    uint64_t v13 = sub_100029574(v3, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
    sub_1000352CC(v8, v12, *(unsigned __int16 *)(v13[5] + 84));
  }

  *(void *)__int128 buf = &v15;
  uint64_t result = sub_100029574(v3, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
  if (*(void *)result[5]) {
    return sub_1004ACD54((uint64_t *)a1, v15);
  }
  return result;
}

void sub_1004A5DE4(uint64_t a1)
{
  *(_BYTE *)(a1 + 983) = 0;
  uint64_t v2 = *(void *)(a1 + 984);
  if (v2) {
    sub_1004B120C(v2);
  }
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  uint64_t v3 = off_1008F1158;
  int v11 = off_1008F1158;
  if (!off_1008F1158)
  {
    uint64_t v4 = sub_1004B6B64();
    uint64_t v3 = dlsym(v4, "tailspin_config_create_with_default_config");
    void v9[3] = (uint64_t)v3;
    off_1008F1158 = v3;
  }

  _Block_object_dispose(&v8, 8);
  if (v3)
  {
    uint64_t v5 = ((uint64_t (*)(void))v3)();
    *(void *)(a1 + 984) = v5;
    if (v5)
    {
      sub_1004B10EC(v5);
      sub_1004B120C(*(void *)(a1 + 984));
      *(void *)(a1 + 984) = 0LL;
    }
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "tailspin_config_t BT::soft_tailspin_config_create_with_default_config()"));
    [v6 handleFailureInFunction:v7 file:@"AudioLinkManager.mm" lineNumber:100 description:@"%s" dlerror()];

    __break(1u);
  }

void sub_1004A5EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1004A5F28(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 1144) == (_DWORD)a2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 1088) + 40LL);
    uint64_t v4 = *(void **)(a1 + 1096);
    if (v4)
    {
      do
      {
        uint64_t v5 = v4;
        uint64_t v4 = (void *)v4[1];
      }

      while (v4);
    }

    else
    {
      uint64_t v6 = (void *)(a1 + 1096);
      do
      {
        uint64_t v5 = (void *)v6[2];
        BOOL v7 = *v5 == (void)v6;
        uint64_t v6 = v5;
      }

      while (v7);
    }

    uint64_t v8 = v5[5];
    uint64_t v9 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, void, void, void, void, void, void))(*(void *)v9 + 3320LL))( v9,  a2,  *(void *)(v3 + 8),  *(void *)(v8 + 8),  *(unsigned __int16 *)(v3 + 16),  *(unsigned __int16 *)(v8 + 16),  *(unsigned __int16 *)(v3 + 18),  *(unsigned __int16 *)(v8 + 18));
  }

  else
  {
    *(_BYTE *)(a1 + 1144) = a2;
    sub_1004B17EC(a1, a2);
  }

uint64_t *sub_1004A5FD4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v22 = a2;
  int v5 = sub_1004AB8AC(a1, a2);
  uint64_t v6 = (uint64_t **)(a1 + 192);
  *(void *)__int128 buf = &v22;
  *(_DWORD *)(sub_100029574((uint64_t **)(a1 + 192), (unint64_t *)&v22, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
            + 64) = v5;
  BOOL v7 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)__int128 buf = &v22;
    int v8 = *(_DWORD *)(sub_100029574( (uint64_t **)(a1 + 192),  (unint64_t *)&v22,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 64);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "A2DP Link Adaptive Packet Type: Link Adaptive Packet type support=%d",  buf,  8u);
  }

  if (sub_1004AB928(a1))
  {
    uint64_t v9 = sub_1004050C8();
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1004AB9E8;
    v21[3] = &unk_10087F8E0;
    void v21[4] = a1;
    void v21[5] = v22;
    sub_100405384(v9, v21);
  }

  *(void *)__int128 buf = &v22;
  uint64_t result = sub_100029574((uint64_t **)(a1 + 192), (unint64_t *)&v22, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
  if (*(_DWORD *)(result[5] + 64))
  {
    __int16 v11 = sub_1004ABA48(a1, v22);
    if (a3)
    {
      *(void *)__int128 buf = &v22;
      if (*(_DWORD *)(sub_100029574(v6, (unint64_t *)&v22, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 64) == 2)
      {
        uint64_t v12 = sub_1004050C8();
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        void v19[2] = sub_1004ABB10;
        v19[3] = &unk_100893D28;
        __int16 v20 = v11;
        sub_100405384(v12, v19);
        *(void *)__int128 buf = &v22;
        uint64_t v13 = sub_100029574(v6, (unint64_t *)&v22, (uint64_t)&unk_1006C2518, (uint64_t **)buf) + 5;
        char v14 = 1;
LABEL_12:
        *(_BYTE *)(*v13 + 71) = v14;
        *(void *)__int128 buf = &v22;
        uint64_t result = sub_100029574(v6, (unint64_t *)&v22, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        *(_WORD *)(result[5] + 6_Block_object_dispose(va, 8) = -1;
        return result;
      }

      *(void *)__int128 buf = &v22;
    }

    else
    {
      uint64_t v15 = sub_1004050C8();
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      void v17[2] = sub_1004ABB64;
      v17[3] = &unk_100893D28;
      __int16 v18 = v11;
      sub_100405384(v15, v17);
      *(void *)__int128 buf = &v22;
    }

    uint64_t v16 = sub_100029574(v6, (unint64_t *)&v22, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
    char v14 = 0;
    uint64_t v13 = v16 + 5;
    goto LABEL_12;
  }

  return result;
}

uint64_t sub_1004A62C0(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    if (a3) {
      uint64_t v6 = "Start";
    }
    else {
      uint64_t v6 = "Stop";
    }
    uint64_t v7 = sub_1002E6E00();
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 616LL))(v7);
    uint64_t v9 = "NOT FORCED";
    if (v8) {
      uint64_t v9 = "FORCED";
    }
    int v21 = 136315394;
    uint64_t v22 = v6;
    __int16 v23 = 2080;
    unint64_t v24 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Audio Debug Stream State : %s Ultra High Priority %s ",  (uint8_t *)&v21,  0x16u);
  }

  uint64_t v10 = sub_1002E6E00();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 616LL))(v10);
  if (a3)
  {
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v12 = sub_1002E6E9C();
    unint64_t v13 = *(unsigned int *)(a2 + 128) | ((unint64_t)*(unsigned __int16 *)(a2 + 132) << 32);
    uint64_t v14 = sub_1003D0268(a2);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v12 + 72LL))( v12,  v13,  v14,  2LL,  1LL,  1LL,  1LL,  0LL);
    uint64_t v15 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 944LL))(v15, 1LL, 1LL);
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)sub_1002E6E9C() + 96LL);
  }

  else
  {
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v17 = sub_1002E6E9C();
    unint64_t v18 = *(unsigned int *)(a2 + 128) | ((unint64_t)*(unsigned __int16 *)(a2 + 132) << 32);
    uint64_t v19 = sub_1003D0268(a2);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v17 + 72LL))( v17,  v18,  v19,  2LL,  0LL,  1LL,  1LL,  0LL);
    uint64_t v20 = sub_1002E6E9C();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v20 + 944LL))(v20, 0LL, 1LL);
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)sub_1002E6E9C() + 96LL);
  }

  return v16();
}

uint64_t sub_1004A64C4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_1004A64E8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1004A64F8(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, __int16 a6, __int16 a7)
{
}

void sub_1004A6500(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  unint64_t v4 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A6560;
  block[3] = &unk_100899CF0;
  void block[4] = a1;
  void block[5] = a2;
  __int16 v7 = a3;
  int v6 = a4;
  dispatch_async(v4, block);
}

void sub_1004A6560(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 40);
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    unint64_t v4 = *(void **)(v3 + 200);
    if (v4)
    {
      int v6 = (uint64_t **)(v3 + 192);
      __int16 v7 = (void *)(v3 + 200);
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= v1;
        if (v8 >= v1) {
          uint64_t v10 = v4;
        }
        else {
          uint64_t v10 = v4 + 1;
        }
        if (v9) {
          __int16 v7 = v4;
        }
        unint64_t v4 = (void *)*v10;
      }

      while (*v10);
      if (v7 != (void *)(v3 + 200) && v1 >= v7[4])
      {
        __int16 v11 = *(_WORD *)(a1 + 52);
        *(void *)__int128 buf = a1 + 40;
        *(_WORD *)(sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 60) = v11;
        if (qword_1008D6778 != -1) {
          dispatch_once(&qword_1008D6778, &stru_10089BD10);
        }
        sub_100200BF8(qword_1008D6770, *(void *)(a1 + 40), 0, *(unsigned __int16 *)(a1 + 48));
        int v12 = *(_DWORD *)(a1 + 48);
        *(void *)__int128 buf = v2;
        *(_DWORD *)(sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 80) = v12;
        uint64_t v13 = sub_1002E6E00();
        LOBYTE(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 296LL))(v13);
        *(void *)__int128 buf = v2;
        *(_BYTE *)(sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 56) = v12 ^ 1;
        *(void *)__int128 buf = v2;
        if (*(_BYTE *)(sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 56))
        {
          *(void *)__int128 buf = v2;
          if (*(void *)sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5])
          {
            else {
              __int16 v14 = *(_WORD *)(a1 + 52);
            }
            *(void *)__int128 buf = v2;
            *(_WORD *)(sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 5_Block_object_dispose(va, 8) = v14;
            uint64_t v15 = (os_log_s *)qword_1008F7570;
            if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v35 = v2;
              uint64_t v16 = sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v35);
              id v17 = sub_1004A6934((uint64_t)v16, *(_DWORD *)(v16[5] + 80));
              unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
              uint64_t v35 = v2;
              int v19 = *(unsigned __int16 *)(sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v35)[5] + 58);
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)&uint8_t buf[4] = v18;
              __int16 v37 = 1024;
              int v38 = v19;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "A2DP Link Adaptive Bitrate for %@ started with initial bitrate of %3d",  buf,  0x12u);
            }

            *(void *)__int128 buf = v2;
            unsigned int v20 = *(unsigned __int16 *)(sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 84);
            *(void *)__int128 buf = v2;
            int v21 = sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
            uint64_t v22 = v3 + 1096;
            uint64_t v23 = *(void *)(v3 + 1096);
            if (!v23) {
              goto LABEL_33;
            }
            uint64_t v24 = v3 + 1096;
            do
            {
              unsigned int v25 = *(unsigned __int16 *)(v23 + 32);
              BOOL v26 = v25 >= v20;
              if (v25 >= v20) {
                unint64_t v27 = (uint64_t *)v23;
              }
              else {
                unint64_t v27 = (uint64_t *)(v23 + 8);
              }
              if (v26) {
                uint64_t v24 = v23;
              }
              uint64_t v23 = *v27;
            }

            while (*v27);
            if (v24 == v22 || v20 < *(unsigned __int16 *)(v24 + 32)) {
LABEL_33:
            }
              uint64_t v24 = v3 + 1096;
            __int16 v28 = *(_WORD *)(v21[5] + 58);
            BOOL v29 = v24 != v22;
            uint64_t v30 = sub_1004050C8();
            v31[0] = _NSConcreteStackBlock;
            v31[1] = 3221225472LL;
            v31[2] = sub_1004A6A20;
            v31[3] = &unk_100898380;
            BOOL v34 = v29;
            __int16 v32 = v20;
            __int16 v33 = v28;
            sub_100405384(v30, v31);
          }
        }
      }
    }
  }

void sub_1004A691C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1004A6934(uint64_t a1, int a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  &stru_1008A57D8));
  unint64_t v4 = v3;
  switch(a2)
  {
    case 0:
      int v5 = @"SBC";
      goto LABEL_7;
    case 33023:
      int v5 = @"AAC-ELD";
      goto LABEL_7;
    case 2:
      int v5 = @"AAC-LC";
LABEL_7:
      [v3 appendString:v5];
      return v4;
  }

  [v3 appendString:@"Unknown Codec"];
  __int16 v7 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unknown codec", v8, 2u);
  }

  return v4;
}

void sub_1004A6A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004A6A20(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 36))
  {
    if (qword_1008D6458 != -1) {
      dispatch_once(&qword_1008D6458, &stru_10089BC70);
    }
    sub_10037BD4C(qword_1008D6450, *(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
  }

void sub_1004A6A88(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  uint64_t v4 = a1 - 24;
  int v5 = *(dispatch_queue_s **)(a1 + 216);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A6560;
  block[3] = &unk_100899CF0;
  void block[4] = v4;
  void block[5] = a2;
  __int16 v8 = a3;
  int v7 = a4;
  dispatch_async(v5, block);
}

void sub_1004A6AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004A6B40;
  v3[3] = &unk_10087F8E0;
  v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t *sub_1004A6B40(uint64_t *result)
{
  uint64_t v2 = (unint64_t *)(result + 5);
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v3 = result[4];
    uint64_t v4 = *(void **)(v3 + 200);
    if (v4)
    {
      int v5 = (uint64_t **)(v3 + 192);
      int v6 = (void *)(v3 + 200);
      do
      {
        unint64_t v7 = v4[4];
        BOOL v8 = v7 >= v1;
        if (v7 >= v1) {
          BOOL v9 = v4;
        }
        else {
          BOOL v9 = v4 + 1;
        }
        if (v8) {
          int v6 = v4;
        }
        uint64_t v4 = (void *)*v9;
      }

      while (*v9);
      if (v6 != (void *)(v3 + 200) && v1 >= v6[4])
      {
        int v12 = (unint64_t *)(result + 5);
        *(_BYTE *)(sub_100029574(v5, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 56) = 0;
        __int16 v10 = *(_WORD *)(v3 + 1030);
        int v12 = v2;
        *(_WORD *)(sub_100029574(v5, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 5_Block_object_dispose(va, 8) = v10;
        int v12 = v2;
        *(_WORD *)(sub_100029574(v5, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 62) = -1;
        __int16 v11 = *(_WORD *)(v3 + 1030);
        int v12 = v2;
        *(_WORD *)(sub_100029574(v5, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 60) = v11;
        int v12 = v2;
        uint64_t result = sub_100029574(v5, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
        *(_DWORD *)(result[5] + 80) = 0;
      }
    }
  }

  return result;
}

void sub_1004A6C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 - 24;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A6B40;
  v4[3] = &unk_10087F8E0;
  v4[4] = v2;
  void v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_1004A6CE4(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A6D44;
  v4[3] = &unk_100893298;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A6D44(uint64_t a1)
{
}

void sub_1004A6D5C(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A6D44;
  v4[3] = &unk_100893298;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A6DC0(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A6E20;
  v4[3] = &unk_100893298;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A6E20(uint64_t a1)
{
}

void sub_1004A6E38(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A6E20;
  v4[3] = &unk_100893298;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A6E9C(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004A6EF8;
  v3[3] = &unk_1008878D8;
  v3[4] = a1;
  __int16 v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1004A6EF8(uint64_t a1)
{
}

void sub_1004A6F0C(uint64_t a1, __int16 a2)
{
  uint64_t v2 = a1 - 24;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A6EF8;
  v4[3] = &unk_1008878D8;
  v4[4] = v2;
  __int16 v5 = a2;
  dispatch_async(v3, v4);
}

double sub_1004A6F68(void *a1, int a2)
{
  __uint64_t v4 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (a2)
  {
    a1[103] = v4;
  }

  else
  {
    double result = (double)(v4 - a1[103]) * 0.000000001;
    a1[104] = (unint64_t)result;
    a1[105] += (unint64_t)result;
  }

  return result;
}

void sub_1004A6FC8(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A7028;
  v4[3] = &unk_100893298;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A7028(uint64_t a1)
{
}

void sub_1004A7040(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A7028;
  v4[3] = &unk_100893298;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A70A4(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A7104;
  v4[3] = &unk_100893298;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A7104(uint64_t a1)
{
}

void sub_1004A711C(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A7104;
  v4[3] = &unk_100893298;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A7180(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A71E0;
  v4[3] = &unk_100893298;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A71E0(uint64_t a1)
{
}

void sub_1004A71F8(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A71E0;
  v4[3] = &unk_100893298;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A725C(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A72BC;
  v4[3] = &unk_100893298;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A72BC(uint64_t a1)
{
}

void sub_1004A72D4(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A72BC;
  v4[3] = &unk_100893298;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A7338(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004A7394;
  v3[3] = &unk_1008878D8;
  v3[4] = a1;
  __int16 v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1004A7394(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 864LL)) {
    sub_10053BFC4(*(void *)(*(void *)(a1 + 32) + 864LL), *(unsigned __int16 *)(a1 + 40));
  }
}

void sub_1004A73B0(uint64_t a1, __int16 a2)
{
  uint64_t v2 = a1 - 24;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A7394;
  v4[3] = &unk_1008878D8;
  v4[4] = v2;
  __int16 v5 = a2;
  dispatch_async(v3, v4);
}

void sub_1004A740C(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  __int16 v4 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A746C;
  block[3] = &unk_100889618;
  char v7 = a4;
  void block[4] = a1;
  void block[5] = a2;
  __int16 v6 = a3;
  dispatch_async(v4, block);
}

void sub_1004A746C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 50)) {
      __int16 v5 = "Publish ";
    }
    else {
      __int16 v5 = "Unpublish ";
    }
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v25 = 2048;
    uint64_t v26 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency : A2DP Device %{public}s, device: %p",  buf,  0x16u);
  }

  char v7 = (unint64_t *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    BOOL v8 = (void *)(v2 + 200);
    BOOL v9 = *(void **)(v2 + 200);
    if (*(_BYTE *)(a1 + 50))
    {
      if (!v9) {
        goto LABEL_19;
      }
      __int16 v10 = (void *)(v2 + 200);
      do
      {
        unint64_t v11 = v9[4];
        BOOL v12 = v11 >= v6;
        if (v11 >= v6) {
          uint64_t v13 = v9;
        }
        else {
          uint64_t v13 = v9 + 1;
        }
        if (v12) {
          __int16 v10 = v9;
        }
        BOOL v9 = (void *)*v13;
      }

      while (*v13);
      if (v10 == v8 || v6 < v10[4])
      {
LABEL_19:
        __int16 v14 = operator new(0x70uLL);
        sub_10003BCE8((uint64_t)v14, 0, 0, 0);
        *(void *)__int128 buf = a1 + 40;
        sub_100029574((uint64_t **)(v2 + 192), (unint64_t *)(a1 + 40), (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] = (uint64_t)v14;
        uint64_t v15 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "a2dpDevicePublishUpdate create new device mapping",  buf,  2u);
        }
      }

      if (qword_1008D6778 != -1) {
        dispatch_once(&qword_1008D6778, &stru_10089BD10);
      }
      sub_1002008D0(qword_1008D6770, *(void *)(a1 + 40));
      __int16 v16 = *(_WORD *)(a1 + 48);
      *(void *)__int128 buf = v7;
      *(_WORD *)(sub_100029574((uint64_t **)(v2 + 192), v7, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 84) = v16;
      *(void *)__int128 buf = v7;
      *(_BYTE *)(sub_100029574((uint64_t **)(v2 + 192), v7, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 8_Block_object_dispose(va, 8) = 1;
      id v17 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Initialize the fCurrentMode to %d",  buf,  8u);
      }

      *(void *)__int128 buf = v7;
      **(_BYTE **)(sub_100029574((uint64_t **)(v2 + 192), v7, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 4_Block_object_dispose(va, 8) = 0;
      sub_10003B88C(*(void *)(v2 + 216), *v7);
    }

    else if (v9)
    {
      unint64_t v18 = (void *)(v2 + 200);
      do
      {
        unint64_t v19 = v9[4];
        BOOL v20 = v19 >= v6;
        if (v19 >= v6) {
          int v21 = v9;
        }
        else {
          int v21 = v9 + 1;
        }
        if (v20) {
          unint64_t v18 = v9;
        }
        BOOL v9 = (void *)*v21;
      }

      while (*v21);
      if (v18 != v8 && v6 >= v18[4])
      {
        *(void *)__int128 buf = a1 + 40;
        *(_BYTE *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 8_Block_object_dispose(va, 8) = 0;
        *(void *)__int128 buf = a1 + 40;
        if (!*(_BYTE *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 87))
        {
          *(void *)__int128 buf = a1 + 40;
          if (!*(_BYTE *)(sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 88))
          {
            *(void *)__int128 buf = a1 + 40;
            uint64_t v22 = (uint64_t *)sub_100029574( (uint64_t **)(v2 + 192),  (unint64_t *)(a1 + 40),  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5];
            if (v22)
            {
              uint64_t v23 = sub_1004B6A08(v22);
              operator delete(v23);
            }

            sub_10020166C(v2 + 192, (unint64_t *)(a1 + 40));
            if (qword_1008D6778 != -1) {
              dispatch_once(&qword_1008D6778, &stru_10089BD10);
            }
            sub_100200A5C(qword_1008D6770, *v7);
          }
        }
      }
    }
  }

void sub_1004A7860(_Unwind_Exception *a1)
{
}

void sub_1004A787C(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  uint64_t v4 = a1 - 24;
  __int16 v5 = *(dispatch_queue_s **)(a1 + 216);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A746C;
  block[3] = &unk_100889618;
  char v8 = a4;
  void block[4] = v4;
  void block[5] = a2;
  __int16 v7 = a3;
  dispatch_async(v5, block);
}

void sub_1004A78DC(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A793C;
  block[3] = &unk_100889618;
  char v7 = a4;
  __int16 v6 = a3;
  void block[4] = a1;
  void block[5] = a2;
  dispatch_async(v4, block);
}

void sub_1004A793C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (int *)(v2 + 1160);
  int v4 = *(_DWORD *)(v2 + 1160);
  if (!v4)
  {
    notify_register_check("com.apple.bluetooth.WirelessSplitterOn", (int *)(v2 + 1160));
    int v4 = *v3;
  }

  uint64_t state64 = 0LL;
  notify_get_state(v4, &state64);
  int v5 = state64 & 1;
  __int16 v6 = (int *)(v2 + 1164);
  int v7 = *(_DWORD *)(v2 + 1164);
  if (v7 == -1)
  {
    notify_register_check("com.apple.bluetooth.GuestConnected", (int *)(v2 + 1164));
    int v7 = *v6;
  }

  uint64_t v53 = 0LL;
  notify_get_state(v7, &v53);
  char v8 = v53;
  if (*(_BYTE *)(a1 + 50))
  {
    if (!*(void *)(v2 + 1104)) {
      goto LABEL_18;
    }
    uint64_t v9 = *(void *)(v2 + 1096);
    if (!v9) {
      goto LABEL_18;
    }
    unsigned int v10 = *(unsigned __int16 *)(a1 + 48);
    uint64_t v11 = v2 + 1096;
    do
    {
      unsigned int v12 = *(unsigned __int16 *)(v9 + 32);
      BOOL v13 = v12 >= v10;
      if (v12 >= v10) {
        __int16 v14 = (uint64_t *)v9;
      }
      else {
        __int16 v14 = (uint64_t *)(v9 + 8);
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      uint64_t v9 = *v14;
    }

    while (*v14);
    if (v11 != v2 + 1096 && v10 >= *(unsigned __int16 *)(v11 + 32))
    {
      int v38 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v39 = *(void *)(a1 + 40);
        if (v39)
        {
          sub_1003CF00C(v39, __p);
          if (v56 >= 0) {
            uint64_t v40 = __p;
          }
          else {
            uint64_t v40 = (void **)__p[0];
          }
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v58 = (const char *)v40;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter Mode is already enabled for device %{public}s",  buf,  0xCu);
          if (v56 < 0) {
            operator delete(__p[0]);
          }
        }

        else
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v58 = "null";
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter Mode is already enabled for device %{public}s",  buf,  0xCu);
        }
      }
    }

    else
    {
LABEL_18:
      uint64_t v15 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        if (v16)
        {
          sub_1003CF00C(v16, __p);
          if (v56 >= 0) {
            id v17 = __p;
          }
          else {
            id v17 = (void **)__p[0];
          }
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v58 = (const char *)v17;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter Mode is enabled for device %{public}s",  buf,  0xCu);
          if (v56 < 0) {
            operator delete(__p[0]);
          }
        }

        else
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v58 = "null";
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter Mode is enabled for device %{public}s",  buf,  0xCu);
        }
      }

      sub_1004A8034(v2, *(void *)(a1 + 40), *(_WORD *)(a1 + 48));
      uint64_t v37 = *(unsigned __int8 *)(a1 + 50);
      if ((_DWORD)v37 != v5 && *(void *)(v2 + 1104) >= 2uLL)
      {
        notify_set_state(*v3, v37);
        notify_post("com.apple.bluetooth.WirelessSplitterOn");
      }
    }

    __p[0] = (void *)(a1 + 48);
    int v44 = sub_1002550B8((uint64_t **)(v2 + 1088), (unsigned __int16 *)(a1 + 48), (uint64_t)&unk_1006C2518, (_WORD **)__p);
    int v45 = *(unsigned __int8 *)(a1 + 50);
    if (*((unsigned __int8 *)v44[5] + 20) != v45
      && !sub_1004A81CC((uint64_t)v44, *(void *)(a1 + 40), v45 != 0))
    {
      char v46 = *(_BYTE *)(a1 + 50);
      __p[0] = (void *)(a1 + 48);
      *((_BYTE *)sub_1002550B8( (uint64_t **)(v2 + 1088),  (unsigned __int16 *)(a1 + 48),  (uint64_t)&unk_1006C2518,  (_WORD **)__p)[5] + 20) = v46;
    }

    if (*(_BYTE *)(*(void *)(a1 + 40) + 960LL)) {
      BOOL v47 = (v8 & 1) == 0LL;
    }
    else {
      BOOL v47 = 1;
    }
    if (!v47)
    {
      uint64_t v48 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter aggregation enabled setting fGuestConnectedToken to disabled",  (uint8_t *)__p,  2u);
      }

      uint64_t v49 = 0LL;
LABEL_93:
      notify_set_state(*v6, v49);
      notify_post("com.apple.bluetooth.GuestConnected");
    }
  }

  else
  {
    unint64_t v18 = (unsigned __int16 *)(a1 + 48);
    unint64_t v19 = (uint64_t *)(v2 + 1096);
    uint64_t v20 = *(void *)(v2 + 1096);
    if (v20)
    {
      unsigned int v21 = *v18;
      uint64_t v22 = v2 + 1096;
      do
      {
        unsigned int v23 = *(unsigned __int16 *)(v20 + 32);
        BOOL v24 = v23 >= v21;
        if (v23 >= v21) {
          __int16 v25 = (uint64_t *)v20;
        }
        else {
          __int16 v25 = (uint64_t *)(v20 + 8);
        }
        if (v24) {
          uint64_t v22 = v20;
        }
        uint64_t v20 = *v25;
      }

      while (*v25);
      if ((uint64_t *)v22 != v19 && v21 >= *(unsigned __int16 *)(v22 + 32))
      {
        __p[0] = (void *)(a1 + 48);
        uint64_t v26 = sub_1002550B8( (uint64_t **)(v2 + 1088),  (unsigned __int16 *)(a1 + 48),  (uint64_t)&unk_1006C2518,  (_WORD **)__p);
        int v27 = *(unsigned __int8 *)(a1 + 50);
        if (*((unsigned __int8 *)v26[5] + 20) != v27
          && !sub_1004A81CC((uint64_t)v26, *(void *)(a1 + 40), v27 != 0))
        {
          char v28 = *(_BYTE *)(a1 + 50);
          __p[0] = (void *)(a1 + 48);
          *((_BYTE *)sub_1002550B8( (uint64_t **)(v2 + 1088),  (unsigned __int16 *)(a1 + 48),  (uint64_t)&unk_1006C2518,  (_WORD **)__p)[5] + 20) = v28;
        }
      }
    }

    sub_1003D0CA0(*(void *)(a1 + 40), 0);
    uint64_t v29 = *v19;
    if (!*v19) {
      goto LABEL_50;
    }
    unsigned int v30 = *v18;
    uint64_t v31 = v2 + 1096;
    do
    {
      unsigned int v32 = *(unsigned __int16 *)(v29 + 32);
      BOOL v33 = v32 >= v30;
      if (v32 >= v30) {
        BOOL v34 = (uint64_t *)v29;
      }
      else {
        BOOL v34 = (uint64_t *)(v29 + 8);
      }
      if (v33) {
        uint64_t v31 = v29;
      }
      uint64_t v29 = *v34;
    }

    while (*v34);
    if ((uint64_t *)v31 != v19 && v30 >= *(unsigned __int16 *)(v31 + 32))
    {
      unsigned __int8 v41 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v42 = *(void *)(a1 + 40);
        if (v42)
        {
          sub_1003CF00C(v42, __p);
          if (v56 >= 0) {
            unint64_t v43 = __p;
          }
          else {
            unint64_t v43 = (void **)__p[0];
          }
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v58 = (const char *)v43;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter Mode is disabled for device %{public}s",  buf,  0xCu);
          if (v56 < 0) {
            operator delete(__p[0]);
          }
        }

        else
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v58 = "null";
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter Mode is disabled for device %{public}s",  buf,  0xCu);
        }
      }

      std::string::assign((std::string *)(v2 + 1168), "WS_ERROR_DISCONNECTION_MODE_DISABLED");
      sub_1003D0CE4(*(void *)(a1 + 40), 0);
      sub_1004A8288(v2, *(_WORD *)(a1 + 48));
    }

    else
    {
LABEL_50:
      std::string::assign((std::string *)(v2 + 1168), "WS_ERROR_DISCONNECTION_NO_DEVICE_FOR_HANDLE");
      sub_1004A8394(v2);
      uint64_t v35 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        int v36 = *v18;
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter device does not exists with handle %d, it's already deleted",  (uint8_t *)__p,  8u);
      }
    }

    uint64_t v50 = *(unsigned __int8 *)(a1 + 50);
    if ((_DWORD)v50 != v5)
    {
      notify_set_state(*v3, v50);
      notify_post("com.apple.bluetooth.WirelessSplitterOn");
    }

    if (*(_BYTE *)(*(void *)(a1 + 40) + 960LL)) {
      BOOL v51 = (v8 & 1) == 0LL;
    }
    else {
      BOOL v51 = 0;
    }
    if (v51)
    {
      std::string::assign((std::string *)(v2 + 1168), "WS_ERROR_START_AGGREGATION_DISABLED");
      sub_1004A8394(v2);
      int v52 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter aggregation disabled setting fGuestConnectedToken to enabled",  (uint8_t *)__p,  2u);
      }

      uint64_t v49 = 1LL;
      goto LABEL_93;
    }
  }

  sub_1000352CC(*(void *)(v2 + 216), 0LL, *(unsigned __int16 *)(a1 + 48));
}

double sub_1004A8034(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  unsigned __int16 v19 = a3;
  int v5 = (uint64_t **)(a1 + 1088);
  if (*(void *)(a1 + 1104)) {
    __int16 v6 = 4096;
  }
  else {
    __int16 v6 = 2048;
  }
  sub_1003D0CE4(a2, v6);
  int v18 = 0;
  *(void *)__val = 0LL;
  int v16 = 0;
  if (a2) {
    sub_1003D55EC(a2, &v18, &__val[1], __val, &v16);
  }
  int v7 = operator new(0x18uLL);
  *(_BYTE *)int v7 = 1;
  v7[1] = a2 + 128;
  *((_DWORD *)v7 + 4) = 2359616;
  *((_BYTE *)v7 + 20) = 0;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_1002550B8(v5, &v19, (uint64_t)&unk_1006C2518, &v15)[5] = v7;
  uint64_t v8 = *(void *)(a1 + 1112);
  if (!v8)
  {
    uint64_t v9 = operator new(0xB0uLL);
    sub_10037FDD8((uint64_t)v9);
    *(void *)(a1 + 1112) = v9;
    v9[17] = *(_DWORD *)(a2 + 972);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v8 = *(void *)(a1 + 1112);
    *(CFAbsoluteTime *)uint64_t v8 = Current;
    *(_DWORD *)(v8 + 72) = *(_DWORD *)(a2 + 980);
  }

  if (*(_BYTE *)(a2 + 960))
  {
    *(_DWORD *)(v8 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 972);
    goto LABEL_10;
  }

  if (*(char *)(v8 + 103) < 0)
  {
    if (!*(void *)(v8 + 88)) {
      goto LABEL_17;
    }
  }

  else if (!*(_BYTE *)(v8 + 103))
  {
LABEL_17:
    std::to_string(&v15, __val[0]);
    uint64_t v14 = *(void *)(a1 + 1112);
    unsigned int v12 = (void **)(v14 + 80);
    goto LABEL_11;
  }

void sub_1004A81B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1004A81CC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000LL;
  int v13 = 1;
  uint64_t v5 = sub_100405058();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1004B1C30;
  v8[3] = &unk_10089BB38;
  char v9 = a3;
  v8[4] = &v10;
  void v8[5] = a2;
  sub_1004054B4(v5, v8);
  uint64_t v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1004A8270( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1004A8288(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v6 = a2;
  sub_1004A5F28(a1, 0LL);
  sub_1004A8394(a1);
  *(void *)__int128 buf = &v6;
  uint64_t v3 = sub_1002550B8((uint64_t **)(a1 + 1088), &v6, (uint64_t)&unk_1006C2518, (_WORD **)buf)[5];
  if (v3) {
    operator delete(v3);
  }
  sub_100329E44(a1 + 1088, &v6);
  *(_BYTE *)(a1 + 1144) = 0;
  int v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 1104);
    *(_DWORD *)__int128 buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v6;
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter destroying aggregate device with handle %hu fWirelessSplitterA2dpDevices devices %lu left",  buf,  0x12u);
  }

void sub_1004A8394(uint64_t a1)
{
  uint64_t v2 = sub_1002E8D54();
  sub_10024E060(v2 + 728, a1 + 32);
  **(_BYTE **)(a1 + 216) = 1;
  if (*(void *)(a1 + 1112))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v4 = *(void *)(a1 + 1112);
    unint64_t v5 = *(void *)v4;
    LODWORD(v5) = *(_DWORD *)(v4 + 32);
    *(_DWORD *)(v4 + 32) = (Current - *(double *)v4 + (double)v5);
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_10089BCF0);
    }
    uint64_t v6 = *(void *)(a1 + 1112);
    *(_DWORD *)(v6 + 36) += *((_DWORD *)off_1008D6190 + 52);
    else {
      size_t v7 = *(void *)(v6 + 88);
    }
    memset(v41, 0, 24);
    __int16 v8 = v41;
    sub_100271C18((uint64_t)v41, v7 + 1);
    if (v41[23] < 0) {
      __int16 v8 = *(_BYTE **)v41;
    }
    if (v7)
    {
      uint64_t v11 = *(char **)(v6 + 80);
      uint64_t v10 = (char *)(v6 + 80);
      uint64_t v9 = v11;
      if (v10[23] >= 0) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = v9;
      }
      memmove(v8, v12, v7);
    }

    *(_WORD *)&v8[v7] = 45;
    uint64_t v13 = *(void *)(a1 + 1112);
    int v16 = *(const std::string::value_type **)(v13 + 104);
    uint64_t v14 = v13 + 104;
    std::string v15 = v16;
    int v17 = *(char *)(v14 + 23);
    if (v17 >= 0) {
      int v18 = (const std::string::value_type *)v14;
    }
    else {
      int v18 = v15;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v14 + 8);
    }
    uint64_t v20 = std::string::append((std::string *)v41, v18, v19);
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
    v58[0] = v20->__r_.__value_.__l.__size_;
    *(void *)((char *)v58 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 size = v20->__r_.__value_.__s.__size_;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v23 = *(void *)(a1 + 1112);
    uint64_t v24 = v58[0];
    *(void *)(v23 + 12_Block_object_dispose(va, 8) = v21;
    *(void *)(v23 + 136) = v24;
    *(void *)(v23 + 143) = *(void *)((char *)v58 + 7);
    *(_BYTE *)(v23 + 151) = size;
    if ((v41[23] & 0x80000000) != 0) {
      operator delete(*(void **)v41);
    }
    std::string::operator=((std::string *)(*(void *)(a1 + 1112) + 152LL), (const std::string *)(a1 + 1168));
    uint64_t v25 = sub_1002E8D94();
    (*(void (**)(uint64_t, void))(*(void *)v25 + 168LL))(v25, *(void *)(a1 + 1112));
    uint64_t v26 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(void *)(a1 + 1112);
      char v28 = (void *)(v27 + 80);
      uint64_t v29 = (void *)(v27 + 104);
      unsigned int v30 = (void *)(v27 + 128);
      int v32 = *(_DWORD *)(v27 + 32);
      int v31 = *(_DWORD *)(v27 + 36);
      int v33 = *(_DWORD *)(v27 + 40);
      int v34 = *(_DWORD *)(v27 + 44);
      int v36 = *(_DWORD *)(v27 + 48);
      int v35 = *(_DWORD *)(v27 + 52);
      int v38 = *(_DWORD *)(v27 + 68);
      int v37 = *(_DWORD *)(v27 + 72);
      uint64_t v39 = (void *)(v27 + 152);
      *(_DWORD *)unsigned __int8 v41 = 67111938;
      *(_DWORD *)&v41[4] = v32;
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&_BYTE v41[10] = v31;
      *(_WORD *)&uint8_t v41[14] = 1024;
      *(_DWORD *)&v41[16] = v33;
      *(_WORD *)&v41[20] = 1024;
      *(_DWORD *)&v41[22] = v34;
      __int16 v42 = 1024;
      int v43 = v36;
      __int16 v44 = 1024;
      int v45 = v35;
      __int16 v46 = 1024;
      int v47 = v38;
      __int16 v48 = 1024;
      int v49 = v37;
      __int16 v50 = 2080;
      BOOL v51 = v28;
      __int16 v52 = 2080;
      uint64_t v53 = v29;
      __int16 v54 = 2080;
      uint64_t v55 = v30;
      __int16 v56 = 2080;
      int v57 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter submitting following metric: fTotalDurationSharingSession:%us fTotalSiriActivationDuringSessio n:%u Sessions fTotalIncomingCallsDuringSessio:%u Calls fTotalOutgoingCallsDuringSession:%u Calls fTotalMusicPlay backDuration:%us fTotalVideoPlaybackDuration:%us fSharingSessionStart:%u [0:Owner,1:Prox,2:Boop,3:ReConn], fShar ingSessionStop:%u, fOwnerWxProductID %s, fGuestWxProductID %s, fOwnerGuestWxProductID %s fErrorCode %s",  v41,  0x5Au);
    }

    uint64_t v40 = *(void *)(a1 + 1112);
    if (v40)
    {
      operator delete((void *)v40);
    }

    *(void *)(a1 + 1112) = 0LL;
  }

void sub_1004A86DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004A8700(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  uint64_t v4 = a1 - 24;
  unint64_t v5 = *(dispatch_queue_s **)(a1 + 216);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A793C;
  block[3] = &unk_100889618;
  char v8 = a4;
  __int16 v7 = a3;
  void block[4] = v4;
  void block[5] = a2;
  dispatch_async(v5, block);
}

uint64_t sub_1004A8760(uint64_t a1, int a2)
{
  return sub_100037C54(*(void *)(a1 + 216), a2);
}

uint64_t sub_1004A8768(uint64_t a1, int a2)
{
  return sub_100039DEC(*(void *)(a1 + 216), a2);
}

void sub_1004A8770(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A87D0;
  v4[3] = &unk_100893298;
  v4[4] = a1;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

void sub_1004A87D0(uint64_t a1)
{
}

void sub_1004A87E8(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004A87D0;
  v4[3] = &unk_100893298;
  v4[4] = a1 - 24;
  __int16 v5 = a2;
  char v6 = a3;
  dispatch_async(v3, v4);
}

uint64_t sub_1004A884C(uint64_t a1, int a2)
{
  return sub_100037B7C(*(void *)(a1 + 216), a2);
}

void sub_1004A8854(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A88B0;
  block[3] = &unk_10087FF20;
  void block[4] = a1;
  void block[5] = a2;
  __int16 v5 = a3;
  dispatch_async(v3, block);
}

void sub_1004A88B0(uint64_t a1)
{
}

void sub_1004A88C4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A8920;
  block[3] = &unk_10087F900;
  void block[4] = a1;
  void block[5] = a2;
  int v5 = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_1004A8920(uint64_t *result)
{
  uint64_t v1 = result[4];
  uint64_t v2 = *(void **)(v1 + 200);
  if (v2)
  {
    uint64_t v3 = result;
    double result = (uint64_t *)(v1 + 192);
    unint64_t v4 = v3[5];
    do
    {
      unint64_t v5 = v2[4];
      if (v4 >= v5)
      {
        if (v5 >= v4)
        {
          int v6 = *((_DWORD *)v3 + 12);
          __int16 v7 = v3 + 5;
          double result = sub_100029574((uint64_t **)result, (unint64_t *)v3 + 5, (uint64_t)&unk_1006C2518, &v7);
          *(_DWORD *)(result[5] + 104) = v6;
          return result;
        }

        ++v2;
      }

      uint64_t v2 = (void *)*v2;
    }

    while (v2);
  }

  return result;
}

uint64_t sub_1004A89A4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  __int16 v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  int v9 = 0;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A8A38;
  block[3] = &unk_10087FEE0;
  void block[5] = a1;
  void block[6] = a2;
  void block[4] = &v6;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t *sub_1004A8A38(uint64_t *result)
{
  uint64_t v1 = result[5];
  uint64_t v2 = *(void **)(v1 + 200);
  if (v2)
  {
    uint64_t v3 = result;
    double result = (uint64_t *)(v1 + 192);
    unint64_t v4 = v3[6];
    do
    {
      unint64_t v5 = v2[4];
      if (v4 >= v5)
      {
        if (v5 >= v4)
        {
          uint64_t v6 = v3 + 6;
          double result = sub_100029574((uint64_t **)result, (unint64_t *)v3 + 6, (uint64_t)&unk_1006C2518, &v6);
          *(_DWORD *)(*(void *)(v3[4] + 8) + 24LL) = *(_DWORD *)(result[5] + 104);
          return result;
        }

        ++v2;
      }

      uint64_t v2 = (void *)*v2;
    }

    while (v2);
  }

  return result;
}

BOOL sub_1004A8AC4(uint64_t a1, unint64_t a2)
{
  return sub_100037D3C(*(void *)(a1 + 216), a2);
}

uint64_t sub_1004A8ACC(uint64_t a1, uint64_t a2)
{
  return sub_100039EAC(*(void *)(a1 + 216), a2);
}

void sub_1004A8AD4(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A8B30;
  block[3] = &unk_10087FF20;
  void block[4] = a1;
  void block[5] = a3;
  __int16 v5 = a2;
  dispatch_async(v3, block);
}

void sub_1004A8B30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (unint64_t *)(a1 + 40);
  kdebug_trace(730022152LL, *(void *)(a1 + 40), 0LL, 0LL, 0LL);
  unint64_t v4 = sub_1004A8FC0(v2, *(unsigned __int16 *)(a1 + 48));
  unint64_t v41 = v4;
  if (v4)
  {
    __int16 v5 = *(void **)(v2 + 200);
    if (v5)
    {
      uint64_t v6 = (uint64_t **)(v2 + 192);
      uint64_t v7 = v2 + 200;
      do
      {
        unint64_t v8 = v5[4];
        BOOL v9 = v8 >= v4;
        if (v8 >= v4) {
          uint64_t v10 = v5;
        }
        else {
          uint64_t v10 = v5 + 1;
        }
        if (v9) {
          uint64_t v7 = (uint64_t)v5;
        }
        __int16 v5 = (void *)*v10;
      }

      while (*v10);
      if (v7 != v2 + 200 && v4 >= *(void *)(v7 + 32))
      {
        *(void *)int v43 = &v41;
        if (*(void *)sub_100029574(v6, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)v43)[5])
        {
          *(void *)int v43 = &v41;
          *(_BYTE *)(*(void *)sub_100029574(v6, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)v43)[5] + 112LL) = 1;
          uint64_t v11 = mach_absolute_time();
          *(void *)int v43 = &v41;
          *(void *)(*(void *)sub_100029574(v6, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)v43)[5] + 120LL) = v11;
          *(void *)int v43 = &v41;
          uint64_t v12 = sub_100029574(v6, &v41, (uint64_t)&unk_1006C2518, (uint64_t **)v43);
          unint64_t v13 = *v3;
          if (*v3 >= 0x33)
          {
            uint64_t v14 = *(void *)v12[5];
            unint64_t v15 = *(void *)(v14 + 504);
            ++*(void *)(v14 + 496);
            if (v15 < v13) {
              *(void *)(v14 + 504) = v13;
            }
          }
        }

        *(_OWORD *)int v43 = 0u;
        __int128 v44 = 0u;
        time_t v40 = time(0LL);
        int v16 = localtime(&v40);
        strftime(v43, 0x20uLL, "%Y_%m_%d_%H:%M:%S", v16);
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
          sub_100685678();
        }
        if (*v3 >= 0x1F && *(_BYTE *)(v2 + 982) && *(void *)(v2 + 984) && !*(_BYTE *)(v2 + 983))
        {
          *(_BYTE *)(v2 + 983) = 1;
          int v17 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
          int v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          std::string::size_type v19 = objc_alloc(&OBJC_CLASS___NSString);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v18 objectAtIndexedSubscript:0]);
          std::string::size_type v21 = -[NSString initWithFormat:](v19, "initWithFormat:", @"%@/Logs/Bluetooth", v20);

          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Overwait_A2DP_%s.tailspin",  v43));
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSString stringByAppendingPathComponent:](v21, "stringByAppendingPathComponent:", v22));
          id v24 = [v23 copy];

          id v25 = v24;
          uint64_t v26 = (const char *)[v25 cStringUsingEncoding:4];
          uint64_t v27 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
            sub_100685610((uint64_t)v25, v27, v28);
          }
          if (v26)
          {
            uint64_t v29 = open(v26, 1537, 434LL);
            if ((v29 & 0x80000000) == 0)
            {
              uint64_t v30 = *(void *)(v2 + 240);
              v36[0] = _NSConcreteStackBlock;
              v36[1] = 3221225472LL;
              void v36[2] = sub_1004A9184;
              v36[3] = &unk_10089BA98;
              uint64_t v38 = v2;
              int v31 = v21;
              int v37 = v31;
              int v39 = v29;
              sub_1004A902C(v29, v30, v36);

              return;
            }

            int v34 = (os_log_s *)qword_1008F7570;
            if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
            {
              int v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v29));
              sub_1006855C4(v35, (uint64_t)v42, v34);
            }
          }

          else
          {
            int v32 = (os_log_s *)qword_1008F7570;
            if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
              sub_10068555C((uint64_t)v21, v32, v33);
            }
          }
        }
      }
    }
  }

void sub_1004A8F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004A8FC0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 192);
  uint64_t v3 = (void *)(a1 + 200);
  if (v2 == (void *)(a1 + 200)) {
    return 0LL;
  }
  uint64_t result = 0LL;
  do
  {
    int v5 = *(unsigned __int16 *)(v2[5] + 84LL);
    BOOL v6 = v5 != a2 || v5 == 0;
    if (!v6) {
      uint64_t result = v2[4];
    }
    uint64_t v7 = (void *)v2[1];
    if (v7)
    {
      do
      {
        unint64_t v8 = v7;
        uint64_t v7 = (void *)*v7;
      }

      while (v7);
    }

    else
    {
      do
      {
        unint64_t v8 = (void *)v2[2];
        BOOL v6 = *v8 == (void)v2;
        uint64_t v2 = v8;
      }

      while (!v6);
    }

    uint64_t v2 = v8;
  }

  while (v8 != v3);
  return result;
}

void sub_1004A902C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v10 = 0LL;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000LL;
  BOOL v6 = off_1008F1128;
  unint64_t v13 = off_1008F1128;
  if (!off_1008F1128)
  {
    uint64_t v7 = sub_1004B6B64();
    BOOL v6 = dlsym(v7, "tailspin_dump_output_with_options");
    uint64_t v11[3] = (uint64_t)v6;
    off_1008F1128 = v6;
  }

  _Block_object_dispose(&v10, 8);
  if (v6)
  {
    ((void (*)(uint64_t, _UNKNOWN **, uint64_t, id))v6)(a1, &off_1008C3048, a2, v5);
  }

  else
  {
    unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "int BT::soft_tailspin_dump_output_with_options(int, NSDictionary * _Nullable __strong, dispatch_que ue_t _Nullable, void (^ _Nullable __strong)(BOOL))"));
    [v8 handleFailureInFunction:v9 file:@"AudioLinkManager.mm" lineNumber:131 description:@"%s" dlerror()];

    __break(1u);
  }

void sub_1004A9144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004A9184(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      BOOL v6 = "successfully";
    }
    else {
      BOOL v6 = "not successfully";
    }
    id v7 = [*(id *)(a1 + 32) UTF8String];
    int v9 = 136315394;
    uint64_t v10 = v6;
    __int16 v11 = 2080;
    id v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Captured tailspin %s at %s",  (uint8_t *)&v9,  0x16u);
  }

  *(_BYTE *)(v4 + 983) = 0;
  return close(*(_DWORD *)(a1 + 48));
}

void sub_1004A9270(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 216);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A8B30;
  block[3] = &unk_10087FF20;
  void block[4] = a1 - 24;
  void block[5] = a3;
  __int16 v5 = a2;
  dispatch_async(v3, block);
}

void sub_1004A92D0(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  __int16 v5 = *(dispatch_queue_s **)(a1 + 240);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1004A9330;
  v6[3] = &unk_100890DC8;
  int v7 = a4;
  int v8 = a3;
  v6[4] = a1;
  void v6[5] = a2;
  int v9 = a5;
  dispatch_async(v5, v6);
}

uint64_t sub_1004A9330(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  int v3 = *(_DWORD *)(result + 48);
  if (v3 <= 100)
  {
    if (v3 != 11)
    {
      if (v3 == 12)
      {
        int v4 = *(_DWORD *)(result + 52);
        if (v4 == 1) {
          goto LABEL_10;
        }
        if (v4 == 16 && *(_BYTE *)(*(void *)(result + 40) + 960LL))
        {
          __int16 v5 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter guest device disconnected setting fGuestConnectedToken to disabled",  v23,  2u);
          }

          std::string::assign((std::string *)(v2 + 1168), "WS_ERROR_DISCONNECTION_GUEST_DISCONNECTED");
          sub_1004A8394(v2);
          notify_set_state(*(_DWORD *)(v2 + 1164), 0LL);
          notify_post("com.apple.bluetooth.GuestConnected");
          if (*(_DWORD *)(v1 + 52) == 1)
          {
LABEL_10:
            int v6 = *(_DWORD *)(v2 + 1032);
            if (v6 == -1)
            {
              int v7 = (int *)(v2 + 1032);
              notify_register_check("com.apple.bluetooth.SmartRoutingDisconnectReason", v7);
              int v6 = *v7;
            }

            int v8 = *(unsigned __int8 **)(v1 + 40);
            notify_set_state( v6,  ((unint64_t)v8[128] << 40) | ((unint64_t)v8[129] << 32) | ((unint64_t)v8[130] << 24) | ((unint64_t)v8[131] << 16) | ((unint64_t)v8[132] << 8) | v8[133] | ((unint64_t)*(unsigned int *)(v1 + 56) << 48));
            notify_post("com.apple.bluetooth.SmartRoutingDisconnectReason");
          }
        }

        uint64_t result = *(void *)(v1 + 40);
        if (*(_BYTE *)(result + 1371) != 1) {
          return sub_1003E5B60(result, 1);
        }
      }

      return result;
    }

    int v9 = *(_DWORD *)(result + 52);
    if (v9 == 1)
    {
      if (*(void *)(v2 + 1104) < 2uLL || (uint64_t v10 = *(void **)(v2 + 1088), v10 == (void *)(v2 + 1096)))
      {
        int v9 = 1;
LABEL_52:
        int v18 = *(unsigned __int8 **)(v1 + 40);
        BOOL v19 = v9 != 1 || v18 == 0LL;
        if (!v19)
        {
          uint64_t v20 = ((unint64_t)v18[128] << 40) | ((unint64_t)v18[129] << 32) | ((unint64_t)v18[130] << 24) | ((unint64_t)v18[131] << 16) | ((unint64_t)v18[132] << 8) | v18[133];
          int v21 = *(_DWORD *)(v2 + 1032);
          if (v21 == -1)
          {
            uint64_t v22 = (int *)(v2 + 1032);
            notify_register_check("com.apple.bluetooth.SmartRoutingDisconnectReason", v22);
            int v21 = *v22;
          }

          notify_set_state(v21, v20);
          return notify_post("com.apple.bluetooth.SmartRoutingDisconnectReason");
        }

        return result;
      }

      do
      {
        uint64_t v11 = *(void *)(v1 + 40);
        if (v11)
        {
          id v12 = (unsigned __int8 *)v10[5];
          if (*((void *)v12 + 1) == v11 + 128)
          {
            int v13 = *v12;
            if (v12[20] != v13)
            {
              uint64_t result = sub_1004A81CC(result, v11, v13 != 0);
              v12[20] = *v12;
            }
          }
        }

        uint64_t v14 = (void *)v10[1];
        if (v14)
        {
          do
          {
            unint64_t v15 = v14;
            uint64_t v14 = (void *)*v14;
          }

          while (v14);
        }

        else
        {
          do
          {
            unint64_t v15 = (void *)v10[2];
            BOOL v19 = *v15 == (void)v10;
            uint64_t v10 = v15;
          }

          while (!v19);
        }

        uint64_t v10 = v15;
      }

      while (v15 != (void *)(v2 + 1096));
      int v9 = *(_DWORD *)(v1 + 52);
    }

    if (v9 == 16)
    {
      if (*(_BYTE *)(*(void *)(v1 + 40) + 960LL) && *(void *)(v2 + 1104) != 2LL)
      {
        int v16 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter connected guest device setting fGuestConnectedToken to enabled",  buf,  2u);
        }

        notify_set_state(*(_DWORD *)(v2 + 1164), 1uLL);
        return notify_post("com.apple.bluetooth.GuestConnected");
      }

      return result;
    }

    goto LABEL_52;
  }

  if (v3 == 101)
  {
    if (*(void *)(v2 + 1104) >= 2uLL && *(void *)(v2 + 1112))
    {
      if (qword_1008D9030 != -1) {
        dispatch_once(&qword_1008D9030, &stru_10089BC50);
      }
      uint64_t result = sub_10045D7CC((uint64_t)off_1008D9028, *(void *)(v1 + 40));
      if (result)
      {
        uint64_t result = sub_10020758C(result + 400);
        uint64_t v17 = *(void *)(v2 + 1112);
        if ((_DWORD)result) {
          ++*(_DWORD *)(v17 + 40);
        }
        else {
          ++*(_DWORD *)(v17 + 44);
        }
      }
    }
  }

  else if (v3 == 103 && *(void *)(v2 + 1104) >= 2uLL && *(void *)(v2 + 1112))
  {
    if (qword_1008D9030 != -1) {
      dispatch_once(&qword_1008D9030, &stru_10089BC50);
    }
    uint64_t result = sub_10045D7CC((uint64_t)off_1008D9028, *(void *)(v1 + 40));
    if (result)
    {
      uint64_t result = sub_10020744C(result + 400);
      if ((_DWORD)result) {
        ++*(_DWORD *)(*(void *)(v2 + 1112) + 36LL);
      }
    }
  }

  return result;
}

void sub_1004A9760(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  __int16 v5 = *(dispatch_queue_s **)(a1 + 200);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1004A9330;
  v6[3] = &unk_100890DC8;
  int v7 = a4;
  int v8 = a3;
  v6[4] = a1 - 40;
  void v6[5] = a2;
  int v9 = a5;
  dispatch_async(v5, v6);
}

void sub_1004A97C4(uint64_t a1)
{
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A981C;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1004A981C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(unsigned __int16 **)(v1 + 1088);
  int v3 = (unsigned __int16 *)(v1 + 1096);
  if (v2 != (unsigned __int16 *)(v1 + 1096))
  {
    do
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_10089BD30);
      }
      uint64_t v4 = *(void *)(*((void *)v2 + 5) + 8LL);
      __int16 v5 = *(_WORD *)(v4 + 4);
      *(_DWORD *)__int128 buf = *(_DWORD *)v4;
      *(_WORD *)&uint8_t buf[4] = v5;
      int v6 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
      if (v6)
      {
        uint64_t v7 = (uint64_t)v6;
        sub_1004A81CC((uint64_t)v6, (uint64_t)v6, 0);
        uint64_t v8 = *(void *)(v1 + 1112);
        if (v8 && *(_BYTE *)(v7 + 960)) {
          *(_DWORD *)(v8 + 72) = *(_DWORD *)(v7 + 980);
        }
        sub_1003D0CA0(v7, 0);
      }

      sub_1004A8394(v1);
      *(void *)__int128 buf = v2 + 16;
      int v9 = sub_1002550B8((uint64_t **)(v1 + 1088), v2 + 16, (uint64_t)&unk_1006C2518, (_WORD **)buf)[5];
      if (v9) {
        operator delete(v9);
      }
      uint64_t v10 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = v2[16];
        *(_DWORD *)__int128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter destroying aggregate device with handle %hu",  buf,  8u);
      }

      id v12 = (unsigned __int16 *)*((void *)v2 + 1);
      if (v12)
      {
        do
        {
          int v13 = v12;
          id v12 = *(unsigned __int16 **)v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          int v13 = (unsigned __int16 *)*((void *)v2 + 2);
          BOOL v14 = *(void *)v13 == (void)v2;
          uint64_t v2 = v13;
        }

        while (!v14);
      }

      uint64_t v2 = v13;
    }

    while (v13 != v3);
  }

  *(_BYTE *)(v1 + 1144) = 0;
  sub_10023BF24(v1 + 1088, *(void **)(v1 + 1096));
  *(void *)(v1 + 108_Block_object_dispose(va, 8) = v3;
  *(_OWORD *)int v3 = 0u;
  unint64_t v15 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    *(void *)&uint8_t buf[4] = 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter size of fWirelessSplitterA2dpDevices %lu ",  buf,  0xCu);
  }

void sub_1004A9A6C(uint64_t a1)
{
  uint64_t v1 = a1 - 24;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 216);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A981C;
  block[3] = &unk_10087EB20;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_1004A9AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004A9B20;
  block[3] = &unk_100888050;
  void block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_1004A9B20(uint64_t *result)
{
  uint64_t v2 = (unint64_t *)(result + 5);
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v3 = result[4];
    uint64_t v4 = *(void **)(v3 + 200);
    if (v4)
    {
      __int16 v5 = result;
      int v6 = (uint64_t **)(v3 + 192);
      uint64_t v7 = (void *)(v3 + 200);
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= v1;
        if (v8 >= v1) {
          uint64_t v10 = v4;
        }
        else {
          uint64_t v10 = v4 + 1;
        }
        if (v9) {
          uint64_t v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }

      while (*v10);
      if (v7 != (void *)(v3 + 200) && v1 >= v7[4])
      {
        *(void *)__int128 buf = result + 5;
        if (*(_BYTE *)(sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 56)
          || (*(void *)__int128 buf = v2,
              *(_DWORD *)(sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 64) == 1))
        {
          *(void *)__int128 buf = v2;
          *(_BYTE *)(sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 70) = 1;
        }

        *(void *)__int128 buf = v2;
        uint64_t result = sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        if (*(void *)result[5])
        {
          *(void *)__int128 buf = v2;
          int v11 = sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
          ++*(_DWORD *)(*(void *)v11[5] + 316LL);
          *(void *)__int128 buf = v2;
          uint64_t result = sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
          unint64_t v12 = v5[6];
          if (*(void *)(*(void *)result[5] + 80LL) <= v12)
          {
            *(void *)__int128 buf = v2;
            *(void *)(*(void *)sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 80LL) = v5[6] + 60000000;
            char v24 = 0;
            sub_1002E6E9C();
            if (sub_1002CD6F0())
            {
              *(void *)__int128 buf = v2;
              char v24 = *(_BYTE *)(*(void *)sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 388LL);
            }

            else
            {
              uint64_t v13 = sub_1002E6E9C();
              (*(void (**)(uint64_t, unint64_t, char *))(*(void *)v13 + 304LL))(v13, *v2 + 128, &v24);
            }

            *(void *)__int128 buf = v2;
            BOOL v14 = sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
            sub_1004A9FF8(*(void **)v14[5], v12, v24, 0);
            unint64_t v15 = (os_log_s *)qword_1008F7570;
            if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_INFO))
            {
              unint64_t v16 = v5[6] / 0x3E8uLL;
              *(void *)__int128 buf = v2;
              int v17 = *(unsigned __int8 *)(*(void *)sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                                       + 320LL);
              *(void *)__int128 buf = v2;
              int v18 = *(unsigned __int8 *)(*(void *)sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]
                                       + 321LL);
              *(_DWORD *)__int128 buf = 134218752;
              *(void *)&uint8_t buf[4] = v16;
              __int16 v26 = 1024;
              int v27 = v17;
              __int16 v28 = 1024;
              int v29 = v18;
              __int16 v30 = 1024;
              int v31 = v24;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Collecting purged data. Timestamp:%llu Role:%d TotalDeviceConnected:%d Rssi:%i",  buf,  0x1Eu);
            }

            uint64_t v19 = mach_absolute_time();
            *(void *)__int128 buf = v2;
            uint64_t v20 = *(void *)(*(void *)sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 120LL);
            uint64_t v21 = *(unsigned int *)(v3 + 256);
            unint64_t v22 = *(unsigned int *)(v3 + 260);
            *(void *)__int128 buf = v2;
            if (*(_BYTE *)(*(void *)sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 112LL)
              && (float)((float)((v19 - v20) * v21 / v22 / 0x3E8) / 1000.0) < 1000.0)
            {
              *(void *)__int128 buf = v2;
              uint64_t v23 = (_DWORD *)(*(void *)sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 324LL);
            }

            else
            {
              *(void *)__int128 buf = v2;
              uint64_t v23 = (_DWORD *)(*(void *)sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 316LL);
            }

            ++*v23;
            *(void *)__int128 buf = v2;
            uint64_t result = sub_100029574(v6, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
            *(_BYTE *)(*(void *)result[5] + 112LL) = 0;
          }
        }
      }
    }
  }

  return result;
}

void sub_1004A9FF8(void *a1, uint64_t a2, char a3, char a4)
{
  unint64_t v8 = operator new(0x10uLL);
  BOOL v9 = v8;
  *(void *)unint64_t v8 = a2;
  v8[8] = a3;
  v8[9] = a4;
  int v11 = (void *)a1[42];
  unint64_t v10 = a1[43];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = a1[41];
    uint64_t v14 = ((uint64_t)v11 - v13) >> 3;
    uint64_t v15 = v10 - v13;
    uint64_t v16 = v15 >> 2;
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      int v18 = (char *)sub_100008BA0((uint64_t)(a1 + 43), v17);
    }
    else {
      int v18 = 0LL;
    }
    uint64_t v19 = &v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    *(void *)uint64_t v19 = v9;
    unint64_t v12 = v19 + 8;
    unint64_t v22 = (char *)a1[41];
    uint64_t v21 = (char *)a1[42];
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }

      while (v21 != v22);
      uint64_t v21 = (char *)a1[41];
    }

    a1[41] = v19;
    a1[42] = v12;
    a1[43] = v20;
    if (v21) {
      operator delete(v21);
    }
  }

  else
  {
    *int v11 = v8;
    unint64_t v12 = v11 + 1;
  }

  a1[42] = v12;
}

float sub_1004AA0F0(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 256) * a2 / *(unsigned int *)(a1 + 260) / 0x3E8;
  if (!a3)
  {
    float v5 = (float)v3;
    float v6 = 1000000.0;
    return v5 / v6;
  }

  if (a3 == 1)
  {
    float v5 = (float)v3;
    float v6 = 1000.0;
    return v5 / v6;
  }

  float result = 0.0;
  if (a3 == 2) {
    return (float)v3;
  }
  return result;
}

void sub_1004AA160(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  sub_10002418C((void *)a2, "Audio");
  uint64_t v4 = *(_BYTE **)(a1 + 216);
  if (v4[8])
  {
    std::string::assign((std::string *)a2, "Video");
    uint64_t v4 = *(_BYTE **)(a1 + 216);
  }

  if (v4[7])
  {
    std::string::assign((std::string *)a2, "Audio");
    uint64_t v4 = *(_BYTE **)(a1 + 216);
  }

  if (v4[5])
  {
    std::string::assign((std::string *)a2, "Game");
    uint64_t v4 = *(_BYTE **)(a1 + 216);
  }

  if (v4[3])
  {
    std::string::assign((std::string *)a2, "VoiceOver");
    uint64_t v4 = *(_BYTE **)(a1 + 216);
  }

  if (v4[2]) {
    std::string::assign((std::string *)a2, "GarageBand");
  }
  float v5 = (unsigned __int16 **)(a1 + 1064);
  int v6 = *(unsigned __int8 *)(a1 + 1087);
  if ((*(char *)(a1 + 1087) & 0x80000000) == 0)
  {
    uint64_t v7 = (unsigned __int16 *)(a1 + 1064);
    if (v6 != 3) {
      goto LABEL_20;
    }
LABEL_16:
    int v8 = *v7;
    int v9 = *((unsigned __int8 *)v7 + 2);
    if (v8 == 26191 && v9 == 102) {
      goto LABEL_40;
    }
    goto LABEL_20;
  }

  if (*(void *)(a1 + 1072) == 3LL)
  {
    uint64_t v7 = *v5;
    goto LABEL_16;
  }

void sub_1004AA4D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004AA52C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004AA588;
  block[3] = &unk_10087F900;
  int v5 = a3;
  void block[4] = a1;
  void block[5] = a2;
  dispatch_async(v3, block);
}

uint64_t *sub_1004AA588(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 48);
  unint64_t v3 = *(uint64_t **)(a1 + 32);
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_10089BC10);
  }
  *((_DWORD *)off_1008D60E8 + 5_Block_object_dispose(va, 8) = v2;
  *((void *)off_1008D60E8 + 23) = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
    sub_1006856E4();
  }
  sub_1004A32E0((uint64_t)v3, *(void *)(a1 + 40), 0);
  return sub_10049B3BC(v3, *(void *)(a1 + 40));
}

uint64_t sub_1004AA63C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "AudioQualityMonitor");
  if ((_DWORD)result)
  {
    uint64_t v4 = sub_1003D2B2C(a2, 12);
    if ((v4 & 1) != 0) {
      return notify_post("com.apple.bluetooth.audioQuality");
    }
    uint64_t result = sub_1004A37A0(v4, a2);
    if ((_DWORD)result) {
      return notify_post("com.apple.bluetooth.audioQuality");
    }
  }

  return result;
}

uint64_t sub_1004AA6A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6)
{
  int v6 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004AA708;
  block[3] = &unk_10089BAB8;
  void block[4] = a1;
  void block[5] = a2;
  int v9 = a6;
  char v10 = a4;
  void block[6] = a3;
  void block[7] = a5;
  dispatch_async(v6, block);
  return 0LL;
}

void sub_1004AA708(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089BD30);
  }
  unint64_t v3 = sub_10040007C(off_1008D5F48, *(void *)(a1 + 40), 0);
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_10089BCF0);
  }
  int v4 = *(_DWORD *)(a1 + 64);
  if (!*(_BYTE *)(a1 + 68))
  {
    uint64_t v16 = *(void *)(v2 + 880);
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 888);
    *(void *)__int128 buf = v16;
    *(void *)&uint8_t buf[8] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }

    if (v16)
    {
      sub_100009168(v16 + 128, *(void *)(a1 + 56));
      int v10 = sub_1004AABB8(v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
      if (!v7) {
        goto LABEL_36;
      }
    }

    else
    {
      int v10 = 0;
      if (!v7) {
        goto LABEL_36;
      }
    }

    uint64_t v19 = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v19);
    while (__stlxr(v15 - 1, v19));
LABEL_34:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }

    goto LABEL_36;
  }

  int v5 = *((unsigned __int8 *)off_1008D6190 + 197);
  if (!sub_1004AAA40(v2, *(void *)(a1 + 40), *(void *)(a1 + 48)))
  {
    int v10 = 0;
    goto LABEL_36;
  }

  uint64_t v6 = *(void *)(v2 + 880);
  uint64_t v7 = *(std::__shared_weak_count **)(v2 + 888);
  if (v7)
  {
    int v8 = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  int v10 = v6 != 0;
  if (v6)
  {
    sub_10027522C(v6, *(void *)(a1 + 56));
    size_t v11 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v12 = "Yes";
      int v13 = *(unsigned __int8 *)(v6 + 77);
      if (!v5) {
        unint64_t v12 = "No";
      }
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&uint8_t buf[14] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Stream Status %s  Already Running %d ",  buf,  0x12u);
    }
  }

  if (v7)
  {
    int v14 = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    goto LABEL_34;
  }

void sub_1004AAA20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004AAA40(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_1004AAE04();
  if ((_DWORD)result)
  {
    char v18 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 880);
    if (!*(void *)(a1 + 880))
    {
      int v8 = operator new(0x120uLL);
      int v9 = sub_1004AAEC8();
      sub_1002727D8((uint64_t)v8, v9);
      sub_1004AAE58((void *)(a1 + 880), (uint64_t)v8);
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_10089BC30);
      }
      int v10 = off_1008D60A8;
      uint64_t v11 = *(void *)(a1 + 888);
      *(void *)&__int128 v17 = *(void *)(a1 + 880);
      *((void *)&v17 + 1) = v11;
      if (v11)
      {
        unint64_t v12 = (unint64_t *)(v11 + 8);
        do
          unint64_t v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }

      sub_1004B7008((uint64_t)v10 + 112, &v17);
      int v14 = (std::__shared_weak_count *)*((void *)&v17 + 1);
      if (*((void *)&v17 + 1))
      {
        unint64_t v15 = (unint64_t *)(*((void *)&v17 + 1) + 8LL);
        do
          unint64_t v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }

    return sub_100273328(*v7, a2, a3, &v18);
  }

  return result;
}

void sub_1004AAB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1004AAB90@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 888);
  *a2 = *(void *)(result + 880);
  a2[1] = v2;
  if (v2)
  {
    unint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_1004AABB8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 880);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 888);
  uint64_t v30 = v6;
  int v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  if (!v6) {
    goto LABEL_30;
  }
  char v29 = 0;
  if (!sub_100273B2C(v6, a2, a3, &v29))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100685748();
    }
LABEL_30:
    uint64_t v22 = 0LL;
    if (!v7) {
      return v22;
    }
    goto LABEL_31;
  }

  if (v29) {
    goto LABEL_30;
  }
  int v10 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v26) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Deleting  mBTTimeSyncManager",  (uint8_t *)&v26,  2u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089BC30);
  }
  uint64_t v11 = off_1008D60A8;
  unint64_t v12 = *(std::__shared_weak_count **)(a1 + 888);
  uint64_t v27 = *(void *)(a1 + 880);
  __int16 v28 = v12;
  if (v12)
  {
    unint64_t v13 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  sub_1004B7344((uint64_t)v11 + 112, &v27);
  uint64_t v15 = a1 + 880;
  unint64_t v16 = v28;
  if (v28)
  {
    __int128 v17 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  __int128 v26 = 0uLL;
  sub_1002102FC(v15, &v26);
  uint64_t v19 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    int v20 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = 1LL;
  uint64_t v7 = v31;
  if (v31)
  {
LABEL_31:
    int v23 = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return v22;
}

void sub_1004AADE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_100032BD4((uint64_t)va);
  sub_100032BD4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AAE04()
{
  uint64_t v0 = sub_1002E6E00();
  sub_1002E6E9C();
  if (sub_1002CDD44()) {
    return 1LL;
  }
  uint64_t v2 = sub_1002E6BF0();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 792LL))(v2, 0LL);
}

void sub_1004AAE58(void *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  __int128 v4 = v7;
  *(void *)&__int128 v7 = *a1;
  *((void *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

uint64_t sub_1004AAEC8()
{
  uint64_t result = sub_1004AAE04();
  if ((_DWORD)result)
  {
    sub_1002E6E9C();
    if (sub_1002CDD44()) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

  return result;
}

uint64_t sub_1004AAEF4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000LL;
  unint64_t v3 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  uint64_t v13 = TSNullClockIdentifier;
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_10089BC10);
  }
  __int128 v4 = (dispatch_queue_s *)*((void *)off_1008D60E8 + 30);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004AB07C;
  block[3] = &unk_10087FEE0;
  void block[5] = a1;
  void block[6] = v3;
  void block[4] = &v10;
  dispatch_sync(v4, block);
  uint64_t v5 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = v11[3];
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Reference Timestamp ID: %llx ",  buf,  0xCu);
  }

  uint64_t v7 = v11[3];
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1004AB07C(void *a1)
{
  uint64_t v2 = a1[5];
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089BD30);
  }
  unint64_t v3 = a1 + 6;
  __int128 v4 = (unsigned __int8 *)sub_10040007C(off_1008D5F48, a1[6], 0);
  if (v4)
  {
    uint64_t v5 = *(void *)(v2 + 880);
    uint64_t v6 = *(std::__shared_weak_count **)(v2 + 888);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }

    if (v5) {
      sub_10027499C( v5,  (void *)(*(void *)(a1[4] + 8LL) + 24LL),  ((unint64_t)v4[128] << 40) | ((unint64_t)v4[129] << 32) | ((unint64_t)v4[130] << 24) | ((unint64_t)v4[131] << 16) | ((unint64_t)v4[132] << 8) | v4[133]);
    }
    if (v6)
    {
      unint64_t v9 = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100685774(v3, v11, v12);
    }
  }

void sub_1004AB1C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004AB1D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[110];
  __int128 v4 = (std::__shared_weak_count *)a1[111];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }

  uint64_t v7 = (dispatch_queue_s *)a1[30];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768LL;
  int v10[2] = sub_1004AB284;
  v10[3] = &unk_10089BAD8;
  v10[4] = v3;
  uint64_t v11 = v4;
  if (v4)
  {
    unint64_t v8 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  uint64_t v12 = a2;
  uint64_t v13 = a3;
  dispatch_async(v7, v10);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1004AB284(void *a1)
{
  uint64_t v9 = 0LL;
  unint64_t v10 = 0LL;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    unint64_t v10 = v3;
    if (v3)
    {
      uint64_t v4 = a1[4];
      uint64_t v9 = v4;
      if (v4)
      {
        if (sub_100275D98(v4))
        {
          sub_100272E64(v4, a1[6], a1[7], 0);
          sub_100275CF4(v4);
LABEL_10:
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            unint64_t v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }

          return;
        }
      }
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  uint64_t v5 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Legacy timesync trigger ended",  v8,  2u);
  }

  if (v3) {
    goto LABEL_10;
  }
}

void sub_1004AB37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1004AB390(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 328LL))
    {
      char v3 = 0;
      sub_100242CA4(&v3);
      sub_10011EAF0((uint64_t)sub_1004AB458, *(void *)(a1 + 40) + 128LL);
      sub_100242CD0(&v3);
      sub_100242CD8(&v3);
    }

    else
    {
      uint64_t v2 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Stack is not running. So, cannot issue the readLocalBTClock command",  buf,  2u);
      }
    }
  }

void sub_1004AB444( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1004AB458(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_10089BC10);
  }
  uint64_t v4 = off_1008D60E8;
  uint64_t v5 = mach_absolute_time();
  sub_1004AB1D4(v4, v5, 312500LL * a3);
}

uint64_t sub_1004AB4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2
    && (char v15 = 0,
        sub_100242CA4(&v15),
        uint64_t v11 = (unsigned __int16 *)sub_10012D890(a2 + 128),
        sub_100242CD0(&v15),
        sub_100242CD8(&v15),
        v11))
  {
    uint64_t v12 = *v11;
  }

  else
  {
    uint64_t v12 = 0xFFFFLL;
  }

  uint64_t v13 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 1592LL))( v13,  a3,  a4,  v12,  a5,  a6);
}

void sub_1004AB560( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1004AB574(uint64_t a1)
{
  unint64_t v1 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004AB5CC;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_async(v1, block);
}

uint64_t sub_1004AB5CC(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 864LL);
  if (result) {
    return sub_10053A8E0(result);
  }
  return result;
}

void sub_1004AB5E0(uint64_t a1, char a2, char a3, char a4, const void *a5, size_t __size)
{
  char v6 = __size;
  v19[0] = 0LL;
  v19[1] = v19;
  void v19[2] = 0x2020000000LL;
  size_t v12 = __size;
  int v20 = malloc(__size);
  memcpy(v20, a5, v12);
  uint64_t v13 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004AB6B8;
  block[3] = &unk_10089BB10;
  char v15 = a2;
  char v16 = a3;
  char v17 = a4;
  void block[4] = v19;
  void block[5] = a1;
  char v18 = v6;
  dispatch_async(v13, block);
  _Block_object_dispose(v19, 8);
}

void sub_1004AB6B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 864LL);
  if (v2) {
    sub_10053AA90( v2,  *(unsigned __int8 *)(a1 + 48),  *(unsigned __int8 *)(a1 + 49),  *(_BYTE *)(a1 + 50),  *(uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }
  free(*(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
}

unint64_t sub_1004AB70C(uint64_t a1, int a2, float a3)
{
  unint64_t result = sub_1004A8FC0(a1, a2);
  unint64_t v15 = result;
  if (result)
  {
    unint64_t v8 = *(void **)(a1 + 200);
    uint64_t v7 = a1 + 200;
    char v6 = v8;
    if (v8)
    {
      uint64_t v9 = (uint64_t **)(v7 - 8);
      unint64_t v10 = (void *)v7;
      do
      {
        unint64_t v11 = v6[4];
        BOOL v12 = v11 >= result;
        if (v11 >= result) {
          uint64_t v13 = v6;
        }
        else {
          uint64_t v13 = v6 + 1;
        }
        if (v12) {
          unint64_t v10 = v6;
        }
        char v6 = (void *)*v13;
      }

      while (*v13);
      if (v10 != (void *)v7 && result >= v10[4])
      {
        char v16 = &v15;
        unint64_t result = (unint64_t)sub_100029574(v9, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16);
        if (**(void **)(result + 40))
        {
          char v16 = &v15;
          unint64_t result = (unint64_t)sub_100029574(v9, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16);
          uint64_t v14 = **(void **)(result + 40);
          *(float *)(v14 + 396) = *(float *)(v14 + 396) + a3;
          ++*(_DWORD *)(v14 + 400);
        }
      }
    }
  }

  return result;
}

BOOL sub_1004AB7F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 864);
  return v1 && *(_BYTE *)(v1 + 52) != 0;
}

BOOL sub_1004AB818(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 864)) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 872);
  return v2 && v2 == a2;
}

uint64_t sub_1004AB83C(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  int v4 = 0;
  uint64_t v3 = 0LL;
  sub_1003D55EC(a2, &v5, &v4, (_DWORD *)&v3 + 1, &v3);
  uint64_t result = 0LL;
  if (v4 == 76)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1004AB8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6E00();
  uint64_t v5 = sub_1002E6BF0();
  BOOL v6 = sub_1004AB928(a1);
  if (v6) {
    return 0LL;
  }
  uint64_t result = sub_1004AB83C(v6, a2);
  if ((_DWORD)result)
  {
    sub_1002E6E9C();
    if (sub_1002CD6F0()) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

  return result;
}

BOOL sub_1004AB928(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 1104);
  uint64_t v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = "disabled";
    if (v1 > 1) {
      uint64_t v3 = "enabled";
    }
    int v5 = 136315138;
    BOOL v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter - isWirelessSplitterEnabled is %s ",  (uint8_t *)&v5,  0xCu);
  }

  return v1 > 1;
}

uint64_t sub_1004AB9E8(uint64_t a1)
{
  unsigned int v1 = sub_1004ABA48(*(void *)(a1 + 32), *(void *)(a1 + 40));
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  return sub_10036E770(qword_1008D6450, v1, 1);
}

uint64_t sub_1004ABA48(uint64_t a1, unint64_t a2)
{
  unint64_t v11 = a2;
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void **)(a1 + 200);
  uint64_t v2 = (void *)(a1 + 200);
  uint64_t v3 = v4;
  if (!v4) {
    return 0LL;
  }
  int v5 = (uint64_t **)(v2 - 1);
  BOOL v6 = v2;
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      BOOL v6 = v3;
    }
    uint64_t v3 = (void *)*v9;
  }

  while (*v9);
  if (v6 == v2) {
    return 0LL;
  }
  if (v6[4] > a2) {
    return 0LL;
  }
  BOOL v12 = &v11;
  BOOL v12 = &v11;
  return *(unsigned __int16 *)(sub_100029574(v5, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 84);
}

uint64_t sub_1004ABB10(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  return sub_10036E770(qword_1008D6450, *(unsigned __int16 *)(a1 + 32), 1);
}

uint64_t sub_1004ABB64(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  return sub_10036E770(qword_1008D6450, *(unsigned __int16 *)(a1 + 32), 0);
}

uint64_t sub_1004ABBB8(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  return sub_10036E770(qword_1008D6450, *(unsigned __int16 *)(a1 + 32), 1);
}

uint64_t sub_1004ABC0C(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  return sub_10036E770(qword_1008D6450, *(unsigned __int16 *)(a1 + 32), 0);
}

void sub_1004ABC60(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3;
  unint64_t v15 = a2;
  int v5 = (uint64_t **)(a1 + 192);
  *(void *)__int128 buf = &v15;
  *(_WORD *)(sub_100029574((uint64_t **)(a1 + 192), &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 5_Block_object_dispose(va, 8) = a3;
  *(void *)__int128 buf = &v15;
  if (*(unsigned __int16 *)(sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 58) >= *(unsigned __int16 *)(a1 + 1024)
    && (*(void *)__int128 buf = &v15, *(void *)sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]))
  {
    *(void *)__int128 buf = &v15;
    BOOL v6 = sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
    ++*(_DWORD *)(*(void *)v6[5] + 384LL);
  }

  else
  {
    *(void *)__int128 buf = &v15;
    if (*(unsigned __int16 *)(sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 58) >= *(unsigned __int16 *)(a1 + 1026)
      && (*(void *)__int128 buf = &v15, *(void *)sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5]))
    {
      *(void *)__int128 buf = &v15;
      unint64_t v7 = sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
      ++*(_DWORD *)(*(void *)v7[5] + 380LL);
    }

    else
    {
      *(void *)__int128 buf = &v15;
      if (*(void *)sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5])
      {
        *(void *)__int128 buf = &v15;
        BOOL v8 = sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        ++*(_DWORD *)(*(void *)v8[5] + 376LL);
      }

      else
      {
        uint64_t v9 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "A2DP Link Adaptive Bitrate: Metrics not enabled",  buf,  2u);
        }
      }
    }
  }

  __int16 v10 = sub_1004ABA48(a1, v15);
  *(void *)__int128 buf = &v15;
  if (*(unsigned __int16 *)(sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 60) < v3)
  {
    *(void *)__int128 buf = &v15;
    LOWORD(v3) = *(_WORD *)(sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 60);
  }

  uint64_t v11 = sub_1004050C8();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1004ABF5C;
  v12[3] = &unk_10087F980;
  __int16 v13 = v10;
  __int16 v14 = v3;
  sub_100405384(v11, v12);
}

void sub_1004ABF5C(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  sub_10037BD4C(qword_1008D6450, *(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
}

uint64_t *sub_1004ABFB0(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v8 = a2;
  int v5 = (uint64_t **)(a1 + 192);
  uint64_t v9 = &v8;
  BOOL v6 = sub_100029574((uint64_t **)(a1 + 192), &v8, (uint64_t)&unk_1006C2518, (uint64_t **)&v9);
  ++*(_WORD *)(v6[5] + 62);
  uint64_t v9 = &v8;
  uint64_t result = sub_100029574(v5, &v8, (uint64_t)&unk_1006C2518, (uint64_t **)&v9);
  if (*(__int16 *)(result[5] + 62) >= 6)
  {
    sub_1004ABC60(a1, v8, a3);
    uint64_t v9 = &v8;
    uint64_t result = sub_100029574(v5, &v8, (uint64_t)&unk_1006C2518, (uint64_t **)&v9);
    *(_WORD *)(result[5] + 62) = 0;
  }

  return result;
}

uint64_t sub_1004AC08C(uint64_t a1, int a2)
{
  return sub_100037F60(*(_BYTE **)(a1 + 216), a2);
}

void sub_1004AC094(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  int v5 = *(dispatch_queue_s **)(a1 + 240);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1004AC0F8;
  v6[3] = &unk_100890D60;
  v6[4] = a1;
  void v6[5] = a2;
  char v7 = a3;
  void v6[6] = a4;
  char v8 = a5;
  dispatch_async(v5, v6);
}

void sub_1004AC0F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000381A0( *(void *)(v2 + 216),  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 57));
  sub_10003AA5C(*(void *)(v2 + 216), *(void *)(a1 + 40));
}

void sub_1004AC134(uint64_t a1, char a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004AC190;
  v3[3] = &unk_1008800D8;
  v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1004AC190(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    char v4 = "on";
    if (**(_BYTE **)(v2 + 216)) {
      int v5 = "on";
    }
    else {
      int v5 = "off";
    }
    if (!*(_BYTE *)(a1 + 40)) {
      char v4 = "off";
    }
    int v12 = 136315394;
    __int16 v13 = v5;
    __int16 v14 = 2080;
    unint64_t v15 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency fScreenOn from %s -> %s",  (uint8_t *)&v12,  0x16u);
  }

  BOOL v6 = *(_BYTE **)(v2 + 216);
  int v7 = *(unsigned __int8 *)(a1 + 40);
  if (*v6 != v7)
  {
    _BYTE *v6 = v7;
    if (sub_1004AB928(v2) && (uint64_t v8 = *(void *)(v2 + 1112)) != 0)
    {
      int v9 = **(unsigned __int8 **)(v2 + 216);
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v11 = *(void *)(v2 + 1112);
      if (v9)
      {
        *(_DWORD *)(v8 + 48) += (Current - *(double *)(v11 + 24));
        *(CFAbsoluteTime *)(*(void *)(v2 + 1112) + 16LL) = CFAbsoluteTimeGetCurrent();
      }

      else
      {
        *(_DWORD *)(v8 + 52) += (Current - *(double *)(v11 + 16));
        *(CFAbsoluteTime *)(*(void *)(v2 + 1112) + 24LL) = CFAbsoluteTimeGetCurrent();
      }
    }

    else
    {
      sub_1000361D8(*(void *)(v2 + 216));
    }
  }

void sub_1004AC310(uint64_t a1, char a2)
{
  uint64_t v2 = a1 - 32;
  unsigned int v3 = *(dispatch_queue_s **)(a1 + 208);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004AC190;
  v4[3] = &unk_1008800D8;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

void sub_1004AC36C(uint64_t a1, char a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004AC3C8;
  v3[3] = &unk_1008800D8;
  v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1004AC3C8(uint64_t a1)
{
  sub_1004AC440(*(void *)(a1 + 32), *(_BYTE *)(a1 + 40) == 0, *(unsigned __int8 *)(a1 + 40));
  uint64_t v2 = sub_1004050C8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004AC638;
  v3[3] = &unk_100898180;
  char v4 = *(_BYTE *)(a1 + 40);
  sub_100405384(v2, v3);
}

void sub_1004AC440(uint64_t a1, int a2, int a3)
{
  if (!*(void *)(a1 + 208) || (BOOL v6 = *(void **)(a1 + 192), v6 == (void *)(a1 + 200)))
  {
LABEL_11:
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
  }

  else
  {
    while (1)
    {
      uint64_t v7 = v6[5];
      if (*(_DWORD *)(v7 + 76) == 2)
      {
        if (*(_BYTE *)(v7 + 72)) {
          break;
        }
      }

      uint64_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          int v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          BOOL v6 = v9;
        }

        while (!v10);
      }

      BOOL v6 = v9;
      if (v9 == (void *)(a1 + 200)) {
        goto LABEL_11;
      }
    }

    uint64_t v17 = v6[4];
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    if (v17) {
      sub_1003D55EC(v17, (_DWORD *)&v20 + 1, &v20, (_DWORD *)&v19 + 1, &v19);
    }
  }

  uint64_t v11 = operator new(0xA0uLL);
  sub_1004B79F4((uint64_t)v11);
  *(void *)(a1 + 152) = v11;
  memset(&__str, 0, sizeof(__str));
  if (a2) {
    int v12 = "On";
  }
  else {
    int v12 = "Off";
  }
  sub_10002418C(&__str, v12);
  std::string::append(&__str, "->");
  if (a3) {
    __int16 v13 = "On";
  }
  else {
    __int16 v13 = "Off";
  }
  std::string::append(&__str, v13);
  std::string::operator=(*(std::string **)(a1 + 152), &__str);
  __int16 v14 = *(_DWORD **)(a1 + 152);
  v14[18] = a3;
  v14[28] = a2;
  v14[38] = HIDWORD(v19);
  uint64_t v15 = sub_1002E8D94();
  (*(void (**)(uint64_t, void))(*(void *)v15 + 184LL))(v15, *(void *)(a1 + 152));
  uint64_t v16 = *(void *)(a1 + 152);
  if (v16)
  {
    operator delete((void *)v16);
  }

  *(void *)(a1 + 152) = 0LL;
}

void sub_1004AC610( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_1004AC638(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 32);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "notify A2DPClient Accessibility headTracking change:%u",  (uint8_t *)v5,  8u);
  }

  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  return sub_100377D3C(qword_1008D6450, *(unsigned __int8 *)(a1 + 32));
}

void sub_1004AC714(uint64_t a1, char a2)
{
  uint64_t v2 = a1 - 96;
  int v3 = *(dispatch_queue_s **)(a1 + 144);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004AC3C8;
  v4[3] = &unk_1008800D8;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

void sub_1004AC770(uint64_t a1, __int128 *a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_1004AC80C;
  block[3] = &unk_10088E2A0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100024238(&__p, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 __p = *a2;
    uint64_t v5 = *((void *)a2 + 2);
  }

  dispatch_async(v2, block);
  if (SHIBYTE(v5) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1004AC80C(uint64_t a1)
{
  uint64_t v2 = sub_1004050C8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768LL;
  void v3[2] = sub_1004AC8CC;
  v3[3] = &unk_10088E2A0;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_100024238(&__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }

  else
  {
    __int128 __p = *(_OWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 48);
  }

  sub_100405384(v2, v3);
  if (SHIBYTE(v5) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1004AC8B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004AC8CC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = (void *)(a1 + 32);
    int v7 = 136315138;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "notify Foreground app changed :%s",  (uint8_t *)&v7,  0xCu);
  }

  char v4 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v5 = (void *)(a1 + 32);
  BOOL v6 = -[NSString initWithUTF8String:](v4, "initWithUTF8String:", v5);
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  sub_100377AD0(qword_1008D6450, v6);
}

void sub_1004AC9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AC9F4(uint64_t a1, __int128 *a2)
{
}

void sub_1004AC9FC(uint64_t a1, char a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004ACA58;
  v3[3] = &unk_1008800D8;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1004ACA58(uint64_t a1)
{
}

void sub_1004ACA6C(uint64_t a1, char a2)
{
  uint64_t v2 = a1 - 120;
  int v3 = *(dispatch_queue_s **)(a1 + 120);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004ACA58;
  v4[3] = &unk_1008800D8;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

BOOL sub_1004ACAC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 216);
  return *(_BYTE *)(v1 + 4) || *(_BYTE *)(v1 + 5) != 0;
}

void sub_1004ACAEC(uint64_t a1, char a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004ACB48;
  v3[3] = &unk_1008800D8;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1004ACB48(uint64_t a1)
{
}

void sub_1004ACB5C(uint64_t a1, char a2)
{
  uint64_t v2 = a1 - 48;
  int v3 = *(dispatch_queue_s **)(a1 + 192);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004ACB48;
  v4[3] = &unk_1008800D8;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

void sub_1004ACBB8(uint64_t a1, char a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004ACC14;
  v3[3] = &unk_1008800D8;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1004ACC14(uint64_t a1)
{
}

void sub_1004ACC28(uint64_t a1, char a2)
{
  uint64_t v2 = a1 - 80;
  int v3 = *(dispatch_queue_s **)(a1 + 160);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004ACC14;
  v4[3] = &unk_1008800D8;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

void sub_1004ACC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004ACCE0;
  block[3] = &unk_100888050;
  void block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_async(v3, block);
}

void sub_1004ACCE0(uint64_t a1)
{
}

void sub_1004ACCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(dispatch_queue_s **)(a1 + 184);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004ACCE0;
  block[3] = &unk_100888050;
  void block[4] = a1 - 56;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_1004ACD54(uint64_t *result, unint64_t a2)
{
  unint64_t v11 = a2;
  if (a2)
  {
    uint64_t v2 = (uint64_t **)(result + 24);
    int v12 = &v11;
    uint64_t result = sub_100029574((uint64_t **)result + 24, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
    if (*(void *)result[5])
    {
      int v12 = &v11;
      if (*(_DWORD *)(*(void *)(sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 40) + 20LL) == 1)
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        int v12 = &v11;
        uint64_t result = sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
        *(CFAbsoluteTime *)(*(void *)result[5] + 144LL) = Current;
      }

      else
      {
        int v12 = &v11;
        if (*(_DWORD *)(*(void *)(sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 40) + 20LL) == 6)
        {
          int v12 = &v11;
          if (*(double *)(*(void *)sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 144LL) == 0.0)
          {
            int v12 = &v11;
            uint64_t result = sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
            if (*(double *)(*(void *)result[5] + 152LL) != 0.0)
            {
              double v8 = CFAbsoluteTimeGetCurrent();
              int v12 = &v11;
              double v9 = v8
                 - *(double *)(*(void *)sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 152LL);
              int v12 = &v11;
              BOOL v10 = sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
              *(double *)(*(void *)v10[5] + 136LL) = v9 + *(double *)(*(void *)v10[5] + 136LL);
              int v12 = &v11;
              uint64_t result = sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
              *(void *)(*(void *)result[5] + 152LL) = 0LL;
            }
          }

          else
          {
            double v4 = CFAbsoluteTimeGetCurrent();
            int v12 = &v11;
            double v5 = v4
               - *(double *)(*(void *)sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12)[5] + 144LL);
            int v12 = &v11;
            BOOL v6 = sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
            *(double *)(*(void *)v6[5] + 128LL) = v5 + *(double *)(*(void *)v6[5] + 128LL);
            int v12 = &v11;
            uint64_t result = sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
            *(void *)(*(void *)result[5] + 144LL) = 0LL;
          }
        }

        else
        {
          int v12 = &v11;
          uint64_t result = sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
          if (*(_DWORD *)(*(void *)(result[5] + 40) + 20LL) == 7)
          {
            CFAbsoluteTime v7 = CFAbsoluteTimeGetCurrent();
            int v12 = &v11;
            uint64_t result = sub_100029574(v2, &v11, (uint64_t)&unk_1006C2518, (uint64_t **)&v12);
            *(CFAbsoluteTime *)(*(void *)result[5] + 152LL) = v7;
          }
        }
      }
    }
  }

  return result;
}

void sub_1004AD074(uint64_t a1, uint64_t a2, const char *a3, unsigned int a4)
{
  double v5 = a3;
  BOOL v6 = (const char *)a2;
  uint64_t v8 = *((unsigned __int8 *)a3 + 23);
  if (a3[23] < 0)
  {
    if (!*((void *)a3 + 1)) {
      return;
    }
  }

  else if (!a3[23])
  {
    return;
  }

  if (*(char *)(a2 + 23) < 0)
  {
    if (!a4) {
      return;
    }
    uint64_t v10 = *(void *)(a2 + 8);
    if (!v10) {
      return;
    }
    double v9 = (char *)operator new[](v10 + 1);
    BOOL v6 = *(const char **)v6;
  }

  else
  {
    if (!a4 || !*(_BYTE *)(a2 + 23)) {
      return;
    }
    double v9 = (char *)operator new[](*(unsigned __int8 *)(a2 + 23) + 1LL);
  }

  strcpy(v9, v6);
  if ((v8 & 0x80) != 0)
  {
    unint64_t v11 = (char *)operator new[](*((void *)v5 + 1) + 1LL);
    double v5 = *(const char **)v5;
  }

  else
  {
    unint64_t v11 = (char *)operator new[](v8 + 1);
  }

  int v12 = strcpy(v11, v5);
  v34[1] = v34;
  size_t v13 = 8LL * a4;
  __chkstk_darwin(v12, v14);
  uint64_t v15 = (char *)v34 - ((8 * a4 + 15) & 0xFF0LL);
  bzero(v15, v13);
  __chkstk_darwin(v16, v17);
  bzero(v15, v13);
  char v18 = strtok(v9, ";");
  if (v18)
  {
    unint64_t v19 = 0LL;
    do
    {
      *(void *)&v15[8 * v19++] = v18;
      char v18 = strtok(0LL, ";");
      if (v18) {
        BOOL v20 = v19 >= a4;
      }
      else {
        BOOL v20 = 1;
      }
    }

    while (!v20);
  }

  else
  {
    LODWORD(v19) = 0;
  }

  unint64_t v21 = strtok(v11, ";");
  int v35 = v11;
  if (v21)
  {
    unint64_t v22 = 0LL;
    do
    {
      *(void *)&v15[8 * v22++] = v21;
      unint64_t v21 = strtok(0LL, ";");
      if (v21) {
        BOOL v23 = v22 >= a4;
      }
      else {
        BOOL v23 = 1;
      }
    }

    while (!v23);
    unint64_t v24 = v9;
    if (!(_DWORD)v19) {
      goto LABEL_40;
    }
LABEL_35:
    uint64_t v25 = 0LL;
    do
    {
      __int128 v26 = strtok(*(char **)&v15[8 * v25], ",");
      if (v26)
      {
        uint64_t v27 = 0LL;
        do
        {
          *(_BYTE *)(*(void *)(*(void *)(*(void *)(a1 + 1000) + 8 * v25) + 8LL) + v27) = atoi(v26);
          __int128 v26 = strtok(0LL, ",");
          ++v27;
        }

        while (v26);
      }

      ++v25;
    }

    while (v25 != v19);
    goto LABEL_40;
  }

  unint64_t v24 = v9;
  LODWORD(v22) = 0;
  if ((_DWORD)v19) {
    goto LABEL_35;
  }
LABEL_40:
  __int16 v28 = v24;
  char v29 = v35;
  if ((_DWORD)v22)
  {
    uint64_t v30 = 0LL;
    uint64_t v31 = v22;
    do
    {
      int v32 = strtok(*(char **)&v15[8 * v30], ",");
      if (v32)
      {
        uint64_t v33 = 0LL;
        do
        {
          *(_WORD *)(*(void *)(*(void *)(*(void *)(a1 + 1000) + 8 * v30) + 16LL) + v33) = atoi(v32);
          int v32 = strtok(0LL, ",");
          v33 += 2LL;
        }

        while (v32);
      }

      ++v30;
    }

    while (v30 != v31);
  }

  operator delete[](v29);
  operator delete[](v28);
}

void sub_1004AD390(uint64_t a1)
{
  for (uint64_t i = *(unsigned __int8 ***)(a1 + 1000); i != *(unsigned __int8 ***)(a1 + 1008); ++i)
  {
    int v3 = *i;
    if (*i && *((void *)v3 + 1) && *((void *)v3 + 2))
    {
      unsigned int v4 = *v3;
      if (v4 >= 2)
      {
        uint64_t v5 = 0LL;
        BOOL v6 = (os_log_s *)qword_1008F7570;
        do
        {
          BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
          if (v7)
          {
            id v8 = sub_1004A6934(v7, *((_DWORD *)v3 + 1));
            double v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
            int v10 = *(unsigned __int8 *)(*((void *)v3 + 1) + v5);
            *(_DWORD *)__int128 buf = 138412802;
            unint64_t v21 = v9;
            __int16 v22 = 1024;
            int v23 = v5;
            __int16 v24 = 1024;
            int v25 = v10;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "A2DP Link Adaptive %@ Threshold (%d): %3d",  buf,  0x18u);

            BOOL v6 = (os_log_s *)qword_1008F7570;
            unsigned int v4 = *v3;
          }

          ++v5;
        }

        while (v5 < v4 - 1LL);
      }

      if (v4)
      {
        unint64_t v12 = 0LL;
        size_t v13 = (os_log_s *)qword_1008F7570;
        do
        {
          BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
          if (v14)
          {
            id v15 = sub_1004A6934(v14, *((_DWORD *)v3 + 1));
            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
            int v17 = *(unsigned __int16 *)(*((void *)v3 + 2) + 2 * v12);
            *(_DWORD *)__int128 buf = 138412802;
            unint64_t v21 = v16;
            __int16 v22 = 1024;
            int v23 = v12;
            __int16 v24 = 1024;
            int v25 = v17;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "A2DP Link Adaptive %@ Rate (%d): %3d",  buf,  0x18u);

            size_t v13 = (os_log_s *)qword_1008F7570;
            unsigned int v4 = *v3;
          }

          ++v12;
        }

        while (v12 < v4);
      }
    }

    else
    {
      unint64_t v11 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEBUG)) {
        sub_1006857E0(&v18, v19, v11);
      }
    }
  }

uint64_t sub_1004AD5C4(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  unsigned int v4 = &v3;
  return *(void *)(sub_100029574((uint64_t **)(a1 + 192), &v3, (uint64_t)&unk_1006C2518, (uint64_t **)&v4)[5] + 40);
}

void sub_1004AD60C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v3 = a2[3];
  int v4 = a2[2] + *(unsigned __int8 *)(a3 + 1);
  int v5 = a2[1] + *(unsigned __int16 *)(a3 + 167);
  *a2 += *(unsigned __int16 *)(a3 + 165);
  a2[1] = v5;
  int v6 = v3 + *(unsigned __int16 *)(a3 + 169);
  a2[2] = v4;
  a2[3] = v6;
  int v7 = a2[5] + *(unsigned __int16 *)(a3 + 171);
  a2[4] += *(unsigned __int16 *)(a3 + 173);
  a2[5] = v7;
}

void sub_1004AD658(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v3 = *(char *)(a3 + 217);
  int v4 = a2[1];
  *a2 += v3;
  int v5 = *(char *)(a3 + 218);
  a2[2] += v5;
  int v6 = *(char *)(a3 + 219);
  a2[4] += v6;
  if (v4 < v3) {
    a2[1] = v3;
  }
  if (a2[3] < v5) {
    a2[3] = v5;
  }
  if (a2[5] < v6) {
    a2[5] = v6;
  }
  unsigned int v7 = *(unsigned __int8 *)(a3 + 220);
  unsigned int v8 = a2[7] + v7;
  ++a2[6];
  a2[7] = v8;
  unsigned int v9 = a2[8];
  if (v9 >= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = a2[8];
  }
  if (v9) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v7;
  }
  a2[8] = v11;
}

id sub_1004AD6E4(uint64_t a1, char a2)
{
  int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  &stru_1008A57D8));
  int v5 = v4;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 810);
  if (v6 - 212 >= 0xFFFFFF2D)
  {
    if ((a2 & 4) != 0) {
      unsigned int v8 = @"Cell Active ";
    }
    else {
      unsigned int v8 = @"Cell Inactive ";
    }
    [v4 appendString:v8];
    if ((a2 & 2) != 0) {
      unsigned int v9 = @"/ WiFi5G Active ";
    }
    else {
      unsigned int v9 = @"/ WiFi5G Inactive ";
    }
    [v5 appendString:v9];
    unsigned int v10 = @"/ H ";
    unsigned int v11 = @"/ B ";
  }

  else
  {
    if (v6 < 0xD4) {
      return v5;
    }
    if ((a2 & 8) != 0)
    {
      [v4 appendString:@"Cell Inactive "];
      unsigned int v7 = &stru_1008A57D8;
    }

    else
    {
      [v4 appendString:@"Cell Active "];
      if ((a2 & 4) != 0) {
        unsigned int v7 = @"/ Ant(2/4/6) ";
      }
      else {
        unsigned int v7 = @"/ Ant(1/3/5) ";
      }
    }

    [v5 appendString:v7];
    if ((a2 & 2) != 0) {
      unint64_t v12 = @"/ B ";
    }
    else {
      unint64_t v12 = @"/ H ";
    }
    [v5 appendString:v12];
    unsigned int v10 = @"/ WiFi5G Active";
    unsigned int v11 = @"/ WiFi5G Inactive";
  }

  if ((a2 & 1) != 0) {
    size_t v13 = v10;
  }
  else {
    size_t v13 = v11;
  }
  [v5 appendString:v13];
  return v5;
}

void sub_1004AD828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004AD838(unsigned __int8 *a1, int a2)
{
  int v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump: ----------------------------Packet------------------Target iPA Tx Power------------------------",  (uint8_t *)&v19,  2u);
  }

  if (a2 == 2000)
  {
    else {
      unsigned int v5 = a1[651];
    }
    unsigned int v6 = a1[644];
    if (a1[652] >= v6) {
      unsigned int v7 = a1[644];
    }
    else {
      unsigned int v7 = a1[652];
    }
    if (a1[653] >= v6) {
      unsigned int v8 = a1[644];
    }
    else {
      unsigned int v8 = a1[653];
    }
    unsigned int v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = a1[650];
      if (v10 >= a1[640]) {
        unsigned int v10 = a1[640];
      }
      int v19 = 134217984;
      double v20 = (double)v10 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "statedump:                              BDR                         %.2f dBm",  (uint8_t *)&v19,  0xCu);
      unsigned int v9 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v5 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "statedump:                              EDR                         %.2f dBm",  (uint8_t *)&v19,  0xCu);
      unsigned int v9 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v7 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "statedump:                             LEData                       %.2f dBm",  (uint8_t *)&v19,  0xCu);
      unsigned int v9 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v8 * 0.5;
      unsigned int v11 = "statedump:                             LEAdv                        %.2f dBm";
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v19, 0xCu);
    }
  }

  else if ((a2 - 2001) <= 1)
  {
    else {
      unsigned int v12 = a1[666];
    }
    else {
      unsigned int v13 = a1[682];
    }
    else {
      unsigned int v14 = a1[698];
    }
    else {
      unsigned int v15 = a1[714];
    }
    unsigned int v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v16 = a1[650];
      if (v16 >= a1[640]) {
        unsigned int v16 = a1[640];
      }
      int v19 = 134217984;
      double v20 = (double)v16 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "statedump:                              BDR                         %.2f dBm",  (uint8_t *)&v19,  0xCu);
      unsigned int v9 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v12 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "statedump:                              EDR                         %.2f dBm",  (uint8_t *)&v19,  0xCu);
      unsigned int v9 = (os_log_s *)qword_1008F7570;
    }

    double v17 = (double)v13;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = v17 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "statedump:                             LEData                       %.2f dBm",  (uint8_t *)&v19,  0xCu);
      unsigned int v9 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = v17 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "statedump:                             LEAdv                        %.2f dBm",  (uint8_t *)&v19,  0xCu);
      unsigned int v9 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v14 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "statedump:                              HDR4                        %.2f dBm",  (uint8_t *)&v19,  0xCu);
      unsigned int v9 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134217984;
      double v20 = (double)v15 * 0.5;
      unsigned int v11 = "statedump:                              HDR8                        %.2f dBm";
      goto LABEL_50;
    }
  }

  uint8_t v18 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "statedump: ============================= End of bluetooth power targets dump ==========================",  (uint8_t *)&v19,  2u);
  }

void sub_1004ADCEC(unsigned __int8 *a1, int a2)
{
  int v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump: ========================= Bluetooth Tx Power Targets (CC0) ===============================",  (uint8_t *)&v51,  2u);
  }

  if (a2 == 2000)
  {
    unsigned int v5 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump: ------Use Case-------Target ePA Tx Power-------------------Power Caps--------------------------",  (uint8_t *)&v51,  2u);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = a1[778];
      unsigned int v7 = a1[655];
      unsigned int v8 = a1[643];
      if (v7 >= v6) {
        unsigned int v9 = a1[778];
      }
      else {
        unsigned int v9 = a1[655];
      }
      if (v8 < v9) {
        unsigned int v9 = a1[643];
      }
      int v51 = 134218752;
      double v52 = (double)v9 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v8 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v7 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v6 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]",  (uint8_t *)&v51,  0x2Au);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = a1[779];
      unsigned int v11 = a1[655];
      unsigned int v12 = a1[643];
      if (v11 >= v10) {
        unsigned int v13 = a1[779];
      }
      else {
        unsigned int v13 = a1[655];
      }
      if (v12 < v13) {
        unsigned int v13 = a1[643];
      }
      int v51 = 134218752;
      double v52 = (double)v13 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v12 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v11 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v10 * 0.5;
      unsigned int v14 = "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]";
LABEL_84:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v51, 0x2Au);
    }
  }

  else if ((a2 - 2001) <= 1)
  {
    unsigned int v5 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump: ------EDR-------Target ePA Tx Power-------------------Power Caps--------------------------",  (uint8_t *)&v51,  2u);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = a1[643];
      unsigned int v16 = a1[667];
      unsigned int v17 = a1[778];
      if (v16 >= v15) {
        unsigned int v18 = a1[643];
      }
      else {
        unsigned int v18 = a1[667];
      }
      if (v17 < v18) {
        unsigned int v18 = a1[778];
      }
      int v51 = 134218752;
      double v52 = (double)v18 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v15 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v16 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v17 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]",  (uint8_t *)&v51,  0x2Au);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = a1[643];
      unsigned int v20 = a1[667];
      unsigned int v21 = a1[786];
      if (v20 >= v19) {
        unsigned int v22 = a1[643];
      }
      else {
        unsigned int v22 = a1[667];
      }
      if (v21 < v22) {
        unsigned int v22 = a1[786];
      }
      int v51 = 134218752;
      double v52 = (double)v22 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v19 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v20 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v21 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]",  (uint8_t *)&v51,  0x2Au);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v23 = a1[643];
      unsigned int v24 = a1[667];
      unsigned int v25 = a1[794];
      if (v24 >= v23) {
        unsigned int v26 = a1[643];
      }
      else {
        unsigned int v26 = a1[667];
      }
      if (v25 < v26) {
        unsigned int v26 = a1[794];
      }
      int v51 = 134218752;
      double v52 = (double)v26 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v23 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v24 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v25 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump:      WiFi 5G On           %.2f dBm                   [%.2f,%.2f,%.2f]",  (uint8_t *)&v51,  0x2Au);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump: ------HDR4-------Target ePA Tx Power-------------------Power Caps--------------------------",  (uint8_t *)&v51,  2u);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v28 = a1[647];
      unsigned int v29 = a1[715];
      unsigned int v30 = a1[778];
      if (v29 >= v28) {
        unsigned int v29 = a1[647];
      }
      if (v30 < v29) {
        unsigned int v29 = a1[778];
      }
      LOBYTE(v27) = a1[699];
      int v51 = 134218752;
      double v52 = (double)v29 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v28 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v27 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v30 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]",  (uint8_t *)&v51,  0x2Au);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v32 = a1[647];
      unsigned int v33 = a1[715];
      unsigned int v34 = a1[786];
      if (v33 >= v32) {
        unsigned int v33 = a1[647];
      }
      if (v34 < v33) {
        unsigned int v33 = a1[786];
      }
      LOBYTE(v31) = a1[699];
      int v51 = 134218752;
      double v52 = (double)v33 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v32 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v31 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v34 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]",  (uint8_t *)&v51,  0x2Au);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v36 = a1[647];
      unsigned int v37 = a1[715];
      unsigned int v38 = a1[794];
      if (v37 >= v36) {
        unsigned int v37 = a1[647];
      }
      if (v38 < v37) {
        unsigned int v37 = a1[794];
      }
      LOBYTE(v35) = a1[699];
      int v51 = 134218752;
      double v52 = (double)v37 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v36 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v35 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v38 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump:      WiFi 5G On           %.2f dBm                   [%.2f,%.2f,%.2f]",  (uint8_t *)&v51,  0x2Au);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump: ------HDR8-------Target ePA Tx Power-------------------Power Caps--------------------------",  (uint8_t *)&v51,  2u);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v40 = a1[649];
      unsigned int v41 = a1[731];
      unsigned int v42 = a1[778];
      if (v41 >= v40) {
        unsigned int v41 = a1[649];
      }
      if (v42 < v41) {
        unsigned int v41 = a1[778];
      }
      LOBYTE(v39) = a1[715];
      int v51 = 134218752;
      double v52 = (double)v41 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v40 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v39 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v42 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]",  (uint8_t *)&v51,  0x2Au);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v44 = a1[649];
      unsigned int v45 = a1[731];
      unsigned int v46 = a1[786];
      if (v45 >= v44) {
        unsigned int v45 = a1[649];
      }
      if (v46 < v45) {
        unsigned int v45 = a1[786];
      }
      LOBYTE(v43) = a1[715];
      int v51 = 134218752;
      double v52 = (double)v45 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v44 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v43 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v46 * 0.5;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]",  (uint8_t *)&v51,  0x2Au);
      unsigned int v5 = (os_log_s *)qword_1008F7570;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v48 = a1[649];
      unsigned int v49 = a1[731];
      unsigned int v50 = a1[794];
      if (v49 >= v48) {
        unsigned int v49 = a1[649];
      }
      if (v50 < v49) {
        unsigned int v49 = a1[794];
      }
      LOBYTE(v47) = a1[715];
      int v51 = 134218752;
      double v52 = (double)v49 * 0.5;
      __int16 v53 = 2048;
      double v54 = (double)v48 * 0.5;
      __int16 v55 = 2048;
      double v56 = (double)v47 * 0.5;
      __int16 v57 = 2048;
      double v58 = (double)v50 * 0.5;
      unsigned int v14 = "statedump:      WiFi 5G On           %.2f dBm                   [%.2f,%.2f,%.2f]";
      goto LABEL_84;
    }
  }

void sub_1004AE584(uint64_t a1, int a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, uint64_t a7)
{
  __int16 v26 = 0;
  char v25 = 0;
  if (a2 == 2)
  {
    uint64_t v13 = sub_1002E6E00();
    sub_10002418C(buf, "ePA");
    sub_10002418C(__p, "DisableA2DP");
    (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v13 + 72LL))( v13,  buf,  __p,  (char *)&v26 + 1);
  }

  else
  {
    if (a2 != 1) {
      goto LABEL_9;
    }
    uint64_t v14 = sub_1002E6E00();
    sub_10002418C(buf, "ePA");
    sub_10002418C(__p, "DisableHFP");
    (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v14 + 72LL))( v14,  buf,  __p,  (char *)&v26 + 1);
  }

  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(*(void **)buf);
  }
LABEL_9:
  uint64_t v15 = sub_1002E6E00();
  sub_10002418C(buf, "ePA");
  sub_10002418C(__p, "DisableReTxEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, __int16 *))(*(void *)v15 + 72LL))(v15, buf, __p, &v26);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v16 = sub_1002E6E00();
  sub_10002418C(buf, "ePA");
  sub_10002418C(__p, "DisableThresholdEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v16 + 72LL))(v16, buf, __p, &v25);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(*(void **)buf);
  }
  *a3 = HIBYTE(v26);
  *a4 = v26;
  *a5 = v25;
  *a6 = 3;
  if (a2 == 2)
  {
    uint64_t v17 = sub_1002E6BF0();
    goto LABEL_23;
  }

  if (a2 == 1)
  {
    uint64_t v18 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 168LL))(v18))
    {
      if (!sub_1003D0874(a7)) {
LABEL_23:
      }
        *a6 = 7;
    }
  }

void sub_1004AE878( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004AE8C4(_BYTE *a1, uint64_t a2, char a3, int a4)
{
  __int16 v40 = 0;
  char v39 = 0;
  sub_1004AE584((uint64_t)a1, a4, a1 + 329, &v40, &v39, (_BYTE *)&v40 + 1, a2);
  if (a1[329])
  {
    unsigned int v8 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ePA disabled by defaults write", buf, 2u);
    }

    return;
  }

  sub_1002E6E9C();
  if (!sub_1002CDAA4())
  {
    sub_1002E6E9C();
    uint64_t v18 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Enable EPA for Marconi", buf, 2u);
    }

    uint64_t v19 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v19 + 184LL))( v19,  a2,  2LL,  0LL,  30LL,  10LL);
    goto LABEL_34;
  }

  unsigned int v9 = a1 + 862;
  sub_10049C9AC((uint64_t)a1, a2, a4, a1 + 862);
  uint64_t v10 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 160LL))(v10))
  {
    int v11 = sub_100361020();
    if (a4 == 1) {
      unsigned int v12 = -75;
    }
    else {
      unsigned int v12 = -80;
    }
    if (v11 == 150) {
      uint64_t v13 = 4294967197LL;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *v9;
      *(_DWORD *)__int128 buf = 67109888;
      int v42 = HIBYTE(v40);
      __int16 v43 = 1024;
      int v44 = v15;
      __int16 v45 = 1024;
      int v46 = v13;
      __int16 v47 = 1024;
      int v48 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Enabling beamforming, policy: %#x, iPA-Beamforming RSSI threshold: %d dBm, ePA-Beamforming RSSI threshold: %d dB m, beamforming gain threshold: %d dB",  buf,  0x1Au);
    }

    if (qword_1008D6170 != -1) {
      dispatch_once(&qword_1008D6170, &stru_10089BCD0);
    }
    uint64_t v16 = sub_1002571CC();
    if ((_DWORD)v16)
    {
      uint64_t v17 = sub_1004AED60(v16, a2, HIBYTE(v40), *v9, 0, v13, -70, 0);
    }

    else
    {
      uint64_t v32 = sub_1002E6E9C();
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void, uint64_t))(*(void *)v32 + 128LL))( v32,  0LL,  a2,  HIBYTE(v40),  *v9,  0LL,  v13);
    }

    sub_1004AEFB8(v17, a2, 1LL);
    uint64_t v33 = sub_1002E6E9C();
    else {
      uint64_t v34 = 4LL;
    }
    sub_1004AF148(v33, v34, a2, 1LL);
    goto LABEL_34;
  }

  unsigned int v20 = a1 + 860;
  unsigned int v21 = a1 + 861;
  sub_10049CBDC((uint64_t)a1, a3, a1 + 860, a1 + 861);
  sub_10049CC60((uint64_t)a1);
  sub_1002E6E9C();
  int v22 = sub_1002CDD88();
  int v23 = a1[861];
  uint64_t v24 = qword_1008F7570;
  BOOL v25 = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT);
  uint64_t v26 = HIBYTE(v40);
  if (v22 == v23)
  {
    if (v25)
    {
      int v27 = *v9;
      int v28 = 25 * *v20;
      *(_DWORD *)__int128 buf = 67109888;
      int v42 = HIBYTE(v40);
      __int16 v43 = 1024;
      int v44 = v27;
      __int16 v45 = 1024;
      int v46 = v28;
      __int16 v47 = 1024;
      int v48 = 25 * v22;
      unsigned int v29 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, low: %d";
      unsigned int v30 = (os_log_s *)v24;
      uint32_t v31 = 26;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    }
  }

  else if (v25)
  {
    int v35 = *v9;
    int v36 = 25 * *v20;
    *(_DWORD *)__int128 buf = 67110144;
    int v42 = HIBYTE(v40);
    __int16 v43 = 1024;
    int v44 = v35;
    __int16 v45 = 1024;
    int v46 = v36;
    __int16 v47 = 1024;
    int v48 = 25 * v23;
    __int16 v49 = 1024;
    int v50 = 25 * v22;
    unsigned int v29 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, medium: %d, low (unused): %d";
    unsigned int v30 = (os_log_s *)v24;
    uint32_t v31 = 32;
    goto LABEL_30;
  }

  uint64_t v37 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v37 + 104LL))( v37,  a2,  1LL,  v26,  *v20,  *v21,  *v9);
  uint64_t v38 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 120LL))(v38, 1LL);
LABEL_34:
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_10089BC90);
  }
  sub_1004267B0((uint64_t)off_1008D60C8, a2, 0xFFFFFFFFLL, 0LL, 702LL, 0LL);
}

uint64_t sub_1004AED60(uint64_t a1, uint64_t a2, int a3, char a4, char a5, char a6, char a7, int a8)
{
  v34[0] = 0LL;
  v34[1] = 0LL;
  char v35 = 0;
  int v15 = sub_1003D0268(a2);
  if (v15 == 22 || v15 == 17) {
    char v17 = 60;
  }
  else {
    char v17 = 45;
  }
  if (a8) {
    LOBYTE(v1_Block_object_dispose(va, 8) = 75;
  }
  else {
    LOBYTE(v1_Block_object_dispose(va, 8) = v17;
  }
  int v33 = 0;
  uint64_t v19 = sub_1002E6E00();
  sub_10002418C(buf, "ePA");
  sub_10002418C(__p, "iPAMaxThreshold");
  int v20 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v19 + 88LL))(v19, buf, __p, &v33);
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if ((v37 & 0x80000000) == 0)
  {
    if (!v20) {
      goto LABEL_18;
    }
LABEL_16:
    int v18 = -v33;
    unsigned int v21 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Warning: Setting user defined iPA-Max threshold to -%d dBm through defaults write",  buf,  8u);
    }

    goto LABEL_18;
  }

  operator delete(*(void **)buf);
  if (v20) {
    goto LABEL_16;
  }
LABEL_18:
  char v22 = 0;
  uint64_t v23 = 0LL;
  LOBYTE(v34[0]) = 2;
  char v24 = 1;
  while (1)
  {
    char v25 = v24;
    unint64_t v26 = (unint64_t)&v34[v23];
    *(_BYTE *)(v26 + 1) = v23;
    *(_WORD *)(v26 + 2) = 6;
    *(_BYTE *)(v26 + 4) = *(_BYTE *)(v26 + 4) & 0xF8 | a3 & 7;
    *(_BYTE *)(v26 + 5) = v18;
    *(_BYTE *)(v26 + 6) = a4;
    int v27 = (_BYTE *)(v26 | 7);
    int v28 = (_BYTE *)(v26 + 8);
    if (a3)
    {
      if ((v22 & 1) != 0) {
        break;
      }
    }

    char v24 = 0;
    *int v27 = a6;
    *int v28 = a5;
    char v22 = 1;
    uint64_t v23 = 1LL;
    if ((v25 & 1) == 0) {
      goto LABEL_24;
    }
  }

  *int v27 = a7;
  *int v28 = a5;
LABEL_24:
  uint64_t v29 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v29 + 144LL))(v29, a2, 17LL, v34);
}

void sub_1004AEF7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004AEFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1002E6E00();
  uint64_t v6 = sub_1002E6E00();
  unsigned int v7 = (os_log_s *)qword_1008F7570;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)a3)
  {
    if (!v8) {
      goto LABEL_9;
    }
    __int16 v23 = 0;
    unsigned int v9 = "Enabling beamforming VSE Logging";
    uint64_t v10 = (uint8_t *)&v23;
  }

  else
  {
    if (!v8) {
      goto LABEL_9;
    }
    *(_WORD *)__int128 buf = 0;
    unsigned int v9 = "Disabling beamforming VSE Logging";
    uint64_t v10 = buf;
  }

  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, v10, 2u);
LABEL_9:
  uint64_t v11 = sub_1002E6E9C();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v11 + 128LL))( v11,  2LL,  a2,  a3,  0LL,  0LL,  0LL);
  uint64_t v13 = (os_log_s *)qword_1008F7570;
  if (!(_DWORD)v12)
  {
    BOOL v16 = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_INFO);
    if ((_DWORD)a3)
    {
      if (v16)
      {
        __int16 v21 = 0;
        char v17 = "Beamforming VSE Logging enabled";
        int v18 = (uint8_t *)&v21;
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v17, v18, 2u);
      }
    }

    else if (v16)
    {
      __int16 v20 = 0;
      char v17 = "Beamforming VSE Logging disabled";
      int v18 = (uint8_t *)&v20;
      goto LABEL_20;
    }

    return 0LL;
  }

  uint64_t v14 = v12;
  BOOL v15 = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR);
  if ((_DWORD)a3)
  {
    if (v15) {
      sub_100685814();
    }
  }

  else if (v15)
  {
    sub_100685874();
  }

  return v14;
}

uint64_t sub_1004AF148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = (_DWORD)a2 == 4 || (_DWORD)a2 == 2;
  if ((_DWORD)a2 == 4 || (_DWORD)a2 == 2)
  {
    uint64_t v8 = sub_1002E6E00();
  }

  uint64_t v9 = sub_1002E6E00();
  uint64_t v13 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = "Logging";
    if ((_DWORD)a2 == 1) {
      uint64_t v14 = "Global control";
    }
    BOOL v15 = "Enable";
    if (!(_DWORD)a4) {
      BOOL v15 = "Disable";
    }
    int v19 = 136315394;
    __int16 v20 = v14;
    __int16 v21 = 2080;
    char v22 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Beamforming MRC %s %s", (uint8_t *)&v19, 0x16u);
  }

  uint64_t v16 = sub_1002E6E9C();
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 152LL))(v16, a2, a3, a4);
  uint64_t v11 = v17;
  if ((_DWORD)a2 == 1 && (_DWORD)v17)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_1006858D4();
    }
  }

  else if ((_DWORD)v17)
  {
    BOOL v18 = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR);
    if ((_DWORD)a4)
    {
      if (v18) {
        sub_100685950();
      }
    }

    else if (v18)
    {
      sub_1006859B0();
    }
  }

  return v11;
}

uint64_t sub_1004AF324(uint64_t a1, uint64_t a2)
{
  if (sub_1002CDAA4())
  {
    int v3 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Disable Enhanced Power save ", buf, 2u);
    }

    uint64_t v4 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 160LL))(v4))
    {
      uint64_t v5 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v15 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Disable Enhanced Power and beamforming",  v15,  2u);
      }

      if (qword_1008D6170 != -1) {
        dispatch_once(&qword_1008D6170, &stru_10089BCD0);
      }
      uint64_t v6 = sub_1002571CC();
      if ((_DWORD)v6)
      {
        uint64_t v7 = sub_1004AED60(v6, a2, 0, -69, 0, -80, -70, 0);
      }

      else
      {
        uint64_t v12 = sub_1002E6E9C();
        uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v12 + 128LL))( v12,  0LL,  a2,  0LL,  4294967227LL,  0LL,  4294967216LL);
      }

      sub_1004AEFB8(v7, a2, 0LL);
      uint64_t v13 = sub_1002E6E9C();
      else {
        uint64_t v14 = 4LL;
      }
      sub_1004AF148(v13, v14, a2, 0LL);
    }

    else
    {
      uint64_t v10 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, void, uint64_t))(*(void *)v10 + 104LL))( v10,  a2,  1LL,  0LL,  0LL,  0LL,  4294967227LL);
      uint64_t v11 = sub_1002E6E9C();
      (*(void (**)(uint64_t, void))(*(void *)v11 + 120LL))(v11, 0LL);
    }
  }

  else
  {
    sub_1002E6E9C();
    uint64_t result = sub_1002CD960();
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v9 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, void, void, void, void))(*(void *)v9 + 184LL))( v9,  a2,  0LL,  0LL,  0LL,  0LL);
  }

  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_10089BC90);
  }
  return sub_1004267B0((uint64_t)off_1008D60C8, a2, 0xFFFFFFFFLL, 0LL, 703LL, 0LL);
}

void sub_1004AF568(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = sub_1002E6BF0();
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 136LL))(v8);
  if (a2 && v9)
  {
    if (*(_BYTE *)(a1 + 328))
    {
      char v48 = 0;
      sub_100242CA4(&v48);
      int v10 = sub_10011257C(a2 + 128);
      sub_100242CD0(&v48);
      uint64_t v11 = sub_1002E6BF0();
      if ((((*(unsigned int (**)(uint64_t))(*(void *)v11 + 160LL))(v11) | v10) & 1) == 0)
      {
        uint64_t v12 = sub_1002E6E00();
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 352LL))(v12))
        {
          BOOL v18 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = "A2DP";
            if (a4 == 1) {
              int v19 = "HFP";
            }
            __int16 v20 = "started";
            if (!a3) {
              __int16 v20 = "stopped";
            }
            *(_DWORD *)__int128 buf = 136315394;
            int v50 = v19;
            __int16 v51 = 2080;
            double v52 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s stream %s: Diversity inactive since role is peripheral or not supporting TxBF",  buf,  0x16u);
          }

          goto LABEL_72;
        }
      }

      unsigned int v13 = *(_DWORD *)(sub_1002E6E9C() + 708);
      if (!a3)
      {
        uint64_t v16 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = "A2DP";
          if (a4 == 1) {
            uint64_t v17 = "HFP";
          }
          *(_DWORD *)__int128 buf = 136315138;
          int v50 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s stream stopped: Disabling diversity",  buf,  0xCu);
        }

        if (v13 <= 0x13) {
          sub_1004AFE74(a1, 0LL, 3);
        }
        goto LABEL_72;
      }

      sub_100242C98(&v48);
      if (a4 == 1)
      {
        uint64_t v14 = sub_10012D8E8(a2 + 128);
      }

      else
      {
        if (a4 != 2)
        {
          __int16 v21 = 0LL;
          goto LABEL_27;
        }

        uint64_t v14 = sub_10012D890(a2 + 128);
      }

      __int16 v21 = (unsigned __int16 *)v14;
LABEL_27:
      if (sub_1003D0818(a2) == 2 || sub_1003D0818(a2) == 3)
      {
        char v22 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Low Latency Traffic detected, use ACL Connection instead",  buf,  2u);
        }

        __int16 v21 = (unsigned __int16 *)sub_10012D890(a2 + 128);
      }

      sub_100242CD0(&v48);
      if (!v21) {
        goto LABEL_72;
      }
      __int16 v23 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        char v24 = "A2DP";
        if (a4 == 1) {
          char v24 = "HFP";
        }
        *(_DWORD *)__int128 buf = 136315138;
        int v50 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s stream started: Enabling diversity/TxBF",  buf,  0xCu);
      }

      if (v13 <= 0x13) {
        sub_1004AFE74(a1, v21, 3);
      }
      uint64_t v25 = sub_1002E6BF0();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v25 + 144LL))(v25) & 1) == 0)
      {
        uint64_t v26 = sub_1002E6BF0();
      }

      int v27 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Platform supports enhanced diversity, configuring antenna pair before enabling diversity",  buf,  2u);
      }

      uint64_t v28 = sub_1002E6E00();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 368LL))(v28))
      {
        uint64_t v29 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Warning: Forcing enhanced diversity antenna pair via defaults write",  buf,  2u);
        }

        uint64_t v30 = sub_1002E6E00();
        int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 376LL))(v30);
        int v32 = sub_1004AFFDC(a1, v31);
        uint64_t v33 = qword_1008F7570;
        BOOL v34 = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT);
        if (v32)
        {
          if (v34)
          {
            *(_WORD *)__int128 buf = 0;
            char v35 = "Warning: Forcing enhanced diversity antenna pair via defaults write failed";
            int v36 = (os_log_s *)v33;
            uint32_t v37 = 2;
LABEL_65:
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);
          }

void sub_1004AFB64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1004AFB94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D90F8 != -1) {
    dispatch_once(&qword_1008D90F8, &stru_10089BDA8);
  }
  sub_10054A7B0((uint64_t)off_1008D90F0, v1 + 16);
}

void sub_1004AFBE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D90F8 != -1) {
    dispatch_once(&qword_1008D90F8, &stru_10089BDA8);
  }
  sub_10054A86C((uint64_t)off_1008D90F0, v1 + 16);
}

uint64_t sub_1004AFC34()
{
  __int16 v9 = 0;
  uint64_t v8 = 0LL;
  __int16 v5 = 10;
  BOOL v0 = sub_100361020() == 83 || sub_100361020() == 28;
  uint64_t v1 = sub_1002E6E9C();
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, void, void, __int16 *, uint64_t *))(*(void *)v1 + 896LL))( v1,  4095LL,  2LL,  v0,  0LL,  0LL,  &v5,  &v8);
  int v3 = (os_log_s *)qword_1008F7570;
  if ((_DWORD)v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100685A10();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 67109120;
    BOOL v7 = v0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Default BT antenna set to %d", buf, 8u);
  }

  return v2;
}

uint64_t sub_1004AFD64(uint64_t a1, int a2)
{
  __int16 v11 = 0;
  uint64_t v10 = 0LL;
  __int16 v7 = 10;
  uint64_t v3 = sub_1002E6E9C();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void, __int16 *, uint64_t *))(*(void *)v3 + 896LL))( v3,  4095LL,  6LL,  a2,  0LL,  0LL,  &v7,  &v10);
  __int16 v5 = (os_log_s *)qword_1008F7570;
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100685A74();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Diversity follow mode set to %d", buf, 8u);
  }

  return v4;
}

uint64_t sub_1004AFE74(uint64_t a1, unsigned __int16 *a2, int a3)
{
  if (a2) {
    uint64_t v5 = *a2;
  }
  else {
    uint64_t v5 = 4095LL;
  }
  uint64_t v6 = sub_1002E6BF0();
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 160LL))(v6);
  BOOL v8 = a3 > 5;
  uint64_t v9 = sub_1002E6E9C();
  if ((v8 & v7) != 0) {
    unsigned __int8 v10 = -125;
  }
  else {
    unsigned __int8 v10 = 0;
  }
  if ((v8 & v7) != 0) {
    uint64_t v11 = 131LL;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, void, void))(*(void *)v9 + 896LL))( v9,  v5,  1LL,  a3,  0LL,  v11,  0LL,  0LL);
  unsigned int v13 = (os_log_s *)qword_1008F7570;
  if ((_DWORD)v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100685AD4();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_INFO))
    {
      v15[0] = 67109632;
      v15[1] = a3;
      __int16 v16 = 1024;
      int v17 = v5;
      __int16 v18 = 1024;
      int v19 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Diversity mode %d set on handle %d with beamforming/diversity threshold %d",  (uint8_t *)v15,  0x14u);
    }

    *(_DWORD *)(a1 + 84_Block_object_dispose(va, 8) = a3;
  }

  return v12;
}

uint64_t sub_1004AFFDC(uint64_t a1, int a2)
{
  __int16 v12 = 0;
  uint64_t v11 = 0LL;
  __int16 v8 = 10;
  uint64_t v4 = sub_1002E6E9C();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, __int16 *, uint64_t *))(*(void *)v4 + 896LL))( v4,  4095LL,  8LL,  1LL,  a2,  0LL,  &v8,  &v11);
  if ((_DWORD)v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100685B34();
    }
  }

  else
  {
    *(_BYTE *)(a1 + 852) = a2 == 1;
    uint64_t v6 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      int v10 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Diversity antenna pair set to (0, %d)",  buf,  8u);
    }
  }

  return v5;
}

void sub_1004B0108(uint64_t a1)
{
  int v2 = 1;
  int v3 = sub_100361020();
  if (v3 > 72)
  {
    if (v3 > 125)
    {
      if (v3 == 126 || v3 == 128) {
        return;
      }
      goto LABEL_12;
    }

    if ((v3 - 73) >= 2)
    {
      if (v3 == 84)
      {
        if (*(_DWORD *)(a1 + 856) == 7) {
          int v2 = 1;
        }
        else {
          int v2 = 2;
        }
      }

      goto LABEL_12;
    }
  }

  else
  {
    if ((v3 - 67) < 2)
    {
LABEL_5:
      BOOL v4 = (*(_DWORD *)(a1 + 856) & 0xFFFFFFFE) == 6;
      goto LABEL_9;
    }

    if ((v3 - 69) >= 2)
    {
      goto LABEL_5;
    }
  }

  BOOL v4 = *(_DWORD *)(a1 + 856) == 2;
LABEL_9:
  if (v4) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
LABEL_12:
  int v5 = sub_1004AFFDC(a1, v2);
  uint64_t v6 = (os_log_s *)qword_1008F7570;
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100685B94();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 856);
    v8[0] = 67109376;
    v8[1] = v7;
    __int16 v9 = 1024;
    int v10 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Device orientation set to %d, setting diversity antenna to %d",  (uint8_t *)v8,  0xEu);
  }

uint64_t sub_1004B028C(uint64_t a1, unsigned __int16 *a2, int a3)
{
  uint64_t v5 = sub_1002E6E00();
  if (a3)
  {
    uint64_t v6 = sub_1002E6E00();
    a3 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 344LL))(v6);
  }

  uint64_t v7 = *a2;
  __int16 v18 = 0;
  uint64_t v17 = 0LL;
  __int16 v12 = 10;
  uint64_t v8 = sub_1002E6E9C();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void, __int16 *, uint64_t *))(*(void *)v8 + 896LL))( v8,  v7,  3LL,  a3,  0LL,  0LL,  &v12,  &v17);
  int v10 = (os_log_s *)qword_1008F7570;
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100685C04();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 67109376;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Diversity log mode %d set on handle %d",  buf,  0xEu);
  }

  return v9;
}

uint64_t *sub_1004B03E8( uint64_t a1, unint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, _DWORD *a6, uint64_t a7)
{
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_10089BC50);
  }
  __n128 v23 = 0uLL;
  int v24 = 0;
  uint64_t result = (uint64_t *)sub_10045D910((uint64_t)off_1008D9028, a2, &v23);
  if ((_DWORD)result)
  {
    unsigned __int32 v16 = v23.n128_u32[0];
    unsigned __int32 v15 = v23.n128_u32[1];
    unsigned __int32 v17 = v23.n128_u32[3];
    *(_DWORD *)(a1 + 1036) = v23.n128_u32[1];
    *(_DWORD *)(a1 + 10sub_100242E28(v1 + 40) = v16;
    *(_DWORD *)(a1 + 1056) = v17;
    *a3 = v15 - *(_DWORD *)(a1 + 1048);
    *a4 = v16 - *(_DWORD *)(a1 + 1052);
    *a6 = v17 - *(_DWORD *)(a1 + 1060);
    int v18 = *(_DWORD *)(a1 + 1044);
    if (v18 == 128)
    {
      unsigned int v19 = *a4;
      if (*a4 <= 0x41)
      {
        int v20 = 66;
        goto LABEL_10;
      }
    }

    else if (v18 == 256)
    {
      unsigned int v19 = *a4;
      if (*a4 <= 0x84)
      {
        int v20 = 133;
LABEL_10:
        *a5 = v20 - v19;
      }
    }

    *(_DWORD *)(a1 + 104_Block_object_dispose(va, 8) = v15;
    *(_DWORD *)(a1 + 1052) = v16;
    *(_DWORD *)(a1 + 1060) = v17;
    uint64_t v21 = sub_1002E6E00();
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    if ((_DWORD)result)
    {
      int v22 = *(_DWORD *)(a1 + 1044);
    }
  }

  return result;
}

uint64_t *sub_1004B0558( uint64_t *result, unint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8)
{
  unint64_t v35 = a2;
  if (a4 | a3 | a5)
  {
    int v14 = result;
    int v15 = *(char *)(a8 + 6);
    unsigned int v16 = v15 < -90;
    if (v15 >= -90) {
      int v17 = 1;
    }
    else {
      int v17 = 2;
    }
    if (v16 <= 1) {
      int v18 = 15;
    }
    else {
      int v18 = 45;
    }
    unsigned int v19 = v18 * (a5 + a4) / 0x64;
    if (v19 < a3
      || (a4 / 0x14 >= a5 ? (int v20 = 1) : (int v20 = 2),
          a6 ? (BOOL v21 = v20) : (BOOL v21 = a4 / 0x14 < a5),
          v19 < *(unsigned __int16 *)(a8 + 28)))
    {
      BOOL v21 = 1;
    }

    HIWORD(v22) = 17096;
    LOWORD(v22) = *(_WORD *)(a8 + 70);
    float v23 = (float)((float)(*(unsigned __int16 *)(a8 + 64)
                        + *(unsigned __int16 *)(a8 + 52)
                        + *(unsigned __int16 *)(a8 + 74))
                * 100.0)
        / (float)v22;
    if (v23 <= 20.0)
    {
      if (v23 < 5.0) {
        *((_BYTE *)result + 36_Block_object_dispose(va, 8) = 0;
      }
    }

    else
    {
      unsigned int v24 = ++*((_BYTE *)result + 368);
      if (v24 >= 0x3C) {
        sub_1004A1F48((uint64_t)result, a2, 60LL);
      }
    }

    uint64_t v25 = (uint64_t **)(v14 + 24);
    if (!v21)
    {
      *(void *)__int128 buf = &v35;
      BOOL v34 = v25;
LABEL_36:
      uint64_t result = sub_100029574(v34, &v35, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
      *(_DWORD *)(result[5] + 100) = 0;
      return result;
    }

    *(void *)__int128 buf = &v35;
    uint64_t v26 = sub_100029574(v25, &v35, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
    ++*(_DWORD *)(v26[5] + 100);
    int v27 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)__int128 buf = &v35;
      int v28 = *(_DWORD *)(sub_100029574(v25, &v35, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 100);
      *(void *)__int128 buf = &v35;
      int v29 = *(_DWORD *)(sub_100029574(v25, &v35, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 96);
      int v30 = *(unsigned __int8 *)(a7 + 16);
      int v31 = *(unsigned __int16 *)(a8 + 28);
      *(_DWORD *)__int128 buf = 67110912;
      *(_DWORD *)&uint8_t buf[4] = a3;
      __int16 v37 = 1024;
      unsigned int v38 = a4;
      __int16 v39 = 1024;
      unsigned int v40 = a5;
      __int16 v41 = 1024;
      int v42 = a6;
      __int16 v43 = 1024;
      int v44 = v28;
      __int16 v45 = 1024;
      int v46 = v29;
      __int16 v47 = 1024;
      int v48 = v30;
      __int16 v49 = 1024;
      int v50 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "AudioQuality PLC %u,RxCnt %u,Miss %u,LengthErr %u,Credit %u, total credit:%u,isHDR:%u,NAK %u",  buf,  0x32u);
    }

    *(void *)__int128 buf = &v35;
    uint64_t result = sub_100029574(v25, &v35, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
    if (*(_DWORD *)(result[5] + 100) >= 0xAu)
    {
      int v32 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "AudioQuality need to trigger banner",  buf,  2u);
      }

      *(void *)__int128 buf = &v35;
      uint64_t v33 = sub_100029574(v25, &v35, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
      ++*(_DWORD *)(v33[5] + 96);
      *(void *)__int128 buf = &v35;
      BOOL v34 = v25;
      goto LABEL_36;
    }
  }

  return result;
}

void sub_1004B091C(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v8 = (const __CFString *)*((void *)&off_10089BE08 + (char)a3);
    }
    *(_DWORD *)__int128 buf = 138412290;
    unint64_t v35 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "statedump: ----------Use Case-----------------%@ Target ePA Tx Power,Ant0(Ant1)----------------Power Caps----------------",  buf,  0xCu);
  }

  if (a2)
  {
    int v9 = 0;
    int v10 = 4 * a3 + 4;
    int v11 = v10 + a4;
    int v29 = a4 + 23;
    uint64_t v12 = v10;
    do
    {
      uint64_t v13 = 0LL;
      int v32 = 0;
      int v33 = 0;
      char v14 = 1;
      do
      {
        char v15 = v14;
        unsigned int v16 = *(unsigned __int8 *)(a1 + 384 + (v12 | (2 * v13)));
        buf[v13 - 4] = v16;
        unsigned int v17 = *(unsigned __int8 *)(a1 + 384 + v11 + 2 * (int)v13);
        *((_BYTE *)&v32 + v13 + 2) = v17;
        unsigned int v18 = *(unsigned __int8 *)(a1 + 384 + (v29 + v9 + v13 * a2));
        *((_BYTE *)&v32 + v13) = v18;
        if (v16 >= v18) {
          unsigned int v16 = v18;
        }
        if (v17 >= v16) {
          LOBYTE(v17) = v16;
        }
        buf[v13 - 2] = v17;
        uint64_t v13 = 1LL;
        char v14 = 0;
      }

      while ((v15 & 1) != 0);
      id v19 = sub_1004AD6E4(a1, v9);
      int v31 = (__CFString *)objc_claimAutoreleasedReturnValue(v19);
      int v20 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v22) = HIBYTE(v33);
        LOBYTE(v21) = BYTE2(v33);
        LOBYTE(v24) = BYTE1(v33);
        LOBYTE(v23) = v33;
        LOBYTE(v26) = HIBYTE(v32);
        LOBYTE(v25) = BYTE2(v32);
        LOBYTE(v2_Block_object_dispose(va, 8) = BYTE1(v32);
        LOBYTE(v27) = v32;
        *(_DWORD *)__int128 buf = 138414338;
        unint64_t v35 = v31;
        __int16 v36 = 2048;
        double v37 = (double)v21 * 0.25;
        __int16 v38 = 2048;
        double v39 = (double)v22 * 0.25;
        __int16 v40 = 2048;
        double v41 = (double)v23 * 0.25;
        __int16 v42 = 2048;
        double v43 = (double)v24 * 0.25;
        __int16 v44 = 2048;
        double v45 = (double)v25 * 0.25;
        __int16 v46 = 2048;
        double v47 = (double)v26 * 0.25;
        __int16 v48 = 2048;
        double v49 = (double)v27 * 0.25;
        __int16 v50 = 2048;
        double v51 = (double)v28 * 0.25;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "statedump: %@          %.2f(%.2f) dBm          [%.2f(%.2f),%.2f(%.2f),%.2f(%.2f)]",  buf,  0x5Cu);
      }

      ++v9;
    }

    while (v9 != a2);
  }

void sub_1004B0BE8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump: -------------------------------Link------------------Target iPA Tx Power,Ant0(Ant1)-------------------------",  buf,  2u);
  }

  if (a2)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = a3;
    uint64_t v10 = a2;
    int v11 = (unsigned __int8 *)(a1 + 389);
    do
    {
      else {
        unsigned int v12 = *(v11 - 2);
      }
      else {
        unsigned int v13 = *v11;
      }
      char v14 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        char v15 = &stru_1008A57D8;
        *(_DWORD *)__int128 buf = 138412802;
        unsigned int v17 = v15;
        __int16 v18 = 2048;
        double v19 = (double)v12 * 0.25;
        __int16 v20 = 2048;
        double v21 = (double)v13 * 0.25;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "statedump:                              %5@                         %4.2f(%4.2f) dBm",  buf,  0x20u);
      }

      v11 += 4;
      ++v8;
      v7 += 0x100000000000000LL;
    }

    while (v10 != v8);
  }

void sub_1004B0DA4(uint64_t a1)
{
  int v2 = *(_DWORD *)(sub_1002E6E9C() + 708);
  if ((v2 - 1) > 0x7CE)
  {
    if ((v2 - 2000) <= 0x7CF && *(_WORD *)(a1 + 812) && *(_WORD *)(a1 + 814) && *(_WORD *)(a1 + 816))
    {
      sub_1004ADCEC((unsigned __int8 *)a1, v2);
      sub_1004AD838((unsigned __int8 *)a1, v2);
    }
  }

  else
  {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 810);
    if (*(_WORD *)(a1 + 810))
    {
      if (v3 <= 0xD3) {
        int v4 = 8;
      }
      else {
        int v4 = 12;
      }
      if (v3 <= 0xD3) {
        unsigned int v5 = 3;
      }
      else {
        unsigned int v5 = 5;
      }
      uint64_t v6 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        v7[0] = 67109120;
        v7[1] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump: ===================================== Bluetooth Tx Power Targets (CC%d) ====================================",  (uint8_t *)v7,  8u);
      }

      sub_1004B091C(a1, v4, 1, 23);
      if (v3 >= 0xD4)
      {
        sub_1004B091C(a1, 12, 3, 23);
        sub_1004B091C(a1, 12, 4, 23);
      }

      sub_1004B0BE8(a1, v5, 0x17u);
    }
  }

void sub_1004B0F4C(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------- Audio Link Manager -------------------",  v3,  2u);
  }

  sub_1004B0DA4(a1);
}

void sub_1004B0FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  int v4 = off_1008F1140;
  int v11 = off_1008F1140;
  if (!off_1008F1140)
  {
    unsigned int v5 = sub_1004B6B64();
    int v4 = dlsym(v5, "tailspin_kdbg_filter_subclass_set");
    void v9[3] = (uint64_t)v4;
    off_1008F1140 = v4;
  }

  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(a1, 1LL, a2, 1LL);
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void BT::soft_tailspin_kdbg_filter_subclass_set(tailspin_config_t, uint8_t, uint8_t, BOOL)"));
    [v6 handleFailureInFunction:@"AudioLinkManager.mm" lineNumber:112 description:@"%s" dlerror()];

    __break(1u);
  }

void sub_1004B10BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1004B10EC(uint64_t a1)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  int v2 = off_1008F1148;
  uint64_t v9 = off_1008F1148;
  if (!off_1008F1148)
  {
    unsigned int v3 = sub_1004B6B64();
    int v2 = dlsym(v3, "tailspin_config_apply_sync");
    v7[3] = (uint64_t)v2;
    off_1008F1148 = v2;
  }

  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(uint64_t))v2)(a1);
  }

  else
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "BOOL BT::soft_tailspin_config_apply_sync(const tailspin_config_t)"));
    [v4 handleFailureInFunction:v5 file:@"AudioLinkManager.mm" lineNumber:124 description:@"%s" dlerror()];

    __break(1u);
  }

void sub_1004B11DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1004B120C(uint64_t a1)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  int v2 = off_1008F1150;
  uint64_t v9 = off_1008F1150;
  if (!off_1008F1150)
  {
    unsigned int v3 = sub_1004B6B64();
    int v2 = dlsym(v3, "tailspin_config_free");
    v7[3] = (uint64_t)v2;
    off_1008F1150 = v2;
  }

  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(uint64_t))v2)(a1);
  }

  else
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void BT::soft_tailspin_config_free(tailspin_config_t)"));
    [v4 handleFailureInFunction:v5 file:@"AudioLinkManager.mm" lineNumber:118 description:@"%s" dlerror()];

    __break(1u);
  }

void sub_1004B12FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1004B132C(uint64_t a1, int a2)
{
  int v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004B1388;
  v3[3] = &unk_10087EB68;
  void v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1004B1388(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(v2 + 856) != v3)
  {
    *(_DWORD *)(v2 + 856) = v3;
    sub_1004B13AC(v2);
  }

void sub_1004B13AC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 328))
  {
    uint64_t v2 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 152LL))(v2))
    {
      sub_10049C324(a1, 0);
    }

    else
    {
      uint64_t v4 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 144LL))(v4))
      {
        if (*(void *)(a1 + 208))
        {
          unsigned int v5 = *(void **)(a1 + 192);
          if (v5 != (void *)(a1 + 200))
          {
            char v6 = 0;
            while (1)
            {
              uint64_t v7 = v5[5];
              int v8 = *(unsigned __int8 *)(v7 + 72);
              BOOL v9 = *(_BYTE *)(v7 + 72) != 0;
              if (v8) {
                break;
              }
              uint64_t v10 = (void *)v5[1];
              if (v10)
              {
                do
                {
                  int v11 = v10;
                  uint64_t v10 = (void *)*v10;
                }

                while (v10);
              }

              else
              {
                do
                {
                  int v11 = (void *)v5[2];
                  BOOL v12 = *v11 == (void)v5;
                  unsigned int v5 = v11;
                }

                while (!v12);
              }

              v6 |= v9;
              unsigned int v5 = v11;
              if (v11 == (void *)(a1 + 200))
              {
                if ((v6 & 1) == 0) {
                  return;
                }
                break;
              }
            }

            if (*(_DWORD *)(a1 + 848) != 3)
            {
              uint64_t v13 = sub_1002E6E00();
            }
          }
        }
      }
    }
  }

  else
  {
    int v3 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Stack is not ready, cannot update device orientation",  v14,  2u);
    }
  }

void sub_1004B1504(uint64_t a1, int a2)
{
  uint64_t v2 = a1 - 64;
  int v3 = *(dispatch_queue_s **)(a1 + 176);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1004B1388;
  v4[3] = &unk_10087EB68;
  v4[4] = v2;
  int v5 = a2;
  dispatch_async(v3, v4);
}

uint64_t sub_1004B1560(uint64_t a1)
{
  return sub_10049C324(a1, 1);
}

uint64_t sub_1004B1568(uint64_t a1)
{
  return sub_10049C324(a1 - 136, 1);
}

uint64_t sub_1004B1574(uint64_t a1)
{
  return sub_10049C324(a1, 0);
}

uint64_t sub_1004B157C(uint64_t a1)
{
  return sub_10049C324(a1 - 136, 0);
}

uint64_t sub_1004B1588(uint64_t a1, unint64_t a2)
{
  unint64_t v28 = a2;
  __p[0] = &v28;
  int v3 = sub_100029574((uint64_t **)(a1 + 192), &v28, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
  uint64_t v4 = *(void *)(a1 + 1096);
  if (v4)
  {
    unsigned int v5 = *(unsigned __int16 *)(v3[5] + 84);
    char v6 = (void *)(a1 + 1096);
    uint64_t v7 = a1 + 1096;
    do
    {
      unsigned int v8 = *(unsigned __int16 *)(v4 + 32);
      BOOL v9 = v8 >= v5;
      if (v8 >= v5) {
        uint64_t v10 = (uint64_t *)v4;
      }
      else {
        uint64_t v10 = (uint64_t *)(v4 + 8);
      }
      if (v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }

    while (*v10);
    if ((void *)v7 != v6 && v5 >= *(unsigned __int16 *)(v7 + 32))
    {
      int v11 = *(void **)(a1 + 1088);
      if (v11 != v6)
      {
        char v12 = 0;
        while (1)
        {
          if (qword_1008D5F50 != -1) {
            dispatch_once(&qword_1008D5F50, &stru_10089BD30);
          }
          uint64_t v13 = *(void *)(v11[5] + 8LL);
          __int16 v14 = *(_WORD *)(v13 + 4);
          LODWORD(__p[0]) = *(_DWORD *)v13;
          WORD2(__p[0]) = v14;
          char v15 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
          unsigned int v16 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003D0100((uint64_t)v15, (uint64_t)__p);
            int v17 = v27;
            __int16 v18 = (void **)__p[0];
            int v19 = sub_1003DF9F4((uint64_t)v15);
            *(_DWORD *)__int128 buf = 136315394;
            __int16 v20 = __p;
            if (v17 < 0) {
              __int16 v20 = v18;
            }
            int v30 = v20;
            __int16 v31 = 1024;
            int v32 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter %s spatial allowed %d",  buf,  0x12u);
            if (v27 < 0) {
              operator delete(__p[0]);
            }
          }

          int v21 = sub_1003DF9F4((uint64_t)v15);
          if (v21 != 1) {
            break;
          }
          unint64_t v22 = (void *)v11[1];
          if (v22)
          {
            do
            {
              unint64_t v23 = v22;
              unint64_t v22 = (void *)*v22;
            }

            while (v22);
          }

          else
          {
            do
            {
              unint64_t v23 = (void *)v11[2];
              BOOL v24 = *v23 == (void)v11;
              int v11 = v23;
            }

            while (!v24);
          }

          v12 |= v21 == 1;
          int v11 = v23;
          if (v23 == v6) {
            return v12 & 1;
          }
        }
      }
    }
  }

  char v12 = 0;
  return v12 & 1;
}

void sub_1004B17C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B17EC(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1112);
  if (v2)
  {
    if (a2)
    {
      uint64_t v4 = sub_1002E8D54();
      (*(void (**)(uint64_t, void))(*(void *)v4 + 152LL))(v4, *(void *)(a1 + 216));
      uint64_t v5 = sub_1002E8D54();
      sub_1003CBF90(v5 + 728, a1 + 32);
      int v6 = **(unsigned __int8 **)(a1 + 216);
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v8 = *(void *)(a1 + 1112);
      if (v6)
      {
        *(double *)(v8 + 16) = Current;
        *(void *)(v8 + 24) = 0LL;
      }

      else
      {
        *(double *)(v8 + 24) = Current;
        *(void *)(v8 + 16) = 0LL;
      }
    }

    else
    {
      int v9 = **(unsigned __int8 **)(a1 + 216);
      double v10 = CFAbsoluteTimeGetCurrent();
      uint64_t v11 = 16LL;
      if (!v9) {
        uint64_t v11 = 24LL;
      }
      *(_DWORD *)(v2 + 48) += (v10 - *(double *)(*(void *)(a1 + 1112) + v11));
      uint64_t v12 = sub_1002E8D54();
      sub_10024E060(v12 + 728, a1 + 32);
      **(_BYTE **)(a1 + 216) = 1;
    }
  }

BOOL sub_1004B18C0(void *a1, uint64_t a2, void *a3)
{
  unint64_t v3 = a1[138];
  if (v3 < 2)
  {
    uint64_t v7 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter - getWirelessSplitterAddresses, disabled",  buf,  2u);
    }
  }

  else
  {
    uint64_t v5 = (void *)a1[137];
    if (v5)
    {
      do
      {
        int v6 = v5;
        uint64_t v5 = (void *)v5[1];
      }

      while (v5);
    }

    else
    {
      uint64_t v8 = a1 + 137;
      do
      {
        int v6 = (void *)v8[2];
        BOOL v9 = *v6 == (void)v8;
        uint64_t v8 = v6;
      }

      while (v9);
    }

    uint64_t v10 = v6[5];
    uint64_t v11 = *(int **)(*(void *)(a1[136] + 40LL) + 8LL);
    __int16 v12 = *((_WORD *)v11 + 2);
    int v27 = *v11;
    __int16 v28 = v12;
    uint64_t v13 = *(void *)(v10 + 8);
    __int16 v14 = *(_WORD *)(v13 + 4);
    LODWORD(v13) = *(_DWORD *)v13;
    int v25 = v13;
    __int16 v26 = v14;
    *(_DWORD *)a2 = v27;
    *(_WORD *)(a2 + 4) = v12;
    *(_DWORD *)(a2 + 6) = v13;
    *(_WORD *)(a2 + 10) = v14;
    char v15 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4((unsigned __int8 *)&v27, buf);
      int v16 = v24;
      int v17 = *(uint8_t **)buf;
      sub_1003FE1B4((unsigned __int8 *)&v25, __p);
      __int16 v18 = buf;
      if (v16 < 0) {
        __int16 v18 = v17;
      }
      if (v22 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)int v29 = 136315394;
      int v30 = v18;
      __int16 v31 = 2080;
      int v32 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter - getWirelessSplitterAddresses, enabled user1: %s user2: %s",  v29,  0x16u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
    }

    *a3 = 2LL;
  }

  return v3 > 1;
}

void sub_1004B1AB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B1AD8(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t v2 = *(void **)(a1 + 1088);
  unint64_t v3 = (void *)(a1 + 1096);
  if (v2 != (void *)(a1 + 1096))
  {
    uint64_t v5 = 0LL;
    int v6 = a2 + 2;
    do
    {
      __int16 v7 = *((_WORD *)v2 + 16);
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v8 = *a2;
        uint64_t v9 = v5 - *a2;
        if (v9 <= -3) {
          abort();
        }
        uint64_t v10 = v9 >> 1;
        unint64_t v11 = *v6 - (void)v8;
        if (v11 <= (v9 >> 1) + 1) {
          uint64_t v12 = v10 + 1;
        }
        else {
          uint64_t v12 = *v6 - (void)v8;
        }
        if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v13 = v12;
        }
        if (v13)
        {
          __int16 v14 = (char *)sub_10024EF1C((uint64_t)v6, v13);
          uint64_t v8 = *a2;
          uint64_t v5 = a2[1];
        }

        else
        {
          __int16 v14 = 0LL;
        }

        char v15 = &v14[2 * v10];
        *(_WORD *)char v15 = v7;
        int v16 = v15 + 2;
        while (v5 != v8)
        {
          __int16 v17 = *((_WORD *)v5 - 1);
          v5 -= 2;
          *((_WORD *)v15 - 1) = v17;
          v15 -= 2;
        }

        *a2 = v15;
        a2[1] = v16;
        a2[2] = &v14[2 * v13];
        if (v8) {
          operator delete(v8);
        }
        uint64_t v5 = v16;
      }

      else
      {
        *(_WORD *)uint64_t v5 = v7;
        v5 += 2;
      }

      a2[1] = v5;
      __int16 v18 = (void *)v2[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          __int16 v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          int v19 = (void *)v2[2];
          BOOL v20 = *v19 == (void)v2;
          uint64_t v2 = v19;
        }

        while (!v20);
      }

      uint64_t v2 = v19;
    }

    while (v19 != v3);
  }

void sub_1004B1C10(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1004B1C30(uint64_t a1)
{
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_10089BC50);
  }
  uint64_t v2 = sub_10045D7CC((uint64_t)off_1008D9028, *(void *)(a1 + 40));
  if (v2)
  {
    uint64_t v3 = v2;
    char v14 = 0;
    sub_100242CA4(&v14);
    unsigned int v4 = sub_1002073A4(v3 + 400);
    int v5 = sub_1000F0874(v4, *(_BYTE *)(a1 + 48) == 0);
    sub_100242CD0(&v14);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5 != 0;
    int v6 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a1 + 48);
      sub_1003CF00C(*(void *)(a1 + 40), __p);
      uint64_t v8 = "disabled";
      if (!v7) {
        uint64_t v8 = "re-enabled";
      }
      uint64_t v9 = "successfully";
      if (v5) {
        uint64_t v9 = "not successfully";
      }
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)&uint8_t buf[4] = v9;
      if (v16 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = *(_BYTE **)__p;
      }
      __int16 v18 = 2080;
      int v19 = v8;
      __int16 v20 = 2082;
      int v21 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter %s %s inband ringtone for phone call support for device %{public}s",  buf,  0x20u);
      if (v16 < 0) {
        operator delete(*(void **)__p);
      }
    }

    sub_100242CD8(&v14);
  }

  else
  {
    unint64_t v11 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      if (v12)
      {
        sub_1003CF00C(v12, buf);
        if (v20 >= 0) {
          uint64_t v13 = buf;
        }
        else {
          uint64_t v13 = *(_BYTE **)buf;
        }
        *(_DWORD *)__int128 __p = 136446210;
        *(void *)&__p[4] = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter looks like HFP Service for device %{public}s is not available",  __p,  0xCu);
        if (SHIBYTE(v20) < 0) {
          operator delete(*(void **)buf);
        }
      }

      else
      {
        *(_DWORD *)__int128 __p = 136446210;
        *(void *)&__p[4] = "NULL";
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter looks like HFP Service for device %{public}s is not available",  __p,  0xCu);
      }
    }
  }

void sub_1004B1EA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1004B1EC8(uint64_t a1)
{
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004B1F20;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1004B1F20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 334))
  {
    *(CFAbsoluteTime *)(v1 + 376) = CFAbsoluteTimeGetCurrent();
    *(_BYTE *)(v1 + 334) = 1;
  }

void sub_1004B1F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004B1FAC;
  v3[3] = &unk_10087F8E0;
  void v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t *sub_1004B1FAC(uint64_t *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 333) && *(_BYTE *)(v1 + 334))
  {
    uint64_t v3 = (unint64_t *)(result + 5);
    unint64_t v2 = result[5];
    if (v2)
    {
      unsigned int v4 = *(void **)(v1 + 200);
      if (v4)
      {
        int v5 = (uint64_t **)(v1 + 192);
        int v6 = (void *)(v1 + 200);
        do
        {
          unint64_t v7 = v4[4];
          BOOL v8 = v7 >= v2;
          if (v7 >= v2) {
            uint64_t v9 = v4;
          }
          else {
            uint64_t v9 = v4 + 1;
          }
          if (v8) {
            int v6 = v4;
          }
          unsigned int v4 = (void *)*v9;
        }

        while (*v9);
        if (v6 != (void *)(v1 + 200) && v2 >= v6[4])
        {
          uint64_t v13 = (unint64_t *)(result + 5);
          uint64_t result = sub_100029574(v5, v3, (uint64_t)&unk_1006C2518, (uint64_t **)&v13);
          if (*(void *)(result[5] + 24))
          {
            uint64_t v10 = *(void *)(v1 + 376);
            uint64_t v13 = v3;
            *(void *)(*(void *)(sub_100029574(v5, v3, (uint64_t)&unk_1006C2518, (uint64_t **)&v13)[5] + 24) + 32LL) = v10;
            double Current = CFAbsoluteTimeGetCurrent();
            uint64_t v13 = v3;
            double v12 = Current
            uint64_t v13 = v3;
            uint64_t result = sub_100029574(v5, v3, (uint64_t)&unk_1006C2518, (uint64_t **)&v13);
            *(double *)(*(void *)(result[5] + 24) + 104LL) = v12;
          }
        }
      }
    }

    *(_BYTE *)(v1 + 333) = 1;
  }

  return result;
}

void sub_1004B2104(uint64_t a1, uint64_t a2, int a3, char a4)
{
  unsigned int v4 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004B2164;
  block[3] = &unk_100889658;
  void block[4] = a1;
  void block[5] = a2;
  char v7 = a4;
  int v6 = a3;
  dispatch_async(v4, block);
}

uint64_t *sub_1004B2164(uint64_t *result)
{
  unint64_t v2 = (unint64_t *)(result + 5);
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[4];
    char v7 = *(void **)(v4 + 200);
    uint64_t v5 = v4 + 200;
    int v6 = v7;
    if (v7)
    {
      BOOL v8 = (uint64_t **)(v5 - 8);
      uint64_t v9 = (void *)v5;
      do
      {
        unint64_t v10 = v6[4];
        BOOL v11 = v10 >= v1;
        if (v10 >= v1) {
          double v12 = v6;
        }
        else {
          double v12 = v6 + 1;
        }
        if (v11) {
          uint64_t v9 = v6;
        }
        int v6 = (void *)*v12;
      }

      while (*v12);
      if (v9 != (void *)v5 && v1 >= v9[4])
      {
        __int16 v18 = (unint64_t *)(result + 5);
        uint64_t result = sub_100029574(v8, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v18);
        if (*(void *)result[5])
        {
          __int16 v18 = v2;
          uint64_t v13 = sub_100029574(v8, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v18);
          ++*(void *)(*(void *)v13[5] + 288LL);
          __int16 v18 = v2;
          char v14 = sub_100029574(v8, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v18);
          ++*(void *)(*(void *)v14[5] + 280LL);
          uint64_t v15 = *((char *)v3 + 52);
          __int16 v18 = v2;
          char v16 = sub_100029574(v8, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v18);
          *(void *)(*(void *)v16[5] + 264LL) += v15;
          int v17 = *((_DWORD *)v3 + 12);
          __int16 v18 = v2;
          uint64_t result = sub_100029574(v8, v2, (uint64_t)&unk_1006C2518, (uint64_t **)&v18);
          *(_DWORD *)(*(void *)result[5] + 272LL) += v17;
        }
      }
    }
  }

  return result;
}

void sub_1004B22E4(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 240);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1004B2344;
  v6[3] = &unk_100890DC8;
  v6[4] = a1;
  void v6[5] = a2;
  int v7 = a3;
  int v8 = a4;
  int v9 = a5;
  dispatch_async(v5, v6);
}

uint64_t *sub_1004B2344(uint64_t *result)
{
  unint64_t v2 = result + 5;
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v3 = (int *)result;
    uint64_t v4 = result[4];
    int v7 = *(void **)(v4 + 200);
    uint64_t v5 = v4 + 200;
    int v6 = v7;
    if (v7)
    {
      int v8 = (uint64_t **)(v5 - 8);
      int v9 = (void *)v5;
      do
      {
        unint64_t v10 = v6[4];
        BOOL v11 = v10 >= v1;
        if (v10 >= v1) {
          double v12 = v6;
        }
        else {
          double v12 = v6 + 1;
        }
        if (v11) {
          int v9 = v6;
        }
        int v6 = (void *)*v12;
      }

      while (*v12);
      if (v9 != (void *)v5 && v1 >= v9[4])
      {
        __int16 v20 = result + 5;
        if (*(void *)sub_100029574(v8, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v20)[5])
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          __int16 v20 = v2;
          *(CFAbsoluteTime *)(*(void *)sub_100029574(v8, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v20)[5]
                            + 200LL) = Current;
          CFAbsoluteTime v14 = CFAbsoluteTimeGetCurrent();
          __int16 v20 = v2;
          *(CFAbsoluteTime *)(*(void *)sub_100029574(v8, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v20)[5]
                            + 216LL) = v14;
        }

        __int16 v20 = v2;
        uint64_t result = sub_100029574(v8, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v20);
        if (*(void *)(result[5] + 24))
        {
          CFAbsoluteTime v15 = CFAbsoluteTimeGetCurrent();
          __int16 v20 = v2;
          *(CFAbsoluteTime *)(*(void *)(sub_100029574(v8, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v20)[5]
                                        + 24)
                            + 16LL) = v15;
          CFAbsoluteTime v16 = CFAbsoluteTimeGetCurrent();
          __int16 v20 = v2;
          *(CFAbsoluteTime *)(*(void *)(sub_100029574(v8, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v20)[5]
                                        + 24)
                            + 40LL) = v16;
          uint64_t v17 = v3[12];
          __int16 v20 = v2;
          uint64_t v18 = v3[13];
          __int16 v20 = v2;
          int v19 = v3[14];
          __int16 v20 = v2;
          uint64_t result = sub_100029574(v8, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v20);
          *(_DWORD *)(*(void *)(result[5] + 24) + 124LL) = v19;
        }
      }
    }
  }

  return result;
}

void sub_1004B257C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004B25D8;
  block[3] = &unk_10087F900;
  void block[4] = a1;
  void block[5] = a2;
  int v5 = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_1004B25D8(uint64_t *result)
{
  unint64_t v2 = result + 5;
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v3 = (uint64_t *)result[4];
    uint64_t v4 = (void *)v3[25];
    if (v4)
    {
      int v5 = result;
      int v6 = (uint64_t **)(v3 + 24);
      int v7 = v3 + 25;
      do
      {
        unint64_t v8 = v4[4];
        BOOL v9 = v8 >= v1;
        if (v8 >= v1) {
          unint64_t v10 = v4;
        }
        else {
          unint64_t v10 = v4 + 1;
        }
        if (v9) {
          int v7 = v4;
        }
        uint64_t v4 = (void *)*v10;
      }

      while (*v10);
      if (v7 != v3 + 25 && v1 >= v7[4])
      {
        __int16 v28 = result + 5;
        if (*(void *)sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5])
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          __int16 v28 = v2;
          *(CFAbsoluteTime *)(*(void *)sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5]
                            + 208LL) = Current;
          CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent();
          __int16 v28 = v2;
          *(CFAbsoluteTime *)(*(void *)sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5]
                            + 224LL) = v12;
          __int16 v28 = v2;
          double v13 = *(double *)(*(void *)sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5]
                          + 208LL);
          __int16 v28 = v2;
          double v14 = v13
              - *(double *)(*(void *)sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5]
                          + 200LL);
          __int16 v28 = v2;
          uint64_t v15 = *(void *)sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5];
          LODWORD(v16) = *(_DWORD *)(v15 + 232);
          *(_DWORD *)(v15 + 232) = (v14 + (double)v16);
          __int16 v28 = v2;
          double v17 = *(double *)(*(void *)sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5]
                          + 224LL);
          __int16 v28 = v2;
          double v18 = v17
              - *(double *)(*(void *)sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5]
                          + 216LL);
          __int16 v28 = v2;
          uint64_t v19 = *(void *)sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5];
          LODWORD(v20) = *(_DWORD *)(v19 + 248);
          *(_DWORD *)(v19 + 24_Block_object_dispose(va, 8) = (v18 + (double)v20);
        }

        __int16 v28 = v2;
        uint64_t result = sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28);
        if (*(void *)(result[5] + 24))
        {
          CFAbsoluteTime v21 = CFAbsoluteTimeGetCurrent();
          __int16 v28 = v2;
          *(CFAbsoluteTime *)(*(void *)(sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5]
                                        + 24)
                            + 24LL) = v21;
          CFAbsoluteTime v22 = CFAbsoluteTimeGetCurrent();
          __int16 v28 = v2;
          *(CFAbsoluteTime *)(*(void *)(sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5]
                                        + 24)
                            + 48LL) = v22;
          __int16 v28 = v2;
          __int16 v28 = v2;
          unsigned int v24 = (v23
                             - *(double *)(*(void *)(sub_100029574( v6,  (unint64_t *)v2,  (uint64_t)&unk_1006C2518,  &v28)[5] + 24)
                                         + 16LL));
          __int16 v28 = v2;
          *(_DWORD *)(*(void *)(sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5] + 24) + 8LL) = v24;
          __int16 v28 = v2;
          __int16 v28 = v2;
          unsigned int v26 = (v25
                             - *(double *)(*(void *)(sub_100029574( v6,  (unint64_t *)v2,  (uint64_t)&unk_1006C2518,  &v28)[5] + 24)
                                         + 40LL));
          __int16 v28 = v2;
          *(_DWORD *)(*(void *)(sub_100029574(v6, (unint64_t *)v2, (uint64_t)&unk_1006C2518, &v28)[5] + 24) + 4LL) = v26;
          int v27 = *((_DWORD *)v5 + 12);
          __int16 v28 = v2;
          return sub_1004B29E0(v3, v5[5]);
        }
      }
    }
  }

  return result;
}

uint64_t *sub_1004B29E0(uint64_t *result, unint64_t a2)
{
  uint64_t v14 = a2;
  if (a2)
  {
    unint64_t v2 = result;
    uint64_t v3 = (void *)result[25];
    if (v3)
    {
      uint64_t v4 = (uint64_t **)(result + 24);
      int v5 = result + 25;
      do
      {
        unint64_t v6 = v3[4];
        BOOL v7 = v6 >= a2;
        if (v6 >= a2) {
          unint64_t v8 = v3;
        }
        else {
          unint64_t v8 = v3 + 1;
        }
        if (v7) {
          int v5 = v3;
        }
        uint64_t v3 = (void *)*v8;
      }

      while (*v8);
      if (v5 != result + 25 && v5[4] <= a2)
      {
        uint64_t v15 = &v14;
        uint64_t result = sub_100029574(v4, (unint64_t *)&v14, (uint64_t)&unk_1006C2518, &v15);
        if (*(void *)(result[5] + 24))
        {
          uint64_t v12 = 0LL;
          uint64_t v13 = 0LL;
          sub_1003D55EC(v14, (_DWORD *)&v13 + 1, &v13, &v12, (_DWORD *)&v12 + 1);
          int v9 = v12;
          uint64_t v15 = &v14;
          uint64_t v10 = sub_1002E8D94();
          uint64_t v15 = &v14;
          BOOL v11 = sub_100029574(v4, (unint64_t *)&v14, (uint64_t)&unk_1006C2518, &v15);
          (*(void (**)(uint64_t, void))(*(void *)v10 + 72LL))(v10, *(void *)(v11[5] + 24));
          uint64_t v15 = &v14;
          uint64_t v15 = &v14;
          uint64_t v15 = &v14;
          uint64_t result = sub_100029574(v4, (unint64_t *)&v14, (uint64_t)&unk_1006C2518, &v15);
          *(_DWORD *)(*(void *)(result[5] + 24) + 4LL) = 0;
          *(_WORD *)((char *)v2 + 333) = 0;
          v2[47] = 0LL;
        }
      }
    }
  }

  return result;
}

std::string *sub_1004B2BA0@<X0>(char a1@<W1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v4 = "";
  sub_10002418C(a2, "");
  return std::string::assign(a2, v4);
}

void sub_1004B2C10(_Unwind_Exception *exception_object)
{
}

void sub_1004B2C2C(uint64_t a1, void *a2, int a3, int a4, int a5, int a6, int a7)
{
  id v13 = a2;
  memset(&__p, 0, sizeof(__p));
  sub_10002418C(&__p, "");
  if (a3 == 255)
  {
    memset(&v43, 0, sizeof(v43));
    sub_1004B2BA0(a4, &v43);
    uint64_t v14 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = &v43;
      if ((v43.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v15 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      __int16 v48 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Overwriting the 'unknown->%s' spatial transition string with '%s->%s'",  (uint8_t *)&buf,  0x20u);
    }

    if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = v43.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = v43.__r_.__value_.__l.__size_;
    }
    memset(&buf, 0, sizeof(buf));
    p_std::string buf = &buf;
    sub_100271C18((uint64_t)&buf, size + 2);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v18 = &v43;
      }
      else {
        double v18 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      memmove(p_buf, v18, size);
    }

    strcpy((char *)p_buf + size, "->");
    if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v19 = &v43;
    }
    else {
      uint64_t v19 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v20 = v43.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v20 = v43.__r_.__value_.__l.__size_;
    }
    CFAbsoluteTime v21 = std::string::append(&buf, (const std::string::value_type *)v19, v20);
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
    v45.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v23 = v21->__r_.__value_.__s.__size_;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v22;
    __p.__r_.__value_.__l.__size_ = v45.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v23;
  }

  else
  {
    sub_1004B2BA0(a3, &v43);
    unsigned int v24 = std::string::append(&v43, "->");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    sub_1004B2BA0(a4, &v45);
    if ((v45.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned int v26 = &v45;
    }
    else {
      unsigned int v26 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if ((v45.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v27 = v45.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v27 = v45.__r_.__value_.__l.__size_;
    }
    __int16 v28 = std::string::append(&buf, (const std::string::value_type *)v26, v27);
    std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
    v46[0] = v28->__r_.__value_.__l.__size_;
    *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v30 = v28->__r_.__value_.__s.__size_;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v29;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
    __p.__r_.__value_.__s.__size_ = v30;
  }

  memset(&buf, 0, sizeof(buf));
  if (a5) {
    __int16 v31 = "On";
  }
  else {
    __int16 v31 = "Off";
  }
  sub_10002418C(&buf, v31);
  std::string::append(&buf, "->");
  if (a6) {
    int v32 = "On";
  }
  else {
    int v32 = "Off";
  }
  std::string::append(&buf, v32);
  int v33 = operator new(0xA0uLL);
  sub_1004B79F4((uint64_t)v33);
  *(void *)(a1 + 152) = v33;
  sub_1004AA160(a1, (uint64_t)&v43);
  uint64_t v34 = *(void *)(a1 + 152);
  unint64_t v35 = (void **)(v34 + 24);
  *(std::string *)unint64_t v35 = v43;
  id v36 = v13;
  sub_10002418C(&v43, (char *)[v36 UTF8String]);
  uint64_t v37 = *(void *)(a1 + 152);
  __int16 v38 = (void **)(v37 + 48);
  *(std::string *)__int16 v38 = v43;
  uint64_t v39 = *(void *)(a1 + 152);
  *(_DWORD *)(v39 + 76) = a6;
  *(_DWORD *)(v39 + 80) = a4;
  std::string::operator=((std::string *)(v39 + 88), &buf);
  uint64_t v40 = *(void *)(a1 + 152);
  *(_DWORD *)(v40 + 116) = a5;
  *(_DWORD *)(v40 + 120) = a3;
  std::string::operator=((std::string *)(v40 + 128), &__p);
  *(_DWORD *)(*(void *)(a1 + 152) + 152LL) = a7;
  *(_BYTE *)(a1 + 160) = 0;
  if (a5 == a6)
  {
    uint64_t v41 = sub_1002E8D94();
    (*(void (**)(uint64_t, void))(*(void *)v41 + 184LL))(v41, *(void *)(a1 + 152));
    uint64_t v42 = *(void *)(a1 + 152);
    if (v42)
    {
      operator delete((void *)v42);
    }

    *(void *)(a1 + 152) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 160) = 1;
  }
}

void sub_1004B30CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1004B3180(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 160) && *(void *)(a1 + 152))
  {
    sub_1004AA160(a1, (uint64_t)&v6);
    uint64_t v2 = *(void *)(a1 + 152);
    uint64_t v3 = v2 + 24;
    *(_OWORD *)uint64_t v3 = v6;
    *(void *)(v3 + 16) = v7;
    uint64_t v4 = sub_1002E8D94();
    (*(void (**)(uint64_t, void))(*(void *)v4 + 184LL))(v4, *(void *)(a1 + 152));
    uint64_t v5 = *(void *)(a1 + 152);
    if (v5)
    {
      operator delete((void *)v5);
    }

    *(void *)(a1 + 152) = 0LL;
    *(_BYTE *)(a1 + 160) = 0;
  }

void sub_1004B3264(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  unint64_t v8 = (os_log_s *)qword_1008F7570;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412802;
      id v18 = v7;
      __int16 v19 = 1024;
      int v20 = a3;
      __int16 v21 = 1024;
      int v22 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "AudioLinkManager setSpatialModeWithBundleID：%@, mode:%u, headtrack:%u",  buf,  0x18u);
    }

    if (*(_BYTE *)(a1 + 1144))
    {
      int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  a4,  @"kCBMsgArgParamSpatialHeadTracking"));
      v15[1] = @"kCBMsgArgParamSpatialMode";
      v16[0] = v9;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a3));
      v16[1] = v10;
      BOOL v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  2LL));

      id v12 = sub_1004B34A0(a1);
      uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
      uint64_t v14 = *(void **)(a1 + 1152);
      *(void *)(a1 + 1152) = v13;

      [*(id *)(a1 + 1152) setObject:v11 forKey:v7];
    }

    else
    {
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_10089BC30);
      }
      sub_100434B5C((uint64_t)off_1008D60A8, v7, a3, a4);
    }

    sub_1004B3500(a1, a4, a3);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
  {
    sub_100685C64();
  }
}

void sub_1004B3460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1004B34A0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1144) && (uint64_t v1 = *(void **)(a1 + 1152)) != 0LL)
  {
    id v2 = v1;
  }

  else
  {
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10089BC30);
    }
    uint64_t v3 = sub_100434D44((uint64_t)off_1008D60A8);
    id v2 = (id)objc_claimAutoreleasedReturnValue(v3);
  }

  return v2;
}

std::string *sub_1004B3500(uint64_t a1, int a2, int a3)
{
  if (!a3 || a3 == 255 || a3 == 3)
  {
    uint64_t v3 = (std::string *)(a1 + 1064);
    uint64_t v4 = "Off";
  }

  else
  {
    uint64_t v3 = (std::string *)(a1 + 1064);
    if (a2) {
      uint64_t v4 = "Headtracked Spatial";
    }
    else {
      uint64_t v4 = "Fixed Spatial";
    }
  }

  return std::string::assign(v3, v4);
}

void sub_1004B3544(uint64_t a1, void *a2, unsigned __int8 *a3, int *a4)
{
  id v7 = a2;
  id v8 = v7;
  if (*(_BYTE *)(a1 + 1144))
  {
    *a3 = 0;
    *a4 = 1;
    sub_1004B3614(a1, v7, a3, a4);
  }

  else
  {
    if (qword_1008D60B0 != -1)
    {
      dispatch_once(&qword_1008D60B0, &stru_10089BC30);
      id v7 = v8;
    }

    sub_100435428((uint64_t)off_1008D60A8, v7, a3, a4);
  }

  sub_1004B3500(a1, *a3, *a4);
}

void sub_1004B3600( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1004B3614(uint64_t a1, void *a2, unsigned __int8 *a3, int *a4)
{
  id v7 = a2;
  id v8 = *(void **)(a1 + 1152);
  if (!v8)
  {
    id v9 = sub_1004B34A0(a1);
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
    BOOL v11 = *(void **)(a1 + 1152);
    *(void *)(a1 + 1152) = v10;

    id v8 = *(void **)(a1 + 1152);
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v7]);
  uint64_t v13 = v12;
  if (v12)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:@"kCBMsgArgParamSpatialMode"]);
    uint64_t v15 = v14;
    if (v14)
    {
      unsigned int v16 = [v14 unsignedIntValue];
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
        sub_100685CBC();
      }
      if ([v7 caseInsensitiveCompare:@"com.apple.facetime"]) {
        unsigned int v16 = 1;
      }
      else {
        unsigned int v16 = 2;
      }
    }

    *a4 = v16;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_100685C90();
    }
    if ([v7 caseInsensitiveCompare:@"com.apple.facetime"]) {
      int v17 = 1;
    }
    else {
      int v17 = 2;
    }
    *a4 = v17;
  }

  id v18 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *a4;
    int v20 = *a3;
    int v21 = 138412802;
    id v22 = v7;
    __int16 v23 = 1024;
    int v24 = v19;
    __int16 v25 = 1024;
    int v26 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "AudioLinkManager getSpatialModeWithBundleIDInSplitter : %@=>%u,%u",  (uint8_t *)&v21,  0x18u);
  }
}

void sub_1004B37E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004B381C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004B3878;
  block[3] = &unk_100886EE0;
  void block[4] = a1;
  void block[5] = a2;
  char v5 = a3;
  dispatch_async(v3, block);
}

void sub_1004B3878(uint64_t a1)
{
  id v2 = (unint64_t *)(a1 + 40);
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v7 = *(void **)(v4 + 200);
    char v5 = (void *)(v4 + 200);
    __int128 v6 = v7;
    if (v7)
    {
      id v8 = v5;
      do
      {
        unint64_t v9 = v6[4];
        BOOL v10 = v9 >= v1;
        if (v9 >= v1) {
          BOOL v11 = v6;
        }
        else {
          BOOL v11 = v6 + 1;
        }
        if (v10) {
          id v8 = v6;
        }
        __int128 v6 = (void *)*v11;
      }

      while (*v11);
      if (v8 != v5 && v1 >= v8[4])
      {
        char v12 = *(_BYTE *)(a1 + 48);
        *(void *)std::string buf = a1 + 40;
        *(_BYTE *)(sub_100029574((uint64_t **)v5 - 1, v2, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 86) = v12;
        if (qword_1008D5F40 != -1) {
          dispatch_once(&qword_1008D5F40, &stru_10089BDC8);
        }
        sub_1003B2E8C((uint64_t)off_1008D5F38, *v2);
        uint64_t v13 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          if (*(_BYTE *)(a1 + 48)) {
            uint64_t v14 = "Active";
          }
          else {
            uint64_t v14 = "Not Active";
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Spatial Audio %{public}s", buf, 0xCu);
        }
      }
    }
  }

uint64_t sub_1004B39EC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  char v9 = 0;
  id v2 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004B3A80;
  block[3] = &unk_10087FEE0;
  void block[5] = a1;
  void block[6] = a2;
  void block[4] = &v6;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t *sub_1004B3A80(uint64_t *result)
{
  unint64_t v1 = result + 6;
  unint64_t v2 = result[6];
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[5];
    id v7 = *(void **)(v4 + 200);
    uint64_t v5 = v4 + 200;
    uint64_t v6 = v7;
    if (v7)
    {
      uint64_t result = (uint64_t *)(v5 - 8);
      uint64_t v8 = (void *)v5;
      do
      {
        unint64_t v9 = v6[4];
        BOOL v10 = v9 >= v2;
        if (v9 >= v2) {
          BOOL v11 = v6;
        }
        else {
          BOOL v11 = v6 + 1;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        uint64_t v6 = (void *)*v11;
      }

      while (*v11);
      if (v8 != (void *)v5 && v2 >= v8[4])
      {
        char v12 = v1;
        uint64_t result = sub_100029574((uint64_t **)result, (unint64_t *)v1, (uint64_t)&unk_1006C2518, &v12);
        *(_BYTE *)(*(void *)(v3[4] + 8) + 24LL) = *(_BYTE *)(result[5] + 86);
      }
    }
  }

  return result;
}

uint64_t sub_1004B3B20(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void **)(a1 + 200);
  unint64_t v2 = (void *)(a1 + 200);
  uint64_t v3 = v4;
  if (!v4) {
    return 0LL;
  }
  uint64_t v6 = v2;
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unint64_t v9 = v3;
    }
    else {
      unint64_t v9 = v3 + 1;
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v9;
  }

  while (*v9);
  if (v6 != v2
    && v6[4] <= a2
    && (uint64_t v10 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 792LL))(v10, 1LL))
    && (sub_1003E0230(a2, 64) & 1) != 0)
  {
    return 1LL;
  }

  else
  {
    return 0LL;
  }

void sub_1004B3BB0(uint64_t a1, void *a2)
{
  id v4 = a2;
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 264);
  objc_storeStrong((id *)(a1 + 896), a2);
  *(_BYTE *)(a1 + 905) = v4 != 0LL;
  uint64_t v5 = sub_1004050C8();
  sub_100405384(v5, &stru_10089BB58);
  sub_100242FAC((uint64_t)v6);
}

void sub_1004B3C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004B3C4C(id a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  sub_100377F04(qword_1008D6450);
}

id sub_1004B3C8C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 264);
  id v2 = *(id *)(a1 + 896);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1004B3CD8()
{
  uint64_t v0 = sub_1002E6BF0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v0 + 792LL))(v0, 5LL);
}

void sub_1004B3CF8(uint64_t a1, char a2)
{
  id v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004B3D54;
  v3[3] = &unk_1008800D8;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1004B3D54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Spatial Profile Allowed change to %d ",  (uint8_t *)v7,  8u);
  }

  *(_BYTE *)(v2 + 904) = *(_BYTE *)(a1 + 40);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089BC30);
  }
  if (*(_BYTE *)(v2 + 904)) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  sub_100434920((uint64_t)off_1008D60A8, v5);
  uint64_t v6 = sub_1004050C8();
  sub_100405384(v6, &stru_10089BB78);
}

void sub_1004B3E60(id a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  sub_100377F04(qword_1008D6450);
}

void sub_1004B3EA0(uint64_t a1, char a2)
{
  uint64_t v2 = a1 - 112;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 128);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1004B3D54;
  v4[3] = &unk_1008800D8;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

BOOL sub_1004B3EFC(uint64_t a1, uint64_t a2)
{
  if (sub_1003E0230(a2, 64))
  {
    uint64_t v4 = sub_1002E6BF0();
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 792LL))(v4, 3LL);
  }

  else
  {
    char v5 = 0;
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089BC30);
  }
  int v6 = sub_10042BCE4((uint64_t)off_1008D60A8);
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 264);
  uint64_t v7 = *(void *)(a1 + 896);
  sub_100242F54((uint64_t)v18);
  if (a2) {
    char v8 = v5;
  }
  else {
    char v8 = 0;
  }
  if ((v8 & 1) != 0)
  {
    if (qword_1008D60C0 != -1) {
      dispatch_once(&qword_1008D60C0, &stru_10089BDE8);
    }
    int v9 = sub_1003EE52C((uint64_t)off_1008D60B8, a2);
    uint64_t v10 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v11 = "YES";
      int v12 = *(unsigned __int8 *)(a1 + 904);
      if (v7) {
        uint64_t v13 = "YES";
      }
      else {
        uint64_t v13 = "NO";
      }
      *(_DWORD *)std::string buf = 136316162;
      int v20 = "YES";
      if (v6 == 1) {
        uint64_t v14 = "YES";
      }
      else {
        uint64_t v14 = "NO";
      }
      __int16 v21 = 2080;
      id v22 = v13;
      if (v9) {
        uint64_t v15 = "YES";
      }
      else {
        uint64_t v15 = "NO";
      }
      __int16 v23 = 2080;
      if (!v12) {
        BOOL v11 = "NO";
      }
      int v24 = v14;
      __int16 v25 = 2080;
      int v26 = v15;
      __int16 v27 = 2080;
      __int16 v28 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Spatial Profile User preference, Support = %s Enrollment = %s User Choice = %s Owned Device %s Allowed %s",  buf,  0x34u);
    }

    BOOL v16 = 0LL;
    if (v7 && ((v9 ^ 1) & 1) == 0 && v6 == 1) {
      BOOL v16 = *(_BYTE *)(a1 + 904) != 0;
    }
  }

  else
  {
    BOOL v16 = 0LL;
  }

  sub_100242FAC((uint64_t)v18);
  return v16;
}

void sub_1004B410C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004B412C(uint64_t a1, char a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 240);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004B4188;
  v3[3] = &unk_1008800D8;
  void v3[4] = a1;
  char v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1004B4188(uint64_t a1)
{
}

void sub_1004B419C(uint64_t a1, char a2)
{
  uint64_t v2 = a1 - 128;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 112);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1004B4188;
  v4[3] = &unk_1008800D8;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

void sub_1004B41F8(uint64_t a1, char a2, uint64_t a3)
{
  int v6 = _os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming");
  if (a3 && v6)
  {
    if (sub_100027194(*(void *)(a1 + 224), a3))
    {
      uint64_t v7 = *(dispatch_queue_s **)(a1 + 240);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1004B4298;
      block[3] = &unk_100886EE0;
      char v9 = a2;
      void block[4] = a1;
      void block[5] = a3;
      dispatch_async(v7, block);
    }
  }

uint64_t sub_1004B4298(uint64_t a1)
{
  return sub_100027090(*(void *)(*(void *)(a1 + 32) + 224LL), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 40));
}

void sub_1004B42AC(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v9 = a2;
  uint64_t v10 = &v9;
  __int16 v4 = *(_WORD *)(sub_100029574((uint64_t **)(a1 + 192), &v9, (uint64_t)&unk_1006C2518, (uint64_t **)&v10)[5] + 84);
  uint64_t v5 = sub_1004050C8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1004B4348;
  v6[3] = &unk_10089BB98;
  __int16 v7 = v4;
  BOOL v8 = a3 == 240;
  sub_100405384(v5, v6);
}

void sub_1004B4348(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089BC70);
  }
  sub_10037BD80(qword_1008D6450, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_1004B439C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 && ((sub_100027194(*(void *)(a1 + 224), a2) & 1) != 0 || !a4))
  {
    uint64_t v6 = sub_1004050C8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    _DWORD v7[2] = sub_1004B4418;
    v7[3] = &unk_1008800D8;
    void v7[4] = a2;
    char v8 = a4;
    sub_100405384(v6, v7);
  }

uint64_t sub_1004B4418(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1008D9030 != -1) {
      dispatch_once(&qword_1008D9030, &stru_10089BC50);
    }
    return sub_100460020((uint64_t)off_1008D9028, *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
  }

  return result;
}

void sub_1004B4480(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = a3;
  sub_1003E5B60(a2, a3);
  if (qword_1008D6778 != -1) {
    dispatch_once(&qword_1008D6778, &stru_10089BD10);
  }
  sub_10020139C(qword_1008D6770, a2, v3);
}

void sub_1004B44E4(uint64_t a1, char a2, uint64_t a3, char a4, int a5, int a6, char a7, char a8, __int16 a9)
{
  unint64_t v9 = *(dispatch_queue_s **)(a1 + 240);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  int v10[2] = sub_1004B4558;
  v10[3] = &unk_10089BBB8;
  char v14 = a2;
  v10[4] = a1;
  void v10[5] = a3;
  char v15 = a4;
  int v11 = a5;
  int v12 = a6;
  char v16 = a7;
  char v17 = a8;
  __int16 v13 = a9;
  dispatch_async(v9, v10);
}

void sub_1004B4558(uint64_t a1)
{
}

void sub_1004B459C(uint64_t a1, int a2, unsigned __int8 *a3, char a4, __int16 a5, uint64_t a6)
{
  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
  {
    int v12 = *(dispatch_queue_s **)(a1 + 240);
    unint64_t v13 = ((unint64_t)*a3 << 40) | ((unint64_t)a3[1] << 32) | ((unint64_t)a3[2] << 24) | ((unint64_t)a3[3] << 16) | ((unint64_t)a3[4] << 8) | a3[5];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    _DWORD v14[2] = sub_1004B4678;
    v14[3] = &unk_10089BBD8;
    int v15 = a2;
    v14[4] = a1;
    v14[5] = v13;
    char v17 = a4;
    __int16 v16 = a5;
    void v14[6] = a6;
    dispatch_async(v12, v14);
  }

void sub_1004B4678(uint64_t a1)
{
}

uint64_t sub_1004B4698(uint64_t a1, unsigned int a2, unint64_t a3)
{
  unint64_t v17 = a3;
  uint64_t v6 = (uint64_t **)(a1 + 192);
  *(void *)std::string buf = &v17;
  uint64_t v7 = *(unsigned int *)(*(void *)(sub_100029574( (uint64_t **)(a1 + 192),  &v17,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf)[5] + 40)
                       + 24LL);
  unint64_t v17 = a3;
  *(void *)std::string buf = &v17;
  uint64_t v8 = *(void *)(sub_100029574(v6, &v17, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] + 40);
  if (a2 == 7)
  {
    if ((_DWORD)v7 != 13 && (_DWORD)v7 != 10)
    {
      if ((v7 - 11) <= 1)
      {
        *(_DWORD *)(v8 + 24) = 8;
        sub_100028FA4(*(void *)(a1 + 224), 3, a3);
        return 1LL;
      }

      return 0LL;
    }

    *(_DWORD *)(v8 + 24) = 12;
    uint64_t v10 = 1LL;
    sub_100028EF0(*(void *)(a1 + 224), 1, a3);
  }

  else
  {
    int v11 = (os_log_s *)qword_1008F7570;
    uint64_t v10 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 216);
      uint64_t v13 = *(void *)(v12 + 8LL * a2 + 168);
      v12 += 48LL;
      uint64_t v14 = *(void *)(v12 + 8 * v7);
      uint64_t v15 = *(void *)(v12 + 8LL * *(unsigned int *)(v8 + 24));
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = v13;
      __int16 v19 = 2082;
      uint64_t v20 = v14;
      __int16 v21 = 2082;
      uint64_t v22 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Unhandled Low Latency Game Transition: %{public}s. State: %{public}s -> %{public}s.",  buf,  0x20u);
      return 0LL;
    }
  }

  return v10;
}

void sub_1004B485C(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v13 = 0LL;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  uint64_t v16 = 0LL;
  uint64_t v16 = sub_1004A8FC0(a1, a2);
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 240);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1004B4988;
  v12[3] = &unk_100880D70;
  void v12[4] = &v13;
  _DWORD v12[5] = a1;
  dispatch_async(v7, v12);
  if (a3 >= 0x33)
  {
    uint64_t v8 = v14[3];
    unint64_t v9 = *(dispatch_queue_s **)(a1 + 240);
    block = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472LL;
    __int16 v19 = sub_1004A9B20;
    uint64_t v20 = &unk_100888050;
    uint64_t v21 = a1;
    uint64_t v22 = v8;
    uint64_t v23 = a4;
    dispatch_async(v9, &block);
    uint64_t v10 = v14[3];
    int v11 = *(dispatch_queue_s **)(a1 + 240);
    block = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472LL;
    __int16 v19 = sub_1004AC0F8;
    uint64_t v20 = &unk_100890D60;
    uint64_t v21 = a1;
    uint64_t v22 = v10;
    __int16 v24 = 256;
    uint64_t v23 = 0LL;
    dispatch_async(v11, &block);
  }

  _Block_object_dispose(&v13, 8);
}

void sub_1004B4988(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1004A1F48(v2, *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL), 60LL);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 8);
  unint64_t v7 = *(void *)(v4 + 24);
  uint64_t v5 = (uint64_t *)(v4 + 24);
  unint64_t v6 = v7;
  if (v7)
  {
    uint64_t v8 = *(void **)(v2 + 200);
    if (v8)
    {
      unint64_t v9 = (uint64_t **)(v2 + 192);
      uint64_t v10 = v2 + 200;
      do
      {
        unint64_t v11 = v8[4];
        BOOL v12 = v11 >= v6;
        if (v11 >= v6) {
          uint64_t v13 = v8;
        }
        else {
          uint64_t v13 = v8 + 1;
        }
        if (v12) {
          uint64_t v10 = (uint64_t)v8;
        }
        uint64_t v8 = (void *)*v13;
      }

      while (*v13);
      if (v10 != v2 + 200 && v6 >= *(void *)(v10 + 32))
      {
        __int16 v28 = (unint64_t *)v5;
        uint64_t v14 = sub_100029574(v9, (unint64_t *)v5, (uint64_t)&unk_1006C2518, (uint64_t **)&v28);
        uint64_t v3 = *(void *)(a1 + 32);
        if (*(void *)(v14[5] + 16))
        {
          __int16 v28 = (unint64_t *)(*(void *)(v3 + 8) + 24LL);
          uint64_t v15 = sub_100029574(v9, v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v28);
          ++*(_DWORD *)(*(void *)(v15[5] + 16) + 180LL);
          uint64_t v3 = *(void *)(a1 + 32);
        }
      }
    }
  }

  uint64_t v16 = *(void *)(v3 + 8);
  unint64_t v19 = *(void *)(v16 + 24);
  unint64_t v17 = (uint64_t *)(v16 + 24);
  unint64_t v18 = v19;
  if (v19)
  {
    uint64_t v22 = *(void **)(v2 + 200);
    uint64_t v21 = v2 + 200;
    uint64_t v20 = v22;
    if (v22)
    {
      uint64_t v23 = (void *)v21;
      do
      {
        unint64_t v24 = v20[4];
        BOOL v25 = v24 >= v18;
        if (v24 >= v18) {
          int v26 = v20;
        }
        else {
          int v26 = v20 + 1;
        }
        if (v25) {
          uint64_t v23 = v20;
        }
        uint64_t v20 = (void *)*v26;
      }

      while (*v26);
      if (v23 != (void *)v21 && v18 >= v23[4])
      {
        __int16 v28 = (unint64_t *)v17;
        if (*(void *)(sub_100029574( (uint64_t **)(v21 - 8),  (unint64_t *)v17,  (uint64_t)&unk_1006C2518,  (uint64_t **)&v28)[5] + 24))
        {
          __int16 v28 = (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
          __int16 v27 = sub_100029574((uint64_t **)(v21 - 8), v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v28);
          ++*(_DWORD *)(*(void *)(v27[5] + 24) + 116LL);
        }
      }
    }
  }

void sub_1004B4B38(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "updating the tipiConnection state for a2dp audio packet flush metrics: %d",  buf,  8u);
  }

  unint64_t v7 = *(dispatch_queue_s **)(a1 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004B4C28;
  block[3] = &unk_100886EE0;
  void block[4] = a1;
  void block[5] = a2;
  char v9 = a3;
  dispatch_async(v7, block);
}

uint64_t *sub_1004B4C28(uint64_t *result)
{
  unint64_t v1 = result[5];
  if (v1)
  {
    uint64_t v2 = result[4];
    uint64_t v5 = *(void **)(v2 + 200);
    uint64_t v3 = v2 + 200;
    uint64_t v4 = v5;
    if (v5)
    {
      unint64_t v6 = (void *)v3;
      do
      {
        unint64_t v7 = v4[4];
        BOOL v8 = v7 >= v1;
        if (v7 >= v1) {
          char v9 = v4;
        }
        else {
          char v9 = v4 + 1;
        }
        if (v8) {
          unint64_t v6 = v4;
        }
        uint64_t v4 = (void *)*v9;
      }

      while (*v9);
      if (v6 != (void *)v3 && v1 >= v6[4])
      {
        char v10 = *((_BYTE *)result + 48);
        int v11 = result + 5;
        uint64_t result = sub_100029574((uint64_t **)(v3 - 8), (unint64_t *)result + 5, (uint64_t)&unk_1006C2518, &v11);
        *(_BYTE *)(result[5] + 32) = v10;
      }
    }
  }

  return result;
}

uint64_t *sub_1004B4CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v3 = (uint64_t **)(a1 + 192);
  *(void *)&__int128 v27 = &v31;
  uint64_t v4 = sub_100029574((uint64_t **)(a1 + 192), (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27);
  std::string::assign((std::string *)(*(void *)(v4[5] + 16) + 40LL), "No");
  *(void *)&__int128 v27 = &v31;
  uint64_t v5 = sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27);
  std::string::assign((std::string *)(*(void *)(v5[5] + 16) + 88LL), "2.4G");
  *(void *)&__int128 v27 = &v31;
  unint64_t v6 = sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27);
  std::string::assign((std::string *)(*(void *)(v6[5] + 16) + 112LL), "0000");
  *(void *)&__int128 v27 = &v31;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t result = (uint64_t *)v31;
  if (v31)
  {
    sub_1003D55EC(v31, (_DWORD *)&v30 + 1, &v30, &v29, (_DWORD *)&v29 + 1);
    int v8 = v29;
    *(void *)&__int128 v27 = &v31;
    *(_DWORD *)(*(void *)(sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27)[5]
                          + 16)
              + 36LL) = v8;
    unint64_t v9 = v31;
    if (*(_BYTE *)(v31 + 1372))
    {
      *(void *)&__int128 v27 = &v31;
      char v10 = sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27);
      std::string::assign((std::string *)(*(void *)(v10[5] + 16) + 40LL), "Yes");
      unint64_t v9 = v31;
    }

    sub_1004B5184(a1, v9);
    *(void *)&__int128 v27 = &v31;
    int v11 = (const std::string *)(*(void *)sub_100029574( v3,  (unint64_t *)&v31,  (uint64_t)&unk_1006C2518,  (uint64_t **)&v27)[5] + 448LL);
    *(void *)&__int128 v27 = &v31;
    BOOL v12 = sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27);
    std::string::operator=((std::string *)(*(void *)(v12[5] + 16) + 64LL), v11);
    uint64_t v13 = v31;
    if (*(_BYTE *)(v31 + 1373))
    {
      *(void *)&__int128 v27 = &v31;
      uint64_t v14 = sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27);
      std::string::assign((std::string *)(*(void *)(v14[5] + 16) + 88LL), "5G");
      uint64_t v13 = v31;
    }

    if (sub_1003D2B2C(v13, 12))
    {
      sub_1003D930C(v31, 0xAu, &v27);
      int v32 = &v31;
      uint64_t v15 = *(void *)(sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, &v32)[5] + 16);
      uint64_t v16 = v15 + 112;
      *(_OWORD *)uint64_t v16 = v27;
      *(void *)(v16 + 16) = v28;
    }

    *(void *)&__int128 v27 = &v31;
    int v17 = *(unsigned __int16 *)(*(void *)(sub_100029574( v3,  (unint64_t *)&v31,  (uint64_t)&unk_1006C2518,  (uint64_t **)&v27)[5] + 40)
                              + 48LL);
    *(void *)&__int128 v27 = &v31;
    *(_DWORD *)(*(void *)(sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27)[5]
                          + 16)
              + 136LL) = v17;
    *(void *)&__int128 v27 = &v31;
    unint64_t v18 = *(_DWORD **)(sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27)[5] + 16);
    int v19 = v18[6];
    if (v19) {
      int v20 = *v18 / v19;
    }
    else {
      int v20 = 0;
    }
    *(void *)&__int128 v27 = &v31;
    *(_DWORD *)(*(void *)(sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27)[5]
                          + 16)
              + 140LL) = v20;
    *(void *)&__int128 v27 = &v31;
    uint64_t v21 = *(void *)(sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27)[5] + 16);
    unsigned int v22 = *(_DWORD *)(v21 + 148);
    if (v22) {
      int v23 = *(_DWORD *)(v21 + 172) / v22;
    }
    else {
      int v23 = 0;
    }
    *(void *)&__int128 v27 = &v31;
    *(_DWORD *)(*(void *)(sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27)[5]
                          + 16)
              + 144LL) = v23;
    *(void *)&__int128 v27 = &v31;
    uint64_t v24 = *(void *)(sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27)[5] + 16);
    int v25 = *(_DWORD *)(v24 + 168);
    if (v25) {
      int v26 = *(_DWORD *)(v24 + 176) / v25;
    }
    else {
      int v26 = 0;
    }
    *(void *)&__int128 v27 = &v31;
    *(_DWORD *)(*(void *)(sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27)[5]
                          + 16)
              + 152LL) = v26;
    *(void *)&__int128 v27 = &v31;
    uint64_t result = sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27);
    if (*(_BYTE *)(result[5] + 32))
    {
      *(void *)&__int128 v27 = &v31;
      uint64_t result = sub_100029574(v3, (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)&v27);
      *(_BYTE *)(*(void *)(result[5] + 16) + 164LL) = 1;
    }
  }

  return result;
}

void sub_1004B5168( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B5184(uint64_t a1, unint64_t a2)
{
  unint64_t v13 = a2;
  uint64_t v3 = (uint64_t **)(a1 + 192);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  if (*(void *)sub_100029574((uint64_t **)(a1 + 192), &v13, (uint64_t)&unk_1006C2518, (uint64_t **)&__p)[5])
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    uint64_t v4 = sub_100029574(v3, &v13, (uint64_t)&unk_1006C2518, (uint64_t **)&__p);
    std::string::assign((std::string *)(*(void *)v4[5] + 448LL), "Audio");
    uint64_t v5 = *(_BYTE **)(a1 + 216);
    if (v5[8])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      unint64_t v6 = sub_100029574(v3, &v13, (uint64_t)&unk_1006C2518, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(void *)v6[5] + 448LL), "Video Spatial");
      uint64_t v5 = *(_BYTE **)(a1 + 216);
    }

    if (v5[7])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      unint64_t v7 = sub_100029574(v3, &v13, (uint64_t)&unk_1006C2518, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(void *)v7[5] + 448LL), "Audio Spatial");
      uint64_t v5 = *(_BYTE **)(a1 + 216);
    }

    if (v5[5])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      int v8 = sub_100029574(v3, &v13, (uint64_t)&unk_1006C2518, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(void *)v8[5] + 448LL), "Game");
      uint64_t v5 = *(_BYTE **)(a1 + 216);
    }

    if (v5[3])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      unint64_t v9 = sub_100029574(v3, &v13, (uint64_t)&unk_1006C2518, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(void *)v9[5] + 448LL), "VoiceOver");
      uint64_t v5 = *(_BYTE **)(a1 + 216);
    }

    if (v5[2])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      char v10 = sub_100029574(v3, &v13, (uint64_t)&unk_1006C2518, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(void *)v10[5] + 448LL), "GarageBand");
    }

    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    if (*(_BYTE *)(*(void *)sub_100029574(v3, &v13, (uint64_t)&unk_1006C2518, (uint64_t **)&__p)[5] + 160LL))
    {
      memset(&__p, 0, sizeof(__p));
      sub_10002418C(&__p, "Game");
      uint64_t v14 = &v13;
      uint64_t v14 = &v13;
      uint64_t v14 = &v13;
      uint64_t v14 = &v13;
      uint64_t v14 = &v13;
      uint64_t v14 = &v13;
      int v11 = sub_100029574(v3, &v13, (uint64_t)&unk_1006C2518, (uint64_t **)&v14);
      std::string::operator=((std::string *)(*(void *)v11[5] + 448LL), &__p);
    }
  }

void sub_1004B556C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B559C()
{
  return 1LL;
}

uint64_t sub_1004B55C4()
{
  return 1LL;
}

void sub_1004B55D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1004B5658(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004B5658(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004B585C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B5894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004B5948(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_1004B5948(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004B5B4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B5B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004B5C38(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_1004B5C38(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004B5E3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B5E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004B5F28(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_1004B5F28(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004B612C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B6164(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1004B61EC(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004B61EC(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004B63F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B6428(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004B64DC(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_1004B64DC(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004B66E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B6718(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004B67CC(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_1004B67CC(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)int v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    unint64_t v9 = __src + 8;
    char v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004B69D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1004B6A08(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = (void *)sub_1004B6C34(v2);
    operator delete(v3);
  }

  uint64_t v4 = a1[1];
  if (v4)
  {
    operator delete((void *)v4);
  }

  uint64_t v5 = (void *)a1[5];
  if (v5)
  {
    operator delete(v5);
    a1[5] = 0LL;
  }

  uint64_t v6 = (void *)a1[6];
  if (v6)
  {
    operator delete(v6);
    a1[6] = 0LL;
  }

  uint64_t v7 = a1[2];
  if (v7)
  {
    uint64_t v8 = (void *)sub_100328D20(v7);
    operator delete(v8);
  }

  unint64_t v9 = (void *)a1[3];
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_1004B6A94(uint64_t a1)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v1 = qword_1008F1120;
  uint64_t v6 = qword_1008F1120;
  if (!qword_1008F1120)
  {
    __int128 v7 = *(_OWORD *)off_10089BBF8;
    uint64_t v8 = 0LL;
    uint64_t v1 = _sl_dlopen(&v7, a1);
    v4[3] = v1;
    qword_1008F1120 = v1;
  }

  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_1004B6B4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1004B6B64()
{
  uint64_t v5 = 0LL;
  uint64_t v0 = sub_1004B6A94((uint64_t)&v5);
  if (!v0)
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *BT::libtailspinLibrary()"));
    [v1 handleFailureInFunction:v4 file:@"AudioLinkManager.mm" lineNumber:88 description:@"%s" v5];

    __break(1u);
    goto LABEL_5;
  }

  uint64_t v1 = (void *)v0;
  uint64_t v2 = v5;
  if (v5) {
LABEL_5:
  }
    free(v2);
  return v1;
}

void sub_1004B6C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004B6C34(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 328);
  uint64_t v3 = *(void ***)(a1 + 336);
  while (v2 != v3)
  {
    if (*v2) {
      operator delete(*v2);
    }
    ++v2;
  }

  uint64_t v4 = *(void **)(a1 + 352);
  if (v4)
  {
    *(void *)(a1 + 360) = v4;
    operator delete(v4);
  }

  uint64_t v5 = *(void **)(a1 + 328);
  if (v5)
  {
    *(void *)(a1 + 336) = v5;
    operator delete(v5);
  }

  return a1;
}

uint64_t sub_1004B6CCC(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, int a6)
{
  *(_OWORD *)a1 = *(_OWORD *)"";
  *(void *)(a1 + 16) = 0xFFFFFF6A00000000LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + sub_100242E28(v1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 72) = a3;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 164) = 0;
  sub_10002418C((void *)(a1 + 168), "2.4G");
  *(_BYTE *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 264) = 0LL;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 2sub_100242E28(v1 + 40) = 0LL;
  *(void *)(a1 + 24_Block_object_dispose(&a9, 8) = 0LL;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = 150LL;
  *(_BYTE *)(a1 + 320) = a4;
  *(_BYTE *)(a1 + 321) = a5;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 3sub_100242E28(v1 + 40) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 400) = 0LL;
  *(_DWORD *)(a1 + 40_Block_object_dispose(&a9, 8) = 0;
  *(_DWORD *)(a1 + 412) = a6;
  *(void *)(a1 + 416) = 0LL;
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 432) = 4294967196LL;
  *(_DWORD *)(a1 + 4sub_100242E28(v1 + 40) = 0;
  sub_10002418C((void *)(a1 + 448), "Unknown");
  sub_10002418C((void *)(a1 + 472), "Unknown");
  *(void *)(a1 + 496) = 0LL;
  *(void *)(a1 + 504) = 0LL;
  *(void *)(a1 + 512) = 0LL;
  return a1;
}

void sub_1004B6DF0(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void **)(v1 + 352);
  if (v5)
  {
    *(void *)(v1 + 360) = v5;
    operator delete(v5);
  }

  uint64_t v6 = *(void **)(v1 + 328);
  if (v6)
  {
    *(void *)(v1 + 336) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B6E44(uint64_t a1)
{
  *(_OWORD *)a1 = *(_OWORD *)"";
  *(void *)(a1 + 16) = 0xFFFFFF6A00000000LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  sub_10002418C((void *)(a1 + 40), "");
  sub_10002418C((void *)(a1 + 64), "");
  sub_10002418C((void *)(a1 + 88), "");
  sub_10002418C((void *)(a1 + 112), "");
  *(_OWORD *)(a1 + 136) = xmmword_1006C3560;
  *(void *)(a1 + 152) = 0x7E0000007ELL;
  *(_DWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 164) = 0;
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(_DWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_1004B6F00(_Unwind_Exception *exception_object)
{
  if (v1[111] < 0) {
    operator delete(*v4);
  }
  if (v1[87] < 0) {
    operator delete(*v3);
  }
  if (v1[63] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B6F4C(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, char a6)
{
  *(_OWORD *)a1 = *(_OWORD *)"";
  *(void *)(a1 + 16) = 0xFFFFFF6A00000000LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + sub_100242E28(v1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 72) = a3;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = 0LL;
  sub_10002418C((void *)(a1 + 136), "2.4G");
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 161) = a4;
  *(_BYTE *)(a1 + 162) = a5;
  *(_DWORD *)(a1 + 164) = 0;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 180) = 0LL;
  *(void *)(a1 + 172) = 0LL;
  *(_BYTE *)(a1 + 18_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 204) = 0xFFFFFF9C00000000LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 229) = 0LL;
  *(_BYTE *)(a1 + 237) = a6;
  *(_OWORD *)(a1 + 2sub_100242E28(v1 + 40) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose(&a9, 8) = 0u;
  return a1;
}

void sub_1004B7008(uint64_t a1, __int128 *a2)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = (int64x2_t *)(a1 + 8);
  if (v5 == v6)
  {
LABEL_16:
    __int128 v14 = *a2;
    uint64_t v15 = *((void *)a2 + 1);
    if (v15)
    {
      uint64_t v16 = (unint64_t *)(v15 + 16);
      do
        unint64_t v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      uint64_t v5 = *(uint64_t **)(a1 + 16);
    }

    unint64_t v18 = *(void *)(a1 + 24);
    if ((unint64_t)v5 >= v18)
    {
      __int128 v33 = v14;
      uint64_t v20 = ((uint64_t)v5 - v4->i64[0]) >> 4;
      uint64_t v21 = v18 - v4->i64[0];
      uint64_t v22 = v21 >> 3;
      else {
        unint64_t v23 = v22;
      }
      uint64_t v37 = a1 + 24;
      uint64_t v24 = (char *)sub_1003ADAF8(a1 + 24, v23);
      int v26 = &v24[16 * v20];
      *(_OWORD *)int v26 = v33;
      uint64_t v28 = *(void **)(a1 + 8);
      __int128 v27 = *(void **)(a1 + 16);
      if (v27 == v28)
      {
        int64x2_t v31 = vdupq_n_s64((unint64_t)v27);
        uint64_t v29 = &v24[16 * v20];
      }

      else
      {
        uint64_t v29 = &v24[16 * v20];
        do
        {
          __int128 v30 = *((_OWORD *)v27 - 1);
          v27 -= 2;
          *((_OWORD *)v29 - 1) = v30;
          v29 -= 16;
          *__int128 v27 = 0LL;
          v27[1] = 0LL;
        }

        while (v27 != v28);
        int64x2_t v31 = *v4;
      }

      int v19 = v26 + 16;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v29;
      *(void *)(a1 + 16) = v26 + 16;
      int64x2_t v35 = v31;
      uint64_t v32 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = &v24[16 * v25];
      uint64_t v36 = v32;
      uint64_t v34 = v31.i64[0];
      sub_1004B72C4((void **)&v34);
    }

    else
    {
      *uint64_t v5 = v14;
      v5[1] = v15;
      int v19 = v5 + 2;
    }

    *(void *)(a1 + 16) = v19;
    sub_1004B7200((char **)(a1 + 8));
    goto LABEL_35;
  }

  do
  {
    __int128 v7 = (std::__shared_weak_count *)v5[1];
    if (!v7)
    {
      uint64_t v9 = *(void *)a2;
LABEL_11:
      if (!v9) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }

    uint64_t v8 = std::__shared_weak_count::lock(v7);
    uint64_t v9 = *(void *)a2;
    if (!v8) {
      goto LABEL_11;
    }
    char v10 = v8;
    uint64_t v11 = *v5;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v10);
    }

    if (v11 == v9) {
      goto LABEL_14;
    }
LABEL_12:
    v5 += 2;
  }

  while (v5 != v6);
  uint64_t v5 = v6;
LABEL_14:
  if (v5 == *(uint64_t **)(a1 + 16))
  {
    uint64_t v5 = *(uint64_t **)(a1 + 16);
    goto LABEL_16;
  }

void sub_1004B71E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1004B7200(char **a1)
{
  uint64_t v3 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 4;
  if (v6 < (v3 - *a1) >> 4)
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    unint64_t v18 = result;
    if (v5 == v4)
    {
      uint64_t v11 = 0LL;
      uint64_t v9 = 16 * v6;
    }

    else
    {
      __int128 v7 = (char *)sub_1003ADAF8((uint64_t)result, v6);
      uint64_t v4 = *a1;
      uint64_t v8 = a1[1];
      uint64_t v9 = (uint64_t)&v7[16 * v6];
      uint64_t v11 = &v7[16 * v10];
      *(void *)&__int128 v17 = v9;
      *((void *)&v17 + 1) = v11;
      if (v8 != v4)
      {
        uint64_t v12 = &v7[16 * v6];
        do
        {
          __int128 v13 = *((_OWORD *)v8 - 1);
          v8 -= 16;
          *((_OWORD *)v12 - 1) = v13;
          v12 -= 16;
          *(void *)uint64_t v8 = 0LL;
          *((void *)v8 + 1) = 0LL;
        }

        while (v8 != v4);
        __int128 v14 = *a1;
        uint64_t v4 = a1[1];
        uint64_t v11 = (char *)*((void *)&v17 + 1);
        uint64_t v9 = v17;
        goto LABEL_9;
      }
    }

    __int128 v14 = v4;
    uint64_t v12 = (char *)v9;
LABEL_9:
    *a1 = v12;
    a1[1] = (char *)v9;
    uint64_t v15 = a1[2];
    a1[2] = v11;
    *(void *)&__int128 v17 = v4;
    *((void *)&v17 + 1) = v15;
    *(void *)&__int128 v16 = v14;
    *((void *)&v16 + 1) = v14;
    return sub_1004B72C4((void **)&v16);
  }

  return result;
}

void **sub_1004B72C4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1004B72F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }

    else
    {
      v1 -= 16LL;
    }
  }

void sub_1004B7344(uint64_t a1, void *a2)
{
  uint64_t v4 = (__int128 *)sub_1004B73D8(*(void **)(a1 + 8), *(void **)(a1 + 16), a2);
  sub_1004B755C((uint64_t)&v9, v4 + 1, *(__int128 **)(a1 + 16), (uint64_t)v4);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7 != v5)
  {
    do
    {
      uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      v7 -= 16LL;
    }

    while (v7 != v6);
  }

  *(void *)(a1 + 16) = v6;
  sub_1004B7200((char **)(a1 + 8));
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void *sub_1004B73D8(void *a1, void *a2, void *a3)
{
  int v26 = a3;
  uint64_t v4 = sub_1004B75C4(a1, a2, &v26);
  uint64_t v5 = v4;
  uint64_t v6 = v4 + 2;
  if (v4 != a2 && v6 != a2)
  {
    uint64_t v8 = v4;
    do
    {
      char v9 = v8;
      uint64_t v8 = v6;
      uint64_t v10 = (std::__shared_weak_count *)v9[3];
      if (v10)
      {
        uint64_t v11 = std::__shared_weak_count::lock(v10);
        if (v11)
        {
          uint64_t v12 = v11;
          if (!*v8)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              unint64_t v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v12);
            }

            goto LABEL_29;
          }

          __int128 v13 = (std::__shared_weak_count *)v9[3];
          if (v13 && (__int128 v14 = std::__shared_weak_count::lock(v13)) != 0LL)
          {
            uint64_t v15 = v14;
            BOOL v16 = *v8 == *v26;
            __int128 v17 = (unint64_t *)&v14->__shared_owners_;
            do
              unint64_t v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v15);
            }
          }

          else
          {
            BOOL v16 = *v26 == 0LL;
          }

          int v19 = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (v20)
          {
            if (!v16) {
              goto LABEL_26;
            }
          }

          else
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
            if (!v16)
            {
LABEL_26:
              __int128 v23 = *(_OWORD *)v8;
              void *v8 = 0LL;
              v8[1] = 0LL;
              uint64_t v24 = (std::__shared_weak_count *)v5[1];
              *(_OWORD *)uint64_t v5 = v23;
              if (v24) {
                std::__shared_weak_count::__release_weak(v24);
              }
              v5 += 2;
            }
          }
        }
      }

__int128 *sub_1004B755C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      __int128 v7 = *v5;
      *(void *)uint64_t v5 = 0LL;
      *((void *)v5 + 1) = 0LL;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      ++v5;
      a4 += 16LL;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

void *sub_1004B75C4(void *a1, void *a2, void **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      uint64_t v6 = (std::__shared_weak_count *)v3[1];
      if (!v6) {
        break;
      }
      __int128 v7 = std::__shared_weak_count::lock(v6);
      if (!v7) {
        break;
      }
      uint64_t v8 = v7;
      if (!*v3)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v8);
        }

        return v3;
      }

      char v9 = (std::__shared_weak_count *)v3[1];
      if (v9 && (uint64_t v10 = std::__shared_weak_count::lock(v9)) != 0LL)
      {
        uint64_t v11 = v10;
        BOOL v12 = *v3 == **a3;
        __int128 v13 = (unint64_t *)&v10->__shared_owners_;
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v11);
        }
      }

      else
      {
        BOOL v12 = **a3 == 0LL;
      }

      uint64_t v15 = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }

      if (v12) {
        return v3;
      }
      v3 += 2;
      if (v3 == a2) {
        return a2;
      }
    }
  }

  return v3;
}

void sub_1004B7704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1004B77B8(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_1004B77B8(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    __int128 v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      int v19 = 0LL;
    }
    unint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    __int128 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        __int128 v23 = (char *)sub_100008BA0(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int128 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)unint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = __src + 8;
  }

  else
  {
    char v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004B79BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B79F4(uint64_t a1)
{
  uint64_t v2 = sub_10002418C((void *)a1, "Unknown");
  sub_10002418C(v2 + 3, "Unknown");
  sub_10002418C((void *)(a1 + 48), "Unknown");
  *(void *)(a1 + 72) = -1LL;
  *(_DWORD *)(a1 + 80) = -1;
  sub_10002418C((void *)(a1 + 88), "Unknown");
  *(void *)(a1 + 112) = -1LL;
  *(_DWORD *)(a1 + 120) = -1;
  sub_10002418C((void *)(a1 + 128), "Unknown");
  *(_DWORD *)(a1 + 152) = 0;
  return a1;
}

void sub_1004B7A9C(_Unwind_Exception *exception_object)
{
}

void sub_1004B7B00(id a1)
{
  uint64_t v1 = operator new(0x4A8uLL);
  sub_10049957C((uint64_t)v1);
  off_1008D60E8 = v1;
}

void sub_1004B7B30(_Unwind_Exception *a1)
{
}

void sub_1004B7B44(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1004B7B74(_Unwind_Exception *a1)
{
}

void sub_1004B7B88(id a1)
{
  uint64_t v1 = operator new(0x350uLL);
  sub_100461C70();
  off_1008D9028 = v1;
}

void sub_1004B7BB8(_Unwind_Exception *a1)
{
}

void sub_1004B7BCC(id a1)
{
  uint64_t v1 = operator new(0x310uLL);
  sub_10036BB90();
  qword_1008D6450 = (uint64_t)v1;
}

void sub_1004B7BFC(_Unwind_Exception *a1)
{
}

void sub_1004B7C10(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_1004B7C40(_Unwind_Exception *a1)
{
}

void sub_1004B7C54(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1004B7C84(_Unwind_Exception *a1)
{
}

void sub_1004B7C98(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100256C70();
  qword_1008D6168 = (uint64_t)v1;
}

void sub_1004B7CC8(_Unwind_Exception *a1)
{
}

void sub_1004B7CDC(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1_Block_object_dispose(&a9, 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10_Block_object_dispose(&a9, 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2_Block_object_dispose(&a9, 8) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5_Block_object_dispose(&a9, 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_1004B7DE4(_Unwind_Exception *a1)
{
}

void sub_1004B7DF8(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  sub_100242DC4(v1);
  v1[10] = 0LL;
  v1[9] = 0LL;
  v1[8] = v1 + 9;
  qword_1008D6770 = (uint64_t)v1;
}

void sub_1004B7E38(_Unwind_Exception *a1)
{
}

void sub_1004B7E4C(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1004B7E7C(_Unwind_Exception *a1)
{
}

void sub_1004B7E90(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_1004B7EC0(_Unwind_Exception *a1)
{
}

uint64_t *sub_1004B7ED4(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_10089BD80;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    uint64_t v5 = (void *)(a2 + 8);
  }
  else {
    uint64_t v5 = 0LL;
  }
  sub_1002762B0((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1004B7F30(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v3 = (void *)sub_100272B18(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1004B7F50(std::__shared_weak_count *a1)
{
}

void sub_1004B7F64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_100272B18(v1);
    operator delete(v2);
  }

uint64_t sub_1004B7F8C(uint64_t result, char *a2, uint64_t a3, char a4)
{
  unint64_t v7 = (char *)result;
LABEL_2:
  uint64_t v8 = v7;
  while (2)
  {
    unint64_t v7 = v8;
    uint64_t v9 = a2 - v8;
    switch(v9)
    {
      case 0LL:
      case 1LL:
        return result;
      case 2LL:
        int v36 = *(a2 - 1);
        int v37 = *v8;
        if (v36 < v37)
        {
          char *v8 = v36;
          *(a2 - 1) = v37;
        }

        return result;
      case 3LL:
        return (uint64_t)sub_1004B85FC(v8, v8 + 1, a2 - 1);
      case 4LL:
        return (uint64_t)sub_1004B8830(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5LL:
        __int16 v38 = v8 + 2;
        uint64_t v39 = v8 + 3;
        uint64_t result = (uint64_t)sub_1004B8830(v8, v8 + 1, v8 + 2, v8 + 3);
        int v40 = *(a2 - 1);
        int v41 = v8[3];
        if (v40 < v41)
        {
          *uint64_t v39 = v40;
          *(a2 - 1) = v41;
          int v42 = (char)*v39;
          int v43 = (char)*v38;
          if (v42 < v43)
          {
            *__int16 v38 = v42;
            *uint64_t v39 = v43;
            int v44 = v8[1];
            if (v42 < v44)
            {
              v8[1] = v42;
              _DWORD v8[2] = v44;
              int v45 = *v8;
              if (v42 < v45)
              {
                char *v8 = v42;
                v8[1] = v45;
              }
            }
          }
        }

        return result;
      default:
        if (v9 <= 23)
        {
          __int16 v46 = v8 + 1;
          BOOL v48 = v8 == a2 || v46 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              uint64_t v49 = 0LL;
              __int16 v50 = v8;
              do
              {
                int v51 = v50[1];
                int v52 = *v50;
                __int16 v50 = v46;
                if (v51 < v52)
                {
                  uint64_t v53 = v49;
                  while (1)
                  {
                    v8[v53 + 1] = v52;
                    if (!v53) {
                      break;
                    }
                    int v52 = v8[--v53];
                    if (v51 >= v52)
                    {
                      double v54 = &v8[v53 + 1];
                      goto LABEL_79;
                    }
                  }

                  double v54 = v8;
LABEL_79:
                  *double v54 = v51;
                }

                __int16 v46 = v50 + 1;
                ++v49;
              }

              while (v50 + 1 != a2);
            }
          }

          else if (!v48)
          {
            do
            {
              int v83 = v7[1];
              int v84 = *v7;
              unint64_t v7 = v46;
              if (v83 < v84)
              {
                do
                {
                  *__int16 v46 = v84;
                  int v84 = *(v46 - 2);
                  --v46;
                }

                while (v83 < v84);
                *__int16 v46 = v83;
              }

              __int16 v46 = v7 + 1;
            }

            while (v7 + 1 != a2);
          }

          return result;
        }

        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v55 = (unint64_t)(v9 - 2) >> 1;
            int64_t v56 = v55;
            do
            {
              int64_t v57 = v56;
              if (v55 >= v56)
              {
                uint64_t v58 = (2 * v56) | 1;
                __int16 v59 = &v8[v58];
                if (2 * v57 + 2 >= v9)
                {
                  LOBYTE(v60) = *v59;
                }

                else
                {
                  int v60 = *v59;
                  int v61 = v59[1];
                  BOOL v62 = v60 < v61;
                  if (v60 <= v61) {
                    LOBYTE(v60) = v59[1];
                  }
                  if (v62)
                  {
                    ++v59;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                }

                __int16 v63 = &v8[v57];
                int v64 = v8[v57];
                if (v64 <= (char)v60)
                {
                  do
                  {
                    __int16 v65 = v59;
                    *__int16 v63 = v60;
                    if (v55 < v58) {
                      break;
                    }
                    uint64_t v66 = (2 * v58) | 1;
                    __int16 v59 = &v8[v66];
                    uint64_t v58 = 2 * v58 + 2;
                    if (v58 >= v9)
                    {
                      LOBYTE(v60) = *v59;
                      uint64_t v58 = v66;
                    }

                    else
                    {
                      int v60 = *v59;
                      uint64_t result = v59[1];
                      BOOL v67 = v60 < (int)result;
                      if (v67) {
                        ++v59;
                      }
                      else {
                        uint64_t v58 = v66;
                      }
                    }

                    __int16 v63 = v65;
                  }

                  while (v64 <= (char)v60);
                  *__int16 v65 = v64;
                }
              }

              int64_t v56 = v57 - 1;
            }

            while (v57);
            do
            {
              uint64_t v68 = 0LL;
              char v69 = *v8;
              __int16 v70 = v8;
              do
              {
                __int16 v71 = &v70[v68 + 1];
                uint64_t v72 = (2 * v68) | 1;
                uint64_t v68 = 2 * v68 + 2;
                if (v68 >= v9)
                {
                  LOBYTE(v73) = *v71;
                  uint64_t v68 = v72;
                }

                else
                {
                  int v73 = *v71;
                  int v74 = v71[1];
                  BOOL v75 = v73 < v74;
                  if (v73 <= v74) {
                    LOBYTE(v73) = v71[1];
                  }
                  if (v75) {
                    ++v71;
                  }
                  else {
                    uint64_t v68 = v72;
                  }
                }

                *__int16 v70 = v73;
                __int16 v70 = v71;
              }

              while (v68 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
              if (v71 == --a2)
              {
                *__int16 v71 = v69;
              }

              else
              {
                *__int16 v71 = *a2;
                *a2 = v69;
                unint64_t v76 = v71 - v8 - 1;
                if (v71 - v8 + 1 >= 2)
                {
                  uint64_t v77 = &v8[v76 >> 1];
                  int v78 = *v77;
                  int v79 = *v71;
                  if (v78 < v79)
                  {
                    unint64_t v80 = v76 >> 1;
                    do
                    {
                      int v81 = v77;
                      *__int16 v71 = v78;
                      if (!v80) {
                        break;
                      }
                      unint64_t v82 = v80 - 1;
                      unint64_t v80 = (v80 - 1) >> 1;
                      uint64_t v77 = &v8[v82 >> 1];
                      int v78 = *v77;
                      __int16 v71 = v81;
                    }

                    while (v78 < v79);
                    *int v81 = v79;
                  }
                }
              }

              BOOL v62 = v9-- <= 2;
            }

            while (!v62);
          }

          return result;
        }

        uint64_t v10 = &v8[(unint64_t)v9 >> 1];
        if ((unint64_t)v9 < 0x81)
        {
          uint64_t result = (uint64_t)sub_1004B85FC(&v7[(unint64_t)v9 >> 1], v7, a2 - 1);
        }

        else
        {
          unint64_t v11 = (unint64_t)v9 >> 1;
          sub_1004B85FC(v7, &v7[(unint64_t)v9 >> 1], a2 - 1);
          sub_1004B85FC(v7 + 1, &v7[v11 - 1], a2 - 2);
          sub_1004B85FC(v7 + 2, &v7[v11 + 1], a2 - 3);
          uint64_t result = (uint64_t)sub_1004B85FC(&v7[v11 - 1], v10, &v7[v11 + 1]);
          char v12 = *v7;
          *unint64_t v7 = v7[v11];
          v7[v11] = v12;
        }

        --a3;
        int v13 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v13)
        {
          if (v13 >= *(a2 - 1))
          {
            uint64_t v28 = v7 + 1;
            do
            {
              uint64_t v8 = v28;
              if (v28 >= a2) {
                break;
              }
              ++v28;
            }

            while (v13 >= *v8);
          }

          else
          {
            uint64_t v8 = v7;
            do
              int v27 = *++v8;
            while (v13 >= v27);
          }

          uint64_t v29 = a2;
          if (v8 < a2)
          {
            uint64_t v29 = a2;
            do
              int v30 = *--v29;
            while (v13 < v30);
          }

          if (v8 < v29)
          {
            char v31 = *v8;
            char v32 = *v29;
            do
            {
              char *v8 = v32;
              *uint64_t v29 = v31;
              do
              {
                int v33 = *++v8;
                char v31 = v33;
              }

              while (v13 >= v33);
              do
              {
                int v34 = *--v29;
                char v32 = v34;
              }

              while (v13 < v34);
            }

            while (v8 < v29);
          }

          int64x2_t v35 = v8 - 1;
          if (v8 - 1 != v7) {
            *unint64_t v7 = *v35;
          }
          a4 = 0;
          char *v35 = v13;
          continue;
        }

        uint64_t v14 = 0LL;
        do
          int v15 = v7[++v14];
        while (v15 < v13);
        uint64_t v16 = &v7[v14];
        uint64_t v17 = a2;
        if (v14 == 1)
        {
          uint64_t v17 = a2;
          do
          {
            if (v16 >= v17) {
              break;
            }
            int v19 = *--v17;
          }

          while (v19 >= v13);
        }

        else
        {
          do
            int v18 = *--v17;
          while (v18 >= v13);
        }

        if (v16 >= v17)
        {
          uint64_t v25 = v16 - 1;
        }

        else
        {
          char v20 = *v17;
          unint64_t v21 = v17;
          unint64_t v22 = &v7[v14];
          do
          {
            char *v22 = v20;
            char *v21 = v15;
            do
            {
              int v23 = *++v22;
              LOBYTE(v15) = v23;
            }

            while (v23 < v13);
            do
            {
              int v24 = *--v21;
              char v20 = v24;
            }

            while (v24 >= v13);
          }

          while (v22 < v21);
          uint64_t v25 = v22 - 1;
        }

        if (v25 != v7) {
          *unint64_t v7 = *v25;
        }
        char *v25 = v13;
        if (v16 < v17)
        {
LABEL_32:
          uint64_t result = sub_1004B7F8C(v7, v25, a3, a4 & 1);
          a4 = 0;
          uint64_t v8 = v25 + 1;
          continue;
        }

        BOOL v26 = sub_1004B866C(v7, v25);
        uint64_t v8 = v25 + 1;
        uint64_t result = sub_1004B866C(v25 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v26) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = v25;
        if (!v26) {
          goto LABEL_2;
        }
        return result;
    }
  }

_BYTE *sub_1004B85FC(_BYTE *result, _BYTE *a2, _BYTE *a3)
{
  int v3 = (char)*a2;
  int v4 = (char)*result;
  int v5 = (char)*a3;
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      int v6 = (char)*a2;
      int v7 = (char)*result;
      if (v6 < v7)
      {
        *uint64_t result = v6;
        *a2 = v7;
      }
    }
  }

  else
  {
    if (v5 >= v3)
    {
      *uint64_t result = v3;
      *a2 = v4;
      int v8 = (char)*a3;
      if (v8 >= v4) {
        return result;
      }
      *a2 = v8;
    }

    else
    {
      *uint64_t result = v5;
    }

    *a3 = v4;
  }

  return result;
}

BOOL sub_1004B866C(char *a1, char *a2)
{
  int64_t v4 = a2 - a1;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }

      return result;
    case 3LL:
      sub_1004B85FC(a1, a1 + 1, a2 - 1);
      return 1LL;
    case 4LL:
      sub_1004B8830(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1LL;
    case 5LL:
      uint64_t v16 = a1 + 2;
      uint64_t v17 = a1 + 3;
      sub_1004B8830(a1, a1 + 1, a1 + 2, a1 + 3);
      int v18 = *(a2 - 1);
      int v19 = a1[3];
      if (v18 < v19)
      {
        _BYTE *v17 = v18;
        *(a2 - 1) = v19;
        int v20 = (char)*v17;
        int v21 = (char)*v16;
        if (v20 < v21)
        {
          _BYTE *v16 = v20;
          _BYTE *v17 = v21;
          int v22 = a1[1];
          if (v20 < v22)
          {
            a1[1] = v20;
            a1[2] = v22;
            int v23 = *a1;
            if (v20 < v23)
            {
              *a1 = v20;
              a1[1] = v23;
            }
          }
        }
      }

      return 1LL;
    default:
      int v8 = a1 + 2;
      sub_1004B85FC(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      uint64_t v10 = 0LL;
      int v11 = 0;
      break;
  }

  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (v12 < v13)
    {
      uint64_t v14 = v10;
      while (1)
      {
        a1[v14 + 3] = v13;
        if (v14 == -2) {
          break;
        }
        int v13 = a1[v14-- + 1];
        if (v12 >= v13)
        {
          int v15 = &a1[v14 + 3];
          goto LABEL_13;
        }
      }

      int v15 = a1;
LABEL_13:
      *int v15 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }

    int v8 = v9;
    ++v10;
    if (++v9 == a2) {
      return 1LL;
    }
  }

_BYTE *sub_1004B8830(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  BOOL result = sub_1004B85FC(a1, a2, a3);
  int v9 = (char)*a4;
  int v10 = (char)*a3;
  if (v9 < v10)
  {
    *a3 = v9;
    *a4 = v10;
    int v11 = (char)*a3;
    int v12 = (char)*a2;
    if (v11 < v12)
    {
      *a2 = v11;
      *a3 = v12;
      int v13 = (char)*a2;
      int v14 = (char)*a1;
      if (v13 < v14)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }

  return result;
}

uint64_t sub_1004B88AC(uint64_t result, char *a2, uint64_t a3, char a4)
{
  int v7 = (char *)result;
LABEL_2:
  int v8 = v7;
  while (2)
  {
    int v7 = v8;
    uint64_t v9 = a2 - v8;
    switch(v9)
    {
      case 0LL:
      case 1LL:
        return result;
      case 2LL:
        int v36 = *(a2 - 1);
        int v37 = *v8;
        if (v36 < v37)
        {
          char *v8 = v36;
          *(a2 - 1) = v37;
        }

        return result;
      case 3LL:
        return (uint64_t)sub_1004B85FC(v8, v8 + 1, a2 - 1);
      case 4LL:
        return (uint64_t)sub_1004B8830(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5LL:
        __int16 v38 = v8 + 2;
        uint64_t v39 = v8 + 3;
        BOOL result = (uint64_t)sub_1004B8830(v8, v8 + 1, v8 + 2, v8 + 3);
        int v40 = *(a2 - 1);
        int v41 = v8[3];
        if (v40 < v41)
        {
          *uint64_t v39 = v40;
          *(a2 - 1) = v41;
          int v42 = (char)*v39;
          int v43 = (char)*v38;
          if (v42 < v43)
          {
            *__int16 v38 = v42;
            *uint64_t v39 = v43;
            int v44 = v8[1];
            if (v42 < v44)
            {
              v8[1] = v42;
              _DWORD v8[2] = v44;
              int v45 = *v8;
              if (v42 < v45)
              {
                char *v8 = v42;
                v8[1] = v45;
              }
            }
          }
        }

        return result;
      default:
        if (v9 <= 23)
        {
          __int16 v46 = v8 + 1;
          BOOL v48 = v8 == a2 || v46 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              uint64_t v49 = 0LL;
              __int16 v50 = v8;
              do
              {
                int v51 = v50[1];
                int v52 = *v50;
                __int16 v50 = v46;
                if (v51 < v52)
                {
                  uint64_t v53 = v49;
                  while (1)
                  {
                    v8[v53 + 1] = v52;
                    if (!v53) {
                      break;
                    }
                    int v52 = v8[--v53];
                    if (v51 >= v52)
                    {
                      double v54 = &v8[v53 + 1];
                      goto LABEL_79;
                    }
                  }

                  double v54 = v8;
LABEL_79:
                  *double v54 = v51;
                }

                __int16 v46 = v50 + 1;
                ++v49;
              }

              while (v50 + 1 != a2);
            }
          }

          else if (!v48)
          {
            do
            {
              int v83 = v7[1];
              int v84 = *v7;
              int v7 = v46;
              if (v83 < v84)
              {
                do
                {
                  *__int16 v46 = v84;
                  int v84 = *(v46 - 2);
                  --v46;
                }

                while (v83 < v84);
                *__int16 v46 = v83;
              }

              __int16 v46 = v7 + 1;
            }

            while (v7 + 1 != a2);
          }

          return result;
        }

        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v55 = (unint64_t)(v9 - 2) >> 1;
            int64_t v56 = v55;
            do
            {
              int64_t v57 = v56;
              if (v55 >= v56)
              {
                uint64_t v58 = (2 * v56) | 1;
                __int16 v59 = &v8[v58];
                if (2 * v57 + 2 >= v9)
                {
                  LOBYTE(v60) = *v59;
                }

                else
                {
                  int v60 = *v59;
                  int v61 = v59[1];
                  BOOL v62 = v60 < v61;
                  if (v60 <= v61) {
                    LOBYTE(v60) = v59[1];
                  }
                  if (v62)
                  {
                    ++v59;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                }

                __int16 v63 = &v8[v57];
                int v64 = v8[v57];
                if (v64 <= (char)v60)
                {
                  do
                  {
                    __int16 v65 = v59;
                    *__int16 v63 = v60;
                    if (v55 < v58) {
                      break;
                    }
                    uint64_t v66 = (2 * v58) | 1;
                    __int16 v59 = &v8[v66];
                    uint64_t v58 = 2 * v58 + 2;
                    if (v58 >= v9)
                    {
                      LOBYTE(v60) = *v59;
                      uint64_t v58 = v66;
                    }

                    else
                    {
                      int v60 = *v59;
                      BOOL result = v59[1];
                      BOOL v67 = v60 < (int)result;
                      if (v67) {
                        ++v59;
                      }
                      else {
                        uint64_t v58 = v66;
                      }
                    }

                    __int16 v63 = v65;
                  }

                  while (v64 <= (char)v60);
                  *__int16 v65 = v64;
                }
              }

              int64_t v56 = v57 - 1;
            }

            while (v57);
            do
            {
              uint64_t v68 = 0LL;
              char v69 = *v8;
              __int16 v70 = v8;
              do
              {
                __int16 v71 = &v70[v68 + 1];
                uint64_t v72 = (2 * v68) | 1;
                uint64_t v68 = 2 * v68 + 2;
                if (v68 >= v9)
                {
                  LOBYTE(v73) = *v71;
                  uint64_t v68 = v72;
                }

                else
                {
                  int v73 = *v71;
                  int v74 = v71[1];
                  BOOL v75 = v73 < v74;
                  if (v73 <= v74) {
                    LOBYTE(v73) = v71[1];
                  }
                  if (v75) {
                    ++v71;
                  }
                  else {
                    uint64_t v68 = v72;
                  }
                }

                *__int16 v70 = v73;
                __int16 v70 = v71;
              }

              while (v68 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
              if (v71 == --a2)
              {
                *__int16 v71 = v69;
              }

              else
              {
                *__int16 v71 = *a2;
                *a2 = v69;
                unint64_t v76 = v71 - v8 - 1;
                if (v71 - v8 + 1 >= 2)
                {
                  uint64_t v77 = &v8[v76 >> 1];
                  int v78 = *v77;
                  int v79 = *v71;
                  if (v78 < v79)
                  {
                    unint64_t v80 = v76 >> 1;
                    do
                    {
                      int v81 = v77;
                      *__int16 v71 = v78;
                      if (!v80) {
                        break;
                      }
                      unint64_t v82 = v80 - 1;
                      unint64_t v80 = (v80 - 1) >> 1;
                      uint64_t v77 = &v8[v82 >> 1];
                      int v78 = *v77;
                      __int16 v71 = v81;
                    }

                    while (v78 < v79);
                    *int v81 = v79;
                  }
                }
              }

              BOOL v62 = v9-- <= 2;
            }

            while (!v62);
          }

          return result;
        }

        int v10 = &v8[(unint64_t)v9 >> 1];
        if ((unint64_t)v9 < 0x81)
        {
          BOOL result = (uint64_t)sub_1004B85FC(&v7[(unint64_t)v9 >> 1], v7, a2 - 1);
        }

        else
        {
          unint64_t v11 = (unint64_t)v9 >> 1;
          sub_1004B85FC(v7, &v7[(unint64_t)v9 >> 1], a2 - 1);
          sub_1004B85FC(v7 + 1, &v7[v11 - 1], a2 - 2);
          sub_1004B85FC(v7 + 2, &v7[v11 + 1], a2 - 3);
          BOOL result = (uint64_t)sub_1004B85FC(&v7[v11 - 1], v10, &v7[v11 + 1]);
          char v12 = *v7;
          *int v7 = v7[v11];
          v7[v11] = v12;
        }

        --a3;
        int v13 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v13)
        {
          if (v13 >= *(a2 - 1))
          {
            uint64_t v28 = v7 + 1;
            do
            {
              int v8 = v28;
              if (v28 >= a2) {
                break;
              }
              ++v28;
            }

            while (v13 >= *v8);
          }

          else
          {
            int v8 = v7;
            do
              int v27 = *++v8;
            while (v13 >= v27);
          }

          uint64_t v29 = a2;
          if (v8 < a2)
          {
            uint64_t v29 = a2;
            do
              int v30 = *--v29;
            while (v13 < v30);
          }

          if (v8 < v29)
          {
            char v31 = *v8;
            char v32 = *v29;
            do
            {
              char *v8 = v32;
              *uint64_t v29 = v31;
              do
              {
                int v33 = *++v8;
                char v31 = v33;
              }

              while (v13 >= v33);
              do
              {
                int v34 = *--v29;
                char v32 = v34;
              }

              while (v13 < v34);
            }

            while (v8 < v29);
          }

          int64x2_t v35 = v8 - 1;
          if (v8 - 1 != v7) {
            *int v7 = *v35;
          }
          a4 = 0;
          char *v35 = v13;
          continue;
        }

        uint64_t v14 = 0LL;
        do
          int v15 = v7[++v14];
        while (v15 < v13);
        uint64_t v16 = &v7[v14];
        uint64_t v17 = a2;
        if (v14 == 1)
        {
          uint64_t v17 = a2;
          do
          {
            if (v16 >= v17) {
              break;
            }
            int v19 = *--v17;
          }

          while (v19 >= v13);
        }

        else
        {
          do
            int v18 = *--v17;
          while (v18 >= v13);
        }

        if (v16 >= v17)
        {
          uint64_t v25 = v16 - 1;
        }

        else
        {
          char v20 = *v17;
          int v21 = v17;
          int v22 = &v7[v14];
          do
          {
            char *v22 = v20;
            char *v21 = v15;
            do
            {
              int v23 = *++v22;
              LOBYTE(v15) = v23;
            }

            while (v23 < v13);
            do
            {
              int v24 = *--v21;
              char v20 = v24;
            }

            while (v24 >= v13);
          }

          while (v22 < v21);
          uint64_t v25 = v22 - 1;
        }

        if (v25 != v7) {
          *int v7 = *v25;
        }
        char *v25 = v13;
        if (v16 < v17)
        {
LABEL_32:
          BOOL result = sub_1004B88AC(v7, v25, a3, a4 & 1);
          a4 = 0;
          int v8 = v25 + 1;
          continue;
        }

        BOOL v26 = sub_1004B8F1C(v7, v25);
        int v8 = v25 + 1;
        BOOL result = sub_1004B8F1C(v25 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v26) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = v25;
        if (!v26) {
          goto LABEL_2;
        }
        return result;
    }
  }

BOOL sub_1004B8F1C(char *a1, char *a2)
{
  int64_t v4 = a2 - a1;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }

      return result;
    case 3LL:
      sub_1004B85FC(a1, a1 + 1, a2 - 1);
      return 1LL;
    case 4LL:
      sub_1004B8830(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1LL;
    case 5LL:
      uint64_t v16 = a1 + 2;
      uint64_t v17 = a1 + 3;
      sub_1004B8830(a1, a1 + 1, a1 + 2, a1 + 3);
      int v18 = *(a2 - 1);
      int v19 = a1[3];
      if (v18 < v19)
      {
        _BYTE *v17 = v18;
        *(a2 - 1) = v19;
        int v20 = (char)*v17;
        int v21 = (char)*v16;
        if (v20 < v21)
        {
          _BYTE *v16 = v20;
          _BYTE *v17 = v21;
          int v22 = a1[1];
          if (v20 < v22)
          {
            a1[1] = v20;
            a1[2] = v22;
            int v23 = *a1;
            if (v20 < v23)
            {
              *a1 = v20;
              a1[1] = v23;
            }
          }
        }
      }

      return 1LL;
    default:
      int v8 = a1 + 2;
      sub_1004B85FC(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      uint64_t v10 = 0LL;
      int v11 = 0;
      break;
  }

  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (v12 < v13)
    {
      uint64_t v14 = v10;
      while (1)
      {
        a1[v14 + 3] = v13;
        if (v14 == -2) {
          break;
        }
        int v13 = a1[v14-- + 1];
        if (v12 >= v13)
        {
          int v15 = &a1[v14 + 3];
          goto LABEL_13;
        }
      }

      int v15 = a1;
LABEL_13:
      *int v15 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }

    int v8 = v9;
    ++v10;
    if (++v9 == a2) {
      return 1LL;
    }
  }

void sub_1004B90E0(id a1)
{
  uint64_t v1 = operator new(0x48uLL);
  sub_10054A778((uint64_t)v1);
  off_1008D90F0 = v1;
}

void sub_1004B9110(_Unwind_Exception *a1)
{
}

void sub_1004B9124(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003ADFF0((uint64_t)v1);
  off_1008D5F38 = v1;
}

void sub_1004B9154(_Unwind_Exception *a1)
{
}

void sub_1004B9168(id a1)
{
  uint64_t v1 = operator new(0xF8uLL);
  sub_1003EC784((uint64_t)v1);
  off_1008D60B8 = v1;
}

void sub_1004B9198(_Unwind_Exception *a1)
{
}

  ;
}

  ;
}

void sub_1004B91DC(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1004B91E8(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100213C20(a1, 22);
  *uint64_t v2 = off_10089BE68;
  v2[32] = off_10089BF48;
  v2[33] = off_10089BF98;
  v2[34] = off_10089BFC8;
  sub_100242DC4(v2 + 35);
  *(void *)(a1 + 344) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 360) = 0LL;
  *(void *)(a1 + 36_Block_object_dispose(&a9, 8) = a1 + 376;
  *(_DWORD *)(a1 + 392) = 0;
  *(void *)(a1 + 40_Block_object_dispose(&a9, 8) = 0LL;
  *(void *)(a1 + 416) = 0LL;
  *(void *)(a1 + 400) = 0LL;
  sub_100242DC4(a1 + 560);
  *(void *)(a1 + 6sub_100242E28(v1 + 40) = 0LL;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 649) = 0;
  *(_WORD *)(a1 + 653) = 0;
  for (int i = 1; i != 3; ++i)
  {
    int v5 = i;
    int v6 = (unsigned int *)&v5;
    *((_DWORD *)sub_100275FD4((uint64_t **)(a1 + 368), &v5, (uint64_t)&unk_1006C2518, &v6) + _Block_object_dispose(&a9, 8) = 0;
  }

  return a1;
}

void sub_1004B92EC(_Unwind_Exception *a1)
{
  int v6 = (void **)(v1 + 43);
  int v7 = (void *)v1[50];
  if (v7)
  {
    v1[51] = v7;
    operator delete(v7);
  }

  sub_10023BF24(v3, *v4);
  int v8 = *v6;
  if (*v6)
  {
    v1[44] = v8;
    operator delete(v8);
  }

  sub_100242E28(v2);
  sub_100213D34((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B9368(uint64_t a1)
{
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 536) = 0LL;
  *(void *)(a1 + 552) = 0LL;
  *(void *)(a1 + 472) = 0LL;
  *(void *)(a1 + 480) = 0LL;
  *(void *)(a1 + 464) = 0LL;
  *(void *)(a1 + 486) = 0LL;
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089C1D0);
  }
  sub_1006225C0((void *)qword_1008D5F18, a1 + 272);
  uint64_t v2 = sub_1002E6E9C();
  *(_BYTE *)(a1 + 655) = sub_1002D0F8C(v2) > 1;
  return 0LL;
}

BOOL sub_1004B93F0()
{
  char v3 = 0;
  sub_100242CA4(&v3);
  int v0 = sub_1001D5D88((uint64_t)off_10089BFE0);
  if (!v0)
  {
    int v0 = sub_1001B7C4C((uint64_t)&unk_10089C090);
    if (!v0) {
      sub_1001C87BC((__n128 *)off_10089C0C0);
    }
  }

  BOOL v1 = v0 != 0;
  sub_100242CD8(&v3);
  return v1;
}

void sub_1004B945C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL sub_1004B9470()
{
  char v2 = 0;
  sub_100242CA4(&v2);
  sub_1001C8874(off_10089C0C0);
  sub_1001B7DDC((uint64_t)&unk_10089C090);
  BOOL v0 = sub_1001D614C() != 0;
  sub_100242CD8(&v2);
  return v0;
}

void sub_1004B94CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004B94E4(uint64_t a1)
{
  char v3 = *(uint64_t **)(a1 + 344);
  char v2 = *(uint64_t **)(a1 + 352);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        int v5 = *(void **)(v4 + 80);
        if (v5)
        {
          *(void *)(v4 + 8_Block_object_dispose(&a9, 8) = v5;
          operator delete(v5);
        }

        operator delete((void *)v4);
        char v2 = *(uint64_t **)(a1 + 352);
      }

      ++v3;
    }

    while (v3 != v2);
    char v3 = *(uint64_t **)(a1 + 344);
  }

  *(void *)(a1 + 352) = v3;
  int v6 = *(id ***)(a1 + 624);
  int v7 = *(id ***)(a1 + 632);
  if (v6 != v7)
  {
    do
    {
      if (*v6)
      {
        int v8 = sub_1003A2000(*v6);
        operator delete(v8);
        int v7 = *(id ***)(a1 + 632);
      }

      ++v6;
    }

    while (v6 != v7);
    int v6 = *(id ***)(a1 + 624);
  }

  *(void *)(a1 + 632) = v6;
  sub_10023BF24(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 36_Block_object_dispose(&a9, 8) = a1 + 376;
  uint64_t v9 = *(uint64_t **)(a1 + 536);
  if (v9)
  {
    void v9[3] = 0LL;
    uint64_t v10 = sub_1004C2AB8(v9);
    operator delete(v10);
  }

  *(void *)(a1 + 536) = 0LL;
  sub_1004B95C8(a1);
  return 0LL;
}

void sub_1004B95C8(uint64_t a1)
{
  char v2 = *(dispatch_source_s **)(a1 + 552);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 552));
    *(void *)(a1 + 552) = 0LL;
  }

void sub_1004B95FC(uint64_t a1, uint64_t a2)
{
  int v5 = *(char **)(a1 + 344);
  uint64_t v4 = *(char **)(a1 + 352);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(a1 + 352);
        break;
      }
    }
  }

  if (v5 != v4)
  {
    int v25 = *(_DWORD *)(a2 + 20);
    *(void *)std::string buf = &v25;
    if ((sub_100275FD4((uint64_t **)(a1 + 368), &v25, (uint64_t)&unk_1006C2518, (unsigned int **)buf)[4] & 0x80000000) != 0)
    {
      int v25 = *(_DWORD *)(a2 + 20);
      *(void *)std::string buf = &v25;
      if ((sub_100275FD4((uint64_t **)(a1 + 368), &v25, (uint64_t)&unk_1006C2518, (unsigned int **)buf)[4] & 0x80000000) == 0)
      {
        int v7 = (os_log_s *)qword_1008F7728;
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_FAULT)) {
          sub_100685CE8(v7, v8, v9, v10, v11, v12, v13, v14);
        }
      }
    }

    else
    {
      int v25 = *(_DWORD *)(a2 + 20);
      *(void *)std::string buf = &v25;
      int v6 = sub_100275FD4((uint64_t **)(a1 + 368), &v25, (uint64_t)&unk_1006C2518, (unsigned int **)buf);
      --*((_DWORD *)v6 + 8);
      *(void *)std::string buf = _NSConcreteStackBlock;
      uint64_t v27 = 3221225472LL;
      uint64_t v28 = sub_1004BC2E8;
      uint64_t v29 = &unk_10089C0D8;
      uint64_t v30 = a1;
      sub_1004BC22C((os_unfair_lock_s *)(a1 + 392), buf);
    }

    int v15 = *(char **)(a1 + 352);
    int64_t v16 = v15 - (v5 + 8);
    if (v15 != v5 + 8) {
      memmove(v5, v5 + 8, v15 - (v5 + 8));
    }
    *(void *)(a1 + 352) = &v5[v16];
    uint64_t v17 = *(void **)(a2 + 80);
    if (v17)
    {
      *(void *)(a2 + 8_Block_object_dispose(&a9, 8) = v17;
      operator delete(v17);
    }

    operator delete((void *)a2);
    int v18 = *(uint64_t **)(a1 + 536);
    if (v18)
    {
      int v19 = *(uint64_t **)(a1 + 344);
      int v20 = *(uint64_t **)(a1 + 352);
      if (v19 == v20) {
        goto LABEL_20;
      }
      char v21 = 0;
      do
      {
        uint64_t v22 = *v19++;
        v21 |= *(_DWORD *)(v22 + 32) > 2;
      }

      while (v19 != v20);
      if ((v21 & 1) == 0)
      {
LABEL_20:
        int v23 = (os_log_s *)qword_1008F7728;
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Releasing audio context", buf, 2u);
          int v18 = *(uint64_t **)(a1 + 536);
        }

        if (v18)
        {
          int v24 = sub_1004C2AB8(v18);
          operator delete(v24);
        }

        *(void *)(a1 + 536) = 0LL;
      }
    }
  }

uint64_t sub_1004B9840(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = sub_1004F5BA8(a2, a3);
  if (result)
  {
    uint64_t v5 = result;
    int v6 = operator new(0x18uLL);
    void v6[4] = 1;
    *(void *)int v6 = &off_10089C138;
    *((void *)v6 + 2) = v5;
    *(void *)(a2 + sub_100242E28(v1 + 40) = v6;
    if (qword_1008D98D0 != -1) {
      dispatch_once(&qword_1008D98D0, &stru_10089C210);
    }
    return sub_10041C240(qword_1008D98C8, v6);
  }

  else
  {
    *(void *)(a2 + sub_100242E28(v1 + 40) = 0LL;
  }

  return result;
}

uint64_t sub_1004B98E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = sub_1004F5CB8(a2, a3);
  if (result)
  {
    uint64_t v5 = result;
    int v6 = operator new(0x18uLL);
    void v6[4] = 1;
    *(void *)int v6 = &off_10089C138;
    *((void *)v6 + 2) = v5;
    *(void *)(a2 + 56) = v6;
    if (qword_1008D98D0 != -1) {
      dispatch_once(&qword_1008D98D0, &stru_10089C210);
    }
    return sub_10041C240(qword_1008D98C8, v6);
  }

  else
  {
    *(void *)(a2 + 56) = 0LL;
  }

  return result;
}

uint64_t sub_1004B9990(uint64_t a1, uint64_t a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 280);
  uint64_t v4 = *(uint64_t **)(a1 + 344);
  if (v4 != *(uint64_t **)(a1 + 352))
  {
    while (1)
    {
      uint64_t v5 = *v4;
      if (*(void *)(*v4 + 40) == a2) {
        break;
      }
      if (*(void *)(v5 + 56) == a2) {
        goto LABEL_8;
      }
LABEL_14:
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
      sub_100685DA0((uint64_t)v14, v5);
    }
    sub_1004F5DC8(v5);
    if (*(void *)(v5 + 56) == a2)
    {
LABEL_8:
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
        sub_100685D58((uint64_t)v13, v5);
      }
      sub_1004F5DC8(v5);
    }

    char v9 = 0;
    sub_100242CA4(&v9);
    int v6 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = *(id *)(v5 + 8);
      *(_DWORD *)std::string buf = 138412290;
      id v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disconnect stalled device %@", buf, 0xCu);
    }

    sub_1001D6984(*(void *)v5);
    sub_100242CD0(&v9);
    sub_100242CD8(&v9);
    goto LABEL_14;
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_1004B9B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1004B9B94(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100242F28((uint64_t)v24, a1 + 280);
  for (int i = *(int ***)(a1 + 344); i != *(int ***)(a1 + 352); ++i)
  {
    uint64_t v8 = *i;
    if (*(void *)*i == a2)
    {
      id v9 = *((id *)v8 + 1);
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089C230);
      }
      uint64_t v10 = off_1008D5F28;
      sub_10002418C(__p, "IsPrimaryHearingAid");
      int v11 = sub_1005CE5A8((uint64_t)v10, v9, (uint64_t)__p);
      int v12 = v11;
      if (v23 < 0)
      {
        operator delete(__p[0]);
        if (!v12) {
          goto LABEL_14;
        }
      }

      else if (!v11)
      {
        goto LABEL_14;
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089C230);
      }
      sub_1005C9A38((uint64_t)off_1008D5F28, v9, @"IsPrimaryHearingAid");
LABEL_14:
      uint64_t v13 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = "No";
        if (a4) {
          uint64_t v14 = "Yes";
        }
        *(_DWORD *)std::string buf = 138412546;
        id v26 = v9;
        __int16 v27 = 2080;
        uint64_t v28 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Disconnected from device %@ wakeUp %s",  buf,  0x16u);
      }

      for (j = *(int ***)(a1 + 344); j != *(int ***)(a1 + 352); ++j)
      {
        int64_t v16 = *j;
        if (*j != v8) {
          goto LABEL_23;
        }
      }

      int64_t v16 = 0LL;
LABEL_23:
      int v17 = v8[12];
      if (v8[6] == 2)
      {
        if (v16) {
          sub_1002721D4(**(void **)(a1 + 536), 0);
        }
        sub_1004B95C8(a1);
      }

      if (v17 == 3)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089C230);
        }
        uint64_t v18 = sub_1005CC198((uint64_t)off_1008D5F28, v9, 0);
        if (qword_1008D6198 != -1) {
          dispatch_once(&qword_1008D6198, &stru_10089C250);
        }
        sub_100448BDC((os_unfair_lock_s *)off_1008D6190, 0, v18);
      }

      sub_1004B95FC(a1, (uint64_t)v8);
      if (v16 && v17 != 3 && v16[8] >= 7 && v16[12] == 3)
      {
        int v19 = (os_log_s *)qword_1008F7728;
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
        {
          id v20 = *((id *)v16 + 1);
          *(_DWORD *)std::string buf = 138412290;
          id v26 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Notify session is ready for device %@",  buf,  0xCu);
        }

        sub_1004B9F10(a1);
      }

      return sub_100242FAC((uint64_t)v24);
    }
  }

  return sub_100242FAC((uint64_t)v24);
}

void sub_1004B9ED0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100242FAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B9F10(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 344);
  uint64_t v3 = *(void *)(result + 352);
  if (v2 == v3) {
    goto LABEL_8;
  }
  char v4 = 1;
  do
  {
    BOOL v5 = *(_DWORD *)(*(void *)v2 + 32LL) == 8 && *(_DWORD *)(*(void *)v2 + 48LL) == 3;
    v4 &= v5;
    v2 += 8LL;
  }

  while (v2 != v3);
  if ((v4 & 1) != 0)
  {
LABEL_8:
    sub_100270008(**(void **)(result + 536));
    v8.tv_sec = 0LL;
    *(void *)&v8.tv_usec = 0LL;
    uint64_t result = gettimeofday(&v8, 0LL);
    *(double *)(v1 + 44_Block_object_dispose(&a9, 8) = (double)v8.tv_usec / 1000.0 + (double)(1000 * v8.tv_sec);
    for (int i = *(unsigned __int16 ****)(v1 + 344); i != *(unsigned __int16 ****)(v1 + 352); ++i)
    {
      id v7 = *i;
      uint64_t result = sub_1004BB06C(v1, v7, 1LL);
    }
  }

  return result;
}

uint64_t sub_1004B9FE8(void *a1, uint64_t a2, unsigned int a3)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, (uint64_t)(a1 + 35));
  for (int i = (int **)a1[43]; i != (int **)a1[44]; ++i)
  {
    id v7 = *i;
    if (*(void *)*i == a2)
    {
      timeval v8 = (os_log_s *)qword_1008F7728;
      BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        id v10 = *((id *)v7 + 1);
        *(_DWORD *)std::string buf = 134218242;
        double v14 = (double)a3 * 1.25;
        __int16 v15 = 2112;
        id v16 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Connection updated (%fms) with device %@",  buf,  0x16u);
      }

      if (v7[8] < 7)
      {
        sub_1004B98E8(v9, (uint64_t)v7, 0);
      }

      else if (*(unsigned __int8 *)(*(void *)(a1[67] + 8LL) + 1LL) == a3)
      {
        sub_1004B98E8(v9, (uint64_t)v7, 3u);
        sub_1004B9F10((uint64_t)a1);
      }

      else
      {
        sub_1004B98E8(v9, (uint64_t)v7, 1u);
        sub_1004BA188((uint64_t)a1, (uint64_t)v7);
      }

      return sub_100242FAC((uint64_t)v12);
    }
  }

  return sub_100242FAC((uint64_t)v12);
}

void sub_1004BA16C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_BYTE *sub_1004BA188(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 48) == 3)
  {
    char v4 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_FAULT)) {
      sub_100685DE8(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  char v14 = 0;
  sub_100242CA4(&v14);
  uint64_t v12 = sub_1001D693C( *(void *)a2,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 536) + 8LL) + 1LL),  *(_DWORD *)(a2 + 24));
  sub_1004B98E8(v12, a2, 2u);
  return sub_100242CD8(&v14);
}

void sub_1004BA224( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004BA238(uint64_t a1, uint64_t a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 280);
  for (int i = *(void ***)(a1 + 344); i != *(void ***)(a1 + 352); ++i)
  {
    uint64_t v5 = *i;
    if (**i == a2)
    {
      uint64_t v6 = (os_log_s *)qword_1008F7728;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        id v8 = (id)v5[1];
        *(_DWORD *)std::string buf = 138412290;
        id v12 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Encryption refreshed with device %@",  buf,  0xCu);
      }

      if (*((_DWORD *)v5 + 8) == 4)
      {
        sub_1004B9840(v7, (uint64_t)v5, 6u);
        if (sub_100271EC8(**(void **)(a1 + 536))) {
          sub_1004BA380(a1, (uint64_t)v5);
        }
      }

      return sub_100242FAC((uint64_t)v10);
    }
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_1004BA364( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_BYTE *sub_1004BA380(uint64_t a1, uint64_t a2)
{
  char v4 = sub_1002CD91C();
  char v26 = 0;
  sub_100242CA4(&v26);
  sub_1001D6AB0(*(void *)a2);
  sub_100242CD0(&v26);
  sub_1004BB980((void *)a1, a2);
  int v6 = *(_DWORD *)(a2 + 32);
  if ((v6 - 4) >= 2)
  {
    if (v6 != 6)
    {
      if (v6 == 3)
      {
        sub_1004BBB00(v5, a2);
        return sub_100242CD8(&v26);
      }

      BOOL v7 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_FAULT)) {
        sub_100685EC8(v7, v8, v9, v10, v11, v12, v13, v14);
      }
    }

    if (*(_BYTE *)(a2 + 112))
    {
      sub_1004BBC04(a1, a2);
    }

    else
    {
      __int16 v15 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = *(id *)(a2 + 8);
        *(_DWORD *)std::string buf = 138412290;
        id v28 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Sending 'start stream' command to device %@",  buf,  0xCu);
      }

      int v17 = *(_DWORD *)(a2 + 24);
      sub_100242C98(&v26);
      if (v17 == 2) {
        __int16 v18 = 2500;
      }
      else {
        __int16 v18 = 1250;
      }
      if (*(_BYTE *)(a2 + 18)) {
        __int16 v19 = 0;
      }
      else {
        __int16 v19 = v18;
      }
      int v20 = sub_1001D63AC(*(void *)a2, (*(_DWORD *)(a2 + 72) >> 1) & 1, v17, v19, v4 ^ 1u);
      if (v20)
      {
        char v21 = (os_log_s *)qword_1008F7728;
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
          sub_100685E58(v20, v21);
        }
      }

      BOOL v22 = sub_1001D696C( *(unsigned __int16 **)a2,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 536) + 8LL) + 1LL),  *(_DWORD *)(a2 + 24));
      uint64_t v23 = sub_100242CD0(&v26);
      *(_BYTE *)(a1 + 432) = 0;
      if (*(_DWORD *)(a2 + 48) != 2)
      {
        if (v22)
        {
          uint64_t v23 = sub_1004B98E8(v23, a2, 3u);
        }

        else
        {
          sub_1004B98E8(v23, a2, 1u);
          uint64_t v23 = (uint64_t)sub_1004BA188(a1, a2);
        }
      }

      if ((*(_BYTE *)(a2 + 72) & 0x20) != 0)
      {
        sub_1004B9840(v23, a2, 7u);
      }

      else
      {
        sub_1004B9840(v23, a2, 8u);
        sub_1004B9F10(a1);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089C230);
      }
      uint64_t v24 = sub_1005CC198((uint64_t)off_1008D5F28, *(void **)(a2 + 8), 0);
      if (qword_1008D6198 != -1) {
        dispatch_once(&qword_1008D6198, &stru_10089C250);
      }
      sub_100448BDC((os_unfair_lock_s *)off_1008D6190, 1, v24);
    }
  }

  return sub_100242CD8(&v26);
}

void sub_1004BA658( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1004BA67C(uint64_t a1, uint64_t a2)
{
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_100242F28((uint64_t)v23, a1 + 280);
  for (int i = *(uint64_t **)(a1 + 344); i != *(uint64_t **)(a1 + 352); ++i)
  {
    uint64_t v5 = *i;
    if (*(void *)(*i + 104) == a2)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089C230);
      }
      int v6 = off_1008D5F28;
      BOOL v7 = (id *)(v5 + 8);
      id v8 = *(id *)(v5 + 8);
      sub_10002418C(v21, "IsMFiAuthenticated");
      if ((sub_1005CE5A8((uint64_t)v6, v8, (uint64_t)v21) & 1) != 0)
      {
        int v9 = 1;
      }

      else
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089C230);
        }
        uint64_t v10 = off_1008D5F28;
        id v11 = *v7;
        sub_10002418C(v19, "IsMFiAuthenticated_CertClass0B");
        if ((sub_1005CE5A8((uint64_t)v10, v11, (uint64_t)v19) & 1) != 0)
        {
          int v9 = 1;
        }

        else
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089C230);
          }
          uint64_t v12 = off_1008D5F28;
          id v13 = *v7;
          sub_10002418C(__p, "Mac OS -- IsMFiAuthenticated_Ce");
          int v9 = sub_1005CE5A8((uint64_t)v12, v13, (uint64_t)__p);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }

        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }

      if (v22 < 0) {
        operator delete(v21[0]);
      }

      uint64_t v14 = (os_log_s *)qword_1008F7728;
      if (v9)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = *v7;
          *(_DWORD *)std::string buf = 141558275;
          uint64_t v25 = 1752392040LL;
          __int16 v26 = 2113;
          id v27 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "MFi authentication succeeded for device %{private, mask.hash}@",  buf,  0x16u);
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
          sub_100685F38((id *)(v5 + 8), v14);
        }
        sub_1004B95FC(a1, v5);
      }

      return sub_100242FAC((uint64_t)v23);
    }
  }

  return sub_100242FAC((uint64_t)v23);
}

void sub_1004BA924( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  if (a21 < 0) {
    operator delete(a16);
  }

  if (a27 < 0) {
    operator delete(a22);
  }

  sub_100242FAC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1004BA9AC(uint64_t a1, uint64_t a2, int a3)
{
  if (*(int *)(a2 + 32) >= 3)
  {
    char v4 = (os_log_s *)qword_1008F7728;
    if (*(void *)(a2 + 120))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_INFO))
      {
        LOWORD(v_Block_object_dispose(&a9, 8) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Volume hysteresis timer active",  (uint8_t *)&v8,  2u);
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = *(id *)(a2 + 8);
        int v8 = 138412546;
        id v9 = v6;
        __int16 v10 = 1024;
        int v11 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending 'set volume' command to device %@ %u",  (uint8_t *)&v8,  0x12u);
      }

      LOBYTE(v_Block_object_dispose(&a9, 8) = 0;
      sub_100242CA4(&v8);
      sub_1001D64C0(*(__int128 **)a2, a3);
      sub_100242CD0(&v8);
      *(_BYTE *)(a2 + 12_Block_object_dispose(&a9, 8) = a3;
      BOOL v7 = operator new(0x18uLL);
      void v7[4] = 1;
      *(void *)BOOL v7 = &off_10089C170;
      *((void *)v7 + 2) = 100LL;
      *(void *)(a2 + 120) = v7;
      if (qword_1008D98D0 != -1) {
        dispatch_once(&qword_1008D98D0, &stru_10089C210);
      }
      sub_10041C240(qword_1008D98C8, v7);
      sub_100242CD8(&v8);
    }
  }

void sub_1004BAB54(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004BAB74(uint64_t **a1, uint64_t a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, (uint64_t)(a1 + 35));
  uint64_t v5 = a1[43];
  for (int i = a1[44]; v5 != i; ++v5)
  {
    uint64_t v6 = *v5;
    if (*(void *)(*v5 + 120) == a2)
    {
      *(void *)(v6 + 120) = 0LL;
      float v10 = 0.0;
      BOOL v7 = sub_100270164(*a1[67], &v10);
      if ((_DWORD)v7)
      {
        int v8 = (int)(float)(v10 * 255.0);
      }

      int i = a1[44];
    }
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_1004BAC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1004BAC4C(uint64_t a1, uint64_t a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 280);
  char v4 = *(void **)(a1 + 536);
  if (v4 && *v4 == a2)
  {
    uint64_t v5 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Received 'stream will start' notification from HAL",  v9,  2u);
    }

    BOOL v7 = *(uint64_t **)(a1 + 344);
    uint64_t v6 = *(uint64_t **)(a1 + 352);
    while (v7 != v6)
    {
      if (*(int *)(*v7 + 32) >= 3)
      {
        sub_1004BA380(a1, *v7);
        uint64_t v6 = *(uint64_t **)(a1 + 352);
      }

      ++v7;
    }

    sub_10048A7C8(*(uint64_t **)(a1 + 536), a1);
    sub_1002702DC(a2, 3);
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_1004BAD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1004BAD4C(uint64_t a1, uint64_t a2)
{
  return sub_1004BAC4C(a1 - 256, a2);
}

uint64_t sub_1004BAD5C(uint64_t a1, uint64_t a2)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 280);
  char v4 = *(void **)(a1 + 536);
  if (v4 && *v4 == a2)
  {
    uint64_t v5 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.tv_sec) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Received 'stream did stop' notification from HAL",  (uint8_t *)&buf,  2u);
      char v4 = *(void **)(a1 + 536);
    }

    v4[3] = 0LL;
    char v17 = 0;
    sub_100242CA4(&v17);
    sub_1001D6934();
    sub_100242CD0(&v17);
    buf.tv_sec = 0LL;
    *(void *)&buf.tv_usec = 0LL;
    gettimeofday(&buf, 0LL);
    *(double *)(a1 + 456) = (double)buf.tv_usec / 1000.0 + (double)(1000 * buf.tv_sec);
    BOOL v7 = *(uint64_t **)(a1 + 344);
    for (int i = *(uint64_t **)(a1 + 352); v7 != i; ++v7)
    {
      uint64_t v8 = *v7;
      if (*(int *)(*v7 + 32) >= 7)
      {
        id v9 = (os_log_s *)qword_1008F7728;
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = *(id *)(v8 + 8);
          LODWORD(buf.tv_sec) = 138412290;
          *(__darwin_time_t *)((char *)&buf.tv_sec + 4) = (__darwin_time_t)v10;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sending 'stop stream' command to device %@",  (uint8_t *)&buf,  0xCu);
        }

        sub_100242C98(&v17);
        sub_1001D642C(*(void *)v8);
        uint64_t v11 = sub_100242CD0(&v17);
        sub_1004B9840(v11, v8, 6u);
        sub_1004BB06C(a1, (unsigned __int16 **)v8, 0LL);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089C230);
        }
        uint64_t v12 = off_1008D5F28;
        id v13 = *(id *)(v8 + 8);
        uint64_t v14 = sub_1005CC198((uint64_t)v12, v13, 0);

        if (qword_1008D6198 != -1) {
          dispatch_once(&qword_1008D6198, &stru_10089C250);
        }
        sub_100448BDC((os_unfair_lock_s *)off_1008D6190, 0, v14);
        int i = *(uint64_t **)(a1 + 352);
      }
    }

    uint64_t v15 = sub_1002E6E9C();
    sub_1004B95C8(a1);
    sub_1002702DC(a2, 0);
    sub_100242CD8(&v17);
  }

  return sub_100242FAC((uint64_t)v18);
}

void sub_1004BB02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1004BB06C(uint64_t a1, unsigned __int16 **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t)*a2;
  int v6 = **a2;
  BOOL v7 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = "Disabling";
    if ((_DWORD)a3) {
      uint64_t v8 = "Enabling";
    }
    int v13 = 136315394;
    uint64_t v14 = v8;
    __int16 v15 = 1024;
    int v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s LEA Link Quality Mode for handle 0x%x",  (uint8_t *)&v13,  0x12u);
  }

  uint64_t v9 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 544LL))(v9, a3, 1LL, v5);
  uint64_t v10 = sub_1002E6E9C();
  uint64_t result = sub_1002D0F8C(v10);
  if ((_DWORD)result == 1)
  {
    uint64_t v12 = (__int16 *)(a1 + 464);
    if ((_DWORD)a3)
    {
      *(_DWORD *)(a1 + 52_Block_object_dispose(&a9, 8) = 0;
      *(_OWORD *)(a1 + 496) = 0u;
      *(_OWORD *)(a1 + 512) = 0u;
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(a1 + 480) = 0u;
      *(_WORD *)(a1 + 464) = -1;
      *(_WORD *)(a1 + 484) = -1;
    }

    else if (*v12 == -1)
    {
      *uint64_t v12 = v6;
    }

    else
    {
      *(_WORD *)(a1 + 484) = v6;
    }
  }

  return result;
}

uint64_t sub_1004BB1B8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 536);
  if (v1)
  {
    uint64_t v2 = *(char **)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(unsigned __int16 ****)(result + 344);
      char v4 = *(unsigned __int16 ****)(result + 352);
      if (v3 == v4)
      {
        char v6 = 0;
        char v5 = 0;
        __int16 v10 = 0;
      }

      else
      {
        char v5 = 0;
        char v6 = 0;
        do
        {
          BOOL v7 = *v3;
          int v8 = ***v3;
          if (((_BYTE)(*v3)[9] & 8) != 0) {
            char v9 = 2;
          }
          else {
            char v9 = 1;
          }
          if (v8 == *(unsigned __int16 *)(result + 464))
          {
            char v6 = v9;
          }

          else if (v8 == *(unsigned __int16 *)(result + 484))
          {
            char v5 = v9;
          }

          ++v3;
        }

        while (v3 != v4);
        __int16 v10 = *((_WORD *)v7 + 8);
      }

      unsigned int v11 = vcvtmd_u64_f64((*(double *)(result + 456) - *(double *)(result + 448)) / 1000.0);
      memset(v21, 0, 32);
      char v12 = *(_BYTE *)(result + 440);
      char v13 = *v2;
      int v14 = *(_DWORD *)(v1 + 16);
      __int16 v15 = *(char *)(result + 466);
      __int16 v16 = *(char *)(result + 486);
      __int16 v18 = v10;
      char v19 = v12;
      char v20 = v13;
      LOBYTE(v21[0]) = v14;
      DWORD1(v21[0]) = v11;
      BYTE8(v21[0]) = v6;
      WORD5(v21[0]) = v15;
      *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(result + 468);
      BYTE12(v21[1]) = v5;
      HIWORD(v21[1]) = v16;
      v21[2] = *(_OWORD *)(result + 488);
      uint64_t v17 = sub_1002E8D94();
      return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v17 + 128LL))(v17, &v18);
    }
  }

  return result;
}

uint64_t sub_1004BB2D0(uint64_t a1, uint64_t a2)
{
  return sub_1004BAD5C(a1 - 256, a2);
}

uint64_t sub_1004BB2E0(void *a1, uint64_t a2, float a3)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, (uint64_t)(a1 + 35));
  char v6 = (void *)a1[67];
  if (v6 && *v6 == a2)
  {
    int v8 = (os_log_s *)qword_1008F7728;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      *(_DWORD *)timeval buf = 134218240;
      double v13 = a3;
      __int16 v14 = 1024;
      int v15 = (int)(float)(a3 * 255.0);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received 'volume update %f (%d)' event from HAL",  buf,  0x12u);
    }
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_1004BB408(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004BB424(uint64_t a1, uint64_t a2, float a3)
{
  return sub_1004BB2E0((void *)(a1 - 256), a2, a3);
}

uint64_t sub_1004BB42C(void *a1, uint64_t a2, int a3)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, (uint64_t)(a1 + 35));
  char v6 = (void *)a1[67];
  if (v6 && *v6 == a2)
  {
    int v8 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)timeval buf = 67109120;
      int v17 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received 'select codec (%d)' command from HAL",  buf,  8u);
      char v6 = (void *)a1[67];
    }

    uint64_t v9 = v6[1];
    __int16 v10 = sub_1004BB5B0((uint64_t)a1, a3);
    if (v10)
    {
      unsigned int v11 = v10;
      *(void *)(a1[67] + 8LL) = v10;
      *(_DWORD *)timeval buf = 0;
      sub_1002721B4(a2, buf);
      if ((buf[0] & 1) != 0)
      {
        sub_1004BB760((void *)a1[67]);
      }

      char v12 = (uint64_t *)a1[43];
    }
  }

  return sub_100242FAC((uint64_t)v15);
}

void sub_1004BB594( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_1004BB5B0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 424);
  if (v2 <= 59)
  {
    if (v2 == 40)
    {
      uint64_t result = &byte_1006C35B0;
    }

    else
    {
      if (v2 != 56) {
        goto LABEL_17;
      }
      uint64_t result = &byte_1006C3634;
    }
  }

  else
  {
    if (v2 != 60)
    {
      if (v2 == 90 || v2 == 120)
      {
        uint64_t result = &byte_1006C370C;
        goto LABEL_11;
      }

void sub_1004BB724(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 32);
  if (v2)
  {
    if (*v2) {
      operator delete[](*v2);
    }
    operator delete(v2);
  }

  *(void *)(a1 + 32) = 0LL;
}

void *sub_1004BB760(void *result)
{
  if (!result[4])
  {
    uint64_t v1 = result;
    uint64_t v2 = operator new(0x18uLL);
    size_t v3 = *(unsigned __int8 *)(v1[1] + 3LL) + 2LL;
    v2[1] = 0LL;
    *((_WORD *)v2 + _Block_object_dispose(&a9, 8) = 0;
    *((_BYTE *)v2 + 1_Block_object_dispose(&a9, 8) = 1;
    uint64_t result = operator new[](v3);
    *uint64_t v2 = result;
    v1[4] = v2;
  }

  return result;
}

void sub_1004BB7B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1004BB7CC(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1004BB42C((void *)(a1 - 256), a2, a3);
}

uint64_t sub_1004BB7D4(void *a1, uint64_t a2, int a3)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, (uint64_t)(a1 + 35));
  uint64_t v6 = a1[67];
  if (v6 && *(void *)v6 == a2)
  {
    uint64_t v8 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)timeval buf = 67109120;
      int v15 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received 'change audio content type (%d)' command from HAL",  buf,  8u);
      uint64_t v6 = a1[67];
    }

    if (*(_DWORD *)(v6 + 16) == a3)
    {
      uint64_t v9 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)timeval buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio content type has no change", buf, 2u);
      }
    }

    else
    {
      *(_DWORD *)(v6 + 16) = a3;
      uint64_t v10 = (uint64_t *)a1[43];
    }
  }

  return sub_100242FAC((uint64_t)v13);
}

uint64_t sub_1004BB934(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1004BB7D4((void *)(a1 - 256), a2, a3);
}

void sub_1004BB93C()
{
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
    sub_100685FF8();
  }
}

void sub_1004BB980(void *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 28) != *(_DWORD *)(a2 + 24) || (*(_BYTE *)(a2 + 19) != 0) != (*(_BYTE *)(a2 + 18) != 0))
  {
    int v4 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = *(id *)(a2 + 8);
      uint64_t v6 = v5;
      int v7 = *(_DWORD *)(a2 + 24);
      int v8 = *(unsigned __int8 *)(a2 + 18);
      int v11 = 141558787;
      if (v8) {
        uint64_t v9 = "Tail";
      }
      else {
        uint64_t v9 = "Head";
      }
      uint64_t v12 = 1752392040LL;
      __int16 v13 = 2113;
      id v14 = v5;
      __int16 v15 = 1024;
      int v16 = v7;
      __int16 v17 = 2080;
      __int16 v18 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "LEA: Retagging device %{private, mask.hash}@, streamMode=%d slot=%s",  (uint8_t *)&v11,  0x26u);
    }

    uint64_t v10 = sub_1002E6E9C();
    (*(void (**)(uint64_t, void, void, void, uint64_t))(*(void *)v10 + 432LL))( v10,  *(void *)a2,  *(unsigned __int8 *)(a2 + 24),  *(unsigned __int8 *)(a2 + 18),  1LL);
    *(_DWORD *)(a2 + 2_Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a2 + 19) = *(_BYTE *)(a2 + 18);
  }

_BYTE *sub_1004BBB00(uint64_t a1, uint64_t a2)
{
  size_t v3 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = *(id *)(a2 + 8);
    int v7 = 138412290;
    id v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Restarting encryption to device %@",  (uint8_t *)&v7,  0xCu);
  }

  LOBYTE(v7) = 0;
  sub_100242CA4(&v7);
  sub_1001D6A7C(*(void *)a2);
  uint64_t v5 = sub_100242CD0(&v7);
  sub_1004B9840(v5, a2, 4u);
  return sub_100242CD8(&v7);
}

void sub_1004BBBE8(_Unwind_Exception *exception_object)
{
}

_BYTE *sub_1004BBC04(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = **(unsigned __int8 **)(*(void *)(a1 + 536) + 8LL);
    id v6 = *(id *)(a2 + 8);
    v17[0] = 67109378;
    v17[1] = v5;
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending 'select codec %d' command to device %@",  (uint8_t *)v17,  0x12u);
  }

  if (*(_DWORD *)(a2 + 32) != 6)
  {
    int v7 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_FAULT)) {
      sub_100685EC8(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  LOBYTE(v17[0]) = 0;
  sub_100242CA4(v17);
  sub_1001D6374( *(__int128 **)a2,  **(_BYTE **)(*(void *)(a1 + 536) + 8LL),  *(_BYTE *)(*(void *)(*(void *)(a1 + 536) + 8LL) + 4LL),  *(_BYTE *)(*(void *)(*(void *)(a1 + 536) + 8LL) + 1LL),  *(_BYTE *)(*(void *)(a1 + 536) + 16LL));
  uint64_t v15 = sub_100242CD0(v17);
  *(_BYTE *)(a2 + 112) = 0;
  sub_1004B9840(v15, a2, 5u);
  return sub_100242CD8(v17);
}

void sub_1004BBD54(_Unwind_Exception *exception_object)
{
}

_BYTE *sub_1004BBD70(uint64_t a1, __int128 *a2, char a3, __int16 a4)
{
  int v7 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
    sub_100686024(a3, a4, v7);
  }
  char v9 = 0;
  sub_100242CA4(&v9);
  sub_1001D6488(a2, a3, a4);
  return sub_100242CD8(&v9);
}

void sub_1004BBDF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1004BBE0C(uint64_t a1, unsigned __int8 *__src, size_t __n, int a4)
{
  uint64_t v4 = *(void *)(a1 + 536);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 32);
    if (v5 && (id v6 = *(char **)v5) != 0LL)
    {
      uint64_t v8 = __n;
      if (!__src && __n)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
          sub_1006861DC();
        }
        return;
      }

      uint64_t v11 = *(_BYTE **)(v4 + 8);
      if (*v11 == 15)
      {
        uint64_t v12 = 0LL;
        BOOL v13 = 1;
        if (!__n) {
          goto LABEL_17;
        }
      }

      else
      {
        BOOL v13 = v11[5] == 0;
        uint64_t v12 = 2LL * v11[5];
        if (!__n)
        {
LABEL_17:
          uint64_t v14 = (os_log_s *)qword_1008F7728;
          if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
            sub_100686174(v8, v14, v15);
          }
          uint64_t v8 = 0LL;
          goto LABEL_20;
        }
      }

      if (!v11[6])
      {
        memcpy(&v6[v12], __src, __n);
LABEL_20:
        if (!v13)
        {
          char v16 = *(_BYTE *)(a1 + 432);
          *(_BYTE *)(a1 + 432) = v16 + 1;
          **(_BYTE **)uint64_t v5 = v16;
          *(_BYTE *)(*(void *)v5 + 1LL) = v8;
        }

        __int16 v17 = *(uint64_t **)(a1 + 536);
        uint64_t v18 = *v17;
        id v19 = *(char **)v5;
        size_t v20 = v8 + v12;
        if (*(_BYTE *)(v17[1] + 5)) {
          sub_10026FF08(v18, v19, v20, a4);
        }
        else {
          sub_10026FBFC(v18, v19, v20, a4);
        }
        char v21 = (os_log_s *)qword_1008F7728;
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEBUG)) {
          sub_100686104(v8 + v12, v21);
        }
        return;
      }

      unsigned int v22 = *__src;
      unsigned int v30 = v22 >> 2;
      unsigned int v23 = v22 & 3;
      int v24 = *(unsigned __int8 *)(v5 + 16);
      if (v24 == v22 >> 2 && *(unsigned __int8 *)(v5 + 17) <= v23)
      {
        uint64_t v25 = *(void *)(v5 + 8);
      }

      else
      {
        if (!*(_BYTE *)(v5 + 18))
        {
          log = (os_log_s *)qword_1008F7728;
          if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR))
          {
            int v28 = *(unsigned __int8 *)(v5 + 17);
            *(_DWORD *)timeval buf = 67109376;
            int v32 = v28;
            __int16 v33 = 1024;
            int v34 = v24;
            _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Only received %u packets for frameId %u",  buf,  0xEu);
            id v6 = *(char **)v5;
          }
        }

        uint64_t v25 = 0LL;
        *(_DWORD *)(v5 + 15) = 0;
        *(void *)(v5 + _Block_object_dispose(&a9, 8) = 0LL;
      }

      size_t v26 = v8 - 1;
      memcpy(&v6[v25 + v12], __src + 1, v26);
      *(_BYTE *)(v5 + 16) = v30;
      int v27 = *(unsigned __int8 *)(v5 + 17);
      *(_BYTE *)(v5 + 17) = v27 + 1;
      uint64_t v8 = *(void *)(v5 + 8) + v26;
      *(void *)(v5 + _Block_object_dispose(&a9, 8) = v8;
      if (v27 == v23)
      {
        *(_BYTE *)(v5 + 1_Block_object_dispose(&a9, 8) = 1;
        goto LABEL_20;
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR))
    {
      sub_1006860D8();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR))
  {
    sub_1006860AC();
  }

BOOL sub_1004BC11C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 344);
  if (*(void *)(a1 + 352) - (void)v1 != 16LL)
  {
    size_t v3 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136446210;
      char v9 = "fSessionList.size() == 2";
      _os_log_fault_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&v8,  0xCu);
      uint64_t v1 = *(void **)(a1 + 344);
    }
  }

  uint64_t v4 = v1[1];
  if (*(void *)(*v1 + 64LL) != *(void *)(v4 + 64)) {
    return 0LL;
  }
  int v5 = *(_DWORD *)(*v1 + 72LL);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  int v6 = *(_DWORD *)(v4 + 72);
  if ((v6 & 1) == 0) {
    return 0LL;
  }
  if ((v5 & 4) != 0) {
    return (v6 & 4) != 0 && ((v6 | v5) & 8) != 0;
  }
  return (v6 & 4) == 0;
}

void sub_1004BC22C(os_unfair_lock_s *a1, void *a2)
{
  size_t v3 = a2;
  os_unfair_lock_lock(a1);
  int v5 = 0LL;
  int v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    int v6 = v4;
    operator delete(v4);
  }
}

void sub_1004BC2C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1004BC2E8(uint64_t a1, void (***a2)(void, uint64_t *))
{
}

void sub_1004BC33C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_1004BC354(uint64_t a1, uint64_t a2)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089C270);
  }
  id v4 = sub_10059A5A8((uint64_t)off_1008D5F08, *(void *)a2);
  unint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(v4);
  char v89 = 0;
  uint64_t v5 = sub_1002E6E00();
  sub_10002418C(buf, "LEA");
  sub_10002418C(v91, "IgnoreMFi");
  (*(void (**)(uint64_t, uint8_t *, _BYTE *, char *))(*(void *)v5 + 72LL))(v5, buf, v91, &v89);
  if (v92 < 0) {
    operator delete(*(void **)v91);
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089C230);
  }
  int v6 = off_1008D5F28;
  uint64_t v7 = (id *)(a2 + 8);
  id v8 = *(id *)(a2 + 8);
  sub_10002418C(v87, "IsMFiAuthenticated");
  if ((sub_1005CE5A8((uint64_t)v6, v8, (uint64_t)v87) & 1) != 0)
  {
    int v9 = 1;
  }

  else
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    uint64_t v10 = off_1008D5F28;
    id v11 = *v7;
    sub_10002418C(v85, "IsMFiAuthenticated_CertClass0B");
    if ((sub_1005CE5A8((uint64_t)v10, v11, (uint64_t)v85) & 1) != 0)
    {
      int v9 = 1;
    }

    else
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089C230);
      }
      uint64_t v12 = off_1008D5F28;
      id v13 = *v7;
      sub_10002418C(__p, "Mac OS -- IsMFiAuthenticated_Ce");
      int v9 = sub_1005CE5A8((uint64_t)v12, v13, (uint64_t)__p);
      if (v84 < 0) {
        operator delete(__p[0]);
      }
    }

    if (v86 < 0) {
      operator delete(v85[0]);
    }
  }

  if (v88 < 0) {
    operator delete(v87[0]);
  }

  if (v9)
  {
    uint64_t v14 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = *v7;
      *(_DWORD *)timeval buf = 138412290;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Device %@ is MFi authenticated",  buf,  0xCu);
    }
  }

  else
  {
    char v16 = (os_log_s *)qword_1008F7728;
    if (v89)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
        sub_1006862E0();
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v17 = *v7;
        *(_DWORD *)timeval buf = 138412290;
        *(void *)&uint8_t buf[4] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Device %@ is not MFi authenticated yet, authenticating...",  buf,  0xCu);
      }

      uint64_t v18 = sub_1002E8F6C();
      id v19 = *v7;
      (*(void (**)(uint64_t, id))(*(void *)v18 + 24LL))(v18, v19);

      size_t v20 = operator new(0x18uLL);
      v20[4] = 1;
      *(void *)size_t v20 = &off_10089C1A8;
      *((void *)v20 + 2) = 90000LL;
      *(void *)(a2 + 104) = v20;
      if (qword_1008D98D0 != -1) {
        dispatch_once(&qword_1008D98D0, &stru_10089C210);
      }
      sub_10041C240(qword_1008D98C8, v20);
    }
  }

  if (!*(void *)(a1 + 536))
  {
    uint64_t v30 = sub_1002E6E9C();
    char v31 = (uint64_t *)(a1 + 424);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v30 + 440LL))(v30, a1 + 424))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
        sub_100686288();
      }
      goto LABEL_76;
    }

    unint64_t v41 = *(void *)(a2 + 64);
    unint64_t v42 = *v31;
    if (v41 < *v31)
    {
      int v43 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)timeval buf = 134217984;
        *(void *)&uint8_t buf[4] = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "LEA FW max packet size is %zu bytes",  buf,  0xCu);
        unint64_t v41 = *(void *)(a2 + 64);
      }

      uint64_t *v31 = v41;
      unint64_t v42 = v41;
    }

    if (*(_BYTE *)(a1 + 440) == 1 && v42 >= 0x3D)
    {
      unint64_t v42 = 60LL;
      uint64_t *v31 = 60LL;
    }

    int v44 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)timeval buf = 134217984;
      *(void *)&uint8_t buf[4] = v42;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "LEA max packet size is %zu bytes", buf, 0xCu);
    }

    int v45 = operator new(0x1B0uLL);
    sub_100271D58((uint64_t)v45, a1 + 256);
    __int16 v46 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      id v47 = *v7;
      *(_DWORD *)timeval buf = 141558275;
      *(void *)&uint8_t buf[4] = 1752392040LL;
      *(_WORD *)&_BYTE buf[12] = 2113;
      *(void *)&uint8_t buf[14] = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Creating LEAAudioDevice for device %{private, mask.hash}@",  buf,  0x16u);
    }

    id v48 = *v7;
    id v49 = objc_claimAutoreleasedReturnValue([v48 UUIDString]);
    sub_10002418C(buf, (char *)[v49 UTF8String]);
    sub_10026F7E4((uint64_t)v45, (const void **)buf);

    id v50 = *v7;
    id v51 = objc_claimAutoreleasedReturnValue([v50 UUIDString]);
    sub_10002418C(buf, (char *)[v51 UTF8String]);
    sub_10026F76C((uint64_t)v45, (uint64_t)buf);

    memset(buf, 0, sizeof(buf));
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    int v52 = off_1008D5F28;
    id v53 = *v7;
    sub_1005CC0D4((uint64_t)v52, v53, (uint64_t)buf);

    uint64_t v54 = buf[23];
    if ((buf[23] & 0x80u) != 0) {
      uint64_t v54 = *(void *)&buf[8];
    }
    if (v54) {
      sub_10026F96C((uint64_t)v45, (uint64_t)buf);
    }
    sub_100272534(v91, a2 + 80);
    sub_100271FAC((uint64_t)v45, (uint64_t)v91);
    if (*(void *)v91)
    {
      *(void *)&v91[8] = *(void *)v91;
      operator delete(*(void **)v91);
    }

    sub_100272174((uint64_t)v45, *v31);
    int v55 = *(_DWORD *)(a2 + 72);
    if ((v55 & 1) != 0)
    {
      int64_t v57 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v58 = *(id *)(a2 + 8);
        *(_DWORD *)int v91 = 141558275;
        *(void *)&void v91[4] = 1752392040LL;
        *(_WORD *)&v91[12] = 2113;
        *(void *)&v91[14] = v58;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Device %{private, mask.hash}@ supports output",  v91,  0x16u);

        int v55 = *(_DWORD *)(a2 + 72);
      }

      int v56 = 2;
      if ((v55 & 2) == 0)
      {
LABEL_110:
        if ((*(_BYTE *)(a2 + 72) & 3) == 0)
        {
          __int16 v63 = (os_log_s *)qword_1008F7728;
          BOOL v64 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR);
          if (v64) {
            sub_100686208((id *)(a2 + 8), v63);
          }
          __int16 v65 = sub_1004BBD70(v64, *(__int128 **)a2, 12, 8);
          sub_1004B9840((uint64_t)v65, a2, 0);
          sub_10026F644((uint64_t)v45);
          goto LABEL_76;
        }

        *(void *)&v90.byte0 = 0LL;
        *(void *)&v90.byte8 = 0LL;
        [v76 getUUIDBytes:&v90];
        sub_100270658((uint64_t)v45, &v90);
        sub_1002721A4((uint64_t)v45, v56);
        sub_100272184((uint64_t)v45, (*(_DWORD *)(a2 + 72) >> 2) & 1);
        sub_1002721C4((uint64_t)v45, (*(_DWORD *)(a2 + 72) >> 4) & 1);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089C230);
        }
        sub_1005CCDEC((uint64_t)off_1008D5F28, v76, 2625);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089C230);
        }
        BOOL v62 = off_1008D5F28;
        sub_10002418C(v81, "IsPrimaryHearingAid");
        sub_1005CCF08((uint64_t)v62, v76, (unsigned __int8 *)v81);
        if (v82 < 0)
        {
          operator delete(v81[0]);
          if ((v56 & 1) == 0) {
            goto LABEL_133;
          }
        }

        else if ((v56 & 1) == 0)
        {
          goto LABEL_133;
        }

        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089C230);
        }
        uint64_t v66 = off_1008D5F28;
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_10089C270);
        }
        id v67 = sub_10059A5A8((uint64_t)off_1008D5F08, *(void *)a2);
        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
        sub_10002418C(v79, "Enable Input");
        int v69 = sub_1005CE5A8((uint64_t)v66, v68, (uint64_t)v79);
        if (v80 < 0) {
          operator delete(v79[0]);
        }

        if (v69)
        {
          __int16 v70 = (os_log_s *)qword_1008F7728;
          if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
          {
            id v71 = *v7;
            *(_DWORD *)int v91 = 141558275;
            *(void *)&void v91[4] = 1752392040LL;
            *(_WORD *)&v91[12] = 2113;
            *(void *)&v91[14] = v71;
            _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Enable device %{private, mask.hash}@ input",  v91,  0x16u);
          }

          char v72 = 1;
          sub_1002721D4((uint64_t)v45, 1);
          goto LABEL_136;
        }

void sub_1004BD230( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1004BD430(uint64_t a1, void *a2)
{
  id v5 = a2;
  size_t v3 = sub_1004BD514(a1, v5);
  id v4 = v3;
  if (v3)
  {
    else {
      sub_1003A2030(v4);
    }
  }

  else
  {
    sub_1004C0A70();
  }
}

void sub_1004BD49C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1004BD4B0(uint64_t a1, void *a2)
{
  id v4 = a2;
  size_t v3 = sub_1004BD514(a1, v4);
  if (v3) {
    sub_1003A2D00((uint64_t)v3, 1);
  }
  else {
    sub_1004C0A70();
  }
}

void sub_1004BD500( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id *sub_1004BD514(uint64_t a1, void *a2)
{
  id v3 = a2;
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 560);
  for (int i = *(id ***)(a1 + 624); i != *(id ***)(a1 + 632); ++i)
  {
    id v5 = *i;
    id v6 = sub_1003A2D50(*i);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 UUIDString]);
    int v9 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);
    unsigned __int8 v10 = [v8 isEqualToString:v9];

    if ((v10 & 1) != 0) {
      goto LABEL_6;
    }
  }

  id v5 = 0LL;
LABEL_6:
  sub_100242FAC((uint64_t)v12);

  return v5;
}

void sub_1004BD5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004BD628(uint64_t a1, __int128 *a2, int a3, int a4, int a5, int a6, int a7)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089C270);
  }
  id v14 = sub_10059A5A8((uint64_t)off_1008D5F08, (uint64_t)a2);
  id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (v15)
  {
    v63[0] = 0LL;
    v63[1] = 0LL;
    sub_100242F28((uint64_t)v63, a1 + 280);
    for (int i = *(__int128 ****)(a1 + 344); i != *(__int128 ****)(a1 + 352); ++i)
    {
      if (**i == a2) {
        goto LABEL_35;
      }
    }

    uint64_t v62 = 0LL;
    uint64_t v17 = sub_1002E6E9C();
    int v18 = sub_1002D0F8C(v17);
    id v19 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)timeval buf = 138413314;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&uint8_t buf[14] = a3;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = a4;
      LOWORD(v65) = 1024;
      *(_DWORD *)((char *)&v65 + 2) = a5;
      HIWORD(v65) = 1024;
      LODWORD(v66) = a6;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Received 'version' command from device %@ with version: %d, companyID: %d, hwVersion: %d, swVersion: %d",  buf,  0x24u);
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    size_t v20 = off_1008D5F28;
    sub_10002418C(__p, "IsPrimaryHearingAid");
    int v21 = sub_1005CE5A8((uint64_t)v20, v15, (uint64_t)__p);
    int v22 = v21;
    if (v61 < 0)
    {
      operator delete(__p[0]);
      if (!v22) {
        goto LABEL_20;
      }
    }

    else if (!v21)
    {
      goto LABEL_20;
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    sub_1005C9A38((uint64_t)off_1008D5F28, v15, @"IsPrimaryHearingAid");
LABEL_20:
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    unsigned int v23 = off_1008D5F28;
    sub_10002418C(v58, "DisableLEA");
    uint64_t v24 = sub_1005CE5A8((uint64_t)v23, v15, (uint64_t)v58);
    if (v18) {
      int v25 = v24;
    }
    else {
      int v25 = 1;
    }
    if (v59 < 0)
    {
      operator delete(v58[0]);
      if (v25) {
        goto LABEL_27;
      }
    }

    else if (v25)
    {
LABEL_27:
      int v26 = (os_log_s *)qword_1008F7728;
      uint64_t v24 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v24)
      {
        *(_DWORD *)timeval buf = 138412290;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Rejecting LEA connection for device %@ as it is disabled",  buf,  0xCu);
      }

      __int16 v27 = 7;
      goto LABEL_34;
    }

    if (a3 != 2 || v18 != 1)
    {
      uint64_t v28 = *(void *)(a1 + 344);
      uint64_t v29 = *(void *)(a1 + 352);
      if (v28 == v29)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089C230);
        }
        char v31 = off_1008D5F28;
        sub_10002418C(v56, "Enable Input");
        int v32 = sub_1005CE5A8((uint64_t)v31, v15, (uint64_t)v56);
        if (v57 < 0) {
          operator delete(v56[0]);
        }
        __int16 v33 = (os_log_s *)qword_1008F7728;
        BOOL v34 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
        if (v32)
        {
          if (v34)
          {
            *(_DWORD *)timeval buf = 141558275;
            *(void *)&uint8_t buf[4] = 1752392040LL;
            *(_WORD *)&_BYTE buf[12] = 2113;
            *(void *)&uint8_t buf[14] = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "LEA: Set device %{private, mask.hash}@ to Tail",  buf,  0x16u);
          }

          BOOL v30 = 1;
        }

        else
        {
          if (v34)
          {
            *(_DWORD *)timeval buf = 141558275;
            *(void *)&uint8_t buf[4] = 1752392040LL;
            *(_WORD *)&_BYTE buf[12] = 2113;
            *(void *)&uint8_t buf[14] = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "LEA: Set device %{private, mask.hash}@ to Head",  buf,  0x16u);
          }

          BOOL v30 = 0;
        }
      }

      else
      {
        if (v29 - v28 != 8)
        {
          BOOL v35 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR);
          if (v35) {
            sub_10068630C();
          }
          sub_1004BBD70(v35, a2, 1, 7);
          goto LABEL_35;
        }

        BOOL v30 = *(unsigned __int8 *)(*(void *)v28 + 18LL) == 0;
      }

      uint64_t v36 = operator new(0x88uLL);
      sub_1004F5B20((uint64_t)v36, (uint64_t)a2, v15, a4, v30, a3);
      uint64_t v62 = (uint64_t)v36;
      int v55 = v36[5];
      *(void *)timeval buf = &v55;
      int v37 = sub_100275FD4((uint64_t **)(a1 + 368), &v55, (uint64_t)&unk_1006C2518, (unsigned int **)buf);
      ++*((_DWORD *)v37 + 8);
      *(void *)timeval buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_1004BC2E8;
      __int16 v65 = &unk_10089C0D8;
      uint64_t v66 = a1;
      sub_1004BC22C((os_unfair_lock_s *)(a1 + 392), buf);
      id v38 = (char **)(a1 + 344);
      if (v30)
      {
        int v40 = *(char **)(a1 + 352);
        unint64_t v39 = *(void *)(a1 + 360);
        if ((unint64_t)v40 >= v39)
        {
          uint64_t v42 = (v40 - *v38) >> 3;
          uint64_t v43 = v39 - (void)*v38;
          uint64_t v44 = v43 >> 2;
          else {
            unint64_t v45 = v44;
          }
          if (v45) {
            uint64_t v46 = (char *)sub_100008BA0(a1 + 360, v45);
          }
          else {
            uint64_t v46 = 0LL;
          }
          id v47 = &v46[8 * v42];
          id v48 = &v46[8 * v45];
          *(void *)id v47 = v36;
          unint64_t v41 = v47 + 8;
          id v50 = *(char **)(a1 + 344);
          id v49 = *(char **)(a1 + 352);
          if (v49 != v50)
          {
            do
            {
              uint64_t v51 = *((void *)v49 - 1);
              v49 -= 8;
              *((void *)v47 - 1) = v51;
              v47 -= 8;
            }

            while (v49 != v50);
            id v49 = *v38;
          }

          *(void *)(a1 + 344) = v47;
          *(void *)(a1 + 352) = v41;
          *(void *)(a1 + 360) = v48;
          if (v49) {
            operator delete(v49);
          }
        }

        else
        {
          *(void *)int v40 = v36;
          unint64_t v41 = v40 + 8;
        }

        *(void *)(a1 + 352) = v41;
      }

      else
      {
        sub_1004BDDA8(a1 + 344, *v38, (char *)&v62);
      }

      int v52 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)timeval buf = 138412290;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Sending 'version' command to device %@",  buf,  0xCu);
      }

      *(_BYTE *)(a1 + 4sub_100242E28(v1 + 40) = a3;
      if (a7)
      {
        LOWORD(a7) = sub_100360FE8();
        __int16 v53 = sub_100360F0C();
      }

      else
      {
        __int16 v53 = 0;
      }

      buf[0] = 0;
      sub_100242CA4(buf);
      sub_1001D61A4(a2, a3, 76, a7, v53);
      uint64_t v54 = sub_100242CD0(buf);
      sub_1004B9840(v54, v62, 1u);
      sub_100242CD8(buf);
LABEL_35:
      sub_100242FAC((uint64_t)v63);
      goto LABEL_36;
    }

    __int16 v27 = 2;
LABEL_34:
    sub_1004BBD70(v24, a2, 1, v27);
    goto LABEL_35;
  }

  sub_1004BBD70(0LL, a2, 1, 3);
LABEL_36:
}

void sub_1004BDD00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, char a34)
{
  _Unwind_Resume(a1);
}

char *sub_1004BDDA8(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  id v4 = __src;
  id v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    id v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      id v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      id v19 = 0LL;
    }
    size_t v20 = &v19[8 * v16];
    std::string __p = v19;
    __int16 v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        unsigned int v23 = (char *)sub_100008BA0(v8, v22);
        size_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        __int16 v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int16 v27 = v20;
      }
    }

    *(void *)size_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    id v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = __src + 8;
  }

  else
  {
    int v9 = __src + 8;
    unsigned __int8 v10 = v6 - 8;
    id v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)id v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004BDFAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BDFE4(uint64_t a1, __int128 *a2, uint64_t a3)
{
  v35[0] = 0LL;
  v35[1] = 0LL;
  uint64_t v6 = sub_100242F28((uint64_t)v35, a1 + 280);
  for (int i = *(__int128 ****)(a1 + 344); ; ++i)
  {
    uint64_t v8 = *i;
    if (**i == a2) {
      break;
    }
  }

  int v9 = (os_log_s *)qword_1008F7728;
  uint64_t v6 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v6)
  {
    sub_10056B0A4(a3, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    id v11 = v8[1];
    *(_DWORD *)timeval buf = 136446466;
    int v37 = p_p;
    __int16 v38 = 2112;
    unint64_t v39 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received 'supported codec list (%{public}s)' command from device %@",  buf,  0x16u);
  }

  if (*((_DWORD *)v8 + 8) != 2)
  {
LABEL_32:
    sub_1004BBD70(v6, a2, 2, 3);
    return sub_100242FAC((uint64_t)v35);
  }

  sub_1004B9840(v6, (uint64_t)v8, 3u);
  unint64_t v12 = 0LL;
  memset(&__p, 0, sizeof(__p));
  while (sub_10056AAD8(a3) > v12)
  {
    int v13 = sub_10056AE48(a3, v12);
    int v14 = v13;
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__l.__cap_)
    {
      uint64_t v17 = (void *)__p.__r_.__value_.__r.__words[0];
      uint64_t v18 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v19 = v18 + 1;
      int64_t v20 = __p.__r_.__value_.__l.__cap_ - __p.__r_.__value_.__r.__words[0];
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        unint64_t v22 = (char *)sub_10024E33C((uint64_t)&__p.__r_.__value_.__l.__cap_, v21);
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        uint64_t v17 = (void *)__p.__r_.__value_.__r.__words[0];
      }

      else
      {
        unint64_t v22 = 0LL;
      }

      unsigned int v23 = &v22[4 * v18];
      *(_DWORD *)unsigned int v23 = v14;
      std::string::size_type v16 = (std::string::size_type)(v23 + 4);
      while ((void *)size != v17)
      {
        int v24 = *(_DWORD *)(size - 4);
        size -= 4LL;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }

      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      __p.__r_.__value_.__l.__size_ = v16;
      __p.__r_.__value_.__l.__cap_ = (std::string::size_type)&v22[4 * v21];
      if (v17) {
        operator delete(v17);
      }
    }

    else
    {
      *(_DWORD *)__p.__r_.__value_.__l.__size_ = v13;
      std::string::size_type v16 = size + 4;
    }

    __p.__r_.__value_.__l.__size_ = v16;
    ++v12;
  }

  char v31 = 0LL;
  __dst = 0LL;
  uint64_t v33 = 0LL;
  int v26 = (const void *)__p.__r_.__value_.__r.__words[0];
  int64_t v27 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
  {
    uint64_t v30 = 0LL;
    uint64_t v29 = 0LL;
  }

  else
  {
    sub_100271A98(&v31, v27 >> 2);
    uint64_t v28 = (char *)__dst;
    memmove(__dst, v26, v27);
    uint64_t v29 = &v28[4 * (v27 >> 2)];
    __dst = v29;
    uint64_t v30 = (char *)v31;
  }

  if (v8 + 10 != (__int128 **)&v31)
  {
    sub_100272430((char *)v8 + 80, v30, (uint64_t)v29, (v29 - v30) >> 2);
    uint64_t v30 = (char *)v31;
  }

  if (v30)
  {
    __dst = v30;
    operator delete(v30);
  }

  sub_1004BC354(a1, (uint64_t)v8);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return sub_100242FAC((uint64_t)v35);
}

void sub_1004BE2E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BE344(uint64_t a1, __int128 *a2, int a3)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  uint64_t v6 = sub_100242F28((uint64_t)v12, a1 + 280);
  for (int i = *(__int128 ****)(a1 + 344); ; ++i)
  {
    uint64_t v8 = *i;
    if (**i == a2) {
      break;
    }
  }

  int v9 = (os_log_s *)qword_1008F7728;
  uint64_t v6 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v6)
  {
    unsigned __int8 v10 = v8[1];
    *(_DWORD *)timeval buf = 138412290;
    int v14 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received 'codec ready' command from device %@",  buf,  0xCu);
  }

  if (*((_DWORD *)v8 + 8) != 5)
  {
LABEL_10:
    sub_1004BBD70(v6, a2, 4, 3);
    return sub_100242FAC((uint64_t)v12);
  }

  sub_1004B9840(v6, (uint64_t)v8, 6u);
  sub_1002701AC(**(void **)(a1 + 536), a3 + 1250);
  if (sub_100271EC8(**(void **)(a1 + 536))) {
    sub_1004BA380(a1, (uint64_t)v8);
  }
  return sub_100242FAC((uint64_t)v12);
}

void sub_1004BE4A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BE4C0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  v21[0] = 0LL;
  v21[1] = 0LL;
  uint64_t v6 = sub_100242F28((uint64_t)v21, a1 + 280);
  uint64_t v8 = *(__int128 ****)(a1 + 344);
  unint64_t v7 = *(__int128 ****)(a1 + 352);
  if (v8 == v7)
  {
LABEL_5:
    sub_1004BBD70(v6, a2, 7, 3);
  }

  else
  {
    int v9 = *(__int128 ****)(a1 + 344);
    while (1)
    {
      unsigned __int8 v10 = *v9;
      if (**v9 == a2) {
        break;
      }
      if (++v9 == v7) {
        goto LABEL_5;
      }
    }

    id v11 = (os_log_s *)qword_1008F7728;
    uint64_t v12 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      sub_10056B0A4(a3, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      int v14 = v10[1];
      *(_DWORD *)timeval buf = 136446466;
      unsigned int v23 = p_p;
      __int16 v24 = 2112;
      int v25 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received 'passthrough [ %{public}s ]' command from device %@",  buf,  0x16u);

      uint64_t v8 = *(__int128 ****)(a1 + 344);
      unint64_t v7 = *(__int128 ****)(a1 + 352);
    }

    if (v8 == v7) {
      goto LABEL_22;
    }
    char v15 = 0;
    do
    {
      while (*v8 != v10 && *((unsigned __int16 *)*v8 + 8) == *((unsigned __int16 *)v10 + 8))
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        sub_100242CA4(&__p);
        std::string::size_type v16 = **v8;
        uint64_t v17 = (char *)sub_10056AAF0(a3);
        unsigned __int8 v18 = sub_10056AAD8(a3);
        sub_1001D6474(v16, v17, v18);
        uint64_t v12 = (uint64_t)sub_100242CD8(&__p);
        unint64_t v7 = *(__int128 ****)(a1 + 352);
        ++v8;
        char v15 = 1;
        if (v8 == v7) {
          return sub_100242FAC((uint64_t)v21);
        }
      }

      ++v8;
    }

    while (v8 != v7);
    if ((v15 & 1) == 0) {
LABEL_22:
    }
      sub_1004BBD70(v12, a2, 7, 6);
  }

  return sub_100242FAC((uint64_t)v21);
}

void sub_1004BE6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1004BE704(uint64_t a1, uint64_t a2, int a3, int a4)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 280);
  uint64_t v8 = *(void **)(a1 + 344);
  int v9 = *(void **)(a1 + 352);
  while (v8 != v9)
  {
    unsigned __int8 v10 = (void *)*v8;
    if (*(void *)*v8 == a2)
    {
      id v11 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR))
      {
        id v13 = (id)v10[1];
        *(_DWORD *)timeval buf = 67109634;
        int v16 = a3;
        __int16 v17 = 1024;
        int v18 = a4;
        __int16 v19 = 2112;
        id v20 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Received 'error (%u/%u)' command from device %@",  buf,  0x18u);
      }

      return sub_100242FAC((uint64_t)v14);
    }

    ++v8;
  }

  return sub_100242FAC((uint64_t)v14);
}

uint64_t sub_1004BE824(uint64_t a1, uint64_t a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 280);
  for (int i = *(void ***)(a1 + 344); i != *(void ***)(a1 + 352); ++i)
  {
    id v5 = *i;
    if (**i == a2)
    {
      uint64_t v6 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = (id)v5[1];
        *(_DWORD *)timeval buf = 138412290;
        id v11 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received 'restart' command from device %@",  buf,  0xCu);
      }

      sub_1004B95FC(a1, (uint64_t)v5);
      return sub_100242FAC((uint64_t)v9);
    }
  }

  return sub_100242FAC((uint64_t)v9);
}

void sub_1004BE928( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BE944(uint64_t **a1, __int128 *a2, unsigned int a3)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  uint64_t v6 = sub_100242F28((uint64_t)v15, (uint64_t)(a1 + 35));
  for (int i = (int **)a1[43]; ; ++i)
  {
    uint64_t v8 = *i;
  }

  int v9 = (os_log_s *)qword_1008F7728;
  uint64_t v6 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v6)
  {
    id v10 = *((id *)v8 + 1);
    *(_DWORD *)timeval buf = 67109378;
    unsigned int v17 = a3;
    __int16 v18 = 2112;
    id v19 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received 'set volume (%u)' command from device %@",  buf,  0x12u);
  }

  if (v8[8] < 3)
  {
LABEL_13:
    sub_1004BBD70(v6, a2, 10, 3);
    return sub_100242FAC((uint64_t)v15);
  }

  sub_10026F638(*a1[67], (float)a3 / 255.0);
  *((_BYTE *)v8 + 12_Block_object_dispose(&a9, 8) = a3;
  id v13 = a1[43];
  uint64_t v12 = a1[44];
  while (v13 != v12)
  {
    if ((int *)*v13 != v8)
    {
      sub_1004BA9AC(v11, *v13, a3);
      uint64_t v12 = a1[44];
    }

    ++v13;
  }

  return sub_100242FAC((uint64_t)v15);
}

void sub_1004BEABC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BEAE0(uint64_t a1, __int128 *a2, unsigned int a3, int a4)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  uint64_t v8 = sub_100242F28((uint64_t)v15, a1 + 280);
  int v9 = *(__int128 ****)(a1 + 344);
  id v10 = *(__int128 ****)(a1 + 352);
  while (v9 != v10)
  {
    uint64_t v11 = *v9;
    if (**v9 == a2)
    {
      uint64_t v12 = (os_log_s *)qword_1008F7728;
      uint64_t v8 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v8)
      {
        id v13 = v11[1];
        *(_DWORD *)timeval buf = 67109891;
        unsigned int v17 = a3;
        __int16 v18 = 1024;
        int v19 = a4;
        __int16 v20 = 2160;
        uint64_t v21 = 1752392040LL;
        __int16 v22 = 2113;
        unsigned int v23 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received 'capabilities (%u/%u)' command from device %{private, mask.hash}@",  buf,  0x22u);
      }

      if (*((_DWORD *)v11 + 8) == 1)
      {
        sub_1004B9840(v8, (uint64_t)v11, 2u);
        v11[8] = (__int128 *)a3;
        *((_DWORD *)v11 + 1_Block_object_dispose(&a9, 8) = a4;
        return sub_100242FAC((uint64_t)v15);
      }

      break;
    }

    ++v9;
  }

  sub_1004BBD70(v8, a2, 12, 3);
  return sub_100242FAC((uint64_t)v15);
}

void sub_1004BEC4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BEC6C(uint64_t a1, uint64_t a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 280);
  for (int i = *(void ***)(a1 + 344); i != *(void ***)(a1 + 352); ++i)
  {
    id v5 = *i;
    if (**i == a2)
    {
      uint64_t v6 = (os_log_s *)qword_1008F7728;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        id v8 = (id)v5[1];
        *(_DWORD *)timeval buf = 138412290;
        id v12 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received 'stream ready' command from device %@",  buf,  0xCu);
      }

      if (*((_DWORD *)v5 + 8) == 7)
      {
        sub_1004B9840(v7, (uint64_t)v5, 8u);
        sub_1004B9F10(a1);
      }

      return sub_100242FAC((uint64_t)v10);
    }
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_1004BED84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004BEDA0(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100242F28((uint64_t)v24, (uint64_t)(a1 + 35));
  for (int i = (void *)a1[43]; ; ++i)
  {
    if (i == (void *)a1[44]) {
      return sub_100242FAC((uint64_t)v24);
    }
    int v9 = (void *)*i;
    if (*(void *)*i == a2) {
      break;
    }
  }

  id v10 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEBUG))
  {
    sub_10056B0A4(a3, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    id v19 = (id)v9[1];
    __int16 v20 = v19;
    uint64_t v21 = "No";
    *(_DWORD *)timeval buf = 136446722;
    *(void *)int v26 = p_p;
    if (a4) {
      uint64_t v21 = "Yes";
    }
    *(_WORD *)&v26[8] = 2112;
    id v27 = v19;
    __int16 v28 = 2080;
    uint64_t v29 = v21;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Received 'audio (%{public}s)' from device %@ wakeUpEvent %s",  buf,  0x20u);
  }

  if (*((_DWORD *)v9 + 8) != 8)
  {
    char v15 = (os_log_s *)qword_1008F7728;
    if (!os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
      return sub_100242FAC((uint64_t)v24);
    }
    BOOL v16 = 0;
LABEL_24:
    int v22 = *((_DWORD *)v9 + 6);
    *(_DWORD *)timeval buf = 67109376;
    *(_DWORD *)int v26 = v16;
    *(_WORD *)&v26[4] = 1024;
    *(_DWORD *)&v26[6] = v22;
    _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Skipping recvAudioEvent, canStreamAudio: %u, Streaming mode: %u",  buf,  0xEu);
    return sub_100242FAC((uint64_t)v24);
  }

  int v11 = *((_DWORD *)v9 + 12);
  if (v11 != 3 || *((_DWORD *)v9 + 6) != 2)
  {
    char v15 = (os_log_s *)qword_1008F7728;
    if (!os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
      return sub_100242FAC((uint64_t)v24);
    }
    BOOL v16 = v11 == 3;
    goto LABEL_24;
  }

  id v12 = (unsigned __int8 *)sub_10056AAF0(a3);
  size_t v13 = sub_10056AAD8(a3);
  sub_1004BBE0C((uint64_t)a1, v12, v13, a4);
  uint64_t v14 = *(void *)(a1[67] + 8LL);
  if (*(_BYTE *)(v14 + 5))
  {
    a1[68] = dispatch_time(0LL, 3750000LL * *(unsigned __int8 *)(v14 + 1) + 2500000);
    sub_1004BF04C((uint64_t)a1, a2);
  }

  return sub_100242FAC((uint64_t)v24);
}

void sub_1004BF02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1004BF04C(uint64_t a1, uint64_t a2)
{
  id v3 = *(dispatch_object_s **)(a1 + 552);
  if (v3)
  {
    dispatch_suspend(v3);
  }

  else
  {
    uint64_t v5 = sub_100404FE8();
    uint64_t v6 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  1uLL,  *(dispatch_queue_t *)(v5 + 8));
    *(void *)(a1 + 552) = v6;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_1004C063C;
    handler[3] = &unk_10087EB20;
    handler[4] = a2;
    dispatch_source_set_event_handler(v6, handler);
  }

  BOOL v7 = *(dispatch_source_s **)(a1 + 552);
  if (v7)
  {
    dispatch_source_set_timer(v7, *(void *)(a1 + 544), 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 552));
  }

uint64_t sub_1004BF100(uint64_t a1, uint64_t a2, int a3)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 280);
  uint64_t v6 = *(void **)(a1 + 344);
  BOOL v7 = *(void **)(a1 + 352);
  while (v6 != v7)
  {
    id v8 = (void *)*v6;
    if (*(void *)*v6 == a2)
    {
      int v9 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (id)v8[1];
        *(_DWORD *)timeval buf = 67109378;
        int v14 = a3;
        __int16 v15 = 2112;
        id v16 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received 'state noti (%u)' command from device %@",  buf,  0x12u);
      }

      return sub_100242FAC((uint64_t)v12);
    }

    ++v6;
  }

  return sub_100242FAC((uint64_t)v12);
}

uint64_t sub_1004BF20C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 280);
  id v8 = *(void **)(a1 + 344);
  int v9 = *(void **)(a1 + 352);
  while (v8 != v9)
  {
    id v10 = (void *)*v8;
    if (*(void *)*v8 == a2)
    {
      int v11 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = (id)v10[1];
        *(_DWORD *)timeval buf = 67109634;
        int v16 = a3;
        __int16 v17 = 1024;
        int v18 = a4;
        __int16 v19 = 2112;
        id v20 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received 'link quality noti (%d, %u)' command from device %@",  buf,  0x18u);
      }

      return sub_100242FAC((uint64_t)v14);
    }

    ++v8;
  }

  return sub_100242FAC((uint64_t)v14);
}

uint64_t sub_1004BF328(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 280);
  for (int i = *(void **)(a1 + 344); i != *(void **)(a1 + 352); ++i)
  {
    BOOL v7 = (void *)*i;
    if (*(void *)*i == a2)
    {
      id v8 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = (id)v7[1];
        *(_DWORD *)timeval buf = 67109378;
        unsigned int v17 = a3;
        __int16 v18 = 2112;
        id v19 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received 'bonding status response (%u)' command from device %@",  buf,  0x12u);
      }

      if (a3 >= 3) {
        unsigned __int8 v10 = 0;
      }
      else {
        unsigned __int8 v10 = 0x10102u >> (8 * a3);
      }
      id v11 = (id)v7[1];
      id v12 = sub_1004BD514(a1, v11);
      if (v12)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089C230);
        }
        uint64_t v13 = sub_1005CC198((uint64_t)off_1008D5F28, v11, 0);
        buf[0] = BYTE5(v13);
        buf[1] = BYTE4(v13);
        uint8_t buf[2] = BYTE3(v13);
        buf[3] = BYTE2(v13);
        LOBYTE(v17) = BYTE1(v13);
        BYTE1(v17) = v13;
        sub_1003A22D4(v12, (uint64_t)buf, (unsigned __int8 *)(a1 + 649), v10);
      }

      return sub_100242FAC((uint64_t)v15);
    }
  }

  return sub_100242FAC((uint64_t)v15);
}

void sub_1004BF4F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100242FAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BF518(uint64_t a1, uint64_t a2, int a3)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 280);
  uint64_t v6 = *(void **)(a1 + 344);
  BOOL v7 = *(void **)(a1 + 352);
  while (v6 != v7)
  {
    id v8 = (void *)*v6;
    if (*(void *)*v6 == a2)
    {
      id v9 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (id)v8[1];
        *(_DWORD *)timeval buf = 67109378;
        int v14 = a3;
        __int16 v15 = 2112;
        id v16 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received 'siri (%u)' command from device %@",  buf,  0x12u);
      }

      return sub_100242FAC((uint64_t)v12);
    }

    ++v6;
  }

  return sub_100242FAC((uint64_t)v12);
}

void sub_1004BF624(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5)
{
  char v10 = sub_1001C8ECC(a1);
  uint64_t v11 = sub_100404FE8();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1004BF6C0;
  v12[3] = &unk_100886EE0;
  void v12[4] = a1;
  __int16 v13 = a2;
  __int16 v14 = a3;
  __int16 v15 = a4;
  __int16 v16 = a5;
  char v17 = v10;
  sub_100405384(v11, v12);
}

void sub_1004BF6C0(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  sub_1004BD628( qword_1008D9B18,  *(__int128 **)(a1 + 32),  *(unsigned __int16 *)(a1 + 40),  *(unsigned __int16 *)(a1 + 42),  *(unsigned __int16 *)(a1 + 44),  *(unsigned __int16 *)(a1 + 46),  *(unsigned __int8 *)(a1 + 48));
}

void sub_1004BF724(uint64_t a1, const void *a2, unsigned int a3)
{
  id v8 = 0LL;
  id v9 = 0LL;
  sub_10056AB04(&v8, a2, a3);
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768LL;
  _DWORD v5[2] = sub_1004BF818;
  v5[3] = &unk_10089BA30;
  v5[4] = a1;
  uint64_t v6 = &off_10087FAA8;
  BOOL v7 = v9;
  if (v9) {
    sub_1002CD1E0((uint64_t)v9);
  }
  sub_100405384(v4, v5);
  uint64_t v6 = &off_10087FAA8;
  if (v7) {
    sub_1002CD254(v7);
  }
  id v8 = &off_10087FAA8;
  if (v9) {
    sub_1002CD254(v9);
  }
}

void sub_1004BF7DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  if (a16) {
    sub_1002CD254(a16);
  }
  *(void *)(v16 - 4_Block_object_dispose(&a9, 8) = &off_10087FAA8;
  __int16 v18 = *(unsigned int **)(v16 - 40);
  if (v18) {
    sub_1002CD254(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BF818(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BDFE4(qword_1008D9B18, *(__int128 **)(a1 + 32), a1 + 40);
}

void sub_1004BF86C(uint64_t a1, __int16 a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1004BF8D4;
  v5[3] = &unk_1008878D8;
  v5[4] = a1;
  __int16 v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_1004BF8D4(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BE344(qword_1008D9B18, *(__int128 **)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_1004BF928(uint64_t a1, const void *a2, unsigned int a3)
{
  id v8 = 0LL;
  id v9 = 0LL;
  sub_10056AB04(&v8, a2, a3);
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768LL;
  _DWORD v5[2] = sub_1004BFA1C;
  v5[3] = &unk_10089BA30;
  v5[4] = a1;
  __int16 v6 = &off_10087FAA8;
  BOOL v7 = v9;
  if (v9) {
    sub_1002CD1E0((uint64_t)v9);
  }
  sub_100405384(v4, v5);
  __int16 v6 = &off_10087FAA8;
  if (v7) {
    sub_1002CD254(v7);
  }
  id v8 = &off_10087FAA8;
  if (v9) {
    sub_1002CD254(v9);
  }
}

void sub_1004BF9E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  if (a16) {
    sub_1002CD254(a16);
  }
  *(void *)(v16 - 4_Block_object_dispose(&a9, 8) = &off_10087FAA8;
  __int16 v18 = *(unsigned int **)(v16 - 40);
  if (v18) {
    sub_1002CD254(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BFA1C(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BE4C0(qword_1008D9B18, *(__int128 **)(a1 + 32), a1 + 40);
}

void sub_1004BFA70(uint64_t a1, char a2, __int16 a3)
{
  uint64_t v6 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1004BFAE8;
  v7[3] = &unk_100893298;
  void v7[4] = a1;
  char v9 = a2;
  __int16 v8 = a3;
  sub_100405384(v6, v7);
}

uint64_t sub_1004BFAE8(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BE704( qword_1008D9B18,  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 42),  *(unsigned __int16 *)(a1 + 40));
}

void sub_1004BFB40(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004BFBA0;
  uint64_t v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_100405384(v2, v3);
}

uint64_t sub_1004BFBA0(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BE824(qword_1008D9B18, *(void *)(a1 + 32));
}

void sub_1004BFBF0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1004BFC58;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_1004BFC58(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BE944((uint64_t **)qword_1008D9B18, *(__int128 **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1004BFCAC(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1004BFD24;
  v7[3] = &unk_1008878D8;
  void v7[4] = a1;
  char v8 = a2;
  char v9 = a3;
  sub_100405384(v6, v7);
}

uint64_t sub_1004BFD24(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BEAE0( qword_1008D9B18,  *(__int128 **)(a1 + 32),  *(unsigned __int8 *)(a1 + 40),  *(unsigned __int8 *)(a1 + 41));
}

void sub_1004BFD7C(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004BFDDC;
  uint64_t v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_100405384(v2, v3);
}

uint64_t sub_1004BFDDC(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BEC6C(qword_1008D9B18, *(void *)(a1 + 32));
}

void sub_1004BFE2C(uint64_t a1, const void *a2, unsigned int a3, char a4)
{
  uint64_t v11 = 0LL;
  id v12 = 0LL;
  sub_10056AB04(&v11, a2, a3);
  uint64_t v6 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768LL;
  _DWORD v7[2] = sub_1004BFF28;
  v7[3] = &unk_10089C0F8;
  void v7[4] = a1;
  char v8 = &off_10087FAA8;
  char v9 = v12;
  if (v12) {
    sub_1002CD1E0((uint64_t)v12);
  }
  char v10 = a4;
  sub_100405384(v6, v7);
  char v8 = &off_10087FAA8;
  if (v9) {
    sub_1002CD254(v9);
  }
  uint64_t v11 = &off_10087FAA8;
  if (v12) {
    sub_1002CD254(v12);
  }
}

void sub_1004BFEEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int *a15)
{
  if (a15) {
    sub_1002CD254(a15);
  }
  *(void *)(v15 - 4_Block_object_dispose(&a9, 8) = &off_10087FAA8;
  char v17 = *(unsigned int **)(v15 - 40);
  if (v17) {
    sub_1002CD254(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BFF28(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BEDA0((void *)qword_1008D9B18, *(void *)(a1 + 32), a1 + 40, *(unsigned __int8 *)(a1 + 56));
}

void sub_1004BFF80(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1004BFFE8;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_1004BFFE8(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BF100(qword_1008D9B18, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1004C003C(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1004C00B4;
  v7[3] = &unk_1008878D8;
  void v7[4] = a1;
  char v8 = a2;
  char v9 = a3;
  sub_100405384(v6, v7);
}

uint64_t sub_1004C00B4(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BF20C(qword_1008D9B18, *(void *)(a1 + 32), *(char *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void sub_1004C010C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1004C0174;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_1004C0174(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BF328(qword_1008D9B18, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1004C01C8(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1004C0230;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_1004C0230(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BF518(qword_1008D9B18, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1004C0284(uint64_t a1, int a2, char a3)
{
  uint64_t v6 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1004C02FC;
  v7[3] = &unk_10088DA08;
  void v7[4] = a1;
  int v8 = a2;
  char v9 = a3;
  sub_100405384(v6, v7);
}

uint64_t sub_1004C02FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004B9B94(qword_1008D9B18, *(void *)(a1 + 32), a3, *(unsigned __int8 *)(a1 + 44));
}

void sub_1004C0350(uint64_t a1, __int16 a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1004C03B8;
  v5[3] = &unk_1008878D8;
  v5[4] = a1;
  __int16 v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_1004C03B8(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004B9FE8((void *)qword_1008D9B18, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_1004C040C(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1004C0474;
  v5[3] = &unk_10087EB68;
  v5[4] = a1;
  int v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_1004C0474(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BA238(qword_1008D9B18, *(void *)(a1 + 32));
}

uint64_t sub_1004C04C4(void *a1, uint64_t a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, (uint64_t)(a1 + 35));
  for (int i = (void *)a1[43]; i != (void *)a1[44]; ++i)
  {
    uint64_t v5 = (void *)*i;
    if (*(void *)*i == a2)
    {
      int v6 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = (id)v5[1];
        *(_DWORD *)timeval buf = 138412290;
        id v11 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "No Audio from device %@, add empty packet for PLC",  buf,  0xCu);
      }

      if (*((_DWORD *)v5 + 8) == 8 && *((_DWORD *)v5 + 12) == 3)
      {
        sub_1004BBE0C((uint64_t)a1, 0LL, 0LL, 0);
        a1[68] = dispatch_time(0LL, 2500000LL * *(unsigned __int8 *)(*(void *)(a1[67] + 8LL) + 1LL));
        sub_1004BF04C(a1, a2);
      }

      return sub_100242FAC((uint64_t)v9);
    }
  }

  return sub_100242FAC((uint64_t)v9);
}

void sub_1004C0620( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1004C063C(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004C04C4((void *)qword_1008D9B18, *(void *)(a1 + 32));
}

void sub_1004C068C(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[43];
  if (v2 != (uint64_t *)a1[44])
  {
    uint64_t v3 = 0LL;
    char v4 = 0;
    char v5 = 0;
    while (1)
    {
      uint64_t v6 = *v2;
      if (!*(_BYTE *)(*v2 + 18)) {
        uint64_t v3 = *v2;
      }
      uint64_t v7 = a1[67];
      if (*(_DWORD *)(v7 + 16) != 2) {
        break;
      }
      int v8 = (os_log_s *)qword_1008F7728;
      if (!*(_BYTE *)(v6 + 129)) {
        goto LABEL_11;
      }
      *(_DWORD *)(v6 + 24) = 2;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = *(id *)(v6 + 8);
        *(_DWORD *)timeval buf = 138412290;
        id v17 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Set device %@ as Bidirectional",  buf,  0xCu);

        uint64_t v7 = a1[67];
      }

      char v5 = 1;
      sub_1002721D4(*(void *)v7, 1);
LABEL_14:
      if (++v2 == (uint64_t *)a1[44])
      {
        if ((v5 & 1) != 0) {
          goto LABEL_22;
        }
        goto LABEL_18;
      }
    }

    int v8 = (os_log_s *)qword_1008F7728;
LABEL_11:
    *(_DWORD *)(v6 + 24) = 0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = *(id *)(v6 + 8);
      *(_DWORD *)timeval buf = 138412290;
      id v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Set device %@ as output", buf, 0xCu);
    }

    char v4 = 1;
    goto LABEL_14;
  }

  uint64_t v3 = 0LL;
  char v4 = 0;
LABEL_18:
  uint64_t v11 = a1[67];
  if (*(_DWORD *)(v11 + 16) == 2)
  {
    id v12 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)timeval buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "No Input device found. Disable InputAudio",  buf,  2u);
      uint64_t v11 = a1[67];
    }

    sub_1002721D4(*(void *)v11, 0);
  }

void sub_1004C0920(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 352) - *(void *)(a1 + 344) == 8LL)
  {
    if (*(_BYTE *)(a2 + 129))
    {
      if (*(_BYTE *)(a2 + 18)) {
        return;
      }
      uint64_t v3 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        id v4 = *(id *)(a2 + 8);
        int v9 = 138412290;
        id v10 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Reset device %@ to tail",  (uint8_t *)&v9,  0xCu);
      }

      char v5 = 1;
    }

    else
    {
      if (!*(_BYTE *)(a2 + 18)) {
        return;
      }
      uint64_t v6 = (os_log_s *)qword_1008F7728;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
      char v5 = 0;
      if (v7)
      {
        id v8 = *(id *)(a2 + 8);
        int v9 = 138412290;
        id v10 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Reset device %@ to head",  (uint8_t *)&v9,  0xCu);

        char v5 = 0;
      }
    }

    *(_BYTE *)(a2 + 1_Block_object_dispose(&a9, 8) = v5;
  }

uint64_t sub_1004C0A70()
{
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
    sub_100686338();
  }
  return 0LL;
}

void sub_1004C0AB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 560);
  id v4 = *(id ***)(a1 + 624);
  if (v4 != *(id ***)(a1 + 632))
  {
    uint64_t v5 = -(uint64_t)v4;
    while (1)
    {
      uint64_t v6 = *v4;
      id v7 = sub_1003A2D50(*v4);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 UUIDString]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);
      unsigned int v11 = [v9 isEqualToString:v10];

      if (v11) {
        break;
      }
      ++v4;
      v5 -= 8LL;
      if (v4 == *(id ***)(a1 + 632)) {
        goto LABEL_12;
      }
    }

    id v12 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Deleting easy pairing agent", v16, 2u);
    }

    uint64_t v13 = *(void *)(a1 + 632);
    uint64_t v14 = v13 - (8 - v5);
    if (v13 != 8 - v5) {
      memmove((void *)-v5, (const void *)(8 - v5), v13 - (8 - v5));
    }
    *(void *)(a1 + 632) = v14 - v5;
    if (v6)
    {
      id v15 = sub_1003A2000(v6);
      operator delete(v15);
    }
  }

void sub_1004C0C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004C0C5C(uint64_t a1)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 560);
  uint64_t v2 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting LEA easy pairing agents", v11, 2u);
  }

  id v3 = *(id ***)(a1 + 624);
  unsigned int v4 = *(_DWORD *)(a1 + 632) - (_DWORD)v3;
  int v5 = (v4 >> 3);
  if ((v4 >> 3))
  {
    uint64_t v6 = 0LL;
    do
    {
      id v7 = v6;
      id v8 = *v3;
      id v9 = sub_1003A2D50(*v3);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v9);

      if (sub_1003A2D38((uint64_t)v8))
      {
        sub_1004BD430(a1, v6);
      }

      else if (sub_1003A2D40((uint64_t)v8))
      {
        sub_1004C0D8C(a1, v6);
      }

      ++v3;
      --v5;
    }

    while (v5);
  }

  return sub_100242FAC((uint64_t)v12);
}

void sub_1004C0D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C0D8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_BYTE *)(a1 + 648))
  {
    unsigned int v4 = sub_1004BD514(a1, v3);
    uint64_t v5 = (uint64_t)v4;
    if (v4)
    {
      if ((sub_10020753C((uint64_t)v4) & 1) != 0)
      {
        sub_1003A2D30(v5);
      }

      else
      {
        sub_1003A2D08(v5, 0);
        sub_1003A2AB0(v5, 1, 1);
        v8[0] = 256;
        v8[1] = sub_1003A2D58(v5);
        uint64_t v6 = sub_1002E8D94();
        (*(void (**)(uint64_t, _WORD *))(*(void *)v6 + 136LL))(v6, v8);
      }
    }

    else
    {
      sub_1004C0A70();
    }
  }

  sub_1004C0AB4(a1, v3);

  return 1LL;
}

void sub_1004C0E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C0E68(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = sub_1004BD514(a1, v4);
  if (v3) {
    sub_1003A2D08((uint64_t)v3, 1);
  }
  else {
    sub_1004C0A70();
  }
}

void sub_1004C0EB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1004C0ECC(_BYTE *a1, void *a2)
{
  id v3 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089C230);
  }
  uint64_t v4 = sub_1005CC198((uint64_t)off_1008D5F28, v3, 0);
  a1[649] = BYTE5(v4);
  a1[650] = BYTE4(v4);
  a1[651] = BYTE3(v4);
  a1[652] = BYTE2(v4);
  a1[653] = BYTE1(v4);
  a1[654] = v4;
  a1[648] = 1;
  uint64_t v5 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003FE1B4(a1 + 649, __p);
    if (v8 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)timeval buf = 136315138;
    id v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Magnet link connected with device %s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_1004C0C5C((uint64_t)a1);
}

void sub_1004C1028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C1048(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089C230);
  }
  uint64_t v4 = sub_1005CC198((uint64_t)off_1008D5F28, v3, 0);
  LOBYTE(v13) = BYTE5(v4);
  BYTE1(v13) = BYTE4(v4);
  BYTE2(v13) = BYTE3(v4);
  HIBYTE(v13) = BYTE2(v4);
  LOBYTE(v14) = BYTE1(v4);
  HIBYTE(v14) = v4;
  uint64_t v5 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = sub_1005BFB9C(v4);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)timeval buf = 138412290;
    uint64_t v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "magnet link disconnected with device %@",  buf,  0xCu);
  }

  char v8 = (unsigned __int8 *)(a1 + 649);
  if (v13 == *(_DWORD *)(a1 + 649) && v14 == *(_WORD *)(a1 + 653))
  {
    *(_BYTE *)(a1 + 64_Block_object_dispose(&a9, 8) = 0;
  }

  else
  {
    id v10 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR))
    {
      id v11 = sub_1005BFB9C(v4);
      id v12 = (id)objc_claimAutoreleasedReturnValue(v11);
      sub_1003FE1B4(v8, buf);
      sub_100686364(v12, (char *)buf, (uint64_t)v17, v10);
    }
  }
}

void sub_1004C11F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C1224(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (*(_BYTE *)(a1 + 648))
  {
    v9[0] = 0LL;
    v9[1] = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5],  0,  0,  0LL,  0LL,  (unsigned __int8 *)v9);
    id v6 = sub_100241F94((const unsigned __int8 *)v9);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    char v8 = sub_1004BD514(a1, v7);
    if (v8) {
      sub_1003A22D4(v8, a1 + 649, a2, a3);
    }
  }

void sub_1004C133C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C1354(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (*(_BYTE *)(a1 + 648))
  {
    v9[0] = 0LL;
    v9[1] = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5],  0,  0,  0LL,  0LL,  (unsigned __int8 *)v9);
    id v6 = sub_100241F94((const unsigned __int8 *)v9);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    char v8 = sub_1004BD514(a1, v7);
    if (v8) {
      sub_1003A2974((uint64_t)v8, (unsigned __int8 *)(a1 + 649), (uint64_t)a2, a3);
    }
  }

void sub_1004C146C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C1484(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089C230);
  }
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5],  0,  0,  0LL,  0LL,  (unsigned __int8 *)v7);
  uint64_t v4 = sub_100241F94((const unsigned __int8 *)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = sub_1004BD514(a1, v5);
  if (v6) {
    sub_1003A2D10((uint64_t)v6);
  }
}

void sub_1004C157C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C1594(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089C230);
  }
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5],  0,  0,  0LL,  0LL,  (unsigned __int8 *)v7);
  uint64_t v4 = sub_100241F94((const unsigned __int8 *)v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = sub_1004BD514(a1, v5);
  if (v6) {
    sub_1003A2D24((uint64_t)v6);
  }
}

void sub_1004C168C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C16A4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
  id v7 = a4;
  BOOL v8 = *(_DWORD *)a2 == *(_DWORD *)(a1 + 649) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 653);
  int v9 = !v8;
  id v10 = (os_log_s *)qword_1008F7728;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      sub_1003FE1B4((unsigned __int8 *)a2, &__p);
      if (v32 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = (void **)__p;
      }
      *(_DWORD *)timeval buf = 136315138;
      BOOL v34 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "sending pair status request to LEA device %s",  buf,  0xCu);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p);
      }
    }

    for (int i = *(__int128 ****)(a1 + 344); i != *(__int128 ****)(a1 + 352); ++i)
    {
      __int16 v14 = *i;
      id v15 = (*i)[1];
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 UUIDString]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v7 UUIDString]);
      unsigned int v18 = [v16 isEqualToString:v17];

      if (v18)
      {
        LOBYTE(__p) = 0;
        sub_100242CA4(&__p);
        sub_1001D64EC(*v14, (uint64_t)a3, 0);
        sub_100242CD0(&__p);
        sub_100242CD8(&__p);
        break;
      }
    }
  }

  else
  {
    if (v11)
    {
      sub_1003FE1B4(a3, &__p);
      id v19 = v32 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)timeval buf = 136315138;
      BOOL v34 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "sending pair status request to magnet for device %s",  buf,  0xCu);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p);
      }
    }

    std::stringbuf::string_type __p = 0LL;
    char v31 = 0LL;
    uint64_t v32 = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    sub_1005CE910((uint64_t)off_1008D5F28, v7, (uint64_t *)&__p);
    id v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v21 = (char *)__p;
    if (__p != &v31)
    {
      do
      {
        int v22 = objc_alloc(&OBJC_CLASS___NSString);
        unsigned int v23 = v21 + 32;
        if (v21[55] < 0) {
          unsigned int v23 = (void *)*v23;
        }
        __int16 v24 = -[NSString initWithUTF8String:](v22, "initWithUTF8String:", v23);
        -[NSMutableArray addObject:](v20, "addObject:", v24);

        int v25 = (char *)*((void *)v21 + 1);
        if (v25)
        {
          do
          {
            int v26 = (char **)v25;
            int v25 = *(char **)v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            int v26 = (char **)*((void *)v21 + 2);
            BOOL v8 = *v26 == v21;
            uint64_t v21 = (char *)v26;
          }

          while (!v8);
        }

        uint64_t v21 = (char *)v26;
      }

      while (v26 != &v31);
    }

    uint64_t v27 = sub_1002E8F6C();
    sub_1003FE1B4(a3, v28);
    (*(void (**)(uint64_t, void **, id, NSMutableArray *))(*(void *)v27 + 152LL))(v27, v28, v7, v20);
    if (v29 < 0) {
      operator delete(v28[0]);
    }

    sub_10023E78C((uint64_t)&__p, v31);
  }
}

void sub_1004C19EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  _Unwind_Resume(a1);
}

void sub_1004C1A8C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
}

void sub_1004C1A94( uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5, _OWORD *a6, _OWORD *a7, void *a8)
{
  id v15 = a8;
  if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 649) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 653))
  {
    v26[0] = 0LL;
    v26[1] = 0LL;
    uint64_t v27 = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    sub_1005CC0D4((uint64_t)off_1008D5F28, v15, (uint64_t)v26);
    id v17 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4(a3, __p);
      unsigned int v18 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)timeval buf = 136315138;
      char v29 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "sending store bonding info request to magnet link for device %s",  buf,  0xCu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v19 = sub_1002E8F6C();
    sub_1003FE1B4(a3, v22);
    if (SHIBYTE(v27) < 0)
    {
      sub_100024238(v20, v26[0], (unint64_t)v26[1]);
    }

    else
    {
      *(_OWORD *)id v20 = *(_OWORD *)v26;
      uint64_t v21 = v27;
    }

    (*(void (**)(uint64_t, void **, void **, uint64_t, uint64_t *, _OWORD *, _OWORD *))(*(void *)v19 + 160LL))( v19,  v22,  v20,  a4,  a5,  a6,  a7);
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(v26[0]);
    }
  }

  else
  {
    sub_1004C1D24(a1, (uint64_t)a3, a4, a5, a6, a7, v15);
  }
}

void sub_1004C1CBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }

  _Unwind_Resume(a1);
}

void sub_1004C1D24(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, _OWORD *a5, _OWORD *a6, void *a7)
{
  id v10 = a7;
  BOOL v11 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending bonding info to LEA device", buf, 2u);
  }

  for (int i = *(uint64_t **)(a1 + 344); i != *(uint64_t **)(a1 + 352); ++i)
  {
    uint64_t v13 = *i;
    id v14 = *(id *)(*i + 8);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 UUIDString]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v10 UUIDString]);
    unsigned int v17 = [v15 isEqualToString:v16];

    if (v17)
    {
      if (a3)
      {
        unsigned int v18 = (os_log_s *)qword_1008F7728;
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
        {
          id v19 = *(id *)(v13 + 8);
          *(_DWORD *)timeval buf = 138412290;
          id v29 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Sending 'central identification' command to device %@",  buf,  0xCu);
        }

        char v27 = 0;
        sub_100242CA4(&v27);
        sub_1001D6540(*(__int128 **)v13, a2, a3, a4);
        sub_100242CD0(&v27);
        id v20 = (os_log_s *)qword_1008F7728;
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = *(id *)(v13 + 8);
          *(_DWORD *)timeval buf = 138412290;
          id v29 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Sending 'identity information' command to device %@",  buf,  0xCu);
        }

        sub_100242C98(&v27);
        sub_1001D65D0(*(__int128 **)v13, a2, a6);
        sub_100242CD0(&v27);
        int v22 = (os_log_s *)qword_1008F7728;
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
        {
          id v23 = *(id *)(v13 + 8);
          *(_DWORD *)timeval buf = 138412290;
          id v29 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Sending 'encryption information' command to device %@",  buf,  0xCu);
        }

        sub_100242C98(&v27);
        sub_1001D6654(*(__int128 **)v13, a2, a5);
        sub_100242CD0(&v27);
        sub_100242CD8(&v27);
      }

      break;
    }
  }
}

void sub_1004C1FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C2034( uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5, _OWORD *a6, _OWORD *a7, void *a8)
{
}

void sub_1004C203C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089C230);
  }
  v30[0] = 0LL;
  v30[1] = 0LL;
  sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)*a3 << 40) | ((unint64_t)a3[1] << 32) | ((unint64_t)a3[2] << 24) | ((unint64_t)a3[3] << 16) | ((unint64_t)a3[4] << 8) | a3[5],  0,  0,  0LL,  0LL,  (unsigned __int8 *)v30);
  BOOL v8 = sub_100241F94((const unsigned __int8 *)v30);
  int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = sub_1004BD514(a1, v9);
  uint64_t v11 = (uint64_t)v10;
  if (v10)
  {
    LOWORD(v24[0]) = a4;
    WORD1(v24[0]) = sub_1003A2D58((uint64_t)v10);
    uint64_t v12 = sub_1002E8D94();
    (*(void (**)(uint64_t, void **))(*(void *)v12 + 136LL))(v12, v24);
    sub_1003A2D00(v11, 0);
  }

  uint64_t v13 = (os_log_s *)qword_1008F7728;
  if (a4 == 2)
  {
    if (!os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    sub_1003FE1B4(a2, v24);
    int v14 = v25;
    id v15 = (void **)v24[0];
    sub_1003FE1B4(a3, __p);
    uint64_t v16 = v24;
    if (v14 < 0) {
      uint64_t v16 = v15;
    }
    if (v23 >= 0) {
      unsigned int v17 = __p;
    }
    else {
      unsigned int v17 = (void **)__p[0];
    }
    *(_DWORD *)timeval buf = 136315394;
    char v27 = v16;
    __int16 v28 = 2080;
    id v29 = v17;
    _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "LEA easy pair failed between devices %s and %s",  buf,  0x16u);
  }

  else
  {
    if (!os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    sub_1003FE1B4(a2, v24);
    int v18 = v25;
    id v19 = (void **)v24[0];
    sub_1003FE1B4(a3, __p);
    id v20 = v24;
    if (v18 < 0) {
      id v20 = v19;
    }
    if (v23 >= 0) {
      id v21 = __p;
    }
    else {
      id v21 = (void **)__p[0];
    }
    *(_DWORD *)timeval buf = 136315394;
    char v27 = v20;
    __int16 v28 = 2080;
    id v29 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "LEA easy pair succeeded between devices %s and %s",  buf,  0x16u);
  }

  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
LABEL_24:
}

void sub_1004C22D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1004C2310(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
}

uint64_t sub_1004C2318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  v5[1] = 0LL;
  uint64_t v6 = 0LL;
  v5[0] = 0LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, void *, void *, uint64_t))(*(void *)a1 + 184LL))( a1,  a2,  a3,  0LL,  &v6,  v7,  v5,  a4);
}

uint64_t sub_1004C238C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  v5[1] = 0LL;
  uint64_t v6 = 0LL;
  v5[0] = 0LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, void *, void *, uint64_t))(*(void *)(a1 - 264) + 184LL))( a1 - 264,  a2,  a3,  0LL,  &v6,  v7,  v5,  a4);
}

void sub_1004C2404(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100404FE8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1004C24B4;
  v6[3] = &unk_1008800B8;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100405384(v4, v6);
}

void sub_1004C2494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1004C24B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received lePairingCompleted", buf, 2u);
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089C230);
  }
  uint64_t v4 = off_1008D5F28;
  id v5 = *(void **)(a1 + 32);
  sub_10002418C(v11, "IsHearingAid");
  if (sub_1005CE5A8((uint64_t)v4, v5, (uint64_t)v11))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    uint64_t v6 = off_1008D5F28;
    id v7 = *(void **)(a1 + 32);
    sub_10002418C(__p, "HearingAidSupportsWatch");
    int v8 = sub_1005CE5A8((uint64_t)v6, v7, (uint64_t)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    int v8 = 0;
  }

  if (v12 < 0)
  {
    operator delete(v11[0]);
    if (!v8) {
      return;
    }
  }

  else if (!v8)
  {
    return;
  }

  if (*(_BYTE *)(v2 + 655))
  {
    if (*(_BYTE *)(v2 + 648))
    {
      if (qword_1008D9B20 != -1) {
        dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
      }
      sub_1004BD430(qword_1008D9B18, *(void **)(a1 + 32));
    }

    else
    {
      if (qword_1008D9B20 != -1) {
        dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
      }
      sub_1004BD4B0(qword_1008D9B18, *(void **)(a1 + 32));
    }
  }

void sub_1004C2684( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004C26B8(uint64_t a1, void *a2)
{
}

void sub_1004C26C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100404FE8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1004C2770;
  v6[3] = &unk_1008800B8;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100405384(v4, v6);
}

void sub_1004C2750( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1004C2770(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received leDeviceUnpaired", buf, 2u);
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089C230);
  }
  uint64_t v4 = off_1008D5F28;
  id v5 = *(void **)(a1 + 32);
  sub_10002418C(v11, "IsHearingAid");
  if (sub_1005CE5A8((uint64_t)v4, v5, (uint64_t)v11))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089C230);
    }
    uint64_t v6 = off_1008D5F28;
    id v7 = *(void **)(a1 + 32);
    sub_10002418C(__p, "HearingAidSupportsWatch");
    int v8 = sub_1005CE5A8((uint64_t)v6, v7, (uint64_t)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    int v8 = 0;
  }

  if (v12 < 0)
  {
    operator delete(v11[0]);
    if (!v8) {
      return;
    }
  }

  else if (!v8)
  {
    return;
  }

  if (*(_BYTE *)(v2 + 655))
  {
    if (*(_BYTE *)(v2 + 648))
    {
      if (qword_1008D9B20 != -1) {
        dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
      }
      sub_1004C0D8C(qword_1008D9B18, *(void **)(a1 + 32));
    }

    else
    {
      if (qword_1008D9B20 != -1) {
        dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
      }
      sub_1004C0E68(qword_1008D9B18, *(void **)(a1 + 32));
    }
  }

void sub_1004C2940( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004C2974(uint64_t a1, void *a2)
{
}

uint64_t sub_1004C2984(uint64_t a1)
{
  *(void *)a1 = off_10089BE68;
  *(void *)(a1 + 256) = off_10089BF48;
  *(void *)(a1 + 264) = off_10089BF98;
  *(void *)(a1 + 272) = off_10089BFC8;
  uint64_t v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(void *)(a1 + 632) = v2;
    operator delete(v2);
  }

  sub_100242E28(a1 + 560);
  id v3 = *(void **)(a1 + 400);
  if (v3)
  {
    *(void *)(a1 + 40_Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }

  sub_10023BF24(a1 + 368, *(void **)(a1 + 376));
  uint64_t v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(void *)(a1 + 352) = v4;
    operator delete(v4);
  }

  sub_100242E28(a1 + 280);
  return sub_100213D34(a1);
}

void sub_1004C2A10(uint64_t a1)
{
  *(void *)a1 = off_10089BE68;
  *(void *)(a1 + 256) = off_10089BF48;
  *(void *)(a1 + 264) = off_10089BF98;
  *(void *)(a1 + 272) = off_10089BFC8;
  uint64_t v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(void *)(a1 + 632) = v2;
    operator delete(v2);
  }

  sub_100242E28(a1 + 560);
  id v3 = *(void **)(a1 + 400);
  if (v3)
  {
    *(void *)(a1 + 40_Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }

  sub_10023BF24(a1 + 368, *(void **)(a1 + 376));
  uint64_t v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(void *)(a1 + 352) = v4;
    operator delete(v4);
  }

  sub_100242E28(a1 + 280);
  id v5 = (void *)sub_100213D34(a1);
  operator delete(v5);
}

uint64_t sub_1004C2AA0()
{
  return 0LL;
}

uint64_t sub_1004C2AA8()
{
  return 108LL;
}

uint64_t sub_1004C2AB0()
{
  return 108LL;
}

uint64_t *sub_1004C2AB8(uint64_t *a1)
{
  if (a1[4]) {
    sub_1004BB724((uint64_t)a1);
  }
  sub_10026F644(*a1);
  return a1;
}

uint64_t sub_1004C2AF8(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004B9990(qword_1008D9B18, a1);
}

uint64_t sub_1004C2B50(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BAB74((uint64_t **)qword_1008D9B18, a1);
}

uint64_t sub_1004C2BA8(uint64_t a1)
{
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C1F0);
  }
  return sub_1004BA67C(qword_1008D9B18, a1);
}

void sub_1004C2BF8(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_1004C2C28(_Unwind_Exception *a1)
{
}

void sub_1004C2C3C(id a1)
{
  uint64_t v1 = operator new(0x290uLL);
  sub_1004B91E8((uint64_t)v1);
  qword_1008D9B18 = (uint64_t)v1;
}

void sub_1004C2C6C(_Unwind_Exception *a1)
{
}

void sub_1004C2C80(id a1)
{
  uint64_t v1 = operator new(0x148uLL);
  sub_1004C4914();
  qword_1008D98C8 = (uint64_t)v1;
}

void sub_1004C2CB0(_Unwind_Exception *a1)
{
}

void sub_1004C2CC4(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_1004C2CF4(_Unwind_Exception *a1)
{
}

void sub_1004C2D08(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1_Block_object_dispose(&a9, 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10_Block_object_dispose(&a9, 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2_Block_object_dispose(&a9, 8) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5_Block_object_dispose(&a9, 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_1004C2E10(_Unwind_Exception *a1)
{
}

uint64_t *sub_1004C2E24(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1004C2E78(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1004C2E60(_Unwind_Exception *a1)
{
}

uint64_t *sub_1004C2E78(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    id v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_10041B2E0(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      id v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          id v7 = *(int **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          int v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

void sub_1004C2EFC(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1004C2F2C(_Unwind_Exception *a1)
{
}

id sub_1004C2F40(uint64_t a1, uint64_t a2)
{
  return *(id *)(a2 + 8);
}

id sub_1004C2F54(id *a1)
{
  return *a1;
}

void *sub_1004C2F60(void *a1, xpc_connection_t connection)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  *a1 = connection;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1004C3038;
  handler[3] = &unk_100887318;
  handler[4] = a1;
  xpc_connection_set_event_handler(connection, handler);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
  xpc_connection_set_target_queue(connection, (dispatch_queue_t)[v4 getXpcQueue]);

  xpc_connection_resume(connection);
  return a1;
}

void sub_1004C3010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C3038(uint64_t a1, void *a2)
{
}

void sub_1004C3040(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    if (xpc_dictionary_get_uint64(object, "kBTAudioMsgMethod") == 13)
    {
      remote_connection = xpc_dictionary_get_remote_connection(object);
      *(_OWORD *)uint64_t v43 = 0u;
      __int128 v44 = 0u;
      xpc_connection_get_audit_token(remote_connection, v43);
      id v21 = (const char *)xpc_copy_code_signing_identity_for_token(v43);
      int v22 = (char *)v21;
      if (v21
        && (!strcmp(v21, "com.apple.mediaserverd")
         || !strcmp(v22, "com.apple.audio.coreaudiod")
         || !strcmp(v22, "com.apple.audio.Core-Audio-Driver-Service")
         || !strcmp(v22, "com.apple.audiomxd")))
      {
        int v23 = 1;
        __int16 v24 = v22;
      }

      else
      {
        int v23 = 0;
        __int16 v24 = "";
      }

      std::string::assign((std::string *)(a1 + 8), v24);
      free(v22);
      uint64_t v27 = sub_1002E6E00();
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
      if ((_DWORD)v28)
      {
        char v42 = 0;
        BOOL v29 = sub_1004C3520(v28, (uint64_t)remote_connection);
        uint64_t v30 = sub_1002E6E00();
        sub_10002418C(buf, "BTHALAudioPlugin");
        sub_10002418C(__p, "BypassAllowlist");
        (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v30 + 72LL))(v30, buf, __p, &v42);
        if (v41 < 0) {
          operator delete(__p[0]);
        }
        if (v48 < 0) {
          operator delete(*(void **)buf);
        }
        char v31 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = "No";
          if (v29) {
            uint64_t v33 = "Yes";
          }
          else {
            uint64_t v33 = "No";
          }
          if (v42) {
            uint64_t v32 = "Yes";
          }
          *(_DWORD *)timeval buf = 136446466;
          *(void *)&uint8_t buf[4] = v33;
          __int16 v46 = 2082;
          id v47 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Bypassing proc check for audio plugin clients via entitlement = %{public}s , allowList = %{public}s",  buf,  0x16u);
        }

        if (v42) {
          int v34 = 1;
        }
        else {
          int v34 = v29;
        }
      }

      else
      {
        int v34 = 0;
      }

      if ((v23 | v34) == 1)
      {
        BOOL v35 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
        [v35 republishAllAudioDevices];
      }

      else
      {
        uint64_t v36 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
          sub_1006863E8(remote_connection, v36);
        }
        xpc_connection_cancel(remote_connection);
      }
    }

    else
    {
      v43[0] = 0LL;
      v43[1] = 0LL;
      *(void *)&__int128 v44 = 0LL;
      string = (char *)xpc_dictionary_get_string(object, "kBTAudioMsgDeviceUid");
      sub_10002418C(v43, string);
      int v26 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
      if (SBYTE7(v44) < 0)
      {
        sub_100024238(v38, v43[0], (unint64_t)v43[1]);
      }

      else
      {
        *(_OWORD *)__int16 v38 = *(_OWORD *)v43;
        uint64_t v39 = v44;
      }

      [v26 forwardEvent:object forUid:v38];
      if (SHIBYTE(v39) < 0) {
        operator delete(v38[0]);
      }

      if (SBYTE7(v44) < 0) {
        operator delete(v43[0]);
      }
    }
  }

  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    id v5 = xpc_dictionary_get_string(object, _xpc_error_key_description);
    uint64_t v6 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_1006864D4((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12);
    }
    if (object == &_xpc_error_connection_invalid)
    {
      int v37 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](&OBJC_CLASS___AudioDeviceManager, "sharedManager"));
      [v37 removeXpcClient:a1];
    }

    else
    {
      uint64_t v13 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
        sub_100686470((uint64_t)v5, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }

void sub_1004C3438( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004C34C8(uint64_t a1)
{
  return a1;
}

void sub_1004C3500(_Unwind_Exception *exception_object)
{
}

BOOL sub_1004C3520(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)xpc_connection_copy_entitlement_value(a2);
  if (!v2) {
    return 0LL;
  }
  id v3 = v2;
  BOOL v4 = xpc_get_type(v2) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v3);
  xpc_release(v3);
  return v4;
}

char *sub_1004C3588@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[31] < 0) {
    return (char *)sub_100024238((_BYTE *)a2, *((void **)result + 1), *((void *)result + 2));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 16) = *((void *)result + 3);
  return result;
}

uint64_t sub_1004C35B4(uint64_t a1, uint64_t a2, size_t a3)
{
  uint64_t v6 = sub_100255FBC(a1, "LEASendThread");
  *(void *)uint64_t v6 = off_10089C2A0;
  *(void *)(v6 + 152) = a2;
  uint64_t v7 = *(void **)(a2 + 536);
  uint64_t v8 = v7[1];
  *(void *)(v6 + 16_Block_object_dispose(&a9, 8) = *v7;
  *(void *)(v6 + 176) = v8;
  *(_WORD *)(v6 + 184) = 0;
  *(void *)(v6 + 20_Block_object_dispose(&a9, 8) = 0LL;
  *(void *)(v6 + 216) = 0LL;
  *(void *)(a1 + 192) = operator new[](a3);
  *(void *)(a1 + 200) = a3;
  *(_DWORD *)(a1 + 224) = 0;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 4);
  if (!*(_BYTE *)(v8 + 4)) {
    uint64_t v9 = *(void *)(a2 + 424);
  }
  *(void *)(a1 + 160) = v9;
  return a1;
}

void sub_1004C3634(_Unwind_Exception *a1)
{
}

uint64_t sub_1004C3648(void *a1)
{
  *a1 = off_10089C2A0;
  uint64_t v2 = (void *)a1[24];
  if (v2) {
    operator delete[](v2);
  }
  return sub_100255B54(a1);
}

uint64_t sub_1004C3688(uint64_t a1)
{
  return 2500LL * *(unsigned __int8 *)(*(void *)(a1 + 176) + 1LL);
}

uint64_t sub_1004C369C(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, *(void *)(a1 + 152) + 280LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 152) + 536LL);
  if (v2 && *(void *)(v2 + 24) == a1)
  {
    switch(*(_DWORD *)(a1 + 224))
    {
      case 0:
        uint64_t v3 = 1LL;
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104LL))(a1))
        {
          *(_DWORD *)(a1 + 224) = 1;
          goto LABEL_7;
        }

        break;
      case 1:
LABEL_7:
        (*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
        *(_DWORD *)(a1 + 224) = 2;
        goto LABEL_8;
      case 2:
LABEL_8:
        (*(void (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
        *(_DWORD *)(a1 + 224) = 3;
        goto LABEL_9;
      case 3:
LABEL_9:
        ++*(_BYTE *)(a1 + 184);
        *(_DWORD *)(a1 + 224) = 4;
LABEL_11:
        ++*(_BYTE *)(a1 + 185);
        *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = 0LL;
        *(void *)(a1 + 216) = 0LL;
        *(_DWORD *)(a1 + 224) = 0;
LABEL_12:
        uint64_t v3 = 1LL;
        break;
      case 4:
        goto LABEL_11;
      default:
        goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  sub_100242FAC((uint64_t)v5);
  return v3;
}

void sub_1004C37B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1004C37C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 152);
  uint64_t v2 = *(void *)(v1 + 344);
  uint64_t v3 = *(void *)(v1 + 352);
  if (v2 == v3) {
    return sub_1001D66D8(0LL);
  }
  uint64_t v4 = 0LL;
  do
  {
    if (*(_DWORD *)(*(void *)v2 + 32LL) == 8)
    {
      if (*(_DWORD *)(*(void *)v2 + 48LL) == 3) {
        uint64_t v4 = (v4 + 1);
      }
      else {
        uint64_t v4 = v4;
      }
    }

    v2 += 8LL;
  }

  while (v2 != v3);
  return sub_1001D66D8(v4);
}

void sub_1004C380C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 176);
  int v5 = v4[2];
  if (v5 == 4)
  {
    if (v4[4])
    {
      uint64_t v9 = 0LL;
      unint64_t v10 = 0LL;
      do
      {
        if (v9 + 1 >= (unint64_t)v4[3])
        {
          uint64_t v11 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
            sub_1006865AC(v15, v16, v11);
          }
        }

        *(_BYTE *)(a2 + v10++) = *(_BYTE *)(a2 + v9 + 1) | (16 * *(_BYTE *)(a2 + v9));
        uint64_t v4 = *(unsigned __int8 **)(a1 + 176);
        v9 += 2LL;
      }

      while (v10 < v4[4]);
    }
  }

  else if (v5 == 6)
  {
    if (v4[4])
    {
      unint64_t v6 = 0LL;
      unint64_t v7 = 0LL;
      do
      {
        if (v6 / 6 + 1 >= v4[3])
        {
          uint64_t v8 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
            sub_1006865AC(v15, v16, v8);
          }
        }

        *(_BYTE *)(a2 + v7++) = ((*(unsigned __int8 *)(a2 + v6 / 6 + 1) >> 2) >> ((4 - v6 % 6) & 0xFE)) | (*(unsigned __int8 *)(a2 + v6 / 6) >> 2 << (v6 % 6 + 2));
        uint64_t v4 = *(unsigned __int8 **)(a1 + 176);
        v6 += 8LL;
      }

      while (v7 < v4[4]);
    }
  }

  else
  {
    uint64_t v12 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
      sub_100686538(v12, v13, v14);
    }
  }

void sub_1004C3A08(void *a1)
{
  uint64_t v1 = a1[22];
  if (*(_BYTE *)(v1 + 2) != 8)
  {
    if (a1[26] != *(unsigned __int8 *)(v1 + 3))
    {
      uint64_t v3 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
        sub_1006865F0(v3, v4, v5);
      }
    }

    sub_1004C380C((uint64_t)a1, a1[24]);
    a1[26] = *(unsigned __int8 *)(a1[22] + 4LL);
  }

uint64_t sub_1004C3A84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)sub_1004C35B4(a1, a2, *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 536) + 8LL) + 3LL));
  *uint64_t v3 = off_10089C338;
  if (*(_BYTE *)(v3[22] + 6LL)) {
    uint64_t v4 = malloc(*(void *)(a1 + 160));
  }
  else {
    uint64_t v4 = 0LL;
  }
  *(void *)(a1 + 232) = v4;
  return a1;
}

uint64_t sub_1004C3AE4(uint64_t a1)
{
  *(void *)a1 = off_10089C338;
  free(*(void **)(a1 + 232));
  return sub_1004C3648((void *)a1);
}

void sub_1004C3B18(uint64_t a1)
{
  *(void *)a1 = off_10089C338;
  free(*(void **)(a1 + 232));
  uint64_t v2 = (void *)sub_1004C3648((void *)a1);
  operator delete(v2);
}

BOOL sub_1004C3B50(uint64_t *a1)
{
  uint64_t v1 = a1 + 26;
  unint64_t v2 = a1[26];
  uint64_t v3 = (unsigned __int8 *)a1[22];
  unint64_t v4 = v3[3];
  unint64_t v5 = v4 - v2;
  if (v4 == v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
      sub_100686664();
    }
    return 1LL;
  }

  if (!v3[5])
  {
    size_t v9 = sub_10026FA88(a1[21], (char *)(a1[24] + v2), v4 - v2);
    a1[26] += v9;
    return v9 == v5;
  }

  unint64_t v7 = a1[25];
  if (v3[4])
  {
    if (!(v4 % v5)) {
      goto LABEL_18;
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
      sub_100686830();
    }
    BOOL result = 0LL;
    void *v1 = 0LL;
    v1[1] = 0LL;
    return result;
  }

  if (v2) {
    return 1LL;
  }
  do
  {
LABEL_18:
    if (v7 < v2)
    {
      uint64_t v12 = (os_log_s *)qword_1008F7570;
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100686690(v7, v12);
      return 0LL;
    }

    unint64_t v10 = sub_10026FAF4(a1[21], (char *)(a1[24] + v2), v7 - v2);
    if (!v10)
    {
      uint64_t v13 = (os_log_s *)qword_1008F7570;
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      sub_100686700((uint64_t)v1, v13, v14, v15, v16, v17, v18, v19);
      return 0LL;
    }

    uint64_t v11 = a1[22];
    if (!*(_BYTE *)(v11 + 4))
    {
      unint64_t v20 = *v1 + v10;
      void *v1 = v20;
      return 1LL;
    }

    if (*(unsigned __int8 *)(v11 + 3) % v10)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_1006867CC();
      return 0LL;
    }

    unint64_t v2 = *v1 + v10;
    void *v1 = v2;
    v5 -= v10;
  }

  while (v5);
  if (v2 != *(unsigned __int8 *)(v11 + 3) && os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
LABEL_25:
  }
    sub_100686768();
  return 1LL;
}

BOOL sub_1004C3DAC(uint64_t a1)
{
  int v2 = sub_1002CD91C();
  uint64_t v3 = *(void *)(a1 + 216);
  if (*(_BYTE *)(*(void *)(a1 + 176) + 6LL))
  {
    if (!v3)
    {
      unint64_t v4 = (*(void *)(a1 + 208) - 1LL) / (unint64_t)(*(void *)(a1 + 160) - 1LL);
      if ((v4 & 0xFC) != 0)
      {
        unint64_t v5 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
          sub_100686978(v5, v6, v7);
        }
      }

      **(_BYTE **)(a1 + 232) = v4 | (4 * *(_BYTE *)(a1 + 185));
      uint64_t v3 = *(void *)(a1 + 216);
    }

    uint64_t v8 = (char **)(a1 + 232);
    unint64_t v9 = *(void *)(a1 + 208) - v3;
    unint64_t v10 = *(void *)(a1 + 160) - 1LL;
    BOOL v11 = v9 <= v10;
    if (v9 >= v10) {
      size_t v12 = *(void *)(a1 + 160) - 1LL;
    }
    else {
      size_t v12 = *(void *)(a1 + 208) - v3;
    }
    memcpy((void *)(*(void *)(a1 + 232) + 1LL), (const void *)(*(void *)(a1 + 192) + v3), v12);
    unsigned __int16 v13 = v12 + 1;
  }

  else
  {
    if (v3)
    {
      uint64_t v14 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
        sub_100686904(v14, v15, v16);
      }
    }

    uint64_t v8 = (char **)(a1 + 192);
    size_t v12 = *(void *)(a1 + 208);
    if (v12 > *(void *)(a1 + 160))
    {
      uint64_t v17 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)timeval buf = 136446210;
        uint64_t v27 = "fAudioBuffer.getFillLevel() <= fMaxPacketSize";
        _os_log_fault_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  buf,  0xCu);
        size_t v12 = *(void *)(a1 + 208);
      }
    }

    BOOL v11 = 1LL;
    unsigned __int16 v13 = v12;
  }

  uint64_t v18 = *v8;
  *(void *)(a1 + 216) += v12;
  char v25 = 0;
  sub_100242CA4(&v25);
  if ((v2 & 1) != 0 || sub_1004C37C4(a1))
  {
    uint64_t v19 = *(void *)(a1 + 152);
    unint64_t v20 = *(uint64_t **)(v19 + 344);
    if (v20 != *(uint64_t **)(v19 + 352))
    {
      int v21 = v2 ^ 1;
      do
      {
        uint64_t v22 = *v20;
        if (*(_DWORD *)(*v20 + 32) == 8
          && *(_DWORD *)(v22 + 48) == 3
          && sub_1001D6778(*(__int128 **)v22, v18, v13, *(_BYTE *)(a1 + 184), v21) == 410)
        {
          int v23 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
            sub_100686890(buf, &v27, v23);
          }
        }

        ++v20;
      }

      while (v20 != *(uint64_t **)(*(void *)(a1 + 152) + 352LL));
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
  {
    sub_1006868D4();
  }

  sub_100242CD8(&v25);
  return v11;
}

void sub_1004C4070( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

size_t *sub_1004C4090(size_t *a1, uint64_t a2)
{
  uint64_t v3 = (void *)sub_1004C35B4( (uint64_t)a1,  a2,  2LL * *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 536) + 8LL) + 3LL));
  *uint64_t v3 = off_10089C3D0;
  uint64_t v4 = v3[22];
  if (*(_BYTE *)(v4 + 6)) {
    unint64_t v5 = malloc(a1[20]);
  }
  else {
    unint64_t v5 = 0LL;
  }
  a1[29] = (size_t)v5;
  if (*(_DWORD *)(v4 + 8) == 1)
  {
    size_t v6 = *(unsigned __int8 *)(v4 + 3);
    a1[30] = (size_t)malloc(v6);
    a1[31] = (size_t)malloc(v6);
  }

  return a1;
}

uint64_t sub_1004C411C(uint64_t a1)
{
  *(void *)a1 = off_10089C3D0;
  free(*(void **)(a1 + 232));
  free(*(void **)(a1 + 240));
  free(*(void **)(a1 + 248));
  return sub_1004C3648((void *)a1);
}

void sub_1004C4164(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1004C411C(a1);
  operator delete(v1);
}

BOOL sub_1004C4178(uint64_t *a1)
{
  uint64_t v1 = (size_t *)(a1 + 26);
  unint64_t v2 = a1[26];
  uint64_t v3 = (unsigned __int8 *)a1[22];
  uint64_t v4 = v3[3];
  unint64_t v5 = 2 * v4 - v2;
  if (2 * v4 == v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
      sub_100686664();
    }
    return 1LL;
  }

  if (!v3[5])
  {
    size_t v8 = sub_10026FA88(a1[21], (char *)(a1[24] + v2), 2 * v4 - v2);
    a1[26] += v8;
    return v8 == v5;
  }

  size_t v19 = 0LL;
  size_t v20 = 0LL;
  if (v3[4])
  {
    if (!(2 * v4 % v5)) {
      goto LABEL_14;
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
      sub_100686830();
    }
    BOOL result = 0LL;
    size_t *v1 = 0LL;
    v1[1] = 0LL;
    return result;
  }

  if (v2) {
    return 1LL;
  }
  do
  {
LABEL_14:
    if (!sub_10026FB60( a1[21],  (char *)(a1[30] + (v2 >> 1)),  &v20,  v4 - (v2 >> 1),  (char *)(a1[31] + (v2 >> 1)),  &v19,  v4 - (v2 >> 1)))
    {
      BOOL v11 = (os_log_s *)qword_1008F7570;
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      sub_100686AE8((uint64_t)v1, v11, v12, v13, v14, v15, v16, v17);
      return 0LL;
    }

    if (!(v20 + v19))
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_1006869EC();
      return 0LL;
    }

    uint64_t v9 = a1[22];
    if (!*(_BYTE *)(v9 + 4))
    {
      size_t v18 = v19 + v20 + *v1;
      size_t *v1 = v18;
      if (v18 > 2 * (unint64_t)*(unsigned __int8 *)(v9 + 3)
        && os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT))
      {
        goto LABEL_21;
      }

      return 1LL;
    }

    uint64_t v4 = *(unsigned __int8 *)(v9 + 3);
    size_t v10 = v19 + v20;
    if (2 * v4 % (v19 + v20))
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_100686A80();
      return 0LL;
    }

    unint64_t v2 = *v1 + v10;
    size_t *v1 = v2;
    size_t v19 = 0LL;
    size_t v20 = 0LL;
    v5 -= v10;
  }

  while (v5);
  if (v2 != 2LL * *(unsigned __int8 *)(v9 + 3) && os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
LABEL_21:
  }
    sub_100686A18();
  return 1LL;
}

void *sub_1004C4404(void *result)
{
  if (!*(_BYTE *)(result[22] + 5LL) && result[26] >= 2uLL)
  {
    unint64_t v1 = 0LL;
    unint64_t v2 = (_BYTE *)result[24];
    do
    {
      *(_BYTE *)(result[30] + v1) = *v2;
      *(_BYTE *)(result[31] + v1++) = v2[1];
      v2 += 2;
    }

    while (v1 < result[26] >> 1);
  }

  return result;
}

void sub_1004C4454(void *a1)
{
  uint64_t v1 = a1[22];
  if (*(_BYTE *)(v1 + 2) != 8)
  {
    if (a1[26] != 2LL * *(unsigned __int8 *)(v1 + 3))
    {
      uint64_t v3 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
        sub_100686B50(v3, v4, v5);
      }
    }

    sub_1004C380C((uint64_t)a1, a1[30]);
    sub_1004C380C((uint64_t)a1, a1[31]);
    a1[26] = 2LL * *(unsigned __int8 *)(a1[22] + 4LL);
  }

BOOL sub_1004C44E0(uint64_t a1)
{
  int v2 = sub_1002CD91C();
  if (*(_BYTE *)(*(void *)(a1 + 176) + 6LL))
  {
    uint64_t v3 = *(void *)(a1 + 216);
    if (!v3)
    {
      unint64_t v4 = (*(void *)(a1 + 208) - 1LL) / (unint64_t)(*(void *)(a1 + 160) - 1LL);
      if (v4 >= 4u)
      {
        uint64_t v5 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
          sub_100686BF8(v4, v5);
        }
      }

      **(_BYTE **)(a1 + 232) = v4 | (4 * *(_BYTE *)(a1 + 185));
      uint64_t v3 = *(void *)(a1 + 216);
    }

    unint64_t v6 = *(void *)(a1 + 208) - v3;
    unint64_t v7 = *(void *)(a1 + 160) - 1LL;
    BOOL v8 = v6 <= v7;
    if (v6 >= v7) {
      size_t v9 = *(void *)(a1 + 160) - 1LL;
    }
    else {
      size_t v9 = *(void *)(a1 + 208) - v3;
    }
    memcpy((void *)(*(void *)(a1 + 232) + 1LL), (const void *)(*(void *)(a1 + 192) + v3), v9);
    size_t v10 = *(char **)(a1 + 232);
    LOWORD(v11) = v9 + 1;
    *(void *)(a1 + 216) += v9;
  }

  else
  {
    if (*(void *)(a1 + 216))
    {
      uint64_t v12 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
        sub_100686904(v12, v13, v14);
      }
    }

    unint64_t v15 = *(void *)(a1 + 208);
    if (v15 > 2LL * *(void *)(a1 + 160))
    {
      uint64_t v16 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)timeval buf = 136446210;
        uint64_t v30 = "fAudioBuffer.getFillLevel() <= (fMaxPacketSize * 2)";
        _os_log_fault_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  buf,  0xCu);
        unint64_t v15 = *(void *)(a1 + 208);
      }
    }

    size_t v10 = 0LL;
    *(void *)(a1 + 216) += v15;
    unint64_t v11 = v15 >> 1;
    BOOL v8 = 1LL;
  }

  char v28 = 0;
  sub_100242CA4(&v28);
  if ((v2 & 1) != 0 || sub_1004C37C4(a1))
  {
    uint64_t v17 = *(void *)(a1 + 152);
    size_t v18 = *(uint64_t **)(v17 + 344);
    if (v18 != *(uint64_t **)(v17 + 352))
    {
      int v19 = v2 ^ 1;
      do
      {
        uint64_t v20 = *v18;
        if (*(_DWORD *)(*v18 + 32) == 8 && *(_DWORD *)(v20 + 48) == 3)
        {
          uint64_t v21 = *(void *)(a1 + 176);
          if (!*(_BYTE *)(v21 + 6) && *(_DWORD *)(v21 + 8) == 1)
          {
            uint64_t v22 = 248LL;
            if ((*(_BYTE *)(v20 + 72) & 8) == 0) {
              uint64_t v22 = 240LL;
            }
            size_t v10 = *(char **)(a1 + v22);
          }

          if (v10)
          {
            if (sub_1001D6778(*(__int128 **)v20, v10, (unsigned __int16)v11, *(_BYTE *)(a1 + 184), v19) == 410)
            {
              int v23 = (os_log_s *)qword_1008F7570;
              if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
                sub_100686890(buf, &v30, v23);
              }
            }
          }

          else
          {
            __int16 v24 = (os_log_s *)qword_1008F7570;
            if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
              sub_100686BC4(&v26, v27, v24);
            }
            size_t v10 = 0LL;
          }
        }

        ++v18;
      }

      while (v18 != *(uint64_t **)(*(void *)(a1 + 152) + 352LL));
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
  {
    sub_1006868D4();
  }

  sub_100242CD8(&v28);
  return v8;
}

void sub_1004C4820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1004C4844(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

uint64_t sub_1004C488C(uint64_t a1)
{
  *(void *)sub_10041BFD4(a1, "LEAService", 0x10000) = &off_10089C468;
  if (qword_1008D9B20 != -1) {
    dispatch_once(&qword_1008D9B20, &stru_10089C558);
  }
  sub_10041C264(a1, qword_1008D9B18);
  return a1;
}

void sub_1004C4900(_Unwind_Exception *a1)
{
}

uint64_t sub_1004C4918(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0LL;
  sub_1000B0400((uint64_t)&v5);
  *(void *)&__int128 v4 = (int)v5;
  *((void *)&v4 + 1) = SWORD2(v5);
  return sub_1003D1FC4(a2, 2u, 1, &v4, 0);
}

void sub_1004C4970(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10041C0C4(a1);
  operator delete(v1);
}

void sub_1004C4984(id a1)
{
  uint64_t v1 = operator new(0x290uLL);
  sub_1004B9364((uint64_t)v1);
  qword_1008D9B18 = (uint64_t)v1;
}

void sub_1004C49B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1004C49C8(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, dispatch_object_s *a4)
{
  uint64_t v5 = sub_10043E3E8(a1, a2, a3, a4);
  *(void *)uint64_t v5 = off_10089CC80;
  *(void *)(v5 + 144) = off_10089CE40;
  *(void *)(v5 + 152) = off_10089CF78;
  *(void *)(v5 + 160) = &off_10089CFA8;
  *(_WORD *)(v5 + 16_Block_object_dispose(&a9, 8) = 0;
  *(_BYTE *)(a1 + 170) = sub_10025D500(v5);
  *(_BYTE *)(a1 + 171) = sub_10025D500(a1);
  *(_WORD *)(a1 + 172) = 0;
  *(_BYTE *)(a1 + 174) = sub_10025D500(a1);
  *(_DWORD *)(a1 + 175) = 0;
  *(_WORD *)(a1 + 179) = 0;
  *(_BYTE *)(a1 + 181) = sub_10025D500(a1);
  *(_BYTE *)(a1 + 182) = sub_10025D500(a1);
  *(_BYTE *)(a1 + 183) = sub_10025D500(a1);
  *(_BYTE *)(a1 + 184) = sub_10025D500(a1);
  *(_BYTE *)(a1 + 185) = sub_10025D500(a1);
  *(_BYTE *)(a1 + 186) = 0;
  *(_BYTE *)(a1 + 187) = sub_10025D500(a1);
  *(_BYTE *)(a1 + 18_Block_object_dispose(&a9, 8) = sub_10025D500(a1);
  *(_BYTE *)(a1 + 189) = sub_10025D500(a1);
  *(_BYTE *)(a1 + 190) = sub_10025D500(a1);
  BOOL v6 = sub_10025D500(a1);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = 0LL;
  *(_BYTE *)(a1 + 191) = v6;
  *(_BYTE *)(a1 + 192) = 8;
  *(void *)(a1 + 216) = 0LL;
  *(_DWORD *)(a1 + 193) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  int v7 = *(_DWORD *)(a1 + 80);
  if (v7 >= 1)
  {
    *(_WORD *)(a1 + 170) = 257;
    *(_BYTE *)(a1 + 181) = 1;
    *(_WORD *)(a1 + 183) = 257;
    *(_BYTE *)(a1 + 185) = 1;
    *(_BYTE *)(a1 + 187) = 1;
    *(_BYTE *)(a1 + 174) = 1;
  }

  if (v7 <= 0) {
    int v8 = 0;
  }
  else {
    int v8 = -1;
  }
  *(_DWORD *)(a1 + 196) = v8;
  if (*(_BYTE *)(a1 + 188))
  {
    size_t v9 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Entitled Scan Client - Checked in", v11, 2u);
    }
  }

  return a1;
}

void sub_1004C4BCC(_Unwind_Exception *a1)
{
}

uint64_t sub_1004C4BE4(uint64_t a1)
{
  *(void *)a1 = off_10089CC80;
  *(void *)(a1 + 160) = &off_10089CFA8;
  uint64_t v2 = a1 + 160;
  *(void *)(a1 + 144) = off_10089CE40;
  *(void *)(a1 + 152) = off_10089CF78;
  uint64_t v3 = a1 + 200;
  __int128 v4 = *(void **)(a1 + 200);
  uint64_t v5 = (void *)(a1 + 208);
  if (v4 != (void *)(a1 + 208))
  {
    do
    {
      BOOL v6 = (void *)v4[6];
      if (v6 != v4 + 7)
      {
        do
        {
          uint64_t v7 = v6[4];
          if (v7) {
            (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
          }
          int v8 = (void *)v6[1];
          if (v8)
          {
            do
            {
              size_t v9 = v8;
              int v8 = (void *)*v8;
            }

            while (v8);
          }

          else
          {
            do
            {
              size_t v9 = (void *)v6[2];
              BOOL v10 = *v9 == (void)v6;
              BOOL v6 = v9;
            }

            while (!v10);
          }

          BOOL v6 = v9;
        }

        while (v9 != v4 + 7);
      }

      unint64_t v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          unint64_t v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint64_t v12 = (void *)v4[2];
          BOOL v10 = *v12 == (void)v4;
          __int128 v4 = v12;
        }

        while (!v10);
      }

      __int128 v4 = v12;
    }

    while (v12 != v5);
  }

  if (qword_1008D9700 != -1) {
    dispatch_once(&qword_1008D9700, &stru_10089D830);
  }
  sub_100009168((uint64_t)off_1008D96F8 + 176, v2);
  sub_1004F52C4(v3, *(void **)(a1 + 208));
  return sub_10025D70C(a1);
}

void sub_1004C4D30(_Unwind_Exception *a1)
{
}

void sub_1004C4D54(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1004C4BE4(a1);
  operator delete(v1);
}

void *sub_1004C4D68(uint64_t a1, int a2)
{
  BOOL result = sub_1004C542C;
  switch(a2)
  {
    case 1:
      return result;
    case 2:
      BOOL result = sub_1004C5F5C;
      break;
    case 4:
      BOOL result = sub_1004C5F98;
      break;
    case 8:
      BOOL result = sub_1004C809C;
      break;
    case 9:
      BOOL result = sub_1004C815C;
      break;
    case 10:
      BOOL result = sub_1004C81BC;
      break;
    case 11:
      BOOL result = sub_1004C8274;
      break;
    case 12:
      BOOL result = sub_1004C84AC;
      break;
    case 13:
      BOOL result = sub_1004C8854;
      break;
    case 14:
      BOOL result = sub_1004C8AB4;
      break;
    case 15:
      BOOL result = sub_1004C8BBC;
      break;
    case 19:
      BOOL result = sub_1004CB000;
      break;
    case 20:
      BOOL result = sub_1004CB1DC;
      break;
    case 25:
      BOOL result = sub_1004DB200;
      break;
    case 26:
      BOOL result = sub_1004DB42C;
      break;
    case 27:
      BOOL result = sub_1004C8D40;
      break;
    case 28:
      BOOL result = sub_1004C8DE4;
      break;
    case 30:
      BOOL result = sub_1004C9234;
      break;
    case 31:
      BOOL result = sub_1004C9114;
      break;
    case 32:
      BOOL result = sub_1004C9B54;
      break;
    case 33:
      BOOL result = sub_1004C9E54;
      break;
    case 34:
      BOOL result = sub_1004C9EC8;
      break;
    case 35:
      BOOL result = sub_1004CA16C;
      break;
    case 36:
      BOOL result = sub_1004CA3DC;
      break;
    case 37:
      BOOL result = sub_1004CA87C;
      break;
    case 38:
      BOOL result = sub_1004CA920;
      break;
    case 39:
      BOOL result = sub_1004CA980;
      break;
    case 40:
      BOOL result = sub_1004CAAF4;
      break;
    case 41:
      BOOL result = sub_1004CAC80;
      break;
    case 42:
      BOOL result = sub_1004CACF4;
      break;
    case 43:
      BOOL result = sub_1004CB47C;
      break;
    case 44:
      BOOL result = sub_1004CB608;
      break;
    case 45:
      BOOL result = sub_1004CB84C;
      break;
    case 46:
      BOOL result = sub_1004CB9F8;
      break;
    case 60:
      BOOL result = sub_1004CB2DC;
      break;
    case 63:
      BOOL result = sub_1004CBBBC;
      break;
    case 64:
      BOOL result = sub_1004CBEE0;
      break;
    case 65:
      BOOL result = sub_1004CC114;
      break;
    case 66:
      BOOL result = sub_1004CC244;
      break;
    case 67:
      BOOL result = sub_1004CC638;
      break;
    case 68:
      BOOL result = sub_1004CD6F4;
      break;
    case 69:
      BOOL result = sub_1004CC7E8;
      break;
    case 70:
      BOOL result = sub_1004CCDFC;
      break;
    case 71:
      BOOL result = sub_1004CD8D4;
      break;
    case 72:
      BOOL result = sub_1004CE07C;
      break;
    case 73:
      BOOL result = sub_1004CE0DC;
      break;
    case 74:
      BOOL result = sub_1004CFB10;
      break;
    case 75:
      BOOL result = sub_1004CFE80;
      break;
    case 76:
      BOOL result = sub_1004D0214;
      break;
    case 77:
      BOOL result = sub_1004D081C;
      break;
    case 78:
      BOOL result = sub_1004D8D34;
      break;
    case 79:
      BOOL result = sub_1004D8938;
      break;
    case 80:
      BOOL result = sub_1004D9330;
      break;
    case 81:
      BOOL result = sub_1004D7E0C;
      break;
    case 82:
      BOOL result = sub_1004D98BC;
      break;
    case 83:
      BOOL result = sub_1004CD7AC;
      break;
    case 93:
      BOOL result = sub_1004D093C;
      break;
    case 95:
      BOOL result = sub_1004D0EB0;
      break;
    case 96:
      BOOL result = sub_1004D0EE0;
      break;
    case 97:
      BOOL result = sub_1004D0F10;
      break;
    case 98:
      BOOL result = sub_1004D0F7C;
      break;
    case 99:
      BOOL result = sub_1004D0FE8;
      break;
    case 100:
      BOOL result = sub_1004D10AC;
      break;
    case 101:
      BOOL result = sub_1004D1318;
      break;
    case 102:
      BOOL result = sub_1004D1488;
      break;
    case 103:
      BOOL result = sub_1004D1650;
      break;
    case 104:
      BOOL result = sub_1004D1848;
      break;
    case 105:
      BOOL result = sub_1004D19B4;
      break;
    case 106:
      BOOL result = sub_1004D1BAC;
      break;
    case 107:
      BOOL result = sub_1004D1F90;
      break;
    case 108:
      BOOL result = sub_1004D27E4;
      break;
    case 109:
      BOOL result = sub_1004D2E30;
      break;
    case 111:
      BOOL result = sub_1004CC3BC;
      break;
    case 112:
      BOOL result = sub_1004D3320;
      break;
    case 113:
      BOOL result = sub_1004D3498;
      break;
    case 114:
      BOOL result = sub_1004D36CC;
      break;
    case 115:
      BOOL result = sub_1004D3814;
      break;
    case 116:
      BOOL result = sub_1004D3EE4;
      break;
    case 117:
      BOOL result = sub_1004D3B7C;
      break;
    case 118:
      BOOL result = sub_1004D447C;
      break;
    case 119:
      BOOL result = sub_1004D47E4;
      break;
    case 120:
      BOOL result = sub_1004D4F0C;
      break;
    case 121:
      BOOL result = sub_1004D5370;
      break;
    case 122:
      BOOL result = sub_1004D582C;
      break;
    case 123:
      BOOL result = sub_1004D5D88;
      break;
    case 124:
      BOOL result = sub_1004D6090;
      break;
    case 125:
      BOOL result = sub_1004D6380;
      break;
    case 126:
      BOOL result = sub_1004D64B4;
      break;
    case 127:
      BOOL result = sub_1004D6870;
      break;
    case 128:
      BOOL result = sub_1004D6D90;
      break;
    case 130:
      BOOL result = sub_1004D89CC;
      break;
    case 131:
      BOOL result = sub_1004D8B50;
      break;
    case 132:
      BOOL result = sub_1004D8C38;
      break;
    case 137:
      BOOL result = sub_1004D1A78;
      break;
    case 140:
      BOOL result = sub_1004D83C0;
      break;
    case 141:
      BOOL result = sub_1004D867C;
      break;
    case 142:
      BOOL result = sub_1004D70AC;
      break;
    case 143:
      BOOL result = sub_1004D7760;
      break;
    case 144:
      BOOL result = sub_1004D7AD0;
      break;
    case 145:
      BOOL result = sub_1004D907C;
      break;
    case 146:
      BOOL result = sub_1004D9174;
      break;
    case 161:
      BOOL result = sub_1004D9440;
      break;
    case 162:
      BOOL result = sub_1004D9578;
      break;
    case 163:
      BOOL result = sub_1004D9994;
      break;
    case 168:
      BOOL result = sub_1004D9C58;
      break;
    case 169:
      BOOL result = sub_1004D9E90;
      break;
    case 170:
      BOOL result = sub_1004DA084;
      break;
    case 171:
      BOOL result = sub_1004DA408;
      break;
    case 172:
      BOOL result = sub_1004DA8CC;
      break;
    case 173:
      BOOL result = sub_1004DABF0;
      break;
    case 174:
      BOOL result = sub_1004DACFC;
      break;
    case 175:
      BOOL result = sub_1004DADFC;
      break;
    case 176:
      BOOL result = sub_1004DAF2C;
      break;
    case 177:
      BOOL result = sub_1004DB0C8;
      break;
    case 183:
      BOOL result = sub_1004DB544;
      break;
    case 184:
      BOOL result = sub_1004DB744;
      break;
    case 186:
      BOOL result = sub_1004DB8C8;
      break;
    case 187:
      BOOL result = sub_1004DBA4C;
      break;
    case 188:
      BOOL result = sub_1004DBC0C;
      break;
    case 191:
      BOOL result = sub_1004DBDCC;
      break;
    case 192:
      BOOL result = sub_1004DBEF4;
      break;
    case 194:
      BOOL result = sub_1004DC0C8;
      break;
    case 195:
      BOOL result = sub_1004DC204;
      break;
    case 201:
      BOOL result = sub_1004DC350;
      break;
    case 202:
      BOOL result = sub_1004DC548;
      break;
    case 205:
      BOOL result = sub_1004DC7D8;
      break;
    case 206:
      BOOL result = sub_1004DCC30;
      break;
    case 207:
      BOOL result = sub_1004C5FF8;
      break;
    case 208:
      BOOL result = sub_1004C612C;
      break;
    case 211:
      BOOL result = sub_1004D8EF8;
      break;
    case 217:
      BOOL result = sub_1004DCE68;
      break;
    case 218:
      BOOL result = sub_1004CD410;
      break;
    case 219:
      BOOL result = sub_1004DCECC;
      break;
    case 220:
      BOOL result = sub_1004CD474;
      break;
    case 222:
      BOOL result = sub_1004DD6E4;
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100686C68();
      }
      BOOL result = 0LL;
      break;
  }

  return result;
}

void sub_1004C542C(uint64_t a1, void *a2)
{
  uint64_t v109 = 0LL;
  uint64_t v110 = 0LL;
  int v108 = 0LL;
  v106[0] = 0LL;
  v106[1] = v106;
  v106[2] = 0x2020000000LL;
  int v107 = 0;
  v104[0] = 0LL;
  v104[1] = v104;
  v104[2] = 0x2020000000LL;
  char v105 = 0;
  BOOL v75 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  @"com.apple.identityservicesd",  @"com.apple.nanoregistryd",  @"nanoregistryd",  @"com.apple.magicswitchd",  @"com.apple.sharingd",  @"com.apple.BTReporter",  @"com.apple.coreBluetoothUtil",  @"com.apple.terminusd",  0LL));
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  id v5 = sub_10025E1C8(value, "kCBMsgArgName");
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  int v73 = v110;
  uint64_t v103 = 0LL;
  uint64_t v102 = 0LL;
  uint64_t v101 = 0LL;
  uint64_t v100 = 0LL;
  uint64_t v99 = 1LL;
  uint64_t v98 = 0LL;
  uint64_t v97 = 0LL;
  id v13 = sub_10025E1C8(v108, "kCBInitOptionRestoreIdentifier");
  char v72 = (void *)objc_claimAutoreleasedReturnValue(v13);
  uint64_t v96 = 0LL;
  id v14 = sub_10025E1C8(v108, "kCBCentralManagerOptionInitLeProfilesManagerWithOptions");
  id v74 = (void *)objc_claimAutoreleasedReturnValue(v14);
  sub_10025D848(v108, 0, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBInitOptionShowPowerAlert");
  id v21 = sub_10025D564(*(void *)(a1 + 16));
  uint64_t v22 = objc_claimAutoreleasedReturnValue(v21);
  int v23 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v22;

  id v71 = *(id *)(a1 + 96);
  uint64_t v95 = 0LL;
  __int128 v93 = 0u;
  memset(v94, 0, sizeof(v94));
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  memset(v90, 0, sizeof(v90));
  sub_10020E564((uint64_t)v90);
  id v6 = v71;
  __int16 v24 = (const char *)[v6 UTF8String];
  size_t v25 = strlen(v24);
  sub_1001FD17C(v90, (uint64_t)v24, v25);
  id v26 = sub_10025E1C8(v108, "kCBMsgArgManagerCustomName");
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  id v28 = v27;
  if (v27 && [v27 length])
  {
    else {
      uint64_t v29 = (uint64_t)[v28 length];
    }
    id v30 = [v28 rangeOfComposedCharacterSequencesForRange:0, v29];
    uint64_t v32 = (void *)[v28 substringWithRange:v30, v31];

    uint64_t v33 = sub_1001FD17C(v90, (uint64_t)"(", 1LL);
    id v28 = v32;
    int v34 = (const char *)[v28 UTF8String];
    size_t v35 = strlen(v34);
    uint64_t v36 = sub_1001FD17C(v33, (uint64_t)v34, v35);
    sub_1001FD17C(v36, (uint64_t)")", 1LL);
  }

  int v37 = sub_1001FD17C(v90, (uint64_t)"-", 1LL);
  if (v73) {
    __int16 v38 = "peripheral-";
  }
  else {
    __int16 v38 = "central-";
  }
  if (v73) {
    uint64_t v39 = 11LL;
  }
  else {
    uint64_t v39 = 8LL;
  }
  sub_1001FD17C(v37, (uint64_t)v38, v39);
  int v40 = (void *)std::ostream::operator<<(v90, *(unsigned int *)(a1 + 40));
  char v41 = sub_1001FD17C(v40, (uint64_t)"-", 1LL);
  std::ostream::operator<<(v41, *(void *)(a1 + 8));
  std::stringbuf::str((std::stringbuf::string_type *)v113, (const std::stringbuf *)&v90[1]);
  char v42 = (char *)(a1 + 79);
  uint64_t v43 = (void **)(a1 + 56);
  *(_OWORD *)uint64_t v43 = *(_OWORD *)v113;
  *(void *)(a1 + 72) = *(void *)&v113[16];
  __int128 v44 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v45 = (void *)(a1 + 56);
    if (*v42 < 0) {
      unint64_t v45 = *v43;
    }
    int v46 = *(_DWORD *)(a1 + 80);
    int v47 = *(unsigned __int8 *)(a1 + 185);
    int v48 = *(unsigned __int8 *)(a1 + 175);
    int v49 = *(unsigned __int8 *)(a1 + 177);
    *(_DWORD *)int v113 = 136447234;
    *(void *)&v113[4] = v45;
    *(_WORD *)&v113[12] = 1024;
    *(_DWORD *)&v113[14] = v46;
    *(_WORD *)&v113[18] = 1024;
    *(_DWORD *)&v113[20] = v47;
    *(_WORD *)&v113[24] = 1024;
    *(_DWORD *)&v113[26] = v48;
    *(_WORD *)&v113[30] = 1024;
    int v114 = v49;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Received XPC check-in from session %{public}s fAccessLevel %d fProgrammaticPairing %d fDeviceAccessForMediaSes sion %d fDeviceAccessPerAccessorySession %d",  v113,  0x24u);
  }

  if (v101)
  {
    if (*(int *)(a1 + 80) >= 1)
    {
      *(_BYTE *)(a1 + 172) = 1;
      id v50 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v51 = (void *)(a1 + 56);
        if (*v42 < 0) {
          uint64_t v51 = *v43;
        }
        *(_DWORD *)int v113 = 136446210;
        *(void *)&v113[4] = v51;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Incoming ObjectDiscovery data  will be forwarded to session %{public}s",  v113,  0xCu);
      }
    }
  }

  if (v102)
  {
    *(_BYTE *)(a1 + 16_Block_object_dispose(&a9, 8) = 1;
    int v52 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v53 = (void *)(a1 + 56);
      if (*v42 < 0) {
        __int16 v53 = *v43;
      }
      *(_DWORD *)int v113 = 136446210;
      *(void *)&v113[4] = v53;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "System events will be forwarded to session %{public}s",  v113,  0xCu);
    }
  }

  int v54 = *(_DWORD *)(a1 + 80);
  if (v54 < 1 || !v100)
  {
LABEL_38:
    if (v54 < 1) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }

  *(_BYTE *)(a1 + 169) = 1;
  int v55 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    int v56 = (void *)(a1 + 56);
    if (*v42 < 0) {
      int v56 = *v43;
    }
    *(_DWORD *)int v113 = 136446210;
    *(void *)&v113[4] = v56;
    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Application activity events will be sent to session %{public}s",  v113,  0xCu);
    int v54 = *(_DWORD *)(a1 + 80);
    goto LABEL_38;
  }

void sub_1004C5E8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, void *a38, uint64_t a39, void *a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_10020E784((uint64_t)&a59);
  _Block_object_dispose((const void *)(v60 - 248), 8);
  _Block_object_dispose((const void *)(v60 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_1004C5F5C(uint64_t a1)
{
}

void sub_1004C5F98(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004DDE68;
  uint64_t v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_1004C5FF8(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    __int128 v4 = reply;
    xpc_object_t v5 = xpc_array_create(0LL, 0LL);
    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    if (qword_1008D5F00 != -1) {
      dispatch_once(&qword_1008D5F00, &stru_10089D8D0);
    }
    sub_10040B144((uint64_t)off_1008D5EF8, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_dictionary_set_string(v6, "Local Device", (const char *)p_p);
    xpc_array_append_value(v5, v6);
    xpc_release(v6);
    xpc_dictionary_set_value(v4, "kCBMsgArgs", v5);
    xpc_release(v5);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v4);
    xpc_release(v4);
  }

void sub_1004C6110( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004C612C(uint64_t a1, void *a2)
{
  if (*(int *)(a1 + 80) >= 2)
  {
    uint64_t v4 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8LL))(v4))
    {
      xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      if (v5)
      {
        xpc_object_t v6 = v5;
        int64_t int64 = xpc_dictionary_get_int64(v5, "kCBMsgId");
        uint64_t v8 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)timeval buf = 134217984;
          *(void *)&uint8_t buf[4] = int64;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Handling debug command %llu", buf, 0xCu);
        }

        xpc_object_t v9 = xpc_dictionary_get_value(v6, "kCBMsgArgs");
        uint64_t v10 = v9;
        switch(int64)
        {
          case 1LL:
            int64_t v11 = xpc_dictionary_get_int64(v9, "kCBMsgArgState");
            uint64_t v12 = sub_1002E6E9C();
            (*(void (**)(uint64_t, BOOL, void))(*(void *)v12 + 552LL))(v12, v11 != 0, 0LL);
            return;
          case 2LL:
            int64_t v47 = xpc_dictionary_get_int64(v9, "kCBMsgArgState");
            uint64_t v48 = sub_1002E6B38();
            (*(void (**)(uint64_t, BOOL))(*(void *)v48 + 112LL))(v48, v47 != 0);
            return;
          case 3LL:
            uint64_t v49 = sub_1002E6E9C();
            (*(void (**)(uint64_t))(*(void *)v49 + 1248LL))(v49);
            return;
          case 4LL:
            value[3] = 0;
            *(_DWORD *)&value[1] = 0;
            value[0] = 0;
            unsigned __int16 v13 = xpc_dictionary_get_int64(v9, "kCBMsgArgState");
            if ((*(_DWORD *)(sub_1002E6E9C() + 708) - 19) > 0x7BC)
            {
              uint64_t v110 = sub_1002E6E9C();
              (*(void (**)(uint64_t, void, _WORD *, _WORD *, _WORD *, _WORD *))(*(void *)v110 + 1152LL))( v110,  v13,  &value[3],  &value[2],  &value[1],  value);
            }

            else
            {
              uint64_t v255 = 0LL;
              __int128 v254 = 0u;
              __int128 v253 = 0u;
              __int128 v252 = 0u;
              __int128 v251 = 0u;
              __int128 v250 = 0u;
              __int128 v249 = 0u;
              __int128 v248 = 0u;
              __int128 v247 = 0u;
              __int128 v246 = 0u;
              __int128 v245 = 0u;
              __int128 v244 = 0u;
              __int128 v243 = 0u;
              __int128 v242 = 0u;
              memset(buf, 0, sizeof(buf));
              uint64_t v14 = sub_1002E6E9C();
              if (!(*(unsigned int (**)(uint64_t, void, uint8_t *))(*(void *)v14 + 1160LL))( v14,  v13,  buf))
              {
                value[3] = *(_WORD *)&buf[4];
                value[2] = *(_WORD *)&buf[8];
                value[1] = *(_WORD *)&buf[12];
                value[0] = *(_WORD *)&buf[16];
                unsigned int v15 = DWORD2(v253);
                unsigned int v16 = HIDWORD(v253);
                unsigned int v17 = (unsigned __int16)v254;
                unsigned int v18 = WORD1(v254);
                unsigned int v19 = WORD2(v254);
                unsigned int v20 = WORD3(v254);
                uint64_t v21 = *((void *)&v254 + 1);
                uint64_t v22 = v255;
                goto LABEL_73;
              }
            }

            uint64_t v22 = 0LL;
            uint64_t v21 = 0LL;
            unsigned int v20 = 0;
            unsigned int v19 = 0;
            unsigned int v18 = 0;
            unsigned int v17 = 0;
            unsigned int v16 = 0;
            unsigned int v15 = 0;
LABEL_73:
            xpc_object_t reply = xpc_dictionary_create_reply(a2);
            int v112 = reply;
            if (reply)
            {
              xpc_dictionary_set_uint64(reply, "kCBTransmitStat", value[3]);
              xpc_dictionary_set_uint64(v112, "kCBReceiveStat", value[2]);
              xpc_dictionary_set_uint64(v112, "kCBSleepStat", value[1]);
              xpc_dictionary_set_uint64(v112, "kCBOthersStat", value[0]);
              xpc_dictionary_set_uint64(v112, "kCBiPA5gCounter", v15);
              xpc_dictionary_set_uint64(v112, "kCBePA5gCounter", v16);
              xpc_dictionary_set_uint64(v112, "kCBtxbf5gTxPct", v17);
              xpc_dictionary_set_uint64(v112, "kCBmrc5gRxPct", v18);
              xpc_dictionary_set_uint64(v112, "kCBepa5gTxPct", v19);
              xpc_dictionary_set_uint64(v112, "kCBtxbf5gEpaTxPct", v20);
              xpc_dictionary_set_uint64(v112, "kCBduration5gTx", v21);
              xpc_dictionary_set_uint64(v112, "kCBduration5gRx", v22);
              xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v112);
              xpc_release(v112);
            }

            break;
          case 5LL:
            switch(xpc_dictionary_get_int64(v9, "kCBMsgArgOptions"))
            {
              case 1LL:
                id v50 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandCTManagerStart",  buf,  2u);
                }

                if (qword_1008D9700 != -1) {
                  dispatch_once(&qword_1008D9700, &stru_10089D830);
                }
                sub_1004F4994((uint64_t)off_1008D96F8 + 176, a1 + 160);
                if (qword_1008D9700 != -1) {
                  dispatch_once(&qword_1008D9700, &stru_10089D830);
                }
                uint64_t v51 = off_1008D96F8;
                int v52 = *(void **)(a1 + 96);
                double Current = CFAbsoluteTimeGetCurrent();
                sub_1003AA8D0((uint64_t)v51, v52, Current);
                break;
              case 2LL:
                __int16 v124 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandCTManagerStop",  buf,  2u);
                }

                if (qword_1008D9700 != -1) {
                  dispatch_once(&qword_1008D9700, &stru_10089D830);
                }
                sub_1003AACC8((uint64_t)off_1008D96F8);
                break;
              case 3LL:
                int v125 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandCTManagerReset",  buf,  2u);
                }

                if (qword_1008D5F20 != -1) {
                  dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
                }
                sub_10062EE80(qword_1008D5F18);
                break;
              case 4LL:
                __int16 v126 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandCTManagerDebugFillTEKHistory",  buf,  2u);
                }

                if (qword_1008D5F20 != -1) {
                  dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
                }
                sub_10062FABC(qword_1008D5F18, 30);
                break;
              case 5LL:
                int v127 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandCTManagerForceTEKRotation",  buf,  2u);
                }

                if (qword_1008D5F20 != -1) {
                  dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
                }
                sub_10062F4CC(qword_1008D5F18);
                break;
              case 6LL:
                __int16 v128 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandCTManagerRunRPIBenchmarks",  buf,  2u);
                }

                int64_t v129 = xpc_dictionary_get_int64(v10, "kCBMsgArgKeys");
                if (qword_1008D9700 != -1) {
                  dispatch_once(&qword_1008D9700, &stru_10089D830);
                }
                nullsub_63(off_1008D96F8, v129);
                break;
              case 7LL:
                __int16 v130 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandCTManagerCryptoVectorValidation",  buf,  2u);
                }

                if (qword_1008D5F20 != -1) {
                  dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
                }
                nullsub_63(qword_1008D5F18, v131);
                break;
              case 8LL:
                __int16 v132 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandCTManagerGetCurrentAdvertisingPayload",  buf,  2u);
                }

                *(void *)&uint8_t buf[8] = 0LL;
                *(void *)timeval buf = 0LL;
                if (qword_1008D9700 != -1) {
                  dispatch_once(&qword_1008D9700, &stru_10089D830);
                }
                sub_1003AA8C0((uint64_t)off_1008D96F8, buf);
                xpc_object_t v133 = xpc_dictionary_create_reply(a2);
                if (v133)
                {
                  __int16 v134 = (const void *)sub_10056AAF0((uint64_t)buf);
                  size_t v135 = sub_10056AAD8((uint64_t)buf);
                  xpc_dictionary_set_data(v133, "kCBMsgArgAdvertisingPayload", v134, v135);
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v133);
                  xpc_release(v133);
                }

                *(void *)timeval buf = &off_10087FAA8;
                if (*(void *)&buf[8]) {
                  sub_1002CD254(*(unsigned int **)&buf[8]);
                }
                break;
              case 9LL:
                if (qword_1008D9700 != -1) {
                  dispatch_once(&qword_1008D9700, &stru_10089D830);
                }
                id v170 = [*((id *)off_1008D96F8 + 21) copy];
                xpc_object_t v136 = xpc_array_create(0LL, 0LL);
                __int128 v232 = 0u;
                __int128 v233 = 0u;
                __int128 v230 = 0u;
                __int128 v231 = 0u;
                id obj = v170;
                id v137 = [obj countByEnumeratingWithState:&v230 objects:v239 count:16];
                if (v137)
                {
                  uint64_t v138 = *(void *)v231;
                  do
                  {
                    for (int i = 0LL; i != v137; int i = (char *)i + 1)
                    {
                      if (*(void *)v231 != v138) {
                        objc_enumerationMutation(obj);
                      }
                      __int16 v140 = *(void **)(*((void *)&v230 + 1) + 8LL * (void)i);
                      xpc_object_t v141 = xpc_dictionary_create(0LL, 0LL, 0LL);
                      id v142 = objc_claimAutoreleasedReturnValue([v140 objectForKey:@"RPIHistoryTime"]);
                      xpc_dictionary_set_string(v141, "RPIHistoryTime", (const char *)[v142 UTF8String]);

                      memset(buf, 0, 20);
                      int v143 = (void *)objc_claimAutoreleasedReturnValue([v140 objectForKey:@"RPIHistoryOTAPayload"]);
                      [v143 getBytes:buf length:20];

                      xpc_dictionary_set_data(v141, "RPIHistoryOTAPayload", buf, 0x14uLL);
                      __int16 v144 = (void *)objc_claimAutoreleasedReturnValue([v140 objectForKey:@"RPIHistoryAEMVersion"]);
                      xpc_dictionary_set_int64(v141, "RPIHistoryAEMVersion", (int)[v144 intValue]);

                      v145 = (void *)objc_claimAutoreleasedReturnValue([v140 objectForKey:@"RPIHistoryAEMTxPower"]);
                      xpc_dictionary_set_int64(v141, "RPIHistoryAEMTxPower", (int)[v145 intValue]);

                      __int16 v146 = (void *)objc_claimAutoreleasedReturnValue([v140 objectForKey:@"RPIHistorySecondsSince1970"]);
                      xpc_dictionary_set_int64(v141, "RPIHistorySecondsSince1970", (int)[v146 intValue]);

                      v147 = (void *)objc_claimAutoreleasedReturnValue([v140 objectForKey:@"RPIHistoryENIntervalNumber"]);
                      xpc_dictionary_set_int64(v141, "RPIHistoryENIntervalNumber", (int)[v147 intValue]);

                      xpc_array_append_value(v136, v141);
                      xpc_release(v141);
                    }

                    id v137 = [obj countByEnumeratingWithState:&v230 objects:v239 count:16];
                  }

                  while (v137);
                }

                xpc_object_t v148 = xpc_dictionary_create_reply(a2);
                int v149 = v148;
                if (v148)
                {
                  xpc_dictionary_set_value(v148, "kCBMsgArgAdvertisingPayloadHistory", v136);
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v149);
                  xpc_release(v149);
                }

                break;
              case 10LL:
                __int16 v150 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)timeval buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v150,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandCTManagerGetTEKHistory",  buf,  2u);
                }

                int64_t v151 = xpc_dictionary_get_int64(v10, "kCBMsgArgToday");
                int64_t v152 = xpc_dictionary_get_int64(v10, "KCBMsgArgForceRefresh");
                if (qword_1008D5F20 != -1) {
                  dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
                }
                id v153 = sub_10062F1A0(qword_1008D5F18, v151 != 0, v152 != 0);
                __int16 v154 = (void *)objc_claimAutoreleasedReturnValue(v153);
                xpc_object_t v155 = xpc_array_create(0LL, 0LL);
                __int128 v236 = 0u;
                __int128 v237 = 0u;
                __int128 v234 = 0u;
                __int128 v235 = 0u;
                id v156 = v154;
                id v157 = [v156 countByEnumeratingWithState:&v234 objects:v240 count:16];
                if (v157)
                {
                  uint64_t v158 = *(void *)v235;
                  do
                  {
                    for (j = 0LL; j != v157; j = (char *)j + 1)
                    {
                      if (*(void *)v235 != v158) {
                        objc_enumerationMutation(v156);
                      }
                      __int16 v160 = *(void **)(*((void *)&v234 + 1) + 8LL * (void)j);
                      memset(buf, 0, 21);
                      [v160 getBytes:buf length:21];
                      xpc_array_set_data(v155, 0xFFFFFFFFFFFFFFFFLL, buf, 0x15uLL);
                    }

                    id v157 = [v156 countByEnumeratingWithState:&v234 objects:v240 count:16];
                  }

                  while (v157);
                }

                xpc_object_t v161 = xpc_dictionary_create_reply(a2);
                __int16 v162 = v161;
                if (v161)
                {
                  xpc_dictionary_set_value(v161, "kCBMsgArgTEKHistory", v155);
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v162);
                  xpc_release(v162);
                }

                break;
              case 11LL:
                return;
              case 12LL:
                unsigned __int8 v163 = xpc_dictionary_get_int64(v10, "kCBMsgArgEKRollingPeriod");
                if (qword_1008D5F20 != -1) {
                  dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
                }
                sub_1006300B0(qword_1008D5F18, v163);
                break;
              default:
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_79;
                }
                break;
            }

            return;
          case 6LL:
            if (qword_1008D6288 != -1) {
              dispatch_once(&qword_1008D6288, &stru_10089D910);
            }
            sub_10057B230();
            return;
          case 7LL:
            switch(xpc_dictionary_get_int64(v9, "kCBMsgArgOptions"))
            {
              case 1LL:
                memset(buf, 0, 24);
                if (qword_1008D6798 != -1) {
                  dispatch_once(&qword_1008D6798, &stru_10089D930);
                }
                if (!sub_1001FBD5C(qword_1008D6790, (uint64_t **)buf))
                {
                  xpc_object_t v164 = xpc_array_create(0LL, 0LL);
                  if (v164)
                  {
                    int v165 = *(void ***)buf;
                    __int16 v166 = *(void ***)&buf[8];
                    while (v165 != v166)
                    {
                      xpc_object_t v167 = sub_1004DEC38(*v165, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
                      xpc_array_append_value(v164, v167);
                      xpc_release(v167);
                      ++v165;
                    }

                    xpc_object_t v168 = xpc_dictionary_create_reply(a2);
                    int v169 = v168;
                    if (v168)
                    {
                      xpc_dictionary_set_value(v168, "kCBMsgArgDevices", v164);
                      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v169);
                      xpc_release(v169);
                    }
                  }
                }

                *(void *)&value[3] = buf;
                sub_1003A0F6C((void ***)&value[3]);
                break;
              case 2LL:
                int v113 = sub_10025E0F0(v10, "kCBMsgArgDeviceUUID");
                uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v113);
                if (v43)
                {
                  if (qword_1008D6798 != -1) {
                    dispatch_once(&qword_1008D6798, &stru_10089D930);
                  }
                  sub_1001FB6B8(qword_1008D6790, v43);
                }

                goto LABEL_89;
              case 3LL:
                int v114 = sub_10025E0F0(v10, "kCBMsgArgDeviceUUID");
                uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v114);
                if (v43)
                {
                  if (qword_1008D6798 != -1) {
                    dispatch_once(&qword_1008D6798, &stru_10089D930);
                  }
                  sub_1001FBC24(qword_1008D6790, v43);
                }

                goto LABEL_89;
              case 4LL:
                if (qword_1008D6798 != -1) {
                  dispatch_once(&qword_1008D6798, &stru_10089D930);
                }
                sub_1001FBFAC(qword_1008D6790);
                break;
              default:
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
LABEL_79:
                }
                  sub_100686E1C();
                break;
            }

            return;
          case 8LL:
            return;
          case 9LL:
            id v54 = sub_10025E150(v9, "kCBMsgArgIRK");
            int v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
            id v56 = sub_10025E150(v10, "kCBMsgArgAddressBytes");
            uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
            id v58 = (os_log_s *)qword_1008F75F0;
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)timeval buf = 138412546;
              *(void *)&uint8_t buf[4] = v57;
              *(_WORD *)&_BYTE buf[12] = 2112;
              *(void *)&uint8_t buf[14] = v55;
              _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandResolveLERandomAddressWithIRK address:%@ irk:%@",  buf,  0x16u);
            }

            if (v55 && [v55 length] == (id)16 && v57 && objc_msgSend(v57, "length") == (id)6)
            {
              char v59 = (__int128 *)[v55 bytes];
              *(_WORD *)((char *)&value[5] + 1) = 0;
              *(_DWORD *)((char *)&value[3] + 1) = 0;
              LOBYTE(value[3]) = 1;
              [v57 getBytes:(char *)&value[3] + 1 length:6];
              if (sub_1001C924C((uint64_t)&value[3], v59))
              {
                int64_t v60 = 0LL;
              }

              else
              {
                int v115 = objc_opt_new(&OBJC_CLASS___NSMutableData);
                for (uint64_t k = 15LL; k != -1; --k)
                  -[NSMutableData appendBytes:length:](v115, "appendBytes:length:", (char *)v59 + k, 1LL);
                char v117 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)timeval buf = 138412546;
                  *(void *)&uint8_t buf[4] = v57;
                  *(_WORD *)&_BYTE buf[12] = 2112;
                  *(void *)&uint8_t buf[14] = v115;
                  _os_log_impl( (void *)&_mh_execute_header,  v117,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandResolveLERandomAddressWithIRK address:%@ irk:%@",  buf,  0x16u);
                }

                v118 = v115;
                else {
                  int64_t v60 = 2200LL;
                }
              }

              int v119 = (os_log_s *)qword_1008F75F0;
              if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
              {
                id v120 = sub_1005BFB9C(((unint64_t)HIBYTE(value[3]) << 40) | ((unint64_t)LOBYTE(value[4]) << 32) | ((unint64_t)HIBYTE(value[4]) << 24) | ((unint64_t)LOBYTE(value[5]) << 16) | ((unint64_t)HIBYTE(value[5]) << 8) | LOBYTE(value[6]) | ((unint64_t)LOBYTE(value[3]) << 48));
                double v121 = (void *)objc_claimAutoreleasedReturnValue(v120);
                *(_DWORD *)timeval buf = 138412546;
                *(void *)&uint8_t buf[4] = v121;
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&uint8_t buf[14] = v60 & 0x98;
                _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandResolveLERandomAddressWithIRK LE_ResolveUsingIRK for address %@ returned %d",  buf,  0x12u);
              }
            }

            else
            {
              if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
                sub_100686E48();
              }
              if (v57 && [v57 length] == (id)6)
              {
                if (v55 && [v55 length] == (id)16) {
                  int64_t v60 = 0LL;
                }
                else {
                  int64_t v60 = 21LL;
                }
              }

              else
              {
                int64_t v60 = 8LL;
              }
            }

            xpc_object_t v122 = xpc_dictionary_create_reply(a2);
            int v123 = v122;
            if (v122)
            {
              xpc_dictionary_set_int64(v122, "kCBMsgArgResult", v60);
              xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v123);
              xpc_release(v123);
            }

            return;
          case 10LL:
            int64_t v23 = xpc_dictionary_get_int64(v9, "addressType");
            int64_t v24 = xpc_dictionary_get_int64(v10, "refreshIdentity");
            if (qword_1008D6288 != -1) {
              dispatch_once(&qword_1008D6288, &stru_10089D910);
            }
            if (v23) {
              int v25 = 2;
            }
            else {
              int v25 = 3;
            }
            sub_10057AFA0((uint64_t)off_1008D6280, 1, v25, v24 != 0);
            return;
          case 11LL:
            *(void *)timeval buf = 0LL;
            *(void *)&uint8_t buf[8] = buf;
            *(_OWORD *)&uint8_t buf[16] = 0x2020000000uLL;
            *(void *)&_BYTE buf[24] = xpc_dictionary_create_reply(a2);
            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_10089D890);
            }
            v229[0] = _NSConcreteStackBlock;
            v229[1] = 3221225472LL;
            v229[2] = sub_1004DF490;
            v229[3] = &unk_10089CFE0;
            v229[5] = a1;
            v229[4] = buf;
            sub_1005B9828((uint64_t)off_1008D5F08, v229);
            _Block_object_dispose(buf, 8);
            return;
          case 12LL:
            id v26 = sub_10025E150(v9, "kCBFastLeConnectionInfoData");
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
            __int16 v28 = xpc_dictionary_get_int64(v10, "kCBFastLeConnectionInfoVersion");
            uint64_t v29 = sub_10025E0F0(v10, "kCBMsgArgDeviceUUID");
            id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
            uint64_t v31 = sub_100404FE8();
            v223[0] = _NSConcreteStackBlock;
            v223[1] = 3221225472LL;
            v223[2] = sub_1004DF5BC;
            v223[3] = &unk_10089D008;
            uint64_t v226 = a1;
            id v32 = v30;
            id v224 = v32;
            __int16 v228 = v28;
            id v33 = v27;
            id v225 = v33;
            v227 = a2;
            sub_1004054B4(v31, v223);

            return;
          case 13LL:
            int v34 = sub_10025E0F0(v9, "kCBMsgArgDeviceUUID");
            size_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
            uint64_t v36 = sub_100404FE8();
            v219[0] = _NSConcreteStackBlock;
            v219[1] = 3221225472LL;
            v219[2] = sub_1004DF678;
            v219[3] = &unk_10087FBF0;
            uint64_t v221 = a1;
            id v37 = v35;
            id v220 = v37;
            v222 = a2;
            sub_1004054B4(v36, v219);

            return;
          case 14LL:
            id v61 = sub_10025E150(v9, "kCBMsgArgLTK");
            uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
            __int16 v63 = sub_10025E0F0(v10, "kCBMsgArgDeviceUUID");
            uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
            uint64_t v65 = sub_100404FE8();
            v209[0] = _NSConcreteStackBlock;
            v209[1] = 3221225472LL;
            v209[2] = sub_1004DF7E4;
            v209[3] = &unk_10089D030;
            uint64_t v212 = a1;
            id v66 = v64;
            id v210 = v66;
            id v67 = v62;
            id v211 = v67;
            v213 = a2;
            sub_1004054B4(v65, v209);

            return;
          case 15LL:
            __int16 v38 = sub_10025E0F0(v9, "kCBMsgArgDeviceUUID");
            uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
            uint64_t v40 = sub_100404FE8();
            v205[0] = _NSConcreteStackBlock;
            v205[1] = 3221225472LL;
            v205[2] = sub_1004DF920;
            v205[3] = &unk_10087FBF0;
            uint64_t v207 = a1;
            id v41 = v39;
            id v206 = v41;
            v208 = a2;
            sub_1004054B4(v40, v205);

            return;
          case 16LL:
            uint64_t v68 = sub_10025E0F0(v9, "kCBMsgArgDeviceUUID");
            uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
            char v70 = xpc_dictionary_get_int64(v10, "kCBMsgArgOptions");
            uint64_t v71 = sub_100404FE8();
            v214[0] = _NSConcreteStackBlock;
            v214[1] = 3221225472LL;
            v214[2] = sub_1004DF728;
            v214[3] = &unk_100889AA0;
            uint64_t v216 = a1;
            id v72 = v69;
            char v218 = v70;
            id v215 = v72;
            v217 = a2;
            sub_1004054B4(v71, v214);

            return;
          case 17LL:
            char v42 = sub_10025E0F0(v9, "kCBMsgArgDeviceUUID");
            uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
            if (v43)
            {
              if (qword_1008D5F10 != -1) {
                dispatch_once(&qword_1008D5F10, &stru_10089D890);
              }
              __int128 v44 = off_1008D5F08;
              sub_100241F90(buf, v43);
              unsigned __int8 v45 = sub_1005A1B10((uint64_t)v44, buf, 0LL, 0LL, 0, 0, 0LL);
              int v46 = (os_log_s *)qword_1008F75F0;
              if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)timeval buf = 138412546;
                *(void *)&uint8_t buf[4] = v43;
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&uint8_t buf[14] = v45;
                _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "CBDebugCommandDisableHostWakeupOnLinkDrop identifier:%@ returned %d",  buf,  0x12u);
              }
            }

            else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
            {
              sub_100686E74();
            }

void sub_1004C7D20(_Unwind_Exception *a1)
{
  STACK[0x348] = (unint64_t)&STACK[0x450];
  sub_1003A0F6C((void ***)&STACK[0x348]);
  _Unwind_Resume(a1);
}

void sub_1004C809C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v15 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_10025D848(value, 0, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgProgrammaticPairing"))
  {
    if (*(_BYTE *)(a1 + 185)) {
      BOOL v10 = v15 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    char v11 = !v10;
    uint64_t v12 = sub_100404FE8();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1004DFF0C;
    v13[3] = &unk_1008800D8;
    v13[4] = a1;
    char v14 = v11;
    sub_1004054B4(v12, v13);
    *(_BYTE *)(a1 + 16_Block_object_dispose(&a9, 8) = 1;
  }

void sub_1004C815C(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004DFF64;
  uint64_t v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_1004054B4(v2, v3);
}

void sub_1004C81BC(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  uint64_t v5 = sub_100404FE8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _WORD v8[2] = sub_1004DFFB4;
  v8[3] = &unk_10087F8E0;
  v8[4] = a1;
  void v8[5] = v4;
  sub_1004054B4(v5, v8);
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v7 = reply;
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v7);
    xpc_release(v7);
  }

  xpc_release(v4);
}

void sub_1004C8274(uint64_t a1, xpc_object_t xdict)
{
  if (*(_BYTE *)(a1 + 185))
  {
    uint64_t v24 = 1LL;
    uint64_t v25 = 1LL;
    uint64_t v23 = 0LL;
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
      {
        xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
        if (!sub_10025D848( v7,  0,  v8,  v9,  v10,  v11,  v12,  v13,  (uint64_t)"kCBMsgArgPairingOptionsUseMITMAuthentication"))
        {
          uint64_t v14 = sub_100404FE8();
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3221225472LL;
          void v18[2] = sub_1004E0120;
          v18[3] = &unk_1008877F0;
          id v19 = v6;
          uint64_t v20 = v25;
          uint64_t v21 = v24;
          uint64_t v22 = v23;
          sub_1004054B4(v14, v18);
        }
      }

      else
      {
        uint64_t v15 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          uint64_t v16 = *(void *)(a1 + 96);
          uint64_t v17 = *(void *)(a1 + 48);
          *(_DWORD *)timeval buf = 138412802;
          uint64_t v27 = v16;
          __int16 v28 = 2112;
          uint64_t v29 = v17;
          __int16 v30 = 2112;
          uint64_t v31 = v6;
          _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
        }
      }
    }
  }

void sub_1004C8480( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1004C84AC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_10025D848(v7, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgPairingType") && v6)
  {
    *(void *)&__int128 v22 = 0LL;
    uint64_t v14 = sub_100404FE8();
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1004E01F4;
    v15[3] = &unk_1008877F0;
    uint64_t v17 = a1;
    id v16 = v6;
    uint64_t v18 = v20;
    uint64_t v19 = v22;
    sub_1004054B4(v14, v15);
  }
}

void sub_1004C87FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1004C8854(uint64_t a1, xpc_object_t xdict)
{
  if (*(_BYTE *)(a1 + 185))
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int v4 = sub_10025E2E0(value, "kCBUnpairOptionForceDisconnect");
    uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      char v7 = sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48));
      uint64_t v8 = (os_log_s *)qword_1008F75F0;
      if ((v7 & 1) != 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = (void *)(a1 + 56);
          *(_DWORD *)timeval buf = 136446722;
          uint64_t v18 = v9;
          if (v4) {
            uint64_t v10 = "YES";
          }
          else {
            uint64_t v10 = "NO";
          }
          __int16 v19 = 2112;
          uint64_t v20 = v6;
          __int16 v21 = 2080;
          __int128 v22 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to unpair device %@ forceDisconnect:%s",  buf,  0x20u);
        }

        uint64_t v11 = sub_100404FE8();
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472LL;
        void v14[2] = sub_1004E025C;
        v14[3] = &unk_100880230;
        id v15 = v6;
        char v16 = v4;
        sub_1004054B4(v11, v14);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void **)(a1 + 96);
        uint64_t v13 = *(void **)(a1 + 48);
        *(_DWORD *)timeval buf = 138412802;
        uint64_t v18 = v12;
        __int16 v19 = 2112;
        uint64_t v20 = v13;
        __int16 v21 = 2112;
        __int128 v22 = (const char *)v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }
    }
  }

void sub_1004C8A8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1004C8AB4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v18 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v4 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10025D848(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgUseOOBPairing");
  uint64_t v12 = sub_100404FE8();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_1004E0338;
  v14[3] = &unk_10087FBF0;
  uint64_t v16 = a1;
  id v13 = v5;
  id v15 = v13;
  uint64_t v17 = v18;
  sub_1004054B4(v12, v14);
}

void sub_1004C8B9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1004C8BBC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v18 = 0LL;
  __int16 v19 = &v18;
  uint64_t v20 = 0x2020000000LL;
  uint64_t v21 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = sub_100404FE8();
  length_2[0] = _NSConcreteStackBlock;
  length_2[1] = 3221225472LL;
  length_2[2] = sub_1004E039C;
  length_2[3] = &unk_10088FED8;
  uint64_t v16 = &v18;
  uint64_t v17 = a1;
  id v8 = v6;
  id v15 = v8;
  sub_1004054B4(v7, length_2);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = v19[3];
    if (v10)
    {
      unsigned __int16 length = 0;
      sub_1006194D0(v10, &length);
      uint64_t v12 = v11;
      xpc_dictionary_set_data(reply, "kCBMsgArgPairingData", v11, length);
      if (v12) {
        operator delete(v12);
      }
    }

    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }

  _Block_object_dispose(&v18, 8);
}

void sub_1004C8D00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004C8D40(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    id v4 = sub_10025E254(value, "kCBMsgArgReasonEnum");
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    int v6 = [v5 intValue];

    uint64_t v7 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100686EF8(a1, v6, v7);
    }
  }

void sub_1004C8DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C8DE4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E1C8(value, "kCBMsgArgResourceKey");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = sub_10025E1C8(value, "kCBMsgArgResourceSubKey");
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (*(int *)(a1 + 80) >= 1)
  {
    if (v6 && [v6 length])
    {
      if ([v6 isEqualToString:CBManagerResourceADVBufferCount])
      {
        uint64_t v9 = sub_1002E6BF0();
        unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 704LL))(v9);
        if (qword_1008D6608 != -1) {
          dispatch_once(&qword_1008D6608, &stru_10089D950);
        }
        int64_t v11 = 0LL;
        int64_t v12 = v10;
        int64_t v13 = v10 - (unint64_t)sub_1005F08E4((uint64_t)off_1008D6600);
        goto LABEL_14;
      }

      if ([v6 isEqualToString:CBManagerResourceConnectionUsecaseCount])
      {
        uint64_t v16 = objc_alloc_init(&OBJC_CLASS___NSNumberFormatter);
        -[NSNumberFormatter setNumberStyle:](v16, "setNumberStyle:", 1LL);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSNumberFormatter numberFromString:](v16, "numberFromString:", v8));
        if (qword_1008D92A8 != -1) {
          dispatch_once(&qword_1008D92A8, &stru_10089D970);
        }
        unsigned int v18 = sub_10064B7CC(qword_1008D92A0, [v17 unsignedIntegerValue]);
        if (qword_1008D92A8 != -1) {
          dispatch_once(&qword_1008D92A8, &stru_10089D970);
        }
        int64_t v12 = v18;
        int64_t v13 = v18
            - (unint64_t)sub_10064B99C( qword_1008D92A0,  (int)[v17 unsignedIntegerValue]);

        int64_t v11 = 0LL;
        goto LABEL_14;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100686FEC((uint64_t)v6);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100686FC0();
    }

    int64_t v12 = 0LL;
    int64_t v13 = 0LL;
    int64_t v11 = 3LL;
    goto LABEL_14;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
    sub_10068705C();
  }
  int64_t v12 = 0LL;
  int64_t v13 = 0LL;
  int64_t v11 = 17LL;
LABEL_14:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  id v15 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBMsgArgResourceTotalCount", v12);
    xpc_dictionary_set_int64(v15, "kCBMsgArgResourceRemainingCount", v13);
    xpc_dictionary_set_int64(v15, "kCBMsgArgResult", v11);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v15);
    xpc_release(v15);
  }
}

void sub_1004C90D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004C9114(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E1C8(value, "kCBMsgArgApplicationID");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v12 = 0LL;
  int64_t v13 = &v12;
  uint64_t v14 = 0x2020000000LL;
  xpc_object_t reply = 0LL;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (v13[3])
  {
    uint64_t v7 = sub_100404FE8();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _WORD v8[2] = sub_1004E09E8;
    v8[3] = &unk_10089D0F8;
    uint64_t v11 = a1;
    id v9 = v6;
    unsigned int v10 = &v12;
    sub_100405384(v7, v8);
  }

  _Block_object_dispose(&v12, 8);
}

void sub_1004C9200( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004C9234(uint64_t a1, xpc_object_t xdict)
{
  id v41 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (*(int *)(a1 + 80) >= 1
    && ([&off_1008C3198 containsObject:*(void *)(a1 + 96)] & 1) != 0)
  {
    if (reply && !v11)
    {
      id v13 = sub_10025E840(v41, "kCBOptionStateDetailList");
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v13);
      if (v36 && [v36 count])
      {
        size_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v36 count]));
        if ([v36 containsObject:@"kCBMsgArgIsA2DPSessionActive"])
        {
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL));
          [v35 addObject:v14];
        }

        if ([v36 containsObject:@"kCBMsgArgIsHFPSessionActive"])
        {
          id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
          [v35 addObject:v15];
        }

        if ([v36 containsObject:@"kCBMsgArgIsISOPipeSessionActive"])
        {
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 2LL));
          [v35 addObject:v16];
        }

        if ([v36 containsObject:@"kCBMsgArgIsLEASessionActive"])
        {
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 3LL));
          [v35 addObject:v17];
        }

        if ([v36 containsObject:@"kCBMsgArgIsWatchConnected"])
        {
          unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 4LL));
          [v35 addObject:v18];
        }

        if ([v36 containsObject:@"kCBMsgArgClassicDevicesConnectedCount"])
        {
          __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 5LL));
          [v35 addObject:v19];
        }

        if ([v36 containsObject:@"kCBMsgArgLeDevicesConnectedCount"])
        {
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 6LL));
          [v35 addObject:v20];
        }

        if ([v36 containsObject:@"kCBMsgArgClassicHIDDevicesConnectedCount"])
        {
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 7LL));
          [v35 addObject:v21];
        }

        if ([v36 containsObject:@"kCBMsgArgLeHIDDevicesConnectedCount"])
        {
          __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 8LL));
          [v35 addObject:v22];
        }

        if ([v36 containsObject:@"kCBMsgArgIsConnectionPrioritizationSupported"])
        {
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 9LL));
          [v35 addObject:v23];
        }

        if ([v36 containsObject:@"kCBMsgArgIsProtectLEA"])
        {
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 10LL));
          [v35 addObject:v24];
        }

        uint64_t v25 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v26 = sub_1002E8D94();
        (*(void (**)(uint64_t, void *, NSMutableDictionary *))(*(void *)v26 + 624LL))(v26, v35, v25);
        if (-[NSMutableDictionary count](v25, "count"))
        {
          __int128 v39 = 0u;
          __int128 v40 = 0u;
          __int128 v37 = 0u;
          __int128 v38 = 0u;
          uint64_t v27 = v25;
          id v28 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v27,  "countByEnumeratingWithState:objects:count:",  &v37,  v42,  16LL);
          if (v28)
          {
            uint64_t v29 = *(void *)v38;
            do
            {
              for (int i = 0LL; i != v28; int i = (char *)i + 1)
              {
                if (*(void *)v38 != v29) {
                  objc_enumerationMutation(v27);
                }
                uint64_t v31 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)i);
                switch([v31 intValue])
                {
                  case 0u:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsA2DPSessionActive", (BOOL)[v32 BOOLValue]);
                    goto LABEL_47;
                  case 1u:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsHFPSessionActive", (BOOL)[v32 BOOLValue]);
                    goto LABEL_47;
                  case 2u:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_BOOL( reply,  "kCBMsgArgIsISOPipeSessionActive",  (BOOL)[v32 BOOLValue]);
                    goto LABEL_47;
                  case 3u:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsLEASessionActive", (BOOL)[v32 BOOLValue]);
                    goto LABEL_47;
                  case 4u:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsWatchConnected", (BOOL)[v32 BOOLValue]);
                    goto LABEL_47;
                  case 5u:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_int64( reply,  "kCBMsgArgClassicDevicesConnectedCount",  (int)[v32 intValue]);
                    goto LABEL_47;
                  case 6u:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_int64( reply,  "kCBMsgArgLeDevicesConnectedCount",  (int)[v32 intValue]);
                    goto LABEL_47;
                  case 7u:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_int64( reply,  "kCBMsgArgClassicHIDDevicesConnectedCount",  (int)[v32 intValue]);
                    goto LABEL_47;
                  case 8u:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_int64( reply,  "kCBMsgArgLeHIDDevicesConnectedCount",  (int)[v32 intValue]);
                    goto LABEL_47;
                  case 9u:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_BOOL( reply,  "kCBMsgArgIsConnectionPrioritizationSupported",  (BOOL)[v32 BOOLValue]);
                    goto LABEL_47;
                  case 0xAu:
                    id v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v27,  "objectForKeyedSubscript:",  v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsProtectLEA", (BOOL)[v32 BOOLValue]);
LABEL_47:

                    break;
                  default:
                    continue;
                }
              }

              id v28 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v27,  "countByEnumeratingWithState:objects:count:",  &v37,  v42,  16LL);
            }

            while (v28);
          }

          int64_t v33 = 0LL;
        }

        else
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            sub_100687164();
          }
          int64_t v33 = 3LL;
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_100687138();
        }
        int64_t v33 = 3LL;
      }

      xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v33);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
      xpc_release(reply);
    }
  }

  else
  {
    int v34 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687088(a1, v34);
    }
    if (reply)
    {
      xpc_dictionary_set_int64(reply, "kCBMsgArgResult", 13LL);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
      xpc_release(reply);
    }
  }

void sub_1004C99F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1004C9B54(uint64_t a1, void *a2)
{
  uint64_t v25 = 0LL;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000LL;
  int v28 = 0;
  id v4 = (unsigned int *)operator new(0x1E0uLL);
  sub_10056B368((uint64_t)v4);
  v24[0] = &off_10087FAE8;
  v24[1] = v4;
  uint64_t v5 = sub_1002E8D94();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v5 + 632LL))(v5, *(void *)(a1 + 96), 2LL);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  int v7 = sub_1004E0A9C(a1, value, (uint64_t)v24);
  *((_DWORD *)v26 + 6) = v7;
  uint64_t v23 = 0LL;
  if (a2 && sub_10043EE7C(a1, a2))
  {
    id v8 = sub_1004E2430(a1, (uint64_t)a2);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v9));
    uint64_t v23 = v10;

    sub_1004E248C(v11, v10);
    uint64_t v12 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 8LL))(v12))
    {
      BOOL v13 = sub_10043EF98(a1, a2);
      if (!v13)
      {
        sub_1004E2654(v13, v10, 0xFAuLL);
        [v10 removeObjectForKey:@"kCBAdvDataAppleMfgData"];
      }
    }

    int v14 = 1;
  }

  else
  {
    uint64_t v10 = 0LL;
    int v14 = 0;
  }

  if (*((_DWORD *)v26 + 6))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687190();
    }
  }

  else
  {
    uint64_t v15 = sub_100404FE8();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3321888768LL;
    v20[2] = sub_1004E2828;
    v20[3] = &unk_10089D120;
    v20[4] = &v25;
    v20[5] = a1;
    uint64_t v21 = &off_10087FAE8;
    __int128 v22 = v4;
    sub_1002CD1E0((uint64_t)v4);
    sub_1004054B4(v15, v20);
    uint64_t v21 = &off_10087FAE8;
    if (v22) {
      sub_1002CD254(v22);
    }
  }

  xpc_object_t v16 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v16, "kCBMsgArgResult", *((int *)v26 + 6));
  uint64_t v17 = sub_1002E6E00();
  int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  if (v16) {
    int v19 = v18;
  }
  else {
    int v19 = 0;
  }
  if ((v14 & v19) == 1 && v10) {
    sub_1004E28CC(v18, v16, &v23);
  }
  sub_10043F1F4(a1, 47LL, v16, 1);

  sub_1002CD254(v4);
  _Block_object_dispose(&v25, 8);
}

void sub_1004C9DDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, ...)
{
  if (a13) {
    sub_1002CD254(a13);
  }
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004C9E54(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004E2924;
  uint64_t v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_1004054B4(v2, v3);
  sub_10043F1F4(a1, 48LL, 0LL, 0);
}

void sub_1004C9EC8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000LL;
  int v25 = 0;
  uint64_t v16 = 0LL;
  uint64_t v17 = &off_10087FAA8;
  *(_OWORD *)int v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v20 = &off_10087FAA8;
  uint64_t v21 = 0LL;
  if (*(int *)(a1 + 80) > 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int v4 = sub_1004E2974(a1, value, (uint64_t)&v16);
    *((_DWORD *)v23 + 6) = v4;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068721C();
      }
    }

    else
    {
      uint64_t v5 = sub_100404FE8();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3321888768LL;
      void v7[2] = sub_1004E2CD4;
      v7[3] = &unk_10089D158;
      void v7[4] = &v22;
      void v7[5] = a1;
      int v8 = v16;
      uint64_t v9 = &off_10087FAA8;
      uint64_t v10 = (unsigned int *)v18[0];
      if (v18[0]) {
        sub_1002CD1E0((uint64_t)v18[0]);
      }
      std::stringbuf::string_type __p = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      sub_100050EE8( (char *)&__p,  (__int128 *)v18[1],  (__int128 *)v19,  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (unint64_t)v18[1]) >> 2));
      int v14 = &off_10087FAA8;
      uint64_t v15 = v21;
      if (v21) {
        sub_1002CD1E0((uint64_t)v21);
      }
      sub_1004054B4(v5, v7);
      int v14 = &off_10087FAA8;
      if (v15) {
        sub_1002CD254(v15);
      }
      if (__p)
      {
        uint64_t v12 = __p;
        operator delete(__p);
      }

      uint64_t v9 = &off_10087FAA8;
      if (v10) {
        sub_1002CD254(v10);
      }
    }

    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v6, "kCBMsgArgResult", *((int *)v23 + 6));
    sub_10043F1F4(a1, 49LL, v6, 1);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_1006871F0();
  }

  uint64_t v20 = &off_10087FAA8;
  if (v21) {
    sub_1002CD254(v21);
  }
  if (v18[1])
  {
    *(void **)&__int128 v19 = v18[1];
    operator delete(v18[1]);
  }

  uint64_t v17 = &off_10087FAA8;
  if (v18[0]) {
    sub_1002CD254((unsigned int *)v18[0]);
  }
  _Block_object_dispose(&v22, 8);
}

void sub_1004CA108( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17, void *__p, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    sub_1002CD254(a17);
  }
  sub_1004E2E50(&a23);
  _Block_object_dispose((const void *)(v23 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1004CA16C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000LL;
  int v25 = 0;
  uint64_t v16 = 0LL;
  uint64_t v17 = &off_10087FAA8;
  *(_OWORD *)int v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v20 = &off_10087FAA8;
  uint64_t v21 = 0LL;
  if (*(int *)(a1 + 80) > 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int v4 = sub_1004E2974(a1, value, (uint64_t)&v16);
    *((_DWORD *)v23 + 6) = v4;
    uint64_t v5 = sub_100404FE8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3321888768LL;
    void v7[2] = sub_1004E2EA8;
    v7[3] = &unk_10089D158;
    void v7[4] = &v22;
    void v7[5] = a1;
    int v8 = v16;
    uint64_t v9 = &off_10087FAA8;
    uint64_t v10 = (unsigned int *)v18[0];
    if (v18[0]) {
      sub_1002CD1E0((uint64_t)v18[0]);
    }
    std::stringbuf::string_type __p = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    sub_100050EE8( (char *)&__p,  (__int128 *)v18[1],  (__int128 *)v19,  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (unint64_t)v18[1]) >> 2));
    int v14 = &off_10087FAA8;
    uint64_t v15 = v21;
    if (v21) {
      sub_1002CD1E0((uint64_t)v21);
    }
    sub_1004054B4(v5, v7);
    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v6, "kCBMsgArgResult", *((int *)v23 + 6));
    sub_10043F1F4(a1, 50LL, v6, 1);
    int v14 = &off_10087FAA8;
    if (v15) {
      sub_1002CD254(v15);
    }
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }

    uint64_t v9 = &off_10087FAA8;
    if (v10) {
      sub_1002CD254(v10);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_10068727C();
  }

  uint64_t v20 = &off_10087FAA8;
  if (v21) {
    sub_1002CD254(v21);
  }
  if (v18[1])
  {
    *(void **)&__int128 v19 = v18[1];
    operator delete(v18[1]);
  }

  uint64_t v17 = &off_10087FAA8;
  if (v18[0]) {
    sub_1002CD254((unsigned int *)v18[0]);
  }
  _Block_object_dispose(&v22, 8);
}

void sub_1004CA378( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17, void *__p, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    sub_1002CD254(a17);
  }
  sub_1004E2E50(&a23);
  _Block_object_dispose((const void *)(v23 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1004CA3DC(uint64_t a1, void *a2)
{
  uint64_t v35 = 0LL;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x2020000000LL;
  int v38 = 0;
  int64_t v34 = 0LL;
  __int128 v42 = 0uLL;
  int v43 = 0;
  sub_10063432C(&v42);
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  __int16 v30 = 0LL;
  uint64_t v31 = 0LL;
  std::stringbuf::string_type __p = 0LL;
  int v28 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v4 = sub_1002E8D94();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v4 + 632LL))(v4, *(void *)(a1 + 96), 3LL);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  int v12 = sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgAttributeID");
  *((_DWORD *)v36 + 6) = v12;
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006872FC();
    }
  }

  else
  {
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_10089D990);
    }
    if (sub_10038645C(qword_1008D9260, (unsigned __int8 *)&v42, *(unsigned __int8 *)(a1 + 183)))
    {
      uint64_t v13 = (char *)operator new(0xC0uLL);
      int v14 = v13;
      BOOL v15 = v33 == 0;
      BOOL v16 = v33 != 0;
      *(_OWORD *)(v13 + 72) = v42;
      int v17 = v43;
      *(void *)uint64_t v13 = off_1008A0320;
      *((void *)v13 + 1) = v13 + 24;
      v13[96] = v16;
      *((void *)v13 + 22) = 0LL;
      *((void *)v13 + 23) = 0LL;
      *((void *)v13 + 21) = 0LL;
      *((void *)v13 + 14) = 0LL;
      *((void *)v13 + 15) = 0LL;
      *((void *)v13 + 13) = 0LL;
      v13[128] = 0;
      *((void *)v13 + 17) = 0LL;
      *((void *)v13 + 1_Block_object_dispose(&a9, 8) = 0LL;
      v13[160] = 0;
      *((void *)v13 + 19) = 0LL;
      int v18 = &unk_1006C39EC;
      if (!v15) {
        int v18 = &unk_1006C39D8;
      }
      *((_DWORD *)v13 + 6) = 0;
      *(_OWORD *)(v13 + 2_Block_object_dispose(&a9, 8) = *(_OWORD *)v18;
      *((_DWORD *)v13 + 11) = v18[4];
      *((void *)v13 + 7) = 0LL;
      *((void *)v13 + _Block_object_dispose(&a9, 8) = 0LL;
      *((void *)v13 + 6) = 0LL;
      *((_DWORD *)v13 + 22) = v17;
      *((_DWORD *)v13 + 23) = 0;
      *((_DWORD *)v13 + 4) = v34;
      for (int i = v30; i != v31; ++i)
      {
        uint64_t v20 = (char *)operator new(0x70uLL);
        sub_10063432C(&v40);
        *((_DWORD *)v20 + 6) = 0;
        *((_DWORD *)v20 + 4) = 0;
        *(void *)uint64_t v20 = &off_1008A02F0;
        *((void *)v20 + 1) = v20 + 24;
        *((_DWORD *)v20 + 11) = 0;
        *(_OWORD *)(v20 + 2_Block_object_dispose(&a9, 8) = xmmword_1006C3A00;
        *((void *)v20 + 7) = 0LL;
        *((void *)v20 + _Block_object_dispose(&a9, 8) = 0LL;
        *((void *)v20 + 6) = 0LL;
        *((_DWORD *)v20 + 1_Block_object_dispose(&a9, 8) = 0;
        *(_OWORD *)(v20 + 76) = v40;
        *((_DWORD *)v20 + 23) = v41;
        *((_DWORD *)v20 + 26) = *i;
        sub_1003826DC(v14, (uint64_t)v20);
      }

      uint64_t v23 = sub_100404FE8();
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      void v26[2] = sub_1004E3114;
      v26[3] = &unk_10087FEE0;
      v26[4] = &v35;
      v26[5] = a1;
      v26[6] = v14;
      sub_1004054B4(v23, v26);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = (void *)(a1 + 56);
        sub_1006344B4((uint64_t)&v42, v25);
        sub_1006872A8((uint64_t)v22, (uint64_t)v25, (uint64_t)v39);
      }

      *((_DWORD *)v36 + 6) = 905;
    }
  }

  xpc_object_t v24 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v24, "kCBMsgArgAttributeID", v34);
  xpc_dictionary_set_int64(v24, "kCBMsgArgResult", *((int *)v36 + 6));
  sub_10043F1F4(a1, 51LL, v24, 1);
  if (__p)
  {
    int v28 = (uint64_t *)__p;
    operator delete(__p);
  }

  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }

  _Block_object_dispose(&v35, 8);
}

void sub_1004CA810( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *__p, uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  int v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 20_Block_object_dispose(&a9, 8) = v38;
    operator delete(v38);
  }

  _Block_object_dispose((const void *)(v36 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1004CA87C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v12 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_10025D848(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgAttributeID"))
  {
    uint64_t v10 = sub_100404FE8();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1004E34E0;
    uint64_t v11[3] = &unk_10087F8E0;
    v11[4] = a1;
    void v11[5] = v12;
    sub_1004054B4(v10, v11);
  }

void sub_1004CA920(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004E3538;
  uint64_t v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_1004054B4(v2, v3);
}

void sub_1004CA980(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  BOOL v16 = 0LL;
  uint64_t v17 = 0LL;
  BOOL v15 = &off_10087FAA8;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_10025D848(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgTransactionID"))
  {
    uint64_t v10 = sub_100404FE8();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3321888768LL;
    void v11[2] = sub_1004E3588;
    uint64_t v11[3] = &unk_10089D188;
    v11[4] = a1;
    void v11[5] = v19;
    void v11[6] = v17;
    uint64_t v12 = &off_10087FAA8;
    uint64_t v13 = v16;
    uint64_t v14 = v18;
    sub_1004054B4(v10, v11);
    uint64_t v12 = &off_10087FAA8;
    if (v13) {
      sub_1002CD254(v13);
    }
  }

  BOOL v15 = &off_10087FAA8;
  if (v16) {
    sub_1002CD254(v16);
  }
}

void sub_1004CAAC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, unsigned int *a30)
{
  if (a30) {
    sub_1002CD254(a30);
  }
  *(void *)(v31 - 72) = v30;
  uint64_t v33 = *(unsigned int **)(v31 - 64);
  if (v33) {
    sub_1002CD254(v33);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004CAAF4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v19 = &off_10087FAA8;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E384(value, "kCBMsgArgUUIDs");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (!sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgAttributeID") && v5)
  {
    uint64_t v12 = sub_100404FE8();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3321888768LL;
    void v13[2] = sub_1004E363C;
    v13[3] = &unk_10089D1C0;
    uint64_t v15 = a1;
    id v14 = v5;
    uint64_t v16 = v21;
    uint64_t v17 = &off_10087FAA8;
    uint64_t v18 = v20;
    sub_1004054B4(v12, v13);
    uint64_t v17 = &off_10087FAA8;
    if (v18) {
      sub_1002CD254(v18);
    }
  }

  uint64_t v19 = &off_10087FAA8;
  if (v20) {
    sub_1002CD254(v20);
  }
}

void sub_1004CAC38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21)
{
  int v25 = *(unsigned int **)(v23 - 48);
  *(void *)(v23 - 56) = v22;
  if (v25) {
    sub_1002CD254(v25);
  }
  _Unwind_Resume(a1);
}

void sub_1004CAC80(uint64_t a1, void *a2)
{
  int v4 = *(unsigned __int8 *)(sub_1002E6E9C() + 160);
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v6 = reply;
    xpc_dictionary_set_BOOL(reply, "kCBMsgArgData", v4 != 0);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v6);
    xpc_release(v6);
  }

void sub_1004CACF4(int a1, xpc_object_t xdict)
{
  uint64_t v12 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v10 = 0LL;
  id v11 = 0LL;
  sub_10025D848(value, 1, v3, v4, v5, v6, v7, v8, (uint64_t)"kCBMsgArgDeviceUUID");
  uint64_t v9 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)timeval buf = 134218242;
    uint64_t v14 = v12;
    __int16 v15 = 2112;
    id v16 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Enable private mode for time %lld for client session : %@",  buf,  0x16u);
  }
}

void sub_1004CAFB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  _Unwind_Resume(a1);
}

void sub_1004CB000(uint64_t a1, void *a2)
{
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v4 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Publish L2CAP channel request", buf, 2u);
  }

  uint64_t v5 = sub_1002E8D94();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v5 + 632LL))(v5, *(void *)(a1 + 96), 5LL);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgPSM"))
  {
    uint64_t v24 = 0LL;
    *(void *)timeval buf = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v21 = 0LL;
    if (!sub_10025D848(v26, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBL2CAPChannelInMTU")
      && (v27 & 0x8000000000000000LL) == 0
      && v27 < 0x10000)
    {
      uint64_t v19 = sub_100404FE8();
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      v20[2] = sub_1004E38EC;
      v20[3] = &unk_10088D918;
      v20[4] = a1;
      v20[5] = v27;
      void v20[6] = v28;
      v20[7] = *(void *)buf;
      v20[8] = v24;
      v20[9] = v23;
      v20[10] = v22;
      v20[11] = v21;
      sub_1004054B4(v19, v20);
    }
  }

void sub_1004CB1DC(uint64_t a1, void *a2)
{
  uint64_t v15 = 0LL;
  uint64_t v4 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unpublish L2CAP channel request", buf, 2u);
  }

  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgPSM")
    && (v15 & 0x8000000000000000LL) == 0
    && v15 < 0x10000)
  {
    uint64_t v12 = sub_100404FE8();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1004E3988;
    v13[3] = &unk_10087F8E0;
    void v13[4] = a1;
    void v13[5] = v15;
    sub_1004054B4(v12, v13);
  }

void sub_1004CB2DC(uint64_t a1, void *a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)timeval buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Override local LE Address", buf, 2u);
  }

  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  id v6 = sub_10025E1C8(value, "kCBMsgArgAddressString");
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)timeval buf = 138412290;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Address is %@", buf, 0xCu);
  }

  if ([v7 length] && *(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v9 = sub_100404FE8();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_1004E39E0;
    v10[3] = &unk_10087EA48;
    id v11 = v7;
    sub_1004054B4(v9, v10);
  }
}

void sub_1004CB454( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1004CB47C(uint64_t a1, void *a2)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687328();
    }
  }

  else if ((_os_feature_enabled_impl("FindMy", "BA_Power_Off") & 1) != 0)
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_object_t array = xpc_dictionary_get_array(value, "kCBMsgArgData");
    if (array)
    {
      uint64_t v5 = array;
      if (xpc_get_type(array) == (xpc_type_t)&_xpc_type_array)
      {
        v7[0] = 0LL;
        v7[1] = v7;
        void v7[2] = 0x2020000000LL;
        char v8 = 0;
        applier[0] = _NSConcreteStackBlock;
        applier[1] = 3221225472LL;
        applier[2] = sub_1004E3A38;
        applier[3] = &unk_100890408;
        applier[4] = v7;
        xpc_array_apply(v5, applier);
        if (qword_1008D6798 != -1) {
          dispatch_once(&qword_1008D6798, &stru_10089D930);
        }
        sub_1001FC020(qword_1008D6790, 0xFFu, 0LL, -1);
        _Block_object_dispose(v7, 8);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100687354();
  }

void sub_1004CB5F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1004CB608(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E150(value, "kCBMsgArgAddressBytes");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = [v5 copy];

  uint64_t v7 = (uint64_t *)(a1 + 96);
  if ([&off_1008C31B0 containsObject:*(void *)(a1 + 96)])
  {
    if ([v6 length] == (id)6 || objc_msgSend(v6, "length") == (id)7)
    {
      *(_DWORD *)&void v19[3] = 0;
      *(_DWORD *)uint64_t v19 = 0;
      if ([v6 length] == (id)6)
      {
        uint64_t v8 = 0LL;
        v19[0] = 1;
      }

      else
      {
        uint64_t v8 = 1LL;
        [v6 getBytes:v19 length:1];
      }

      [v6 getBytes:&v19[1] range:v8];
      if (*(_DWORD *)(a1 + 80) == 2)
      {
        uint64_t v9 = v19[1];
        uint64_t v10 = v19[2];
        uint64_t v11 = v19[3];
        uint64_t v12 = v19[4];
        uint64_t v13 = v19[5];
        uint64_t v14 = v19[6];
        uint64_t v15 = v19[0];
        uint64_t v16 = sub_100404FE8();
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472LL;
        void v18[2] = sub_1004E3D50;
        v18[3] = &unk_10087EB20;
        void v18[4] = (v9 << 40) | (v10 << 32) | (v11 << 24) | (v12 << 16) | (v13 << 8) | v14 | (v15 << 48);
        sub_1004054B4(v16, v18);
      }
    }

    else
    {
      uint64_t v17 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100687380(v7, (uint64_t)v19, (uint64_t)[v6 length], v17);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_1006873D0();
  }
}

void sub_1004CB81C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004CB84C(uint64_t a1, xpc_object_t original)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  xpc_object_t reply = 0LL;
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (*(int *)(a1 + 80) >= 1
    && ([&off_1008C31C8 containsObject:*(void *)(a1 + 96)] & 1) != 0)
  {
    if (qword_1008D6288 != -1) {
      dispatch_once(&qword_1008D6288, &stru_10089D910);
    }
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    void v4[2] = sub_1004E3DA0;
    v4[3] = &unk_10088E2D8;
    v4[4] = &v6;
    void v4[5] = a1;
    sub_100574DB0((uint64_t)off_1008D6280, v4);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(*(void *)(a1 + 128), (uint64_t)v5);
      sub_100687430();
    }

    uint64_t v3 = (void *)v7[3];
    if (v3)
    {
      xpc_dictionary_set_int64(v3, "kCBMsgArgResult", 13LL);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), (xpc_object_t)v7[3]);
      xpc_release((xpc_object_t)v7[3]);
    }
  }

  _Block_object_dispose(&v6, 8);
}

void sub_1004CB9D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1004CB9F8(uint64_t a1, xpc_object_t original)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  xpc_object_t reply = 0LL;
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (*(int *)(a1 + 80) >= 1
    && ([&off_1008C31E0 containsObject:*(void *)(a1 + 96)] & 1) != 0)
  {
    if (qword_1008D6288 != -1) {
      dispatch_once(&qword_1008D6288, &stru_10089D910);
    }
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    void v4[2] = sub_1004E3E0C;
    v4[3] = &unk_10089D220;
    v4[4] = &v6;
    void v4[5] = a1;
    sub_100574EA4((uint64_t)off_1008D6280, v4);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(*(void *)(a1 + 128), (uint64_t)v5);
      sub_10068747C();
    }

    uint64_t v3 = (void *)v7[3];
    if (v3)
    {
      xpc_dictionary_set_int64(v3, "kCBMsgArgResult", 13LL);
      xpc_dictionary_set_int64((xpc_object_t)v7[3], "kCBMsgArgTimeoutInMS", 0LL);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), (xpc_object_t)v7[3]);
      xpc_release((xpc_object_t)v7[3]);
    }
  }

  _Block_object_dispose(&v6, 8);
}

void sub_1004CBB94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1004CBBBC(uint64_t a1, void *a2)
{
  xxpc_object_t array = xpc_array_create(0LL, 0LL);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  id v5 = sub_10025E384(value, "kCBMsgArgUUIDs");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    sub_1005CF5E8((uint64_t)off_1008D5F28);
    uint64_t v20 = a2;
    uint64_t v21 = v6;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v24;
      do
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v24 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v11 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v10);
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          if (!sub_1005CC0B8((uint64_t)off_1008D5F28, v11))
          {
            uint64_t v13 = qword_1008F75F0;
            if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
              goto LABEL_19;
            }
            *(_DWORD *)timeval buf = 138412290;
            uint64_t v28 = v11;
            uint64_t v14 = (os_log_s *)v13;
            uint64_t v15 = "Device %@ does not exist";
            goto LABEL_22;
          }

          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          if ((sub_1005D79C0((uint64_t)off_1008D5F28, v11, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            xpc_object_t v12 = sub_1004DEC38(v11, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
            xpc_array_append_value(xarray, v12);
            xpc_release(v12);
            goto LABEL_19;
          }

          uint64_t v16 = qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)timeval buf = 138412290;
            uint64_t v28 = v11;
            uint64_t v14 = (os_log_s *)v16;
            uint64_t v15 = "Session not allowed for device %@";
LABEL_22:
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, buf, 0xCu);
          }

void sub_1004CBEA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1004CBEE0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E0F0(value, "kCBMsgArgUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  BOOL v7 = sub_1005CC0B8((uint64_t)off_1008D5F28, v6);
  if (!v7 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
    sub_100687554();
  }
  if (*(int *)(a1 + 80) >= 1 && *(_BYTE *)(a1 + 182))
  {
    uint64_t v14 = 0LL;
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    id v8 = off_1008D5F08;
    sub_100241F90(v15, v6);
    sub_100599890((uint64_t)v8, v15, &v14);
    if (v14) {
      BOOL v9 = v7;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      int64_t v10 = *v14;
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      xpc_object_t v12 = reply;
      if (reply)
      {
        xpc_dictionary_set_int64(reply, "kCBMsgArgConnectionHandle", v10);
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v12);
        xpc_release(v12);
        goto LABEL_22;
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_1006874F4();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_1006874C8();
  }

  xpc_object_t v13 = xpc_dictionary_create_reply(xdict);
  if (v13)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v13);
    xpc_release(v13);
  }

void sub_1004CC0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004CC114(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  id v6 = sub_10025E840(value, "kCBMsgArgTags");
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  uint64_t v9 = sub_100404FE8();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1004E9E40;
  v12[3] = &unk_10089D5A0;
  uint64_t v15 = a1;
  id v10 = v7;
  id v13 = v10;
  uint64_t v11 = v8;
  uint64_t v14 = v11;
  xpc_object_t v16 = v4;
  id v17 = a2;
  sub_1004054B4(v9, v12);
}

void sub_1004CC210( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1004CC244(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v18[0] = 0LL;
  v18[1] = v18;
  void v18[2] = 0x2020000000LL;
  xpc_object_t reply = 0LL;
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  id v6 = sub_10025E840(value, "kCBMsgArgCustomProperties");
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  uint64_t v9 = sub_100404FE8();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1004EA1DC;
  v12[3] = &unk_10089D5C8;
  uint64_t v16 = a1;
  id v10 = v8;
  id v13 = v10;
  id v11 = v7;
  xpc_object_t v17 = v4;
  id v14 = v11;
  uint64_t v15 = v18;
  sub_1004054B4(v9, v12);

  _Block_object_dispose(v18, 8);
}

void sub_1004CC374( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004CC3BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      int v7 = *(_DWORD *)(a1 + 80);
      if (v7 > 1 || v7 == 1 && sub_10025D500(a1))
      {
        uint64_t v8 = sub_100404FE8();
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472LL;
        void v14[2] = sub_1004EA4A0;
        v14[3] = &unk_10087FBF0;
        uint64_t v16 = a1;
        id v15 = v6;
        xpc_object_t v17 = xdict;
        sub_1004054B4(v8, v14);
      }

      else
      {
        id v11 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)timeval buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "No privileges for running retrievePairingInfoForPeripheral without proper entitlement",  buf,  2u);
        }
      }
    }

    else
    {
      uint64_t v9 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(a1 + 96);
        uint64_t v13 = *(void *)(a1 + 48);
        *(_DWORD *)timeval buf = 138412802;
        uint64_t v19 = v12;
        __int16 v20 = 2112;
        uint64_t v21 = v13;
        __int16 v22 = 2112;
        __int128 v23 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_1006875B4();
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }
}

void sub_1004CC60C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1004CC638(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  uint64_t v21 = 0LL;
  __int16 v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v20 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgUUIDs"))
  {
    uint64_t v12 = sub_100404FE8();
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3321888768LL;
    void v15[2] = sub_1004EA9E0;
    v15[3] = &unk_10089D5E8;
    void v15[4] = a1;
    void v15[5] = v20;
    xpc_object_t v17 = 0LL;
    uint64_t v18 = 0LL;
    std::stringbuf::string_type __p = 0LL;
    sub_100050EE8((char *)&__p, v21, v22, 0xCCCCCCCCCCCCCCCDLL * (((char *)v22 - (char *)v21) >> 2));
    xpc_object_t v19 = v4;
    sub_1004054B4(v12, v15);
    if (__p)
    {
      xpc_object_t v17 = __p;
      operator delete(__p);
    }
  }

  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  id v14 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v14);
    xpc_release(v14);
  }

  xpc_release(v4);
  if (v21)
  {
    __int16 v22 = v21;
    operator delete(v21);
  }

void sub_1004CC7B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  __int128 v26 = *(void **)(v24 - 56);
  if (v26)
  {
    *(void *)(v24 - 4_Block_object_dispose(va, 8) = v26;
    operator delete(v26);
  }

  _Unwind_Resume(exception_object);
}

void sub_1004CC7E8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E840(value, "kCBMsgArgFindMySerialNumberString");
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  sub_1005CF5E8((uint64_t)off_1008D5F28);
  int64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  if (*(int *)(a1 + 80) >= 1 && *(_BYTE *)(a1 + 104))
  {
    if (v33 && [v33 count])
    {
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      id v5 = v33;
      id v6 = [v5 countByEnumeratingWithState:&v43 objects:v53 count:16];
      if (!v6) {
        goto LABEL_44;
      }
      uint64_t v7 = *(void *)v44;
      while (1)
      {
        uint64_t v8 = 0LL;
        do
        {
          if (*(void *)v44 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)v8);
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          id v10 = sub_1005D77C0((uint64_t)off_1008D5F28, v9);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          if (!v11)
          {
            uint64_t v12 = qword_1008F75F0;
            if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
              goto LABEL_22;
            }
            *(_DWORD *)timeval buf = 141558275;
            uint64_t v50 = 1752392040LL;
            __int16 v51 = 2113;
            int v52 = v9;
            uint64_t v13 = (os_log_s *)v12;
            id v14 = "No device with SN %{private, mask.hash}@";
            goto LABEL_25;
          }

          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          if ((sub_1005D79C0((uint64_t)off_1008D5F28, v11, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            [v34 addObject:v11];
            goto LABEL_22;
          }

          uint64_t v15 = qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = *(void *)(a1 + 96);
            *(_DWORD *)timeval buf = 138543618;
            uint64_t v50 = v16;
            __int16 v51 = 2114;
            int v52 = v11;
            uint64_t v13 = (os_log_s *)v15;
            id v14 = "Bundle %{public}@ is not allowed to access device %{public}@";
LABEL_25:
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x16u);
          }

void sub_1004CCD6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1004CCDFC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E384(value, "kCBMsgArgUUIDs");
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  sub_1005CF5E8((uint64_t)off_1008D5F28);
  int64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  if (*(int *)(a1 + 80) >= 1 && *(_BYTE *)(a1 + 104))
  {
    if (v33 && [v33 count])
    {
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      id v5 = v33;
      id v6 = [v5 countByEnumeratingWithState:&v43 objects:v53 count:16];
      if (!v6) {
        goto LABEL_44;
      }
      uint64_t v7 = *(void *)v44;
      while (1)
      {
        uint64_t v8 = 0LL;
        do
        {
          if (*(void *)v44 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)v8);
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          id v10 = sub_1005C84B8((uint64_t)off_1008D5F28, v9);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          if (!v11)
          {
            uint64_t v12 = qword_1008F75F0;
            if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
              goto LABEL_22;
            }
            *(_DWORD *)timeval buf = 141558275;
            uint64_t v50 = 1752392040LL;
            __int16 v51 = 2113;
            int v52 = v9;
            uint64_t v13 = (os_log_s *)v12;
            id v14 = "No device with FindMyID %{private, mask.hash}@";
            goto LABEL_25;
          }

          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          if ((sub_1005D79C0((uint64_t)off_1008D5F28, v11, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            [v34 addObject:v11];
            goto LABEL_22;
          }

          uint64_t v15 = qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = *(void *)(a1 + 96);
            *(_DWORD *)timeval buf = 138543618;
            uint64_t v50 = v16;
            __int16 v51 = 2114;
            int v52 = v11;
            uint64_t v13 = (os_log_s *)v15;
            id v14 = "Bundle %{public}@ is not allowed to access device %{public}@";
LABEL_25:
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x16u);
          }

void sub_1004CD380( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1004CD410(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1004EAD0C;
  v5[3] = &unk_10087F8E0;
  v5[4] = a1;
  void v5[5] = a2;
  sub_1004054B4(v4, v5);
}

void sub_1004CD474(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v32 = 0LL;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2020000000LL;
  int v35 = 0;
  xpc_object_t v31 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions"))
  {
    sub_10043F3F4(a1, 220LL, xdict, *((_DWORD *)v33 + 6));
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687640();
    }
  }

  uint64_t v30 = 2LL;
  uint64_t v29 = 1LL;
  int v19 = sub_10025D848(v31, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBLEMRCAction");
  *((_DWORD *)v33 + 6) = v19;
  if (!v19
    || (sub_10043F3F4(a1, 220LL, xdict, v19), !os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)))
  {
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  sub_1006875E0();
  if (v6)
  {
LABEL_7:
    uint64_t v20 = sub_100404FE8();
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    void v23[2] = sub_1004EAE74;
    v23[3] = &unk_10089D620;
    __int128 v25 = &v32;
    uint64_t v26 = a1;
    id v24 = v6;
    uint64_t v27 = v30;
    uint64_t v28 = v29;
    sub_1004054B4(v20, v23);
  }

void sub_1004CD6B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21)
{
  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1004CD6F4(uint64_t a1, void *a2)
{
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  uint64_t v5 = sub_100404FE8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _WORD v8[2] = sub_1004EAEEC;
  v8[3] = &unk_10087F8E0;
  void v8[4] = a1;
  void v8[5] = v4;
  sub_1004054B4(v5, v8);
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v7 = reply;
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v7);
    xpc_release(v7);
  }

  xpc_release(v4);
}

void sub_1004CD7AC(uint64_t a1, xpc_object_t original)
{
  v21[0] = 0LL;
  v21[1] = v21;
  void v21[2] = 0x2020000000LL;
  xpc_object_t reply = 0LL;
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  uint64_t v20 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(original, "kCBMsgArgs");
  if (!sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions"))
  {
    uint64_t v19 = 0LL;
    sub_10025D848(v20, 0, v11, v12, v13, v14, v15, v16, (uint64_t)"kCBMsgArgLastMinutes");
    uint64_t v17 = sub_100404FE8();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_1004EB0B0;
    void v18[3] = &unk_10087FEE0;
    void v18[5] = a1;
    v18[6] = v19;
    void v18[4] = v21;
    sub_100405384(v17, v18);
  }

  _Block_object_dispose(v21, 8);
}

void sub_1004CD8B4(_Unwind_Exception *a1)
{
}

void sub_1004CD8D4(uint64_t a1, void *a2)
{
  uint64_t v63 = 0LL;
  uint64_t v64 = &v63;
  uint64_t v65 = 0x2020000000LL;
  int v66 = 0;
  int64_t v60 = 0LL;
  id v61 = 0LL;
  unint64_t v62 = 0LL;
  char v59 = 0LL;
  uint64_t v4 = sub_1002E8D94();
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 632LL))(v4, *(void *)(a1 + 96), 0LL);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  int v12 = sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgUUIDs");
  *((_DWORD *)v64 + 6) = v12;
  if (!v12)
  {
    if (sub_10025D7F4(v59, "kCBScanOptionReadADVBuffersNow"))
    {
      if (*(_BYTE *)(a1 + 190))
      {
        uint64_t v13 = sub_100404FE8();
        v58[0] = _NSConcreteStackBlock;
        v58[1] = 3221225472LL;
        void v58[2] = sub_1004E53A4;
        v58[3] = &unk_100880C30;
        v58[4] = &v63;
        sub_1004054B4(v13, v58);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_1006876A0();
      }
    }

    else
    {
      uint64_t v14 = operator new(0x188uLL);
      sub_100050070((uint64_t)v14);
      std::stringbuf::string_type __p = 0LL;
      id v56 = 0LL;
      uint64_t v57 = 0LL;
      sub_100050EE8((char *)&__p, (__int128 *)v60, v61, 0xCCCCCCCCCCCCCCCDLL * (((char *)v61 - (char *)v60) >> 2));
      sub_100050224(v14 + 1, (__int128 *)__p, v56, 0xCCCCCCCCCCCCCCCDLL * (((char *)v56 - (_BYTE *)__p) >> 2));
      if (__p)
      {
        id v56 = (__int128 *)__p;
        operator delete(__p);
      }

      int v15 = sub_1004E5400(a1, v59, (uint64_t)v14);
      *((_DWORD *)v64 + 6) = v15;
      if (!v15)
      {
        if (*((_BYTE *)v14 + 143))
        {
          uint64_t v20 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)timeval buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Contact tracing requires , resetting and configuring UUID list",  buf,  2u);
          }

          id v61 = (__int128 *)v60;
          __int128 v68 = xmmword_1006BDBA8;
          int v69 = 0;
          sub_100634334((__n128 *)buf, (__n128 *)&v68);
          uint64_t v21 = v61;
          if ((unint64_t)v61 >= v62)
          {
            unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v61 - (char *)v60) >> 2);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              abort();
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26) {
              uint64_t v27 = (char *)sub_100050420((uint64_t)&v62, v26);
            }
            else {
              uint64_t v27 = 0LL;
            }
            uint64_t v32 = &v27[20 * v24];
            uint64_t v33 = &v27[20 * v26];
            __int128 v34 = *(_OWORD *)buf;
            *((_DWORD *)v32 + 4) = v71;
            *(_OWORD *)uint64_t v32 = v34;
            uint64_t v23 = (__int128 *)(v32 + 20);
            __int128 v36 = v60;
            int v35 = v61;
            if (v61 != (__int128 *)v60)
            {
              do
              {
                __int128 v37 = *(__int128 *)((char *)v35 - 20);
                *((_DWORD *)v32 - 1) = *((_DWORD *)v35 - 1);
                *(_OWORD *)(v32 - 20) = v37;
                v32 -= 20;
                int v35 = (__int128 *)((char *)v35 - 20);
              }

              while (v35 != (__int128 *)v36);
              int v35 = (__int128 *)v60;
            }

            int64_t v60 = (unsigned __int8 *)v32;
            id v61 = v23;
            unint64_t v62 = (unint64_t)v33;
            if (v35) {
              operator delete(v35);
            }
          }

          else
          {
            __int128 v22 = *(_OWORD *)buf;
            *((_DWORD *)v61 + 4) = v71;
            __int128 *v21 = v22;
            uint64_t v23 = (__int128 *)((char *)v21 + 20);
          }

          id v61 = v23;
          __int16 v53 = 0LL;
          uint64_t v54 = 0LL;
          int v52 = 0LL;
          sub_100050EE8((char *)&v52, (__int128 *)v60, v23, 0xCCCCCCCCCCCCCCCDLL * (((char *)v23 - (char *)v60) >> 2));
          sub_100050224(v14 + 1, (__int128 *)v52, v53, 0xCCCCCCCCCCCCCCCDLL * (((char *)v53 - (_BYTE *)v52) >> 2));
          if (v52)
          {
            __int16 v53 = (__int128 *)v52;
            operator delete(v52);
          }
        }

        else if (sub_1004E613C(a1, &v60))
        {
          *((_DWORD *)v64 + 6) = 3;
        }
      }

      int v16 = *((_DWORD *)v64 + 6);
      if (v16) {
        goto LABEL_65;
      }
      if (*((_BYTE *)v14 + 122))
      {
        v67.i64[1] = 0LL;
        *(uint64_t *)((char *)v67.i64 + 1) = 0LL;
        v67.i8[0] = 1;
        sub_1006343C4((uint64_t)buf, &v67, 16LL);
        uint64_t v17 = v61;
        if ((unint64_t)v61 >= v62)
        {
          unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v61 - (char *)v60) >> 2);
          unint64_t v29 = v28 + 1;
          if (v28 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30) {
            xpc_object_t v31 = (char *)sub_100050420((uint64_t)&v62, v30);
          }
          else {
            xpc_object_t v31 = 0LL;
          }
          __int128 v38 = &v31[20 * v28];
          __int128 v39 = &v31[20 * v30];
          __int128 v40 = *(_OWORD *)buf;
          *((_DWORD *)v38 + 4) = v71;
          *(_OWORD *)__int128 v38 = v40;
          uint64_t v19 = (__int128 *)(v38 + 20);
          __int128 v42 = v60;
          __int128 v41 = v61;
          if (v61 != (__int128 *)v60)
          {
            do
            {
              __int128 v43 = *(__int128 *)((char *)v41 - 20);
              *((_DWORD *)v38 - 1) = *((_DWORD *)v41 - 1);
              *(_OWORD *)(v38 - 20) = v43;
              v38 -= 20;
              __int128 v41 = (__int128 *)((char *)v41 - 20);
            }

            while (v41 != (__int128 *)v42);
            __int128 v41 = (__int128 *)v60;
          }

          int64_t v60 = (unsigned __int8 *)v38;
          id v61 = v19;
          unint64_t v62 = (unint64_t)v39;
          if (v41) {
            operator delete(v41);
          }
        }

        else
        {
          __int128 v18 = *(_OWORD *)buf;
          *((_DWORD *)v61 + 4) = v71;
          __int128 *v17 = v18;
          uint64_t v19 = (__int128 *)((char *)v17 + 20);
        }

        id v61 = v19;
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      sub_1005CF5E8((uint64_t)off_1008D5F28);
      if (*((_BYTE *)v14 + 121) && *(int *)(a1 + 80) >= 1)
      {
        __int128 v44 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)timeval buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Trying to reload paired devices from the synced keychain",  buf,  2u);
        }

        if (qword_1008D5F20 != -1) {
          dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
        }
        sub_10061DD60(qword_1008D5F18);
      }

      if (*((_BYTE *)v14 + 138))
      {
        __int128 v45 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)timeval buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Asking to scan for TDS AD", buf, 2u);
        }
      }

      uint64_t v46 = sub_1002E8E64();
      (*(void (**)(uint64_t, void))(*(void *)v46 + 64LL))(v46, *(unsigned int *)(a1 + 40));
      uint64_t v47 = sub_100404FE8();
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472LL;
      v51[2] = sub_1004E63B4;
      v51[3] = &unk_10087FEE0;
      v51[4] = &v63;
      v51[5] = a1;
      v51[6] = v14;
      sub_1004054B4(v47, v51);
      int v16 = *((_DWORD *)v64 + 6);
      if (v16)
      {
LABEL_65:
        uint64_t v48 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)timeval buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v16;
          _os_log_error_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "Failed to start scan with error %d",  buf,  8u);
          int v16 = *((_DWORD *)v64 + 6);
        }

        sub_10043F3F4(a1, 129LL, a2, v16);
        uint64_t v49 = sub_1002E8E64();
        (*(void (**)(uint64_t, void))(*(void *)v49 + 64LL))(v49, *(unsigned int *)(a1 + 40));
        uint64_t v50 = (void *)sub_10004FD94((uint64_t)v14);
        operator delete(v50);
      }
    }
  }

  if (v60)
  {
    id v61 = (__int128 *)v60;
    operator delete(v60);
  }

  _Block_object_dispose(&v63, 8);
}

void sub_1004CE008( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
}

void sub_1004CE07C(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004E641C;
  uint64_t v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_1004054B4(v2, v3);
}

void sub_1004CE0DC(uint64_t a1, xpc_object_t xdict)
{
  int v143 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = sub_1002E8D94();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 632LL))(v7, *(void *)(a1 + 96), 1LL);
  if (sub_10025D848(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgOptions"))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068785C();
    }
    int v14 = 3;
    goto LABEL_33;
  }

  if (!v6) {
    goto LABEL_183;
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  if (!sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
  {
LABEL_183:
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006876CC();
    }
    int v14 = 8;
    goto LABEL_33;
  }

  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  if ((sub_1000A86F0() & 1) != 0)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      uint64_t v141 = 0LL;
      uint64_t v142 = 0LL;
      uint64_t v139 = 0LL;
      uint64_t v140 = 0LL;
      uint64_t v137 = 0LL;
      uint64_t v138 = 0LL;
      uint64_t v136 = 0LL;
      uint64_t v135 = 0LL;
      uint64_t v134 = 0LL;
      uint64_t v133 = 0LL;
      uint64_t v132 = 0LL;
      uint64_t v131 = 0LL;
      uint64_t v130 = 0LL;
      uint64_t v129 = 0LL;
      uint64_t v128 = 0LL;
      uint64_t v127 = 0LL;
      uint64_t v126 = 0LL;
      uint64_t v125 = 0LL;
      uint64_t v124 = 0LL;
      uint64_t v123 = 0LL;
      uint64_t v122 = 0LL;
      uint64_t v121 = 0LL;
      uint64_t v120 = 0LL;
      char v119 = 0;
      uint64_t v118 = 0LL;
      uint64_t v117 = 0LL;
      uint64_t v116 = 0LL;
      uint64_t v115 = 0LL;
      uint64_t v114 = 0LL;
      uint64_t v113 = 0LL;
      uint64_t v112 = 0LL;
      uint64_t v111 = 0LL;
      int v21 = sub_10025D848(v143, 0, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBConnectOptionNotifyOnConnection");
      __int128 v22 = (void *)objc_claimAutoreleasedReturnValue( +[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:]( &OBJC_CLASS___ConnectOptions,  "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:",  0LL,  0LL,  0LL));
      int v105 = v21;
      [v22 setWantsObjectDiscoveryData:0];
      [v22 setDisableLeGATT:0];
      [v22 setAncsRequired:0];
      [v22 setResetDisconnectionHistory:0];
      id v23 = sub_10025E840(v143, "kCBManagerListOfClients");
      unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      [v22 setConnectingClients:v24];

      [v22 setRequiresLowLatency:0];
      unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v22 connectingClients]);
      LODWORD(v24) = v25 == 0LL;

      if ((_DWORD)v24)
      {
        unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  *(void *)(a1 + 96),  0LL,  sub_10025DAFC,  &v142,  "kCBConnectOptionNotifyOnDisconnection",  sub_10025DAFC,  &v141,  "kCBConnectOptionNotifyOnNotification",  sub_10025DAFC,  &v140,  "kCBConnectOptionStartDelay",  sub_10025DAFC,  &v139,  "kCBConnectOptionReceiveObjectDiscoveryData",  sub_10025DAFC,  &v138,  "kCBConnectOptionEnableTransportBridging",  sub_10025DAFC,  &v137,  "kCBConnectOptionsDisableLeGATT",  sub_10025DAFC,  &v136,  "kCBConnectOptionRequiresANCS",  sub_10025DAFC,  &v135,  "kCBConnectOptionHideFromBTSettings",  sub_10025DAFC,  &v134,  "kCBConnectOptionInitPHYs",  sub_10025DAFC,  &v133,  "kCBConnectOptionPHYOptions",  sub_10025DAFC,  &v132,  "kCBConnectOptionFirstApproachEnable",  sub_10025DAFC,  &v131,  "kCBConnectOptionGetControllerBTClock",  sub_10025DAFC,  &v130,  "kCBOptionUsecase",  sub_10025DAFC,  &v129,  "kCBConnectOptionMaxAllowedConnectionDelay",  sub_10025DAFC,  &v128,
                          "kCBConnectOptionMinRSSILevelForConnect",
                          sub_10025DAFC,
                          &v127,
                          "kCBConnectOptionConnectionCompleteOnPoll",
                          sub_10025DAFC,
                          &v126,
                          "kCBConnectOptionEnableScanCore",
                          sub_10025DAFC,
                          &v125,
                          "kCBConnectOptionLatencyCritical",
                          sub_10025DAFC,
                          &v124,
                          "kCBConnectOptionCtkdTransport",
                          sub_10025DAFC,
                          &v123));
        [v22 setConnectingClients:v26];
      }

      int v27 = *(unsigned __int8 *)(a1 + 188);
      if (*(_BYTE *)(a1 + 188) || *(int *)(a1 + 80) >= 1)
      {
        unint64_t v28 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)timeval buf = 134218240;
          *(void *)&uint8_t buf[4] = v127;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&uint8_t buf[14] = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "configuration for minRSSILevelForConnection to:%lld  fAllowScreenOffScanning=%d",  buf,  0x12u);
        }

        [v22 setMinRSSILevelForConnection:v127];
        int v106 = (int *)(a1 + 80);
        if (*(int *)(a1 + 80) >= 2)
        {
          [v22 setInitPHYs:v133];
          [v22 setPHYOptions:v132];
          [v22 setMinRSSILevelForConnection:v127];
          [v22 setWaitForConnectionPoll:v126 != 0];
          [v22 setEnableScanCore:v125 != 0];
          [v22 setCtkdChosenTransport:v123];
          [v22 setTxPowerConnectInd:v113];
          [v22 setTxPowerAuxConnectReq:v112];
          [v22 setMrcEnable:v111];
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          sub_1005D9C30((uint64_t)off_1008D5F28, v6, v118, v117, v116, v115, v114, v113, v112, v111);
LABEL_37:
          if (qword_1008F1168 != -1) {
            dispatch_once(&qword_1008F1168, &stru_10089D240);
          }
          if (byte_1008F1166)
          {
            unint64_t v30 = (os_log_s *)qword_1008F75F0;
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)timeval buf = 138543362;
              *(void *)&uint8_t buf[4] = v6;
              _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Warning: Override enableAutoReconnect for device %{public}@",  buf,  0xCu);
            }

            [v22 setEnableAutoReconnect:1];
          }

          if (byte_1008F1165 == 1)
          {
            xpc_object_t v31 = (os_log_s *)qword_1008F75F0;
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)timeval buf = 138543362;
              *(void *)&uint8_t buf[4] = v6;
              _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Warning: Setting override connection parameters to device %{public}@",  buf,  0xCu);
            }

            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_10089D810);
            }
            sub_1005D9C30( (uint64_t)off_1008D5F28,  v6,  byte_1008F1160,  byte_1008F1161,  0,  0,  0,  byte_1008F1162,  word_1008F1163,  SHIBYTE(word_1008F1163));
          }

          if (![v22 initPHYs]) {
            [v22 setInitPHYs:[v22 initPHYs] | 1];
          }
          if (v131 == 1)
          {
            uint64_t v32 = (os_log_s *)qword_1008F75F0;
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)timeval buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Enable coded PHY from first approach",  buf,  2u);
            }

            [v22 setInitPHYs:[v22 initPHYs] | 4];
          }

          if (v130 == 1)
          {
            uint64_t v33 = (os_log_s *)qword_1008F75F0;
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
            {
              int v34 = *v106;
              *(_DWORD *)timeval buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v34;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "configuration for enableControllerBTClockUpdates for AccessLevel:%d ",  buf,  8u);
            }

            if (*v106 < 1) {
              goto LABEL_63;
            }
            [v22 setEnableControllerBTClockUpdates:1];
          }

          if (*v106 >= 1)
          {
            [v22 setOpportunistic:v121 != 0];
            [v22 setResetDisconnectionHistory:v122 != 0];
            id v35 = sub_10025E254(v143, "kCBConnectOptionConnectionScanDutyCycle");
            __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
            __int128 v37 = v36;
            if (v36) {
              unsigned __int8 v38 = [v36 intValue];
            }
            else {
              unsigned __int8 v38 = 0;
            }
            id v40 = sub_10025E254(v143, "kCBConnectOptionScreenOffConnectionScanDutyCycle");
            __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(v40);

            if (v41) {
              unsigned __int8 v39 = [v41 intValue];
            }
            else {
              unsigned __int8 v39 = 3;
            }
            id v42 = sub_10025E254(v143, "kCBConnectOptionDoNoDisconnectOnEncryptionFailure");
            __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
            unsigned int v44 = [v43 BOOLValue];

            if (v44)
            {
              if (qword_1008D5F30 != -1) {
                dispatch_once(&qword_1008D5F30, &stru_10089D810);
              }
              sub_1005D6F0C((uint64_t)off_1008D5F28, v6, 1);
              if (qword_1008D5F10 != -1) {
                dispatch_once(&qword_1008D5F10, &stru_10089D890);
              }
              sub_1005B735C((uint64_t)off_1008D5F08, v6);
            }

            goto LABEL_77;
          }

void sub_1004CF994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004CFB10(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  xpc_object_t v31 = 0LL;
  if (!sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions"))
  {
    if (!v6) {
      goto LABEL_31;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if (!sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006876CC();
      }
      int v13 = 8;
      goto LABEL_20;
    }

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    if ((sub_1000A86F0() & 1) != 0)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
      {
        int v20 = sub_10025D848(v31, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBCancelConnectOptionForce");
        if (!v20)
        {
          uint64_t v23 = sub_100404FE8();
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472LL;
          void v26[2] = sub_1004E89C4;
          v26[3] = &unk_1008877F0;
          uint64_t v28 = a1;
          id v27 = v6;
          uint64_t v29 = v33;
          uint64_t v30 = v32;
          sub_1004054B4(v23, v26);

          goto LABEL_21;
        }

        int64_t v21 = 87LL;
        goto LABEL_27;
      }

      __int128 v22 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(void *)(a1 + 96);
        uint64_t v25 = *(void *)(a1 + 48);
        *(_DWORD *)timeval buf = 138412802;
        uint64_t v35 = v24;
        __int16 v36 = 2112;
        uint64_t v37 = v25;
        __int16 v38 = 2112;
        unsigned __int8 v39 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_1006877FC();
    }

    int v20 = 17;
    int64_t v21 = 85LL;
LABEL_27:
    sub_10043F3F4(a1, v21, xdict, v20);
    goto LABEL_21;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
    sub_10068785C();
  }
  int v13 = 3;
LABEL_20:
  sub_10043F3F4(a1, 85LL, xdict, v13);
LABEL_21:
}

void sub_1004CFE58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1004CFE80(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E1C8(value, "kCBMsgArgAddressString");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if ((sub_1005C02B0(v6) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    sub_1005CF5E8((uint64_t)off_1008D5F28);
    *(void *)uu = 0LL;
    uint64_t v34 = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    uint64_t v7 = off_1008D5F28;
    unint64_t v8 = sub_1005C02B0(v6);
    sub_1005C8684((uint64_t)v7, v8, 0, 1u, 0LL, 0LL, uu);
    if (uuid_is_null(uu))
    {
      if (qword_1008D5F20 != -1) {
        dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
      }
      uint64_t v9 = qword_1008D5F18;
      unint64_t v10 = sub_1005C02B0(v6);
      id v11 = sub_10062CCB0(v9, v10);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      sub_100241F90(&v27, v12);
      uuid_copy(uu, (const unsigned __int8 *)&v27);
    }

    if (!uuid_is_null(uu))
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      uint64_t v13 = (uint64_t)off_1008D5F28;
      uint64_t v14 = sub_100241F94(uu);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      LOBYTE(v13) = sub_1005D79C0(v13, v15, *(void **)(a1 + 96), *(void **)(a1 + 48));

      if ((v13 & 1) != 0)
      {
        uint64_t v16 = sub_100241F94(uu);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        xpc_object_t v18 = sub_1004DEC38(v17, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));

        goto LABEL_20;
      }

      int v20 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void **)(a1 + 96);
        uint64_t v24 = *(void *)(a1 + 48);
        uint64_t v25 = sub_100241F94(uu);
        unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        int v27 = 138412802;
        uint64_t v28 = v23;
        __int16 v29 = 2112;
        uint64_t v30 = v24;
        __int16 v31 = 2112;
        uint64_t v32 = v26;
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  (uint8_t *)&v27,  0x20u);
      }
    }
  }

  else
  {
    uint64_t v19 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 138412290;
      uint64_t v28 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Warning: Invalid parameters, cannot retrieve a peripheral with address %@",  (uint8_t *)&v27,  0xCu);
    }
  }

  xpc_object_t v18 = 0LL;
LABEL_20:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  __int128 v22 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v18);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v22);
    xpc_release(v22);
  }

  if (v18) {
    xpc_release(v18);
  }
}

void sub_1004D01C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D0214(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E150(value, "kCBAdvOptionInstanceRandomAddressBytes");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = [v6 copy];

  unint64_t v8 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (*(int *)(a1 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006879BC();
    }
    goto LABEL_38;
  }

  *(_DWORD *)&v41[3] = 0;
  *(_DWORD *)__int128 v41 = 0;
  if ([v7 length] != (id)6 && objc_msgSend(v7, "length") != (id)7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687990();
    }
    goto LABEL_38;
  }

  if ([v7 length] == (id)6)
  {
    uint64_t v10 = 0LL;
    v41[0] = 1;
  }

  else
  {
    uint64_t v10 = 1LL;
    [v7 getBytes:v41 length:1];
  }

  [v7 getBytes:&v41[1] range:v10];
  if (v9)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if (sub_1005CC0B8((uint64_t)off_1008D5F28, v9))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100687930();
      }
LABEL_38:
      xpc_object_t v34 = 0LL;
      goto LABEL_39;
    }
  }

  id v39 = v7;
  id v40 = v9;
  xpc_object_t v11 = v2;
  uint64_t v12 = a1;
  uint64_t v13 = v41[1];
  uint64_t v14 = v41[2];
  uint64_t v15 = v41[3];
  uint64_t v16 = v41[4];
  uint64_t v17 = v41[5];
  uint64_t v18 = v41[6];
  uint64_t v19 = v41[0];
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  sub_1005CF5E8((uint64_t)off_1008D5F28);
  unint64_t v20 = (v13 << 40) | (v14 << 32) | (v15 << 24) | (v16 << 16) | (v17 << 8) | v18 | (v19 << 48);
  *(void *)uu = 0LL;
  uint64_t v49 = 0LL;
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
  }
  id v7 = v39;
  uint64_t v9 = v40;
  a1 = v12;
  id v21 = sub_10062CCB0(qword_1008D5F18, v20);
  xpc_object_t v2 = v11;
  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  sub_100241F90(uu, v22);

  if (!uuid_is_null(uu))
  {
    uint64_t v25 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100366664(uu, src);
      int v26 = v43;
      int v27 = *(unsigned __int8 **)src;
      id v28 = sub_1005BFB9C(v20);
      uint64_t v29 = objc_claimAutoreleasedReturnValue(v28);
      uint64_t v30 = (void *)v29;
      __int16 v31 = src;
      if (v26 < 0) {
        __int16 v31 = v27;
      }
      *(_DWORD *)timeval buf = 136446466;
      __int128 v45 = v31;
      __int16 v46 = 2112;
      uint64_t v47 = v29;
      _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Device %{public}s for address %@ already exists, cannot create a new one",  buf,  0x16u);
      if (v43 < 0) {
        operator delete(*(void **)src);
      }
    }

    goto LABEL_38;
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  sub_1005C8684((uint64_t)off_1008D5F28, v20, 0, 1u, 0LL, 0LL, src);
  uuid_copy(uu, src);
  if (!uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      id v32 = sub_1005BFB9C(v20);
      id v33 = (id)objc_claimAutoreleasedReturnValue(v32);
      sub_100366664(uu, src);
      sub_100687888();
    }

    goto LABEL_38;
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  sub_1005C8684((uint64_t)off_1008D5F28, v20, 1u, 1u, v40, 0LL, src);
  uuid_copy(uu, src);
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      id v23 = sub_1005BFB9C(v20);
      id v24 = (id)objc_claimAutoreleasedReturnValue(v23);
      sub_100366664(uu, src);
      sub_1006878DC();
    }

    goto LABEL_38;
  }

  uint64_t v37 = sub_100241F94(uu);
  __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  xpc_object_t v34 = sub_1004DEC38(v38, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));

LABEL_39:
  xpc_object_t reply = xpc_dictionary_create_reply(v2);
  __int16 v36 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v34);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v36);
    xpc_release(v36);
  }

  if (v34) {
    xpc_release(v34);
  }
}

void sub_1004D076C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_1004D081C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000LL;
  xpc_object_t reply = 0LL;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (v13[3])
  {
    uint64_t v7 = sub_100404FE8();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _WORD v8[2] = sub_1004E8A34;
    v8[3] = &unk_10089D0F8;
    uint64_t v11 = a1;
    id v9 = v6;
    uint64_t v10 = &v12;
    sub_100405384(v7, v8);
  }

  _Block_object_dispose(&v12, 8);
}

void sub_1004D0908( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004D093C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v33 = 0LL;
  xpc_object_t v34 = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v32 = 0LL;
  xpc_object_t v23 = xpc_dictionary_get_value(value, "kCBMsgArgOptions");
  id v4 = sub_10025E384(v23, "kCBConnectionEventMatchingOptionPeripheralUUIDs");
  id v24 = (void *)objc_claimAutoreleasedReturnValue(v4);
  int v22 = sub_10025D848(v23, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBConnectionEventMatchingOptionServiceUUIDs");
  uint64_t v11 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "handleRegisterForConnectionEventsWithOptionsMsg peripherals:%@",  (uint8_t *)&buf,  0xCu);
  }

  __int128 buf = 0uLL;
  uint64_t v38 = 0LL;
  int v18 = v22;
  if (*(int *)(a1 + 80) > 0
    || (uint64_t v19 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v19 + 384LL))(v19)))
  {
    int v18 = sub_10025D848(v23, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBConnectionEventMatchingOptionAllPeripherals");
    unint64_t v20 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int16 v36 = 134217984;
      *(void *)&void v36[4] = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "handleRegisterForConnectionEventsWithOptionsMsg allPeripherals:%lld",  v36,  0xCu);
    }
  }

  if (!v18 && (*((void *)&buf + 1) != (void)buf || v32 || v24 && [v24 count]))
  {
    uint64_t v21 = sub_100404FE8();
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3321888768LL;
    _OWORD v25[2] = sub_1004E8C90;
    void v25[3] = &unk_10089D4B8;
    uint64_t v27 = a1;
    id v26 = v24;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    sub_100050EE8( (char *)&__p,  (__int128 *)buf,  *((__int128 **)&buf + 1),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&buf + 1) - buf) >> 2));
    uint64_t v31 = v32;
    sub_1004054B4(v21, v25);
    if (__p)
    {
      uint64_t v29 = __p;
      operator delete(__p);
    }
  }

  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }

  if (v33)
  {
    xpc_object_t v34 = v33;
    operator delete(v33);
  }

void sub_1004D0E38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, void *__p, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }

  uint64_t v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }

  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_1004D0EB0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v1 = sub_100404FE8();
    sub_1004054B4(v1, &stru_10089D508);
  }

void sub_1004D0EE0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v1 = sub_100404FE8();
    sub_1004054B4(v1, &stru_10089D4E8);
  }

void sub_1004D0F10(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v2 = sub_100404FE8();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    void v3[2] = sub_1004E8E84;
    uint64_t v3[3] = &unk_10087EB20;
    void v3[4] = a1;
    sub_1004054B4(v2, v3);
  }

void sub_1004D0F7C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v2 = sub_100404FE8();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    void v3[2] = sub_1004E8EE4;
    uint64_t v3[3] = &unk_10087EB20;
    void v3[4] = a1;
    sub_1004054B4(v2, v3);
  }

void sub_1004D0FE8(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v3 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1004E760C;
  void v7[3] = &unk_10087EA48;
  id v6 = v4;
  id v8 = v6;
  sub_1004054B4(v5, v7);
}

void sub_1004D108C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1004D10AC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E150(value, "kCBMsgArgLeAFHMap");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if ([v5 length] == (id)5)
  {
    id v6 = (os_log_s *)qword_1008F75F0;
    if (*(int *)(a1 + 80) <= 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(*(void *)(a1 + 128), (uint64_t)__p);
        sub_100687A14();
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(*(void *)(a1 + 128), (uint64_t)__p);
        uint64_t v7 = v22 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int128 buf = 136315394;
        int v18 = v7;
        __int16 v19 = 2112;
        unint64_t v20 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "session %s is trying to set LE AFH Map to %@",  buf,  0x16u);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }

      char v16 = 0;
      int v15 = 0;
      [v5 getBytes:&v15 length:5];
      char v14 = 0;
      sub_100242CA4(&v14);
      if (sub_1001214B4(180, (uint64_t)sub_1004E76D8, v8, v9, v10, v11, v12, v13, (uint64_t)&v15)
        && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(*(void *)(a1 + 128), (uint64_t)__p);
        sub_100687A60();
      }

      sub_100242CD8(&v14);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    [v5 length];
    sub_100494958(*(void *)(a1 + 128), (uint64_t)buf);
    sub_100687AC4();
  }
}

void sub_1004D12D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D1318(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v21 = 0LL;
  uint64_t v22 = 1LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_10025D848(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_10043F3F4(a1, 101LL, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687B84();
    }
  }

  int v18 = sub_10025D848(v21, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v18)
  {
    sub_10043F3F4(a1, 101LL, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687B24();
    }
  }

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v19 = sub_100404FE8();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1004E77A8;
    v20[3] = &unk_10087F8E0;
    v20[4] = a1;
    v20[5] = v22;
    sub_1004054B4(v19, v20);
  }

void sub_1004D1488(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v27 = 1LL;
  uint64_t v25 = 0LL;
  uint64_t v26 = 2LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_10025D848(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_10043F3F4(a1, 102LL, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687C44();
    }
  }

  int v18 = sub_10025D848(v25, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v18)
  {
    sub_10043F3F4(a1, 102LL, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687BE4();
    }
  }

  id v19 = sub_10025E1C8(v25, "kCBScanOptionPeers");
  unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  unint64_t v21 = sub_1005C02B0(v20);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    unint64_t v22 = v21;
    uint64_t v23 = sub_100404FE8();
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    void v24[2] = sub_1004E7800;
    v24[3] = &unk_100888050;
    v24[4] = v26;
    v24[5] = v22;
    v24[6] = v27;
    sub_1004054B4(v23, v24);
  }
}

void sub_1004D1640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D1650(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v29 = 1LL;
  uint64_t v27 = 0LL;
  uint64_t v28 = 2LL;
  uint64_t v26 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_10025D848(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_10043F3F4(a1, 103LL, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687D04();
    }
  }

  id v12 = sub_10025E384(v27, "kCBScanOptionRemoveMultipleDupFilterEntryUUIDs");
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  int v20 = sub_10025D848(v27, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v20)
  {
    sub_10043F3F4(a1, 103LL, xdict, v20);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687CA4();
    }
  }

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v21 = sub_100404FE8();
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    _DWORD v22[2] = sub_1004E7858;
    v22[3] = &unk_10087FBF0;
    id v23 = v13;
    uint64_t v24 = v29;
    uint64_t v25 = v26;
    sub_1004054B4(v21, v22);
  }
}

void sub_1004D1828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1004D1848(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v21 = 0LL;
  unint64_t v22 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_10025D848(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_10043F3F4(a1, 104LL, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687DC4();
    }
  }

  int v18 = sub_10025D848( v22,  0,  v12,  v13,  v14,  v15,  v16,  v17,  (uint64_t)"kCBScanOptionRemoveMultipleDupFilterEntryPacketType");
  if (v18)
  {
    sub_10043F3F4(a1, 104LL, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687D64();
    }
  }

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v19 = sub_100404FE8();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1004E79D8;
    v20[3] = &unk_10087F8E0;
    v20[4] = a1;
    v20[5] = v21;
    sub_1004054B4(v19, v20);
  }

void sub_1004D19B4(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    __int16 v8 = 0;
    uint64_t v4 = sub_100404FE8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_1004E7A30;
    void v7[3] = &unk_10087F8E0;
    void v7[4] = (char *)&v8 + 1;
    void v7[5] = &v8;
    sub_1004054B4(v4, v7);
    xpc_object_t reply = xpc_dictionary_create_reply(a2);
    if (reply)
    {
      uint64_t v6 = reply;
      xpc_dictionary_set_uint64(reply, "kCBScanOptionTotalAdvMatchingRules", HIBYTE(v8));
      xpc_dictionary_set_uint64(v6, "kCBScanOptionRemainingAdvMatchingRules", v8);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v6);
      xpc_release(v6);
    }
  }

void sub_1004D1A78(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = sub_10025E150(value, "kCBMsgArgObjectDiscoveryData");
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8) {
    BOOL v9 = v6 == 0LL;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    sub_10043F3F4(a1, 85LL, xdict, 1);
  }

  else
  {
    uint64_t v10 = sub_100404FE8();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1004E8DAC;
    uint64_t v11[3] = &unk_100880D48;
    uint64_t v14 = a1;
    id v12 = v6;
    id v13 = v8;
    sub_1004054B4(v10, v11);
  }
}

void sub_1004D1B78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1004D1BAC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v69 = 2LL;
  uint64_t v70 = 1LL;
  uint64_t v67 = 1LL;
  uint64_t v68 = 1LL;
  uint64_t v65 = 0LL;
  uint64_t v66 = 1LL;
  uint64_t v64 = 0LL;
  id v63 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_10025D848(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_10043F3F4(a1, 106LL, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006880C4();
    }
  }

  int v18 = sub_10025D848(v63, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanEnableOptionAppleFilterEnable");
  if (v18)
  {
    sub_10043F3F4(a1, 106LL, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100688064();
    }
  }

  int v25 = sub_10025D848(v63, 0, v19, v20, v21, v22, v23, v24, (uint64_t)"kCBScanEnableOptionAppleFilterType");
  if (v25)
  {
    sub_10043F3F4(a1, 106LL, xdict, v25);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100688004();
    }
  }

  int v32 = sub_10025D848(v63, 0, v26, v27, v28, v29, v30, v31, (uint64_t)"kCBScanOptionAppleFilterForceDups");
  if (v32)
  {
    sub_10043F3F4(a1, 106LL, xdict, v32);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687FA4();
    }
  }

  int v39 = sub_10025D848(v63, 0, v33, v34, v35, v36, v37, v38, (uint64_t)"kCBScanOptionAppleFilterBypassFilterDuplicate");
  if (v39)
  {
    sub_10043F3F4(a1, 106LL, xdict, v39);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687F44();
    }
  }

  int v46 = sub_10025D848(v63, 0, v40, v41, v42, v43, v44, v45, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v46)
  {
    sub_10043F3F4(a1, 106LL, xdict, v46);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687EE4();
    }
  }

  int v53 = sub_10025D848(v63, 0, v47, v48, v49, v50, v51, v52, (uint64_t)"kCBScanEnableOptionAppleFilterScanDuration");
  if (v53)
  {
    sub_10043F3F4(a1, 106LL, xdict, v53);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687E84();
    }
  }

  int v60 = sub_10025D848(v63, 0, v54, v55, v56, v57, v58, v59, (uint64_t)"kCBScanEnableOptionAppleFilterScanPeriod");
  if (v60)
  {
    sub_10043F3F4(a1, 106LL, xdict, v60);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100687E24();
    }
  }

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v61 = sub_100404FE8();
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472LL;
    v62[2] = sub_1004E7A80;
    v62[3] = &unk_10089D260;
    v62[4] = v70;
    v62[5] = v69;
    v62[6] = v68;
    v62[7] = v67;
    v62[8] = v66;
    v62[9] = v65;
    _BYTE v62[10] = v64;
    sub_1004054B4(v61, v62);
  }

void sub_1004D1F90(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v157 = 0LL;
  uint64_t v158 = 1LL;
  uint64_t v155 = 0LL;
  uint64_t v156 = 1LL;
  uint64_t v153 = 0LL;
  uint64_t v154 = 0LL;
  uint64_t v151 = 300LL;
  uint64_t v152 = 300LL;
  uint64_t v150 = 300LL;
  uint64_t v148 = 30LL;
  uint64_t v149 = 30LL;
  uint64_t v146 = 1LL;
  uint64_t v147 = 30LL;
  uint64_t v144 = 30LL;
  uint64_t v145 = 1LL;
  uint64_t v142 = 30LL;
  uint64_t v143 = 30LL;
  uint64_t v141 = 0LL;
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v140 = 0LL;
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int v11 = sub_10025D848(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
    if (v11)
    {
      sub_10043F3F4(a1, 107LL, xdict, v11);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006887E4();
      }
    }

    int v18 = sub_10025D848(v140, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBSetScanParameterOwnAddress");
    if (v18)
    {
      sub_10043F3F4(a1, 107LL, xdict, v18);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688784();
      }
    }

    int v25 = sub_10025D848(v140, 0, v19, v20, v21, v22, v23, v24, (uint64_t)"kCBSetScanParameterScanningFilterPolicy");
    if (v25)
    {
      sub_10043F3F4(a1, 107LL, xdict, v25);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688724();
      }
    }

    int v32 = sub_10025D848(v140, 0, v26, v27, v28, v29, v30, v31, (uint64_t)"kCBSetScanParameterScanPHY");
    if (v32)
    {
      sub_10043F3F4(a1, 107LL, xdict, v32);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006886C4();
      }
    }

    int v39 = sub_10025D848(v140, 0, v33, v34, v35, v36, v37, v38, (uint64_t)"kCBSetScanParameterScanTypeLE1M");
    if (v39)
    {
      sub_10043F3F4(a1, 107LL, xdict, v39);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688664();
      }
    }

    int v46 = sub_10025D848(v140, 0, v40, v41, v42, v43, v44, v45, (uint64_t)"kCBSetScanParameterScanTypeLE2M");
    if (v46)
    {
      sub_10043F3F4(a1, 107LL, xdict, v46);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688604();
      }
    }

    int v53 = sub_10025D848(v140, 0, v47, v48, v49, v50, v51, v52, (uint64_t)"kCBSetScanParameterScanTypeLECoded");
    if (v53)
    {
      sub_10043F3F4(a1, 107LL, xdict, v53);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006885A4();
      }
    }

    int v60 = sub_10025D848(v140, 0, v54, v55, v56, v57, v58, v59, (uint64_t)"kCBSetScanParameterScanIntervalLE1M");
    if (v60)
    {
      sub_10043F3F4(a1, 107LL, xdict, v60);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688544();
      }
    }

    int v67 = sub_10025D848(v140, 0, v61, v62, v63, v64, v65, v66, (uint64_t)"kCBSetScanParameterScanIntervalLE2M");
    if (v67)
    {
      sub_10043F3F4(a1, 107LL, xdict, v67);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006884E4();
      }
    }

    int v74 = sub_10025D848(v140, 0, v68, v69, v70, v71, v72, v73, (uint64_t)"kCBSetScanParameterScanIntervalLECoded");
    if (v74)
    {
      sub_10043F3F4(a1, 107LL, xdict, v74);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688484();
      }
    }

    int v81 = sub_10025D848(v140, 0, v75, v76, v77, v78, v79, v80, (uint64_t)"kCBSetScanParameterScanWindowLE1M");
    if (v81)
    {
      sub_10043F3F4(a1, 107LL, xdict, v81);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688424();
      }
    }

    int v88 = sub_10025D848(v140, 0, v82, v83, v84, v85, v86, v87, (uint64_t)"kCBSetScanParameterScanWindowLE2M");
    if (v88)
    {
      sub_10043F3F4(a1, 107LL, xdict, v88);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006883C4();
      }
    }

    int v95 = sub_10025D848(v140, 0, v89, v90, v91, v92, v93, v94, (uint64_t)"kCBSetScanParameterScanWindowLECoded");
    if (v95)
    {
      sub_10043F3F4(a1, 107LL, xdict, v95);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688364();
      }
    }

    int v102 = sub_10025D848(v140, 0, v96, v97, v98, v99, v100, v101, (uint64_t)"kCBSetScanParameterScanIsLegacy");
    if (v102)
    {
      sub_10043F3F4(a1, 107LL, xdict, v102);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688304();
      }
    }

    int v109 = sub_10025D848(v140, 0, v103, v104, v105, v106, v107, v108, (uint64_t)"kCBSetScanParameterScanMaxWindowLE1M");
    if (v109)
    {
      sub_10043F3F4(a1, 107LL, xdict, v109);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006882A4();
      }
    }

    int v116 = sub_10025D848(v140, 0, v110, v111, v112, v113, v114, v115, (uint64_t)"kCBSetScanParameterScanMaxWindowLE2M");
    if (v116)
    {
      sub_10043F3F4(a1, 107LL, xdict, v116);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688244();
      }
    }

    int v123 = sub_10025D848( v140,  0,  v117,  v118,  v119,  v120,  v121,  v122,  (uint64_t)"kCBSetScanParameterScanMaxWindowLECoded");
    if (v123)
    {
      sub_10043F3F4(a1, 107LL, xdict, v123);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006881E4();
      }
    }

    int v130 = sub_10025D848(v140, 0, v124, v125, v126, v127, v128, v129, (uint64_t)"kCBSetScanParameterScanTargetCore");
    if (v130)
    {
      sub_10043F3F4(a1, 107LL, xdict, v130);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688184();
      }
    }

    int v137 = sub_10025D848( v140,  0,  v131,  v132,  v133,  v134,  v135,  v136,  (uint64_t)"kCBSetScanParameterPriorityConfiguration");
    if (v137)
    {
      sub_10043F3F4(a1, 107LL, xdict, v137);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688124();
      }
    }

    uint64_t v138 = sub_100404FE8();
    v139[0] = _NSConcreteStackBlock;
    v139[1] = 3221225472LL;
    v139[2] = sub_1004E867C;
    v139[3] = &unk_10089D430;
    v139[4] = v155;
    v139[5] = v154;
    v139[6] = v153;
    v139[7] = v152;
    v139[8] = v151;
    v139[9] = v150;
    v139[10] = v149;
    v139[11] = v148;
    v139[12] = v147;
    v139[13] = v144;
    v139[14] = v143;
    v139[15] = v142;
    v139[16] = v158;
    v139[17] = v157;
    v139[18] = v156;
    v139[19] = v146;
    v139[20] = v145;
    v139[21] = v141;
    sub_1004054B4(v138, v139);
  }

void sub_1004D27E4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v106 = 0LL;
  uint64_t v107 = 0LL;
  uint64_t v104 = 0LL;
  uint64_t v105 = &off_10087FAA8;
  uint64_t v102 = 0LL;
  uint64_t v103 = &off_10087FAA8;
  uint64_t v100 = 1LL;
  uint64_t v101 = 0LL;
  uint64_t v98 = 1LL;
  uint64_t v99 = 1LL;
  uint64_t v97 = 2LL;
  uint64_t v95 = 0LL;
  uint64_t v96 = 0LL;
  xpc_object_t xdicta = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v17 = sub_10025D848(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v17)
  {
    sub_10043F3F4(a1, 108LL, xdict, v17);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100688BE8();
    }
  }

  int v18 = sub_10025D848(xdicta, 0, v11, v12, v13, v14, v15, v16, (uint64_t)"kCBScanOptionAppleFilterPuckType");
  if (v18)
  {
    sub_10043F3F4(a1, 108LL, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100688964();
    }
  }

  xpc_object_t v19 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayload");
  if ((v19 && sub_10025DBF4(v19, (uint64_t)&v105) || !sub_10056AAD8((uint64_t)&v105))
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688BBC();
  }

  xpc_object_t v20 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayloadMask");
  if ((v20 && sub_10025DBF4(v20, (uint64_t)&v103) || !sub_10056AAD8((uint64_t)&v103))
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688B90();
  }

  unint64_t v21 = sub_10056AAD8((uint64_t)&v105);
  uint64_t v22 = sub_1002E6E9C();
  if (v21 > (*(unsigned int (**)(uint64_t))(*(void *)v22 + 3504LL))(v22)
    || (unint64_t v23 = sub_10056AAD8((uint64_t)&v103),
        uint64_t v24 = sub_1002E6E9C(),
        v23 > (*(unsigned int (**)(uint64_t))(*(void *)v24 + 3504LL))(v24)))
  {
    uint64_t v31 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = sub_10056AAD8((uint64_t)&v105);
      uint64_t v33 = sub_10056AAD8((uint64_t)&v103);
      sub_100688B44((uint64_t)v108, v32, v33, v31);
    }
  }

  if (sub_10025D848(xdicta, 0, v25, v26, v27, v28, v29, v30, (uint64_t)"kCBScanOptionAppleFilterRssi")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688AE4();
  }

  if (sub_10025D848( xdicta,  0,  v34,  v35,  v36,  v37,  v38,  v39,  (uint64_t)"kCBScanOptionAppleFilterForceDups")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688A84();
  }

  if (sub_10025D848( xdicta,  0,  v40,  v41,  v42,  v43,  v44,  v45,  (uint64_t)"kCBScanOptionAppleFilterAddressType")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688A24();
  }

  if (sub_10025D848( xdicta,  0,  v46,  v47,  v48,  v49,  v50,  v51,  (uint64_t)"kCBScanOptionAppleFilterBypassFilterDuplicate")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_1006889C4();
  }

  if (sub_10025D848( xdicta,  0,  v52,  v53,  v54,  v55,  v56,  v57,  (uint64_t)"kCBScanOptionAppleFilterTargetCore")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688964();
  }

  if (sub_10025D848( xdicta,  0,  v58,  v59,  v60,  v61,  v62,  v63,  (uint64_t)"kCBScanOptionAppleFilterRSSIThresholdOrder")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688904();
  }

  if (sub_10025D848(xdicta, 0, v64, v65, v66, v67, v68, v69, (uint64_t)"kCBScanOption127dBmReport")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_1006888A4();
  }

  if (sub_10025D848(xdicta, 0, v70, v71, v72, v73, v74, v75, (uint64_t)"kCBScanOption27dBmReport")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688844();
  }

  id v76 = sub_10025E1C8(xdicta, "kCBScanOptionAppleFilterAddress");
  uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
  unint64_t v78 = sub_1005C02B0(v77);

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v79 = sub_100404FE8();
    v80[0] = _NSConcreteStackBlock;
    v80[1] = 3321888768LL;
    v80[2] = sub_1004E8728;
    v80[3] = &unk_10089D450;
    v80[4] = a1;
    int v81 = &off_10087FAA8;
    uint64_t v82 = v106;
    if (v106) {
      sub_1002CD1E0((uint64_t)v106);
    }
    uint64_t v83 = &off_10087FAA8;
    uint64_t v84 = v104;
    if (v104) {
      sub_1002CD1E0((uint64_t)v104);
    }
    uint64_t v85 = v102;
    uint64_t v86 = v107;
    uint64_t v87 = v97;
    unint64_t v88 = v78;
    uint64_t v89 = v100;
    uint64_t v90 = v99;
    uint64_t v91 = v98;
    uint64_t v92 = v96;
    uint64_t v93 = v95;
    sub_1004054B4(v79, v80);
    uint64_t v83 = &off_10087FAA8;
    if (v84) {
      sub_1002CD254(v84);
    }
    int v81 = &off_10087FAA8;
    if (v82) {
      sub_1002CD254(v82);
    }
  }

  uint64_t v103 = &off_10087FAA8;
  if (v104) {
    sub_1002CD254(v104);
  }
  uint64_t v105 = &off_10087FAA8;
  if (v106) {
    sub_1002CD254(v106);
  }
}

void sub_1004D2DB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int *a19, uint64_t a20, uint64_t a21)
{
  if (a19) {
    sub_1002CD254(a19);
  }
  *(void *)(v22 - 136) = v21;
  uint64_t v24 = *(unsigned int **)(v22 - 128);
  if (v24) {
    sub_1002CD254(v24);
  }
  *(void *)(v22 - 120) = v21;
  uint64_t v25 = *(unsigned int **)(v22 - 112);
  if (v25) {
    sub_1002CD254(v25);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004D2E30(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v80 = 0LL;
  uint64_t v81 = 0LL;
  unint64_t v78 = 0LL;
  uint64_t v79 = &off_10087FAA8;
  uint64_t v76 = 0LL;
  uint64_t v77 = &off_10087FAA8;
  uint64_t v74 = 1LL;
  uint64_t v75 = 0LL;
  uint64_t v72 = 1LL;
  uint64_t v73 = 1LL;
  uint64_t v71 = 2LL;
  xpc_object_t xdicta = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_10025D848(value, 0, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgOptions")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688EE0();
  }

  if (sub_10025D848(xdicta, 0, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBScanOptionAppleFilterPuckType")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688CA8();
  }

  xpc_object_t v16 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayload");
  if ((v16 && sub_10025DBF4(v16, (uint64_t)&v79) || !sub_10056AAD8((uint64_t)&v79))
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688EB4();
  }

  xpc_object_t v17 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayloadMask");
  if ((v17 && sub_10025DBF4(v17, (uint64_t)&v77) || !sub_10056AAD8((uint64_t)&v77))
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688E88();
  }

  if (sub_10025D848(xdicta, 0, v18, v19, v20, v21, v22, v23, (uint64_t)"kCBScanOptionAppleFilterRssi")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688E28();
  }

  if (sub_10025D848( xdicta,  0,  v24,  v25,  v26,  v27,  v28,  v29,  (uint64_t)"kCBScanOptionAppleFilterForceDups")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688DC8();
  }

  if (sub_10025D848( xdicta,  0,  v30,  v31,  v32,  v33,  v34,  v35,  (uint64_t)"kCBScanOptionAppleFilterAddressType")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688D68();
  }

  if (sub_10025D848( xdicta,  0,  v36,  v37,  v38,  v39,  v40,  v41,  (uint64_t)"kCBScanOptionAppleFilterBypassFilterDuplicate")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688D08();
  }

  if (sub_10025D848( xdicta,  0,  v42,  v43,  v44,  v45,  v46,  v47,  (uint64_t)"kCBScanOptionAppleFilterTargetCore")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688CA8();
  }

  if (sub_10025D848( xdicta,  0,  v48,  v49,  v50,  v51,  v52,  v53,  (uint64_t)"kCBScanOptionAppleFilterRSSIThresholdOrder")
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688C48();
  }

  id v54 = sub_10025E1C8(xdicta, "kCBScanOptionAppleFilterAddress");
  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
  unint64_t v56 = sub_1005C02B0(v55);

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    uint64_t v57 = sub_100404FE8();
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3321888768LL;
    void v58[2] = sub_1004E88D8;
    v58[3] = &unk_10089D480;
    v58[4] = a1;
    uint64_t v59 = &off_10087FAA8;
    uint64_t v60 = v80;
    if (v80) {
      sub_1002CD1E0((uint64_t)v80);
    }
    uint64_t v61 = &off_10087FAA8;
    uint64_t v62 = v78;
    if (v78) {
      sub_1002CD1E0((uint64_t)v78);
    }
    uint64_t v63 = v76;
    uint64_t v64 = v81;
    uint64_t v65 = v71;
    unint64_t v66 = v56;
    uint64_t v67 = v74;
    uint64_t v68 = v73;
    uint64_t v69 = v72;
    sub_1004054B4(v57, v58);
    uint64_t v61 = &off_10087FAA8;
    if (v62) {
      sub_1002CD254(v62);
    }
    uint64_t v59 = &off_10087FAA8;
    if (v60) {
      sub_1002CD254(v60);
    }
  }

  uint64_t v77 = &off_10087FAA8;
  if (v78) {
    sub_1002CD254(v78);
  }
  uint64_t v79 = &off_10087FAA8;
  if (v80) {
    sub_1002CD254(v80);
  }
}

void sub_1004D32B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int *a19, uint64_t a20, uint64_t a21)
{
  if (a19) {
    sub_1002CD254(a19);
  }
  *(void *)(v22 - 104) = v21;
  uint64_t v24 = *(unsigned int **)(v22 - 96);
  if (v24) {
    sub_1002CD254(v24);
  }
  *(void *)(v22 - 8_Block_object_dispose((const void *)(v1 - 48), 8) = v21;
  uint64_t v25 = *(unsigned int **)(v22 - 80);
  if (v25) {
    sub_1002CD254(v25);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004D3320(uint64_t a1, void *a2)
{
  if (*(int *)(a1 + 80) > 1)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_object_t array = xpc_dictionary_get_array(value, "kCBMsgArgRules");
    uint64_t v6 = array;
    if (!array
      || xpc_get_type(array) != (xpc_type_t)&_xpc_type_array
      || (applier[0] = _NSConcreteStackBlock,
          applier[1] = 3221225472LL,
          applier[2] = sub_1004ED8B8,
          applier[3] = &unk_10089D718,
          id v12 = v3,
          BOOL v7 = xpc_array_apply(v6, applier),
          v12,
          v7))
    {
      uint64_t v8 = sub_100404FE8();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      void v9[2] = sub_1004EDA74;
      void v9[3] = &unk_10087EA48;
      id v10 = v3;
      sub_1004054B4(v8, v9);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100688F40();
  }

void sub_1004D3468( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1004D3498(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v33 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    int v19 = sub_10025D848(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    if (v19)
    {
      sub_10043F3F4(a1, 113LL, xdict, v19);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068902C();
      }
    }

    int v26 = sub_10025D848(v33, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBDataLengthMaxTxOctets");
    if (v26)
    {
      sub_10043F3F4(a1, 113LL, xdict, v26);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688FCC();
      }
    }

    int v27 = sub_10025D848(v33, 0, v20, v21, v22, v23, v24, v25, (uint64_t)"kCBDataLengthMaxTxTime");
    if (v27)
    {
      sub_10043F3F4(a1, 113LL, xdict, v27);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100688F6C();
      }
    }

    uint64_t v28 = sub_100404FE8();
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1004E7ACC;
    v29[3] = &unk_10087FBF0;
    id v30 = v12;
    uint64_t v31 = v35;
    uint64_t v32 = v34;
    sub_1004054B4(v28, v29);
  }
}

void sub_1004D36AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1004D36CC(uint64_t a1)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  int v8 = 0;
  if (*(int *)(a1 + 80) > 1)
  {
    uint64_t v2 = sub_1002E6E9C();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 2760LL))(v2) & 1) != 0)
    {
      uint64_t v3 = sub_100404FE8();
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472LL;
      void v4[2] = sub_1004E7DC8;
      v4[3] = &unk_100880D70;
      v4[4] = &v5;
      void v4[5] = a1;
      sub_1004054B4(v3, v4);
      if (*((_DWORD *)v6 + 6) && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006890B8();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100689118();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_10068908C();
  }

  _Block_object_dispose(&v5, 8);
}

void sub_1004D37FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1004D3814(uint64_t a1, xpc_object_t xdict)
{
  v16[0] = 0LL;
  v16[1] = v16;
  void v16[2] = 0x2020000000LL;
  int v17 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 2760LL))(v7) & 1) != 0)
  {
    if (v6)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      if (sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
      {
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_10089D870);
        }
        if ((sub_1000A86F0() & 1) != 0)
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            if (*(int *)(a1 + 80) > 1)
            {
              uint64_t v9 = sub_100404FE8();
              v12[0] = _NSConcreteStackBlock;
              v12[1] = 3221225472LL;
              void v12[2] = sub_1004E7E2C;
              v12[3] = &unk_10088FED8;
              uint64_t v14 = v16;
              uint64_t v15 = a1;
              id v13 = v6;
              sub_1004054B4(v9, v12);
            }

            else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
            {
              sub_100689144();
            }

            goto LABEL_25;
          }

          int v8 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v10 = *(void *)(a1 + 96);
            uint64_t v11 = *(void *)(a1 + 48);
            *(_DWORD *)__int128 buf = 138412802;
            uint64_t v19 = v10;
            __int16 v20 = 2112;
            uint64_t v21 = v11;
            __int16 v22 = 2112;
            uint64_t v23 = v6;
            _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          sub_1006877FC();
        }

        sub_10043F3F4(a1, 115LL, xdict, 17);
        goto LABEL_25;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006876CC();
    }
    sub_10043F3F4(a1, 115LL, xdict, 8);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D3B3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004D3B7C(uint64_t a1, xpc_object_t xdict)
{
  v16[0] = 0LL;
  v16[1] = v16;
  void v16[2] = 0x2020000000LL;
  int v17 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 2760LL))(v7) & 1) != 0)
  {
    if (v6)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      if (sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
      {
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_10089D870);
        }
        if ((sub_1000A86F0() & 1) != 0)
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            if (*(int *)(a1 + 80) > 1)
            {
              uint64_t v9 = sub_100404FE8();
              v12[0] = _NSConcreteStackBlock;
              v12[1] = 3221225472LL;
              void v12[2] = sub_1004E7F1C;
              v12[3] = &unk_10088FED8;
              uint64_t v14 = v16;
              uint64_t v15 = a1;
              id v13 = v6;
              sub_1004054B4(v9, v12);
            }

            else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
            {
              sub_100689144();
            }

            goto LABEL_25;
          }

          int v8 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v10 = *(void *)(a1 + 96);
            uint64_t v11 = *(void *)(a1 + 48);
            *(_DWORD *)__int128 buf = 138412802;
            uint64_t v19 = v10;
            __int16 v20 = 2112;
            uint64_t v21 = v11;
            __int16 v22 = 2112;
            uint64_t v23 = v6;
            _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          sub_1006877FC();
        }

        sub_10043F3F4(a1, 117LL, xdict, 17);
        goto LABEL_25;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006876CC();
    }
    sub_10043F3F4(a1, 117LL, xdict, 8);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D3EA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004D3EE4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v27 = 0LL;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2020000000LL;
  int v30 = 3;
  int v26 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  int v13 = sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v28 + 6) = v13;
  uint64_t v14 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v14 + 2760LL))(v14) & 1) != 0)
  {
    if (v6)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      if (sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
      {
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_10089D870);
        }
        if ((sub_1000A86F0() & 1) != 0)
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            if (*(int *)(a1 + 80) > 1)
            {
              *(void *)&uint8_t buf[8] = 0x10000LL;
              *(void *)&uint8_t buf[16] = 0x100010001LL;
              *(_WORD *)__int128 buf = 0;
              *(_OWORD *)&_BYTE buf[24] = xmmword_1006C3AA0;
              *(_WORD *)&buf[40] = 0;
              *(void *)&uint8_t buf[2] = 0x200000000LL;
              int v16 = sub_10025D848( v26,  0,  (uint64_t)"kCBCSWriteRemoteOptionalNadmSoundingCapability",  (uint64_t)"kCBCSWriteRemoteOptionalCsSyncPhysSupported",  (uint64_t)"kCBCSWriteRemoteOptionalSubfeaturesSupported",  (uint64_t)"kCBCSWriteRemoteOptionalTIP1TimesSupported",  (uint64_t)"kCBCSWriteRemoteOptionalTIP2TimesSupported",  (uint64_t)"kCBCSWriteRemoteOptionalTFCSTimesSupported",  (uint64_t)"kCBCSWriteRemoteNumConfigSupported");
              *((_DWORD *)v28 + 6) = v16;
              uint64_t v17 = sub_100404FE8();
              v20[0] = _NSConcreteStackBlock;
              v20[1] = 3221225472LL;
              v20[2] = sub_1004E7E94;
              v20[3] = &unk_10089D288;
              uint64_t v23 = a1;
              __int16 v22 = &v27;
              id v21 = v6;
              __int128 v24 = *(_OWORD *)buf;
              v25[0] = *(_OWORD *)&buf[16];
              *(_OWORD *)((char *)v25 + 10) = *(_OWORD *)&buf[26];
              sub_1004054B4(v17, v20);
            }

            else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
            {
              sub_100689144();
            }

            goto LABEL_25;
          }

          uint64_t v15 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v18 = *(void *)(a1 + 96);
            uint64_t v19 = *(void *)(a1 + 48);
            *(_DWORD *)__int128 buf = 138412802;
            *(void *)&uint8_t buf[4] = v18;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&uint8_t buf[14] = v19;
            *(_WORD *)&buf[22] = 2112;
            *(void *)&_BYTE buf[24] = v6;
            _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          sub_1006877FC();
        }

        sub_10043F3F4(a1, 117LL, xdict, 17);
        goto LABEL_25;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006876CC();
    }
    sub_10043F3F4(a1, 117LL, xdict, 8);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D4438(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1004D447C(uint64_t a1, xpc_object_t xdict)
{
  v16[0] = 0LL;
  v16[1] = v16;
  void v16[2] = 0x2020000000LL;
  int v17 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 2760LL))(v7) & 1) != 0)
  {
    if (v6)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      if (sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
      {
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_10089D870);
        }
        if ((sub_1000A86F0() & 1) != 0)
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            if (*(int *)(a1 + 80) > 1)
            {
              uint64_t v9 = sub_100404FE8();
              v12[0] = _NSConcreteStackBlock;
              v12[1] = 3221225472LL;
              void v12[2] = sub_1004E7F84;
              v12[3] = &unk_10088FED8;
              uint64_t v14 = v16;
              uint64_t v15 = a1;
              id v13 = v6;
              sub_1004054B4(v9, v12);
            }

            else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
            {
              sub_100689144();
            }

            goto LABEL_25;
          }

          uint64_t v8 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v10 = *(void *)(a1 + 96);
            uint64_t v11 = *(void *)(a1 + 48);
            *(_DWORD *)__int128 buf = 138412802;
            uint64_t v19 = v10;
            __int16 v20 = 2112;
            uint64_t v21 = v11;
            __int16 v22 = 2112;
            uint64_t v23 = v6;
            _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          sub_1006877FC();
        }

        sub_10043F3F4(a1, 118LL, xdict, 17);
        goto LABEL_25;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006876CC();
    }
    sub_10043F3F4(a1, 118LL, xdict, 8);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D47A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004D47E4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v41 = 0LL;
  uint64_t v42 = &v41;
  uint64_t v43 = 0x2020000000LL;
  int v44 = 3;
  uint64_t v40 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  int v13 = sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v42 + 6) = v13;
  uint64_t v14 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v14 + 2760LL))(v14) & 1) != 0)
  {
    if (*((_DWORD *)v42 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068785C();
      }
      int v15 = 3;
LABEL_24:
      sub_10043F3F4(a1, 119LL, xdict, v15);
      goto LABEL_25;
    }

    if (!v6) {
      goto LABEL_49;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if (!sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
    {
LABEL_49:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006876CC();
      }
      int v15 = 8;
      goto LABEL_24;
    }

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    if ((sub_1000A86F0() & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006877FC();
      }
      goto LABEL_30;
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      int v17 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = *(void *)(a1 + 96);
        uint64_t v29 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t v46 = 138412802;
        *(void *)&v46[4] = v28;
        *(_WORD *)&v46[12] = 2112;
        *(void *)&v46[14] = v29;
        *(_WORD *)&v46[22] = 2112;
        *(void *)&v46[24] = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  v46,  0x20u);
      }

      goto LABEL_30;
    }

    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689170();
      }
LABEL_30:
      sub_10043F3F4(a1, 119LL, xdict, 17);
      goto LABEL_25;
    }

    memset(v46, 0, 18);
    *(_OWORD *)&v46[26] = 0u;
    *(void *)&void v46[2] = 0x1000100010001LL;
    *(_WORD *)&v46[10] = 1;
    *(_WORD *)&v46[14] = 1;
    *(_DWORD *)&v46[18] = 0x10000;
    *(void *)&v46[22] = 0LL;
    *(_WORD *)&v46[30] = 0;
    *(void *)&v46[42] = 0x2000000000001LL;
    *(_WORD *)&v46[50] = 0;
    int v18 = sub_10025D848( v40,  0,  (uint64_t)"kCBCSCreateConfigChannelMapRepetition",  (uint64_t)"kCBCSCreateConfigChannelSelectiontype",  (uint64_t)"kCBCSCreateConfigCh3cShape",  (uint64_t)"kCBCSCreateConfigCh3cJump",  (uint64_t)"kCBCSCreateConfigCompanionSignalEnable",  v16,  (uint64_t)"kCBCSCreateConfigConfigID");
    *((_DWORD *)v42 + 6) = v18;
    xpc_object_t v19 = xpc_dictionary_get_value(v40, "kCBCSCreateConfigChannelMap");
    if (v19)
    {
      uint64_t v38 = &off_10087FAA8;
      uint64_t v39 = 0LL;
      __int16 v20 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Raw bytes Channel map data found", buf, 2u);
      }

      int v21 = sub_10025DBF4(v19, (uint64_t)&v38);
      *((_DWORD *)v42 + 6) = v21;
      if (v21 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068924C();
      }
      if ((unsigned __int16)sub_10056AAD8((uint64_t)&v38) > 0xAuLL)
      {
        __int128 v24 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          unsigned __int16 v25 = sub_10056AAD8((uint64_t)&v38);
          sub_1006891FC(v25, (uint64_t)buf, v24);
        }
      }

      else
      {
        __int16 v22 = (const void *)sub_10056AAF0((uint64_t)&v38);
        unsigned __int16 v23 = sub_10056AAD8((uint64_t)&v38);
        memcpy(&v46[22], v22, v23);
      }

      uint64_t v38 = &off_10087FAA8;
      if (v39) {
        sub_1002CD254(v39);
      }
    }

    int v26 = *((_DWORD *)v42 + 6);
    if (v26) {
      goto LABEL_50;
    }
    uint64_t v27 = sub_100404FE8();
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    void v30[2] = sub_1004E7FEC;
    v30[3] = &unk_10089D2B0;
    uint64_t v32 = &v41;
    uint64_t v33 = a1;
    id v31 = v6;
    __int128 v34 = *(_OWORD *)v46;
    __int128 v35 = *(_OWORD *)&v46[16];
    __int128 v36 = *(_OWORD *)&v46[32];
    int v37 = *(_DWORD *)&v46[48];
    sub_1004054B4(v27, v30);

    int v26 = *((_DWORD *)v42 + 6);
    if (v26)
    {
LABEL_50:
      sub_10043F3F4(a1, 119LL, xdict, v26);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068919C();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D4EA8(_Unwind_Exception *a1)
{
  *(void *)(v3 - 232) = v2;
  uint64_t v5 = *(unsigned int **)(v3 - 224);
  if (v5) {
    sub_1002CD254(v5);
  }

  _Block_object_dispose((const void *)(v3 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1004D4F0C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v33 = 0LL;
  __int128 v34 = &v33;
  uint64_t v35 = 0x2020000000LL;
  int v36 = 3;
  uint64_t v32 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  int v13 = sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v34 + 6) = v13;
  uint64_t v14 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v14 + 2760LL))(v14) & 1) != 0)
  {
    if (*((_DWORD *)v34 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068785C();
      }
      int v15 = 3;
LABEL_24:
      sub_10043F3F4(a1, 120LL, xdict, v15);
      goto LABEL_25;
    }

    if (!v6) {
      goto LABEL_37;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if (!sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
    {
LABEL_37:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006876CC();
      }
      int v15 = 8;
      goto LABEL_24;
    }

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    if ((sub_1000A86F0() & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006877FC();
      }
      goto LABEL_30;
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      __int16 v22 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = *(void *)(a1 + 96);
        uint64_t v26 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v38 = v25;
        __int16 v39 = 2112;
        uint64_t v40 = v26;
        __int16 v41 = 2112;
        uint64_t v42 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }

      goto LABEL_30;
    }

    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006892AC();
      }
LABEL_30:
      sub_10043F3F4(a1, 120LL, xdict, 17);
      goto LABEL_25;
    }

    buf[0] = 0;
    int v23 = sub_10025D848(v32, 0, v16, v17, v18, v19, v20, v21, (uint64_t)"kCBCSCreateConfigConfigID");
    *((_DWORD *)v34 + 6) = v23;
    if (v23) {
      goto LABEL_38;
    }
    uint64_t v24 = sub_100404FE8();
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_1004E807C;
    v27[3] = &unk_10088FEB0;
    uint64_t v29 = &v33;
    uint64_t v30 = a1;
    id v28 = v6;
    uint8_t v31 = buf[0];
    sub_1004054B4(v24, v27);

    int v23 = *((_DWORD *)v34 + 6);
    if (v23)
    {
LABEL_38:
      sub_10043F3F4(a1, 120LL, xdict, v23);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006892D8();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D532C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004D5370(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v36 = 0LL;
  int v37 = &v36;
  uint64_t v38 = 0x2020000000LL;
  int v39 = 3;
  uint64_t v35 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v33[3] = 0LL;
  uint64_t v34 = 0LL;
  v33[0] = 0LL;
  v33[1] = v33;
  void v33[2] = 0x2020000000LL;
  int v13 = sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v37 + 6) = v13;
  uint64_t v14 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v14 + 2760LL))(v14) & 1) != 0)
  {
    if (*((_DWORD *)v37 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068785C();
      }
      int v15 = 3;
LABEL_24:
      sub_10043F3F4(a1, 121LL, xdict, v15);
      goto LABEL_25;
    }

    if (!v6) {
      goto LABEL_37;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if (!sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
    {
LABEL_37:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006876CC();
      }
      int v15 = 8;
      goto LABEL_24;
    }

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    if ((sub_1000A86F0() & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006877FC();
      }
      goto LABEL_30;
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      __int16 v22 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = *(void *)(a1 + 96);
        uint64_t v26 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v41 = v25;
        __int16 v42 = 2112;
        uint64_t v43 = v26;
        __int16 v44 = 2112;
        uint64_t v45 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }

      goto LABEL_30;
    }

    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689338();
      }
LABEL_30:
      sub_10043F3F4(a1, 121LL, xdict, 17);
      goto LABEL_25;
    }

    int v23 = sub_10025D848(v35, 0, v16, v17, v18, v19, v20, v21, (uint64_t)"kCBCSSetConfigID");
    *((_DWORD *)v37 + 6) = v23;
    if (v23) {
      goto LABEL_38;
    }
    uint64_t v24 = sub_100404FE8();
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_1004E80E8;
    v27[3] = &unk_10089D2D8;
    uint64_t v31 = a1;
    uint64_t v29 = &v36;
    id v28 = v6;
    uint64_t v30 = v33;
    uint64_t v32 = v34;
    sub_1004054B4(v24, v27);

    int v23 = *((_DWORD *)v37 + 6);
    if (v23)
    {
LABEL_38:
      sub_10043F3F4(a1, 121LL, xdict, v23);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689364();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D57E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v18 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1004D582C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v31 = 0LL;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000LL;
  int v34 = 3;
  uint64_t v30 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  int v13 = sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v32 + 6) = v13;
  uint64_t v14 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v14 + 2760LL))(v14) & 1) != 0)
  {
    if (*((_DWORD *)v32 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068785C();
      }
      int v15 = 3;
LABEL_24:
      sub_10043F3F4(a1, 122LL, xdict, v15);
      goto LABEL_25;
    }

    if (!v6) {
      goto LABEL_37;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if (!sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
    {
LABEL_37:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006876CC();
      }
      int v15 = 8;
      goto LABEL_24;
    }

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    if ((sub_1000A86F0() & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006877FC();
      }
      goto LABEL_30;
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      uint64_t v19 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(a1 + 96);
        uint64_t v23 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v22;
        *(_WORD *)&_BYTE buf[12] = 2112;
        *(void *)&uint8_t buf[14] = v23;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v36 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }

      goto LABEL_30;
    }

    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006893C4();
      }
LABEL_30:
      sub_10043F3F4(a1, 122LL, xdict, 17);
      goto LABEL_25;
    }

    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = 0LL;
    *(void *)&uint8_t buf[14] = 0LL;
    *(_WORD *)&buf[22] = 257;
    int v20 = sub_10025D848( v30,  0,  (uint64_t)"kCBCSSNRControlInitiator",  (uint64_t)sub_10025DAFC,  (uint64_t)"kCBCSSNRControlReflector",  v16,  v17,  v18,  (uint64_t)"kCBCSCreateConfigConfigID");
    *((_DWORD *)v32 + 6) = v20;
    if (v20) {
      goto LABEL_38;
    }
    uint64_t v21 = sub_100404FE8();
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    void v24[2] = sub_1004E8160;
    v24[3] = &unk_10089D300;
    uint64_t v26 = &v31;
    uint64_t v27 = a1;
    id v25 = v6;
    __int128 v28 = *(_OWORD *)buf;
    uint64_t v29 = *(void *)&buf[16];
    sub_1004054B4(v21, v24);

    int v20 = *((_DWORD *)v32 + 6);
    if (v20)
    {
LABEL_38:
      sub_10043F3F4(a1, 122LL, xdict, v20);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006893F0();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D5D44(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1004D5D88(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v25 = 0LL;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000LL;
  int v28 = 3;
  uint64_t v23 = &off_10087FAA8;
  uint64_t v24 = 0LL;
  xpc_object_t xdicta = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v26 + 6) = v11;
  uint64_t v12 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 2760LL))(v12) & 1) != 0)
  {
    if (*((_DWORD *)v26 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068785C();
      }
      sub_10043F3F4(a1, 123LL, xdict, 3);
      goto LABEL_8;
    }

    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689450();
      }
      sub_10043F3F4(a1, 123LL, xdict, 17);
      goto LABEL_8;
    }

    xpc_object_t v13 = xpc_dictionary_get_value(xdicta, "kCBCSChannelClassification");
    if (!v13)
    {
      if (*((_DWORD *)v26 + 6))
      {
LABEL_25:
        int v17 = *((_DWORD *)v26 + 6);
        if (v17)
        {
          sub_10043F3F4(a1, 123LL, xdict, v17);
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            sub_10068947C();
          }
        }

        goto LABEL_8;
      }

void sub_1004D604C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int *a20)
{
  if (a20) {
    sub_1002CD254(a20);
  }
  *(void *)(v21 - 96) = v20;
  uint64_t v23 = *(unsigned int **)(v21 - 88);
  if (v23) {
    sub_1002CD254(v23);
  }
  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1004D6090(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v34 = 0LL;
  uint64_t v35 = &v34;
  uint64_t v36 = 0x2020000000LL;
  int v37 = 3;
  uint64_t v33 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  int v13 = sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v35 + 6) = v13;
  uint64_t v14 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v14 + 2760LL))(v14) & 1) != 0)
  {
    if (*((_DWORD *)v35 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }

    int v21 = sub_10025D848(v33, 1, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBCSDefaultSettingsRoleEnable");
    *((_DWORD *)v35 + 6) = v21;
    if (v21)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
LABEL_9:
      }
        sub_10068785C();
LABEL_10:
      sub_10043F3F4(a1, 124LL, xdict, 3);
      goto LABEL_11;
    }

    if (*(int *)(a1 + 80) > 1)
    {
      uint64_t v22 = sub_100404FE8();
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      void v24[2] = sub_1004E8288;
      v24[3] = &unk_10089D300;
      uint64_t v26 = &v34;
      uint64_t v27 = a1;
      id v25 = v6;
      uint64_t v28 = v32;
      uint64_t v29 = v31;
      uint64_t v30 = 20LL;
      sub_1004054B4(v22, v24);

      int v23 = *((_DWORD *)v35 + 6);
      if (v23)
      {
        sub_10043F3F4(a1, 124LL, xdict, v23);
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10068947C();
        }
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006894DC();
      }
      sub_10043F3F4(a1, 124LL, xdict, 17);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D6348( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1004D6380(uint64_t a1, void *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  int v11 = 3;
  uint64_t v4 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 2760LL))(v4) & 1) != 0)
  {
    uint64_t v5 = sub_100404FE8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_1004E82FC;
    void v7[3] = &unk_100880D70;
    void v7[4] = &v8;
    void v7[5] = a1;
    sub_1004054B4(v5, v7);
    int v6 = *((_DWORD *)v9 + 6);
    if (v6)
    {
      sub_10043F3F4(a1, 125LL, a2, v6);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689508();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

  _Block_object_dispose(&v8, 8);
}

void sub_1004D649C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1004D64B4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000LL;
  int v20 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 2760LL))(v7) & 1) != 0)
  {
    if (!v6) {
      goto LABEL_32;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if (sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
    {
      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_10089D870);
      }
      if ((sub_1000A86F0() & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_1006877FC();
        }
        goto LABEL_24;
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
      {
        uint64_t v8 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = *(void *)(a1 + 96);
          uint64_t v12 = *(void *)(a1 + 48);
          *(_DWORD *)__int128 buf = 138412802;
          uint64_t v22 = v11;
          __int16 v23 = 2112;
          uint64_t v24 = v12;
          __int16 v25 = 2112;
          uint64_t v26 = v6;
          _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
        }

        goto LABEL_24;
      }

      if (*(int *)(a1 + 80) <= 1)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_1006893C4();
        }
LABEL_24:
        sub_10043F3F4(a1, 126LL, xdict, 17);
        goto LABEL_25;
      }

      uint64_t v9 = sub_100404FE8();
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      void v13[2] = sub_1004E8360;
      v13[3] = &unk_10088FED8;
      uint64_t v15 = &v17;
      uint64_t v16 = a1;
      id v14 = v6;
      sub_1004054B4(v9, v13);
      int v10 = *((_DWORD *)v18 + 6);
      if (v10)
      {
        sub_10043F3F4(a1, 126LL, xdict, v10);
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_1006893F0();
        }
      }
    }

    else
    {
LABEL_32:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006876CC();
      }
      sub_10043F3F4(a1, 126LL, xdict, 8);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D6820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004D6870(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v32 = 0LL;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2020000000LL;
  int v35 = 3;
  uint64_t v30 = &off_10087FAA8;
  uint64_t v31 = 0LL;
  xpc_object_t xdicta = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = sub_1002E6E9C();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 2760LL))(v7) & 1) != 0)
  {
    int v14 = sub_10025D848(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v33 + 6) = v14;
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068785C();
      }
      int v15 = 3;
LABEL_24:
      sub_10043F3F4(a1, 127LL, xdict, v15);
      goto LABEL_25;
    }

    if (!v6) {
      goto LABEL_49;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if (!sub_1005CC0B8((uint64_t)off_1008D5F28, v6))
    {
LABEL_49:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006876CC();
      }
      int v15 = 8;
      goto LABEL_24;
    }

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    if ((sub_1000A86F0() & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006877FC();
      }
      goto LABEL_39;
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      uint64_t v16 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)(a1 + 96);
        uint64_t v22 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v37 = v21;
        __int16 v38 = 2112;
        uint64_t v39 = v22;
        __int16 v40 = 2112;
        uint64_t v41 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }

      goto LABEL_39;
    }

    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006893C4();
      }
LABEL_39:
      sub_10043F3F4(a1, 127LL, xdict, 17);
      goto LABEL_25;
    }

    xpc_object_t v17 = xpc_dictionary_get_value(xdicta, "kCBCSReflectorFAETable");
    if (!v17)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689568();
      }
      goto LABEL_39;
    }

    int v18 = sub_10025DBF4(v17, (uint64_t)&v30);
    *((_DWORD *)v33 + 6) = v18;
    if (v18)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689594();
      }
    }

    else
    {
      uint64_t v19 = sub_100404FE8();
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3321888768LL;
      void v23[2] = sub_1004E83C8;
      v23[3] = &unk_10089D360;
      __int16 v25 = &v32;
      uint64_t v26 = a1;
      id v24 = v6;
      uint64_t v27 = &off_10087FAA8;
      uint64_t v28 = v31;
      if (v31) {
        sub_1002CD1E0((uint64_t)v31);
      }
      sub_1004054B4(v19, v23);
      uint64_t v27 = &off_10087FAA8;
      if (v28) {
        sub_1002CD254(v28);
      }

      int v20 = *((_DWORD *)v33 + 6);
      if (v20)
      {
        sub_10043F3F4(a1, 127LL, xdict, v20);
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_1006893F0();
        }
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689118();
  }

void sub_1004D6D24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17, ...)
{
  if (a17) {
    sub_1002CD254(a17);
  }
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004D6D90(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v53 = 0LL;
  uint64_t v54 = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  uint64_t v50 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  int v13 = *(_DWORD *)(a1 + 80);
  if (v13 == 2 || v13 == 1 && sub_10025D500(a1))
  {
    int v20 = sub_10025D848(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    if (v20)
    {
      sub_10043F3F4(a1, 128LL, xdict, v20);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689774();
      }
    }

    int v27 = sub_10025D848(v50, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBLeSetPhyAllPhys");
    if (v27)
    {
      sub_10043F3F4(a1, 128LL, xdict, v27);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689714();
      }
    }

    int v34 = sub_10025D848(v50, 0, v21, v22, v23, v24, v25, v26, (uint64_t)"kCBLeSetPhyTxPhys");
    if (v34)
    {
      sub_10043F3F4(a1, 128LL, xdict, v34);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006896B4();
      }
    }

    int v41 = sub_10025D848(v50, 0, v28, v29, v30, v31, v32, v33, (uint64_t)"kCBLeSetPhyRxPhys");
    if (v41)
    {
      sub_10043F3F4(a1, 128LL, xdict, v41);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689654();
      }
    }

    int v42 = sub_10025D848(v50, 0, v35, v36, v37, v38, v39, v40, (uint64_t)"kCBLeSetPhyRxPhyOptions");
    if (v42)
    {
      sub_10043F3F4(a1, 128LL, xdict, v42);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006895F4();
      }
    }

    uint64_t v43 = sub_100404FE8();
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[2] = sub_1004E8434;
    v44[3] = &unk_10089D398;
    id v45 = v12;
    uint64_t v46 = v54;
    uint64_t v47 = v53;
    uint64_t v48 = v52;
    uint64_t v49 = v51;
    sub_1004054B4(v43, v44);
  }
}

void sub_1004D708C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1004D70AC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v97 = 0LL;
  uint64_t v98 = &v97;
  uint64_t v99 = 0x2020000000LL;
  int v100 = 3;
  uint64_t v96 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v95 = 0LL;
  uint64_t v94 = 0LL;
  uint64_t v93 = -120LL;
  uint64_t v92 = -120LL;
  uint64_t v91 = -120LL;
  uint64_t v90 = 0LL;
  uint64_t v89 = 0LL;
  uint64_t v88 = 0LL;
  uint64_t v87 = 0LL;
  uint64_t v86 = 0LL;
  uint64_t v85 = 0LL;
  uint64_t v84 = 0LL;
  uint64_t v83 = 0LL;
  uint64_t v82 = 0LL;
  uint64_t v81 = 0LL;
  uint64_t v80 = 0LL;
  uint64_t v79 = 0LL;
  uint64_t v78 = 0LL;
  if (*(int *)(a1 + 80) >= 1)
  {
    int v13 = sub_10025D848(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v98 + 6) = v13;
    int v20 = sub_10025D848(v96, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBRSSIStatisticAndDetectionEnable");
    *((_DWORD *)v98 + 6) = v20;
    BOOL v37 = v95 != 0;
    char v21 = v94;
    char v49 = v93;
    char v48 = v92;
    char v22 = v91;
    char v23 = v90;
    char v47 = v89;
    char v46 = v88;
    __int16 v44 = v86;
    __int16 v45 = v87;
    char v42 = v84;
    __int16 v43 = v85;
    int v41 = v83;
    int v40 = v82;
    int v39 = v81;
    char v51 = v80;
    char v38 = v78;
    char v50 = v79;
    uint64_t v24 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      id v25 = [*(id *)(a1 + 96) UTF8String];
      *(_DWORD *)__int128 buf = 136384259;
      id v102 = v25;
      __int16 v103 = 1024;
      BOOL v104 = v95 != 0;
      __int16 v105 = 1024;
      int v106 = v94;
      __int16 v107 = 1024;
      int v108 = (unsigned __int16)v85;
      __int16 v109 = 1024;
      int v110 = v84;
      __int16 v111 = 1024;
      int v112 = (char)v93;
      __int16 v113 = 1024;
      int v114 = (char)v92;
      __int16 v115 = 1024;
      int v116 = (char)v91;
      __int16 v117 = 1024;
      int v118 = (char)v90;
      __int16 v119 = 1024;
      int v120 = (char)v89;
      __int16 v121 = 1024;
      int v122 = (char)v88;
      __int16 v123 = 1024;
      int v124 = (unsigned __int16)v87;
      __int16 v125 = 1024;
      int v126 = (unsigned __int16)v86;
      __int16 v127 = 1024;
      int v128 = v79;
      __int16 v129 = 1024;
      int v130 = v80;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Initiate CBMsgIdConfigureRSSIDetectionAndStatistics by %{private}s enable=%d  window=%d mask=%d:%d Further=%d:%d :%d closer=%d:%d:%d var=%d:%d aopPath=%d Debug=%d",  buf,  0x60u);
      int v20 = *((_DWORD *)v98 + 6);
    }

    if (v20)
    {
      sub_10043F3F4(a1, 214LL, xdict, v20);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006898A0();
      }
    }

    if (v12)
    {
      uint64_t v77 = 0LL;
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_10089D890);
      }
      uint64_t v26 = off_1008D5F08;
      sub_100241F90(buf, v12);
      if (sub_100599890((uint64_t)v26, buf, &v77))
      {
        uint64_t v27 = sub_100404FE8();
        v52[0] = _NSConcreteStackBlock;
        v52[1] = 3221225472LL;
        v52[2] = sub_1004E84DC;
        v52[3] = &unk_10089D3C0;
        uint64_t v55 = a1;
        uint64_t v54 = &v97;
        id v53 = v12;
        BOOL v56 = v37;
        char v57 = v21;
        char v58 = v49;
        char v59 = v48;
        char v60 = v22;
        char v61 = v23;
        char v62 = v47;
        char v63 = v46;
        __int16 v64 = v45;
        __int16 v65 = v44;
        __int16 v66 = v43;
        char v67 = v42;
        char v68 = 0;
        int v69 = v41;
        int v70 = v40;
        int v71 = v39;
        char v72 = v51;
        char v73 = v38;
        char v74 = v50;
        char v75 = 0;
        int v76 = 0;
        sub_1004054B4(v27, v52);
      }

      else
      {
        *((_DWORD *)v98 + 6) = 312;
        uint64_t v28 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_100689834(v28, v29, v30, v31, v32, v33, v34, v35);
        }
      }
    }

    int v36 = *((_DWORD *)v98 + 6);
    if (v36)
    {
      sub_10043F3F4(a1, 214LL, xdict, v36);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006897D4();
      }
    }
  }

  _Block_object_dispose(&v97, 8);
}

void sub_1004D7714(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1004D7760(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v44 = 0LL;
  __int16 v45 = &v44;
  uint64_t v46 = 0x2020000000LL;
  int v47 = 3;
  __int16 v43 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  if (*(int *)(a1 + 80) >= 1)
  {
    int v13 = sub_10025D848(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v45 + 6) = v13;
    int v20 = sub_10025D848(v43, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBBluetoothUsageEnable");
    char v21 = v45;
    *((_DWORD *)v45 + 6) = v20;
    __int16 v22 = v41;
    __int16 v23 = v40;
    uint64_t v24 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      id v25 = [*(id *)(a1 + 96) UTF8String];
      *(_DWORD *)__int128 buf = 67109635;
      int v49 = v41;
      __int16 v50 = 1024;
      int v51 = v40;
      __int16 v52 = 2081;
      id v53 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Initiate CBMsgIdConfigureUsageDetection max=%d min=%d for app %{private}s\t",  buf,  0x18u);
      char v21 = v45;
      int v20 = *((_DWORD *)v45 + 6);
    }

    if (v20)
    {
      sub_10043F3F4(a1, 215LL, xdict, v20);
      uint64_t v26 = (os_log_s *)qword_1008F75F0;
      BOOL v27 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR);
      char v21 = v45;
      if (v27)
      {
        int v30 = *((_DWORD *)v45 + 6);
        *(_DWORD *)__int128 buf = 67109120;
        int v49 = v30;
        _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "Failed to convertXPC options  for handleConfigureUsageNotification: %d",  buf,  8u);
        char v21 = v45;
      }
    }

    int v28 = *((_DWORD *)v21 + 6);
    if (!v28 && v12)
    {
      uint64_t v29 = sub_100404FE8();
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472LL;
      v31[2] = sub_1004E8568;
      v31[3] = &unk_10089D3E8;
      uint64_t v33 = &v44;
      uint64_t v34 = a1;
      uint64_t v35 = v42;
      __int16 v37 = v22;
      __int16 v38 = v23;
      id v32 = v12;
      uint64_t v36 = v39;
      sub_1004054B4(v29, v31);

      int v28 = *((_DWORD *)v45 + 6);
    }

    if (v28)
    {
      sub_10043F3F4(a1, 215LL, xdict, v28);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689900();
      }
    }
  }

  _Block_object_dispose(&v44, 8);
}

void sub_1004D7A8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26)
{
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1004D7AD0(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v41 = 0LL;
  uint64_t v42 = &v41;
  uint64_t v43 = 0x2020000000LL;
  int v44 = 3;
  uint64_t v40 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v39 = 0LL;
  uint64_t v38 = 0LL;
  if (*(int *)(a1 + 80) >= 1)
  {
    int v13 = sub_10025D848(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v42 + 6) = v13;
    int v20 = sub_10025D848(v40, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBPhyStatsConfigEnable");
    char v21 = v42;
    *((_DWORD *)v42 + 6) = v20;
    __int16 v22 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = [*(id *)(a1 + 96) UTF8String];
      *(_DWORD *)__int128 buf = 67109379;
      int v46 = v38;
      __int16 v47 = 2081;
      id v48 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Initiate CBMsgIdConfigureUsageStatistics Subrate=%d for App %{private}s",  buf,  0x12u);
      char v21 = v42;
      int v20 = *((_DWORD *)v42 + 6);
    }

    if (v20)
    {
      sub_10043F3F4(a1, 216LL, xdict, v20);
      uint64_t v24 = (os_log_s *)qword_1008F75F0;
      BOOL v25 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR);
      char v21 = v42;
      if (v25)
      {
        int v28 = *((_DWORD *)v42 + 6);
        *(_DWORD *)__int128 buf = 67109120;
        int v46 = v28;
        _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Failed to convertXPC options  for handleConfigureUsageNotification: %d",  buf,  8u);
        char v21 = v42;
      }
    }

    int v26 = *((_DWORD *)v21 + 6);
    if (!v26 && v12)
    {
      uint64_t v27 = sub_100404FE8();
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_1004E85E4;
      v29[3] = &unk_10089D410;
      uint64_t v31 = &v41;
      uint64_t v32 = a1;
      uint64_t v33 = v39;
      id v30 = v12;
      uint64_t v34 = v38;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      uint64_t v37 = 0LL;
      sub_1004054B4(v27, v29);

      int v26 = *((_DWORD *)v42 + 6);
    }

    if (v26)
    {
      sub_10043F3F4(a1, 216LL, xdict, v26);
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689960();
      }
    }
  }

  _Block_object_dispose(&v41, 8);
}

void sub_1004D7DC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Block_object_dispose((const void *)(v21 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1004D7E0C(uint64_t a1, xpc_object_t xdict)
{
  __int16 v45 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v4 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions"))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068785C();
    }
  }

  else
  {
    if (!v5) {
      goto LABEL_39;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if (sub_1005CC0B8((uint64_t)off_1008D5F28, v5))
    {
      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_10089D870);
      }
      if ((sub_1000A86F0() & 1) != 0)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089D810);
        }
        if ((sub_1005D79C0((uint64_t)off_1008D5F28, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
        {
          uint64_t v43 = 0LL;
          uint64_t v44 = 0LL;
          int v18 = sub_10025D848(v45, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"@kCBConnectOptionOpportunistic");
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:]( &OBJC_CLASS___ConnectOptions,  "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:",  0LL,  0LL,  0LL,  0LL,  0LL));
          int v20 = v19;
          if (*(int *)(a1 + 80) >= 1
            && ([v19 setOpportunistic:v44 != 0],
                id v21 = sub_10025E9B4(v45, "kCBOptionUseCaseList"),
                __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(v21),
                (id v23 = v22) != 0LL))
          {
            if ([v22 count])
            {
              uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v23));
              BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v24 allObjects]);

              id v23 = (void *)objc_claimAutoreleasedReturnValue([v25 sortedArrayUsingSelector:"compare:"]);
              [v20 setUseCaseList:v23];
              id v26 = sub_1004E646C(v23);
              uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
              int v28 = (os_log_s *)qword_1008F75F0;
              if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v29 = (char *)objc_claimAutoreleasedReturnValue([v27 componentsJoinedByString:@","]);
                *(_DWORD *)__int128 buf = 138412290;
                __int16 v47 = v29;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "connUseCaseList: %@", buf, 0xCu);
              }

              if (![v20 connectionUseCase])
              {
                id v30 = (void *)objc_claimAutoreleasedReturnValue([v23 firstObject]);
                uint64_t v31 = v30;
                if (v30)
                {
                  [v20 setConnectionUseCase:[v30 longLongValue]];
                  uint64_t v32 = (os_log_s *)qword_1008F75F0;
                  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v33 = sub_1004E656C((int)[v31 longLongValue]);
                    *(_DWORD *)__int128 buf = 136315138;
                    __int16 v47 = v33;
                    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "default useCase derived from useCaseList: %s",  buf,  0xCu);
                  }
                }
              }
            }

            uint64_t v34 = v23;
          }

          else
          {
            uint64_t v34 = 0LL;
          }

          if (!v18)
          {
            uint64_t v38 = sub_100404FE8();
            v39[0] = _NSConcreteStackBlock;
            v39[1] = 3221225472LL;
            v39[2] = sub_1004E6C98;
            v39[3] = &unk_100880D48;
            uint64_t v42 = a1;
            id v40 = v5;
            id v41 = v20;
            sub_1004054B4(v38, v39);
          }
        }

        else
        {
          __int128 v35 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            __int128 v36 = *(const char **)(a1 + 96);
            uint64_t v37 = *(void *)(a1 + 48);
            *(_DWORD *)__int128 buf = 138412802;
            __int16 v47 = v36;
            __int16 v48 = 2112;
            uint64_t v49 = v37;
            __int16 v50 = 2112;
            int v51 = v5;
            _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_1006877FC();
      }
    }

    else
    {
LABEL_39:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006876CC();
      }
    }
  }
}

void sub_1004D833C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D83C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)v6;
  if (*(int *)(a1 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689B1C();
    }
    int v10 = 11;
    goto LABEL_21;
  }

  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689A20();
    }
    goto LABEL_20;
  }

  uint64_t v14 = 0LL;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089D890);
  }
  uint64_t v8 = off_1008D5F08;
  sub_100241F90(buf, v7);
  if (!sub_100599890((uint64_t)v8, buf, &v14))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689ABC();
    }
    goto LABEL_20;
  }

  buf[0] = 0;
  sub_100242CA4(buf);
  if (!sub_10012D5EC(v14))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689A4C();
    }
    sub_100242CD8(buf);
LABEL_20:
    int v10 = 8;
    goto LABEL_21;
  }

  sub_100242CD0(buf);
  uint64_t v9 = sub_1002E6E9C();
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 2920LL))( v9,  v14,  0xFFFFLL,  1LL,  1LL,  1LL);
  sub_100242CD8(buf);
  if (!v10)
  {
    uint64_t v11 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Counter events for %@ started", buf, 0xCu);
      int v10 = 0;
    }

    goto LABEL_23;
  }

void sub_1004D864C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D867C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)v6;
  if (*(int *)(a1 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689B48();
    }
    int v10 = 11;
    goto LABEL_21;
  }

  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689A20();
    }
    goto LABEL_20;
  }

  uint64_t v14 = 0LL;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089D890);
  }
  uint64_t v8 = off_1008D5F08;
  sub_100241F90(buf, v7);
  if (!sub_100599890((uint64_t)v8, buf, &v14))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689ABC();
    }
    goto LABEL_20;
  }

  buf[0] = 0;
  sub_100242CA4(buf);
  if (!sub_10012D5EC(v14))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689A4C();
    }
    sub_100242CD8(buf);
LABEL_20:
    int v10 = 8;
    goto LABEL_21;
  }

  sub_100242CD0(buf);
  uint64_t v9 = sub_1002E6E9C();
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v9 + 2920LL))( v9,  v14,  0xFFFFLL,  1LL,  0LL,  1LL);
  sub_100242CD8(buf);
  if (!v10)
  {
    uint64_t v11 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Counter events for %@ stopped", buf, 0xCu);
      int v10 = 0;
    }

    goto LABEL_23;
  }

void sub_1004D8908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D8938(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v3 = sub_10025E254(value, "kCBMsgArgDevices");
  id v6 = (id)objc_claimAutoreleasedReturnValue(v3);
  for (unsigned __int16 i = 0; (uint64_t)[v6 longValue] > i; ++i)
  {
    uint64_t v5 = sub_100404FE8();
    sub_100405384(v5, &stru_10089D578);
    usleep(0x64u);
  }
}

void sub_1004D89B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1004D89CC(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) > 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    id v3 = sub_10025E1C8(value, "kCBSetIRKForAddressPublicAddress");
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    unint64_t v5 = sub_1005C02B0(v4);
    unint64_t v6 = sub_1001BEE0C(v5);
    id v7 = sub_10025E150(value, "kCBSetIRKForAddressIRK");
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ([v8 length] == (id)16)
    {
      uint64_t v9 = sub_100404FE8();
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      void v10[2] = sub_1004EDB50;
      v10[3] = &unk_100894000;
      id v11 = v8;
      uint64_t v12 = 16LL;
      char v13 = 0;
      __int16 v15 = WORD2(v6);
      int v14 = v6;
      sub_1004054B4(v9, v10);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100689BA0();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689B74();
  }

void sub_1004D8B1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1004D8B50(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) > 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    id v3 = sub_10025E1C8(value, "kCBSetIRKForAddressPublicAddress");
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    unint64_t v5 = sub_1005C02B0(v4);
    unint64_t v6 = sub_1001BEE0C(v5);
    uint64_t v7 = sub_100404FE8();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _WORD v8[2] = sub_1004EDBFC;
    v8[3] = &unk_1008981A0;
    char v9 = 0;
    int v10 = v6;
    __int16 v11 = WORD2(v6);
    sub_1004054B4(v7, v8);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689BCC();
  }

void sub_1004D8C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D8C38(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) > 1)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    id v3 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = sub_100404FE8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_1004EDC4C;
    void v7[3] = &unk_10087EA48;
    id v6 = v4;
    id v8 = v6;
    sub_1004054B4(v5, v7);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689BF8();
  }

void sub_1004D8D14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1004D8D34(uint64_t a1, xpc_object_t original)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689C24();
    }
  }

  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(original);
    if (reply)
    {
      uint64_t v5 = reply;
      xpc_object_t value = xpc_dictionary_get_value(original, "kCBMsgArgs");
      xpc_object_t array = xpc_dictionary_get_array(value, "kCBMsgArgAnyConnectedPeripheralsPerApp");
      if (array)
      {
        id v8 = array;
        if (xpc_get_type(array) == (xpc_type_t)&_xpc_type_array)
        {
          if (xpc_array_get_count(v8))
          {
            size_t v9 = 0LL;
            do
            {
              string = xpc_array_get_string(v8, v9);
              if (string)
              {
                __int16 v11 = string;
                uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  string));
                if (qword_1008D67C8 != -1) {
                  dispatch_once(&qword_1008D67C8, &stru_10089D870);
                }
                char v13 = sub_10027DAF0((uint64_t)off_1008D67C0, v12);
                xpc_dictionary_set_BOOL(v5, v11, v13);
              }

              ++v9;
            }

            while (v9 < xpc_array_get_count(v8));
          }
        }
      }

      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v5);
      xpc_release(v5);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100689C50();
    }
  }

void sub_1004D8EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D8EF8(uint64_t a1, void *a2)
{
  if (*(int *)(a1 + 80) >= 1
    && (uint64_t v4 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 344LL))(v4) & 1) != 0))
  {
    memset(bytes, 0, sizeof(bytes));
    uint64_t v5 = sub_1002E6E9C();
    int v6 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v5 + 3432LL))(v5, bytes, 32LL);
    uint64_t v7 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
    {
      v10[0] = 68157954;
      v10[1] = 32;
      __int16 v11 = 2096;
      uint64_t v12 = bytes;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "LPEM data: %.32P", (uint8_t *)v10, 0x12u);
    }

    xpc_object_t reply = xpc_dictionary_create_reply(a2);
    if (reply)
    {
      size_t v9 = reply;
      xpc_dictionary_set_data(reply, "kCBMsgArgLPEMData", bytes, 0x20uLL);
      xpc_dictionary_set_int64(v9, "kCBMsgArgResult", v6);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v9);
      xpc_release(v9);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689C7C();
  }

void sub_1004D907C(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689CA8();
    }
  }

  else
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    id v5 = sub_10025E1C8(value, "kCBMsgArgWhbStableIdentifier");
    int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      void v7[2] = sub_1004EDC9C;
      void v7[3] = &unk_10089D738;
      void v7[4] = a1;
      void v7[5] = xpc_dictionary_create_reply(xdict);
      [gCBDaemonServer optimalWhbDeviceForStableIdentifier:v6 completion:v7];
    }
  }

void sub_1004D9164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D9174(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689CD4();
    }
  }

  else
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    id v5 = sub_10025E1C8(value, "kCBMsgArgWhbStableIdentifier");
    int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([gCBDaemonServer localWhbDeviceForStableId:v6]);
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (reply)
      {
        if (v7)
        {
          size_t v9 = objc_alloc(&OBJC_CLASS___NSUUID);
          int v10 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
          __int16 v11 = -[NSUUID initWithUUIDString:](v9, "initWithUUIDString:", v10);

          uint64_t v12 = v11;
          char v13 = v12;
          if (v12)
          {
            *(void *)uuid = 0LL;
            uint64_t v15 = 0LL;
            -[NSUUID getUUIDBytes:](v12, "getUUIDBytes:", uuid);
            xpc_dictionary_set_uuid(reply, "kCBMsgArgDeviceUUID", uuid);
          }
        }

        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
        xpc_release(reply);
      }
    }
  }

void sub_1004D92EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D9330(uint64_t a1, xpc_object_t xdict)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689D00();
    }
  }

  else
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgUseCase");
    if (qword_1008D92A8 != -1) {
      dispatch_once(&qword_1008D92A8, &stru_10089D970);
    }
    unsigned int v11 = sub_10064B7CC(qword_1008D92A0, 0);
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      char v13 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgUsecaseCount", v11);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v13);
      xpc_release(v13);
    }
  }

void sub_1004D9440(uint64_t a1)
{
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689D2C();
    }
  }

  else
  {
    unsigned __int8 v2 = [&off_1008C31F8 containsObject:*(void *)(a1 + 96)];
    id v3 = (os_log_s *)qword_1008F75F0;
    if ((v2 & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = (void *)(a1 + 56);
        int v6 = 136446210;
        uint64_t v7 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Refreshing NonConnectable Identity for session %{public}s ",  (uint8_t *)&v6,  0xCu);
      }

      uint64_t v5 = sub_100404FE8();
      sub_1004054B4(v5, &stru_10089D758);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100689D58();
    }
  }

void sub_1004D9578(uint64_t a1, void *a2)
{
  uint64_t v21 = 0LL;
  __int16 v22 = &v21;
  uint64_t v23 = 0x3032000000LL;
  uint64_t v24 = sub_1004EDDF8;
  BOOL v25 = sub_1004EDE08;
  id v26 = 0LL;
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689D2C();
    }
  }

  else
  {
    unsigned __int8 v4 = [&off_1008C3210 containsObject:*(void *)(a1 + 96)];
    uint64_t v5 = (os_log_s *)qword_1008F75F0;
    if ((v4 & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
      {
        int v6 = (void *)(a1 + 56);
        *(_DWORD *)__int128 buf = 136446210;
        int v28 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Retrieving NonConnectable Identity for session %{public}s ",  buf,  0xCu);
      }

      uint64_t v7 = sub_100404FE8();
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      v20[2] = sub_1004EDE10;
      v20[3] = &unk_100880C30;
      void v20[4] = &v21;
      sub_1004054B4(v7, v20);
      xpc_object_t reply = xpc_dictionary_create_reply(a2);
      if (reply)
      {
        uint64_t v9 = (void *)v22[5];
        if (v9)
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"instance"]);
          unsigned int v11 = v10;
          if (v10 && [v10 unsignedShortValue] == 1)
          {
            uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([(id)v22[5] objectForKeyedSubscript:@"identity"]);
            char v13 = v12;
            if (v12)
            {
              id v14 = v12;
              xpc_dictionary_set_data( reply,  "kCBMsgArgIdentityIRK",  [v14 bytes],  (size_t)[v14 length]);
            }

            uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([(id)v22[5] objectForKeyedSubscript:@"address"]);
            uint64_t v16 = v15;
            if (v15)
            {
              id v17 = [v15 unsignedLongLongValue];
              if (v17)
              {
                id v18 = sub_1005C0604((unint64_t)v17);
                id v19 = objc_claimAutoreleasedReturnValue(v18);
                xpc_dictionary_set_data( reply,  "kCBMsgArgIdentityAddress",  [v19 bytes],  (size_t)[v19 length]);
              }
            }
          }
        }

        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
        xpc_release(reply);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100689DB8();
    }
  }

  _Block_object_dispose(&v21, 8);
}

void sub_1004D9850( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1004D98BC(uint64_t a1, xpc_object_t original)
{
  v4[0] = 0LL;
  v4[1] = v4;
  void v4[2] = 0x2020000000LL;
  xpc_object_t reply = 0LL;
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089D890);
  }
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1004EDE78;
  uint64_t v3[3] = &unk_10089CFE0;
  void v3[4] = v4;
  void v3[5] = a1;
  sub_1005B9828((uint64_t)off_1008D5F08, v3);
  _Block_object_dispose(v4, 8);
}

void sub_1004D997C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1004D9994(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v30 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v29 = 0LL;
  uint64_t v25 = 0LL;
  id v26 = &v25;
  uint64_t v27 = 0x2020000000LL;
  int v28 = 0;
  int v28 = sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgConnectionLatency");
  char v13 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v32 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "handlePeerSetConnectionLatencyMsg hasCompletionBlock=%lld",  buf,  0xCu);
  }

  if (!*((_DWORD *)v26 + 6) && v6)
  {
    uint64_t v14 = sub_100404FE8();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1004E8F44;
    v20[3] = &unk_10089D530;
    __int16 v22 = &v25;
    uint64_t v23 = a1;
    id v21 = v6;
    uint64_t v24 = v30;
    sub_1004054B4(v14, v20);
  }

  uint64_t v15 = v29;
  uint64_t v16 = (os_log_s *)qword_1008F75F0;
  BOOL v17 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v17)
    {
      int v18 = *((_DWORD *)v26 + 6);
      *(_DWORD *)__int128 buf = 67109120;
      LODWORD(v32) = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Sending error back %d", buf, 8u);
    }

    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", *((int *)v26 + 6));
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }

  else if (v17)
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Not sending response !", buf, 2u);
  }

  _Block_object_dispose(&v25, 8);
}

void sub_1004D9C18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004D9C58(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E1C8(value, "kCBMsgArgName");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  int v6 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v7, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 183) && v5)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089D810);
        }
        uint64_t v8 = off_1008D5F28;
        sub_10002418C(__p, (char *)[v5 UTF8String]);
        sub_1005CCF08((uint64_t)v8, v7, (unsigned __int8 *)__p);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else
    {
      uint64_t v9 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void *)(a1 + 96);
        uint64_t v11 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v15 = v10;
        __int16 v16 = 2112;
        uint64_t v17 = v11;
        __int16 v18 = 2112;
        id v19 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689E18();
  }
}

void sub_1004D9E54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1004D9E90(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E1C8(value, "kCBMsgArgName");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  int v6 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v7, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 183) && v5)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089D810);
        }
        sub_1005C9A38((uint64_t)off_1008D5F28, v7, v5);
      }
    }

    else
    {
      uint64_t v8 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 96);
        uint64_t v10 = *(void *)(a1 + 48);
        int v11 = 138412802;
        uint64_t v12 = v9;
        __int16 v13 = 2112;
        uint64_t v14 = v10;
        __int16 v15 = 2112;
        __int16 v16 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  (uint8_t *)&v11,  0x20u);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689E18();
  }
}

void sub_1004DA060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004DA084(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E1C8(value, "kCBMsgArgName");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689E18();
    }
    goto LABEL_20;
  }

  char v22 = 0;
  uint64_t v9 = sub_1002E6E00();
  sub_10002418C(buf, "Tags");
  sub_10002418C(__p, "AllowEveryone");
  int v10 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v9 + 72LL))(v9, buf, __p, &v22);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(*(void **)buf);
    if (!v10) {
      goto LABEL_12;
    }
  }

  else if (!v10)
  {
    goto LABEL_12;
  }

  int v11 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Tags are for everyone !!!!!!", buf, 2u);
  }

void sub_1004DA398( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1004DA408(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  int v6 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    unsigned __int8 v33 = 0;
    uint64_t v8 = sub_1002E6E00();
    sub_10002418C(buf, "Tags");
    sub_10002418C(__p, "AllowEveryone");
    int v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v8 + 72LL))( v8,  buf,  __p,  &v33);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v9)
      {
LABEL_12:
        unsigned __int8 v33 = 1;
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089D810);
        }
        if ((sub_1005D79C0((uint64_t)off_1008D5F28, v7, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
        {
          if (*(unsigned __int8 *)(a1 + 183) | v33)
          {
            memset(buf, 0, sizeof(buf));
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_10089D810);
            }
            sub_1005CE910((uint64_t)off_1008D5F28, v7, (uint64_t *)buf);
            int v11 = *(uint8_t **)buf;
            if (*(uint8_t **)buf != &buf[8])
            {
              do
              {
                uint64_t v12 = v11 + 32;
                char v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v12,  4LL));
                -[NSMutableArray addObject:](v5, "addObject:", v13);

                uint64_t v14 = (uint8_t *)*((void *)v11 + 1);
                if (v14)
                {
                  do
                  {
                    __int16 v15 = v14;
                    uint64_t v14 = *(uint8_t **)v14;
                  }

                  while (v14);
                }

                else
                {
                  do
                  {
                    __int16 v15 = (uint8_t *)*((void *)v11 + 2);
                    BOOL v16 = *(void *)v15 == (void)v11;
                    int v11 = v15;
                  }

                  while (!v16);
                }

                int v11 = v15;
              }

              while (v15 != &buf[8]);
            }

            sub_10023E78C((uint64_t)buf, *(char **)&buf[8]);
          }
        }

        else
        {
          uint64_t v17 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v25 = *(void *)(a1 + 96);
            uint64_t v26 = *(void *)(a1 + 48);
            *(_DWORD *)__int128 buf = 138412802;
            *(void *)&uint8_t buf[4] = v25;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&uint8_t buf[14] = v26;
            *(_WORD *)&buf[22] = 2112;
            __int128 v36 = v7;
            _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
          }
        }

        goto LABEL_30;
      }
    }

    else if (!v9)
    {
      goto LABEL_12;
    }

    int v10 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Tags are for everyone !!!!!!", buf, 2u);
    }

    goto LABEL_12;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
    sub_100689E18();
  }
LABEL_30:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_object_t v19 = xpc_array_create(0LL, 0LL);
  if (v19)
  {
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    int v20 = v5;
    id v21 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v27,  v34,  16LL);
    if (v21)
    {
      uint64_t v22 = *(void *)v28;
      do
      {
        for (unsigned __int16 i = 0LL; i != v21; unsigned __int16 i = (char *)i + 1)
        {
          if (*(void *)v28 != v22) {
            objc_enumerationMutation(v20);
          }
          id v24 = *(id *)(*((void *)&v27 + 1) + 8LL * (void)i);
          xpc_array_set_string(v19, 0xFFFFFFFFFFFFFFFFLL, (const char *)[v24 UTF8String]);
        }

        id v21 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v27,  v34,  16LL);
      }

      while (v21);
    }

    xpc_dictionary_set_value(reply, "kCBMsgArgData", v19);
    xpc_release(v19);
  }

  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
  xpc_release(reply);
}

void sub_1004DA834( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_1004DA8CC(uint64_t a1, void *a2)
{
  if (*(int *)(a1 + 80) >= 1)
  {
    if (sub_10025D500(a1))
    {
      xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      id v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
      int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      if (!v6)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_100689E18();
        }
        goto LABEL_25;
      }

      id v7 = sub_10025E1C8(value, "kCBMsgArgName");
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      id v9 = sub_10025E1C8(value, "kCBMsgArgValue");
      int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
      {
        int v11 = *(unsigned __int8 *)(a1 + 183);
        if (*(_BYTE *)(a1 + 183) && v8)
        {
          if ((unint64_t)[v10 length] < 0x401)
          {
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_10089D810);
            }
            sub_1005CEE7C((uint64_t)off_1008D5F28, v6, v8, v10);
          }

          else
          {
            uint64_t v12 = (os_log_s *)qword_1008F75F0;
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
              sub_100689E44((uint64_t)v8, (uint64_t)&v20, (uint64_t)[v10 length], v12);
            }
          }

          goto LABEL_24;
        }

        uint64_t v19 = qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          int v20 = 67109890;
          *(_DWORD *)id v21 = v11;
          *(_WORD *)&void v21[4] = 2112;
          *(void *)&void v21[6] = v6;
          *(_WORD *)&v21[14] = 2112;
          *(void *)&v21[16] = v8;
          *(_WORD *)&v21[24] = 2112;
          *(void *)&v21[26] = v10;
          BOOL v16 = "handlePeerSetCustomPropertyMsg not calling LeDeviceManager::setCustomProperty. allowInternalRestrictedSe"
                "rvices:%d id:%@ prop:%@ value:%@";
          uint64_t v17 = (os_log_s *)v19;
          uint32_t v18 = 38;
          goto LABEL_20;
        }
      }

      else
      {
        uint64_t v13 = qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          uint64_t v14 = *(void *)(a1 + 96);
          uint64_t v15 = *(void *)(a1 + 48);
          int v20 = 138412802;
          *(void *)id v21 = v14;
          *(_WORD *)&v21[8] = 2112;
          *(void *)&v21[10] = v15;
          *(_WORD *)&v21[18] = 2112;
          *(void *)&v21[20] = v6;
          BOOL v16 = "App %@ for user %@ is not allowed to access %@";
          uint64_t v17 = (os_log_s *)v13;
          uint32_t v18 = 32;
LABEL_20:
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v20, v18);
        }
      }

void sub_1004DABBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004DABF0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    uint64_t v7 = sub_100404FE8();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _WORD v8[2] = sub_1004E98EC;
    v8[3] = &unk_1008877F0;
    uint64_t v10 = a1;
    xpc_object_t v11 = value;
    id v9 = v6;
    xpc_object_t v12 = xdict;
    sub_1004054B4(v7, v8);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689E18();
  }
}

void sub_1004DACDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1004DACFC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    uint64_t v7 = sub_100404FE8();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _WORD v8[2] = sub_1004E9B1C;
    v8[3] = &unk_10087FBF0;
    uint64_t v10 = a1;
    id v9 = v6;
    xpc_object_t v11 = xdict;
    sub_1004054B4(v7, v8);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689E18();
  }
}

void sub_1004DADDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1004DADFC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v13 = 0LL;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  int v16 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    uint64_t v7 = sub_100404FE8();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_1004EC3E0;
    void v9[3] = &unk_10088FED8;
    xpc_object_t v11 = &v13;
    uint64_t v12 = a1;
    id v10 = v6;
    sub_1004054B4(v7, v9);
  }

  int v8 = *((_DWORD *)v14 + 6);
  if (v8) {
    sub_10043F3F4(a1, 180LL, xdict, v8);
  }

  _Block_object_dispose(&v13, 8);
}

void sub_1004DAEF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004DAF2C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    uint64_t v7 = sub_1002E8D94();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 632LL))(v7, *(void *)(a1 + 96), 4LL);
    if (!sub_10025D848(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgUUIDs"))
    {
      uint64_t v14 = sub_100404FE8();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3321888768LL;
      void v15[2] = sub_1004EC44C;
      v15[3] = &unk_10089D4B8;
      uint64_t v17 = a1;
      id v16 = v6;
      std::stringbuf::string_type __p = 0LL;
      uint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
      sub_100050EE8((char *)&__p, v22, v23, 0xCCCCCCCCCCCCCCCDLL * (((char *)v23 - (char *)v22) >> 2));
      xpc_object_t v21 = xdict;
      sub_1004054B4(v14, v15);
      if (__p)
      {
        uint64_t v19 = __p;
        operator delete(__p);
      }
    }
  }

  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }

void sub_1004DB080( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }

  uint64_t v24 = *(void **)(v22 - 56);
  if (v24)
  {
    *(void *)(v22 - 4_Block_object_dispose(va, 8) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_1004DB0C8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v14 = 0LL;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000LL;
  int v17 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    uint64_t v7 = sub_100404FE8();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    _DWORD v10[2] = sub_1004E9DD8;
    v10[3] = &unk_10088FED8;
    uint64_t v12 = &v14;
    uint64_t v13 = a1;
    id v11 = v6;
    sub_1004054B4(v7, v10);
  }

  int v8 = *((_DWORD *)v15 + 6);
  if (v8) {
    BOOL v9 = v8 == 10;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9) {
    sub_10043F3F4(a1, 182LL, xdict, v8);
  }

  _Block_object_dispose(&v14, 8);
}

void sub_1004DB1C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004DB200(uint64_t a1, void *a2)
{
  uint64_t v36 = 0LL;
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  __int128 v35 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  id v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = sub_1002E8D94();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 632LL))(v7, *(void *)(a1 + 96), 6LL);
  if (!sub_10025D848(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgPSM"))
  {
    if (v6)
    {
      uint64_t v33 = 0LL;
      uint64_t v34 = 0LL;
      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
      uint64_t v30 = 0LL;
      if (!sub_10025D848(v35, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBL2CAPChannelInMTU"))
      {
        uint64_t v20 = sub_100404FE8();
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472LL;
        void v21[2] = sub_1004E3728;
        void v21[3] = &unk_10089D1F8;
        uint64_t v23 = a1;
        uint64_t v24 = v36;
        uint64_t v25 = v34;
        uint64_t v26 = v33;
        uint64_t v27 = v32;
        uint64_t v28 = v31;
        id v22 = v6;
        uint64_t v29 = v30;
        sub_1004054B4(v20, v21);
      }
    }
  }
}

void sub_1004DB400( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29)
{
  _Unwind_Resume(a1);
}

void sub_1004DB42C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v17 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (!sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgPSM") && v5)
  {
    uint64_t v12 = sub_100404FE8();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1004E3838;
    v13[3] = &unk_10087FBF0;
    uint64_t v15 = a1;
    uint64_t v16 = v17;
    id v14 = v5;
    sub_1004054B4(v12, v13);
  }
}

void sub_1004DB524( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1004DB544(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = sub_10025E1C8(value, "kCBMsgArgName");
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v5)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      uint64_t v8 = sub_100404FE8();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      void v12[2] = sub_1004ED610;
      v12[3] = &unk_100880D48;
      uint64_t v15 = a1;
      id v13 = v5;
      id v14 = v7;
      sub_1004054B4(v8, v12);
    }

    else
    {
      uint64_t v9 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void *)(a1 + 96);
        uint64_t v11 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v17 = v10;
        __int16 v18 = 2112;
        uint64_t v19 = v11;
        __int16 v20 = 2112;
        xpc_object_t v21 = v5;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }
    }
  }
}

void sub_1004DB708( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1004DB744(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v3 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = sub_10025E2E0(value, "kCBMsgArgSetHighPriorityStream");
  id v6 = sub_10025E254(value, "kCBMsgArgHighPriorityStreamDuration");
  uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = (void *)v7;
  if (v4)
  {
    if (!v7 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100689EF0();
    }
    if (qword_1008D9278 != -1) {
      dispatch_once(&qword_1008D9278, &stru_10089D9B0);
    }
    uint64_t v9 = qword_1008D9270;
    unsigned __int16 v10 = [v8 intValue];
    sub_1004138B8(v9, v11, v5, v10);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689EC4();
  }
}

void sub_1004DB8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004DB8C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = sub_10025E150(value, "kCBFastLeConnectionInfoData");
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  LOBYTE(value) = sub_10025E2E0(value, "kCBMsgArgEnable");
  v18[0] = 0LL;
  v18[1] = v18;
  void v18[2] = 0x2020000000LL;
  xpc_object_t reply = 0LL;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v9 = sub_100404FE8();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1004ED798;
  v12[3] = &unk_10089D6F0;
  uint64_t v16 = a1;
  id v10 = v6;
  id v13 = v10;
  char v17 = (char)value;
  id v11 = v8;
  id v14 = v11;
  uint64_t v15 = v18;
  sub_100405384(v9, v12);

  _Block_object_dispose(v18, 8);
}

void sub_1004DBA00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004DBA4C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgServiceStartHandle"))
  {
    uint64_t v13 = sub_100404FE8();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3321888768LL;
    void v14[2] = sub_1004EC6E4;
    v14[3] = &unk_10089D648;
    uint64_t v16 = a1;
    id v15 = v12;
    uint64_t v17 = v27;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    sub_100050EE8((char *)&__p, v23, v24, 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (char *)v23) >> 2));
    uint64_t v21 = v26;
    xpc_object_t v22 = xdict;
    sub_1004054B4(v13, v14);
    if (__p)
    {
      uint64_t v19 = __p;
      operator delete(__p);
    }
  }

  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }

void sub_1004DBBC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }

  uint64_t v31 = *(void **)(v29 - 88);
  if (v31)
  {
    *(void *)(v29 - 80) = v31;
    operator delete(v31);
  }

  _Unwind_Resume(a1);
}

void sub_1004DBC0C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgServiceStartHandle"))
  {
    uint64_t v13 = sub_100404FE8();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3321888768LL;
    void v14[2] = sub_1004EC8D4;
    v14[3] = &unk_10089D648;
    uint64_t v16 = a1;
    id v15 = v12;
    uint64_t v17 = v27;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    sub_100050EE8((char *)&__p, v23, v24, 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (char *)v23) >> 2));
    uint64_t v21 = v26;
    xpc_object_t v22 = xdict;
    sub_1004054B4(v13, v14);
    if (__p)
    {
      uint64_t v19 = __p;
      operator delete(__p);
    }
  }

  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }

void sub_1004DBD84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }

  uint64_t v31 = *(void **)(v29 - 88);
  if (v31)
  {
    *(void *)(v29 - 80) = v31;
    operator delete(v31);
  }

  _Unwind_Resume(a1);
}

void sub_1004DBDCC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    uint64_t v13 = sub_100404FE8();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1004ECA94;
    v14[3] = &unk_10089D398;
    uint64_t v16 = a1;
    id v15 = v12;
    uint64_t v17 = v21;
    uint64_t v18 = v20;
    xpc_object_t v19 = xdict;
    sub_1004054B4(v13, v14);
  }
}

void sub_1004DBED4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1004DBEF4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v24 = &off_10087FAA8;
  uint64_t v25 = 0LL;
  uint64_t v23 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    uint64_t v13 = sub_100404FE8();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3321888768LL;
    void v14[2] = sub_1004ECC68;
    v14[3] = &unk_10089D680;
    uint64_t v16 = a1;
    id v15 = v12;
    uint64_t v17 = v27;
    uint64_t v18 = v23;
    uint64_t v19 = v26;
    uint64_t v20 = &off_10087FAA8;
    uint64_t v21 = v25;
    xpc_object_t v22 = xdict;
    sub_1004054B4(v13, v14);
    uint64_t v20 = &off_10087FAA8;
    if (v21) {
      sub_1002CD254(v21);
    }
  }

  uint64_t v24 = &off_10087FAA8;
  if (v25) {
    sub_1002CD254(v25);
  }
}

void sub_1004DC074( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26)
{
  uint64_t v30 = *(unsigned int **)(v28 - 72);
  *(void *)(v28 - 80) = v27;
  if (v30) {
    sub_1002CD254(v30);
  }
  _Unwind_Resume(a1);
}

void sub_1004DC0C8(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v20 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    uint64_t v13 = sub_100404FE8();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1004ECEAC;
    v14[3] = &unk_10089D398;
    uint64_t v16 = a1;
    id v15 = v12;
    uint64_t v17 = v22;
    uint64_t v18 = v20;
    xpc_object_t v19 = xdict;
    sub_1004054B4(v13, v14);
  }
}

void sub_1004DC1E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1004DC204(uint64_t a1, void *a2)
{
  uint64_t v19 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    uint64_t v13 = sub_100404FE8();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1004ED0A0;
    v14[3] = &unk_1008877F0;
    uint64_t v16 = a1;
    id v15 = v12;
    uint64_t v17 = v19;
    uint64_t v18 = a2;
    sub_1004054B4(v13, v14);
  }
}

void sub_1004DC328( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1004DC350(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v22 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      if (!sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgDescriptorHandle"))
      {
        uint64_t v13 = sub_100404FE8();
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        void v17[2] = sub_1004ED270;
        v17[3] = &unk_1008877F0;
        uint64_t v19 = a1;
        id v18 = v6;
        uint64_t v20 = v22;
        xpc_object_t v21 = xdict;
        sub_1004054B4(v13, v17);
      }
    }

    else
    {
      id v14 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 96);
        uint64_t v16 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v24 = v15;
        __int16 v25 = 2112;
        uint64_t v26 = v16;
        __int16 v27 = 2112;
        uint64_t v28 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }
    }
  }
}

void sub_1004DC520( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1004DC548(uint64_t a1, void *a2)
{
  uint64_t v26 = 0LL;
  uint64_t v24 = &off_10087FAA8;
  __int16 v25 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      if (!sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgDescriptorHandle"))
      {
        uint64_t v13 = sub_100404FE8();
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3321888768LL;
        void v17[2] = sub_1004ED440;
        v17[3] = &unk_10089D6B8;
        uint64_t v19 = a1;
        id v18 = v6;
        uint64_t v20 = v26;
        xpc_object_t v21 = &off_10087FAA8;
        uint64_t v22 = v25;
        uint64_t v23 = a2;
        sub_1004054B4(v13, v17);
        xpc_object_t v21 = &off_10087FAA8;
        if (v22) {
          sub_1002CD254(v22);
        }
      }
    }

    else
    {
      id v14 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 96);
        uint64_t v16 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v28 = v15;
        __int16 v29 = 2112;
        uint64_t v30 = v16;
        __int16 v31 = 2112;
        uint64_t v32 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }
    }
  }

  uint64_t v24 = &off_10087FAA8;
  if (v25) {
    sub_1002CD254(v25);
  }
}

void sub_1004DC788( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, unsigned int *a27)
{
  if (a27) {
    sub_1002CD254(a27);
  }
  _Unwind_Resume(a1);
}

void sub_1004DC7D8(uint64_t a1, void *a2)
{
  id v4 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "handleTrackPeripheralMsg";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v65 = 0x2020000000LL;
  int v66 = 1;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64_t v6 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v60 = 0LL;
  char v61 = 0LL;
  uint64_t v58 = 1LL;
  uint64_t v59 = 0LL;
  uint64_t v56 = 0LL;
  uint64_t v57 = 0LL;
  uint64_t v54 = 0LL;
  uint64_t v55 = 0LL;
  uint64_t v52 = 0LL;
  uint64_t v53 = 0LL;
  uint64_t v50 = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v49 = 0LL;
  uint64_t v46 = 0LL;
  uint64_t v47 = 0LL;
  uint64_t v45 = 0LL;
  if (v13)
  {
    int v14 = sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
    *(_DWORD *)(*((void *)&buf + 1) + 24LL) = v14;
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689F48();
      }
    }

    else
    {
      sub_10025D848(v61, 0, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBTrackingOptionType");
      unsigned __int8 v21 = v60;
      uint64_t v22 = *((void *)&buf + 1);
      if (v60 >= 101)
      {
        *(_DWORD *)(*((void *)&buf + 1) + 24LL) = 3;
        uint64_t v23 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v62 = 67109120;
          int v63 = v21;
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Unsupported apply type: %d", v62, 8u);
          uint64_t v22 = *((void *)&buf + 1);
        }
      }

      if (!*(_DWORD *)(v22 + 24))
      {
        uint64_t v24 = sub_100404FE8();
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472LL;
        _OWORD v25[2] = sub_1004E9040;
        void v25[3] = &unk_10089D558;
        p___int128 buf = &buf;
        uint64_t v28 = a1;
        id v26 = v13;
        uint64_t v29 = v60;
        uint64_t v30 = v59;
        uint64_t v31 = v58;
        uint64_t v32 = v57;
        uint64_t v33 = v56;
        uint64_t v34 = v55;
        uint64_t v35 = v54;
        uint64_t v36 = v53;
        uint64_t v37 = v52;
        uint64_t v38 = v51;
        uint64_t v39 = v50;
        uint64_t v40 = v49;
        uint64_t v41 = v48;
        uint64_t v42 = v47;
        uint64_t v43 = v46;
        uint64_t v44 = v45;
        sub_1004054B4(v24, v25);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689F1C();
  }

  _Block_object_dispose(&buf, 8);
}

void sub_1004DCBF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  _Block_object_dispose((const void *)(v64 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1004DCC30(uint64_t a1, void *a2)
{
  id v4 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315138;
    *(void **)((char *)buf + 4) = "handleStopTrackingPeripheralMsg";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)buf, 0xCu);
  }

  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64_t v6 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v25 = 0LL;
  buf[0] = 0LL;
  if (v13)
  {
    if (sub_10025D848(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions"))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100689F48();
      }
    }

    else
    {
      sub_10025D848(buf[0], 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBTrackingOptionType");
      uint64_t v20 = sub_100404FE8();
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      void v21[2] = sub_1004E9108;
      void v21[3] = &unk_10087FBF0;
      uint64_t v23 = a1;
      id v22 = v13;
      uint64_t v24 = v25;
      sub_1004054B4(v20, v21);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100689F1C();
  }
}

void sub_1004DCE40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1004DCE68(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    id v4 = reply;
    __int16 v6 = 0;
    int bytes = 0;
    xpc_dictionary_set_data(reply, "kCBMsgArgAddressString", &bytes, 6uLL);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v4);
    xpc_release(v4);
  }

void sub_1004DCECC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v91 = 0LL;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_10025E0F0(v4, "kCBMsgArgDeviceUUID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  int64_t value = 0LL;
  uint64_t v90 = 0LL;
  if (*(int *)(a1 + 80) <= 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(*(void *)(a1 + 128), (uint64_t)v93);
      sub_10068A00C();
    }

    goto LABEL_41;
  }

  int v13 = sub_10025D848(v4, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
  if (!v13)
  {
    id v14 = sub_10025E1C8(v91, "kCBLePowerControlCmd");
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    int v16 = sub_10025E2E0(v91, "kCBlePowerControlWait4Result");
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    uint64_t v17 = off_1008D5F08;
    sub_100241F90(v93, v12);
    sub_100599890((uint64_t)v17, (unsigned __int8 *)v93, &v90);
    if ([v15 isEqualToString:@"setLeTxReportEnable"])
    {
      LOBYTE(v93[0]) = 0;
      LOBYTE(v92[0]) = 0;
      int v24 = sub_10025D848(v91, 0, v18, v19, v20, v21, v22, v23, (uint64_t)"kCBLePowerControlLocalEnable");
      if (!v24)
      {
        HIBYTE(v8_Block_object_dispose(va, 8) = 0;
        sub_100242CA4((_BYTE *)&v88 + 1);
        unsigned int v31 = sub_1001214B4(249, (uint64_t)sub_1004E7778, v25, v26, v27, v28, v29, v30, v90);
        sub_100242CD0((_BYTE *)&v88 + 1);
        sub_100242CD8((_BYTE *)&v88 + 1);
        unsigned int v32 = 249;
LABEL_18:
        uint64_t v51 = 0xFFFFFFFFLL;
LABEL_19:
        if ((v16 & 1) == 0) {
          goto LABEL_35;
        }
        if (!v31)
        {
          memset(v93, 0, sizeof(v93));
          sub_100242DC4(v93);
          v92[0] = 0LL;
          v92[1] = 0LL;
          sub_100242F28((uint64_t)v92, (uint64_t)v93);
          if (sub_1002431A4(&stru_1008F7520, v92, 0xBB8uLL)) {
            unsigned int v31 = 0;
          }
          else {
            unsigned int v31 = 112;
          }
          sub_100242FAC((uint64_t)v92);
          sub_100242E28(v93);
        }

void sub_1004DD634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004DD6E4()
{
  if (MGCopyAnswer(@"ReleaseType", 0LL))
  {
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10089D8F0);
    }
    BOOL v0 = off_1008D60A8;
    sub_10002418C(&__p, "BT_CONTROLLER_CORE_DUMP");
    sub_1004319D0((uint64_t)v0, 3703, &__p);
  }

  uint64_t v1 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "CBUtil controller core dump not supported on customer / production / user builds",  buf,  2u);
  }

void sub_1004DD7C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004DD7DC(uint64_t a1, unsigned int a2)
{
  uint64_t result = 1LL;
  if (a2 > 0x26 || ((1LL << a2) & 0x7300004400LL) == 0)
  {
    BOOL v4 = a2 == 75 || a2 == 43;
    return a2 == 170 || v4;
  }

  return result;
}

BOOL sub_1004DD824(uint64_t a1, unsigned int a2)
{
  BOOL result = 1LL;
  if (a2 > 0x29 || ((1LL << a2) & 0x20000000300LL) == 0) {
    return a2 == 208;
  }
  return result;
}

void sub_1004DD85C(uint64_t a1, uint64_t **a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *a2;
  if (*a2 != a2[1])
  {
    do
    {
      if (qword_1008D5F60 != -1) {
        dispatch_once(&qword_1008D5F60, &stru_10089D850);
      }
      uint64_t v7 = qword_1008D5F58;
      uint64_t v8 = *v6;
      __n128 v13 = *(__n128 *)(*v6 + 72);
      int v14 = *(_DWORD *)(v8 + 88);
      sub_100634334(&v12, &v13);
      if (sub_100556588( v7,  (unsigned __int8 *)&v12,  *(unsigned __int8 *)(a1 + 183),  *(unsigned int *)(a1 + 196),  v5))
      {
        ++v6;
        uint64_t v9 = a2[1];
      }

      else
      {
        uint64_t v10 = a2[1];
        uint64_t v11 = (char *)v10 - (char *)(v6 + 1);
        if (v10 != v6 + 1) {
          memmove(v6, v6 + 1, (char *)v10 - (char *)(v6 + 1));
        }
        uint64_t v9 = (uint64_t *)((char *)v6 + v11);
        a2[1] = (uint64_t *)((char *)v6 + v11);
      }
    }

    while (v6 != v9);
  }
}

void sub_1004DD998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004DD9B0(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (*(int *)(a1 + 80) <= 0)
  {
    __n128 v15 = 0uLL;
    int v16 = 0;
    if (qword_1008D5F60 != -1) {
      dispatch_once(&qword_1008D5F60, &stru_10089D850);
    }
    sub_100556650(qword_1008D5F58, v5, a3, &v15);
    __int128 v13 = xmmword_1006BDBD0;
    int v14 = 0;
    if (sub_1001BEC7C((unsigned __int8 *)&v15, (unsigned __int8 *)&v13))
    {
      if (qword_1008D5F60 != -1) {
        dispatch_once(&qword_1008D5F60, &stru_10089D850);
      }
      uint64_t v6 = qword_1008D5F58;
      __int128 v9 = xmmword_1006BDBD0;
      int v10 = 0;
      sub_100634334((__n128 *)buf, (__n128 *)&v9);
      if (sub_10055613C(v6, v5, buf, a3))
      {
        uint64_t v7 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v12[0] = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "External Characteristic Restricted for device %@",  buf,  0xCu);
          uint64_t v7 = (os_log_s *)qword_1008F75F0;
        }

        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109378;
          LODWORD(v12[0]) = 0;
          WORD2(v12[0]) = 2112;
          *(void *)((char *)v12 + 6) = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "External Restricted Characteristic restricted:%d for device %@",  buf,  0x12u);
        }
      }
    }
  }

  return 0LL;
}

void sub_1004DDBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004DDBBC(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  __n128 v18 = 0uLL;
  int v19 = 0;
  sub_100556650(qword_1008D5F58, v5, a3, &v18);
  if (!v18.n128_u8[0])
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A130();
    }
    goto LABEL_13;
  }

  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  if (!sub_100556588( qword_1008D5F58,  (unsigned __int8 *)&v18,  *(unsigned __int8 *)(a1 + 183),  *(unsigned int *)(a1 + 196),  v5))
  {
    uint64_t v7 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      __int128 v9 = (void *)(a1 + 56);
      int v10 = 136446722;
      uint64_t v11 = v9;
      __int16 v12 = 1024;
      unsigned int v13 = a3;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Session %{public}s isn't entitled to access restricted handle 0x%04x on device %@! ಠ_ಠ",  (uint8_t *)&v10,  0x1Cu);
    }

void sub_1004DDDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004DDDC8(uint64_t a1)
{
  __int128 v3 = 0u;
  __int128 v4 = 0u;
  xpc_connection_get_audit_token(*(void *)(a1 + 16), &v3);
  v2[0] = v3;
  v2[1] = v4;
  return TCCAccessPreflightWithAuditToken(kTCCServiceBluetoothAlways, v2, 0LL);
}

BOOL sub_1004DDE14(uint64_t a1)
{
  __int128 v3 = 0u;
  __int128 v4 = 0u;
  xpc_connection_get_audit_token(*(void *)(a1 + 16), &v3);
  v2[0] = v3;
  v2[1] = v4;
  return TCCAccessCheckAuditToken(kTCCServiceBluetoothAlways, v2, 0LL) != 0;
}

void sub_1004DDE68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 128)) {
    return;
  }
  if (!sub_100487D1C())
  {
LABEL_15:
    sub_1004DE328((unint64_t *)v1);
    return;
  }

  id v2 = *(id *)(v1 + 96);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  __int128 v3 = (void *)(v1 + 56);
  __int128 v4 = off_1008D67C0;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
  nullsub_63(v4, v5);

  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  int v6 = sub_10027D7E8((uint64_t)off_1008D67C0, *(void *)(v1 + 128));
  uint64_t v7 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v1 + 175);
    int v9 = *(unsigned __int8 *)(v1 + 176);
    int v10 = *(unsigned __int8 *)(v1 + 177);
    int v11 = *(unsigned __int8 *)(v1 + 178);
    int v28 = 67110144;
    *(_DWORD *)uint64_t v29 = v8;
    *(_WORD *)&void v29[4] = 1024;
    *(_DWORD *)&v29[6] = v9;
    __int16 v30 = 1024;
    int v31 = v10;
    __int16 v32 = 1024;
    int v33 = v11;
    __int16 v34 = 1024;
    int v35 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "handleTCCDone fDeviceAccessForMediaSession:%d fDeviceAccessForMediaExtension:%d fDeviceAccessPerAccessorySession:% d fDeviceAccessPerAccessoryExtension:%d sessionType:%d",  (uint8_t *)&v28,  0x20u);
  }

  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t v12 = sub_10027D798((uint64_t)off_1008D67C0, *(void *)(v1 + 128));
  if (*(_BYTE *)(v1 + 175) || *(_BYTE *)(v1 + 176) && !v6 || *(_BYTE *)(v1 + 177))
  {
    int v13 = 1;
  }

  else
  {
    BOOL v27 = *(_BYTE *)(v1 + 178) && v6 == 0;
    int v13 = v27;
  }

  if (((sub_1004DE290(v12, v2) | v13) & 1) != 0 || *(_BYTE *)(v1 + 88))
  {
    __int16 v14 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 138412290;
      *(void *)uint64_t v29 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Overriding TCC for bundleIdentifier %@",  (uint8_t *)&v28,  0xCu);
    }

    BOOL v15 = 1;
  }

  else
  {
    int v24 = sub_1004DDDC8(v1);
    uint64_t v25 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = "unknown";
      if (v24 == 1) {
        uint64_t v26 = "denied";
      }
      if (!v24) {
        uint64_t v26 = "granted";
      }
      int v28 = 136315138;
      *(void *)uint64_t v29 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Bluetooth user permission alwaysAuth: %s",  (uint8_t *)&v28,  0xCu);
    }

    BOOL v15 = sub_1004DDE14(v1);
  }

  __int128 v16 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = *(unsigned __int8 *)(v1 + 194);
    int v18 = *(unsigned __int8 *)(v1 + 195);
    int v19 = *(unsigned __int8 *)(v1 + 175);
    int v20 = *(unsigned __int8 *)(v1 + 176);
    int v21 = *(unsigned __int8 *)(v1 + 177);
    int v22 = *(unsigned __int8 *)(v1 + 178);
    int v28 = 67111168;
    *(_DWORD *)uint64_t v29 = v15;
    *(_WORD *)&void v29[4] = 1024;
    *(_DWORD *)&v29[6] = v17;
    __int16 v30 = 1024;
    int v31 = v18;
    __int16 v32 = 1024;
    int v33 = v13;
    __int16 v34 = 1024;
    int v35 = v19;
    __int16 v36 = 1024;
    int v37 = v20;
    __int16 v38 = 1024;
    int v39 = v21;
    __int16 v40 = 1024;
    int v41 = v22;
    __int16 v42 = 1024;
    int v43 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "BluetoothUserPrivacy: alwaysAccess: %d, isCBPrivacySupported: %d, medicalDeviceOrStateRestorationAppPendingTCC:%d deviceAccessExempt:%d fDeviceAccessForMediaSession:%d fDeviceAccessForMediaExtension:%d fDeviceAccessPerAccessoryS ession:%d fDeviceAccessPerAccessoryExtension:%d sessionType:%d",  (uint8_t *)&v28,  0x38u);
  }

  *(_BYTE *)(v1 + 195) = 0;
  *(_BYTE *)(v1 + 193) = v15;
  if (v15)
  {
LABEL_14:

    goto LABEL_15;
  }

  if (*(_BYTE *)(v1 + 194)) {
    unsigned int v23 = 3;
  }
  else {
    unsigned int v23 = 4;
  }
  sub_10043F468(v1, v23);
}

void sub_1004DE258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1004DE290(uint64_t a1, void *a2)
{
  id v2 = a2;
  __int128 v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  @"com.apple.AppStore",  @"com.apple.Preferences",  @"com.apple.Bridge",  0LL));
  id v4 = [v3 containsObject:v2];

  return v4;
}

void sub_1004DE30C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004DE328(unint64_t *a1)
{
  unsigned int v12 = 0;
  unsigned __int8 v11 = 0;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_100278A5C((uint64_t)off_1008D67C0, a1[16], &v12, &v11);
  unint64_t v2 = a1[16];
  if (*((_BYTE *)a1 + 186) && v12 == 1) {
    (*(void (**)(unint64_t *, unint64_t, void))(*a1 + 312))(a1, v2, v11);
  }
  else {
    (*(void (**)(unint64_t *, unint64_t, void))(*a1 + 304))(a1, v2, v12);
  }
  if (v12 == 1 || v11)
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    uint64_t v3 = *((void *)off_1008D5F08 + 37);
    uint64_t v4 = *((void *)off_1008D5F08 + 39);
    unint64_t v5 = a1[16];
    v10[0] = *((void *)off_1008D5F08 + 36);
    v10[1] = v3;
    _DWORD v10[2] = v4;
    (*(void (**)(unint64_t *, unint64_t, void *))(*a1 + 176))(a1, v5, v10);
    if (*((_BYTE *)a1 + 169))
    {
      uint64_t v6 = sub_100404FE8();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      void v9[2] = sub_1004DE4F8;
      void v9[3] = &unk_10087EB20;
      void v9[4] = a1;
      sub_100405384(v6, v9);
    }

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    sub_100279DCC((uint64_t)off_1008D67C0, a1[16]);
    if (*((_BYTE *)a1 + 104))
    {
      uint64_t v7 = sub_100404FE8();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      _WORD v8[2] = sub_1004DE548;
      v8[3] = &unk_10087EB20;
      void v8[4] = a1;
      sub_100405384(v7, v8);
    }
  }

void sub_1004DE4F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_100282B3C((uint64_t)off_1008D67C0, *(void *)(v1 + 128));
}

void sub_1004DE548(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10028E2EC((uint64_t)off_1008D67C0, *(void *)(v1 + 128));
}

void sub_1004DE598(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 185);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 132);
  uint64_t v5 = *(unsigned __int8 *)(v2 + 186);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 133);
  uint64_t v7 = *(unsigned __int8 *)(v2 + 88);
  uint64_t v18 = *(void *)(a1 + 80);
  uint64_t v19 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 88);
  unint64_t v8 = sub_10025D500(v2) | ((unint64_t)*(unsigned __int8 *)(v2 + 175) << 8) | ((unint64_t)*(unsigned __int8 *)(v2 + 86) << 16) | ((unint64_t)*(unsigned __int8 *)(v2 + 104) << 40);
  uint64_t v9 = *(unsigned __int8 *)(v2 + 177);
  uint64_t v10 = *(unsigned __int8 *)(v2 + 87);
  uint64_t v21 = v5;
  uint64_t v22 = v3;
  uint64_t v20 = v6;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  unint64_t v11 = v8 | (v9 << 24);
  unsigned int v12 = off_1008D67C0;
  int v13 = *(void **)(v2 + 48);
  __int128 v14 = *(_OWORD *)(a1 + 112);
  v24[0] = *(_OWORD *)(a1 + 96);
  v24[1] = v14;
  unsigned int v15 = *(_DWORD *)(v2 + 40);
  __int128 v16 = *(void **)(a1 + 32);
  else {
    std::string __p = *(std::string *)(v2 + 56);
  }
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = sub_100279FD4( (uint64_t)v12,  v13,  v2 + 144,  (uint64_t)v24,  v15,  v16,  &__p,  *(_DWORD *)(a1 + 128),  *(void **)(a1 + 40),  (_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  (_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL),  ((unint64_t)(v17 != 0) << 56) | ((unint64_t)(v18 != 0) << 48) | (v7 << 40) | (v20 << 32) | (v21 << 24) | (v22 << 16) | (v4 << 8) | (v19 != 0),  v11,  (v11 | (v10 << 32)) >> 32,  0LL);
}

void sub_1004DE76C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004DE788(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    uint64_t v2 = sub_100404FE8();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    void v3[2] = sub_1004DE7F4;
    uint64_t v3[3] = &unk_10087EB20;
    void v3[4] = a1;
    sub_1004054B4(v2, v3);
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  }

uint64_t sub_1004DE7F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_10089D8B0);
  }
  sub_100367154(qword_1008D9048, *(void *)(v1 + 128));
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  return sub_100277D34((uint64_t)off_1008D67C0, *(void *)(v1 + 128), 0);
}

void sub_1004DE880(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      unsigned int v5 = 4;
      break;
    case 1:
      unsigned int v5 = 5;
      break;
    case 2:
    case 4:
      unsigned int v5 = *(_DWORD *)(a1 + 136);
      break;
    case 3:
      unsigned int v5 = 2;
      break;
    default:
      unsigned int v5 = 0;
      break;
  }

  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  int v6 = sub_10027D798((uint64_t)off_1008D67C0, *(void *)(a1 + 128));
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  int v7 = sub_10027D7E8((uint64_t)off_1008D67C0, *(void *)(a1 + 128));
  int v8 = *(unsigned __int8 *)(a1 + 175);
  if (*(_BYTE *)(a1 + 175) || *(_BYTE *)(a1 + 176) && !v7 || *(_BYTE *)(a1 + 177))
  {
    int v9 = 1;
  }

  else
  {
    if (*(_BYTE *)(a1 + 178)) {
      BOOL v19 = v7 == 0;
    }
    else {
      BOOL v19 = 0;
    }
    int v9 = v19;
  }

  uint64_t v10 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a1 + 193);
    int v12 = *(unsigned __int8 *)(a1 + 195);
    int v13 = *(unsigned __int8 *)(a1 + 176);
    int v14 = *(unsigned __int8 *)(a1 + 177);
    int v15 = *(unsigned __int8 *)(a1 + 178);
    *(_DWORD *)__int128 buf = 67111424;
    int v22 = a3;
    __int16 v23 = 1024;
    unsigned int v24 = v5;
    __int16 v25 = 1024;
    int v26 = v11;
    __int16 v27 = 1024;
    int v28 = v12;
    __int16 v29 = 1024;
    int v30 = v8;
    __int16 v31 = 1024;
    int v32 = v13;
    __int16 v33 = 1024;
    int v34 = v14;
    __int16 v35 = 1024;
    int v36 = v15;
    __int16 v37 = 1024;
    int v38 = v6;
    __int16 v39 = 1024;
    int v40 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Power state changed. PowerState:%d managerState:%d fUserAuthorization: %d\t medicalDeviceorStateRestorationAppPend ingTCC:%d fDeviceAccessForMediaSession:%d fDeviceAccessForMediaExtension:%d fDeviceAccessPerAccessorySession:%d fD eviceAccessPerAccessoryExtension:%d appState:%02X deviceAccessExempt:%d",  buf,  0x3Eu);
  }

  sub_10043F468(a1, v5);
  if (a3 == 1)
  {
    sub_1004DEB18(a1);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    uint64_t v16 = *((void *)off_1008D5F08 + 37);
    uint64_t v17 = *((void *)off_1008D5F08 + 39);
    uint64_t v18 = *(void *)(a1 + 128);
    v20[0] = *((void *)off_1008D5F08 + 36);
    v20[1] = v16;
    v20[2] = v17;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 176LL))(a1, v18, v20);
  }

void sub_1004DEB18(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v3 = sub_1002E6BF0();
  uint64_t v4 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 568LL))(v4))
  {
    uint64_t v5 = sub_1002E6BF0();
  }

  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_value(v6, "kCBMsgArgSupportedFeatures", v2);
  sub_10043F1F4(a1, 29LL, v6, 1);
  xpc_release(v2);
}

void sub_1004DEBF0(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1004DEBF8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    unsigned int v3 = 10;
  }
  else {
    unsigned int v3 = 5;
  }
  sub_10043F468(a1, v3);
}

void sub_1004DEC0C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1 - 144;
  if (a3) {
    unsigned int v4 = 10;
  }
  else {
    unsigned int v4 = 5;
  }
  sub_10043F468(v3, v4);
}

void sub_1004DEC24(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1004DEC2C(uint64_t a1, uint64_t a2, int a3)
{
}

xpc_object_t sub_1004DEC38(void *a1, int a2, int a3)
{
  id v5 = a1;
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v5) {
    goto LABEL_69;
  }
  id v52 = v5;
  id v7 = v5;
  *(void *)uuid = 0LL;
  uint64_t v61 = 0LL;
  [v7 getUUIDBytes:uuid];
  xpc_dictionary_set_uuid(v6, "kCBMsgArgDeviceUUID", uuid);

  *(void *)uuid = 0LL;
  uint64_t v61 = 0LL;
  uint64_t v62 = 0LL;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  sub_1005CC0D4((uint64_t)off_1008D5F28, v7, (uint64_t)uuid);
  if (SHIBYTE(v62) < 0)
  {
    if (!v61) {
      goto LABEL_10;
    }
    int v8 = *(unsigned __int8 **)uuid;
  }

  else
  {
    if (!HIBYTE(v62)) {
      goto LABEL_10;
    }
    int v8 = uuid;
  }

  xpc_dictionary_set_string(v6, "kCBMsgArgName", (const char *)v8);
LABEL_10:
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  int v9 = off_1008D5F28;
  sub_10002418C(v57, "ANCSAuthorized");
  char v10 = sub_1005CE5A8((uint64_t)v9, v7, (uint64_t)v57);
  xpc_dictionary_set_BOOL(v6, "kCBMsgArgAncsAuthorization", v10);
  if ((v58 & 0x80000000) == 0)
  {
    if (!a2) {
      goto LABEL_20;
    }
LABEL_16:
    unsigned int v11 = sub_1004E0708(v7);
    xpc_dictionary_set_int64(v6, "kCBMsgArgPairingState", v11);
    if (qword_1008D9278 != -1) {
      dispatch_once(&qword_1008D9278, &stru_10089D9B0);
    }
    if (sub_100413550(qword_1008D9270, v7)) {
      xpc_dictionary_set_BOOL(v6, "kCBMsgArgConnectionState", 1);
    }
    goto LABEL_20;
  }

  operator delete(v57[0]);
  if (a2) {
    goto LABEL_16;
  }
LABEL_20:
  if (a3 >= 1)
  {
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_10089D990);
    }
    unsigned int v12 = sub_10038798C(qword_1008D9260, v7);
    xpc_dictionary_set_int64(v6, "kCBMsgArgATTMTU", v12);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    int v13 = off_1008D5F08;
    sub_100241F90(bytes, v7);
    char v14 = sub_10059A0AC((uint64_t)v13, bytes);
    xpc_dictionary_set_BOOL(v6, "kCBMsgArgIsLinkEncrypted", v14);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    int v15 = off_1008D5F08;
    sub_100241F90(bytes, v7);
    else {
      int64_t v16 = 1LL;
    }
    xpc_dictionary_set_int64(v6, "kCBMsgArgConnectionTransport", v16);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    uint64_t v17 = off_1008D5F08;
    sub_100241F90(bytes, v7);
    unsigned int v18 = sub_10059A15C((uint64_t)v17, bytes);
    xpc_dictionary_set_int64(v6, "kCBMsgArgConnectionRole", v18);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    BOOL v19 = sub_1005D4EDC((uint64_t)off_1008D5F28, v7);
    xpc_dictionary_set_int64(v6, "kCBMsgArgVisibleInSettings", !v19);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    id v20 = sub_1005D7650((uint64_t)off_1008D5F28, v7);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    if (v21)
    {
      uint64_t v49 = v21;
      id v22 = v21;
      *(void *)int bytes = 0LL;
      uint64_t v64 = 0LL;
      id v50 = v22;
      [v22 getUUIDBytes:bytes];
      xpc_dictionary_set_uuid(v6, "kCBMsgArgFindMyBeaconID", bytes);

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      id v23 = sub_1005D7D28((uint64_t)off_1008D5F28, v7);
      unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      id v51 = [v24 mutableCopy];

      if (v51)
      {
        id v25 = v51;
        id v26 = [v51 count];
        v48[1] = v48;
        __chkstk_darwin(v26, 8LL * (void)v26);
        int v28 = (char *)v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        bzero(v28, v27);
        __int128 v55 = 0u;
        __int128 v56 = 0u;
        __int128 v53 = 0u;
        __int128 v54 = 0u;
        id v29 = v25;
        size_t v30 = (size_t)[v29 countByEnumeratingWithState:&v53 objects:v59 count:16];
        if (v30)
        {
          uint64_t v31 = 0LL;
          uint64_t v32 = *(void *)v54;
          do
          {
            uint64_t v33 = 0LL;
            uint64_t v34 = v31;
            __int16 v35 = &v28[8 * v31];
            do
            {
              if (*(void *)v54 != v32) {
                objc_enumerationMutation(v29);
              }
              int v36 = *(void **)(*((void *)&v53 + 1) + 8 * v33);
              *(void *)int bytes = 0LL;
              uint64_t v64 = 0LL;
              [v36 getUUIDBytes:bytes];
              *(void *)&v35[8 * v33++] = xpc_data_create(bytes, 0x10uLL);
            }

            while (v30 != v33);
            size_t v30 = (size_t)[v29 countByEnumeratingWithState:&v53 objects:v59 count:16];
            uint64_t v31 = v34 + v33;
          }

          while (v30);
          size_t v30 = v34 + v33;
        }

        xpc_object_t v37 = xpc_array_create((xpc_object_t *)v28, v30);
        while (v30)
          xpc_release(*(xpc_object_t *)&v28[8 * v30-- - 8]);
        xpc_dictionary_set_value(v6, "kCBMsgArgFindMyGroupMembers", v37);
        xpc_release(v37);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      id v38 = sub_1005D7D88((uint64_t)off_1008D5F28, v7);
      __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      int v40 = v39;
      if (v39) {
        xpc_dictionary_set_string( v6, "kCBMsgArgFindMySerialNumberString", (const char *)[v39 UTF8String]);
      }
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      id v41 = sub_1005D7708((uint64_t)off_1008D5F28, v7);
      __int16 v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      int v43 = v42;
      if (v42)
      {
        id v44 = v42;
        *(void *)int bytes = 0LL;
        uint64_t v64 = 0LL;
        [v44 getUUIDBytes:bytes];
        xpc_dictionary_set_uuid(v6, "kCBMsgArgFindMyUserID", bytes);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      unsigned int v45 = sub_1005D7E40((uint64_t)off_1008D5F28, v7);
      xpc_dictionary_set_int64(v6, "kCBMsgArgFindMyPartNumber", v45);
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      unsigned int v46 = sub_1005D7EF4((uint64_t)off_1008D5F28, v7);
      xpc_dictionary_set_int64(v6, "kCBMsgArgFindMyManaged", v46);

      uint64_t v21 = v49;
    }
  }

  if (SHIBYTE(v62) < 0) {
    operator delete(*(void **)uuid);
  }
  id v5 = v52;
LABEL_69:

  return v6;
}

void sub_1004DF398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004DF490(uint64_t a1, int a2, void *a3, unsigned int a4)
{
  id v11 = a3;
  id v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a2);
    if (!a2)
    {
      xpc_dictionary_set_int64( *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  "kCBFastLeConnectionInfoVersion",  a4);
      xpc_dictionary_set_int64( *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24),  "kCBFastLeConnectionInfoLength",  (int64_t)[v11 length]);
      int v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      id v10 = v11;
      xpc_dictionary_set_data( v9,  "kCBFastLeConnectionInfoData",  [v10 bytes],  (size_t)[v10 length]);
    }

    xpc_connection_send_message( *(xpc_connection_t *)(v8 + 16),  *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }
}

void sub_1004DF5A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1004DF5BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 32))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    int64_t v3 = (int)sub_1005D9384( (uint64_t)off_1008D5F28,  *(void **)(a1 + 32),  *(unsigned __int8 *)(a1 + 64),  *(void **)(a1 + 40),  1);
  }

  else
  {
    int64_t v3 = 8LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
  if (reply)
  {
    id v5 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }

void sub_1004DF678(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    int64_t v3 = (int)sub_1005D9448((uint64_t)off_1008D5F28, *(void **)(a1 + 32));
  }

  else
  {
    int64_t v3 = 8LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    id v5 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }

void sub_1004DF728(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    int64_t v3 = (int)sub_1005D9664((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56) == 1);
  }

  else
  {
    int64_t v3 = 8LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    id v5 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }

void sub_1004DF7E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 32))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    uint64_t v3 = sub_1005CC198((uint64_t)off_1008D5F28, *(void **)(a1 + 32), 0);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    BOOL v4 = sub_1005CC2D8((uint64_t)off_1008D5F28, *(void **)(a1 + 32));
    uint64_t v5 = sub_1002E6E9C();
    int64_t v6 = (*(int (**)(uint64_t, uint64_t, BOOL, void, id))(*(void *)v5 + 1832))(v5, v3, v4, [*(id *)(a1 + 40) length], [*(id *)(a1 + 40) bytes]);
  }

  else
  {
    int64_t v6 = 8LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v8);
    xpc_release(v8);
  }

void sub_1004DF920(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    uint64_t v3 = sub_1005CC198((uint64_t)off_1008D5F28, *(void **)(a1 + 32), 0);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    BOOL v4 = sub_1005CC2D8((uint64_t)off_1008D5F28, *(void **)(a1 + 32));
    uint64_t v5 = sub_1002E6E9C();
    int64_t v6 = (*(int (**)(uint64_t, uint64_t, BOOL))(*(void *)v5 + 1840LL))(v5, v3, v4);
  }

  else
  {
    int64_t v6 = 8LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v8);
    xpc_release(v8);
  }

void sub_1004DFA30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (![*(id *)(a1 + 32) isEqualToString:@"config"])
  {
    if ([*(id *)(a1 + 32) isEqualToString:@"enable"])
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 64);
      if (v5 <= 1)
      {
        BOOL v8 = v5 == 1;
        uint64_t v9 = sub_1002E6E9C();
        int v7 = (*(uint64_t (**)(uint64_t, void, BOOL, BOOL))(*(void *)v9 + 1888LL))( v9,  *(void *)(a1 + 40),  v8,  v8);
        goto LABEL_11;
      }
    }

    goto LABEL_7;
  }

  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 == 2)
  {
    BOOL v4 = *(uint64_t (**)(void))(*(void *)sub_1002E6E9C() + 1904LL);
    goto LABEL_9;
  }

  if (v3 != 1)
  {
LABEL_7:
    int v6 = 3;
    goto LABEL_12;
  }

  BOOL v4 = *(uint64_t (**)(void))(*(void *)sub_1002E6E9C() + 1896LL);
LABEL_9:
  int v7 = v4();
LABEL_11:
  int v6 = v7;
LABEL_12:
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
  if (reply)
  {
    id v11 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v11);
    xpc_release(v11);
  }

uint64_t sub_1004DFB38(uint64_t a1)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089D890);
  }
  uint64_t v2 = off_1008D5F08;
  sub_100241F90(v4, *(void *)(a1 + 32));
  return sub_1005B09DC( (uint64_t)v2,  v4,  *(unsigned __int16 *)(a1 + 52),  *(unsigned __int16 *)(a1 + 54),  *(unsigned __int16 *)(a1 + 56),  *(_WORD *)(a1 + 58),  *(unsigned __int16 *)(a1 + 60),  *(float *)(a1 + 40),  *(float *)(a1 + 44),  *(float *)(a1 + 48));
}

void sub_1004DFBF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = sub_1002E6E9C();
    int64_t v4 = (*(int (**)(uint64_t, void, void, void, void))(*(void *)v3 + 1576LL))( v3,  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 56),  *(char *)(a1 + 57),  *(char *)(a1 + 58));
  }

  else
  {
    int64_t v4 = 8LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    int v6 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v6);
    xpc_release(v6);
  }

void sub_1004DFC88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == 3)
  {
    uint64_t v4 = sub_1002E6E9C();
    int64_t v5 = (*(int (**)(uint64_t))(*(void *)v4 + 3624LL))(v4);
    goto LABEL_15;
  }

  if (v3 == 2)
  {
    if (*(void *)(a1 + 32))
    {
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_10089D890);
      }
      sub_1005B7E2C((uint64_t)off_1008D5F08, *(void **)(a1 + 32));
      goto LABEL_13;
    }
  }

  else if (v3 == 1 && *(void *)(a1 + 32))
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    sub_1005B7D68((uint64_t)off_1008D5F08, *(void **)(a1 + 32));
LABEL_13:
    int64_t v5 = 0LL;
    goto LABEL_15;
  }

  int64_t v5 = 3LL;
LABEL_15:
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    int v7 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v5);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v7);
    xpc_release(v7);
  }

void sub_1004DFDB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == 2)
  {
    if (*(void *)(a1 + 32))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068A208();
      }
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_10089D890);
      }
      sub_1005B7FB0((uint64_t)off_1008D5F08, *(void **)(a1 + 32));
      goto LABEL_15;
    }
  }

  else if (v3 == 1 && *(void *)(a1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A1A8();
    }
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    sub_1005B7EEC((uint64_t)off_1008D5F08, *(void **)(a1 + 32));
LABEL_15:
    int64_t v4 = 0LL;
    goto LABEL_17;
  }

  int64_t v4 = 3LL;
LABEL_17:
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    int v6 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v6);
    xpc_release(v6);
  }

void sub_1004DFF0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10027EEE8((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(unsigned __int8 *)(a1 + 40));
}

void sub_1004DFF64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10027D160((uint64_t)off_1008D67C0, *(void *)(v1 + 128));
}

void sub_1004DFFB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
  }
  id v3 = sub_100626468(qword_1008D5F18);
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v10;
    do
    {
      for (unsigned __int16 i = 0LL; i != v5; unsigned __int16 i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v4);
        }
        xpc_object_t v8 = sub_1004DEC38( *(void **)(*((void *)&v9 + 1) + 8LL * (void)i),  *(unsigned __int8 *)(v2 + 168),  *(_DWORD *)(v2 + 80));
        xpc_array_append_value(*(xpc_object_t *)(a1 + 40), v8);
        xpc_release(v8);
      }

      id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

void sub_1004E00FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E0120(uint64_t a1)
{
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
  }
  sub_1006227A0( qword_1008D5F18,  *(void **)(a1 + 32),  *(void *)(a1 + 40) == 1LL,  *(void *)(a1 + 48) == 1LL,  *(void *)(a1 + 56) == 1LL);
}

void sub_1004E018C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10027F3E4( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(void *)(a1 + 48) != 0LL,  a1 + 56);
}

void sub_1004E01F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10027F33C( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(void *)(a1 + 48) != 0LL,  *(_DWORD *)(a1 + 56));
}

void sub_1004E025C(uint64_t a1)
{
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
  }
  sub_100625C0C(qword_1008D5F18, *(void **)(a1 + 32));
  if (*(_BYTE *)(a1 + 40))
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    uint64_t v2 = off_1008D5F08;
    sub_100241F90(v3, *(void *)(a1 + 32));
    sub_100597F98((uint64_t)v2, v3, 2u);
  }

void sub_1004E0338(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10027F12C((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32), *(void *)(a1 + 48) != 0LL);
}

_OWORD *sub_1004E039C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  BOOL result = sub_10027F29C((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1004E0404(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  v13[0] = v8;
  v12[0] = @"kCBMsgArgDeviceUUID";
  v12[1] = @"kCBMsgArgPairingType";
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a4));
  v13[1] = v9;
  void v12[2] = @"kCBMsgArgPairingPasskey";
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a5));
  void v13[2] = v10;
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v13,  v12,  3LL));

  sub_10043F394(a1, 16LL, v11);
}

void sub_1004E050C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E0548(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
}

void sub_1004E0550(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6 = a3;
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v8 = v6;
  __int128 v9 = v8;
  if (v8)
  {
    *(void *)uuid = 0LL;
    uint64_t v15 = 0LL;
    [v8 getUUIDBytes:uuid];
    xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
  if (a4 == 168)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    id v11 = sub_1005D0B00((uint64_t)off_1008D5F28, v9);
    id v12 = (id)objc_claimAutoreleasedReturnValue(v11);
    int v13 = v12;
    if (v12)
    {
      *(void *)uuid = 0LL;
      uint64_t v15 = 0LL;
      [v12 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceOriginalUUID", uuid);
    }
  }

  else if (!a4)
  {
    unsigned int v10 = sub_1004E0708(v9);
    xpc_dictionary_set_int64(v7, "kCBMsgArgPairingState", v10);
  }

  sub_10043F1F4(a1, 17LL, v7, 1);
}

void sub_1004E06D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004E0708(void *a1)
{
  id v1 = a1;
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
  }
  if (sub_10061C0F8(qword_1008D5F18, v1))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    sub_1005CF060((uint64_t)off_1008D5F28, v1, (uint64_t)v5);
    if (v6 < 0)
    {
      BOOL v2 = v5[1] == 0LL;
      operator delete(v5[0]);
    }

    else
    {
      BOOL v2 = v6 == 0;
    }

    if (v2) {
      uint64_t v3 = 1LL;
    }
    else {
      uint64_t v3 = 2LL;
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  return v3;
}

void sub_1004E07E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E07FC(uint64_t a1, uint64_t a2, void *a3, int a4)
{
}

void sub_1004E0804(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  char v6 = @"kCBMsgArgDeviceUUID";
  id v7 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  sub_10043F394(a1, 18LL, v5);
}

void sub_1004E08A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E08CC(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1004E08D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = v6;
  if (*(_BYTE *)(a1 + 168))
  {
    v10[0] = @"kCBMsgArgDeviceUUID";
    v10[1] = @"kCBMsgArgState";
    v11[0] = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a4));
    v11[1] = v8;
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  2LL));
    sub_10043F394(a1, 166LL, v9);
  }
}

void sub_1004E09B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E09E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void sub_1004E09E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(int *)(v2 + 80) >= 1 && [*(id *)(a1 + 32) length])
  {
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    int64_t v3 = sub_10028E12C((uint64_t)off_1008D67C0, *(void **)(a1 + 32));
  }

  else
  {
    int64_t v3 = 0LL;
  }

  xpc_dictionary_set_int64(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL), "kCBMsgArgCount", v3);
  xpc_connection_send_message( *(xpc_connection_t *)(v2 + 16),  *(xpc_object_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
  xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
}

uint64_t sub_1004E0A9C(uint64_t a1, xpc_object_t object, uint64_t a3)
{
  uint64_t v179 = &off_10087FAA8;
  v180 = 0LL;
  v177 = &off_10087FAA8;
  id v178 = 0LL;
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    id v6 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      xpc_type_t type = xpc_get_type(object);
      sub_10068A418((uint64_t)type, (uint64_t)buf, v6);
    }

    goto LABEL_4;
  }

  if (*(int *)(a1 + 80) >= 2)
  {
    xpc_object_t v161 = 0LL;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBAdvOptionHoldPowerAssertion");
    if (value)
    {
      uint64_t v8 = sub_10025DAFC(value, (int64_t *)&v161);
      if ((_DWORD)v8) {
        goto LABEL_5;
      }
      if (v161)
      {
        *(_BYTE *)(*(void *)(a3 + 8) + 360LL) = 1;
        id v11 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          id v12 = (void *)(a1 + 56);
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "session %s asking to hold a power assertion for advertising",  buf,  0xCu);
        }
      }
    }
  }

  if (*(_BYTE *)(a1 + 184))
  {
    *(void *)__int128 buf = 0LL;
    xpc_object_t v13 = xpc_dictionary_get_value(object, "kCBAdvOptionUseFGInterval");
    if (v13)
    {
      uint64_t v8 = sub_10025DAFC(v13, (int64_t *)buf);
      if ((_DWORD)v8) {
        goto LABEL_5;
      }
      unsigned __int16 v14 = 48;
    }

    else
    {
      unsigned __int16 v14 = 290;
    }

    xpc_object_t v15 = xpc_dictionary_get_value(object, "kCBAdvOptionAdvertisingInterval");
    if (v15)
    {
      uint64_t v8 = sub_10025DAFC(v15, (int64_t *)buf);
      if ((_DWORD)v8) {
        goto LABEL_5;
      }
      unsigned __int16 v14 = *(_WORD *)buf;
      if ((unint64_t)(*(void *)buf - 16385LL) < 0xFFFFFFFFFFFFC01FLL)
      {
LABEL_4:
        uint64_t v8 = 3LL;
        goto LABEL_5;
      }
    }
  }

  else
  {
    unsigned __int16 v14 = 290;
  }

  BOOL v16 = (unsigned __int16)(((unsigned __int16)(v14 - 37) >> 1) | ((v14 - 37) << 15)) > 0xBu
     || ((1 << ((unsigned __int16)(v14 - 37) >> 1)) & 0x92D) == 0;
  if (v16
    && (v49 = sub_1002E6BF0(), unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 728LL))(v49), v17 > v14))
  {
    id v50 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134218496;
      *(double *)&uint8_t buf[4] = (double)v14 * 0.625;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&uint8_t buf[14] = (double)v17 * 0.625;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&uint8_t buf[24] = *(double *)&buf[14];
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Limit advertising interval from %.2f msec to %.2f msec (hw limit %.2f)",  buf,  0x20u);
    }
  }

  else
  {
    LOWORD(v17) = v14;
  }

  *(_WORD *)(*(void *)(a3 + 8) + 222LL) = v17;
  int64_t v176 = 0LL;
  if (*(int *)(a1 + 80) <= 0)
  {
    int64_t v175 = 0LL;
  }

  else
  {
    xpc_object_t v18 = xpc_dictionary_get_value(object, "kCBAdvOptionForcePrimaryPHY");
    if (v18)
    {
      uint64_t v8 = sub_10025DAFC(v18, &v176);
      if ((_DWORD)v8) {
        goto LABEL_5;
      }
    }

    int64_t v176 = 0LL;
    xpc_object_t v19 = xpc_dictionary_get_value(object, "kCBAdvOptionForceSecondaryPHY");
    if (v19)
    {
      uint64_t v8 = sub_10025DAFC(v19, &v176);
      if ((_DWORD)v8) {
        goto LABEL_5;
      }
    }

    int v20 = *(_DWORD *)(a1 + 80);
    int64_t v175 = 0LL;
    if (v20 >= 1)
    {
      xpc_object_t v21 = xpc_dictionary_get_value(object, "kCBAdvOptionForcePrimaryPhyOptions");
      if (v21)
      {
        uint64_t v8 = sub_10025DAFC(v21, &v175);
        if ((_DWORD)v8) {
          goto LABEL_5;
        }
      }

      int64_t v175 = 0LL;
      xpc_object_t v22 = xpc_dictionary_get_value(object, "kCBAdvOptionForceSecondaryPhyOptions");
      if (v22)
      {
        uint64_t v8 = sub_10025DAFC(v22, &v175);
        if ((_DWORD)v8) {
          goto LABEL_5;
        }
      }
    }
  }

  __int16 v174 = 0;
  unsigned __int8 v173 = 0;
  int v171 = &off_10087FAA8;
  __int16 v172 = 0LL;
  if (*(int *)(a1 + 80) <= 0)
  {
    size_t v27 = 0LL;
    int64_t v170 = 0LL;
  }

  else
  {
    sub_1002E6E9C();
    if (sub_1000B6578()
      && _os_feature_enabled_impl("BluetoothFeatures", "LeDecisionBasedAdvFiltering"))
    {
      xpc_object_t v23 = xpc_dictionary_get_value(object, "kCBAdvOptionUseDecisionBasedAdvPayload");
      xpc_object_t v24 = xpc_dictionary_get_value(object, "kCBAdvOptionDBAFDecisionTypeFlags");
      xpc_object_t v25 = xpc_dictionary_get_value(object, "kCBAdvOptionDBAFDecisionDataLength");
      xpc_object_t v26 = xpc_dictionary_get_value(object, "kCBAdvOptionDBAFDecisionData");
      size_t v27 = 0LL;
      if (v23)
      {
        if (v24)
        {
          if (v25)
          {
            int v28 = v26;
            if (v26)
            {
              if (sub_10025D988(v23, (_BYTE *)&v174 + 1)
                || sub_10025D988(v24, &v174)
                || sub_10025D988(v25, &v173)
                || sub_10025DBF4(v28, (uint64_t)&v171))
              {
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
                  sub_10068A3EC();
                }
                uint64_t v8 = 3LL;
                goto LABEL_271;
              }

              uint64_t v62 = sub_10056AAF0((uint64_t)&v171);
              size_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v62, v173));
              uint64_t v63 = *(void *)(a3 + 8);
              char v64 = v174;
              unsigned __int8 v65 = v173;
              *(_BYTE *)(v63 + 345) = HIBYTE(v174);
              *(_BYTE *)(v63 + 346) = v64;
              *(_BYTE *)(v63 + 347) = v65;
              objc_storeStrong((id *)(v63 + 352), v27);
            }
          }
        }
      }
    }

    else
    {
      size_t v27 = 0LL;
    }

    int v29 = *(_DWORD *)(a1 + 80);
    int64_t v170 = 0LL;
    if (v29 >= 1)
    {
      xpc_object_t v30 = xpc_dictionary_get_value(object, "kCBAdvOptionStopOnAdvertisingAddressChange");
      if (v30)
      {
        uint64_t v8 = sub_10025DAFC(v30, &v170);
        if ((_DWORD)v8) {
          goto LABEL_270;
        }
      }
    }
  }

  *(_BYTE *)(*(void *)(a3 + 8) + 307LL) = v170 != 0;
  if (*(int *)(a1 + 80) > 1)
  {
    uint64_t v31 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 2552LL))(v31))
    {
      *(void *)__int128 buf = 0LL;
      xpc_object_t v32 = xpc_dictionary_get_value(object, "kCBAdvertisementEnableEPA");
      if (v32)
      {
        uint64_t v8 = sub_10025DAFC(v32, (int64_t *)buf);
        if ((_DWORD)v8) {
          goto LABEL_270;
        }
        *(_BYTE *)(*(void *)(a3 + 8) + 409LL) = *(void *)buf != 0LL;
      }
    }

    if (*(int *)(a1 + 80) >= 2)
    {
      uint64_t v33 = sub_1002E6E9C();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v33 + 2336LL))(v33))
      {
        *(void *)__int128 buf = 0LL;
        xpc_object_t v34 = xpc_dictionary_get_value(object, "kCBAdvDataObjectLocatorInstance");
        if (v34)
        {
          uint64_t v8 = sub_10025DAFC(v34, (int64_t *)buf);
          if ((_DWORD)v8) {
            goto LABEL_270;
          }
          *(_BYTE *)(*(void *)(a3 + 8) + 308LL) = *(void *)buf != 0LL;
        }
      }
    }
  }

  int64_t v169 = 1LL;
  xpc_object_t v35 = xpc_dictionary_get_value(object, "kCBAdvDataIsConnectable");
  if (v35)
  {
    uint64_t v8 = sub_10025DAFC(v35, &v169);
    if ((_DWORD)v8) {
      goto LABEL_270;
    }
  }

  uint64_t v36 = *(void *)(a3 + 8);
  BOOL v16 = v169 == 0;
  *(_BYTE *)(v36 + 12) = v169 != 0;
  int v37 = v16;
  *(_DWORD *)(v36 + 264) = v37;
  int64_t v168 = 0LL;
  xpc_object_t v38 = xpc_dictionary_get_value(object, "kCBAdvDataIsNonConnectableSecondary");
  if (v38)
  {
    uint64_t v8 = sub_10025DAFC(v38, &v168);
    if ((_DWORD)v8) {
      goto LABEL_270;
    }
    *(_DWORD *)(*(void *)(a3 + 8) + 264LL) = 3;
  }

  int64_t v167 = 0LL;
  xpc_object_t v39 = xpc_dictionary_get_value(object, "kCBAdvDataIsExtended");
  if (v39)
  {
    uint64_t v8 = sub_10025DAFC(v39, &v167);
    if ((_DWORD)v8) {
      goto LABEL_270;
    }
    uint64_t v40 = *(void *)(a3 + 8);
    *(_DWORD *)(v40 + 264) = 4;
    *(_BYTE *)(v40 + 12) = 0;
  }

  int64_t v166 = 0LL;
  xpc_object_t v41 = xpc_dictionary_get_value(object, "kCBAdvDataIsExtendedConnectable");
  if (v41)
  {
    uint64_t v8 = sub_10025DAFC(v41, &v166);
    if ((_DWORD)v8) {
      goto LABEL_270;
    }
    uint64_t v42 = *(void *)(a3 + 8);
    *(_DWORD *)(v42 + 264) = 4;
    *(_BYTE *)(v42 + 12) = 1;
  }

  int64_t v165 = 0LL;
  xpc_object_t v43 = xpc_dictionary_get_value(object, "kCBAdvDataIsTDS");
  if (!v43)
  {
LABEL_98:
    id v44 = sub_10025E1C8(object, "kCBAdvDataLocalName");
    id v146 = (id)objc_claimAutoreleasedReturnValue(v44);
    if (v146)
    {
      uint64_t v45 = *(void *)(a3 + 8);
      sub_10002418C(&v164, (char *)[v146 UTF8String]);
      std::string::operator=((std::string *)(v45 + 16), &v164);
    }

    xpc_object_t v46 = xpc_dictionary_get_value(object, "kCBAdvDataAppearance");
    if (v46)
    {
      *(void *)__int128 buf = 0LL;
      uint64_t v8 = sub_10025DAFC(v46, (int64_t *)buf);
      if ((_DWORD)v8)
      {
LABEL_269:

        goto LABEL_270;
      }

      *(_WORD *)(*(void *)(a3 + 8) + 40LL) = *(_WORD *)buf;
    }

    xpc_object_t v161 = 0LL;
    __int16 v162 = 0LL;
    uint64_t v163 = 0LL;
    xpc_object_t v47 = xpc_dictionary_get_value(object, "kCBAdvDataServiceUUIDs");
    if (v47)
    {
      uint64_t v8 = sub_10025DE80(v47, (uint64_t)&v161);
      if ((_DWORD)v8)
      {
LABEL_267:
        if (v161)
        {
          __int16 v162 = v161;
          operator delete(v161);
        }

        goto LABEL_269;
      }
    }

    uint64_t v158 = 0LL;
    int v159 = 0LL;
    uint64_t v160 = 0LL;
    xpc_object_t v51 = xpc_dictionary_get_value(object, "kCBAdvDataSolicitedServiceUUIDs");
    if (v51)
    {
      uint64_t v8 = sub_10025DE80(v51, (uint64_t)&v158);
      if ((_DWORD)v8) {
        goto LABEL_265;
      }
    }

    if (*(_BYTE *)(a1 + 184))
    {
      xpc_object_t v53 = xpc_dictionary_get_value(object, "kCBAdvDataAppleMfgData");
      if (v53)
      {
        uint64_t v8 = sub_10025DBF4(v53, (uint64_t)&v179);
        if ((_DWORD)v8) {
          goto LABEL_265;
        }
        sub_10002EAC8(*(void *)(a3 + 8) + 48LL, (uint64_t)&v179);
      }
    }

    xpc_object_t v54 = xpc_dictionary_get_value(object, "kCBAdvDataLeBluetoothDeviceAddress");
    if (v54)
    {
      uint64_t v8 = sub_10025DBF4(v54, (uint64_t)&v177);
      if ((_DWORD)v8) {
        goto LABEL_265;
      }
      sub_10002EAC8(*(void *)(a3 + 8) + 136LL, (uint64_t)&v177);
    }

    xpc_object_t v55 = xpc_dictionary_get_value(object, "kCBAdvDataNonAppleMfgData");
    if (v55)
    {
      uint64_t v8 = sub_10025DBF4(v55, (uint64_t)&v179);
      if ((_DWORD)v8) {
        goto LABEL_265;
      }
      sub_10002EAC8(*(void *)(a3 + 8) + 152LL, (uint64_t)&v179);
    }

    if (sub_10056AAC8((uint64_t)&v179))
    {
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      *(_DWORD *)&buf[23] = 0;
      *(void *)&uint8_t buf[16] = 0LL;
      xpc_object_t v56 = xpc_dictionary_get_value(object, "kCBAdvDataAppleBeaconKey");
      if (v56)
      {
        uint64_t v8 = sub_10025DBF4(v56, (uint64_t)&v179);
        if ((_DWORD)v8) {
          goto LABEL_265;
        }
        *(_DWORD *)__int128 buf = 5046042;
        *(_WORD *)&uint8_t buf[4] = 5378;
        sub_10056AB74((uint64_t)&v179, &buf[6], 0x15uLL);
        uint64_t v57 = *(void *)(a3 + 8);
        sub_10056AB04(&v182, buf, 0x1BuLL);
        sub_10002EAC8(v57 + 48, (uint64_t)&v182);
        v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
        if (v182.__r_.__value_.__l.__size_) {
          sub_1002CD254((unsigned int *)v182.__r_.__value_.__l.__size_);
        }
      }
    }

    xpc_object_t v58 = xpc_dictionary_get_value(object, "kCBAdvDataTDSData");
    if (v58)
    {
      uint64_t v59 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "TDS advertising data found", buf, 2u);
      }

      if (*(_BYTE *)(a1 + 187))
      {
        uint64_t v8 = sub_10025DBF4(v58, (uint64_t)&v179);
        if ((_DWORD)v8) {
          goto LABEL_265;
        }
        if ((unint64_t)sub_10056AAD8((uint64_t)&v179) <= 2)
        {
          uint64_t v60 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v61 = sub_10056AAD8((uint64_t)&v179);
            sub_10068A3B0((uint64_t)buf, v61, v60);
          }

LABEL_141:
          uint64_t v8 = 1LL;
          goto LABEL_265;
        }

        size_t v67 = sub_10056AAD8((uint64_t)&v179);
        size_t v68 = v67 + 2;
        uint64_t v70 = (char *)&v141 - ((__chkstk_darwin(v67, v69) + 17) & 0xFFFFFFFFFFFFFFF0LL);
        bzero(v70, v67 + 2);
        *uint64_t v70 = v67 + 1;
        v70[1] = 38;
        sub_10056AB74((uint64_t)&v179, v70 + 2, v67);
        uint64_t v71 = *(void *)(a3 + 8);
        sub_10056AB04(buf, v70, v68);
        sub_10002EAC8(v71 + 224, (uint64_t)buf);
        *(void *)__int128 buf = &off_10087FAA8;
        if (*(void *)&buf[8]) {
          sub_1002CD254(*(unsigned int **)&buf[8]);
        }
      }

      else
      {
        uint64_t v66 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "TDS advertising not allowed", buf, 2u);
        }
      }
    }

    xpc_object_t v72 = xpc_dictionary_get_value(object, "kCBAdvDataRawBytesDataAdvInd");
    if (v72 || (xpc_object_t v72 = xpc_dictionary_get_value(object, "kCBAdvDataRawBytesData")) != 0LL)
    {
      uint64_t v73 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_INFO,  "Raw bytes advertising data found for ADV_IND",  buf,  2u);
      }

      if (*(_BYTE *)(a1 + 189))
      {
        uint64_t v8 = sub_10025DBF4(v72, (uint64_t)&v179);
        if ((_DWORD)v8) {
          goto LABEL_265;
        }
        sub_10002EAC8(*(void *)(a3 + 8) + 272LL, (uint64_t)&v179);
      }

      else
      {
        uint64_t v74 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "Raw bytes advertising not allowed", buf, 2u);
        }
      }
    }

    xpc_object_t v75 = xpc_dictionary_get_value(object, "kCBAdvDataRawBytesDataScanRsp");
    if (v75)
    {
      uint64_t v76 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_INFO,  "Raw bytes advertising data found for SCAN_RSP",  buf,  2u);
      }

      if (*(_BYTE *)(a1 + 189))
      {
        uint64_t v8 = sub_10025DBF4(v75, (uint64_t)&v179);
        if ((_DWORD)v8) {
          goto LABEL_265;
        }
        sub_10002EAC8(*(void *)(a3 + 8) + 288LL, (uint64_t)&v179);
      }

      else
      {
        uint64_t v77 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "Raw bytes advertising not allowed", buf, 2u);
        }
      }
    }

    int64_t v157 = 0LL;
    if (*(int *)(a1 + 80) < 1)
    {
      int64_t v79 = 0LL;
    }

    else
    {
      xpc_object_t v78 = xpc_dictionary_get_value(object, "kCBAdvDataIsContact");
      if (v78)
      {
        uint64_t v8 = sub_10025DAFC(v78, &v157);
        if ((_DWORD)v8)
        {
LABEL_265:
          if (v158)
          {
            int v159 = v158;
            operator delete(v158);
          }

          goto LABEL_267;
        }
      }

      int64_t v79 = v157;
      if (v157)
      {
        uint64_t v80 = sub_1002E6BF0();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v80 + 352LL))(v80) & 1) == 0)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            sub_10068A384();
          }
          uint64_t v8 = 11LL;
          goto LABEL_265;
        }

        uint64_t v81 = *(void *)(a3 + 8);
        *(_DWORD *)(v81 + 264) = 2;
        *(_BYTE *)(v81 + 307) = 1;
        *(void *)__int128 buf = 0LL;
        xpc_object_t v82 = xpc_dictionary_get_value(object, "kCBAdvOptionUseFGInterval");
        if (v82)
        {
          uint64_t v8 = sub_10025DAFC(v82, (int64_t *)buf);
          if ((_DWORD)v8) {
            goto LABEL_265;
          }
          __int16 v83 = 48;
        }

        else
        {
          __int16 v83 = 432;
        }

        xpc_object_t v112 = xpc_dictionary_get_value(object, "kCBAdvOptionAdvertisingInterval");
        if (v112)
        {
          uint64_t v8 = sub_10025DAFC(v112, (int64_t *)buf);
          if ((_DWORD)v8) {
            goto LABEL_265;
          }
          __int16 v83 = *(_WORD *)buf;
        }

        *(_WORD *)(*(void *)(a3 + 8) + 222LL) = v83;
        int64_t v79 = v157;
      }
    }

    if (sub_1004F046C(a1, v79 != 0, a3))
    {
LABEL_174:
      uint64_t v8 = 3LL;
      goto LABEL_265;
    }

    if (*(_DWORD *)(a1 + 80) == 2)
    {
      id v84 = sub_10025E4FC(object, "kCBAdvDataServiceData");
      uint64_t v145 = (void *)objc_claimAutoreleasedReturnValue(v84);
      if (v145)
      {
        uint64_t v85 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
        {
          unsigned __int16 v86 = (unsigned __int16)[v145 count];
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v86;
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "Service data %d elements", buf, 8u);
        }

        if ([v145 count])
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            sub_10068A358();
          }
LABEL_220:

          goto LABEL_174;
        }

        unsigned __int16 v88 = 0;
        uint64_t v142 = &v188;
        uint64_t v143 = v154;
        *(void *)&__int128 v87 = 136446466LL;
        __int128 v141 = v87;
        while (1)
        {
          __int128 v189 = 0uLL;
          int v190 = 0;
          uint64_t v144 = v88;
          id v89 = objc_claimAutoreleasedReturnValue([v145 objectAtIndexedSubscript:v141]);
          uint64_t v90 = (int8x16_t *)[v89 bytes];
          uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v145 objectAtIndexedSubscript:v144]);
          sub_1006343C4((uint64_t)&v189, v90, [v91 length]);

          uint64_t v155 = 0LL;
          uint64_t v156 = 0LL;
          uint64_t v92 = v144 | 1;
          id v93 = objc_claimAutoreleasedReturnValue([v145 objectAtIndexedSubscript:v92]);
          id v94 = [v93 bytes];
          uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue([v145 objectAtIndexedSubscript:v92]);
          sub_10056AB04(&v155, v94, (size_t)[v95 length]);

          unint64_t v96 = sub_10056AAD8((uint64_t)&v155);
          uint64_t v97 = (os_log_s *)qword_1008F75F0;
          if (v96 >= 0x15)
          {
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
              sub_10068A310(v187, v142, v97);
            }
            goto LABEL_187;
          }

          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
          {
            sub_1006344B4((uint64_t)&v189, buf);
            int v99 = buf[23];
            int v100 = *(_BYTE **)buf;
            sub_10056B0A4((uint64_t)&v155, &v182);
            uint64_t v101 = buf;
            if (v99 < 0) {
              uint64_t v101 = v100;
            }
            id v102 = &v182;
            if ((v182.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              id v102 = (std::stringbuf::string_type *)v182.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)id v183 = v141;
            uint64_t v184 = v101;
            __int16 v185 = 2080;
            char v186 = v102;
            _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEFAULT,  "Adding service Data UUID:%{public}s data:%s",  v183,  0x16u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          sub_1004F06F4(*(void *)(a3 + 8), &v189, (uint64_t)&v155);
          int v98 = 1;
LABEL_198:
          uint64_t v155 = &off_10087FAA8;
          if (v156) {
            sub_1002CD254(v156);
          }
          if (!v98) {
            goto LABEL_220;
          }
          unsigned __int16 v103 = v144 + 2;
          BOOL v104 = (void *)objc_claimAutoreleasedReturnValue([v145 objectAtIndexedSubscript:(unsigned __int16)(v144 + 2)]);
          BOOL v105 = v104 == 0LL;

          unsigned __int16 v88 = v103;
          if (v105) {
            goto LABEL_202;
          }
        }

        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10068A2E4(&v153, v143);
        }
LABEL_187:
        int v98 = 0;
        goto LABEL_198;
      }

  if (*((void *)a3 + 1) != 17LL) {
    goto LABEL_153;
  }
  uint64_t v60 = *(uint64_t **)a3;
LABEL_143:
  uint64_t v62 = *v60;
  uint64_t v63 = v60[1];
  char v64 = *((unsigned __int8 *)v60 + 16);
  if (v62 == 0x746F6F7465756C42LL && v63 == 0x746F6D6552565468LL && v64 == 101)
  {
    sub_10002418C(v86, "DoNotStopAutoConnecting");
    sub_1005C0684(v7, (uint64_t)v86);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
  }

LABEL_202:
    }

    id v106 = sub_10025E1C8(object, "kCBAdvOptionInstanceAddress");
    uint64_t v145 = (void *)objc_claimAutoreleasedReturnValue(v106);
    if (v145)
    {
      unint64_t v107 = sub_1005C02B0(v145);
      uint64_t v108 = v107;
      if (v107 && (!BYTE6(v107) || BYTE6(v107) == 1 && (v107 & 0xC00000000000LL) != 0x800000000000LL))
      {
        __int16 v113 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          id v114 = sub_1005BFB9C(v108);
          id v115 = (id)objc_claimAutoreleasedReturnValue(v114);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v145;
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&uint8_t buf[14] = v115;
          _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_DEFAULT,  "Overriding address with address string %@ (%@)",  buf,  0x16u);
        }
      }

      else
      {
        __int16 v109 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          id v110 = sub_1005BFB9C(v108);
          __int16 v111 = (void *)objc_claimAutoreleasedReturnValue(v110);
          sub_10068A268((uint64_t)v145, v111, (uint64_t)v183, v109);
        }
      }

      *(void *)(*(void *)(a3 + 8) + 256LL) = v108;
    }

    xpc_object_t v116 = xpc_dictionary_get_value(object, "kCBAdvOptionInstanceRandomAddressBytes");
    if (!v116)
    {
LABEL_242:
      id v132 = sub_10025E840(object, "kCBManagerListOfClients");
      uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue(v132);
      if (!v133) {
        uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  *(void *)(a1 + 96),  0LL));
      }
      uint64_t v134 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v133;
        _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "Setting client list to %@", buf, 0xCu);
      }

      *(void *)&uint8_t buf[8] = 0LL;
      *(void *)&uint8_t buf[16] = 0LL;
      *(void *)__int128 buf = &buf[8];
      __int128 v149 = 0u;
      __int128 v150 = 0u;
      __int128 v151 = 0u;
      __int128 v152 = 0u;
      id v135 = v133;
      id v136 = [v135 countByEnumeratingWithState:&v149 objects:v181 count:16];
      if (v136)
      {
        uint64_t v137 = *(void *)v150;
        do
        {
          for (uint64_t k = 0LL; k != v136; uint64_t k = (char *)k + 1)
          {
            if (*(void *)v150 != v137) {
              objc_enumerationMutation(v135);
            }
            sub_10002418C( &v182, (char *)[*(id *)(*((void *)&v149 + 1) + 8 * (void)k) UTF8String]);
            sub_1004F5958((uint64_t **)buf, (const void **)&v182.__r_.__value_.__l.__data_, (uint64_t)&v182);
          }

          id v136 = [v135 countByEnumeratingWithState:&v149 objects:v181 count:16];
        }

        while (v136);
      }

      uint64_t v139 = *(void *)(a3 + 8);
      sub_100291924((uint64_t *)&v147, (const void ***)buf);
      if ((void **)(v139 + 416) != &v147) {
        sub_1003AD494((uint64_t **)(v139 + 416), v147, &v148);
      }
      sub_10023E78C((uint64_t)&v147, v148);
      if (*(int *)(a1 + 80) >= 1)
      {
        v182.__r_.__value_.__r.__words[0] = 0LL;
        xpc_object_t v140 = xpc_dictionary_get_value(object, "kCBOptionUseCase");
        if (v140)
        {
          uint64_t v8 = sub_10025DAFC(v140, (int64_t *)&v182);
          if ((_DWORD)v8)
          {
LABEL_263:
            sub_10023E78C((uint64_t)buf, *(char **)&buf[8]);

            goto LABEL_264;
          }

          if (v182.__r_.__value_.__r.__words[0]) {
            *(_DWORD *)(*(void *)(a3 + 8) + 440LL) = v182.__r_.__value_.__l.__data_;
          }
        }
      }

      uint64_t v8 = 0LL;
      goto LABEL_263;
    }

    uint64_t v8 = sub_10025DBF4(v116, (uint64_t)&v179);
    if ((_DWORD)v8)
    {
LABEL_264:

      goto LABEL_265;
    }

    if ((unint64_t)sub_10056AAD8((uint64_t)&v179) < 6)
    {
      uint64_t v8 = 8LL;
      goto LABEL_264;
    }

    uint64_t v117 = *(unsigned __int8 *)sub_10056AAF0((uint64_t)&v179);
    uint64_t v144 = *(unsigned __int8 *)(sub_10056AAF0((uint64_t)&v179) + 1);
    uint64_t v118 = *(unsigned __int8 *)(sub_10056AAF0((uint64_t)&v179) + 2);
    uint64_t v119 = *(unsigned __int8 *)(sub_10056AAF0((uint64_t)&v179) + 3);
    uint64_t v120 = *(unsigned __int8 *)(sub_10056AAF0((uint64_t)&v179) + 4);
    uint64_t v121 = sub_10056AAF0((uint64_t)&v179);
    uint64_t v144 = (v144 << 32) | (v117 << 40) | (v118 << 24) | (v119 << 16) | (v120 << 8) | *(unsigned __int8 *)(v121 + 5) | 0x1000000000000LL;
    int v122 = (os_log_s *)qword_1008F75F0;
    if ((v117 & 0xC0) == 0x80)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_10056B0A4((uint64_t)&v179, (std::stringbuf::string_type *)buf);
        int v123 = buf[23];
        int v124 = *(_BYTE **)buf;
        id v125 = sub_1005BFB9C(v144);
        int v126 = (void *)objc_claimAutoreleasedReturnValue(v125);
        if (v123 >= 0) {
          int v124 = buf;
        }
        id v127 = v126;
        LODWORD(v182.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v182.__r_.__value_.__r.__words + 4) = (std::string::size_type)v124;
        WORD2(v182.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&v182.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v127;
        _os_log_error_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_ERROR,  "Overriding address with Invalid address data %s (%@)",  (uint8_t *)&v182,  0x16u);

        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
LABEL_240:
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10056B0A4((uint64_t)&v179, (std::stringbuf::string_type *)buf);
      int v128 = buf[23];
      __int16 v129 = *(_BYTE **)buf;
      id v130 = sub_1005BFB9C(v144);
      uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue(v130);
      if (v128 >= 0) {
        __int16 v129 = buf;
      }
      id v127 = v131;
      LODWORD(v182.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v182.__r_.__value_.__r.__words + 4) = (std::string::size_type)v129;
      WORD2(v182.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&v182.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v127;
      _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_DEFAULT,  "Overriding address with address data %s (%@)",  (uint8_t *)&v182,  0x16u);

      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_240;
    }

    *(void *)(*(void *)(a3 + 8) + 256LL) = v144;
    goto LABEL_242;
  }

  uint64_t v8 = sub_10025DAFC(v43, &v165);
  if (!(_DWORD)v8)
  {
    *(_DWORD *)(*(void *)(a3 + 8) + 264LL) = 2;
    goto LABEL_98;
  }

LABEL_270:
LABEL_271:
  int v171 = &off_10087FAA8;
  if (v172) {
    sub_1002CD254(v172);
  }
LABEL_5:
  v177 = &off_10087FAA8;
  if (v178) {
    sub_1002CD254(v178);
  }
  uint64_t v179 = &off_10087FAA8;
  if (v180) {
    sub_1002CD254(v180);
  }
  return v8;
}

void sub_1004E21B0(_Unwind_Exception *a1)
{
  id v6 = *(void **)(v1 + 176);
  if (v6)
  {
    *(void *)(v1 + 184) = v6;
    operator delete(v6);
  }

  id v7 = *(void **)(v1 + 200);
  if (v7)
  {
    *(void *)(v1 + 20_Block_object_dispose(va, 8) = v7;
    operator delete(v7);
  }

  *(void *)(v1 + 296) = v3;
  uint64_t v8 = *(unsigned int **)(v1 + 304);
  if (v8) {
    sub_1002CD254(v8);
  }
  *(void *)(v1 + 336) = v3;
  __int128 v9 = *(unsigned int **)(v1 + 344);
  if (v9) {
    sub_1002CD254(v9);
  }
  *(void *)(v1 + 352) = v3;
  unsigned int v10 = *(unsigned int **)(v1 + 360);
  if (v10) {
    sub_1002CD254(v10);
  }
  _Unwind_Resume(a1);
}

id sub_1004E2430(uint64_t a1, uint64_t a2)
{
  __uint64_t v3 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  id v4 = sub_1004F479C(v3, a2, v3 / 0xF4240);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  if (v5) {
    id v7 = v5;
  }

  return v6;
}

void sub_1004E248C(uint64_t a1, void *a2)
{
  id v2 = a2;
  __uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v4 = objc_alloc(&OBJC_CLASS___NSNumber);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"kCBMsgArgTimeXpcLeAttConnHandleStartAdvMsg"]);
  id v6 = [v5 longLongValue];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"kCBMsgArgTimeXpcWiProxUpdateAdv"]);
  uint64_t v8 = -[NSNumber initWithLongLong:](v4, "initWithLongLong:", v6 - (_BYTE *)[v7 longLongValue]);
  [v3 setObject:v8 forKeyedSubscript:@"heySiriXPCDuration"];

  __int128 v9 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"heySiriXPCDuration"]);
    int v12 = 138412290;
    xpc_object_t v13 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Duration of HeySiri BT Advertisement's XPC message from wirpox to controller: %@",  (uint8_t *)&v12,  0xCu);
  }

  uint64_t v11 = sub_1002E8D94();
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 504LL))(v11, v3);
}

void sub_1004E2608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E2654(uint64_t a1, void *a2, unint64_t a3)
{
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"kCBMsgArgTimeXpcLeAttConnHandleStartAdvMsg"]);
  id v6 = [v5 longLongValue];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"kCBMsgArgTimeXpcWiProxUpdateAdv"]);
  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"kCBMsgArgTimeXpcWiProxUpdateAdv"]);
    __int128 v9 = [v8 longLongValue];

    if (v6 > v9)
    {
      unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"kCBMsgArgTimeXpcWiProxUpdateAdv"]);
      unint64_t v11 = v6 - (_BYTE *)[v10 longLongValue];

      if (v11 > a3)
      {
        uint64_t v12 = sub_1002E6E00();
        if ((*(unsigned int (**)(uint64_t, uint64_t, _BYTE *))(*(void *)v12 + 848LL))(v12, 15LL, v6))
        {
          uint64_t v13 = sub_1002E6E00();
          (*(void (**)(uint64_t, _BYTE *))(*(void *)v13 + 840LL))(v13, v6);
          sub_10040CA80("XPCDelay", "XPCLeAttConnection_handleAdvertising_250ms", 0.0);
          unsigned __int16 v14 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            xpc_object_t v15 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"kCBAdvDataAppleMfgData"]);
            sub_10068A454(v15, (uint64_t)&v16, v11, v14);
          }
        }
      }
    }
  }
}

void sub_1004E27E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004E2828(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_1002831DC((uint64_t)off_1008D67C0, *(void *)(v2 + 128), a1 + 48);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_1004E2890(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &off_10087FAE8;
  *(void *)(a1 + 56) = v3;
  if (v3) {
    sub_1002CD1E0(v3);
  }
}

void sub_1004E28B0(uint64_t a1)
{
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &off_10087FAE8;
  uint64_t v1 = *(unsigned int **)(a1 + 56);
  if (v1) {
    sub_1002CD254(v1);
  }
}

void sub_1004E28CC(int a1, xpc_object_t xdict, void *a3)
{
  id v5 = (void *)sub_10043E644(*a3);
  xpc_dictionary_set_value(xdict, "kCBMsgArgTimeXpcTimestampsTracking", v5);
  xpc_release(v5);
}

void sub_1004E2924(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_100283250((uint64_t)off_1008D67C0, *(void *)(v1 + 128));
}

uint64_t sub_1004E2974(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  uint64_t v31 = &off_10087FAA8;
  xpc_object_t v32 = 0LL;
  std::string __p = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBPeriodicAdvDataAdvHandle");
  if (value)
  {
    uint64_t v3 = sub_10025DAFC(value, (int64_t *)&__p);
    if ((_DWORD)v3) {
      goto LABEL_47;
    }
    *(_BYTE *)a3 = (_BYTE)__p;
  }

  std::string __p = 0LL;
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "KCBPeriodicAdvDataInterval");
  if (v8)
  {
    uint64_t v3 = sub_10025DAFC(v8, (int64_t *)&__p);
    if ((_DWORD)v3) {
      goto LABEL_47;
    }
    if ((char *)__p - 0x10000 < (char *)0xFFFFFFFFFFFF0006LL)
    {
LABEL_5:
      uint64_t v3 = 3LL;
      goto LABEL_47;
    }

    *(_WORD *)(a3 + 2) = (_WORD)__p;
  }

  std::string __p = 0LL;
  int v29 = 0LL;
  uint64_t v30 = 0LL;
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "KCBPeriodicAdvDataServiceUUIDs");
  if (v9)
  {
    uint64_t v3 = sub_10025DE80(v9, (uint64_t)&__p);
    if ((_DWORD)v3)
    {
      char v10 = 0;
      goto LABEL_37;
    }

    unint64_t v11 = __p;
    if (__p == v29)
    {
      char v10 = 1;
      if (!__p) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }

    uint64_t v3 = a3 + 40;
    uint64_t v12 = *(char **)(a3 + 32);
    do
    {
      if ((unint64_t)v12 >= *(void *)v3)
      {
        uint64_t v14 = *(void *)(a3 + 24);
        unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v14] >> 2);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          abort();
        }
        if (0x999999999999999ALL * ((*(void *)v3 - v14) >> 2) > v16) {
          unint64_t v16 = 0x999999999999999ALL * ((*(void *)v3 - v14) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)v3 - v14) >> 2) >= 0x666666666666666LL) {
          unint64_t v17 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          xpc_object_t v18 = (char *)sub_100050420(a3 + 40, v17);
        }
        else {
          xpc_object_t v18 = 0LL;
        }
        xpc_object_t v19 = &v18[20 * v15];
        __int128 v20 = *(_OWORD *)v11;
        *((_DWORD *)v19 + 4) = v11[4];
        *(_OWORD *)xpc_object_t v19 = v20;
        xpc_object_t v22 = *(char **)(a3 + 24);
        xpc_object_t v21 = *(char **)(a3 + 32);
        xpc_object_t v23 = v19;
        if (v21 != v22)
        {
          do
          {
            __int128 v24 = *(_OWORD *)(v21 - 20);
            *((_DWORD *)v23 - 1) = *((_DWORD *)v21 - 1);
            *(_OWORD *)(v23 - 20) = v24;
            v23 -= 20;
            v21 -= 20;
          }

          while (v21 != v22);
          xpc_object_t v21 = *(char **)(a3 + 24);
        }

        uint64_t v12 = v19 + 20;
        *(void *)(a3 + 24) = v23;
        *(void *)(a3 + 32) = v19 + 20;
        *(void *)(a3 + sub_100242E28(v1 + 40) = &v18[20 * v17];
        if (v21) {
          operator delete(v21);
        }
      }

      else
      {
        __int128 v13 = *(_OWORD *)v11;
        *((_DWORD *)v12 + 4) = v11[4];
        *(_OWORD *)uint64_t v12 = v13;
        v12 += 20;
      }

      *(void *)(a3 + 32) = v12;
      v11 += 5;
    }

    while (v11 != v29);
  }

  char v10 = 1;
LABEL_37:
  unint64_t v11 = __p;
  if (__p)
  {
LABEL_38:
    int v29 = v11;
    operator delete(v11);
  }

void sub_1004E2C98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14)
{
  if (a14) {
    sub_1002CD254(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E2CD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_10089D910);
  }
  uint64_t result = sub_100575C84((uint64_t)off_1008D6280, *(void *)(v2 + 128), a1 + 48);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_1004E2D3C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = &off_10087FAA8;
  *(void *)(a1 + 64) = v4;
  if (v4) {
    sub_1002CD1E0(v4);
  }
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  sub_100050EE8( (char *)(a1 + 72),  *(__int128 **)(a2 + 72),  *(__int128 **)(a2 + 80),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = &off_10087FAA8;
  *(void *)(a1 + 104) = v5;
  if (v5) {
    sub_1002CD1E0(v5);
  }
}

void sub_1004E2DC0(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[10] = v5;
    operator delete(v5);
  }

  v1[7] = v3;
  id v6 = (unsigned int *)v1[8];
  if (v6) {
    sub_1002CD254(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E2DF4(void *a1)
{
  a1[12] = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)a1[13];
  if (v2) {
    sub_1002CD254(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }

  a1[7] = &off_10087FAA8;
  uint64_t v4 = (unsigned int *)a1[8];
  if (v4) {
    sub_1002CD254(v4);
  }
}

void *sub_1004E2E50(void *a1)
{
  a1[6] = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)a1[7];
  if (v2) {
    sub_1002CD254(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }

  a1[1] = &off_10087FAA8;
  uint64_t v4 = (unsigned int *)a1[2];
  if (v4) {
    sub_1002CD254(v4);
  }
  return a1;
}

uint64_t sub_1004E2EA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_10089D910);
  }
  uint64_t result = sub_100576098((uint64_t)off_1008D6280, *(void *)(v2 + 128), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E2F10(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472LL;
    applier[2] = sub_1004EF68C;
    applier[3] = &unk_10088A098;
    void applier[4] = a2;
    if (xpc_array_apply(a1, applier)) {
      return 0LL;
    }
    else {
      return 3LL;
    }
  }

  else
  {
    uint64_t v4 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A4AC(a1, v4);
    }
    return 3LL;
  }

uint64_t sub_1004E2FC8(void *a1, void ***a2)
{
  if (xpc_get_type(a1) != (xpc_type_t)&_xpc_type_array)
  {
    uint64_t v4 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A4AC(a1, v4);
    }
    return 3LL;
  }

  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472LL;
  applier[2] = sub_1004EFDA0;
  applier[3] = &unk_10088A098;
  void applier[4] = a2;
  if (!xpc_array_apply(a1, applier))
  {
    for (unsigned __int16 i = *a2; i != a2[1]; ++i)
    {
      id v7 = *i;
      std::string __p = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      sub_100240540(&__p, (uint64_t)(v7 + 13));
      xpc_object_t v9 = __p;
      xpc_object_t v8 = v12;
      while (v9 != v8)
      {
        if (*v9)
        {
          (*(void (**)(void))(*(void *)*v9 + 8LL))(*v9);
          xpc_object_t v8 = v12;
        }

        ++v9;
      }

      uint64_t v10 = v7[12];
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
      }
      (*(void (**)(void *))(*v7 + 8LL))(v7);
      if (__p)
      {
        uint64_t v12 = __p;
        operator delete(__p);
      }
    }

    return 3LL;
  }

  return 0LL;
}

void sub_1004E3114(void *a1)
{
  uint64_t v2 = a1[5];
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = sub_100282EE4((uint64_t)off_1008D67C0, *(void *)(v2 + 128), a1[6]);
  uint64_t v3 = (os_log_s *)qword_1008F75F0;
  if (*(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A51C();
    }
    uint64_t v4 = a1[6];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Collecting GATT metrics to send to Biome",  (uint8_t *)__p,  2u);
    }

    uint64_t v5 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  @"Peripheral",  @"SessionType");
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    id v6 = +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  sub_10027D798((uint64_t)off_1008D67C0, *(void *)(v2 + 128)));
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v7, @"SessionState");

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    if (sub_100279D80((uint64_t)off_1008D67C0, *(void *)(v2 + 128)))
    {
      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_10089D870);
      }
      BOOL v8 = sub_10028EEDC((uint64_t)off_1008D67C0, *(void *)(v2 + 128));
    }

    else
    {
      BOOL v8 = 0LL;
    }

    xpc_object_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v8));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v9,  @"SupportsStateRestoration");

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    uint64_t v10 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  sub_10027D914((uint64_t)off_1008D67C0, *(void *)(v2 + 128)));
    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v11,  @"SupportsBackgrounding");

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  *(void *)(v2 + 96),  @"BundleID");
    uint64_t v12 = a1[6];
    __n128 v19 = *(__n128 *)(v12 + 72);
    int v20 = *(_DWORD *)(v12 + 88);
    sub_100634334(&v18, &v19);
    sub_1006344B4((uint64_t)&v18, __p);
    if (v17 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v13));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v14, @"ServiceUUID");

    if (v17 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = sub_1002E8D94();
    (*(void (**)(uint64_t, NSMutableDictionary *))(*(void *)v15 + 296LL))(v15, v5);
  }

void sub_1004E347C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1004E34E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  return sub_100282F54((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(_DWORD *)(a1 + 40));
}

void sub_1004E3538(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10027D0D4((uint64_t)off_1008D67C0, *(void *)(v1 + 128));
}

void sub_1004E3588(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 48);
  int v6 = *(void *)(a1 + 72);
  sub_10028341C((uint64_t)off_1008D67C0, v3, v4, v5, a1 + 56, (unsigned __int16 *)&v6);
}

void sub_1004E3600(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = &off_10087FAA8;
  *(void *)(a1 + 64) = v3;
  if (v3) {
    sub_1002CD1E0(v3);
  }
}

void sub_1004E3620(uint64_t a1)
{
  *(void *)(a1 + 56) = &off_10087FAA8;
  uint64_t v1 = *(unsigned int **)(a1 + 64);
  if (v1) {
    sub_1002CD254(v1);
  }
}

void sub_1004E363C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_1002834B4((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32), *(_DWORD *)(a1 + 48), a1 + 56);
}

void sub_1004E369C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  if (sub_10027CBF8((uint64_t)off_1008D67C0, *(void *)(v1 + 128), 1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A57C();
    }
  }

void sub_1004E3728(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_10089D8B0);
  }
  uint64_t v3 = qword_1008D9048;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = (void (***)(void, void *, uint64_t, uint64_t, void, void, void))(v2 + 152);
  int v6 = *(_DWORD *)(v2 + 40);
  uint64_t v7 = *(unsigned __int16 *)(a1 + 48);
  int v8 = *(unsigned __int16 *)(a1 + 56);
  int v9 = *(unsigned __int16 *)(a1 + 64);
  int v10 = *(unsigned __int16 *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  sub_100241F90(uu, *(void *)(a1 + 32));
  sub_100365884(v3, v4, v5, v6, v7, v8, v9, v10, v11, uu, 1, *(void *)(a1 + 88));
}

void sub_1004E3838(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_10089D8B0);
  }
  uint64_t v3 = qword_1008D9048;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 48);
  sub_100241F90(uu, *(void *)(a1 + 32));
  sub_100366E28(v3, v4, v5, uu);
}

void sub_1004E38EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_10089D8B0);
  }
  sub_1003643FC( qword_1008D9048,  *(void *)(v2 + 128),  v2 + 152,  *(_DWORD *)(v2 + 40),  *(_WORD *)(a1 + 40),  *(void *)(a1 + 48) != 0LL,  *(unsigned __int16 *)(a1 + 56),  *(unsigned __int16 *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  1u,  *(void *)(a1 + 88));
}

void sub_1004E3988(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_10089D8B0);
  }
  sub_1003651CC((void *)qword_1008D9048, *(void *)(v2 + 128), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_1004E39E0(uint64_t a1)
{
  unint64_t v1 = sub_1005C02B0(*(void **)(a1 + 32));
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_10089D910);
  }
  return sub_10057B1A4((uint64_t)off_1008D6280, v1);
}

BOOL sub_1004E3A38(uint64_t a1, int a2, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v18 = a1;
    id v6 = sub_10025E68C(object, "kCBMsgArgOfflineAdvertisingData");
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue(v6);
    id v7 = [obj countByEnumeratingWithState:&v21 objects:v27 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v22;
      do
      {
        for (unsigned __int16 i = 0LL; i != v7; unsigned __int16 i = (char *)i + 1)
        {
          if (*(void *)v22 != v8) {
            objc_enumerationMutation(obj);
          }
          id v10 = *(id *)(*((void *)&v21 + 1) + 8LL * (void)i);
          *(_OWORD *)__int128 buf = 0u;
          memset(v26, 0, sizeof(v26));
          [v10 getBytes:buf range:0, 6];
          [v10 getBytes:&buf[13] range:6, 22];
          *(_DWORD *)&buf[9] = 1643008;
          *(_DWORD *)&buf[6] = 5046046;
          v26[19] = v26[19] & 0xFC | (buf[0] >> 6);
          buf[0] |= 0xC0u;
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", buf, 37LL));
          [v10 setData:v11];
        }

        id v7 = [obj countByEnumeratingWithState:&v21 objects:v27 count:16];
      }

      while (v7);
    }

    id v12 = sub_10025E254(object, "kCBMsgArgOfflineAdvertisingRotationInterval");
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (qword_1008D6798 != -1) {
      dispatch_once(&qword_1008D6798, &stru_10089D930);
    }
    uint64_t v14 = qword_1008D6790;
    uint64_t v15 = *(void *)(*(void *)(v18 + 32) + 8LL);
    unsigned int v16 = *(unsigned __int8 *)(v15 + 24);
    *(_BYTE *)(v15 + 24) = v16 + 1;
    sub_1001FC020(v14, v16, obj, [v13 intValue]);
  }

  else
  {
    uint64_t v5 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "handleSetOfflineAdvertisingParamsAndData not a dictionary!",  buf,  2u);
    }
  }

  return type == (xpc_type_t)&_xpc_type_dictionary;
}

void sub_1004E3CF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_1004E3D50(uint64_t a1)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089D890);
  }
  sub_10059E668((uint64_t)off_1008D5F08, *(void *)(a1 + 32));
}

void sub_1004E3DA0(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    xpc_dictionary_set_int64(v3, "kCBMsgArgResult", a2);
    xpc_connection_send_message( *(xpc_connection_t *)(v4 + 16),  *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }

void sub_1004E3E0C(uint64_t a1, int a2, void *a3)
{
  id v21 = a3;
  uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    xpc_dictionary_set_int64(v5, "kCBMsgArgResult", a2);
    id v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"kCBMsgArgTimeoutInMS"]);
    xpc_dictionary_set_uint64(v7, "kCBMsgArgTimeoutInMS", (uint64_t)[v8 unsignedLongValue]);

    int v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"kCBMsgArgHoldStableAddressState"]);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgHoldStableAddressState", (BOOL)[v10 BOOLValue]);

    uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"kCBMsgArgOverrideLocalAddressState"]);
    xpc_dictionary_set_BOOL(v11, "kCBMsgArgOverrideLocalAddressState", (BOOL)[v12 BOOLValue]);

    uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"kCBMsgArgPrivateModeState"]);
    xpc_dictionary_set_BOOL(v13, "kCBMsgArgPrivateModeState", (BOOL)[v14 BOOLValue]);

    uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"kCBMsgArgHoldStableAddressCount"]);
    xpc_dictionary_set_uint64(v15, "kCBMsgArgHoldStableAddressCount", (uint64_t)[v16 unsignedLongValue]);

    char v17 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"kCBMsgArgLePrivateAddressTimer"]);
    xpc_dictionary_set_uint64(v17, "kCBMsgArgLePrivateAddressTimer", (uint64_t)[v18 unsignedLongValue]);

    __n128 v19 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    int v20 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"kCBMsgArgLeHoldStablePrivateAddressTimer"]);
    xpc_dictionary_set_uint64( v19,  "kCBMsgArgLeHoldStablePrivateAddressTimer",  (uint64_t)[v20 unsignedLongValue]);

    xpc_connection_send_message( *(xpc_connection_t *)(v6 + 16),  *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }
}

void sub_1004E4050( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004E4088(uint64_t a1)
{
}

void sub_1004E4098(uint64_t a1)
{
}

void sub_1004E40AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_10043F7DC(a1, v4, v5);
  sub_10043F1F4(a1, 164LL, v4, 1);
}

void sub_1004E4114( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1004E4128(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1004E4134(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4)
{
  id v6 = a3;
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_10043F7DC(a1, v7, v6);
  v10[0] = 0LL;
  v10[1] = 0LL;
  int v9 = v10;
  xpc_object_t v8 = sub_10043F8BC(a4, (uint64_t)&v9);
  sub_10023BF24((uint64_t)&v9, v10[0]);
  xpc_dictionary_set_value(v7, "kCBMsgArgUUIDs", v8);
  xpc_release(v8);
  sub_10043F1F4(a1, 58LL, v7, 1);
}

void sub_1004E41F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1004E4218(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4)
{
}

void sub_1004E4220(uint64_t a1, void *a2, uint64_t a3)
{
  xpc_object_t v34 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!*(void *)(a3 + 8)) {
    goto LABEL_39;
  }
  xpc_object_t xdict = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v6 = *(void *)(a3 + 8);
  if (*(char *)(v6 + 39) < 0)
  {
    sub_100024238(__p, *(void **)(v6 + 16), *(void *)(v6 + 24));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v6 + 16);
    int64_t value = *(void *)(v6 + 32);
  }

  if ((SHIBYTE(value) & 0x80000000) == 0)
  {
    if (!HIBYTE(value)) {
      goto LABEL_17;
    }
LABEL_9:
    uint64_t v8 = *(void *)(a3 + 8);
    if (*(char *)(v8 + 39) < 0)
    {
      sub_100024238(__p, *(void **)(v8 + 16), *(void *)(v8 + 24));
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v8 + 16);
      int64_t value = *(void *)(v8 + 32);
    }

    if (value >= 0) {
      int v9 = __p;
    }
    else {
      int v9 = (void **)__p[0];
    }
    xpc_dictionary_set_string(xdict, "kCBAdvDataLocalName", (const char *)v9);
    if (SHIBYTE(value) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_17;
  }

  xpc_object_t v7 = __p[1];
  operator delete(__p[0]);
  if (v7) {
    goto LABEL_9;
  }
LABEL_17:
  uint64_t v10 = *(void *)(a3 + 8);
  if (*(_WORD *)(v10 + 40))
  {
    xpc_dictionary_set_uint64(xdict, "kCBAdvDataAppearance", *(unsigned __int16 *)(v10 + 40));
    uint64_t v10 = *(void *)(a3 + 8);
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  int64_t value = 0LL;
  sub_100050EE8( (char *)__p,  *(__int128 **)(v10 + 64),  *(__int128 **)(v10 + 72),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v10 + 72) - *(void *)(v10 + 64)) >> 2));
  if (__p[1] != __p[0])
  {
    v37[0] = 0LL;
    v37[1] = 0LL;
    uint64_t v36 = v37;
    xpc_object_t v11 = sub_10043F8BC((unsigned __int8 **)__p, (uint64_t)&v36);
    sub_10023BF24((uint64_t)&v36, v37[0]);
    xpc_dictionary_set_value(xdict, "kCBAdvDataServiceUUIDs", v11);
    xpc_release(v11);
  }

  id v12 = *(void **)(a3 + 8);
  if (v12[16])
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    uint64_t v14 = (unsigned __int8 *)v12[14];
    if (v14 != (unsigned __int8 *)(v12 + 15))
    {
      do
      {
        if (v14[32] == 2)
        {
          uint64_t v36 = 0LL;
          v37[0] = 0LL;
          uint64_t v15 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  &v36,  sub_10063443C(v14 + 32, &v36));
          unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
          [v13 addObject:v16];

          uint64_t v17 = sub_10056AAF0((uint64_t)(v14 + 56));
          uint64_t v18 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v17,  sub_10056AAD8((uint64_t)(v14 + 56)));
          __n128 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
          [v13 addObject:v19];
        }

        int v20 = (unsigned __int8 *)*((void *)v14 + 1);
        if (v20)
        {
          do
          {
            id v21 = v20;
            int v20 = *(unsigned __int8 **)v20;
          }

          while (v20);
        }

        else
        {
          do
          {
            id v21 = (unsigned __int8 *)*((void *)v14 + 2);
            BOOL v22 = *(void *)v21 == (void)v14;
            uint64_t v14 = v21;
          }

          while (!v22);
        }

        uint64_t v14 = v21;
      }

      while (v21 != (unsigned __int8 *)(v12 + 15));
    }

    if (objc_msgSend(v13, "count", xdict, v34))
    {
      xpc_object_t v23 = sub_10043F9F4(v13);
      xpc_dictionary_set_value(xdict, "kCBAdvDataServiceData", v23);
      xpc_release(v23);
    }

    id v12 = *(void **)(a3 + 8);
  }

  if (sub_10056AAD8((uint64_t)(v12 + 6)) && *(_BYTE *)(a1 + 184))
  {
    __int128 v24 = (const void *)sub_10056AAF0(*(void *)(a3 + 8) + 48LL);
    size_t v25 = sub_10056AAD8(*(void *)(a3 + 8) + 48LL);
    xpc_dictionary_set_data(xdict, "kCBAdvDataAppleMfgData", v24, v25);
  }

  xpc_dictionary_set_value(v34, "kCBMsgArgAdvertisementData", xdict);
  xpc_release(xdict);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

void sub_1004E46E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1004E4784(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_1004E478C(uint64_t a1)
{
}

void sub_1004E479C(uint64_t a1)
{
}

void sub_1004E47B0(uint64_t a1, void *a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
  id v13 = a2;
  uint64_t v14 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = a4;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a5;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v27) = a7;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Channel connected callback : sockets : psm %u, cid %u, sock %d",  buf,  0x14u);
  }

  xpc_object_t v15 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v16 = v13;
  uint64_t v17 = v16;
  if (v16)
  {
    memset(buf, 0, sizeof(buf));
    [v16 getUUIDBytes:buf];
    xpc_dictionary_set_uuid(v15, "kCBMsgArgDeviceUUID", buf);
  }

  xpc_dictionary_set_int64(v15, "kCBMsgArgResult", a3);
  xpc_dictionary_set_int64(v15, "kCBMsgArgPSM", a4);
  xpc_dictionary_set_fd(v15, "kCBMsgArgSocket", a7);
  uint64_t v30 = 0LL;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  *(_OWORD *)__int128 buf = 0u;
  __int128 v27 = 0u;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089D890);
  }
  sub_10058C504((uint64_t)off_1008D5F08, v17, (uint64_t)buf);
  if (*(void *)buf)
  {
    id v18 = [*(id *)&buf[8] mutableCopy];
    __n128 v19 = v18;
    objc_storeStrong((id *)&buf[8], v19);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089D890);
    }
    int v20 = off_1008D5F08;
    v21[0] = *(id *)buf;
    v21[1] = *(id *)&buf[8];
    __int128 v22 = v27;
    __int128 v23 = v28;
    __int128 v24 = v29;
    int v25 = v30;
    sub_10058C62C((uint64_t)v20, v17, (uint64_t)v21);
  }

  sub_10043F1F4(a1, 23LL, v15, 1);
}

void sub_1004E4A44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1004E4A94(uint64_t a1, void *a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
}

void sub_1004E4A9C(uint64_t a1, void *a2, int a3, unsigned int a4, int a5)
{
  id v9 = a2;
  uint64_t v10 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v14) = 67109632;
    HIDWORD(v14) = a3;
    LOWORD(v15) = 1024;
    *(_DWORD *)((char *)&v15 + 2) = a4;
    HIWORD(v15) = 1024;
    int v16 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Channel disconnected callback result : %d, psm : %u, cid = %u",  (uint8_t *)&v14,  0x14u);
  }

  xpc_object_t v11 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v12 = v9;
  id v13 = v12;
  if (v12)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    [v12 getUUIDBytes:&v14];
    xpc_dictionary_set_uuid(v11, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)&v14);
  }

  xpc_dictionary_set_int64(v11, "kCBMsgArgResult", a3);
  xpc_dictionary_set_int64(v11, "kCBMsgArgPSM", a4);
  sub_10043F1F4(a1, 24LL, v11, 1);
}

void sub_1004E4BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E4C20(uint64_t a1, void *a2, int a3, unsigned int a4, int a5)
{
}

void sub_1004E4C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109376;
    int v13 = a2;
    __int16 v14 = 1024;
    int v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Channel published callback PSM : %u result : %d",  buf,  0xEu);
  }

  xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  a2,  @"kCBMsgArgPSM"));
  v10[1] = @"kCBMsgArgResult";
  v11[0] = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
  v11[1] = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  2LL));
  sub_10043F394(a1, 21LL, v9);
}

void sub_1004E4D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E4D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1004E4DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109376;
    int v13 = a2;
    __int16 v14 = 1024;
    int v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Channel unpublished callback PSM : %u, result : %d",  buf,  0xEu);
  }

  xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  a2,  @"kCBMsgArgPSM"));
  v10[1] = @"kCBMsgArgResult";
  v11[0] = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
  v11[1] = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  2LL));
  sub_10043F394(a1, 22LL, v9);
}

void sub_1004E4EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E4F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1004E4F18(uint64_t a1, BOOL a2)
{
  xpc_object_t v4 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = &stru_1008A57D8;

  id v5 = objc_opt_new(&OBJC_CLASS___NSArray);
  uint64_t v6 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v5;

  xpc_object_t v7 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 96);
    v11[0] = 67109378;
    v11[1] = a2;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "ReadyForTCC. TCC required:%d %@",  (uint8_t *)v11,  0x12u);
  }

  xpc_object_t v9 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_BOOL(v9, "kCBMsgArgRequiresTCC", a2);
  xpc_dictionary_set_string( v9,  "kCBMsgArgTCCLELocalizedCenterLabel",  (const char *)[*(id *)(a1 + 112) UTF8String]);
  uint64_t v10 = (void *)sub_10043E92C(*(void *)(a1 + 120));
  xpc_dictionary_set_value(v9, "kCBMsgArgTCCLEDevicesAroundDetails", v10);
  sub_10043F1F4(a1, 3LL, v9, 1);
  if (v10) {
    CFRelease(v10);
  }
}

void sub_1004E5080(uint64_t a1, BOOL a2)
{
}

void sub_1004E5088()
{
  BOOL v0 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::advertisingStarted", v1, 2u);
  }

void sub_1004E50EC()
{
  BOOL v0 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::advertisingStopped", v1, 2u);
  }

void sub_1004E5150(uint64_t a1, int a2)
{
  uint64_t v3 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "XpcLeAttConnection::scanningStarted error:%d",  (uint8_t *)v4,  8u);
  }

void sub_1004E51F0(uint64_t a1, int a2)
{
  uint64_t v3 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "XpcLeAttConnection::scanningStopped error:%d",  (uint8_t *)v4,  8u);
  }

void sub_1004E5290(double a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  int v15 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 138413826;
    uint64_t v17 = a3;
    __int16 v18 = 2112;
    uint64_t v19 = a4;
    __int16 v20 = 1024;
    int v21 = a5;
    __int16 v22 = 1024;
    int v23 = a6;
    __int16 v24 = 1024;
    int v25 = a7;
    __int16 v26 = 2048;
    double v27 = a1;
    __int16 v28 = 1024;
    int v29 = a8;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "XpcLeAttConnection::deviceFound data:%@ encryptedAEM:%@ avgRSSI:%d count:%d saturated:%d timestamp:%f lastScanDeltaSeconds:%d",  (uint8_t *)&v16,  0x38u);
  }

uint64_t sub_1004E53A4(uint64_t a1)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089D950);
  }
  uint64_t result = sub_1005EC82C(off_1008D6600);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E5400(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v96 = 0LL;
  uint64_t v97 = 0LL;
  id v94 = 0LL;
  uint64_t v95 = 0LL;
  uint64_t v92 = 0LL;
  uint64_t v93 = 0LL;
  uint64_t v90 = 0LL;
  uint64_t v91 = 0LL;
  uint64_t v88 = 0LL;
  uint64_t v89 = 0LL;
  uint64_t v86 = 0LL;
  uint64_t v87 = 0LL;
  uint64_t v84 = 0LL;
  uint64_t v85 = 0LL;
  id v6 = sub_10025E384(a2, "kCBScanOptionPeers");
  xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v82 = 0LL;
  uint64_t v83 = 0LL;
  uint64_t v81 = 0LL;
  uint64_t v80 = 1LL;
  uint64_t v79 = 0LL;
  uint64_t v78 = 0LL;
  uint64_t v77 = 0LL;
  uint64_t v76 = 0LL;
  uint64_t v75 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v73 = 0LL;
  id v8 = sub_10025E840(a2, "kCBManagerListOfClients");
  xpc_object_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v9));

  objc_storeStrong((id *)(a3 + 152), v10);
  uint64_t v72 = 0LL;
  uint64_t v71 = 0LL;
  uint64_t v70 = 0LL;
  uint64_t v69 = 0LL;
  uint64_t v17 = sub_10025D848(a2, 0, v11, v12, v13, v14, v15, v16, (uint64_t)"kCBScanOptionAllowDuplicates");
  if ((_DWORD)v17)
  {
    __int16 v18 = 0LL;
    goto LABEL_118;
  }

  if (*(int *)(a1 + 80) < 1)
  {
    __int16 v18 = 0LL;
  }

  else
  {
    *(_DWORD *)(a3 + 16_Block_object_dispose(va, 8) = v72;
    id v19 = sub_10025E9B4(a2, "kCBOptionUseCaseList");
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    int v21 = v20;
    if (v20)
    {
      if ([v20 count])
      {
        __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v21));
        int v23 = (void *)objc_claimAutoreleasedReturnValue([v22 allObjects]);

        int v21 = (void *)objc_claimAutoreleasedReturnValue([v23 sortedArrayUsingSelector:"compare:"]);
      }

      __int16 v18 = v21;
    }

    else
    {
      __int16 v18 = 0LL;
    }

    objc_storeStrong((id *)(a3 + 176), v18);
    if (v18 && [v18 count])
    {
      id v24 = sub_1004E646C(v18);
      int v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      __int16 v26 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        double v27 = (char *)(id)objc_claimAutoreleasedReturnValue([v25 componentsJoinedByString:@","]);
        *(_DWORD *)__int128 buf = 138412290;
        int v99 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "scanUseCaseList: %@", buf, 0xCu);
      }

      if (!v72)
      {
        __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v18 firstObject]);
        int v29 = v28;
        if (v28)
        {
          *(_DWORD *)(a3 + 16_Block_object_dispose(va, 8) = [v28 longLongValue];
          uint64_t v30 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = sub_1004E656C((int)[v29 longLongValue]);
            *(_DWORD *)__int128 buf = 136315138;
            int v99 = v31;
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "default scanUseCase derived from scanUseCaseList: %s",  buf,  0xCu);
          }
        }
      }
    }
  }

  *(_BYTE *)(a3 + 201) = *(_BYTE *)(a1 + 190);
  uint64_t v32 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 3512LL))(v32) == 32)
  {
    if (*(_BYTE *)(a1 + 191)) {
      char v33 = 32;
    }
    else {
      char v33 = 8;
    }
    *(_BYTE *)(a3 + 203) = v33;
  }

  if ((unint64_t)WORD1(v72) << 16 == 0x10000
    && (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures") & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A6A8();
    }
    goto LABEL_77;
  }

  if (sub_10025D7F4(a2, "kCBScanOptionSolicitedServiceUUIDs"))
  {
    size_t v67 = 0LL;
    std::string __p = 0LL;
    uint64_t v68 = 0LL;
    sub_100050EE8((char *)&__p, v94, v95, 0xCCCCCCCCCCCCCCCDLL * (((char *)v95 - (char *)v94) >> 2));
    if ((void **)(a3 + 32) != &__p) {
      sub_100050224( (void *)(a3 + 32),  (__int128 *)__p,  v67,  0xCCCCCCCCCCCCCCCDLL * (((char *)v67 - (_BYTE *)__p) >> 2));
    }
    if (__p)
    {
      size_t v67 = (__int128 *)__p;
      operator delete(__p);
    }
  }

  *(_BYTE *)(a3 + 121) = v88 != 0;
  *(_BYTE *)(a3 + 139) = v80;
  *(_BYTE *)(a3 + 184) = v71 != 0;
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    *(_BYTE *)(a3 + 199) = v70 != 0;
    if (!(_DWORD)v72)
    {
      unsigned int v41 = sub_10025D7F4(a2, "kCBScanOptionHWObjectDiscovery");
      if (v83) {
        unsigned int v42 = v41;
      }
      else {
        unsigned int v42 = 0;
      }
      if (v42 == 1)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10068A638();
        }
        uint64_t v81 = 1LL;
      }

      unsigned int v43 = sub_10025D7F4(a2, "kCBScanOptionHWObjectDiscoveryWild");
      uint64_t v44 = v81;
      unsigned __int8 v45 = sub_10025D7F4(a2, "kCBScanOptionHWObjectDiscoveryNearOwner");
      int v46 = v44 ? v43 : 0;
      int v47 = (v45 & (v82 != 0)) != 0 ? v46 | 2 : v46;
      if (v47)
      {
        if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            sub_10068A60C();
          }
          goto LABEL_77;
        }

        uint64_t v60 = sub_1002E6BF0();
        *(_BYTE *)(a3 + 122) = v47;
      }
    }

    *(_BYTE *)(a3 + 3) = v86 != 0;
    if (v77)
    {
      xpc_object_t v34 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        xpc_object_t v35 = (const char *)(a1 + 56);
        *(_DWORD *)__int128 buf = 136315138;
        int v99 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Session %s requested to hold a scan power assertion",  buf,  0xCu);
      }

      *(_BYTE *)(a3 + 142) = 1;
    }

    *(_BYTE *)(a3 + 144) = v75 != 0;
  }

  if (v76)
  {
    uint64_t v36 = sub_1002E6BF0();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v36 + 352LL))(v36) & 1) != 0)
    {
      if (*(int *)(a1 + 80) >= 1)
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 143) = 1;
        *(_BYTE *)(a1 + 173) = 1;
      }

      goto LABEL_60;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A384();
    }
LABEL_80:
    uint64_t v17 = 11LL;
    goto LABEL_118;
  }

void sub_1004E6074(_Unwind_Exception *a1)
{
  id v8 = *(void **)(v6 - 160);
  if (v8)
  {
    *(void *)(v6 - 152) = v8;
    operator delete(v8);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1004E613C(uint64_t a1, unsigned __int8 **a2)
{
  if (*(int *)(a1 + 80) <= 1)
  {
    xpc_object_t v4 = *a2;
    id v5 = a2[1];
    if (*a2 == v5)
    {
      uint64_t v6 = *a2;
    }

    else
    {
      while (1)
      {
        *(_OWORD *)__int128 buf = xmmword_1006BDBA8;
        int v18 = 0;
        if (sub_1001BEC7C(v4, buf)) {
          break;
        }
        v4 += 20;
        if (v4 == v5)
        {
          xpc_object_t v4 = v5;
          break;
        }
      }

      uint64_t v6 = v4;
      xpc_object_t v4 = a2[1];
    }

    if (v6 != v4)
    {
      xpc_object_t v7 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Contact tracing UUID scanning is not allowed.",  buf,  2u);
      }

      return 3LL;
    }

    xpc_object_t v9 = *a2;
    if (v9 != v4)
    {
      while (1)
      {
        if (qword_1008D5F60 != -1) {
          dispatch_once(&qword_1008D5F60, &stru_10089D850);
        }
        if ((sub_100556588(qword_1008D5F58, v9, *(unsigned __int8 *)(a1 + 183), *(unsigned int *)(a1 + 196), 0LL) & 1) == 0)
        {
          uint64_t v10 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = *(void *)(a1 + 96);
            sub_1006344B4((uint64_t)v9, buf);
            uint64_t v12 = buf;
            if (v19 < 0) {
              uint64_t v12 = *(uint8_t **)buf;
            }
            *(_DWORD *)__int16 v20 = 138412546;
            uint64_t v21 = v11;
            __int16 v22 = 2080;
            int v23 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@ wants to scan for restricted service (%s)",  v20,  0x16u);
            if (v19 < 0) {
              operator delete(*(void **)buf);
            }
          }

          __int128 v15 = xmmword_1006BDB80;
          int v16 = -1171415960;
          __int128 v13 = xmmword_1006BDCD8;
          int v14 = 0;
        }

        v9 += 20;
        if (v9 == v4) {
          return 0LL;
        }
      }

      return 3LL;
    }
  }

  return 0LL;
}

uint64_t sub_1004E63B4(void *a1)
{
  uint64_t v2 = a1[5];
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_10027F538((uint64_t)off_1008D67C0, *(void *)(v2 + 128), a1[6]);
  *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = result;
  return result;
}

void sub_1004E641C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10027F5B8((uint64_t)off_1008D67C0, *(void *)(v1 + 128));
}

id sub_1004E646C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  for (unint64_t i = 0; i < (unint64_t)[v1 count]; ++i)
  {
    xpc_object_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectAtIndex:i]);
    id v5 = +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  sub_1004E656C((int)[v4 longLongValue]));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    [v2 addObject:v6];
  }

  id v7 = [v2 copy];

  return v7;
}

void sub_1004E6530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *sub_1004E656C(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }

        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }

      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }

            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }

            break;
        }
      }

      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }

            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }

            break;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }

          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }

          break;
      }
    }
  }

  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }

        break;
    }
  }

  return result;
}

void sub_1004E6C98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_100281810((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1004E6CF0(id a1)
{
  int v47 = 0;
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "DebugOverrideConnectionMinCELength");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, __p, &v47);
  if (v47) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_13;
    }
  }

  else if (!v3)
  {
    goto LABEL_13;
  }

  xpc_object_t v4 = (os_log_s *)qword_1008F75F0;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT);
  char v6 = v47;
  if (v5)
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Warning: DebugOverrideConnectionMinCELength:%d",  buf,  8u);
    char v6 = v47;
  }

  byte_1008F1160 = v6;
  byte_1008F1165 = 1;
LABEL_13:
  uint64_t v7 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "DebugOverrideConnectionMaxCELength");
  int v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v7 + 88LL))(v7, buf, __p, &v47);
  if (v47) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v9) {
      goto LABEL_25;
    }
  }

  else if (!v9)
  {
    goto LABEL_25;
  }

  uint64_t v10 = (os_log_s *)qword_1008F75F0;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT);
  char v12 = v47;
  if (v11)
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Warning: DebugOverrideConnectionMaxCELength:%d",  buf,  8u);
    char v12 = v47;
  }

  byte_1008F1161 = v12;
  byte_1008F1165 = 1;
LABEL_25:
  uint64_t v13 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "DebugOverrideConnectionMinCIFrames");
  int v14 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v13 + 88LL))(v13, buf, __p, &v47);
  if (v47) {
    int v15 = v14;
  }
  else {
    int v15 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v15) {
      goto LABEL_37;
    }
  }

  else if (!v15)
  {
    goto LABEL_37;
  }

  int v16 = (os_log_s *)qword_1008F75F0;
  BOOL v17 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT);
  char v18 = v47;
  if (v17)
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Warning: DebugOverrideConnectionMinCELength:%d",  buf,  8u);
    char v18 = v47;
  }

  byte_1008F1160 = v18;
  byte_1008F1165 = 1;
LABEL_37:
  uint64_t v19 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "DebugOverrideConnectionMaxCIFrames");
  int v20 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v19 + 88LL))(v19, buf, __p, &v47);
  if (v47) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v21) {
      goto LABEL_49;
    }
  }

  else if (!v21)
  {
    goto LABEL_49;
  }

  __int16 v22 = (os_log_s *)qword_1008F75F0;
  BOOL v23 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT);
  char v24 = v47;
  if (v23)
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Warning: DebugOverrideConnectionMaxCELength:%d",  buf,  8u);
    char v24 = v47;
  }

  byte_1008F1161 = v24;
  byte_1008F1165 = 1;
LABEL_49:
  uint64_t v25 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "DebugOverrideConnectionSupervisionTimeout");
  int v26 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v25 + 88LL))(v25, buf, __p, &v47);
  if (v47) {
    int v27 = v26;
  }
  else {
    int v27 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v27) {
      goto LABEL_61;
    }
  }

  else if (!v27)
  {
    goto LABEL_61;
  }

  __int16 v28 = (os_log_s *)qword_1008F75F0;
  BOOL v29 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT);
  char v30 = v47;
  if (v29)
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Warning: DebugOverrideConnectionSupervisionTimeout:%d",  buf,  8u);
    char v30 = v47;
  }

  byte_1008F1161 = v30;
  byte_1008F1165 = 1;
LABEL_61:
  char v44 = 0;
  uint64_t v31 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "DebugOverrideAutoReconnectEnabled");
  int v32 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v31 + 72LL))(v31, buf, __p, &v44);
  if (v44) {
    int v33 = v32;
  }
  else {
    int v33 = 0;
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v33) {
      goto LABEL_73;
    }
  }

  else if (!v33)
  {
    goto LABEL_73;
  }

  xpc_object_t v34 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Warning: AutoReconnectEnabled for everyone",  buf,  2u);
  }

  byte_1008F1166 = v44;
LABEL_73:
  uint64_t v35 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "OverrideTxPowerConnectInd");
  int v36 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v35 + 88LL))(v35, buf, __p, &v47);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v36) {
      goto LABEL_82;
    }
  }

  else if (!v36)
  {
    goto LABEL_82;
  }

  int v37 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Warning: OverrideTxPowerConnectInd:%d",  buf,  8u);
  }

  byte_1008F1162 = v47;
  byte_1008F1165 = 1;
LABEL_82:
  uint64_t v38 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "OverrideTxPowerAuxConnectReq");
  int v39 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v38 + 88LL))(v38, buf, __p, &v47);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v39) {
      goto LABEL_91;
    }
  }

  else if (!v39)
  {
    goto LABEL_91;
  }

  BOOL v40 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Warning: OverrideTxPowerAuxConnectReq:%d",  buf,  8u);
  }

  LOBYTE(word_1008F1163) = v47;
  byte_1008F1165 = 1;
LABEL_91:
  uint64_t v41 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "OverrideMrcEnable");
  int v42 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v41 + 88LL))(v41, buf, __p, &v47);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v42) {
      return;
    }
  }

  else if (!v42)
  {
    return;
  }

  unsigned int v43 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Warning: OverrideMrcEnable:%d", buf, 8u);
  }

  HIBYTE(word_1008F1163) = v47;
  byte_1008F1165 = 1;
}

void sub_1004E7538( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E75B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10027F8D4((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32), *(void **)(a1 + 40));
}

uint64_t sub_1004E760C(uint64_t a1)
{
  uint64_t v2 = 0LL;
  char v6 = 0;
  int v5 = 0;
  do
    *((_BYTE *)&v5 + v2++) = arc4random_uniform(0x20u);
  while (v2 != 5);
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089D890);
  }
  int v3 = off_1008D5F08;
  sub_100241F90(v7, *(void *)(a1 + 32));
  return sub_1005B5FD0((uint64_t)v3, v7, (uint64_t)&v5);
}

void sub_1004E76D8(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Set LE AFH completed with status=%{bluetooth:OI_STATUS}u",  (uint8_t *)v3,  8u);
  }

void sub_1004E7778()
{
}

void sub_1004E7784(uint64_t a1, __int16 a2, char a3, char a4, char a5)
{
  word_1008F7550 = a2;
  byte_1008F7552 = a3;
  byte_1008F7553 = a4;
  byte_1008F7554 = a5;
  sub_1002431FC(&stru_1008F7520);
}

uint64_t sub_1004E77A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089D950);
  }
  return sub_1005F4E54((uint64_t)off_1008D6600, *(void *)(v2 + 128), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1004E7800(uint64_t a1)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089D950);
  }
  return sub_1005F4B38((uint64_t)off_1008D6600, *(_BYTE *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_1004E7858(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) count];
  uint64_t v13 = 0LL;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v10 = 0u;
  if (v2)
  {
    uint64_t v3 = 0LL;
    xpc_object_t v4 = &v10;
    do
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      int v5 = off_1008D5F28;
      char v6 = (void *)[*(id *)(a1 + 32) objectAtIndexedSubscript:v3, v10, v11, v12, v13];
      unint64_t v7 = sub_1005CC198((uint64_t)v5, v6, 0);
      uint64_t v8 = sub_1001BCDB0(v7);
      *(_DWORD *)xpc_object_t v4 = v8;
      *((_BYTE *)v4 + 6) = BYTE6(v8);
      *((_WORD *)v4 + 2) = WORD2(v8);

      ++v3;
      xpc_object_t v4 = (__int128 *)((char *)v4 + 7);
    }

    while (v2 != v3);
  }

  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089D950);
  }
  return sub_1005F4BB8( (uint64_t)off_1008D6600,  (uint64_t)&v10,  v2,  *(unsigned __int8 *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48));
}

void sub_1004E79C0(_Unwind_Exception *exception_object)
{
}

void sub_1004E79D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10027F6F0((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1004E7A30(uint64_t a1)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089D950);
  }
  return sub_1005F4ED8((uint64_t)off_1008D6600, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_1004E7A80(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  return (*(uint64_t (**)(uint64_t, BOOL, void, void, void, void, void, void))(*(void *)v2 + 656LL))( v2,  *(void *)(a1 + 32) != 0LL,  *(unsigned __int8 *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48),  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 64),  *(unsigned __int8 *)(a1 + 72),  *(unsigned __int8 *)(a1 + 80));
}

uint64_t sub_1004E7ACC(uint64_t a1)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089D890);
  }
  uint64_t v2 = off_1008D5F08;
  sub_100241F90(v4, *(void *)(a1 + 32));
  return sub_10059A200((uint64_t)v2, v4, *(unsigned __int16 *)(a1 + 40));
}

void sub_1004E7B6C(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  id v7 = a2;
  xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t reply = xpc_dictionary_create_reply(v8);
  if (reply)
  {
    id v10 = v7;
    __int128 v11 = v10;
    if (v10)
    {
      *(void *)uuid = 0LL;
      uint64_t v13 = 0LL;
      [v10 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(reply, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", a4);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgNumConfigSupported", *a3);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgMaxProceduresSupported", *((unsigned __int16 *)a3 + 1));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgNumAntennasSupported", a3[4]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRolesSupported", a3[5]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgModes_Supported", a3[6]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTCapability", a3[7]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTCoarseN", a3[8]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTSoundingN", a3[9]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTRandomPayloadN", a3[10]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgCSSyncPHYsSupported", a3[11]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgSubfeaturesSupported", *((unsigned __int16 *)a3 + 6));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTIP1TimesSupported", *((unsigned __int16 *)a3 + 7));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTIP2TimesSupported", *((unsigned __int16 *)a3 + 8));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTFcsTimesSupported", *((unsigned __int16 *)a3 + 9));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTPMTimesSupported", *((unsigned __int16 *)a3 + 10));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTSWTimesSupported", a3[22]);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }
}

void sub_1004E7D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E7DC0(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
}

uint64_t sub_1004E7DC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_1002824D4((uint64_t)off_1008D67C0, *(void *)(v2 + 128));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E7E2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_100282510((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E7E94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  xpc_object_t v4 = *(void **)(a1 + 32);
  __int128 v5 = *(_OWORD *)(a1 + 72);
  __int128 v7 = *(_OWORD *)(a1 + 56);
  v8[0] = v5;
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)(a1 + 82);
  uint64_t result = sub_100282584((uint64_t)off_1008D67C0, v3, v4, &v7);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E7F1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_100282618((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E7F84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_10028268C((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E7FEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  xpc_object_t v4 = *(void **)(a1 + 32);
  __int128 v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  void v7[2] = *(_OWORD *)(a1 + 88);
  int v8 = *(_DWORD *)(a1 + 104);
  uint64_t result = sub_100282700((uint64_t)off_1008D67C0, v3, v4, (uint64_t)v7);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E807C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_10028279C( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(unsigned __int8 *)(a1 + 56));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E80E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_100282818( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  *(unsigned __int8 *)(a1 + 64));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E8160(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  xpc_object_t v4 = *(void **)(a1 + 32);
  __int128 v6 = *(_OWORD *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t result = sub_1002828A4((uint64_t)off_1008D67C0, v3, v4, &v6);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E81E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_100282938((uint64_t)off_1008D67C0, *(void *)(v2 + 128), a1 + 48);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_1004E824C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &off_10087FAA8;
  *(void *)(a1 + 56) = v3;
  if (v3) {
    sub_1002CD1E0(v3);
  }
}

void sub_1004E826C(uint64_t a1)
{
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &off_10087FAA8;
  uint64_t v1 = *(unsigned int **)(a1 + 56);
  if (v1) {
    sub_1002CD254(v1);
  }
}

uint64_t sub_1004E8288(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_10028297C( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 64),  *(unsigned __int8 *)(a1 + 72));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E82FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_100282A10((uint64_t)off_1008D67C0, *(void *)(v2 + 128));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E8360(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_100282A4C((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E83C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_100282AC0((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32), a1 + 56);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E8434(uint64_t a1)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089D890);
  }
  uint64_t v2 = off_1008D5F08;
  sub_100241F90(v4, *(void *)(a1 + 32));
  return sub_10059A274((uint64_t)v2, v4, *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1004E84DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  xpc_object_t v4 = *(void **)(a1 + 32);
  __int128 v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  int v8 = *(_DWORD *)(a1 + 88);
  uint64_t result = sub_1002822C0((uint64_t)off_1008D67C0, v3, v4, (uint64_t)v7, *(void **)(v2 + 96));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E8568(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_100282374( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void *)(a1 + 56) != 0LL,  *(void **)(a1 + 32),  *(_DWORD *)(a1 + 72),  *(unsigned __int8 *)(a1 + 64));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E85E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  unint64_t v3 = *(void *)(v2 + 128);
  BOOL v4 = *(void *)(a1 + 56) != 0LL;
  __int128 v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(unsigned __int16 *)(a1 + 64);
  __int128 v7 = *(_OWORD *)(a1 + 88);
  v9[0] = *(_OWORD *)(a1 + 72);
  v9[1] = v7;
  uint64_t result = sub_100282408( (uint64_t)off_1008D67C0,  v3,  v4,  v5,  v6,  v9,  *(unsigned __int8 *)(a1 + 104),  *(void **)(v2 + 96));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1004E867C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  v15[0] = *(void *)(a1 + 32);
  v15[1] = v2;
  uint64_t v3 = *(void *)(a1 + 56);
  void v15[2] = *(void *)(a1 + 48);
  v14[0] = v3;
  uint64_t v4 = *(void *)(a1 + 72);
  v14[1] = *(void *)(a1 + 64);
  void v14[2] = v4;
  uint64_t v5 = *(void *)(a1 + 88);
  v13[0] = *(void *)(a1 + 80);
  v13[1] = v5;
  uint64_t v6 = *(void *)(a1 + 104);
  void v13[2] = *(void *)(a1 + 96);
  v12[0] = v6;
  uint64_t v7 = *(void *)(a1 + 120);
  v12[1] = *(void *)(a1 + 112);
  void v12[2] = v7;
  uint64_t v8 = sub_1002E6E9C();
  char v11 = *(void *)(a1 + 168);
  char v10 = *(void *)(a1 + 160);
  return (*(uint64_t (**)(uint64_t, void, void, void, _BYTE *, _WORD *, _WORD *, void, char, _WORD *, char))(*(void *)v8 + 664LL))( v8,  *(unsigned __int8 *)(a1 + 128),  *(unsigned __int8 *)(a1 + 136),  *(unsigned __int8 *)(a1 + 144),  v15,  v14,  v13,  *(unsigned __int8 *)(a1 + 152),  v10,  v12,  v11);
}

uint64_t sub_1004E8728(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089D950);
  }
  uint64_t v3 = off_1008D6600;
  uint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = sub_10056AAF0(a1 + 40);
  unsigned __int16 v6 = sub_10056AAD8(a1 + 40);
  uint64_t v7 = sub_10056AAF0(a1 + 56);
  unsigned __int16 v8 = sub_10056AAD8(a1 + 56);
  HIBYTE(v10) = *(void *)(a1 + 112);
  LOBYTE(v10) = *(void *)(a1 + 104);
  return sub_1005F4C40( (uint64_t)v3,  v4,  v5,  v6,  v7,  v8,  *(char *)(a1 + 72),  *(unsigned __int8 *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  v10,  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136));
}

void sub_1004E8820(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = &off_10087FAA8;
  a1[6] = v4;
  if (v4) {
    sub_1002CD1E0(v4);
  }
  uint64_t v5 = *(void *)(a2 + 64);
  a1[7] = &off_10087FAA8;
  a1[8] = v5;
  if (v5) {
    sub_1002CD1E0(v5);
  }
}

void sub_1004E8870(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + sub_100242E28(v1 + 40) = v2;
  uint64_t v4 = *(unsigned int **)(v1 + 48);
  if (v4) {
    sub_1002CD254(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E888C(void *a1)
{
  a1[7] = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)a1[8];
  if (v2) {
    sub_1002CD254(v2);
  }
  a1[5] = &off_10087FAA8;
  uint64_t v3 = (unsigned int *)a1[6];
  if (v3) {
    sub_1002CD254(v3);
  }
}

uint64_t sub_1004E88D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089D950);
  }
  uint64_t v3 = off_1008D6600;
  uint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = sub_10056AAF0(a1 + 40);
  unsigned __int16 v6 = sub_10056AAD8(a1 + 40);
  uint64_t v7 = sub_10056AAF0(a1 + 56);
  unsigned __int16 v8 = sub_10056AAD8(a1 + 56);
  HIBYTE(v10) = *(void *)(a1 + 112);
  LOBYTE(v10) = *(void *)(a1 + 104);
  return sub_1005F4D54( (uint64_t)v3,  v4,  v5,  v6,  v7,  v8,  *(char *)(a1 + 72),  *(unsigned __int8 *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  v10,  *(void *)(a1 + 120));
}

void sub_1004E89C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_100281E68( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(void *)(a1 + 48) != 0LL,  *(void *)(a1 + 56) != 0LL,  0);
}

void sub_1004E8A34(void *a1)
{
  uint64_t v2 = a1[6];
  if (*(int *)(v2 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A7C0();
    }
    goto LABEL_19;
  }

  uint64_t v3 = (void **)(a1 + 4);
  if (!a1[4])
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A6D4();
    }
    goto LABEL_19;
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  if (sub_1005CC0B8((uint64_t)off_1008D5F28, *v3))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A700();
    }
LABEL_19:
    xpc_object_t v4 = 0LL;
    goto LABEL_20;
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  sub_1005CF5E8((uint64_t)off_1008D5F28);
  *(void *)uuid_t uu = 0LL;
  uint64_t v10 = 0LL;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  sub_1005D11B0((uint64_t)off_1008D5F28, *v3, uu);
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A760();
    }
    goto LABEL_19;
  }

  uint64_t v7 = sub_100241F94(uu);
  unsigned __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  xpc_object_t v4 = sub_1004DEC38(v8, *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));

LABEL_20:
  uint64_t v6 = a1[5];
  uint64_t v5 = a1 + 5;
  xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(v6 + 8) + 24LL), "kCBMsgArgDevices", v4);
  xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), *(xpc_object_t *)(*(void *)(*v5 + 8LL) + 24LL));
  xpc_release(*(xpc_object_t *)(*(void *)(*v5 + 8LL) + 24LL));
  if (v4) {
    xpc_release(v4);
  }
}

void sub_1004E8C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E8C90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t v3 = off_1008D67C0;
  unint64_t v4 = *(void *)(v2 + 128);
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  std::string __p = 0LL;
  sub_100050EE8( (char *)&__p,  *(__int128 **)(a1 + 48),  *(__int128 **)(a1 + 56),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2));
  sub_10028355C((uint64_t)v3, v4, v5, (unsigned __int8 **)&__p, *(void *)(a1 + 72) != 0LL);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }

void sub_1004E8D50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1004E8D6C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  uint64_t v2 = a1 + 48;
  *(void *)(v2 + 16) = 0LL;
  return sub_100050EE8( (char *)v2,  *(__int128 **)(a2 + 48),  *(__int128 **)(a2 + 56),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2));
}

void sub_1004E8D94(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void sub_1004E8DAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_1002820A4((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1004E8E04(id a1)
{
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_1002836D8();
}

void sub_1004E8E44(id a1)
{
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_100283604();
}

uint64_t sub_1004E8E84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089D950);
  }
  if (*(void *)(v1 + 96)) {
    uint64_t v2 = *(__CFString **)(v1 + 96);
  }
  else {
    uint64_t v2 = @"-";
  }
  return sub_100609C14((uint64_t)off_1008D6600, v2);
}

uint64_t sub_1004E8EE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089D950);
  }
  if (*(void *)(v1 + 96)) {
    uint64_t v2 = *(__CFString **)(v1 + 96);
  }
  else {
    uint64_t v2 = @"-";
  }
  return sub_100609ECC((uint64_t)off_1008D6600, v2);
}

void sub_1004E8F44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_1002832DC( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(unsigned int *)(a1 + 56));
  uint64_t v3 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "AppManager::getInstance()->setConnectionLatency returned %d",  (uint8_t *)v5,  8u);
  }

uint64_t sub_1004E9040(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  HIWORD(v5) = *(void *)(a1 + 176);
  LOWORD(v5) = *(void *)(a1 + 168);
  HIWORD(v4) = *(void *)(a1 + 160);
  LOWORD(v4) = *(void *)(a1 + 152);
  uint64_t result = sub_100282C54( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 64),  *(unsigned __int8 *)(a1 + 72),  *(char *)(a1 + 80),  *(_BYTE *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  v4,  v5);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1004E9108(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_100282E1C((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 48));
}

void sub_1004E9164(id a1)
{
  __int16 v44 = 0;
  ____int128 buf = 0;
  arc4random_buf(&__buf, 6uLL);
  __int16 v42 = 0;
  int v41 = 0;
  arc4random_buf(&v41, 6uLL);
  uint64_t v1 = v41 | 0x3FLL;
  LOBYTE(v41) = v41 | 0x3F;
  uint64_t v2 = HIBYTE(v42) | 0x3FLL;
  HIBYTE(v42) |= 0x3Fu;
  unint64_t v3 = (v1 << 40) | ((unint64_t)BYTE1(v41) << 32) | ((unint64_t)BYTE2(v41) << 24) | ((unint64_t)HIBYTE(v41) << 16) | ((unint64_t)v42 << 8) | v2 | 0x1000000000000LL;
  uint64_t v4 = __buf;
  uint64_t v5 = BYTE1(__buf);
  uint64_t v6 = BYTE2(__buf);
  uint64_t v7 = HIBYTE(__buf);
  uint64_t v8 = v44;
  uint64_t v9 = HIBYTE(v44);
  *(void *)uuid_t uu = 0LL;
  uint64_t v49 = 0LL;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  sub_1005C8684((uint64_t)off_1008D5F28, v3, 1u, 1u, 0LL, 0LL, uu);
  if (!uuid_is_null(uu))
  {
    uint64_t v10 = operator new(0x28uLL);
    void v10[2] = 1;
    *(void *)uint64_t v10 = &off_10089A468;
    *((void *)v10 + 4) = 0LL;
    *((void *)v10 + 3) = 0LL;
    *((void *)v10 + 2) = v10 + 6;
    int v39 = &off_10089A548;
    BOOL v40 = v10;
    __int16 v38 = 0;
    v46[1] = 0LL;
    uint64_t v47 = 0LL;
    v45[1] = 0LL;
    v46[0] = 0LL;
    v45[0] = 0LL;
    char v37 = 16;
    char v36 = 0;
    arc4random_buf(v46, 0x10uLL);
    arc4random_buf(v45, 0x10uLL);
    arc4random_buf(&v47, 8uLL);
    arc4random_buf(&v38, 2uLL);
    uint64_t v35 = 0LL;
    __int128 v33 = 0u;
    memset(v34, 0, sizeof(v34));
    *(_OWORD *)uint64_t v31 = 0u;
    __int128 v32 = 0u;
    memset(v30, 0, sizeof(v30));
    __int128 v29 = 0u;
    sub_1001FCFC8((uint64_t)&v29);
    char v11 = sub_1001FD17C(v30, (uint64_t)"FAKE_LE_DEVICE_", 15LL);
    sub_1005BFC20(v3, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    sub_1001FD17C(v11, (uint64_t)p_p, size);
    uint64_t v14 = sub_1001BCDB0((v4 << 40) | (v5 << 32) | (v6 << 24) | (v7 << 16) | (v8 << 8) | v9);
    int v25 = v14;
    char v27 = BYTE6(v14);
    __int16 v26 = WORD2(v14);
    sub_10056AB04(&__p, &v25, 7uLL);
    sub_10032B1F8((uint64_t)v10, 11, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, &v38, 2uLL);
    sub_10032B1F8((uint64_t)v10, 3, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, &v47, 8uLL);
    sub_10032B1F8((uint64_t)v10, 4, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, v46, 0x10uLL);
    sub_10032B1F8((uint64_t)v10, 0, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, &v37, 1uLL);
    sub_10032B1F8((uint64_t)v10, 1, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, &v36, 1uLL);
    sub_10032B1F8((uint64_t)v10, 2, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, v45, 0x10uLL);
    sub_10032B1F8((uint64_t)v10, 10, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, &v38, 2uLL);
    sub_10032B1F8((uint64_t)v10, 8, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, &v47, 8uLL);
    sub_10032B1F8((uint64_t)v10, 9, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, v46, 0x10uLL);
    sub_10032B1F8((uint64_t)v10, 5, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, &v37, 1uLL);
    sub_10032B1F8((uint64_t)v10, 6, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    sub_10056AB04(&__p, &v36, 1uLL);
    sub_10032B1F8((uint64_t)v10, 7, (uint64_t)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
    if (__p.__r_.__value_.__l.__size_) {
      sub_1002CD254((unsigned int *)__p.__r_.__value_.__l.__size_);
    }
    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
    }
    uint64_t v15 = qword_1008D5F18;
    int v16 = sub_100241F94(uu);
    BOOL v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    std::stringbuf::str(&v24, (const std::stringbuf *)((char *)v30 + 8));
    sub_10062C894(v15, v17, (uint64_t)&v39, (uint64_t)&v24);

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    char v18 = off_1008D5F28;
    uint64_t v19 = sub_100241F94(uu);
    int v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    sub_10002418C(v22, "_FAKE_LE_DEVICE");
    sub_1005CCF08((uint64_t)v18, v20, (unsigned __int8 *)v22);
    if (v23 < 0) {
      operator delete(v22[0]);
    }

    *(void *)((char *)&v30[-1]
    *(void *)&v30[0] = v21;
    if (SHIBYTE(v32) < 0) {
      operator delete(v31[1]);
    }
    std::streambuf::~streambuf((char *)v30 + 8);
    std::ios::~ios(v34);
    int v39 = &off_10089A548;
    if (v40) {
      sub_1002CD254(v40);
    }
  }

void sub_1004E97B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  sub_1001FD0F4((uint64_t)&a28);
  uint64_t v31 = *(unsigned int **)(v29 - 176);
  *(void *)(v29 - 184) = &off_10089A548;
  if (v31) {
    sub_1002CD254(v31);
  }
  _Unwind_Resume(a1);
}

void sub_1004E98EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = sub_10025E1C8(*(void **)(a1 + 48), "kCBMsgArgName");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  if ((sub_1005D79C0((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(v2 + 96), *(void **)(v2 + 48)) & 1) != 0)
  {
    if (*(_BYTE *)(v2 + 183))
    {
      uint64_t v5 = 0LL;
      if (*(void *)(a1 + 32) && v4)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089D810);
        }
        id v6 = sub_1005CED70((uint64_t)off_1008D5F28, *(void **)(a1 + 32), v4);
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v6);
      }
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
    if (reply)
    {
      __int128 v12 = (void *)_CFXPCCreateXPCObjectFromCFObject(v5);
      xpc_dictionary_set_string( reply, "kCBMsgArgCustomPropertyName", (const char *)[v4 UTF8String]);
      xpc_dictionary_set_value(reply, "kCBMsgArgCustomPropertyValue", v12);
      xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), reply);
      if (v12) {
        xpc_release(v12);
      }
      xpc_release(reply);
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(v2 + 96);
      uint64_t v9 = *(void *)(v2 + 48);
      uint64_t v10 = *(void *)(a1 + 32);
      int v13 = 138412802;
      uint64_t v14 = v8;
      __int16 v15 = 2112;
      uint64_t v16 = v9;
      __int16 v17 = 2112;
      uint64_t v18 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  (uint8_t *)&v13,  0x20u);
    }
  }
}

void sub_1004E9AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004E9B1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  if ((sub_1005D79C0((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(v2 + 96), *(void **)(v2 + 48)) & 1) != 0)
  {
    if (*(_BYTE *)(v2 + 183) && *(void *)(a1 + 32))
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_10089D810);
      }
      id v3 = sub_1005CECD8((uint64_t)off_1008D5F28, *(void **)(a1 + 32));
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    }

    else
    {
      uint64_t v4 = &__NSArray0__struct;
    }

    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
    if (reply)
    {
      xpc_object_t v10 = xpc_array_create(0LL, 0LL);
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      id v11 = v4;
      id v12 = [v11 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v17;
        do
        {
          for (unint64_t i = 0LL; i != v12; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v17 != v13) {
              objc_enumerationMutation(v11);
            }
            id v15 = *(id *)(*((void *)&v16 + 1) + 8LL * (void)i);
            xpc_array_set_string(v10, 0xFFFFFFFFFFFFFFFFLL, (const char *)[v15 UTF8String]);
          }

          id v12 = [v11 countByEnumeratingWithState:&v16 objects:v20 count:16];
        }

        while (v12);
      }

      xpc_dictionary_set_value(reply, "kCBMsgArgCustomPropertyNames", v10);
      xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), reply);
      if (v10) {
        xpc_release(v10);
      }
      xpc_release(reply);
    }
  }

  else
  {
    uint64_t v5 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(v2 + 96);
      uint64_t v7 = *(void *)(v2 + 48);
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v22 = v6;
      __int16 v23 = 2112;
      uint64_t v24 = v7;
      __int16 v25 = 2112;
      uint64_t v26 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
    }
  }

void sub_1004E9D94(_Unwind_Exception *a1)
{
}

uint64_t sub_1004E9DD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_1002833A0((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1004E9E40(uint64_t a1)
{
  uint64_t v20 = *(void *)(a1 + 48);
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v27 objects:v34 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v28;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v28 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)v5);
        uint64_t v7 = *(void **)(a1 + 40);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089D810);
        }
        uint64_t v8 = off_1008D5F28;
        sub_10002418C(__p, (char *)[v6 UTF8String]);
        id v9 = sub_1005CE714((uint64_t)v8, (uint64_t)__p);
        xpc_object_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        [v7 addObjectsFromArray:v10];

        if (v26 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v27 objects:v34 count:16];
    }

    while (v3);
  }

  if (*(void *)(a1 + 40))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    sub_1005CF5E8((uint64_t)off_1008D5F28);
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id v11 = *(id *)(a1 + 40);
    id v12 = [v11 countByEnumeratingWithState:&v21 objects:v33 count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v22;
      do
      {
        uint64_t v14 = 0LL;
        do
        {
          if (*(void *)v22 != v13) {
            objc_enumerationMutation(v11);
          }
          id v15 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)v14);
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          if (sub_1005CC0B8((uint64_t)off_1008D5F28, v15))
          {
            xpc_object_t v16 = sub_1004DEC38(v15, *(unsigned __int8 *)(v20 + 168), *(_DWORD *)(v20 + 80));
            xpc_array_append_value(*(xpc_object_t *)(a1 + 56), v16);
            xpc_release(v16);
          }

          else
          {
            __int128 v17 = (os_log_s *)qword_1008F75F0;
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138412290;
              __int128 v32 = v15;
              _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Device %@ does not exist",  buf,  0xCu);
            }
          }

          uint64_t v14 = (char *)v14 + 1;
        }

        while (v12 != v14);
        id v12 = [v11 countByEnumeratingWithState:&v21 objects:v33 count:16];
      }

      while (v12);
    }
  }

  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 64));
  __int128 v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", *(xpc_object_t *)(a1 + 56));
    xpc_connection_send_message(*(xpc_connection_t *)(v20 + 16), v19);
    xpc_release(v19);
  }

  xpc_release(*(xpc_object_t *)(a1 + 56));
}

void sub_1004EA188( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  _Unwind_Resume(a1);
}

void sub_1004EA1DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v3 = *(void **)(a1 + 32);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  id v4 = sub_1005CEB2C((uint64_t)off_1008D5F28, *(void **)(a1 + 40));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  [v3 addObjectsFromArray:v5];

  if (*(void *)(a1 + 32))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    sub_1005CF5E8((uint64_t)off_1008D5F28);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v6 = *(id *)(a1 + 32);
    id v7 = [v6 countByEnumeratingWithState:&v14 objects:v20 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v15;
      do
      {
        id v9 = 0LL;
        do
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v6);
          }
          xpc_object_t v10 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)v9);
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_10089D810);
          }
          if (sub_1005CC0B8((uint64_t)off_1008D5F28, v10))
          {
            xpc_object_t v11 = sub_1004DEC38(v10, *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));
            xpc_array_append_value(*(xpc_object_t *)(a1 + 64), v11);
            xpc_release(v11);
          }

          else
          {
            id v12 = (os_log_s *)qword_1008F75F0;
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138412290;
              __int128 v19 = v10;
              _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Device %@ does not exist",  buf,  0xCu);
            }
          }

          id v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v6 countByEnumeratingWithState:&v14 objects:v20 count:16];
      }

      while (v7);
    }
  }

  uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (v13)
  {
    xpc_dictionary_set_value(v13, "kCBMsgArgDevices", *(xpc_object_t *)(a1 + 64));
    xpc_connection_send_message( *(xpc_connection_t *)(v2 + 16),  *(xpc_object_t *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
  }

  xpc_release(*(xpc_object_t *)(a1 + 64));
}

void sub_1004EA470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EA4A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v47 = 0;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v42 = 0u;
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
  }
  sub_10062923C(qword_1008D5F18, *(void **)(a1 + 32), (uint64_t)&v42);
  __int16 v41 = 0;
  int bytes = 0;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089D8F0);
  }
  sub_100431644((uint64_t)off_1008D60A8, (uint64_t)&bytes);
  __int16 v38 = 0LL;
  int v39 = 0LL;
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
  }
  sub_10056AB04(&v38, (const void *)(qword_1008D5F18 + 184), 0x10uLL);
  int64_t v3 = BYTE8(v46);
  int v36 = *(_DWORD *)((char *)&v46 + 9);
  __int16 v37 = *(_WORD *)((char *)&v46 + 13);
  xpc_object_t v34 = 0LL;
  uint64_t v35 = 0LL;
  sub_10056AB04(&v34, &v42, 0x10uLL);
  __int128 v32 = 0LL;
  __int128 v33 = 0LL;
  sub_10056AB04(&v32, (char *)&v43 + 12, 0x10uLL);
  __int128 v30 = 0LL;
  uint64_t v31 = 0LL;
  sub_10056AB04(&v30, (char *)&v43 + 4, 8uLL);
  __int128 v28 = 0LL;
  __int128 v29 = 0LL;
  sub_10056AB04(&v28, &v45, 8uLL);
  char v26 = 0LL;
  __int128 v27 = 0LL;
  sub_10056AB04(&v26, (char *)&v45 + 8, 0x10uLL);
  __int128 v24 = 0LL;
  __int16 v25 = 0LL;
  sub_10056AB04(&v24, (char *)&v44 + 14, 2uLL);
  __int128 v22 = 0LL;
  __int128 v23 = 0LL;
  sub_10056AB04(&v22, (char *)&v43 + 2, 2uLL);
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  uint64_t v5 = reply;
  if (reply)
  {
    xpc_dictionary_set_data(reply, "kCBMsgArgAddressString", &bytes, 6uLL);
    id v6 = (const void *)sub_10056AAF0((uint64_t)&v38);
    size_t v7 = sub_10056AAD8((uint64_t)&v38);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalIRK", v6, v7);
    uint64_t v8 = (const void *)sub_10056AAF0((uint64_t)&v34);
    size_t v9 = sub_10056AAD8((uint64_t)&v34);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteLTK", v8, v9);
    xpc_object_t v10 = (const void *)sub_10056AAF0((uint64_t)&v22);
    size_t v11 = sub_10056AAD8((uint64_t)&v22);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteEdiv", v10, v11);
    id v12 = (const void *)sub_10056AAF0((uint64_t)&v30);
    size_t v13 = sub_10056AAD8((uint64_t)&v30);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteRand", v12, v13);
    __int128 v14 = (const void *)sub_10056AAF0((uint64_t)&v32);
    size_t v15 = sub_10056AAD8((uint64_t)&v32);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalLTK", v14, v15);
    __int128 v16 = (const void *)sub_10056AAF0((uint64_t)&v24);
    size_t v17 = sub_10056AAD8((uint64_t)&v24);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalEdiv", v16, v17);
    __int128 v18 = (const void *)sub_10056AAF0((uint64_t)&v28);
    size_t v19 = sub_10056AAD8((uint64_t)&v28);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalRand", v18, v19);
    uint64_t v20 = (const void *)sub_10056AAF0((uint64_t)&v26);
    size_t v21 = sub_10056AAD8((uint64_t)&v26);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteIRK", v20, v21);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteAddress", &v36, 6uLL);
    xpc_dictionary_set_int64(v5, "kCBMsgArgRemoteAddressType", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }

  __int128 v22 = &off_10087FAA8;
  if (v23) {
    sub_1002CD254(v23);
  }
  __int128 v24 = &off_10087FAA8;
  if (v25) {
    sub_1002CD254(v25);
  }
  char v26 = &off_10087FAA8;
  if (v27) {
    sub_1002CD254(v27);
  }
  __int128 v28 = &off_10087FAA8;
  if (v29) {
    sub_1002CD254(v29);
  }
  __int128 v30 = &off_10087FAA8;
  if (v31) {
    sub_1002CD254(v31);
  }
  __int128 v32 = &off_10087FAA8;
  if (v33) {
    sub_1002CD254(v33);
  }
  xpc_object_t v34 = &off_10087FAA8;
  if (v35) {
    sub_1002CD254(v35);
  }
  __int16 v38 = &off_10087FAA8;
  if (v39) {
    sub_1002CD254(v39);
  }
}

void sub_1004EA8D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, uint64_t a13, unsigned int *a14, uint64_t a15, unsigned int *a16, uint64_t a17, unsigned int *a18, uint64_t a19, unsigned int *a20, uint64_t a21, unsigned int *a22, uint64_t a23, uint64_t a24, unsigned int *a25)
{
  if (a12) {
    sub_1002CD254(a12);
  }
  if (a14) {
    sub_1002CD254(a14);
  }
  if (a16) {
    sub_1002CD254(a16);
  }
  if (a18) {
    sub_1002CD254(a18);
  }
  if (a20) {
    sub_1002CD254(a20);
  }
  if (a22) {
    sub_1002CD254(a22);
  }
  if (a25) {
    sub_1002CD254(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004EA9E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  int64_t v3 = sub_100556F78(qword_1008D5F58);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = [v4 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v18;
    do
    {
      size_t v7 = 0LL;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)v7);
        if (qword_1008D9278 != -1) {
          dispatch_once(&qword_1008D9278, &stru_10089D9B0);
        }
        if (!sub_100413550(qword_1008D9270, v8))
        {
          uint64_t v10 = qword_1008F75F0;
          if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v22 = v8;
          size_t v11 = (os_log_s *)v10;
          id v12 = "Device %@ is not connected";
          uint32_t v13 = 12;
LABEL_26:
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v12, buf, v13);
          goto LABEL_23;
        }

        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089D810);
        }
        if ((sub_1005D79C0((uint64_t)off_1008D5F28, v8, *(void **)(v2 + 96), *(void **)(v2 + 48)) & 1) == 0)
        {
          uint64_t v14 = qword_1008F75F0;
          if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
          size_t v15 = *(void **)(v2 + 96);
          *(_DWORD *)__int128 buf = 138412546;
          __int128 v22 = v15;
          __int16 v23 = 2112;
          __int128 v24 = v8;
          size_t v11 = (os_log_s *)v14;
          id v12 = "Bundle %@ is not allowed to access device %@";
          uint32_t v13 = 22;
          goto LABEL_26;
        }

        if (*(void *)(a1 + 40) && *(void *)(a1 + 48) == *(void *)(a1 + 56)) {
          goto LABEL_19;
        }
        if (qword_1008D5F60 != -1) {
          dispatch_once(&qword_1008D5F60, &stru_10089D850);
        }
        if (sub_10055679C( qword_1008D5F58,  v8,  (__int128 **)(a1 + 48),  *(unsigned __int8 *)(v2 + 183),  *(unsigned int *)(v2 + 196),  0))
        {
LABEL_19:
          xpc_object_t v9 = sub_1004DEC38(v8, *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));
          xpc_array_append_value(*(xpc_object_t *)(a1 + 72), v9);
          xpc_release(v9);
        }

void sub_1004EACE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EAD0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  memset(v9, 0, 206);
  int64_t value = 0LL;
  uint64_t v3 = sub_1002E6E9C();
  int v4 = (*(uint64_t (**)(uint64_t, _OWORD *, int64_t *))(*(void *)v3 + 3528LL))(v3, v9, &value);
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 40));
  if (reply)
  {
    uint64_t v6 = reply;
    xpc_dictionary_set_int64(reply, "kCBUsageStatsLePercent", WORD4(v9[0]) + (unint64_t)WORD2(v9[0]));
    xpc_dictionary_set_int64(v6, "kCBUsageStatsClPercent", WORD5(v9[0]) + (unint64_t)WORD3(v9[0]));
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_10089D9D0);
    }
    BOOL v7 = sub_100449464(off_1008D6190);
    xpc_dictionary_set_int64(v6, "kCBUsageStatsIsAudioStreaming", v7);
    xpc_dictionary_set_int64(v6, "kCBUsageStatsTimeStampNsMonotonic", value);
    xpc_dictionary_set_int64(v6, "kCBMsgArgResult", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v6);
    xpc_release(v6);
  }

uint64_t sub_1004EAE74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_10028F334( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 64) != 0LL);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1004EAEEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089D890);
  }
  id v3 = sub_10059A440((uint64_t)off_1008D5F08);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      BOOL v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)v7);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_10089D810);
        }
        if ((sub_1005D79C0((uint64_t)off_1008D5F28, v8, *(void **)(v2 + 96), *(void **)(v2 + 48)) & 1) != 0)
        {
          xpc_object_t v9 = sub_1004DEC38(v8, *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));
          xpc_array_append_value(*(xpc_object_t *)(a1 + 40), v9);
          xpc_release(v9);
        }

        BOOL v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }
}

void sub_1004EB08C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EB0B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(int *)(v2 + 80) < 1 || *(uint64_t *)(a1 + 48) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A7EC();
    }
    int64_t v3 = 0LL;
  }

  else
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    int64_t v3 = sub_1005D9E78((uint64_t)off_1008D5F28, *(unsigned __int16 *)(a1 + 48));
  }

  int v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v4)
  {
    if (*(uint64_t *)(a1 + 48) >= 1)
    {
      xpc_dictionary_set_int64(v4, "kCBMsgArgResultDeviceCount", v3);
      int v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    }

    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v4);
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }

void sub_1004EB1BC(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6 = a3;
  if (v6)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
      uint64_t v8 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        xpc_object_t v9 = (void *)(a1 + 56);
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&uint8_t buf[14] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Sending 'connection completed' event for device %@ to session %{public}s",  buf,  0x16u);
      }

      id v10 = v6;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      [v10 getUUIDBytes:buf];
      xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", buf);

      xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
      if (!a4)
      {
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_10089D890);
        }
        __int128 v11 = off_1008D5F08;
        sub_100241F90(buf, v10);
        unsigned int v12 = sub_10059A15C((uint64_t)v11, buf);
        xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionRole", v12);
        if (qword_1008D9268 != -1) {
          dispatch_once(&qword_1008D9268, &stru_10089D990);
        }
        unsigned int v13 = sub_10038798C(qword_1008D9260, v10);
        xpc_dictionary_set_int64(v7, "kCBMsgArgATTMTU", v13);
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_10089D890);
        }
        uint64_t v14 = off_1008D5F08;
        sub_100241F90(buf, v10);
        else {
          int64_t v15 = 1LL;
        }
        xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionTransport", v15);
        if (*(_BYTE *)(a1 + 168))
        {
          if (qword_1008D5F10 != -1) {
            dispatch_once(&qword_1008D5F10, &stru_10089D890);
          }
          id v16 = off_1008D5F08;
          sub_100241F90(buf, v10);
          char v17 = sub_10059A0AC((uint64_t)v16, buf);
          xpc_dictionary_set_BOOL(v7, "kCBMsgArgIsLinkEncrypted", v17);
        }

        *(_DWORD *)__int128 buf = 0;
        if (qword_1008D9278 != -1) {
          dispatch_once(&qword_1008D9278, &stru_10089D9B0);
        }
        uint64_t v18 = qword_1008D9270;
        sub_100241F90(v22, v10);
      }

      sub_10043F1F4(a1, 85LL, v7, 1);
    }

    else
    {
      __int128 v19 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 96);
        uint64_t v21 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&_BYTE buf[12] = 2112;
        *(void *)&uint8_t buf[14] = v21;
        __int16 v24 = 2112;
        id v25 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_10068A850();
  }
}

void sub_1004EB5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EB5F0(uint64_t a1, uint64_t a2, void *a3, int a4)
{
}

void sub_1004EB5F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  sub_100241F90(uu2, v4);
  id v5 = (uint64_t **)(a1 + 200);
  uint64_t v6 = sub_1001FDB10(a1 + 200, uu2);
  uint64_t v7 = v6;
  if (a1 + 208 != v6)
  {
    uint64_t v8 = *(void **)(v6 + 48);
    xpc_object_t v9 = (void *)(v6 + 56);
    if (v8 != (void *)(v6 + 56))
    {
      do
      {
        uint64_t v10 = v8[4];
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
        }
        __int128 v11 = (void *)v8[1];
        if (v11)
        {
          do
          {
            unsigned int v12 = v11;
            __int128 v11 = (void *)*v11;
          }

          while (v11);
        }

        else
        {
          do
          {
            unsigned int v12 = (void *)v8[2];
            BOOL v13 = *v12 == (void)v8;
            uint64_t v8 = v12;
          }

          while (!v13);
        }

        uint64_t v8 = v12;
      }

      while (v12 != v9);
    }

    sub_1004F57A0(v5, v7);
  }
}

void sub_1004EB6F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EB714(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1004EB71C(uint64_t a1, uint64_t a2, void *a3, BOOL a4)
{
  id v6 = a3;
  if (*(_BYTE *)(a1 + 168))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    char v7 = sub_1005D79C0((uint64_t)off_1008D5F28, v6, *(void **)(a1 + 96), *(void **)(a1 + 48));
    uint64_t v8 = (os_log_s *)qword_1008F75F0;
    if ((v7 & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        xpc_object_t v9 = (void *)(a1 + 56);
        int v13 = 138412546;
        id v14 = v6;
        __int16 v15 = 2082;
        id v16 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Sending 'connection state updated' event for device %@ to session %{public}s",  (uint8_t *)&v13,  0x16u);
      }

      xpc_object_t v10 = sub_1004DEC38(v6, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
      xpc_dictionary_set_BOOL(v10, "kCBMsgArgConnectionState", a4);
      sub_10043F1F4(a1, 88LL, v10, 1);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      __int128 v11 = *(void **)(a1 + 96);
      unsigned int v12 = *(void **)(a1 + 48);
      int v13 = 138412802;
      id v14 = v11;
      __int16 v15 = 2112;
      id v16 = v12;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  (uint8_t *)&v13,  0x20u);
    }
  }
}

void sub_1004EB8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EB8F8(uint64_t a1, uint64_t a2, void *a3, BOOL a4)
{
}

void sub_1004EB900(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  xpc_object_t xdict = xpc_dictionary_create(0LL, 0LL, 0LL);
  xxpc_object_t array = xpc_array_create(0LL, 0LL);
  if (a3)
  {
    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    if (*(void *)(a3 + 16) != *(void *)(a3 + 8))
    {
      *(void *)&uint8_t buf[8] = 0LL;
      *(void *)&uint8_t buf[16] = 0LL;
      *(void *)__int128 buf = &buf[8];
      xpc_object_t v7 = sub_10043F8BC((unsigned __int8 **)(a3 + 8), (uint64_t)buf);
      sub_10023BF24((uint64_t)buf, *(void **)&buf[8]);
      xpc_dictionary_set_value(v6, "kCBMsgArgUUIDs", v7);
      xpc_release(v7);
    }

    if (*(_BYTE *)a3) {
      xpc_dictionary_set_BOOL(v6, "kCBScanOptionAllowDuplicates", 1);
    }
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = *(void *)(a3 + 40);
    xpc_object_t v10 = (unsigned __int8 **)(a3 + 32);
    if (v9 != v8)
    {
      *(void *)&uint8_t buf[8] = 0LL;
      *(void *)&uint8_t buf[16] = 0LL;
      *(void *)__int128 buf = &buf[8];
      xpc_object_t v11 = sub_10043F8BC(v10, (uint64_t)buf);
      sub_10023BF24((uint64_t)buf, *(void **)&buf[8]);
      xpc_dictionary_set_value(xdict, "kCBScanOptionSolicitedServiceUUIDs", v11);
      xpc_release(v11);
    }

    xpc_dictionary_set_value(xdict, "kCBMsgArgOptions", v6);
    xpc_release(v6);
  }

  for (unint64_t i = *a2; i != a2[1]; ++i)
  {
    uint64_t v13 = *i;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    uint64_t v14 = (uint64_t)off_1008D5F28;
    __int16 v15 = sub_100241F94((const unsigned __int8 *)v13);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    LOBYTE(v14) = sub_1005D79C0(v14, v16, *(void **)(a1 + 96), *(void **)(a1 + 48));

    if ((v14 & 1) == 0)
    {
      __int128 v22 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(a1 + 96);
        uint64_t v24 = *(void *)(a1 + 48);
        id v25 = sub_100241F94((const unsigned __int8 *)v13);
        char v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&_BYTE buf[12] = 2112;
        *(void *)&uint8_t buf[14] = v24;
        *(_WORD *)&_BYTE buf[22] = 2112;
        int v48 = v26;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
      }

      continue;
    }

    memset(buf, 0, sizeof(buf));
    sub_100240540(buf, v13 + 24);
    xpc_object_t v17 = xpc_dictionary_create(0LL, 0LL, 0LL);
    string = 0LL;
    uint64_t v45 = 0LL;
    uint64_t v46 = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    id v18 = off_1008D5F28;
    __int128 v19 = sub_100241F94((const unsigned __int8 *)v13);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    sub_1005CC0D4((uint64_t)v18, v20, (uint64_t)&string);

    if (SHIBYTE(v46) < 0)
    {
      if (v45)
      {
        p_string = string;
        goto LABEL_22;
      }
    }

    else if (HIBYTE(v46))
    {
      p_string = (const char *)&string;
LABEL_22:
      xpc_dictionary_set_string(v17, "kCBMsgArgName", p_string);
    }

    xpc_dictionary_set_uuid(v17, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)v13);
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_10089D990);
    }
    uint64_t v27 = qword_1008D9260;
    __int128 v28 = sub_100241F94((const unsigned __int8 *)v13);
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    unsigned int v30 = sub_10038798C(v27, v29);
    xpc_dictionary_set_int64(v17, "kCBMsgArgATTMTU", v30);

    xpc_dictionary_set_BOOL(v17, "kCBMsgArgState", *(_BYTE *)(v13 + 16));
    xpc_object_t v31 = xpc_array_create(0LL, 0LL);
    for (uint64_t j = *(void *)(v13 + 48); j != *(void *)(v13 + 56); j += 18LL)
      xpc_array_set_int64(v31, 0xFFFFFFFFFFFFFFFFLL, *(unsigned __int16 *)(j + 16));
    xpc_dictionary_set_value(v17, "kCBMsgArgSubscribedHandles", v31);
    xpc_release(v31);
    __int128 v33 = sub_100241F94((const unsigned __int8 *)v13);
    xpc_object_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    sub_1004DD85C(a1, (uint64_t **)buf, v34);

    std::stringbuf::string_type __p = 0LL;
    __dst = 0LL;
    uint64_t v43 = 0LL;
    uint64_t v35 = *(const void **)buf;
    int64_t v36 = *(void *)&buf[8] - *(void *)buf;
    if (*(void *)&buf[8] != *(void *)buf)
    {
      sub_10023DBC8(&__p, v36 >> 3);
      __int16 v37 = (char *)__dst;
      memmove(__dst, v35, v36);
      __dst = &v37[8 * (v36 >> 3)];
    }

    xpc_object_t v38 = sub_10032F26C((uint64_t **)&__p);
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }

    xpc_dictionary_set_value(v17, "kCBMsgArgServices", v38);
    xpc_release(v38);
    xpc_array_append_value(xarray, v17);
    xpc_release(v17);
    if (SHIBYTE(v46) < 0) {
      operator delete(string);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }

  xpc_dictionary_set_value(xdict, "kCBMsgArgDevices", xarray);
  sub_10043F1F4(a1, 92LL, xdict, 1);
  xpc_release(xarray);
}

void sub_1004EBE2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, void *a23)
{
}

void sub_1004EBED8(uint64_t a1, uint64_t **a2, uint64_t a3)
{
}

void sub_1004EBEE0(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6)
{
  id v10 = a3;
  if (*(_BYTE *)(a1 + 168))
  {
    xpc_object_t v11 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v12 = v10;
    uint64_t v13 = v12;
    if (v12)
    {
      *(void *)uuid = 0LL;
      uint64_t v15 = 0LL;
      [v12 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v11, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_double(v11, "kCBMsgArgConnectionInterval", (double)a4 * 1.25);
    xpc_dictionary_set_int64(v11, "kCBMsgArgConnectionLatency", a5);
    xpc_dictionary_set_double(v11, "kCBMsgArgSupervisionTimeout", (double)(10 * a6));
    sub_10043F1F4(a1, 167LL, v11, 1);
  }
}

void sub_1004EC010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EC034(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6)
{
}

void sub_1004EC03C( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  id v14 = a3;
  xpc_object_t v15 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v16 = v14;
  xpc_object_t v17 = v16;
  if (v16)
  {
    *(void *)uuid = 0LL;
    uint64_t v19 = 0LL;
    [v16 getUUIDBytes:uuid];
    xpc_dictionary_set_uuid(v15, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_uint64(v15, "kCBMsgArgTimeOfDay", a4);
  xpc_dictionary_set_uint64(v15, "kCBMsgArgLocalRefTime", a5);
  xpc_dictionary_set_uint64(v15, "kCBMsgArgRemoteRefTime", a6);
  xpc_dictionary_set_uint64(v15, "kCBMsgArgTimeToSend", a7);
  xpc_dictionary_set_int64(v15, "kCBMsgArgGMTDelta", a8);
  sub_10043F1F4(a1, 182LL, v15, 1);
}

void sub_1004EC18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EC1B0( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
}

void sub_1004EC1B8(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6 = a3;
  if (*(_BYTE *)(a1 + 168))
  {
    xpc_object_t v7 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)(a1 + 56);
      *(_DWORD *)__int128 buf = 138412546;
      id v15 = v6;
      __int16 v16 = 2082;
      xpc_object_t v17 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Sending 'host state updated' event for device %@ to session %{public}s",  buf,  0x16u);
    }

    if (a4) {
      uint64_t v9 = 2LL;
    }
    else {
      uint64_t v9 = 1LL;
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  v9,  @"kCBMsgArgDeviceUUID",  @"kCBMsgArgState",  v6));
    v13[1] = v10;
    xpc_object_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v13,  &v12,  2LL));
    sub_10043F394(a1, 165LL, v11);
  }
}

void sub_1004EC308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EC338(uint64_t a1, uint64_t a2, void *a3, int a4)
{
}

void sub_1004EC340(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_BYTE *)(a1 + 169))
  {
    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_object_t v7 = v6;
    else {
      uint64_t v8 = *(const char **)a2;
    }
    xpc_dictionary_set_string(v6, "kCBMsgArgName", v8);
    xpc_dictionary_set_int64(v7, "kCBMsgArgState", a3);
    sub_10043F1F4(a1, 91LL, v7, 1);
  }

void sub_1004EC3D8(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t sub_1004EC3E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t result = sub_10028212C((uint64_t)off_1008D67C0, *(void *)(v2 + 128), *(void **)(a1 + 32), *(_BYTE *)(v2 + 181));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t *sub_1004EC44C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int64_t v3 = operator new(0x38uLL);
  sub_1004F4C58((uint64_t)v3, *(void **)(a1 + 32), (__int128 **)(a1 + 48), *(_BYTE *)(v2 + 183), *(_DWORD *)(v2 + 196));
  __int16 v16 = v3;
  if (*(void *)(a1 + 48) == *(void *)(a1 + 56))
  {
    if (qword_1008D5F60 != -1) {
      dispatch_once(&qword_1008D5F60, &stru_10089D850);
    }
    uint64_t v9 = qword_1008D5F58;
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    if (off_1008D67C0) {
      id v10 = (char *)off_1008D67C0 + 48;
    }
    else {
      id v10 = 0LL;
    }
    uint64_t v11 = *(void *)(v2 + 128);
    sub_100241F90(uu1, *(void *)(a1 + 32));
    int v7 = sub_100557034(v9, (uint64_t)v10, v11, uu1, (uint64_t)v3);
    if (v7) {
      goto LABEL_12;
    }
  }

  else
  {
    if (qword_1008D5F60 != -1) {
      dispatch_once(&qword_1008D5F60, &stru_10089D850);
    }
    uint64_t v4 = qword_1008D5F58;
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    if (off_1008D67C0) {
      id v5 = (char *)off_1008D67C0 + 48;
    }
    else {
      id v5 = 0LL;
    }
    uint64_t v6 = *(void *)(v2 + 128);
    sub_100241F90(uu1, *(void *)(a1 + 32));
    std::stringbuf::string_type __p = 0LL;
    id v14 = 0LL;
    uint64_t v15 = 0LL;
    sub_100050EE8( (char *)&__p,  *(__int128 **)(a1 + 48),  *(__int128 **)(a1 + 56),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2));
    int v7 = sub_100557310(v4, (uint64_t)v5, v6, uu1, (__int128 **)&__p, (uint64_t)v3);
    if (__p)
    {
      id v14 = __p;
      operator delete(__p);
    }

    if (v7)
    {
LABEL_12:
      sub_10043F3F4(v2, 181LL, *(xpc_object_t *)(a1 + 72), v7);
      return (uint64_t *)(*(uint64_t (**)(void *))(*(void *)v3 + 8LL))(v3);
    }
  }

  sub_100241F90(uu1, *(void *)(a1 + 32));
  xpc_object_t v17 = uu1;
  uint64_t v12 = sub_1004F57DC( (uint64_t **)(v2 + 200),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v17);
  return sub_1002555B0((uint64_t **)v12 + 6, (unint64_t *)&v16, (uint64_t *)&v16);
}

void sub_1004EC6B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1004EC6E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int64_t v3 = operator new(0x40uLL);
  sub_1004F4CE8( (uint64_t)v3,  *(void **)(a1 + 32),  *(void *)(a1 + 48),  (__int128 **)(a1 + 56),  *(_BYTE *)(v2 + 183),  *(_DWORD *)(v2 + 196));
  id v10 = v3;
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  uint64_t v4 = qword_1008D5F58;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  if (off_1008D67C0) {
    id v5 = (char *)off_1008D67C0 + 48;
  }
  else {
    id v5 = 0LL;
  }
  uint64_t v6 = *(void *)(v2 + 128);
  sub_100241F90(uu1, *(void *)(a1 + 32));
  int v7 = sub_1005577C0( v4,  (uint64_t)v5,  v6,  uu1,  *(unsigned __int16 *)(a1 + 48),  *(unsigned __int16 *)(a1 + 80),  (uint64_t)v3);
  if (v7)
  {
    sub_10043F3F4(v2, 189LL, *(xpc_object_t *)(a1 + 88), v7);
    return (uint64_t *)(*(uint64_t (**)(void *))(*(void *)v3 + 8LL))(v3);
  }

  else
  {
    sub_100241F90(uu1, *(void *)(a1 + 32));
    uint64_t v11 = uu1;
    uint64_t v9 = sub_1004F57DC( (uint64_t **)(v2 + 200),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v11);
    return sub_1002555B0((uint64_t **)v9 + 6, (unint64_t *)&v10, (uint64_t *)&v10);
  }

void sub_1004EC878(_Unwind_Exception *a1)
{
}

char *sub_1004EC894(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  uint64_t v2 = a1 + 56;
  *(void *)(v2 + 16) = 0LL;
  return sub_100050EE8( (char *)v2,  *(__int128 **)(a2 + 56),  *(__int128 **)(a2 + 64),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2));
}

void sub_1004EC8BC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

uint64_t *sub_1004EC8D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int64_t v3 = operator new(0x38uLL);
  sub_1004F4D88((uint64_t)v3, *(void **)(a1 + 32), *(void *)(a1 + 48), (__int128 **)(a1 + 56));
  id v10 = v3;
  int v4 = sub_1004DDBBC(v2, *(void **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  if (v4) {
    goto LABEL_10;
  }
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  uint64_t v5 = qword_1008D5F58;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t v6 = off_1008D67C0 ? (char *)off_1008D67C0 + 48 : 0LL;
  uint64_t v7 = *(void *)(v2 + 128);
  sub_100241F90(uu1, *(void *)(a1 + 32));
  int v4 = sub_1005579F0( v5,  (uint64_t)v6,  v7,  uu1,  *(unsigned __int16 *)(a1 + 48),  *(unsigned __int16 *)(a1 + 80),  (uint64_t)v3);
  if (v4)
  {
LABEL_10:
    sub_10043F3F4(v2, 190LL, *(xpc_object_t *)(a1 + 88), v4);
    return (uint64_t *)(*(uint64_t (**)(void *))(*(void *)v3 + 8LL))(v3);
  }

  else
  {
    sub_100241F90(uu1, *(void *)(a1 + 32));
    uint64_t v11 = uu1;
    uint64_t v9 = sub_1004F57DC( (uint64_t **)(v2 + 200),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v11);
    return sub_1002555B0((uint64_t **)v9 + 6, (unint64_t *)&v10, (uint64_t *)&v10);
  }

void sub_1004ECA78(_Unwind_Exception *a1)
{
}

uint64_t *sub_1004ECA94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int64_t v3 = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  sub_10032FB34((uint64_t)v3, 196, *(void **)(a1 + 32));
  uint64_t v3[3] = v4;
  *int64_t v3 = off_100891A90;
  uint64_t v11 = v3;
  int v5 = sub_1004DDBBC(v2, *(void **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  if (v5) {
    goto LABEL_10;
  }
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  uint64_t v6 = qword_1008D5F58;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t v7 = off_1008D67C0 ? (char *)off_1008D67C0 + 48 : 0LL;
  uint64_t v8 = *(void *)(v2 + 128);
  sub_100241F90(uu1, *(void *)(a1 + 32));
  int v5 = sub_100557E40( v6,  (uint64_t)v7,  v8,  uu1,  *(unsigned __int16 *)(a1 + 48),  *(unsigned __int16 *)(a1 + 56),  (uint64_t)v3);
  if (v5)
  {
LABEL_10:
    sub_10043F3F4(v2, 196LL, *(xpc_object_t *)(a1 + 64), v5);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v3 + 8LL))(v3);
  }

  else
  {
    sub_100241F90(uu1, *(void *)(a1 + 32));
    uint64_t v12 = uu1;
    id v10 = sub_1004F57DC( (uint64_t **)(v2 + 200),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v12);
    return sub_1002555B0((uint64_t **)v10 + 6, (unint64_t *)&v11, (uint64_t *)&v11);
  }

void sub_1004ECC4C(_Unwind_Exception *a1)
{
}

void sub_1004ECC68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = sub_1004DDBBC(v2, *(void **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    int v5 = 0LL;
  }

  else
  {
    int v5 = operator new(0x20uLL);
    uint64_t v6 = *(void *)(a1 + 48);
    sub_10032FB34((uint64_t)v5, 197, *(void **)(a1 + 32));
    v5[3] = v6;
    *int v5 = &off_10089D7B0;
  }

  uint64_t v11 = v5;
  if (v3)
  {
    if (v4) {
      return;
    }
    goto LABEL_15;
  }

  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  uint64_t v7 = qword_1008D5F58;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  if (off_1008D67C0) {
    uint64_t v8 = (char *)off_1008D67C0 + 48;
  }
  else {
    uint64_t v8 = 0LL;
  }
  uint64_t v9 = *(void *)(v2 + 128);
  sub_100241F90(uu1, *(void *)(a1 + 32));
  int v3 = sub_100558284( v7,  (uint64_t)v8,  v9,  uu1,  v4 == 0,  *(_WORD *)(a1 + 48),  *(unsigned __int16 *)(a1 + 64),  a1 + 72,  (uint64_t)v5);
  if (!v4)
  {
LABEL_15:
    if (v3)
    {
      sub_10043F3F4(v2, 197LL, *(xpc_object_t *)(a1 + 88), v3);
      if (v5) {
        (*(void (**)(void *))(*v5 + 8LL))(v5);
      }
    }

    else
    {
      sub_100241F90(uu1, *(void *)(a1 + 32));
      uint64_t v12 = uu1;
      id v10 = sub_1004F57DC( (uint64_t **)(v2 + 200),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v12);
      sub_1002555B0((uint64_t **)v10 + 6, (unint64_t *)&v11, (uint64_t *)&v11);
    }
  }

void sub_1004ECE54(_Unwind_Exception *a1)
{
}

void sub_1004ECE70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = &off_10087FAA8;
  *(void *)(a1 + 80) = v3;
  if (v3) {
    sub_1002CD1E0(v3);
  }
}

void sub_1004ECE90(uint64_t a1)
{
  *(void *)(a1 + 72) = &off_10087FAA8;
  uint64_t v1 = *(unsigned int **)(a1 + 80);
  if (v1) {
    sub_1002CD254(v1);
  }
}

uint64_t *sub_1004ECEAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  sub_10032FB34((uint64_t)v3, 199, *(void **)(a1 + 32));
  uint64_t v3[3] = v4;
  *uint64_t v3 = off_100891AB8;
  *((_BYTE *)v3 + 32) = v5 != 0;
  id v14 = v3;
  int v6 = sub_1004DDBBC(v2, *(void **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  if (v6) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  uint64_t v8 = qword_1008D5F58;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  BOOL v9 = v7 != 0;
  id v10 = off_1008D67C0 ? (char *)off_1008D67C0 + 48 : 0LL;
  uint64_t v11 = *(void *)(v2 + 128);
  sub_100241F90(uu1, *(void *)(a1 + 32));
  int v6 = sub_1005586DC(v8, (uint64_t)v10, v11, uu1, *(unsigned __int16 *)(a1 + 48), v9, (uint64_t)v3);
  if (v6)
  {
LABEL_10:
    sub_10043F3F4(v2, 199LL, *(xpc_object_t *)(a1 + 64), v6);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v3 + 8LL))(v3);
  }

  else
  {
    sub_100241F90(uu1, *(void *)(a1 + 32));
    uint64_t v15 = uu1;
    uint64_t v13 = sub_1004F57DC( (uint64_t **)(v2 + 200),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v15);
    return sub_1002555B0((uint64_t **)v13 + 6, (unint64_t *)&v14, (uint64_t *)&v14);
  }

void sub_1004ED084(_Unwind_Exception *a1)
{
}

uint64_t *sub_1004ED0A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  sub_10032FB34((uint64_t)v3, 200, *(void **)(a1 + 32));
  uint64_t v3[3] = v4;
  *uint64_t v3 = off_100891AE0;
  uint64_t v11 = v3;
  int v5 = sub_1004DDBBC(v2, *(void **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  if (v5) {
    goto LABEL_10;
  }
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  uint64_t v6 = qword_1008D5F58;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t v7 = off_1008D67C0 ? (char *)off_1008D67C0 + 48 : 0LL;
  uint64_t v8 = *(void *)(v2 + 128);
  sub_100241F90(uu1, *(void *)(a1 + 32));
  int v5 = sub_100557C20(v6, (uint64_t)v7, v8, uu1, *(unsigned __int16 *)(a1 + 48), (uint64_t)v3);
  if (v5)
  {
LABEL_10:
    sub_10043F3F4(v2, 200LL, *(xpc_object_t *)(a1 + 56), v5);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v3 + 8LL))(v3);
  }

  else
  {
    sub_100241F90(uu1, *(void *)(a1 + 32));
    uint64_t v12 = uu1;
    id v10 = sub_1004F57DC( (uint64_t **)(v2 + 200),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v12);
    return sub_1002555B0((uint64_t **)v10 + 6, (unint64_t *)&v11, (uint64_t *)&v11);
  }

void sub_1004ED254(_Unwind_Exception *a1)
{
}

uint64_t *sub_1004ED270(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  sub_10032FB34((uint64_t)v3, 203, *(void **)(a1 + 32));
  uint64_t v3[3] = v4;
  *uint64_t v3 = off_100891B08;
  uint64_t v11 = v3;
  int v5 = sub_1004DDBBC(v2, *(void **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  if (v5) {
    goto LABEL_10;
  }
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  uint64_t v6 = qword_1008D5F58;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t v7 = off_1008D67C0 ? (char *)off_1008D67C0 + 48 : 0LL;
  uint64_t v8 = *(void *)(v2 + 128);
  sub_100241F90(uu1, *(void *)(a1 + 32));
  int v5 = sub_100558070(v6, (uint64_t)v7, v8, uu1, *(unsigned __int16 *)(a1 + 48), (uint64_t)v3);
  if (v5)
  {
LABEL_10:
    sub_10043F3F4(v2, 203LL, *(xpc_object_t *)(a1 + 56), v5);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v3 + 8LL))(v3);
  }

  else
  {
    sub_100241F90(uu1, *(void *)(a1 + 32));
    uint64_t v12 = uu1;
    id v10 = sub_1004F57DC( (uint64_t **)(v2 + 200),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v12);
    return sub_1002555B0((uint64_t **)v10 + 6, (unint64_t *)&v11, (uint64_t *)&v11);
  }

void sub_1004ED424(_Unwind_Exception *a1)
{
}

uint64_t *sub_1004ED440(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  sub_10032FB34((uint64_t)v3, 204, *(void **)(a1 + 32));
  uint64_t v3[3] = v4;
  *uint64_t v3 = &off_10089D7D8;
  uint64_t v11 = v3;
  int v5 = sub_1004DDBBC(v2, *(void **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  if (v5) {
    goto LABEL_10;
  }
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  uint64_t v6 = qword_1008D5F58;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  uint64_t v7 = off_1008D67C0 ? (char *)off_1008D67C0 + 48 : 0LL;
  uint64_t v8 = *(void *)(v2 + 128);
  sub_100241F90(uu1, *(void *)(a1 + 32));
  int v5 = sub_1005584C8(v6, (uint64_t)v7, v8, uu1, *(unsigned __int16 *)(a1 + 48), a1 + 56, (uint64_t)v3);
  if (v5)
  {
LABEL_10:
    sub_10043F3F4(v2, 204LL, *(xpc_object_t *)(a1 + 72), v5);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v3 + 8LL))(v3);
  }

  else
  {
    sub_100241F90(uu1, *(void *)(a1 + 32));
    uint64_t v12 = uu1;
    id v10 = sub_1004F57DC( (uint64_t **)(v2 + 200),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v12);
    return sub_1002555B0((uint64_t **)v10 + 6, (unint64_t *)&v11, (uint64_t *)&v11);
  }

void sub_1004ED5F4(_Unwind_Exception *a1)
{
}

void sub_1004ED610(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089D850);
  }
  uint64_t v3 = qword_1008D5F58;
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  if (off_1008D67C0) {
    uint64_t v4 = (char *)off_1008D67C0 + 48;
  }
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = *(void *)(v2 + 128);
  sub_100241F90(v10, *(void *)(a1 + 32));
  sub_10002418C(__p, (char *)[*(id *)(a1 + 40) UTF8String]);
  int v6 = sub_100558A38(v3, (uint64_t)v4, v5, v10, (uint64_t)__p, 0LL);
  int v7 = v6;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (!v7) {
      return;
    }
  }

  else if (!v6)
  {
    return;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
    sub_10068A87C();
  }
}

void sub_1004ED774( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004ED798(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(int *)(v2 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A91C();
    }
    int64_t v3 = 12LL;
  }

  else if (*(void *)(a1 + 32))
  {
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_10089D870);
    }
    int64_t v3 = (int)sub_10028F3C0( (uint64_t)off_1008D67C0,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(unsigned __int8 *)(a1 + 64),  *(void **)(a1 + 40));
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A8F0();
    }
    int64_t v3 = 8LL;
  }

  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (v4)
  {
    xpc_dictionary_set_int64(v4, "kCBMsgArgResult", v3);
    xpc_connection_send_message( *(xpc_connection_t *)(v2 + 16),  *(xpc_object_t *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
  }

uint64_t sub_1004ED8B8(uint64_t a1, int a2, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    int v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v7 = sub_10025E150(object, "kCBMatchActionRulePeerAddress");
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = sub_10025E150(object, "kCBMatchActionRuleLocalToken");
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = v10;
    if (v10 && [v10 length] == (id)6)
    {
      if (v8 && [v8 length] == (id)6)
      {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v8,  @"MatchActionRulePeerAddress");
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v11,  @"MatchActionRuleLocalToken");
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  &off_1008C2BA0,  @"MatchActionRuleHopValue");
        uint64_t v12 = *(void **)(a1 + 32);
        id v13 = -[NSMutableDictionary copy](v6, "copy");
        [v12 addObject:v13];

        uint64_t v5 = 1LL;
LABEL_13:

        return v5;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068A974();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_10068A948();
    }

    uint64_t v5 = 0LL;
    goto LABEL_13;
  }

  return 0LL;
}

void sub_1004EDA3C(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1004EDA74(uint64_t a1)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089D950);
  }
  int v2 = sub_1005EB5EC(off_1008D6600, *(void *)(a1 + 32));
  int64_t v3 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "setMatchActionRules returned %d",  (uint8_t *)v4,  8u);
  }

void sub_1004EDB50(uint64_t a1)
{
  __dst[0] = 0LL;
  __dst[1] = 0LL;
  memcpy(__dst, [*(id *)(a1 + 32) bytes], *(void *)(a1 + 40));
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_10027F490((uint64_t)off_1008D67C0, (unsigned __int8 *)(a1 + 48), (uint64_t)__dst);
}

uint64_t sub_1004EDBFC(uint64_t a1)
{
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  return sub_10027F4E8((uint64_t)off_1008D67C0, (unsigned __int8 *)(a1 + 32));
}

void sub_1004EDC4C(uint64_t a1)
{
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089D870);
  }
  sub_100288E98((uint64_t)off_1008D67C0, *(void **)(a1 + 32));
}

void sub_1004EDC9C(uint64_t a1, void *a2, int a3)
{
  id v10 = a2;
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v10)
    {
      id v7 = objc_claimAutoreleasedReturnValue([v10 remoteHostID]);
      xpc_dictionary_set_string(v5, "kCBMsgArgWhbRemoteControllerId", (const char *)[v7 UTF8String]);

      uint64_t v8 = *(void **)(a1 + 40);
      id v9 = objc_claimAutoreleasedReturnValue([v10 identifier]);
      xpc_dictionary_set_string(v8, "kCBMsgArgWhbRemoteDeviceUUID", (const char *)[v9 UTF8String]);

      uint64_t v5 = *(void **)(a1 + 40);
    }

    xpc_dictionary_set_int64(v5, "kCBMsgArgResult", a3);
    xpc_connection_send_message(*(xpc_connection_t *)(v6 + 16), *(xpc_object_t *)(a1 + 40));
    xpc_release(*(xpc_object_t *)(a1 + 40));
  }
}

void sub_1004EDD80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004EDDAC(id a1)
{
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_10089D910);
  }
  sub_10057AFA0((uint64_t)off_1008D6280, 1, 3, 1);
}

uint64_t sub_1004EDDF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + sub_100242E28(v1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + sub_100242E28(v1 + 40) = 0LL;
  return result;
}

void sub_1004EDE08(uint64_t a1)
{
}

void sub_1004EDE10(uint64_t a1)
{
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089D7F0);
  }
  int v2 = sub_1006301E8(qword_1008D5F18, 1);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + sub_100242E28(v1 + 40) = v3;
}

void sub_1004EDE78(uint64_t a1, int a2, void *a3, char a4)
{
  id v7 = a3;
  char v13 = a4;
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    xpc_dictionary_set_int64(v8, "kCBMsgArgResult", a2);
    if (!a2)
    {
      id v10 = objc_opt_new(&OBJC_CLASS___NSMutableData);
      -[NSMutableData appendBytes:length:](v10, "appendBytes:length:", &v13, 1LL);
      -[NSMutableData appendData:](v10, "appendData:", v7);
      uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      uint64_t v12 = v10;
      xpc_dictionary_set_data( v11,  "kCBFastLeConnectionInfoData",  -[NSMutableData bytes](v12, "bytes"),  -[NSMutableData length](v12, "length"));
    }

    xpc_connection_send_message( *(xpc_connection_t *)(v9 + 16),  *(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    xpc_release(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }
}

void sub_1004EDF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EDFA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (void *)(a1 + 56);
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v17 = 2082;
    id v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Sending 'device name updated' event for device %@ to session %{public}s",  buf,  0x16u);
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089D810);
  }
  if ((sub_1005D79C0((uint64_t)off_1008D5F28, v4, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
  {
    char v13 = @"kCBMsgArgDeviceUUID";
    id v14 = @"kCBMsgArgName";
    v15[0] = v4;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089D810);
    }
    sub_1005CC0D4((uint64_t)off_1008D5F28, v4, (uint64_t)buf);
    if (v19 >= 0) {
      id v7 = buf;
    }
    else {
      id v7 = *(_BYTE **)buf;
    }
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  v7,  v13,  v14,  v15[0]));
    v15[1] = v8;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  &v13,  2LL));

    if (SHIBYTE(v19) < 0) {
      operator delete(*(void **)buf);
    }
    sub_10043F394(a1, 178LL, v9);
  }

  else
  {
    id v10 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 96);
      uint64_t v12 = *(void **)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412802;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v17 = 2112;
      id v18 = v12;
      __int16 v19 = 2112;
      id v20 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
    }
  }
}

void sub_1004EE1F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1004EE23C(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1004EE244(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
  id v8 = a3;
  xpc_object_t v9 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v10 = v8;
  uint64_t v11 = v10;
  if (v10)
  {
    *(void *)uuid = 0LL;
    uint64_t v13 = 0LL;
    [v10 getUUIDBytes:uuid];
    xpc_dictionary_set_uuid(v9, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v9, "kCBMsgArgData", a5);
  xpc_dictionary_set_int64(v9, "kCBMsgArgResult", a4);
  sub_10043F1F4(a1, 180LL, v9, 1);
}

void sub_1004EE33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EE360(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
}

void sub_1004EE368(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  id v6 = a3;
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v8 = v6;
  xpc_object_t v9 = v8;
  if (v8)
  {
    *(void *)uuid = 0LL;
    uint64_t v11 = 0LL;
    [v8 getUUIDBytes:uuid];
    xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v7, "kCBMsgArgVisibleInSettings", a4);
  sub_10043F1F4(a1, 185LL, v7, 1);
}

void sub_1004EE448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EE46C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
}

void sub_1004EE474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v8 = (const void *)sub_10056AAF0(a3);
  size_t v9 = sub_10056AAD8(a3);
  xpc_dictionary_set_data(v7, "kCBMsgArgLeZone", v8, v9);
  id v10 = (const void *)sub_10056AAF0(a4);
  size_t v11 = sub_10056AAD8(a4);
  xpc_dictionary_set_data(v7, "kCBMsgArgLeZoneMask", v10, v11);
  sub_10043F1F4(a1, 90LL, v7, 1);
}

void sub_1004EE524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1004EE52C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  v13[0] = v8;
  v12[0] = @"kCBMsgArgDeviceUUID";
  v12[1] = @"kCBTrackingOptionState";
  size_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a4));
  v13[1] = v9;
  void v12[2] = @"kCBTrackingOptionType";
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a5));
  void v13[2] = v10;
  size_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v13,  v12,  3LL));
  sub_10043F394(a1, 89LL, v11);
}

void sub_1004EE634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EE670(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
}

void sub_1004EE678( uint64_t a1, int a2, void *a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t value)
{
  id v15 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t v16 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v17 = v15;
    id v18 = v17;
    if (v17)
    {
      *(void *)uuid = 0LL;
      uint64_t v20 = 0LL;
      [v17 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v16, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockEventType", a4);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTLocalClock", a5);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTRemoteClock", a6);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockSeconds", a8);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockMicroSeconds", value);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockEventCounter", a7);
    sub_10043F1F4(a1, 210LL, v16, 1);
  }
}

void sub_1004EE7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EE80C( uint64_t a1, int a2, void *a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t value)
{
}

void sub_1004EE81C(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  id v6 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v8 = v6;
    size_t v9 = v8;
    if (v8)
    {
      *(void *)uuid = 0LL;
      uint64_t v11 = 0LL;
      [v8 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_uint64(v7, "kCBCSConfigId", *a4);
    xpc_dictionary_set_uint64(v7, "kCBCSStartAclConnEvent", *((unsigned __int16 *)a4 + 1));
    xpc_dictionary_set_uint64(v7, "kCBCSFrequencyCompensation", a4[4]);
    xpc_dictionary_set_uint64(v7, "kCBCSProcedureDoneStatus", a4[5]);
    xpc_dictionary_set_uint64(v7, "kCBCSSubEventDoneStatus", a4[6]);
    xpc_dictionary_set_uint64(v7, "kCBCSReferencePowerLevel", a4[7]);
    xpc_dictionary_set_uint64(v7, "kCBCSNumAntennaPath", a4[8]);
    xpc_dictionary_set_uint64(v7, "kCBCSNumStepsReported", a4[9]);
    xpc_dictionary_set_data(v7, "kCBCSStepMode", a4 + 10, 0xA0uLL);
    xpc_dictionary_set_data(v7, "kCBCSStepChannel", a4 + 170, 0xA0uLL);
    xpc_dictionary_set_data(v7, "kCBCSStepDataLength", a4 + 330, 0xA0uLL);
    xpc_dictionary_set_data(v7, "kCBCSStepData", a4 + 490, 0x6400uLL);
    xpc_dictionary_set_uint64(v7, "kCBCSCurrentStepIndex", a4[26090]);
    sub_10043F1F4(a1, 221LL, v7, 1);
  }
}

void sub_1004EEA0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EEA30(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
}

void sub_1004EEA38( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, const void *a8, char a9, char a10, char a11, char a12, char a13, unsigned __int16 value, int value_2, unsigned __int8 value_6)
{
  id v21 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t v22 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v23 = v21;
    uint64_t v24 = v23;
    if (v23)
    {
      *(void *)uuid = 0LL;
      __int128 v28 = 0LL;
      [v23 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v22, "kCBMsgArgDeviceUUID", uuid);
    }

    *(void *)uuid = 0LL;
    __int128 v28 = 0LL;
    sub_10056AB04(uuid, a8, a9);
    id v25 = (const void *)sub_10056AAF0((uint64_t)uuid);
    size_t v26 = sub_10056AAD8((uint64_t)uuid);
    xpc_dictionary_set_data(v22, "kCBGetRssiStatisticsRawData", v25, v26);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionAverage", a10);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionMedian", a12);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionMaximum", a11);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionMinimum", a13);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionCoreMotionAndMask", a4);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionCoreMotionAndMask2", a5);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionCoreMotionXorMask", a6);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionVariance", value);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionState", value_6);
    xpc_dictionary_set_int64(v22, "kCBMsgArgResult", value_2);
    sub_10043F1F4(a1, 214LL, v22, 1);
    *(void *)uuid = &off_10087FAA8;
    if (v28) {
      sub_1002CD254(v28);
    }
  }
}

void sub_1004EEC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EECA4( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, const void *a8, char a9, char a10, char a11, char a12, char a13, unsigned __int16 a14, int a15, unsigned __int8 a16)
{
}

void sub_1004EECEC( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, int64_t a7, int a8)
{
  id v14 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t v15 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v16 = v14;
    id v17 = v16;
    if (v16)
    {
      *(void *)uuid = 0LL;
      uint64_t v19 = 0LL;
      [v16 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v15, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_int64(v15, "kCBUsageStatsLePercent", a4);
    xpc_dictionary_set_int64(v15, "kCBUsageStatsClPercent", a5);
    xpc_dictionary_set_int64(v15, "kCBUsageStatsIsAudioStreaming", a6);
    xpc_dictionary_set_int64(v15, "kCBUsageStatsTimeStampNsMonotonic", a7);
    xpc_dictionary_set_int64(v15, "kCBMsgArgResult", a8);
    sub_10043F1F4(a1, 215LL, v15, 1);
  }
}

void sub_1004EEE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EEE6C( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, int64_t a7, int a8)
{
}

void sub_1004EEE74(uint64_t a1, uint64_t a2, void *a3, unsigned __int16 *a4, int a5)
{
  id v8 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    xpc_object_t v9 = xpc_dictionary_create(0LL, 0LL, 0LL);
    id v10 = v8;
    uint64_t v11 = v10;
    if (v10)
    {
      *(void *)uuid = 0LL;
      uint64_t v13 = 0LL;
      [v10 getUUIDBytes:uuid];
      xpc_dictionary_set_uuid(v9, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_int64(v9, "kCBPhyStatsRSSI", *(char *)a4);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitPER", a4[1]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitPERNumberOfPackets", a4[2]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitClassicPER", a4[3]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitClassicPERNumberOfPackets", a4[4]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceivePER", a4[5]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceivePERNumberOfPackets", a4[6]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceiveClassicPER", a4[7]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceiveClassicPERNumberOfPackets", a4[8]);
    xpc_dictionary_set_int64(v9, "kCBMsgArgResult", a5);
    sub_10043F1F4(a1, 216LL, v9, 1);
  }
}

void sub_1004EF018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EF03C(uint64_t a1, uint64_t a2, void *a3, unsigned __int16 *a4, int a5)
{
}

void sub_1004EF044( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7)
{
  id v12 = a3;
  xpc_object_t v13 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v14 = v12;
  xpc_object_t v15 = v14;
  if (v14)
  {
    *(void *)uuid = 0LL;
    uint64_t v17 = 0LL;
    [v14 getUUIDBytes:uuid];
    xpc_dictionary_set_uuid(v13, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v13, "kCBMsgArgPowerAssertionExecutionState", a7);
  xpc_dictionary_set_int64(v13, "kCBMsgArgPowerAssertionDuration", a5);
  xpc_dictionary_set_int64(v13, "kCBMsgArgPowerAssertionBegin", a4);
  xpc_dictionary_set_int64(v13, "kCBMsgArgResult", a6);
  sub_10043F1F4(a1, 213LL, v13, 1);
}

void sub_1004EF174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EF198( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7)
{
}

void sub_1004EF1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = sub_1005BFB9C(*(void *)a3);
    xpc_object_t v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    id v8 = sub_1005BFB9C(*(void *)(a3 + 8));
    id v9 = (id)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = *(void *)(a3 + 16);
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFLL;
    id v12 = &stru_1008A57D8;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0) {
      xpc_object_t v13 = @" non-connectable secondary:";
    }
    else {
      xpc_object_t v13 = &stru_1008A57D8;
    }
    if (v11)
    {
      id v14 = sub_1005BFB9C(v10);
      id v12 = (__CFString *)objc_claimAutoreleasedReturnValue(v14);
    }

    *(_DWORD *)__int128 buf = 138413058;
    __int128 v29 = v7;
    __int16 v30 = 2112;
    *(void *)xpc_object_t v31 = v9;
    *(_WORD *)&v31[8] = 2112;
    *(void *)&v31[10] = v13;
    __int16 v32 = 2112;
    __int128 v33 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "advertisingAddressDidChange connectable:%@ non-connectable:%@%@%@",  buf,  0x2Au);
    if (v11) {
  }
    }

  int v15 = *(_DWORD *)(a1 + 80);
  if (v15 >= 1 && ((int v16 = *(_DWORD *)(a1 + 136), v16 != 5) ? (v17 = v16 == 10) : (v17 = 1), v17))
  {
    xpc_object_t v18 = xpc_dictionary_create(0LL, 0LL, 0LL);
    uint64_t v19 = *(void *)a3;
    buf[0] = (unsigned __int16)WORD2(*(void *)a3) >> 8;
    buf[1] = BYTE4(v19);
    uint8_t buf[2] = BYTE3(v19);
    buf[3] = BYTE2(v19);
    LOBYTE(v29) = BYTE1(v19);
    BYTE1(v29) = v19;
    uint64_t v20 = *(void *)(a3 + 8);
    bytes[0] = BYTE5(v20);
    bytes[1] = BYTE4(v20);
    _OWORD bytes[2] = BYTE3(v20);
    bytes[3] = BYTE2(v20);
    bytes[4] = BYTE1(v20);
    uint64_t v21 = *(void *)(a3 + 16);
    bytes[5] = v20;
    v26[0] = BYTE5(v21);
    v26[1] = BYTE4(v21);
    void v26[2] = BYTE3(v21);
    v26[3] = BYTE2(v21);
    void v26[4] = BYTE1(v21);
    v26[5] = v21;
    xpc_dictionary_set_data(v18, "kCBConnectableAdvertisingAddress", buf, 6uLL);
    xpc_dictionary_set_int64(v18, "kCBConnectableAdvertisingAddressType", *(unsigned __int8 *)(a3 + 6));
    xpc_dictionary_set_data(v18, "kCBNonConnectableAdvertisingAddress", bytes, 6uLL);
    xpc_dictionary_set_int64(v18, "kCBNonConnectableAdvertisingAddressType", *(unsigned __int8 *)(a3 + 14));
    xpc_dictionary_set_data(v18, "kCBNonConnectableSecondaryAdvertisingAddress", v26, 6uLL);
    xpc_dictionary_set_int64(v18, "kCBNonConnectableSecondaryAdvertisingAddressType", *(unsigned __int8 *)(a3 + 22));
    sub_10043F1F4(a1, 59LL, v18, 1);
  }

  else
  {
    xpc_object_t v22 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = (void *)(a1 + 56);
      int v24 = *(_DWORD *)(a1 + 136);
      *(_DWORD *)__int128 buf = 136315650;
      if (v24 == 5) {
        id v25 = "";
      }
      else {
        id v25 = "not ";
      }
      __int128 v29 = v23;
      __int16 v30 = 1024;
      *(_DWORD *)xpc_object_t v31 = v15;
      *(_WORD *)&void v31[4] = 2080;
      *(void *)&v31[6] = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Ignore advertisingAddressDidChange for session %s with access level : %d and manager state %spowered on",  buf,  0x1Cu);
    }
  }

void sub_1004EF4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EF504(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1004EF50C(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, unint64_t a6)
{
  id v10 = a3;
  if (a6)
  {
    sub_100241F90(uu2, v10);
    uint64_t v11 = sub_1001FDB10(a1 + 200, uu2);
    uint64_t v12 = v11;
    if (a1 + 208 != v11)
    {
      xpc_object_t v13 = *(void **)(v11 + 56);
      if (v13)
      {
        id v14 = (uint64_t **)(v11 + 48);
        int v15 = (uint64_t *)(v11 + 56);
        do
        {
          unint64_t v16 = v13[4];
          BOOL v17 = v16 >= a6;
          if (v16 >= a6) {
            xpc_object_t v18 = v13;
          }
          else {
            xpc_object_t v18 = v13 + 1;
          }
          if (v17) {
            int v15 = v13;
          }
          xpc_object_t v13 = (void *)*v18;
        }

        while (*v18);
        if (v15 != (uint64_t *)(v11 + 56) && v15[4] <= a6)
        {
          int v19 = *(_DWORD *)(a6 + 8);
          xpc_object_t v20 = sub_10032FBA0((id *)a6, a4, a5);
          sub_10043F1F4(a1, (unsigned __int16)v19, v20, 1);
          sub_1001FDBCC(v14, v15);
          operator delete(v15);
          if (!*(void *)(v12 + 64)) {
            sub_1004F57A0((uint64_t **)(a1 + 200), v12);
          }
          (*(void (**)(unint64_t))(*(void *)a6 + 8LL))(a6);
        }
      }
    }
  }
}

void sub_1004EF668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004EF684(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, unint64_t a6)
{
}

BOOL sub_1004EF68C(uint64_t a1, uint64_t a2, void *a3)
{
  int64_t v19 = 0LL;
  int v4 = sub_10025DAFC(a3, &v19);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 8);
    unint64_t v7 = *(void *)(v5 + 16);
    if ((unint64_t)v6 >= v7)
    {
      id v9 = *(void **)v5;
      uint64_t v10 = ((uint64_t)v6 - *(void *)v5) >> 3;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = v7 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        id v14 = (char *)sub_100008BA0(v5 + 16, v13);
        id v9 = *(void **)v5;
        id v6 = *(void **)(v5 + 8);
      }

      else
      {
        id v14 = 0LL;
      }

      int v15 = &v14[8 * v10];
      unint64_t v16 = &v14[8 * v13];
      *(void *)int v15 = v19;
      id v8 = v15 + 8;
      while (v6 != v9)
      {
        uint64_t v17 = *--v6;
        *((void *)v15 - 1) = v17;
        v15 -= 8;
      }

      *(void *)uint64_t v5 = v15;
      *(void *)(v5 + _Block_object_dispose(va, 8) = v8;
      *(void *)(v5 + 16) = v16;
      if (v9) {
        operator delete(v9);
      }
    }

    else
    {
      void *v6 = v19;
      id v8 = v6 + 1;
    }

    *(void *)(v5 + _Block_object_dispose(va, 8) = v8;
  }

  return v4 == 0;
}

uint64_t sub_1004EF794(void *a1, uint64_t a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472LL;
    applier[2] = sub_1004EF84C;
    applier[3] = &unk_10088A098;
    void applier[4] = a2;
    if (xpc_array_apply(a1, applier)) {
      return 0LL;
    }
    else {
      return 3LL;
    }
  }

  else
  {
    int v4 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068A4AC(a1, v4);
    }
    return 3LL;
  }

uint64_t sub_1004EF84C(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v47 = 0uLL;
  int v48 = 0;
  sub_10063432C(&v47);
  __int128 v45 = xmmword_1006BD914;
  int v46 = 0;
  __int128 v43 = xmmword_1006BD928;
  int v44 = 0;
  __int128 v41 = xmmword_1006BD8EC;
  int v42 = 0;
  __int128 v39 = xmmword_1006BD900;
  int v40 = 0;
  if (!sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v39))
  {
    __int128 v37 = xmmword_1006BD93C;
    int v38 = 0;
    if (sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v37))
    {
      __int128 v33 = &off_10087FAA8;
      xpc_object_t v34 = 0LL;
      xpc_object_t value = xpc_dictionary_get_value(a3, "kCBMsgArgData");
      if (!sub_10025DBF4(value, (uint64_t)&v33) && sub_10056AAD8((uint64_t)&v33) == 7)
      {
        __int16 v17 = sub_10056AE48((uint64_t)&v33, 2uLL);
        __int16 v18 = sub_10056AE48((uint64_t)&v33, 3uLL);
        __int16 v19 = sub_10056AE48((uint64_t)&v33, 5uLL);
        __int16 v20 = sub_10056AE48((uint64_t)&v33, 6uLL);
        uint64_t v21 = (char *)operator new(0x50uLL);
        char v22 = sub_10056AE48((uint64_t)&v33, 0LL);
        char v23 = sub_10056AE48((uint64_t)&v33, 1uLL);
        char v24 = sub_10056AE48((uint64_t)&v33, 4uLL);
        *((_DWORD *)v21 + 6) = 0;
        *((_DWORD *)v21 + 4) = 0;
        v21[20] = 0;
        *(void *)uint64_t v21 = &off_1008A0220;
        *((void *)v21 + 1) = v21 + 24;
        *((_DWORD *)v21 + 11) = 0;
        *(_OWORD *)(v21 + 2_Block_object_dispose(va, 8) = xmmword_1006C3A28;
        *((void *)v21 + 7) = 0LL;
        *((void *)v21 + _Block_object_dispose(va, 8) = 0LL;
        *((void *)v21 + 6) = 0LL;
        v21[72] = v22;
        v21[73] = v23;
        *((_WORD *)v21 + 37) = v17 | (v18 << 8);
        v21[76] = v24;
        v21[77] = 0;
        *((_WORD *)v21 + 39) = v19 | (v20 << 8);
        __int16 v32 = v21;
        sub_100381E90(*(void ***)(a1 + 32), &v32);
        goto LABEL_23;
      }
    }

    else
    {
      __int128 v33 = &off_10087FAA8;
      xpc_object_t v34 = 0LL;
      xpc_object_t v25 = xpc_dictionary_get_value(a3, "kCBMsgArgData");
      if (!sub_10025DBF4(v25, (uint64_t)&v33) && (unint64_t)sub_10056AAD8((uint64_t)&v33) <= 0x200)
      {
        __int128 v29 = (char *)operator new(0x58uLL);
        __int128 v35 = v47;
        int v36 = v48;
        __int16 v30 = (const void *)sub_10056AAF0((uint64_t)&v33);
        unsigned __int16 v31 = sub_10056AAD8((uint64_t)&v33);
        *((_DWORD *)v29 + 6) = 0;
        *((_DWORD *)v29 + 4) = 0;
        v29[20] = 0;
        *(void *)__int128 v29 = &off_1008A0258;
        *((void *)v29 + 1) = v29 + 24;
        *(_OWORD *)(v29 + 2_Block_object_dispose(va, 8) = v35;
        *((_DWORD *)v29 + 11) = v36;
        *((_OWORD *)v29 + 3) = 0u;
        *((_OWORD *)v29 + 4) = 0u;
        *((void *)v29 + 10) = 0LL;
        sub_100531D24((uint64_t)v29, v30, v31);
        __int16 v32 = v29;
        sub_100381E90(*(void ***)(a1 + 32), &v32);
LABEL_23:
        *(_BYTE *)(*((void *)v32 + 1) + 26LL) = 1;
        __int128 v33 = &off_10087FAA8;
        if (v34) {
          sub_1002CD254(v34);
        }
        return 1LL;
      }
    }

    __int128 v33 = &off_10087FAA8;
    if (v34) {
      sub_1002CD254(v34);
    }
    return 0LL;
  }

  id v11 = sub_10025E1C8(a3, "kCBMsgArgData");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  unint64_t v13 = v12;
  if (v12)
  {
    id v14 = v12;
    int v15 = (const char *)[v14 UTF8String];
    if (strlen(v15) >= 0x10000)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068A9A0();
      }
      goto LABEL_10;
    }

    uint64_t v27 = (uint64_t (**)())operator new(0x58uLL);
    __int16 v28 = strlen(v15);
    sub_1004EFD10((uint64_t)v27, 0, v15, (unsigned __int16)(v28 + 1));
    __int128 v33 = v27;
    sub_100381E90(*(void ***)(a1 + 32), &v33);
    *((_BYTE *)v33[1] + 26) = 1;

    return 1LL;
  }

void sub_1004EFC9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  if (a16) {
    sub_1002CD254(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004EFD10(uint64_t a1, __int16 a2, const void *a3, size_t __sz)
{
  int v4 = __sz;
  *(_WORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(void *)a1 = &off_1008A01B0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a1 + 24;
  *(_WORD *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 2_Block_object_dispose(va, 8) = xmmword_1006C3A14;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0LL;
  sub_1005317FC(a1, a3, __sz);
  if (a3) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  char v8 = !v7;
  *(_BYTE *)(a1 + 20) = v8;
  return a1;
}

BOOL sub_1004EFDA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v41 = 0LL;
  __int128 v46 = 0uLL;
  int v47 = 0;
  sub_10063432C(&v46);
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  __int128 v37 = &off_10087FAA8;
  int v38 = 0LL;
  int v11 = sub_10025D848(a3, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgAttributeID");
  if (!v11)
  {
    char v12 = v40;
    unint64_t v13 = operator new(0x58uLL);
    sub_10038BEAC((uint64_t)v13, 0, (uint64_t)&v37);
    *(_BYTE *)(v13[1] + 26LL) = v39;
    id v14 = operator new(0x88uLL);
    *((_DWORD *)v14 + 6) = 0;
    void *v14 = off_1008A02C0;
    v14[1] = v14 + 3;
    v14[14] = 0LL;
    v14[15] = 0LL;
    *((_BYTE *)v14 + 12_Block_object_dispose(va, 8) = 0;
    *((_DWORD *)v14 + 11) = 0;
    *(_OWORD *)((char *)v14 + 2_Block_object_dispose(va, 8) = xmmword_1006C3A3C;
    void v14[7] = 0LL;
    v14[8] = 0LL;
    void v14[6] = 0LL;
    *((_BYTE *)v14 + 72) = v12 & 0x7F;
    *((_BYTE *)v14 + 73) = 0;
    *((_WORD *)v14 + 37) = 0;
    __int128 v15 = v46;
    *((_DWORD *)v14 + 23) = v47;
    *(_OWORD *)((char *)v14 + 76) = v15;
    int v16 = v41;
    v14[12] = v13;
    v14[13] = 0LL;
    *((_DWORD *)v14 + 4) = v16;
    *((_DWORD *)v13 + 4) = v16;
    __int16 v17 = v40;
    if ((v40 & 0xC) != 0)
    {
      __int16 v18 = (char *)operator new(0x50uLL);
      *((_DWORD *)v18 + 6) = 0;
      v18[20] = 0;
      *(void *)__int16 v18 = &off_1008A01E8;
      *((void *)v18 + 1) = v18 + 24;
      *((_DWORD *)v18 + 11) = 0;
      *(_OWORD *)(v18 + 2_Block_object_dispose(va, 8) = xmmword_1006C3A50;
      *((void *)v18 + 7) = 0LL;
      *((void *)v18 + _Block_object_dispose(va, 8) = 0LL;
      *((void *)v18 + 6) = 0LL;
      *((_WORD *)v18 + 36) = 1;
      *(_DWORD *)(v18 + 74) = 0;
      *((_WORD *)v18 + 39) = 0;
      *((_DWORD *)v18 + 4) = v41;
      sub_1003826DC(v14, (uint64_t)v18);
      *((_BYTE *)v14 + 72) = v12 | 0x80;
      __int16 v17 = v40;
    }

    if ((v17 & 0xF30) != 0)
    {
      __int16 v19 = (char *)operator new(0x50uLL);
      __int128 v42 = xmmword_1006BD914;
      int v43 = 0;
      sub_100634334(&v44, (__n128 *)&v42);
      *((_DWORD *)v19 + 6) = 0;
      v19[20] = 0;
      *(void *)__int16 v19 = &off_1008A0178;
      *((void *)v19 + 1) = v19 + 24;
      *(__n128 *)(v19 + 2_Block_object_dispose(va, 8) = v44;
      *((_DWORD *)v19 + 11) = v45;
      *((_OWORD *)v19 + 3) = 0u;
      *((_OWORD *)v19 + 4) = 0u;
      *((_DWORD *)v19 + 4) = v41;
      __int16 v20 = v40;
      char v21 = 8 * ((v40 & 0x300) != 0);
      if ((v40 & 0xC00) != 0) {
        char v21 = 32;
      }
      v19[50] = v21;
      if ((v20 & 0x500) != 0) {
        *((_BYTE *)v14 + 72) |= 0x10u;
      }
      if ((v20 & 0xA00) != 0) {
        *((_BYTE *)v14 + 72) |= 0x20u;
      }
      sub_1003826DC(v14, (uint64_t)v19);
    }

    char v22 = *(void ***)(a1 + 32);
    char v23 = v22[1];
    unint64_t v24 = (unint64_t)v22[2];
    if ((unint64_t)v23 >= v24)
    {
      uint64_t v26 = ((char *)v23 - (_BYTE *)*v22) >> 3;
      uint64_t v27 = v24 - (void)*v22;
      uint64_t v28 = v27 >> 2;
      else {
        unint64_t v29 = v28;
      }
      if (v29) {
        __int16 v30 = (char *)sub_100008BA0((uint64_t)(v22 + 2), v29);
      }
      else {
        __int16 v30 = 0LL;
      }
      unsigned __int16 v31 = &v30[8 * v26];
      __int16 v32 = &v30[8 * v29];
      *(void *)unsigned __int16 v31 = v14;
      xpc_object_t v25 = v31 + 8;
      xpc_object_t v34 = (char *)*v22;
      __int128 v33 = (char *)v22[1];
      if (v33 != *v22)
      {
        do
        {
          uint64_t v35 = *((void *)v33 - 1);
          v33 -= 8;
          *((void *)v31 - 1) = v35;
          v31 -= 8;
        }

        while (v33 != v34);
        __int128 v33 = (char *)*v22;
      }

      os_log_s *v22 = v31;
      v22[1] = v25;
      _DWORD v22[2] = v32;
      if (v33) {
        operator delete(v33);
      }
    }

    else
    {
      *char v23 = v14;
      xpc_object_t v25 = v23 + 1;
    }

    v22[1] = v25;
  }

  __int128 v37 = &off_10087FAA8;
  if (v38) {
    sub_1002CD254(v38);
  }
  return v11 == 0;
}

void sub_1004F01CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, uint64_t a31, uint64_t a32, unsigned int *a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    sub_1002CD254(a33);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004F022C(void *a1, __int128 *a2)
{
  unint64_t v6 = a1[10];
  uint64_t v4 = (uint64_t)(a1 + 10);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = a1[8];
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v10) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v10) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x666666666666666LL) {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      __int128 v15 = (char *)sub_100050420(v4, v14);
    }
    else {
      __int128 v15 = 0LL;
    }
    int v16 = &v15[20 * v11];
    __int16 v17 = &v15[20 * v14];
    __int128 v18 = *a2;
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)int v16 = v18;
    uint64_t v9 = v16 + 20;
    __int16 v20 = (char *)a1[8];
    __int16 v19 = (char *)a1[9];
    if (v19 != v20)
    {
      do
      {
        __int128 v21 = *(_OWORD *)(v19 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v19 - 1);
        *(_OWORD *)(v16 - 20) = v21;
        v16 -= 20;
        v19 -= 20;
      }

      while (v19 != v20);
      __int16 v19 = (char *)a1[8];
    }

    a1[8] = v16;
    a1[9] = v9;
    a1[10] = v17;
    if (v19) {
      operator delete(v19);
    }
  }

  else
  {
    __int128 v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    uint64_t v9 = (char *)(v7 + 20);
  }

  a1[9] = v9;
}

void sub_1004F034C(void *a1, __int128 *a2)
{
  unint64_t v6 = a1[13];
  uint64_t v4 = (uint64_t)(a1 + 13);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = a1[11];
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v10) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v10) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x666666666666666LL) {
      unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      __int128 v15 = (char *)sub_100050420(v4, v14);
    }
    else {
      __int128 v15 = 0LL;
    }
    int v16 = &v15[20 * v11];
    __int16 v17 = &v15[20 * v14];
    __int128 v18 = *a2;
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)int v16 = v18;
    uint64_t v9 = v16 + 20;
    __int16 v20 = (char *)a1[11];
    __int16 v19 = (char *)a1[12];
    if (v19 != v20)
    {
      do
      {
        __int128 v21 = *(_OWORD *)(v19 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v19 - 1);
        *(_OWORD *)(v16 - 20) = v21;
        v16 -= 20;
        v19 -= 20;
      }

      while (v19 != v20);
      __int16 v19 = (char *)a1[11];
    }

    a1[11] = v16;
    a1[12] = v9;
    a1[13] = v17;
    if (v19) {
      operator delete(v19);
    }
  }

  else
  {
    __int128 v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    uint64_t v9 = (char *)(v7 + 20);
  }

  a1[12] = v9;
}

uint64_t sub_1004F046C(uint64_t a1, int a2, uint64_t a3)
{
  if (*(int *)(a1 + 80) <= 1)
  {
    uint64_t v4 = *(void *)(a3 + 8);
    unint64_t v5 = *(unsigned __int8 **)(v4 + 64);
    if (a2)
    {
      unint64_t v6 = *(unsigned __int8 **)(v4 + 72);
    }

    else
    {
      unint64_t v7 = *(unsigned __int8 **)(v4 + 72);
      if (v5 == v7)
      {
        __int128 v8 = *(unsigned __int8 **)(v4 + 64);
      }

      else
      {
        while (1)
        {
          *(_OWORD *)__int128 buf = xmmword_1006BDBA8;
          int v19 = 0;
          if (sub_1001BEC7C(v5, buf)) {
            break;
          }
          v5 += 20;
          if (v5 == v7)
          {
            unint64_t v5 = v7;
            break;
          }
        }

        __int128 v8 = v5;
        unint64_t v5 = *(unsigned __int8 **)(v4 + 72);
      }

      if (v8 != v5)
      {
        uint64_t v9 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Contact tracing UUID advertising is not allowed.",  buf,  2u);
        }

        return 3LL;
      }

      unint64_t v6 = v5;
      unint64_t v5 = *(unsigned __int8 **)(v4 + 64);
    }

    if (v5 != v6)
    {
      while (1)
      {
        if (qword_1008D9268 != -1) {
          dispatch_once(&qword_1008D9268, &stru_10089D990);
        }
        if ((sub_10038645C(qword_1008D9260, v5, *(unsigned __int8 *)(a1 + 183)) & 1) == 0)
        {
          unint64_t v11 = (os_log_s *)qword_1008F75F0;
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void *)(a1 + 96);
            sub_1006344B4((uint64_t)v5, buf);
            unint64_t v13 = buf;
            if (v20 < 0) {
              unint64_t v13 = *(uint8_t **)buf;
            }
            *(_DWORD *)__int128 v21 = 138412546;
            uint64_t v22 = v12;
            __int16 v23 = 2080;
            unint64_t v24 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%@ wants to advertise for restricted service (%s)",  v21,  0x16u);
            if (v20 < 0) {
              operator delete(*(void **)buf);
            }
          }

          __int128 v16 = xmmword_1006BDB80;
          int v17 = -1171415960;
          __int128 v14 = xmmword_1006BDCD8;
          int v15 = 0;
        }

        v5 += 20;
        if (v5 == v6) {
          return 0LL;
        }
      }

      return 3LL;
    }
  }

  return 0LL;
}

uint64_t sub_1004F06F4(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v6 = a2;
  uint64_t v4 = sub_10002E92C((uint64_t **)(a1 + 112), (unsigned __int8 *)a2, (uint64_t)&unk_1006C2518, &v6);
  return sub_10002EAC8((uint64_t)v4 + 56, a3);
}

uint64_t sub_1004F0740(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = xpc_data_get_bytes_ptr(object);
    unint64_t v7 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  bytes_ptr,  xpc_data_get_length(object));
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
    {
      int v11 = 134218242;
      uint64_t v12 = a2;
      __int16 v13 = 2114;
      __int128 v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Adding zone %lu = %{public}@",  (uint8_t *)&v11,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 88) addObject:v8];
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_10068A9CC();
  }

  return 1LL;
}

void sub_1004F0894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004F08AC(uint64_t a1, std::string::size_type a2, xpc_object_t object)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary) {
    return 0LL;
  }
  uint64_t v89 = 0LL;
  int64_t v90 = 0LL;
  uint64_t v87 = 0LL;
  uint64_t v88 = &off_10087FAA8;
  int64_t v85 = -127LL;
  uint64_t v86 = &off_10087FAA8;
  int64_t v83 = 1LL;
  int64_t v84 = 0LL;
  int64_t v81 = 1LL;
  int64_t v82 = 1LL;
  int64_t v79 = 0LL;
  int64_t v80 = 2LL;
  int64_t v77 = 0LL;
  int64_t v78 = 0LL;
  int v75 = 0xFFFF;
  int v76 = 0xFFFF;
  int v74 = 0xFFFF;
  __int128 v98 = 0uLL;
  int v99 = 0;
  sub_10063432C(&v98);
  unsigned __int16 v73 = 0;
  uint64_t v8 = sub_1002E6BF0();
  xpc_object_t value = xpc_dictionary_get_value(object, "kCBScanOptionFilterManufacturerID");
  if (value && sub_10025DA04(value, &v73))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068AD70();
    }
    goto LABEL_45;
  }

  xpc_object_t v10 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterPayload");
  if (v10 && sub_10025DBF4(v10, (uint64_t)&v88))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068AAB0();
    }
    goto LABEL_45;
  }

  xpc_object_t v11 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterPayloadMask");
  if (v11 && sub_10025DBF4(v11, (uint64_t)&v86))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068AA84();
    }
    goto LABEL_45;
  }

  xpc_object_t v12 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterForceDups");
  if (v12 && sub_10025DAFC(v12, &v84))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068AD44();
    }
    goto LABEL_45;
  }

  xpc_object_t v13 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterBypassFilterDuplicate");
  if (v13 && sub_10025DAFC(v13, &v83))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068AD18();
    }
    goto LABEL_45;
  }

  xpc_object_t v14 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterTargetCore");
  if (v14 && sub_10025DAFC(v14, &v82))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068ACEC();
    }
    goto LABEL_45;
  }

  xpc_object_t v15 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterRSSIThresholdOrder");
  if (v15 && sub_10025DAFC(v15, &v81))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    goto LABEL_45;
  }

  xpc_object_t v16 = xpc_dictionary_get_value(object, "kCBScanOption127dBmReport");
  if (v16 && sub_10025DAFC(v16, &v78))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    goto LABEL_45;
  }

  xpc_object_t v17 = xpc_dictionary_get_value(object, "kCBScanOption27dBmReport");
  if (!v17 || !sub_10025DAFC(v17, &v77))
  {
    if (xpc_dictionary_get_value(object, "kCBScanOptionPeers"))
    {
      id v18 = sub_10025E384(object, "kCBScanOptionPeers");
      int v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      if (!v19)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10068AC94();
        }
        goto LABEL_45;
      }
    }

    else
    {
      int v19 = 0LL;
    }

    xpc_object_t v22 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterAddressType");
    if (v22 && sub_10025DAFC(v22, &v80))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068AC68();
      }
      goto LABEL_46;
    }

    if (*(_DWORD *)(v6 + 80) == 2)
    {
      uint64_t v23 = sub_1002E6E9C();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v23 + 2328LL))(v23))
      {
        xpc_object_t v24 = xpc_dictionary_get_value(object, "kCBScanOptionRespondToObjectLocatorWithThisType");
        if (v24)
        {
          if (sub_10025DAFC(v24, &v79))
          {
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
              sub_10068AC3C();
            }
            goto LABEL_46;
          }
        }
      }
    }

    if (xpc_dictionary_get_value(object, "kCBOptionUseCaseList"))
    {
      id v25 = sub_10025E9B4(object, "kCBOptionUseCaseList");
      char v20 = (void *)objc_claimAutoreleasedReturnValue(v25);
      if (!v20)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10068AC10();
        }
        goto LABEL_46;
      }
    }

    else
    {
      char v20 = 0LL;
    }

    xpc_object_t v26 = xpc_dictionary_get_value(object, "kCBScanOptionScanWindow");
    if (v26 && sub_10025DA80(v26, &v76))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068ABE4();
      }
      goto LABEL_47;
    }

    xpc_object_t v27 = xpc_dictionary_get_value(object, "kCBScanOptionScanInterval");
    if (v27 && sub_10025DA80(v27, &v75))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068ABB8();
      }
      goto LABEL_47;
    }

    xpc_object_t v28 = xpc_dictionary_get_value(object, "kCBScanOptionScanIntervalBackground");
    if (v28 && sub_10025DA80(v28, &v74))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068AB8C();
      }
      goto LABEL_47;
    }

    xpc_object_t v29 = xpc_dictionary_get_value(object, "kCBScanOptionFilterServiceUUID");
    if (v29)
    {
      sub_10025DCF4(v29, (uint64_t)&v98);
      if (v30)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10068AB60();
        }
        goto LABEL_47;
      }
    }

    xpc_object_t v31 = xpc_dictionary_get_value(object, "kCBScanOptionFilterIdentifier");
    if (v31)
    {
      buf.__r_.__value_.__r.__words[0] = 0LL;
      if (sub_10025DB78(v31, (int64_t *)&buf))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10068AB34();
        }
        uint64_t v68 = 0LL;
        __int16 v32 = 0LL;
        uint64_t v7 = 0LL;
        goto LABEL_161;
      }

      int v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  buf.__r_.__value_.__r.__words[0]));
      size_t v67 = (__CFString *)objc_claimAutoreleasedReturnValue([v36 stringValue]);
    }

    else
    {
      id v33 = sub_10025E1C8(object, "kCBScanOptionFilterIdentifierString");
      xpc_object_t v34 = (__CFString *)objc_claimAutoreleasedReturnValue(v33);
      uint64_t v35 = v34;
      if (v34 && -[__CFString length](v34, "length"))
      {
        size_t v67 = v35;
      }

      else
      {

        size_t v67 = @"default";
      }
    }

    if (v90 == 18 && _os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068A60C();
      }
LABEL_103:
      uint64_t v68 = 0LL;
      uint64_t v7 = 0LL;
LABEL_160:
      __int16 v32 = v67;
LABEL_161:

      goto LABEL_48;
    }

    xpc_object_t v37 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterRssi");
    xpc_object_t v38 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterPuckType");
    if (v37 && sub_10025DAFC(v37, &v85))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068AB08();
      }
      goto LABEL_103;
    }

    id v39 = sub_10025E1C8(object, "kCBScanOptionFilterNameMatchString");
    uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(v39);
    id v40 = sub_10025E254(object, "kCBScanOptionFilterNameMatchNSStringCompareOptions");
    uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(v40);
    if (v66)
    {
      uint64_t v69 = [v66 unsignedIntValue];
      int v41 = 1000;
    }

    else
    {
      id v42 = sub_10025E1C8(object, "kCBScanOptionFilterNameMatchOption");
      int v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      if ([v43 isEqualToString:@"kCBScanOptionFilterNameMatchOptionStartsWith"])
      {
        int v41 = 1;
      }

      else if ([v43 isEqualToString:@"kCBScanOptionFilterNameMatchOptionEndsWith"])
      {
        int v41 = 2;
      }

      else
      {
        if (([v43 isEqualToString:@"kCBScanOptionFilterNameMatchOptionContains"] & 1) == 0
          && [v43 length])
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            sub_10068AADC();
          }

          goto LABEL_167;
        }

        int v41 = 0;
      }

      uint64_t v69 = 0LL;
    }

    int v44 = v73;
    if (v73)
    {
      int v45 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
      {
        uint64_t v46 = *(void *)(a1 + 32);
        sub_10056B0A4((uint64_t)&v88, &v97);
        int size = (char)v97.__r_.__value_.__s.__size_;
        std::string::size_type v48 = v97.__r_.__value_.__r.__words[0];
        sub_10056B0A4((uint64_t)&v86, &__p);
        uint64_t v49 = &v97;
        if (size < 0) {
          uint64_t v49 = (std::stringbuf::string_type *)v48;
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 134220546;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v67;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2112;
        uint64_t v94 = v46;
        __int16 v95 = 1024;
        *(_DWORD *)uint64_t v96 = v44;
        *(_WORD *)&v96[4] = 2080;
        *(void *)&v96[6] = v49;
        *(_WORD *)&v96[14] = 2080;
        *(void *)&v96[16] = p_p;
        *(_WORD *)&v96[24] = 2048;
        *(void *)&v96[26] = v85;
        *(_WORD *)&v96[34] = 2048;
        *(void *)&v96[36] = v84;
        *(_WORD *)&v96[44] = 2048;
        *(void *)&v96[46] = v83;
        *(_WORD *)&v96[54] = 2048;
        *(void *)&v96[56] = v82;
        *(_WORD *)&v96[64] = 2048;
        *(void *)&v96[66] = v81;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_INFO,  "addEnhancedFilter index:%zu filterId:%@ clientName:%@ mfgrID:%d payload:%s payloadFilter:%s rssi:%lld forceDup s:%lld bypassFilterDuplicate:%lld,t targetCore:%lld, rssiThreshold:%lld",  (uint8_t *)&buf,  0x6Cu);
        LOWORD(v44) = v73;
      }

      sub_1004F19A0( *(uint64_t **)(a1 + 48),  v67,  *(void **)(a1 + 32),  v44,  (uint64_t)&v88,  (uint64_t)&v86,  v85,  v84,  v83,  v82,  v81,  0,  0,  1);
      goto LABEL_150;
    }

    if ((_BYTE)v98)
    {
      xpc_object_t v51 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
      {
        uint64_t v70 = *(void *)(a1 + 32);
        sub_1006344B4((uint64_t)&v98, &v97);
        if ((v97.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          id v52 = &v97;
        }
        else {
          id v52 = (std::stringbuf::string_type *)v97.__r_.__value_.__r.__words[0];
        }
        sub_10056B0A4((uint64_t)&v88, &__p);
        int v53 = (char)__p.__r_.__value_.__s.__size_;
        std::string::size_type v54 = __p.__r_.__value_.__r.__words[0];
        sub_10056B0A4((uint64_t)&v86, &v71);
        BOOL v55 = &__p;
        if (v53 < 0) {
          BOOL v55 = (std::stringbuf::string_type *)v54;
        }
        if ((v71.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          id v56 = &v71;
        }
        else {
          id v56 = (std::stringbuf::string_type *)v71.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 134220546;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v67;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2112;
        uint64_t v94 = v70;
        __int16 v95 = 2080;
        *(void *)uint64_t v96 = v52;
        *(_WORD *)&v96[8] = 2080;
        *(void *)&v96[10] = v55;
        *(_WORD *)&v96[18] = 2080;
        *(void *)&v96[20] = v56;
        *(_WORD *)&v96[28] = 2048;
        *(void *)&v96[30] = v85;
        *(_WORD *)&v96[38] = 2048;
        *(void *)&v96[40] = v84;
        *(_WORD *)&v96[48] = 2048;
        *(void *)&v96[50] = v83;
        *(_WORD *)&v96[58] = 2048;
        *(void *)&v96[60] = v82;
        *(_WORD *)&v96[68] = 2048;
        *(void *)&v96[70] = v81;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_INFO,  "addEnhancedFilter index:%zu filterId:%@ clientName:%@ uuid:%s payload:%s payloadFilter:%s rssi:%lld forceDups: %lld bypassFilterDuplicate:%lld,t targetCore:%lld, rssiThreshold:%lld",  (uint8_t *)&buf,  0x70u);
      }

      uint64_t v57 = *(void **)(a1 + 48);
      xpc_object_t v58 = *(void **)(a1 + 32);
      __int128 v91 = v98;
      int v92 = v99;
      sub_10004B5A8(v57, v67, v58, &v91, (uint64_t)&v88, (uint64_t)&v86, v85, v84, v83, v82, v81, 0, 0, 1);
      goto LABEL_150;
    }

    if ([v68 length])
    {
      uint64_t v59 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
      {
        uint64_t v60 = *(void *)(a1 + 32);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134220546;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v67;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2112;
        uint64_t v94 = v60;
        __int16 v95 = 2112;
        *(void *)uint64_t v96 = v68;
        *(_WORD *)&v96[8] = 1024;
        *(_DWORD *)&v96[10] = v41;
        *(_WORD *)&v96[14] = 2048;
        *(void *)&v96[16] = v69;
        *(_WORD *)&v96[24] = 2048;
        *(void *)&v96[26] = v85;
        *(_WORD *)&v96[34] = 2048;
        *(void *)&v96[36] = v84;
        *(_WORD *)&v96[44] = 2048;
        *(void *)&v96[46] = v83;
        *(_WORD *)&v96[54] = 2048;
        *(void *)&v96[56] = v82;
        *(_WORD *)&v96[64] = 2048;
        *(void *)&v96[66] = v81;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_INFO,  "addEnhancedFilter index:%zu filterId:%@ clientName:%@ nameMatchStr:%@ nameMatchOpt:%d NSStringCompareOptions:% lu rssi:%lld forceDups:%lld bypassFilterDuplicate:%lld,t targetCore:%lld, rssiThreshold:%lld",  (uint8_t *)&buf,  0x6Cu);
      }

      sub_1004F1AD0(*(uint64_t **)(a1 + 48), v67, *(void **)(a1 + 32), v68, v41, v69, v85, v84, v83, v82, v81, 0, 0, 1);
      goto LABEL_150;
    }

    if (*(_BYTE *)(v6 + 170))
    {
      if (v38 && !sub_10025DAFC(v38, &v90))
      {
        if (v37 && !sub_10025DAFC(v37, &v85))
        {
          if (sub_10056AAD8((uint64_t)&v86))
          {
            if (sub_10056AAD8((uint64_t)&v88))
            {
              sub_10004A304( *(void *)(a1 + 48),  *(void **)(a1 + 32),  v90,  v80,  (uint64_t)&v88,  (uint64_t)&v86,  v85,  v84,  v83,  v82,  v81,  v19,  v79 != 0,  1,  v78 != 0,  v77 != 0,  1,  v20,  v76,  v75,  v74);
LABEL_150:
              uint64_t v61 = *(void *)(a1 + 48);
              uint64_t v62 = *(void *)(v61 + 96);
              for (uint64_t i = *(void *)(v61 + 104); v62 != i; v62 += 112LL)
              {
                uint64_t v64 = (os_log_s *)qword_1008F75F0;
                if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
                {
                  sub_1004F1C08(v62, &buf);
                  unsigned __int8 v65 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0
                      ? &buf
                      : (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
                  LODWORD(v97.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 4) = (std::string::size_type)v65;
                  _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v97, 0xCu);
                }
              }

              uint64_t v7 = 1LL;
              goto LABEL_159;
            }

            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
              sub_10068AAB0();
            }
          }

          else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
          {
            sub_10068AA84();
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          sub_10068AA58();
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_10068AA2C();
      }
    }

LABEL_167:
    uint64_t v7 = 0LL;
LABEL_159:

    goto LABEL_160;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
LABEL_40:
  }
    sub_10068ACC0();
LABEL_45:
  int v19 = 0LL;
LABEL_46:
  char v20 = 0LL;
LABEL_47:
  uint64_t v7 = 0LL;
LABEL_48:

  uint64_t v86 = &off_10087FAA8;
  if (v87) {
    sub_1002CD254(v87);
  }
  uint64_t v88 = &off_10087FAA8;
  if (v89) {
    sub_1002CD254(v89);
  }
  return v7;
}

void sub_1004F180C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, unsigned int *a42, uint64_t a43, unsigned int *a44)
{
  if (a29 < 0) {
    operator delete(__p);
  }

  if (a42) {
    sub_1002CD254(a42);
  }
  if (a44) {
    sub_1002CD254(a44);
  }
  _Unwind_Resume(a1);
}

void sub_1004F19A0( uint64_t *a1, void *a2, void *a3, __int16 a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  unint64_t v15 = a1[13];
  if (v15 >= a1[14])
  {
    uint64_t v16 = sub_1000509A0(a1 + 12, v17);
  }

  else
  {
    sub_100050AC0((uint64_t)(a1 + 14), a1[13], v17);
    uint64_t v16 = v15 + 112;
    a1[13] = v15 + 112;
  }

  a1[13] = v16;

  char v20 = &off_10087FAA8;
  if (v21) {
    sub_1002CD254(v21);
  }
  id v18 = &off_10087FAA8;
  if (v19) {
    sub_1002CD254(v19);
  }
}

void sub_1004F1AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1004F1AD0( uint64_t *a1, void *a2, void *a3, void *a4, int a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  unint64_t v15 = a1[13];
  if (v15 >= a1[14])
  {
    uint64_t v16 = sub_1000509A0(a1 + 12, v17);
  }

  else
  {
    sub_100050AC0((uint64_t)(a1 + 14), a1[13], v17);
    uint64_t v16 = v15 + 112;
    a1[13] = v15 + 112;
  }

  a1[13] = v16;

  char v20 = &off_10087FAA8;
  if (v21) {
    sub_1002CD254(v21);
  }
  id v18 = &off_10087FAA8;
  if (v19) {
    sub_1002CD254(v19);
  }
}

void sub_1004F1BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1004F1C08@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v69 = 0LL;
  __int128 v67 = 0u;
  memset(v68, 0, sizeof(v68));
  *(_OWORD *)unsigned __int8 v65 = 0u;
  __int128 v66 = 0u;
  memset(v64, 0, sizeof(v64));
  sub_10020E564((uint64_t)v64);
  uint64_t v4 = sub_1001FD17C(v64, (uint64_t)"EnhancedFilterDefinition Type:", 30LL);
  sub_10002418C(&__p, off_10089D9F0[*(int *)(a1 + 104)]);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = sub_1001FD17C(v4, (uint64_t)p_p, size);
  uint64_t v8 = sub_1001FD17C(v7, (uint64_t)" configController:", 18LL);
  uint64_t v9 = (void *)std::ostream::operator<<(v8, *(unsigned __int8 *)(a1 + 79));
  xpc_object_t v10 = sub_1001FD17C(v9, (uint64_t)" filterId:", 10LL);
  xpc_object_t v11 = (const char *)[*(id *)a1 UTF8String];
  size_t v12 = strlen(v11);
  xpc_object_t v13 = sub_1001FD17C(v10, (uint64_t)v11, v12);
  xpc_object_t v14 = sub_1001FD17C(v13, (uint64_t)" bundle:", 8LL);
  unint64_t v15 = (const char *)[*(id *)(a1 + 8) UTF8String];
  size_t v16 = strlen(v15);
  sub_1001FD17C(v14, (uint64_t)v15, v16);
  int v17 = *(_DWORD *)(a1 + 104);
  if (v17 == 2)
  {
    __int128 v21 = sub_1001FD17C(v64, (uint64_t)" manufacturerID: ", 17LL);
    std::ostream::operator<<(v21, *(unsigned __int16 *)(a1 + 16));
  }

  else if (v17 == 1)
  {
    id v18 = sub_1001FD17C(v64, (uint64_t)" uuid:", 6LL);
    sub_1006344B4(a1 + 20, &__p);
    int v19 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? &__p
        : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    uint64_t v20 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p.__r_.__value_.__s.__size_ : __p.__r_.__value_.__l.__size_;
    sub_1001FD17C(v18, (uint64_t)v19, v20);
  }

  if (!sub_10056AAC8(a1 + 40))
  {
    id v22 = sub_1001FD17C(v64, (uint64_t)" blob:", 6LL);
    sub_10056B0A4(a1 + 40, &__p);
    uint64_t v23 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? &__p
        : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    uint64_t v24 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p.__r_.__value_.__s.__size_ : __p.__r_.__value_.__l.__size_;
    sub_1001FD17C(v22, (uint64_t)v23, v24);
  }

  if (!sub_10056AAC8(a1 + 56))
  {
    id v25 = sub_1001FD17C(v64, (uint64_t)" mask:", 6LL);
    sub_10056B0A4(a1 + 56, &__p);
    xpc_object_t v26 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? &__p
        : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    uint64_t v27 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p.__r_.__value_.__s.__size_ : __p.__r_.__value_.__l.__size_;
    sub_1001FD17C(v25, (uint64_t)v26, v27);
  }

  if (*(_DWORD *)(a1 + 104) == 3)
  {
    int v28 = *(_DWORD *)(a1 + 80);
    if (v28 > 1)
    {
      if (v28 == 1000) {
        xpc_object_t v29 = "NSStringCompareOptions";
      }
      else {
        xpc_object_t v29 = "EndsWith";
      }
    }

    else if (v28)
    {
      xpc_object_t v29 = "StartsWith";
    }

    else
    {
      xpc_object_t v29 = "Contains";
    }

    sub_10002418C(&__p, v29);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v30 = &__p;
    }
    else {
      int v30 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v31 = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v31 = __p.__r_.__value_.__l.__size_;
    }
    sub_1001FD17C(v64, (uint64_t)v30, v31);
    if (*(_DWORD *)(a1 + 80) == 1000)
    {
      sub_1004F5098(*(void *)(a1 + 88), &__p);
      __int16 v32 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &__p
          : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      uint64_t v33 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p.__r_.__value_.__s.__size_ : __p.__r_.__value_.__l.__size_;
      sub_1001FD17C(v64, (uint64_t)v32, v33);
    }

    xpc_object_t v34 = sub_1001FD17C(v64, (uint64_t)":", 1LL);
    uint64_t v35 = (const char *)[*(id *)(a1 + 96) UTF8String];
    size_t v36 = strlen(v35);
    sub_1001FD17C(v34, (uint64_t)v35, v36);
  }

  xpc_object_t v37 = sub_1001FD17C(v64, (uint64_t)" rssi:", 6LL);
  std::to_string(&__p, *(char *)(a1 + 72));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    xpc_object_t v38 = &__p;
  }
  else {
    xpc_object_t v38 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v39 = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v39 = __p.__r_.__value_.__l.__size_;
  }
  id v40 = sub_1001FD17C(v37, (uint64_t)v38, v39);
  int v41 = sub_1001FD17C(v40, (uint64_t)" rssiThreshold:", 15LL);
  std::to_string(&v62, *(unsigned __int8 *)(a1 + 76));
  if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    id v42 = &v62;
  }
  else {
    id v42 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v43 = v62.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v43 = v62.__r_.__value_.__l.__size_;
  }
  int v44 = sub_1001FD17C(v41, (uint64_t)v42, v43);
  int v45 = sub_1001FD17C(v44, (uint64_t)" report127:", 11LL);
  std::to_string(&v61, *(unsigned __int8 *)(a1 + 77));
  if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v46 = &v61;
  }
  else {
    uint64_t v46 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v47 = v61.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v47 = v61.__r_.__value_.__l.__size_;
  }
  std::string::size_type v48 = sub_1001FD17C(v45, (uint64_t)v46, v47);
  uint64_t v49 = sub_1001FD17C(v48, (uint64_t)" repor127:", 10LL);
  std::to_string(&v60, *(unsigned __int8 *)(a1 + 78));
  if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    id v50 = &v60;
  }
  else {
    id v50 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v51 = v60.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v51 = v60.__r_.__value_.__l.__size_;
  }
  sub_1001FD17C(v49, (uint64_t)v50, v51);
  id v52 = sub_1001FD17C(v64, (uint64_t)" forceDups:", 11LL);
  std::to_string(&__p, *(unsigned __int8 *)(a1 + 73));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v53 = &__p;
  }
  else {
    int v53 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v54 = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v54 = __p.__r_.__value_.__l.__size_;
  }
  BOOL v55 = sub_1001FD17C(v52, (uint64_t)v53, v54);
  id v56 = sub_1001FD17C(v55, (uint64_t)" bypassFilterDups:", 18LL);
  std::to_string(&v62, *(unsigned __int8 *)(a1 + 74));
  if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v57 = &v62;
  }
  else {
    uint64_t v57 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v58 = v62.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v58 = v62.__r_.__value_.__l.__size_;
  }
  sub_1001FD17C(v56, (uint64_t)v57, v58);
  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v64 + 8));
  if (SHIBYTE(v66) < 0) {
    operator delete(v65[1]);
  }
  std::streambuf::~streambuf((char *)v64 + 8);
  return std::ios::~ios(v68);
}

void sub_1004F2234( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32, char a33)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_10020E784((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1004F22F8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    unsigned int v2 = *(_DWORD *)(a1 + 128);
    int v3 = *(_DWORD *)(a1 + 132);
    if (v2 && v3 != 0 && 100 * v3 / v2 >= 0x1F)
    {
      uint64_t v5 = *(void *)(a1 + 64);
      for (uint64_t i = *(void *)(a1 + 72); v5 != i; v5 += 96LL)
      {
        if (*(unsigned __int8 *)(v5 + 8) - 15 <= 1)
        {
          id v7 = *(id *)(v5 + 72);
          __int128 v14 = 0u;
          __int128 v15 = 0u;
          __int128 v16 = 0u;
          __int128 v17 = 0u;
          id v8 = v7;
          id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
          if (v9)
          {
            uint64_t v10 = *(void *)v15;
            do
            {
              for (uint64_t j = 0LL; j != v9; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v15 != v10) {
                  objc_enumerationMutation(v8);
                }
                unsigned int v12 = [*(id *)(*((void *)&v14 + 1) + 8 * (void)j) longLongValue];
                BOOL v13 = v12 - 131078 > 9 || ((1 << (v12 - 6)) & 0x203) == 0;
                if (!v13
                  && ((*(_DWORD *)(v5 + 84) - 1) < 0x12B
                   || (*(_DWORD *)(v5 + 88) - 1) <= 0x12A))
                {
                  *(_BYTE *)(a1 + 200) = 1;
                }
              }

              id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
            }

            while (v9);
          }
        }
      }
    }
  }

void sub_1004F249C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

xpc_object_t sub_1004F24C4( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char a9, char a10, char a11)
{
  id v303 = a1;
  id v302 = a2;
  v309[0] = 0LL;
  v309[1] = 0LL;
  v308 = (unsigned __int8 *)v309;
  if ((a9 & 1) == 0)
  {
    __int128 v322 = xmmword_1006BDBA8;
    int v323 = 0;
    sub_100634334((__n128 *)bytes, (__n128 *)&v322);
    sub_10038CF98((uint64_t **)&v308, bytes, (uint64_t)bytes);
  }

  int v301 = a8;
  if ((a11 & 1) == 0)
  {
    __int128 v320 = xmmword_1006BDCB0;
    int v321 = 0;
    sub_100634334((__n128 *)bytes, (__n128 *)&v320);
    sub_10038CF98((uint64_t **)&v308, bytes, (uint64_t)bytes);
  }

  xpc_object_t v16 = xpc_BOOL_create(*(_BYTE *)(*(void *)(a3 + 8) + 12LL));
  __int128 v17 = (char *)operator new(0x10uLL);
  id v18 = v17;
  *(void *)__int128 v17 = "kCBAdvDataIsConnectable";
  *((void *)v17 + 1) = v16;
  if (a6)
  {
    uint64_t v19 = *(void *)(*(void *)(a3 + 8) + 200LL);
    bytes[0] = BYTE5(v19);
    bytes[1] = BYTE4(v19);
    _OWORD bytes[2] = BYTE3(v19);
    bytes[3] = BYTE2(v19);
    bytes[4] = BYTE1(v19);
    bytes[5] = v19;
    xpc_object_t v20 = xpc_data_create(bytes, 6uLL);
    __int128 v21 = operator new(0x20uLL);
    void v21[2] = "kCBAdvDataDeviceAddress";
    void v21[3] = v20;
    *(_OWORD *)__int128 v21 = *(_OWORD *)v18;
    operator delete(v18);
    xpc_object_t v22 = xpc_int64_create(BYTE6(v19));
    uint64_t v23 = (char *)operator new(0x40uLL);
    uint64_t v24 = v23;
    uint64_t v25 = 0LL;
    xpc_object_t v26 = v23 + 64;
    *((void *)v23 + 4) = "kCBAdvDataDeviceAddressType";
    *((void *)v23 + 5) = v22;
    uint64_t v27 = v23 + 48;
    do
    {
      *(_OWORD *)&v23[v25 * 8 + 16] = *(_OWORD *)&v21[v25 + 2];
      v25 -= 2LL;
    }

    while (v25 != -4);
    operator delete(v21);
    id v18 = v24;
  }

  else
  {
    xpc_object_t v26 = v17 + 16;
    uint64_t v27 = v17 + 16;
  }

  uint64_t v28 = *(void *)(a3 + 8);
  uint64_t v30 = *(void *)(v28 + 64);
  uint64_t v31 = *(void *)(v28 + 72);
  xpc_object_t v29 = (unsigned __int8 **)(v28 + 64);
  if (v31 != v30)
  {
    xpc_object_t v32 = sub_10043F8BC(v29, (uint64_t)&v308);
    xpc_object_t v33 = v32;
    if (v27 >= v26)
    {
      uint64_t v34 = (v27 - v18) >> 4;
      unint64_t v35 = v34 + 1;
      if ((v26 - v18) >> 3 > v35) {
        unint64_t v35 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v36)
      {
        if (v36 >> 60) {
          sub_100008BD4();
        }
        xpc_object_t v37 = (char *)operator new(16 * v36);
      }

      else
      {
        xpc_object_t v37 = 0LL;
      }

      xpc_object_t v38 = &v37[16 * v34];
      xpc_object_t v26 = &v37[16 * v36];
      *(void *)xpc_object_t v38 = "kCBAdvDataServiceUUIDs";
      *((void *)v38 + 1) = v33;
      uint64_t v39 = v38 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v38 - 1) = *((_OWORD *)v27 - 1);
          v38 -= 16;
          v27 -= 16;
        }

        while (v27 != v18);
        uint64_t v27 = v18;
      }

      operator delete(v27);
      uint64_t v27 = v39;
      id v18 = v38;
    }

    else
    {
      *(void *)uint64_t v27 = "kCBAdvDataServiceUUIDs";
      *((void *)v27 + 1) = v32;
      v27 += 16;
    }
  }

  uint64_t v40 = *(void *)(a3 + 8);
  uint64_t v42 = *(void *)(v40 + 88);
  uint64_t v43 = *(void *)(v40 + 96);
  int v41 = (unsigned __int8 **)(v40 + 88);
  if (v43 != v42)
  {
    xpc_object_t v44 = sub_10043F8BC(v41, (uint64_t)&v308);
    xpc_object_t v45 = v44;
    if (v27 >= v26)
    {
      uint64_t v46 = (v27 - v18) >> 4;
      unint64_t v47 = v46 + 1;
      if ((v26 - v18) >> 3 > v47) {
        unint64_t v47 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v48 = v47;
      }
      if (v48)
      {
        if (v48 >> 60) {
          sub_100008BD4();
        }
        uint64_t v49 = (char *)operator new(16 * v48);
      }

      else
      {
        uint64_t v49 = 0LL;
      }

      id v50 = &v49[16 * v46];
      xpc_object_t v26 = &v49[16 * v48];
      *(void *)id v50 = "kCBAdvDataSolicitedServiceUUIDs";
      *((void *)v50 + 1) = v45;
      uint64_t v51 = v50 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v50 - 1) = *((_OWORD *)v27 - 1);
          v50 -= 16;
          v27 -= 16;
        }

        while (v27 != v18);
        uint64_t v27 = v18;
      }

      operator delete(v27);
      uint64_t v27 = v51;
      id v18 = v50;
    }

    else
    {
      *(void *)uint64_t v27 = "kCBAdvDataSolicitedServiceUUIDs";
      *((void *)v27 + 1) = v44;
      v27 += 16;
    }
  }

  if (*(void *)(a4 + 8) != *(void *)a4)
  {
    xpc_object_t v52 = sub_10043F8BC((unsigned __int8 **)a4, (uint64_t)&v308);
    xpc_object_t v53 = v52;
    if (v27 >= v26)
    {
      uint64_t v54 = (v27 - v18) >> 4;
      unint64_t v55 = v54 + 1;
      if ((v26 - v18) >> 3 > v55) {
        unint64_t v55 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v56 = v55;
      }
      if (v56)
      {
        if (v56 >> 60) {
          sub_100008BD4();
        }
        uint64_t v57 = (char *)operator new(16 * v56);
      }

      else
      {
        uint64_t v57 = 0LL;
      }

      uint64_t v58 = &v57[16 * v54];
      xpc_object_t v26 = &v57[16 * v56];
      *(void *)uint64_t v58 = "kCBAdvDataHashedServiceUUIDs";
      *((void *)v58 + 1) = v53;
      uint64_t v59 = v58 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v58 - 1) = *((_OWORD *)v27 - 1);
          v58 -= 16;
          v27 -= 16;
        }

        while (v27 != v18);
        uint64_t v27 = v18;
      }

      operator delete(v27);
      uint64_t v27 = v59;
      id v18 = v58;
    }

    else
    {
      *(void *)uint64_t v27 = "kCBAdvDataHashedServiceUUIDs";
      *((void *)v27 + 1) = v52;
      v27 += 16;
    }
  }

  uint64_t v60 = *(void *)(a3 + 8);
  if (*(char *)(v60 + 39) < 0)
  {
    sub_100024238(bytes, *(void **)(v60 + 16), *(void *)(v60 + 24));
  }

  else
  {
    *(_OWORD *)int bytes = *(_OWORD *)(v60 + 16);
    *(void *)&bytes[16] = *(void *)(v60 + 32);
  }

  if ((bytes[23] & 0x80000000) != 0)
  {
    uint64_t v61 = *(void *)&bytes[8];
    operator delete(*(void **)bytes);
    if (!v61) {
      goto LABEL_92;
    }
  }

  else if (!bytes[23])
  {
    goto LABEL_92;
  }

  uint64_t v62 = *(void *)(a3 + 8);
  if (*(char *)(v62 + 39) < 0)
  {
    sub_100024238(bytes, *(void **)(v62 + 16), *(void *)(v62 + 24));
  }

  else
  {
    *(_OWORD *)int bytes = *(_OWORD *)(v62 + 16);
    *(void *)&bytes[16] = *(void *)(v62 + 32);
  }

  if (bytes[23] >= 0) {
    uint64_t v63 = bytes;
  }
  else {
    uint64_t v63 = *(const char **)bytes;
  }
  xpc_object_t v64 = xpc_string_create(v63);
  xpc_object_t v65 = v64;
  if (v27 >= v26)
  {
    uint64_t v67 = (v27 - v18) >> 4;
    unint64_t v68 = v67 + 1;
    if ((v26 - v18) >> 3 > v68) {
      unint64_t v68 = (v26 - v18) >> 3;
    }
    else {
      unint64_t v69 = v68;
    }
    if (v69)
    {
      if (v69 >> 60) {
        sub_100008BD4();
      }
      uint64_t v70 = (char *)operator new(16 * v69);
    }

    else
    {
      uint64_t v70 = 0LL;
    }

    __int128 v66 = &v70[16 * v67];
    xpc_object_t v26 = &v70[16 * v69];
    *(void *)__int128 v66 = "kCBAdvDataLocalName";
    *((void *)v66 + 1) = v65;
    std::stringbuf::string_type v71 = v66;
    if (v27 != v18)
    {
      do
      {
        *((_OWORD *)v71 - 1) = *((_OWORD *)v27 - 1);
        v71 -= 16;
        v27 -= 16;
      }

      while (v27 != v18);
      uint64_t v27 = v18;
    }

    operator delete(v27);
    id v18 = v71;
  }

  else
  {
    *(void *)uint64_t v27 = "kCBAdvDataLocalName";
    *((void *)v27 + 1) = v64;
    __int128 v66 = v27;
  }

  uint64_t v27 = v66 + 16;
  if ((bytes[23] & 0x80000000) != 0) {
    operator delete(*(void **)bytes);
  }
LABEL_92:
  uint64_t v72 = *(void *)(a3 + 8);
  if (*(_WORD *)(v72 + 40))
  {
    xpc_object_t v73 = xpc_int64_create(*(unsigned __int16 *)(v72 + 40));
    xpc_object_t v74 = v73;
    if (v27 >= v26)
    {
      uint64_t v76 = (v27 - v18) >> 4;
      unint64_t v77 = v76 + 1;
      if ((v26 - v18) >> 3 > v77) {
        unint64_t v77 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v78 = v77;
      }
      if (v78)
      {
        if (v78 >> 60) {
          sub_100008BD4();
        }
        int64_t v79 = (char *)operator new(16 * v78);
      }

      else
      {
        int64_t v79 = 0LL;
      }

      int64_t v80 = &v79[16 * v76];
      xpc_object_t v26 = &v79[16 * v78];
      *(void *)int64_t v80 = "kCBAdvDataAppearance";
      *((void *)v80 + 1) = v74;
      int v75 = v80 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v80 - 1) = *((_OWORD *)v27 - 1);
          v80 -= 16;
          v27 -= 16;
        }

        while (v27 != v18);
        uint64_t v27 = v18;
      }

      id v18 = v80;
      if (v27) {
        operator delete(v27);
      }
    }

    else
    {
      *(void *)uint64_t v27 = "kCBAdvDataAppearance";
      *((void *)v27 + 1) = v73;
      int v75 = v27 + 16;
    }
  }

  else
  {
    int v75 = v27;
  }

  uint64_t v81 = *(void *)(a3 + 8);
  if (*(_BYTE *)(v81 + 42))
  {
    xpc_object_t v82 = xpc_int64_create(*(char *)(v81 + 43));
    xpc_object_t v83 = v82;
    if (v75 >= v26)
    {
      uint64_t v85 = (v75 - v18) >> 4;
      unint64_t v86 = v85 + 1;
      if ((v26 - v18) >> 3 > v86) {
        unint64_t v86 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v87 = v86;
      }
      if (v87)
      {
        if (v87 >> 60) {
          sub_100008BD4();
        }
        uint64_t v88 = (char *)operator new(16 * v87);
      }

      else
      {
        uint64_t v88 = 0LL;
      }

      uint64_t v89 = &v88[16 * v85];
      xpc_object_t v26 = &v88[16 * v87];
      *(void *)uint64_t v89 = "kCBAdvDataTxPowerLevel";
      *((void *)v89 + 1) = v83;
      int64_t v84 = v89 + 16;
      if (v75 != v18)
      {
        do
        {
          *((_OWORD *)v89 - 1) = *((_OWORD *)v75 - 1);
          v89 -= 16;
          v75 -= 16;
        }

        while (v75 != v18);
        int v75 = v18;
      }

      id v18 = v89;
      if (v75) {
        operator delete(v75);
      }
    }

    else
    {
      *(void *)int v75 = "kCBAdvDataTxPowerLevel";
      *((void *)v75 + 1) = v82;
      int64_t v84 = v75 + 16;
    }
  }

  else
  {
    int64_t v84 = v75;
  }

  int64_t v90 = *(void **)(a3 + 8);
  if (v90[16])
  {
    xpc_object_t v91 = xpc_array_create(0LL, 0LL);
    int v92 = (unsigned __int8 *)v90[14];
    uint64_t v93 = (unsigned __int8 *)(v90 + 15);
    if (v92 != (unsigned __int8 *)(v90 + 15))
    {
      do
      {
        bytes[0] = 0;
        if (v309 == (void **)sub_1004F59EC(v308, (unsigned __int8 *)v309, v92 + 32))
        {
          *(_OWORD *)int bytes = 0uLL;
          unsigned int v94 = sub_10063443C(v92 + 32, bytes);
          xpc_array_set_data(v91, 0xFFFFFFFFFFFFFFFFLL, bytes, v94);
          __int16 v95 = (const void *)sub_10056AAF0((uint64_t)(v92 + 56));
          size_t v96 = sub_10056AAD8((uint64_t)(v92 + 56));
          xpc_array_set_data(v91, 0xFFFFFFFFFFFFFFFFLL, v95, v96);
        }

        std::stringbuf::string_type v97 = (unsigned __int8 *)*((void *)v92 + 1);
        if (v97)
        {
          do
          {
            __int128 v98 = v97;
            std::stringbuf::string_type v97 = *(unsigned __int8 **)v97;
          }

          while (v97);
        }

        else
        {
          do
          {
            __int128 v98 = (unsigned __int8 *)*((void *)v92 + 2);
            BOOL v275 = *(void *)v98 == (void)v92;
            int v92 = v98;
          }

          while (!v275);
        }

        int v92 = v98;
      }

      while (v98 != v93);
    }

    if (xpc_array_get_count(v91))
    {
      if (v84 >= v26)
      {
        uint64_t v107 = (v84 - v18) >> 4;
        unint64_t v108 = v107 + 1;
        if ((v26 - v18) >> 3 > v108) {
          unint64_t v108 = (v26 - v18) >> 3;
        }
        else {
          unint64_t v109 = v108;
        }
        if (v109)
        {
          if (v109 >> 60) {
            sub_100008BD4();
          }
          id v110 = (char *)operator new(16 * v109);
        }

        else
        {
          id v110 = 0LL;
        }

        id v115 = &v110[16 * v107];
        xpc_object_t v26 = &v110[16 * v109];
        *(void *)id v115 = "kCBAdvDataServiceData";
        *((void *)v115 + 1) = v91;
        int v99 = v115 + 16;
        if (v84 != v18)
        {
          do
          {
            *((_OWORD *)v115 - 1) = *((_OWORD *)v84 - 1);
            v115 -= 16;
            v84 -= 16;
          }

          while (v84 != v18);
          int64_t v84 = v18;
        }

        id v18 = v115;
        if (v84) {
          operator delete(v84);
        }
      }

      else
      {
        *(void *)int64_t v84 = "kCBAdvDataServiceData";
        *((void *)v84 + 1) = v91;
        int v99 = v84 + 16;
      }

      goto LABEL_145;
    }

    xpc_release(v91);
  }

  int v99 = v84;
LABEL_145:
  size_t v100 = sub_10056AAD8(*(void *)(a3 + 8) + 48LL);
  uint64_t v101 = (_WORD *)sub_10056AAF0(*(void *)(a3 + 8) + 48LL);
  uint64_t v102 = sub_1002E6BF0();
  if ((((*(unsigned int (**)(uint64_t))(*(void *)v102 + 384LL))(v102) | a7) & 1) == 0
    && v100 >= 3
    && *v101 == 76)
  {
    size_t v100 = 0LL;
  }

  if (_os_feature_enabled_impl("BluetoothFeatures", "Type18ToPOSH"))
  {
    uint64_t v103 = *(void *)(a3 + 8);
    if (*(_DWORD *)(v103 + 312) || !v100) {
      goto LABEL_281;
    }
  }

  else
  {
    if (!v100) {
      goto LABEL_281;
    }
    uint64_t v103 = *(void *)(a3 + 8);
  }

  if (*(_BYTE *)(v103 + 361))
  {
    xpc_object_t v104 = xpc_int64_create(1LL);
    xpc_object_t v105 = v104;
    if (v99 >= v26)
    {
      uint64_t v111 = (v99 - v18) >> 4;
      unint64_t v112 = v111 + 1;
      if ((v26 - v18) >> 3 > v112) {
        unint64_t v112 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v113 = v112;
      }
      if (v113)
      {
        if (v113 >> 60) {
          sub_100008BD4();
        }
        id v114 = (char *)operator new(16 * v113);
      }

      else
      {
        id v114 = 0LL;
      }

      xpc_object_t v116 = &v114[16 * v111];
      xpc_object_t v26 = &v114[16 * v113];
      *(void *)xpc_object_t v116 = "kCBAdvDataProximityPairingStatusDecrypted";
      *((void *)v116 + 1) = v105;
      id v106 = v116 + 16;
      if (v99 != v18)
      {
        do
        {
          *((_OWORD *)v116 - 1) = *((_OWORD *)v99 - 1);
          v116 -= 16;
          v99 -= 16;
        }

        while (v99 != v18);
        int v99 = v18;
      }

      id v18 = v116;
      if (v99) {
        operator delete(v99);
      }
    }

    else
    {
      *(void *)int v99 = "kCBAdvDataProximityPairingStatusDecrypted";
      *((void *)v99 + 1) = v104;
      id v106 = v99 + 16;
    }
  }

  else
  {
    id v106 = v99;
  }

  if (*(_BYTE *)(*(void *)(a3 + 8) + 362LL))
  {
    xpc_object_t v117 = xpc_int64_create(1LL);
    xpc_object_t v118 = v117;
    if (v106 >= v26)
    {
      uint64_t v120 = (v106 - v18) >> 4;
      unint64_t v121 = v120 + 1;
      if ((v26 - v18) >> 3 > v121) {
        unint64_t v121 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v122 = v121;
      }
      if (v122)
      {
        if (v122 >> 60) {
          sub_100008BD4();
        }
        int v123 = (char *)operator new(16 * v122);
      }

      else
      {
        int v123 = 0LL;
      }

      int v124 = &v123[16 * v120];
      xpc_object_t v26 = &v123[16 * v122];
      *(void *)int v124 = "kCBAdvDataAccessoryStatusDecrypted";
      *((void *)v124 + 1) = v118;
      uint64_t v119 = v124 + 16;
      if (v106 != v18)
      {
        do
        {
          *((_OWORD *)v124 - 1) = *((_OWORD *)v106 - 1);
          v124 -= 16;
          v106 -= 16;
        }

        while (v106 != v18);
        id v106 = v18;
      }

      id v18 = v124;
      if (v106) {
        operator delete(v106);
      }
    }

    else
    {
      *(void *)id v106 = "kCBAdvDataAccessoryStatusDecrypted";
      *((void *)v106 + 1) = v117;
      uint64_t v119 = v106 + 16;
    }
  }

  else
  {
    uint64_t v119 = v106;
  }

  if (!*(void *)(a5 + 16) || *v101 != 76)
  {
    xpc_object_t v127 = xpc_data_create(v101, v100);
    xpc_object_t v128 = v127;
    if (v119 >= v26)
    {
      uint64_t v129 = (v119 - v18) >> 4;
      unint64_t v130 = v129 + 1;
      if ((v26 - v18) >> 3 > v130) {
        unint64_t v130 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v131 = v130;
      }
      if (v131)
      {
        if (v131 >> 60) {
          sub_100008BD4();
        }
        id v132 = (char *)operator new(16 * v131);
      }

      else
      {
        id v132 = 0LL;
      }

      __int128 v141 = &v132[16 * v129];
      xpc_object_t v26 = &v132[16 * v131];
      *(void *)__int128 v141 = "kCBAdvDataManufacturerData";
      *((void *)v141 + 1) = v128;
      int v99 = v141 + 16;
      if (v119 != v18)
      {
        do
        {
          *((_OWORD *)v141 - 1) = *((_OWORD *)v119 - 1);
          v141 -= 16;
          v119 -= 16;
        }

        while (v119 != v18);
        uint64_t v119 = v18;
      }

      id v18 = v141;
      if (v119) {
        operator delete(v119);
      }
    }

    else
    {
      *(void *)uint64_t v119 = "kCBAdvDataManufacturerData";
      *((void *)v119 + 1) = v127;
      int v99 = v119 + 16;
    }

    goto LABEL_281;
  }

  id v125 = objc_opt_new(&OBJC_CLASS___NSMutableData);
  __int16 v307 = 76;
  -[NSMutableData appendBytes:length:](v125, "appendBytes:length:", &v307, 2LL);
  if (v100 < 3) {
    goto LABEL_211;
  }
  v300 = &__p.__r_.__value_.__s.__data_[1];
  unint64_t v133 = 2LL;
LABEL_224:
  unsigned int v134 = *((unsigned __int8 *)v101 + v133);
  if (v134 != 1)
  {
    size_t v137 = (v133 + 1);
    if (v100 <= v137)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_1005BF8CC(*(void *)(*(void *)(a3 + 8) + 200LL), &__p);
        sub_10068ADC8();
      }

      goto LABEL_258;
    }

    int v136 = *((_BYTE *)v101 + v137) & 0x1F;
    if (v136 == 31)
    {
      size_t v138 = (v133 + 2);
      if (v100 <= v138)
      {
        uint64_t v148 = qword_1008F75F0;
        if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_258;
        }
        sub_1005BF8CC(*(void *)(*(void *)(a3 + 8) + 200LL), &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int bytes = 138412802;
        *(void *)&bytes[4] = v303;
        *(_WORD *)&bytes[12] = 2080;
        *(void *)&bytes[14] = p_p;
        *(_WORD *)&bytes[22] = 2112;
        size_t v311 = (size_t)v302;
        uint64_t v145 = "createXpcAdvData error device:%@ address:%s agent:%@, not enough data for the extended data byte. Ignoring.";
        id v146 = (os_log_s *)v148;
        uint32_t v147 = 32;
        goto LABEL_590;
      }

      int v136 = *((unsigned __int8 *)v101 + v138) + 31;
      int v135 = 2;
    }

    else
    {
      int v135 = 1;
    }

    if (v100 < (v136 + v135 + v133))
    {
      uint64_t v143 = qword_1008F75F0;
      if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_258;
      }
      sub_1005BF8CC(*(void *)(*(void *)(a3 + 8) + 200LL), &__p);
      uint64_t v144 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v144 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int bytes = 138413826;
      *(void *)&bytes[4] = v303;
      *(_WORD *)&bytes[12] = 2080;
      *(void *)&bytes[14] = v144;
      *(_WORD *)&bytes[22] = 2112;
      size_t v311 = (size_t)v302;
      __int16 v312 = 1024;
      int v313 = v133;
      __int16 v314 = 1024;
      int v315 = v136;
      __int16 v316 = 1024;
      int v317 = v135;
      __int16 v318 = 2048;
      size_t v319 = v100;
      uint64_t v145 = "createXpcAdvData error device:%@ address:%s agent:%@, ignoring packet since byte offset of %d + payload len"
             "gth of %d + length size of %d doesnt fit in dataLength %zu";
      id v146 = (os_log_s *)v143;
      uint32_t v147 = 60;
LABEL_590:
      _os_log_error_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_ERROR, v145, bytes, v147);
      goto LABEL_258;
    }

    uint64_t v139 = *(uint64_t ***)(a5 + 8);
    if (!v139) {
      goto LABEL_239;
    }
    while (1)
    {
      unsigned int v140 = *((unsigned __int8 *)v139 + 25);
      if (v134 >= v140)
      {
        if (v140 >= v134)
        {
          -[NSMutableData appendBytes:length:](v125, "appendBytes:length:", v300);
LABEL_227:
          LODWORD(v137) = v133 + 1;
LABEL_239:
          unint64_t v133 = (v137 + v135 + v136);
          if (v100 <= v133)
          {
LABEL_211:
            int v126 = 0;
            goto LABEL_259;
          }

          goto LABEL_224;
        }

        ++v139;
      }

      uint64_t v139 = (uint64_t **)*v139;
      if (!v139) {
        goto LABEL_239;
      }
    }
  }

  if (v100 > (v133 + 16))
  {
    int v135 = 0;
    int v136 = 16;
    goto LABEL_227;
  }

  uint64_t v142 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_1005BF8CC(*(void *)(*(void *)(a3 + 8) + 200LL), &__p);
    v298 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
         ? &__p
         : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)int bytes = 138412802;
    *(void *)&bytes[4] = v303;
    *(_WORD *)&bytes[12] = 2080;
    *(void *)&bytes[14] = v298;
    *(_WORD *)&bytes[22] = 2112;
    size_t v311 = (size_t)v302;
    _os_log_error_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_ERROR,  "createXpcAdvData error device:%@ address:%s agent:%@, Invalid length",  bytes,  0x20u);
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
    sub_10068AD9C(&__p, v300);
  }
LABEL_258:
  int v126 = 1;
LABEL_259:
  if (-[NSMutableData length](v125, "length", v300) < 3)
  {
    int v99 = v119;
  }

  else
  {
    __int128 v149 = v125;
    xpc_object_t v150 = xpc_data_create(-[NSMutableData bytes](v149, "bytes"), -[NSMutableData length](v149, "length"));
    xpc_object_t v151 = v150;
    if (v119 >= v26)
    {
      uint64_t v152 = (v119 - v18) >> 4;
      unint64_t v153 = v152 + 1;
      if ((v26 - v18) >> 3 > v153) {
        unint64_t v153 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v154 = v153;
      }
      if (v154)
      {
        if (v154 >> 60) {
          sub_100008BD4();
        }
        uint64_t v155 = (char *)operator new(16 * v154);
      }

      else
      {
        uint64_t v155 = 0LL;
      }

      uint64_t v156 = &v155[16 * v152];
      xpc_object_t v26 = &v155[16 * v154];
      *(void *)uint64_t v156 = "kCBAdvDataManufacturerData";
      *((void *)v156 + 1) = v151;
      int v99 = v156 + 16;
      if (v119 != v18)
      {
        do
        {
          *((_OWORD *)v156 - 1) = *((_OWORD *)v119 - 1);
          v156 -= 16;
          v119 -= 16;
        }

        while (v119 != v18);
        uint64_t v119 = v18;
      }

      id v18 = v156;
      if (v119) {
        operator delete(v119);
      }
    }

    else
    {
      *(void *)uint64_t v119 = "kCBAdvDataManufacturerData";
      *((void *)v119 + 1) = v150;
      int v99 = v119 + 16;
    }

    int64_t v157 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      NSUInteger v297 = -[NSMutableData length](v149, "length");
      *(_DWORD *)int bytes = 138413058;
      *(void *)&bytes[4] = v149;
      *(_WORD *)&bytes[12] = 2048;
      *(void *)&bytes[14] = v297;
      *(_WORD *)&bytes[22] = 2048;
      size_t v311 = v100;
      __int16 v312 = 1024;
      int v313 = v126;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v157,  OS_LOG_TYPE_DEBUG,  "createXpcAdvData sending data:%@ length:%lu originalLength:%zu lenError:%d",  bytes,  0x26u);
    }
  }

LABEL_281:
  if (sub_10056AAD8(*(void *)(a3 + 8) + 136LL) == 7)
  {
    uint64_t v158 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v159 = sub_10056AAF0(*(void *)(a3 + 8) + 136LL);
      *(void *)int bytes = 0x704100202LL;
      *(_WORD *)&unsigned __int8 bytes[8] = 2096;
      *(void *)&bytes[10] = v159;
      _os_log_impl( (void *)&_mh_execute_header,  v158,  OS_LOG_TYPE_DEFAULT,  "Create XPC Adv Data with LE BT Address data: %.7P",  bytes,  0x12u);
    }

    uint64_t v160 = (const void *)sub_10056AAF0(*(void *)(a3 + 8) + 136LL);
    xpc_object_t v161 = xpc_data_create(v160, 7uLL);
    xpc_object_t v162 = v161;
    if (v99 >= v26)
    {
      uint64_t v164 = (v99 - v18) >> 4;
      unint64_t v165 = v164 + 1;
      if ((v26 - v18) >> 3 > v165) {
        unint64_t v165 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v166 = v165;
      }
      if (v166)
      {
        if (v166 >> 60) {
          sub_100008BD4();
        }
        int64_t v167 = (char *)operator new(16 * v166);
      }

      else
      {
        int64_t v167 = 0LL;
      }

      int64_t v168 = &v167[16 * v164];
      xpc_object_t v26 = &v167[16 * v166];
      *(void *)int64_t v168 = "kCBAdvDataLeBluetoothDeviceAddress";
      *((void *)v168 + 1) = v162;
      uint64_t v163 = v168 + 16;
      if (v99 != v18)
      {
        do
        {
          *((_OWORD *)v168 - 1) = *((_OWORD *)v99 - 1);
          v168 -= 16;
          v99 -= 16;
        }

        while (v99 != v18);
        int v99 = v18;
      }

      id v18 = v168;
      if (v99) {
        operator delete(v99);
      }
    }

    else
    {
      *(void *)int v99 = "kCBAdvDataLeBluetoothDeviceAddress";
      *((void *)v99 + 1) = v161;
      uint64_t v163 = v99 + 16;
    }
  }

  else
  {
    uint64_t v163 = v99;
  }

  if (v301 && (size_t v169 = sub_10056AAD8(*(void *)(a3 + 8) + 224LL)) != 0)
  {
    int64_t v170 = (const void *)sub_10056AAF0(*(void *)(a3 + 8) + 224LL);
    xpc_object_t v171 = xpc_data_create(v170, v169);
    xpc_object_t v172 = v171;
    if (v163 >= v26)
    {
      uint64_t v182 = (v163 - v18) >> 4;
      unint64_t v183 = v182 + 1;
      if ((v26 - v18) >> 3 > v183) {
        unint64_t v183 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v184 = v183;
      }
      if (v184)
      {
        if (v184 >> 60) {
          sub_100008BD4();
        }
        __int16 v185 = (char *)operator new(16 * v184);
      }

      else
      {
        __int16 v185 = 0LL;
      }

      v296 = &v185[16 * v182];
      xpc_object_t v26 = &v185[16 * v184];
      *(void *)v296 = "kCBAdvDataTDSData";
      *((void *)v296 + 1) = v172;
      unsigned __int8 v173 = v296 + 16;
      if (v163 != v18)
      {
        do
        {
          *((_OWORD *)v296 - 1) = *((_OWORD *)v163 - 1);
          v296 -= 16;
          v163 -= 16;
        }

        while (v163 != v18);
        uint64_t v163 = v18;
      }

      id v18 = v296;
      if (v163) {
        operator delete(v163);
      }
    }

    else
    {
      *(void *)uint64_t v163 = "kCBAdvDataTDSData";
      *((void *)v163 + 1) = v171;
      unsigned __int8 v173 = v163 + 16;
    }
  }

  else
  {
    unsigned __int8 v173 = v163;
  }

  uint64_t v174 = *(void *)(a3 + 8);
  if (*(_BYTE *)(v174 + 218))
  {
    xpc_object_t v175 = xpc_int64_create(*(unsigned __int8 *)(v174 + 218));
    xpc_object_t v176 = v175;
    if (v173 >= v26)
    {
      uint64_t v178 = (v173 - v18) >> 4;
      unint64_t v179 = v178 + 1;
      if ((v26 - v18) >> 3 > v179) {
        unint64_t v179 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v180 = v179;
      }
      if (v180)
      {
        if (v180 >> 60) {
          sub_100008BD4();
        }
        char v181 = (char *)operator new(16 * v180);
      }

      else
      {
        char v181 = 0LL;
      }

      char v186 = &v181[16 * v178];
      xpc_object_t v26 = &v181[16 * v180];
      *(void *)char v186 = "kCBAdvDataProximityLevel";
      *((void *)v186 + 1) = v176;
      v177 = v186 + 16;
      if (v173 != v18)
      {
        do
        {
          *((_OWORD *)v186 - 1) = *((_OWORD *)v173 - 1);
          v186 -= 16;
          v173 -= 16;
        }

        while (v173 != v18);
        unsigned __int8 v173 = v18;
      }

      id v18 = v186;
      if (v173) {
        operator delete(v173);
      }
    }

    else
    {
      *(void *)unsigned __int8 v173 = "kCBAdvDataProximityLevel";
      *((void *)v173 + 1) = v175;
      v177 = v173 + 16;
    }
  }

  else
  {
    v177 = v173;
  }

  if (a7)
  {
    xpc_object_t v187 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 219LL));
    xpc_object_t v188 = v187;
    if (v177 >= v26)
    {
      uint64_t v190 = (v177 - v18) >> 4;
      unint64_t v191 = v190 + 1;
      if ((v26 - v18) >> 3 > v191) {
        unint64_t v191 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v192 = v191;
      }
      if (v192)
      {
        if (v192 >> 60) {
          sub_100008BD4();
        }
        int v193 = (char *)operator new(16 * v192);
      }

      else
      {
        int v193 = 0LL;
      }

      __int16 v194 = &v193[16 * v190];
      xpc_object_t v26 = &v193[16 * v192];
      *(void *)__int16 v194 = "kCBAdvDataChannel";
      *((void *)v194 + 1) = v188;
      __int128 v189 = v194 + 16;
      if (v177 != v18)
      {
        do
        {
          *((_OWORD *)v194 - 1) = *((_OWORD *)v177 - 1);
          v194 -= 16;
          v177 -= 16;
        }

        while (v177 != v18);
        v177 = v18;
      }

      id v18 = v194;
      if (v177) {
        operator delete(v177);
      }
    }

    else
    {
      *(void *)v177 = "kCBAdvDataChannel";
      *((void *)v177 + 1) = v187;
      __int128 v189 = v177 + 16;
    }

    xpc_object_t v195 = xpc_BOOL_create(*(_BYTE *)(*(void *)(a3 + 8) + 220LL));
    xpc_object_t v196 = v195;
    if (v189 >= v26)
    {
      uint64_t v198 = (v189 - v18) >> 4;
      unint64_t v199 = v198 + 1;
      if ((v26 - v18) >> 3 > v199) {
        unint64_t v199 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v200 = v199;
      }
      if (v200)
      {
        if (v200 >> 60) {
          sub_100008BD4();
        }
        id v201 = (char *)operator new(16 * v200);
      }

      else
      {
        id v201 = 0LL;
      }

      uint64_t v202 = &v201[16 * v198];
      xpc_object_t v26 = &v201[16 * v200];
      *(void *)uint64_t v202 = "kCBAdvDataWlanRSSI";
      *((void *)v202 + 1) = v196;
      __int16 v197 = v202 + 16;
      if (v189 == v18) {
        goto LABEL_368;
      }
      do
      {
        *((_OWORD *)v202 - 1) = *((_OWORD *)v189 - 1);
        v202 -= 16;
        v189 -= 16;
      }

      while (v189 != v18);
      if (v18) {
LABEL_368:
      }
        operator delete(v18);
      id v18 = v202;
    }

    else
    {
      *(void *)__int128 v189 = "kCBAdvDataWlanRSSI";
      *((void *)v189 + 1) = v195;
      __int16 v197 = v189 + 16;
    }

    xpc_object_t v203 = xpc_BOOL_create(*(_BYTE *)(*(void *)(a3 + 8) + 217LL));
    xpc_object_t v204 = v203;
    if (v197 >= v26)
    {
      uint64_t v205 = (v197 - v18) >> 4;
      unint64_t v206 = v205 + 1;
      if ((v26 - v18) >> 3 > v206) {
        unint64_t v206 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v207 = v206;
      }
      if (v207)
      {
        if (v207 >> 60) {
          sub_100008BD4();
        }
        v208 = (char *)operator new(16 * v207);
      }

      else
      {
        v208 = 0LL;
      }

      v209 = &v208[16 * v205];
      xpc_object_t v26 = &v208[16 * v207];
      *(void *)v209 = "kCBAdvDataWSaturated";
      *((void *)v209 + 1) = v204;
      v177 = v209 + 16;
      if (v197 == v18) {
        goto LABEL_385;
      }
      do
      {
        *((_OWORD *)v209 - 1) = *((_OWORD *)v197 - 1);
        v209 -= 16;
        v197 -= 16;
      }

      while (v197 != v18);
      if (v18) {
LABEL_385:
      }
        operator delete(v18);
      id v18 = v209;
    }

    else
    {
      *(void *)__int16 v197 = "kCBAdvDataWSaturated";
      *((void *)v197 + 1) = v203;
      v177 = v197 + 16;
    }
  }

  xpc_object_t v210 = xpc_double_create(*(double *)(*(void *)(a3 + 8) + 240LL));
  xpc_object_t v212 = v210;
  if (v177 >= v26)
  {
    uint64_t v214 = (v177 - v18) >> 4;
    unint64_t v215 = v214 + 1;
    if ((v26 - v18) >> 3 > v215) {
      unint64_t v215 = (v26 - v18) >> 3;
    }
    else {
      unint64_t v216 = v215;
    }
    if (v216)
    {
      if (v216 >> 60) {
        sub_100008BD4();
      }
      v217 = (char *)operator new(16 * v216);
    }

    else
    {
      v217 = 0LL;
    }

    char v218 = &v217[16 * v214];
    xpc_object_t v26 = &v217[16 * v216];
    *(void *)char v218 = "kCBAdvDataTimestamp";
    *((void *)v218 + 1) = v212;
    v213 = v218 + 16;
    if (v177 != v18)
    {
      do
      {
        __int128 v211 = *((_OWORD *)v177 - 1);
        *((_OWORD *)v218 - 1) = v211;
        v218 -= 16;
        v177 -= 16;
      }

      while (v177 != v18);
      v177 = v18;
    }

    id v18 = v218;
    if (v177) {
      operator delete(v177);
    }
  }

  else
  {
    *(void *)v177 = "kCBAdvDataTimestamp";
    *((void *)v177 + 1) = v210;
    v213 = v177 + 16;
  }

  LOBYTE(v211) = *(_BYTE *)(*(void *)(a3 + 8) + 341LL);
  xpc_object_t v219 = xpc_double_create((double)(unint64_t)v211);
  xpc_object_t v221 = v219;
  if (v213 >= v26)
  {
    uint64_t v223 = (v213 - v18) >> 4;
    unint64_t v224 = v223 + 1;
    if ((v26 - v18) >> 3 > v224) {
      unint64_t v224 = (v26 - v18) >> 3;
    }
    else {
      unint64_t v225 = v224;
    }
    if (v225)
    {
      if (v225 >> 60) {
        sub_100008BD4();
      }
      uint64_t v226 = (char *)operator new(16 * v225);
    }

    else
    {
      uint64_t v226 = 0LL;
    }

    v227 = &v226[16 * v223];
    xpc_object_t v26 = &v226[16 * v225];
    *(void *)v227 = "kCBAdvDataRxPrimaryPHY";
    *((void *)v227 + 1) = v221;
    v222 = v227 + 16;
    if (v213 == v18) {
      goto LABEL_419;
    }
    do
    {
      __int128 v220 = *((_OWORD *)v213 - 1);
      *((_OWORD *)v227 - 1) = v220;
      v227 -= 16;
      v213 -= 16;
    }

    while (v213 != v18);
    if (v18) {
LABEL_419:
    }
      operator delete(v18);
    id v18 = v227;
  }

  else
  {
    *(void *)v213 = "kCBAdvDataRxPrimaryPHY";
    *((void *)v213 + 1) = v219;
    v222 = v213 + 16;
  }

  LOBYTE(v220) = *(_BYTE *)(*(void *)(a3 + 8) + 342LL);
  xpc_object_t v228 = xpc_double_create((double)(unint64_t)v220);
  xpc_object_t v229 = v228;
  if (v222 >= v26)
  {
    uint64_t v231 = (v222 - v18) >> 4;
    unint64_t v232 = v231 + 1;
    if ((v26 - v18) >> 3 > v232) {
      unint64_t v232 = (v26 - v18) >> 3;
    }
    else {
      unint64_t v233 = v232;
    }
    if (v233)
    {
      if (v233 >> 60) {
        sub_100008BD4();
      }
      __int128 v234 = (char *)operator new(16 * v233);
    }

    else
    {
      __int128 v234 = 0LL;
    }

    __int128 v235 = &v234[16 * v231];
    xpc_object_t v26 = &v234[16 * v233];
    *(void *)__int128 v235 = "kCBAdvDataRxSecondaryPHY";
    *((void *)v235 + 1) = v229;
    __int128 v230 = v235 + 16;
    if (v222 == v18) {
      goto LABEL_436;
    }
    do
    {
      *((_OWORD *)v235 - 1) = *((_OWORD *)v222 - 1);
      v235 -= 16;
      v222 -= 16;
    }

    while (v222 != v18);
    if (v18) {
LABEL_436:
    }
      operator delete(v18);
    id v18 = v235;
  }

  else
  {
    *(void *)v222 = "kCBAdvDataRxSecondaryPHY";
    *((void *)v222 + 1) = v228;
    __int128 v230 = v222 + 16;
  }

  if (a10)
  {
    xpc_object_t v236 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 365LL));
    xpc_object_t v237 = v236;
    if (v230 >= v26)
    {
      uint64_t v239 = (v230 - v18) >> 4;
      unint64_t v240 = v239 + 1;
      if ((v26 - v18) >> 3 > v240) {
        unint64_t v240 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v241 = v240;
      }
      if (v241)
      {
        if (v241 >> 60) {
          sub_100008BD4();
        }
        __int128 v242 = (char *)operator new(16 * v241);
      }

      else
      {
        __int128 v242 = 0LL;
      }

      __int128 v243 = &v242[16 * v239];
      xpc_object_t v26 = &v242[16 * v241];
      *(void *)__int128 v243 = "kCBAdvDataScanSourceCore";
      *((void *)v243 + 1) = v237;
      v238 = v243 + 16;
      if (v230 == v18) {
        goto LABEL_454;
      }
      do
      {
        *((_OWORD *)v243 - 1) = *((_OWORD *)v230 - 1);
        v243 -= 16;
        v230 -= 16;
      }

      while (v230 != v18);
      if (v18) {
LABEL_454:
      }
        operator delete(v18);
      id v18 = v243;
    }

    else
    {
      *(void *)__int128 v230 = "kCBAdvDataScanSourceCore";
      *((void *)v230 + 1) = v236;
      v238 = v230 + 16;
    }

    xpc_object_t v244 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 366LL));
    xpc_object_t v245 = v244;
    if (v238 >= v26)
    {
      uint64_t v247 = (v238 - v18) >> 4;
      unint64_t v248 = v247 + 1;
      if ((v26 - v18) >> 3 > v248) {
        unint64_t v248 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v249 = v248;
      }
      if (v249)
      {
        if (v249 >> 60) {
          sub_100008BD4();
        }
        __int128 v250 = (char *)operator new(16 * v249);
      }

      else
      {
        __int128 v250 = 0LL;
      }

      __int128 v251 = &v250[16 * v247];
      xpc_object_t v26 = &v250[16 * v249];
      *(void *)__int128 v251 = "kCBAdvDataIsELNAOn";
      *((void *)v251 + 1) = v245;
      __int128 v246 = v251 + 16;
      if (v238 == v18) {
        goto LABEL_471;
      }
      do
      {
        *((_OWORD *)v251 - 1) = *((_OWORD *)v238 - 1);
        v251 -= 16;
        v238 -= 16;
      }

      while (v238 != v18);
      if (v18) {
LABEL_471:
      }
        operator delete(v18);
      id v18 = v251;
    }

    else
    {
      *(void *)v238 = "kCBAdvDataIsELNAOn";
      *((void *)v238 + 1) = v244;
      __int128 v246 = v238 + 16;
    }

    xpc_object_t v252 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 367LL));
    xpc_object_t v253 = v252;
    if (v246 >= v26)
    {
      uint64_t v255 = (v246 - v18) >> 4;
      unint64_t v256 = v255 + 1;
      if ((v26 - v18) >> 3 > v256) {
        unint64_t v256 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v257 = v256;
      }
      if (v257)
      {
        if (v257 >> 60) {
          sub_100008BD4();
        }
        v258 = (char *)operator new(16 * v257);
      }

      else
      {
        v258 = 0LL;
      }

      v259 = &v258[16 * v255];
      xpc_object_t v26 = &v258[16 * v257];
      *(void *)v259 = "kCBAdvDataIsPassup";
      *((void *)v259 + 1) = v253;
      __int128 v254 = v259 + 16;
      if (v246 == v18) {
        goto LABEL_488;
      }
      do
      {
        *((_OWORD *)v259 - 1) = *((_OWORD *)v246 - 1);
        v259 -= 16;
        v246 -= 16;
      }

      while (v246 != v18);
      if (v18) {
LABEL_488:
      }
        operator delete(v18);
      id v18 = v259;
    }

    else
    {
      *(void *)__int128 v246 = "kCBAdvDataIsPassup";
      *((void *)v246 + 1) = v252;
      __int128 v254 = v246 + 16;
    }

    xpc_object_t v260 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 368LL));
    xpc_object_t v261 = v260;
    if (v254 >= v26)
    {
      uint64_t v263 = (v254 - v18) >> 4;
      unint64_t v264 = v263 + 1;
      if ((v26 - v18) >> 3 > v264) {
        unint64_t v264 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v265 = v264;
      }
      if (v265)
      {
        if (v265 >> 60) {
          sub_100008BD4();
        }
        v266 = (char *)operator new(16 * v265);
      }

      else
      {
        v266 = 0LL;
      }

      v267 = &v266[16 * v263];
      xpc_object_t v26 = &v266[16 * v265];
      *(void *)v267 = "kCBAdvDataIsFromSCCompensation";
      *((void *)v267 + 1) = v261;
      v262 = v267 + 16;
      if (v254 == v18) {
        goto LABEL_505;
      }
      do
      {
        *((_OWORD *)v267 - 1) = *((_OWORD *)v254 - 1);
        v267 -= 16;
        v254 -= 16;
      }

      while (v254 != v18);
      if (v18) {
LABEL_505:
      }
        operator delete(v18);
      id v18 = v267;
    }

    else
    {
      *(void *)__int128 v254 = "kCBAdvDataIsFromSCCompensation";
      *((void *)v254 + 1) = v260;
      v262 = v254 + 16;
    }

    xpc_object_t v268 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 369LL));
    xpc_object_t v269 = v268;
    if (v262 >= v26)
    {
      uint64_t v270 = (v262 - v18) >> 4;
      unint64_t v271 = v270 + 1;
      if ((v26 - v18) >> 3 > v271) {
        unint64_t v271 = (v26 - v18) >> 3;
      }
      else {
        unint64_t v272 = v271;
      }
      if (v272)
      {
        if (v272 >> 60) {
          sub_100008BD4();
        }
        v273 = (char *)operator new(16 * v272);
      }

      else
      {
        v273 = 0LL;
      }

      v274 = &v273[16 * v270];
      xpc_object_t v26 = &v273[16 * v272];
      *(void *)v274 = "kCBAdvDataIsCoexDenied";
      *((void *)v274 + 1) = v269;
      __int128 v230 = v274 + 16;
      if (v262 == v18) {
        goto LABEL_522;
      }
      do
      {
        *((_OWORD *)v274 - 1) = *((_OWORD *)v262 - 1);
        v274 -= 16;
        v262 -= 16;
      }

      while (v262 != v18);
      if (v18) {
LABEL_522:
      }
        operator delete(v18);
      id v18 = v274;
    }

    else
    {
      *(void *)v262 = "kCBAdvDataIsCoexDenied";
      *((void *)v262 + 1) = v268;
      __int128 v230 = v262 + 16;
    }
  }

  if (*(_BYTE *)(*(void *)(a3 + 8) + 14LL)) {
    BOOL v275 = a11 == 0;
  }
  else {
    BOOL v275 = 1;
  }
  if (v275)
  {
    v276 = v230;
    goto LABEL_549;
  }

  xpc_object_t v277 = xpc_int64_create(1LL);
  xpc_object_t v278 = v277;
  if (v230 < v26)
  {
    *(void *)__int128 v230 = "kCBAdvDataHostWakeEvent";
    *((void *)v230 + 1) = v277;
    v276 = v230 + 16;
    goto LABEL_549;
  }

  uint64_t v279 = (v230 - v18) >> 4;
  unint64_t v280 = v279 + 1;
  if ((v26 - v18) >> 3 > v280) {
    unint64_t v280 = (v26 - v18) >> 3;
  }
  else {
    unint64_t v281 = v280;
  }
  if (v281)
  {
    if (v281 >> 60) {
      sub_100008BD4();
    }
    v282 = (char *)operator new(16 * v281);
  }

  else
  {
    v282 = 0LL;
  }

  v283 = &v282[16 * v279];
  xpc_object_t v26 = &v282[16 * v281];
  *(void *)v283 = "kCBAdvDataHostWakeEvent";
  *((void *)v283 + 1) = v278;
  v276 = v283 + 16;
  if (v230 == v18)
  {
    id v18 = v230;
  }

  else
  {
    do
    {
      *((_OWORD *)v283 - 1) = *((_OWORD *)v230 - 1);
      v283 -= 16;
      v230 -= 16;
    }

    while (v230 != v18);
    if (!v18) {
      goto LABEL_548;
    }
  }

  operator delete(v18);
LABEL_548:
  id v18 = v283;
LABEL_549:
  if (!sub_10056AAD8(*(void *)(a3 + 8) + 448LL))
  {
    v288 = v276;
    goto LABEL_569;
  }

  v284 = (const void *)sub_10056AAF0(*(void *)(a3 + 8) + 448LL);
  size_t v285 = sub_10056AAD8(*(void *)(a3 + 8) + 448LL);
  xpc_object_t v286 = xpc_data_create(v284, v285);
  xpc_object_t v287 = v286;
  if (v276 < v26)
  {
    *(void *)v276 = "kCBCoordinatedSetRSIAdv";
    *((void *)v276 + 1) = v286;
    v288 = v276 + 16;
    goto LABEL_569;
  }

  uint64_t v289 = (v276 - v18) >> 4;
  unint64_t v290 = v289 + 1;
  if ((v26 - v18) >> 3 > v290) {
    unint64_t v290 = (v26 - v18) >> 3;
  }
  if (v290)
  {
    if (v290 >> 60) {
      sub_100008BD4();
    }
    v291 = (char *)operator new(16 * v290);
  }

  else
  {
    v291 = 0LL;
  }

  v292 = &v291[16 * v289];
  *(void *)v292 = "kCBCoordinatedSetRSIAdv";
  *((void *)v292 + 1) = v287;
  v288 = v292 + 16;
  if (v276 == v18)
  {
    id v18 = v276;
  }

  else
  {
    do
    {
      *((_OWORD *)v292 - 1) = *((_OWORD *)v276 - 1);
      v292 -= 16;
      v276 -= 16;
    }

    while (v276 != v18);
    if (!v18) {
      goto LABEL_568;
    }
  }

  operator delete(v18);
LABEL_568:
  id v18 = v292;
LABEL_569:
  xpc_object_t v293 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (v18 != v288)
  {
    v294 = (xpc_object_t *)v18;
    do
    {
      xpc_dictionary_set_value(v293, (const char *)*v294, v294[1]);
      xpc_release(v294[1]);
      v294 += 2;
    }

    while (v294 != (xpc_object_t *)v288);
  }

  sub_10023BF24((uint64_t)&v308, v309[0]);
  if (v18) {
    operator delete(v18);
  }

  return v293;
}

void sub_1004F463C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, void *a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  sub_10023BF24((uint64_t)&a20, a21);
  if (v29) {
    operator delete(v29);
  }

  _Unwind_Resume(a1);
}

id sub_1004F479C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_10043E46C(a2);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v5));

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"kCBMsgArgs"]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v7));

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"kCBMsgArgTimeXpcTimestampsTracking"]);
    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"kCBMsgArgTimeXpcTimestampsTracking"]);
      xpc_object_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v10));
    }

    else
    {
      xpc_object_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    }

    unsigned int v12 = -[NSNumber initWithLongLong:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithLongLong:", a3);
    [v11 setObject:v12 forKeyedSubscript:@"kCBMsgArgTimeXpcLeAttConnHandleStartAdvMsg"];

    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"kCBAdvDataAppleMfgData"]);
    [v11 setObject:v13 forKeyedSubscript:@"kCBAdvDataAppleMfgData"];
  }

  else
  {
    xpc_object_t v11 = 0LL;
  }

  return v11;
}

void sub_1004F490C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_1004F4978(uint64_t a1, int a2)
{
  return off_10089C578[a2];
}

void sub_1004F4994(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1004F4A1C(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004F4A1C(uint64_t a1, char *__src, char *a3)
{
  int v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    BOOL v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0LL;
    }
    xpc_object_t v20 = &v19[8 * v16];
    std::stringbuf::string_type __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    xpc_object_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_100008BA0(v8, v22);
        xpc_object_t v20 = &v23[8 * (v22 >> 2)];
        std::stringbuf::string_type __p = v23;
        uint64_t v27 = v20;
        xpc_object_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }

    *(void *)xpc_object_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    id v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    xpc_object_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1004F4C20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004F4C58(uint64_t a1, void *a2, __int128 **a3, char a4, int a5)
{
  uint64_t v9 = sub_10032FB34(a1, 181, a2);
  *(void *)uint64_t v9 = off_100891A18;
  *(void *)(v9 + 32) = 0LL;
  *(void *)(v9 + sub_100242E28(v1 + 40) = 0LL;
  *(void *)(v9 + 24) = 0LL;
  sub_100050EE8((char *)(v9 + 24), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 2));
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = a4;
  *(_DWORD *)(a1 + 52) = a5;
  return a1;
}

void sub_1004F4CD4(_Unwind_Exception *a1)
{
}

uint64_t sub_1004F4CE8(uint64_t a1, void *a2, uint64_t a3, __int128 **a4, char a5, int a6)
{
  uint64_t v11 = sub_10032FB34(a1, 189, a2);
  *(void *)(v11 + 24) = a3;
  *(void *)uint64_t v11 = off_100891A40;
  *(void *)(v11 + sub_100242E28(v1 + 40) = 0LL;
  *(void *)(v11 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v11 + 32) = 0LL;
  sub_100050EE8((char *)(v11 + 32), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a4[1] - (char *)*a4) >> 2));
  *(_BYTE *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = a6;
  return a1;
}

void sub_1004F4D74(_Unwind_Exception *a1)
{
}

uint64_t sub_1004F4D88(uint64_t a1, void *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v7 = sub_10032FB34(a1, 190, a2);
  *(void *)(v7 + 24) = a3;
  *(void *)uint64_t v7 = off_100891A68;
  *(void *)(v7 + sub_100242E28(v1 + 40) = 0LL;
  *(void *)(v7 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v7 + 32) = 0LL;
  sub_100050EE8((char *)(v7 + 32), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a4[1] - (char *)*a4) >> 2));
  return a1;
}

void sub_1004F4DFC(_Unwind_Exception *a1)
{
}

void sub_1004F4E14(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10032FB70(a1);
  operator delete(v1);
}

void sub_1004F4E2C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10032FB70(a1);
  operator delete(v1);
}

uint64_t sub_1004F4E40( uint64_t a1, void *a2, void *a3, __int16 a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  id v21 = a2;
  id v22 = a3;
  id v23 = v21;
  *(void *)a1 = v23;
  id v24 = v22;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v24;
  *(_WORD *)(a1 + 16) = a4;
  sub_10063432C((_BYTE *)(a1 + 20));
  uint64_t v25 = *(void *)(a5 + 8);
  *(void *)(a1 + sub_100242E28(v1 + 40) = &off_10087FAA8;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v25;
  if (v25) {
    sub_1002CD1E0(v25);
  }
  uint64_t v26 = *(void *)(a6 + 8);
  *(void *)(a1 + 56) = &off_10087FAA8;
  *(void *)(a1 + 64) = v26;
  if (v26) {
    sub_1002CD1E0(v26);
  }
  *(_BYTE *)(a1 + 72) = a7;
  *(_BYTE *)(a1 + 73) = a8;
  *(_BYTE *)(a1 + 74) = a9;
  *(_BYTE *)(a1 + 75) = a10;
  *(_BYTE *)(a1 + 76) = a11;
  *(_BYTE *)(a1 + 77) = a12;
  *(_BYTE *)(a1 + 7_Block_object_dispose(va, 8) = a13;
  *(_BYTE *)(a1 + 79) = a14;
  *(void *)(a1 + 96) = 0LL;
  *(_DWORD *)(a1 + 104) = 2;

  return a1;
}

void sub_1004F4F40(_Unwind_Exception *a1)
{
  *(void *)(v1 + sub_100242E28(v1 + 40) = v4;
  uint64_t v6 = *(unsigned int **)(v1 + 48);
  if (v6) {
    sub_1002CD254(v6);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1004F4F7C( uint64_t a1, void *a2, void *a3, void *a4, int a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, char a15)
{
  id v22 = a2;
  id v23 = a3;
  id v24 = a4;
  id v25 = v22;
  *(void *)a1 = v25;
  id v26 = v23;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v26;
  *(_WORD *)(a1 + 16) = 0;
  sub_10063432C((_BYTE *)(a1 + 20));
  *(void *)(a1 + sub_100242E28(v1 + 40) = &off_10087FAA8;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = &off_10087FAA8;
  *(void *)(a1 + 64) = 0LL;
  *(_BYTE *)(a1 + 72) = a7;
  *(_BYTE *)(a1 + 73) = a8;
  *(_BYTE *)(a1 + 74) = a9;
  *(_BYTE *)(a1 + 75) = a10;
  *(_BYTE *)(a1 + 76) = a11;
  *(_BYTE *)(a1 + 77) = a13;
  *(_BYTE *)(a1 + 7_Block_object_dispose(va, 8) = a14;
  *(_BYTE *)(a1 + 79) = a15;
  *(_DWORD *)(a1 + 80) = a5;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = a6;
  *(void *)(a1 + 96) = v24;
  *(_DWORD *)(a1 + 104) = 3;

  return a1;
}

void sub_1004F5070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004F5098@<X0>(__int16 a1@<W1>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v10 = 0LL;
  __int128 v8 = 0u;
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v7 = 0u;
  memset(v5, 0, sizeof(v5));
  sub_10020E564((uint64_t)v5);
  if ((a1 & 1) != 0) {
    sub_1001FD17C(v5, (uint64_t)"NSCaseInsensitiveSearch,", 24LL);
  }
  if ((a1 & 2) != 0) {
    sub_1001FD17C(v5, (uint64_t)"NSLiteralSearch,", 16LL);
  }
  if ((a1 & 4) != 0) {
    sub_1001FD17C(v5, (uint64_t)"NSBackwardsSearch,", 18LL);
  }
  if ((a1 & 8) != 0) {
    sub_1001FD17C(v5, (uint64_t)"NSAnchoredSearch,", 17LL);
  }
  if ((a1 & 0x40) != 0) {
    sub_1001FD17C(v5, (uint64_t)"NSNumericSearch,", 16LL);
  }
  if ((a1 & 0x80) != 0) {
    sub_1001FD17C(v5, (uint64_t)"NSDiacriticInsensitiveSearch,", 29LL);
  }
  if ((a1 & 0x100) != 0) {
    sub_1001FD17C(v5, (uint64_t)"NSWidthInsensitiveSearch,", 25LL);
  }
  if ((a1 & 0x400) != 0) {
    sub_1001FD17C(v5, (uint64_t)"NSRegularExpressionSearch,", 26LL);
  }
  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v5 + 8));
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v5 + 8);
  return std::ios::~ios(v9);
}

void sub_1004F5228( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004F523C(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_1004F526C(_Unwind_Exception *a1)
{
}

void sub_1004F5280(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_1004F52B0(_Unwind_Exception *a1)
{
}

void sub_1004F52C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1004F52C4(a1, *a2);
    sub_1004F52C4(a1, a2[1]);
    sub_10023BF24((uint64_t)(a2 + 6), (void *)a2[7]);
    operator delete(a2);
  }

void sub_1004F5310(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003AA490((uint64_t)v1);
  off_1008D96F8 = v1;
}

void sub_1004F5340(_Unwind_Exception *a1)
{
}

void sub_1004F5354(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_100551DD0();
  qword_1008D5F58 = (uint64_t)v1;
}

void sub_1004F5384(_Unwind_Exception *a1)
{
}

void sub_1004F5398(id a1)
{
  uint64_t v1 = operator new(0x1A0uLL);
  sub_1002769A4();
  off_1008D67C0 = v1;
}

void sub_1004F53C8(_Unwind_Exception *a1)
{
}

void sub_1004F53DC(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1004F540C(_Unwind_Exception *a1)
{
}

void sub_1004F5420(id a1)
{
  uint64_t v1 = operator new(0x70uLL);
  sub_1003639FC((uint64_t)v1);
  qword_1008D9048 = (uint64_t)v1;
}

void sub_1004F5450(_Unwind_Exception *a1)
{
}

void sub_1004F5464(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10040749C((uint64_t)v1);
  off_1008D5EF8 = v1;
}

void sub_1004F5494(_Unwind_Exception *a1)
{
}

void sub_1004F54A8(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1004F54D8(_Unwind_Exception *a1)
{
}

void sub_1004F54EC(id a1)
{
  uint64_t v1 = operator new(0x42C0uLL);
  sub_10056DFB4();
  off_1008D6280 = v1;
}

void sub_1004F551C(_Unwind_Exception *a1)
{
}

void sub_1004F5530(id a1)
{
  uint64_t v1 = operator new(0xF0uLL);
  sub_1001F78E8((uint64_t)v1);
  qword_1008D6790 = (uint64_t)v1;
}

void sub_1004F5560(_Unwind_Exception *a1)
{
}

void sub_1004F5574(id a1)
{
  uint64_t v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_1004F55A4(_Unwind_Exception *a1)
{
}

void sub_1004F55B8(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10064B7C8();
  qword_1008D92A0 = (uint64_t)v1;
}

void sub_1004F55E8(_Unwind_Exception *a1)
{
}

void sub_1004F55FC(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100380B10();
  qword_1008D9260 = (uint64_t)v1;
}

void sub_1004F562C(_Unwind_Exception *a1)
{
}

void sub_1004F5640(id a1)
{
  uint64_t v1 = operator new(0x50uLL);
  sub_100411DB0((uint64_t)v1);
  qword_1008D9270 = (uint64_t)v1;
}

void sub_1004F5670(_Unwind_Exception *a1)
{
}

void sub_1004F5684(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10_Block_object_dispose(va, 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2_Block_object_dispose(va, 8) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_1004F578C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1004F57A0(uint64_t **a1, uint64_t a2)
{
  int v3 = sub_1001FDBCC(a1, (uint64_t *)a2);
  sub_10023BF24(a2 + 48, *(void **)(a2 + 56));
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_1004F57DC( uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0LL;
  uint64_t v6 = (uint64_t **)sub_1001FD824((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1004F587C((uint64_t)a1, a4, v8);
    sub_100029630(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }

  return result;
}

void sub_1004F587C( uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = a3 + 1;
  __int128 v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  void *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((void *)v7 + 7) = 0LL;
  *((void *)v7 + _Block_object_dispose(va, 8) = 0LL;
  *((void *)v7 + 6) = v7 + 56;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1004F58F4(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_1004F5910(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1004F5910(uint64_t a1, void **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_10023BF24((uint64_t)(a2 + 6), a2[7]);
  }

  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

_OWORD *sub_1004F5958(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v9 = 0LL;
  uint64_t v5 = (void **)sub_10023E6A4((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    __int128 v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0LL;
    *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    sub_100029630(a1, v9, v7, (uint64_t *)v6);
  }

  return v6;
}

unsigned __int8 *sub_1004F59EC(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3 = a1;
  if (a1 != a2)
  {
    while (!sub_1001BEC7C(v3 + 28, a3))
    {
      uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          __int128 v7 = v6;
          uint64_t v6 = *(unsigned __int8 **)v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          __int128 v7 = (unsigned __int8 *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          int v3 = v7;
        }

        while (!v8);
      }

      int v3 = v7;
      if (v7 == a2) {
        return a2;
      }
    }
  }

  return v3;
}

  ;
}

  ;
}

void sub_1004F5A90(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

  ;
}

void sub_1004F5AB8(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(float *)a3 = a1;
  *(void *)(a3 + 4) = a4;
}

void sub_1004F5AD0()
{
  BOOL v0 = objc_autoreleasePoolPush();
  sub_100243040(&stru_1008F7520);
  __cxa_atexit((void (*)(void *))sub_1002430A8, &stru_1008F7520, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1004F5B20(uint64_t a1, uint64_t a2, void *a3, __int16 a4, char a5, int a6)
{
  id v11 = a3;
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
  *(_WORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 1_Block_object_dispose(va, 8) = a5;
  *(_DWORD *)(a1 + 20) = a6;
  *(void *)(a1 + 24) = 0x300000000LL;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + sub_100242E28(v1 + 40) = 0LL;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 120) = 0LL;
  *(_WORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = 0;
  return a1;
}

uint64_t sub_1004F5BA8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = off_10089DA10[*(unsigned int *)(a1 + 32)];
    uint64_t v6 = a2;
    __int128 v7 = off_10089DA10[a2];
    BOOL v8 = off_10089DA58[*(unsigned int *)(a1 + 48)];
    uint64_t v9 = *(void *)(a1 + 8);
    int v11 = 136446978;
    uint64_t v12 = v5;
    __int16 v13 = 2082;
    unint64_t v14 = v7;
    __int16 v15 = 2082;
    uint64_t v16 = v8;
    __int16 v17 = 2114;
    uint64_t v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Protocol state change (P: %{public}s => %{public}s / L: %{public}s) for device %{public}@",  (uint8_t *)&v11,  0x2Au);
  }

  else
  {
    uint64_t v6 = a2;
  }

  *(_DWORD *)(a1 + 32) = a2;
  return qword_1006C3AB8[v6];
}

uint64_t sub_1004F5CB8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = off_10089DA10[*(unsigned int *)(a1 + 32)];
    uint64_t v6 = off_10089DA58[*(unsigned int *)(a1 + 48)];
    uint64_t v7 = a2;
    BOOL v8 = off_10089DA58[a2];
    uint64_t v9 = *(void *)(a1 + 8);
    int v11 = 136446978;
    uint64_t v12 = v5;
    __int16 v13 = 2082;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    uint64_t v16 = v8;
    __int16 v17 = 2114;
    uint64_t v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Link state change (P: %{public}s / L: %{public}s => %{public}s) for device %{public}@",  (uint8_t *)&v11,  0x2Au);
  }

  else
  {
    uint64_t v7 = a2;
  }

  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = a2;
  return qword_1006C3B00[v7];
}

void sub_1004F5DC8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = off_10089DA10[*(unsigned int *)(a1 + 32)];
    uint64_t v4 = off_10089DA58[*(unsigned int *)(a1 + 48)];
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 136446722;
    uint64_t v7 = v3;
    __int16 v8 = 2082;
    uint64_t v9 = v4;
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: State is (P: %{public}s / L: %{public}s) for device %{public}@",  (uint8_t *)&v6,  0x20u);
  }

__n128 sub_1004F5EA4(uint64_t a1, uint64_t a2, int a3, _OWORD *a4, _OWORD *a5, int a6, __n128 *a7, __n128 *a8)
{
  *(_WORD *)(a1 + _Block_object_dispose(va, 8) = 1;
  *(void *)a1 = &off_10089DA88;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a6;
  *(_BYTE *)(a1 + 92) = a3;
  if (!a3)
  {
    *(_OWORD *)(a1 + 44) = *a4;
    *(_OWORD *)(a1 + 2_Block_object_dispose(va, 8) = *a5;
    __n128 result = *a7;
    *(__n128 *)(a1 + 60) = *a7;
    if (a8)
    {
      __n128 result = *a8;
      *(__n128 *)(a1 + 76) = *a8;
    }
  }

  return result;
}

void sub_1004F5EF4(uint64_t a1)
{
  if (qword_1008D60C0 != -1) {
    dispatch_once(&qword_1008D60C0, &stru_10089DAB0);
  }
  sub_1003FC56C( (uint64_t)off_1008D60B8,  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 92),  a1 + 44,  (_OWORD *)(a1 + 28),  *(unsigned int *)(a1 + 24),  (_OWORD *)(a1 + 60));
}

void sub_1004F5F64(id a1)
{
  uint64_t v1 = operator new(0xF8uLL);
  sub_1003EC784((uint64_t)v1);
  off_1008D60B8 = v1;
}

void sub_1004F5F94(_Unwind_Exception *a1)
{
}

void *sub_1004F5FA8(void *result)
{
  *__n128 result = 0LL;
  result[1] = 0LL;
  return result;
}

uint64_t *sub_1004F5FB0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return a1;
}

BOOL sub_1004F5FF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a1;
    int v8 = 136315650;
    uint64_t v9 = "isHciTransportCommand";
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s: fHciTransportCommand %llx, handle %llx",  (uint8_t *)&v8,  0x20u);
  }

  return *a1 && *a1 == a2;
}

BOOL sub_1004F60D4(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  *a3 = 0LL;
  if (*a2 == 3)
  {
    if (a1[1])
    {
      unint64_t v14 = (os_log_s *)qword_1008F7710;
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_10068AE8C(v14, v15, v16, v17, v18, v19, v20, v21);
      return 0LL;
    }

    if (qword_1008D9BB0 != -1)
    {
      id v26 = a2;
      dispatch_once(&qword_1008D9BB0, &stru_10089DAD0);
      a2 = v26;
    }

    sub_1002E6558(qword_1008D9BA8, (uint64_t)a2);
    if (qword_1008D9BB0 != -1) {
      dispatch_once(&qword_1008D9BB0, &stru_10089DAD0);
    }
    *a1 = qword_1008D9BA8;
    *a3 = a1[1];
    id v23 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 136315138;
      uint64_t v28 = "TransportCreate";
      id v24 = "%s: kBTVirtualTransportInterfaceACL, success";
      goto LABEL_22;
    }
  }

  else if (*a2 == 2)
  {
    if (*a1)
    {
      uint64_t v5 = (os_log_s *)qword_1008F7710;
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_10068AE1C(v5, v7, v8, v9, v10, v11, v12, v13);
      return 0LL;
    }

    if (qword_1008D9BB0 != -1)
    {
      id v25 = a2;
      dispatch_once(&qword_1008D9BB0, &stru_10089DAD0);
      a2 = v25;
    }

    sub_1002E6558(qword_1008D9BA8, (uint64_t)a2);
    if (qword_1008D9BB0 != -1) {
      dispatch_once(&qword_1008D9BB0, &stru_10089DAD0);
    }
    uint64_t v22 = qword_1008D9BA8;
    *a1 = qword_1008D9BA8;
    *a3 = v22;
    sub_100457D54(*a1);
    id v23 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 136315138;
      uint64_t v28 = "TransportCreate";
      id v24 = "%s: BTVirtualTransportInterfaceHCICommand, success";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v27, 0xCu);
    }
  }

  return 1LL;
}

uint64_t sub_1004F633C(void *a1, uint64_t *a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315138;
    uint64_t v10 = "TransportFree";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: TransportFree", (uint8_t *)&v9, 0xCu);
  }

  uint64_t v5 = *a2;
  if (*a2 == *a1)
  {
    sub_100457DA4(v5);
    if (qword_1008D9BB0 != -1) {
      dispatch_once(&qword_1008D9BB0, &stru_10089DAD0);
    }
    sub_1002E6664((void *)qword_1008D9BA8);
    *a1 = 0LL;
    int v6 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = "TransportFree";
      uint64_t v7 = "%s: BTVirtualTransportInterfaceHCICommand";
      goto LABEL_13;
    }
  }

  else if (v5 == a1[1])
  {
    if (qword_1008D9BB0 != -1) {
      dispatch_once(&qword_1008D9BB0, &stru_10089DAD0);
    }
    sub_1002E6664((void *)qword_1008D9BA8);
    a1[1] = 0LL;
    int v6 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = "TransportFree";
      uint64_t v7 = "%s: kBTVirtualTransportInterfaceACL";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v9, 0xCu);
    }
  }

  return 1LL;
}

uint64_t sub_1004F6514(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*a1 == a2 || a1[1] == a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16LL))( a2,  a3,  a4,  a5,  a6,  a7);
  }
  uint64_t v7 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_ERROR)) {
    sub_10068AEFC(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  return 0LL;
}

BOOL sub_1004F659C(void *a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (*a1 == a2) {
    return 1LL;
  }
  return a1[1] == a2;
}

void sub_1004F65CC(id a1)
{
  uint64_t v1 = operator new(0x38uLL);
  v1[1] = 0u;
  v1[2] = 0u;
  *(void *)uint64_t v1 = &off_100899740;
  *((void *)v1 + 6) = &off_100899770;
  qword_1008D9BA8 = (uint64_t)v1;
}

uint64_t sub_1004F660C(uint64_t a1)
{
  *(void *)a1 = off_10089DB00;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_10089DBA8;
  *(void *)(a1 + 16) = off_10089DC08;
  *(void *)(a1 + 24) = off_10089DCB8;
  *(void *)(a1 + 32) = &off_10089DCD8;
  sub_100242DC4(a1 + 40);
  *(_WORD *)(a1 + 174) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0LL;
  mach_timebase_info((mach_timebase_info_t)(a1 + 176));
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_1004F6694(_Unwind_Exception *a1)
{
}

void sub_1004F66AC(uint64_t a1)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089DD50);
  }
  sub_1003B423C(qword_1008D61A0 + 8, a1 + 24);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089DD70);
  }
  sub_10004FAD0((uint64_t)off_1008D6600 + 1872, a1 + 8);
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089DD90);
  }
  sub_100594810((uint64_t)off_1008D5F08, a1 + 16, 0);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089DDB0);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 32);
  sub_1004F67BC(a1);
}

void sub_1004F67BC(uint64_t a1)
{
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v3 = 0LL;
  sub_10002418C(__p, "com.apple.bluetooth.Server.FastconnectACL");
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089DD50);
  }
  if (sub_100496120(qword_1008D61A0, (uint64_t)__p, (unint64_t *)(a1 + 112), 1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
      sub_10068AF6C();
    }
  }

  else
  {
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10089DD50);
    }
    *(void *)(a1 + 120) = sub_100496954((void *)qword_1008D61A0, *(void *)(a1 + 112));
  }

  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1004F68B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004F68D0(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089DDB0);
  }
  sub_100009168((uint64_t)off_1008D60A8 + 80, a1 + 32);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089DD70);
  }
  sub_100009168((uint64_t)off_1008D6600 + 1872, a1 + 8);
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089DD50);
  }
  sub_1004966BC(qword_1008D61A0, *(void *)(a1 + 112));
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089DD50);
  }
  sub_100009168(qword_1008D61A0 + 8, a1 + 24);
}

uint64_t sub_1004F69D4(uint64_t a1, uint64_t a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 40);
  if (*(void *)(a1 + 120) && *(void *)(a1 + 128) && *(_BYTE *)(a1 + 104))
  {
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10089DDB0);
    }
    if (*((_BYTE *)off_1008D60A8 + 76))
    {
      uint64_t v4 = *(void *)(a1 + 136);
      if (v4)
      {
        if (v4 == a2)
        {
          uint64_t v5 = (os_log_s *)qword_1008F7740;
          if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
          {
            sub_100494958(*(void *)(a1 + 120), (uint64_t)__p);
            int v6 = SHIBYTE(v14) >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)std::stringbuf::string_type buf = 136446210;
            uint64_t v18 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "LE Scan timeout for session%{public}s ",  buf,  0xCu);
            if (SHIBYTE(v14) < 0) {
              operator delete(__p[0]);
            }
          }
        }

        else if (*(void *)(a1 + 144) != a2)
        {
          return sub_100242FAC((uint64_t)v12);
        }

        *(void *)(a1 + 136) = 0LL;
        sub_100242F54((uint64_t)v12);
        *(void *)(a1 + 192) = mach_absolute_time();
        (*(void (**)(uint64_t, void))(*(void *)a1 + 8LL))(a1, *(void *)(a1 + 128));
        uint64_t v7 = sub_100404EB8();
        __p[0] = _NSConcreteStackBlock;
        __p[1] = (void *)3221225472LL;
        uint64_t v14 = sub_1004F73EC;
        uint64_t v15 = &unk_10087EB20;
        uint64_t v16 = a1;
        sub_100405384(v7, __p);
        if (qword_1008D6288 != -1) {
          dispatch_once(&qword_1008D6288, &stru_10089DDF0);
        }
        sub_10057B1A4((uint64_t)off_1008D6280, 0LL);
        uint64_t v8 = (os_log_s *)qword_1008F7740;
        if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_INFO))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Resume leScan", (uint8_t *)__p, 2u);
        }

        uint64_t v9 = sub_100404FE8();
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472LL;
        _DWORD v11[2] = sub_1004F6CC4;
        uint64_t v11[3] = &unk_10087EB20;
        void v11[4] = a1;
        sub_100405384(v9, v11);
      }
    }
  }

  return sub_100242FAC((uint64_t)v12);
}

void sub_1004F6C44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1004F6C64(uint64_t a1)
{
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1004F73EC;
  uint64_t v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_100405384(v2, v3);
}

uint64_t sub_1004F6CC4(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 108LL) = 1;
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089DD70);
  }
  return sub_100609ECC((uint64_t)off_1008D6600, @"com.apple.bluetooth.fastConnect");
}

uint64_t sub_1004F6D18(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 120)
    || (uint64_t v4 = (os_log_s *)qword_1008F7740, !os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_FAULT)))
  {
    if (a2) {
      goto LABEL_4;
    }
LABEL_16:
    uint64_t v16 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_FAULT)) {
      sub_10068AF98(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    return 1LL;
  }

  sub_10068B16C(v4, v5, v6, v7, v8, v9, v10, v11);
  if (!a2) {
    goto LABEL_16;
  }
LABEL_4:
  if (!*(void *)(a1 + 120)) {
    return 1LL;
  }
  if (*(void *)(a1 + 128))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
      sub_10068B140();
    }
    return 303LL;
  }

  uint64_t v13 = mach_absolute_time();
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = v13;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(_BYTE *)(a1 + 232) = 0;
  uint64_t v14 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8LL))(v14)
    && *(_BYTE *)(a1 + 175)
    && !*(_BYTE *)(a1 + 174))
  {
    sub_1000A85A0();
    int v15 = sub_10010ED74((uint64_t (*)(void, void, void, void, void))sub_1004F7034);
    sub_1000A8688();
    if (v15)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
        sub_10068B114();
      }
    }

    else
    {
      *(_BYTE *)(a1 + 174) = 1;
    }
  }

  if (*(_BYTE *)(a1 + 104)
    || *(_BYTE *)(a1 + 105)
    || *(_BYTE *)(a1 + 107)
    || *(_BYTE *)(a1 + 106)
    || *(_BYTE *)(a1 + 108))
  {
    id v24 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
      sub_10068B064(a2, v24);
    }
    return 400LL;
  }

  *(void *)(a1 + 12_Block_object_dispose(va, 8) = a2;
  id v25 = (os_log_s *)qword_1008F7740;
  if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Start BBFC", v29, 2u);
  }

  uint64_t v26 = mach_absolute_time();
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v26;
  if (*(_BYTE *)(a1 + 109))
  {
LABEL_43:
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
      sub_10068B038();
    }
    char v27 = 2;
    goto LABEL_46;
  }

  if (qword_1008D60C0 != -1) {
    dispatch_once(&qword_1008D60C0, &stru_10089DE10);
  }
  int v28 = sub_1004F7164(0, (__int128 *)(a1 + 152), (_BYTE *)(a1 + 168));
  *(_BYTE *)(a1 + 109) = 1;
  if (v28) {
    goto LABEL_43;
  }
LABEL_33:
  *(_BYTE *)(a1 + 105) = 1;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089DD90);
  }
  uint64_t result = sub_1005B493C((os_unfair_lock_s *)off_1008D5F08);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
      sub_10068B00C();
    }
    *(_BYTE *)(a1 + 105) = 0;
    char v27 = 3;
LABEL_46:
    *(_BYTE *)(a1 + 232) = v27;
    sub_1004F6C64(a1);
    return 0LL;
  }

  return result;
}

void sub_1004F7034(int a1)
{
  if (qword_1008D93E0 != -1) {
    dispatch_once(&qword_1008D93E0, &stru_10089DDD0);
  }
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  (*(void (**)(void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)off_1008D93D8 + 24LL))( off_1008D93D8,  &v8,  &v7,  &v6,  &v5);
  uint64_t v2 = sub_1002E6E00();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  if (!a1 && v3)
  {
    uint64_t v4 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218752;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      uint64_t v12 = v7;
      __int16 v13 = 2048;
      uint64_t v14 = v6;
      __int16 v15 = 2048;
      uint64_t v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BBFC scanprep_time = %llums, scan_time = %llums, page_time = %llums, connection_time = %llums",  buf,  0x2Au);
    }
  }

uint64_t sub_1004F7164(int a1, __int128 *a2, _BYTE *__buf)
{
  do
  {
    do
      arc4random_buf(__buf, 3uLL);
    while (!(*(unsigned __int16 *)__buf | __buf[2]));
  }

  while (!(*(unsigned __int16 *)__buf ^ 0xFF | __buf[2]));
  *__std::stringbuf::string_type buf = *__buf & 0x3F | 0x40;
  if (*a2 == 0) {
    return 103LL;
  }
  return 101LL;
}

void sub_1004F7204(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2
    || (uint64_t v6 = (os_log_s *)qword_1008F7740, os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_FAULT))
    && (*(_DWORD *)std::stringbuf::string_type __p = 136446210,
        *(void *)&__p[4] = "m_Session",
        _os_log_fault_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  __p,  0xCu),  (uint64_t v2 = *(void *)(a1 + 120)) != 0))
  {
    int v3 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v2, (uint64_t)__p);
      uint64_t v4 = v9 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      __int16 v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "LE stop scanning for session %{public}s",  buf,  0xCu);
      if (v9 < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (*(_BYTE *)(a1 + 104))
    {
      uint64_t v5 = sub_100404FE8();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      _OWORD v7[2] = sub_1004F7390;
      _OWORD v7[3] = &unk_10087EB20;
      void v7[4] = a1;
      sub_1004054B4(v5, v7);
      *(_BYTE *)(a1 + 104) = 0;
    }

    *(void *)(a1 + 136) = 0LL;
    *(void *)(a1 + 144) = 0LL;
  }

uint64_t sub_1004F7390(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089DD70);
  }
  return sub_1005F24EC((uint64_t)off_1008D6600, *(void *)(v1 + 120), 1, 1, 0);
}

void sub_1004F73EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(v1 + 224) = mach_absolute_time();
  if (*(void *)(v1 + 128))
  {
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_10089DE30);
    }
    uint64_t v2 = off_1008D60C8;
    int v3 = *(unsigned __int8 **)(v1 + 128);
    else {
      int v4 = 0;
    }
    sub_100426A10((uint64_t)v2, (uint64_t)v3, v4, 2);
    *(void *)(v1 + 12_Block_object_dispose(va, 8) = 0LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
      sub_10068B1E0();
    }
    *(_BYTE *)(v1 + 232) = 4;
  }

void sub_1004F74C0( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v12 = a3;
  id v13 = a8;
  if (!*(void *)(a1 + 120)) {
    goto LABEL_7;
  }
  uint64_t v14 = *(unsigned __int8 **)(a1 + 128);
  if (!v14) {
    goto LABEL_7;
  }
  if (!*(void *)(a1 + 136)) {
    goto LABEL_7;
  }
  if (*(void *)(a1 + 144)) {
    goto LABEL_7;
  }
  unint64_t v15 = ((unint64_t)v14[128] << 40) | ((unint64_t)v14[129] << 32) | ((unint64_t)v14[130] << 24) | ((unint64_t)v14[131] << 16) | ((unint64_t)v14[132] << 8) | v14[133];
  if (v15 != *(void *)(*(void *)(a4 + 8) + 200LL)) {
    goto LABEL_7;
  }
  uint64_t v16 = sub_100494CF8(a2);
  if (v16 != sub_100494CF8(*(void *)(a1 + 120))) {
    goto LABEL_7;
  }
  uint64_t v17 = sub_1002E6BF0();
  int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 552LL))(v17);
  if (v18 == 1)
  {
    uint64_t v24 = *(void *)(a4 + 8);
    int v25 = *(unsigned __int8 *)(v24 + 365);
    int v26 = *(_DWORD *)(v24 + 444);
    char v27 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
    {
      sub_1005BFC20(v15, &__p);
      int v28 = "Dropping";
      if (!(v25 | v26)) {
        int v28 = "Using";
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136316162;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      *(void *)&uint8_t buf[4] = v28;
      __int16 v77 = 2112;
      id v78 = v12;
      __int16 v79 = 2080;
      int64_t v80 = p_p;
      __int16 v81 = 1024;
      LODWORD(v82[0]) = v26;
      WORD2(v82[0]) = 1024;
      *(_DWORD *)((char *)v82 + 6) = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Warning: BBFC: %s ADV report for %@ %s antenna:%d scanSourceCore:%d",  buf,  0x2Cu);
    }

    if (!(v25 | v26)) {
      goto LABEL_31;
    }
  }

  else
  {
    if (v18 != 2) {
      goto LABEL_31;
    }
    int v19 = *(unsigned __int8 *)(*(void *)(a4 + 8) + 369LL);
    uint64_t v20 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
    {
      sub_1005BFC20(v15, &__p);
      uint64_t v21 = "Dropping";
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v22 = &__p;
      }
      else {
        uint64_t v22 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      }
      if (!v19) {
        uint64_t v21 = "Using";
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136315906;
      *(void *)&uint8_t buf[4] = v21;
      __int16 v77 = 2112;
      id v78 = v12;
      uint64_t v23 = "N";
      __int16 v79 = 2080;
      if (v19) {
        uint64_t v23 = "Y";
      }
      int64_t v80 = v22;
      __int16 v81 = 2080;
      v82[0] = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Warning: BBFC: %s ADV report for %@ %s coexDenied:%s",  buf,  0x2Au);
    }

    if (!v19)
    {
LABEL_31:
      uint64_t v30 = mach_absolute_time();
      uint64_t v31 = (os_log_s *)qword_1008F7740;
      if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v32 = (v30 - *(void *)(a1 + 184)) * *(unsigned int *)(a1 + 176) / *(unsigned int *)(a1 + 180) / 0xF4240;
        *(_DWORD *)std::stringbuf::string_type buf = 134217984;
        *(void *)&uint8_t buf[4] = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Scan took:%llu ms", buf, 0xCu);
        uint64_t v31 = (os_log_s *)qword_1008F7740;
      }

      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003D0100(*(void *)(a1 + 128), (uint64_t)buf);
        xpc_object_t v33 = v79 >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Found device %{public}s ",  (uint8_t *)&__p,  0xCu);
        if (SHIBYTE(v79) < 0) {
          operator delete(*(void **)buf);
        }
      }

      *(_BYTE *)(a1 + 232) = 1;
      uint64_t v34 = operator new(0x18uLL);
      v34[4] = 1;
      *(void *)uint64_t v34 = &off_10089DD28;
      *((void *)v34 + 2) = 0LL;
      *(void *)(a1 + 144) = v34;
      if (qword_1008D60D0 != -1) {
        dispatch_once(&qword_1008D60D0, &stru_10089DE30);
      }
      sub_100424E54((uint64_t)off_1008D60C8, v34);
      if (*(void *)(a1 + 128))
      {
        unint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        if ((unint64_t)sub_10056AAD8(*(void *)(a4 + 8) + 48LL) >= 0x1D)
        {
          uint64_t v36 = sub_10056AAF0(*(void *)(a4 + 8) + 48LL);
          int v37 = *(unsigned __int16 *)(v36 + 5);
          unsigned int v38 = *(unsigned __int8 *)(v36 + 7);
          char v71 = *(_BYTE *)(v36 + 13);
          int v72 = *(unsigned __int8 *)(v36 + 15);
          int v73 = *(unsigned __int8 *)(v36 + 14);
          unsigned int v74 = *(unsigned __int8 *)(v36 + 23);
          LODWORD(v6_Block_object_dispose(va, 8) = *(unsigned __int8 *)(v36 + 24);
          HIDWORD(v6_Block_object_dispose(va, 8) = *(unsigned __int8 *)(v36 + 16);
          uint64_t v39 = (os_log_s *)qword_1008F7740;
          if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v37;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Device PID 0x%x", buf, 8u);
          }

          if (v37 == 8223 || v37 == 8202)
          {
            int v40 = (v38 >> 5) & 3;
            if (v40 == 2) {
              unsigned int v41 = 2;
            }
            else {
              unsigned int v41 = 3;
            }
            if (v40 == 1) {
              uint64_t v42 = 0LL;
            }
            else {
              uint64_t v42 = v41;
            }
            uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v42,  v68));
            [v35 setObject:v43 forKeyedSubscript:@"InEarStatusPrimary"];
          }

          else
          {
            xpc_object_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v38 & 1));
            [v35 setObject:v44 forKeyedSubscript:@"UtpConnected"];

            int v45 = (v38 >> 5) & 3;
            if (v45 == 2) {
              char v46 = 2;
            }
            else {
              char v46 = 3;
            }
            if (v45 == 1) {
              unsigned __int8 v47 = 0;
            }
            else {
              unsigned __int8 v47 = v46;
            }
            unint64_t v48 = (os_log_s *)qword_1008F7740;
            if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)std::stringbuf::string_type buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = (v38 >> 5) & 3;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "statusTemp 1 0x%x", buf, 8u);
            }

            uint64_t v49 = sub_100239208(v47);
            id v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
            [v35 setObject:v50 forKeyedSubscript:@"InEarStatusPrimary"];

            int v51 = (v38 >> 3) & 3;
            if (v51 == 2) {
              char v52 = 2;
            }
            else {
              char v52 = 3;
            }
            if (v51 == 1) {
              unsigned __int8 v53 = 0;
            }
            else {
              unsigned __int8 v53 = v52;
            }
            uint64_t v54 = (os_log_s *)qword_1008F7740;
            if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)std::stringbuf::string_type buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = (v38 >> 3) & 3;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "statusTemp 2 0x%x", buf, 8u);
            }

            unint64_t v55 = sub_100239208(v53);
            uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v55);
            [v35 setObject:v43 forKeyedSubscript:@"InEarStatusSecondary"];
          }

          if (v73 != 255)
          {
            unint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v73 & 0x7F));
            [v35 setObject:v56 forKeyedSubscript:@"BatteryLevelPrimary"];
          }

          if (v72 != 255)
          {
            uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v72 & 0x7F));
            [v35 setObject:v57 forKeyedSubscript:@"BatteryLevelSecondary"];
          }

          uint64_t v58 = (v71 & 3) - 1LL;
          else {
            uint64_t v59 = (const __CFString *)*((void *)&off_10089DE50 + v58);
          }
          [v35 setObject:v59 forKeyedSubscript:@"AudioState" v68];
          if (v70 != 255)
          {
            uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v70 & 0x7F));
            [v35 setObject:v60 forKeyedSubscript:@"BatteryLevelCase"];
          }

          uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v74 & 0xF));
          [v35 setObject:v61 forKeyedSubscript:@"TipiSource1"];

          uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v74 >> 4));
          [v35 setObject:v62 forKeyedSubscript:@"TipiSource2"];

          uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  (0x3C1E0500u >> (8 * (v69 & 3))) & 0x3F));
          [v35 setObject:v63 forKeyedSubscript:@"TimeSinceLidOpen"];
        }

        int v64 = *(char *)(*(void *)(a4 + 8) + 216LL);
        if (v64 >= 0) {
          uint64_t v65 = v64;
        }
        else {
          uint64_t v65 = -v64;
        }
        __int128 v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v65));
        [v35 setObject:v66 forKeyedSubscript:@"AdvRSSI"];

        [v35 setObject:&__kCFBooleanTrue forKeyedSubscript:@"BBFCStatusSource"];
        uint64_t v67 = sub_1002E8D94();
        (*(void (**)(uint64_t, void, void *))(*(void *)v67 + 520LL))(v67, *(void *)(a1 + 128), v35);
      }
    }
  }

void sub_1004F7D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F7E30( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
}

void sub_1004F7E3C(uint64_t a1)
{
  if (qword_1008F1178 != -1) {
    dispatch_once(&qword_1008F1178, &stru_10089DCF8);
  }
  if (*(void *)(a1 + 120)
    || (uint64_t v7 = (os_log_s *)qword_1008F7740, os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_FAULT))
    && !sub_10068B20C(v7, (void *)(a1 + 120), v8, v9, v10, v11, v12, v13))
  {
    if (*(_BYTE *)(a1 + 106))
    {
      uint64_t v18 = 0LL;
      int v19 = &v18;
      uint64_t v20 = 0x2020000000LL;
      int v21 = 1;
      uint64_t v2 = (os_log_s *)qword_1008F7740;
      if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "leScanPaused", buf, 2u);
        uint64_t v2 = (os_log_s *)qword_1008F7740;
      }

      *(_BYTE *)(a1 + 106) = 0;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "add EventListener In Paused", buf, 2u);
      }

      if (qword_1008D6608 != -1) {
        dispatch_once(&qword_1008D6608, &stru_10089DD70);
      }
      sub_10004FAD0((uint64_t)off_1008D6600 + 1904, a1 + 8);
      if (qword_1008D6288 != -1) {
        dispatch_once(&qword_1008D6288, &stru_10089DDF0);
      }
      int v3 = sub_10057B1A4( (uint64_t)off_1008D6280,  ((unint64_t)*(unsigned __int8 *)(a1 + 169) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 168) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 170) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 171) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 172) << 8) | *(unsigned __int8 *)(a1 + 173) | 0x1000000000000LL);
      *((_DWORD *)v19 + 6) = v3;
      if (v3)
      {
        int v4 = (os_log_s *)qword_1008F7740;
        if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fail to set RPA, skip BBFC", buf, 2u);
        }

        *(_BYTE *)(a1 + 232) = 5;
        uint64_t v5 = sub_100404FE8();
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        __int128 v17[2] = sub_1004F82B8;
        v17[3] = &unk_10087EB20;
        void v17[4] = a1;
        sub_100405384(v5, v17);
        uint64_t v6 = sub_100404EB8();
        *(void *)std::stringbuf::string_type buf = _NSConcreteStackBlock;
        uint64_t v23 = 3221225472LL;
        uint64_t v24 = sub_1004F73EC;
        int v25 = &unk_10087EB20;
        uint64_t v26 = a1;
        sub_100405384(v6, buf);
      }

      else
      {
        uint64_t v14 = operator new(0x188uLL);
        sub_100050070((uint64_t)v14);
        uint64_t v15 = sub_100404FE8();
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        void v16[2] = sub_1004F830C;
        void v16[3] = &unk_10087FEE0;
        v16[5] = a1;
        v16[6] = v14;
        v16[4] = &v18;
        sub_100405384(v15, v16);
      }

      _Block_object_dispose(&v18, 8);
    }
  }

void sub_1004F8134( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
}

void sub_1004F8160(id a1)
{
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "BBFC");
  sub_10002418C(__p, "ScanTimeOut");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v1 + 88LL))( v1,  buf,  __p,  &dword_1008F1170);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }

  else if (!v2)
  {
    return;
  }

  int v3 = (os_log_s *)qword_1008F7740;
  if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = dword_1008F1170;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Warning: BBFC: ScanTimeOut overriden %d",  buf,  8u);
  }

void sub_1004F827C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004F82B8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 108LL) = 1;
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089DD70);
  }
  return sub_100609ECC((uint64_t)off_1008D6600, @"com.apple.bluetooth.fastConnect");
}

void sub_1004F830C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(v2 + 216) = mach_absolute_time();
  uint64_t v3 = *(void *)(a1 + 48);
  *(_BYTE *)(v3 + 3) = 1;
  uint64_t v4 = objc_claimAutoreleasedReturnValue( +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  @"com.apple.bluetoothd.FastConnectManager"));
  char v5 = *(void **)(v3 + 152);
  *(void *)(v3 + 152) = v4;

  *(_DWORD *)(*(void *)(a1 + 48) + 168LL) = 265;
  uint64_t v6 = (os_log_s *)qword_1008F7740;
  if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
  {
    sub_100494958(*(void *)(v2 + 120), (uint64_t)__p);
    char v7 = SHIBYTE(v22) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    uint64_t v26 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Start LE scanning for session %{public}s",  buf,  0xCu);
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
  }

  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089DD70);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_1005F08F8( (uint64_t)off_1008D6600,  *(void *)(v2 + 120),  *(unsigned __int8 **)(a1 + 48));
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    uint64_t v8 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(*(void *)(v2 + 120), (uint64_t)__p);
      uint64_t v18 = SHIBYTE(v22) >= 0 ? __p : (void **)__p[0];
      int v19 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      uint64_t v26 = v18;
      __int16 v27 = 1024;
      int v28 = v19;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Fail LE scan for session %{public}s with error %d, skipp BBFC",  buf,  0x12u);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p[0]);
      }
    }

    *(_BYTE *)(v2 + 232) = 6;
    if (qword_1008D6288 != -1) {
      dispatch_once(&qword_1008D6288, &stru_10089DDF0);
    }
    sub_10057B1A4((uint64_t)off_1008D6280, 0LL);
    uint64_t v9 = sub_100404FE8();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1004F868C;
    void v20[3] = &unk_10087EB20;
    uint8_t v20[4] = v2;
    sub_100405384(v9, v20);
    uint64_t v10 = sub_100404EB8();
    __p[0] = _NSConcreteStackBlock;
    __p[1] = (void *)3221225472LL;
    uint64_t v22 = sub_1004F73EC;
    uint64_t v23 = &unk_10087EB20;
    uint64_t v24 = v2;
    sub_100405384(v10, __p);
  }

  else
  {
    *(void *)(v2 + 184) = mach_absolute_time();
    *(_BYTE *)(v2 + 104) = 1;
    uint64_t v11 = dword_1008F1170;
    if (dword_1008F1170 < 1)
    {
      uint64_t v12 = sub_1002E6BF0();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 328LL))(v12) & 1) != 0
        || (uint64_t v13 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 384LL))(v13) & 1) != 0)
        || (uint64_t v14 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v14 + 944LL))(v14)))
      {
        uint64_t v15 = sub_1002E6BF0();
        else {
          uint64_t v11 = 1000LL;
        }
      }

      else
      {
        uint64_t v11 = 1000LL;
      }
    }

    uint64_t v16 = operator new(0x18uLL);
    v16[4] = 1;
    *(void *)uint64_t v16 = &off_10089DD28;
    *((void *)v16 + 2) = v11;
    *(void *)(v2 + 136) = v16;
    uint64_t v17 = sub_100404EB8();
    sub_100405744(v17, v16);
  }

uint64_t sub_1004F868C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 108LL) = 1;
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089DD70);
  }
  return sub_100609ECC((uint64_t)off_1008D6600, @"com.apple.bluetooth.fastConnect");
}

void sub_1004F86E0(uint64_t a1)
{
}

uint64_t sub_1004F86E8(uint64_t result)
{
  if (*(_BYTE *)(result + 108))
  {
    uint64_t v1 = result;
    uint64_t v2 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "leScanResumed", v3, 2u);
    }

    *(_BYTE *)(v1 + 10_Block_object_dispose(va, 8) = 0;
    if (qword_1008D6608 != -1) {
      dispatch_once(&qword_1008D6608, &stru_10089DD70);
    }
    sub_100009168((uint64_t)off_1008D6600 + 1904, v1 + 8);
    *(_BYTE *)(v1 + 107) = 1;
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_10089DD90);
    }
    return sub_1005B2610((uint64_t)off_1008D5F08);
  }

  return result;
}

uint64_t sub_1004F87D4(uint64_t a1)
{
  return sub_1004F86E8(a1 - 8);
}

void sub_1004F87DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 105))
  {
    *(_BYTE *)(a1 + 105) = 0;
    uint64_t v2 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "leConnectionManagerPaused", buf, 2u);
    }

    uint64_t v3 = sub_100404FE8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    _DWORD v4[2] = sub_1004F888C;
    void v4[3] = &unk_10087EB20;
    v4[4] = a1;
    sub_100405384(v3, v4);
  }

void sub_1004F888C(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  v1[106] = 1;
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089DD70);
  }
  int v2 = sub_100609C14((uint64_t)off_1008D6600, @"com.apple.bluetooth.fastConnect");
  if (v2)
  {
    if (v2 == 401)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
        sub_10068B2C4();
      }
      (*(void (**)(_BYTE *))(*(void *)v1 + 72LL))(v1);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
        sub_10068B298();
      }
      v1[232] = 7;
      v1[106] = 0;
      uint64_t v4 = sub_100404FE8();
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_1004F8A18;
      v6[3] = &unk_10087EB20;
      void v6[4] = v1;
      sub_100405384(v4, v6);
      uint64_t v5 = sub_100404EB8();
      *(void *)std::stringbuf::string_type buf = _NSConcreteStackBlock;
      uint64_t v8 = 3221225472LL;
      uint64_t v9 = sub_1004F73EC;
      uint64_t v10 = &unk_10087EB20;
      uint64_t v11 = v1;
      sub_100405384(v5, buf);
    }
  }

  else
  {
    uint64_t v3 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Pause LEObserver", buf, 2u);
    }
  }

uint64_t sub_1004F8A18(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 107LL) = 1;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089DD90);
  }
  return sub_1005B2610((uint64_t)off_1008D5F08);
}

void sub_1004F8A64(uint64_t a1)
{
}

void sub_1004F8A6C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 107))
  {
    int v2 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "leConnectionManagerResumed", v3, 2u);
    }

    *(_BYTE *)(a1 + 107) = 0;
  }

void sub_1004F8AE0(uint64_t a1)
{
}

void sub_1004F8AE8(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008F7740;
  if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "stackDidStart", v5, 2u);
  }

  *(_BYTE *)(a1 + 109) = 0;
  *(_BYTE *)(a1 + 174) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  uint64_t v3 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 8LL))(v3)
    && *(_BYTE *)(a1 + 175)
    && !*(_BYTE *)(a1 + 174))
  {
    sub_1000A85A0();
    int v4 = sub_10010ED74((uint64_t (*)(void, void, void, void, void))sub_1004F7034);
    sub_1000A8688();
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
        sub_10068B2F0();
      }
    }

    else
    {
      *(_BYTE *)(a1 + 174) = 1;
    }
  }

void sub_1004F8BDC(uint64_t a1)
{
}

uint64_t sub_1004F8BE4(uint64_t result)
{
  *(_BYTE *)(result + 174) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_WORD *)(result + 10_Block_object_dispose(va, 8) = 0;
  *(void *)(result + 136) = 0LL;
  *(void *)(result + 144) = 0LL;
  *(void *)(result + 12_Block_object_dispose(va, 8) = 0LL;
  return result;
}

uint64_t sub_1004F8BFC(uint64_t result)
{
  *(_BYTE *)(result + 142) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_WORD *)(result + 76) = 0;
  *(void *)(result + 104) = 0LL;
  *(void *)(result + 112) = 0LL;
  *(void *)(result + 96) = 0LL;
  return result;
}

void sub_1004F8C14(uint64_t a1, int a2)
{
  int v4 = (os_log_s *)qword_1008F7740;
  if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "disabled";
    if (a2) {
      uint64_t v5 = "enabled";
    }
    int v7 = 136315138;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BBFC TimeLogging is %s", (uint8_t *)&v7, 0xCu);
  }

  *(_BYTE *)(a1 + 175) = a2;
  if (*(_BYTE *)(a1 + 174))
  {
    sub_1000A85A0();
    int v6 = sub_10010EE50((uint64_t (*)(void, void, void, void, void))sub_1004F7034);
    sub_1000A8688();
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_ERROR)) {
        sub_10068B31C();
      }
    }

    else
    {
      *(_BYTE *)(a1 + 174) = 0;
    }
  }

void sub_1004F8D24( uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v10 = mach_absolute_time();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 184);
  if (v12)
  {
    uint64_t v13 = v12 - *(void *)(a1 + 200);
    uint64_t v14 = *(unsigned int *)(a1 + 176);
    unint64_t v15 = *(unsigned int *)(a1 + 180);
    *a2 = v13 * v14 / v15 / 0xF4240;
    *a3 = (*(void *)(a1 + 192) - *(void *)(a1 + 184)) * v14 / v15 / 0xF4240;
    unint64_t v16 = (v10 - *(void *)(a1 + 192)) * v14 / v15 / 0xF4240;
  }

  else
  {
    uint64_t v17 = (os_log_s *)qword_1008F7740;
    if (os_log_type_enabled((os_log_t)qword_1008F7740, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "BBFC wasn't started", v18, 2u);
    }

    unint64_t v16 = 0LL;
    *a2 = 0LL;
    *a3 = 0LL;
    uint64_t v14 = *(unsigned int *)(a1 + 176);
    unint64_t v15 = *(unsigned int *)(a1 + 180);
  }

  *a4 = v16;
  *a5 = (v11 - *(void *)(a1 + 200)) * v14 / v15 / 0xF4240;
}

std::string *sub_1004F8E44( uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, _BYTE *a5, std::string *this)
{
  if (*(void *)(a1 + 184))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 176);
    unint64_t v7 = *(unsigned int *)(a1 + 180);
    *a2 = (*(void *)(a1 + 216) - *(void *)(a1 + 208)) * v6 / v7 / 0xF4240;
    *a3 = (*(void *)(a1 + 192) - *(void *)(a1 + 216)) * v6 / v7 / 0xF4240;
    *a4 = (*(void *)(a1 + 224) - *(void *)(a1 + 208)) * v6 / v7 / 0xF4240;
    *a5 = *(_BYTE *)(a1 + 232);
    unint64_t v8 = *(char *)(a1 + 232);
    if (v8 > 7) {
      uint64_t v9 = "Invalid BBFC Status";
    }
    else {
      uint64_t v9 = (&off_10089DE68)[v8];
    }
  }

  else
  {
    *a2 = 0LL;
    *a3 = 0LL;
    *a4 = 0LL;
    uint64_t v9 = "Unknown";
    *a5 = 0;
  }

  return std::string::assign(this, v9);
}

void sub_1004F8F0C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  if (v2)
  {
    uint64_t v5 = (uint64_t)(a2 + 2);
    unint64_t v6 = (unint64_t)a2[2];
    unint64_t v7 = a2[1];
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = ((char *)v7 - (_BYTE *)*a2) >> 3;
      uint64_t v10 = v6 - (void)*a2;
      uint64_t v11 = v10 >> 2;
      else {
        unint64_t v12 = v11;
      }
      if (v12)
      {
        uint64_t v13 = (char *)sub_100008BA0(v5, v12);
        uint64_t v2 = *(void *)(a1 + 128);
      }

      else
      {
        uint64_t v13 = 0LL;
      }

      uint64_t v14 = &v13[8 * v9];
      unint64_t v15 = &v13[8 * v12];
      *(void *)uint64_t v14 = v2;
      unint64_t v8 = v14 + 8;
      uint64_t v17 = (char *)*a2;
      unint64_t v16 = (char *)a2[1];
      if (v16 != *a2)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }

        while (v16 != v17);
        unint64_t v16 = (char *)*a2;
      }

      *a2 = v14;
      a2[1] = v8;
      a2[2] = v15;
      if (v16) {
        operator delete(v16);
      }
    }

    else
    {
      *unint64_t v7 = v2;
      unint64_t v8 = v7 + 1;
    }

    a2[1] = v8;
  }

void *sub_1004F8FEC(void *a1)
{
  *a1 = off_10089DB00;
  a1[1] = off_10089DBA8;
  a1[2] = off_10089DC08;
  a1[3] = off_10089DCB8;
  a1[4] = &off_10089DCD8;
  sub_100242E28(a1 + 5);
  return a1;
}

void sub_1004F9038(void *a1)
{
  *a1 = off_10089DB00;
  a1[1] = off_10089DBA8;
  a1[2] = off_10089DC08;
  a1[3] = off_10089DCB8;
  a1[4] = &off_10089DCD8;
  sub_100242E28(a1 + 5);
  operator delete(a1);
}

uint64_t sub_1004F90B4(uint64_t a1)
{
  if (qword_1008D93E0 != -1) {
    dispatch_once(&qword_1008D93E0, &stru_10089DDD0);
  }
  return sub_1004F69D4((uint64_t)off_1008D93D8, a1);
}

void sub_1004F9104(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1004F9134(_Unwind_Exception *a1)
{
}

void sub_1004F9148(id a1)
{
  uint64_t v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_1004F9178(_Unwind_Exception *a1)
{
}

void sub_1004F918C(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1004F91BC(_Unwind_Exception *a1)
{
}

void sub_1004F91D0(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1004F9200(_Unwind_Exception *a1)
{
}

void sub_1004F9214(id a1)
{
  uint64_t v1 = operator new(0xF0uLL);
  sub_1004F660C((uint64_t)v1);
  off_1008D93D8 = v1;
}

void sub_1004F9244(_Unwind_Exception *a1)
{
}

void sub_1004F9258(id a1)
{
  uint64_t v1 = operator new(0x42C0uLL);
  sub_10056DFB4();
  off_1008D6280 = v1;
}

void sub_1004F9288(_Unwind_Exception *a1)
{
}

void sub_1004F929C(id a1)
{
  uint64_t v1 = operator new(0xF8uLL);
  sub_1003EC784((uint64_t)v1);
  off_1008D60B8 = v1;
}

void sub_1004F92CC(_Unwind_Exception *a1)
{
}

void sub_1004F92E0(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_1004F9310(_Unwind_Exception *a1)
{
}

void sub_1004F9430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F94D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F97F8(_Unwind_Exception *a1)
{
}

void sub_1004F9864()
{
}

void sub_1004F986C()
{
}

void sub_1004F9874(uint64_t a1, void *a2)
{
  id v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v5 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[BTVCBonjourLink] deviceDidStartScanning with error %@\n",  (uint8_t *)&v6,  0xCu);
    }

    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didStartScanningForType:") & 1) != 0) {
      [WeakRetained[3] enumerateKeysAndObjectsUsingBlock:&stru_10089DEC8];
    }
  }
}

void sub_1004F9960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004F9980(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v8 = (os_log_s *)(id)qword_1008F7710;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 UUIDString]);
      *(_DWORD *)std::stringbuf::string_type buf = 138412546;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[BTVCBonjourLink] Found device %@ with advertisementData %@\n",  buf,  0x16u);
    }

    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didDiscoverType:withData:fromPeer:peerInfo:") & 1) != 0)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      void v10[2] = sub_1004F9B24;
      void v10[3] = &unk_10089DF18;
      void v10[4] = WeakRetained;
      id v11 = v5;
      [v6 enumerateObjectsUsingBlock:v10];
    }
  }
}

void sub_1004F9AE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1004F9B24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 40);
  id v9 = v3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"BTVCBonjourLinkType"]);
  unsigned int v7 = [v6 unsignedIntValue];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"BTVCBonjourPayloadKey"]);
  [v5 btvcBonjourLink:v4 didDiscoverType:v7 withData:v8 fromPeer:*(void *)(a1 + 40) peerInfo:0];
}

void sub_1004F9BC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004F9BF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = (os_log_s *)(id)qword_1008F7710;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 UUIDString]);
    *(_DWORD *)std::stringbuf::string_type buf = 138412290;
    id v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Lost device %@\n", buf, 0xCu);
  }

  if (WeakRetained)
  {
    if (v6) {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v6 valueForKey:@"BTVCBonjourLinkType"]);
    }
    else {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([WeakRetained[3] allKeys]);
    }
    id v11 = (void *)v10;
    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didLosePeer:type:") & 1) != 0)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      void v12[2] = sub_1004F9DC4;
      void v12[3] = &unk_10089DF18;
      void v12[4] = WeakRetained;
      id v13 = v5;
      [v11 enumerateObjectsUsingBlock:v12];
    }
  }
}

void sub_1004F9D84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1004F9DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [ *(id *)(*(void *)(a1 + 32) + 40) btvcBonjourLink:didLosePeer:type: *(void *)(a1 + 32) *(void *)(a1 + 40) [v3 unsignedIntValue]];
}

void sub_1004F9E1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1004F9E30(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    unsigned int v7 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109378;
      int v13 = a2;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[BTVCBonjourLink] Advertising state update isStarted %d with error %@\n",  buf,  0x12u);
    }

    uint64_t v8 = (void *)WeakRetained[3];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    __int128 v9[2] = sub_1004F9F84;
    void v9[3] = &unk_10089DF68;
    char v11 = a2;
    void v9[4] = WeakRetained;
    id v10 = v5;
    [v8 enumerateKeysAndObjectsUsingBlock:v9];
  }
}

void sub_1004F9F60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1004F9F84(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40LL);
  if (*(_BYTE *)(a1 + 48))
  {
    if ((objc_opt_respondsToSelector(v6, "btvcBonjourLink:didStartAdvertisingType:") & 1) != 0) {
      objc_msgSend( *(id *)(*(void *)(a1 + 32) + 40),  "btvcBonjourLink:didStartAdvertisingType:",  *(void *)(a1 + 32),  objc_msgSend(v7, "unsignedIntValue"));
    }
  }

  else if ((objc_opt_respondsToSelector(v6, "btvcBonjourLink:didStopAdvertisingType:withError:") & 1) != 0)
  {
    [ *(id *)(*(void *)(a1 + 32) + 40) btvcBonjourLink:didStopAdvertisingType:withError: *(void *)(a1 + 32),  [v7 unsignedIntValue],  *(void *)(a1 + 40)];
  }
}

void sub_1004FA044( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004FA05C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v8 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412546;
      id v10 = v5;
      __int16 v11 = 2112;
      id v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[BTVCBonjourLink] Device didConnect %@ with error %@\n",  (uint8_t *)&v9,  0x16u);
    }

    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didConnectToPeer:transport:error:") & 1) != 0) {
      [WeakRetained[5] btvcBonjourLink:WeakRetained didConnectToPeer:v5 transport:0 error:v6];
    }
  }
}

void sub_1004FA16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004FA18C(uint64_t a1, void *a2)
{
  id v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[BTVCBonjourLink] Device didDisConnect %@",  (uint8_t *)&v6,  0xCu);
    }

    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didDisconnectFromPeer:error:") & 1) != 0) {
      [WeakRetained[5] btvcBonjourLink:WeakRetained didDisconnectFromPeer:v3 error:0];
    }
  }
}

void sub_1004FA27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004FA298(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v8 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412546;
      id v10 = v5;
      __int16 v11 = 2112;
      id v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[BTVCBonjourLink] Device didReceiveData from %@ with data %@\n",  (uint8_t *)&v9,  0x16u);
    }

    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didReceiveData:fromPeer:") & 1) != 0) {
      [WeakRetained[5] btvcBonjourLink:WeakRetained didReceiveData:v6 fromPeer:v5];
    }
  }
}

void sub_1004FA3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004FA650( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  objc_sync_exit(v17);

  _Unwind_Resume(a1);
}

void sub_1004FA6B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = (void *)*((void *)WeakRetained + 5);
    uint64_t v7 = *(void *)(a1 + 40);
    if (v8) {
      [v6 btvcBonjourLink:v5 didFailToStartAdvertisingOfType:v7 withError:v8];
    }
    else {
      [v6 btvcBonjourLink:v5 didStartAdvertisingType:v7];
    }
  }
}

void sub_1004FA71C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004FAA00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_sync_exit(v19);
  _Unwind_Resume(a1);
}

void sub_1004FAA84(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained[5] btvcBonjourLink:WeakRetained didStopAdvertisingType:*(void *)(a1 + 40) withError:v6];
  }
}

void sub_1004FAADC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1004FAD74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  objc_sync_exit(v13);
  _Unwind_Resume(a1);
}

void sub_1004FAEF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1004FAFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004FB0C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004FB1C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004FB1FC(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = WeakRetained;
  if (WeakRetained
    && (objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didSendData:toPeer:error:") & 1) != 0)
  {
    [v4[5] btvcBonjourLink:v4 didSendData:*(void *)(a1 + 32) toPeer:*(void *)(a1 + 40) error:v5];
  }
}

void sub_1004FB268( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1004FB2E8(uint64_t a1, uint64_t a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 8);
  *(void *)(a1 + 72) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1004FB32C(uint64_t a1, uint64_t a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 8);
  *(void *)(a1 + 80) = a2;
  return sub_100242FAC((uint64_t)v5);
}

void sub_1004FB370(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = a3;
  __int128 __dst = 0uLL;
  uint64_t v22 = 0LL;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100024238(&__dst, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    __int128 __dst = *(_OWORD *)a3;
    uint64_t v22 = *(void *)(a3 + 16);
  }

  id v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(2LL, 0LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1004FB5AC;
  block[3] = &unk_10087F900;
  int v20 = a2;
  void block[4] = a1;
  void block[5] = v8;
  dispatch_async(global_queue, block);
  dispatch_time_t v10 = dispatch_time(0LL, 15000000000LL);
  if (dispatch_group_wait(v8, v10))
  {
    __int16 v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Timed out printing all debug logs during force restart",  buf,  2u);
    }
  }

  uint64_t v12 = sub_1002E8D94();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v12 + 112LL))(v12, (unsigned __int16)a2, v5);
  if ((_DWORD)a2 == 132)
  {
    if (qword_1008D9060 != -1) {
      dispatch_once(&qword_1008D9060, &stru_10089E098);
    }
    uint64_t v13 = qword_1008D9058;
    sub_10002418C(buf, "Restart");
    sub_10002418C(__p, "OI_STATUS_INVALID_ROLE");
    sub_10040C784(0.0, v13, (uint64_t *)buf, (uint64_t *)__p);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(*(void **)buf);
    }
  }

  int v14 = *(char *)(v5 + 23);
  if (a4)
  {
    if (v14 < 0) {
      uint64_t v5 = *(void *)v5;
    }
    sub_1000B034C(a2, (const char *)v5);
  }

  if (v14 < 0) {
    uint64_t v5 = *(void *)v5;
  }
  sub_1000B03EC(a2, v5);
}

void sub_1004FB55C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004FB5AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1004FB5E8(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_10089E0B8);
  }
  sub_10040B768((uint64_t)off_1008D5EF8);
  if (qword_1008D6788 != -1) {
    dispatch_once(&qword_1008D6788, &stru_10089E0D8);
  }
  sub_10040ECDC((uint64_t)off_1008D6780);
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_10089E0F8);
  }
  sub_100429EC8((uint64_t)off_1008D60C8);
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089E118);
  }
  sub_1004983C8(qword_1008D61A0);
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_10089E138);
  }
  sub_10053736C((uint64_t)off_1008D67B0);
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_10089E158);
  }
  sub_1003CB5B8((uint64_t)off_1008D67E0);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089E178);
  }
  sub_100402D50((uint64_t)off_1008D5F48);
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_10089E198);
  }
  sub_1004B0F4C((uint64_t)off_1008D60E8);
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_10089E1B8);
  }
  sub_1002217A0((uint64_t)off_1008D60D8);
  if (qword_1008D92C0 != -1) {
    dispatch_once(&qword_1008D92C0, &stru_10089E1D8);
  }
  sub_1002930A0(qword_1008D92B8);
  uint64_t v3 = sub_1002E8EE8();
  (*(void (**)(uint64_t))(*(void *)v3 + 152LL))(v3);
  uint64_t v4 = sub_1002E6E9C();
  nullsub_63(v4, v5);
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089E1F8);
  }
  sub_1005308B4((uint64_t)off_1008D67A0, (uint64_t)&__p);
  if (v47 < 0) {
    operator delete(__p);
  }
  if (qword_1008D60C0 != -1) {
    dispatch_once(&qword_1008D60C0, &stru_10089E218);
  }
  sub_1003FBF84((uint64_t)off_1008D60B8);
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_10089E238);
  }
  sub_10024D678(qword_1008D9150);
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_10089E258);
  }
  sub_10036A6E0((void *)qword_1008D9048);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_10089E278);
  }
  sub_10028F93C((uint64_t)off_1008D67C0);
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_10089E298);
  }
  sub_10038ABC8(qword_1008D9260);
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_10089E2B8);
  }
  sub_10055BD1C((void *)qword_1008D5F58);
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_10089E2D8);
  }
  sub_10057C490((uint64_t)off_1008D6280);
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_10089E2F8);
  }
  sub_1005B9BD4((uint64_t)off_1008D5F08);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089E318);
  }
  sub_10060A338((uint64_t)off_1008D6600);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089E338);
  }
  sub_100630E30(qword_1008D5F18);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089E358);
  }
  sub_1005DBB20((uint64_t)off_1008D5F28);
  if (qword_1008D92A8 != -1) {
    dispatch_once(&qword_1008D92A8, &stru_10089E378);
  }
  sub_10064CBBC((void *)qword_1008D92A0);
  if (qword_1008D6618 != -1) {
    dispatch_once(&qword_1008D6618, &stru_10089E398);
  }
  sub_100505D58(qword_1008D6610);
  if (qword_1008D9178 != -1) {
    dispatch_once(&qword_1008D9178, &stru_10089E3B8);
  }
  sub_100533A38(qword_1008D9170);
  uint64_t v6 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 352LL))(v6))
  {
    if (qword_1008D9700 != -1) {
      dispatch_once(&qword_1008D9700, &stru_10089E3D8);
    }
    sub_1003AD03C((uint64_t)off_1008D96F8);
  }

  sub_1001EE2A0();
  context = objc_autoreleasePoolPush();
  CFArrayRef v7 = CFPreferencesCopyKeyList(@"com.apple.BTServer", kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  id v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 136315138;
    *(void *)id v50 = "com.apple.BTServer";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------ %s -------------------",  buf,  0xCu);
  }

  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  id obj = v7;
  id v9 = -[__CFArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v42,  v52,  16LL);
  if (v9)
  {
    uint64_t v10 = *(void *)v43;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(const __CFString **)(*((void *)&v42 + 1) + 8LL * (void)i);
        uint64_t v13 = (void *)CFPreferencesCopyValue( v12,  @"com.apple.BTServer",  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost);
        int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 description]);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 stringByReplacingOccurrencesOfString:@"\n" withString:@" "]);

        char v16 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 138412546;
          *(void *)id v50 = v12;
          *(_WORD *)&v50[8] = 2112;
          int v51 = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "statedump: \t%@ -> %@", buf, 0x16u);
        }
      }

      id v9 = -[__CFArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v42,  v52,  16LL);
    }

    while (v9);
  }

  CFArrayRef v17 = CFPreferencesCopyKeyList( @"com.apple.MobileBluetooth.debug",  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost);
  char v18 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 136315138;
    *(void *)id v50 = "com.apple.MobileBluetooth.debug";
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------ %s -------------------",  buf,  0xCu);
  }

  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  uint64_t v36 = v17;
  id v19 = -[__CFArray countByEnumeratingWithState:objects:count:]( v36,  "countByEnumeratingWithState:objects:count:",  &v38,  v48,  16LL);
  if (v19)
  {
    uint64_t v20 = *(void *)v39;
    do
    {
      for (uint64_t j = 0LL; j != v19; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v39 != v20) {
          objc_enumerationMutation(v36);
        }
        uint64_t v22 = *(const __CFString **)(*((void *)&v38 + 1) + 8LL * (void)j);
        uint64_t v23 = (void *)CFPreferencesCopyValue( v22,  @"com.apple.MobileBluetooth.debug",  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 description]);
        int v25 = (void *)objc_claimAutoreleasedReturnValue([v24 stringByReplacingOccurrencesOfString:@"\n" withString:@" "]);

        uint64_t v26 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 138412546;
          *(void *)id v50 = v22;
          *(_WORD *)&v50[8] = 2112;
          int v51 = v25;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "statedump: \t%@ -> %@", buf, 0x16u);
        }
      }

      id v19 = -[__CFArray countByEnumeratingWithState:objects:count:]( v36,  "countByEnumeratingWithState:objects:count:",  &v38,  v48,  16LL);
    }

    while (v19);
  }

  objc_autoreleasePoolPop(context);
  __int16 v27 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 136315138;
    *(void *)id v50 = "os_log state";
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------ %s -------------------",  buf,  0xCu);
    __int16 v27 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v28 = os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
    BOOL v29 = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)std::stringbuf::string_type buf = 67109376;
    *(_DWORD *)id v50 = v28;
    *(_WORD *)&uint8_t v50[4] = 1024;
    *(_DWORD *)&v50[6] = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "statedump: os_log settings: info %d, debug %d",  buf,  0xEu);
  }

  sub_1001EE348(a2);
  if (a3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 456LL))(a1))
    {
      double v30 = sub_1001F142C(a2);
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)a1 + 496LL))(a1, v31, v30);
    }
  }

void sub_1004FC08C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void sub_1004FC118(uint64_t a1, int a2)
{
}

uint64_t sub_1004FC128(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_1004FB5E8(a1, 3705LL, 1LL);
    sub_1000B00F4();
  }

  return sub_1000AFE1C();
}

void sub_1004FC14C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (qword_1008F1188 != -1) {
    dispatch_once(&qword_1008F1188, &stru_10089E078);
  }
  uint64_t v5 = (void (*)(id, uint64_t, uint64_t))off_1008F1180;
  if (off_1008F1180)
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
    uint64_t v6 = getpid();
    v5(v7, a3, v6);
  }

void sub_1004FC200( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1004FC214(id a1)
{
  off_1008F1180 = dlsym((void *)0xFFFFFFFFFFFFFFFFLL, "WriteStackshotReportWithPID");
}

void sub_1004FC23C(id a1)
{
  uint64_t v1 = operator new(0x18uLL);
  *(void *)uint64_t v1 = 0LL;
  v1[2] = 0;
  *((_BYTE *)v1 + 12) = 0;
  v1[4] = 0;
  qword_1008D9058 = (uint64_t)v1;
}

void sub_1004FC26C(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10040749C((uint64_t)v1);
  off_1008D5EF8 = v1;
}

void sub_1004FC29C(_Unwind_Exception *a1)
{
}

void sub_1004FC2B0(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10040D0A0((uint64_t)v1);
  off_1008D6780 = v1;
}

void sub_1004FC2E0(_Unwind_Exception *a1)
{
}

void sub_1004FC2F4(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_1004FC324(_Unwind_Exception *a1)
{
}

void sub_1004FC338(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1004FC368(_Unwind_Exception *a1)
{
}

void sub_1004FC37C(id a1)
{
  uint64_t v1 = operator new(0x198uLL);
  sub_100534AB0();
  off_1008D67B0 = v1;
}

void sub_1004FC3AC(_Unwind_Exception *a1)
{
}

void sub_1004FC3C0(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_1003C97E4((uint64_t)v1);
  off_1008D67E0 = v1;
}

void sub_1004FC3F0(_Unwind_Exception *a1)
{
}

void sub_1004FC404(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1004FC434(_Unwind_Exception *a1)
{
}

void sub_1004FC448(id a1)
{
  uint64_t v1 = operator new(0x4A8uLL);
  sub_100499870();
  off_1008D60E8 = v1;
}

void sub_1004FC478(_Unwind_Exception *a1)
{
}

void sub_1004FC48C(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_1004FC4BC(_Unwind_Exception *a1)
{
}

void sub_1004FC4D0(id a1)
{
  uint64_t v1 = operator new(0x88uLL);
  v1[2] = 0LL;
  void *v1 = @"com.apple.MobileAsset.MobileBluetoothAssets";
  v1[1] = v1 + 2;
  v1[3] = 0LL;
  *((_DWORD *)v1 + _Block_object_dispose(va, 8) = 0;
  v1[5] = 0LL;
  v1[6] = 0LL;
  v1[7] = 0LL;
  sub_100242DC4(v1 + 8);
  *((_BYTE *)v1 + 12_Block_object_dispose(va, 8) = 0;
  qword_1008D92B8 = (uint64_t)v1;
}

void sub_1004FC540(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 4_Block_object_dispose(va, 8) = v6;
    operator delete(v6);
  }

  sub_1002948EC(v2, *(void **)(v1 + 16));

  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void sub_1004FC57C(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_1004FC5AC(_Unwind_Exception *a1)
{
}

void sub_1004FC5C0(id a1)
{
  uint64_t v1 = operator new(0xF8uLL);
  sub_1003EC784((uint64_t)v1);
  off_1008D60B8 = v1;
}

void sub_1004FC5F0(_Unwind_Exception *a1)
{
}

void sub_1004FC604(id a1)
{
  uint64_t v1 = operator new(0xE8uLL);
  sub_100243588((uint64_t)v1);
  qword_1008D9150 = (uint64_t)v1;
}

void sub_1004FC634(_Unwind_Exception *a1)
{
}

void sub_1004FC648(id a1)
{
  uint64_t v1 = operator new(0x70uLL);
  sub_1003639FC((uint64_t)v1);
  qword_1008D9048 = (uint64_t)v1;
}

void sub_1004FC678(_Unwind_Exception *a1)
{
}

void sub_1004FC68C(id a1)
{
  uint64_t v1 = operator new(0x1A0uLL);
  sub_1002769A4();
  off_1008D67C0 = v1;
}

void sub_1004FC6BC(_Unwind_Exception *a1)
{
}

void sub_1004FC6D0(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100380B10();
  qword_1008D9260 = (uint64_t)v1;
}

void sub_1004FC700(_Unwind_Exception *a1)
{
}

void sub_1004FC714(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_100551DD0();
  qword_1008D5F58 = (uint64_t)v1;
}

void sub_1004FC744(_Unwind_Exception *a1)
{
}

void sub_1004FC758(id a1)
{
  uint64_t v1 = operator new(0x42C0uLL);
  sub_10056DFB4();
  off_1008D6280 = v1;
}

void sub_1004FC788(_Unwind_Exception *a1)
{
}

void sub_1004FC79C(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1004FC7CC(_Unwind_Exception *a1)
{
}

void sub_1004FC7E0(id a1)
{
  uint64_t v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_1004FC810(_Unwind_Exception *a1)
{
}

void sub_1004FC824(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_1004FC854(_Unwind_Exception *a1)
{
}

void sub_1004FC868(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_1004FC898(_Unwind_Exception *a1)
{
}

void sub_1004FC8AC(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10064B7C8();
  qword_1008D92A0 = (uint64_t)v1;
}

void sub_1004FC8DC(_Unwind_Exception *a1)
{
}

void sub_1004FC8F0(id a1)
{
  uint64_t v1 = operator new(0x48uLL);
  sub_100502AF0((uint64_t)v1);
  qword_1008D6610 = (uint64_t)v1;
}

void sub_1004FC920(_Unwind_Exception *a1)
{
}

void sub_1004FC934(id a1)
{
  uint64_t v1 = operator new(0x90uLL);
  sub_100532F0C((uint64_t)v1);
  qword_1008D9170 = (uint64_t)v1;
}

void sub_1004FC964(_Unwind_Exception *a1)
{
}

void sub_1004FC978(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003AA490((uint64_t)v1);
  off_1008D96F8 = v1;
}

void sub_1004FC9A8(_Unwind_Exception *a1)
{
}

void sub_1004FC9BC()
{
  BOOL v0 = objc_autoreleasePoolPush();
  qword_1008F7558 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.A2DP");
  qword_1008F7560 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.AACP");
  qword_1008F7568 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Accessory");
  qword_1008F7570 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Audio");
  qword_1008F7578 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Core");
  qword_1008F7580 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Coex");
  qword_1008F7588 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.CloudPairing");
  qword_1008F7590 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Discovery");
  qword_1008F7598 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Handsfree");
  qword_1008F75A0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE");
  qword_1008F75A8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Security");
  qword_1008F75B0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.GATT");
  qword_1008F75B8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Scan");
  qword_1008F75C0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.NVRAM");
  qword_1008F75C8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.ScalablePipe");
  qword_1008F75D0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Remote");
  qword_1008F75D8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.SDP");
  qword_1008F75E0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Security");
  qword_1008F75E8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Telephony");
  qword_1008F75F0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.XPC");
  qword_1008F75F8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.PipeMgr");
  qword_1008F7600 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MagicPairing");
  qword_1008F7608 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MobileAsset");
  qword_1008F7610 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.L2CAPChannel");
  qword_1008F7618 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Phonebook");
  qword_1008F7620 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Connection");
  qword_1008F7628 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.App");
  qword_1008F7630 = (uint64_t)os_log_create("com.apple.magnetpacketlog", "bluetooth");
  qword_1008F7640 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.ANCSAuthorization");
  qword_1008F7648 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Advertise");
  qword_1008F7650 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.AdvertiseEx");
  qword_1008F7658 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.App");
  qword_1008F7660 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Device");
  qword_1008F7668 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Power");
  qword_1008F7670 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Error");
  qword_1008F7678 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Local");
  qword_1008F7680 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.AppRestoration");
  qword_1008F7688 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.USBPairing");
  qword_1008F7690 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.SonyGamepadPairing");
  qword_1008F7698 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.BTResourceManager");
  qword_1008F76A0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LinkQuality");
  qword_1008F76A8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.RFCOMMChannel");
  qword_1008F76B0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MacCoex");
  qword_1008F76B8 = (uint64_t)os_log_create("com.apple.bluetooth", "ExposureNotification");
  qword_1008F76C0 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Crypto");
  qword_1008F76C8 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Manager");
  qword_1008F76D0 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Database");
  qword_1008F76D8 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Scanning");
  qword_1008F76E0 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Advertising");
  qword_1008F76E8 = (uint64_t)os_log_create("com.apple.bluetooth", "SensorTracking");
  qword_1008F76F0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LEAudio");
  qword_1008F76F8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.BandSwitchManager");
  qword_1008F7700 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.EventDispatcher");
  qword_1008F7708 = (uint64_t)os_log_create("com.apple.bluetooth", "AOPInterfaceManager");
  qword_1008F7710 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.VirtualController");
  qword_1008F7718 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.XPCParameters");
  if (sub_100487C4C()) {
    uint64_t v1 = ct_green_tea_logger_create("bluetooth");
  }
  else {
    uint64_t v1 = 0LL;
  }
  qword_1008F7720 = v1;
  qword_1008F7728 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LEA");
  qword_1008F7730 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.HID");
  qword_1008F7738 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Braille");
  qword_1008F7740 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.FastconnectACL");
  qword_1008F7748 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.FastConnect");
  qword_1008F7750 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LPM");
  qword_1008F7758 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.BTDaemon");
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1004FD008(uint64_t a1)
{
  *(void *)a1 = off_10089E408;
  *(void *)(a1 + _Block_object_dispose(va, 8) = &off_10089E450;
  sub_100242DC4(a1 + 24);
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 91) = 0;
  return a1;
}

uint64_t sub_1004FD05C(uint64_t a1)
{
  *(void *)a1 = off_10089E408;
  *(void *)(a1 + _Block_object_dispose(va, 8) = &off_10089E450;
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  sub_10023BF24(a1 + 96, *(void **)(a1 + 104));
  sub_100242E28(a1 + 24);
  return a1;
}

void sub_1004FD0B4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1004FD05C(a1);
  operator delete(v1);
}

void sub_1004FD0C8(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089E490);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 8);
  *(void *)(a1 + 16) = 0LL;
}

void sub_1004FD124(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089E490);
  }
  sub_100009168((uint64_t)off_1008D60A8 + 80, a1 + 8);
}

uint64_t sub_1004FD178(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 24);
  if (!*(_BYTE *)(a1 + 88))
  {
    *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 1;
    __int16 v4 = 0;
    int v3 = 0;
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10089E490);
    }
    sub_100431644((uint64_t)off_1008D60A8, (uint64_t)&v3);
    *(_DWORD *)(a1 + 89) = v3;
    *(_WORD *)(a1 + 93) = v4;
    sub_1004FD230((IOHIDManagerRef *)a1);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1004FD21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1004FD230(IOHIDManagerRef *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7688;
  if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Setting up USB Listener for USB Pairing",  buf,  2u);
  }

  sub_1004FDD48((uint64_t)a1);
  strcpy((char *)buf, "\v");
  CFNumberRef v33 = CFNumberCreate(0LL, kCFNumberShortType, buf);
  __int16 valuePtr = 1452;
  CFNumberRef v32 = CFNumberCreate(0LL, kCFNumberShortType, &valuePtr);
  __int16 v46 = 615;
  CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberShortType, &v46);
  __int16 v45 = 620;
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberShortType, &v45);
  __int16 v44 = 668;
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberShortType, &v44);
  __int16 v43 = 666;
  CFNumberRef v6 = CFNumberCreate(0LL, kCFNumberShortType, &v43);
  __int16 v42 = 671;
  CFNumberRef v7 = CFNumberCreate(0LL, kCFNumberShortType, &v42);
  __int16 v41 = 800;
  CFNumberRef v31 = CFNumberCreate(0LL, kCFNumberShortType, &v41);
  __int16 v40 = 801;
  CFNumberRef v30 = CFNumberCreate(0LL, kCFNumberShortType, &v40);
  __int16 v39 = 802;
  CFNumberRef cf = CFNumberCreate(0LL, kCFNumberShortType, &v39);
  __int16 v38 = 617;
  CFNumberRef v27 = CFNumberCreate(0LL, kCFNumberShortType, &v38);
  __int16 v37 = 613;
  CFNumberRef v29 = CFNumberCreate(0LL, kCFNumberShortType, &v37);
  __int16 v36 = 803;
  CFNumberRef v25 = CFNumberCreate(0LL, kCFNumberShortType, &v36);
  __int16 v35 = 804;
  CFNumberRef v26 = CFNumberCreate(0LL, kCFNumberShortType, &v35);
  if (!a1[2])
  {
    IOHIDManagerRef v8 = IOHIDManagerCreate(kCFAllocatorDefault, 0);
    a1[2] = v8;
    if (v8)
    {
      Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      theDict = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      char v18 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      id v19 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      uint64_t v20 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      uint64_t v21 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      uint64_t v22 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      uint64_t v23 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      uint64_t v24 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      int v14 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      id v15 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      char v16 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
      uint64_t v13 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, 0LL);
      CFDictionaryAddValue(Mutable, @"Transport", @"USB");
      CFDictionaryAddValue(Mutable, @"VendorID", v32);
      CFDictionaryAddValue(Mutable, @"ProductID", v3);
      CFDictionaryAddValue(Mutable, @"PrimaryUsage", v33);
      CFDictionaryAddValue(theDict, @"Transport", @"USB");
      CFDictionaryAddValue(theDict, @"VendorID", v32);
      CFDictionaryAddValue(theDict, @"ProductID", v4);
      CFDictionaryAddValue(theDict, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v18, @"Transport", @"USB");
      CFDictionaryAddValue(v18, @"VendorID", v32);
      CFDictionaryAddValue(v18, @"ProductID", v5);
      CFDictionaryAddValue(v18, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v19, @"Transport", @"USB");
      CFDictionaryAddValue(v19, @"VendorID", v32);
      CFDictionaryAddValue(v19, @"ProductID", v6);
      CFDictionaryAddValue(v19, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v20, @"Transport", @"USB");
      CFDictionaryAddValue(v20, @"VendorID", v32);
      CFDictionaryAddValue(v20, @"ProductID", v7);
      CFDictionaryAddValue(v20, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v21, @"Transport", @"USB");
      CFDictionaryAddValue(v21, @"VendorID", v32);
      CFDictionaryAddValue(v21, @"ProductID", v31);
      CFDictionaryAddValue(v21, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v22, @"Transport", @"USB");
      CFDictionaryAddValue(v22, @"VendorID", v32);
      CFDictionaryAddValue(v22, @"ProductID", v30);
      CFDictionaryAddValue(v22, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v23, @"Transport", @"USB");
      CFDictionaryAddValue(v23, @"VendorID", v32);
      CFDictionaryAddValue(v23, @"ProductID", cf);
      CFDictionaryAddValue(v23, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v24, @"Transport", @"USB");
      CFDictionaryAddValue(v24, @"VendorID", v32);
      CFDictionaryAddValue(v24, @"ProductID", v27);
      CFDictionaryAddValue(v24, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v14, @"Transport", @"USB");
      CFDictionaryAddValue(v14, @"VendorID", v32);
      CFDictionaryAddValue(v14, @"ProductID", v25);
      CFDictionaryAddValue(v14, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v15, @"Transport", @"USB");
      CFDictionaryAddValue(v15, @"VendorID", v32);
      CFDictionaryAddValue(v15, @"ProductID", v29);
      CFDictionaryAddValue(v15, @"PrimaryUsage", v33);
      CFDictionaryAddValue(v16, @"Transport", @"USB");
      CFDictionaryAddValue(v16, @"VendorID", v32);
      CFDictionaryAddValue(v16, @"ProductID", v26);
      CFDictionaryAddValue(v16, @"PrimaryUsage", v33);
      CFArrayAppendValue(v13, Mutable);
      CFArrayAppendValue(v13, theDict);
      CFArrayAppendValue(v13, v18);
      CFArrayAppendValue(v13, v19);
      CFArrayAppendValue(v13, v20);
      CFArrayAppendValue(v13, v21);
      CFArrayAppendValue(v13, v22);
      CFArrayAppendValue(v13, v23);
      CFArrayAppendValue(v13, v24);
      CFArrayAppendValue(v13, v14);
      CFArrayAppendValue(v13, v15);
      CFArrayAppendValue(v13, v16);
      IOHIDManagerSetDeviceMatchingMultiple(a1[2], v13);
      if (IOHIDManagerOpen(a1[2], 0))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
          sub_10068B374();
        }
      }

      else
      {
        IOHIDManagerRegisterDeviceMatchingCallback(a1[2], (IOHIDDeviceCallback)sub_1004FDDB0, a1);
        IOHIDManagerRegisterDeviceRemovalCallback(a1[2], (IOHIDDeviceCallback)sub_1004FDE08, a1);
        uint64_t v10 = a1[2];
        Main = CFRunLoopGetMain();
        IOHIDManagerScheduleWithRunLoop(v10, Main, kCFRunLoopCommonModes);
        uint64_t v12 = (os_log_s *)qword_1008F7688;
        if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Created USB HIDManager", v34, 2u);
        }
      }

      if (Mutable) {
        CFRelease(Mutable);
      }
      if (theDict) {
        CFRelease(theDict);
      }
      if (v18) {
        CFRelease(v18);
      }
      if (v19) {
        CFRelease(v19);
      }
      if (v20) {
        CFRelease(v20);
      }
      if (v21) {
        CFRelease(v21);
      }
      if (v22) {
        CFRelease(v22);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (v24) {
        CFRelease(v24);
      }
      if (v14) {
        CFRelease(v14);
      }
      if (v15) {
        CFRelease(v15);
      }
      if (v16) {
        CFRelease(v16);
      }
      if (v13) {
        CFRelease(v13);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR))
    {
      sub_10068B348();
    }
  }

  if (v33) {
    CFRelease(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v26) {
    CFRelease(v26);
  }
}

uint64_t sub_1004FDC5C(uint64_t a1)
{
  return sub_1004FD178(a1 - 8);
}

uint64_t sub_1004FDC64(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7688;
  if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "USBPairingManager::stackWillStop enter",  buf,  2u);
  }

  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v7 = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 24);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  sub_1004FDD48(a1);
  CFNumberRef v3 = (os_log_s *)qword_1008F7688;
  if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFNumberRef v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "USBPairingManager::stackWillStop exit", v5, 2u);
  }

  return sub_100242FAC((uint64_t)buf);
}

void sub_1004FDD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1004FDD48(uint64_t a1)
{
  uint64_t v1 = *(__IOHIDManager **)(a1 + 16);
  if (v1)
  {
    Main = CFRunLoopGetMain();
    IOHIDManagerUnscheduleFromRunLoop(v1, Main, kCFRunLoopCommonModes);
    IOHIDManagerClose(*(IOHIDManagerRef *)(a1 + 16), 0);
    CFRelease(*(CFTypeRef *)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
  }

uint64_t sub_1004FDDA0(uint64_t a1)
{
  return sub_1004FDC64(a1 - 8);
}

void sub_1004FDDB0(uint64_t a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  if (qword_1008D9288 != -1) {
    dispatch_once(&qword_1008D9288, &stru_10089E470);
  }
  sub_1004FE5D8(qword_1008D9280, a1, a4);
}

void sub_1004FDE08(uint64_t a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  if (qword_1008D9288 != -1) {
    dispatch_once(&qword_1008D9288, &stru_10089E470);
  }
  sub_1004FDE58(qword_1008D9280, a2, a4);
}

void sub_1004FDE58(uint64_t a1, uint64_t a2, __IOHIDDevice *a3)
{
  uint64_t v5 = sub_1004FE004(a1, a3);
  CFNumberRef v6 = (os_log_s *)qword_1008F7688;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      sub_1003D01A0(v5, (uint64_t)__p);
      IOHIDManagerRef v8 = v11 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      uint64_t v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Disconnecting USB device to initiate Bluetooth Connection to device %s",  buf,  0xCu);
      if (v11 < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_10089E4B0);
    }
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    __int128 v9[2] = sub_1004FE1EC;
    void v9[3] = &unk_10087EB20;
    void v9[4] = v5;
    sub_100424EB4((uint64_t)off_1008D60C8, v9);
    *(_BYTE *)(v5 + 1296) = 0;
    sub_1004FE288(a1, v5);
    sub_1004FE428(a1, v5);
  }

  else if (v7)
  {
    *(_DWORD *)std::stringbuf::string_type __p = 134217984;
    *(void *)&__p[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Can't find device with ioHIDRef %p", __p, 0xCu);
  }

uint64_t sub_1004FE004(uint64_t a1, __IOHIDDevice *a2)
{
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 24);
  if (a2)
  {
    CFTypeRef Property = IOHIDDeviceGetProperty(a2, @"LocationID");
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(Property);
    CFNumberRef v6 = *(void **)(a1 + 96);
    BOOL v7 = (void *)(a1 + 104);
    if (v6 == v7)
    {
LABEL_10:
      uint64_t v12 = 0LL;
    }

    else
    {
      while (1)
      {
        int v8 = *((_DWORD *)v6 + 10);
        id v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            id v9 = (void *)*v9;
          }

          while (v9);
        }

        else
        {
          do
          {
            uint64_t v10 = (void *)v6[2];
            BOOL v11 = *v10 == (void)v6;
            CFNumberRef v6 = v10;
          }

          while (!v11);
        }

        CFNumberRef v6 = v10;
        if (v10 == v7) {
          goto LABEL_10;
        }
      }

      uint64_t v13 = (os_log_s *)qword_1008F7688;
      if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003D01A0(v6[4], (uint64_t)__p);
        int v14 = v20;
        id v15 = (void **)__p[0];
        unsigned int v16 = [v5 intValue];
        CFArrayRef v17 = __p;
        if (v14 < 0) {
          CFArrayRef v17 = v15;
        }
        *(_DWORD *)std::stringbuf::string_type buf = 136315394;
        uint64_t v23 = v17;
        __int16 v24 = 1024;
        unsigned int v25 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Found HID device %s with location ID %d",  buf,  0x12u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v12 = v6[4];
    }
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  sub_100242FAC((uint64_t)v21);
  return v12;
}

void sub_1004FE1A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  sub_100242FAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1004FE1EC(uint64_t a1)
{
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_10089E4B0);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  memset(&__p, 0, sizeof(__p));
  sub_100424360((int64x2_t *)off_1008D60C8, v2, 32, &__p, 2LL);
}

void sub_1004FE26C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004FE288(uint64_t a1, uint64_t a2)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 24);
  BOOL v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  sub_100240540(&v11, a1 + 120);
  sub_100242F54((uint64_t)v14);
  CFNumberRef v4 = (os_log_s *)qword_1008F7688;
  if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v5 = v10 >= 0 ? __p : (void **)__p[0];
    int v6 = *(unsigned __int8 *)(a2 + 1296);
    *(_DWORD *)std::stringbuf::string_type buf = 136446466;
    unsigned int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Device %{public}s reported a USB State changed to %d",  buf,  0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  BOOL v7 = v11;
  if (v11 != v12)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v7 + 16LL))(*v7, a2);
      ++v7;
    }

    while (v7 != v12);
    BOOL v7 = v11;
  }

  if (v7)
  {
    uint64_t v12 = v7;
    operator delete(v7);
  }

  return sub_100242FAC((uint64_t)v14);
}

void sub_1004FE3EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FE428(uint64_t a1, unint64_t a2)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 24);
  if (a2)
  {
    int v6 = *(void **)(a1 + 104);
    uint64_t v5 = (uint64_t *)(a1 + 104);
    CFNumberRef v4 = v6;
    if (!v6) {
      goto LABEL_13;
    }
    BOOL v7 = (uint64_t **)(v5 - 1);
    int v8 = v5;
    do
    {
      unint64_t v9 = v4[4];
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        BOOL v11 = v4;
      }
      else {
        BOOL v11 = v4 + 1;
      }
      if (v10) {
        int v8 = v4;
      }
      CFNumberRef v4 = (void *)*v11;
    }

    while (*v11);
    if (v8 != v5 && v8[4] <= a2)
    {
      uint64_t v13 = (os_log_s *)qword_1008F7688;
      if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003D01A0(a2, (uint64_t)__p);
        int v14 = v17 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::stringbuf::string_type buf = 136315138;
        char v20 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Removing HID device %s from map",  buf,  0xCu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }

      sub_1001FDBCC(v7, v8);
      operator delete(v8);
    }

    else
    {
LABEL_13:
      uint64_t v12 = (os_log_s *)qword_1008F7688;
      if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR))
      {
        sub_1003D01A0(a2, (uint64_t)__p);
        sub_10068B3A0((char *)__p, (uint64_t)buf, v12);
      }
    }
  }

  return sub_100242FAC((uint64_t)v18);
}

void sub_1004FE5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1004FE5D8(uint64_t a1, uint64_t a2, __IOHIDDevice *a3)
{
  int v6 = (os_log_s *)qword_1008F7688;
  if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = os_variant_is_recovery("com.apple.bluetooth");
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "handleIncomingUSBDevice called isBaseSystem %d",  buf,  8u);
  }

  BOOL v7 = (os_log_s *)qword_1008F7688;
  if (a2 && a3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found USB Device", buf, 2u);
    }

    __n128 bytes = 0uLL;
    if (IOHIDDeviceOpen(a3, 0))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
        sub_10068B538();
      }
      return;
    }

    __int128 v55 = 0u;
    memset(v56, 0, sizeof(v56));
    *(_OWORD *)std::stringbuf::string_type buf = 0u;
    __int128 v54 = 0u;
    CFIndex pReportLength = 77LL;
    IOReturn Report = IOHIDDeviceGetReport(a3, kIOHIDReportTypeFeature, 52LL, buf, &pReportLength);
    unint64_t v9 = (os_log_s *)qword_1008F7688;
    if (Report)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
        sub_10068B4D8();
      }
      dispatch_time_t v10 = dispatch_time(0LL, 5000000000LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1004FF6CC;
      block[3] = &unk_10087EB20;
      void block[4] = a1;
      dispatch_after(v10, &_dispatch_main_q, block);
      return;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v46.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Successfully got device report",  (uint8_t *)&v46,  2u);
    }

    int v39 = *(_DWORD *)&buf[4];
    __int16 v40 = *(_WORD *)&buf[8];
    if (*(_DWORD *)&buf[4] | *(unsigned __int16 *)&buf[8])
    {
      int v36 = *(_DWORD *)&buf[4];
      __int16 v37 = *(_WORD *)&buf[8];
      memset(&__p, 0, sizeof(__p));
      sub_10002418C(&__p, (char *)((unint64_t)buf | 0xD));
      BOOL v11 = (os_log_s *)qword_1008F7688;
      BOOL v12 = os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT);
      if (v12)
      {
        sub_1003FE1B4((unsigned __int8 *)&v36, &v46);
        if ((v46.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v13 = &v46;
        }
        else {
          uint64_t v13 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__int16 v42 = 136315394;
        *(void *)&void v42[4] = v13;
        __int16 v43 = 2082;
        __int16 v44 = p_p;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "BT ADDR %s for device name: %{public}s",  v42,  0x16u);
      }

      id v15 = (std::string *)sub_1004FEDB8(v12, (uint64_t)&v39);
      if (v15)
      {
        sub_1004FEEF4(a1, a3, (unint64_t)v15);
        if (sub_1004FF1B4(a1, a3))
        {
          v15[54].__r_.__value_.__s.__data_[0] = 1;
          sub_1004FE288(a1, (uint64_t)v15);
LABEL_66:
          return;
        }

        unsigned int v16 = (os_log_s *)qword_1008F7688;
        if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v46.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Did not find existing link key. Must generate new one",  (uint8_t *)&v46,  2u);
        }
      }

      CCRNGStatus v17 = CCRandomGenerateBytes(&bytes, 0x10uLL);
      int v18 = (os_log_s *)qword_1008F7688;
      if (v17)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
          sub_10068B4AC();
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v46.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Successfully generated Link Key preparing it to send to device",  (uint8_t *)&v46,  2u);
        }

        if (sub_1004FF3E0(a1, a3, (int8x16_t *)&bytes))
        {
          id v19 = (os_log_s *)qword_1008F7688;
          if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
            sub_10068B434((uint64_t *)&__p, v19, v20);
          }
        }

        else
        {
          __n128 v51 = 0uLL;
          int v52 = 0;
          sub_100525274(&v51, &bytes, 5u);
          if (!v15)
          {
            if (qword_1008D5F50 != -1) {
              dispatch_once(&qword_1008D5F50, &stru_10089E4D0);
            }
            id v15 = (std::string *)sub_1003FFEB0(off_1008D5F48, (uint64_t)&v36, 1);
          }

          *(void *)__int16 v42 = 0LL;
          *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
          sub_1000B0400((uint64_t)v42);
          v46.__r_.__value_.__r.__words[0] = *(int *)v42;
          v46.__r_.__value_.__l.__size_ = *(__int16 *)&v42[4];
          sub_1003D0F60(v15, &__p, &v46);
          v15[24].__r_.__value_.__s.__data_[2] = 1;
          sub_1003DF238((uint64_t)v15, 1);
          int v21 = buf[10];
          int v22 = buf[11];
          unsigned int v31 = buf[12];
          uint64_t v34 = 0LL;
          int valuePtr = 0;
          CFTypeRef Property = (const __CFNumber *)IOHIDDeviceGetProperty(a3, @"ProductID");
          __int16 v24 = (const __CFNumber *)IOHIDDeviceGetProperty(a3, @"VendorID");
          unsigned int v25 = (const __CFNumber *)IOHIDDeviceGetProperty(a3, @"VersionNumber");
          if (Property) {
            CFNumberGetValue(Property, kCFNumberIntType, &valuePtr);
          }
          if (v24) {
            CFNumberGetValue(v24, kCFNumberIntType, &v34);
          }
          if (v25) {
            CFNumberGetValue(v25, kCFNumberIntType, (char *)&v34 + 4);
          }
          if (qword_1008D5F50 != -1) {
            dispatch_once(&qword_1008D5F50, &stru_10089E4D0);
          }
          sub_1004006DC((uint64_t)off_1008D5F48, (uint64_t)v15, (v21 << 16) | (v22 << 8) | v31);
          if (qword_1008D5F50 != -1) {
            dispatch_once(&qword_1008D5F50, &stru_10089E4D0);
          }
          uint64_t v26 = (*(uint64_t (**)(void *, std::string *, uint64_t))(*(void *)off_1008D5F48 + 48LL))( off_1008D5F48,  v15,  1LL);
          sub_1004FF554(v26, (unsigned __int8 *)v15, &v51);
          v15[54].__r_.__value_.__s.__data_[0] = 1;
          CFNumberRef v27 = (os_log_s *)qword_1008F7688;
          if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003D0100((uint64_t)v15, (uint64_t)v42);
            BOOL v28 = v45 >= 0 ? v42 : *(_BYTE **)v42;
            LODWORD(v46.__r_.__value_.__l.__data_) = 136447234;
            *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
            WORD2(v46.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v46.__r_.__value_.__r.__words[1] + 6) = 76;
            WORD1(v46.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v46.__r_.__value_.__r.__words[2]) = v34;
            __int16 v47 = 1024;
            int v48 = valuePtr;
            __int16 v49 = 1024;
            int v50 = HIDWORD(v34);
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "handleIncomingUSBDevice %{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x",  (uint8_t *)&v46,  0x24u);
            if (v45 < 0) {
              operator delete(*(void **)v42);
            }
          }

          sub_1003D6538((uint64_t)v15, 1, 76, valuePtr, SHIDWORD(v34));
          sub_1004FE288(a1, (uint64_t)v15);
          sub_1004FEEF4(a1, a3, (unint64_t)v15);
          if (qword_1008D67A8 != -1) {
            dispatch_once(&qword_1008D67A8, &stru_10089E4F0);
          }
          sub_100530464((uint64_t)off_1008D67A0, (unsigned __int8 *)v15);
          sub_100525248(&v41, &v51);
          nullsub_63(&v41, v29);
          nullsub_63(&v51, v30);
        }
      }

      goto LABEL_66;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
      sub_10068B408();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR))
  {
    sub_10068B564(a2, (uint64_t)a3, v7);
  }

void sub_1004FED64( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004FEDB8(uint64_t a1, uint64_t a2)
{
  std::string __p = 0LL;
  id v15 = 0LL;
  uint64_t v16 = 0LL;
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_10089E510);
  }
  int v3 = sub_100535364(off_1008D67B0, (char **)&__p);
  CFNumberRef v4 = (char *)__p;
  if (v3 || __p == v15)
  {
LABEL_4:
    uint64_t v5 = 0LL;
  }

  else
  {
    BOOL v7 = (char *)__p;
    while (1)
    {
      uint64_t v5 = *(void *)v7;
      int v12 = *(_DWORD *)(*(void *)v7 + 128LL);
      int v8 = *(unsigned __int16 *)(v5 + 132);
      __int16 v13 = *(_WORD *)(v5 + 132);
      v7 += 8;
      if (v7 == v15) {
        goto LABEL_4;
      }
    }

    dispatch_time_t v10 = (os_log_s *)qword_1008F7688;
    if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device Already paired", (uint8_t *)v11, 2u);
      CFNumberRef v4 = (char *)__p;
    }
  }

  if (v4)
  {
    id v15 = v4;
    operator delete(v4);
  }

  return v5;
}

void sub_1004FEED8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004FEEF4(uint64_t a1, __IOHIDDevice *a2, unint64_t a3)
{
  v29[1] = 0LL;
  unint64_t v30 = a3;
  v29[0] = 0LL;
  sub_100242F28((uint64_t)v29, a1 + 24);
  if (a2 && a3)
  {
    CFTypeRef Property = IOHIDDeviceGetProperty(a2, @"LocationID");
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(Property);
    if (v7)
    {
      dispatch_time_t v10 = *(void **)(a1 + 104);
      unint64_t v9 = (void *)(a1 + 104);
      int v8 = v10;
      if (!v10) {
        goto LABEL_15;
      }
      BOOL v11 = v9;
      do
      {
        unint64_t v12 = v8[4];
        BOOL v13 = v12 >= a3;
        if (v12 >= a3) {
          int v14 = v8;
        }
        else {
          int v14 = v8 + 1;
        }
        if (v13) {
          BOOL v11 = v8;
        }
        int v8 = (void *)*v14;
      }

      while (*v14);
      if (v11 != v9 && v11[4] <= a3)
      {
        int v21 = (os_log_s *)qword_1008F7688;
        if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR))
        {
          sub_1003D01A0(a3, (uint64_t)__p);
          int v23 = v28;
          __int16 v24 = (void **)__p[0];
          unsigned int v25 = [v7 intValue];
          uint64_t v26 = __p;
          if (v23 < 0) {
            uint64_t v26 = v24;
          }
          *(_DWORD *)std::stringbuf::string_type buf = 136315394;
          CFNumberRef v32 = v26;
          __int16 v33 = 1024;
          unsigned int v34 = v25;
          _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Already have a USB HID device %s with location ID %d",  buf,  0x12u);
          if (v28 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      else
      {
LABEL_15:
        id v15 = (os_log_s *)qword_1008F7688;
        if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003D01A0(a3, (uint64_t)__p);
          int v16 = v28;
          CCRNGStatus v17 = (void **)__p[0];
          unsigned int v18 = [v7 intValue];
          id v19 = __p;
          if (v16 < 0) {
            id v19 = v17;
          }
          *(_DWORD *)std::stringbuf::string_type buf = 136315394;
          CFNumberRef v32 = v19;
          __int16 v33 = 1024;
          unsigned int v34 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Adding HID device %s with location ID %d",  buf,  0x12u);
          if (v28 < 0) {
            operator delete(__p[0]);
          }
        }

        unsigned int v20 = [v7 intValue];
        __p[0] = &v30;
        *((_DWORD *)sub_1004510C8((uint64_t **)v9 - 1, &v30, (uint64_t)&unk_1006C2518, (void **)__p) + 10) = v20;
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR))
    {
      sub_10068B5E4();
    }
  }

  return sub_100242FAC((uint64_t)v29);
}

void sub_1004FF168( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FF1B4(uint64_t a1, __IOHIDDevice *a2)
{
  CFNumberRef v4 = (os_log_s *)qword_1008F7688;
  if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string __p = 134217984;
    *(void *)&__p[4] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Seeing if paired device Link Key already exists for iohid ref %p",  __p,  0xCu);
  }

  uint64_t v5 = (unsigned __int8 *)sub_1004FE004(a1, a2);
  if (v5)
  {
    __n128 v19 = 0uLL;
    int v20 = 0;
    sub_10052523C((uint64_t)&v19);
    if (qword_1008D67B8 != -1) {
      dispatch_once(&qword_1008D67B8, &stru_10089E510);
    }
    dispatch_time_t v10 = (os_log_s *)qword_1008F7688;
    if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D0100((uint64_t)v5, (uint64_t)__p);
      if (v16 >= 0) {
        unint64_t v12 = __p;
      }
      else {
        unint64_t v12 = *(_BYTE **)__p;
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      unsigned int v18 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Preparing to send existing Link Key to %s",  buf,  0xCu);
      if (v16 < 0) {
        operator delete(*(void **)__p);
      }
    }

    BOOL v13 = (int8x16_t *)nullsub_63(&v19, v11);
    if (sub_1004FF3E0(a1, a2, v13))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
        sub_10068B678();
      }
LABEL_7:
      nullsub_63(&v19, v6);
      return 0LL;
    }

    nullsub_63(&v19, v14);
  }

  else
  {
    int v8 = (os_log_s *)qword_1008F7688;
    if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
      sub_10068B610((uint64_t)a2, v8, v9);
    }
  }

  return 1LL;
}

void sub_1004FF3C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1004FF3E0(uint64_t a1, IOHIDDeviceRef device, int8x16_t *a3)
{
  int8x16_t v4 = vrev64q_s8(*a3);
  char v12 = 1;
  *(_WORD *)report = 309;
  CFIndex pReportLength = 25LL;
  int v13 = *(_DWORD *)(a1 + 89);
  __int16 v14 = *(_WORD *)(a1 + 93);
  int8x16_t v15 = vextq_s8(v4, v4, 8uLL);
  uint64_t v5 = IOHIDDeviceSetReport(device, kIOHIDReportTypeFeature, 53LL, report, 25LL);
  if ((_DWORD)v5)
  {
    uint64_t v6 = v5;
    if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
      sub_10068B704();
    }
  }

  else
  {
    uint64_t v6 = IOHIDDeviceGetReport(device, kIOHIDReportTypeFeature, 53LL, report, &pReportLength);
    BOOL v7 = (os_log_s *)qword_1008F7688;
    if ((_DWORD)v6 || pReportLength != 25)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
        sub_10068B6A4();
      }
    }

    else
    {
      uint64_t v6 = 0LL;
      if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Successfully resent Link Key to paired device",  v9,  2u);
        return 0LL;
      }
    }
  }

  return v6;
}

void sub_1004FF554(uint64_t a1, unsigned __int8 *a2, __n128 *a3)
{
  uint64_t v5 = (os_log_s *)qword_1008F7688;
  if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Attempting To Pair device", (uint8_t *)__p, 2u);
  }

  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_10089E510);
  }
  int v6 = sub_10053584C((uint64_t)off_1008D67B0, a2, a3, 1);
  BOOL v7 = (os_log_s *)qword_1008F7688;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_ERROR)) {
      sub_10068B764();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7688, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003FE1B4(a2 + 128, __p);
    if (v10 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    char v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "SUCCESSFULLY PAIRED ADDR: %{public}s",  buf,  0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

uint64_t sub_1004FF6CC(uint64_t a1)
{
  return sub_1004FD230(*(void *)(a1 + 32));
}

uint64_t sub_1004FF6D4(void *a1, uint64_t a2)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, (uint64_t)(a1 + 3));
  int8x16_t v4 = (void *)a1[15];
  uint64_t v5 = (void *)a1[16];
  int v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        int v6 = (void *)a1[16];
        break;
      }
    }
  }

  if (v6 == v5)
  {
    unint64_t v7 = a1[17];
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = v5 - v4;
      uint64_t v10 = v7 - (void)v4;
      uint64_t v11 = v10 >> 2;
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        int v13 = (char *)sub_100008BA0((uint64_t)(a1 + 17), v12);
      }
      else {
        int v13 = 0LL;
      }
      __int16 v14 = &v13[8 * v9];
      int8x16_t v15 = &v13[8 * v12];
      *(void *)__int16 v14 = a2;
      int v8 = v14 + 8;
      CCRNGStatus v17 = (char *)a1[15];
      char v16 = (char *)a1[16];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }

        while (v16 != v17);
        char v16 = (char *)a1[15];
      }

      a1[15] = v14;
      a1[16] = v8;
      a1[17] = v15;
      if (v16) {
        operator delete(v16);
      }
    }

    else
    {
      *uint64_t v5 = a2;
      int v8 = v5 + 1;
    }

    a1[16] = v8;
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_1004FF7F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004FF80C(id a1)
{
  uint64_t v1 = (char *)operator new(0x90uLL);
  *(void *)uint64_t v1 = off_10089E408;
  *((void *)v1 + 1) = &off_10089E450;
  sub_100242DC4(v1 + 24);
  *((void *)v1 + 13) = 0LL;
  *((void *)v1 + 12) = v1 + 104;
  *((void *)v1 + 14) = 0LL;
  *((void *)v1 + 15) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 2) = 0LL;
  *((_DWORD *)v1 + 22) = 0;
  *(_DWORD *)(v1 + 91) = 0;
  qword_1008D9280 = (uint64_t)v1;
}

void sub_1004FF86C(_Unwind_Exception *a1)
{
}

void sub_1004FF880(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1004FF8B0(_Unwind_Exception *a1)
{
}

void sub_1004FF8C4(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_1004FF8F4(_Unwind_Exception *a1)
{
}

void sub_1004FF908(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1004FF938(_Unwind_Exception *a1)
{
}

void sub_1004FF94C(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_1004FF97C(_Unwind_Exception *a1)
{
}

void sub_1004FF990(id a1)
{
  uint64_t v1 = operator new(0x198uLL);
  sub_100534AB0();
  off_1008D67B0 = v1;
}

void sub_1004FF9C0(_Unwind_Exception *a1)
{
}

void *sub_1004FF9D4(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, dispatch_object_s *a4)
{
  uint64_t result = (void *)sub_10043E3E8(a1, a2, a3, a4);
  *uint64_t result = &off_10089E5D8;
  result[18] = off_10089E660;
  return result;
}

void sub_1004FFA00(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10025D70C(a1);
  operator delete(v1);
}

void *sub_1004FFA14(uint64_t a1, int a2)
{
  uint64_t result = sub_1004FFAD8;
  switch(a2)
  {
    case 1:
      return result;
    case 2:
      uint64_t result = sub_1004FFEB4;
      break;
    case 8:
      uint64_t result = sub_1004FFEF0;
      break;
    case 9:
      uint64_t result = sub_100500280;
      break;
    case 10:
      uint64_t result = sub_1005003BC;
      break;
    case 11:
      uint64_t result = sub_10050066C;
      break;
    case 12:
      uint64_t result = sub_100500864;
      break;
    default:
      int8x16_t v4 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068B790(a2, v4);
      }
      uint64_t result = 0LL;
      break;
  }

  return result;
}

void sub_1004FFAD8(void *a1, xpc_object_t xdict)
{
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v15 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E1C8(value, "kCBMsgArgName");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgType") || !v5)
  {
    uint64_t v13 = a1[16];
    if (v13)
    {
      if (qword_1008D6788 != -1) {
        dispatch_once(&qword_1008D6788, &stru_10089E708);
      }
      uint64_t v14 = sub_1002075B4((uint64_t)off_1008D6780);
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 104LL))(a1, v13, v14);
    }

    else
    {
      sub_10043F468((uint64_t)a1, 2u);
    }
  }

  else
  {
    unint64_t v12 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068B88C((uint64_t)v5, v12);
    }
  }
}

void sub_1004FFE74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, ...)
{
  sub_10020E784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004FFEB4(uint64_t a1)
{
}

void sub_1004FFEF0(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v38 = 0LL;
  int v39 = &v38;
  uint64_t v40 = 0x2020000000LL;
  int v41 = 0;
  uint64_t v36 = 0LL;
  uint64_t v37 = 0LL;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v31 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E1C8(value, "kCBMsgArgName");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v14 = sub_10025D848(v7, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgType");
  *((_DWORD *)v39 + 6) = v14;
  if (v31)
  {
    uint64_t v15 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "ScalablePipeTrace set. Parse metadata",  buf,  2u);
    }
  }

  if ((_DWORD)v35 == 2 && !*(_BYTE *)(a1 + 85))
  {
    *((_DWORD *)v39 + 6) = 13;
    uint64_t v16 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 138543362;
      id v43 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Failing registration of endpoint %{public}@ due to insufficient entitlements",  buf,  0xCu);
    }
  }

  if (*(_DWORD *)(a1 + 80) != 2)
  {
    uint64_t v33 = 0LL;
    uint64_t v34 = 1LL;
  }

  int v17 = *((_DWORD *)v39 + 6);
  if (v17 || !v6) {
    goto LABEL_17;
  }
  uint64_t v18 = sub_100404FE8();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  void v21[2] = sub_100500BD0;
  void v21[3] = &unk_10089E6A0;
  int v23 = &v38;
  uint64_t v24 = a1;
  id v19 = v6;
  id v22 = v19;
  uint64_t v25 = v37;
  uint64_t v26 = v36;
  uint64_t v27 = v35;
  uint64_t v28 = v34;
  uint64_t v29 = v33;
  uint64_t v30 = v32;
  sub_1004054B4(v18, v21);
  if (*((_DWORD *)v39 + 6) != 10)
  {

    int v17 = *((_DWORD *)v39 + 6);
LABEL_17:
    sub_10043F3F4(a1, 13LL, xdict, v17);
    goto LABEL_18;
  }

  int v20 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 138543362;
    id v43 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Delaying registration of endpoint %{public}@ as it is currently being unregistered",  buf,  0xCu);
  }

LABEL_18:
  _Block_object_dispose(&v38, 8);
}

void sub_100500240( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35)
{
  _Block_object_dispose((const void *)(v36 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100500280(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000LL;
  int v15 = 3;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E1C8(value, "kCBMsgArgName");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (!v6) {
    goto LABEL_3;
  }
  uint64_t v7 = sub_100404FE8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100500CC4;
  v8[3] = &unk_10088FED8;
  uint64_t v10 = &v12;
  uint64_t v11 = a1;
  id v9 = v6;
  sub_1004054B4(v7, v8);
  LODWORD(v7) = *((_DWORD *)v13 + 6);

  if ((_DWORD)v7 != 10) {
LABEL_3:
  }
    sub_10043F3F4(a1, 14LL, xdict, *((_DWORD *)v13 + 6));

  _Block_object_dispose(&v12, 8);
}

void sub_100500384( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005003BC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v24 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = sub_10025E1C8(value, "kCBMsgArgClientName");
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue(v6);
  int v14 = sub_10025D848(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgPacketsPerSecond");
  if (!-[__CFString length](v7, "length"))
  {

    uint64_t v7 = @"default";
  }

  int v15 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 138543362;
    uint64_t v28 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "SetLinkRequirementsForPeer received for %{public}@",  buf,  0xCu);
  }

  if (!v14 && v5)
  {
    uint64_t v16 = sub_100404FE8();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    __int128 v17[2] = sub_100500D88;
    v17[3] = &unk_10089E6C8;
    uint64_t v20 = a1;
    id v18 = v5;
    uint64_t v21 = v26;
    uint64_t v22 = v25;
    uint64_t v23 = v24;
    uint64_t v7 = v7;
    id v19 = v7;
    sub_1004054B4(v16, v17);
  }
}

void sub_100500630( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, void *a25)
{
  _Unwind_Resume(a1);
}

void sub_10050066C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v19 = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v4 = sub_10025E0F0(value, "kCBMsgArgDeviceUUID");
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (!sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgLatencyInMs") && v5)
  {
    uint64_t v12 = sub_100404FE8();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100500DEC;
    void v13[3] = &unk_10089D398;
    uint64_t v15 = a1;
    id v14 = v5;
    uint64_t v16 = v19;
    uint64_t v17 = v21;
    uint64_t v18 = v20;
    sub_1004054B4(v12, v13);
  }
}

void sub_10050083C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

_BYTE *sub_100500864(uint64_t a1, void *a2)
{
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  unsigned int v13 = 0;
  unint64_t v12 = 0LL;
  unsigned __int8 v11 = 0;
  uint64_t v10 = 0LL;
  char v9 = 0;
  sub_100242CA4(&v9);
  sub_1001005E8((_DWORD *)&v15 + 1, &v15, (_DWORD *)&v14 + 1, &v14, &v13, 0LL, &v11, &v12, &v10);
  sub_100242CD0(&v9);
  id v4 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67110656;
    int v17 = HIDWORD(v15);
    __int16 v18 = 1024;
    int v19 = v15;
    __int16 v20 = 1024;
    int v21 = HIDWORD(v14);
    __int16 v22 = 1024;
    int v23 = v14;
    __int16 v24 = 1024;
    unsigned int v25 = v13;
    __int16 v26 = 1024;
    int v27 = v11;
    __int16 v28 = 2048;
    unint64_t v29 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PipeStatistics:connected:%d start:%d stop:%d upCount:%d upDuration:%d tech:%d timSpentInThisTransportMS:%llu",  buf,  0x30u);
  }

  int64_t v5 = v13;
  if (v11 == 2) {
    int64_t v5 = v13 + v12 / 0x3E8;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  uint64_t v7 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBLePipeStatisticsTotalTimeSpentUpgraded", v5);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v7);
    xpc_release(v7);
  }

  return sub_100242CD8(&v9);
}

void sub_100500A20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL sub_100500A40(uint64_t a1, __int16 a2)
{
  return (a2 & 0xFFFE) == 8;
}

void sub_100500A50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_10089E6E8);
  }
  uint64_t v3 = qword_1008D9150;
  sub_10002418C(__p, (char *)[*(id *)(a1 + 32) UTF8String]);
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = sub_1002455CC(v3, v2 + 144, (uint64_t)__p, v2 + 56, *(_DWORD *)(v2 + 40));
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100500AF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100500B14(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    uint64_t v2 = sub_100404FE8();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    _DWORD v3[2] = sub_100500B80;
    uint64_t v3[3] = &unk_10087EB20;
    void v3[4] = a1;
    sub_1004054B4(v2, v3);
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  }

uint64_t sub_100500B80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_10089E6E8);
  }
  return sub_100245948(qword_1008D9150, v1 + 144);
}

void sub_100500BD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_10089E6E8);
  }
  uint64_t v3 = qword_1008D9150;
  unint64_t v4 = *(void *)(v2 + 128);
  sub_10002418C(__p, (char *)[*(id *)(a1 + 32) UTF8String]);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_100246028( v3,  v4,  __p,  *(_DWORD *)(a1 + 56),  *(_DWORD *)(a1 + 64),  *(_DWORD *)(a1 + 72),  *(void *)(a1 + 80) != 0LL,  *(void *)(a1 + 88) != 0LL,  *(void *)(a1 + 96) != 0LL);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100500CA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100500CC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_10089E6E8);
  }
  uint64_t v3 = (void *)qword_1008D9150;
  unint64_t v4 = *(void *)(v2 + 128);
  sub_10002418C(__p, (char *)[*(id *)(a1 + 32) UTF8String]);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_100246C90(v3, v4, (char *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100500D6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100500D88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_10089E6E8);
  }
  sub_1002471D0( qword_1008D9150,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(unsigned int *)(a1 + 56),  *(_DWORD *)(a1 + 64),  *(_DWORD *)(a1 + 72),  *(void **)(a1 + 40));
}

void sub_100500DEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_10089E6E8);
  }
  sub_100247728( qword_1008D9150,  *(void *)(v2 + 128),  *(void **)(a1 + 32),  *(_DWORD *)(a1 + 48),  *(_DWORD *)(a1 + 56),  *(_DWORD *)(a1 + 64));
}

void sub_100500E50( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, int a7, unsigned int a8, int64_t value)
{
  id v16 = a3;
  xpc_object_t v17 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_10043F7DC(a1, v17, v16);
  else {
    __int16 v18 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v17, "kCBMsgArgName", v18);
  xpc_dictionary_set_int64(v17, "kCBMsgArgType", a4);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPriority", a5);
  xpc_dictionary_set_fd(v17, "kCBLePipeMsgArgSocket", a6);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgReliable", a7 ^ 1u);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLVersion", a8);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLFeatures", value);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerType", HIDWORD(value));
  unsigned __int8 v20 = 0;
  unsigned int v19 = 0;
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_10089E6E8);
  }
  sub_10024D664(qword_1008D9150, &v20, &v19);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLVersion", v20);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLFeatures", v19);
  sub_10043F1F4(a1, 15LL, v17, 1);
}

void sub_100501008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10050101C( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, int a7, unsigned int a8, int64_t value)
{
}

void sub_10050102C( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, const unsigned __int8 *a6, int a7, unsigned int a8, int64_t value)
{
  id v16 = a3;
  xpc_object_t v17 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_10043F7DC(a1, v17, v16);
  else {
    __int16 v18 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v17, "kCBMsgArgName", v18);
  xpc_dictionary_set_int64(v17, "kCBMsgArgType", a4);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPriority", a5);
  xpc_dictionary_set_uuid(v17, "kCBLePipeMsgArgSocket", a6);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgReliable", a7 ^ 1u);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLVersion", a8);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLFeatures", value);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerType", HIDWORD(value));
  unsigned __int8 v20 = 0;
  unsigned int v19 = 0;
  if (qword_1008D9158 != -1) {
    dispatch_once(&qword_1008D9158, &stru_10089E6E8);
  }
  sub_10024D664(qword_1008D9150, &v20, &v19);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLVersion", v20);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLFeatures", v19);
  sub_10043F1F4(a1, 15LL, v17, 1);
}

void sub_1005011E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005011F8( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, const unsigned __int8 *a6, int a7, unsigned int a8, int64_t value)
{
}

void sub_100501208(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v9 = a3;
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  sub_10043F7DC(a1, v7, v9);
  else {
    uint64_t v8 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v7, "kCBMsgArgName", v8);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
  sub_10043F1F4(a1, 16LL, v7, 1);
}

void sub_1005012B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1005012C8(uint64_t a1, uint64_t a2, void *a3, int a4)
{
}

void sub_1005012D0(uint64_t a1, uint64_t a2, int a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v7 = v6;
  else {
    uint64_t v8 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v6, "kCBMsgArgName", v8);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a3);
  sub_10043F1F4(a1, 13LL, v7, 1);
}

void sub_100501350(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100501358(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v5 = @"kCBMsgArgName";
  id v6 = v3;
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  sub_10043F394(a1, 14LL, v4);
}

void sub_1005013FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100501420(uint64_t a1, void *a2)
{
}

void sub_100501428(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 - 2) >= 3)
  {
    if (a3) {
      int v4 = 0;
    }
    else {
      int v4 = 4;
    }
    if (a3 == 1) {
      unsigned int v3 = 5;
    }
    else {
      unsigned int v3 = v4;
    }
  }

  else
  {
    unsigned int v3 = *(_DWORD *)(a1 + 136);
  }

  sub_10043F468(a1, v3);
}

void sub_100501458(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100501460(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (a4) {
    uint64_t v10 = 2LL;
  }
  else {
    uint64_t v10 = 1LL;
  }
  v13[0] = @"kCBMsgArgName";
  v13[1] = @"kCBMsgArgDeviceUUID";
  v14[0] = v7;
  v14[1] = v8;
  void v13[2] = @"kCBMsgArgState";
  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v10));
  void v14[2] = v11;
  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v14,  v13,  3LL));
  sub_10043F394(a1, 17LL, v12);
}

void sub_100501560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100501594(uint64_t a1, void *a2, void *a3, int a4)
{
}

uint64_t sub_10050159C()
{
  return 0LL;
}

char *sub_1005015A4(uint64_t a1, int a2)
{
  return off_10089E530[a2];
}

void sub_1005015B4(id a1)
{
  uint64_t v1 = operator new(0xE8uLL);
  sub_100243588((uint64_t)v1);
  qword_1008D9150 = (uint64_t)v1;
}

void sub_1005015E4(_Unwind_Exception *a1)
{
}

void sub_1005015F8(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10040D0A0((uint64_t)v1);
  off_1008D6780 = v1;
}

void sub_100501628(_Unwind_Exception *a1)
{
}

uint64_t sub_10050163C(uint64_t a1, __int16 a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v10 = (void *)sub_10026EC64(a1, 1953719151);
  *uint64_t v10 = &off_10089E738;
  sub_100207084((uint64_t)(v10 + 50), a3, a2, a4);
  *(void *)(a1 + 584) = a5;
  *(void *)(a1 + 592) = 0LL;
  *(void *)(a1 + 60_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 600) = 0LL;
  *(_DWORD *)(a1 + 616) = 0;
  return a1;
}

void sub_1005016BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1005016D4(void *a1)
{
  *a1 = &off_10089E738;
  uint64_t v2 = a1[74];
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2) & 1) == 0)
    {
      uint64_t v3 = a1[74];
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
      }
    }

    a1[74] = 0LL;
  }

  sub_100207088((uint64_t)(a1 + 50));
  return sub_10026ED80((uint64_t)a1);
}

void sub_100501738(_Unwind_Exception *a1)
{
}

BOOL sub_100501754(uint64_t a1)
{
  return *(void *)(a1 + 592) != 0LL;
}

uint64_t sub_100501764(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 592);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
    if ((result & 1) == 0)
    {
      uint64_t result = *(void *)(a1 + 592);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
      }
    }
  }

  *(void *)(a1 + 592) = 0LL;
  return result;
}

void sub_1005017B4(void *a1)
{
  uint64_t v1 = (void *)sub_1005016D4(a1);
  operator delete(v1);
}

void sub_1005017C8(uint64_t a1, char *__s1, const __CFBoolean *a3)
{
  if (!strcmp(__s1, "kBTAudioMsgPropertyAllowSCOForTBT"))
  {
    BOOL v6 = CFBooleanGetValue(a3) != 0;
    (*(void (**)(void, uint64_t, BOOL))(**(void **)(a1 + 584) + 64LL))(*(void *)(a1 + 584), a1, v6);
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyScoSampleRate"))
  {
    unsigned int valuePtr = 8000;
    CFNumberGetValue(a3, kCFNumberIntType, &valuePtr);
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 584) + 72LL))( *(void *)(a1 + 584),  a1,  valuePtr);
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyScoCodecTypeChanged"))
  {
    CFNumberRef number = 0LL;
    xpc_object_t value = 0LL;
    CFNumberRef v17 = 0LL;
    if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyScoChannelFormat", (const void **)&value))
    {
      if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyScoSampleRate", (const void **)&number))
      {
        if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyTransportType", (const void **)&v17))
        {
          LODWORD(v15) = 0;
          uint64_t v16 = 0x1F4000000000LL;
          CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v15);
          CFNumberGetValue(number, kCFNumberIntType, (char *)&v16 + 4);
          CFNumberGetValue(v17, kCFNumberIntType, &v16);
          (*(void (**)(void, uint64_t, void, uint64_t, void))(**(void **)(a1 + 584) + 88LL))( *(void *)(a1 + 584),  a1,  HIDWORD(v16),  1LL,  v15);
          (*(void (**)(void, uint64_t, BOOL))(**(void **)(a1 + 584) + 96LL))( *(void *)(a1 + 584),  a1,  (_DWORD)v16 != 0);
          id v7 = (os_log_s *)qword_1008F7570;
          if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int valuePtr = 67109632;
            int v21 = (int)v15;
            __int16 v22 = 1024;
            *(_DWORD *)int v23 = HIDWORD(v16);
            *(_WORD *)&void v23[4] = 1024;
            *(_DWORD *)&v23[6] = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "propertyDidUpdate codecID:%d, sampleRate:%u advancedTransport:%u",  (uint8_t *)&valuePtr,  0x14u);
          }
        }
      }
    }
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyExpanseInA2DP"))
  {
    int v8 = CFBooleanGetValue(a3);
    id v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int valuePtr = 67109120;
      int v21 = v8 != 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "kBTAudioMsgPropertyExpanseInA2DP: %d",  (uint8_t *)&valuePtr,  8u);
    }

    (*(void (**)(void, uint64_t, BOOL))(**(void **)(a1 + 584) + 112LL))( *(void *)(a1 + 584),  a1,  v8 != 0);
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyCallScreening"))
  {
    int v10 = CFBooleanGetValue(a3);
    unsigned __int8 v11 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int valuePtr = 67109120;
      int v21 = v10 != 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "kBTAudioMsgPropertyCallScreening: %d",  (uint8_t *)&valuePtr,  8u);
    }

    (*(void (**)(void, uint64_t, BOOL))(**(void **)(a1 + 584) + 120LL))( *(void *)(a1 + 584),  a1,  v10 != 0);
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyManualVolumeUpdate"))
  {
    CFNumberRef number = 0LL;
    xpc_object_t value = 0LL;
    uint64_t v16 = 0LL;
    CFNumberRef v17 = 0LL;
    CFNumberRef v15 = 0LL;
    int v14 = 0;
    if (CFDictionaryGetValueIfPresent( a3,  @"kBTAudioMsgPropertyManualVolumeUpdateCurrentVolume",  (const void **)&value))
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v16);
    }

    if (CFDictionaryGetValueIfPresent( a3,  @"kBTAudioMsgPropertyManualVolumeUpdateRampInProgress",  (const void **)&v15))
    {
      CFNumberGetValue(v15, kCFNumberSInt32Type, &v14);
    }

    if (CFDictionaryGetValueIfPresent( a3,  @"kBTAudioMsgPropertyManualVolumeUpdateCurrentAudioCategory",  (const void **)&number))
    {
      id v12 = -[__CFNumber copy](number, "copy");
    }

    else
    {
      id v12 = 0LL;
    }

    unsigned int v13 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int valuePtr = 67109890;
      int v21 = v16;
      __int16 v22 = 2112;
      *(void *)int v23 = v12;
      *(_WORD *)&v23[8] = 1024;
      int v24 = BYTE4(v16);
      __int16 v25 = 1024;
      int v26 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Manual Volume update received currentVolume: %d audioCategory %@ newVolume %d isRampInProgress %d",  (uint8_t *)&valuePtr,  0x1Eu);
    }

    (*(void (**)(void, uint64_t, void, id, void, BOOL))(**(void **)(a1 + 584) + 104LL))( *(void *)(a1 + 584),  a1,  v16,  v12,  HIDWORD(v16),  v14 != 0);
  }

  else
  {
    sub_100270F28((uint64_t *)a1, __s1, a3);
  }

void sub_100501D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100501D34(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  if ((_DWORD)a2 == 11)
  {
    xpc_object_t value = 0LL;
    CFNumberRef v8 = 0LL;
    CFNumberRef number = 0LL;
    uint64_t valuePtr = 0LL;
    unsigned int v6 = 8000;
    if (CFDictionaryGetValueIfPresent(theDict, @"kBTAudioMsgPropertyScoSampleRate", (const void **)&v8))
    {
      CFNumberGetValue(v8, kCFNumberIntType, &v6);
      uint64_t v5 = v6;
    }

    else
    {
      uint64_t v5 = 8000LL;
    }

    (*(void (**)(void, uint64_t, void, void, uint64_t))(**(void **)(a1 + 584) + 48LL))( *(void *)(a1 + 584),  a1,  HIDWORD(valuePtr),  valuePtr,  v5);
  }

  else
  {
    sub_100271498(a1, a2);
  }

uint64_t sub_100501E30(uint64_t a1)
{
  return (***(uint64_t (****)(void, uint64_t))(a1 + 584))(*(void *)(a1 + 584), a1);
}

uint64_t sub_100501E44(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 8LL))(*(void *)(a1 + 584), a1);
}

uint64_t sub_100501E58(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 16LL))(*(void *)(a1 + 584), a1);
}

uint64_t sub_100501E6C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 32LL))(*(void *)(a1 + 584), a1);
}

uint64_t sub_100501E80(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 40LL))(*(void *)(a1 + 584), a1);
}

uint64_t sub_100501E94(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 24LL))(*(void *)(a1 + 584), a1);
}

uint64_t sub_100501EB0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 80LL))(*(void *)(a1 + 584), a1);
}

uint64_t sub_100501EC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 584) + 128LL))(*(void *)(a1 + 584), a1);
}

__n128 sub_100501ED8(uint64_t a1, __n128 *a2)
{
  __n128 result = *(__n128 *)(a1 + 600);
  a2[1].n128_u32[0] = *(_DWORD *)(a1 + 616);
  *a2 = result;
  return result;
}

double sub_100501EF0(uint64_t a1)
{
  *(_DWORD *)(a1 + 616) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 600) = 0u;
  return result;
}

uint64_t sub_100501F04(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 400;
  unsigned __int8 v5 = sub_1002075E4(a1 + 400);
  ++*(_DWORD *)(a1 + 600);
  if (v5 != a2 && a2 != 0 && v5 != 0) {
    ++*(_DWORD *)(a1 + 608);
  }
  uint64_t result = sub_10020759C(v4);
  if ((_DWORD)result) {
    *(_BYTE *)(a1 + 616) = 1;
  }
  return result;
}

uint64_t sub_100501F78(uint64_t result)
{
  return result;
}

uint64_t sub_100501F88(uint64_t result)
{
  return result;
}

void sub_100501F98(uint64_t a1, int a2, int a3)
{
  int valuePtr = a3;
  *(_OWORD *)keys = *(_OWORD *)off_10089E848;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFNumberRef v6 = v5;
  id v7 = &kCFBooleanTrue;
  if (!a2) {
    id v7 = &kCFBooleanFalse;
  }
  values[0] = *(void **)v7;
  values[1] = v5;
  CFDictionaryRef v8 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  sub_1002703E8(a1, "kBTAudioMsgPropertyScoIsEnabled", v8);
  CFRelease(v6);
  CFRelease(v8);
}

void sub_100502094(uint64_t a1, int a2)
{
}

void sub_1005020A4(uint64_t a1, int a2)
{
}

void sub_1005020B4(uint64_t a1, int a2)
{
}

void sub_1005020C4(uint64_t a1, int a2)
{
}

void sub_1005020D4(uint64_t a1, int a2)
{
}

void sub_1005020E4(uint64_t a1, int a2)
{
}

void sub_1005020F4(uint64_t a1, int a2)
{
}

void sub_100502104(uint64_t a1, int a2)
{
}

void sub_100502114(uint64_t a1, int a2)
{
}

void sub_100502124(uint64_t a1, int a2)
{
}

void sub_100502134(uint64_t a1, int a2)
{
}

void sub_100502144(uint64_t a1, int a2)
{
}

void sub_100502154(uint64_t a1, int a2)
{
}

void sub_100502164(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setUWBSStereoSupport: %d", (uint8_t *)v5, 8u);
  }

  sub_100270098(a1, "kBTAudioMsgPropertyUWBSStereoSupport", a2);
}

void sub_100502224(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "setIncompatibleHidConnected: %d",  (uint8_t *)v5,  8u);
  }

  sub_100270098(a1, "kBTAudioMsgPropertyIncompatibleHidConnected", a2);
}

void sub_1005022E4(uint64_t a1, int a2)
{
}

void sub_1005022F4(uint64_t a1, int a2)
{
}

void sub_100502304(uint64_t a1, int a2)
{
}

void sub_100502314(uint64_t a1, int a2)
{
}

void sub_100502324(uint64_t a1, int a2)
{
}

void sub_100502334(uint64_t a1, int a2)
{
}

void sub_100502344(uint64_t a1, int a2)
{
}

uint64_t sub_100502354()
{
  return 0LL;
}

void sub_10050235C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    uint64_t v6 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "HFPAudioDevice readHandler called on data of size %lu",  (uint8_t *)&v5,  0xCu);
  }

uint64_t sub_1005023FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 592);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 48LL))(result);
  }
  return result;
}

uint64_t sub_100502414( uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6, int a7)
{
  if (a7 > 129)
  {
    goto LABEL_11;
  }

  if ((a7 - 127) < 2)
  {
LABEL_9:
    CFNumberRef v15 = operator new(0x170uLL);
    uint64_t result = sub_10029A990((uint64_t)v15, a2, a3, a4, a5, a6, a7, 0);
    goto LABEL_10;
  }

  if (a7 != 129)
  {
LABEL_11:
    CFNumberRef v15 = operator new(0x158uLL);
    uint64_t result = sub_100298F20((uint64_t)v15, a2, a3, a4, a5, a6, a7);
    goto LABEL_10;
  }

  uint64_t v14 = sub_1002E6BF0();
  CFNumberRef v15 = operator new(0x170uLL);
  uint64_t result = sub_10029A990((uint64_t)v15, a2, a3, a4, a5, a6, 129, 1);
LABEL_10:
  *(void *)(a1 + 592) = v15;
  return result;
}

void sub_100502548(_Unwind_Exception *a1)
{
}

void sub_100502564(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 592);
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64LL))(v2)
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 592) + 24LL))(*(void *)(a1 + 592)) & 1) == 0)
  {
    sub_1002432DC(*(pthread_t **)(a1 + 592));
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 592) + 32LL))(*(void *)(a1 + 592), 1LL);
  }

  else
  {
    uint64_t v3 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 592);
      int v5 = "Doesn't";
      if (v4)
      {
        uint64_t v7 = *(void *)(a1 + 592);
        uint64_t v6 = "Not Running";
        if (v7)
        {
        }
      }

      else
      {
        uint64_t v6 = "Not Running";
      }

      int v8 = 136315394;
      id v9 = v5;
      __int16 v10 = 2080;
      unsigned __int8 v11 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Sendthread %s have an associated connection handle, Thread already %s: not starting",  (uint8_t *)&v8,  0x16u);
    }
  }

uint64_t sub_1005026F0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 592);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

id sub_100502708(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 8);
  id v2 = *(id *)(a1 + 72);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

void sub_1005028E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

double sub_100502AF0(uint64_t a1)
{
  *(void *)a1 = off_10089E868;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_10089E8B0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 1_Block_object_dispose(va, 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + sub_100242E28(v1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  return result;
}

void sub_100502B1C(uint64_t a1)
{
  id v2 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeSensorTrackingManager: initialize", v3, 2u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10089EAB0);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_10089EAD0);
  }
  sub_10004FAD0((uint64_t)off_1008D6600 + 1872, a1 + 8);
}

void sub_100502BFC(uint64_t a1)
{
  id v2 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 19);
    int v4 = *(unsigned __int8 *)(a1 + 20);
    v12[0] = 67109376;
    v12[1] = v3;
    __int16 v13 = 1024;
    int v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Stack will start: ftotalTrackingCapacity: %d, fremainingTrackingCapacity: %d",  (uint8_t *)v12,  0xEu);
  }

  *(_BYTE *)(a1 + 64) = 0;
  uint64_t v5 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 2408LL))(v5))
  {
    *(_BYTE *)(a1 + 16) = 1;
    uint64_t v6 = sub_1002E6E9C();
    uint64_t v7 = sub_1002E6E9C();
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v9 = *(void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v8;

    uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    unsigned __int8 v11 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v10;

    *(_WORD *)(a1 + 19) = 25700;
  }

void sub_100502D44(uint64_t a1)
{
  id v2 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 56) count];
    id v4 = [*(id *)(a1 + 48) count];
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
    *(_DWORD *)std::stringbuf::string_type buf = 134218496;
    id v10 = v3;
    __int16 v11 = 2048;
    id v12 = v4;
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Stack did stop fcurrentlyTrackedDevices: %lu, fsensorTrackingRequests: %lu, fsensorTrackingSessions: %lu",  buf,  0x20u);
  }

  uint64_t v6 = sub_100404FE8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_100502E98;
  v8[3] = &unk_10087EB20;
  void v8[4] = a1;
  sub_1004054B4(v6, v8);
  uint64_t v7 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "LeSensorTrackingManager::stackWillStop exit",  buf,  2u);
  }

void *sub_100502E98(void *result)
{
  uint64_t v1 = result[4];
  if (*(_BYTE *)(v1 + 16) || *(_BYTE *)(v1 + 18))
  {
    *(_WORD *)(v1 + 19) = 0;
    *(void *)(v1 + 32) = *(void *)(v1 + 24);
    [*(id *)(v1 + 56) removeAllObjects];
    return [*(id *)(v1 + 48) removeAllObjects];
  }

  return result;
}

uint64_t sub_100502EE8( uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, __int16 a9, char a10, unsigned __int8 a11, unsigned __int8 a12, char a13, char a14, int a15, int a16)
{
  id v23 = a3;
  int v24 = v23;
  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 18))
  {
    if (!a2)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR)) {
        sub_10068B92C();
      }
      goto LABEL_32;
    }

    if (!v23)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR)) {
        sub_10068B958();
      }
      goto LABEL_32;
    }

    if (a4 >= 0x65)
    {
      __int16 v25 = (os_log_s *)qword_1008F76E8;
      if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR)) {
        sub_10068B984(a4, v25, v26, v27, v28, v29, v30, v31);
      }
LABEL_32:
      uint64_t v41 = 3LL;
      goto LABEL_33;
    }

    if ((a5 & 0x80) != 0)
    {
      __int16 v42 = (os_log_s *)qword_1008F76E8;
      if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR)) {
        sub_10068B9E8(a5, v42, v43, v44, v45, v46, v47, v48);
      }
      goto LABEL_32;
    }

    sub_100494958(a2, (uint64_t)__p);
    if (v83[9] >= 0) {
      uint64_t v32 = __p;
    }
    else {
      uint64_t v32 = *(_BYTE **)__p;
    }
    __int16 v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v32));
    if ((v83[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v33 = (os_log_s *)qword_1008F76E8;
    if (!v79)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR)) {
        sub_10068BA4C();
      }
      uint64_t v41 = 1LL;
      goto LABEL_80;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 138545410;
      *(void *)&__p[4] = v79;
      *(_WORD *)&_BYTE __p[12] = 2114;
      *(void *)xpc_object_t v83 = v24;
      *(_WORD *)&v83[8] = 1024;
      *(_DWORD *)&v83[10] = a4;
      *(_WORD *)&v83[14] = 1024;
      *(_DWORD *)&v83[16] = a5;
      *(_WORD *)int64_t v84 = 1024;
      *(_DWORD *)&v84[2] = a7;
      __int16 v85 = 1024;
      int v86 = a9;
      __int16 v87 = 1024;
      int v88 = HIBYTE(a9);
      __int16 v89 = 1024;
      int v90 = a11;
      __int16 v91 = 1024;
      int v92 = a12;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "startTracking for session: %{public}@ for device %{public}@ for type %d with timeout value %d rssi:%d:%d:%d eCfg:%d:%d",  __p,  0x40u);
    }

    id v78 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v79]);
    id v34 = sub_100503A88((uint64_t)v78, v78, v24);
    int64_t v80 = (void *)objc_claimAutoreleasedReturnValue(v34);
    uint64_t v35 = (os_log_s *)qword_1008F76E8;
    if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v71 = *(void *)(a1 + 48);
      *(_DWORD *)std::string __p = 138543874;
      *(void *)&__p[4] = v71;
      *(_WORD *)&_BYTE __p[12] = 2114;
      *(void *)xpc_object_t v83 = v78;
      *(_WORD *)&v83[8] = 2114;
      *(void *)&v83[10] = v80;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "Current sensor tracking requests: %{public}@, tracking devices set %{public}@ for foundDevice %{public}@",  __p,  0x20u);
    }

    sub_100503C00(a1);
    if (v80)
    {
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v80 appleTypes]);
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a4));
      unsigned __int8 v38 = [v36 containsObject:v37];

      if ((v38 & 1) != 0)
      {
        int v39 = (os_log_s *)qword_1008F76E8;
        if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v80 appleTypes]);
          *(_DWORD *)std::string __p = 138543874;
          *(void *)&__p[4] = v24;
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)xpc_object_t v83 = a4;
          *(_WORD *)&v83[4] = 2114;
          *(void *)&v83[6] = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Already tracking same device %{public}@ and same type: %d, %{public}@",  __p,  0x1Cu);
        }
      }

      else
      {
        uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v80 appleTypes]);
        BOOL v59 = v58 == 0LL;

        if (v59)
        {
          uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
          [v80 setAppleTypes:v60];
        }

        uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v80 appleTypes]);
        uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a4));
        [v61 addObject:v62];

        uint64_t v63 = (os_log_s *)qword_1008F76E8;
        if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEBUG))
        {
          int v64 = (void *)objc_claimAutoreleasedReturnValue([v80 appleTypes]);
          sub_10068BB38(v64, buf, v63);
        }

        if ([v80 currentState] == 1
          || [v80 currentState] == 3)
        {
          if (qword_1008D67C8 != -1) {
            dispatch_once(&qword_1008D67C8, &stru_10089EAF0);
          }
          sub_100286F38((uint64_t)off_1008D67C0, a2, v24, (uint64_t)[v80 currentState], a4);
        }
      }

      if (sub_100503CA4(a1, v80))
      {
        uint64_t v41 = sub_100503EC0( a1,  0,  (uint64_t)[v80 rssiIncreaseScanThreshold],  (uint64_t)[v80 rssiIncreaseScanWindowThreshold],  (uint64_t)[v80 rssiIncreaseScanIntervalThreshold],  (uint64_t)[v80 rssiIncreaseScanTimeoutThreshold],  (uint64_t)[v80 sensorTimeoutBetweenIncreaseScan]);
        if ((_DWORD)v41)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR)) {
            sub_10068BA78();
          }
          goto LABEL_79;
        }
      }

void sub_1005039B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  _Unwind_Resume(a1);
}

id sub_100503A88(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        __int16 v11 = [v10 deviceUUID];
        unsigned __int8 v12 = [v11 isEqual:v5];

        if ((v12 & 1) != 0)
        {
          id v7 = v10;
          goto LABEL_11;
        }
      }

      id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

void sub_100503BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100503C00(uint64_t a1)
{
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  uint64_t v1 = *(void **)(a1 + 48);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_100505390;
  void v4[3] = &unk_10089E930;
  v4[4] = &v5;
  [v1 enumerateKeysAndObjectsUsingBlock:v4];
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100503C8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL sub_100503CA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v18[0] = 0LL;
  v18[1] = v18;
  void v18[2] = 0x3032000000LL;
  void v18[3] = sub_1005052F4;
  void v18[4] = sub_100505304;
  id v19 = 0LL;
  uint64_t v14 = 0LL;
  __int128 v15 = &v14;
  uint64_t v16 = 0x2020000000LL;
  char v17 = 0;
  id v4 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = [v3 rssiIncreaseScanThreshold];
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)std::stringbuf::string_type buf = 67109378;
    unsigned int v21 = v5;
    __int16 v22 = 2114;
    uint64_t v23 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "getMinThresholdForAllSessionAskingIncreaseScanParams: %d in %{public}@",  buf,  0x12u);
  }

  if (*(_BYTE *)(a1 + 18))
  {
    if (*(_BYTE *)(a1 + 64) || ![v3 rssiIncreaseScanThreshold])
    {
      uint64_t v7 = *(void **)(a1 + 48);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      void v10[2] = sub_1005054BC;
      void v10[3] = &unk_10089E958;
      id v11 = v3;
      unsigned __int8 v12 = v18;
      __int16 v13 = &v14;
      [v7 enumerateKeysAndObjectsUsingBlock:v10];
      BOOL v8 = *((_BYTE *)v15 + 24) != 0;
    }

    else
    {
      BOOL v8 = 1LL;
      *((_BYTE *)v15 + 24) = 1;
    }
  }

  else
  {
    BOOL v8 = 0LL;
  }

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(v18, 8);

  return v8;
}

void sub_100503E74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100503EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int16 v13 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = [*(id *)(a1 + 56) count];
    int v15 = *(unsigned __int8 *)(a1 + 19);
    int v16 = *(unsigned __int8 *)(a1 + 20);
    int v20 = 134218496;
    id v21 = v14;
    __int16 v22 = 1024;
    int v23 = v15;
    __int16 v24 = 1024;
    int v25 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "startTrackingForNewDevice - tracked devices: %lu, total: %d, remaining: %d",  (uint8_t *)&v20,  0x18u);
  }

  if ((_DWORD)a3)
  {
    uint64_t v17 = sub_1002E6E9C();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 832LL))( v17,  1LL,  a3,  a4,  a5,  a6,  a7);
    if (!(_DWORD)result) {
      *(_BYTE *)(a1 + 64) = 1;
    }
  }

  else
  {
    id v19 = (os_log_s *)qword_1008F76E8;
    if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 67109120;
      LODWORD(v21) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "rssiIncreaseScanThreshold is not configured %d",  (uint8_t *)&v20,  8u);
    }

    return 1LL;
  }

  return result;
}

id sub_100504038(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v14 = 0LL;
  int v15 = &v14;
  uint64_t v16 = 0x3032000000LL;
  uint64_t v17 = sub_1005052F4;
  __int16 v18 = sub_100505304;
  id v19 = 0LL;
  id v4 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    *(_DWORD *)std::stringbuf::string_type buf = 138543618;
    id v21 = v3;
    __int16 v22 = 2114;
    uint64_t v23 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "anySessionTrackingThisDevice: %{public}@ in %{public}@",  buf,  0x16u);
  }

  uint64_t v6 = *(void **)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10050530C;
  void v10[3] = &unk_10089E908;
  unsigned __int8 v12 = &v14;
  uint64_t v13 = a1;
  id v11 = v3;
  id v7 = v3;
  [v6 enumerateKeysAndObjectsUsingBlock:v10];
  id v8 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_1005041A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005041D8( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, unsigned __int8 a10, unsigned __int8 a11)
{
  id v18 = a2;
  if ([*(id *)(a1 + 56) count] == (id)*(unsigned __int8 *)(a1 + 19))
  {
    id v19 = (os_log_s *)qword_1008F76E8;
    if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR))
    {
      id v28 = [*(id *)(a1 + 56) count];
      int v29 = *(unsigned __int8 *)(a1 + 19);
      int v30 = *(unsigned __int8 *)(a1 + 20);
      *(_DWORD *)std::stringbuf::string_type buf = 134218496;
      id v34 = v28;
      __int16 v35 = 1024;
      int v36 = v29;
      __int16 v37 = 1024;
      int v38 = v30;
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "startTrackingForNewDevice - maxed out tracked devices: %lu, total: %d, remaining: %d",  buf,  0x18u);
    }

    uint64_t v20 = 4LL;
  }

  else
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_10089EB10);
    }
    id v32 = v18;
    uint64_t v21 = sub_1005CC198((uint64_t)off_1008D5F28, v18, 0);
    uint64_t v22 = sub_1002E6E9C();
    *(_WORD *)((char *)&v31 + 3) = __PAIR16__(a11, a10);
    BYTE2(v31) = a9;
    BYTE1(v31) = a8;
    LOBYTE(v31) = a7;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v22 + 824LL))( v22,  v21,  a3,  a1 + 19,  a1 + 20,  a4,  a5,  a6,  v31);
    if (!(_DWORD)v20) {
      [*(id *)(a1 + 56) addObject:v32];
    }
    uint64_t v23 = (os_log_s *)qword_1008F76E8;
    if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 56) count];
      int v25 = *(unsigned __int8 *)(a1 + 19);
      int v26 = *(unsigned __int8 *)(a1 + 20);
      *(_DWORD *)std::stringbuf::string_type buf = 134218496;
      id v34 = v24;
      __int16 v35 = 1024;
      int v36 = v25;
      __int16 v37 = 1024;
      int v38 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "startTrackingForNewDevice - tracked devices: %lu, total: %d, remaining: %d",  buf,  0x18u);
    }

    id v18 = v32;
  }

  return v20;
}

void sub_100504428( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_100504458(void *a1, uint64_t a2)
{
  id v4 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(a1[4] - a1[3]) >> 3;
    int v22 = 134217984;
    uint64_t v23 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "addSessionToTrackingSessions: number of currently tracking sessions %lu",  (uint8_t *)&v22,  0xCu);
  }

  if (a2)
  {
    uint64_t v6 = (void *)a1[3];
    id v7 = (void *)a1[4];
    id v8 = v6;
    if (v6 != v7)
    {
      while (*v8 != a2)
      {
        if (++v8 == v7)
        {
          id v8 = (void *)a1[4];
          break;
        }
      }
    }

    if (v8 == v7)
    {
      unint64_t v9 = a1[5];
      if ((unint64_t)v7 >= v9)
      {
        uint64_t v10 = v7 - v6;
        uint64_t v11 = v9 - (void)v6;
        uint64_t v12 = v11 >> 2;
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          uint64_t v14 = (char *)sub_100008BA0((uint64_t)(a1 + 5), v13);
        }
        else {
          uint64_t v14 = 0LL;
        }
        int v15 = &v14[8 * v10];
        uint64_t v16 = &v14[8 * v13];
        *(void *)int v15 = a2;
        id v7 = v15 + 8;
        id v18 = (char *)a1[3];
        uint64_t v17 = (char *)a1[4];
        if (v17 != v18)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v15 - 1) = v19;
            v15 -= 8;
          }

          while (v17 != v18);
          uint64_t v17 = (char *)a1[3];
        }

        a1[3] = v15;
        a1[4] = v7;
        a1[5] = v16;
        if (v17) {
          operator delete(v17);
        }
      }

      else
      {
        *v7++ = a2;
      }

      a1[4] = v7;
    }

    uint64_t v20 = (os_log_s *)qword_1008F76E8;
    if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = ((uint64_t)v7 - a1[3]) >> 3;
      int v22 = 134217984;
      uint64_t v23 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Currently tracking sessions: %lu",  (uint8_t *)&v22,  0xCu);
    }
  }

void sub_100504648(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = v7;
  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 18))
  {
    if (a2)
    {
      if (v7)
      {
        if (a4 < 0x65)
        {
          sub_100494958(a2, (uint64_t)__p);
          if (v42 >= 0) {
            uint64_t v16 = __p;
          }
          else {
            uint64_t v16 = *(_BYTE **)__p;
          }
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16));
          if (SHIBYTE(v42) < 0) {
            operator delete(*(void **)__p);
          }
          id v18 = (os_log_s *)qword_1008F76E8;
          if (v17)
          {
            if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v19 = *(void *)(a1 + 48);
              uint64_t v20 = *(void *)(a1 + 56);
              *(_DWORD *)std::string __p = 138544386;
              *(void *)&__p[4] = v17;
              __int16 v40 = 2114;
              uint64_t v41 = v8;
              __int16 v42 = 1024;
              int v43 = a4;
              __int16 v44 = 2114;
              uint64_t v45 = v19;
              __int16 v46 = 2114;
              uint64_t v47 = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "stopTracking for session: %{public}@ for device %{public}@ for type %d with current requests %{public}@ and devices %{public}@",  __p,  0x30u);
            }

            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v17]);
            id v22 = sub_100503A88((uint64_t)v21, v21, v8);
            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
            id v24 = v23;
            if (v23)
            {
              int v25 = (void *)objc_claimAutoreleasedReturnValue([v23 appleTypes]);
              int v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a4));
              unsigned int v27 = [v25 containsObject:v26];

              if (v27)
              {
                id v28 = (void *)objc_claimAutoreleasedReturnValue([v24 appleTypes]);
                int v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  a4));
                [v28 removeObject:v29];
              }

              int v30 = (void *)objc_claimAutoreleasedReturnValue([v24 appleTypes]);
              BOOL v31 = [v30 count] == 0;

              if (v31)
              {
                [v21 removeObject:v24];
                id v32 = sub_100504038(a1, v8);
                uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
                if (!v33)
                {
                  id v34 = (os_log_s *)qword_1008F76E8;
                  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)std::string __p = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "No other session is tracking this device - stop tracking",  __p,  2u);
                  }

                  sub_100504B20(a1, v8);
                }
              }
            }

            if (![v21 count])
            {
              __int16 v35 = (os_log_s *)qword_1008F76E8;
              if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string __p = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "This session is not tracking any devices, remove session ID from tracking requests",  __p,  2u);
              }

              [*(id *)(a1 + 48) removeObjectForKey:v17];
              sub_100504C8C(a1, v17);
            }

            int v36 = (os_log_s *)qword_1008F76E8;
            if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v37 = *(void *)(a1 + 48);
              int v38 = *(void **)(a1 + 56);
              *(_DWORD *)std::string __p = 138543618;
              *(void *)&__p[4] = v37;
              __int16 v40 = 2114;
              uint64_t v41 = v38;
              _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Now tracking requests: %{public}@ with currently tracking devices: %{public}@",  __p,  0x16u);
            }
          }

          else if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR))
          {
            sub_10068BC74();
          }
        }

        else
        {
          unint64_t v9 = (os_log_s *)qword_1008F76E8;
          if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR)) {
            sub_10068BC10(a4, v9, v10, v11, v12, v13, v14, v15);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR))
      {
        sub_10068BBE4();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR))
    {
      sub_10068BBB8();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR))
  {
    sub_10068BB8C();
  }
}

void sub_100504A88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_100504B20(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089EB10);
  }
  uint64_t v4 = sub_1005CC198((uint64_t)off_1008D5F28, v3, 0);
  uint64_t v5 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 840LL))(v5, v4, a1 + 19, a1 + 20);
  [*(id *)(a1 + 56) removeObject:v3];
  uint64_t v6 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [*(id *)(a1 + 56) count];
    int v8 = *(unsigned __int8 *)(a1 + 19);
    int v9 = *(unsigned __int8 *)(a1 + 20);
    int v10 = 134218496;
    id v11 = v7;
    __int16 v12 = 1024;
    int v13 = v8;
    __int16 v14 = 1024;
    int v15 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "stopTrackingForDevice - tracked devices: %lu, total: %d, remaining: %d",  (uint8_t *)&v10,  0x18u);
  }
}

void sub_100504C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100504C8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
    *(_DWORD *)std::string __p = 138543618;
    *(void *)&__p[4] = v3;
    __int16 v16 = 2048;
    uint64_t v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "removeSessionFromTrackingSessions %{public}@, number of currently tracking sessions: %lu",  __p,  0x16u);
  }

  if (v3)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 24);
    if (v6 != *(uint64_t **)(a1 + 32))
    {
      uint64_t v7 = -(uint64_t)v6;
      while (1)
      {
        sub_100494958(*v6, (uint64_t)__p);
        if (v18 >= 0) {
          int v8 = __p;
        }
        else {
          int v8 = *(_BYTE **)__p;
        }
        int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
        if (v18 < 0) {
          operator delete(*(void **)__p);
        }

        ++v6;
        v7 -= 8LL;
      }

      uint64_t v10 = -v7;
      id v11 = (const void *)(8 - v7);
      size_t v12 = *(void *)(a1 + 32) - (8 - v7);
      if (v12) {
        memmove((void *)v10, v11, v12);
      }
      *(void *)(a1 + 32) = v10 + v12;

LABEL_17:
      int v13 = (os_log_s *)qword_1008F76E8;
      if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
        *(_DWORD *)std::string __p = 134217984;
        *(void *)&__p[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Now tracking sessions: %lu", __p, 0xCu);
      }
    }
  }
}

void sub_100504E74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_100504EB0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 18))
  {
    if (a2)
    {
      sub_100494958(a2, (uint64_t)buf);
      if (v39 >= 0) {
        uint64_t v4 = buf;
      }
      else {
        uint64_t v4 = *(_BYTE **)buf;
      }
      id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4));
      if (SHIBYTE(v39) < 0) {
        operator delete(*(void **)buf);
      }
      if (v22)
      {
        uint64_t v5 = (void *)[*(id *)(a1 + 48) objectForKeyedSubscript:];
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);

        uint64_t v7 = (os_log_s *)qword_1008F76E8;
        if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)(a1 + 48);
          *(_DWORD *)std::stringbuf::string_type buf = 138543874;
          *(void *)&uint8_t buf[4] = v22;
          __int16 v37 = 2114;
          int v38 = v6;
          __int16 v39 = 2114;
          uint64_t v40 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "stopTrackingForSession: %{public}@ for tracking devices %{public}@ from requests %{public}@",  buf,  0x20u);
        }

        __int128 v32 = 0u;
        __int128 v33 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        id obj = v6;
        id v9 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
        if (v9)
        {
          uint64_t v24 = *(void *)v31;
          do
          {
            id v25 = v9;
            for (uint64_t i = 0LL; i != v25; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v31 != v24) {
                objc_enumerationMutation(obj);
              }
              id v11 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
              __int128 v26 = 0u;
              __int128 v27 = 0u;
              __int128 v28 = 0u;
              __int128 v29 = 0u;
              size_t v12 = (void *)[v11 appleTypes];
              int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 allObjects]);

              id v14 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
              if (v14)
              {
                uint64_t v15 = *(void *)v27;
                do
                {
                  for (uint64_t j = 0LL; j != v14; uint64_t j = (char *)j + 1)
                  {
                    if (*(void *)v27 != v15) {
                      objc_enumerationMutation(v13);
                    }
                    uint64_t v17 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)j);
                    char v18 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceUUID]);
                    sub_100504648(a1, a2, v18, [v17 intValue]);
                  }

                  id v14 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
                }

                while (v14);
              }
            }

            id v9 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
          }

          while (v9);
        }

        uint64_t v19 = (os_log_s *)qword_1008F76E8;
        if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = *(void *)(a1 + 48);
          uint64_t v21 = *(void **)(a1 + 56);
          *(_DWORD *)std::stringbuf::string_type buf = 138543618;
          *(void *)&uint8_t buf[4] = v20;
          __int16 v37 = 2114;
          int v38 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Now tracking %{public}@ with devices %{public}@",  buf,  0x16u);
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR))
      {
        sub_10068BCF8();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR))
    {
      sub_10068BCCC();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_ERROR))
  {
    sub_10068BCA0();
  }

void sub_100505264( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
}

uint64_t sub_1005052F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + sub_100242E28(v1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + sub_100242E28(v1 + 40) = 0LL;
  return result;
}

void sub_100505304(uint64_t a1)
{
}

void sub_10050530C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v10 = a3;
  id v6 = sub_100503A88((uint64_t)v10, v10, *(void **)(a1 + 32));
  uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + sub_100242E28(v1 + 40) = v7;

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)) {
    *a4 = 1;
  }
}

void sub_10050537C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100505390(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v4 = a3;
  id v5 = [v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v4);
        }
        if (objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)i),  "rssiIncreaseScanThreshold",  (void)v8))
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
          goto LABEL_11;
        }
      }

      id v5 = [v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

void sub_100505498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005054BC(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = a3;
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        __int128 v8 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        if (objc_msgSend(v8, "rssiIncreaseScanThreshold", (void)v10))
        {
          unsigned int v9 = [v8 rssiIncreaseScanThreshold];
          if (v9 < [*(id *)(a1 + 32) rssiIncreaseScanThreshold])
          {
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v8);
            *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
          }
        }
      }

      id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }

  [ *(id *)(a1 + 32) setRssiIncreaseScanThreshold:[ *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) rssiIncreaseScanThreshold]];
  [*(id *)(a1 + 32) setRssiIncreaseScanWindowThreshold:[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) rssiIncreaseScanWindowThreshold]];
  [*(id *)(a1 + 32) setRssiIncreaseScanIntervalThreshold:[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) rssiIncreaseScanIntervalThreshold]];
  [ *(id *)(a1 + 32) setRssiIncreaseScanTimeoutThreshold:[ *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) rssiIncreaseScanTimeoutThreshold]];
  [ *(id *)(a1 + 32) setSensorTimeoutBetweenIncreaseScan:[ *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) sensorTimeoutBetweenIncreaseScan]];
}

void sub_100505690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005056BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
    *(_DWORD *)std::string __p = 138543618;
    *(void *)&__p[4] = v3;
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "sessionFromSessionIDString: %{public}@ from tracking sessions: %lu",  __p,  0x16u);
  }

  if (!v3 || (uint64_t v6 = *(uint64_t **)(a1 + 24), v6 == *(uint64_t **)(a1 + 32)))
  {
LABEL_12:
    uint64_t v7 = 0LL;
  }

  else
  {
    while (1)
    {
      uint64_t v7 = *v6;
      sub_100494958(*v6, (uint64_t)__p);
      __int128 v8 = v15 >= 0 ? __p : *(_BYTE **)__p;
      unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
      if (v15 < 0) {
        operator delete(*(void **)__p);
      }
      unsigned __int8 v10 = [v9 isEqualToString:v3];

      if ((v10 & 1) != 0) {
        break;
      }
    }
  }

  return v7;
}

void sub_100505824( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_100505860(uint64_t a1, void *a2, int a3, char a4)
{
  id v7 = a2;
  __int128 v8 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    else {
      unsigned int v9 = off_10089EB30[(char)(a3 - 1)];
    }
    uint64_t v10 = *(void *)(a1 + 48);
    *(_DWORD *)std::stringbuf::string_type buf = 138543874;
    id v19 = v7;
    __int16 v20 = 2114;
    uint64_t v21 = v9;
    __int16 v22 = 2114;
    uint64_t v23 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "leSensorStateChanged received %{public}@ with state: %{public}@ with currently tracked requests %{public}@",  buf,  0x20u);
  }

  __int128 v11 = *(void **)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1005059DC;
  void v13[3] = &unk_10089E9D0;
  id v14 = v7;
  uint64_t v15 = a1;
  char v16 = a3;
  char v17 = a4;
  id v12 = v7;
  [v11 enumerateKeysAndObjectsUsingBlock:v13];
}

void sub_1005059BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1005059DC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = sub_1005056BC(*(void *)(a1 + 40), v8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  __int128 v9[2] = sub_100505AB0;
  void v9[3] = &unk_10089E9A8;
  id v7 = *(id *)(a1 + 32);
  __int16 v12 = *(_WORD *)(a1 + 48);
  id v10 = v7;
  uint64_t v11 = v6;
  [v5 enumerateObjectsUsingBlock:v9];
}

void sub_100505A88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100505AB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceUUID]);
  unsigned int v5 = [v4 isEqual:*(void *)(a1 + 32)];

  if (v5)
  {
    unsigned int v6 = [v3 currentState];
    [v3 setCurrentState:*(unsigned __int8 *)(a1 + 48)];
    if (v6 == 2)
    {
    }

    else if ((v6 & 0xFFFFFFFD) != 1 || *(_BYTE *)(a1 + 48) != 2)
    {
      goto LABEL_16;
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 appleTypes]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_100505CAC;
    void v16[3] = &unk_10089E980;
    __int128 v12 = *(_OWORD *)(a1 + 32);
    id v8 = (id)v12;
    __int128 v17 = v12;
    char v18 = *(_BYTE *)(a1 + 48);
    [v7 enumerateObjectsUsingBlock:v16];

    if (*(_BYTE *)(a1 + 49))
    {
      uint64_t v9 = sub_1002E9074();
      sub_1004949D8(*(void *)(a1 + 40), &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v11 = *(void *)(a1 + 32);
      __int16 v13 = &off_10087FAA8;
      id v14 = 0LL;
      (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t (***)()))(*(void *)v9 + 40LL))( v9,  7LL,  p_p,  v11,  &v13);
      __int16 v13 = &off_10087FAA8;
      if (v14) {
        sub_1002CD254(v14);
      }
    }
  }

void sub_100505C40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  if (a12) {
    sub_1002CD254(a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100505CAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (qword_1008D67C8 != -1)
  {
    dispatch_once(&qword_1008D67C8, &stru_10089EAF0);
    id v3 = v4;
  }

  sub_100286F38( (uint64_t)off_1008D67C0,  *(void *)(a1 + 40),  *(void **)(a1 + 32),  *(unsigned __int8 *)(a1 + 48),  [v3 intValue]);
}

void sub_100505D3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100505D50(uint64_t a1, void *a2, int a3, char a4)
{
}

void sub_100505D58(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v_Block_object_dispose(va, 8) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------ Sensor Tracking Manager -------------------",  (uint8_t *)&v8,  2u);
    uint64_t v2 = (os_log_s *)qword_1008F76E8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 48) count];
    uint64_t v4 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
    int v8 = 134218240;
    id v9 = v3;
    __int16 v10 = 2048;
    uint64_t v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: Tracking Requests: %lu %lu",  (uint8_t *)&v8,  0x16u);
  }

  [*(id *)(a1 + 48) enumerateKeysAndObjectsUsingBlock:&stru_10089EA10];
  unsigned int v5 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 56) count];
    int v8 = 134217984;
    id v9 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump: Total Devices currently tracked: %lu",  (uint8_t *)&v8,  0xCu);
  }

  [*(id *)(a1 + 56) enumerateObjectsUsingBlock:&stru_10089EA90];
  id v7 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v_Block_object_dispose(va, 8) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------ Sensor Tracking Manager END -------------------",  (uint8_t *)&v8,  2u);
  }

void sub_100505F08(id a1, NSString *a2, NSMutableSet *a3, BOOL *a4)
{
  unsigned int v5 = a3;
  id v6 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    int v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump: --------- %{public}@ ---------",  (uint8_t *)&v7,  0xCu);
  }

  -[NSMutableSet enumerateObjectsUsingBlock:](v5, "enumerateObjectsUsingBlock:", &stru_10089EA50);
}

void sub_100505FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100505FE4(id a1, TrackingDevice *a2, BOOL *a3)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = (__CFString *)objc_claimAutoreleasedReturnValue(-[TrackingDevice deviceUUID](v3, "deviceUUID"));
    int v11 = 138543362;
    __int128 v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump: \tDevice: %{public}@",  (uint8_t *)&v11,  0xCu);

    uint64_t v4 = (os_log_s *)qword_1008F76E8;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(-[TrackingDevice appleTypes](v3, "appleTypes"));
    int v7 = (__CFString *)objc_claimAutoreleasedReturnValue([v6 allObjects]);
    int v11 = 138543362;
    __int128 v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump: \tTypes: %{public}@",  (uint8_t *)&v11,  0xCu);

    uint64_t v4 = (os_log_s *)qword_1008F76E8;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = -[TrackingDevice currentState](v3, "currentState") - 1;
    if (v8 > 2) {
      id v9 = @"Not Set";
    }
    else {
      id v9 = off_10089EB30[(char)v8];
    }
    int v11 = 138543362;
    __int128 v12 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump: \tCurrentState: %{public}@",  (uint8_t *)&v11,  0xCu);
    uint64_t v4 = (os_log_s *)qword_1008F76E8;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = -[TrackingDevice timeoutValue](v3, "timeoutValue");
    int v11 = 67109120;
    LODWORD(v12) = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \tTimeout: %d", (uint8_t *)&v11, 8u);
  }
}

void sub_1005061E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100506214(id a1, NSUUID *a2, BOOL *a3)
{
  id v3 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089EB10);
  }
  uint64_t v4 = sub_1005CC198((uint64_t)off_1008D5F28, v3, 0);
  unsigned int v5 = (os_log_s *)qword_1008F76E8;
  if (os_log_type_enabled((os_log_t)qword_1008F76E8, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = sub_1005BFB9C(v4);
    int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    int v8 = 138543618;
    id v9 = v3;
    __int16 v10 = 2114;
    int v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump: \tDevice: %{public}@ - %{public}@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_100506324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100506354(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_100506384(_Unwind_Exception *a1)
{
}

void sub_100506398(id a1)
{
  uint64_t v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_1005063C8(_Unwind_Exception *a1)
{
}

void sub_1005063DC(id a1)
{
  uint64_t v1 = operator new(0x1A0uLL);
  sub_1002769A4();
  off_1008D67C0 = v1;
}

void sub_10050640C(_Unwind_Exception *a1)
{
}

void sub_100506420(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_100506450(_Unwind_Exception *a1)
{
}

uint64_t sub_100506464(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  uint64_t v4 = sub_1002E6BF0();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, 2LL);
  if (v5) {
    LOBYTE(v5) = sub_1003D86B4(a2);
  }
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v5;
  return a1;
}

void *sub_1005064B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  if (!*(_BYTE *)(a1 + 8)) {
    goto LABEL_15;
  }
  uint64_t v14 = sub_1002E8E5C();
  uint64_t v15 = v14;
  switch((int)a2)
  {
    case 1:
      uint64_t v19 = sub_1003D88B8(*(void *)a1);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 40LL))( v15,  4294967294LL,  v19,  a3,  a4,  a5,  a7);
      break;
    case 2:
      uint64_t v20 = sub_1003D8DAC(*(void *)a1, 0);
      uint64_t v21 = sub_1003D88B8(*(void *)a1);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 40LL))( v15,  v20,  v21,  a3,  a4,  a5,  a7);
      break;
    case 3:
    case 4:
    case 5:
    case 7:
      int v16 = sub_1003D8830(*(void *)a1);
      unsigned __int16 v17 = a6 - a4;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v15 + 48LL))(v15, a2, a4, v17);
      break;
    case 8:
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 56LL))(v15, a4, a5);
      break;
    case 11:
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 64LL))(v14);
      break;
    default:
      goto LABEL_15;
  }

  __int16 v22 = (void *)v18;
  if (!v18)
  {
LABEL_15:
    __int16 v22 = operator new(0x18uLL);
    sub_1005066BC((uint64_t)v22, 0LL);
    void *v22 = &off_10089EB58;
  }

  return v22;
}

void sub_10050663C(_Unwind_Exception *a1)
{
}

uint64_t sub_100506650(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 8)) {
    return 0LL;
  }
  uint64_t v3 = sub_1002E8E5C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 104LL))(v3, a2);
}

void sub_100506698(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100506704(a1);
  operator delete(v1);
}

uint64_t sub_1005066AC()
{
  return 0LL;
}

uint64_t sub_1005066B4()
{
  return 0LL;
}

uint64_t sub_1005066BC(uint64_t a1, size_t __count)
{
  *(void *)a1 = off_10089EB88;
  *(_WORD *)(a1 + _Block_object_dispose(va, 8) = __count;
  *(void *)(a1 + 16) = 0LL;
  if ((_DWORD)__count) {
    *(void *)(a1 + 16) = calloc(__count, 8uLL);
  }
  return a1;
}

uint64_t sub_100506704(uint64_t a1)
{
  *(void *)a1 = off_10089EB88;
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
    if (*(_WORD *)(a1 + 8))
    {
      unint64_t v4 = 0LL;
      do
      {
        uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8 * v4);
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
          unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
        }

        ++v4;
      }

      while (v4 < v3);
      uint64_t v2 = *(void **)(a1 + 16);
    }

    free(v2);
  }

  return a1;
}

uint64_t sub_10050677C(uint64_t a1, unsigned int a2)
{
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 8LL * a2);
  if (!result)
  {
    uint64_t v4 = a2;
    *(void *)(*(void *)(a1 + 16) + 8LL * a2) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    return *(void *)(*(void *)(a1 + 16) + 8 * v4);
  }

  return result;
}

uint64_t sub_1005067DC(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int16 *)(a1 + 8) <= a2)
  {
    uint64_t v4 = (os_log_s *)qword_1008F7618;
    if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_FAULT)) {
      sub_10068BD24(v4);
    }
  }

  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = *(void *)(v5 + 8LL * a2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    uint64_t v5 = *(void *)(a1 + 16);
  }

  *(void *)(v5 + 8LL * a2) = 0LL;
  return result;
}

double sub_10050685C(uint64_t a1)
{
  *(void *)&double result = 0x200000000LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x200000000LL;
  *(void *)a1 = &off_10089EBB8;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + sub_100242E28(v1 + 40) = 1;
  return result;
}

uint64_t sub_100506888(uint64_t a1)
{
  *(void *)a1 = &off_10089EBB8;
  return a1;
}

void sub_1005068C4(void **__p)
{
  void *__p = &off_10089EBB8;
  operator delete(__p);
}

uint64_t sub_100506900(uint64_t a1)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_10089F1A8);
  }
  v9[0] = 0LL;
  v9[1] = 0LL;
  uint64_t v10 = 0LL;
  sub_1004097D0((uint64_t)off_1008D5EF8, (uint64_t)&__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_10002418C(v9, (char *)p_p);
  std::operator+<char>(&__p, "", v9);
  unsigned int v3 = std::string::append(&__p, "");
  std::string::size_type v4 = v3->__r_.__value_.__r.__words[0];
  v11[0] = v3->__r_.__value_.__l.__size_;
  *(void *)((char *)v11 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v3->__r_.__value_.__s.__size_;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = v11[0];
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 31) = *(void *)((char *)v11 + 7);
  *(_BYTE *)(a1 + 39) = size;
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  return 1LL;
}

void sub_100506A4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100506A9C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) == 1) {
    std::string::size_type v4 = "+CGMI: ";
  }
  else {
    std::string::size_type v4 = "+GMI: ";
  }
  uint64_t v5 = std::string::append(&v26, v4);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  id v9 = *(const std::string::value_type **)(a1 + 16);
  uint64_t v8 = a1 + 16;
  int v7 = v9;
  int v10 = *(char *)(v8 + 23);
  if (v10 >= 0) {
    int v11 = (const std::string::value_type *)v8;
  }
  else {
    int v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(v8 + 8);
  }
  __int16 v13 = std::string::append(&v27, v11, v12);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v24, "\r\n");
  if ((v25 & 0x80u) == 0) {
    uint64_t v15 = v24;
  }
  else {
    uint64_t v15 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v16 = v25;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)v24[1];
  }
  unsigned __int16 v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v23 & 0x80u) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v20 = v23;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  uint64_t v21 = std::string::append(&v29, (const std::string::value_type *)v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100506C44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100506CD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_100242E28(v1 + 40) = a2;
  return result;
}

double sub_100506CE0(uint64_t a1)
{
  *(void *)&double result = 0x200000001LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x200000001LL;
  *(void *)a1 = &off_10089EBE8;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + sub_100242E28(v1 + 40) = 1;
  return result;
}

uint64_t sub_100506D0C(uint64_t a1)
{
  *(void *)a1 = &off_10089EBE8;
  return a1;
}

void sub_100506D48(void **__p)
{
  void *__p = &off_10089EBE8;
  operator delete(__p);
}

uint64_t sub_100506D84(uint64_t a1)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_10089F1A8);
  }
  sub_1004096D0((uint64_t)off_1008D5EF8, (uint64_t)__p);
  if (v5 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  std::string::assign((std::string *)(a1 + 16), (const std::string::value_type *)v2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return 1LL;
}

void sub_100506E10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100506E2C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) == 1) {
    std::string::size_type v4 = "+CGMM: ";
  }
  else {
    std::string::size_type v4 = "+GMM: ";
  }
  char v5 = std::string::append(&v26, v4);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  id v9 = *(const std::string::value_type **)(a1 + 16);
  uint64_t v8 = a1 + 16;
  int v7 = v9;
  int v10 = *(char *)(v8 + 23);
  if (v10 >= 0) {
    int v11 = (const std::string::value_type *)v8;
  }
  else {
    int v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(v8 + 8);
  }
  __int16 v13 = std::string::append(&v27, v11, v12);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v24, "\r\n");
  if ((v25 & 0x80u) == 0) {
    uint64_t v15 = v24;
  }
  else {
    uint64_t v15 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v16 = v25;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)v24[1];
  }
  unsigned __int16 v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v23 & 0x80u) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v20 = v23;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  uint64_t v21 = std::string::append(&v29, (const std::string::value_type *)v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100506FD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_100507068(uint64_t a1)
{
  *(void *)&double result = 0x200000002LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x200000002LL;
  *(void *)a1 = &off_10089EC18;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + sub_100242E28(v1 + 40) = 1;
  return result;
}

uint64_t sub_100507090(uint64_t a1)
{
  *(void *)a1 = &off_10089EC18;
  return a1;
}

void sub_1005070CC(void **__p)
{
  void *__p = &off_10089EC18;
  operator delete(__p);
}

uint64_t sub_100507108(uint64_t a1)
{
  char v9 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(v7, "HFP");
  sub_10002418C(__p, "HideGeneralRevision");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v2 + 72LL))(v2, v7, __p, &v9);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v9)
  {
    std::string::assign((std::string *)(a1 + 16), "Unknown");
  }

  else
  {
    if (qword_1008D5F00 != -1) {
      dispatch_once(&qword_1008D5F00, &stru_10089F1A8);
    }
    sub_100409750((uint64_t)off_1008D5EF8, (uint64_t)v7);
    if (v8 >= 0) {
      unsigned int v3 = v7;
    }
    else {
      unsigned int v3 = (void **)v7[0];
    }
    std::string::assign((std::string *)(a1 + 16), (const std::string::value_type *)v3);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }

  return 1LL;
}

void sub_100507218( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100507250(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) == 1) {
    std::string::size_type v4 = "+CGMR: ";
  }
  else {
    std::string::size_type v4 = "+GMR: ";
  }
  char v5 = std::string::append(&v26, v4);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  char v9 = *(const std::string::value_type **)(a1 + 16);
  uint64_t v8 = a1 + 16;
  int v7 = v9;
  int v10 = *(char *)(v8 + 23);
  if (v10 >= 0) {
    int v11 = (const std::string::value_type *)v8;
  }
  else {
    int v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(v8 + 8);
  }
  __int16 v13 = std::string::append(&v27, v11, v12);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v24, "\r\n");
  if ((v25 & 0x80u) == 0) {
    uint64_t v15 = v24;
  }
  else {
    uint64_t v15 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v16 = v25;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)v24[1];
  }
  unsigned __int16 v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v23 & 0x80u) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v20 = v23;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  uint64_t v21 = std::string::append(&v29, (const std::string::value_type *)v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_1005073F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_10050748C(uint64_t a1)
{
  *(void *)&double result = 0x200000003LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x200000003LL;
  *(void *)a1 = &off_10089EC48;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + sub_100242E28(v1 + 40) = 1;
  return result;
}

uint64_t sub_1005074B8(uint64_t a1)
{
  *(void *)a1 = &off_10089EC48;
  return a1;
}

void sub_1005074F4(void **__p)
{
  void *__p = &off_10089EC48;
  operator delete(__p);
}

BOOL sub_100507530()
{
  if (qword_1008D90F8 != -1) {
    dispatch_once(&qword_1008D90F8, &stru_10089F1C8);
  }
  return sub_10054A9DC((uint64_t)off_1008D90F0) == 0;
}

void sub_10050758C(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      goto LABEL_3;
    }
LABEL_38:
    sub_10002418C(a2, "\r\nERROR\r\n");
    return;
  }

  if (!*(_BYTE *)(a1 + 39)) {
    goto LABEL_38;
  }
LABEL_3:
  sub_10002418C(&v24, "\r\n");
  if (*(_DWORD *)(a1 + 40) == 1) {
    std::string::size_type v4 = "+CGSN: ";
  }
  else {
    std::string::size_type v4 = "+GSN: ";
  }
  char v5 = std::string::append(&v24, v4);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  int v7 = *(char *)(a1 + 39);
  if (v7 >= 0) {
    uint64_t v8 = (const std::string::value_type *)(a1 + 16);
  }
  else {
    uint64_t v8 = *(const std::string::value_type **)(a1 + 16);
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    std::string::size_type v9 = *(void *)(a1 + 24);
  }
  int v10 = std::string::append(&v25, v8, v9);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v22, "\r\n");
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v12 = v22;
  }
  else {
    std::string::size_type v12 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v13 = v23;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v22[1];
  }
  __int128 v14 = std::string::append(&v26, (const std::string::value_type *)v12, v13);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v16 = __p;
  }
  else {
    std::string::size_type v16 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v17 = v21;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  __int128 v18 = std::string::append(&v27, (const std::string::value_type *)v16, v17);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  a2[2] = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)a2 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100507768( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005077FC(uint64_t a1, uint64_t a2, int a3, char *__s)
{
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 4;
  *(_DWORD *)(a1 + 12) = a3;
  *(void *)a1 = &off_10089EC78;
  *(void *)(a1 + 16) = 1LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  if (a3 == 2)
  {
    std::string __p = 0LL;
    size_t v27 = 0LL;
    uint64_t v28 = 0LL;
    sub_10002418C(&__p, __s);
    uint64_t v5 = 0LL;
    while (1)
    {
      int v6 = SHIBYTE(dword_1008F1190[v5 + 15]);
      unint64_t v7 = v28 >= 0 ? HIBYTE(v28) : v27;
      uint64_t v8 = v28 >= 0 ? &__p : (void **)__p;
      unint64_t v9 = v6 >= 0 ? HIBYTE(dword_1008F1190[v5 + 15]) : *(void *)&dword_1008F1190[v5 + 12];
      int v10 = v6 >= 0 ? &dword_1008F1190[v5 + 10] : *(int **)&dword_1008F1190[v5 + 10];
      size_t v11 = v9 >= v7 ? v7 : v9;
      if (!memcmp(v8, v10, v11) && v9 == v7) {
        break;
      }
      std::operator+<char>(&v24, "", &dword_1008F1190[v5 + 10]);
      std::string::size_type v13 = std::string::append(&v24, "");
      std::string v25 = *v13;
      v13->__r_.__value_.__l.__size_ = 0LL;
      v13->__r_.__value_.__l.__cap_ = 0LL;
      v13->__r_.__value_.__r.__words[0] = 0LL;
      int size = (char)v25.__r_.__value_.__s.__size_;
      __int128 v15 = (void *)v25.__r_.__value_.__r.__words[0];
      if (v28 >= 0) {
        size_t v16 = HIBYTE(v28);
      }
      else {
        size_t v16 = v27;
      }
      if (v28 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v25.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v18 = v25.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v18 = v25.__r_.__value_.__l.__size_;
      }
      if ((v25.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v19 = &v25;
      }
      else {
        __int128 v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if (v18 >= v16) {
        size_t v20 = v16;
      }
      else {
        size_t v20 = v18;
      }
      BOOL v21 = memcmp(p_p, v19, v20) == 0;
      BOOL v22 = v18 == v16 && v21;
      if (size < 0) {
        operator delete(v15);
      }
      if (v22) {
        break;
      }
      v5 += 8LL;
      if (v5 == 40) {
        goto LABEL_48;
      }
    }

    *(_DWORD *)(a1 + 16) = dword_1008F1190[v5 + 8];
LABEL_48:
    if (SHIBYTE(v28) < 0) {
      operator delete(__p);
    }
  }

  return a1;
}

void sub_1005079C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100507A00(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12);
  if (v1 == 2)
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (v4 != 1)
    {
      *(_DWORD *)(*(void *)(a1 + 32) + 768LL) = v4;
      return 1LL;
    }

    return 0LL;
  }

  if (v1 == 1)
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)(a1 + 32) + 768LL);
    return 1LL;
  }

  if (v1) {
    return 0LL;
  }
  int32x2_t v2 = *(int32x2_t *)(a1 + 20);
  int32x2_t v3 = vadd_s32(v2, (int32x2_t)0x500000005LL);
  v2.i32[0] |= 0x3Eu;
  v2.i32[1] = v3.i32[1];
  *(int32x2_t *)(a1 + 20) = v2;
  return 1LL;
}

void sub_100507A68(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  int v4 = "\r\nERROR\r\n";
  switch(a1[3])
  {
    case 0:
      sub_10002418C(&__p, "\r\n");
      if ((v24 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v6 = v24;
      }
      else {
        std::string::size_type v6 = v23;
      }
      std::string::append(&v25, p_p, v6);
      std::string::append(&v25, "+CSCS: (");
      uint64_t v7 = 0LL;
      int v8 = 0;
      do
      {
        if ((dword_1008F1190[v7] & a1[5]) != 0)
        {
          if (v8) {
            std::string::append(&v25, ",");
          }
          int v9 = SHIBYTE(dword_1008F1190[v7 + 7]);
          if (v9 >= 0) {
            int v10 = (const std::string::value_type *)&dword_1008F1190[v7 + 2];
          }
          else {
            int v10 = *(const std::string::value_type **)&dword_1008F1190[v7 + 2];
          }
          if (v9 >= 0) {
            std::string::size_type v11 = HIBYTE(dword_1008F1190[v7 + 7]);
          }
          else {
            std::string::size_type v11 = *(void *)&dword_1008F1190[v7 + 4];
          }
          std::string::append(&v25, v10, v11);
          ++v8;
        }

        v7 += 8LL;
      }

      while (v7 != 48);
      std::string::append(&v25, ")");
      goto LABEL_41;
    case 1:
      sub_10002418C(&__p, "\r\n");
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v12 = (const std::string::value_type *)&__p;
      }
      else {
        std::string::size_type v12 = (const std::string::value_type *)__p;
      }
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v13 = v24;
      }
      else {
        std::string::size_type v13 = v23;
      }
      std::string::append(&v25, v12, v13);
      std::string::append(&v25, "+CSCS: ");
      for (uint64_t i = 0LL; i != 48; i += 8LL)
      {
        if (a1[4] == dword_1008F1190[i])
        {
          int v15 = SHIBYTE(dword_1008F1190[i + 7]);
          if (v15 >= 0) {
            size_t v16 = (const std::string::value_type *)&dword_1008F1190[i + 2];
          }
          else {
            size_t v16 = *(const std::string::value_type **)&dword_1008F1190[i + 2];
          }
          if (v15 >= 0) {
            std::string::size_type v17 = HIBYTE(dword_1008F1190[i + 7]);
          }
          else {
            std::string::size_type v17 = *(void *)&dword_1008F1190[i + 4];
          }
          std::string::append(&v25, v16, v17);
        }
      }

      goto LABEL_41;
    case 2:
      if (a1[4] != 1) {
        int v4 = "\r\nOK\r\n";
      }
      goto LABEL_60;
    case 3:
LABEL_60:
      sub_10002418C(a2, v4);
      break;
    default:
LABEL_41:
      sub_10002418C(&__p, "\r\n");
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v18 = (const std::string::value_type *)&__p;
      }
      else {
        std::string::size_type v18 = (const std::string::value_type *)__p;
      }
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v19 = v24;
      }
      else {
        std::string::size_type v19 = v23;
      }
      std::string::append(&v25, v18, v19);
      sub_10002418C(&__p, "\r\nOK\r\n");
      if ((v24 & 0x80u) == 0) {
        size_t v20 = (const std::string::value_type *)&__p;
      }
      else {
        size_t v20 = (const std::string::value_type *)__p;
      }
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v21 = v24;
      }
      else {
        std::string::size_type v21 = v23;
      }
      std::string::append(&v25, v20, v21);
      *a2 = v25;
      memset(&v25, 0, sizeof(v25));
      break;
  }

void sub_100507D20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

double sub_100507D78(void *a1)
{
  *(void *)&double result = 0x200000005LL;
  a1[1] = 0x200000005LL;
  *a1 = &off_10089ECA8;
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[2] = 0LL;
  return result;
}

uint64_t sub_100507D9C(uint64_t a1)
{
  *(void *)a1 = &off_10089ECA8;
  return a1;
}

void sub_100507DD8(void **__p)
{
  void *__p = &off_10089ECA8;
  operator delete(__p);
}

BOOL sub_100507E14()
{
  if (qword_1008D90F8 != -1) {
    dispatch_once(&qword_1008D90F8, &stru_10089F1C8);
  }
  return sub_10054A9CC((uint64_t)off_1008D90F0) == 0;
}

void sub_100507E70(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      goto LABEL_3;
    }
LABEL_35:
    sub_10002418C(a2, "\r\nERROR\r\n");
    return;
  }

  if (!*(_BYTE *)(a1 + 39)) {
    goto LABEL_35;
  }
LABEL_3:
  sub_10002418C(&v23, "\r\n");
  int v4 = std::string::append(&v23, "+CIMI: ");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  int v6 = *(char *)(a1 + 39);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)(a1 + 16);
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)(a1 + 16);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    std::string::size_type v8 = *(void *)(a1 + 24);
  }
  int v9 = std::string::append(&v24, v7, v8);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v21, "\r\n");
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v11 = v21;
  }
  else {
    std::string::size_type v11 = (void **)v21[0];
  }
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v12 = v22;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v21[1];
  }
  std::string::size_type v13 = std::string::append(&v25, (const std::string::value_type *)v11, v12);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v20 & 0x80u) == 0) {
    int v15 = __p;
  }
  else {
    int v15 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v16 = v20;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  std::string::size_type v17 = std::string::append(&v26, (const std::string::value_type *)v15, v16);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  a2[2] = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)a2 = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100508038( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005080CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = 7;
  *(_DWORD *)(result + 12) = a2;
  *(void *)double result = &off_10089ECD8;
  return result;
}

uint64_t sub_1005080EC()
{
  return 1LL;
}

void sub_1005080F4(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
      sub_10002418C(&v26, "\r\n");
      int32x2_t v3 = std::string::append(&v26, "+CREG: 1");
      __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__l.__cap_ = v3->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v4;
      v3->__r_.__value_.__l.__size_ = 0LL;
      v3->__r_.__value_.__l.__cap_ = 0LL;
      v3->__r_.__value_.__r.__words[0] = 0LL;
      sub_10002418C(&v23, "\r\n");
      if ((v25 & 0x80u) == 0) {
        __int128 v5 = (const std::string::value_type *)&v23;
      }
      else {
        __int128 v5 = (const std::string::value_type *)v23;
      }
      if ((v25 & 0x80u) == 0) {
        std::string::size_type v6 = v25;
      }
      else {
        std::string::size_type v6 = v24;
      }
      uint64_t v7 = std::string::append(&v27, v5, v6);
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      sub_10002418C(&__p, "\r\nOK\r\n");
      if ((v22 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v22 & 0x80u) == 0) {
        std::string::size_type v10 = v22;
      }
      else {
        std::string::size_type v10 = v21;
      }
      goto LABEL_27;
    case 1:
      sub_10002418C(&v26, "\r\n");
      std::string::size_type v12 = std::string::append(&v26, "+CREG: 1,1");
      __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0LL;
      v12->__r_.__value_.__l.__cap_ = 0LL;
      v12->__r_.__value_.__r.__words[0] = 0LL;
      sub_10002418C(&v23, "\r\n");
      if ((v25 & 0x80u) == 0) {
        __int128 v14 = (const std::string::value_type *)&v23;
      }
      else {
        __int128 v14 = (const std::string::value_type *)v23;
      }
      if ((v25 & 0x80u) == 0) {
        std::string::size_type v15 = v25;
      }
      else {
        std::string::size_type v15 = v24;
      }
      std::string::size_type v16 = std::string::append(&v27, v14, v15);
      __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0LL;
      v16->__r_.__value_.__l.__cap_ = 0LL;
      v16->__r_.__value_.__r.__words[0] = 0LL;
      sub_10002418C(&__p, "\r\nOK\r\n");
      if ((v22 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v22 & 0x80u) == 0) {
        std::string::size_type v10 = v22;
      }
      else {
        std::string::size_type v10 = v21;
      }
LABEL_27:
      __int128 v18 = std::string::append(&v28, p_p, v10);
      __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      a2[2] = v18->__r_.__value_.__l.__cap_;
      *(_OWORD *)a2 = v19;
      v18->__r_.__value_.__l.__size_ = 0LL;
      v18->__r_.__value_.__l.__cap_ = 0LL;
      v18->__r_.__value_.__r.__words[0] = 0LL;
      return;
    case 2:
      std::string::size_type v11 = "\r\nOK\r\n";
      goto LABEL_39;
    default:
      std::string::size_type v11 = "\r\nERROR\r\n";
LABEL_39:
      sub_10002418C(a2, v11);
      return;
  }

void sub_100508340( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005083D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = 8;
  *(_DWORD *)(result + 12) = a2;
  *(void *)double result = &off_10089ED08;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = 0LL;
  return result;
}

uint64_t sub_1005083F0(uint64_t a1)
{
  *(void *)a1 = &off_10089ED08;
  return a1;
}

void sub_10050842C(void **__p)
{
  void *__p = &off_10089ED08;
  operator delete(__p);
}

BOOL sub_100508468(uint64_t a1)
{
  if (qword_1008D90F8 != -1) {
    dispatch_once(&qword_1008D90F8, &stru_10089F1C8);
  }
  int v2 = sub_10054A9EC((uint64_t)off_1008D90F0);
  if (!v2)
  {
    if (SHIBYTE(__p[3]) < 0)
    {
      sub_100024238(&v5, __p[1], (unint64_t)__p[2]);
    }

    else
    {
      __int128 v5 = *(_OWORD *)&__p[1];
      std::string::size_type v6 = __p[3];
    }

    int32x2_t v3 = (void **)(a1 + 16);
    *(_OWORD *)int32x2_t v3 = v5;
    *(void *)(a1 + 32) = v6;
  }

  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  return v2 == 0;
}

void sub_100508558( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100508578@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  return sub_10002418C(a1, "\r\nERROR\r\n");
}

double sub_100508590(void *a1)
{
  *(void *)&double result = 0x200000009LL;
  a1[1] = 0x200000009LL;
  *a1 = &off_10089ED38;
  return result;
}

uint64_t sub_1005085B4()
{
  return 1LL;
}

void sub_1005085BC(std::string *a1@<X8>)
{
  int v2 = std::string::append(&v15, "+CPAS: READY");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v13, "\r\n");
  if ((v14 & 0x80u) == 0) {
    __int128 v4 = v13;
  }
  else {
    __int128 v4 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v5 = v14;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v13[1];
  }
  std::string::size_type v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0) {
    __int128 v8 = __p;
  }
  else {
    __int128 v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::size_type v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100508700( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_10050877C(void *a1)
{
  *(void *)&double result = 0x20000000ALL;
  a1[1] = 0x20000000ALL;
  *a1 = &off_10089ED68;
  return result;
}

uint64_t sub_1005087A0()
{
  return 1LL;
}

void sub_1005087A8(std::string *a1@<X8>)
{
  int v2 = std::string::append(&v15, "+CPIN: READY");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v13, "\r\n");
  if ((v14 & 0x80u) == 0) {
    __int128 v4 = v13;
  }
  else {
    __int128 v4 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v5 = v14;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v13[1];
  }
  std::string::size_type v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0) {
    __int128 v8 = __p;
  }
  else {
    __int128 v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::size_type v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_1005088EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100508968(void *a1)
{
  a1[1] = 0x20000000BLL;
  *a1 = &off_10089ED98;
  sub_10002418C(a1 + 2, "0,0");
  return a1;
}

uint64_t sub_1005089AC(uint64_t a1)
{
  *(void *)a1 = &off_10089ED98;
  return a1;
}

void sub_1005089E8(void **__p)
{
  void *__p = &off_10089ED98;
  operator delete(__p);
}

uint64_t sub_100508A24(uint64_t a1)
{
  uint64_t v14 = 0LL;
  __int128 v12 = 0u;
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)std::string __p = 0u;
  __int128 v11 = 0u;
  memset(v9, 0, sizeof(v9));
  sub_10020E564((uint64_t)v9);
  __int16 v8 = 0;
  uint64_t v2 = sub_1002E8D54();
  (*(void (**)(uint64_t, char *, __int16 *))(*(void *)v2 + 96LL))(v2, (char *)&v8 + 1, &v8);
  __int128 v3 = (void *)std::ostream::operator<<(v9, HIBYTE(v8));
  __int128 v4 = sub_1001FD17C(v3, (uint64_t)",", 1LL);
  std::ostream::operator<<(v4, v8);
  std::stringbuf::str(&v7, (const std::stringbuf *)((char *)v9 + 8));
  std::string::size_type v5 = (void **)(a1 + 16);
  *(_OWORD *)std::string::size_type v5 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
  *(void *)(a1 + 32) = v7.__r_.__value_.__l.__cap_;
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v9 + 8);
  std::ios::~ios(v13);
  return 1LL;
}

void sub_100508B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100508B70(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 v4 = std::string::append(&v25, "+CBC: ");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v8 = *(const std::string::value_type **)(a1 + 16);
  uint64_t v7 = a1 + 16;
  std::string::size_type v6 = v8;
  int v9 = *(char *)(v7 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = (const std::string::value_type *)v7;
  }
  else {
    std::string::size_type v10 = v6;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(v7 + 8);
  }
  __int128 v12 = std::string::append(&v26, v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v23, "\r\n");
  if ((v24 & 0x80u) == 0) {
    uint64_t v14 = v23;
  }
  else {
    uint64_t v14 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v15 = v24;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v23[1];
  }
  std::string v16 = std::string::append(&v27, (const std::string::value_type *)v14, v15);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v22 & 0x80u) == 0) {
    __int128 v18 = __p;
  }
  else {
    __int128 v18 = (void **)__p[0];
  }
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v19 = v22;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  unsigned __int8 v20 = std::string::append(&v28, (const std::string::value_type *)v18, v19);
  *a2 = *v20;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100508D04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100508D98(void *a1)
{
  a1[1] = 0x20000000CLL;
  *a1 = &off_10089EDC8;
  sub_10002418C(a1 + 2, "0");
  return a1;
}

uint64_t sub_100508DDC(uint64_t a1)
{
  *(void *)a1 = &off_10089EDC8;
  return a1;
}

void sub_100508E18(void **__p)
{
  void *__p = &off_10089EDC8;
  operator delete(__p);
}

uint64_t sub_100508E54(uint64_t a1)
{
  int v7 = 0;
  char v6 = 0;
  *(_WORD *)__s = 0;
  if (qword_1008D90F8 != -1) {
    dispatch_once(&qword_1008D90F8, &stru_10089F1C8);
  }
  sub_10054AA0C((uint64_t)off_1008D90F0);
  int v7 = 31;
  sprintf(__s, "%2d", 31);
  uint64_t v2 = (void *)(a1 + 16);
  std::string::assign((std::string *)(a1 + 16), __s);
  __int128 v3 = (os_log_s *)qword_1008F7618;
  if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109634;
    int v9 = v7;
    __int16 v10 = 2082;
    std::string::size_type v11 = __s;
    __int16 v12 = 2082;
    __int128 v13 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Reporting signal quality %i (== %{public}s == %{public}s)",  buf,  0x1Cu);
  }

  return 1LL;
}

void sub_100508FC8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 v4 = std::string::append(&v27, "+CSQ: ");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v8 = *(const std::string::value_type **)(a1 + 16);
  uint64_t v7 = a1 + 16;
  char v6 = v8;
  int v9 = *(char *)(v7 + 23);
  if (v9 >= 0) {
    __int16 v10 = (const std::string::value_type *)v7;
  }
  else {
    __int16 v10 = v6;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(v7 + 8);
  }
  __int16 v12 = std::string::append(&v28, v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = std::string::append(&v29, ",99");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v25, "\r\n");
  if ((v26 & 0x80u) == 0) {
    std::string v16 = v25;
  }
  else {
    std::string v16 = (void **)v25[0];
  }
  if ((v26 & 0x80u) == 0) {
    std::string::size_type v17 = v26;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v25[1];
  }
  __int128 v18 = std::string::append(&v30, (const std::string::value_type *)v16, v17);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v24 & 0x80u) == 0) {
    unsigned __int8 v20 = __p;
  }
  else {
    unsigned __int8 v20 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v21 = v24;
  }
  else {
    std::string::size_type v21 = (std::string::size_type)__p[1];
  }
  unsigned __int8 v22 = std::string::append(&v31, (const std::string::value_type *)v20, v21);
  *a2 = *v22;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_1005091A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10050924C(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 13;
  *(_DWORD *)(a1 + 12) = a3;
  *(void *)a1 = &off_10089EEE8;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v6 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 48LL))(v6, 2LL) && *(_DWORD *)(a1 + 12) == 2)
  {
    uint64_t v7 = 0LL;
    if (*a4 == 34) {
      ++a4;
    }
    while (strncmp(a4, *(const char **)&dword_10089EDE8[v7 + 2], 2uLL))
    {
      v7 += 4LL;
      if (v7 == 60) {
        return a1;
      }
    }

    *(_DWORD *)(a1 + 24) = dword_10089EDE8[v7];
  }

  return a1;
}

uint64_t sub_10050930C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1002E6BF0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, 2LL);
  if ((_DWORD)result)
  {
    uint64_t result = 1LL;
    switch(*(_DWORD *)(a1 + 12))
    {
      case 0:
        return result;
      case 1:
        *(_DWORD *)(a1 + 24) = sub_10050CDA4(a2, *(void *)(a1 + 16));
        *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = sub_10050CDD8((uint64_t)a2, *(void *)(a1 + 16));
        goto LABEL_5;
      case 2:
        if ((sub_10050CC5C((uint64_t)a2, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24)) & 1) != 0)
        {
LABEL_5:
          uint64_t result = 1LL;
        }

        else
        {
          *(_DWORD *)(a1 + 24) = 0;
LABEL_7:
          uint64_t result = 0LL;
        }

        break;
      default:
        goto LABEL_7;
    }
  }

  return result;
}

void sub_1005093B4(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, 2LL) & 1) != 0)
  {
    memset(&v15, 0, sizeof(v15));
    sub_10002418C(&v15, "\r\n");
    std::string::append(&v15, "+CPBS: ");
    __int128 v5 = "\r\nERROR\r\n";
    uint64_t v6 = "(SM,ON,ME,DC,MC,RC)";
    switch(a1[3])
    {
      case 0:
        goto LABEL_12;
      case 1:
        std::string::append(&v15, "");
        uint64_t v7 = 0LL;
        break;
      case 2:
        if (a1[6])
        {
          __int128 v5 = "\r\nOK\r\n";
        }

        else
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
            sub_10068BDA4();
          }
          __int128 v5 = "\r\n+CME ERROR: 22\r\n";
        }

        goto LABEL_33;
      case 3:
LABEL_33:
        sub_10002418C(a2, v5);
        goto LABEL_34;
      default:
        goto LABEL_13;
    }

    while (a1[6] != dword_10089EDE8[v7])
    {
      v7 += 4LL;
      if (v7 == 60) {
        goto LABEL_11;
      }
    }

    std::string::append(&v15, *(const std::string::value_type **)&dword_10089EDE8[v7 + 2]);
LABEL_11:
    std::string::append(&v15, ",");
    int v17 = 0;
    *(void *)std::string __str = 0LL;
    snprintf(__str, 0xCuLL, "%d", a1[7]);
    std::string::append(&v15, __str);
    std::string::append(&v15, ",");
    uint64_t v6 = __str;
    snprintf(__str, 0xCuLL, "%d", a1[7] + 100);
LABEL_12:
    std::string::append(&v15, v6);
LABEL_13:
    sub_10002418C(&__p, "\r\n");
    if ((v14 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v9 = v14;
    }
    else {
      std::string::size_type v9 = v13;
    }
    std::string::append(&v15, p_p, v9);
    sub_10002418C(&__p, "\r\nOK\r\n");
    if ((v14 & 0x80u) == 0) {
      __int16 v10 = (const std::string::value_type *)&__p;
    }
    else {
      __int16 v10 = (const std::string::value_type *)__p;
    }
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v11 = v14;
    }
    else {
      std::string::size_type v11 = v13;
    }
    std::string::append(&v15, v10, v11);
    *a2 = v15;
    memset(&v15, 0, sizeof(v15));
LABEL_34:
  }

  else
  {
    sub_10002418C(a2, "\r\nERROR\r\n");
  }

void sub_100509684( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005096D0(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 14;
  *(_DWORD *)(a1 + 12) = a3;
  *(void *)a1 = off_10089EF18;
  *(void *)(a1 + 16) = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v6 = (unsigned int *)(a1 + 24);
  *(_OWORD *)(a1 + sub_100242E28(v1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  uint64_t v7 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48LL))(v7, 2LL) & 1) != 0
    && *(_DWORD *)(a1 + 12) == 2)
  {
    __int16 v14 = 0;
    *(void *)__int128 __dst = 0LL;
    strlcpy(__dst, a4, 0xAuLL);
    HIBYTE(v14) = 0;
    __int16 v8 = strtok(__dst, ",");
    if (v8)
    {
      unsigned int *v6 = atoi(v8);
      std::string::size_type v9 = strtok(0LL, ",");
      if (!v9)
      {
        unsigned int v11 = *v6;
        goto LABEL_8;
      }

      unsigned int v10 = atoi(v9);
      unsigned int v11 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v10;
      if (v10 < v11)
      {
        unsigned int *v6 = v10;
LABEL_8:
        *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v11;
      }
    }
  }

  return a1;
}

void sub_1005097F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 40);
  sub_10050BE84(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100509814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6BF0();
  int v5 = *(_DWORD *)(a1 + 12);
  if (v5 != 2)
  {
    if (!v5) {
      return sub_10050CF08( a2,  *(void *)(a1 + 16),  (_DWORD *)(a1 + 24),  (_DWORD *)(a1 + 28),  (_DWORD *)(a1 + 32),  (_DWORD *)(a1 + 36));
    }
    return 0LL;
  }

  unsigned int v7 = *(_DWORD *)(a1 + 24);
  unsigned int v8 = *(_DWORD *)(a1 + 28);
  if (v8 - v7 > 0x32) {
    return 0LL;
  }
  return sub_10050D084(a2, *(void *)(a1 + 16), v7, v8, (uint64_t *)(a1 + 40));
}

void *sub_1005098AC@<X0>(_DWORD *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_1002E6BF0();
  uint64_t v35 = 0LL;
  __int128 v33 = 0u;
  memset(v34, 0, sizeof(v34));
  *(_OWORD *)std::string v31 = 0u;
  __int128 v32 = 0u;
  memset(v30, 0, sizeof(v30));
  sub_10020E564((uint64_t)v30);
  switch(a1[3])
  {
    case 0:
      if (a1[7])
      {
        sub_10002418C(&v27, "\r\n");
        if ((v29 & 0x80u) == 0) {
          int v5 = &v27;
        }
        else {
          int v5 = v27;
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v6 = v29;
        }
        else {
          uint64_t v6 = v28;
        }
        unsigned int v7 = sub_1001FD17C(v30, (uint64_t)v5, v6);
        unsigned int v8 = sub_1001FD17C(v7, (uint64_t)"+CPBR: (", 8LL);
        std::string::size_type v9 = (void *)std::ostream::operator<<(v8, a1[6]);
        uint64_t v10 = sub_1001FD17C(v9, (uint64_t)"-", 1LL);
        unsigned int v11 = (void *)std::ostream::operator<<(v10, a1[7]);
        __int16 v12 = sub_1001FD17C(v11, (uint64_t)"),", 2LL);
        std::string::size_type v13 = (void *)std::ostream::operator<<(v12, a1[8]);
        __int16 v14 = sub_1001FD17C(v13, (uint64_t)",", 1LL);
        std::string v15 = (void *)std::ostream::operator<<(v14, a1[9]);
        sub_10002418C(&__p, "\r\n");
        if ((v26 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v26 & 0x80u) == 0) {
          uint64_t v17 = v26;
        }
        else {
          uint64_t v17 = v25;
        }
      }

      else
      {
        sub_10002418C(&v27, "\r\n");
        if ((v29 & 0x80u) == 0) {
          __int128 v19 = &v27;
        }
        else {
          __int128 v19 = v27;
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v20 = v29;
        }
        else {
          uint64_t v20 = v28;
        }
        std::string::size_type v21 = sub_1001FD17C(v30, (uint64_t)v19, v20);
        std::string v15 = sub_1001FD17C(v21, (uint64_t)"+CPBR: (1-1),20,20", 18LL);
        sub_10002418C(&__p, "\r\n");
        if ((v26 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v26 & 0x80u) == 0) {
          uint64_t v17 = v26;
        }
        else {
          uint64_t v17 = v25;
        }
      }

      sub_1001FD17C(v15, (uint64_t)p_p, v17);
      goto LABEL_35;
    case 1:
    case 3:
      goto LABEL_18;
    case 2:
LABEL_18:
      sub_10002418C(a2, "\r\nERROR\r\n");
      break;
    default:
LABEL_35:
      sub_10002418C(&v27, "\r\nOK\r\n");
      if ((v29 & 0x80u) == 0) {
        unsigned __int8 v22 = &v27;
      }
      else {
        unsigned __int8 v22 = v27;
      }
      if ((v29 & 0x80u) == 0) {
        uint64_t v23 = v29;
      }
      else {
        uint64_t v23 = v28;
      }
      sub_1001FD17C(v30, (uint64_t)v22, v23);
      std::stringbuf::str(a2, (const std::stringbuf *)((char *)v30 + 8));
      break;
  }

  if (SHIBYTE(v32) < 0) {
    operator delete(v31[1]);
  }
  std::streambuf::~streambuf((char *)v30 + 8);
  return (void *)std::ios::~ios(v34);
}

void sub_100509BB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_10020E784((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100509C18(uint64_t result, int a2)
{
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = 15;
  *(_DWORD *)(result + 12) = a2;
  *(void *)uint64_t result = &off_10089EF48;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = 0LL;
  return result;
}

uint64_t sub_100509C38(uint64_t a1)
{
  *(void *)a1 = &off_10089EF48;
  return a1;
}

void sub_100509C74(void **__p)
{
  void *__p = &off_10089EF48;
  operator delete(__p);
}

uint64_t sub_100509CB0(uint64_t a1)
{
  uint64_t v2 = sub_1002E6BF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 40LL))(v2, a1 + 16, 1LL);
  return 1LL;
}

void sub_100509CE8(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 12))
  {
    case 1:
      sub_10002418C(&v29, "\r\n");
      int v5 = std::string::append(&v29, "+CCLK: ");
      __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0LL;
      v5->__r_.__value_.__l.__cap_ = 0LL;
      v5->__r_.__value_.__r.__words[0] = 0LL;
      std::string::size_type v9 = *(const std::string::value_type **)(a1 + 16);
      uint64_t v8 = a1 + 16;
      unsigned int v7 = v9;
      int v10 = *(char *)(v8 + 23);
      if (v10 >= 0) {
        unsigned int v11 = (const std::string::value_type *)v8;
      }
      else {
        unsigned int v11 = v7;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(v8 + 8);
      }
      std::string::size_type v13 = std::string::append(&v30, v11, v12);
      __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0LL;
      v13->__r_.__value_.__l.__cap_ = 0LL;
      v13->__r_.__value_.__r.__words[0] = 0LL;
      std::string v15 = std::string::append(&v31, "");
      __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0LL;
      v15->__r_.__value_.__l.__cap_ = 0LL;
      v15->__r_.__value_.__r.__words[0] = 0LL;
      sub_10002418C(v27, "\r\n");
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v27;
      }
      else {
        uint64_t v17 = (void **)v27[0];
      }
      if ((v28 & 0x80u) == 0) {
        std::string::size_type v18 = v28;
      }
      else {
        std::string::size_type v18 = (std::string::size_type)v27[1];
      }
      __int128 v19 = std::string::append(&v32, (const std::string::value_type *)v17, v18);
      __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0LL;
      v19->__r_.__value_.__l.__cap_ = 0LL;
      v19->__r_.__value_.__r.__words[0] = 0LL;
      sub_10002418C(__p, "\r\nOK\r\n");
      if ((v26 & 0x80u) == 0) {
        std::string::size_type v21 = __p;
      }
      else {
        std::string::size_type v21 = (void **)__p[0];
      }
      if ((v26 & 0x80u) == 0) {
        std::string::size_type v22 = v26;
      }
      else {
        std::string::size_type v22 = (std::string::size_type)__p[1];
      }
      uint64_t v23 = std::string::append(&v33, (const std::string::value_type *)v21, v22);
      __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      a2[2] = v23->__r_.__value_.__l.__cap_;
      *(_OWORD *)a2 = v24;
      v23->__r_.__value_.__l.__size_ = 0LL;
      v23->__r_.__value_.__l.__cap_ = 0LL;
      v23->__r_.__value_.__r.__words[0] = 0LL;
      break;
    case 2:
      __int128 v3 = "\r\nOK\r\n";
      goto LABEL_37;
    default:
      __int128 v3 = "\r\nERROR\r\n";
LABEL_37:
      sub_10002418C(a2, v3);
      break;
  }

void sub_100509F10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_100509FBC(void *a1)
{
  *(void *)&double result = 0x200000010LL;
  a1[1] = 0x200000010LL;
  *a1 = &off_10089EF78;
  return result;
}

uint64_t sub_100509FE0()
{
  return 1LL;
}

void *sub_100509FE8@<X0>(void *a1@<X8>)
{
  return sub_10002418C(a1, "\r\nOK\r\n");
}

double sub_100509FF8(void *a1)
{
  *(void *)&double result = 0x200000011LL;
  a1[1] = 0x200000011LL;
  *a1 = &off_10089EFA8;
  return result;
}

uint64_t sub_10050A01C()
{
  return 1LL;
}

void sub_10050A024(std::string *a1@<X8>)
{
  uint64_t v2 = std::string::append(&v15, "+CGATT: 0");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v13, "\r\n");
  if ((v14 & 0x80u) == 0) {
    uint64_t v4 = v13;
  }
  else {
    uint64_t v4 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v5 = v14;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v13[1];
  }
  __int128 v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  int v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_10050A168( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_10050A1E4(void *a1)
{
  *(void *)&double result = 0x200000012LL;
  a1[1] = 0x200000012LL;
  *a1 = &off_10089EFD8;
  return result;
}

uint64_t sub_10050A208()
{
  return 1LL;
}

void sub_10050A210(std::string *a1@<X8>)
{
  uint64_t v2 = std::string::append( &v15,  "+VTS: (0,1,2,3,4,5,6,7,8,9,*,#),(0 - 600)");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(v13, "\r\n");
  if ((v14 & 0x80u) == 0) {
    uint64_t v4 = v13;
  }
  else {
    uint64_t v4 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v5 = v14;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v13[1];
  }
  __int128 v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  sub_10002418C(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  int v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_10050A354( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_10050A3D0(void *a1)
{
  *(void *)&double result = 0x200000013LL;
  a1[1] = 0x200000013LL;
  *a1 = &off_10089F008;
  return result;
}

uint64_t sub_10050A3F4()
{
  return 1LL;
}

void *sub_10050A3FC@<X0>(void *a1@<X8>)
{
  return sub_10002418C(a1, "\r\nOK\r\n");
}

uint64_t sub_10050A40C(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x200000014LL;
  *(void *)a1 = &off_10089F038;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 32) = 0LL;
  uint64_t v4 = (std::string *)(a1 + 32);
  *(void *)(a1 + sub_100242E28(v1 + 40) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  memset(v8, 0, sizeof(v8));
  *(_BYTE *)(a1 + 24) = 0;
  strlcpy((char *)v8, a2, 0x100uLL);
  std::string::size_type v5 = strtok((char *)v8, ",");
  if (v5)
  {
    std::string::assign(v4, v5);
    __int128 v6 = strtok(0LL, ",");
    if (v6)
    {
      *(_DWORD *)(a1 + 56) = atoi(v6);
      *(_BYTE *)(a1 + 24) = 1;
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR))
    {
      sub_10068BE30();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR))
  {
    sub_10068BDD0();
  }

  return a1;
}

void sub_10050A564(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10050A590(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
  {
    *(_WORD *)(*(void *)(a1 + 16) + 576LL) = 257;
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_10089F1E8);
    }
    sub_1003B1A7C(off_1008D5F38, *(void *)(a1 + 16));
  }

  return 1LL;
}

void sub_10050A600(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (qword_1008D9108 != -1) {
      dispatch_once(&qword_1008D9108, &stru_10089F208);
    }
    if (sub_100266BFC(qword_1008D9100, *(void *)(a1 + 16)))
    {
      uint64_t v4 = (os_log_s *)qword_1008F7618;
      if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "AT+APLSIRI response enabled",  (uint8_t *)&buf,  2u);
      }

      sub_10002418C(&v17, "\r\n");
      std::string::size_type v5 = std::string::insert(&v17, 0LL, "\r\n+XAPL=iPhone,15");
      __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0LL;
      v5->__r_.__value_.__l.__cap_ = 0LL;
      v5->__r_.__value_.__r.__words[0] = 0LL;
      sub_10002418C(&__p, "\r\nOK\r\n");
      if ((v16 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v16 & 0x80u) == 0) {
        std::string::size_type v8 = v16;
      }
      else {
        std::string::size_type v8 = v15;
      }
    }

    else
    {
LABEL_14:
      std::string::size_type v9 = (os_log_s *)qword_1008F7618;
      if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "AT+APLSIRI response disabled",  (uint8_t *)&buf,  2u);
      }

      sub_10002418C(&v17, "\r\n");
      int v10 = std::string::insert(&v17, 0LL, "\r\n+XAPL=iPhone,7");
      __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      sub_10002418C(&__p, "\r\nOK\r\n");
      if ((v16 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v16 & 0x80u) == 0) {
        std::string::size_type v8 = v16;
      }
      else {
        std::string::size_type v8 = v15;
      }
    }

    unsigned __int8 v12 = std::string::append(&buf, p_p, v8);
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    a2[2] = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)a2 = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
  }

  else
  {
    sub_10002418C(a2, "\r\nERROR\r\n");
  }

void sub_10050A848( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10050A8A0(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x200000015LL;
  *(void *)a1 = &off_10089F068;
  *(void *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  memset(v11, 0, sizeof(v11));
  strlcpy((char *)v11, a2, 0x100uLL);
  uint64_t v4 = strtok((char *)v11, ",");
  if (v4)
  {
    int v5 = atoi(v4);
    __int128 v6 = strtok(0LL, ",");
    __int128 v7 = strtok(0LL, ",");
    if (v6 && v7)
    {
      while (*v6 - 49 < 5)
      {
        char v8 = *v7;
        uint64_t v9 = *(int *)(a1 + 28);
        *(_DWORD *)(a1 + 4 * v9 + 32) = (*v6 - 49) + 1;
        *(_BYTE *)(a1 + v9 + 28_Block_object_dispose(va, 8) = v8;
        ++*(_DWORD *)(a1 + 28);
        __int128 v6 = strtok(0LL, ",");
        __int128 v7 = strtok(0LL, ",");
        if (!v6 || !v7) {
          goto LABEL_13;
        }
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
        sub_10068BF50();
      }
    }

BOOL sub_10050AAA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_BYTE *)(v2 + 576))
  {
    if (*(int *)(a1 + 28) >= 1)
    {
      uint64_t v4 = 0LL;
      uint64_t v5 = a1 + 288;
      do
      {
        switch(*(_DWORD *)(v5 + 4 * v4 - 256))
        {
          case 1:
            sub_1003D7A88(*(void *)(a1 + 16), (10 * *(_BYTE *)(v5 + v4) + 42) & 0xFE);
            if (qword_1008D5F40 != -1) {
              dispatch_once(&qword_1008D5F40, &stru_10089F1E8);
            }
            sub_1003B2408((uint64_t)off_1008D5F38, *(void *)(a1 + 16));
            goto LABEL_25;
          case 2:
            int v6 = *(unsigned __int8 *)(v5 + v4);
            if (v6 == 49)
            {
              sub_1003D7BC0(*(void *)(a1 + 16), 1LL);
            }

            else if (v6 == 48)
            {
              sub_1003D7BC0(*(void *)(a1 + 16), 0LL);
              if (qword_1008D5F40 != -1) {
                dispatch_once(&qword_1008D5F40, &stru_10089F1E8);
              }
              sub_1003B21C8((uint64_t)off_1008D5F38, *(void *)(a1 + 16));
            }

            goto LABEL_25;
          case 3:
            uint64_t v7 = qword_1008F7618;
            if (!os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_INFO)) {
              goto LABEL_25;
            }
            __int16 v15 = 0;
            char v8 = (uint8_t *)&v15;
            uint64_t v9 = (os_log_s *)v7;
            int v10 = "A65 rebooting";
            break;
          case 4:
            uint64_t v11 = qword_1008F7618;
            if (!os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_INFO)) {
              goto LABEL_25;
            }
            __int16 v14 = 0;
            char v8 = (uint8_t *)&v14;
            uint64_t v9 = (os_log_s *)v11;
            int v10 = "Button 1 action";
            break;
          case 5:
            uint64_t v12 = qword_1008F7618;
            if (!os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_INFO)) {
              goto LABEL_25;
            }
            __int16 v13 = 0;
            char v8 = (uint8_t *)&v13;
            uint64_t v9 = (os_log_s *)v12;
            int v10 = "Button 2 action";
            break;
          default:
            if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
              sub_10068BFDC();
            }
            BOOL result = 0LL;
            *(_BYTE *)(a1 + 24) = 0;
            return result;
        }

        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v10, v8, 2u);
LABEL_25:
        ++v4;
      }

      while (v4 < *(int *)(a1 + 28));
    }

    return 1LL;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10068BFB0();
      return 0LL;
    }
  }

  return result;
}

void *sub_10050AD40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(_BYTE *)(a2 + 576))
  {
    if (*(_BYTE *)(a1 + 24)) {
      return sub_10002418C(a3, "\r\nOK\r\n");
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
      sub_10068C008();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR))
  {
    sub_10068BFB0();
  }

  return sub_10002418C(a3, "\r\nERROR\r\n");
}

uint64_t sub_10050ADE4(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x200000017LL;
  *(void *)a1 = &off_10089F098;
  *(void *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 0;
  memset(v5, 0, sizeof(v5));
  strlcpy((char *)v5, a2, 0x100uLL);
  if (LOBYTE(v5[0]) == 49) {
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

BOOL sub_10050AEA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(unsigned __int8 *)(v1 + 576);
  if (*(_BYTE *)(v1 + 576))
  {
    *(_BYTE *)(v1 + 577) = *(_BYTE *)(a1 + 24);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR))
  {
    sub_10068C034();
  }

  return v2 != 0;
}

void *sub_10050AF04@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 576)) {
    return sub_10002418C(a2, "\r\nOK\r\n");
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
    sub_10068C034();
  }
  return sub_10002418C(a2, "\r\nERROR\r\n");
}

std::string *sub_10050AF78(std::string *a1, const std::string::value_type *a2, std::string::size_type a3)
{
  a1->__r_.__value_.__l.__size_ = 0x200000016LL;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10089F0C8;
  a1->__r_.__value_.__l.__cap_ = a3;
  a1[1].__r_.__value_.__r.__words[0] = 0LL;
  a1[1].__r_.__value_.__l.__size_ = 0LL;
  a1[1].__r_.__value_.__l.__cap_ = 0LL;
  std::string::assign(a1 + 1, a2);
  return a1;
}

void sub_10050AFD0(_Unwind_Exception *exception_object)
{
}

BOOL sub_10050AFF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(unsigned __int8 *)(v1 + 576);
  if (!*(_BYTE *)(v1 + 576) && os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
    sub_10068C060();
  }
  return v2 != 0;
}

void *sub_10050B044@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 576)) {
    return sub_10002418C(a2, "\r\nOK\r\n");
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
    sub_10068C060();
  }
  return sub_10002418C(a2, "\r\nERROR\r\n");
}

uint64_t sub_10050B0B8(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x200000018LL;
  *(void *)a1 = &off_10089F0F8;
  *(void *)(a1 + 16) = a3;
  memset(v11, 0, sizeof(v11));
  strlcpy((char *)v11, a2, 0x100uLL);
  uint64_t v4 = strtok((char *)v11, ",");
  if (v4)
  {
    int v5 = atoi(v4);
    int v6 = strtok(0LL, ",");
    uint64_t v7 = strtok(0LL, ",");
    if (v6 && v7)
    {
      while (*v6 - 49 < 3)
      {
        char v8 = *v7;
        uint64_t v9 = *(int *)(a1 + 28);
        *(_DWORD *)(a1 + 4 * v9 + 32) = (*v6 - 49) + 1;
        *(_BYTE *)(a1 + v9 + 28_Block_object_dispose(va, 8) = v8;
        ++*(_DWORD *)(a1 + 28);
        int v6 = strtok(0LL, ",");
        uint64_t v7 = strtok(0LL, ",");
        if (!v6 || !v7) {
          goto LABEL_13;
        }
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
        sub_10068C14C();
      }
    }

BOOL sub_10050B2B0(uint64_t a1)
{
  if (!*(_BYTE *)(*(void *)(a1 + 16) + 576LL))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_10068C1AC();
    return 0LL;
  }

  if (!*(_BYTE *)(a1 + 24)) {
    return 0LL;
  }
  uint64_t v2 = 0LL;
  uint64_t v3 = a1 + 288;
  while (1)
  {
    int v4 = *(_DWORD *)(v3 + 4 * v2 - 256);
    if (v4 == 3)
    {
      int v5 = (os_log_s *)qword_1008F7618;
      if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)char v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "A65 rebooting", v8, 2u);
      }

      goto LABEL_19;
    }

    if (v4 == 2)
    {
      int v6 = *(unsigned __int8 *)(v3 + v2);
      if (v6 == 49)
      {
        sub_1003D7BC0(*(void *)(a1 + 16), 1LL);
      }

      else if (v6 == 48)
      {
        sub_1003D7BC0(*(void *)(a1 + 16), 0LL);
        if (qword_1008D5F40 != -1) {
          dispatch_once(&qword_1008D5F40, &stru_10089F1E8);
        }
        sub_1003B21C8((uint64_t)off_1008D5F38, *(void *)(a1 + 16));
      }

      goto LABEL_19;
    }

    if (v4 != 1) {
      break;
    }
    sub_1003D7A88(*(void *)(a1 + 16), (10 * *(_BYTE *)(v3 + v2) + 42) & 0xFE);
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_10089F1E8);
    }
    sub_1003B2408((uint64_t)off_1008D5F38, *(void *)(a1 + 16));
LABEL_19:
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
    sub_10068C1D8();
  }
  BOOL result = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

void *sub_10050B4B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(_BYTE *)(a2 + 576))
  {
    if (*(_BYTE *)(a1 + 24)) {
      return sub_10002418C(a3, "\r\nOK\r\n");
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
      sub_10068C008();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR))
  {
    sub_10068BFB0();
  }

  return sub_10002418C(a3, "\r\nERROR\r\n");
}

double sub_10050B554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 0x200000019LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x200000019LL;
  *(void *)a1 = &off_10089F128;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

BOOL sub_10050B578(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(unsigned __int8 *)(v1 + 576);
  if (*(_BYTE *)(v1 + 576))
  {
    if (qword_1008D9108 != -1) {
      dispatch_once(&qword_1008D9108, &stru_10089F208);
    }
    *(_DWORD *)(a1 + 24) = sub_100266BFC(qword_1008D9100, *(void *)(a1 + 16));
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR))
  {
    sub_10068C204();
  }

  return v2 != 0;
}

void sub_10050B610(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_BYTE *)(*(void *)(a1 + 16) + 576LL))
  {
    *(_WORD *)__s = 0;
    sprintf(__s, "%1d", *(_DWORD *)(a1 + 24));
    sub_10002418C(&v19, "\r\n");
    uint64_t v3 = std::string::append(&v19, "+APLSIRI:");
    __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__l.__cap_ = v3->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0LL;
    v3->__r_.__value_.__l.__cap_ = 0LL;
    v3->__r_.__value_.__r.__words[0] = 0LL;
    int v5 = std::string::append(&v20, __s);
    __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0LL;
    v5->__r_.__value_.__l.__cap_ = 0LL;
    v5->__r_.__value_.__r.__words[0] = 0LL;
    sub_10002418C(v17, "\r\n");
    if ((v18 & 0x80u) == 0) {
      uint64_t v7 = v17;
    }
    else {
      uint64_t v7 = (void **)v17[0];
    }
    if ((v18 & 0x80u) == 0) {
      std::string::size_type v8 = v18;
    }
    else {
      std::string::size_type v8 = (std::string::size_type)v17[1];
    }
    uint64_t v9 = std::string::append(&v21, (const std::string::value_type *)v7, v8);
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_10002418C(__p, "\r\nOK\r\n");
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v12 = v16;
    }
    else {
      std::string::size_type v12 = (std::string::size_type)__p[1];
    }
    __int16 v13 = std::string::append(&v22, (const std::string::value_type *)v11, v12);
    __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a2[2] = v13->__r_.__value_.__l.__cap_;
    *(_OWORD *)a2 = v14;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
  }

  else
  {
    sub_10002418C(a2, "\r\nERROR\r\n");
  }

void sub_10050B7CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10050B860(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x20000001ALL;
  *(void *)a1 = &off_10089F158;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 256;
  if (!a2 || !*(_BYTE *)(a3 + 576))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR))
    {
      sub_10068C230();
      if (!a2) {
        return a1;
      }
    }

    else if (!a2)
    {
      return a1;
    }
  }

  if (*a2 == 49) {
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

BOOL sub_10050B904(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008F7618;
  if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 24)) {
      uint64_t v3 = "enabled";
    }
    else {
      uint64_t v3 = "disabled";
    }
    int v5 = 136315138;
    __int128 v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Siri eyes free mode set to %s",  (uint8_t *)&v5,  0xCu);
  }

  if (*(_BYTE *)(*(void *)(a1 + 16) + 576LL) && *(_BYTE *)(a1 + 25))
  {
    if (qword_1008D9108 != -1) {
      dispatch_once(&qword_1008D9108, &stru_10089F208);
    }
    sub_1002671C4(qword_1008D9100, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
    return 1LL;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10068C25C();
      return 0LL;
    }
  }

  return result;
}

void *sub_10050BA44@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(_BYTE *)(*(void *)(a1 + 16) + 576LL) || !*(_BYTE *)(a1 + 25)) {
    return sub_10002418C(a2, "\r\nERROR\r\n");
  }
  uint64_t v3 = (os_log_s *)qword_1008F7618;
  if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Responding with AT_OK for APLEFM", v5, 2u);
  }

  return sub_10002418C(a2, "\r\nOK\r\n");
}

uint64_t sub_10050BAEC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0x20000001BLL;
  *(void *)a1 = &off_10089F188;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 256;
  if (!a2 || !*(_BYTE *)(a3 + 576))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR))
    {
      sub_10068C288();
      if (!a2) {
        return a1;
      }
    }

    else if (!a2)
    {
      return a1;
    }
  }

  if (*a2 == 49) {
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

BOOL sub_10050BB90(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 16) + 576LL) && *(_BYTE *)(a1 + 25))
  {
    if (qword_1008D9108 != -1) {
      dispatch_once(&qword_1008D9108, &stru_10089F208);
    }
    sub_100267254(qword_1008D9100, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
    return 1LL;
  }

  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10068C2B4();
      return 0LL;
    }
  }

  return result;
}

void *sub_10050BC30@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(_BYTE *)(*(void *)(a1 + 16) + 576LL) || !*(_BYTE *)(a1 + 25)) {
    return sub_10002418C(a2, "\r\nERROR\r\n");
  }
  uint64_t v3 = (os_log_s *)qword_1008F7618;
  if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Responsding with AT_OK for APLNRSTAT", v5, 2u);
  }

  return sub_10002418C(a2, "\r\nOK\r\n");
}

uint64_t sub_10050BCD8(uint64_t a1)
{
  *(void *)a1 = off_10089EF18;
  uint64_t v3 = (void **)(a1 + 40);
  sub_10050BE84(&v3);
  return a1;
}

void sub_10050BD1C(char *a1)
{
  *(void *)a1 = off_10089EF18;
  int v2 = (void **)(a1 + 40);
  sub_10050BE84(&v2);
  operator delete(a1);
}

uint64_t sub_10050BD64(uint64_t a1)
{
  *(void *)a1 = &off_10089F038;
  return a1;
}

void sub_10050BDA0(void **__p)
{
  void *__p = &off_10089F038;
  operator delete(__p);
}

uint64_t sub_10050BDEC(uint64_t a1)
{
  *(void *)a1 = &off_10089F0C8;
  return a1;
}

void sub_10050BE28(void **__p)
{
  void *__p = &off_10089F0C8;
  operator delete(__p);
}

void sub_10050BE84(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72LL;
        sub_10050BF08((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10050BF08(uint64_t a1, uint64_t a2)
{
}

void sub_10050BF4C(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10040749C((uint64_t)v1);
  off_1008D5EF8 = v1;
}

void sub_10050BF7C(_Unwind_Exception *a1)
{
}

void sub_10050BF90(id a1)
{
  uint64_t v1 = operator new(0x48uLL);
  sub_10054A778((uint64_t)v1);
  off_1008D90F0 = v1;
}

void sub_10050BFC0(_Unwind_Exception *a1)
{
}

void sub_10050BFD4(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003ADFF0((uint64_t)v1);
  off_1008D5F38 = v1;
}

void sub_10050C004(_Unwind_Exception *a1)
{
}

void sub_10050C018(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_100266BF8();
  qword_1008D9100 = (uint64_t)v1;
}

void sub_10050C048(_Unwind_Exception *a1)
{
}

void sub_10050C05C()
{
  for (uint64_t i = 0LL; i != -48; i -= 8LL)
  {
    if (SHIBYTE(dword_1008F1190[i + 47]) < 0) {
      operator delete(*(void **)&dword_1008F1190[i + 42]);
    }
  }

void sub_10050C0A0()
{
  BOOL v0 = objc_autoreleasePoolPush();
  dword_1008F1190[0] = 1;
  sub_10002418C(qword_1008F1198, "");
  dword_1008F11B0 = 2;
  sub_10002418C(qword_1008F11B8, "GSM");
  dword_1008F11D0 = 4;
  sub_10002418C(qword_1008F11D8, "ASCII");
  dword_1008F11F0 = 8;
  sub_10002418C(qword_1008F11F8, "8859-1");
  dword_1008F1210 = 16;
  sub_10002418C(qword_1008F1218, "UCS2");
  dword_1008F1230 = 32;
  sub_10002418C(qword_1008F1238, "UTF-8");
  __cxa_atexit((void (*)(void *))sub_10050C05C, 0LL, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10050C194(_Unwind_Exception *a1)
{
}

std::string **sub_10050C1A8(std::string **a1, std::string::size_type a2, uint64_t a3)
{
  *a1 = 0LL;
  int v4 = *(_DWORD *)a3;
  uint64_t v7 = "TEST";
  switch(*(_DWORD *)a3)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t v7 = "READ";
      goto LABEL_4;
    case 2:
      uint64_t v7 = "CMD";
LABEL_4:
      __int16 v37 = 0;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      *(_OWORD *)__int128 __dst = 0u;
      std::string::size_type v8 = *(const char **)(a3 + 24);
      int64_t v9 = *(void *)(*(void *)(a3 + 32) + 8LL) - (void)v8 + *(unsigned __int16 *)(*(void *)(a3 + 32) + 18LL);
      if (v9 >= 1)
      {
        if ((unint64_t)v9 >= 0x32)
        {
          __int128 v10 = (os_log_s *)qword_1008F7618;
          if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_INFO))
          {
            LOWORD(v2_Block_object_dispose(va, 8) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Truncating data when copying into params",  (uint8_t *)&v28,  2u);
            std::string::size_type v8 = *(const char **)(a3 + 24);
          }

          int64_t v9 = 49LL;
        }

        strncpy(__dst, v8, v9);
      }

      uint64_t v11 = (os_log_s *)qword_1008F7618;
      if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a3 + 8);
        int v28 = 136446722;
        std::string v29 = v7;
        __int16 v30 = 2082;
        uint64_t v31 = v12;
        __int16 v32 = 2082;
        uint64_t v33 = __dst;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received AT %{public}s command %{public}s %{public}s",  (uint8_t *)&v28,  0x20u);
      }

      __int16 v13 = *(const char **)(a3 + 8);
      if (!strncmp(v13, "+CGMI", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x30uLL);
        sub_10050685C((uint64_t)v14);
LABEL_54:
        *a1 = v14;
        return a1;
      }

      if (!strncmp(v13, "+CGMM", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x30uLL);
        sub_100506CE0((uint64_t)v14);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+CGMR", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x30uLL);
        sub_100507068((uint64_t)v14);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+CGSN", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x30uLL);
        sub_10050748C((uint64_t)v14);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+CSCS", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x28uLL);
        sub_1005079F4((int)v14, a2, v4, __dst);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+CIMI", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x28uLL);
        sub_100507D78(v14);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+GMI", 4uLL))
      {
        __int128 v24 = (std::string *)operator new(0x30uLL);
        sub_10050685C((uint64_t)v24);
        *a1 = v24;
        sub_100506CD8((uint64_t)v24, 0);
        return a1;
      }

      if (!strncmp(v13, "+GMM", 4uLL))
      {
        uint64_t v25 = (std::string *)operator new(0x30uLL);
        sub_100506CE0((uint64_t)v25);
        *a1 = v25;
        sub_100506CD8((uint64_t)v25, 0);
        return a1;
      }

      if (!strncmp(v13, "+GMR", 4uLL))
      {
        unsigned __int8 v26 = (std::string *)operator new(0x30uLL);
        sub_100507068((uint64_t)v26);
        *a1 = v26;
        sub_100506CD8((uint64_t)v26, 0);
        return a1;
      }

      if (!strncmp(v13, "+GSN", 4uLL))
      {
        std::string v27 = (std::string *)operator new(0x30uLL);
        sub_10050748C((uint64_t)v27);
        *a1 = v27;
        sub_100506CD8((uint64_t)v27, 0);
        return a1;
      }

      if (!strncmp(v13, "+CREG", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x10uLL);
        sub_1005080CC((uint64_t)v14, v4);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+COPS", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x28uLL);
        sub_1005083D0((uint64_t)v14, v4);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+CPAS", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x10uLL);
        sub_100508590(v14);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+CPIN", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x10uLL);
        sub_10050877C(v14);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+CBC", 4uLL))
      {
        __int128 v14 = (std::string *)operator new(0x28uLL);
        sub_100508968(v14);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+CSQ", 4uLL))
      {
        __int128 v14 = (std::string *)operator new(0x28uLL);
        sub_100508D98(v14);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+CPBS", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x20uLL);
        sub_100509300((uint64_t)v14, a2, v4, __dst);
        goto LABEL_54;
      }

      if (!strncmp(v13, "+CPBR", 5uLL))
      {
        __int128 v14 = (std::string *)operator new(0x40uLL);
        sub_100509810((uint64_t)v14, a2, v4, __dst);
        goto LABEL_54;
      }

      if (strncmp(v13, "+CPBF", 5uLL) && strncmp(v13, "+CPBW", 5uLL))
      {
        if (!strncmp(v13, "+CCLK", 5uLL))
        {
          __int128 v14 = (std::string *)operator new(0x28uLL);
          sub_100509C18((uint64_t)v14, v4);
        }

        else if (!strncmp(v13, "+CMEE", 5uLL))
        {
          __int128 v14 = (std::string *)operator new(0x10uLL);
          sub_100509FBC(v14);
        }

        else if (!strncmp(v13, "+CGATT", 6uLL))
        {
          __int128 v14 = (std::string *)operator new(0x10uLL);
          sub_100509FF8(v14);
        }

        else if (!strncmp(v13, "+VTS", 4uLL))
        {
          __int128 v14 = (std::string *)operator new(0x10uLL);
          sub_10050A1E4(v14);
        }

        else if (!strncmp(v13, "+VTD", 4uLL))
        {
          __int128 v14 = (std::string *)operator new(0x10uLL);
          sub_10050A3D0(v14);
        }

        else if (!strncmp(v13, "+XAPL", 5uLL))
        {
          __int128 v14 = (std::string *)operator new(0x40uLL);
          sub_10050A58C((uint64_t)v14, __dst, a2);
        }

        else if (!strncmp(v13, "+IPHONEACCEV", 0xCuLL))
        {
          __int128 v14 = (std::string *)operator new(0x160uLL);
          sub_10050AAA0((uint64_t)v14, __dst, a2);
        }

        else if (!strncmp(v13, "+IPHONEEV", 9uLL))
        {
          __int128 v14 = (std::string *)operator new(0x20uLL);
          sub_10050AEA0((uint64_t)v14, __dst, a2);
        }

        else if (!strncmp(v13, "+IPHONEACCINDICATOR", 0x13uLL))
        {
          __int128 v14 = (std::string *)operator new(0x160uLL);
          sub_10050B2AC((uint64_t)v14, __dst, a2);
        }

        else if (!strncmp(v13, "+IPHONEACCNAME", 0xEuLL))
        {
          __int128 v14 = (std::string *)operator new(0x30uLL);
          sub_10050AFEC(v14, __dst, a2);
        }

        else if (!strncmp(v13, "+APLSIRI", 8uLL))
        {
          __int128 v14 = (std::string *)operator new(0x20uLL);
          sub_10050B554((uint64_t)v14, (uint64_t)__dst, a2);
        }

        else if (!strncmp(v13, "+APLNRSTAT", 0xAuLL))
        {
          __int128 v14 = (std::string *)operator new(0x20uLL);
          sub_10050BB8C((uint64_t)v14, __dst, a2);
        }

        else
        {
          if (strncmp(v13, "+APLEFM", 7uLL)) {
            return a1;
          }
          __int128 v14 = (std::string *)operator new(0x20uLL);
          sub_10050B900((uint64_t)v14, __dst, a2);
        }

        goto LABEL_54;
      }

      return a1;
    case 3:
      return a1;
    default:
      __int16 v15 = (os_log_s *)qword_1008F7618;
      if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
        sub_10068C320(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      return a1;
  }

void sub_10050C9B0(_Unwind_Exception *a1)
{
}

uint64_t *sub_10050CA48(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

uint64_t sub_10050CA7C(void *a1, uint64_t a2, uint64_t a3)
{
  if (!*a1) {
    return 0LL;
  }
  if ((*(_DWORD *)(*a1 + 8LL) - 13) <= 1)
  {
    uint64_t v6 = sub_1002E6BF0();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 48LL))(v6, 2LL);
    if ((_DWORD)v7) {
      sub_10050CB04(v7, a2);
    }
  }

  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 16LL))(*a1, a3);
}

void sub_10050CB04(uint64_t a1, uint64_t a2)
{
  if ((sub_1003D79C4(a2) & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7618;
    if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      if (v6 >= 0) {
        int v4 = __p;
      }
      else {
        int v4 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      std::string::size_type v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s now supports contact sync",  buf,  0xCu);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1003D85A0(a2);
    sub_1003D70B0(a2);
  }

void *sub_10050CBF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2 && (uint64_t v3 = *a1) != 0) {
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  else {
    return sub_10002418C(a3, "\r\nERROR\r\n");
  }
}

uint64_t sub_10050CC20(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10050CA7C(a3, a2, a1);
}

void *sub_10050CC30@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  return sub_10050CBF8(a2, a1, a3);
}

uint64_t sub_10050CC38(uint64_t a1, int a2)
{
  else {
    return dword_1006C3BF8[a2 - 1];
  }
}

uint64_t sub_10050CC5C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 1LL;
  *(_DWORD *)(a1 + 16) = 1;
  *(_WORD *)(a1 + 20) = 0;
  *(void *)(a1 + 24) = 0LL;
  if (*(_DWORD *)a1 != a3)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      *(_DWORD *)a1 = 0;
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
      *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(a1 + 16) = 1;
      *(_WORD *)(a1 + 20) = 0;
      *(void *)(a1 + 24) = 0LL;
    }

    uint64_t v3 = sub_10050CC38(v7, a3);
    if ((_DWORD)v3)
    {
      v18[0] = 0LL;
      v18[1] = 0LL;
      sub_1005064B0(v18, a2);
      std::string::size_type v8 = sub_1005064B4((uint64_t)v18, v3, 2LL, 0LL, 0xFFFFLL, 0x14u, 1LL);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
      uint64_t v3 = v8 != 0LL;
      if (v8)
      {
        *(_DWORD *)a1 = a3;
      }

      else
      {
        int64_t v9 = (os_log_s *)qword_1008F7618;
        if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_ERROR)) {
          sub_10068C354(v9, v10, v11, v12, v13, v14, v15, v16);
        }
      }
    }
  }

  return v3;
}

uint64_t sub_10050CD5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    *(_DWORD *)a1 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(a1 + 16) = 1;
    *(_WORD *)(a1 + 20) = 0;
    *(void *)(a1 + 24) = 0LL;
  }

  return result;
}

uint64_t sub_10050CDA4(void *a1, uint64_t a2)
{
  if (!a1[1]) {
    sub_10050CC5C((uint64_t)a1, a2, 11);
  }
  return *(unsigned int *)a1;
}

uint64_t sub_10050CDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4)
  {
    sub_10050CC5C(a1, a2, 11);
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      return 0LL;
    }
  }

  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16LL))(v4);
  if (v5 >= 0x3E9)
  {
    sub_1003D01A0(a2, (uint64_t)__s1);
    if (v12 < 0)
    {
      uint64_t v7 = *(void **)__s1;
      int v8 = strncmp(*(const char **)__s1, "MB PhoneSystem", 0xEuLL);
      operator delete(v7);
      if (v8) {
        return v5;
      }
    }

    else if (*(void *)__s1 != 0x656E6F685020424DLL || *(void *)&__s1[6] != 0x6D6574737953656ELL)
    {
      return v5;
    }

    int64_t v9 = (os_log_s *)qword_1008F7618;
    if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__s1 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Restricting contacts to 1000 on kit matching MB PhoneSystem",  __s1,  2u);
    }

    return 1000LL;
  }

  return v5;
}

uint64_t sub_10050CF08(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  if (!*(void *)(a1 + 8)) {
    sub_10050CC5C(a1, a2, 11);
  }
  int v12 = sub_10050CDD8(a1, a2);
  *a4 = v12;
  *a3 = v12 != 0;
  *a5 = 50;
  *a6 = 50;
  return 1LL;
}

uint64_t sub_10050CF8C(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 16) <= a2)
  {
    unsigned __int16 v4 = *(_WORD *)(a1 + 20);
  }

  else
  {
    unsigned __int16 v4 = 0;
    *(_DWORD *)(a1 + 16) = 1;
    *(_WORD *)(a1 + 20) = 0;
    *(void *)(a1 + 24) = 0LL;
  }

  for (char i = 1; ; char i = 0)
  {
    while (1)
    {
      uint64_t v6 = sub_10050677C(*(void *)(a1 + 8), v4);
      if (!v6) {
        break;
      }
      if (*(void *)(a1 + 24) < (unint64_t)(0x6DB6DB6DB6DB6DB7LL
                                                   * ((uint64_t)(*(void *)(v6 + 240) - *(void *)(v6 + 232)) >> 3)))
      {
        int v7 = *(_DWORD *)(a1 + 16);
        if (v7 == a2) {
          return 1LL;
        }
        *(_DWORD *)(a1 + 16) = v7 + 1;
        char i = 1;
      }

      sub_1005067DC(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 20));
      unsigned __int16 v4 = *(_WORD *)(a1 + 20) + 1;
      *(_WORD *)(a1 + 20) = v4;
    }

    if ((i & 1) == 0) {
      break;
    }
    unsigned __int16 v4 = 0;
    *(_WORD *)(a1 + 20) = 0;
    ++*(void *)(a1 + 24);
  }

  return 0LL;
}

uint64_t sub_10050D084(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v9 = (uint64_t)(a5 + 2);
    while (sub_10050CF8C(a1, a3))
    {
      uint64_t v10 = sub_10050677C(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 20));
      uint64_t v52 = 0LL;
      __int128 v50 = 0u;
      *(_OWORD *)__n128 v51 = 0u;
      *(_OWORD *)__int16 v49 = 0u;
      sub_10046DAE8((void *)v10, *(void *)(a1 + 24), (uint64_t)v49);
      uint64_t v11 = v49;
      if (SBYTE7(v50) < 0) {
        uint64_t v11 = (void **)v49[0];
      }
      BOOL v12 = *(unsigned __int8 *)v11 != 43;
      if (DWORD2(v50) == 4) {
        int v13 = 3;
      }
      else {
        int v13 = 0;
      }
      if (DWORD2(v50) == 3) {
        int v14 = 2;
      }
      else {
        int v14 = v13;
      }
      else {
        int v15 = v14;
      }
      memset(&__dst, 0, sizeof(__dst));
      else {
        std::string __dst = *(std::string *)(v10 + 16);
      }
      std::string::size_type size = __dst.__r_.__value_.__s.__size_;
      if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v17 = (void *)HIBYTE(v52);
        if (v52 < 0) {
          uint64_t v17 = v51[1];
        }
        if (v17)
        {
          std::operator+<char>(&v53, " (", v51);
          uint64_t v18 = std::string::append(&v53, ")");
          __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          *(void *)&uint8_t buf[16] = v18->__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string buf = v19;
          v18->__r_.__value_.__l.__size_ = 0LL;
          v18->__r_.__value_.__l.__cap_ = 0LL;
          v18->__r_.__value_.__r.__words[0] = 0LL;
          if (buf[23] >= 0) {
            uint64_t v20 = buf;
          }
          else {
            uint64_t v20 = *(const std::string::value_type **)buf;
          }
          if (buf[23] >= 0) {
            std::string::size_type v21 = buf[23];
          }
          else {
            std::string::size_type v21 = *(void *)&buf[8];
          }
          std::string::append(&__dst, v20, v21);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      uint64_t v22 = (os_log_s *)qword_1008F7618;
      if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_INFO))
      {
        p_dst = &__dst;
        if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        int v24 = *(unsigned __int16 *)(a1 + 20);
        uint64_t v25 = *(void *)(a1 + 24);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = a3;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = p_dst;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v24;
        *(_WORD *)uint64_t v57 = 2048;
        *(void *)&v57[2] = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "Found index #%u (%{public}s) at entry <%u,%zu>",  buf,  0x22u);
      }

      if (SBYTE7(v50) < 0)
      {
        sub_100024238(v46, v49[0], (unint64_t)v49[1]);
      }

      else
      {
        *(_OWORD *)__int16 v46 = *(_OWORD *)v49;
        uint64_t v47 = v50;
      }

      else {
        std::string __p = __dst;
      }
      sub_10050D6FC((uint64_t)buf, a3, (__int128 *)v46, v12, &__p, v15);
      unint64_t v26 = a5[1];
      unint64_t v27 = a5[2];
      if (v26 >= v27)
      {
        unint64_t v30 = 0x8E38E38E38E38E39LL * ((uint64_t)(v26 - *a5) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0x38E38E38E38E38ELL) {
          abort();
        }
        unint64_t v32 = 0x8E38E38E38E38E39LL * ((uint64_t)(v27 - *a5) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x1C71C71C71C71C7LL) {
          unint64_t v33 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v33 = v31;
        }
        uint64_t v55 = v9;
        id v34 = (char *)sub_10050D844(v9, v33);
        std::string::size_type v35 = (std::string::size_type)&v34[72 * v30];
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        v53.__r_.__value_.__l.__size_ = v35;
        __int128 v54 = &v34[72 * v36];
        *(_DWORD *)std::string::size_type v35 = *(_DWORD *)buf;
        __int128 v37 = *(_OWORD *)&buf[8];
        *(void *)(v35 + 24) = *(void *)v57;
        *(_OWORD *)(v35 + _Block_object_dispose(va, 8) = v37;
        *(void *)&uint8_t buf[16] = 0LL;
        *(void *)uint64_t v57 = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        *(_DWORD *)(v35 + 32) = *(_DWORD *)&v57[8];
        __int128 v38 = v58;
        *(void *)(v35 + 56) = v59;
        *(_OWORD *)(v35 + sub_100242E28(v1 + 40) = v38;
        uint64_t v59 = 0LL;
        __int128 v58 = 0uLL;
        *(_DWORD *)(v35 + 64) = v60;
        v53.__r_.__value_.__l.__cap_ = v35 + 72;
        sub_10050D7AC(a5, &v53);
        uint64_t v39 = a5[1];
        sub_10050D88C((void **)&v53.__r_.__value_.__l.__data_);
        int v40 = SHIBYTE(v59);
        a5[1] = v39;
        if (v40 < 0) {
          operator delete((void *)v58);
        }
      }

      else
      {
        *(_DWORD *)unint64_t v26 = *(_DWORD *)buf;
        __int128 v28 = *(_OWORD *)&buf[8];
        *(void *)(v26 + 24) = *(void *)v57;
        *(_OWORD *)(v26 + _Block_object_dispose(va, 8) = v28;
        *(void *)&uint8_t buf[16] = 0LL;
        *(void *)uint64_t v57 = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        *(_DWORD *)(v26 + 32) = *(_DWORD *)&v57[8];
        __int128 v29 = v58;
        *(void *)(v26 + 56) = v59;
        *(_OWORD *)(v26 + sub_100242E28(v1 + 40) = v29;
        uint64_t v59 = 0LL;
        __int128 v58 = 0uLL;
        *(_DWORD *)(v26 + 64) = v60;
        a5[1] = v26 + 72;
      }

      if ((v57[7] & 0x80000000) != 0) {
        operator delete(*(void **)&buf[8]);
      }
      if (SHIBYTE(v47) < 0) {
        operator delete(v46[0]);
      }
      sub_1005067DC(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 20));
      if (SHIBYTE(v52) < 0) {
        operator delete(v51[0]);
      }
      if (SBYTE7(v50) < 0) {
        operator delete(v49[0]);
      }
      if (++a3 > a4) {
        return 1LL;
      }
    }

    uint64_t v41 = (os_log_s *)qword_1008F7618;
    if (os_log_type_enabled((os_log_t)qword_1008F7618, OS_LOG_TYPE_DEFAULT))
    {
      int v42 = *(unsigned __int16 *)(a1 + 20);
      uint64_t v43 = *(void *)(a1 + 24);
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = a3;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v42;
      *(_WORD *)&uint8_t buf[14] = 2048;
      *(void *)&uint8_t buf[16] = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Could not find entry for index #%u (curEntryIndex=%u, curNumberDepth=%zu)",  buf,  0x18u);
    }
  }

  return 1LL;
}

void sub_10050D600( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, int a43, __int16 a44, char a45, char a46)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  sub_10046DBE4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_10050D6BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10050D6FC(uint64_t a1, int a2, __int128 *a3, int a4, std::string *__str, int a6)
{
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 8), *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v10 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v10;
  }

  *(_DWORD *)(a1 + 32) = a4;
  std::string::basic_string((std::string *)(a1 + 40), __str, 0LL, 0x1F4uLL, (std::allocator<char> *)&v12);
  *(_DWORD *)(a1 + 64) = a6;
  return a1;
}

void sub_10050D790(_Unwind_Exception *exception_object)
{
}

uint64_t *sub_10050D7AC(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 72);
    v2 -= 72LL;
    *(_DWORD *)(v4 - 72) = v5;
    v4 -= 72LL;
    __int128 v6 = *(_OWORD *)(v2 + 8);
    *(void *)(v4 + 24) = *(void *)(v2 + 24);
    *(_OWORD *)(v4 + _Block_object_dispose(va, 8) = v6;
    *(void *)(v2 + 16) = 0LL;
    *(void *)(v2 + 24) = 0LL;
    *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 32);
    __int128 v7 = *(_OWORD *)(v2 + 40);
    *(void *)(v4 + 56) = *(void *)(v2 + 56);
    *(_OWORD *)(v4 + sub_100242E28(v1 + 40) = v7;
    *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + sub_100242E28(v1 + 40) = 0LL;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(v2 + 64);
  }

  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_10050D844(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_100008BD4();
  }
  return operator new(72 * a2);
}

void **sub_10050D88C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10050D8BC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    sub_10050BF08(v4, i - 72);
  }

uint64_t sub_10050D900(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return 0LL;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 96LL))(v4);
  __chkstk_darwin();
  uint64_t v8 = &v17[-v7];
  bzero(&v17[-v7], v9);
  uint64_t v10 = **(void **)(a1 + 16);
  if (*(void *)(a1 + 32))
  {
    int v11 = (*(uint64_t (**)(void))(v10 + 104))();
    if (v11)
    {
      if (dword_1008D9BB8 <= 90)
      {
        int v12 = v11;
        if (dword_1008D9BB8 != -1 || _LogCategory_Initialize(&dword_1008D9BB8, 90LL)) {
          LogPrintF_safe( &dword_1008D9BB8,  "uint32_t AOPFastpathGlue::read(uint8_t *, uint32_t)",  90LL,  "error: Read error 0x%x",  v12);
        }
      }

      return 0LL;
    }
  }

  else
  {
    int v14 = (*(uint64_t (**)(void))(v10 + 112))();
    if (v14)
    {
      if (dword_1008D9BB8 <= 90)
      {
        int v15 = v14;
        if (dword_1008D9BB8 != -1 || _LogCategory_Initialize(&dword_1008D9BB8, 90LL)) {
          LogPrintF_safe( &dword_1008D9BB8,  "uint32_t AOPFastpathGlue::read(uint8_t *, uint32_t)",  90LL,  "error: ReadLast error 0x%x",  v15);
        }
      }
    }
  }

  __int128 v19 = 0LL;
  uint64_t v13 = 0LL;
  if ((_DWORD)a3)
  {
    while ((*(unsigned int (**)(void, void *, uint64_t, const void **, void, void))(**(void **)(a1 + 16) + 128LL))( *(void *)(a1 + 16),  v8,  a1 + 40,  &v19,  0LL,  0LL))
    {
      memcpy(a2, v19, *(unsigned int *)(a1 + 24));
      int v18 = 0;
      (*(void (**)(void, void *, void, int *))(**(void **)(a1 + 16) + 136LL))( *(void *)(a1 + 16),  v8,  *(void *)(a1 + 40),  &v18);
      if (v18)
      {
        if (dword_1008D9BB8 <= 90
          && (dword_1008D9BB8 != -1 || _LogCategory_Initialize(&dword_1008D9BB8, 90LL)))
        {
          LogPrintF_safe( &dword_1008D9BB8,  "uint32_t AOPFastpathGlue::read(uint8_t *, uint32_t)",  90LL,  "interface %0x corrupt count %zd offset %zd, desc read/write [%llu/%llu/%zd, %llu/%llu/%zd",  *(_DWORD *)a1,  v8[10],  v8[11],  v8[3],  v8[4],  v8[2],  v8[8],  v8[9],  v8[7]);
        }

        NSLog(@"Read %u, corrupt %u", v13, 1LL);
        return v13;
      }

      uint64_t v13 = (v13 + 1);
      a2 += *(unsigned int *)(a1 + 24);
      if ((_DWORD)a3 == (_DWORD)v13) {
        return a3;
      }
    }
  }

  return v13;
}

uint64_t sub_10050DBF4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 8);
  uint64_t v10 = *(void **)(a1 + 80);
  int v11 = (void *)(a1 + 88);
  if (v10 != (void *)(a1 + 88))
  {
    uint64_t v12 = a5;
    do
    {
      uint64_t v13 = v10[4];
      if (v13)
      {
        if (*(_BYTE *)(*(void *)(v13 + 64) + 160LL))
        {
          xpc_object_t v14 = xpc_dictionary_create(0LL, 0LL, 0LL);
          int v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(void *)(v13 + 40));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgEvent", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a4);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgState", v12);
            sub_100260FEC(*(void *)(v13 + 64), "kCBMsgIdAccessoryEvent", v15, 1);
          }
        }
      }

      uint64_t v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          uint64_t v17 = (void *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          uint64_t v10 = v17;
        }

        while (!v18);
      }

      uint64_t v10 = v17;
    }

    while (v17 != v11);
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_10050DD60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10050DD74( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, const void *a6, unsigned int a7)
{
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100242F28((uint64_t)v24, a1 + 8);
  xpc_object_t v14 = *(void **)(a1 + 80);
  int v15 = (void *)(a1 + 88);
  if (v14 != (void *)(a1 + 88))
  {
    uint64_t v16 = a5;
    do
    {
      uint64_t v17 = v14[4];
      if (v17)
      {
        if (*(_BYTE *)(*(void *)(v17 + 64) + 160LL))
        {
          xpc_object_t v18 = xpc_dictionary_create(0LL, 0LL, 0LL);
          __int128 v19 = v18;
          if (v18)
          {
            xpc_dictionary_set_uint64(v18, "kCBMsgArgID", *(void *)(v17 + 40));
            xpc_dictionary_set_uint64(v19, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v19, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v19, "kCBMsgArgSetupType", a4);
            xpc_dictionary_set_uint64(v19, "kCBMsgArgOPType", v16);
            xpc_dictionary_set_data(v19, "kCBMsgArgData", a6, a7);
            sub_100260FEC(*(void *)(v17 + 64), "kCBMsgIdAccessorySetupCommand", v19, 1);
          }
        }
      }

      uint64_t v20 = (void *)v14[1];
      if (v20)
      {
        do
        {
          std::string::size_type v21 = v20;
          uint64_t v20 = (void *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          std::string::size_type v21 = (void *)v14[2];
          BOOL v22 = *v21 == (void)v14;
          xpc_object_t v14 = v21;
        }

        while (!v22);
      }

      xpc_object_t v14 = v21;
    }

    while (v21 != v15);
  }

  return sub_100242FAC((uint64_t)v24);
}

void sub_10050DEFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10050DF10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, const void *a6, unsigned int a7)
{
  int bytes = a4;
  __int16 v25 = WORD2(a4);
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_100242F28((uint64_t)v23, a1 + 8);
  uint64_t v13 = *(void **)(a1 + 80);
  xpc_object_t v14 = (void *)(a1 + 88);
  if (v13 != (void *)(a1 + 88))
  {
    size_t v15 = a7;
    do
    {
      uint64_t v16 = v13[4];
      if (v16)
      {
        if (*(_BYTE *)(*(void *)(v16 + 64) + 160LL))
        {
          xpc_object_t v17 = xpc_dictionary_create(0LL, 0LL, 0LL);
          xpc_object_t v18 = v17;
          if (v17)
          {
            xpc_dictionary_set_uint64(v17, "kCBMsgArgID", *(void *)(v16 + 40));
            xpc_dictionary_set_uint64(v18, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v18, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_data(v18, "kCBMsgArgAddressBytes", &bytes, 6uLL);
            xpc_dictionary_set_uint64(v18, "kCBMsgArgRelayMsgType", a5);
            xpc_dictionary_set_data(v18, "kCBMsgArgData", a6, v15);
            sub_100260FEC(*(void *)(v16 + 64), "kCBMsgIdAccessoryRelayMsgRecv", v18, 1);
          }
        }
      }

      __int128 v19 = (void *)v13[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          __int128 v19 = (void *)*v19;
        }

        while (v19);
      }

      else
      {
        do
        {
          uint64_t v20 = (void *)v13[2];
          BOOL v21 = *v20 == (void)v13;
          uint64_t v13 = v20;
        }

        while (!v21);
      }

      uint64_t v13 = v20;
    }

    while (v20 != v14);
  }

  return sub_100242FAC((uint64_t)v23);
}

void sub_10050E0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10050E0B8( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 8);
  uint64_t v12 = *(void **)(a1 + 80);
  if (v12 != (void *)(a1 + 88))
  {
    uint64_t v13 = a6;
    do
    {
      uint64_t v14 = v12[4];
      if (v14)
      {
        if (*(_BYTE *)(*(void *)(v14 + 64) + 160LL))
        {
          xpc_object_t v15 = xpc_dictionary_create(0LL, 0LL, 0LL);
          uint64_t v16 = v15;
          if (v15)
          {
            xpc_dictionary_set_uint64(v15, "kCBMsgArgID", *(void *)(v14 + 40));
            xpc_dictionary_set_uint64(v16, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgCmdReqType", a4);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgResult", a5);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgReason", v13);
            sub_100260FEC(*(void *)(v14 + 64), "kCBMsgIdAccessoryCommandStatus", v16, 1);
          }
        }
      }

      xpc_object_t v17 = (void *)v12[1];
      if (v17)
      {
        do
        {
          xpc_object_t v18 = v17;
          xpc_object_t v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          xpc_object_t v18 = (void *)v12[2];
          BOOL v19 = *v18 == (void)v12;
          uint64_t v12 = v18;
        }

        while (!v19);
      }

      uint64_t v12 = v18;
    }

    while (v18 != (void *)(a1 + 88));
  }

  return sub_100242FAC((uint64_t)v21);
}

void sub_10050E23C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10050E250( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, size_t a6, uint64_t a7)
{
  uint64_t v13 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)unint64_t v27 = 134218752;
    *(void *)&void v27[4] = a2;
    *(_WORD *)&v27[12] = 2048;
    *(void *)&_BYTE v27[14] = a3;
    __int16 v28 = 1024;
    unsigned int v29 = a4;
    __int16 v30 = 2048;
    size_t v31 = a6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "BTAccessoryMsgHandler::BTAccessoryCustomCallbackHandler manager:%llX device:%llX type:%X dataSize:%zu",  v27,  0x26u);
  }

  *(void *)unint64_t v27 = 0LL;
  *(void *)&v27[8] = 0LL;
  sub_100242F28((uint64_t)v27, a1 + 8);
  uint64_t v14 = *(void **)(a1 + 80);
  if (v14 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v15 = v14[4];
      if (v15 && *(_BYTE *)(*(void *)(v15 + 64) + 160LL) && *(_DWORD *)(v15 + 48) == a4)
      {
        uint64_t v16 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = *(void *)(v15 + 40);
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v26 = v22;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "BTAccessoryMsgHandler::BTAccessoryCustomCallbackHandler cbid:%llu",  buf,  0xCu);
        }

        xpc_object_t v17 = xpc_dictionary_create(0LL, 0LL, 0LL);
        xpc_object_t v18 = v17;
        if (v17)
        {
          xpc_dictionary_set_uint64(v17, "kCBMsgArgID", *(void *)(v15 + 40));
          xpc_dictionary_set_uint64(v18, "kCBMsgArgAccessoryManagerID", a2);
          xpc_dictionary_set_uint64(v18, "kCBMsgArgBTDevice", a3);
          xpc_dictionary_set_uint64(v18, "kCBMsgArgCustomMessageType", a4);
          xpc_dictionary_set_data(v18, "kCBMsgArgData", a5, a6);
          xpc_dictionary_set_uint64(v18, "kCBMsgArgUserData", a7);
          sub_100260FEC(*(void *)(v15 + 64), "kCBMsgIdAccessoryCustomMessage", v18, 1);
        }
      }

      BOOL v19 = (void *)v14[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          BOOL v19 = (void *)*v19;
        }

        while (v19);
      }

      else
      {
        do
        {
          uint64_t v20 = (void *)v14[2];
          BOOL v21 = *v20 == (void)v14;
          uint64_t v14 = v20;
        }

        while (!v21);
      }

      uint64_t v14 = v20;
    }

    while (v20 != (void *)(a1 + 88));
  }

  return sub_100242FAC((uint64_t)v27);
}

void sub_10050E4E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_10050E4FC(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a5) {
    return sub_10050DBF4(a5, result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_10050E520( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, const void *a5, unsigned int a6, uint64_t a7)
{
  if (a7) {
    return sub_10050DD74(a7, result, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t sub_10050E54C( uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, unsigned int a6, uint64_t a7)
{
  if (a7) {
    return sub_10050DF10(a7, result, a2, a3 & 0xFFFFFFFFFFFFLL, a4, a5, a6);
  }
  return result;
}

uint64_t sub_10050E57C( uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  if (a6) {
    return sub_10050E0B8(a6, result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t sub_10050E5A4(uint64_t a1, uint64_t a2, unsigned int a3, const void *a4, size_t a5, uint64_t *a6)
{
  uint64_t v12 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 134219008;
    uint64_t v16 = a1;
    __int16 v17 = 2048;
    uint64_t v18 = a2;
    __int16 v19 = 1024;
    unsigned int v20 = a3;
    __int16 v21 = 2048;
    size_t v22 = a5;
    __int16 v23 = 2048;
    int v24 = a6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "BTAccessoryMsgHandler::BTAccessoryCustomMessageCallback manager:%llX device:%llX type:%X dataSize:%zu userData:%p",  (uint8_t *)&v15,  0x30u);
  }

  uint64_t result = *a6;
  if (*a6)
  {
    uint64_t v14 = *a6;
    if (a3 == 64) {
      uint64_t v14 = a6[1];
    }
    return sub_10050E250(result, a1, a2, a3, a4, a5, v14);
  }

  return result;
}

void *sub_10050E6CC(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_10043C910(a1, a2);
  *uint64_t v3 = &off_10089F238;
  v3[11] = 0LL;
  v3[12] = 0LL;
  v3[10] = v3 + 11;
  *((_WORD *)v3 + 52) = 0;
  if (qword_1008F1250 != -1) {
    dispatch_once(&qword_1008F1250, &stru_10089F258);
  }
  return a1;
}

void sub_10050E738(id a1)
{
  __int16 v77 = "kCBMsgIdAccessoryGetDefaultMsg";
  uint64_t v78 = 30LL;
  __int16 v79 = &v77;
  uint64_t v1 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v1[4] = sub_10050F7B8;
  v1[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryAddCallbacksMsg";
  uint64_t v78 = 32LL;
  __int16 v79 = &v77;
  uint64_t v2 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v2[4] = sub_10050F910;
  v2[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryRemoveCallbacksMsg";
  uint64_t v78 = 35LL;
  __int16 v79 = &v77;
  uint64_t v3 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v3[4] = sub_10050FC14;
  void v3[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryRegisterDeviceMsg";
  uint64_t v78 = 34LL;
  __int16 v79 = &v77;
  uint64_t v4 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v4[4] = sub_10050FEE8;
  void v4[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryPlugInDeviceMsg";
  uint64_t v78 = 32LL;
  __int16 v79 = &v77;
  int v5 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  _OWORD v5[4] = sub_1005100A0;
  void v5[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryUnplugDeviceMsg";
  uint64_t v78 = 32LL;
  __int16 v79 = &v77;
  __int128 v6 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v6[4] = sub_100510188;
  void v6[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDeviceStateMsg";
  uint64_t v78 = 34LL;
  __int16 v79 = &v77;
  uint64_t v7 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v7[4] = sub_100510270;
  void v7[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDevicesMsg";
  uint64_t v78 = 30LL;
  __int16 v79 = &v77;
  uint64_t v8 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v8[4] = sub_10051037C;
  void v8[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDeviceBatteryLevelMsg";
  uint64_t v78 = 41LL;
  __int16 v79 = &v77;
  size_t v9 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  _OWORD v9[4] = sub_100510540;
  void v9[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDeviceBatteryStatusMsg";
  uint64_t v78 = 42LL;
  __int16 v79 = &v77;
  uint64_t v10 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v10[4] = sub_10051064C;
  void v10[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetTimeSyncIdMsg";
  uint64_t v78 = 33LL;
  __int16 v79 = &v77;
  int v11 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v11[4] = sub_10051083C;
  void v11[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryIsAccessoryMsg";
  uint64_t v78 = 31LL;
  __int16 v79 = &v77;
  uint64_t v12 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v12[4] = sub_100510948;
  void v12[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGenerateLinkKeyMsg";
  uint64_t v78 = 35LL;
  __int16 v79 = &v77;
  uint64_t v13 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v13[4] = sub_100510A54;
  void v13[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetLinkKeyExMsg";
  uint64_t v78 = 32LL;
  __int16 v79 = &v77;
  uint64_t v14 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v14[4] = sub_100510BF0;
  v14[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetFirstSettingMsg";
  uint64_t v78 = 35LL;
  __int16 v79 = &v77;
  int v15 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v15[4] = sub_100510E08;
  void v15[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetSecondSettingMsg";
  uint64_t v78 = 36LL;
  __int16 v79 = &v77;
  uint64_t v16 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v16[4] = sub_100510F08;
  v16[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetFirstSettingMsg";
  uint64_t v78 = 35LL;
  __int16 v79 = &v77;
  __int16 v17 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v17[4] = sub_100511008;
  void v17[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetRemoteTimeSyncMsg";
  uint64_t v78 = 37LL;
  __int16 v79 = &v77;
  uint64_t v18 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v18[4] = sub_100511114;
  void v18[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetSecondSettingMsg";
  uint64_t v78 = 36LL;
  __int16 v79 = &v77;
  __int16 v19 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v19[4] = sub_100511214;
  v19[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryRegisterCustomMessageClientMsg";
  uint64_t v78 = 47LL;
  __int16 v79 = &v77;
  unsigned int v20 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  uint8_t v20[4] = sub_100511320;
  void v20[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryDeregisterCustomMessageClientMsg";
  uint64_t v78 = 49LL;
  __int16 v79 = &v77;
  __int16 v21 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v21[4] = sub_1005116F8;
  void v21[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySendCustomMessageMsg";
  uint64_t v78 = 37LL;
  __int16 v79 = &v77;
  size_t v22 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v22[4] = sub_1005119D8;
  void v22[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDeviceDiagnosticsMsg";
  uint64_t v78 = 40LL;
  __int16 v79 = &v77;
  __int16 v23 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v23[4] = sub_100511B0C;
  v23[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySendRequestPeriodicallyMsg";
  uint64_t v78 = 43LL;
  __int16 v79 = &v77;
  int v24 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v24[4] = sub_100511CA0;
  v24[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryCancelRequestPeriodicallyMsg";
  uint64_t v78 = 45LL;
  __int16 v79 = &v77;
  __int16 v25 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v25[4] = sub_100511DC0;
  void v25[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySendControlCommandMsg";
  uint64_t v78 = 38LL;
  __int16 v79 = &v77;
  uint64_t v26 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v26[4] = sub_100511EC0;
  v26[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDoubleTapActionMsg";
  uint64_t v78 = 38LL;
  __int16 v79 = &v77;
  unint64_t v27 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v27[4] = sub_100511FE0;
  v27[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetControlCommandMsg";
  uint64_t v78 = 37LL;
  __int16 v79 = &v77;
  __int16 v28 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v28[4] = sub_1005120EC;
  v28[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDoubleTapActionExMsg";
  uint64_t v78 = 40LL;
  __int16 v79 = &v77;
  unsigned int v29 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v29[4] = sub_100512230;
  v29[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDoubleTapCapabilityMsg";
  uint64_t v78 = 42LL;
  __int16 v79 = &v77;
  __int16 v30 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  _OWORD v30[4] = sub_100512354;
  v30[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetInEarStatusMsg";
  uint64_t v78 = 34LL;
  __int16 v79 = &v77;
  size_t v31 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v31[4] = sub_100512460;
  v31[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetFeatureCapabilityMsg";
  uint64_t v78 = 40LL;
  __int16 v79 = &v77;
  unint64_t v32 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v32[4] = sub_100512588;
  v32[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetDoubleTapActionMsg";
  uint64_t v78 = 38LL;
  __int16 v79 = &v77;
  unint64_t v33 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v33[4] = sub_1005126AC;
  v33[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetDoubleTapActionExMsg";
  uint64_t v78 = 40LL;
  __int16 v79 = &v77;
  id v34 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v34[4] = sub_1005127AC;
  v34[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetSettingFeatureBitMaskMsg";
  uint64_t v78 = 44LL;
  __int16 v79 = &v77;
  std::string::size_type v35 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v35[4] = sub_1005128CC;
  v35[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetAccessoryInfoMsg";
  uint64_t v78 = 36LL;
  __int16 v79 = &v77;
  uint64_t v36 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v36[4] = sub_1005129D8;
  v36[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryReadDeviceVersionInfoMsg";
  uint64_t v78 = 41LL;
  __int16 v79 = &v77;
  __int128 v37 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v37[4] = sub_100512B6C;
  v37[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDeviceColorMsg";
  uint64_t v78 = 34LL;
  __int16 v79 = &v77;
  __int128 v38 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v38[4] = sub_100512F48;
  v38[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetWirelessSharingSpatialMsg";
  uint64_t v78 = 45LL;
  __int16 v79 = &v77;
  uint64_t v39 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v39[4] = sub_100513054;
  v39[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetupCommandMsg";
  uint64_t v78 = 32LL;
  __int16 v79 = &v77;
  int v40 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v40[4] = sub_100513160;
  v40[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySendRelayMsgMsg";
  uint64_t v78 = 32LL;
  __int16 v79 = &v77;
  uint64_t v41 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v41[4] = sub_1005132AC;
  void v41[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryUpdateConnPriorityListMsg";
  uint64_t v78 = 42LL;
  __int16 v79 = &v77;
  int v42 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v42[4] = sub_100513454;
  v42[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetNonAppleHAEPairedDevicesMsg";
  uint64_t v78 = 47LL;
  __int16 v79 = &v77;
  uint64_t v43 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v43[4] = sub_100513648;
  v43[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySmartRouteModeMsg";
  uint64_t v78 = 34LL;
  __int16 v79 = &v77;
  __int16 v44 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v44[4] = sub_100513828;
  v44[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetSmartRouteModeMsg";
  uint64_t v78 = 37LL;
  __int16 v79 = &v77;
  uint64_t v45 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v45[4] = sub_100513928;
  v45[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetSmartRouteSupportMsg";
  uint64_t v78 = 40LL;
  __int16 v79 = &v77;
  __int16 v46 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v46[4] = sub_100513A34;
  v46[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetDeviceStateOnPeerSrcMsg";
  uint64_t v78 = 43LL;
  __int16 v79 = &v77;
  uint64_t v47 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v47[4] = sub_100513B40;
  v47[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetSpatialAudioPlatformSupportMsg";
  uint64_t v78 = 50LL;
  __int16 v79 = &v77;
  uint64_t v48 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v48[4] = sub_100513CC4;
  v48[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDeviceSoundProfileSupportMsg";
  uint64_t v78 = 48LL;
  __int16 v79 = &v77;
  __int16 v49 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v49[4] = sub_100513DD0;
  v49[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetDeviceSoundProfileAllowedMsg";
  uint64_t v78 = 48LL;
  __int16 v79 = &v77;
  __int128 v50 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  uint8_t v50[4] = sub_100513EE8;
  v50[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetDeviceSoundProfileAllowedMsg";
  uint64_t v78 = 48LL;
  __int16 v79 = &v77;
  __n128 v51 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v51[4] = sub_100514004;
  v51[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetCallManagementConfigMsg";
  uint64_t v78 = 43LL;
  __int16 v79 = &v77;
  uint64_t v52 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v52[4] = sub_100514110;
  v52[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetFeatureProxCardStatusMsg";
  uint64_t v78 = 44LL;
  __int16 v79 = &v77;
  std::string v53 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v53[4] = sub_1005142A4;
  v53[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetFeatureProxCardStatusMsg";
  uint64_t v78 = 44LL;
  __int16 v79 = &v77;
  __int128 v54 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v54[4] = sub_1005143BC;
  void v54[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetStereoHFPSupportMsg";
  uint64_t v78 = 39LL;
  __int16 v79 = &v77;
  uint64_t v55 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v55[4] = sub_1005144C8;
  void v55[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetAnnounceMessagesSupportMsg";
  uint64_t v78 = 46LL;
  __int16 v79 = &v77;
  unsigned int v56 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v56[4] = sub_1005145D4;
  void v56[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetAACPCapabilityBitsMsg";
  uint64_t v78 = 41LL;
  __int16 v79 = &v77;
  uint64_t v57 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v57[4] = sub_1005146E0;
  v57[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetAACPCapabilityIntegerMsg";
  uint64_t v78 = 44LL;
  __int16 v79 = &v77;
  __int128 v58 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v58[4] = sub_100514874;
  void v58[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySensorStreamTimeSyncEnableMsg";
  uint64_t v78 = 46LL;
  __int16 v79 = &v77;
  uint64_t v59 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v59[4] = sub_100514998;
  v59[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetAnnounceCallsSupportMsg";
  uint64_t v78 = 43LL;
  __int16 v79 = &v77;
  int v60 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v60[4] = sub_100514A98;
  v60[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySpatialAudioModeMsg";
  uint64_t v78 = 36LL;
  __int16 v79 = &v77;
  uint64_t v61 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v61[4] = sub_100514BA4;
  v61[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetSpatialAudioModeMsg";
  uint64_t v78 = 39LL;
  __int16 v79 = &v77;
  uint64_t v62 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  uint8_t v62[4] = sub_100514CE8;
  v62[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySpatialAudioAllowedMsg";
  uint64_t v78 = 39LL;
  __int16 v79 = &v77;
  uint64_t v63 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v63[4] = sub_100514E38;
  v63[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetSpatialAudioAllowedMsg";
  uint64_t v78 = 42LL;
  __int16 v79 = &v77;
  int v64 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  _OWORD v64[4] = sub_100514F3C;
  v64[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetAdaptiveLatencyJitterBufferLevelMsg";
  uint64_t v78 = 55LL;
  __int16 v79 = &v77;
  unsigned int v65 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v65[4] = sub_100515048;
  v65[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetSpatialAudioActiveMsg";
  uint64_t v78 = 41LL;
  __int16 v79 = &v77;
  unsigned int v66 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v66[4] = sub_10051517C;
  v66[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetIsHiddenMsg";
  uint64_t v78 = 31LL;
  __int16 v79 = &v77;
  unsigned int v67 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v67[4] = sub_100515288;
  v67[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetGyroInformationMsg";
  uint64_t v78 = 38LL;
  __int16 v79 = &v77;
  unsigned int v68 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v68[4] = sub_100515388;
  v68[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetSensorStreamingFrequencyMsg";
  uint64_t v78 = 47LL;
  __int16 v79 = &v77;
  unsigned int v69 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v69[4] = sub_1005154B4;
  v69[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetCaseSerialNumbersForAppleProductIdMsg";
  uint64_t v78 = 57LL;
  __int16 v79 = &v77;
  unsigned int v70 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v70[4] = sub_1005155C0;
  v70[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetCaseSerialNumbersForAppleProductIdsMsg";
  uint64_t v78 = 58LL;
  __int16 v79 = &v77;
  uint64_t v71 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v71[4] = sub_100515754;
  v71[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetPrimaryBudSideMsg";
  uint64_t v78 = 37LL;
  __int16 v79 = &v77;
  int v72 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v72[4] = sub_10051592C;
  v72[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessoryGetHeadphoneFeatureValueMsg";
  uint64_t v78 = 44LL;
  __int16 v79 = &v77;
  int v73 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v73[4] = sub_100515A40;
  v73[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySetHeadphoneFeatureValueMsg";
  uint64_t v78 = 44LL;
  __int16 v79 = &v77;
  uint64_t v74 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v74[4] = sub_100515B64;
  v74[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySendAdaptiveVolumeMessageMsg";
  uint64_t v78 = 45LL;
  __int16 v79 = &v77;
  uint64_t v75 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  v75[4] = sub_100515C84;
  v75[5] = 0LL;
  __int16 v77 = "kCBMsgIdAccessorySendPMEConfigMessageMsg";
  uint64_t v78 = 40LL;
  __int16 v79 = &v77;
  __int128 v76 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v77, (uint64_t)&unk_1006C2518, (_OWORD **)&v79);
  void v76[4] = sub_100515DEC;
  v76[5] = 0LL;
}

void sub_10050F7B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C388();
LABEL_9:
    uint64_t v6 = 7LL;
    goto LABEL_10;
  }

uint64_t sub_10050F910(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10068C3E8();
  }
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 8);
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 2048;
    uint64_t v26 = asid;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx",  buf,  0x1Cu);
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089F278);
  }
  if (sub_1004976BC(qword_1008D61A0, uint64, v8, asid))
  {
    int v11 = *(void **)(a1 + 80);
    if (v11 == (void *)(a1 + 88))
    {
LABEL_18:
      uint64_t v16 = calloc(1uLL, 0x60uLL);
      *(void *)std::string buf = v16;
      v16[5] = v6;
      void v16[7] = uint64;
      void *v16 = sub_10050E4FC;
      v16[1] = sub_10050E520;
      void v16[2] = sub_10050E54C;
      void v16[3] = sub_10050E57C;
      v16[8] = *(void *)(a1 + 72);
      sub_1002555B0((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
      if (*(_BYTE *)(a1 + 105))
      {
        int v17 = 0;
      }

      else
      {
        int v17 = sub_1003B4E98(uint64, *(__int128 **)buf, a1);
        *(_BYTE *)(a1 + 105) = 1;
      }
    }

    else
    {
      while (1)
      {
        uint64_t v12 = v11[4];
        uint64_t v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            int v11 = v14;
          }

          while (!v15);
        }

        int v11 = v14;
        if (v14 == (void *)(a1 + 88)) {
          goto LABEL_18;
        }
      }

      int v17 = 1;
    }
  }

  else
  {
LABEL_20:
    int v17 = 7;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  __int16 v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v19);
    xpc_release(v19);
  }

  return sub_100242FAC((uint64_t)v21);
}

void sub_10050FBF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10050FC14(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10068C474();
  }
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 8);
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v22 = 1024;
    int v23 = v8;
    __int16 v24 = 2048;
    uint64_t v25 = asid;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx",  buf,  0x1Cu);
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089F278);
  }
  if (sub_1004976BC(qword_1008D61A0, uint64, v8, asid))
  {
    int v11 = *(void **)(a1 + 80);
    if (v11 == (void *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10068C448();
      }
      int v16 = 0;
    }

    else
    {
      while (1)
      {
        uint64_t v12 = v11[4];
        uint64_t v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            int v11 = v14;
          }

          while (!v15);
        }

        int v11 = v14;
        if (v14 == (void *)(a1 + 88)) {
          goto LABEL_18;
        }
      }

      *(void *)std::string buf = v11[4];
      if (*(_BYTE *)(a1 + 105))
      {
        int v16 = sub_1003B4F20(uint64, (__int128 *)v12);
        *(_BYTE *)(a1 + 105) = 0;
      }

      else
      {
        int v16 = 0;
      }

      sub_10020166C(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }

  else
  {
LABEL_21:
    int v16 = 7;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v18);
    xpc_release(v18);
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_10050FEC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10050FEE8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  size_t length = 0LL;
  data = (int *)xpc_dictionary_get_data(v4, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    uint64_t v7 = data;
    string = (char *)xpc_dictionary_get_string(v4, "kCBMsgArgName");
    uint64_t v9 = xpc_dictionary_get_uint64(v4, "kCBMsgArgClassOfDevice");
    uint64_t v10 = (char *)xpc_dictionary_get_string(v4, "kCBMsgArgPincode");
    uint64_t value = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068C4D4();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v11 = (int)sub_1003B4F94(uint64, v7, string, v9, v10, &value);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      uint64_t v13 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
      uint64_t v15 = value;
      uint64_t v14 = "kCBMsgArgBTDevice";
      xpc_object_t v12 = v13;
      goto LABEL_13;
    }

    uint64_t v11 = 7LL;
    goto LABEL_11;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
    sub_10066EC08();
  }
  xpc_object_t v12 = xpc_dictionary_create_reply(xdict);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = "kCBMsgArgResult";
    uint64_t v15 = 8LL;
LABEL_13:
    xpc_dictionary_set_uint64(v12, v14, v15);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v13);
    xpc_release(v13);
  }

void sub_1005100A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C534();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B5480(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100510188(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C594();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B5734(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100510270(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C5F4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B5800(uint64, v6, &value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgState", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_10051037C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  int v8 = (unint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  unint64_t v15 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10068C654();
  }
  if (v6 <= 0x100)
  {
    else {
      int v10 = 7;
    }
  }

  else
  {
    int v10 = 1;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0LL, 0LL);
    if (!v10 && v15)
    {
      for (unint64_t i = 0LL; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }

    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v13);
    xpc_release(v12);
  }

void sub_100510540(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LOBYTE(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C6B4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B5A7C(uint64, v6, &value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercent", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_10051064C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  uint64_t v12 = 0LL;
  *(_OWORD *)uint64_t value = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C714();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B5B68(uint64, v6, (uint64_t)value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentSingle", LOBYTE(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentLeft", LOBYTE(v11[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentRight", LOBYTE(value[1]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentCase", LOBYTE(v11[1]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentCombined", v12);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingSingle", HIDWORD(value[0]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingLeft", HIDWORD(v11[0]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingRight", HIDWORD(value[1]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingCase", HIDWORD(v11[1]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingCombined", HIDWORD(v12) != 0);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_10051083C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  uint64_t value = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C774();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B73C0(uint64, v6, (uint64_t *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgID", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100510948(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C7D4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B5C54(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgIsAccessory", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100510A54(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  size_t v12 = 0LL;
  data = xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &v12);
  if (v12 == 6)
  {
    uint64_t v7 = (uint64_t)data;
    bytes[0] = 0LL;
    bytes[1] = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068C834();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_1003B5D44(uint64, v7, bytes);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      int v10 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
      xpc_dictionary_set_data(v10, "kCBMsgArgLinkKey", bytes, 0x10uLL);
      goto LABEL_13;
    }

    uint64_t v8 = 7LL;
    goto LABEL_11;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
    sub_10066EC08();
  }
  xpc_object_t v9 = xpc_dictionary_create_reply(xdict);
  if (v9)
  {
    int v10 = v9;
    xpc_dictionary_set_uint64(v9, "kCBMsgArgResult", 8uLL);
LABEL_13:
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100510BF0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  size_t length = 0LL;
  data = xpc_dictionary_get_data(v4, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    std::string::size_type v7 = (std::string::size_type)data;
    string = (char *)xpc_dictionary_get_string(v4, "kCBMsgArgName");
    uint64_t v9 = xpc_dictionary_get_uint64(v4, "kCBMsgArgClassOfDevice");
    int v10 = xpc_dictionary_get_uint64(v4, "kCBMsgArgServiceMask");
    size_t v19 = 0LL;
    uint64_t v11 = (__int128 *)xpc_dictionary_get_data(v4, "kCBMsgArgLinkKey", &v19);
    uint64_t value = 0LL;
    __int128 v21 = 0uLL;
    if (v11)
    {
      if (v19) {
        __int128 v21 = *v11;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068C894();
    }

    else if (uint64)
    {
LABEL_7:
      uint64_t v12 = (int)sub_1003B5E4C(uint64, v7, string, v9, v10, &v21, &value);
LABEL_14:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      uint64_t v14 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
      uint64_t v16 = value;
      unint64_t v15 = "kCBMsgArgBTDevice";
      xpc_object_t v13 = v14;
      goto LABEL_16;
    }

    uint64_t v12 = 7LL;
    goto LABEL_14;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
    sub_10066EC08();
  }
  xpc_object_t v13 = xpc_dictionary_create_reply(xdict);
  if (v13)
  {
    uint64_t v14 = v13;
    unint64_t v15 = "kCBMsgArgResult";
    uint64_t v16 = 8LL;
LABEL_16:
    xpc_dictionary_set_uint64(v13, v15, v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v14);
    xpc_release(v14);
  }

void sub_100510E08(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgMicMode");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C8F4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003B6C14(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100510F08(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C954();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003B74A8(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100511008(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068C9B4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B8554(uint64, v6, &value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgMicMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100511114(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CA14();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003B73B0(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100511214(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CA74();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B86EC(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgInEarDetect", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

uint64_t sub_100511320(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgEventType");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgUserData");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10068CB00();
  }
  v27[0] = 0LL;
  v27[1] = 0LL;
  sub_100242F28((uint64_t)v27, a1 + 8);
  if (!uint64)
  {
    int v21 = 7;
    goto LABEL_28;
  }

  uint64_t v9 = *(void *)(a1 + 72);
  int v10 = *(_DWORD *)(v9 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v9 + 16));
  uint64_t v12 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v29 = uint64;
    __int16 v30 = 1024;
    *(_DWORD *)size_t v31 = v10;
    *(_WORD *)&void v31[4] = 2048;
    *(void *)&v31[6] = asid;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx",  buf,  0x1Cu);
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089F278);
  }
  xpc_object_t v13 = *(void **)(a1 + 80);
  if (v13 != (void *)(a1 + 88))
  {
    while (1)
    {
      uint64_t v14 = (void *)v13[4];
      unint64_t v15 = (void *)v13[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          unint64_t v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          uint64_t v16 = (void *)v13[2];
          BOOL v17 = *v16 == (void)v13;
          xpc_object_t v13 = v16;
        }

        while (!v17);
      }

      xpc_object_t v13 = v16;
      if (v16 == (void *)(a1 + 88)) {
        goto LABEL_19;
      }
    }

void sub_1005116D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1005116F8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10068CB60();
  }
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 8);
  if (uint64)
  {
    uint64_t v7 = *(void *)(a1 + 72);
    int v8 = *(_DWORD *)(v7 + 40);
    au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    int v10 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134218496;
      *(void *)&uint8_t buf[4] = uint64;
      __int16 v22 = 1024;
      int v23 = v8;
      __int16 v24 = 2048;
      uint64_t v25 = asid;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx",  buf,  0x1Cu);
    }

    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_10089F278);
    }
    if (sub_1004976BC(qword_1008D61A0, uint64, v8, asid))
    {
      uint64_t v11 = *(void **)(a1 + 80);
      if (v11 == (void *)(a1 + 88))
      {
LABEL_18:
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10068C448();
        }
        int v16 = 0;
      }

      else
      {
        while (1)
        {
          uint64_t v12 = (uint64_t *)v11[4];
          xpc_object_t v13 = (void *)v11[1];
          if (v13)
          {
            do
            {
              uint64_t v14 = v13;
              xpc_object_t v13 = (void *)*v13;
            }

            while (v13);
          }

          else
          {
            do
            {
              uint64_t v14 = (void *)v11[2];
              BOOL v15 = *v14 == (void)v11;
              uint64_t v11 = v14;
            }

            while (!v15);
          }

          uint64_t v11 = v14;
          if (v14 == (void *)(a1 + 88)) {
            goto LABEL_18;
          }
        }

        *(void *)std::string buf = v11[4];
        if (*(_BYTE *)(a1 + 104))
        {
          int v16 = sub_1003B8B04(uint64, v12 + 4);
          *(_BYTE *)(a1 + 104) = 0;
        }

        else
        {
          int v16 = 0;
        }

        sub_10020166C(a1 + 80, (unint64_t *)buf);
        free(*(void **)buf);
      }
    }

    else
    {
      int v16 = 1;
    }
  }

  else
  {
    int v16 = 7;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v18);
    xpc_release(v18);
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_1005119B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1005119D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgClientType");
  size_t length = 0LL;
  data = xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CBC0();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_1003B8BA8(uint64, v7, v6, (uint64_t)data, length);
    goto LABEL_6;
  }

  uint64_t v9 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_100511B0C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  int v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  size_t v14 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CC20();
  }

  else if (uint64)
  {
LABEL_3:
    int v11 = sub_1003B90A0(uint64, v6, v10, &v14, v7);
    goto LABEL_6;
  }

  int v11 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11) {
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v13);
    xpc_release(v13);
  }

void sub_100511CA0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  unsigned __int16 v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgInterval");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CC80();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_1003B9268(uint64, v6, v7, v8);
    goto LABEL_6;
  }

  uint64_t v9 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_100511DC0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CCE0();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003B93B0(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100511EC0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgValue");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CD40();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_1003B94F0(uint64, v6, v8, v7);
    goto LABEL_6;
  }

  uint64_t v9 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_100511FE0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CDA0();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B818C(uint64, v6, &value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapAction", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_1005120EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgType");
  unsigned __int16 v8 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSubType");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CE00();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_1003B978C(uint64, v6, v7, v8, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v9 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgValue", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_100512230(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  uint64_t value = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CE60();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B8318(uint64, v6, (_DWORD *)&value + 1, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapActionLeft", HIDWORD(value));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapActionRight", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }