void sub_100004344(int *a1, int a2)
{
  os_log_s *v3;
  int v4;
  const char *v5;
  *a1 = a2;
  if (dword_10008BA20)
  {
    v3 = (os_log_s *)ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 136315138;
      v5 = sub_10003D8C8(0LL, 0LL, a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "state changed to: %s\n", (uint8_t *)&v4, 0xCu);
    }
  }
}

  ;
}

uint64_t sub_100004404(uint64_t a1, void *a2)
{
  uint64_t v4 = 0LL;
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 <= 5439)
  {
    if (v5 > 5220)
    {
      if (v5 == 5221)
      {
      }

      else
      {
        if (v5 != 5281) {
          return v4;
        }
      }
    }

    else if (v5 == 5217)
    {
    }

    else
    {
      if (v5 != 5219) {
        return v4;
      }
    }

    goto LABEL_34;
  }

  if (v5 <= 5475)
  {
    if (v5 == 5440)
    {
      uint64_t v9 = sub_10001807C(a1, (uint64_t)a2);
      if ((_DWORD)v9)
      {
        uint64_t v4 = v9;
        if (!dword_10008BA20) {
          goto LABEL_48;
        }
        v10 = (os_log_s *)ne_log_obj(v9);
        BOOL v8 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
        if (v8) {
LABEL_26:
        }
          sub_100055138();
LABEL_45:
        if (dword_10008BA20)
        {
          v16 = (os_log_s *)ne_log_obj(v8);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_1000550A8();
          }
        }

        goto LABEL_48;
      }
    }

    else
    {
      if (v5 != 5474) {
        return v4;
      }
    }

LABEL_34:
    v11 = *(void **)(a1 + 128);
    if (v11)
    {
      sub_10003F5BC(v11);
      *(void *)(a1 + 128) = 0LL;
    }

    uint64_t v12 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v12)
    {
      uint64_t v12 = sub_10003AA44(v12);
      *(_DWORD *)(a1 + 120) = 0;
    }

    if (dword_10008BA20)
    {
      v13 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_100055100();
      }
    }

    uint64_t v14 = sub_1000046B4(a1, (uint64_t)a2);
    if ((_DWORD)v14)
    {
      uint64_t v4 = v14;
      if (dword_10008BA20)
      {
        v15 = (os_log_s *)ne_log_obj(v14);
        BOOL v8 = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
        if (v8) {
          sub_1000550D4();
        }
        goto LABEL_45;
      }

    free(v4);
    sub_10003F5BC(v12);
  }

  return 0LL;
}

      *a3 = v8;
      if (a5 != 16) {
        return 0LL;
      }
      result = 0LL;
      v21 = v5[1];
      if (!v5[1]) {
        v21 = 255;
      }
      *a4 = v21;
      return result;
    case 5u:
      LOBYTE(v8) = 0x80;
      goto LABEL_34;
    default:
      goto LABEL_34;
  }

        ;
      }

      switch(*i)
      {
        case 4u:
          uint64_t v4 = sub_100026BA4((size_t **)(a1 + 160), *((void *)i + 1));
          if ((v4 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          if (dword_10008BA20)
          {
            v26 = (os_log_s *)ne_log_obj(v4);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              sub_1000590F0();
            }
          }

          break;
        case 5u:
        case 6u:
        case 8u:
        case 9u:
        case 0xBu:
        case 0xCu:
        case 0xEu:
          goto LABEL_58;
        case 7u:
          uint64_t v4 = sub_10002CF50(a1, *((void *)i + 1));
          if ((v4 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          if (dword_10008BA20)
          {
            v27 = (os_log_s *)ne_log_obj(v4);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
              sub_100059174();
            }
          }

          break;
        case 0xAu:
          uint64_t v4 = sub_100026BA4((size_t **)(a1 + 184), *((void *)i + 1));
          if ((v4 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          if (dword_10008BA20)
          {
            v28 = (os_log_s *)ne_log_obj(v4);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
              sub_10005911C();
            }
          }

          break;
        case 0xDu:
          uint64_t v4 = sub_10003F330(*((void *)i + 1));
          if ((_DWORD)v4 == 19)
          {
            if (*(_DWORD *)(*(void *)(a1 + 64) + 208LL)) {
              *(_DWORD *)(a1 + 368) = 1;
            }
          }

          else
          {
            if ((_DWORD)v4 == 17)
            {
              v15 = *(int **)(a1 + 408);
              v16 = *v15 | 2;
            }

            else
            {
              if ((_DWORD)v4 != 16) {
                goto LABEL_34;
              }
              v15 = *(int **)(a1 + 408);
              v16 = *v15 | 1;
            }

            os_log_s *v15 = v16;
          }

          goto LABEL_34;
        case 0xFu:
          goto LABEL_10;
        default:
          if (*i) {
            goto LABEL_58;
          }
          v19 = *(_DWORD *)(a1 + 96);
          if ((v19 & 1) != 0)
          {
            if (dword_10008BA20)
            {
              v20 = (os_log_s *)ne_log_obj(v4);
              uint64_t v4 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
              v19 = *(_DWORD *)(a1 + 96);
              if ((_DWORD)v4)
              {
                v21 = "detected:";
                v22 = "ME ";
                if ((v19 & 6) == 0) {
                  v21 = "not detected";
                }
                if ((v19 & 2) == 0) {
                  v22 = (const char *)&unk_10007E069;
                }
                *(_DWORD *)buf = 136315650;
                *(void *)v36 = v21;
                *(_WORD *)&v36[8] = 2080;
                *(void *)&v36[10] = v22;
                if ((v19 & 4) != 0) {
                  v23 = "PEER";
                }
                else {
                  v23 = (const char *)&unk_10007E069;
                }
                v37 = 2080;
                v38 = v23;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "NAT %s %s%s\n", buf, 0x20u);
                v19 = *(_DWORD *)(a1 + 96);
              }
            }

            if ((v19 & 6) != 0) {
              sub_10003FDF8(a1);
            }
          }

          if (*(void *)(a1 + 160) && *(void *)(a1 + 184))
          {
            sub_10002D160(a1);
            sub_100004344(v3, 5188);
            sub_10003F5BC(v5);
            return 0LL;
          }

          if (dword_10008BA20)
          {
            v29 = (os_log_s *)ne_log_obj(v4);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
              sub_100058F90();
            }
          }

          break;
      }

    *(_WORD *)(*(void *)(a1 + 440) + 264LL) &= ~0x40u;
    return;
  }

  if ((*(_BYTE *)(a1 + 17) & 0x20) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v20) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "DPD monitoring (for ALGORITHM_BLACKHOLE_DETECT) ....\n",  (uint8_t *)&v20,  2u);
      }
    }

    if ((*(_WORD *)(*(void *)(a1 + 440) + 264LL) & 0x140) == 0x100)
    {
      sub_10001C988(a1);
    }

    else
    {
      v15 = sub_10001CC3C(a1, 0LL);
      if (dword_10008BA20)
      {
        v16 = (os_log_s *)ne_log_obj(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *(unsigned __int16 *)(*(void *)(a1 + 440) + 264LL);
          v20 = 67109376;
          v21 = v17 << 23 >> 31;
          v22 = 1024;
          v23 = v17 << 25 >> 31;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "rescheduling DPD monitoring (for ALGORITHM_BLACKHOLE_DETECT) i = %d, peer %d.\n",  (uint8_t *)&v20,  0xEu);
        }
      }
    }

    *(_WORD *)(*(void *)(a1 + 440) + 264LL) &= ~0x100u;
    goto LABEL_34;
  }

  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_DWORD *)(a1 + 16);
      v20 = 67109120;
      v21 = v7;
      uint64_t v6 = "DPD monitoring (for ALGORITHM_BLACKHOLE_DETECT) aborted, invalid Phase 1 status %d....\n";
      goto LABEL_16;
    }
  }

      free(v7);
    }

    if (!v5) {
      return v2;
    }
    int v5 = 1;
LABEL_36:
    v2 = *(void *)v2;
    if (!v2) {
      return v2;
    }
  }

  while (1)
  {
    if (*(_BYTE *)(v8 + 266) != 2)
    {
      if (dword_10008BA20)
      {
        v10 = (os_log_s *)ne_log_obj(v7);
        v7 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v7)
        {
          v11 = *a1;
          uint64_t v12 = *(unsigned __int8 *)(v8 + 266);
          *(_DWORD *)buf = 136315650;
          v41 = "getsp_r";
          v42 = 1024;
          v43 = v11;
          v44 = 1024;
          v45 = v12;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s, skipping policy. dir %d, mode %d\n",  buf,  0x18u);
        }
      }

      goto LABEL_33;
    }

    uint64_t v9 = *a1;
    if (v9 == 2) {
      break;
    }
    if (v9 == 1)
    {
      v7 = sub_10003B6D4(*v6, v8 + 8);
      if (!(_DWORD)v7)
      {
        v7 = sub_10003B6D4(*a2, v8 + 136);
        if (!(_DWORD)v7)
        {
          if (dword_10008BA20)
          {
            v20 = (os_log_s *)ne_log_obj(v7);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
              sub_100062140(v20, v21, v22, v23, v24, v25, v26, v27);
            }
          }

          return v2;
        }
      }
    }

          sub_10005C498();
          goto LABEL_35;
        }
      }
    }
  }

  if (dword_10008BA20)
  {
    v16 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_100067920(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }

            exit(1);
          }

          v19 = v18;
          if (!v18)
          {
            if (dword_10008BA20)
            {
              v24 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
                goto LABEL_33;
              }
            }

            goto LABEL_34;
          }

          if (dword_10008BA20)
          {
            v20 = (os_log_s *)ne_log_obj(v18);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              v21 = sub_100024670(v12, 0);
              *(_DWORD *)buf = 136315650;
              v26 = v16;
              v27 = 2080;
              v28 = v19;
              v29 = 2080;
              v30 = v21;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "ISAKMP-SA needs to be deleted %s-%s spi:%s\n",  buf,  0x20u);
            }
          }

          free(v16);
          free(v19);
          sub_10004BB28(v12, a2);
          if (*(_DWORD *)(v12 + 20)) {
            v22 = 7LL;
          }
          else {
            v22 = 5LL;
          }
          *(_DWORD *)(v12 + 112) = sub_10003A890(v22, (uint64_t)sub_10004C538, v12);
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    v3 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100067990(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }

LABEL_48:
      sub_10004ABA4(a1);
      return v4;
    }

    if ((*(_BYTE *)(a1 + 17) & 0x20) != 0) {
      sub_100022FB8(a1);
    }
    return 0LL;
  }

  switch(v5)
  {
    case 5476:
      goto LABEL_34;
    case 5504:
      uint64_t v6 = sub_100014200(a1, (uint64_t)a2);
      if ((_DWORD)v6)
      {
        uint64_t v4 = v6;
        if (!dword_10008BA20) {
          goto LABEL_48;
        }
        v7 = (os_log_s *)ne_log_obj(v6);
        BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
        if (v8) {
          goto LABEL_26;
        }
        goto LABEL_45;
      }

      goto LABEL_34;
    case 5538:
      goto LABEL_34;
  }

  return v4;
}

  result = sub_100007840(*(void **)(*(void *)(a1 + 64) + 56LL), 0LL);
  if (result)
  {
    v25 = sub_100007840(*(void **)(*(void *)(a1 + 64) + 56LL), buf);
    if (v25)
    {
      v26 = (int *)v25;
      v27 = 0LL;
      v28 = v7 + 4;
      do
      {
        v29 = *v26;
        if (v29 == sub_100010804(*v7))
        {
          v30 = (size_t *)*((void *)v26 + 1);
          if (!v30) {
            goto LABEL_84;
          }
          if (!v27
            || (sub_10003F5BC(v27), (v30 = (size_t *)*((void *)v26 + 1)) != 0LL)
            || (v31 = *v26, (v30 = *(size_t **)(qword_10008B848 + 8 * v31 + 176)) != 0LL))
          {
            v30 = sub_10003F5F0((uint64_t)v30);
            v27 = v30;
            LODWORD(v31) = *v26;
          }

          else
          {
            v27 = 0LL;
          }

          if ((_DWORD)v31 == 4)
          {
            v32 = v27[1];
            v33 = *(unsigned __int8 *)(v32 + 1);
            if (v33 == 30)
            {
              if (**v3 == 20LL)
              {
                v35 = *(void *)(v32 + 8);
                v34 = *(void *)(v32 + 16);
                if (v35 == *v28 && v34 == *(void *)(v7 + 12)) {
                  goto LABEL_85;
                }
              }
            }

            else if (v33 == 2 && **v3 == 8LL && *(_DWORD *)(v32 + 4) == *(_DWORD *)v28)
            {
              goto LABEL_85;
            }
          }

          else
          {
            if ((_DWORD)v31 == 5)
            {
              if (dword_10008BA20)
              {
                v38 = (os_log_s *)ne_log_obj(v30);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                {
                  v40[0] = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "ASN1DN ID matching not implemented - passed.\n",  (uint8_t *)v40,  2u);
                }
              }

  sub_10003F5BC(v11);
LABEL_49:
  sub_10003F5BC(v9);
  return v5;
}

uint64_t sub_1000046B4(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v3 > 5440)
  {
    if (v3 <= 5444)
    {
      if (v3 == 5441)
      {
        uint64_t v5 = sub_1000183FC(a1, a2);
        goto LABEL_22;
      }

      if (v3 == 5443)
      {
        uint64_t v5 = sub_100018CC4(a1, a2);
        goto LABEL_22;
      }
    }

    else
    {
      switch(v3)
      {
        case 5445:
          uint64_t v5 = sub_100019564(a1, a2);
          goto LABEL_22;
        case 5505:
          uint64_t v5 = sub_1000147F0(a1, a2);
          goto LABEL_22;
        case 5507:
          uint64_t v5 = sub_100015774(a1, a2);
          goto LABEL_22;
      }
    }

LABEL_23:
    int v6 = sub_10000B328(a1);
    sub_1000488E4((unsigned __int16)v4, 0, v6, 0, 0LL);
    return v4;
  }

  switch(v3)
  {
    case 5184:
      uint64_t v5 = sub_10001633C(a1, a2);
      break;
    case 5185:
    case 5187:
    case 5189:
      goto LABEL_23;
    case 5186:
      uint64_t v5 = sub_100016B08(a1, a2);
      break;
    case 5188:
      uint64_t v5 = sub_1000174E8(a1, a2);
      break;
    case 5190:
      uint64_t v5 = sub_100017FF0(a1);
      break;
    default:
      if (v3 == 5248)
      {
        uint64_t v5 = sub_100012960(a1, a2);
      }

      else
      {
        if (v3 != 5250) {
          goto LABEL_23;
        }
        uint64_t v5 = sub_100013ABC(a1, a2);
      }

      break;
  }

    exit(1);
  }

  if (!dword_10008BA20) {
    goto LABEL_15;
  }
  v7 = (os_log_s *)ne_log_obj(v5);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    sub_100024670(a1, 0);
    v16 = 136315138;
    v17 = &xmmword_100088748;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "ISAKMP-SA established spi:%s\n",  (uint8_t *)&v16,  0xCu);
  }

  if (dword_10008BA20)
  {
    uint64_t v9 = (os_log_s *)ne_log_obj(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      sub_100024670(a1, 0);
      v16 = 136315650;
      v17 = (__int128 *)v3;
      v18 = 2080;
      v19 = v6;
      v20 = 2080;
      v21 = &xmmword_100088748;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "ISAKMP-SA established %s-%s spi:%s\n",  (uint8_t *)&v16,  0x20u);
    }

    v10 = dword_10008BA20;
    free(v3);
    free(v6);
    if (v10)
    {
      uint64_t v12 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_DWORD *)(a1 + 20)) {
          v13 = "peer";
        }
        else {
          v13 = "me";
        }
        v16 = 136315138;
        v17 = (__int128 *)v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "IPSec Phase 1 established (Initiated by %s).\n",  (uint8_t *)&v16,  0xCu);
      }
    }
  }

  else
  {
LABEL_15:
    free(v3);
    free(v6);
  }

      uint64_t v14 = 0;
      goto LABEL_24;
    }
  }

  else
  {
    uint64_t v12 = 0;
    if (!Mutable) {
      goto LABEL_21;
    }
  }

  CFRelease(Mutable);
  goto LABEL_21;
}

    if (++v1 == 33) {
      return;
    }
  }

  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100063770(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

    exit(1);
  }

  if (v3)
  {
LABEL_6:
    sub_10003C888(v3);
    int v3 = (sockaddr *)strdup((const char *)&qword_100088FE8);
    if (v3) {
      goto LABEL_7;
    }
    if (dword_10008BA20)
    {
      v10 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
    }

    goto LABEL_23;
  }

    BOOL v8 = (unsigned __int16 *)((char *)v8 + v12 + 4);
    uint64_t v9 = v10 - (v12 + 4);
LABEL_34:
    if (v9 <= 0)
    {
      v2 = *(int **)(v5 + 408);
      int v3 = *v2;
      BOOL v8 = v48;
      goto LABEL_54;
    }
  }

  if (dword_10008BA20)
  {
    v33 = (os_log_s *)ne_log_obj(result);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      sub_100064624();
    }
  }

  return 0xFFFFFFFFLL;
}

LABEL_22:
  uint64_t v4 = v5;
  if ((_DWORD)v5) {
    goto LABEL_23;
  }
  return v4;
}

uint64_t sub_100004818(uint64_t a1, void *a2)
{
  uint64_t result = 0LL;
  int v5 = *(_DWORD *)(a1 + 56);
  uint64_t v6 = 0xFFFFFFFFLL;
  if (v5 <= 6591)
  {
    switch(v5)
    {
      case 6369:
        uint64_t result = sub_10001D9A8(a1, a2);
        break;
      case 6371:
        uint64_t result = sub_10001E9F0(a1, a2);
        break;
      case 6384:
        return result;
      default:
        goto LABEL_19;
    }
  }

  else
  {
    if (v5 > 6639)
    {
      if (v5 != 6640 && v5 != 10240) {
        goto LABEL_19;
      }
      return result;
    }

    if (v5 == 6592)
    {
      uint64_t result = sub_10001EE94(a1, a2);
    }

    else
    {
      if (v5 != 6626) {
        goto LABEL_19;
      }
      uint64_t result = sub_100020728(a1, a2);
    }
  }

  uint64_t v6 = result;
  if ((_DWORD)result)
  {
LABEL_19:
    if (dword_10008BA20)
    {
      BOOL v8 = (os_log_s *)ne_log_obj(result);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100055138();
      }
    }

    if ((_DWORD)v6 == -1) {
      sub_10003B688();
    }
    uint64_t v9 = sub_10001BA48(*(void *)(a1 + 256), v6, 0LL);
LABEL_25:
    if (dword_10008BA20)
    {
      v10 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100055164();
      }
    }

    goto LABEL_28;
  }

  v11 = *(void **)(a1 + 80);
  if (v11)
  {
    sub_10003F5BC(v11);
    *(void *)(a1 + 80) = 0LL;
  }

  else if (*(_DWORD *)(a1 + 56) != 6593)
  {
    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(0LL);
      uint64_t v9 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v9) {
        sub_100055190();
      }
      uint64_t v6 = 0xFFFFFFFFLL;
      goto LABEL_25;
    }

    uint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_28;
  }

  uint64_t v12 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v12)
  {
    sub_10003AA44(v12);
    *(_DWORD *)(a1 + 68) = 0;
  }

  if (*(_DWORD *)(a1 + 56) == 6344) {
    return 0LL;
  }
  uint64_t result = sub_100004A5C(a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    uint64_t v6 = result;
    if (dword_10008BA20)
    {
      v13 = (os_log_s *)ne_log_obj(result);
      uint64_t v9 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v9) {
        sub_1000550D4();
      }
      goto LABEL_25;
    }

LABEL_28:
    sub_10004AAC4((void *)a1);
    return v6;
  }

  return result;
}

    v15 = 0xFFFFFFFFLL;
    goto LABEL_53;
  }

  int v5 = v4;
  uint64_t v6 = v4[1];
  if (*(_BYTE *)v6 == 1)
  {
    v7 = sub_100026BA4((size_t **)&v27, *(void *)(v6 + 8));
    if ((v7 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        v21 = (os_log_s *)ne_log_obj(v7);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_100058F00();
        }
      }
    }

    else
    {
      for (i = v6 + 16; *(_BYTE *)i == 13; i += 16LL)
      {
        v7 = sub_10003F330(*(void *)(i + 8));
        uint64_t v9 = v7;
        if (*(_DWORD *)(*(void *)(a1 + 64) + 176LL))
        {
          v7 = sub_10003F6C0(v7);
          if ((_DWORD)v7) {
            sub_10003FEC0(a1, v9);
          }
        }

        switch(v9)
        {
          case 16:
            v10 = *(int **)(a1 + 408);
            v11 = *v10 | 1;
            goto LABEL_13;
          case 17:
            v10 = *(int **)(a1 + 408);
            v11 = *v10 | 2;
LABEL_13:
            os_log_s *v10 = v11;
            break;
          case 18:
            v7 = sub_100015AB8(*(void *)(i + 8));
            if ((v7 & 0x80000000) != 0)
            {
              if (dword_10008BA20)
              {
                uint64_t v12 = (os_log_s *)ne_log_obj(v7);
                v7 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
                if ((_DWORD)v7) {
                  sub_100059D60(&v25, v26, v12);
                }
              }

              *(_DWORD *)(a1 + 100) = 1;
            }

            break;
          case 19:
            if (*(_DWORD *)(*(void *)(a1 + 64) + 208LL)) {
              *(_DWORD *)(a1 + 368) = 1;
            }
            break;
          default:
            continue;
        }
      }

      if (*(_BYTE *)i)
      {
        if (dword_10008BA20)
        {
          v22 = (os_log_s *)ne_log_obj(v7);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            sub_100059D00();
          }
        }
      }

      else
      {
        if ((*(_BYTE *)(a1 + 96) & 1) != 0)
        {
          if (dword_10008BA20)
          {
            v17 = (os_log_s *)ne_log_obj(v7);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              v18 = sub_10003F0A0(**(_DWORD **)(a1 + 88));
              *(_DWORD *)buf = 136315138;
              v29 = v18;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Selected NAT-T version: %s\n",  buf,  0xCu);
            }
          }

          sub_10004E564(a1);
        }

        v19 = sub_10000B528((unint64_t *)v27, (void *)a1);
        if ((v19 & 0x80000000) == 0)
        {
          v20 = *(void **)(a1 + 344);
          if (v20)
          {
            sub_10003F5BC(v20);
            *(void *)(a1 + 344) = 0LL;
          }

          sub_100004344(v2, 5186);
          sub_100048C2C(1, 1, a1, 0LL);
          v15 = 0LL;
          goto LABEL_52;
        }

        if (dword_10008BA20)
        {
          v23 = (os_log_s *)ne_log_obj(v19);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_100058FBC();
          }
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    v16 = (os_log_s *)ne_log_obj(v4);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_1000592A8();
    }
  }

  v15 = 0xFFFFFFFFLL;
LABEL_52:
  sub_10003F5BC(v5);
LABEL_53:
  if (v27) {
    sub_10003F5BC(v27);
  }
  return v15;
}

        ;
      }

      switch(*i)
      {
        case 4u:
          uint64_t v4 = sub_100026BA4((size_t **)(a1 + 160), *((void *)i + 1));
          if ((v4 & 0x80000000) == 0) {
            goto LABEL_28;
          }
          v23 = v32;
          if (dword_10008BA20)
          {
            v25 = (os_log_s *)ne_log_obj(v4);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              sub_1000590F0();
            }
          }

          break;
        case 5u:
        case 6u:
        case 8u:
        case 9u:
        case 0xBu:
        case 0xCu:
        case 0xEu:
          goto LABEL_50;
        case 7u:
          if (dword_10008BA20)
          {
            uint64_t v14 = (os_log_s *)ne_log_obj(v4);
            uint64_t v4 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v4)
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "CR received, ignore it. It should be in other exchange.\n",  buf,  2u);
            }
          }

          goto LABEL_28;
        case 0xAu:
          uint64_t v4 = sub_100026BA4((size_t **)(a1 + 184), *((void *)i + 1));
          if ((v4 & 0x80000000) == 0) {
            goto LABEL_28;
          }
          v23 = v32;
          if (dword_10008BA20)
          {
            v26 = (os_log_s *)ne_log_obj(v4);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              sub_10005911C();
            }
          }

          break;
        case 0xDu:
          uint64_t v4 = sub_10003F330(*((void *)i + 1));
          goto LABEL_28;
        case 0xFu:
          goto LABEL_10;
        default:
          if (*i) {
            goto LABEL_50;
          }
          if ((*(_BYTE *)(a1 + 96) & 1) != 0)
          {
            if (dword_10008BA20)
            {
              v17 = (os_log_s *)ne_log_obj(v4);
              uint64_t v4 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v4)
              {
                v18 = "detected:";
                v19 = *(_DWORD *)(a1 + 96);
                v20 = "ME ";
                if ((v19 & 6) == 0) {
                  v18 = "not detected";
                }
                if ((v19 & 2) == 0) {
                  v20 = (const char *)&unk_10007E069;
                }
                *(_DWORD *)buf = 136315650;
                *(void *)v35 = v18;
                *(_WORD *)&v35[8] = 2080;
                *(void *)&v35[10] = v20;
                if ((v19 & 4) != 0) {
                  v21 = "PEER";
                }
                else {
                  v21 = (const char *)&unk_10007E069;
                }
                v36 = 2080;
                v37 = v21;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "NAT %s %s%s\n", buf, 0x20u);
              }
            }
          }

          if (*(void *)(a1 + 160) && *(void *)(a1 + 184))
          {
            sub_100004344(v3, 5443);
            sub_10003F5BC(v32);
            return 0LL;
          }

          v23 = v32;
          if (dword_10008BA20)
          {
            v27 = (os_log_s *)ne_log_obj(v4);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
              sub_100058F90();
            }
          }

          break;
      }

    uint64_t v12 = (unsigned __int8 *)a1[25];
    if (v12)
    {
      v13 = **((unsigned __int8 **)v12 + 1);
      if (v13 <= 6 && ((1 << v13) & 0x72) != 0)
      {
        uint64_t v14 = sub_100011750( (unint64_t *)v12,  (uint64_t)&buf[8],  &buf[264],  (__int16 *)&buf[266],  *((unsigned __int8 *)a1 + 61));
        if (!(_DWORD)v14)
        {
          v15 = **(unsigned __int8 **)(a1[25] + 8);
          if (v15 != 5)
          {
LABEL_35:
            if (v9 == v15 && buf[137] == buf[9])
            {
              a1[4] = (uint64_t)sub_10003CA00(&buf[136]);
              uint64_t v14 = (uint64_t)sub_10003CA00(&buf[8]);
              a1[5] = v14;
            }

            goto LABEL_47;
          }

          uint64_t v14 = sub_1000279FC((uint64_t)&buf[8], a1[1]);
          if (!(_DWORD)v14)
          {
            v15 = **(unsigned __int8 **)(a1[25] + 8);
            goto LABEL_35;
          }
        }

  if (a3)
  {
    v21 = *(uint64_t **)(a3 + 296);
    v22 = v8[4];
    v23 = v21 != 0LL;
    v24 = v22 != 0;
    if (v21 && v22)
    {
      v25 = *(unsigned __int8 *)(a1 + 60);
      do
      {
        v26 = *((_DWORD *)v21 + 67);
        if (v25) {
          *(_DWORD *)(v22 + 48) = v26;
        }
        else {
          *(_DWORD *)(v22 + 52) = v26;
        }
        v21 = (uint64_t *)*v21;
        v22 = *(void *)(v22 + 72);
        v23 = v21 != 0LL;
        v24 = v22 != 0;
        if (v21) {
          v27 = v22 == 0;
        }
        else {
          v27 = 1;
        }
      }

      while (!v27);
    }

    if ((v23 || v24) && dword_10008BA20 != 0)
    {
      v29 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v34[0] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "There is a difference between the in/out bound policies in SPD.\n",  (uint8_t *)v34,  2u);
      }
    }
  }

  *(void *)(a1 + 120) = v8;
  sub_10004B2A8(a1);
  for (i = v8[4]; i; i = *(void *)(i + 72))
    sub_100037130(7LL, (int *)i);
  return 0LL;
}

      v18 = (void *)v11;
      if (v11)
      {
        v10 = sub_100043DD8(v10, v11);
        sub_10003F5BC(v18);
      }

uint64_t sub_100004A5C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 > 6594)
  {
    switch(v2)
    {
      case 6595:
        return sub_100020A70(a1, a2);
      case 6596:
        return sub_100020DB8(a1);
      case 6608:
        return sub_10001FF48(a1, a2);
    }
  }

  else
  {
    switch(v2)
    {
      case 6338:
        return sub_10001E580(a1, a2);
      case 6352:
        return sub_10001D2FC(a1, a2);
      case 6593:
        return sub_10001FE44(a1);
    }
  }

  return 0xFFFFFFFFLL;
}

void sub_100004AD4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

BOOL sub_100004AF8(int a1)
{
  return sub_100004B14(a1) != 0LL;
}

char **sub_100004B14(int a1)
{
  uint64_t v1 = 0LL;
  while (1)
  {
    int v2 = &(&off_100088000)[v1];
    if (*((_DWORD *)&off_100088000 + 2 * v1 + 3) == a1) {
      break;
    }
    v1 += 7LL;
    if (v1 == 35) {
      return 0LL;
    }
  }

  if (dword_10008BA20)
  {
    int v3 = (os_log_s *)ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_1000551BC();
    }
  }

  return v2;
}

uint64_t sub_100004B94(int a1)
{
  uint64_t v1 = 0LL;
  while (LODWORD((&off_100088000)[v1 + 1]) != a1)
  {
    v1 += 7LL;
    if (v1 == 35) {
      return 0xFFFFFFFFLL;
    }
  }

  return *((unsigned int *)&off_100088000 + 2 * v1 + 3);
}

uint64_t sub_100004BCC(int a1)
{
  uint64_t v1 = sub_100004B14(a1);
  else {
    return 0LL;
  }
}

const char *sub_100004BF8(int a1)
{
  uint64_t v1 = sub_100004B14(a1);
  if (v1) {
    return *v1;
  }
  else {
    return "*UNKNOWN*";
  }
}

uint64_t sub_100004C20(int a1, uint64_t a2)
{
  int v3 = sub_100004B14(a1);
  if (v3 && v3[5]) {
    return ((uint64_t (*)(uint64_t))v3[6])(a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100004C64(int a1)
{
  uint64_t v1 = 0LL;
  while (LODWORD((&off_100084950)[v1 + 1]) != a1)
  {
    v1 += 7LL;
    if (v1 == 35) {
      return 0xFFFFFFFFLL;
    }
  }

  return *((unsigned int *)&off_100084950 + 2 * v1 + 3);
}

uint64_t sub_100004C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  while (*((_DWORD *)&off_100084950 + 2 * v5 + 3) != (_DWORD)a1)
  {
    v5 += 7LL;
    if (v5 == 35) {
      return 0LL;
    }
  }

  if (dword_10008BA20)
  {
    v7 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_10005521C();
    }
  }

  return ((uint64_t (*)(uint64_t, uint64_t))(&off_100084950)[v5 + 6])(a2, a3);
}

BOOL sub_100004D44(int a1)
{
  return sub_100004D60(a1) != 0LL;
}

char **sub_100004D60(int a1)
{
  uint64_t v1 = 0LL;
  while (1)
  {
    int v2 = &(&off_100088118)[v1];
    if (*((_DWORD *)&off_100088118 + 2 * v1 + 3) == a1) {
      break;
    }
    v1 += 7LL;
    if (v1 == 21) {
      return 0LL;
    }
  }

  if (dword_10008BA20)
  {
    int v3 = (os_log_s *)ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_10005527C();
    }
  }

  return v2;
}

uint64_t sub_100004DE0(int a1)
{
  uint64_t v1 = 0LL;
  while (LODWORD((&off_100088118)[v1 + 1]) != a1)
  {
    v1 += 7LL;
    if (v1 == 21) {
      return 0xFFFFFFFFLL;
    }
  }

  return *((unsigned int *)&off_100088118 + 2 * v1 + 3);
}

uint64_t sub_100004E18(int a1, uint64_t a2)
{
  int v3 = sub_100004D60(a1);
  if (v3 && (uint64_t v4 = v3[6]) != 0LL) {
    return ((uint64_t (*)(uint64_t))v4)(a2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100004E58(int a1)
{
  uint64_t v1 = sub_100004D60(a1);
  if (v1) {
    return *((unsigned int *)v1 + 4);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

const char *sub_100004E7C(int a1)
{
  uint64_t v1 = sub_100004D60(a1);
  if (v1) {
    return *v1;
  }
  else {
    return "*UNKNOWN*";
  }
}

uint64_t sub_100004EA4(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7 = sub_100004D60(a1);
  if (v7 && (BOOL v8 = v7[4]) != 0LL) {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(a2, a3, a4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100004F00(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7 = sub_100004D60(a1);
  if (v7 && (BOOL v8 = v7[3]) != 0LL) {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(a2, a3, a4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100004F5C(int a1)
{
  uint64_t v1 = 0LL;
  while (LODWORD((&off_100084A68)[v1 + 1]) != a1)
  {
    v1 += 7LL;
    if (v1 == 42) {
      return 0xFFFFFFFFLL;
    }
  }

  return *((unsigned int *)&off_100084A68 + 2 * v1 + 3);
}

uint64_t sub_100004F94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0LL;
  while (*((_DWORD *)&off_100084A68 + 2 * v3 + 3) != (_DWORD)a1)
  {
    v3 += 7LL;
    if (v3 == 42) {
      return 0xFFFFFFFFLL;
    }
  }

  if (dword_10008BA20)
  {
    uint64_t v5 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_10005527C();
    }
  }

  return ((uint64_t (*)(uint64_t))(&off_100084A68)[v3 + 6])(a2);
}

uint64_t sub_100005034(int a1)
{
  uint64_t v1 = 0LL;
  while (LODWORD((&off_100084BB8)[v1 + 1]) != a1)
  {
    v1 += 7LL;
    if (v1 == 56) {
      return 0xFFFFFFFFLL;
    }
  }

  return *((unsigned int *)&off_100084BB8 + 2 * v1 + 3);
}

uint64_t sub_10000506C(uint64_t a1)
{
  uint64_t v1 = 0LL;
  while (*((_DWORD *)&off_100084BB8 + 2 * v1 + 3) != (_DWORD)a1)
  {
    v1 += 7LL;
    if (v1 == 56) {
      return 0xFFFFFFFFLL;
    }
  }

  if (dword_10008BA20)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_10005521C();
    }
  }

  return ((uint64_t (*)(void))(&off_100084BB8)[v1 + 5])();
}

uint64_t sub_1000050FC(int a1)
{
  uint64_t v1 = 0LL;
  while (LODWORD((&off_100084D78)[v1 + 1]) != a1)
  {
    v1 += 2LL;
    if (v1 == 6) {
      return 0xFFFFFFFFLL;
    }
  }

  return *((unsigned int *)&off_100084D78 + 2 * v1 + 3);
}

BOOL sub_100005134(uint64_t a1)
{
  return sub_100005150(a1) != 0LL;
}

char **sub_100005150(uint64_t a1)
{
  uint64_t v1 = 0LL;
  while (1)
  {
    int v2 = &(&off_1000881C0)[v1];
    if (*((_DWORD *)&off_1000881C0 + 2 * v1 + 3) == (_DWORD)a1) {
      break;
    }
    v1 += 3LL;
    if (v1 == 24) {
      return 0LL;
    }
  }

  if (dword_10008BA20)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_10005521C();
    }
  }

  return v2;
}

uint64_t sub_1000051D0(int a1)
{
  uint64_t v1 = 0LL;
  while (LODWORD((&off_1000881C0)[v1 + 1]) != a1)
  {
    v1 += 3LL;
    if (v1 == 24) {
      return 0xFFFFFFFFLL;
    }
  }

  return *((unsigned int *)&off_1000881C0 + 2 * v1 + 3);
}

char **sub_100005208(uint64_t a1)
{
  uint64_t result = sub_100005150(a1);
  if (result) {
    return (char **)result[2];
  }
  return result;
}

const char *sub_100005224(uint64_t a1)
{
  uint64_t v1 = sub_100005150(a1);
  if (v1) {
    return *v1;
  }
  else {
    return "*UNKNOWN*";
  }
}

uint64_t sub_10000524C(int a1)
{
  uint64_t v1 = 0LL;
  while (LODWORD((&off_100084DA8)[v1 + 1]) != a1)
  {
    v1 += 2LL;
    if (v1 == 32) {
      return 0xFFFFFFFFLL;
    }
  }

  return *((unsigned int *)&off_100084DA8 + 2 * v1 + 3);
}

const char *sub_100005284(int a1)
{
  uint64_t v2 = 0LL;
  uint64_t result = "*UNKNOWN*";
  while (*((_DWORD *)&off_100084DA8 + 2 * v2 + 3) != a1)
  {
    v2 += 2LL;
    if (v2 == 32) {
      return result;
    }
  }

  return (&off_100084DA8)[v2];
}

uint64_t sub_1000052C4(int a1, int a2)
{
  else {
    return dword_100069DB4[a2 - 4];
  }
}

uint64_t sub_1000052F4(uint64_t result, unsigned int a2, uint64_t a3)
{
  if ((_DWORD)result && (uint64_t v4 = result, (_DWORD)result != 3))
  {
    if (dword_10008BA20)
    {
      uint64_t v12 = (os_log_s *)ne_log_obj(result);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1000552DC(v4, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }

  else if (a2 <= 0xD && ((1 << a2) & 0x30D0) != 0)
  {
    if ((a3 & 7) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v5 = (os_log_s *)ne_log_obj(result);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          sub_1000553A0(a3, v5, v6, v7, v8, v9, v10, v11);
        }
      }
    }

    else
    {
      switch(a2)
      {
        case 4u:
          goto LABEL_29;
        case 6u:
          goto LABEL_29;
        case 7u:
          goto LABEL_29;
        case 0xCu:
          uint64_t result = 0LL;
          if ((_DWORD)a3 == 128 || (_DWORD)a3 == 192 || (_DWORD)a3 == 256) {
            return result;
          }
          goto LABEL_29;
        case 0xDu:
LABEL_29:
          if (dword_10008BA20)
          {
            v27 = (os_log_s *)ne_log_obj(result);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
              sub_100055370(v27, v28, v29, v30, v31, v32, v33, v34);
            }
          }

          break;
        default:
          goto LABEL_15;
      }
    }
  }

  else
  {
LABEL_15:
    if (!(_DWORD)a3) {
      return 0LL;
    }
    if (dword_10008BA20)
    {
      v19 = (os_log_s *)ne_log_obj(result);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100055340(v19, v20, v21, v22, v23, v24, v25, v26);
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10000549C(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      for (uint64_t i = 0LL; i != 42; i += 7LL)
      {
        uint64_t v3 = &(&off_100084A68)[i];
        if (LODWORD((&off_100084A68)[i + 1]) == a2) {
          return *((unsigned int *)v3 + 3);
        }
      }

      return 0xFFFFFFFFLL;
    case 1:
      uint64_t v4 = 0LL;
      while (1)
      {
        uint64_t v3 = &(&off_100084BB8)[v4];
        if (LODWORD((&off_100084BB8)[v4 + 1]) == a2) {
          break;
        }
        v4 += 7LL;
        if (v4 == 56) {
          return 0xFFFFFFFFLL;
        }
      }

      return *((unsigned int *)v3 + 3);
    case 2:
      uint64_t v5 = 0LL;
      while (1)
      {
        uint64_t v3 = &(&off_100084D78)[v5];
        if (LODWORD((&off_100084D78)[v5 + 1]) == a2) {
          break;
        }
        v5 += 2LL;
        if (v5 == 6) {
          return 0xFFFFFFFFLL;
        }
      }

      return *((unsigned int *)v3 + 3);
    case 3:
      uint64_t v6 = 0LL;
      while (1)
      {
        uint64_t v3 = &(&off_100088118)[v6];
        if (LODWORD((&off_100088118)[v6 + 1]) == a2) {
          break;
        }
        v6 += 7LL;
        if (v6 == 21) {
          return 0xFFFFFFFFLL;
        }
      }

      return *((unsigned int *)v3 + 3);
    case 4:
      uint64_t v7 = 0LL;
      while (1)
      {
        uint64_t v3 = &(&off_100088000)[v7];
        if (LODWORD((&off_100088000)[v7 + 1]) == a2) {
          break;
        }
        v7 += 7LL;
        if (v7 == 35) {
          return 0xFFFFFFFFLL;
        }
      }

      return *((unsigned int *)v3 + 3);
    case 5:
      uint64_t v8 = 0LL;
      while (1)
      {
        uint64_t v3 = &(&off_1000881C0)[v8];
        if (LODWORD((&off_1000881C0)[v8 + 1]) == a2) {
          break;
        }
        v8 += 3LL;
        if (v8 == 24) {
          return 0xFFFFFFFFLL;
        }
      }

      return *((unsigned int *)v3 + 3);
    case 6:
      uint64_t v9 = 0LL;
      break;
    default:
      return 0xFFFFFFFFLL;
  }

  while (1)
  {
    uint64_t v3 = &(&off_100084DA8)[v9];
    if (LODWORD((&off_100084DA8)[v9 + 1]) == a2) {
      break;
    }
    v9 += 2LL;
    if (v9 == 32) {
      return 0xFFFFFFFFLL;
    }
  }

  return *((unsigned int *)v3 + 3);
}

uint64_t sub_100005604(unsigned int a1)
{
  if (a1 > 6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_100069DDC[a1];
  }
}

void sub_100005624( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_10000563C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

  ;
}

void sub_100005654( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

SecCertificateRef sub_100005664(uint64_t a1)
{
  uint64_t v1 = CFDataCreateWithBytesNoCopy(0LL, *(const UInt8 **)(a1 + 8), *(void *)a1, kCFAllocatorNull);
  if (v1)
  {
    uint64_t v2 = v1;
    SecCertificateRef v3 = SecCertificateCreateWithData(0LL, v1);
    CFRelease(v2);
    if (v3) {
      return v3;
    }
  }

  else
  {
    SecCertificateRef v3 = 0LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100055404();
    }
  }

  return v3;
}

uint64_t sub_1000056FC(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current == 0.0)
  {
    if (dword_10008BA20)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(v2);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100055488();
      }
    }

    return 5LL;
  }

  CFAbsoluteTime v4 = Current;
  uint64_t IsValid = SecCertificateIsValid(a1);
  if (!(_DWORD)IsValid)
  {
    uint64_t v9 = CFDateCreate(0LL, v4);
    double v10 = SecCertificateNotValidBefore(a1);
    CFAbsoluteTime v11 = v10;
    if (v10 == 0.0) {
      uint64_t v12 = 0LL;
    }
    else {
      uint64_t v12 = CFDateCreate(0LL, v10);
    }
    double v13 = SecCertificateNotValidAfter(a1);
    CFAbsoluteTime v14 = v13;
    if (v13 == 0.0) {
      uint64_t v15 = 0LL;
    }
    else {
      uint64_t v15 = CFDateCreate(0LL, v13);
    }
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    int v25 = 0;
    uint64_t v16 = CFCalendarCreateWithIdentifier(kCFAllocatorDefault, kCFGregorianCalendar);
    if (v16)
    {
      uint64_t v17 = v16;
      if (v11 != 0.0)
      {
        uint64_t v18 = CFCalendarDecomposeAbsoluteTime(v16, v11, "yMdHm", (char *)&v27 + 4, &v27, (char *)&v26 + 4, &v26, &v25);
        if (dword_10008BA20)
        {
          v19 = (os_log_s *)ne_log_obj(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67110144;
            int v29 = HIDWORD(v27);
            __int16 v30 = 1024;
            int v31 = v27;
            __int16 v32 = 1024;
            int v33 = HIDWORD(v26);
            __int16 v34 = 1024;
            int v35 = v26;
            __int16 v36 = 1024;
            int v37 = v25;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "Certificate not valid before yr %d, mon %d, days %d, hours %d, min %d\n",  buf,  0x20u);
          }
        }
      }

      if (v14 != 0.0)
      {
        uint64_t v20 = CFCalendarDecomposeAbsoluteTime(v17, v14, "yMdHm", (char *)&v27 + 4, &v27, (char *)&v26 + 4, &v26, &v25);
        if (dword_10008BA20)
        {
          uint64_t v21 = (os_log_s *)ne_log_obj(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67110144;
            int v29 = HIDWORD(v27);
            __int16 v30 = 1024;
            int v31 = v27;
            __int16 v32 = 1024;
            int v33 = HIDWORD(v26);
            __int16 v34 = 1024;
            int v35 = v26;
            __int16 v36 = 1024;
            int v37 = v25;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "Certificate not valid after yr %d, mon %d, days %d, hours %d, min %d\n",  buf,  0x20u);
          }
        }
      }

      CFRelease(v17);
    }

    if (!v9) {
      goto LABEL_36;
    }
    if (v12 && CFDateCompare(v9, v12, 0LL) == kCFCompareLessThan)
    {
      if (dword_10008BA20)
      {
        uint64_t v24 = (os_log_s *)ne_log_obj(-1LL);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          sub_10005545C();
        }
      }

      uint64_t v7 = 1LL;
      goto LABEL_47;
    }

    if (v15 && CFDateCompare(v9, v15, 0LL) == kCFCompareGreaterThan)
    {
      if (dword_10008BA20)
      {
        uint64_t v22 = (os_log_s *)ne_log_obj(1LL);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          sub_100055430();
        }
      }

      uint64_t v7 = 2LL;
    }

    else
    {
LABEL_36:
      uint64_t v7 = 0LL;
    }

    if (!v12)
    {
      if (!v15) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }

LABEL_47:
    CFRelease(v12);
    if (!v15)
    {
LABEL_40:
      if (v9) {
        CFRelease(v9);
      }
      return v7;
    }

    sub_10003F5BC(*(void **)buf);
LABEL_48:
    __int16 v30 = (sockaddr *)v34;
LABEL_82:
    v51 = v17[16];
    v17 += 16;
    v52 = *((int *)v17 - 3);
    v32 += v52;
    v29 += v52;
    if (!v51) {
      goto LABEL_123;
    }
  }

  switch(*v17)
  {
    case 1u:
      uint64_t v27 = a1 + 232;
      if (!*v97)
      {
        uint64_t v27 = sub_100026BA4(v97, *((void *)v17 + 1));
        if ((v27 & 0x80000000) != 0)
        {
          if (!dword_10008BA20) {
            goto LABEL_163;
          }
          v75 = v30;
          v83 = (os_log_s *)ne_log_obj(v27);
          if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
            sub_100058F00();
          }
          goto LABEL_138;
        }

        goto LABEL_82;
      }

      if (!dword_10008BA20) {
        goto LABEL_82;
      }
      __int16 v34 = v30;
      int v35 = (os_log_s *)ne_log_obj(v97);
      uint64_t v27 = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v27) {
        sub_10005AC58(&v99, v100, v35);
      }
      goto LABEL_48;
    case 4u:
      uint64_t v27 = sub_100026BA4((size_t **)(a1 + 176), *((void *)v17 + 1));
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_82;
      }
      if (!dword_10008BA20) {
        goto LABEL_163;
      }
      v75 = v30;
      v78 = (os_log_s *)ne_log_obj(v27);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
        sub_1000590F0();
      }
      goto LABEL_138;
    case 5u:
      v38 = *(void **)(a1 + 192);
      if (!v38 || !*(void *)(a1 + 200)) {
        goto LABEL_163;
      }
      v95 = v31;
      if (v98) {
        v38 = *(void **)(a1 + 200);
      }
      v39 = (unsigned __int8 *)v38[1];
      v40 = *((void *)v17 + 1);
      v41 = (const void *)(v40 + 4);
      if (*v39 == *(unsigned __int8 *)(v40 + 4)
        && (!*(_BYTE *)(v40 + 5) || *(unsigned __int8 *)(v40 + 5) == v39[1])
        && (!*(_WORD *)(v40 + 6) || *(unsigned __int16 *)(v40 + 6) == *((unsigned __int16 *)v39 + 1)))
      {
        uint64_t v27 = memcmp(v39 + 4, (const void *)(v40 + 8), *v38 - 4LL);
        if (!(_DWORD)v27) {
          goto LABEL_81;
        }
      }

      if ((*(_BYTE *)(*(void *)(a1 + 256) + 96LL) & 6) != 0)
      {
        v96 = v30;
        if (dword_10008BA20)
        {
          v42 = (os_log_s *)ne_log_obj(v27);
          uint64_t v27 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v27)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "mismatched ID was returned - ignored because nat traversal is being used.\n",  buf,  2u);
          }
        }

        v43 = *(_DWORD *)(*(void *)(a1 + 256) + 96LL);
        if (v98)
        {
          __int16 v30 = v96;
          if ((v43 & 4) != 0)
          {
            v44 = *(void **)(a1 + 288);
            if (v44) {
              sub_10003F5BC(v44);
            }
            v45 = sub_10003F4BC((bswap32(*(unsigned __int16 *)(v40 + 2)) >> 16) - 4LL);
            *(void *)(a1 + 288) = v45;
            if (v45)
            {
              uint64_t v27 = (uint64_t)memcpy((void *)v45[1], v41, *v45);
              if (dword_1000882C8 >= 7) {
                sub_100033CEC( 7,  *(void *)(*(void *)(a1 + 288) + 8LL),  **(void **)(a1 + 288),  "peer's external nat address saved.\n",  v46,  v47,  v48,  v49,  (char)v91);
              }
              goto LABEL_81;
            }

            if (dword_10008BA20)
            {
              v85 = (os_log_s *)ne_log_obj(0LL);
              int v31 = v95;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)) {
                sub_10005AD74();
              }
              goto LABEL_184;
            }

            uint64_t v7 = 0xFFFFFFFFLL;
LABEL_186:
            int v31 = v95;
            goto LABEL_164;
          }
        }

        else
        {
          __int16 v30 = v96;
          if ((v43 & 2) != 0)
          {
            v54 = *(void **)(qword_10008B848 + 296);
            if (v54) {
              sub_10003F5BC(v54);
            }
            v55 = *(unsigned __int16 *)(v40 + 2);
            if (v55 <= 3)
            {
              if (dword_10008BA20)
              {
                v88 = (os_log_s *)ne_log_obj(v54);
                if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR)) {
                  sub_10005ACB8();
                }
              }
            }

            else
            {
              v56 = sub_10003F4BC(__rev16(v55) - 4LL);
              *(void *)(qword_10008B848 + 296) = v56;
              if (v56)
              {
                memcpy((void *)v56[1], v41, *v56);
                v57 = *(void **)(a1 + 280);
                if (v57) {
                  sub_10003F5BC(v57);
                }
                uint64_t v27 = (uint64_t)sub_10003F5F0(*(void *)(qword_10008B848 + 296));
                *(void *)(a1 + 280) = v27;
                int v31 = v95;
                if (v27)
                {
                  if (dword_1000882C8 >= 7) {
                    sub_100033CEC( 7,  *(void *)(v27 + 8),  *(void *)v27,  "external nat address saved.\n",  v58,  v59,  v60,  v61,  (char)v91);
                  }
                  v98 = 1;
                  goto LABEL_82;
                }

                if (dword_10008BA20)
                {
                  v90 = (os_log_s *)ne_log_obj(0LL);
                  if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
                    sub_10005AD48();
                  }
                }

    uint64_t v5 = 0xFFFFFFFFLL;
    goto LABEL_48;
  }

  v19 = timingsafe_bcmp(*(const void **)(v17 + 8), (const void *)(v12 + 4), *(void *)v17);
  sub_10003F5BC((void *)v17);
  if (v19)
  {
    if (dword_10008BA20)
    {
      uint64_t v21 = (os_log_s *)ne_log_obj(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_10005B844();
      }
    }

    uint64_t v5 = 23LL;
  }

  else
  {
    if ((*(_BYTE *)(a1 + 105) & 2) != 0) {
      uint64_t v28 = 6595;
    }
    else {
      uint64_t v28 = 6596;
    }
    sub_100004344(v2, v28);
    uint64_t v5 = 0LL;
  }

LABEL_39:
    CFRelease(v15);
    goto LABEL_40;
  }

  if (!dword_10008BA20) {
    return 0LL;
  }
  uint64_t v6 = (os_log_s *)ne_log_obj(IsValid);
  uint64_t v7 = 0LL;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Certificate expiration date is OK\n", buf, 2u);
    return 0LL;
  }

  return v7;
}

      uint64_t v12 = 0LL;
      goto LABEL_40;
    }

    uint64_t v12 = v11;
    double v13 = v11[1];
    *(_WORD *)(v13 + 2) = bswap32(v6) >> 16;
    if (!a1)
    {
LABEL_40:
      free(v4);
      return v12;
    }

    CFAbsoluteTime v14 = 0LL;
    uint64_t v15 = (_BYTE *)(v13 + 8);
    while (1)
    {
      uint64_t v16 = *((void *)a1 + 4);
      if (v16) {
        break;
      }
      uint64_t v18 = v14;
LABEL_32:
      a1 = (int *)*((void *)a1 + 5);
      CFAbsoluteTime v14 = v18;
      if (!a1) {
        goto LABEL_40;
      }
    }

    while (1)
    {
      uint64_t v17 = *(void *)(v16 + 64);
      if (v17) {
        break;
      }
      uint64_t v18 = v14;
LABEL_29:
      uint64_t v16 = *(void *)(v16 + 72);
      CFAbsoluteTime v14 = v18;
      if (!v16) {
        goto LABEL_32;
      }
    }

    __n = *((unsigned __int8 *)*v5 + 6) + 8LL;
    while (1)
    {
      uint64_t v18 = v15;
      uint64_t v5 = (const void **)*((void *)v4 + *a1);
      if (!v5) {
        break;
      }
      while (1)
      {
        v19 = (unsigned __int8 *)v5[1];
        if (*(_DWORD *)v17 == v19[4]) {
          break;
        }
        uint64_t v5 = (const void **)v5[3];
        if (!v5) {
          goto LABEL_34;
        }
      }

      uint64_t v20 = *((unsigned __int16 *)v19 + 1);
      if (v14) {
        *CFAbsoluteTime v14 = 2;
      }
      uint64_t v21 = __rev16(v20);
      memcpy(v15, *v5, __n);
      *uint64_t v18 = 0;
      *((_WORD *)v18 + 1) = bswap32(v21 + __n) >> 16;
      v18[7] = 1;
      uint64_t v22 = &v18[__n];
      memcpy(&v18[__n], v5[1], v21);
      *uint64_t v22 = 0;
      *((_WORD *)v22 + 1) = v20;
      uint64_t v15 = &v18[__n + v21];
      CFAbsoluteTime v14 = v18;
      uint64_t v17 = *(void *)(v17 + 16);
      if (!v17) {
        goto LABEL_29;
      }
    }

    CFAbsoluteTime v11 = v19;
    uint64_t v12 = 2;
    goto LABEL_9;
  }

  uint64_t v17 = v16;
  if ((*(_BYTE *)(v16 + 17) & 0x20) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v28 = (os_log_s *)ne_log_obj(v16);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v29) = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Begin QUICK mode.\n", (uint8_t *)&v29, 2u);
      }
    }

    else {
      return 0LL;
    }
  }

  *(_DWORD *)(a1 + 96) = *(_DWORD *)(qword_10008B848 + 280);
  uint64_t v18 = sub_10003A890(1LL, (uint64_t)sub_100025FF0, a1);
  if (!dword_10008BA20) {
    return 0LL;
  }
  v19 = (os_log_s *)ne_log_obj(v18);
  uint64_t v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v20)
  {
    LOWORD(v29) = 0;
    double v10 = "Request for establishing IPsec-SA was queued due to no phase1 found.\n";
    goto LABEL_39;
  }

  return result;
}

  if (a6 < 1)
  {
LABEL_81:
    if (v25) {
      close(v11);
    }
    return v57;
  }

  int v33 = 0;
  v54 = v25;
  while (1)
  {
    __int16 v34 = sendto(v11, a2, a3, 0, (const sockaddr *)a5, *a5);
    v57 = v34;
    int v35 = dword_10008BA20;
    if ((v34 & 0x80000000) != 0) {
      break;
    }
LABEL_54:
    if (v35)
    {
      v38 = (os_log_s *)ne_log_obj(v34);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        v39 = v57;
        sub_10003C888((const sockaddr *)a5);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v33 + 1;
        *(_WORD *)v65 = 1024;
        *(_DWORD *)&v65[2] = v39;
        int v25 = v54;
        *(_WORD *)&v65[6] = 2080;
        *(void *)&v65[8] = &qword_100088FE8;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "%d times of %d bytes message will be sent to %s\n",  buf,  0x18u);
      }
    }

    if (a6 == ++v33) {
      goto LABEL_81;
    }
  }

  if (dword_10008BA20)
  {
    __int16 v36 = (os_log_s *)ne_log_obj(v34);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      sub_100063C7C();
    }
  }

  __int16 v34 = (ssize_t)__error();
  if (*(_DWORD *)v34 == 65
    || (__int16 v34 = (ssize_t)__error(), *(_DWORD *)v34 == 50)
    || (__int16 v34 = (ssize_t)__error(), *(_DWORD *)v34 == 51))
  {
    if (dword_10008BA20)
    {
      int v37 = (os_log_s *)ne_log_obj(v34);
      __int16 v34 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v34) {
        sub_100063C2C();
      }
    }

    v57 = 0;
    int v35 = dword_10008BA20;
    goto LABEL_54;
  }

  if (v25) {
    goto LABEL_97;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100005B18(uint64_t a1, uint64_t a2, void *a3, SecKeyRef *a4)
{
  *(void *)keys = kSecPolicyName;
  values = a3;
  uint64_t v7 = &dword_10008BA20;
  if (!a3)
  {
LABEL_11:
    SecPolicyRef v11 = SecPolicyCreateWithProperties(kSecPolicyAppleIPsec, 0LL);
    goto LABEL_12;
  }

  uint64_t v8 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v8) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = dword_10008BA20 == 0;
  }
  if (!v9)
  {
    uint64_t v12 = (os_log_s *)ne_log_obj(v8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100055864();
    }
    goto LABEL_11;
  }

  double v10 = v8;
  SecPolicyRef v11 = SecPolicyCreateWithProperties(kSecPolicyAppleIPsec, v8);
  if (v10) {
    CFRelease(v10);
  }
LABEL_12:
  uint64_t v14 = 0xFFFFFFFFLL;
  if (!a1 || !a2) {
    return v14;
  }
  int v15 = 0;
  uint64_t v16 = -1LL;
  uint64_t v17 = a2;
  do
  {
    uint64_t v17 = *(void *)(v17 + 40);
    ++v16;
    v15 += 8;
  }

  while (v17);
  if (v16)
  {
    if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(0xFFFFFFFFLL);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
        sub_1000557DC(v16 + 1, v18);
      }
    }
  }

  v19 = (const void **)CFAllocatorAllocate(0LL, v15, 0LL);
  if (!v19) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v20 = v19;
  bzero(v19, v15);
  SecCertificateRef v21 = sub_100005664(a1 + 8);
  *uint64_t v20 = v21;
  if (!v21)
  {
    int v22 = 0;
    CFIndex v23 = 0LL;
    do
    {
LABEL_32:
      if (a2 != a1)
      {
        SecCertificateRef v29 = sub_100005664(a2 + 8);
        v20[v23] = v29;
        if (v29)
        {
          if (!*(_DWORD *)(a2 + 32))
          {
            uint64_t v31 = sub_1000056FC((uint64_t)v29);
            *(_DWORD *)(a2 + 32) = v31;
            if ((_DWORD)v31)
            {
              __int16 v32 = v7;
              if (*v7)
              {
                int v33 = (os_log_s *)ne_log_obj(v31);
                if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                {
                  int v34 = *(_DWORD *)(a2 + 32);
                  *(_DWORD *)keys = 67109120;
                  *(_DWORD *)&keys[4] = v34;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "other certificate in chain failed date verification: %d.\n",  keys,  8u);
                }
              }

              uint64_t v7 = v32;
              if (!v22) {
                int v22 = *(_DWORD *)(a2 + 32);
              }
            }
          }

          ++v23;
        }
      }

      a2 = *(void *)(a2 + 40);
      if (a2) {
        BOOL v30 = v23 <= v16;
      }
      else {
        BOOL v30 = 0;
      }
    }

    while (v30);
    goto LABEL_25;
  }

  if (*(_DWORD *)(a1 + 32))
  {
    int v22 = 0;
  }

  else
  {
    uint64_t v36 = sub_1000056FC((uint64_t)v21);
    int v22 = v36;
    *(_DWORD *)(a1 + 32) = v36;
    if ((_DWORD)v36)
    {
      if (dword_10008BA20)
      {
        int v37 = (os_log_s *)ne_log_obj(v36);
        BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
        int v22 = *(_DWORD *)(a1 + 32);
        if (v38)
        {
          *(_DWORD *)keys = 67109120;
          *(_DWORD *)&keys[4] = v22;
          _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "host certificate failed date verification: %d.\n",  keys,  8u);
          int v22 = *(_DWORD *)(a1 + 32);
        }
      }
    }
  }

  CFIndex v23 = 1LL;
  if (v16) {
    goto LABEL_32;
  }
LABEL_25:
  values = 0LL;
  CFArrayRef v24 = CFArrayCreate(0LL, v20, v23, &kCFTypeArrayCallBacks);
  if (v24)
  {
    CFArrayRef v25 = v24;
    unsigned int v26 = SecTrustCreateWithCertificates(v24, v11, (SecTrustRef *)&values);
    if (!v26)
    {
      uint64_t v27 = SecTrustEvaluate((SecTrustRef)values, &result);
      unsigned int v26 = v27;
      if (!(_DWORD)v27)
      {
        SecTrustResultType v28 = result;
        if (result == kSecTrustResultProceed || result == kSecTrustResultUnspecified)
        {
          unsigned int v26 = 0;
          *a4 = SecTrustCopyPublicKey((SecTrustRef)values);
        }

        else
        {
          if (*v7)
          {
            v39 = (os_log_s *)ne_log_obj(v27);
            uint64_t v27 = os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
            if ((_DWORD)v27) {
              sub_1000557B0();
            }
            SecTrustResultType v28 = result;
          }

          switch(v28)
          {
            case kSecTrustResultInvalid:
              if (*v7)
              {
                v40 = (os_log_s *)ne_log_obj(v27);
                if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
                  sub_10005567C();
                }
              }

              break;
            case kSecTrustResultProceed:
              if (*v7)
              {
                v41 = (os_log_s *)ne_log_obj(v27);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
                  sub_1000556A8();
                }
              }

              break;
            case kSecTrustResultDeny:
              if (*v7)
              {
                v43 = (os_log_s *)ne_log_obj(v27);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
                  sub_1000556D4();
                }
              }

              break;
            case kSecTrustResultUnspecified:
              if (*v7)
              {
                v44 = (os_log_s *)ne_log_obj(v27);
                if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
                  sub_100055700();
                }
              }

              break;
            case kSecTrustResultRecoverableTrustFailure:
              if (*v7)
              {
                v45 = (os_log_s *)ne_log_obj(v27);
                if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
                  sub_10005572C();
                }
              }

              break;
            case kSecTrustResultFatalTrustFailure:
              if (*v7)
              {
                v46 = (os_log_s *)ne_log_obj(v27);
                if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
                  sub_100055758();
                }
              }

              break;
            case kSecTrustResultOtherError:
              if (*v7)
              {
                v47 = (os_log_s *)ne_log_obj(v27);
                if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
                  sub_100055784();
                }
              }

              break;
            default:
              if (*v7)
              {
                v42 = (os_log_s *)ne_log_obj(v27);
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
                  sub_100055608((int *)&result, v42);
                }
              }

              break;
          }

          v48 = SecTrustCopyProperties((SecTrustRef)values);
          if (v48)
          {
            v49 = v48;
            CFTypeID Count = CFArrayGetCount(v48);
            uint64_t v51 = Count;
            if (*v7)
            {
              v52 = (os_log_s *)ne_log_obj(Count);
              CFTypeID Count = os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
              if ((_DWORD)Count) {
                sub_1000555DC();
              }
            }

            if (v51 >= 1)
            {
              CFIndex v53 = 0LL;
              v71 = v49;
              do
              {
                CFTypeID Count = (CFTypeID)CFArrayGetValueAtIndex(v49, v53);
                if (Count)
                {
                  v54 = (const __CFDictionary *)Count;
                  CFTypeID v55 = CFGetTypeID((CFTypeRef)Count);
                  CFTypeID Count = CFDictionaryGetTypeID();
                  if (v55 == Count)
                  {
                    Value = (const __CFString *)CFDictionaryGetValue(v54, kSecPropertyKeyType);
                    if (Value)
                    {
                      v57 = Value;
                      CFTypeID v58 = CFGetTypeID(Value);
                      BOOL v9 = v58 == CFStringGetTypeID();
                      v49 = v71;
                      if (v9)
                      {
                        CStringPtr = CFStringGetCStringPtr(v57, 0);
                        if (CStringPtr)
                        {
                          if (dword_10008BA20)
                          {
                            v60 = CStringPtr;
                            log = (os_log_s *)ne_log_obj(CStringPtr);
                            if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)keys = 136315138;
                              *(void *)&keys[4] = v60;
                              _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "type = %s.\n",  keys,  0xCu);
                            }
                          }
                        }
                      }
                    }

                    CFTypeID Count = (CFTypeID)CFDictionaryGetValue(v54, kSecPropertyKeyValue);
                    if (Count)
                    {
                      v61 = (const __CFString *)Count;
                      CFTypeID v62 = CFGetTypeID((CFTypeRef)Count);
                      CFTypeID Count = CFStringGetTypeID();
                      BOOL v9 = v62 == Count;
                      v49 = v71;
                      if (v9)
                      {
                        CFTypeID Count = (CFTypeID)CFStringGetCStringPtr(v61, 0);
                        if (Count)
                        {
                          if (dword_10008BA20)
                          {
                            CFTypeID v63 = Count;
                            v64 = (os_log_s *)ne_log_obj(Count);
                            CFTypeID Count = os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
                            if ((_DWORD)Count)
                            {
                              *(_DWORD *)keys = 136315138;
                              *(void *)&keys[4] = v63;
                              _os_log_error_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "value = %s.\n",  keys,  0xCu);
                            }
                          }
                        }
                      }
                    }
                  }
                }

                ++v53;
              }

              while (v51 != v53);
            }

            uint64_t v7 = &dword_10008BA20;
            if (dword_10008BA20)
            {
              v65 = (os_log_s *)ne_log_obj(Count);
              if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
                sub_1000555B0();
              }
            }

            CFRelease(v49);
          }

          unsigned int v26 = -1;
        }
      }
    }

    CFRelease(v25);
    v66 = values;
    if (values) {
      CFRelease(values);
    }
    if (v26 - 1 > 0xFFFFFFFD) {
      goto LABEL_118;
    }
    if (*v7)
    {
      v67 = (os_log_s *)ne_log_obj(v66);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
        sub_100055548();
      }
    }
  }

  else if (*v7)
  {
    int v35 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      sub_10005551C();
    }
  }

  unsigned int v26 = -1;
LABEL_118:
  while (v23)
    CFRelease(v20[--v23]);
  CFAllocatorDeallocate(0LL, v20);
  if (v11) {
    CFRelease(v11);
  }
  if (v26 - 1 <= 0xFFFFFFFD)
  {
    if (*v7)
    {
      v69 = (os_log_s *)ne_log_obj(v68);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
        sub_1000554B4();
      }
    }

    return 0xFFFFFFFFLL;
  }

  else {
    return v26;
  }
}

const char *sub_10000632C(int a1)
{
  switch(a1)
  {
    case -25318:
      SecTrustResultType result = "errSecCreateChainFailed";
      break;
    case -25317:
      SecTrustResultType result = "errSecDataNotModifiable";
      break;
    case -25316:
      SecTrustResultType result = "errSecDataNotAvailable";
      break;
    case -25315:
      SecTrustResultType result = "errSecInteractionRequired";
      break;
    case -25314:
      SecTrustResultType result = "errSecNoPolicyModule";
      break;
    case -25313:
      SecTrustResultType result = "errSecNoCertificateModule";
      break;
    case -25312:
      SecTrustResultType result = "errSecNoStorageModule";
      break;
    case -25311:
      SecTrustResultType result = "errSecKeySizeNotAllowed";
      break;
    case -25310:
      SecTrustResultType result = "errSecWrongSecVersion";
      break;
    case -25309:
      SecTrustResultType result = "errSecReadOnlyAttr";
      break;
    case -25308:
      SecTrustResultType result = "errSecInteractionNotAllowed";
      break;
    case -25307:
      SecTrustResultType result = "errSecNoDefaultKeychain";
      break;
    case -25306:
      SecTrustResultType result = "errSecNoSuchClass";
      break;
    case -25305:
      SecTrustResultType result = "errSecInvalidSearchRef";
      break;
    case -25304:
      SecTrustResultType result = "errSecInvalidItemRef";
      break;
    case -25303:
      SecTrustResultType result = "errSecNoSuchAttr";
      break;
    case -25302:
      SecTrustResultType result = "errSecDataTooLarge";
      break;
    case -25301:
      SecTrustResultType result = "errSecBufferTooSmall";
      break;
    case -25300:
      SecTrustResultType result = "errSecItemNotFound";
      break;
    case -25299:
      SecTrustResultType result = "errSecDuplicateItem";
      break;
    case -25298:
      SecTrustResultType result = "errSecInvalidCallback";
      break;
    case -25297:
      SecTrustResultType result = "errSecDuplicateCallback";
      break;
    case -25296:
      SecTrustResultType result = "errSecDuplicateKeychain";
      break;
    case -25295:
      SecTrustResultType result = "errSecInvalidKeychain";
      break;
    case -25294:
      SecTrustResultType result = "errSecNoSuchKeychain";
      break;
    case -25293:
      SecTrustResultType result = "errSecAuthFailed";
      break;
    case -25292:
      SecTrustResultType result = "errSecReadOnly";
      break;
    case -25291:
      SecTrustResultType result = "errSecNotAvailable";
      break;
    case -25290:
    case -25289:
    case -25288:
    case -25287:
    case -25286:
    case -25285:
    case -25284:
    case -25283:
    case -25282:
    case -25281:
    case -25280:
    case -25279:
    case -25278:
    case -25277:
    case -25276:
    case -25275:
    case -25274:
    case -25273:
    case -25272:
    case -25271:
    case -25270:
    case -25269:
    case -25268:
    case -25267:
    case -25266:
    case -25265:
    case -25264:
    case -25263:
    case -25262:
    case -25261:
    case -25260:
    case -25259:
    case -25258:
    case -25257:
    case -25256:
    case -25255:
    case -25254:
    case -25253:
    case -25252:
    case -25251:
    case -25250:
    case -25249:
    case -25248:
    case -25247:
    case -25246:
    case -25245:
      goto LABEL_5;
    case -25244:
      SecTrustResultType result = "errSecInvalidOwnerEdit";
      break;
    case -25243:
      SecTrustResultType result = "errSecNoAccessForItem";
      break;
    case -25242:
      SecTrustResultType result = "errSecInvalidTrustSetting";
      break;
    case -25241:
      SecTrustResultType result = "errSecPolicyNotFound";
      break;
    case -25240:
      SecTrustResultType result = "errSecACLNotSimple";
      break;
    default:
      if (a1) {
LABEL_5:
      }
        SecTrustResultType result = "<unknown>";
      else {
        SecTrustResultType result = "noErr";
      }
      break;
  }

  return result;
}

uint64_t sub_1000064FC(__SecKey *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    SecPadding v4 = 32770;
  }
  else {
    SecPadding v4 = 1;
  }
  return SecKeyRawVerify(a1, v4, *(const uint8_t **)(a2 + 8), *(void *)a2, *(const uint8_t **)(a3 + 8), *(void *)a3);
}

size_t *sub_10000651C(void *a1, uint64_t a2)
{
  SecKeyRef privateKeyRef = 0LL;
  CFTypeRef result = 0LL;
  keys[0] = (void *)kSecReturnRef;
  keys[1] = (void *)kSecValuePersistentRef;
  keys[2] = (void *)kSecClass;
  keys[3] = (void *)kSecUseSystemKeychain;
  values[0] = kCFBooleanTrue;
  values[1] = a1;
  values[2] = (void *)kSecClassIdentity;
  values[3] = kCFBooleanTrue;
  SecCertificateRef v3 = CFDictionaryCreate(0LL, (const void **)keys, (const void **)values, 4LL, 0LL, 0LL);
  SecPadding v4 = v3;
  if (v3)
  {
    OSStatus v5 = SecItemCopyMatching(v3, &result);
    if (v5 || (OSStatus v5 = SecIdentityCopyPrivateKey((SecIdentityRef)result, &privateKeyRef)) != 0)
    {
      OSStatus v6 = v5;
      uint64_t v7 = 0LL;
    }

    else
    {
      uint64_t v7 = sub_10003F4BC(0x400uLL);
      if (v7) {
        OSStatus v6 = SecKeyRawSign(privateKeyRef, 1u, *(const uint8_t **)(a2 + 8), *(void *)a2, (uint8_t *)v7[1], v7);
      }
      else {
        OSStatus v6 = 0;
      }
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    OSStatus v6 = -1;
  }

  if (result) {
    CFRelease(result);
  }
  SecKeyRef v8 = privateKeyRef;
  if (privateKeyRef) {
    CFRelease(privateKeyRef);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v7 && v6)
  {
    sub_10003F5BC(v7);
    uint64_t v7 = 0LL;
  }

  if ((v6 + 1) >= 2)
  {
    if (dword_10008BA20)
    {
      BOOL v9 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100055890();
      }
    }
  }

  return v7;
}

void *sub_1000066DC(void *a1, _DWORD *a2)
{
  CFTypeRef result = 0LL;
  SecCertificateRef certificateRef = 0LL;
  keys[0] = (void *)kSecReturnRef;
  keys[1] = (void *)kSecValuePersistentRef;
  keys[2] = (void *)kSecClass;
  keys[3] = (void *)kSecUseSystemKeychain;
  values[0] = kCFBooleanTrue;
  values[1] = a1;
  values[2] = (void *)kSecClassIdentity;
  values[3] = kCFBooleanTrue;
  SecCertificateRef v3 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  4LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  SecPadding v4 = v3;
  if (!v3)
  {
    uint64_t v7 = 0LL;
    SecKeyRef v8 = 0LL;
    LODWORD(v6) = -1;
    goto LABEL_7;
  }

  OSStatus v5 = SecItemCopyMatching(v3, &result);
  if (v5 || (OSStatus v5 = SecIdentityCopyCertificate((SecIdentityRef)result, &certificateRef)) != 0)
  {
    LODWORD(v6) = v5;
    uint64_t v7 = 0LL;
LABEL_5:
    SecKeyRef v8 = 0LL;
    goto LABEL_7;
  }

  uint64_t v12 = SecCertificateCopyData(certificateRef);
  uint64_t v7 = v12;
  if (v12)
  {
    size_t Length = CFDataGetLength(v12);
    CFIndex v6 = Length;
    if (!Length) {
      goto LABEL_5;
    }
    uint64_t v14 = sub_10003F4BC(Length);
    SecKeyRef v8 = v14;
    if (v14)
    {
      v19.location = 0LL;
      v19.length = v6;
      CFDataGetBytes(v7, v19, (UInt8 *)v14[1]);
      if (a2)
      {
        LODWORD(v6) = 0;
        *a2 = sub_1000056FC((uint64_t)certificateRef);
        goto LABEL_7;
      }
    }
  }

  else
  {
    SecKeyRef v8 = 0LL;
  }

  LODWORD(v6) = 0;
LABEL_7:
  if (result) {
    CFRelease(result);
  }
  SecCertificateRef v9 = certificateRef;
  if (certificateRef) {
    CFRelease(certificateRef);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v7) {
    CFRelease(v7);
  }
  if ((v6 + 1) >= 2)
  {
    if (dword_10008BA20)
    {
      double v10 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000558F8();
      }
    }
  }

  return v8;
}

void sub_1000068DC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000068EC( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

const char *sub_100006924(int a1)
{
  return sub_10000632C(a1);
}

  ;
}

uint64_t *sub_100006938(CCOperation a1, CCAlgorithm a2, CCOptions a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v21 = 0LL;
  uint64_t v12 = sub_10003F4BC(*(void *)a4);
  double v13 = v12;
  if (v12)
  {
    CCCryptorStatus v14 = CCCrypt( a1,  a2,  a3,  *(const void **)(a5 + 8),  *(void *)a5,  *(const void **)(a6 + 8),  *(const void **)(a4 + 8),  *(void *)a4,  (void *)v12[1],  *v12,  &v21);
    if (v14)
    {
      if (dword_10008BA20)
      {
        CCCryptorStatus v15 = v14;
        uint64_t v16 = (os_log_s *)ne_log_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109632;
          CCOperation v23 = a1;
          __int16 v24 = 1024;
          CCAlgorithm v25 = a2;
          __int16 v26 = 1024;
          LODWORD(v27) = v15;
          _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "crypt %d %d error. status %d.\n",  buf,  0x14u);
        }
      }

      sub_10003F5BC(v13);
      return 0LL;
    }

    else if (*v13 != v21 && dword_10008BA20 != 0)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *v13;
        *(_DWORD *)buf = 67109888;
        CCOperation v23 = a1;
        __int16 v24 = 1024;
        CCAlgorithm v25 = a2;
        __int16 v26 = 2048;
        uint64_t v27 = v20;
        __int16 v28 = 2048;
        size_t v29 = v21;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "crypt %d %d length mismatch. expected: %zd. got: %zd.\n",  buf,  0x22u);
      }
    }
  }

  return v13;
}

uint64_t *sub_100006B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100006938(0, 1u, 0, a1, a2, a3);
}

uint64_t *sub_100006B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100006938(1u, 1u, 0, a1, a2, a3);
}

uint64_t sub_100006B48()
{
  return 0LL;
}

uint64_t sub_100006B50(int a1)
{
  if ((a1 & 0xFFFFFFBF) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 64LL;
  }
}

uint64_t *sub_100006B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100006938(0, 2u, 0, a1, a2, a3);
}

uint64_t *sub_100006B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100006938(1u, 2u, 0, a1, a2, a3);
}

uint64_t sub_100006B98()
{
  return 0LL;
}

uint64_t sub_100006BA0(int a1)
{
  if (a1) {
    BOOL v1 = a1 == 192;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    return 192LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t *sub_100006BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100006938(0, 0, 0, a1, a2, a3);
}

uint64_t *sub_100006BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100006938(1u, 0, 0, a1, a2, a3);
}

uint64_t sub_100006BEC(uint64_t result)
{
  HIDWORD(v2) = result;
  LODWORD(v2) = result;
  int v1 = v2 >> 6;
  unsigned int v3 = v1 - 2;
  if (v1) {
    unsigned int v4 = -1;
  }
  else {
    unsigned int v4 = 128;
  }
  if (v3 >= 3) {
    return v4;
  }
  else {
    return result;
  }
}

uint64_t sub_100006C10()
{
  return 0LL;
}

uint64_t sub_100006C18()
{
  return 0LL;
}

uint64_t sub_100006C20()
{
  return 0LL;
}

void *sub_100006C28(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v4, 4u, *(const void **)(a1 + 8), *(void *)a1);
  CCHmacUpdate(v4, *(const void **)(a2 + 8), *(void *)a2);
  return sub_100006CBC(v4);
}

CCHmacContext *sub_100006C78(uint64_t a1)
{
  unint64_t v2 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v2, 4u, *(const void **)(a1 + 8), *(void *)a1);
  return v2;
}

void sub_100006CB0(CCHmacContext *a1, uint64_t a2)
{
}

void *sub_100006CBC(CCHmacContext *a1)
{
  unint64_t v2 = sub_10003F4BC(0x40uLL);
  unsigned int v3 = v2;
  if (v2)
  {
    CCHmacFinal(a1, (void *)v2[1]);
    *unsigned int v3 = 64LL;
    free(a1);
  }

  return v3;
}

void *sub_100006D08(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v4, 3u, *(const void **)(a1 + 8), *(void *)a1);
  CCHmacUpdate(v4, *(const void **)(a2 + 8), *(void *)a2);
  return sub_100006D9C(v4);
}

CCHmacContext *sub_100006D58(uint64_t a1)
{
  unint64_t v2 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v2, 3u, *(const void **)(a1 + 8), *(void *)a1);
  return v2;
}

void sub_100006D90(CCHmacContext *a1, uint64_t a2)
{
}

void *sub_100006D9C(CCHmacContext *a1)
{
  unint64_t v2 = sub_10003F4BC(0x30uLL);
  unsigned int v3 = v2;
  if (v2)
  {
    CCHmacFinal(a1, (void *)v2[1]);
    *unsigned int v3 = 48LL;
    free(a1);
  }

  return v3;
}

void *sub_100006DE8(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v4, 2u, *(const void **)(a1 + 8), *(void *)a1);
  CCHmacUpdate(v4, *(const void **)(a2 + 8), *(void *)a2);
  return sub_100006E7C(v4);
}

CCHmacContext *sub_100006E38(uint64_t a1)
{
  unint64_t v2 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v2, 2u, *(const void **)(a1 + 8), *(void *)a1);
  return v2;
}

void sub_100006E70(CCHmacContext *a1, uint64_t a2)
{
}

void *sub_100006E7C(CCHmacContext *a1)
{
  unint64_t v2 = sub_10003F4BC(0x20uLL);
  unsigned int v3 = v2;
  if (v2)
  {
    CCHmacFinal(a1, (void *)v2[1]);
    *unsigned int v3 = 32LL;
    free(a1);
  }

  return v3;
}

void *sub_100006EC8(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v4, 0, *(const void **)(a1 + 8), *(void *)a1);
  CCHmacUpdate(v4, *(const void **)(a2 + 8), *(void *)a2);
  return sub_100006F5C(v4);
}

CCHmacContext *sub_100006F18(uint64_t a1)
{
  unint64_t v2 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v2, 0, *(const void **)(a1 + 8), *(void *)a1);
  return v2;
}

void sub_100006F50(CCHmacContext *a1, uint64_t a2)
{
}

void *sub_100006F5C(CCHmacContext *a1)
{
  unint64_t v2 = sub_10003F4BC(0x14uLL);
  unsigned int v3 = v2;
  if (v2)
  {
    CCHmacFinal(a1, (void *)v2[1]);
    *unsigned int v3 = 20LL;
    free(a1);
  }

  return v3;
}

void *sub_100006FA8(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v4, 1u, *(const void **)(a1 + 8), *(void *)a1);
  CCHmacUpdate(v4, *(const void **)(a2 + 8), *(void *)a2);
  return sub_10000703C(v4);
}

CCHmacContext *sub_100006FF8(uint64_t a1)
{
  unint64_t v2 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v2, 1u, *(const void **)(a1 + 8), *(void *)a1);
  return v2;
}

void sub_100007030(CCHmacContext *a1, uint64_t a2)
{
}

void *sub_10000703C(CCHmacContext *a1)
{
  unint64_t v2 = sub_10003F4BC(0x10uLL);
  unsigned int v3 = v2;
  if (v2)
  {
    CCHmacFinal(a1, (void *)v2[1]);
    *unsigned int v3 = 16LL;
    free(a1);
  }

  return v3;
}

void *sub_100007088(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v4, 0, *(const void **)(a1 + 8), *(void *)a1);
  CCHmacUpdate(v4, *(const void **)(a2 + 8), *(void *)a2);
  return sub_10000711C(v4);
}

CCHmacContext *sub_1000070D8(uint64_t a1)
{
  unint64_t v2 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v2, 0, *(const void **)(a1 + 8), *(void *)a1);
  return v2;
}

void sub_100007110(CCHmacContext *a1, uint64_t a2)
{
}

void *sub_10000711C(CCHmacContext *a1)
{
  unint64_t v2 = (CCHmacContext *)malloc(0x14uLL);
  if (!v2) {
    return 0LL;
  }
  unsigned int v3 = v2;
  unsigned int v4 = sub_10003F4BC(0xCuLL);
  if (v4)
  {
    CCHmacFinal(a1, v3);
    uint64_t v5 = v4[1];
    uint64_t v6 = *(void *)v3->ctx;
    *(_DWORD *)(v5 + 8) = v3->ctx[2];
    *(void *)uint64_t v5 = v6;
    *unsigned int v4 = 12LL;
    free(v3);
    uint64_t v7 = a1;
  }

  else
  {
    uint64_t v7 = v3;
  }

  free(v7);
  return v4;
}

void *sub_1000071AC(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v4, 1u, *(const void **)(a1 + 8), *(void *)a1);
  CCHmacUpdate(v4, *(const void **)(a2 + 8), *(void *)a2);
  return sub_100007234(v4);
}

CCHmacContext *sub_1000071FC(uint64_t a1)
{
  unint64_t v2 = (CCHmacContext *)malloc(0x180uLL);
  CCHmacInit(v2, 1u, *(const void **)(a1 + 8), *(void *)a1);
  return v2;
}

void *sub_100007234(CCHmacContext *a1)
{
  unint64_t v2 = (CCHmacContext *)malloc(0x10uLL);
  if (!v2) {
    return 0LL;
  }
  unsigned int v3 = v2;
  unsigned int v4 = sub_10003F4BC(0xCuLL);
  if (v4)
  {
    CCHmacFinal(a1, v3);
    uint64_t v5 = v4[1];
    uint64_t v6 = *(void *)v3->ctx;
    *(_DWORD *)(v5 + 8) = v3->ctx[2];
    *(void *)uint64_t v5 = v6;
    *unsigned int v4 = 12LL;
    free(v3);
    uint64_t v7 = a1;
  }

  else
  {
    uint64_t v7 = v3;
  }

  free(v7);
  return v4;
}

CC_SHA512_CTX *sub_1000072C4()
{
  v0 = (CC_SHA512_CTX *)malloc(0xD0uLL);
  CC_SHA512_Init(v0);
  return v0;
}

uint64_t sub_1000072F0(CC_SHA512_CTX *a1, uint64_t a2)
{
  return CC_SHA512_Update(a1, *(const void **)(a2 + 8), *(_DWORD *)a2);
}

void *sub_100007300(CC_SHA512_CTX *a1)
{
  unint64_t v2 = sub_10003F4BC(0x40uLL);
  unsigned int v3 = v2;
  if (v2)
  {
    CC_SHA512_Final((unsigned __int8 *)v2[1], a1);
    free(a1);
  }

  return v3;
}

void *sub_100007344(uint64_t a1)
{
  unint64_t v2 = (CC_SHA512_CTX *)malloc(0xD0uLL);
  CC_SHA512_Init(v2);
  CC_SHA512_Update(v2, *(const void **)(a1 + 8), *(_DWORD *)a1);
  return sub_100007300(v2);
}

uint64_t sub_100007384()
{
  return 512LL;
}

CC_SHA512_CTX *sub_10000738C()
{
  v0 = (CC_SHA512_CTX *)malloc(0xD0uLL);
  CC_SHA384_Init(v0);
  return v0;
}

uint64_t sub_1000073B8(CC_SHA512_CTX *a1, uint64_t a2)
{
  return CC_SHA384_Update(a1, *(const void **)(a2 + 8), *(_DWORD *)a2);
}

void *sub_1000073C8(CC_SHA512_CTX *a1)
{
  unint64_t v2 = sub_10003F4BC(0x30uLL);
  unsigned int v3 = v2;
  if (v2)
  {
    CC_SHA384_Final((unsigned __int8 *)v2[1], a1);
    free(a1);
  }

  return v3;
}

void *sub_10000740C(uint64_t a1)
{
  unint64_t v2 = (CC_SHA512_CTX *)malloc(0xD0uLL);
  CC_SHA384_Init(v2);
  CC_SHA384_Update(v2, *(const void **)(a1 + 8), *(_DWORD *)a1);
  return sub_1000073C8(v2);
}

uint64_t sub_10000744C()
{
  return 384LL;
}

CC_SHA256_CTX *sub_100007454()
{
  v0 = (CC_SHA256_CTX *)malloc(0x68uLL);
  CC_SHA256_Init(v0);
  return v0;
}

uint64_t sub_100007480(CC_SHA256_CTX *a1, uint64_t a2)
{
  return CC_SHA256_Update(a1, *(const void **)(a2 + 8), *(_DWORD *)a2);
}

void *sub_100007490(CC_SHA256_CTX *a1)
{
  unint64_t v2 = sub_10003F4BC(0x20uLL);
  unsigned int v3 = v2;
  if (v2)
  {
    CC_SHA256_Final((unsigned __int8 *)v2[1], a1);
    free(a1);
  }

  return v3;
}

void *sub_1000074D4(uint64_t a1)
{
  unint64_t v2 = (CC_SHA256_CTX *)malloc(0x68uLL);
  CC_SHA256_Init(v2);
  CC_SHA256_Update(v2, *(const void **)(a1 + 8), *(_DWORD *)a1);
  return sub_100007490(v2);
}

uint64_t sub_100007514()
{
  return 256LL;
}

CC_SHA1_CTX *sub_10000751C()
{
  v0 = (CC_SHA1_CTX *)malloc(0x60uLL);
  CC_SHA1_Init(v0);
  return v0;
}

uint64_t sub_100007548(CC_SHA1_CTX *a1, uint64_t a2)
{
  return CC_SHA1_Update(a1, *(const void **)(a2 + 8), *(_DWORD *)a2);
}

void *sub_100007558(CC_SHA1_CTX *a1)
{
  unint64_t v2 = sub_10003F4BC(0x14uLL);
  unsigned int v3 = v2;
  if (v2)
  {
    CC_SHA1_Final((unsigned __int8 *)v2[1], a1);
    free(a1);
  }

  return v3;
}

void *sub_10000759C(uint64_t a1)
{
  unint64_t v2 = (CC_SHA1_CTX *)malloc(0x60uLL);
  CC_SHA1_Init(v2);
  CC_SHA1_Update(v2, *(const void **)(a1 + 8), *(_DWORD *)a1);
  return sub_100007558(v2);
}

uint64_t sub_1000075DC()
{
  return 160LL;
}

CC_MD5_CTX *sub_1000075E4()
{
  v0 = (CC_MD5_CTX *)malloc(0x5CuLL);
  CC_MD5_Init(v0);
  return v0;
}

uint64_t sub_100007610(CC_MD5_CTX *a1, uint64_t a2)
{
  return CC_MD5_Update(a1, *(const void **)(a2 + 8), *(_DWORD *)a2);
}

void *sub_100007620(CC_MD5_CTX *a1)
{
  unint64_t v2 = sub_10003F4BC(0x10uLL);
  unsigned int v3 = v2;
  if (v2)
  {
    CC_MD5_Final((unsigned __int8 *)v2[1], a1);
    free(a1);
  }

  return v3;
}

void *sub_100007664(uint64_t a1)
{
  unint64_t v2 = (CC_MD5_CTX *)malloc(0x5CuLL);
  CC_MD5_Init(v2);
  CC_MD5_Update(v2, *(const void **)(a1 + 8), *(_DWORD *)a1);
  return sub_100007620(v2);
}

uint64_t sub_1000076A4()
{
  return 128LL;
}

void *sub_1000076AC(unsigned int a1)
{
  size_t v1 = a1;
  unint64_t v2 = sub_10003F4BC(a1);
  if (v2 && SecRandomCopyBytes(kSecRandomDefault, v1, (void *)v2[1]))
  {
    sub_10003F5BC(v2);
    return 0LL;
  }

  return v2;
}

uint64_t sub_100007704()
{
  v0 = sub_1000076AC(4u);
  uint64_t v1 = *(unsigned int *)v0[1];
  sub_10003F5BC(v0);
  return v1;
}

void *sub_100007734()
{
  CFTypeRef result = calloc(0x10uLL, 1uLL);
  *CFTypeRef result = 0LL;
  result[1] = result;
  return result;
}

void *sub_100007754(uint64_t *a1, uint64_t a2)
{
  CFTypeRef result = calloc(0x18uLL, 1uLL);
  *CFTypeRef result = a2;
  uint64_t v5 = *a1;
  result[1] = *a1;
  if (v5) {
    uint64_t v6 = (void *)(v5 + 16);
  }
  else {
    uint64_t v6 = a1 + 1;
  }
  *uint64_t v6 = result + 1;
  *a1 = (uint64_t)result;
  result[2] = a1;
  return result;
}

void *sub_1000077AC(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = calloc(0x18uLL, 1uLL);
  result[1] = 0LL;
  *CFTypeRef result = a2;
  uint64_t v5 = *(void **)(a1 + 8);
  result[2] = v5;
  *uint64_t v5 = result;
  *(void *)(a1 + 8) = result + 1;
  return result;
}

uint64_t sub_1000077F4(void *a1, uint64_t (*a2)(void, uint64_t), uint64_t a3)
{
  unsigned int v3 = (void *)*a1;
  if (!*a1) {
    return 0LL;
  }
  while (1)
  {
    uint64_t result = a2(*v3, a3);
    if (result) {
      break;
    }
    unsigned int v3 = (void *)v3[1];
    if (!v3) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100007840(void *a1, void *a2)
{
  if (a1)
  {
    unint64_t v2 = (void *)*a1;
    if (!a2)
    {
      if (!v2) {
        return 0LL;
      }
      return *v2;
    }
  }

  else
  {
    if (!a2) {
      return 0LL;
    }
    unint64_t v2 = (void *)*a2;
    if (*a2) {
      unint64_t v2 = (void *)v2[1];
    }
  }

  *a2 = v2;
  if (v2) {
    return *v2;
  }
  return 0LL;
}

void sub_10000787C(void *a1, void (*a2)(void))
{
  for (uint64_t i = **(void ***)(a1[1] + 8LL); i; uint64_t i = **(void ***)(a1[1] + 8LL))
  {
    uint64_t v5 = i[1];
    uint64_t v6 = (void *)i[2];
    if (v5)
    {
      *(void *)(v5 + 16) = v6;
      uint64_t v6 = (void *)i[2];
    }

    else
    {
      a1[1] = v6;
    }

    *uint64_t v6 = v5;
    if (a2) {
      a2(*i);
    }
    free(i);
  }

  free(a1);
}

void *sub_1000078F8()
{
  uint64_t v0 = qword_10008B848;
  uint64_t result = *(void **)(qword_10008B848 + 120);
  if (result)
  {
    do
    {
      unint64_t v2 = (void *)*result;
      sub_10000793C(result);
      uint64_t result = v2;
    }

    while (v2);
    uint64_t v0 = qword_10008B848;
  }

  *(void *)(v0 + 120) = 0LL;
  return result;
}

void sub_10000793C(void *a1)
{
  unint64_t v2 = (void *)a1[1];
  if (v2) {
    free(v2);
  }
  unsigned int v3 = (void *)a1[5];
  if (v3) {
    free(v3);
  }
  free(a1);
}

uint64_t *sub_100007974(const sockaddr *a1, int a2)
{
  uint64_t i = 0LL;
  if (!getnameinfo(a1, a1->sa_len, __s1, 0x401u, 0LL, 0, 2))
  {
    for (uint64_t i = *(uint64_t **)(qword_10008B848 + 120); i; uint64_t i = (uint64_t *)*i)
    {
      uint64_t v5 = (const sockaddr *)i[1];
      if (v5 && (a2 != 0) == (*((_DWORD *)i + 8) != 0) && a1->sa_family == v5->sa_family)
      {
        if (getnameinfo(v5, v5->sa_len, __s2, 0x401u, 0LL, 0, 2)) {
          return 0LL;
        }
        if (!strcmp(__s1, __s2)) {
          return i;
        }
      }
    }
  }

  return i;
}

void sub_100007A98()
{
  uint64_t v0 = (void *)getifaddrs(&v36);
  if ((_DWORD)v0)
  {
    if (dword_10008BA20)
    {
      BOOL v30 = (os_log_s *)ne_log_obj(v0);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_100055AD4(v30);
      }
    }

    goto LABEL_74;
  }

  unint64_t v2 = v36;
  if (!v36)
  {
    size_t v29 = 0LL;
    goto LABEL_55;
  }

  unsigned int v3 = "llw";
  do
  {
    ifa_addr = v2->ifa_addr;
    int sa_family = ifa_addr->sa_family;
    if (sa_family != 30 && sa_family != 2) {
      goto LABEL_52;
    }
    ifa_name = v2->ifa_name;
    if (ifa_name)
    {
      uint64_t v0 = strnstr(v2->ifa_name, "awdl", 0x10uLL);
      if (v0) {
        goto LABEL_52;
      }
      uint64_t v0 = strnstr(ifa_name, v3, 0x10uLL);
      if (v0) {
        goto LABEL_52;
      }
      ifa_name = v2->ifa_name;
      ifa_addr = v2->ifa_addr;
      int sa_family = ifa_addr->sa_family;
    }

    if (sa_family != 2)
    {
      if (sa_family != 30) {
        goto LABEL_49;
      }
      uint64_t v0 = (void *)socket(30, 2, 0);
      if ((_DWORD)v0 == -1)
      {
        if (dword_10008BA20)
        {
          CCOperation v23 = (os_log_s *)ne_log_obj(v0);
          uint64_t v0 = (void *)os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v0) {
            sub_100055A10();
          }
        }

        goto LABEL_49;
      }

      int v8 = (int)v0;
      SecCertificateRef v9 = v3;
      uint64_t v10 = fcntl((int)v0, 4, 4LL);
      if ((_DWORD)v10 == -1)
      {
        if (dword_10008BA20)
        {
          SecPolicyRef v11 = (os_log_s *)ne_log_obj(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
            sub_100055A98(&v37, v38, v11);
          }
        }
      }

      __int128 v54 = 0u;
      __int128 v55 = 0u;
      __int128 v52 = 0u;
      __int128 v53 = 0u;
      __int128 v50 = 0u;
      __int128 v51 = 0u;
      __int128 v48 = 0u;
      __int128 v49 = 0u;
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      __int128 v44 = 0u;
      __int128 v45 = 0u;
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      __int128 v41 = 0u;
      memset(buf, 0, sizeof(buf));
      __strlcpy_chk(buf, ifa_name, 16LL, 16LL);
      __int128 v12 = *(_OWORD *)&ifa_addr->sa_data[10];
      *(sockaddr *)&buf[16] = *ifa_addr;
      *(_OWORD *)&buf[28] = v12;
      uint64_t v13 = ioctl(v8, 0xC1206949uLL, buf);
      if ((v13 & 0x80000000) != 0)
      {
        unsigned int v3 = v9;
        if (dword_10008BA20)
        {
          __int16 v24 = (os_log_s *)ne_log_obj(v13);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            sub_100055A54();
          }
        }

        uint64_t v0 = (void *)close(v8);
LABEL_49:
        if (dword_10008BA20)
        {
          CCAlgorithm v25 = (os_log_s *)ne_log_obj(v0);
          uint64_t v0 = (void *)os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)v0)
          {
            __int16 v26 = v2->ifa_name;
            uint64_t v27 = sub_10003CB98(v2->ifa_addr);
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v26;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v27;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "unsuitable address: %s %s\n",  buf,  0x16u);
          }
        }

        goto LABEL_52;
      }

      uint64_t v0 = (void *)close(v8);
      unsigned int v3 = v9;
      if ((buf[16] & 0x1D) != 0) {
        goto LABEL_49;
      }
      ifa_addr = v2->ifa_addr;
    }

    CCCryptorStatus v14 = sub_100007974(ifa_addr, 0);
    if (v14)
    {
      CCCryptorStatus v15 = (__int128 *)v14;
      *((_DWORD *)v14 + 9) = 1;
      uint64_t v0 = sub_100007974(v2->ifa_addr, 1);
      if (v0)
      {
        *((_DWORD *)v0 + 9) = 1;
        goto LABEL_52;
      }

      uint64_t v0 = (void *)sub_10003FF64();
      if ((_DWORD)v0)
      {
        uint64_t v0 = sub_100008038(v15);
        if (v0) {
          goto LABEL_44;
        }
        if (dword_10008BA20)
        {
          int v35 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
            goto LABEL_73;
          }
        }

        goto LABEL_74;
      }
    }

    else
    {
      uint64_t v16 = sub_100008160();
      if (!v16)
      {
        if (dword_10008BA20)
        {
          uint64_t v31 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            sub_100055960();
          }
        }

        goto LABEL_74;
      }

      uint64_t v17 = v16;
      uint64_t v18 = (const sockaddr *)sub_10003CA00(&v2->ifa_addr->sa_len);
      v17[1] = v18;
      if (!v18)
      {
        if (dword_10008BA20)
        {
          __int16 v32 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            sub_10005598C();
          }
        }

        goto LABEL_74;
      }

      CFRange v19 = v18;
      uint64_t v20 = strdup(v2->ifa_name);
      v17[5] = v20;
      if (!v20)
      {
        if (dword_10008BA20)
        {
          int v33 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            sub_1000559B8();
          }
        }

        goto LABEL_74;
      }

      *((_DWORD *)v17 + 9) = 1;
      uint64_t v21 = getnameinfo(v19, v19->sa_len, v39, 0x401u, 0LL, 0, 2);
      if ((_DWORD)v21) {
        uint64_t v21 = __strlcpy_chk(v39, "(invalid)", 1025LL, 1025LL);
      }
      if (dword_10008BA20)
      {
        int v22 = (os_log_s *)ne_log_obj(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          __int16 v28 = v2->ifa_name;
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v39;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v28;
          _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "my interface: %s (%s)\n", buf, 0x16u);
        }
      }

      *uint64_t v17 = *(void *)(qword_10008B848 + 120);
      *(void *)(qword_10008B848 + 120) = v17;
      uint64_t v0 = (void *)sub_10003FF64();
      if ((_DWORD)v0)
      {
        uint64_t v0 = sub_100008038((__int128 *)v17);
        if (v0)
        {
LABEL_44:
          *((_DWORD *)v0 + 8) = 1;
          goto LABEL_52;
        }

        if (dword_10008BA20)
        {
          int v34 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
LABEL_73:
          }
            sub_1000559E4();
        }

LABEL_74:
        exit(1);
      }
    }

    uint64_t v18 = 0LL;
    goto LABEL_75;
  }

  uint64_t v10 = *(void *)(*(void *)(a1 + 128) + 32LL);
  if (!v10)
  {
    uint8_t v37 = 0LL;
    uint64_t v18 = 0LL;
LABEL_82:
    sub_10003F5BC(v9);
    goto LABEL_83;
  }

  if (a2) {
    SecPolicyRef v11 = 216LL;
  }
  else {
    SecPolicyRef v11 = 208LL;
  }
  if (a2) {
    __int128 v12 = 208LL;
  }
  else {
    __int128 v12 = 216LL;
  }
  __int128 v49 = v8;
  __int128 v50 = a3;
  __int128 v47 = v12;
  __int128 v48 = v11;
  while (2)
  {
    uint64_t v13 = v9[1];
    if (v8)
    {
      memcpy((void *)v9[1], *(const void **)(*(void *)(a1 + 184) + 8LL), **(void **)(a1 + 184));
      v13 += **(void **)(a1 + 184);
    }

    *(_BYTE *)uint64_t v13 = *(_DWORD *)v10;
    CCCryptorStatus v14 = 24LL;
    if (a3 != 1) {
      CCCryptorStatus v14 = 28LL;
    }
    *(_DWORD *)(v13 + 1) = *(_DWORD *)(v10 + v14);
    CCCryptorStatus v15 = (char *)(v13 + 5);
    uint64_t v16 = *(void *)(a1 + v11);
    memcpy(v15, *(const void **)(v16 + 8), *(void *)v16);
    memcpy(&v15[*(void *)v16], *(const void **)(*(void *)(a1 + v12) + 8LL), **(void **)(a1 + v12));
    uint64_t v17 = sub_10002A2C8(*(void *)(*(void *)(a1 + 256) + 200LL), (uint64_t)v9, *(void *)(a1 + 256));
    uint64_t v18 = (void **)v17;
    if (v17)
    {
      if (*(_DWORD *)v10 == 2)
      {
        CCOperation v23 = *(void *)(v10 + 64);
        if (v23)
        {
          uint64_t v21 = 0;
          do
          {
            uint64_t v17 = sub_10000506C(*(unsigned int *)(v23 + 4));
            CCOperation v23 = *(void *)(v23 + 16);
          }

          while (v23);
          goto LABEL_36;
        }
      }

      else if (*(_DWORD *)v10 == 3)
      {
        CFRange v19 = *(void *)(v10 + 64);
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          do
          {
            int v22 = sub_100004F94(*(unsigned int *)(v19 + 4), *(unsigned int *)(v19 + 8));
            if (v22 > v20) {
              uint64_t v20 = v22;
            }
            uint64_t v17 = sub_10000506C(*(unsigned int *)(v19 + 12));
            CFRange v19 = *(void *)(v19 + 16);
          }

          while (v19);
          goto LABEL_37;
        }
      }

      uint64_t v21 = 0;
LABEL_36:
      uint64_t v20 = 0;
LABEL_37:
      if (dword_10008BA20)
      {
        __int16 v24 = (os_log_s *)ne_log_obj(v17);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109376;
          __int128 v52 = v20;
          __int128 v53 = 1024;
          __int128 v54 = v21;
          _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "encklen=%d authklen=%d\n", buf, 0xEu);
        }
      }

      CCAlgorithm v25 = (unint64_t)*v18;
      __int16 v26 = sub_10003F4BC((size_t)*v18 + *v9);
      if (v26)
      {
        uint64_t v27 = (uint64_t)v26;
        __int16 v28 = v20 + v21;
        if (v20 + v21 < 0 != __OFADD__(v20, v21)) {
          __int16 v28 = v20 + v21 + 7;
        }
        size_t v29 = ((uint64_t)v28 >> 3) / v25;
        BOOL v30 = v18;
        do
        {
          uint64_t v31 = v29;
          memcpy(*(void **)(v27 + 8), v30[1], (size_t)*v30);
          memcpy((char *)*v30 + *(void *)(v27 + 8), (const void *)v9[1], *v9);
          __int16 v32 = (void **)sub_10002A2C8(*(void *)(*(void *)(a1 + 256) + 200LL), v27, *(void *)(a1 + 256));
          if (!v32)
          {
            if (dword_10008BA20)
            {
              v40 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
                sub_10005E118();
              }
            }

            if (v30 != v18) {
              sub_10003F5BC(v30);
            }
            sub_10003F5BC(0LL);
            sub_10003F5BC((void *)v27);
            goto LABEL_75;
          }

          int v33 = v32;
          int v34 = (char *)*v18;
          int v35 = sub_10003F51C(v18, (size_t)*v18 + (void)*v32);
          if (v30 == v18) {
            BOOL v30 = v35;
          }
          if (!v35)
          {
            if (dword_10008BA20 && (__int128 v41 = (os_log_s *)ne_log_obj(0LL), os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)))
            {
              sub_10005E0EC();
              if (v30) {
LABEL_72:
              }
                sub_10003F5BC(v30);
            }

            else if (v30)
            {
              goto LABEL_72;
            }

            sub_10003F5BC(v33);
            sub_10003F5BC((void *)v27);
            goto LABEL_74;
          }

          uint64_t v36 = v35;
          uint64_t v18 = v35;
          memcpy(&v34[(void)v35[1]], v33[1], (size_t)*v33);
          if (v30 != v36) {
            sub_10003F5BC(v30);
          }
          LODWORD(v29) = v31 - 1;
          BOOL v30 = v33;
        }

        while (v31);
        if (v33 != v36) {
          sub_10003F5BC(v33);
        }
        sub_10003F5BC((void *)v27);
        uint8_t v37 = 0LL;
        int v8 = v49;
        a3 = v50;
        BOOL v38 = 40LL;
        if (v50 == 1) {
          BOOL v38 = 32LL;
        }
        *(void *)(v10 + v38) = v18;
        uint64_t v10 = *(void *)(v10 + 72);
        uint64_t v18 = 0LL;
        __int128 v12 = v47;
        SecPolicyRef v11 = v48;
        if (v10) {
          continue;
        }
        goto LABEL_82;
      }

      if (dword_10008BA20)
      {
        __int128 v46 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          sub_10005E0EC();
        }
      }
    }

    break;
  }

LABEL_52:
    unint64_t v2 = v2->ifa_next;
  }

  while (v2);
  size_t v29 = v36;
LABEL_55:
  freeifaddrs(v29);
}

void *sub_100008038(__int128 *a1)
{
  unint64_t v2 = calloc(1uLL, 0x30uLL);
  if (!v2)
  {
    if (dword_10008BA20)
    {
      SecCertificateRef v9 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100055B54();
      }
    }

    return 0LL;
  }

  unsigned int v3 = v2;
  __int128 v4 = *a1;
  __int128 v5 = a1[2];
  v2[1] = a1[1];
  v2[2] = v5;
  *unint64_t v2 = v4;
  uint64_t v6 = sub_10003CA00(*((unsigned __int8 **)a1 + 1));
  v3[1] = v6;
  if (!v6)
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100055B80();
      }
    }

    goto LABEL_16;
  }

  uint64_t v7 = (const char *)*((void *)a1 + 5);
  if (v7)
  {
    int v8 = strdup(v7);
    v3[5] = v8;
    if (!v8)
    {
      if (dword_10008BA20)
      {
        SecPolicyRef v11 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_100055BAC();
        }
      }

      free((void *)v3[1]);
LABEL_16:
      free(v3);
      return 0LL;
    }
  }

  v3[3] = 0LL;
  *((_DWORD *)v3 + 4) = -1;
  *unsigned int v3 = *(void *)a1;
  *(void *)a1 = v3;
  return v3;
}

void *sub_100008160()
{
  uint64_t v0 = calloc(1uLL, 0x30uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    v0[3] = 0LL;
    void *v0 = 0LL;
    v0[1] = 0LL;
    *((_DWORD *)v0 + 4) = -1;
  }

  else if (dword_10008BA20)
  {
    unint64_t v2 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100055B54();
    }
  }

  return v1;
}

uint64_t sub_1000081D4(_WORD *a1)
{
  if (dword_10008BA20)
  {
    uint64_t v1 = (os_log_s *)ne_log_obj(a1);
    a1 = (_WORD *)os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)a1) {
      sub_100055C3C();
    }
  }

  unint64_t v2 = *(uint64_t **)(qword_10008B848 + 120);
  if (v2)
  {
    LODWORD(v3) = 0;
    do
    {
      if (*((_DWORD *)v2 + 8)) {
        uint64_t v4 = 18LL;
      }
      else {
        uint64_t v4 = 16LL;
      }
      a1 = sub_10003D630(v2[1], *(unsigned __int16 *)(qword_10008B848 + v4));
      uint64_t v3 = (v3 + 1);
      unint64_t v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  if (dword_10008BA20)
  {
    __int128 v5 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_100055BD8(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  return 0LL;
}

uint64_t sub_1000082AC(unint64_t a1)
{
  uint64_t v1 = *(void **)(qword_10008B848 + 120);
  if (v1)
  {
    uint64_t v3 = 0LL;
    do
    {
      __int128 v5 = v1 + 1;
      unint64_t v4 = v1[1];
      if (v4)
      {
        uint64_t v6 = sub_10003B6D4(a1, v4);
        if (!(_DWORD)v6)
        {
          uint64_t v7 = v1;
          if (!v3) {
            goto LABEL_6;
          }
          int v8 = *(unsigned __int8 *)(*v5 + 1LL);
          if (v8 == 30 || v8 == 2)
          {
            if (*(_WORD *)(*v5 + 2LL) == 500) {
              uint64_t v7 = v1;
            }
            else {
              uint64_t v7 = v3;
            }
            goto LABEL_6;
          }

          if (dword_10008BA20)
          {
            uint64_t v9 = (os_log_s *)ne_log_obj(v6);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
              sub_100055C68(v11, (uint64_t)(v1 + 1), &v12, v9);
            }
          }
        }
      }

      uint64_t v7 = v3;
LABEL_6:
      uint64_t v1 = (void *)*v1;
      uint64_t v3 = v7;
    }

    while (v1);
  }

  return 62465LL;
}

void *sub_1000083D0(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = result;
  return result;
}

uint64_t sub_1000083E0()
{
  uint64_t v1 = sub_1000081D4(v0);
  return sub_100023B0C(v1);
}

uint64_t sub_1000083FC()
{
  if (!*(void *)(qword_10008B848 + 120) && *(_DWORD *)(qword_10008B848 + 112) == 1)
  {
    sub_100007A98();
    sub_1000081D4(v0);
  }

  return 0LL;
}

uint64_t sub_100008438(unsigned __int8 *__s1)
{
  uint64_t v1 = __s1;
  unint64_t v2 = *(void **)(qword_10008B848 + 120);
  if (v2)
  {
    uint64_t v3 = 0LL;
    do
    {
      unint64_t v4 = (unsigned __int8 *)v2[1];
      if (v4)
      {
        if (v1[1] == v4[1])
        {
          size_t v5 = *v1;
          uint64_t v3 = v2;
          if ((_DWORD)v5 == *v4)
          {
            __s1 = (unsigned __int8 *)memcmp(v1, v4, v5);
            uint64_t v3 = v2;
            if (!(_DWORD)__s1)
            {
              uint64_t v3 = v2;
              return *((unsigned int *)v3 + 4);
            }
          }
        }
      }

      unint64_t v2 = (void *)*v2;
    }

    while (v2);
    if (!v3) {
      goto LABEL_10;
    }
    return *((unsigned int *)v3 + 4);
  }

  else
  {
LABEL_10:
    if (dword_10008BA20)
    {
      uint64_t v7 = (os_log_s *)ne_log_obj(__s1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100055CB0((uint64_t)v1, v7, v8);
      }
    }

    return 0xFFFFFFFFLL;
  }

void sub_1000084FC()
{
  while (1)
  {
    ssize_t v0 = read(*(_DWORD *)(qword_10008B848 + 36), &v12, 0x45CuLL);
    if ((v0 & 0x80000000) == 0) {
      break;
    }
    uint64_t v1 = __error();
    if (*v1 != 4)
    {
      if (dword_10008BA20)
      {
        unint64_t v2 = (os_log_s *)ne_log_obj(v1);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
          sub_100055D1C();
        }
      }

      return;
    }
  }

  if (v0 >= v12)
  {
    if (v13[0] <= 0xEu && ((1 << v13[0]) & 0x7004) != 0)
    {
      if (dword_10008BA20)
      {
        size_t v5 = (os_log_s *)ne_log_obj(v0);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
          sub_100055DB8((uint64_t)v13, v5, v6, v7, v8, v9, v10, v11);
        }
      }

      sub_1000083E0();
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(v0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_100055D8C();
    }
  }

void sub_100008640()
{
  *(void *)(qword_10008B848 + 56) = 0LL;
}

uint64_t sub_100008674()
{
  uint64_t v0 = socket(17, 3, 0);
  *(_DWORD *)(qword_10008B848 + 36) = v0;
  if ((v0 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(v0);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        sub_100055E20();
      }
    }
  }

  else
  {
    uint64_t v1 = fcntl(v0, 4, 4LL);
    if ((_DWORD)v1 == -1 && dword_10008BA20 != 0)
    {
      uint64_t v3 = (os_log_s *)ne_log_obj(v1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        sub_100055EBC();
      }
    }

    unint64_t v4 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_read,  *(int *)(qword_10008B848 + 36),  0LL,  &_dispatch_main_q);
    *(void *)(qword_10008B848 + 56) = v4;
    if (v4)
    {
      dispatch_source_set_event_handler_f(v4, (dispatch_function_t)sub_1000084FC);
      int v5 = *(_DWORD *)(qword_10008B848 + 36);
      uint64_t v6 = *(dispatch_source_s **)(qword_10008B848 + 56);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 0x40000000LL;
      handler[2] = sub_1000087F4;
      handler[3] = &unk_100084EA8;
      int v11 = v5;
      dispatch_source_set_cancel_handler(v6, handler);
      dispatch_resume(*(dispatch_object_t *)(qword_10008B848 + 56));
      return 0LL;
    }

    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        sub_100055E90();
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1000087F4(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

char *sub_1000087FC(int *a1)
{
  return strerror(*a1);
}

void sub_100008804( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100008818(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_10000882C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

int *sub_10000883C()
{
  return __error();
}

void sub_10000884C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

int *sub_100008864()
{
  return __error();
}

uint64_t sub_10000886C(uint64_t a1, void *a2)
{
  if (a1) {
    return sub_1000088C8(a1, a2);
  }
  uint64_t v4 = qword_10008C6D0;
  if (!qword_10008C6D0) {
    return 0LL;
  }
  while (1)
  {
    uint64_t result = sub_1000088C8(v4, a2);
    if (result) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 1712);
    if (!v4) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000088C8(uint64_t a1, void *a2)
{
  for (uint64_t result = *(void *)(a1 + 1696); result; uint64_t result = *(void *)(result + 456))
  {
    if ((*(_BYTE *)(result + 17) & 0x40) == 0 && *(void *)result == *a2 && *(void *)(result + 8) == a2[1]) {
      break;
    }
  }

  return result;
}

uint64_t sub_1000088F8(uint64_t a1, void *a2)
{
  if (a1) {
    return sub_100008954(a1, a2);
  }
  uint64_t v4 = qword_10008C6D0;
  if (!qword_10008C6D0) {
    return 0LL;
  }
  while (1)
  {
    uint64_t result = sub_100008954(v4, a2);
    if (result) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 1712);
    if (!v4) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100008954(uint64_t a1, void *a2)
{
  for (uint64_t result = *(void *)(a1 + 1696); result; uint64_t result = *(void *)(result + 456))
  {
    if ((*(_BYTE *)(result + 17) & 0x40) == 0 && *(void *)result == *a2) {
      break;
    }
  }

  return result;
}

uint64_t sub_100008980(uint64_t a1, const sockaddr *a2, const sockaddr *a3)
{
  uint64_t v5 = a1;
  if (dword_10008BA20)
  {
    uint64_t v6 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)a1) {
      sub_1000560C0();
    }
    if (dword_10008BA20)
    {
      uint64_t v7 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)a1) {
        sub_100056050(a2);
      }
      if (dword_10008BA20)
      {
        uint64_t v8 = (os_log_s *)ne_log_obj(a1);
        a1 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)a1) {
          sub_100055FE0(a3);
        }
      }
    }
  }

  uint64_t v9 = *(void *)(v5 + 1696);
  if (v9)
  {
    while (1)
    {
      if ((*(_BYTE *)(v9 + 17) & 0x40) == 0)
      {
        if (dword_10008BA20)
        {
          uint64_t v10 = (os_log_s *)ne_log_obj(a1);
          BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
          if (v11) {
            sub_100055F90(&v18, v9, &v19);
          }
          if (dword_10008BA20)
          {
            unsigned __int16 v12 = (os_log_s *)ne_log_obj(v11);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
              sub_100055F40(&v16, v9, &v17);
            }
          }
        }

        a1 = sub_10003B8F4((unint64_t)a2, *(void *)(v9 + 56));
        if (!(_DWORD)a1)
        {
          a1 = sub_10003B8F4((unint64_t)a3, *(void *)(v9 + 48));
          if (!(_DWORD)a1) {
            break;
          }
        }
      }

      uint64_t v9 = *(void *)(v9 + 456);
      if (!v9) {
        goto LABEL_21;
      }
    }

    if (dword_10008BA20)
    {
      CCCryptorStatus v15 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        sub_100055F14();
      }
    }
  }

  else
  {
LABEL_21:
    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_100055EE8();
      }
    }

    return 0LL;
  }

  return v9;
}

uint64_t sub_100008B84(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a1) {
    return sub_100008BF8(a1, a2, a3);
  }
  uint64_t v6 = qword_10008C6D0;
  if (!qword_10008C6D0) {
    return 0LL;
  }
  while (1)
  {
    uint64_t result = sub_100008BF8(v6, a2, a3);
    if (result) {
      break;
    }
    uint64_t v6 = *(void *)(v6 + 1712);
    if (!v6) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100008BF8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  for (uint64_t i = *(void *)(a1 + 1696); i; uint64_t i = *(void *)(i + 456))
  {
    if ((*(_BYTE *)(i + 17) & 0x40) == 0
      && !sub_10003B6D4(a2, *(void *)(i + 56))
      && !sub_10003B6D4(a3, *(void *)(i + 48)))
    {
      break;
    }
  }

  return i;
}

uint64_t sub_100008C5C(uint64_t a1, unint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 1696); i; uint64_t i = *(void *)(i + 456))
  {
    if ((*(_BYTE *)(i + 17) & 0x40) == 0)
    {
      if (*(_BYTE *)(a2 + 1) == 2 && *(_DWORD *)(i + 28))
      {
        nw_nat64_extract_v4(i + 28, *(void *)(i + 48) + 8LL, &v5);
        if (*(_DWORD *)(a2 + 4) == v5) {
          return i;
        }
      }

      else if (!sub_10003B6D4(a2, *(void *)(i + 48)))
      {
        return i;
      }
    }
  }

  return i;
}

uint64_t sub_100008CE8(uint64_t a1, unint64_t a2)
{
  if (a1) {
    return sub_100008C5C(a1, a2);
  }
  uint64_t v4 = qword_10008C6D0;
  if (!qword_10008C6D0) {
    return 0LL;
  }
  while (1)
  {
    uint64_t result = sub_100008C5C(v4, a2);
    if (result) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 1712);
    if (!v4) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100008D44(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 440) + 1696LL);
  if (!v1) {
    return 1LL;
  }
  while (1)
  {
    if ((*(_BYTE *)(v1 + 432) & 2) == 0 && (*(_BYTE *)(v1 + 17) & 0x40) == 0)
    {
      uint64_t result = sub_10003B8F4(*(void *)(a1 + 48), *(void *)(v1 + 48));
      if (v1 != a1 && !(_DWORD)result) {
        break;
      }
    }

    uint64_t v1 = *(void *)(v1 + 456);
    if (!v1) {
      return 1LL;
    }
  }

  return result;
}

_BYTE *sub_100008DA0(char a1)
{
  unint64_t v2 = calloc(1uLL, 0x1D8uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[80] = a1;
    *((_DWORD *)v2 + 92) = 0;
    *((void *)v2 + 47) = 0LL;
    *((void *)v2 + 48) = 0LL;
    *((_DWORD *)v2 + 98) = 0;
    v2[432] &= ~2u;
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v6[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "New Phase 1\n", (uint8_t *)v6, 2u);
      }
    }
  }

  return v3;
}

void sub_100008E44(uint64_t a1)
{
  if (a1)
  {
    unint64_t v2 = *(void **)(a1 + 88);
    if (v2)
    {
      free(v2);
      *(void *)(a1 + 88) = 0LL;
    }

    if (*(void *)(a1 + 408)) {
      sub_1000448DC(a1);
    }
    uint64_t v3 = *(void **)(a1 + 424);
    if (v3)
    {
      sub_10003F5BC(v3);
      *(void *)(a1 + 424) = 0LL;
    }

    uint64_t v4 = *(unsigned int *)(a1 + 388);
    if ((_DWORD)v4)
    {
      sub_10003AA44(v4);
      *(_DWORD *)(a1 + 388) = 0;
    }

    uint64_t v5 = *(unsigned int *)(a1 + 392);
    if ((_DWORD)v5)
    {
      sub_10003AA44(v5);
      *(_DWORD *)(a1 + 392) = 0;
    }

    uint64_t v6 = *(void **)(a1 + 48);
    if (v6)
    {
      free(v6);
      *(void *)(a1 + 48) = 0LL;
    }

    uint64_t v7 = *(void **)(a1 + 56);
    if (v7)
    {
      free(v7);
      *(void *)(a1 + 56) = 0LL;
    }

    uint64_t v8 = *(void **)(a1 + 72);
    if (v8)
    {
      sub_100038E98(v8);
      *(void *)(a1 + 72) = 0LL;
    }

    sub_10003AA98(a1);
    uint64_t v9 = *(unsigned int *)(a1 + 112);
    if ((_DWORD)v9)
    {
      sub_10003AA44(v9);
      *(_DWORD *)(a1 + 112) = 0;
    }

    uint64_t v10 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v10)
    {
      sub_10003AA44(v10);
      *(_DWORD *)(a1 + 116) = 0;
    }

    uint64_t v11 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v11)
    {
      sub_10003AA44(v11);
      *(_DWORD *)(a1 + 120) = 0;
    }

    unsigned __int16 v12 = *(void **)(a1 + 128);
    if (v12)
    {
      sub_10003F5BC(v12);
      *(void *)(a1 + 128) = 0LL;
    }

    uint64_t v13 = *(void **)(a1 + 144);
    if (v13)
    {
      sub_10003F5BC(v13);
      *(void *)(a1 + 144) = 0LL;
    }

    CCCryptorStatus v14 = *(void **)(a1 + 152);
    if (v14)
    {
      sub_10003F5BC(v14);
      *(void *)(a1 + 152) = 0LL;
    }

    CCCryptorStatus v15 = *(void **)(a1 + 160);
    if (v15)
    {
      sub_10003F5BC(v15);
      *(void *)(a1 + 160) = 0LL;
    }

    int v16 = *(void **)(a1 + 168);
    if (v16)
    {
      sub_10003F5BC(v16);
      *(void *)(a1 + 168) = 0LL;
    }

    uint64_t v17 = *(void **)(a1 + 176);
    if (v17)
    {
      sub_10003F5BC(v17);
      *(void *)(a1 + 176) = 0LL;
    }

    int v18 = *(void **)(a1 + 184);
    if (v18)
    {
      sub_10003F5BC(v18);
      *(void *)(a1 + 184) = 0LL;
    }

    CFRange v19 = *(void **)(a1 + 192);
    if (v19)
    {
      sub_10003F5BC(v19);
      *(void *)(a1 + 192) = 0LL;
    }

    uint64_t v20 = *(void **)(a1 + 200);
    if (v20)
    {
      sub_10003F5BC(v20);
      *(void *)(a1 + 200) = 0LL;
    }

    uint64_t v21 = *(void **)(a1 + 208);
    if (v21)
    {
      sub_10003F5BC(v21);
      *(void *)(a1 + 208) = 0LL;
    }

    int v22 = *(void **)(a1 + 216);
    if (v22)
    {
      sub_10003F5BC(v22);
      *(void *)(a1 + 216) = 0LL;
    }

    CCOperation v23 = *(void **)(a1 + 224);
    if (v23)
    {
      sub_10003F5BC(v23);
      *(void *)(a1 + 224) = 0LL;
    }

    __int16 v24 = *(void **)(a1 + 232);
    if (v24)
    {
      sub_10003F5BC(v24);
      *(void *)(a1 + 232) = 0LL;
    }

    CCAlgorithm v25 = *(void **)(a1 + 240);
    if (v25)
    {
      sub_10003F5BC(v25);
      *(void *)(a1 + 240) = 0LL;
    }

    __int16 v26 = *(void **)(a1 + 248);
    if (v26)
    {
      sub_10003F5BC(v26);
      *(void *)(a1 + 248) = 0LL;
    }

    uint64_t v27 = *(void **)(a1 + 256);
    if (v27)
    {
      sub_10003F5BC(v27);
      *(void *)(a1 + 256) = 0LL;
    }

    __int16 v28 = *(void **)(a1 + 264);
    if (v28)
    {
      sub_10003F5BC(v28);
      *(void *)(a1 + 264) = 0LL;
    }

    size_t v29 = *(void **)(a1 + 272);
    if (v29)
    {
      sub_10003F5BC(v29);
      *(void *)(a1 + 272) = 0LL;
    }

    sub_10002C308(*(void **)(a1 + 280));
    *(void *)(a1 + 280) = 0LL;
    sub_10002C308(*(void **)(a1 + 288));
    *(void *)(a1 + 288) = 0LL;
    sub_10002C308(*(void **)(a1 + 296));
    *(void *)(a1 + 296) = 0LL;
    sub_10002C308(*(void **)(a1 + 304));
    *(void *)(a1 + 304) = 0LL;
    BOOL v30 = *(void **)(a1 + 312);
    if (v30)
    {
      sub_10003F5BC(v30);
      *(void *)(a1 + 312) = 0LL;
    }

    uint64_t v31 = *(void **)(a1 + 320);
    if (v31)
    {
      sub_10003F5BC(v31);
      *(void *)(a1 + 320) = 0LL;
    }

    __int16 v32 = *(void **)(a1 + 72);
    if (v32) {
      sub_100038E98(v32);
    }
    int v33 = *(void **)(a1 + 328);
    if (v33)
    {
      sub_10002E08C(v33);
      *(void *)(a1 + 328) = 0LL;
    }

    int v34 = *(void **)(a1 + 336);
    if (v34)
    {
      sub_10003F5BC(v34);
      *(void *)(a1 + 336) = 0LL;
    }

    int v35 = *(void **)(a1 + 344);
    if (v35)
    {
      sub_10003F5BC(v35);
      *(void *)(a1 + 344) = 0LL;
    }

    uint64_t v36 = *(void **)(a1 + 64);
    if (v36)
    {
      sub_100038F4C(v36);
      *(void *)(a1 + 64) = 0LL;
    }

    if (*(void *)(a1 + 136)) {
      SecDHDestroy();
    }
    free((void *)a1);
  }

void sub_1000090EC(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1696);
  while (v2)
  {
    uint64_t v4 = v2;
    uint64_t v2 = *(void *)(v2 + 456);
    if (a2)
    {
      a1 = *(void *)(v4 + 440);
      if (a1 && (*(_WORD *)(a1 + 264) & 0x20) == 0 && (*(_BYTE *)(a1 + 280) & 4) != 0)
      {
        if (!dword_10008BA20) {
          continue;
        }
        uint64_t v11 = (os_log_s *)ne_log_obj(a1);
        a1 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)a1) {
          continue;
        }
        unsigned __int16 v12 = sub_100024670(v4, 0);
        *(_DWORD *)buf = 136315138;
        CCCryptorStatus v14 = v12;
        uint64_t v7 = v11;
        uint64_t v8 = "Skipping Phase 1 %s that's asserted...\n";
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0xCu);
        continue;
      }

      if ((*(_BYTE *)(v4 + 17) & 0x20) != 0)
      {
        a1 = sub_10004D9E0(a1);
        if ((_DWORD)a1 || (a1 = sub_10004DA58(*(void *)(v4 + 440)), (_DWORD)a1))
        {
          if (!dword_10008BA20) {
            continue;
          }
          uint64_t v5 = (os_log_s *)ne_log_obj(a1);
          a1 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
          if (!(_DWORD)a1) {
            continue;
          }
          uint64_t v6 = sub_100024670(v4, 0);
          *(_DWORD *)buf = 136315138;
          CCCryptorStatus v14 = v6;
          uint64_t v7 = v5;
          uint64_t v8 = "Skipping Phase 1 %s that's established... because it's needed by children Phase 2s\n";
          goto LABEL_23;
        }

LABEL_13:
        if (dword_10008BA20)
        {
          uint64_t v9 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = sub_100024670(v4, 0);
            *(_DWORD *)buf = 136315138;
            CCCryptorStatus v14 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Got a Phase 1 %s to flush...\n",  buf,  0xCu);
          }
        }

        sub_10001ADEC(v4);
      }
    }

    else if ((*(_BYTE *)(v4 + 17) & 0x20) != 0)
    {
      goto LABEL_13;
    }

    sub_10004CCE8(*(void *)(v4 + 440), (uint64_t)off_100088500[0]);
    a1 = sub_10004ABA4(v4);
  }

  uint64_t v13 = *(uint64_t **)(a2 + 296);
  if (v13)
  {
    while (1)
    {
      CCCryptorStatus v14 = calloc(1uLL, 0x50uLL);
      if (!v14) {
        break;
      }
      CCCryptorStatus v15 = v14;
      int v16 = sub_1000101C0(*((unsigned __int16 *)v13 + 132));
      *(_DWORD *)CCCryptorStatus v15 = v16;
      if (v16 == 4) {
        uint64_t v17 = 2LL;
      }
      else {
        uint64_t v17 = 4LL;
      }
      v15[1] = v17;
      if (*(_DWORD *)(qword_10008B848 + 312))
      {
        int v18 = sub_10002F74C(*((unsigned __int8 *)v13 + 266));
        uint64_t v6 = v18;
        *((_DWORD *)v15 + 4) = v18;
        CFRange v19 = *(void *)(a1 + 256);
        if (v19 && (*(_BYTE *)(v19 + 96) & 6) != 0) {
          *((_DWORD *)v15 + 4) = v18 + *(unsigned __int16 *)(*(void *)(v19 + 88) + 12LL);
        }
      }

      else
      {
        *((_DWORD *)v15 + 4) = v6;
      }

      uint64_t v20 = *((_DWORD *)v13 + 67);
      if (*(_BYTE *)(a1 + 60)) {
        *((_DWORD *)v15 + 13) = v20;
      }
      else {
        *((_DWORD *)v15 + 12) = v20;
      }
      uint64_t v7 = sub_100036854(v15, *(void **)(a1 + 112), *(unsigned __int8 *)(a1 + 61));
      if ((v7 & 0x80000000) != 0)
      {
        if (dword_10008BA20)
        {
          int v33 = (os_log_s *)ne_log_obj(v7);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            sub_100063218();
          }
        }

        free(v15);
        goto LABEL_56;
      }

      v15[9] = v8[4];
      v8[4] = (uint64_t)v15;
      uint64_t v13 = (uint64_t *)*v13;
      if (!v13) {
        goto LABEL_28;
      }
    }

    if (dword_10008BA20)
    {
      __int16 v32 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        sub_100062340();
      }
    }

    ++a2;
    if (!--v5) {
      return 0xFFFFFFFFLL;
    }
  }

  a1 = sub_10004680C(v6, *a2);
  if ((_DWORD)a1)
  {
LABEL_10:
    if (dword_10008BA20)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)a1)
      {
        uint64_t v9 = *a2;
        *(_DWORD *)buf = 136315394;
        CFRange v19 = v6;
        uint64_t v20 = 2080;
        uint64_t v21 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "user %s is not a member of group %s\n",  buf,  0x16u);
      }
    }

    goto LABEL_13;
  }

  if (dword_10008BA20)
  {
    uint64_t v13 = (os_log_s *)ne_log_obj(a1);
    CCCryptorStatus v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (!v14) {
      return result;
    }
    CCCryptorStatus v15 = *a2;
    *(_DWORD *)buf = 136315394;
    CFRange v19 = v6;
    uint64_t v20 = 2080;
    uint64_t v21 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "user %s is a member of group %s\n",  buf,  0x16u);
  }

  return 0LL;
}

uint64_t sub_1000092FC(uint64_t a1)
{
  int v1 = a1;
  if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109120;
      v5[1] = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Flushing Phase 1 handles: ignore_estab_or_assert %d...\n",  (uint8_t *)v5,  8u);
    }
  }

  uint64_t result = qword_10008C6D0;
  if (qword_10008C6D0)
  {
    do
    {
      uint64_t v4 = *(void *)(result + 1712);
      sub_1000090EC(result, v1);
      uint64_t result = v4;
    }

    while (v4);
  }

  return result;
}

uint64_t sub_1000093C8(int a1)
{
  uint64_t v1 = qword_10008C6D0;
  if (!qword_10008C6D0) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 1704);
    if (v2) {
      break;
    }
LABEL_5:
    uint64_t v1 = *(void *)(v1 + 1712);
    if (!v1) {
      return 0LL;
    }
  }

  while (*(_DWORD *)(v2 + 52) != a1)
  {
    uint64_t v2 = *(void *)(v2 + 296);
    if (!v2) {
      goto LABEL_5;
    }
  }

  return v2;
}

uint64_t sub_100009408(int a1)
{
  uint64_t v1 = qword_10008C6D0;
  if (!qword_10008C6D0) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 1704);
    if (v2) {
      break;
    }
LABEL_5:
    uint64_t v1 = *(void *)(v1 + 1712);
    if (!v1) {
      return 0LL;
    }
  }

  while (*(_DWORD *)(v2 + 100) != a1)
  {
    uint64_t v2 = *(void *)(v2 + 296);
    if (!v2) {
      goto LABEL_5;
    }
  }

  return v2;
}

uint64_t sub_100009448(uint64_t a1, int a2)
{
  for (uint64_t result = *(void *)(*(void *)(a1 + 440) + 1704LL); result; uint64_t result = *(void *)(result + 296))
  {
    if (*(_DWORD *)(result + 108) == a2 && (*(_BYTE *)(result + 264) & 4) == 0) {
      break;
    }
  }

  return result;
}

uint64_t sub_100009474(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 448);
  if (v1)
  {
    uint64_t result = 0LL;
    while (!result)
    {
      uint64_t result = v1;
      uint64_t v1 = *(void *)(v1 + 296);
      if (!v1) {
        return result;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1000094A0(unint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3 = qword_10008C6D0;
  while (v3)
  {
    uint64_t v7 = *(void *)(v3 + 1704);
    uint64_t v3 = *(void *)(v3 + 1712);
    while (v7)
    {
      uint64_t v8 = v7;
      uint64_t v7 = *(void *)(v7 + 296);
      if (*(_DWORD *)(v8 + 52) == a3 && !sub_10003B8F4(a1, *(void *)v8))
      {
        uint64_t v9 = sub_10003B8F4(a2, *(void *)(v8 + 8));
        if (!(_DWORD)v9)
        {
          if ((*(_BYTE *)(v8 + 57) & 0x60) != 0
            || *(_DWORD *)(v8 + 72)
            || *(_DWORD *)(v8 + 64)
            || *(_DWORD *)(v8 + 68)
            || *(_DWORD *)(v8 + 96))
          {
            return v8;
          }

          if (dword_10008BA20)
          {
            uint64_t v10 = (os_log_s *)ne_log_obj(v9);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)unsigned __int16 v12 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Zombie ph2 found, expiring it\n",  v12,  2u);
            }
          }

          sub_1000258C8((void *)v8);
        }
      }
    }
  }

  return 0LL;
}

void *sub_1000095D4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = qword_10008C6D0;
  if (qword_10008C6D0)
  {
    while (1)
    {
      uint64_t result = *(void **)(v4 + 1704);
      if (result) {
        break;
      }
LABEL_17:
      uint64_t v4 = *(void *)(v4 + 1712);
      if (!v4) {
        return 0LL;
      }
    }

    while (1)
    {
      uint64_t v7 = result[15];
      uint64_t v6 = result[16];
      if (v7)
      {
        if (v6) {
          goto LABEL_11;
        }
        for (uint64_t i = *(void *)(v7 + 32); i; uint64_t i = *(void *)(i + 72))
        {
          if (*(_DWORD *)i != a3) {
            break;
          }
          if (*(_DWORD *)(i + 24) == a4) {
            return result;
          }
        }
      }

      else if (v6)
      {
LABEL_11:
        uint64_t v9 = *(void *)(v6 + 32);
        if (v9)
        {
          while (*(_DWORD *)v9 == a3)
          {
            if (*(_DWORD *)(v9 + 24) == a4 || *(_DWORD *)(v9 + 28) == a4) {
              return result;
            }
            uint64_t v9 = *(void *)(v9 + 72);
            if (!v9) {
              break;
            }
          }
        }
      }

      uint64_t result = (void *)result[37];
      if (!result) {
        goto LABEL_17;
      }
    }
  }

  return 0LL;
}

void *sub_100009674(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v5 = qword_10008C6D0;
  if (qword_10008C6D0)
  {
    while (1)
    {
      uint64_t result = *(void **)(v5 + 1704);
      if (result) {
        break;
      }
LABEL_18:
      uint64_t v5 = *(void *)(v5 + 1712);
      if (!v5) {
        return 0LL;
      }
    }

    while (1)
    {
      uint64_t v8 = result[15];
      uint64_t v7 = result[16];
      if (v8)
      {
        if (v7) {
          goto LABEL_12;
        }
        uint64_t v9 = *(void *)(v8 + 32);
        if (v9)
        {
          while (*(_DWORD *)v9 == a3)
          {
            int v10 = *(_DWORD *)(v9 + 24);
            if (v10 == a4) {
              goto LABEL_20;
            }
            if (*(_DWORD *)(v9 + 28) == a4) {
              goto LABEL_22;
            }
            uint64_t v9 = *(void *)(v9 + 72);
            if (!v9) {
              break;
            }
          }
        }
      }

      else if (v7)
      {
LABEL_12:
        uint64_t v9 = *(void *)(v7 + 32);
        if (v9)
        {
          while (1)
          {
            if (*(_DWORD *)v9 != a3) {
              goto LABEL_17;
            }
            int v10 = *(_DWORD *)(v9 + 24);
            if (v10 == a4) {
              break;
            }
            if (*(_DWORD *)(v9 + 28) == a4)
            {
LABEL_22:
              if (!a5) {
                return result;
              }
              goto LABEL_23;
            }

            uint64_t v9 = *(void *)(v9 + 72);
            if (!v9) {
              goto LABEL_17;
            }
          }

LABEL_20:
          if (!a5) {
            return result;
          }
          int v10 = *(_DWORD *)(v9 + 28);
LABEL_23:
          *a5 = v10;
          return result;
        }
      }

    sub_10004CCE8(*(void *)(v4 + 272), (uint64_t)off_100088500[0]);
    sub_100027414((uint64_t *)v4);
    a1 = sub_10004AAC4((void *)v4);
  }

LABEL_17:
      uint64_t result = (void *)result[37];
      if (!result) {
        goto LABEL_18;
      }
    }
  }

  return 0LL;
}

      CCCryptorStatus v14 = sub_10001BA48(a2, 1u, 0LL);
      if (dword_10008BA20)
      {
        CCCryptorStatus v15 = (os_log_s *)ne_log_obj(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_10005A8C8(v5);
        }
      }

      return;
    }

  if (dword_10008BA20)
  {
    int v10 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = sub_10003DDFC(bswap32(*v5) >> 16);
      __int16 v24 = 136315138;
      *(void *)CCAlgorithm v25 = v11;
      unsigned __int16 v12 = "Ignore %s notification.\n";
      uint64_t v13 = v10;
      CCCryptorStatus v14 = 12;
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v24, v14);
    }
  }

    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(v7);
      uint64_t v7 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v7)
      {
        int v18 = *a1;
        *(_DWORD *)buf = 136315394;
        __int128 v41 = "getsp_r";
        __int128 v42 = 1024;
        __int128 v43 = v18;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s, policy outer addresses matched Phase 2 addresses: dir %d\n",  buf,  0x12u);
      }

      if (dword_10008BA20)
      {
        CCCryptorStatus v14 = (os_log_s *)ne_log_obj(v7);
        uint64_t v7 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v7) {
          sub_100062104((uint64_t)v39, (const sockaddr **)a2);
        }
        if (dword_10008BA20)
        {
          CCCryptorStatus v15 = (os_log_s *)ne_log_obj(v7);
          uint64_t v7 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)v7) {
            sub_1000620B8((uint64_t)v38, (const sockaddr *)(v8 + 8));
          }
          if (dword_10008BA20)
          {
            int v16 = (os_log_s *)ne_log_obj(v7);
            uint64_t v7 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
            if ((_DWORD)v7) {
              sub_10006207C((uint64_t)v37, (const sockaddr **)v6);
            }
            if (dword_10008BA20)
            {
              uint64_t v17 = (os_log_s *)ne_log_obj(v7);
              uint64_t v7 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
              if ((_DWORD)v7) {
                sub_100062030((uint64_t)v36, v8);
              }
            }
          }
        }
      }
    }

    uint64_t v5 = 1;
LABEL_33:
    uint64_t v8 = *(void *)v8;
    if (!v8) {
      goto LABEL_34;
    }
  }

  uint64_t v7 = sub_10003B6D4(*a2, v8 + 8);
  if ((_DWORD)v7) {
    goto LABEL_17;
  }
  uint64_t v7 = sub_10003B6D4(*v6, v8 + 136);
  if ((_DWORD)v7) {
    goto LABEL_17;
  }
  if (dword_10008BA20)
  {
    __int16 v28 = (os_log_s *)ne_log_obj(v7);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
      sub_1000621B0(v28, v29, v30, v31, v32, v33, v34, v35);
    }
  }

  return v2;
}

            uint64_t v9 = *(void *)(a1 + 40);
            if (!v9) {
              goto LABEL_23;
            }
            int v10 = *(void *)(a1 + 48);
            if (!v10) {
              goto LABEL_23;
            }
            if (*(unsigned __int8 *)(v9 + 4) == *(unsigned __int8 *)(v10 + 4))
            {
              uint64_t v11 = *(unsigned __int8 *)(v9 + 9);
              if (v11 == *(unsigned __int8 *)(v10 + 9))
              {
                if (v11 == 30 || v11 == 2)
                {
LABEL_23:
                  uint64_t v5 = 0;
                  uint64_t result = 0LL;
                }

                else
                {
                  uint64_t v5 = 15;
                }
              }

              else
              {
                uint64_t v5 = 24;
              }
            }

            else
            {
              uint64_t v5 = 23;
            }

            break;
          case 5:
          case 6:
          case 7:
          case 8:
            break;
          default:
LABEL_24:
            uint64_t result = 0xFFFFFFFFLL;
LABEL_25:
            uint64_t v5 = 10;
            break;
        }
      }

      else
      {
        uint64_t result = 0xFFFFFFFFLL;
        uint64_t v5 = 11;
      }
    }

    else
    {
      uint64_t result = 0xFFFFFFFFLL;
      uint64_t v5 = 4;
    }
  }

  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v5 = 2;
  }

  __ipsec_errcode = v5;
  return result;
}

_BYTE *sub_100009738(char a1, int a2)
{
  uint64_t v4 = calloc(1uLL, 0x148uLL);
  uint64_t v5 = v4;
  if (v4)
  {
    v4[61] = a1;
    *((_DWORD *)v4 + 12) = a2;
    v4[264] &= ~2u;
    if (dword_10008BA20)
    {
      uint64_t v6 = (os_log_s *)ne_log_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v8[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "New Phase 2\n", (uint8_t *)v8, 2u);
      }
    }
  }

  return v5;
}

void sub_1000097E0(uint64_t a1)
{
  *(void *)(a1 + 64) = 0LL;
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    sub_10003F5BC(v2);
    *(void *)(a1 + 80) = 0LL;
  }

  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    sub_10003F5BC(v3);
    *(void *)(a1 + 88) = 0LL;
  }

  uint64_t v4 = *(void *)(a1 + 120);
  if (v4)
  {
    for (uint64_t i = *(void *)(v4 + 32); i; uint64_t i = *(void *)(i + 72))
      *(_DWORD *)(i + 24) = 0;
  }

  uint64_t v6 = *(uint64_t **)(a1 + 128);
  if (v6)
  {
    sub_100036658(v6);
    *(void *)(a1 + 128) = 0LL;
  }

  uint64_t v7 = *(void **)(a1 + 136);
  if (v7)
  {
    sub_100035488(v7);
    free(*(void **)(a1 + 136));
    *(void *)(a1 + 136) = 0LL;
  }

  uint64_t v8 = *(void **)(a1 + 152);
  if (v8)
  {
    sub_100029C48(v8);
    *(void *)(a1 + 152) = 0LL;
  }

  uint64_t v9 = *(void **)(a1 + 160);
  if (v9)
  {
    sub_10003F5BC(v9);
    *(void *)(a1 + 160) = 0LL;
  }

  int v10 = *(void **)(a1 + 168);
  if (v10)
  {
    sub_10003F5BC(v10);
    *(void *)(a1 + 168) = 0LL;
  }

  uint64_t v11 = *(void **)(a1 + 176);
  if (v11)
  {
    sub_10003F5BC(v11);
    *(void *)(a1 + 176) = 0LL;
  }

  unsigned __int16 v12 = *(void **)(a1 + 184);
  if (v12)
  {
    sub_10003F5BC(v12);
    *(void *)(a1 + 184) = 0LL;
  }

  uint64_t v13 = *(void **)(a1 + 192);
  if (v13)
  {
    sub_10003F5BC(v13);
    *(void *)(a1 + 192) = 0LL;
  }

  CCCryptorStatus v14 = *(void **)(a1 + 200);
  if (v14)
  {
    sub_10003F5BC(v14);
    *(void *)(a1 + 200) = 0LL;
  }

  CCCryptorStatus v15 = *(void **)(a1 + 208);
  if (v15)
  {
    sub_10003F5BC(v15);
    *(void *)(a1 + 208) = 0LL;
  }

  int v16 = *(void **)(a1 + 216);
  if (v16)
  {
    sub_10003F5BC(v16);
    *(void *)(a1 + 216) = 0LL;
  }

  uint64_t v17 = *(void **)(a1 + 224);
  if (v17)
  {
    sub_10003F5BC(v17);
    *(void *)(a1 + 224) = 0LL;
  }

  int v18 = *(void **)(a1 + 232);
  if (v18)
  {
    sub_10003F5BC(v18);
    *(void *)(a1 + 232) = 0LL;
  }

  CFRange v19 = *(void **)(a1 + 240);
  if (v19)
  {
    sub_10002E08C(v19);
    *(void *)(a1 + 240) = 0LL;
  }

void sub_100009928(uint64_t a1)
{
  if (*(void *)a1)
  {
    free(*(void **)a1);
    *(void *)a1 = 0LL;
  }

  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 8) = 0LL;
  }

  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 32) = 0LL;
  }

  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 40) = 0LL;
  }

  uint64_t v5 = *(uint64_t **)(a1 + 120);
  if (v5)
  {
    sub_100036658(v5);
    *(void *)(a1 + 120) = 0LL;
  }

  uint64_t v6 = *(void **)(a1 + 112);
  if (v6)
  {
    sub_10003A64C(v6);
    *(void *)(a1 + 112) = 0LL;
  }

  uint64_t v7 = *(void **)(a1 + 192);
  if (v7)
  {
    sub_10003F5BC(v7);
    *(void *)(a1 + 192) = 0LL;
  }

  uint64_t v8 = *(void **)(a1 + 200);
  if (v8)
  {
    sub_10003F5BC(v8);
    *(void *)(a1 + 200) = 0LL;
  }

  uint64_t v9 = *(void **)(a1 + 280);
  if (v9)
  {
    sub_10003F5BC(v9);
    *(void *)(a1 + 280) = 0LL;
  }

  int v10 = *(void **)(a1 + 288);
  if (v10)
  {
    sub_10003F5BC(v10);
    *(void *)(a1 + 288) = 0LL;
  }

  uint64_t v11 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v11)
  {
    sub_10003AA44(v11);
    *(_DWORD *)(a1 + 64) = 0;
  }

  uint64_t v12 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v12) {
    sub_10003AA44(v12);
  }
  free((void *)a1);
}

void sub_100009A08(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1704);
  while (v2)
  {
    uint64_t v4 = v2;
    uint64_t v2 = *(void *)(v2 + 296);
    if ((*(_BYTE *)(v4 + 264) & 2) != 0) {
      continue;
    }
    int v5 = *(_DWORD *)(v4 + 56);
    if ((v5 & 0x4000) != 0) {
      continue;
    }
    if (a2)
    {
      uint64_t v6 = *(void *)(v4 + 272);
      if (v6 && (*(_WORD *)(v6 + 264) & 0x20) == 0 && (*(_BYTE *)(v6 + 280) & 4) != 0)
      {
        if (!dword_10008BA20) {
          continue;
        }
        CCCryptorStatus v14 = (os_log_s *)ne_log_obj(a1);
        a1 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)a1) {
          continue;
        }
        *(_WORD *)buf = 0;
        uint64_t v9 = v14;
        int v10 = "skipping phase2 handle that's asserted...\n";
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
        continue;
      }

      int v7 = dword_10008BA20;
      if ((v5 & 0x2000) != 0)
      {
        if (!dword_10008BA20) {
          continue;
        }
        uint64_t v8 = (os_log_s *)ne_log_obj(a1);
        a1 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)a1) {
          continue;
        }
        *(_WORD *)buf = 0;
        uint64_t v9 = v8;
        int v10 = "skipping ph2 handler that's established...\n";
        goto LABEL_26;
      }
    }

    else
    {
      int v7 = dword_10008BA20;
      if ((v5 & 0x2000) != 0)
      {
        if (dword_10008BA20)
        {
          uint64_t v13 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "got an established ph2 handler to flush...\n",  buf,  2u);
          }
        }

        sub_10001B34C(v4);
        goto LABEL_20;
      }
    }

    if (v7)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(v4 + 56);
        *(_DWORD *)buf = 67109120;
        int v16 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "got a ph2 handler to flush (state %d)\n",  buf,  8u);
      }
    }

uint64_t sub_100009C24(uint64_t a1)
{
  int v1 = a1;
  if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109120;
      v5[1] = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "flushing ph2 handles: ignore_estab_or_assert %d...\n",  (uint8_t *)v5,  8u);
    }
  }

  uint64_t result = qword_10008C6D0;
  if (qword_10008C6D0)
  {
    do
    {
      uint64_t v4 = *(void *)(result + 1712);
      sub_100009A08(result, v1);
      uint64_t result = v4;
    }

    while (v4);
  }

  return result;
}

uint64_t sub_100009CF0(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v3 = qword_10008C6D0;
  if (qword_10008C6D0)
  {
    unint64_t v6 = result;
    do
    {
      uint64_t v7 = *(void *)(v3 + 1704);
      uint64_t v3 = *(void *)(v3 + 1712);
LABEL_4:
      while (v7)
      {
        uint64_t v8 = v7;
        uint64_t v7 = *(void *)(v7 + 296);
        if ((*(_BYTE *)(v8 + 264) & 2) == 0
          && (*(_BYTE *)(v8 + 57) & 0x40) == 0
          && (*(void *)(v8 + 120) || *(void *)(v8 + 128)))
        {
          uint64_t result = sub_10003B6D4(v6, *(void *)v8);
          if (!(_DWORD)result)
          {
            uint64_t result = sub_10003B6D4(a2, *(void *)(v8 + 8));
            if (!(_DWORD)result)
            {
              uint64_t v9 = *(void *)(v8 + 128);
              if (v9)
              {
                uint64_t v10 = *(void *)(v9 + 32);
                if (v10)
                {
                  while (*(_DWORD *)v10 != a3)
                  {
                    uint64_t v10 = *(void *)(v10 + 72);
                    if (!v10) {
                      goto LABEL_4;
                    }
                  }

                  goto LABEL_21;
                }
              }

              else
              {
                uint64_t v11 = *(void *)(v8 + 120);
                if (v11)
                {
                  uint64_t v12 = *(void *)(v11 + 32);
                  if (v12)
                  {
                    while (*(_DWORD *)v12 != a3)
                    {
                      uint64_t v12 = *(void *)(v12 + 72);
                      if (!v12) {
                        goto LABEL_4;
                      }
                    }

LABEL_21:
                    if (dword_10008BA20)
                    {
                      uint64_t v13 = (os_log_s *)ne_log_obj(result);
                      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)CCCryptorStatus v14 = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "deleteallph2: got a ph2 handler...\n",  v14,  2u);
                      }
                    }

                    if ((*(_BYTE *)(v8 + 57) & 0x20) != 0) {
                      sub_10001B34C(v8);
                    }
                    sub_10004CCE8(*(void *)(v8 + 272), (uint64_t)off_100088500[0]);
                    uint64_t result = sub_10004AAC4((void *)v8);
                  }
                }
              }
            }
          }
        }
      }
    }

    while (v3);
  }

  return result;
}

    uint64_t v9 = *(void *)(a1 + 192);
    if (!v9)
    {
      if (dword_10008BA20)
      {
        uint64_t v20 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_10005E170();
        }
      }

      return 0LL;
    }

    uint64_t v10 = 0LL;
    goto LABEL_23;
  }

uint64_t sub_100009E74(uint64_t result, unint64_t a2)
{
  uint64_t v2 = qword_10008C6D0;
  if (qword_10008C6D0)
  {
    unint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)(v2 + 1696);
      uint64_t v2 = *(void *)(v2 + 1712);
      while (v5)
      {
        uint64_t v6 = v5;
        uint64_t v5 = *(void *)(v5 + 456);
        uint64_t result = sub_10003B6D4(v4, *(void *)(v6 + 56));
        if (!(_DWORD)result)
        {
          uint64_t result = sub_10003B6D4(a2, *(void *)(v6 + 48));
          if (!(_DWORD)result)
          {
            if (dword_10008BA20)
            {
              uint64_t v7 = (os_log_s *)ne_log_obj(result);
              if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t v8 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "deleteallph1: got a ph1 handler...\n",  v8,  2u);
              }
            }

            if ((*(_BYTE *)(v6 + 17) & 0x20) != 0) {
              sub_10001ADEC(v6);
            }
            sub_10004CCE8(*(void *)(v6 + 440), (uint64_t)off_100088500[0]);
            uint64_t result = sub_10004ABA4(v6);
          }
        }
      }
    }

    while (v2);
  }

  return result;
}

unint64_t *sub_100009F88(unint64_t a1)
{
  int v1 = (unint64_t *)qword_100088538;
  if (qword_100088538)
  {
    do
    {
      int v1 = (unint64_t *)v1[1];
    }

    while (v1);
  }

  return v1;
}

uint64_t sub_100009FCC(unsigned __int8 *a1)
{
  uint64_t v2 = calloc(1uLL, 0x18uLL);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = v2;
  unint64_t v4 = sub_10003CA00(a1);
  *uint64_t v3 = v4;
  if (!v4)
  {
    if (dword_10008BA20)
    {
      uint64_t v7 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000560EC();
      }
    }

    free(v3);
    return 0xFFFFFFFFLL;
  }

  uint64_t v5 = qword_100088538;
  v3[1] = qword_100088538;
  if (v5) {
    *(void *)(v5 + 16) = v3 + 1;
  }
  uint64_t result = 0LL;
  qword_100088538 = (uint64_t)v3;
  v3[2] = &qword_100088538;
  return result;
}

void sub_10000A078()
{
  uint64_t v0 = qword_100088538;
  if (qword_100088538)
  {
    uint64_t v1 = *(void *)(qword_100088538 + 8);
    uint64_t v2 = *(void **)(qword_100088538 + 16);
    if (v1)
    {
      do
      {
        uint64_t v3 = v1;
        *(void *)(v1 + 16) = v2;
        **(void **)(v0 + 16) = v1;
        free(*(void **)v0);
        free((void *)v0);
        uint64_t v1 = *(void *)(v3 + 8);
        uint64_t v2 = *(void **)(v3 + 16);
        uint64_t v0 = v3;
      }

      while (v1);
    }

    else
    {
      uint64_t v3 = qword_100088538;
    }

    *uint64_t v2 = 0LL;
    free(*(void **)v3);
    free((void *)v3);
  }

void sub_10000A0F4()
{
  qword_100088538 = 0LL;
}

uint64_t sub_10000A100(int a1, int a2)
{
  if (a1 < 4) {
    int v2 = 1;
  }
  else {
    int v2 = a1;
  }
  return v2 * a2;
}

uint64_t sub_10000A114(const sockaddr *a1, uint64_t a2, uint64_t a3)
{
  time_t v5 = time(0LL);
  uint64_t v6 = sub_100007664(a3);
  if (!v6)
  {
    if (dword_10008BA20)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1000560EC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v7 = v6;
  uint64_t v8 = qword_100088540;
  if (!qword_100088540)
  {
LABEL_6:
    sub_10003F5BC(v7);
    return 0LL;
  }

  uint64_t v9 = (const void *)v6[1];
  while (memcmp(v9, *(const void **)(*(void *)(v8 + 16) + 8LL), **(void **)(v8 + 16)))
  {
    uint64_t v8 = *(void *)(v8 + 72);
    if (!v8) {
      goto LABEL_6;
    }
  }

  sub_10003F5BC(v7);
  uint64_t v12 = sub_10003B6D4((unint64_t)a1, *(void *)v8);
  if ((_DWORD)v12) {
    return 2LL;
  }
  if (v5 <= *(void *)(v8 + 40))
  {
    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = 136315138;
        uint64_t v31 = sub_10003C888(a1);
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "the packet retransmitted in a short time from %s\n",  (uint8_t *)&v30,  0xCu);
      }
    }
  }

  uint64_t result = sub_100008438(*(unsigned __int8 **)(v8 + 8));
  if ((_DWORD)result != -1)
  {
    uint64_t v14 = result;
    uint64_t v15 = *(void *)(v8 + 40);
    if (v15)
    {
      uint64_t v16 = v5 - v15;
      if (v5 > v15 && v16 < *(void *)(v8 + 56))
      {
        if (dword_10008BA20)
        {
          uint64_t v17 = (os_log_s *)ne_log_obj(result);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            sub_100056118(v16, v17);
          }
        }

        return 1LL;
      }
    }

    if (*(_DWORD *)(v8 + 64) && **(void **)(v8 + 24) >= 0x501uLL)
    {
      if (dword_10008BA20)
      {
        int v18 = (os_log_s *)ne_log_obj(result);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_100056250();
        }
      }

      uint64_t v19 = sub_10001608C( v14,  *(unint64_t **)(v8 + 24),  *(unsigned __int8 **)(v8 + 8),  *(unsigned __int8 **)v8,  *(unsigned int *)(qword_10008B848 + 276),  *(_DWORD *)(v8 + 64));
    }

    else
    {
      if (dword_10008BA20)
      {
        uint64_t v20 = (os_log_s *)ne_log_obj(result);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_1000561B4((int *)(v8 + 64), v8, v20);
        }
      }

      uint64_t v19 = sub_10003C110( v14,  *(const void **)(*(void *)(v8 + 24) + 8LL),  **(void **)(v8 + 24),  *(unsigned __int8 **)(v8 + 8),  *(unsigned __int8 **)v8,  *(_DWORD *)(qword_10008B848 + 276));
    }

    if ((_DWORD)v19 != -1)
    {
      int v21 = *(_DWORD *)(v8 + 32);
      BOOL v22 = __OFSUB__(v21, 1);
      int v23 = v21 - 1;
      *(_DWORD *)(v8 + 32) = v23;
      if ((v23 < 0) ^ v22 | (v23 == 0))
      {
        uint64_t v24 = *(void *)(v8 + 72);
        if (v24) {
          *(void *)(v24 + 80) = *(void *)(v8 + 80);
        }
        **(void **)(v8 + 80) = v24;
        sub_10000A4A4((void **)v8);
        if (dword_10008BA20)
        {
          __int16 v26 = (os_log_s *)ne_log_obj(v25);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = sub_10003C888(a1);
            int v30 = 136315138;
            uint64_t v31 = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "deleted the retransmission packet to %s.\n",  (uint8_t *)&v30,  0xCu);
          }
        }
      }

      else
      {
        *(void *)(v8 + 40) = v5;
        int v29 = *(_DWORD *)(qword_10008B848 + 268) - v23;
        if (v29 < 4) {
          int v29 = 1;
        }
        *(void *)(v8 + 56) = *(int *)(qword_10008B848 + 272) * (uint64_t)v29;
      }

      return 1LL;
    }

    if (dword_10008BA20)
    {
      __int16 v28 = (os_log_s *)ne_log_obj(v19);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_100056188();
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

void sub_10000A4A4(void **a1)
{
  int v2 = *a1;
  if (v2) {
    free(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    free(v3);
  }
  unint64_t v4 = a1[2];
  if (v4) {
    sub_10003F5BC(v4);
  }
  time_t v5 = a1[3];
  if (v5) {
    sub_10003F5BC(v5);
  }
  free(a1);
}

uint64_t sub_10000A4F4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (!*(_DWORD *)(qword_10008B848 + 268)) {
    return 0LL;
  }
  uint64_t v12 = calloc(1uLL, 0x58uLL);
  if (!v12)
  {
    if (dword_10008BA20)
    {
      int v21 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_1000560EC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v13 = (uint64_t)v12;
  uint64_t v14 = sub_100007664(a4);
  *(void *)(v13 + 16) = v14;
  if (!v14)
  {
    if (!dword_10008BA20) {
      goto LABEL_39;
    }
    BOOL v22 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }

  uint64_t v15 = sub_10003CA00(a1);
  *(void *)uint64_t v13 = v15;
  if (!v15)
  {
    if (!dword_10008BA20) {
      goto LABEL_39;
    }
    int v23 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }

  uint64_t v16 = sub_10003CA00(a2);
  *(void *)(v13 + 8) = v16;
  if (!v16)
  {
    if (!dword_10008BA20) {
      goto LABEL_39;
    }
    uint64_t v24 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }

  if (!a5)
  {
    uint64_t v25 = sub_10003F5F0(a3);
    *(void *)(v13 + 24) = v25;
    if (v25) {
      goto LABEL_26;
    }
    if (!dword_10008BA20) {
      goto LABEL_39;
    }
    __int16 v32 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      goto LABEL_39;
    }
LABEL_38:
    sub_1000560EC();
LABEL_39:
    sub_10000A4A4((void **)v13);
    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v17 = (os_log_s *)ne_log_obj(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      sub_1000562A8();
    }
  }

  int v18 = sub_10003F4BC(*(void *)a3 + a5);
  *(void *)(v13 + 24) = v18;
  if (!v18)
  {
    if (dword_10008BA20)
    {
      uint64_t v31 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        sub_10005627C();
      }
    }

    goto LABEL_39;
  }

  uint64_t v19 = (_DWORD *)v18[1];
  _DWORD *v19 = 0;
  memcpy((char *)v19 + a5, *(const void **)(a3 + 8), *(void *)a3);
LABEL_26:
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(qword_10008B848 + 268);
  *(void *)(v13 + 40) = 0LL;
  *(void *)(v13 + 48) = time(0LL);
  if (a6) {
    *(_DWORD *)(v13 + 64) = a6;
  }
  uint64_t v26 = qword_10008B848;
  int v27 = *(_DWORD *)(qword_10008B848 + 268);
  uint64_t v28 = qword_100088540;
  *(void *)(v13 + 72) = qword_100088540;
  int v29 = v27 - *(_DWORD *)(v13 + 32);
  int v30 = *(_DWORD *)(v26 + 272);
  if (v29 < 4) {
    int v29 = 1;
  }
  *(void *)(v13 + 56) = v30 * (uint64_t)v29;
  if (v28) {
    *(void *)(v28 + 80) = v13 + 72;
  }
  uint64_t result = 0LL;
  qword_100088540 = v13;
  *(void *)(v13 + 80) = &qword_100088540;
  return result;
}

uint64_t sub_10000A7A8()
{
  uint64_t v0 = qword_100088540;
  if (qword_100088540)
  {
    uint64_t v1 = *(void *)(qword_100088540 + 72);
    if (v1)
    {
      do
      {
        uint64_t v2 = v1;
        *(void *)(v1 + 80) = *(void *)(v0 + 80);
        **(void **)(v0 + 80) = v1;
        sub_10000A4A4((void **)v0);
        uint64_t v1 = *(void *)(v2 + 72);
        uint64_t v0 = v2;
      }

      while (v1);
    }

    else
    {
      uint64_t v2 = qword_100088540;
    }

    **(void **)(v2 + 80) = 0LL;
    sub_10000A4A4((void **)v2);
  }

  return sub_10003AA98((uint64_t)&qword_100088540);
}

void *sub_10000A818()
{
  uint64_t v0 = *(int *)(qword_10008B848 + 272) * (uint64_t)*(int *)(qword_10008B848 + 268);
  qword_100088540 = 0LL;
  return sub_10003A890(v0, (uint64_t)sub_10000A848, (uint64_t)&qword_100088540);
}

void *sub_10000A848()
{
  time_t v0 = time(0LL);
  uint64_t v1 = *(int *)(qword_10008B848 + 272) * (uint64_t)*(int *)(qword_10008B848 + 268);
  uint64_t v2 = qword_100088540;
  if (qword_100088540)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 72);
      if (v0 - *(void *)(v2 + 48) > v1)
      {
        if (v3) {
          *(void *)(v3 + 80) = *(void *)(v2 + 80);
        }
        **(void **)(v2 + 80) = v3;
        sub_10000A4A4((void **)v2);
      }

      uint64_t v2 = v3;
    }

    while (v3);
  }

  return sub_10003A890(v1, (uint64_t)sub_10000A848, (uint64_t)&qword_100088540);
}

uint64_t sub_10000A8E0(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 1704);
  if (v2)
  {
    uint64_t v3 = 0LL;
    do
    {
      if ((*(_BYTE *)(v2 + 264) & 2) == 0 && (*(_BYTE *)(v2 + 57) & 0x40) == 0)
      {
        sub_1000258C8((void *)v2);
        uint64_t v3 = (v3 + 1);
      }

      uint64_t v2 = *(void *)(v2 + 296);
    }

    while (v2);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  uint64_t v4 = *(void *)(a1 + 1696);
  while (v4)
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 456);
    if ((*(_BYTE *)(v5 + 432) & 2) == 0 && (*(_BYTE *)(v5 + 17) & 0x40) == 0)
    {
      sub_10004CF80(v5);
      if ((*(_BYTE *)(v5 + 17) & 0x20) != 0) {
        sub_10001ADEC(v5);
      }
      sub_100023380(v5);
      uint64_t v3 = (v3 + 1);
    }
  }

  return v3;
}

uint64_t sub_10000A994(unint64_t a1)
{
  uint64_t v1 = qword_10008C6D0;
  if (!qword_10008C6D0) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  do
  {
    uint64_t v4 = v1;
    uint64_t v1 = *(void *)(v1 + 1712);
    for (uint64_t i = *(void *)(v4 + 1704); i; uint64_t i = *(void *)(i + 296))
    {
      if ((*(_BYTE *)(i + 264) & 2) == 0 && (*(_BYTE *)(i + 57) & 0x40) == 0)
      {
        uint64_t v6 = sub_10003B6D4(a1, *(void *)(i + 8));
        if (!(_DWORD)v6)
        {
          if (dword_10008BA20)
          {
            uint64_t v7 = (os_log_s *)ne_log_obj(v6);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              uint64_t v13 = "ike_session_purgephXbydstaddrwop";
              _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "in %s... purging Phase 2 structures\n",  buf,  0xCu);
            }
          }

          if ((*(_BYTE *)(i + 57) & 0x20) != 0) {
            sub_10001B34C(i);
          }
          sub_1000258C8((void *)i);
          uint64_t v3 = (v3 + 1);
        }
      }
    }

    for (uint64_t j = *(void *)(v4 + 1696); j; uint64_t j = *(void *)(j + 456))
    {
      if ((*(_BYTE *)(j + 432) & 2) == 0 && (*(_BYTE *)(j + 17) & 0x40) == 0)
      {
        uint64_t v9 = sub_10003B6D4(a1, *(void *)(j + 48));
        if (!(_DWORD)v9)
        {
          if (dword_10008BA20)
          {
            uint64_t v10 = (os_log_s *)ne_log_obj(v9);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              uint64_t v13 = "ike_session_purgephXbydstaddrwop";
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "in %s... purging Phase 1 and related Phase 2 structures\n",  buf,  0xCu);
            }
          }

          sub_10004CF80(j);
          if ((*(_BYTE *)(j + 17) & 0x20) != 0) {
            sub_10001ADEC(j);
          }
          sub_100023380(j);
          uint64_t v3 = (v3 + 1);
        }
      }
    }
  }

  while (v1);
  return v3;
}

void *sub_10000AB88(void *result, int a2)
{
  uint64_t v2 = qword_10008C6D0;
  if (qword_10008C6D0)
  {
    int v4 = (int)result;
    do
    {
      uint64_t v5 = v2;
      uint64_t v2 = *(void *)(v2 + 1712);
      uint64_t v6 = *(void *)(v5 + 1704);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(void *)(v6 + 296);
          if (*(_DWORD *)(v7 + 52) == v4 && (*(_BYTE *)(v7 + 264) & 2) == 0)
          {
            int v8 = *(_DWORD *)(v7 + 56);
            if ((v8 & 0x4000) == 0)
            {
              if ((v8 & 0x2000) != 0) {
                sub_10001B34C(v7);
              }
              sub_10004CCE8(*(void *)(v7 + 272), (uint64_t)off_100088500[0]);
              uint64_t result = sub_1000258C8((void *)v7);
            }
          }
        }

        while (v6);
        uint64_t v9 = *(void *)(v5 + 1704);
        while (v9)
        {
          uint64_t v10 = v9;
          uint64_t v9 = *(void *)(v9 + 296);
          if (a2)
          {
            if (*(_DWORD *)(v10 + 52) == v4)
            {
              uint64_t v11 = *(void *)(v10 + 272);
              if (v11)
              {
                uint64_t v12 = *(void *)(v11 + 1696);
                while (v12)
                {
                  uint64_t v13 = v12;
                  uint64_t v12 = *(void *)(v12 + 456);
                  if ((*(_BYTE *)(v13 + 432) & 2) == 0)
                  {
                    int v14 = *(_DWORD *)(v13 + 16);
                    if ((v14 & 0x4000) == 0)
                    {
                      if ((v14 & 0x2000) != 0) {
                        sub_10001ADEC(v13);
                      }
                      uint64_t result = sub_100023380(v13);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    while (v2);
  }

  return result;
}

uint64_t sub_10000AC98(unint64_t a1)
{
  uint64_t v1 = qword_10008C6D0;
  if (!qword_10008C6D0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  do
  {
    for (uint64_t i = *(void *)(v1 + 1696); i; uint64_t i = *(void *)(i + 456))
    {
      uint64_t v5 = sub_10003B6D4(a1, *(void *)(i + 48));
      if (!(_DWORD)v5)
      {
        if ((*(_BYTE *)(i + 17) & 0x20) != 0
          && (*(_BYTE *)(i + 432) & 2) == 0
          && *(_DWORD *)(i + 368)
          && *(_DWORD *)(*(void *)(i + 64) + 216LL))
        {
          if (*(_BYTE *)(i + 386))
          {
            if (dword_10008BA20)
            {
              uint64_t v6 = (os_log_s *)ne_log_obj(v5);
              if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v14[0]) = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Skipping forced-DPD for Phase 1 (dpd already in progress).\n",  (uint8_t *)v14,  2u);
              }
            }
          }

          else
          {
            sub_10001C988(i);
            uint64_t v3 = 0LL;
          }

          uint64_t v12 = *(void *)(i + 440);
          if (v12) {
            *(_BYTE *)(v12 + 280) |= 1u;
          }
        }

        else if (dword_10008BA20)
        {
          uint64_t v7 = (os_log_s *)ne_log_obj(v5);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            int v8 = *(_DWORD *)(i + 16);
            int v9 = *(unsigned __int8 *)(i + 432) << 30 >> 31;
            int v10 = *(_DWORD *)(i + 368);
            int v11 = *(_DWORD *)(*(void *)(i + 64) + 216LL);
            v14[0] = 67109888;
            v14[1] = v8;
            __int16 v15 = 1024;
            int v16 = v9;
            __int16 v17 = 1024;
            int v18 = v10;
            __int16 v19 = 1024;
            int v20 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Skipping forced-DPD for Phase 1 (status %d, dying %d, dpd-support %d, dpd-interval %d).\n",  (uint8_t *)v14,  0x1Au);
          }
        }
      }
    }

    uint64_t v1 = *(void *)(v1 + 1712);
  }

  while (v1);
  return v3;
}

void sub_10000AE84(uint64_t a1)
{
  uint64_t v1 = qword_10008C6D0;
  while (v1)
  {
    uint64_t v2 = v1;
    uint64_t v1 = *(void *)(v1 + 1712);
    uint64_t v3 = *(void *)(v2 + 1696);
    if (v3)
    {
      while (1)
      {
        uint64_t v4 = v3;
        uint64_t v3 = *(void *)(v3 + 456);
        uint64_t v5 = *(void *)(v4 + 440);
        if (v5)
        {
          if ((*(_BYTE *)(v5 + 280) & 4) != 0) {
            break;
          }
        }

        if ((*(_BYTE *)(v4 + 432) & 2) == 0 && (*(_BYTE *)(v4 + 17) & 0x40) == 0)
        {
          int v6 = *(_DWORD *)(v4 + 112);
          if (v6 && sub_10003A9F4(v6, v32) && *(uint64_t *)v32 <= qword_10008C6F0)
          {
            uint64_t v7 = *(unsigned int *)(v4 + 112);
            if ((_DWORD)v7)
            {
              sub_10003AA44(v7);
              *(_DWORD *)(v4 + 112) = 0;
            }

            uint64_t v8 = *(unsigned int *)(v4 + 116);
            if ((_DWORD)v8)
            {
              sub_10003AA44(v8);
              *(_DWORD *)(v4 + 116) = 0;
            }

            *(_BYTE *)(v4 + 432) |= 2u;
            sub_100004344((int *)(v4 + 16), 17408);
            sub_10004B724(v4);
            int v9 = sub_10003A890(1LL, (uint64_t)sub_100025304, v4);
            *(_DWORD *)(v4 + 112) = (_DWORD)v9;
            if (dword_10008BA20)
            {
              int v10 = (os_log_s *)ne_log_obj(v9);
              if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              {
                int v11 = sub_100024670(v4, 0);
                *(_DWORD *)buf = 136315138;
                *(void *)&uint8_t buf[4] = v11;
                _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Phase 1 %s expired while sleeping: quick deletion.\n",  buf,  0xCu);
              }
            }
          }

          int v12 = *(_DWORD *)(v4 + 116);
          if (v12
            && sub_10003A9F4(v12, buf)
            && ((*(_BYTE *)(v4 + 17) & 0x40) != 0 || *(uint64_t *)buf <= qword_10008C6F0))
          {
            uint64_t v13 = *(unsigned int *)(v4 + 116);
            if ((_DWORD)v13)
            {
              sub_10003AA44(v13);
              *(_DWORD *)(v4 + 116) = 0;
            }
          }

          int v14 = *(_DWORD *)(v4 + 120);
          if (v14
            && sub_10003A9F4(v14, buf)
            && ((*(_BYTE *)(v4 + 17) & 0x40) != 0 || *(uint64_t *)buf <= qword_10008C6F0))
          {
            uint64_t v15 = *(unsigned int *)(v4 + 120);
            if ((_DWORD)v15)
            {
              sub_10003AA44(v15);
              *(_DWORD *)(v4 + 120) = 0;
            }
          }

          a1 = *(unsigned int *)(v4 + 388);
          if ((_DWORD)a1)
          {
            a1 = sub_10003A9F4(a1, buf);
            if ((_DWORD)a1)
            {
              if ((*(_BYTE *)(v4 + 17) & 0x40) != 0 || *(uint64_t *)buf <= qword_10008C6F0)
              {
                a1 = *(unsigned int *)(v4 + 388);
                if ((_DWORD)a1)
                {
                  a1 = sub_10003AA44(a1);
                  *(_DWORD *)(v4 + 388) = 0;
                }
              }
            }
          }

          goto LABEL_42;
        }

        if (dword_10008BA20)
        {
          int v16 = (os_log_s *)ne_log_obj(a1);
          a1 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)a1)
          {
            __int16 v17 = sub_100024670(v4, 0);
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v17;
            int v18 = v16;
            __int16 v19 = "Skipping sweep of Phase 1 %s because it's already expired.\n";
LABEL_41:
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);
          }
        }

LABEL_42:
        if (!v3) {
          goto LABEL_43;
        }
      }

      if (!dword_10008BA20) {
        goto LABEL_42;
      }
      int v20 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      if (!(_DWORD)a1) {
        goto LABEL_42;
      }
      int v21 = sub_100024670(v4, 0);
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v21;
      int v18 = v20;
      __int16 v19 = "Skipping sweep of Phase 1 %s because it's been asserted.\n";
      goto LABEL_41;
    }

          if (v18 == ++v19) {
            goto LABEL_43;
          }
        }
      }

      if (!dword_10008BA20) {
        goto LABEL_122;
      }
      v76 = (os_log_s *)ne_log_obj(0LL);
      if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
        goto LABEL_122;
      }
      sub_100058054();
      if (a5) {
        goto LABEL_123;
      }
      goto LABEL_146;
    case 2:
      v40 = sub_100005664(a1);
      if (!v40)
      {
        if (!dword_10008BA20) {
          goto LABEL_113;
        }
        v77 = (os_log_s *)ne_log_obj(0LL);
        if (!os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
          goto LABEL_113;
        }
        sub_10005E984();
        if (a5) {
          goto LABEL_114;
        }
        return 20LL;
      }

      int v10 = v40;
      __int128 v41 = (const __CFArray *)SecCertificateCopyDNSNames();
      if (!v41)
      {
        if (!dword_10008BA20) {
          goto LABEL_122;
        }
        v80 = (os_log_s *)ne_log_obj(0LL);
        if (!os_log_type_enabled(v80, OS_LOG_TYPE_ERROR)) {
          goto LABEL_122;
        }
        sub_100058054();
        if (a5) {
          goto LABEL_123;
        }
        goto LABEL_146;
      }

      int v12 = v41;
      __int128 v42 = CFArrayGetCount(v41);
      uint64_t v8 = (int)v8;
      __int128 v43 = (uint64_t)CFStringCreateWithBytes(kCFAllocatorDefault, (const UInt8 *)a4, (int)v8, 0x8000100u, 0);
      if (!v43)
      {
        if (dword_10008BA20)
        {
          v84 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
            sub_10005EB68();
          }
        }

        goto LABEL_139;
      }

      __int128 v48 = (const __CFString *)v43;
      if (v42 >= 1)
      {
        for (uint64_t i = 0LL; i != v42; ++i)
        {
          __int128 v50 = (const __CFString *)CFArrayGetValueAtIndex(v12, i);
          __int128 v43 = CFStringCompare(v50, v48, 0LL);
          if (!v43) {
            goto LABEL_135;
          }
        }
      }

      if (dword_10008BA20)
      {
        __int128 v51 = (os_log_s *)ne_log_obj(v43);
        __int128 v52 = os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
        if (v52) {
          sub_10005EB10();
        }
        if (dword_10008BA20)
        {
          __int128 v53 = (os_log_s *)ne_log_obj(v52);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            sub_10005EB94();
          }
        }
      }

      goto LABEL_77;
    case 3:
      __int128 v54 = sub_100005664(a1);
      if (!v54)
      {
        if (dword_10008BA20)
        {
          v78 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            sub_10005E984();
            if (a5) {
              goto LABEL_114;
            }
            return 20LL;
          }
        }

        goto LABEL_113;
      }

      int v10 = v54;
      __int128 v55 = (const __CFArray *)SecCertificateCopyRFC822Names();
      if (!v55)
      {
        if (dword_10008BA20 && (v81 = (os_log_s *)ne_log_obj(0LL), os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)))
        {
          sub_100058054();
          if (!a5)
          {
LABEL_146:
            CFRelease(v10);
            return 20LL;
          }
        }

        else
        {
LABEL_122:
          if (!a5) {
            goto LABEL_146;
          }
        }

    if (!*(_BYTE *)(*(void *)v12 + 1LL)) {
      __int16 v17 = v12;
    }
    int v12 = (_DWORD *)*((void *)v12 + 38);
  }

  while (v12);
  if (v13)
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
        sub_10006335C();
      }
    }

    return v13;
  }

  if (v14)
  {
    if (dword_10008BA20)
    {
      uint64_t v28 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
        sub_10006335C();
      }
    }

    return v14;
  }

  if (v15)
  {
    if (dword_10008BA20)
    {
      int v29 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
        sub_10006335C();
      }
    }

    return v15;
  }

  if (!a2 || !v17) {
    goto LABEL_75;
  }
  if (dword_10008BA20)
  {
    int v30 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
      sub_1000633BC();
    }
  }

  return v17;
}

    close(*(_DWORD *)(qword_10008B848 + 28));
    return 0xFFFFFFFFLL;
  }

  int v11 = chown((const char *)&xmmword_10008B218 + 2, dword_10008C6C8, dword_10008C6CC);
  if ((_DWORD)v11)
  {
    if (dword_10008BA20)
    {
      int v12 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_100066334(v12);
      }
    }

    goto LABEL_42;
  }

  int v16 = chmod((const char *)&xmmword_10008B218 + 2, word_1000884E8);
  if ((_DWORD)v16)
  {
    if (dword_10008BA20)
    {
      __int16 v17 = (os_log_s *)ne_log_obj(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_10006628C(v17);
      }
    }

    goto LABEL_42;
  }

  __int16 v19 = listen(*(_DWORD *)(qword_10008B848 + 28), 5);
  if ((_DWORD)v19)
  {
    if (dword_10008BA20)
    {
      int v20 = (os_log_s *)ne_log_obj(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_10006620C(v20);
      }
    }

    goto LABEL_42;
  }

  if (dword_10008BA20)
  {
    int v21 = (os_log_s *)ne_log_obj(v19);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)fds = 136315138;
      *(void *)&fds[4] = (char *)&xmmword_10008B218 + 2;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "opened %s as racoon management.\n",  fds,  0xCu);
    }
  }

LABEL_43:
    uint64_t v22 = *(void *)(v2 + 1704);
    while (v22)
    {
      uint64_t v23 = v22;
      uint64_t v22 = *(void *)(v22 + 296);
      uint64_t v24 = *(void *)(v23 + 272);
      if (v24 && (*(_BYTE *)(v24 + 280) & 4) != 0)
      {
        if (dword_10008BA20)
        {
          uint64_t v31 = (os_log_s *)ne_log_obj(a1);
          a1 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)a1)
          {
            *(_WORD *)buf = 0;
            int v29 = v31;
            int v30 = "Skipping sweep of Phase 2 because it's been asserted.\n";
LABEL_67:
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v30, buf, 2u);
          }
        }
      }

      else if ((*(_BYTE *)(v23 + 264) & 2) != 0 || (*(_BYTE *)(v23 + 57) & 0x40) != 0)
      {
        if (dword_10008BA20)
        {
          uint64_t v28 = (os_log_s *)ne_log_obj(a1);
          a1 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)a1)
          {
            *(_WORD *)buf = 0;
            int v29 = v28;
            int v30 = "Skipping sweep of Phase 2 because it's already expired.\n";
            goto LABEL_67;
          }
        }
      }

      else
      {
        int v25 = *(_DWORD *)(v23 + 64);
        if (v25)
        {
          if (sub_10003A9F4(v25, buf))
          {
            if (*(uint64_t *)buf <= qword_10008C6F0)
            {
              sub_100004344((int *)(v23 + 56), 18432);
              *(_BYTE *)(v23 + 264) |= 2u;
              sub_1000258C8((void *)v23);
              sub_10004CCE8(*(void *)(v23 + 272), (uint64_t)off_100088518[0]);
              if (dword_10008BA20)
              {
                int v27 = (os_log_s *)ne_log_obj(v26);
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)__int16 v32 = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Phase 2 expired while sleeping: quick deletion.\n",  v32,  2u);
                }
              }
            }
          }
        }

        a1 = *(unsigned int *)(v23 + 68);
        if ((_DWORD)a1)
        {
          a1 = sub_10003A9F4(a1, buf);
          if ((_DWORD)a1)
          {
            if ((*(_BYTE *)(v23 + 57) & 0x40) != 0 || *(uint64_t *)buf <= qword_10008C6F0)
            {
              a1 = *(unsigned int *)(v23 + 68);
              if ((_DWORD)a1)
              {
                a1 = sub_10003AA44(a1);
                *(_DWORD *)(v23 + 68) = 0;
              }
            }
          }
        }
      }
    }
  }

  sub_10004E740(a1);
}

    sub_100009928(v9);
    return 0xFFFFFFFFLL;
  }

  *(_BYTE *)(v9 + 60) = 0;
  sub_100004344((int *)(v9 + 56), 63);
  int v14 = sub_100026CD4(a1);
  *(_DWORD *)(v9 + 108) = v14;
  if (*(void *)(a1 + 208))
  {
    uint64_t v15 = sub_10002E0FC(a1, v14);
    *(void *)(v9 + 240) = v15;
    if (!v15)
    {
      if (dword_10008BA20)
      {
        uint64_t v31 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_100059098();
        }
      }

      goto LABEL_43;
    }

    int v16 = (const void **)sub_10002AA48(a1, *(_DWORD *)(v9 + 108), a2);
    if (!v16)
    {
      if (dword_10008BA20)
      {
        int v33 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          sub_100059E58();
        }
      }

      goto LABEL_43;
    }

    __int16 v17 = v16;
    int v18 = *(int *)v16 + 32LL;
  }

  else
  {
    __int16 v17 = 0LL;
    int v18 = 28LL;
  }

  uint64_t v24 = v17 != 0LL;
  if ((a4 & 4) != 0) {
    uint64_t v24 = 4 * (v17 != 0LL);
  }
  *(_BYTE *)(v9 + 105) = v24;
  sub_10004B5C4(a1, (void *)v9);
  int v25 = v18 + *(void *)a2;
  uint64_t v26 = sub_10003F4BC((int)v25);
  *(void *)(v9 + 80) = v26;
  if (!v26)
  {
    if (dword_10008BA20)
    {
      __int16 v32 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        sub_10005A784();
      }
    }

    goto LABEL_67;
  }

  int v27 = v26[1];
  *(void *)int v27 = *(void *)a1;
  *(void *)(v27 + 8) = *(void *)(a1 + 8);
  if (v17) {
    uint64_t v28 = 8;
  }
  else {
    uint64_t v28 = a3;
  }
  *(_BYTE *)(v27 + 16) = v28;
  *(_BYTE *)(v27 + 17) = *(_BYTE *)(a1 + 80);
  *(_BYTE *)(v27 + 18) = 5;
  *(_BYTE *)(v27 + 19) = *(_BYTE *)(v9 + 105);
  *(_DWORD *)(v27 + 20) = *(_DWORD *)(v9 + 108);
  *(_DWORD *)(v27 + 24) = bswap32(v25);
  if (v17)
  {
    *(_BYTE *)(v27 + 28) = a3;
    int v29 = (size_t)*v17;
    *(_WORD *)(v27 + 30) = bswap32(*v17 + 4) >> 16;
    memcpy((void *)(v27 + 32), v17[1], v29);
    int v30 = (char *)*v17 + v27 + 32;
  }

  else
  {
    int v30 = (char *)(v27 + 28);
  }

  memcpy(v30, *(const void **)(a2 + 8), *(void *)a2);
  uint64_t v36 = *(size_t **)(v9 + 80);
  if ((*(_BYTE *)(v27 + 19) & 1) != 0)
  {
    uint64_t v36 = sub_10002EA40( *(void *)(v9 + 256),  *(void *)(v9 + 80),  *(void *)(*(void *)(v9 + 240) + 8LL),  **(void **)(v9 + 240));
    uint8_t v37 = *(void **)(v9 + 80);
    if (v37)
    {
      sub_10003F5BC(v37);
      *(void *)(v9 + 80) = 0LL;
    }

    if (!v36)
    {
      if (dword_10008BA20)
      {
        __int128 v43 = (os_log_s *)ne_log_obj(v37);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
          sub_10005A7B0();
        }
      }

      goto LABEL_67;
    }

    *(void *)(v9 + 80) = v36;
  }

  BOOL v38 = sub_100024890(*(void *)(v9 + 256), v36);
  if ((v38 & 0x80000000) == 0)
  {
    if (dword_10008BA20)
    {
      v39 = (os_log_s *)ne_log_obj(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v44 = 136315138;
        __int128 v45 = sub_10003DE70(a3);
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "sendto Information %s.\n",  (uint8_t *)&v44,  0xCu);
      }
    }

    v40 = *(void **)(v9 + 80);
    if (v40)
    {
      sub_10003F5BC(v40);
      int v34 = 0LL;
      *(void *)(v9 + 80) = 0LL;
    }

    else
    {
      int v34 = 0LL;
    }

    goto LABEL_68;
  }

  if (dword_10008BA20)
  {
    __int128 v41 = (os_log_s *)ne_log_obj(v38);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      sub_100058CE4();
    }
  }

  __int128 v42 = *(void **)(v9 + 80);
  if (v42)
  {
    sub_10003F5BC(v42);
    *(void *)(v9 + 80) = 0LL;
  }

  __int16 v19 = sub_10003F4BC(i);
  if (!v19)
  {
    if (dword_10008BA20)
    {
      int v20 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_10005D954();
      }
    }

    sub_10004AAC4((void *)v6);
    return 0xFFFFFFFFLL;
  }

  if (v12)
  {
    if (*v7 == 16)
    {
      uint64_t v26 = sub_100026218(v6);
      if ((v26 & 0x80000000) != 0)
      {
        if (dword_10008BA20)
        {
          uint64_t v28 = (os_log_s *)ne_log_obj(v26);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_100060EF0();
          }
        }

        goto LABEL_43;
      }
    }
  }

  return 0LL;
}

uint64_t sub_10000B328(uint64_t a1)
{
  uint64_t v1 = a1;
  unsigned int v8 = 0;
  uint64_t v2 = *(void *)(a1 + 48);
  int v3 = *(unsigned __int8 *)(v2 + 1);
  if (v3 != 30)
  {
    if (v3 == 2) {
      return *(unsigned int *)(v2 + 4);
    }
    goto LABEL_9;
  }

  a1 += 28LL;
  if (!*(_DWORD *)(v1 + 28))
  {
LABEL_9:
    if (dword_10008BA20)
    {
      int v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1000562D4();
      }
    }

    return v8;
  }

  uint64_t v4 = nw_nat64_extract_v4(a1, v2 + 8, &v8);
  if ((v4 & 1) == 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100056340();
      }
    }
  }

  return v8;
}

uint64_t sub_10000B408(uint64_t a1)
{
  uint64_t v1 = a1;
  unsigned int v8 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(v2 + 1);
  if (v3 != 30)
  {
    if (v3 == 2) {
      return *(unsigned int *)(v2 + 4);
    }
    goto LABEL_9;
  }

  a1 += 16LL;
  if (!*(_DWORD *)(v1 + 16))
  {
LABEL_9:
    if (dword_10008BA20)
    {
      int v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10005636C();
      }
    }

    return v8;
  }

  uint64_t v4 = nw_nat64_extract_v4(a1, v2 + 8, &v8);
  if ((v4 & 1) == 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_1000563D8();
      }
    }
  }

  return v8;
}

void sub_10000B4E8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_10000B4FC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

uint64_t sub_10000B528(unint64_t *a1, void *a2)
{
  int v3 = sub_10000B778(a1, 0);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = v3;
  int v6 = a2 + 9;
  uint64_t v5 = a2[9];
  if (v5)
  {
    sub_100038E98((void *)v5);
    *int v6 = 0LL;
  }

  uint64_t v7 = 0LL;
  while (1)
  {
    unsigned int v8 = (uint64_t *)v4[v7];
    if (v8) {
      break;
    }
LABEL_10:
    if (++v7 == 256)
    {
      if (dword_100088280)
      {
        for (uint64_t i = 0LL; i != 256; ++i)
        {
          for (uint64_t j = (uint64_t *)v4[i]; j; uint64_t j = (uint64_t *)j[2])
          {
            int v12 = j;
            do
            {
              sub_10000CEFC(v12, *(void *)(a2[8] + 248LL));
              int v12 = (uint64_t *)v12[3];
            }

            while (v12);
          }
        }
      }

      if (dword_10008BA20)
      {
        uint64_t v13 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_100056404();
        }
      }

      goto LABEL_39;
    }
  }

LABEL_6:
  int v9 = v8;
  while (1)
  {
    uint64_t v5 = (uint64_t)sub_10000C034(v9, *(void *)(a2[8] + 248LL), v24, *(_DWORD *)(a2[8] + 172LL));
    if (v5) {
      break;
    }
    int v9 = (uint64_t *)v9[3];
    if (!v9)
    {
      unsigned int v8 = (uint64_t *)v8[2];
      if (v8) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }

  uint64_t v14 = v5;
  if (dword_10008BA20)
  {
    uint64_t v15 = (os_log_s *)ne_log_obj(v5);
    uint64_t v5 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v5) {
      sub_1000564AC();
    }
  }

  __int16 v17 = (void **)(v14 + 64);
  uint64_t v16 = *(void *)(v14 + 64);
  if (v16)
  {
    if (*(void *)(v16 + 8) && *(_DWORD *)(v16 + 16)) {
      goto LABEL_32;
    }
    if (dword_10008BA20)
    {
      int v18 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v23[0] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "invalid DH parameter found, use default.\n",  (uint8_t *)v23,  2u);
      }
    }

    sub_100029C48(*v17);
    *__int16 v17 = 0LL;
  }

  uint64_t v5 = sub_10002A198(*(unsigned int *)(v14 + 60), v14 + 64);
  if ((_DWORD)v5 == -1)
  {
    free((void *)v14);
    goto LABEL_39;
  }

    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "try to get pskey by the peer's address.\n",  v13,  2u);
      }
    }

    uint64_t v7 = (sockaddr *)v1[6];
    int v6 = (const sockaddr **)(v1 + 6);
    uint64_t v4 = sub_100028BD4(v7);
    if (!v4 && dword_10008BA20)
    {
      unsigned int v8 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_10005EFB8(v6);
      }
      return 0LL;
    }

    return v4;
  }

  if (*(_DWORD *)(v2 + 80) == 1)
  {
    a1 = sub_100028900(*(const char **)(v3 + 8), *(_DWORD *)v3 - 1);
    uint64_t v4 = a1;
    if (a1) {
      return v4;
    }
    goto LABEL_6;
  }

  int v9 = sub_10003F4BC(*(void *)v3 - 1LL);
  if (!v9)
  {
    if (dword_10008BA20)
    {
      int v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_10005DC28();
      }
    }

    return 0LL;
  }

  uint64_t v4 = v9;
  memcpy((void *)v9[1], *(const void **)(*(void *)(v1[8] + 88) + 8LL), *v9);
  return v4;
}

    int v10 = sub_10000B328(a3);
    if ((_DWORD)v10)
    {
      int v11 = v10;
      if (a2) {
        int v12 = -32750;
      }
      else {
        int v12 = -32751;
      }
      if (!a1) {
        int v12 = -32749;
      }
      uint64_t v13 = bswap32(v12) >> 16;
      uint64_t v14 = v30;
LABEL_18:
      *uint64_t v14 = v13;
      if (dword_10008BA20)
      {
        uint64_t v16 = (os_log_s *)ne_log_obj(v10);
        int v10 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        uint64_t v14 = v30;
        if ((_DWORD)v10)
        {
          __int16 v17 = sub_100048B3C(bswap32(*(unsigned __int16 *)v30) >> 16);
          *(_DWORD *)buf = 136315138;
          __int16 v32 = (size_t)v17;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  ">>>>> phase change status = %s\n",  buf,  0xCu);
          uint64_t v14 = v30;
        }
      }

      v14[6] = 0;
      *((_DWORD *)v14 + 1) = 0;
      *((_DWORD *)v14 + 2) = 0;
      v14[7] = bswap32((unsigned __int16)v29 - 16) >> 16;
      *((_DWORD *)v14 + 4) = v11;
      for (uint64_t i = *(uint64_t **)(qword_10008B848 + 64); i; uint64_t i = (uint64_t *)*i)
      {
        __int16 v19 = i + 6;
        while (1)
        {
          __int16 v19 = (uint64_t *)*v19;
          if (!v19) {
            break;
          }
          int v20 = *((_DWORD *)v19 + 4);
          if (v20 == -1 || v20 == v11)
          {
            if (dword_10008BA20)
            {
              uint64_t v22 = (os_log_s *)ne_log_obj(v10);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134217984;
                __int16 v32 = v29;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "vpn control writing %zu bytes\n",  buf,  0xCu);
              }
            }

            int v10 = send(*((_DWORD *)i + 4), v30, v29, 0);
            if (v10 < 0 && dword_10008BA20)
            {
              uint64_t v23 = (os_log_s *)ne_log_obj(v10);
              int v10 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
              if ((_DWORD)v10) {
                sub_1000660B0();
              }
            }

            break;
          }
        }
      }

      goto LABEL_50;
    }

    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(v10);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1000660FC();
      }
    }

    goto LABEL_50;
  }

  int v25 = sub_10004A390(a3, &v30, &v29);
  if ((_DWORD)v25 == 1) {
    return 0LL;
  }
  if (v30) {
    goto LABEL_6;
  }
  if (dword_10008BA20)
  {
    uint64_t v26 = (os_log_s *)ne_log_obj(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      sub_100065EF8();
    }
  }

  return 0xFFFFFFFFLL;
}

LABEL_32:
  *int v6 = v14;
  if (dword_10008BA20)
  {
    __int16 v19 = (os_log_s *)ne_log_obj(v5);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      sub_100056430((uint64_t)(a2 + 9));
    }
  }

  int v20 = sub_10000D8C8(v9, (uint64_t)a2);
  if (v20)
  {
    int v21 = v20;
    sub_10000BFD4(v4);
    uint64_t result = 0LL;
    a2[43] = v21;
    return result;
  }

  sub_100038E98((void *)*v6);
  *int v6 = 0LL;
LABEL_39:
  sub_10000BFD4(v4);
  return 0xFFFFFFFFLL;
}

          v10 += 16;
          continue;
        }

        if (*v10)
        {
LABEL_58:
          if (!dword_10008BA20) {
            goto LABEL_73;
          }
          uint64_t v28 = (os_log_s *)ne_log_obj(v7);
          int v25 = v34;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_100058F2C();
          }
        }

        else
        {
          if ((*(_BYTE *)(a1 + 96) & 1) != 0)
          {
            if (dword_10008BA20)
            {
              int v20 = (os_log_s *)ne_log_obj(v7);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                int v21 = "detected:";
                uint64_t v22 = *(_DWORD *)(a1 + 96);
                uint64_t v23 = "ME ";
                if ((v22 & 6) == 0) {
                  int v21 = "not detected";
                }
                if ((v22 & 2) == 0) {
                  uint64_t v23 = (const char *)&unk_10007E069;
                }
                *(_DWORD *)buf = 136315650;
                *(void *)uint8_t v37 = v21;
                *(_WORD *)&v37[8] = 2080;
                *(void *)&v37[10] = v23;
                if ((v22 & 4) != 0) {
                  uint64_t v24 = "PEER";
                }
                else {
                  uint64_t v24 = (const char *)&unk_10007E069;
                }
                BOOL v38 = 2080;
                v39 = v24;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "NAT %s %s%s\n", buf, 0x20u);
              }
            }
          }

          int v25 = v34;
          if (v8) {
            sub_10002C28C((void *)a1);
          }
          uint64_t v26 = sub_10002B2CC(a1);
          int v6 = v26;
          if ((_DWORD)v26 == -1)
          {
            __int16 v19 = 0;
            goto LABEL_74;
          }

          if (!(_DWORD)v26)
          {
            sub_100004344(v3, 5507);
            __int16 v19 = 1;
            goto LABEL_74;
          }

          sub_10001BA48(a1, v26, 0LL);
        }

    int v6 = 0xFFFFFFFFLL;
    goto LABEL_10;
  }

  if (dword_10008BA20)
  {
    uint64_t v5 = (os_log_s *)ne_log_obj(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10005FA80();
    }
  }

        sub_10005C498();
        goto LABEL_33;
      }

      if (v5 == v6)
      {
        uint64_t v7 = 1;
        goto LABEL_9;
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v13 = (os_log_s *)ne_log_obj(__s1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1000640AC();
    }
  }

  return 0xFFFFFFFFLL;
}

void *sub_10000B778(unint64_t *a1, unsigned int a2)
{
  unint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  if (a2 <= 1)
  {
    if (v4 <= 7)
    {
      if (dword_10008BA20)
      {
        uint64_t v5 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          sub_1000564DC();
        }
      }

      return 0LL;
    }

    if (*(_DWORD *)v3 != 0x1000000)
    {
      if (dword_10008BA20)
      {
        int v9 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_1000567B4();
        }
      }

      return 0LL;
    }

    unsigned int v6 = bswap32(*(_DWORD *)(v3 + 4));
    if (v6 != 1)
    {
      if (v6 == 4 || v6 == 2)
      {
        if (dword_10008BA20)
        {
          unsigned int v8 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
            sub_100056754();
          }
        }
      }

      else if (dword_10008BA20)
      {
        v56 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
          sub_100056540();
        }
      }

      return 0LL;
    }

    v3 += 8LL;
    LODWORD(v4) = v4 - 8;
  }

  int v10 = calloc(1uLL, 0x800uLL);
  if (!v10)
  {
    if (dword_10008BA20)
    {
      __int128 v41 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        sub_1000565A0();
      }
    }

    return 0LL;
  }

  int v11 = v10;
  uint64_t v12 = (uint64_t)sub_1000237C0(2LL, (unsigned __int8 *)v3, v4);
  if (!v12)
  {
LABEL_107:
    free(v11);
    return 0LL;
  }

  int v60 = 0;
  v59 = (void *)v12;
  for (uint64_t i = *(void *)(v12 + 8); *(_BYTE *)i == 2; i += 16LL)
  {
    unsigned int v14 = *(_DWORD *)(i + 4);
    if (v14 <= 7)
    {
      if (dword_10008BA20)
      {
        __int128 v53 = (os_log_s *)ne_log_obj(v12);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
          sub_100056658((int *)(i + 4), v53, v54);
        }
      }

LABEL_106:
      sub_10003F5BC(v59);
      goto LABEL_107;
    }

    uint64_t v15 = *(void *)(i + 8);
    if (dword_10008BA20)
    {
      uint64_t v16 = (os_log_s *)ne_log_obj(v12);
      uint64_t v12 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v12)
      {
        int v39 = *(unsigned __int8 *)(v15 + 4);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)CFTypeID v62 = v39;
        *(_WORD *)&v62[4] = 1024;
        *(_DWORD *)&v62[6] = v14;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "proposal #%u len=%d\n", buf, 0xEu);
      }
    }

    if ((a2 & 0xFFFFFFFE) == 2)
    {
      if (dword_10008BA20)
      {
        __int16 v17 = (os_log_s *)ne_log_obj(v12);
        uint64_t v12 = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v12)
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)CFTypeID v62 = a2;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "unsupported mode %d\n", buf, 8u);
        }
      }
    }

    else
    {
      uint64_t v12 = ((uint64_t (*)(void))off_100084EC8[a2])(*(unsigned __int8 *)(v15 + 5));
      if ((v12 & 0x80000000) == 0)
      {
        uint64_t v12 = sub_10000E01C(*(unsigned __int8 *)(v15 + 5), *(unsigned __int8 *)(v15 + 6));
        if ((v12 & 0x80000000) == 0)
        {
          uint64_t v18 = *(unsigned __int8 *)(v15 + 6);
          if (v18 + 8 <= (unint64_t)*(int *)(i + 4))
          {
            uint64_t v19 = (uint64_t)sub_1000237C0( 3LL,  (unsigned __int8 *)(v15 + v18 + 8),  (bswap32(*(unsigned __int16 *)(v15 + 2)) >> 16) - v18 - 8);
            if (!v19) {
              goto LABEL_106;
            }
            int v20 = (void *)v19;
            int v21 = *(unsigned __int8 **)(v19 + 8);
LABEL_37:
            if (*v21 != 3)
            {
              if (!*v21) {
                goto LABEL_68;
              }
              if (!dword_10008BA20) {
                goto LABEL_68;
              }
              int v33 = (os_log_s *)ne_log_obj(v19);
              if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
                goto LABEL_68;
              }
              int v34 = *v21;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)CFTypeID v62 = v34;
              int v35 = v33;
              uint64_t v36 = "Invalid payload type=%u\n";
              uint32_t v37 = 8;
              goto LABEL_71;
            }

            unsigned int v22 = *((_DWORD *)v21 + 1);
            if (v22 <= 7)
            {
              if (!dword_10008BA20) {
                goto LABEL_68;
              }
              BOOL v38 = (os_log_s *)ne_log_obj(v19);
              if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
                goto LABEL_68;
              }
              int v40 = *((_DWORD *)v21 + 1);
              *(_DWORD *)buf = 134218240;
              *(void *)CFTypeID v62 = 8LL;
              *(_WORD *)&v62[8] = 1024;
              int v63 = v40;
              int v35 = v38;
              uint64_t v36 = "get_transform invalid length of transform, expected %lu actual %d\n";
              uint32_t v37 = 18;
LABEL_71:
              _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, v36, buf, v37);
LABEL_68:
              sub_10003F5BC(v20);
              continue;
            }

            uint64_t v23 = *((void *)v21 + 1);
            if (dword_10008BA20)
            {
              uint64_t v24 = (os_log_s *)ne_log_obj(v19);
              uint64_t v19 = os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
              if ((_DWORD)v19)
              {
                int v32 = *(unsigned __int8 *)(v23 + 4);
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)CFTypeID v62 = v32;
                *(_WORD *)&v62[4] = 1024;
                *(_DWORD *)&v62[6] = v22;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "transform #%u len=%u\n",  buf,  0xEu);
              }
            }

            uint64_t v25 = *(unsigned __int8 *)(v15 + 5);
            if (v25 < 5)
            {
              if (*(_BYTE *)(v15 + 5))
              {
                uint64_t v19 = qword_100084EE8[v25](*(unsigned __int8 *)(v23 + 5));
                if ((v19 & 0x80000000) == 0)
                {
                  uint64_t v19 = qword_100084F10[*(unsigned __int8 *)(v15 + 5)](v23);
                  if (!(_DWORD)v19)
                  {
                    uint64_t v19 = (uint64_t)calloc(1uLL, 0x20uLL);
                    if (!v19)
                    {
                      if (dword_10008BA20)
                      {
                        CFTypeID v58 = (os_log_s *)ne_log_obj(0LL);
                        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
                          sub_1000565A0();
                        }
                      }

                      sub_10003F5BC(v20);
                      goto LABEL_106;
                    }

                    *(void *)uint64_t v19 = v15;
                    *(void *)(v19 + 8) = v23;
                    uint64_t v27 = *(unsigned __int8 *)(v15 + 4);
                    uint64_t v28 = (void *)*((void *)v11 + v27);
                    do
                    {
                      if (!v28)
                      {
                        *((void *)v11 + v27) = v19;
                        ++v60;
                        goto LABEL_60;
                      }

                      int v29 = v28;
                      uint64_t v28 = (void *)v28[2];
                    }

                    while (v28);
                    if (*v29 == v15)
                    {
                      do
                      {
                        int v30 = v29;
                        int v29 = (void *)v29[3];
                      }

                      while (v29);
                      v30[3] = v19;
                    }

                    else
                    {
                      v29[2] = v19;
                    }
                  }
                }
              }

              else if (dword_10008BA20)
              {
                uint64_t v26 = (os_log_s *)ne_log_obj(v19);
                uint64_t v19 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v19)
                {
LABEL_59:
                  int v31 = *(unsigned __int8 *)(v15 + 5);
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)CFTypeID v62 = v31;
                  _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "unsupported proto_id %u\n",  buf,  8u);
                }
              }
            }

            else if (dword_10008BA20)
            {
              uint64_t v26 = (os_log_s *)ne_log_obj(v19);
              uint64_t v19 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v19) {
                goto LABEL_59;
              }
            }

LABEL_60:
            v21 += 16;
            goto LABEL_37;
          }

          if (dword_10008BA20)
          {
            v57 = (os_log_s *)ne_log_obj(v12);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
              sub_1000566D4();
            }
          }

          goto LABEL_106;
        }
      }
    }
  }

  if (*(_BYTE *)i)
  {
    if (dword_10008BA20)
    {
      __int128 v51 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
        sub_1000565CC();
      }
    }

    goto LABEL_106;
  }

  sub_10003F5BC(v59);
  for (uint64_t j = 0LL; j != 256; ++j)
  {
    if (*((void *)v11 + j))
    {
      if (dword_10008BA20)
      {
        __int128 v44 = (os_log_s *)ne_log_obj(v42);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)CFTypeID v62 = j;
          _os_log_debug_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "pair %d:\n", buf, 8u);
        }
      }

      sub_100037B88(7LL, *((void *)v11 + j));
      __int128 v42 = (void *)*((void *)v11 + j);
      if (v42)
      {
        int v45 = 0;
        uint64_t v46 = *((void *)v11 + j);
        while (*(void *)(v46 + 8))
        {
          uint64_t v47 = v46;
          do
          {
            ++v45;
            uint64_t v47 = *(void *)(v47 + 24);
          }

          while (v47);
          uint64_t v46 = *(void *)(v46 + 16);
          if (!v46) {
            goto LABEL_91;
          }
        }

        do
        {
          __int128 v48 = (void *)*((void *)v42 + 2);
          free(v42);
          __int128 v42 = v48;
        }

        while (v48);
        *((void *)v11 + j) = 0LL;
        --v60;
      }

      else
      {
        int v45 = 0;
LABEL_91:
        if (dword_10008BA20)
        {
          __int128 v49 = (os_log_s *)ne_log_obj(v42);
          __int128 v42 = (void *)os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)v42)
          {
            int v50 = *(unsigned __int8 *)(**((void **)v11 + j) + 4LL);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFTypeID v62 = v50;
            *(_WORD *)&v62[4] = 1024;
            *(_DWORD *)&v62[6] = v45;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "proposal #%u: %d transform\n",  buf,  0xEu);
          }
        }
      }
    }
  }

  if (v60 <= 0)
  {
    if (dword_10008BA20)
    {
      __int128 v52 = (os_log_s *)ne_log_obj(v42);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
        sub_10005662C();
      }
    }

    goto LABEL_107;
  }

  return v11;
}

  sub_10003F5BC(v7);
  return 0xFFFFFFFFLL;
}

    sub_10004F808();
    sub_10003AB68();
  }

  return result;
}

                exit(1);
              }
            }

            if (!dword_10008BA20) {
              goto LABEL_60;
            }
            uint64_t v27 = (os_log_s *)ne_log_obj(v22);
            uint64_t v28 = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
            if (v28)
            {
              int v29 = __error();
              int v30 = strerror(*v29);
              LODWORD(buffer.__sigaction_u.__sa_handler) = 136315138;
              *(void (__cdecl **)(int, __siginfo *, void *))((char *)&buffer.__sigaction_u.__sa_sigaction + 4) = (void (__cdecl *)(int, __siginfo *, void *))v30;
              _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "failed to set_signal (%s)\n",  (uint8_t *)&buffer,  0xCu);
            }

            if (!dword_10008BA20) {
              goto LABEL_60;
            }
            int v31 = (os_log_s *)ne_log_obj(v28);
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
              goto LABEL_60;
            }
            LOWORD(buffer.__sigaction_u.__sa_handler) = 0;
            int v32 = "failed to initialize signals.\n";
          }
        }

void sub_10000BFD4(void *a1)
{
  for (uint64_t i = 0LL; i != 256; ++i)
  {
    unint64_t v3 = (void *)a1[i];
    while (v3)
    {
      unint64_t v4 = v3;
      unint64_t v3 = (void *)v3[2];
      do
      {
        uint64_t v5 = (void *)v4[3];
        free(v4);
        unint64_t v4 = v5;
      }

      while (v5);
    }

    a1[i] = 0LL;
  }

  free(a1);
}

_DWORD *sub_10000C034(uint64_t *a1, uint64_t a2, uint8_t *a3, int a4)
{
  uint64_t v8 = a1[1];
  if (dword_10008BA20)
  {
    uint64_t v4 = *a1;
    int v9 = (os_log_s *)ne_log_obj(a1);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
    if (v10) {
      sub_100056900(v4);
    }
    if (dword_10008BA20)
    {
      int v11 = (os_log_s *)ne_log_obj(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        sub_10005686C(v8, v4);
      }
    }
  }

  if (a3) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = v58;
  }
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  if (a2)
  {
    if (a3) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = v58;
    }
    while (1)
    {
      LODWORD(v8) = sub_10000CE88(*(unsigned int *)(a2 + 48));
      uint64_t v14 = sub_10000CE88(*((unsigned int *)v13 + 12));
      LODWORD(v4) = v14;
      if (dword_10008BA20)
      {
        uint64_t v15 = (os_log_s *)ne_log_obj(v14);
        uint64_t v14 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v14) {
          sub_100056840(&v56, v57);
        }
        if (dword_10008BA20)
        {
          uint64_t v16 = (os_log_s *)ne_log_obj(v14);
          uint64_t v14 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)v14)
          {
            int v25 = *(_DWORD *)a2;
            int v26 = *(_DWORD *)v12;
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)int v60 = v25;
            *(_WORD *)&v60[4] = 1024;
            *(_DWORD *)&v60[6] = v26;
            _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "(version = %d:%d)\n", buf, 0xEu);
          }

          if (dword_10008BA20)
          {
            __int16 v17 = (os_log_s *)ne_log_obj(v14);
            uint64_t v14 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
            if ((_DWORD)v14)
            {
              uint64_t v27 = *(void *)(a2 + 16);
              uint64_t v28 = (char *)*((void *)v13 + 2);
              *(_DWORD *)buf = 134218240;
              *(void *)int v60 = v27;
              *(_WORD *)&v60[8] = 2048;
              v61 = v28;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "(lifetime = %ld:%ld)\n",  buf,  0x16u);
            }

            if (dword_10008BA20)
            {
              uint64_t v18 = (os_log_s *)ne_log_obj(v14);
              uint64_t v14 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
              if ((_DWORD)v14)
              {
                uint64_t v29 = *(void *)(a2 + 32);
                int v30 = (char *)*((void *)v13 + 4);
                *(_DWORD *)buf = 134218240;
                *(void *)int v60 = v29;
                *(_WORD *)&v60[8] = 2048;
                v61 = v30;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "(lifebyte = %zu:%zu)\n",  buf,  0x16u);
              }

              if (dword_10008BA20)
              {
                uint64_t v19 = (os_log_s *)ne_log_obj(v14);
                uint64_t v14 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
                if ((_DWORD)v14)
                {
                  int v31 = sub_10003E8A0(1, *(unsigned int *)(a2 + 40));
                  int v32 = sub_10003E8A0(1, *((unsigned int *)v13 + 10));
                  *(_DWORD *)buf = 136315394;
                  *(void *)int v60 = v31;
                  *(_WORD *)&v60[8] = 2080;
                  v61 = v32;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "enctype = %s:%s\n",  buf,  0x16u);
                }

                if (dword_10008BA20)
                {
                  int v20 = (os_log_s *)ne_log_obj(v14);
                  uint64_t v14 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
                  if ((_DWORD)v14)
                  {
                    int v34 = *(_DWORD *)(a2 + 44);
                    int v35 = *((_DWORD *)v13 + 11);
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)int v60 = v34;
                    *(_WORD *)&v60[4] = 1024;
                    *(_DWORD *)&v60[6] = v35;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "(encklen = %d:%d)\n",  buf,  0xEu);
                  }

                  if (dword_10008BA20)
                  {
                    int v21 = (os_log_s *)ne_log_obj(v14);
                    uint64_t v14 = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
                    if ((_DWORD)v14)
                    {
                      uint64_t v36 = sub_10003E8A0(2, *(unsigned int *)(a2 + 52));
                      uint32_t v37 = sub_10003E8A0(2, *((unsigned int *)v13 + 13));
                      *(_DWORD *)buf = 136315394;
                      *(void *)int v60 = v36;
                      *(_WORD *)&v60[8] = 2080;
                      v61 = v37;
                      _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "hashtype = %s:%s\n",  buf,  0x16u);
                    }

                    if (dword_10008BA20)
                    {
                      unsigned int v22 = (os_log_s *)ne_log_obj(v14);
                      uint64_t v14 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
                      if ((_DWORD)v14)
                      {
                        BOOL v38 = sub_10003E8A0(3, *(unsigned int *)(a2 + 48));
                        int v39 = sub_10003E8A0(3, *((unsigned int *)v13 + 12));
                        *(_DWORD *)buf = 136315394;
                        *(void *)int v60 = v38;
                        *(_WORD *)&v60[8] = 2080;
                        v61 = v39;
                        _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "authmethod = %s:%s\n",  buf,  0x16u);
                      }

                      if (dword_10008BA20)
                      {
                        uint64_t v23 = (os_log_s *)ne_log_obj(v14);
                        uint64_t v14 = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
                        if ((_DWORD)v14)
                        {
                          int v40 = sub_10003E8A0(4, *(unsigned int *)(a2 + 60));
                          __int128 v41 = sub_10003E8A0(4, *((unsigned int *)v13 + 15));
                          *(_DWORD *)buf = 136315394;
                          *(void *)int v60 = v40;
                          *(_WORD *)&v60[8] = 2080;
                          v61 = v41;
                          _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "dh_group = %s:%s\n",  buf,  0x16u);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      if (*((_DWORD *)v13 + 10) == *(_DWORD *)(a2 + 40))
      {
        BOOL v24 = *((_DWORD *)v13 + 12) == (_DWORD)v8 || (_DWORD)v4 == (_DWORD)v8;
        if (v24
          && *((_DWORD *)v13 + 13) == *(_DWORD *)(a2 + 52)
          && *((_DWORD *)v13 + 15) == *(_DWORD *)(a2 + 60)
          && *((_DWORD *)v13 + 11) == *(_DWORD *)(a2 + 44)
          && *(_DWORD *)v12 == *(_DWORD *)a2)
        {
          break;
        }
      }

LABEL_61:
      a2 = *(void *)(a2 + 80);
      if (!a2) {
        goto LABEL_64;
      }
    }

    switch(a4)
    {
      case 1:
        break;
      case 2:
        if (*((void *)v13 + 2) > *(void *)(a2 + 16) || *((void *)v13 + 4) > *(void *)(a2 + 32)) {
          goto LABEL_61;
        }
        break;
      case 3:
        uint64_t v52 = *((void *)v13 + 2);
        if (v52 < *(void *)(a2 + 16)) {
          *(void *)(a2 + 16) = v52;
        }
        unint64_t v53 = *((void *)v13 + 4);
        if (v53 < *(void *)(a2 + 32)) {
          *(void *)(a2 + 32) = v53;
        }
        break;
      case 4:
        if (*((void *)v13 + 2) != *(void *)(a2 + 16) || *((void *)v13 + 4) != *(void *)(a2 + 32)) {
          goto LABEL_61;
        }
        break;
      default:
        if (dword_10008BA20)
        {
          int v33 = (os_log_s *)ne_log_obj(v14);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            sub_100056814(&v54, v55);
          }
        }

        goto LABEL_61;
    }
  }

LABEL_64:
  if (a3) {
    __int128 v43 = a3;
  }
  else {
    __int128 v43 = v58;
  }
  __int128 v44 = (void *)*((void *)v43 + 8);
  if (v44)
  {
    sub_100029C48(v44);
    *((void *)v43 + 8) = 0LL;
  }

  uint64_t result = sub_100039D58(a2);
  if (result)
  {
    if (a4 == 3)
    {
      __int128 v49 = v58;
      if (a3) {
        int v50 = a3;
      }
      else {
        int v50 = v58;
      }
      uint64_t v51 = *((void *)v50 + 2);
      if (v51 < *((void *)result + 2)) {
        *((void *)result + 2) = v51;
      }
      if (a3) {
        __int128 v49 = a3;
      }
      unint64_t v46 = *((void *)v49 + 4);
      if (v46 >= *((void *)result + 4)) {
        goto LABEL_77;
      }
    }

    else
    {
      if (a4 != 2 && a4 != 1) {
        goto LABEL_77;
      }
      int v45 = v58;
      if (a3) {
        int v45 = a3;
      }
      *((void *)result + 2) = *((void *)v45 + 2);
      unint64_t v46 = *((void *)v45 + 4);
    }

    *((void *)result + 4) = v46;
LABEL_77:
    uint64_t v47 = v58;
    if (a3) {
      uint64_t v47 = a3;
    }
    int v48 = *((_DWORD *)v47 + 12);
    if (v48 != (_DWORD)v8 && (_DWORD)v4 == (_DWORD)v8) {
      result[12] = v48;
    }
  }

  return result;
}

uint64_t sub_10000C768(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 2);
  *(void *)(a2 + 16) = 28800LL;
  *(void *)(a2 + 32) = 0LL;
  uint64_t v5 = calloc(1uLL, 0x30uLL);
  *(void *)(a2 + 64) = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v6 = bswap32(v4) >> 16;
  if (v6 < 9) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
  int v47 = 0;
  uint64_t v8 = 0LL;
  int v9 = v6 - 8;
  BOOL v10 = (unsigned __int16 *)(a1 + 8);
  int v45 = (unsigned int *)(a2 + 40);
  int v46 = 1;
  do
  {
    unint64_t v11 = v9;
    if (v9 <= 3)
    {
      if (dword_10008BA20)
      {
        int v35 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          sub_1000569BC();
        }
      }

      return 0xFFFFFFFFLL;
    }

    uint64_t v12 = v10;
    int v13 = *v10;
    unsigned int v14 = bswap32(v13 & 0xFFFFFF7F) >> 16;
    int v15 = (v13 << 8) & 0x8000;
    if (dword_10008BA20)
    {
      uint64_t v16 = (os_log_s *)ne_log_obj(v5);
      uint64_t v5 = (void *)os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v5)
      {
        int v31 = sub_10003E560(v14);
        int v32 = sub_10003E8A0(v14, bswap32(v12[1]) >> 16);
        *(_DWORD *)buf = 136315650;
        *(void *)uint64_t v51 = v31;
        *(_WORD *)&v51[8] = 1024;
        v52[0] = v15;
        LOWORD(v52[1]) = 2080;
        *(void *)((char *)&v52[1] + 2) = v32;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "type=%s, flag=0x%04x, lorv=%s\n",  buf,  0x1Cu);
      }
    }

    if (v14 <= 0x10 && ((1 << v14) & 0x117C0) != 0)
    {
      uint64_t v18 = v12 + 1;
      if (v15)
      {
        LODWORD(v19) = 2;
      }

      else
      {
        uint64_t v19 = bswap32(*v18) >> 16;
        if (v19 + 4 > v11)
        {
          if (dword_10008BA20)
          {
            uint32_t v37 = (os_log_s *)ne_log_obj(v5);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)uint64_t v51 = v14;
              *(_WORD *)&v51[4] = 1024;
              *(_DWORD *)&v51[6] = v19;
              LOWORD(v52[0]) = 2048;
              *(void *)((char *)v52 + 2) = v11 - 4;
              _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "invalid ISAKMP-SA attr(%d), attr-len %d, overall-len %lu\n",  buf,  0x18u);
            }
          }

          return 0xFFFFFFFFLL;
        }

        uint64_t v18 = v12 + 2;
      }

      size_t v20 = v19;
      int v21 = sub_10003F4BC(v19);
      if (!v21) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v8 = v21;
      uint64_t v5 = memcpy((void *)v21[1], v18, v20);
    }

    switch(v14)
    {
      case 1u:
        unsigned int *v45 = bswap32(v12[1]) >> 16;
        if (v15) {
          goto LABEL_62;
        }
        break;
      case 2u:
        *(_DWORD *)(a2 + 52) = bswap32(v12[1]) >> 16;
        if (!v15) {
          break;
        }
        goto LABEL_62;
      case 3u:
        *(_DWORD *)(a2 + 48) = bswap32(v12[1]) >> 16;
        if (!v15) {
          break;
        }
        goto LABEL_62;
      case 4u:
        *(_DWORD *)(a2 + 60) = bswap32(v12[1]) >> 16;
        if (!v15) {
          break;
        }
        goto LABEL_62;
      case 5u:
        if (v12[1] != 256) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)(*(void *)(a2 + 64) + 4LL) = 1;
        if (!v15) {
          break;
        }
        goto LABEL_62;
      case 6u:
        *(void *)(*(void *)(a2 + 64) + 8LL) = v8;
        if (!v15) {
          break;
        }
        goto LABEL_62;
      case 7u:
        sub_10003F5BC(v8);
        size_t v22 = bswap32(v12[1]) >> 16;
        if (!v15)
        {
          *(_DWORD *)(*(void *)(a2 + 64) + 16LL) = v22;
          LODWORD(v25) = v22;
          goto LABEL_70;
        }

        uint64_t v23 = *(void *)(a2 + 64);
        *(_DWORD *)(v23 + 16) = 0;
        BOOL v24 = (void *)(v23 + 16);
        if (v22 + 4 > v11)
        {
          if (dword_10008BA20)
          {
            int v39 = (os_log_s *)ne_log_obj(v24);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
              sub_100056AF0();
            }
          }

          return 0xFFFFFFFFLL;
        }

        uint64_t v5 = memcpy(v24, v12 + 2, v22);
        *(_DWORD *)(*(void *)(a2 + 64) + 16LL) = bswap32(*(_DWORD *)(*(void *)(a2 + 64) + 16LL));
        goto LABEL_62;
      case 8u:
        sub_10003F5BC(v8);
        size_t v25 = bswap32(v12[1]) >> 16;
        if (!v15)
        {
          *(_DWORD *)(*(void *)(a2 + 64) + 20LL) = v25;
          goto LABEL_69;
        }

        uint64_t v26 = *(void *)(a2 + 64);
        *(_DWORD *)(v26 + 20) = 0;
        uint64_t v27 = (void *)(v26 + 20);
        if (v25 + 4 > v11)
        {
          if (dword_10008BA20)
          {
            int v40 = (os_log_s *)ne_log_obj(v27);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
              sub_100056B58();
            }
          }

          return 0xFFFFFFFFLL;
        }

        uint64_t v5 = memcpy(v27, v12 + 2, v25);
        *(_DWORD *)(*(void *)(a2 + 64) + 20LL) = bswap32(*(_DWORD *)(*(void *)(a2 + 64) + 20LL));
        goto LABEL_62;
      case 9u:
        *(void *)(*(void *)(a2 + 64) + 24LL) = v8;
        if (!v15) {
          break;
        }
        goto LABEL_62;
      case 0xAu:
        *(void *)(*(void *)(a2 + 64) + 32LL) = v8;
        if (!v15) {
          break;
        }
        goto LABEL_62;
      case 0xBu:
        unsigned int v28 = bswap32(v12[1]) >> 16;
        if ((((_WORD)v28 - 1) & 0xFFFE) != 0) {
          unsigned int v28 = 1;
        }
        goto LABEL_46;
      case 0xCu:
        if (v7 && (*v7 & 0xFF7F) == 0xB00)
        {
          if (v46 == 2)
          {
            *(void *)(a2 + 32) = sub_10000D3D0((uint64_t)v8);
            sub_10003F5BC(v8);
            if (*(void *)(a2 + 32))
            {
              unsigned int v28 = 2;
LABEL_46:
              int v46 = v28;
              if (v15) {
                goto LABEL_62;
              }
              break;
            }

            if (!dword_10008BA20) {
              return 0xFFFFFFFFLL;
            }
            __int128 v44 = (os_log_s *)ne_log_obj(v5);
            if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
              return 0xFFFFFFFFLL;
            }
LABEL_103:
            sub_100056C4C();
            return 0xFFFFFFFFLL;
          }

          if (v46 == 1)
          {
            *(void *)(a2 + 16) = sub_10000D3D0((uint64_t)v8);
            sub_10003F5BC(v8);
            if (*(void *)(a2 + 16))
            {
              unsigned int v28 = 1;
              goto LABEL_46;
            }

            if (!dword_10008BA20) {
              return 0xFFFFFFFFLL;
            }
            __int128 v43 = (os_log_s *)ne_log_obj(v5);
            if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
              return 0xFFFFFFFFLL;
            }
            goto LABEL_103;
          }

          sub_10003F5BC(v8);
          if (dword_10008BA20)
          {
            __int128 v42 = (os_log_s *)ne_log_obj(v41);
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
              sub_100056BEC();
            }
          }

          return 0xFFFFFFFFLL;
        }

        if (dword_10008BA20
          && (v30 = (os_log_s *)ne_log_obj(v5), uint64_t v5 = (void *)os_log_type_enabled(v30, OS_LOG_TYPE_ERROR), (_DWORD)v5))
        {
          sub_100056BC0(&v48, v49);
          if (v15)
          {
LABEL_62:
            int v9 = v11 - 4;
            BOOL v10 = v12 + 2;
            goto LABEL_72;
          }
        }

        else
        {
LABEL_61:
          if (v15) {
            goto LABEL_62;
          }
        }

        break;
      case 0xEu:
        unsigned int v29 = bswap32(v12[1]) >> 16;
        if ((v29 & 7) != 0)
        {
          if (dword_10008BA20)
          {
            BOOL v38 = (os_log_s *)ne_log_obj(v5);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
              sub_100056C78();
            }
          }

          return 0xFFFFFFFFLL;
        }

        *(_DWORD *)(a2 + 44) = v29;
        ++v47;
        if (v15) {
          goto LABEL_62;
        }
        break;
      case 0x10u:
        *(void *)(*(void *)(a2 + 64) + 40LL) = v8;
        if (!v15) {
          break;
        }
        goto LABEL_62;
      default:
        goto LABEL_61;
    }

    LODWORD(v25) = bswap32(v12[1]) >> 16;
LABEL_69:
    LODWORD(v22) = v25;
LABEL_70:
    int v9 = v11 - v25 - 4;
    if (v9 < 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v36 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
          sub_100056A20();
        }
      }

      return 0xFFFFFFFFLL;
    }

    BOOL v10 = (unsigned __int16 *)((char *)v12 + v22 + 4);
LABEL_72:
    uint64_t v7 = v12;
  }

  while (v9 > 0);
  if (v47 && (*v45 | 4) == 5)
  {
    if (dword_10008BA20)
    {
      int v33 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        sub_100056A8C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  return 0LL;
}

uint64_t sub_10000CE88(uint64_t result)
{
  switch((int)result)
  {
    case 65002:
      uint64_t result = 65001LL;
      break;
    case 65003:
    case 65005:
    case 65007:
    case 65009:
      return result;
    case 65004:
      uint64_t result = 65003LL;
      break;
    case 65006:
      uint64_t result = 65005LL;
      break;
    case 65008:
      uint64_t result = 65007LL;
      break;
    case 65010:
      uint64_t result = 65009LL;
      break;
    default:
      if ((_DWORD)result == 64222) {
        unsigned int v1 = 64221;
      }
      else {
        unsigned int v1 = result;
      }
      if ((_DWORD)result == 64224) {
        uint64_t result = 64223LL;
      }
      else {
        uint64_t result = v1;
      }
      break;
  }

  return result;
}

void sub_10000CEFC(uint64_t *a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v51 = 0u;
  __int128 v52 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  memset(v48, 0, sizeof(v48));
  uint64_t v3 = sub_10000C768(a1[1], (uint64_t)v48);
  if ((v3 & 0x80000000) == 0)
  {
    if (a2)
    {
      uint64_t v4 = DWORD2(v49);
      do
      {
        if ((_DWORD)v4 != *(_DWORD *)(a2 + 40) && dword_10008BA20 != 0)
        {
          unsigned int v6 = (os_log_s *)ne_log_obj(v3);
          uint64_t v3 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v3)
          {
            int v22 = *(_DWORD *)(a2 + 4);
            int v23 = *(_DWORD *)(a2 + 8);
            int v24 = *(unsigned __int8 *)(*a1 + 4);
            int v25 = *(unsigned __int8 *)(a1[1] + 4);
            uint64_t v26 = sub_10003E8A0(1, *(unsigned int *)(a2 + 40));
            uint64_t v27 = sub_10003E8A0(1, v4);
            *(_DWORD *)buf = 67110402;
            int v54 = v22;
            __int16 v55 = 1024;
            int v56 = v23;
            __int16 v57 = 1024;
            int v58 = v24;
            __int16 v59 = 1024;
            int v60 = v25;
            __int16 v61 = 2080;
            CFTypeID v62 = v26;
            __int16 v63 = 2080;
            *(void *)v64 = v27;
            _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "rejected enctype: DB(prop#%d:trns#%d):Peer(prop#%d:trns#%d) = %s:%s\n",  buf,  0x2Eu);
          }
        }

        uint64_t v7 = v50;
        if ((_DWORD)v50 != *(_DWORD *)(a2 + 48) && dword_10008BA20 != 0)
        {
          int v9 = (os_log_s *)ne_log_obj(v3);
          uint64_t v3 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v3)
          {
            int v28 = *(_DWORD *)(a2 + 4);
            int v29 = *(_DWORD *)(a2 + 8);
            int v30 = *(unsigned __int8 *)(*a1 + 4);
            int v31 = *(unsigned __int8 *)(a1[1] + 4);
            int v32 = sub_10003E8A0(3, *(unsigned int *)(a2 + 48));
            int v33 = sub_10003E8A0(3, v7);
            *(_DWORD *)buf = 67110402;
            int v54 = v28;
            __int16 v55 = 1024;
            int v56 = v29;
            __int16 v57 = 1024;
            int v58 = v30;
            __int16 v59 = 1024;
            int v60 = v31;
            __int16 v61 = 2080;
            CFTypeID v62 = v32;
            __int16 v63 = 2080;
            *(void *)v64 = v33;
            _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "rejected authmethod: DB(prop#%d:trns#%d):Peer(prop#%d:trns#%d) = %s:%s\n",  buf,  0x2Eu);
          }
        }

        uint64_t v10 = DWORD1(v50);
        if (DWORD1(v50) != *(_DWORD *)(a2 + 52))
        {
          if (dword_10008BA20)
          {
            unint64_t v11 = (os_log_s *)ne_log_obj(v3);
            uint64_t v3 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
            if ((_DWORD)v3)
            {
              int v34 = *(_DWORD *)(a2 + 4);
              int v35 = *(_DWORD *)(a2 + 8);
              int v36 = *(unsigned __int8 *)(*a1 + 4);
              int v37 = *(unsigned __int8 *)(a1[1] + 4);
              BOOL v38 = sub_10003E8A0(2, *(unsigned int *)(a2 + 52));
              int v39 = sub_10003E8A0(2, v10);
              *(_DWORD *)buf = 67110402;
              int v54 = v34;
              __int16 v55 = 1024;
              int v56 = v35;
              __int16 v57 = 1024;
              int v58 = v36;
              __int16 v59 = 1024;
              int v60 = v37;
              __int16 v61 = 2080;
              CFTypeID v62 = v38;
              __int16 v63 = 2080;
              *(void *)v64 = v39;
              _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "rejected hashtype: DB(prop#%d:trns#%d):Peer(prop#%d:trns#%d) = %s:%s\n",  buf,  0x2Eu);
            }
          }
        }

        uint64_t v12 = LODWORD(v51[1]);
        if (v51[1] != *(void **)(a2 + 72))
        {
          if (dword_10008BA20)
          {
            int v13 = (os_log_s *)ne_log_obj(v3);
            uint64_t v3 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
            if ((_DWORD)v3)
            {
              int v16 = *(_DWORD *)(a2 + 4);
              int v46 = *(_DWORD *)(a2 + 8);
              int v17 = *(unsigned __int8 *)(*a1 + 4);
              int v18 = *(unsigned __int8 *)(a1[1] + 4);
              uint64_t v19 = sub_10003E8A0(2, *(unsigned int *)(a2 + 72));
              int v20 = *(_DWORD *)(a2 + 76);
              int v21 = sub_10003E8A0(2, v12);
              *(_DWORD *)buf = 67110914;
              int v54 = v16;
              __int16 v55 = 1024;
              int v56 = v46;
              __int16 v57 = 1024;
              int v58 = v17;
              __int16 v59 = 1024;
              int v60 = v18;
              __int16 v61 = 2080;
              CFTypeID v62 = v19;
              __int16 v63 = 1024;
              *(_DWORD *)v64 = v20;
              *(_WORD *)&v64[4] = 2080;
              *(void *)&v64[6] = v21;
              __int16 v65 = 1024;
              int v66 = HIDWORD(v51[1]);
              _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "rejected prf: DB(prop#%d:trns#%d):Peer(prop#%d:trns#%d) = %s.%d:%s.%d\n",  buf,  0x3Au);
            }
          }
        }

        uint64_t v14 = HIDWORD(v50);
        if (HIDWORD(v50) != *(_DWORD *)(a2 + 60))
        {
          if (dword_10008BA20)
          {
            int v15 = (os_log_s *)ne_log_obj(v3);
            uint64_t v3 = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
            if ((_DWORD)v3)
            {
              int v40 = *(_DWORD *)(a2 + 4);
              int v41 = *(_DWORD *)(a2 + 8);
              int v42 = *(unsigned __int8 *)(*a1 + 4);
              int v43 = *(unsigned __int8 *)(a1[1] + 4);
              __int128 v44 = sub_10003E8A0(4, *(unsigned int *)(a2 + 60));
              int v45 = sub_10003E8A0(4, v14);
              *(_DWORD *)buf = 67110402;
              int v54 = v40;
              __int16 v55 = 1024;
              int v56 = v41;
              __int16 v57 = 1024;
              int v58 = v42;
              __int16 v59 = 1024;
              int v60 = v43;
              __int16 v61 = 2080;
              CFTypeID v62 = v44;
              __int16 v63 = 2080;
              *(void *)v64 = v45;
              _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "rejected dh_group: DB(prop#%d:trns#%d):Peer(prop#%d:trns#%d) = %s:%s\n",  buf,  0x2Eu);
            }
          }
        }

        a2 = *(void *)(a2 + 80);
      }

      while (a2);
    }

    if (v51[0]) {
      sub_100029C48((void *)v51[0]);
    }
  }

uint64_t sub_10000D3D0(uint64_t result)
{
  if (result)
  {
    if (*(void *)result == 4LL) {
      return bswap32(**(_DWORD **)(result + 8));
    }
    if (*(void *)result == 2LL) {
      return bswap32(**(unsigned __int16 **)(result + 8)) >> 16;
    }
    if (dword_10008BA20)
    {
      unsigned int v1 = (os_log_s *)ne_log_obj(result);
      uint64_t result = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result) {
        return result;
      }
      sub_100056CD8();
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10000D45C(uint64_t a1)
{
  uint64_t v2 = sub_10000B778(*(unint64_t **)(a1 + 224), 1u);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = (void *)sub_10000D4F0(a1, (uint64_t)v2);
  sub_10000BFD4(v3);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 232) = sub_10000D8C8(v4, *(void *)(a1 + 256));
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = (void *)v4[2];
    do
    {
      unsigned int v6 = (void *)v5[3];
      free(v5);
      uint64_t v5 = v6;
    }

    while (v6);
  }

  while (v4);
  if (*(void *)(a1 + 232)) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10000D4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  *(void *)(a1 + 128) = 0LL;
  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)a1) {
      sub_100056E44();
    }
  }

  for (uint64_t i = 0LL; i != 256; ++i)
  {
    uint64_t v6 = *(void *)(a2 + 8 * i);
    if (v6)
    {
      if (dword_10008BA20)
      {
        uint64_t v7 = (os_log_s *)ne_log_obj(a1);
        BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
        uint64_t v6 = *(void *)(a2 + 8 * i);
        if (v8)
        {
          *(_DWORD *)buf = 67109376;
          int v43 = i;
          __int16 v44 = 2048;
          uint64_t v45 = v6;
          _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "pair[%d]: %p\n", buf, 0x12u);
          uint64_t v6 = *(void *)(a2 + 8 * i);
        }
      }

      sub_100037B88(7LL, v6);
      int v9 = *(uint64_t **)(a2 + 8 * i);
      a1 = (uint64_t)sub_100036BF0(v9);
      if (a1)
      {
        uint64_t v10 = (uint64_t *)a1;
        uint64_t v11 = a1;
        while (1)
        {
          uint64_t v12 = *(void *)(v3 + 120);
          if (v12) {
            break;
          }
LABEL_23:
          uint64_t v11 = *(void *)(v11 + 40);
          if (!v11)
          {
            sub_100036658(v10);
            goto LABEL_54;
          }
        }

        while (1)
        {
          if (dword_10008BA20)
          {
            int v13 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
              sub_100056E18(&v40, v41);
            }
          }

          sub_1000370F4(7LL, v11);
          if (dword_10008BA20)
          {
            int v15 = (os_log_s *)ne_log_obj(v14);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
              sub_100056DEC(&v38, v39);
            }
          }

          sub_1000370F4(7LL, v12);
          a1 = sub_100035A44(*(void *)(v3 + 256), v11, v12, *(unsigned __int8 *)(v3 + 60));
          if (a1) {
            break;
          }
          if (dword_10008BA20)
          {
            int v16 = (os_log_s *)ne_log_obj(0LL);
            a1 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
            if ((_DWORD)a1) {
              sub_100056D68(&v36, v37);
            }
          }

          uint64_t v12 = *(void *)(v12 + 40);
          if (!v12) {
            goto LABEL_23;
          }
        }

        uint64_t v17 = a1;
        sub_100036658(v10);
        if (dword_10008BA20)
        {
          int v18 = (os_log_s *)ne_log_obj(a1);
          a1 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)a1) {
            sub_100056DC0(&v34, v35);
          }
        }

        *(void *)(v3 + 128) = v17;
        if (v9)
        {
          uint64_t v19 = 0LL;
          while (1)
          {
            uint64_t v20 = *(void *)(v17 + 32);
            if (!v20) {
              break;
            }
            while (*(_DWORD *)v20 != *(unsigned __int8 *)(*v9 + 5))
            {
              uint64_t v20 = *(void *)(v20 + 72);
              if (!v20) {
                goto LABEL_54;
              }
            }

            int v21 = *(int **)(v20 + 64);
            if (*((void *)v21 + 2)) {
              break;
            }
            int v22 = *v21;
            int v23 = v9;
            while (v22 != *(unsigned __int8 *)(v23[1] + 4))
            {
              int v23 = (uint64_t *)v23[3];
              if (!v23) {
                goto LABEL_54;
              }
            }

            a1 = (uint64_t)calloc(1uLL, 0x20uLL);
            if (!a1)
            {
              if (dword_10008BA20)
              {
                int v29 = (os_log_s *)ne_log_obj(0LL);
                a1 = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
                if ((_DWORD)a1) {
                  sub_100056D94(&v32, v33);
                }
              }

              break;
            }

            __int128 v24 = *(_OWORD *)v23;
            *(_OWORD *)a1 = *(_OWORD *)v23;
            int v25 = (void *)v19;
            do
            {
              if (!v25)
              {
                uint64_t v19 = a1;
                goto LABEL_48;
              }

              uint64_t v26 = v25;
              int v25 = (void *)v25[2];
            }

            while (v25);
            uint64_t v27 = v26 + 2;
            if (*v26 == (void)v24)
            {
              do
              {
                int v28 = v26;
                uint64_t v26 = (void *)v26[3];
              }

              while (v26);
              uint64_t v27 = v28 + 3;
            }

            uint64_t *v27 = a1;
LABEL_48:
            int v9 = (uint64_t *)v9[2];
            if (!v9)
            {
              if (!v19) {
                break;
              }
              return v19;
            }
          }
        }
      }
    }

LABEL_54:
    ;
  }

  if (dword_10008BA20)
  {
    int v30 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      sub_100056D3C();
    }
  }

  return 0LL;
}

void *sub_10000D8C8(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  signed int v4 = 8 * (*(_BYTE *)(a2 + 80) == 16);
  if (a1)
  {
    uint64_t v5 = a1;
    do
    {
      v4 += *(unsigned __int8 *)(*v5 + 6LL) + (bswap32(*(unsigned __int16 *)(v5[1] + 2LL)) >> 16) + 8;
      uint64_t v5 = (void *)v5[2];
    }

    while (v5);
  }

  uint64_t v6 = sub_10003F4BC(v4);
  uint64_t v7 = v6;
  if (v6)
  {
    BOOL v8 = (int8x8_t *)v6[1];
    v8->i16[1] = bswap32(v4) >> 16;
    if (*(_BYTE *)(a2 + 80) == 16) {
      *v8++ = vrev32_s8(*(int8x8_t *)(*(void *)(a2 + 64) + 24LL));
    }
    if (v3)
    {
      int v9 = 0LL;
      do
      {
        uint64_t v10 = v8;
        uint64_t v11 = (const void *)*v3;
        uint64_t v12 = *(unsigned __int8 *)(*v3 + 6LL);
        unsigned int v13 = *(unsigned __int16 *)(v3[1] + 2LL);
        if (v9)
        {
          v9->i8[0] = 2;
          uint64_t v11 = (const void *)*v3;
        }

        uint64_t v14 = v12 + 8;
        size_t v15 = __rev16(v13);
        memcpy(v10, v11, v12 + 8);
        v10->i8[0] = 0;
        v10->i16[1] = bswap32(v15 + v14) >> 16;
        v10->i8[7] = 1;
        bzero(&v10[1], *(unsigned __int8 *)(*v3 + 6LL));
        int v16 = (int8x8_t *)((char *)v10 + v14);
        memcpy(v16, (const void *)v3[1], v15);
        v16->i8[0] = 0;
        v16->i16[1] = v13;
        BOOL v8 = (int8x8_t *)((char *)v16 + v15);
        int v9 = v10;
        uint64_t v3 = (void *)v3[2];
      }

      while (v3);
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v17 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_100056E74();
    }
  }

  return v7;
}

uint64_t sub_10000DA44(uint64_t a1)
{
  uint64_t v2 = sub_10000B778(*(unint64_t **)(a1 + 224), 1u);
  if (!v2)
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100056EA0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v3 = v2;
  signed int v4 = sub_10000B778(*(unint64_t **)(a1 + 232), 1u);
  if (!v4)
  {
    if (dword_10008BA20)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_100056EA0();
      }
    }

    sub_10000BFD4(v3);
    return 0xFFFFFFFFLL;
  }

  uint64_t v5 = v4;
  uint64_t v6 = 0LL;
  int v7 = 0;
  int v8 = 0;
  do
  {
    if (*((void *)v4 + v6))
    {
      ++v8;
      int v7 = v6;
    }

    ++v6;
  }

  while (v6 != 256);
  if (v8 == 1)
  {
    uint64_t v13 = v7;
    if (v3[v7]) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = dword_10008BA20 == 0;
    }
    if (!v14)
    {
      size_t v15 = (os_log_s *)ne_log_obj(v4);
      signed int v4 = (void *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v4)
      {
        *(_DWORD *)buf = 67109120;
        int v45 = 256;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "invalid proposal number:%d received.\n",  buf,  8u);
      }
    }

    int v16 = (unsigned __int8 **)v5[v13];
    if (v16[3])
    {
      if (dword_10008BA20)
      {
        uint64_t v17 = (os_log_s *)ne_log_obj(v4);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_100057024();
        }
      }
    }

    else
    {
      int v21 = (void *)v3[v13];
      if (v21)
      {
        while (2)
        {
          int v22 = v21;
          while (v16[1][4] != *(unsigned __int8 *)(v22[1] + 4LL))
          {
            int v22 = (void *)v22[3];
            if (!v22)
            {
              if (!dword_10008BA20) {
                goto LABEL_33;
              }
              int v37 = (os_log_s *)ne_log_obj(v4);
              BOOL v36 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
              if (v36) {
                sub_100056FF8();
              }
              goto LABEL_76;
            }
          }

          int v23 = *v16;
          uint64_t v24 = *v22;
          if ((*v16)[4] != *(unsigned __int8 *)(*v22 + 4LL) && dword_10008BA20 != 0)
          {
            uint64_t v26 = (os_log_s *)ne_log_obj(v4);
            signed int v4 = (void *)os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
            int v23 = *v16;
            uint64_t v24 = *v22;
            if ((_DWORD)v4)
            {
              int v27 = *(unsigned __int8 *)(v24 + 4);
              int v28 = v23[4];
              *(_DWORD *)buf = 67109376;
              int v45 = v27;
              __int16 v46 = 1024;
              int v47 = v28;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "proposal #%d mismatched, expected #%d.\n",  buf,  0xEu);
              int v23 = *v16;
              uint64_t v24 = *v22;
            }
          }

          if (v23[5] == *(unsigned __int8 *)(v24 + 5))
          {
            if (v23[7] != 1 && dword_10008BA20 != 0)
            {
              int v30 = (os_log_s *)ne_log_obj(v4);
              signed int v4 = (void *)os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v4)
              {
                int v31 = (*v16)[7];
                *(_DWORD *)buf = 67109120;
                int v45 = v31;
                _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "#of transform is %d, but expected 1.\n",  buf,  8u);
              }
            }

            if (v16[1][5] != *(unsigned __int8 *)(v22[1] + 5LL))
            {
              if (dword_10008BA20)
              {
                char v32 = (os_log_s *)ne_log_obj(v4);
                signed int v4 = (void *)os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v4)
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "transform number has been modified.\n",  buf,  2u);
                }
              }
            }

            if (*((unsigned __int16 *)v16[1] + 3) != *(unsigned __int16 *)(v22[1] + 6LL))
            {
              if (dword_10008BA20)
              {
                int v33 = (os_log_s *)ne_log_obj(v4);
                if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "reserved field should be zero.\n",  buf,  2u);
                }
              }
            }

            signed int v4 = (void *)memcmp( v16[1] + 8,  (const void *)(v22[1] + 8LL),  (bswap32(*(unsigned __int16 *)(v22[1] + 2LL)) >> 16) - 8LL);
            if ((_DWORD)v4)
            {
              if (dword_10008BA20)
              {
                char v34 = (os_log_s *)ne_log_obj(v4);
                signed int v4 = (void *)os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v4)
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "attribute has been modified.\n",  buf,  2u);
                }
              }
            }

            int v16 = (unsigned __int8 **)v16[2];
            int v21 = (void *)v21[2];
            if (v16 && v21) {
              continue;
            }
            if ((v16 != 0LL) != (v21 != 0LL)) {
              goto LABEL_70;
            }
            char v40 = (void *)sub_10000D4F0(a1, (uint64_t)v5);
            if (v40)
            {
              int v41 = v40;
              uint64_t v19 = *(void **)(a1 + 232);
              *(void *)(a1 + 232) = sub_10000D8C8(v40, *(void *)(a1 + 256));
              do
              {
                int v42 = v41;
                int v41 = (void *)v41[2];
                do
                {
                  int v43 = (void *)v42[3];
                  free(v42);
                  int v42 = v43;
                }

                while (v43);
              }

              while (v41);
              if (*(void *)(a1 + 232)) {
                uint64_t v12 = 0LL;
              }
              else {
                uint64_t v12 = 0xFFFFFFFFLL;
              }
              goto LABEL_34;
            }

            goto LABEL_33;
          }

          break;
        }

        if (!dword_10008BA20) {
          goto LABEL_33;
        }
        int v39 = (os_log_s *)ne_log_obj(v4);
        BOOL v36 = os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
        if (v36) {
          sub_100056F7C();
        }
      }

      else
      {
LABEL_70:
        if (!dword_10008BA20) {
          goto LABEL_33;
        }
        int v35 = (os_log_s *)ne_log_obj(v4);
        BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
        if (v36) {
          sub_100056F50();
        }
      }

LABEL_76:
      if (dword_10008BA20)
      {
        char v38 = (os_log_s *)ne_log_obj(v36);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          sub_100056F24();
        }
      }
    }
  }

  else if (v8)
  {
    if (dword_10008BA20)
    {
      int v18 = (os_log_s *)ne_log_obj(v4);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100056ECC();
      }
    }
  }

  else if (dword_10008BA20)
  {
    int v9 = (os_log_s *)ne_log_obj(v4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100056EF8();
    }
  }

      sub_10003F5BC(v5);
    }

    else if (dword_10008BA20)
    {
      int v18 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v17 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_100058E74();
    }
  }

  int v31 = *(void **)(a1 + 160);
  if (v31)
  {
    sub_10003F5BC(v31);
    *(void *)(a1 + 160) = 0LL;
  }

  char v32 = *(void **)(a1 + 184);
  if (v32)
  {
    sub_10003F5BC(v32);
    *(void *)(a1 + 184) = 0LL;
  }

  int v33 = *(void **)(a1 + 320);
  if (v33)
  {
    sub_10003F5BC(v33);
    *(void *)(a1 + 320) = 0LL;
  }

  sub_10002C308(*(void **)(a1 + 304));
  *(void *)(a1 + 304) = 0LL;
  return 0xFFFFFFFFLL;
}

LABEL_33:
  uint64_t v19 = 0LL;
  uint64_t v12 = 0xFFFFFFFFLL;
LABEL_34:
  sub_10000BFD4(v5);
  sub_10000BFD4(v3);
  if (v19) {
    sub_10003F5BC(v19);
  }
  return v12;
}

        v5 -= 4;
        v6 += 2;
LABEL_34:
        if (v5 > 0) {
          continue;
        }
        int v21 = DWORD1(v50) != 0;
LABEL_54:
        if (v3 == 2 && !v21)
        {
          if (dword_10008BA20)
          {
            int v18 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              sub_1000577D4();
            }
          }

          return 0xFFFFFFFFLL;
        }

        if (v3 == 3)
        {
          if (*(_BYTE *)(a2 + 5) != 11) {
            int v21 = 1;
          }
          if (!v21)
          {
            if (dword_10008BA20)
            {
              int v22 = (os_log_s *)ne_log_obj(a1);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                sub_1000577A8();
              }
            }

            return 0xFFFFFFFFLL;
          }
        }

        return 0LL;
      case 4u:
        if (!v9)
        {
          if (dword_10008BA20)
          {
            int v27 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
              sub_10005771C();
            }
          }

          return 0xFFFFFFFFLL;
        }

        if ((v11 - 61443) >= 2 && (v11 - 3) > 1)
        {
          if (dword_10008BA20)
          {
            BOOL v36 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
              sub_100057748();
            }
          }

          return 0xFFFFFFFFLL;
        }

        if (dword_10008BA20)
        {
          BOOL v14 = (os_log_s *)ne_log_obj(a1);
          a1 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
          if (a1) {
            sub_100057800(&v41, v42);
          }
        }

        goto LABEL_33;
      case 5u:
        if (v9)
        {
          switch((int)v11)
          {
            case 1:
              if (v3 != 2 || *v38 == 2) {
                goto LABEL_33;
              }
              break;
            case 2:
              if (v3 != 2 || *v38 == 3) {
                goto LABEL_33;
              }
              break;
            case 3:
            case 4:
              if (dword_10008BA20)
              {
                char v32 = (os_log_s *)ne_log_obj(a1);
                if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
                  sub_10005792C();
                }
              }

              return 0xFFFFFFFFLL;
            case 5:
              if (v3 != 2 || *v38 == 5) {
                goto LABEL_33;
              }
              break;
            case 6:
              if (v3 != 2 || *v38 == 6) {
                goto LABEL_33;
              }
              break;
            case 7:
              if (v3 != 2 || *v38 == 7) {
                goto LABEL_33;
              }
              break;
            default:
              if (dword_10008BA20)
              {
                int v35 = (os_log_s *)ne_log_obj(a1);
                if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
                  sub_100057858();
                }
              }

              return 0xFFFFFFFFLL;
          }

          if (dword_10008BA20)
          {
            uint64_t v17 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
              sub_1000578B8(v38, v11, v17);
            }
          }
        }

        else if (dword_10008BA20)
        {
          int v28 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_10005782C();
          }
        }

        return 0xFFFFFFFFLL;
      case 6u:
        if (v9) {
          goto LABEL_33;
        }
        if (dword_10008BA20)
        {
          int v29 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            sub_100057B00();
          }
        }

        return 0xFFFFFFFFLL;
      case 7u:
      case 8u:
      case 9u:
        if (dword_10008BA20)
        {
          int v23 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_10005752C();
          }
        }

        return 0xFFFFFFFFLL;
      default:
        if (dword_10008BA20)
        {
          uint64_t v24 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            sub_100057214();
          }
        }

        return 0xFFFFFFFFLL;
    }
  }

      free(v6);
LABEL_34:
      sub_100036658(v3);
    }

    else if (dword_10008BA20)
    {
      int v22 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_1000622E8();
      }
    }
  }

  return 0LL;
}

            exit(1);
          }

          if (!dword_10008BA20) {
            goto LABEL_33;
          }
          size_t v15 = (os_log_s *)ne_log_obj(v10);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            goto LABEL_33;
          }
        }

        else
        {
          if (!dword_10008BA20) {
            goto LABEL_33;
          }
          BOOL v14 = (os_log_s *)ne_log_obj(v10);
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            goto LABEL_33;
          }
        }

uint64_t sub_10000E01C(uint64_t a1, int a2)
{
  if ((a1 - 2) < 2)
  {
    if (a2 == 4) {
      return 0LL;
    }
    if (dword_10008BA20)
    {
      uint64_t v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100057050();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if ((_DWORD)a1 == 4)
  {
    uint64_t result = 0LL;
    if (a2 == 2 || a2 == 4) {
      return result;
    }
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_1000570B0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if ((_DWORD)a1 != 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0LL;
  if (a2)
  {
    if (dword_10008BA20)
    {
      uint64_t v3 = (os_log_s *)ne_log_obj(0LL);
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0LL;
      if (v4)
      {
        *(_WORD *)int v7 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "SPI size isn't zero, but IKE proposal.\n",  v7,  2u);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_10000E14C(uint64_t a1)
{
  uint64_t v2 = sub_10000B778(*(unint64_t **)(a1 + 232), 1u);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = 0LL;
  while (!v2[v4])
  {
    if (++v4 == 256) {
      goto LABEL_8;
    }
  }

  uint64_t v6 = (void *)v2[v4];
  if (!v6[3])
  {
    uint64_t v8 = *(void *)(a1 + 128);
    while (1)
    {
      uint64_t v9 = *(void *)(v8 + 32);
      if (!v9) {
        break;
      }
      while (*(_DWORD *)v9 != *(unsigned __int8 *)(*v6 + 5LL)
           || *(_DWORD *)(*(void *)(v9 + 64) + 4LL) != *(unsigned __int8 *)(v6[1] + 5LL))
      {
        uint64_t v9 = *(void *)(v9 + 72);
        if (!v9) {
          goto LABEL_8;
        }
      }

      memcpy((void *)(*v6 + 8LL), (const void *)(v9 - *(void *)(v9 + 8) + 28), *(void *)(v9 + 8));
      uint64_t v5 = 0LL;
      uint64_t v6 = (void *)v6[2];
      if (!v6) {
        goto LABEL_9;
      }
    }
  }

LABEL_8:
  uint64_t v5 = 0xFFFFFFFFLL;
LABEL_9:
  sub_10000BFD4(v3);
  return v5;
}

      sub_100054798("out of dynamic memory in yyensure_buffer_stack()");
    }
  }

  else
  {
    uint64_t result = malloc(8uLL);
    qword_10008B2E8 = (uint64_t)result;
    if (!result) {
      goto LABEL_8;
    }
    *uint64_t result = 0LL;
    qword_10008B328 = 1LL;
    qword_10008B2F0 = 0LL;
  }

  return result;
}

void *sub_10000E22C(int *a1, unint64_t *a2)
{
  uint64_t v3 = sub_10000B778(a2, 1u);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = 0LL;
    signed int v6 = 8;
    if (a1)
    {
      int v7 = a1;
      while (*((void *)v3 + *v7))
      {
        for (uint64_t i = *((void *)v7 + 4); i; uint64_t i = *(void *)(i + 72))
        {
          v6 += *(_DWORD *)(i + 8) + 8;
          for (uint64_t j = *(void *)(i + 64); j; uint64_t j = *(void *)(j + 16))
          {
            uint64_t v5 = (const void **)*((void *)v3 + *v7);
            while (1)
            {
              uint64_t v10 = (unsigned __int8 *)v5[1];
              if (*(_DWORD *)j == v10[4]) {
                break;
              }
              uint64_t v5 = (const void **)v5[3];
              if (!v5) {
                goto LABEL_39;
              }
            }

            v6 += bswap32(*((unsigned __int16 *)v10 + 1)) >> 16;
          }
        }

        int v7 = (int *)*((void *)v7 + 5);
        if (!v7) {
          goto LABEL_14;
        }
      }

      goto LABEL_39;
    }

LABEL_14:
    uint64_t v11 = sub_10003F4BC(v6);
    if (!v11)
    {
      if (dword_10008BA20)
      {
        int v23 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          sub_100057110();
        }
      }

  BOOL v14 = sub_10003F2A0(17LL);
  if (!v14)
  {
    if (dword_10008BA20)
    {
      int v29 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_100059638();
      }
    }

    uint64_t v9 = 0LL;
    uint64_t v16 = 0LL;
    int v18 = 0LL;
    uint64_t v11 = 0xFFFFFFFFLL;
    if (!v8) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }

  uint64_t v9 = v14;
  signed int v6 = (uint64_t **)sub_100026E18(v6, (uint64_t)v14, 13);
  int v31 = v6;
LABEL_16:
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
  {
    size_t v15 = sub_10003F2A0(**(unsigned int **)(a1 + 88));
    if (v15)
    {
      signed int v6 = (uint64_t **)sub_100026E18(v6, (uint64_t)v15, 13);
      int v31 = v6;
    }
  }

  else
  {
    size_t v15 = 0LL;
  }

  if (*(_DWORD *)(*(void *)(a1 + 64) + 208LL))
  {
    uint64_t v16 = sub_10003F2A0(19LL);
    if (v16)
    {
      signed int v6 = (uint64_t **)sub_100026E18(v6, (uint64_t)v16, 13);
      int v31 = v6;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  if (*(_DWORD *)(a1 + 100))
  {
    uint64_t v17 = (void **)sub_10003F2A0(18LL);
    if (v17)
    {
      uint64_t v17 = sub_100015FDC(v17, 0x80000000);
      if (v17)
      {
        int v18 = v17;
        int v31 = (uint64_t **)sub_100026E18(v6, (uint64_t)v17, 13);
        goto LABEL_32;
      }
    }

    if (dword_10008BA20)
    {
      uint64_t v19 = (os_log_s *)ne_log_obj(v17);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_1000596BC();
      }
    }
  }

  int v18 = 0LL;
LABEL_32:
  *(void *)(a1 + 128) = sub_100026E60(&v31, a1);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)(a1 + 64) + 200LL);
  unsigned int v20 = sub_100024B4C(a1);
  if ((_DWORD)v20 == -1)
  {
    if (dword_10008BA20)
    {
      int v25 = (os_log_s *)ne_log_obj(v20);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_100058CE4();
      }
    }

    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = sub_10003DDFC(bswap32(*v5) >> 16);
        uint64_t v16 = 136315138;
        uint64_t v17 = v11;
        uint64_t v9 = "Ignore %s notification.\n";
        uint64_t v12 = v10;
        uint64_t v13 = 12;
LABEL_24:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v16, v13);
        return;
      }
    }

    return;
  }

  if (v7 == 40503) {
    goto LABEL_14;
  }
  if (v7 != 40501)
  {
    if (v7 != 40500) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }

  if (dword_10008BA20)
  {
    uint64_t v8 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      uint64_t v9 = "Ignore LOAD-BALANCE notification, because it is only accepted after Phase 1.\n";
      goto LABEL_23;
    }
  }

    sub_10003F5BC(v7);
    return 0LL;
  }

  uint64_t v11 = v10;
  sub_10003F5BC(v7);
  return v11;
}

        v6 += 8 * v8;
      }

      BOOL v14 = sub_10002F638(*(unsigned __int8 *)(v6 + 3));
      size_t v15 = sub_1000095D4((uint64_t)v12, v13, v14, *(_DWORD *)(v11 + 4));
      uint64_t v16 = v15;
      if (v3)
      {
        if (v15)
        {
          uint64_t v17 = v15[32];
          if (v17 && v17 != a1) {
            goto LABEL_14;
          }
          if ((*((_BYTE *)v15 + 57) & 0x60) != 0)
          {
            if (!dword_10008BA20) {
              goto LABEL_14;
            }
            int v18 = (os_log_s *)ne_log_obj(v15);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_14;
            }
            uint64_t v19 = bswap32(*(_DWORD *)(v11 + 4));
            sub_100024670(v3, *(_DWORD *)(v3 + 84));
            *(_DWORD *)int v35 = 67109378;
            LODWORD(v36[0]) = v19;
            WORD2(v36[0]) = 2080;
            *(void *)((char *)v36 + 6) = &xmmword_100088748;
            unsigned int v20 = v18;
            size_t v21 = "keeping IPsec-SA spi=%u - found valid ISAKMP-SA spi=%s.\n";
            int v22 = 18;
            goto LABEL_40;
          }
        }

        else if (dword_10008BA20)
        {
          log = (os_log_s *)ne_log_obj(0LL);
          int v23 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
          uint64_t v16 = 0LL;
          if (v23)
          {
            uint64_t v24 = bswap32(*(_DWORD *)(v11 + 4));
            *(_DWORD *)int v35 = 67109120;
            LODWORD(v36[0]) = v24;
            _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "Unknown IPsec-SA spi=%u, hmmmm?\n",  v35,  8u);
            uint64_t v16 = 0LL;
          }
        }
      }

      int v25 = (unsigned __int8 *)v13;
      uint64_t v26 = v16;
      int v27 = sub_100040DD0(*(_DWORD *)(qword_10008B848 + 32), *(_BYTE *)(v6 + 3), 0LL, v12, v25, *(_DWORD *)(v11 + 4));
      if (v26)
      {
        sub_100027414(v26);
        int v27 = sub_10004AAC4(v26);
      }

      if (!dword_10008BA20) {
        goto LABEL_14;
      }
      int v28 = (os_log_s *)ne_log_obj(v27);
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      int v29 = bswap32(*(_DWORD *)(v11 + 4));
      *(_DWORD *)int v35 = 67109120;
      LODWORD(v36[0]) = v29;
      unsigned int v20 = v28;
      size_t v21 = "purged IPsec-SA spi=%u.\n";
      int v22 = 8;
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v21, v35, v22);
      goto LABEL_14;
    }

      if ((v12 & 0x8000) != 0) {
        goto LABEL_18;
      }
      goto LABEL_15;
    }

    if (!dword_10008BA20) {
      goto LABEL_14;
    }
    size_t v15 = (os_log_s *)ne_log_obj(v6);
    signed int v6 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
    if (!(_DWORD)v6) {
      goto LABEL_14;
    }
    sub_1000648D4(&v30, v12 & 0x7FFF, &v31);
    if ((v12 & 0x8000) != 0)
    {
LABEL_18:
      uint64_t v9 = v11 - 4;
      v10 += 2;
      goto LABEL_19;
    }

uint64_t sub_10000E474(uint64_t a1)
{
  unsigned int v1 = bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
  if (v1 < 9) {
    return 0LL;
  }
  int v2 = v1 - 8;
  uint64_t v3 = (unsigned __int16 *)(a1 + 8);
  while (2)
  {
    if (v2 <= 3)
    {
      if (dword_10008BA20)
      {
        size_t v15 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_10005713C();
        }
      }

      return 0xFFFFFFFFLL;
    }

    int v4 = *v3;
    unsigned int v5 = bswap32(v4 & 0xFFFFFF7F) >> 16;
    int v6 = (v4 << 8) & 0x8000;
    unsigned int v7 = v3[1];
    uint64_t v8 = __rev16(v7);
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)a1)
      {
        BOOL v36 = sub_10003E560(v5);
        uint64_t v12 = sub_10003E8A0(v5, v8);
        *(_DWORD *)buf = 136315650;
        char v38 = v36;
        __int16 v39 = 1024;
        int v40 = v6;
        __int16 v41 = 2080;
        int v42 = v12;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "type=%s, flag=0x%04x, lorv=%s\n",  buf,  0x1Cu);
      }
    }

    if (v5 > 0xF || ((1 << v5) & 0xE83E) == 0)
    {
      BOOL v11 = v6 == 0;
      if (!(v6 | v7))
      {
        if (dword_10008BA20)
        {
          uint64_t v19 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
            sub_1000571A0(v5, v19, v20);
          }
        }

        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      if (!v6)
      {
        if (dword_10008BA20)
        {
          uint64_t v16 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_100057658();
          }
        }

        return 0xFFFFFFFFLL;
      }

      BOOL v11 = 0;
    }

    switch(v5)
    {
      case 1u:
        a1 = sub_100004D44(v8);
        if ((_DWORD)a1) {
          goto LABEL_14;
        }
        if (dword_10008BA20)
        {
          int v30 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            sub_100057274();
          }
        }

        return 0xFFFFFFFFLL;
      case 2u:
        a1 = sub_100004AF8(v8);
        if ((_DWORD)a1) {
          goto LABEL_14;
        }
        if (dword_10008BA20)
        {
          int v31 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            sub_100057338();
          }
        }

        return 0xFFFFFFFFLL;
      case 3u:
        if ((int)v8 > 65000)
        {
          if (((1 << (v8 + 23)) & 0x13) == 0) {
            goto LABEL_43;
          }
          goto LABEL_14;
        }

        if (v8 <= 5)
        {
          if (((1 << v8) & 0xA) != 0) {
            goto LABEL_14;
          }
          if (((1 << v8) & 0x34) != 0) {
            goto LABEL_43;
          }
        }

        if ((_DWORD)v8 == 64221)
        {
LABEL_14:
          v2 -= 4;
          if (v11)
          {
            v2 -= v8;
            if (v2 < 0)
            {
              if (dword_10008BA20)
              {
                uint64_t v17 = (os_log_s *)ne_log_obj(a1);
                if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
                  sub_1000572D4();
                }
              }

              return 0xFFFFFFFFLL;
            }

            uint64_t v3 = (unsigned __int16 *)((char *)v3 + v8 + 4);
          }

          else
          {
            v3 += 2;
          }

          if (v2 <= 0) {
            return 0LL;
          }
          continue;
        }

        if ((v8 - 64222) >= 3)
        {
LABEL_84:
          if (dword_10008BA20)
          {
            int v35 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
              sub_100057398();
            }
          }
        }

        else
        {
LABEL_43:
          if (dword_10008BA20)
          {
            uint64_t v13 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
              sub_1000573F8(v8, v13);
            }
          }
        }

        return 0xFFFFFFFFLL;
      case 4u:
        a1 = sub_100005134(v8);
        if ((_DWORD)a1) {
          goto LABEL_14;
        }
        if (dword_10008BA20)
        {
          char v32 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            sub_10005746C();
          }
        }

        return 0xFFFFFFFFLL;
      case 5u:
        if (v7 == 256) {
          goto LABEL_14;
        }
        if (dword_10008BA20)
        {
          int v33 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            sub_1000574CC();
          }
        }

        return 0xFFFFFFFFLL;
      case 6u:
      case 7u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0x10u:
        goto LABEL_14;
      case 8u:
      case 9u:
      case 0xAu:
        if (dword_10008BA20)
        {
          int v18 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
            sub_10005752C();
          }
        }

        return 0xFFFFFFFFLL;
      case 0xBu:
        if (dword_10008BA20)
        {
          char v34 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            sub_10005758C();
          }
        }

        return 0xFFFFFFFFLL;
      case 0xFu:
        if (dword_10008BA20)
        {
          size_t v21 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            sub_1000575EC(v21, v22, v23, v24, v25, v26, v27, v28);
          }
        }

        return 0xFFFFFFFFLL;
      default:
        if (v5 == 0x4000) {
          goto LABEL_14;
        }
        if (dword_10008BA20)
        {
          int v29 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            sub_100057214();
          }
        }

        return 0xFFFFFFFFLL;
    }
  }

uint64_t sub_10000E984(BOOL a1, uint64_t a2)
{
  int v3 = a1;
  unsigned int v4 = bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  if (v4 < 9)
  {
    BOOL v21 = 0;
    goto LABEL_54;
  }

  int v5 = v4 - 8;
  int v6 = (unsigned __int16 *)(a2 + 8);
  char v38 = (unsigned __int8 *)(a2 + 5);
  while (2)
  {
    if (v5 <= 3)
    {
      if (dword_10008BA20)
      {
        uint64_t v20 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_1000576B8();
        }
      }

      return 0xFFFFFFFFLL;
    }

    int v7 = *v6;
    unsigned int v8 = bswap32(v7 & 0xFFFFFF7F) >> 16;
    int v9 = (v7 << 8) & 0x8000;
    unsigned int v10 = v6[1];
    uint64_t v11 = __rev16(v10);
    if (dword_10008BA20)
    {
      uint64_t v12 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
      if (a1)
      {
        int v37 = v3;
        size_t v15 = sub_10003E278(v8);
        uint64_t v16 = sub_10003E45C(v8, v11);
        *(_DWORD *)buf = 136315650;
        __int16 v44 = v15;
        int v3 = v37;
        __int16 v45 = 1024;
        int v46 = v9;
        __int16 v47 = 2080;
        char v48 = v16;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "type=%s, flag=0x%04x, lorv=%s\n",  buf,  0x1Cu);
      }
    }

    if (v8 <= 0xF) {
      ++*((_DWORD *)&v49 + v8);
    }
    switch(v8)
    {
      case 1u:
        if (!v9)
        {
          if (dword_10008BA20)
          {
            uint64_t v25 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              sub_10005798C();
            }
          }

          return 0xFFFFFFFFLL;
        }

        if ((unsigned __int16)(v11 - 1) >= 2u)
        {
          if (dword_10008BA20)
          {
            int v30 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              sub_10005758C();
            }
          }

          return 0xFFFFFFFFLL;
        }

        goto LABEL_33;
      case 2u:
        if (v9)
        {
          if (dword_10008BA20)
          {
            uint64_t v13 = (os_log_s *)ne_log_obj(a1);
            a1 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
            if (a1) {
              sub_100057A48(&v39, v40);
            }
          }

          goto LABEL_33;
        }

        if (!v10)
        {
          if (dword_10008BA20)
          {
            int v33 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
              sub_1000579B8();
            }
          }

          return 0xFFFFFFFFLL;
        }

        int v5 = v5 - v11 - 4;
        if (v5 < 0)
        {
          if (dword_10008BA20)
          {
            char v34 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
              sub_1000579E4();
            }
          }

          return 0xFFFFFFFFLL;
        }

        int v6 = (unsigned __int16 *)((char *)v6 + v11 + 4);
        goto LABEL_34;
      case 3u:
        if (!v9)
        {
          if (dword_10008BA20)
          {
            uint64_t v26 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              sub_100057A74();
            }
          }

          return 0xFFFFFFFFLL;
        }

        a1 = sub_100005134(v11);
        if (!a1)
        {
          if (dword_10008BA20)
          {
            int v31 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
              sub_100057AA0();
            }
          }

          return 0xFFFFFFFFLL;
        }

uint64_t sub_10000F02C(uint64_t a1)
{
  unsigned int v1 = bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
  memset(v42, 0, sizeof(v42));
  if (v1 < 9) {
    return 0LL;
  }
  int v2 = v1 - 8;
  int v3 = (unsigned __int16 *)(a1 + 8);
  while (v2 > 3)
  {
    int v4 = *v3;
    unsigned int v5 = bswap32(v4 & 0xFFFFFF7F) >> 16;
    int v6 = (v4 << 8) & 0x8000;
    unsigned int v7 = v3[1];
    uint64_t v8 = __rev16(v7);
    if (dword_10008BA20)
    {
      int v9 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)a1)
      {
        *(_DWORD *)buf = 67109632;
        unsigned int v37 = v5;
        __int16 v38 = 1024;
        int v39 = v6;
        __int16 v40 = 1024;
        int v41 = v8;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "type=%d, flag=0x%04x, lorv=0x%04x\n",  buf,  0x14u);
      }
    }

    if (v5 <= 0xF) {
      ++*((_DWORD *)v42 + v5);
    }
    switch(v5)
    {
      case 1u:
        if (!v6)
        {
          if (dword_10008BA20)
          {
            uint64_t v24 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              sub_10005798C();
            }
          }

          return 0xFFFFFFFFLL;
        }

        if ((unsigned __int16)(v8 - 1) >= 2u)
        {
          if (dword_10008BA20)
          {
            uint64_t v27 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
              sub_10005758C();
            }
          }

          return 0xFFFFFFFFLL;
        }

        goto LABEL_27;
      case 2u:
        if (v6)
        {
          if (dword_10008BA20)
          {
            unsigned int v10 = (os_log_s *)ne_log_obj(a1);
            a1 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
            if ((_DWORD)a1) {
              sub_100057A48(&v32, v33);
            }
          }

          goto LABEL_27;
        }

        if (!v7)
        {
          if (dword_10008BA20)
          {
            int v29 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
              sub_1000579B8();
            }
          }

          return 0xFFFFFFFFLL;
        }

        int v2 = v2 - v8 - 4;
        if (v2 < 0)
        {
          if (dword_10008BA20)
          {
            int v30 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              sub_100057B90();
            }
          }

          return 0xFFFFFFFFLL;
        }

        int v3 = (unsigned __int16 *)((char *)v3 + v8 + 4);
        goto LABEL_28;
      case 3u:
        if (!v6)
        {
          if (dword_10008BA20)
          {
            uint64_t v25 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              sub_100057A74();
            }
          }

          return 0xFFFFFFFFLL;
        }

        a1 = sub_100005134(v8);
        if (!(_DWORD)a1)
        {
          if (dword_10008BA20)
          {
            uint64_t v28 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
              sub_100057AA0();
            }
          }

          return 0xFFFFFFFFLL;
        }

        goto LABEL_27;
      case 4u:
        if (!v6)
        {
          if (dword_10008BA20)
          {
            uint64_t v26 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              sub_10005771C();
            }
          }

          return 0xFFFFFFFFLL;
        }

        if ((v8 - 1) >= 2)
        {
          if ((v8 - 61443) >= 2 && (v8 - 3) > 1)
          {
            if (dword_10008BA20)
            {
              int v31 = (os_log_s *)ne_log_obj(a1);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                sub_100057748();
              }
            }

            return 0xFFFFFFFFLL;
          }

          if (dword_10008BA20)
          {
            uint64_t v11 = (os_log_s *)ne_log_obj(a1);
            a1 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
            if ((_DWORD)a1) {
              sub_100057800(&v34, v35);
            }
          }
        }

LABEL_27:
        v2 -= 4;
        v3 += 2;
LABEL_28:
        if (v2 <= 0) {
          return 0LL;
        }
        break;
      case 5u:
        if (dword_10008BA20)
        {
          uint64_t v16 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_100057BF4(v16, v17, v18, v19, v20, v21, v22, v23);
          }
        }

        return 0xFFFFFFFFLL;
      case 6u:
      case 7u:
      case 8u:
      case 9u:
        if (dword_10008BA20)
        {
          BOOL v14 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            sub_10005752C();
          }
        }

        return 0xFFFFFFFFLL;
      default:
        if (dword_10008BA20)
        {
          size_t v15 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            sub_100057214();
          }
        }

        return 0xFFFFFFFFLL;
    }
  }

  if (dword_10008BA20)
  {
    uint64_t v13 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100057B2C();
    }
  }

  return 0xFFFFFFFFLL;
}

        uint64_t v18 = 0;
        uint64_t v19 = v13 ^ 0xFF;
        do
        {
          --v18;
          uint64_t v20 = v19 > 1;
          v19 >>= 1;
        }

        while (v20);
        goto LABEL_29;
      }

        sub_10003F5BC(v14);
        return 0xFFFFFFFFLL;
      }

      sub_10003F5BC(v14);
      v11 += v12;
      v6 -= v12;
      if (!v6) {
        goto LABEL_15;
      }
    }

    if (dword_10008BA20)
    {
      uint64_t v21 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_100059860();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v8 = 0LL;
LABEL_15:
  if (dword_10008BA20)
  {
    uint64_t v20 = (os_log_s *)ne_log_obj(v5);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      sub_1000597F4();
    }
  }

  return v8;
}

        uint64_t v21 = 0xFFFFFFFFLL;
LABEL_28:
        sub_10004ABA4(v14);
        return v21;
      }

      if (dword_10008BA20)
      {
        uint64_t v20 = (os_log_s *)ne_log_obj(v16);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_10005A834();
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_10005A808();
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v18 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_10005A7DC();
    }
  }

  return 0xFFFFFFFFLL;
}

void *sub_10000F4A8(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 64) + 248LL);
  int v3 = *(unsigned __int8 *)(a1 + 80);
  int v4 = sub_10000F560(a1, 0LL);
  unsigned int v5 = sub_10003F4BC(v4 + 8 * (v3 == 16));
  if (!v5)
  {
    if (dword_10008BA20)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100057C60();
      }
    }

    return 0LL;
  }

  int v6 = v5;
  if (v3 == 16)
  {
    unsigned int v7 = (int8x8_t *)v5[1];
    int8x8_t *v7 = vrev32_s8(*(int8x8_t *)(*(void *)(v2 + 88) + 24LL));
    sub_10000F560(a1, (uint64_t)&v7[1]);
  }

  return v6;
}

uint64_t sub_10000F560(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 248LL);
  if (a2)
  {
    *(_WORD *)a2 = 0;
    *(_BYTE *)(a2 + 4) = *(_DWORD *)(v3 + 4);
    *(_WORD *)(a2 + 5) = 1;
    uint64_t v4 = a2 + 8;
  }

  else
  {
    if (!v3) {
      return 8LL;
    }
    uint64_t v4 = 0LL;
  }

  char v5 = 0;
  int v6 = 0LL;
  char v30 = a2 != 0;
  LODWORD(v7) = 8;
  do
  {
    if (v6) {
      *int v6 = 3;
    }
    if (v4)
    {
      *(_BYTE *)uint64_t v4 = 0;
      *(_BYTE *)(v4 + 4) = *(_DWORD *)(v3 + 8);
      *(_BYTE *)(v4 + 5) = 1;
      uint64_t v8 = (_WORD *)(v4 + 8);
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    uint64_t v9 = *(void *)(v3 + 16);
    if (v9)
    {
      unsigned int __src = bswap32(v9);
      if (v9 < 0x10000) {
        int v10 = 8;
      }
      else {
        int v10 = 12;
      }
      if (v8)
      {
        uint64_t v11 = sub_1000267D4(v8, 11, 1u);
        uint64_t v12 = *(void *)(v3 + 16);
        if (v12 < 0x10000) {
          uint64_t v13 = (uint64_t)sub_1000267D4(v11, 12, v12);
        }
        else {
          uint64_t v13 = sub_100026784(v11, 0xCu, &__src, 4);
        }
        BOOL v14 = (_WORD *)v13;
      }

      else
      {
        BOOL v14 = 0LL;
      }
    }

    else
    {
      int v10 = 0;
      BOOL v14 = v8;
    }

    unint64_t v15 = *(void *)(v3 + 32);
    if (v15)
    {
      unsigned int v31 = bswap32(v15);
      if (v15 >> 16) {
        int v16 = 12;
      }
      else {
        int v16 = 8;
      }
      if (v8)
      {
        uint64_t v17 = sub_1000267D4(v14, 11, 2u);
        unint64_t v18 = *(void *)(v3 + 32);
        if (v18 < 0x10000) {
          uint64_t v19 = (uint64_t)sub_1000267D4(v17, 12, v18);
        }
        else {
          uint64_t v19 = sub_100026784(v17, 0xCu, &v31, 4);
        }
        BOOL v14 = (_WORD *)v19;
      }

      v10 += v16;
    }

    unsigned int v20 = *(_DWORD *)(v3 + 40);
    if (v20)
    {
      if (!v8)
      {
        if (*(_DWORD *)(v3 + 44)) {
          v10 += 8;
        }
        else {
          v10 += 4;
        }
        goto LABEL_41;
      }

      BOOL v14 = sub_1000267D4(v14, 1, v20);
      v10 += 4;
    }

    unsigned int v21 = *(_DWORD *)(v3 + 44);
    if (v21)
    {
      v10 += 4;
      if (v8) {
        BOOL v14 = sub_1000267D4(v14, 14, v21);
      }
    }

LABEL_41:
    uint64_t v22 = *(unsigned int *)(v3 + 48);
    if ((_DWORD)v22)
    {
      if (!v8)
      {
        if (*(_DWORD *)(v3 + 52)) {
          v10 += 8;
        }
        else {
          v10 += 4;
        }
        goto LABEL_50;
      }

      unsigned int v23 = sub_10000CE88(v22);
      BOOL v14 = sub_1000267D4(v14, 3, v23);
      v10 += 4;
    }

    unsigned int v24 = *(_DWORD *)(v3 + 52);
    if (v24)
    {
      v10 += 4;
      if (v8) {
        BOOL v14 = sub_1000267D4(v14, 2, v24);
      }
    }

    sub_10003F5BC(v5);
    if (dword_10008BA20)
    {
      unsigned int v31 = (os_log_s *)ne_log_obj(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        sub_100024670(a1, *(_DWORD *)(a1 + 84));
        *(_DWORD *)int v35 = 136315138;
        v36[0] = &xmmword_100088748;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "purged ISAKMP-SA spi=%s.\n", v35, 0xCu);
      }
    }

    char v32 = *(unsigned int *)(a1 + 112);
    if ((_DWORD)v32)
    {
      sub_10003AA44(v32);
      *(_DWORD *)(a1 + 112) = 0;
    }

    *(_DWORD *)(a1 + 112) = sub_10003A890(1LL, (uint64_t)sub_100025304, a1);
  }

  else if (dword_10008BA20)
  {
    int v33 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "pfkey_dump_sadb returned nothing.\n",  buf,  2u);
    }
  }

          if (!v32)
          {
            v64 = 0LL;
LABEL_134:
            CFRelease(v12);
            CFRelease(v10);
            return v64;
          }

LABEL_50:
    unsigned int v25 = *(_DWORD *)(v3 + 60);
    if (v25 > 0x12) {
      goto LABEL_55;
    }
    if (((1 << v25) & 0x7C026) != 0)
    {
      v10 += 4;
      if (!v8) {
        goto LABEL_55;
      }
      uint64_t v26 = v14;
      int v27 = 4;
      goto LABEL_54;
    }

    if (((1 << v25) & 0x18) != 0)
    {
      v10 += 4;
      if (v8)
      {
        uint64_t v26 = v14;
        int v27 = 5;
        unsigned int v25 = 3;
LABEL_54:
        sub_1000267D4(v26, v27, v25);
      }
    }

  int v27 = malloc(v6 + 1);
  uint64_t v28 = v27;
  if (v27)
  {
    memcpy(v27, &qword_100088548, v6);
    v28[v6] = 0;
  }

  return v28;
}

    uint64_t v28 = 0LL;
LABEL_51:
    sub_10003F5BC(v20);
    return v28;
  }

  if (dword_10008BA20)
  {
    int v27 = (os_log_s *)ne_log_obj(v19);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      sub_10005F584();
    }
  }

  sub_10003F5BC(v18);
  uint64_t v28 = 0LL;
  if (v20) {
    goto LABEL_51;
  }
  return v28;
}

      uint64_t result = (uint64_t)v30;
      if (!v30) {
        return result;
      }
      free(v30);
      return 0LL;
    }

LABEL_55:
    uint64_t v28 = (v10 + 8);
    if (v4) {
      *(_WORD *)(v4 + 2) = __rev16(v28);
    }
    uint64_t v7 = (v28 + v7);
    if (a2) {
      int v6 = (_BYTE *)v4;
    }
    v5 += v30;
    if (!a2) {
      uint64_t v28 = 0LL;
    }
    v4 += v28;
    uint64_t v3 = *(void *)(v3 + 80);
  }

  while (v3);
  if (a2)
  {
    *(_WORD *)(a2 + 2) = bswap32(v7) >> 16;
    *(_BYTE *)(a2 + 7) = v5;
  }

  return v7;
}

          if (!v19) {
            goto LABEL_28;
          }
          goto LABEL_56;
        case 4u:
          int v27 = a3[4];
          uint64_t v28 = bswap32(v15[1]) >> 16;
          if (v27 && v27 != v28)
          {
            if (dword_10008BA20)
            {
              __int16 v44 = (os_log_s *)ne_log_obj(result);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                sub_10005880C();
              }
            }

            return 0xFFFFFFFFLL;
          }

          a3[4] = v28;
          if (!v19) {
            goto LABEL_28;
          }
          goto LABEL_56;
        case 5u:
          if (a4[3] != 254)
          {
            if (dword_10008BA20)
            {
              __int16 v45 = (os_log_s *)ne_log_obj(result);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
                sub_100058838();
              }
            }

            return 0xFFFFFFFFLL;
          }

          a4[3] = bswap32(v15[1]) >> 16;
          if (!v19) {
            goto LABEL_28;
          }
          goto LABEL_56;
        case 6u:
          if (*a3 != 3)
          {
            if (dword_10008BA20)
            {
              int v46 = (os_log_s *)ne_log_obj(result);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
                sub_100058864();
              }
            }

            return 0xFFFFFFFFLL;
          }

          a4[2] = bswap32(v15[1]) >> 16;
          if (v19)
          {
LABEL_56:
            uint64_t v13 = v16 - 4;
            BOOL v14 = (uint64_t)(v15 + 2);
          }

          else
          {
LABEL_28:
            int v29 = bswap32(v15[1]);
            char v30 = HIWORD(v29);
            unsigned int v31 = v16 - HIWORD(v29);
            BOOL v14 = (uint64_t)v15 + v30 + 4;
            uint64_t v13 = v31 - 4;
            if (v31 - 4 < 0)
            {
              if (dword_10008BA20)
              {
                int v43 = (os_log_s *)ne_log_obj(result);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
                  sub_1000585DC();
                }
              }

              return 0xFFFFFFFFLL;
            }
          }

          uint64_t v12 = v15;
          if (v13 <= 0) {
            return 0LL;
          }
          break;
        default:
          goto LABEL_55;
      }
    }

    if (dword_10008BA20)
    {
      int v42 = (os_log_s *)ne_log_obj(result);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        sub_100058578();
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t sub_10000F860(void *a1, int a2)
{
  int v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = 16LL;
  if (!a2) {
    uint64_t v4 = 15LL;
  }
  uint64_t v5 = a1[v4];
  if (*((_BYTE *)a1 + 61) == 16)
  {
    a1 = sub_10003F4BC(8uLL);
    if (!a1)
    {
      if (dword_10008BA20)
      {
        __int16 v47 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
          sub_100057C60();
        }
      }

      return 0xFFFFFFFFLL;
    }

    int v6 = (void **)a1;
    *(void *)a1[1] = 0x100000001000000LL;
    if (!v5) {
      goto LABEL_86;
    }
  }

  else
  {
    int v6 = 0LL;
    if (!v5)
    {
LABEL_86:
      uint64_t result = 0LL;
      if (v2) {
        v3[29] = v6;
      }
      else {
        v3[28] = v6;
      }
      return result;
    }
  }

  int64_t v55 = 0LL;
  int v54 = v2;
LABEL_9:
  uint64_t v7 = *(int **)(v5 + 32);
  if (!v7) {
    goto LABEL_85;
  }
LABEL_10:
  if (*v7 == 4) {
    goto LABEL_84;
  }
  int v56 = v6;
  if ((*(_BYTE *)(v3[32] + 96LL) & 6) == 0)
  {
    if (*((_BYTE *)v3 + 61) != 16) {
      goto LABEL_105;
    }
    goto LABEL_18;
  }

  if (dword_10008BA20)
  {
    uint64_t v8 = (os_log_s *)ne_log_obj(a1);
    a1 = (void *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)a1)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "NAT detected -> UDP encapsulation\n", buf, 2u);
    }
  }

  v7[5] = 1;
  if (*((_BYTE *)v3 + 61) == 16)
  {
    v7[4] += *(unsigned __int16 *)(*(void *)(v3[32] + 88LL) + 12LL);
LABEL_18:
    uint64_t v9 = (void **)sub_10003F4BC(0xCuLL);
    if (!v9) {
      goto LABEL_99;
    }
    int v10 = v9;
    uint64_t v11 = (char *)v9[1];
    char *v11 = 0;
    uint8_t v11[4] = *(_DWORD *)v5;
    int v12 = *v7;
    v11[5] = *v7;
    v11[7] = 1;
    if (v12 == 4)
    {
      uint64_t v13 = (char *)v7 + 26;
      *uint64_t v9 = (char *)*v9 - 2;
      size_t v14 = 2LL;
    }

    else
    {
      uint64_t v13 = v7 + 6;
      size_t v14 = 4LL;
    }

    v11[6] = v14;
    unint64_t v15 = memcpy(v11 + 8, v13, v14);
    uint64_t v16 = *((void *)v7 + 8);
    if (!v16)
    {
LABEL_102:
      if (dword_10008BA20)
      {
        __int128 v51 = (os_log_s *)ne_log_obj(v15);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
          sub_100057C8C();
        }
      }

      goto LABEL_99;
    }

    uint64_t v17 = 0LL;
    uint64_t v18 = v14 | 8;
    while (*v7 == 3 && *(_DWORD *)(v16 + 4) == 11 && *(_DWORD *)(v16 + 12) == 254)
    {
LABEL_74:
      uint64_t v16 = *(void *)(v16 + 16);
      if (!v16)
      {
        if (!v17) {
          goto LABEL_102;
        }
        size_t v44 = (size_t)*v10;
        *((_WORD *)v11 + 1) = bswap32(*v10) >> 16;
        if (v56) {
          __int16 v45 = sub_10003F51C(v56, (size_t)*v56 + v44);
        }
        else {
          __int16 v45 = (void **)sub_10003F4BC(v44);
        }
        int v6 = v45;
        int v2 = v54;
        if (!v45)
        {
          if (dword_10008BA20)
          {
            unint64_t v53 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
              sub_100057C60();
            }
          }

          __int128 v50 = v10;
          goto LABEL_100;
        }

        memcpy((void *)((char *)*v45 + (void)v45[1] - (char *)*v10), v10[1], (size_t)*v10);
        if (v55 && *((_BYTE *)v3 + 61) == 16) {
          *((_BYTE *)v6[1] + v55) = 2;
        }
        int64_t v55 = (_BYTE *)*v6 - (_BYTE *)*v10;
        sub_10003F5BC(v10);
LABEL_84:
        uint64_t v7 = (int *)*((void *)v7 + 9);
        if (!v7)
        {
LABEL_85:
          uint64_t v5 = *(void *)(v5 + 40);
          if (!v5) {
            goto LABEL_86;
          }
          goto LABEL_9;
        }

        goto LABEL_10;
      }
    }

    if (v17)
    {
      *(_BYTE *)uint64_t v17 = 3;
      ++v11[7];
    }

    uint64_t v19 = *(void *)(v5 + 8);
    if (v19 < 0x10000) {
      int v20 = 8;
    }
    else {
      int v20 = 12;
    }
    if (v19) {
      int v21 = v20;
    }
    else {
      int v21 = 0;
    }
    int v22 = *(_DWORD *)(v5 + 16);
    if (v22)
    {
      int v23 = v22 < 0x10000 ? 8 : 12;
      int v24 = v21 + v23;
      if (v22 != 0x7FFFFFFF) {
        int v21 = v24;
      }
    }

    if (*(_DWORD *)(v16 + 8)) {
      int v25 = 8;
    }
    else {
      int v25 = 4;
    }
    unsigned int v26 = v25 + v21;
    int v27 = *v7;
    if (*v7 == 2)
    {
      if (*(_DWORD *)(v16 + 12) == 254)
      {
        if (dword_10008BA20)
        {
          __int128 v49 = (os_log_s *)ne_log_obj(v15);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
            sub_100057D1C();
          }
        }

        goto LABEL_98;
      }

      v26 += 4;
    }

    else if (v27 != 4)
    {
      if (v27 != 3)
      {
        if (dword_10008BA20)
        {
          char v48 = (os_log_s *)ne_log_obj(v15);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
            sub_100057CB8();
          }
        }

LABEL_98:
        sub_10003F5BC(v10);
        goto LABEL_99;
      }

      if (*(_DWORD *)(v16 + 12) != 254) {
        v26 += 4;
      }
    }

    BOOL v28 = sub_100005134(*(unsigned int *)(v3[14] + 36LL));
    LODWORD(v29) = v26 + 4;
    if (v28) {
      uint64_t v29 = v29;
    }
    else {
      uint64_t v29 = v26;
    }
    uint64_t v30 = v29 + 8;
    unsigned int v31 = sub_10003F51C(v10, (size_t)*v10 + v29 + 8);
    if (!v31) {
      goto LABEL_99;
    }
    int v10 = v31;
    uint64_t v11 = (char *)v31[1];
    char v32 = &v11[v18];
    *char v32 = 0;
    int v33 = *(_DWORD *)(v16 + 4);
    v32[4] = *(_DWORD *)v16;
    v32[5] = v33;
    char v34 = &v11[v18 + 8];
    if (*(void *)(v5 + 8))
    {
      int v35 = sub_1000267D4(v34, 1, 1u);
      uint64_t v36 = *(void *)(v5 + 8);
      if (v36 < 0x10000)
      {
        char v34 = (char *)sub_1000267D4(v35, 2, v36);
      }

      else
      {
        unsigned int __src = bswap32(v36);
        char v34 = (char *)sub_100026784(v35, 2u, &__src, 4);
      }
    }

    int v37 = *(_DWORD *)(v5 + 16);
    if (v37 && v37 != 0x7FFFFFFF)
    {
      __int16 v38 = sub_1000267D4(v34, 1, 2u);
      signed int v39 = *(_DWORD *)(v5 + 16);
      if (v39 < 0x10000)
      {
        char v34 = (char *)sub_1000267D4(v38, 2, v39);
      }

      else
      {
        unsigned int v58 = bswap32(v39);
        char v34 = (char *)sub_100026784(v38, 2u, &v58, 4);
      }
    }

    __int16 v40 = sub_1000267D4(v34, 4, v7[4]);
    int v41 = v40;
    unsigned int v42 = *(_DWORD *)(v16 + 8);
    if (v42) {
      int v41 = sub_1000267D4(v40, 6, v42);
    }
    if (*v7 == 3)
    {
      unsigned int v43 = *(_DWORD *)(v16 + 12);
      if (v43 != 254) {
        goto LABEL_70;
      }
    }

    else if (*v7 == 2)
    {
      unsigned int v43 = *(_DWORD *)(v16 + 12);
LABEL_70:
      int v41 = sub_1000267D4(v41, 5, v43);
    }

    unint64_t v15 = (void *)sub_100005134(*(unsigned int *)(v3[14] + 36LL));
    if ((_DWORD)v15) {
      unint64_t v15 = sub_1000267D4(v41, 3, *(_DWORD *)(v3[14] + 36LL));
    }
    uint64_t v17 = (uint64_t)v10[1] + v18;
    *(_WORD *)(v17 + 2) = __rev16(v30);
    v18 += v30;
    goto LABEL_74;
  }

              if (v31) {
                goto LABEL_99;
              }
              return 4294967294LL;
            }
          }

          else if (*(_DWORD *)(*(void *)(v3[32] + 64) + 164LL))
          {
            if (!dword_10008BA20) {
              goto LABEL_84;
            }
            BOOL v28 = (os_log_s *)ne_log_obj(0LL);
            if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_84;
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = sub_100035820((unsigned __int8 *)__src);
            uint64_t v29 = "no policy found, try to generate the policy : %s\n";
            goto LABEL_83;
          }

          if (dword_10008BA20)
          {
            int v35 = (os_log_s *)ne_log_obj(v26);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
              sub_10005B9A4((unsigned __int8 *)__src);
            }
          }

          return 0xFFFFFFFFLL;
        }
      }

LABEL_105:
  if (dword_10008BA20)
  {
    __int128 v52 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
      sub_100057D48();
    }
  }

  unint64_t v53 = 0LL;
  int v54 = 0LL;
  int v27 = 0xFFFFFFFFLL;
  int64_t v55 = (void *)v79;
  int v35 = (void *)v80;
LABEL_158:
  if (v55) {
    sub_10003F5BC(v55);
  }
  if (v54) {
    sub_10003F5BC(v54);
  }
  if (v53) {
    sub_10003F5BC(v53);
  }
  if (v35) {
    sub_10003F5BC(v35);
  }
  if (v25) {
    sub_10003F5BC(v25);
  }
  if (v36) {
    sub_10003F5BC(v36);
  }
  if (v32) {
    sub_10003F5BC(v32);
  }
  if (v33) {
    sub_10003F5BC(v33);
  }
  return v27;
}

    sub_10005B768();
    goto LABEL_106;
  }

LABEL_99:
  __int128 v50 = v56;
  if (v56) {
LABEL_100:
  }
    sub_10003F5BC(v50);
  return 0xFFFFFFFFLL;
}

    sub_100009928(v41);
    return 0xFFFFFFFFLL;
  }

  __int128 v52 = v23;
  if (!v23)
  {
    __int128 v52 = sub_10004AC7C(*(void *)v41, *(void *)(v41 + 8), 1, 0LL);
    if (!v52) {
      sub_10003B688();
    }
  }

  unint64_t v53 = sub_100025C28(v41);
  if ((v53 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      int v54 = (os_log_s *)ne_log_obj(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
        sub_1000615B4();
      }
    }

    sub_10004AAC4((void *)v41);
    return 0xFFFFFFFFLL;
  }

  return 0LL;
}

uint64_t sub_10000FE70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (!v1) {
    return 1LL;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 32);
    if (v2) {
      break;
    }
LABEL_12:
    uint64_t v1 = *(void *)(v1 + 40);
    if (!v1) {
      return 1LL;
    }
  }

  while (1)
  {
    int v3 = *(_DWORD *)(v2 + 16);
    BOOL v4 = v3 == 1 || v3 == 61443;
    if (!v4 && v3 != 3) {
      return 0LL;
    }
    uint64_t v2 = *(void *)(v2 + 72);
    if (!v2) {
      goto LABEL_12;
    }
  }

uint64_t sub_10000FEB8(uint64_t result)
{
  if (result)
  {
    while (1)
    {
      uint64_t v1 = *(void *)(result + 32);
      if (v1) {
        break;
      }
LABEL_11:
      uint64_t result = *(void *)(result + 40);
      if (!result) {
        return result;
      }
    }

    while (1)
    {
      int v2 = *(_DWORD *)(v1 + 16);
      BOOL v3 = v2 == 2 || v2 == 4;
      if (v3 || v2 == 61444) {
        return 1LL;
      }
      uint64_t v1 = *(void *)(v1 + 72);
      if (!v1) {
        goto LABEL_11;
      }
    }
  }

  return result;
}

uint64_t sub_10000FEF8(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  while (1)
  {
    uint64_t v1 = *(void *)(a1 + 32);
    if (v1) {
      break;
    }
LABEL_5:
    a1 = *(void *)(a1 + 40);
    if (!a1) {
      return 1LL;
    }
  }

  while (*(_DWORD *)(v1 + 16) == 2)
  {
    uint64_t v1 = *(void *)(v1 + 72);
    if (!v1) {
      goto LABEL_5;
    }
  }

  return 0LL;
}

uint64_t sub_10000FF30()
{
  return 28800LL;
}

uint64_t sub_10000FF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)a1 == 2)
  {
    if (!(_DWORD)a3 || a4 | a2)
    {
      if (!dword_10008BA20) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v7 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        return 0xFFFFFFFFLL;
      }
      int v11 = 136315650;
      int v12 = sub_10003EA1C(0, a2);
      __int16 v13 = 2080;
      size_t v14 = sub_10003EA1C(1, a3);
      __int16 v15 = 2080;
      uint64_t v16 = sub_10003EA1C(2, a4);
      uint64_t v8 = "illegal algorithm defined AH enc=%s auth=%s comp=%s.\n";
      goto LABEL_25;
    }

    return 0LL;
  }

  if ((_DWORD)a1 == 4)
  {
    if (a3 | a2 || !(_DWORD)a4)
    {
      if (!dword_10008BA20) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v7 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        return 0xFFFFFFFFLL;
      }
      int v11 = 136315650;
      int v12 = sub_10003EA1C(0, a2);
      __int16 v13 = 2080;
      size_t v14 = sub_10003EA1C(1, a3);
      __int16 v15 = 2080;
      uint64_t v16 = sub_10003EA1C(2, a4);
      uint64_t v8 = "illegal algorithm defined IPcomp enc=%s auth=%s comp=%s.\n";
      goto LABEL_25;
    }

    return 0LL;
  }

  if ((_DWORD)a1 != 3)
  {
    if (dword_10008BA20)
    {
      int v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100057D74();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if ((_DWORD)a2 && !(_DWORD)a4) {
    return 0LL;
  }
  if (!dword_10008BA20) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = (os_log_s *)ne_log_obj(a1);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    return 0xFFFFFFFFLL;
  }
  int v11 = 136315650;
  int v12 = sub_10003EA1C(0, a2);
  __int16 v13 = 2080;
  size_t v14 = sub_10003EA1C(1, a3);
  __int16 v15 = 2080;
  uint64_t v16 = sub_10003EA1C(2, a4);
  uint64_t v8 = "illegal algorithm defined ESP enc=%s auth=%s comp=%s.\n";
LABEL_25:
  _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v11, 0x20u);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000101C0(int a1)
{
  if (a1 == 50) {
    int v1 = 3;
  }
  else {
    int v1 = -1;
  }
  if (a1 == 51) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = v1;
  }
  if (a1 == 108) {
    return 4LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000101EC(int a1)
{
  else {
    return dword_100069F4C[a1 - 2];
  }
}

uint64_t sub_100010210(void *a1, uint64_t a2)
{
  if (*(void *)a2 != 4LL) {
    return 1LL;
  }
  if (*a1 != 8LL) {
    return 1LL;
  }
  unsigned int v2 = (unsigned int *)a1[1];
  if (v2[1] != -1) {
    return 1LL;
  }
  unsigned int v4 = bswap32(*v2);
  unsigned int v5 = bswap32(**(_DWORD **)(a2 + 8));
  BOOL v6 = v4 >= v5;
  BOOL v7 = v4 > v5;
  int v8 = !v6;
  return (v7 - v8);
}

uint64_t sub_100010268(void *a1, void *a2)
{
  if (*a2 == 16LL && *a1 == 32LL)
  {
    unsigned int v2 = (unint64_t *)a1[1];
    uint64_t v3 = 16LL;
    while (*((unsigned __int8 *)v2 + v3) == 255)
    {
      if (++v3 == 32)
      {
        unsigned int v4 = (unint64_t *)a2[1];
        unint64_t v5 = bswap64(*v2);
        unint64_t v6 = bswap64(*v4);
        if (v5 == v6)
        {
          unint64_t v5 = bswap64(v2[1]);
          unint64_t v6 = bswap64(v4[1]);
          if (v5 == v6) {
            return 0LL;
          }
        }

        if (v5 < v6) {
          return 0xFFFFFFFFLL;
        }
        return 1LL;
      }
    }
  }

  return 1LL;
}

uint64_t sub_1000102F4(uint64_t a1)
{
  int v1 = *(void **)(a1 + 320);
  if (!v1)
  {
    if (dword_10008BA20)
    {
      unint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100057DD4();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v3 = (void **)(a1 + 320);
  if (*v1 <= 3uLL)
  {
    if (dword_10008BA20)
    {
      unsigned int v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100057E00();
      }
    }

    return 18LL;
  }

  BOOL v7 = (unsigned __int8 *)v1[1];
  if (*(_BYTE *)(a1 + 80) == 16
    && *(_BYTE *)(a1 + 81) == 2
    && *(_DWORD *)(*(void *)(a1 + 72) + 48LL) == 1
    && (*(_BYTE *)(a1 + 96) & 4) == 0)
  {
    uint64_t v8 = *v7;
    if ((v8 | 4) != 5)
    {
      if (dword_10008BA20)
      {
        uint64_t v9 = (os_log_s *)ne_log_obj(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_100057E68(v7, v9);
        }
      }

      return 18LL;
    }
  }

  else
  {
    uint64_t v8 = *v7;
  }

  if (v8 <= 8 && ((1 << v8) & 0x1D0) != 0)
  {
    if (dword_10008BA20)
    {
      int v11 = (os_log_s *)ne_log_obj(v8);
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      uint64_t v8 = *v7;
      if (v12)
      {
        *(_DWORD *)buf = 136315138;
        v42[0] = sub_10003E4EC(v8);
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "such ID type %s is not proper.\n",  buf,  0xCu);
        uint64_t v8 = *v7;
      }
    }
  }

  if ((v8 | 4) == 5)
  {
    if (v7[1] == 17)
    {
      unsigned int v18 = *((unsigned __int16 *)v7 + 1);
      if (v18 == 62465) {
        goto LABEL_48;
      }
      uint64_t v19 = *(void *)(a1 + 48);
      int v20 = *(unsigned __int8 *)(v19 + 1);
      if (v20 != 30 && v20 != 2)
      {
        if (dword_10008BA20)
        {
          signed int v39 = (os_log_s *)ne_log_obj(v8);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
            sub_100057F10();
          }
        }

        return 18LL;
      }

      int v22 = *(unsigned __int16 *)(v19 + 2);
      if (__rev16(v18) == v22 || dword_10008BA20 == 0) {
        goto LABEL_48;
      }
      size_t v14 = (os_log_s *)ne_log_obj(v8);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_48;
      }
      unsigned int v24 = bswap32(*((unsigned __int16 *)v7 + 1)) >> 16;
      *(_DWORD *)buf = 67109376;
      LODWORD(v42[0]) = v22;
      WORD2(v42[0]) = 1024;
      *(_DWORD *)((char *)v42 + 6) = v24;
      uint64_t v17 = "port %d expected, but %d\n";
      goto LABEL_47;
    }

    if (!v7[1] && *((_WORD *)v7 + 1) && dword_10008BA20 != 0)
    {
      size_t v14 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = v7[1];
        unsigned int v16 = bswap32(*((unsigned __int16 *)v7 + 1)) >> 16;
        *(_DWORD *)buf = 67109376;
        LODWORD(v42[0]) = v15;
        WORD2(v42[0]) = 1024;
        *(_DWORD *)((char *)v42 + 6) = v16;
        uint64_t v17 = "protocol ID and Port mismatched. proto_id:%d port:%d\n";
LABEL_47:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v17, buf, 0xEu);
      }
    }
  }

LABEL_84:
              if (!v27) {
                return 0LL;
              }
LABEL_85:
              sub_10003F5BC(v27);
              return 0LL;
            }
          }
        }

        uint64_t v25 = sub_100007840(0LL, buf);
        unsigned int v26 = (int *)v25;
      }

      while (v25);
      if (v27) {
        sub_10003F5BC(v27);
      }
    }

    if (dword_10008BA20)
    {
      int v37 = (os_log_s *)ne_log_obj(v25);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
        sub_100057EE0();
      }
    }

    if (*(_DWORD *)(*(void *)(a1 + 64) + 136LL)) {
      return 18LL;
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_100010804(uint64_t a1)
{
  int v1 = a1;
  int v2 = a1 - 1;
  if (dword_10008BA20)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      unint64_t v6 = sub_10003E4EC(v1);
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Inproper idtype:%s in this function.\n",  (uint8_t *)&v5,  0xCu);
    }
  }

  return 4LL;
}

uint64_t sub_1000108E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(unsigned int *)(v2 + 32);
  switch((int)v3)
  {
    case 1:
      uint64_t v4 = *(void *)(v2 + 40);
      if (!v4)
      {
        uint64_t v4 = *(void *)(qword_10008B848 + 184);
        if (!v4) {
          goto LABEL_70;
        }
      }

      int v5 = 2;
      goto LABEL_29;
    case 2:
      uint64_t v4 = *(void *)(v2 + 40);
      if (!v4)
      {
        uint64_t v4 = *(void *)(qword_10008B848 + 192);
        if (!v4) {
          goto LABEL_70;
        }
      }

      int v5 = 3;
      goto LABEL_29;
    case 3:
    case 8:
      uint64_t v4 = *(void *)(v2 + 40);
      if (!v4)
      {
        uint64_t v4 = *(void *)(qword_10008B848 + 8 * v3 + 176);
        if (!v4) {
          goto LABEL_70;
        }
      }

      int v5 = 11;
      goto LABEL_29;
    case 4:
      uint64_t v6 = *(void *)(v2 + 40);
      if (!v6) {
        goto LABEL_13;
      }
      BOOL v7 = *(_WORD **)(v6 + 8);
      if (!v7) {
        goto LABEL_13;
      }
      goto LABEL_14;
    case 5:
      uint64_t v4 = *(void *)(v2 + 40);
      if (v4)
      {
        int v5 = 9;
LABEL_29:
        uint64_t v4 = (uint64_t)sub_10003F5F0(v4);
        if (v4)
        {
          size_t v14 = (size_t *)v4;
          int v11 = 0;
          __int16 v12 = 0;
          goto LABEL_31;
        }
      }

      else
      {
        uint64_t v31 = sub_10002BD24(a1);
        if ((v31 & 0x80000000) != 0)
        {
          if (!dword_10008BA20) {
            return 0xFFFFFFFFLL;
          }
          __int16 v40 = (os_log_s *)ne_log_obj(v31);
          BOOL v26 = os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
          if (v26) {
            sub_100057FFC();
          }
          goto LABEL_42;
        }

        SecCertificateRef v32 = sub_100005664(*(void *)(a1 + 280) + 8LL);
        if (v32)
        {
          SecCertificateRef v33 = v32;
          uint64_t v34 = (const __CFData *)j__SecCertificateCopySubjectSequence();
          if (v34)
          {
            uint64_t v35 = v34;
            int Length = CFDataGetLength(v34);
            BytePtr = CFDataGetBytePtr(v35);
            size_t v38 = Length;
            signed int v39 = sub_10003F4BC(Length);
            if (v39)
            {
              size_t v14 = v39;
              memcpy((void *)v39[1], BytePtr, v38);
              CFRelease(v33);
              CFRelease(v35);
              int v11 = 0;
              __int16 v12 = 0;
              int v5 = 9;
              goto LABEL_31;
            }

            if (dword_10008BA20)
            {
              size_t v44 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                sub_100058054();
              }
            }

            CFRelease(v33);
            unsigned int v43 = v35;
          }

          else
          {
            if (dword_10008BA20)
            {
              unsigned int v42 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
                sub_100058054();
              }
            }

            unsigned int v43 = v33;
          }

          CFRelease(v43);
        }

        else
        {
          if (!dword_10008BA20) {
            return 0LL;
          }
          int v41 = (os_log_s *)ne_log_obj(0LL);
          uint64_t v4 = os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v4) {
            sub_100058028();
          }
        }
      }

LABEL_70:
      if (!dword_10008BA20) {
        return 0LL;
      }
      __int16 v45 = (os_log_s *)ne_log_obj(v4);
      uint64_t result = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_100057FD0();
        return 0LL;
      }

      return result;
    default:
LABEL_13:
      BOOL v7 = *(_WORD **)(a1 + 56);
LABEL_14:
      int v8 = *((unsigned __int8 *)v7 + 1);
      if (v8 == 2) {
        goto LABEL_18;
      }
      if (v8 != 30)
      {
        if (!dword_10008BA20) {
          return 0xFFFFFFFFLL;
        }
        int v27 = (os_log_s *)ne_log_obj(a1);
        BOOL v26 = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
        if (v26) {
          sub_100057FA4();
        }
LABEL_42:
        if (dword_10008BA20)
        {
          BOOL v28 = (os_log_s *)ne_log_obj(v26);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_100057F78();
          }
        }

        return 0xFFFFFFFFLL;
      }

      if (*(_DWORD *)(a1 + 28))
      {
        uint64_t v48 = 0LL;
        v46[0] = 528;
        v46[1] = v7[1];
        int v47 = 0;
        BOOL v7 = v46;
LABEL_18:
        uint64_t v9 = v7 + 2;
        int v5 = 1;
        size_t v10 = 4LL;
      }

      else
      {
        uint64_t v9 = v7 + 4;
        int v5 = 5;
        size_t v10 = 16LL;
      }

      if (*(_BYTE *)(a1 + 80) == 16) {
        int v11 = -201261056;
      }
      else {
        int v11 = 0;
      }
      if (*(_BYTE *)(a1 + 80) == 16) {
        __int16 v12 = 4352;
      }
      else {
        __int16 v12 = 0;
      }
      __int16 v13 = sub_10003F4BC(v10);
      if (v13)
      {
        size_t v14 = v13;
        memcpy((void *)v13[1], v9, *v13);
LABEL_31:
        int v15 = sub_10003F4BC(*v14 + 4);
        if (v15)
        {
          unsigned int v16 = v15;
          *(_DWORD *)v15[1] = v11 & 0xFFFF0000 | v12 & 0x1F00 | v5;
          memcpy((void *)(v15[1] + 4), (const void *)v14[1], *v14);
          *(void *)(a1 + 312) = v16;
          if (dword_1000882C8 >= 7)
          {
            uint64_t v19 = v16;
            unint64_t v18 = *v16;
            uint64_t v17 = v19[1];
            char v20 = sub_10003E4EC(v5);
            sub_100033CEC(7, v17, v18, "use ID type of %s\n", v21, v22, v23, v24, v20);
          }

          sub_10003F5BC(v14);
          return 0LL;
        }

        if (dword_10008BA20)
        {
          uint64_t v25 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            sub_100057FD0();
          }
        }

        sub_10003F5BC(v14);
        goto LABEL_42;
      }

      if (dword_10008BA20)
      {
        uint64_t v30 = (os_log_s *)ne_log_obj(0LL);
        uint64_t result = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
        if (!(_DWORD)result) {
          return result;
        }
        sub_100057FD0();
      }

      return 0LL;
  }

      uint64_t v36 = 0xFFFFFFFFLL;
LABEL_75:
      sub_10003F5BC(v7);
      sub_10003F5BC(v15);
      return v36;
    }

    if (dword_10008BA20)
    {
      uint64_t v34 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        sub_10005B4E8();
      }
    }

    goto LABEL_60;
  }

  int v11 = a1[1];
  __int16 v12 = *(unsigned __int8 *)(v11 + 1);
  if (v12 == 2)
  {
    __int16 v13 = 32;
    goto LABEL_21;
  }

  if (v12 == 30)
  {
    __int16 v13 = 128;
LABEL_21:
    uint64_t v9 = sub_1000113C0(v11, v13, 255);
    goto LABEL_22;
  }

  if (dword_10008BA20)
  {
    uint64_t v35 = (os_log_s *)ne_log_obj(v11);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      sub_100057F10();
    }
  }

uint64_t sub_100010D84(void ***a1, int a2, uint64_t a3)
{
  return sub_100010D8C(a1, a2, a3, 0);
}

uint64_t sub_100010D8C(void ***a1, int a2, uint64_t a3, unsigned int a4)
{
  if (a3)
  {
    int v5 = 0LL;
    switch(a2)
    {
      case 1:
      case 2:
        if (*(void *)a3 > 1uLL) {
          goto LABEL_11;
        }
        if (dword_10008BA20)
        {
          BOOL v7 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_1000580FC();
          }
        }

        return 0xFFFFFFFFLL;
      case 3:
        if (a4 >= 2)
        {
          if (a4 == 2)
          {
            uint64_t v9 = (void **)sub_10003F4BC(*(void *)a3 - 1LL);
            if (v9)
            {
LABEL_12:
              int v5 = v9;
              memcpy(v9[1], *(const void **)(a3 + 8), (size_t)*v9);
              goto LABEL_13;
            }

            if (dword_10008BA20)
            {
              uint64_t v21 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                sub_100058208();
              }
            }
          }

          else if (dword_10008BA20)
          {
            uint64_t v22 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
              sub_100058178();
            }
          }
        }

        else
        {
          size_t v14 = fopen(*(const char **)(a3 + 8), "r");
          if (v14)
          {
            int v15 = v14;
            int v5 = 0LL;
            int v16 = fread(__ptr, 1uLL, 0x200uLL, v14);
            if (!v16)
            {
LABEL_25:
              fclose(v15);
              goto LABEL_13;
            }

            int v17 = 0;
            while (1)
            {
              int v18 = v16 + v17;
              uint64_t v19 = sub_10003F51C(v5, v16 + v17);
              if (!v19) {
                break;
              }
              int v5 = v19;
              memcpy((char *)v19[1] + v17, __ptr, v16);
              int v16 = fread(__ptr, 1uLL, 0x200uLL, v15);
              int v17 = v18;
              if (!v16) {
                goto LABEL_25;
              }
            }

            fclose(v15);
          }

          else if (dword_10008BA20)
          {
            uint64_t v24 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              sub_1000581A4();
            }
          }
        }

        return 0xFFFFFFFFLL;
      case 4:
        if (!*(void *)a3)
        {
          int v5 = 0LL;
          goto LABEL_13;
        }

        int v11 = sub_10003CF40(*(const char **)(a3 + 8), 0LL);
        if (v11)
        {
          __int16 v12 = v11;
          __int16 v13 = (void **)sub_10003F4BC(*v11);
          if (v13)
          {
            int v5 = v13;
            memcpy(v13[1], v12, (size_t)*v13);
            free(v12);
LABEL_13:
            uint64_t result = 0LL;
            *a1 = v5;
            return result;
          }

          free(v12);
        }

        else if (dword_10008BA20)
        {
          uint64_t v23 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_100058234();
          }
        }

        break;
      case 5:
        if (dword_10008BA20)
        {
          char v20 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
            sub_100058298();
          }
        }

        return 0xFFFFFFFFLL;
      case 6:
      case 8:
LABEL_11:
        uint64_t v9 = (void **)sub_10003F4BC(*(void *)a3 - 1LL);
        if (v9) {
          goto LABEL_12;
        }
        return 0xFFFFFFFFLL;
      default:
        goto LABEL_13;
    }
  }

  else
  {
    if (dword_10008BA20)
    {
      int v8 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100058080();
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1000110F8(uint64_t a1)
{
  uint64_t v2 = sub_100035420(*(_DWORD *)(a1 + 52));
  if (!v2)
  {
    if (dword_10008BA20)
    {
      int v29 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_1000582C8();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v3 = v2;
  uint64_t v4 = (unsigned __int8 *)(v2 + 2);
  int v5 = v2 + 3;
  unsigned int v6 = *((unsigned __int8 *)v2 + 280);
  if (*((_BYTE *)v2 + 153) == 30 && *(_DWORD *)(a1 + 16))
  {
    int v5 = v36;
    int v38 = 0;
    uint64_t v37 = 0LL;
    v36[0] = 528;
    v36[1] = *((_WORD *)v2 + 13);
    inet_pton(2, "192.168.2.2", &v37);
    unsigned int v6 = 32;
  }

  BOOL v7 = sub_1000113C0((uint64_t)v5, v6, *((unsigned __int16 *)v3 + 141));
  *(void *)(a1 + 192) = v7;
  if (!v7)
  {
    if (dword_10008BA20)
    {
      uint64_t v30 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_10005832C(v4, v30);
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v8 = *(unsigned __int8 *)v7[1];
  if ((v8 == 4 || v8 == 1) && *(_BYTE *)(a1 + 60) == 1)
  {
    uint64_t v10 = *(void *)(a1 + 256);
    if (v10)
    {
      if ((*(_BYTE *)(v10 + 96) & 2) != 0)
      {
        if (*(void *)(qword_10008B848 + 296))
        {
          sub_10003F5BC(v7);
          BOOL v7 = sub_10003F5F0(*(void *)(qword_10008B848 + 296));
          *(void *)(a1 + 192) = v7;
          if (!v7) {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }

  int v11 = v3 + 19;
  if (dword_1000882C8 >= 7)
  {
    unint64_t v13 = *v7;
    __int16 v12 = (unsigned __int8 *)v7[1];
    char v14 = sub_10003E4EC(*v12);
    sub_100033CEC(7, (uint64_t)v12, v13, "use local ID type %s\n", v15, v16, v17, v18, v14);
  }

  unsigned int v19 = *((unsigned __int8 *)v3 + 281);
  if (*((_BYTE *)v3 + 153) == 30 && *(_DWORD *)(a1 + 16))
  {
    int v11 = v33;
    int v35 = 0;
    uint64_t v34 = 0LL;
    v33[0] = 528;
    v33[1] = *((_WORD *)v3 + 77);
    nw_nat64_extract_v4(a1 + 16, v3 + 20, &v34);
    unsigned int v19 = 32;
  }

  char v20 = sub_1000113C0((uint64_t)v11, v19, *((unsigned __int16 *)v3 + 141));
  *(void *)(a1 + 200) = v20;
  if (!v20)
  {
    if (dword_10008BA20)
    {
      uint64_t v31 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        sub_10005832C(v4, v31);
      }
    }

    SecCertificateRef v32 = *(void **)(a1 + 192);
    if (v32)
    {
      sub_10003F5BC(v32);
      *(void *)(a1 + 192) = 0LL;
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_1000882C8 >= 7)
  {
    unint64_t v22 = *v20;
    uint64_t v21 = (unsigned __int8 *)v20[1];
    char v23 = sub_10003E4EC(*v21);
    sub_100033CEC(7, (uint64_t)v21, v22, "use remote ID type %s\n", v24, v25, v26, v27, v23);
  }

  return 0LL;
}

size_t *sub_1000113C0(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v4 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 1);
  if (v5 != 30)
  {
    if (v5 != 2)
    {
      if (dword_10008BA20)
      {
        int v8 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          sub_1000583A0();
        }
      }

      return 0LL;
    }

    if (a2 == 32)
    {
      unsigned int v6 = 0;
      char v7 = 1;
LABEL_12:
      uint64_t v9 = (const void *)(a1 + 4);
      size_t v10 = 4LL;
      goto LABEL_16;
    }

    if (a2 < 0x20)
    {
      unsigned int v6 = 4;
      char v7 = 4;
      goto LABEL_12;
    }

    if (!dword_10008BA20) {
      return 0LL;
    }
    char v20 = (os_log_s *)ne_log_obj(a1);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
LABEL_33:
    sub_100058400();
    return 0LL;
  }

  if (a2 == 128)
  {
    unsigned int v6 = 0;
    char v7 = 5;
  }

  else
  {
    if (a2 >= 0x80)
    {
      if (!dword_10008BA20) {
        return 0LL;
      }
      uint64_t v21 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        return 0LL;
      }
      goto LABEL_33;
    }

    char v7 = 6;
    unsigned int v6 = 16;
  }

  uint64_t v9 = (const void *)(a1 + 8);
  size_t v10 = 16LL;
LABEL_16:
  __int16 v11 = *(_WORD *)(a1 + 2);
  __int16 v12 = sub_10003F4BC(v10 + v6 + 4);
  if (!v12)
  {
    if (dword_10008BA20)
    {
      unsigned int v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100057FD0();
      }
    }

    return 0LL;
  }

  unint64_t v13 = v12;
  bzero((void *)v12[1], *v12);
  size_t v14 = v13[1];
  *(_BYTE *)size_t v14 = v7;
  if (a3 == 255) {
    char v15 = 0;
  }
  else {
    char v15 = a3;
  }
  *(_BYTE *)(v14 + 1) = v15;
  *(_WORD *)(v14 + 2) = v11;
  memcpy((void *)(v14 + 4), v9, v10);
  if (v6)
  {
    size_t v16 = v13[1];
    uint64_t v17 = (_BYTE *)(v16 + v10 + 4);
    if (v4 >= 8)
    {
      uint64_t v18 = (v4 - 8) >> 3;
      memset(v17, 255, v18 + 1);
      uint64_t v17 = (_BYTE *)(v10 + v18 + v16 + 5);
      v4 &= 7u;
    }

    if (v4) {
      *uint64_t v17 = -1 << (8 - v4);
    }
  }

  return v13;
}

size_t *sub_1000115E0(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 1);
  if (v3 != *(unsigned __int8 *)(a2 + 1))
  {
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100058460();
      }
    }

    return 0LL;
  }

  if (v3 == 2)
  {
    char v7 = 7;
    size_t v8 = 4LL;
  }

  else
  {
    if (v3 != 30)
    {
      if (dword_10008BA20)
      {
        size_t v14 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_1000583A0();
        }
      }

      return 0LL;
    }

    char v7 = 8;
    size_t v8 = 16LL;
  }

  size_t v10 = sub_10003F4BC((2 * v8) | 4);
  if (!v10)
  {
    if (dword_10008BA20)
    {
      char v15 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_100057FD0();
      }
    }

    return 0LL;
  }

  __int16 v11 = v10;
  bzero((void *)v10[1], *v10);
  size_t v12 = v11[1];
  *(_BYTE *)size_t v12 = v7;
  if (a3 == 255) {
    char v13 = 0;
  }
  else {
    char v13 = a3;
  }
  *(_BYTE *)(v12 + 1) = v13;
  *(_WORD *)(v12 + 2) = *(_WORD *)(a1 + 2);
  memcpy((void *)(v12 + 4), (const void *)(a1 + 4), v8);
  memcpy((void *)(v11[1] + v8 + 4), (const void *)(a2 + 4), v8);
  return v11;
}

uint64_t sub_100011750(unint64_t *a1, uint64_t a2, _BYTE *a3, __int16 *a4, int a5)
{
  int v5 = (unsigned __int8 *)a1[1];
  int v6 = *v5;
  if ((v6 - 5) < 2)
  {
    *(_WORD *)a2 = 7708;
    *(_WORD *)(a2 + 2) = *((_WORD *)v5 + 1);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v5 + 4);
  }

  else
  {
    if (v6 != 4 && v6 != 1)
    {
      if (dword_10008BA20)
      {
        __int16 v11 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_10005848C();
        }
      }

      return 18LL;
    }

    *(_WORD *)a2 = 528;
    *(_WORD *)(a2 + 2) = *((_WORD *)v5 + 1);
    *(_DWORD *)(a2 + 4) = *((_DWORD *)v5 + 1);
  }

  LOBYTE(v8) = 0;
  switch(*v5)
  {
    case 1u:
      LOBYTE(v8) = 32;
      goto LABEL_34;
    case 4u:
    case 6u:
      if (*v5 == 6) {
        unint64_t v9 = 16LL;
      }
      else {
        unint64_t v9 = 4LL;
      }
      if (*a1 < v9) {
        return 0xFFFFFFFFLL;
      }
      unint64_t v12 = a1[1];
      int v13 = *(unsigned __int8 *)(v12 + v9 + 4);
      if (v13 != 255)
      {
        LOBYTE(v8) = 0;
        goto LABEL_27;
      }

      unsigned int v14 = 8 * v9;
      char v15 = (unsigned __int8 *)(v9 + v12 + 5);
      unsigned int v16 = 8;
      while (1)
      {
        unsigned int v8 = v16;
        if (v16 >= v14) {
          break;
        }
        int v17 = *v15++;
        int v13 = v17;
        v16 += 8;
        if (v17 != 255) {
          goto LABEL_31;
        }
      }

      int v13 = 255;
LABEL_31:
      if (v8 < v14)
      {
        if (v13 == 255)
        {
          char v18 = 0;
LABEL_29:
          LOBYTE(v8) = v8 + v18 + 8;
          goto LABEL_34;
        }

_BYTE *sub_100011910(uint64_t a1)
{
  int v1 = *(unsigned __int8 **)(a1 + 8);
  memset(v30, 0, sizeof(v30));
  int v2 = *v1;
  switch(*v1)
  {
    case 1u:
    case 4u:
    case 7u:
      *(_WORD *)&v30[0].sa_len = 528;
      *(_DWORD *)&v30[0].sa_data[2] = *((_DWORD *)v1 + 1);
      goto LABEL_8;
    case 2u:
    case 3u:
LABEL_10:
      if (*(_DWORD *)a1 - 4 >= 512) {
        int v6 = 512;
      }
      else {
        int v6 = *(_DWORD *)a1 - 4;
      }
      __memcpy_chk(&qword_100088548, v1 + 4, v6, 512LL);
      goto LABEL_48;
    case 5u:
    case 6u:
    case 8u:
      *(_WORD *)&v30[0].sa_len = 7708;
      *(sockaddr *)&v30[0].sa_data[6] = *(sockaddr *)(v1 + 4);
      else {
        int v4 = 0;
      }
      *(_DWORD *)&v30[1].sa_data[6] = v4;
LABEL_8:
      switch(v2)
      {
        case 1:
        case 5:
          sub_10003CB98(v30);
          int v5 = snprintf((char *)&qword_100088548, 0x200uLL, "%s");
          goto LABEL_47;
        case 2:
        case 3:
          goto LABEL_10;
        case 4:
        case 6:
          if (v2 == 6) {
            unint64_t v9 = 16LL;
          }
          else {
            unint64_t v9 = 4LL;
          }
          if (*(void *)a1 < v9) {
            goto LABEL_49;
          }
          int v10 = v1[v9 + 4];
          if (v10 != 255) {
            goto LABEL_40;
          }
          unsigned int v11 = 8 * v9;
          unint64_t v12 = &v1[v9 + 5];
          unsigned int v13 = 8;
          break;
        case 7:
          unsigned int v16 = sub_10003CB98(v30);
          unsigned int v17 = snprintf((char *)&qword_100088548, 0x200uLL, "%s-", v16);
          int v6 = v17;
          int v18 = *(_DWORD *)(*(void *)(a1 + 8) + 8LL);
          *(_DWORD *)&v30[0].sa_len = 528;
          *(_DWORD *)&v30[0].sa_data[2] = v18;
          if ((v17 & 0x80000000) != 0) {
            goto LABEL_50;
          }
          unsigned int v19 = (char *)&qword_100088548 + v17;
          goto LABEL_39;
        case 8:
          BOOL v20 = sub_10003CB98(v30);
          unsigned int v21 = snprintf((char *)&qword_100088548, 0x200uLL, "%s-", v20);
          int v6 = v21;
          *(_DWORD *)&v30[0].sa_len = 7708;
          *(sockaddr *)&v30[0].sa_data[6] = *(sockaddr *)(*(void *)(a1 + 8) + 20LL);
          else {
            int v22 = 0;
          }
          *(_DWORD *)&v30[1].sa_data[6] = v22;
          if ((v21 & 0x80000000) != 0) {
            goto LABEL_50;
          }
          unsigned int v19 = (char *)&qword_100088548 + v21;
LABEL_39:
          char v23 = sub_10003CB98(v30);
          v6 += snprintf(v19, 512LL - v6, "%s", v23);
          goto LABEL_48;
        case 9:
        case 10:
          goto LABEL_14;
        case 11:
          goto LABEL_18;
        default:
          goto LABEL_19;
      }

      break;
    case 9u:
    case 0xAu:
LABEL_14:
      if (dword_10008BA20)
      {
        char v7 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_10005854C();
        }
      }

      strcpy((char *)&qword_100088548, "<ASN1-DN>");
      int v6 = 9;
      goto LABEL_50;
    case 0xBu:
LABEL_18:
      strcpy((char *)&qword_100088548, "<KEY-ID>");
      int v6 = 8;
      goto LABEL_50;
    default:
LABEL_19:
      if (dword_10008BA20)
      {
        unsigned int v8 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          sub_1000584EC();
        }
      }

      goto LABEL_49;
  }

  while (1)
  {
    unsigned int v14 = v13;
    if (v13 >= v11) {
      break;
    }
    int v15 = *v12++;
    int v10 = v15;
    v13 += 8;
    if (v15 != 255) {
      goto LABEL_44;
    }
  }

  int v10 = 255;
LABEL_44:
  if (v14 < v11 && v10 != 255)
  {
LABEL_40:
    int v24 = 0;
    unsigned int v25 = v10 ^ 0xFF;
    do
    {
      --v24;
      BOOL v26 = v25 > 1;
      v25 >>= 1;
    }

    while (v26);
  }

  sub_10003CB98(v30);
  int v5 = snprintf((char *)&qword_100088548, 0x200uLL, "%s/%i");
LABEL_47:
  int v6 = v5;
LABEL_48:
  if (!v6)
  {
LABEL_49:
    LODWORD(qword_100088548) = 4079420;
    int v6 = 3;
  }

uint64_t sub_100011D20(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = 0LL;
  *a4 = *(unsigned __int8 *)(a1 + 4);
  a4[1] = *(unsigned __int8 *)(a1 + 5);
  unsigned int v6 = *(unsigned __int16 *)(a1 + 2);
  *(void *)(a2 + 8) = 28800LL;
  char v7 = (void *)(a2 + 8);
  *(_DWORD *)(a2 + 16) = 0;
  a4[3] = 254;
  unsigned int v8 = bswap32(v6) >> 16;
  if (v8 >= 9)
  {
    uint64_t v11 = a2;
    unint64_t v12 = 0LL;
    int v13 = v8 - 8;
    uint64_t v14 = a1 + 8;
    unsigned int v58 = (_DWORD *)(a2 + 16);
    int v59 = 1;
    while (1)
    {
      int v15 = (unsigned __int16 *)v14;
      unint64_t v16 = v13;
      int v17 = *v15;
      unsigned int v18 = bswap32(v17 & 0xFFFFFF7F) >> 16;
      int v19 = (v17 << 8) & 0x8000;
      if (dword_10008BA20)
      {
        BOOL v20 = (os_log_s *)ne_log_obj(result);
        uint64_t result = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)result)
        {
          __int16 v57 = v7;
          uint64_t v34 = v11;
          int v35 = a3;
          uint64_t v36 = sub_10003E278(v18);
          uint64_t v37 = sub_10003E45C(v18, bswap32(v15[1]) >> 16);
          *(_DWORD *)buf = 136315650;
          __int16 v63 = v36;
          a3 = v35;
          uint64_t v11 = v34;
          char v7 = v57;
          __int16 v64 = 1024;
          int v65 = v19;
          __int16 v66 = 2080;
          v67 = v37;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "type=%s, flag=0x%04x, lorv=%s\n",  buf,  0x1Cu);
        }
      }

      switch(v18)
      {
        case 1u:
          unsigned int v21 = bswap32(v15[1]);
          if ((unsigned __int16)(HIWORD(v21) - 1) > 1u)
          {
            if (dword_10008BA20)
            {
              SecCertificateRef v33 = (os_log_s *)ne_log_obj(result);
              uint64_t result = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)result)
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "invalid life duration type. use default\n",  buf,  2u);
              }
            }

            goto LABEL_54;
          }

          int v59 = HIWORD(v21);
          if (v19) {
            goto LABEL_56;
          }
          goto LABEL_28;
        case 2u:
          if (v12 && (*v12 & 0xFF7F) == 0x100)
          {
            if (v19)
            {
              int v22 = a3;
              char v23 = sub_10003F4BC(2uLL);
              if (!v23)
              {
                if (!dword_10008BA20) {
                  return 0xFFFFFFFFLL;
                }
                uint64_t v48 = (os_log_s *)ne_log_obj(0LL);
                if (!os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_82;
              }

              int v24 = v23;
              *(_WORD *)v23[1] = v15[1];
            }

            else
            {
              size_t v38 = bswap32(v15[1]) >> 16;
              if (v38 + 4 > v16)
              {
                if (dword_10008BA20)
                {
                  unint64_t v53 = (os_log_s *)ne_log_obj(result);
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
                    sub_100058648(v16, v38, v53);
                  }
                }

                return 0xFFFFFFFFLL;
              }

              int v22 = a3;
              signed int v39 = sub_10003F4BC(v38);
              if (!v39)
              {
                if (!dword_10008BA20) {
                  return 0xFFFFFFFFLL;
                }
                int v54 = (os_log_s *)ne_log_obj(0LL);
                if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
                  return 0xFFFFFFFFLL;
                }
LABEL_82:
                sub_1000586DC();
                return 0xFFFFFFFFLL;
              }

              int v24 = v39;
              memcpy((void *)v39[1], v15 + 2, v38);
            }

            if (v59 == 2)
            {
              int v41 = sub_10000D3D0((uint64_t)v24);
              sub_10003F5BC(v24);
              if (!v41)
              {
                if (!dword_10008BA20) {
                  return 0xFFFFFFFFLL;
                }
                __int128 v52 = (os_log_s *)ne_log_obj(result);
                if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
                  return 0xFFFFFFFFLL;
                }
LABEL_88:
                sub_100056C4C();
                return 0xFFFFFFFFLL;
              }

              if (*v58)
              {
                if (*v58 != v41)
                {
                  if (dword_10008BA20)
                  {
                    int64_t v55 = (os_log_s *)ne_log_obj(result);
                    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                      sub_10005877C();
                    }
                  }

                  return 0xFFFFFFFFLL;
                }

                a3 = v22;
                int v59 = 2;
              }

              else
              {
                *unsigned int v58 = v41;
                int v59 = 2;
                a3 = v22;
              }

              if (v19) {
                goto LABEL_56;
              }
            }

            else
            {
              if (v59 != 1)
              {
                sub_10003F5BC(v24);
                if (dword_10008BA20)
                {
                  __int128 v50 = (os_log_s *)ne_log_obj(v49);
                  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
                    sub_100056BEC();
                  }
                }

                return 0xFFFFFFFFLL;
              }

              unsigned int v40 = sub_10000D3D0((uint64_t)v24);
              sub_10003F5BC(v24);
              if (!v40)
              {
                if (!dword_10008BA20) {
                  return 0xFFFFFFFFLL;
                }
                __int128 v51 = (os_log_s *)ne_log_obj(result);
                if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_88;
              }

              if (*v7 != 28800LL)
              {
                if (*v7 != v40)
                {
                  if (dword_10008BA20)
                  {
                    int v56 = (os_log_s *)ne_log_obj(result);
                    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
                      sub_100058708();
                    }
                  }

                  return 0xFFFFFFFFLL;
                }

                a3 = v22;
LABEL_54:
                int v59 = 1;
                goto LABEL_55;
              }

              void *v7 = v40;
              int v59 = 1;
              a3 = v22;
              if (v19) {
                goto LABEL_56;
              }
            }
          }

          else
          {
            if (!dword_10008BA20) {
              goto LABEL_55;
            }
            SecCertificateRef v32 = (os_log_s *)ne_log_obj(result);
            uint64_t result = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
            if (!(_DWORD)result) {
              goto LABEL_55;
            }
            sub_100056BC0(&v60, v61);
            if (v19) {
              goto LABEL_56;
            }
          }

          goto LABEL_28;
        case 3u:
          int v25 = *(_DWORD *)(v11 + 20);
          unsigned int v26 = bswap32(v15[1]) >> 16;
          if (!v25)
          {
            *(_DWORD *)(v11 + 20) = v26;
            if (v19) {
              goto LABEL_56;
            }
            goto LABEL_28;
          }

          if (v25 != v26)
          {
            if (dword_10008BA20)
            {
              int v47 = (os_log_s *)ne_log_obj(result);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
                sub_1000587E0();
              }
            }

            return 0xFFFFFFFFLL;
          }

uint64_t sub_1000124A8(uint64_t a1)
{
  if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100058890();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100012518(unsigned int a1)
{
  if (a1 > 5) {
    return 255LL;
  }
  else {
    return dword_100069F34[a1];
  }
}

uint64_t sub_100012538(uint64_t a1)
{
  if ((_DWORD)a1 == 1) {
    return 0LL;
  }
  if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1000588F0();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10001259C(uint64_t a1)
{
  if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100058950();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100012604(uint64_t a1)
{
  if ((_DWORD)a1 == 1) {
    return 0LL;
  }
  if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1000589B0();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100012668(uint64_t a1)
{
  if (((1 << a1) & 0xEC) != 0) {
    return 0LL;
  }
  if ((_DWORD)a1 == 4)
  {
    if (dword_10008BA20)
    {
      int v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_100058A7C(v2, v3, v4, v5, v6, v7, v8, v9);
      }
    }
  }

  else
  {
LABEL_14:
    if (dword_10008BA20)
    {
      int v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100058A1C();
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100012718(unsigned int a1)
{
  uint64_t result = 0LL;
  if (a1 <= 0xC)
  {
    if (((1 << a1) & 0x18DC) != 0) {
      return result;
    }
    if (((1 << a1) & 0x722) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v3 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          sub_100058B48();
        }
      }

      return 0xFFFFFFFFLL;
    }
  }

  if (a1 != 253)
  {
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100058AE8();
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t sub_1000127D4(uint64_t a1)
{
  if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100058BA8();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10001283C(uint64_t a1)
{
  return sub_10000E984(2LL, a1);
}

uint64_t sub_100012848(uint64_t a1)
{
  return sub_10000E984(3LL, a1);
}

void sub_100012854(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

_BYTE *sub_10001286C(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = 0;
  *a2 = 0;
  return result;
}

void sub_10001287C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100012888(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_1000128B0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1000128BC(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100012960(uint64_t a1, uint64_t a2)
{
  unsigned int v43 = 0LL;
  memset(v44, 0, sizeof(v44));
  int v2 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) != 5248)
  {
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_9;
  }

  if (a2)
  {
    if (dword_10008BA20)
    {
      uint64_t v3 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_100058E48();
      }
    }

LABEL_9:
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0xFFFFFFFFLL;
    goto LABEL_10;
  }

  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  sub_100026984((void *)a1, *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v13 = sub_1000108E0(a1);
  if ((v13 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      unsigned int v26 = (os_log_s *)ne_log_obj(v13);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_100058C08();
      }
    }

    goto LABEL_9;
  }

  uint64_t v14 = sub_10000F4A8(a1);
  *(void *)(a1 + 336) = v14;
  if (!v14)
  {
    if (dword_10008BA20)
    {
      int v27 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_100058C34();
      }
    }

    goto LABEL_9;
  }

  uint64_t v15 = a1 + 64;
  uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 192LL);
  if (!v16)
  {
    if (dword_10008BA20)
    {
      unsigned int v28 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_100058C60();
      }
    }

    goto LABEL_9;
  }

  uint64_t v17 = sub_100029E9C(v16, (size_t **)(a1 + 152), (void *)(a1 + 136));
  if ((v17 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      unsigned int v29 = (os_log_s *)ne_log_obj(v17);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_100058C8C();
      }
    }

    goto LABEL_9;
  }

  unsigned int v18 = (void **)sub_1000076AC(*(_DWORD *)(*(void *)(a1 + 64) + 140LL));
  *(void *)(a1 + 176) = v18;
  if (!v18)
  {
    if (dword_10008BA20)
    {
      uint64_t v30 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_100058CB8();
      }
    }

    goto LABEL_9;
  }

  int v19 = *(_DWORD *)(*(void *)(*(void *)v15 + 248LL) + 48LL);
  if (*(void *)(*(void *)v15 + 272LL) && v19 == 65001
    || ((v19 - 65005) <= 4 ? (BOOL v20 = ((1 << (v19 + 19)) & 0x15) == 0) : (BOOL v20 = 1),
        v20 ? (BOOL v21 = v19 == 65500) : (BOOL v21 = 1),
        !v21 ? (BOOL v22 = v19 == 64221) : (BOOL v22 = 1),
        v22))
  {
    uint64_t v7 = sub_10003F2A0(16LL);
    if (!v7)
    {
      if (dword_10008BA20)
      {
        char v23 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          sub_100058E1C();
        }
      }
    }

    unsigned int v18 = (void **)sub_10003F2A0(17LL);
    uint64_t v6 = v18;
    if (!v18 && dword_10008BA20)
    {
      int v24 = (os_log_s *)ne_log_obj(0LL);
      unsigned int v18 = (void **)os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v18) {
        sub_100058DF0();
      }
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
  }

  if (!*(_DWORD *)(*(void *)v15 + 148LL)) {
    goto LABEL_70;
  }
  unsigned int v18 = (void **)sub_10003F2A0(18LL);
  if (v18)
  {
    unsigned int v18 = sub_100015FDC(v18, 0x80000000);
    int v25 = v18;
  }

  else
  {
    int v25 = 0LL;
  }

  if (!v25 && dword_10008BA20)
  {
    int v31 = (os_log_s *)ne_log_obj(v18);
    unsigned int v18 = (void **)os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v18) {
      sub_100058DC4();
    }
LABEL_70:
    int v25 = 0LL;
  }

  if (*(_DWORD *)(*(void *)v15 + 120LL)
    && (unsigned int v18 = (void **)sub_10002D27C(*(_DWORD *)(*(void *)(*(void *)v15 + 248LL) + 48LL)), (_DWORD)v18))
  {
    unsigned int v18 = (void **)sub_10002D070(a1);
    if (!v18)
    {
      if (dword_10008BA20)
      {
        unsigned int v42 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
          sub_100058D98();
        }
      }

      uint64_t v5 = 0LL;
      uint64_t v8 = 0xFFFFFFFFLL;
      goto LABEL_105;
    }

    SecCertificateRef v32 = v18;
    char v33 = 0;
  }

  else
  {
    SecCertificateRef v32 = 0LL;
    char v33 = 1;
  }

  if (dword_10008BA20)
  {
    uint64_t v34 = (os_log_s *)ne_log_obj(v18);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
      sub_100058D10(a1 + 64, v34);
    }
  }

  int v35 = sub_100026E18(0LL, *(void *)(a1 + 336), 1);
  uint64_t v36 = sub_100026E18(v35, *(void *)(a1 + 152), 4);
  uint64_t v37 = sub_100026E18(v36, *(void *)(a1 + 176), 10);
  size_t v38 = (uint64_t **)sub_100026E18(v37, *(void *)(a1 + 312), 5);
  signed int v39 = v38;
  unsigned int v43 = v38;
  if ((v33 & 1) == 0)
  {
    signed int v39 = (uint64_t **)sub_100026E18(v38, (uint64_t)v32, 7);
    unsigned int v43 = v39;
  }

  if (v25)
  {
    signed int v39 = (uint64_t **)sub_100026E18(v39, (uint64_t)v25, 13);
    unsigned int v43 = v39;
  }

  if (*(_DWORD *)(*(void *)v15 + 176LL))
  {
    signed int v39 = (uint64_t **)sub_10003FF9C(v39, v44);
    unsigned int v43 = v39;
  }

  if (v7)
  {
    signed int v39 = (uint64_t **)sub_100026E18(v39, (uint64_t)v7, 13);
    unsigned int v43 = v39;
  }

  if (v6)
  {
    signed int v39 = (uint64_t **)sub_100026E18(v39, (uint64_t)v6, 13);
    unsigned int v43 = v39;
  }

  if (*(_DWORD *)(*(void *)v15 + 208LL))
  {
    uint64_t v5 = sub_10003F2A0(19LL);
    if (v5) {
      unsigned int v43 = (uint64_t **)sub_100026E18(v39, (uint64_t)v5, 13);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(void *)(a1 + 128) = sub_100026E60(&v43, a1);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)(a1 + 64) + 200LL);
  uint64_t v40 = sub_100024B4C(a1);
  if ((_DWORD)v40 == -1)
  {
    if (dword_10008BA20)
    {
      int v41 = (os_log_s *)ne_log_obj(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        sub_100058CE4();
      }
    }

    uint64_t v8 = 0xFFFFFFFFLL;
  }

  else
  {
    sub_100004344(v2, 5281);
    uint64_t v8 = 0LL;
  }

  if (v32) {
    sub_10003F5BC(v32);
  }
LABEL_105:
  if (v25) {
    sub_10003F5BC(v25);
  }
LABEL_10:
  for (uint64_t i = 0LL; i != 96; i += 8LL)
  {
    int v10 = *(void **)((char *)v44 + i);
    if (!v10) {
      break;
    }
    sub_10003F5BC(v10);
  }

  if (v7) {
    sub_10003F5BC(v7);
  }
  if (v6) {
    sub_10003F5BC(v6);
  }
  if (v5) {
    sub_10003F5BC(v5);
  }
  return v8;
}

    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0xFFFFFFFFLL;
    goto LABEL_10;
  }

  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  sub_100026984((void *)a1, *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v13 = sub_10000F4A8(a1);
  *(void *)(a1 + 336) = v13;
  if (!v13)
  {
    if (dword_10008BA20)
    {
      char v23 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_100059C50();
      }
    }

    goto LABEL_9;
  }

  uint64_t v14 = (uint64_t **)sub_100026E18(0LL, (uint64_t)v13, 1);
  uint64_t v15 = v14;
  SecCertificateRef v32 = v14;
  uint64_t v16 = *(void *)(a1 + 64);
  if (*(_DWORD *)(v16 + 176))
  {
    uint64_t v15 = (uint64_t **)sub_10003FF9C(v14, v33);
    SecCertificateRef v32 = v15;
    uint64_t v16 = *(void *)(a1 + 64);
  }

  uint64_t v17 = *(void *)(v16 + 272);
  unsigned int v18 = *(_DWORD *)(*(void *)(v16 + 248) + 48LL);
  if (v17 && v18 == 65001
    || ((v18 - 65005) <= 4 ? (int v19 = ((1 << (v18 + 19)) & 0x15) == 0) : (int v19 = 1),
        v19 ? (BOOL v20 = v18 == 65500) : (BOOL v20 = 1),
        !v20 ? (BOOL v21 = v18 == 64221) : (BOOL v21 = 1),
        v21))
  {
    BOOL v22 = sub_10003F2A0(16LL);
    uint64_t v5 = v22;
    if (v22)
    {
      uint64_t v15 = (uint64_t **)sub_100026E18(v15, (uint64_t)v22, 13);
      SecCertificateRef v32 = v15;
    }

    else if (dword_10008BA20)
    {
      int v24 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100059CA8();
      }
    }

    int v25 = sub_10003F2A0(17LL);
    if (v25)
    {
      uint64_t v6 = v25;
      uint64_t v15 = (uint64_t **)sub_100026E18(v15, (uint64_t)v25, 13);
      SecCertificateRef v32 = v15;
    }

    else
    {
      if (dword_10008BA20)
      {
        unsigned int v26 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          sub_100059C7C();
        }
      }

      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  if (*(_DWORD *)(*(void *)(a1 + 64) + 148LL))
  {
    int v27 = (void **)sub_10003F2A0(18LL);
    if (v27)
    {
      unsigned int v28 = sub_100015FDC(v27, 0x80000000);
      uint64_t v15 = (uint64_t **)sub_100026E18(v15, (uint64_t)v28, 13);
      SecCertificateRef v32 = v15;
      goto LABEL_57;
    }

    if (dword_10008BA20)
    {
      unsigned int v29 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_1000596BC();
      }
    }
  }

  unsigned int v28 = 0LL;
LABEL_57:
  if (*(_DWORD *)(*(void *)(a1 + 64) + 208LL))
  {
    uint64_t v7 = sub_10003F2A0(19LL);
    if (v7) {
      SecCertificateRef v32 = (uint64_t **)sub_100026E18(v15, (uint64_t)v7, 13);
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *(void *)(a1 + 128) = sub_100026E60(&v32, a1);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)(a1 + 64) + 200LL);
  uint64_t v30 = sub_100024B4C(a1);
  if ((_DWORD)v30 != -1)
  {
    sub_100004344(v2, 5217);
    uint64_t v8 = 0LL;
    if (!v28) {
      goto LABEL_10;
    }
    goto LABEL_68;
  }

  if (dword_10008BA20)
  {
    int v31 = (os_log_s *)ne_log_obj(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      sub_100058CE4();
    }
  }

  uint64_t v8 = 0xFFFFFFFFLL;
  if (v28) {
LABEL_68:
  }
    sub_10003F5BC(v28);
LABEL_10:
  for (uint64_t i = 0LL; i != 96; i += 8LL)
  {
    int v10 = *(void **)((char *)v33 + i);
    if (!v10) {
      break;
    }
    sub_10003F5BC(v10);
  }

  if (v5) {
    sub_10003F5BC(v5);
  }
  if (v6) {
    sub_10003F5BC(v6);
  }
  if (v7) {
    sub_10003F5BC(v7);
  }
  return v8;
}

    uint64_t v6 = 0xFFFFFFFFLL;
LABEL_10:
    uint64_t v7 = *(void **)(a1 + 320);
    if (v7)
    {
      sub_10003F5BC(v7);
      *(void *)(a1 + 320) = 0LL;
    }

    sub_10002C308(*(void **)(a1 + 288));
    *(void *)(a1 + 288) = 0LL;
    sub_10002C308(*(void **)(a1 + 296));
    *(void *)(a1 + 296) = 0LL;
    uint64_t v8 = *(void **)(a1 + 272);
    if (v8)
    {
      sub_10003F5BC(v8);
      *(void *)(a1 + 272) = 0LL;
    }

    return v6;
  }

  int v10 = sub_10002E664(a1, a2, **(void **)(a1 + 328), *(void *)(*(void *)(a1 + 328) + 8LL));
  if (!v10)
  {
    if (dword_10008BA20)
    {
      uint64_t v16 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_100059FF4();
      }
    }

    goto LABEL_9;
  }

  uint64_t v11 = v10;
  unint64_t v12 = (uint64_t)sub_100023ABC((uint64_t)v10);
  if (!v12)
  {
    if (dword_10008BA20)
    {
      uint64_t v17 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
    }

    sub_10003F5BC(v11);
    goto LABEL_9;
  }

  uint64_t v13 = (void *)v12;
  uint64_t v14 = 0;
  *(void *)(a1 + 352) = 0LL;
  uint64_t v15 = *(void *)(v12 + 8);
  while (2)
  {
    switch(*(_BYTE *)v15)
    {
      case 0:
        if (v14) {
          sub_10002C28C((void *)a1);
        }
        unsigned int v18 = sub_1000102F4(a1);
        if ((_DWORD)v18)
        {
          if (dword_10008BA20)
          {
            int v19 = (os_log_s *)ne_log_obj(v18);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
              sub_1000590C4();
            }
          }

          goto LABEL_56;
        }

        int v25 = sub_10002B2CC(a1);
        uint64_t v6 = v25;
        if ((_DWORD)v25 == -1)
        {
          int v24 = 0;
        }

        else
        {
          if ((_DWORD)v25)
          {
            sub_10001BA48(a1, v25, 0LL);
            goto LABEL_56;
          }

          if (dword_1000882C8 >= 7) {
            sub_100033CEC( 7,  *(void *)(*(void *)(a1 + 320) + 8LL),  **(void **)(a1 + 320),  "peer's ID:",  v26,  v27,  v28,  v29,  v30);
          }
          memcpy( *(void **)(**(void **)(a1 + 328) + 8LL),  *(const void **)(*(void *)(*(void *)(a1 + 328) + 8LL) + 8LL),  **(void **)(*(void *)(a1 + 328) + 8LL));
          sub_100004344(v3, 5190);
          uint64_t v6 = 0LL;
          int v24 = 1;
        }

        goto LABEL_57;
      case 5:
        unint64_t v12 = sub_100026BA4((size_t **)(a1 + 320), *(void *)(v15 + 8));
        if ((v12 & 0x80000000) == 0) {
          goto LABEL_30;
        }
        if (dword_10008BA20)
        {
          BOOL v21 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            sub_100059148();
          }
        }

        goto LABEL_56;
      case 6:
        unint64_t v12 = sub_10002CCA8(a1, *(void *)(v15 + 8));
        if ((v12 & 0x80000000) == 0)
        {
          uint64_t v14 = 1;
LABEL_30:
          v15 += 16LL;
          continue;
        }

        if (dword_10008BA20)
        {
          BOOL v22 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            sub_100059744();
          }
        }

    uint64_t v6 = 0xFFFFFFFFLL;
LABEL_10:
    uint64_t v7 = *(void **)(a1 + 320);
    if (v7)
    {
      sub_10003F5BC(v7);
      *(void *)(a1 + 320) = 0LL;
    }

    sub_10002C308(*(void **)(a1 + 288));
    *(void *)(a1 + 288) = 0LL;
    sub_10002C308(*(void **)(a1 + 296));
    *(void *)(a1 + 296) = 0LL;
    uint64_t v8 = *(void **)(a1 + 272);
    if (v8)
    {
      sub_10003F5BC(v8);
      *(void *)(a1 + 272) = 0LL;
    }

    sub_10002C308(*(void **)(a1 + 304));
    *(void *)(a1 + 304) = 0LL;
    return v6;
  }

  int v10 = sub_10002E664(a1, a2, **(void **)(a1 + 328), *(void *)(*(void *)(a1 + 328) + 8LL));
  if (!v10)
  {
    if (dword_10008BA20)
    {
      uint64_t v17 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_100059FF4();
      }
    }

    goto LABEL_9;
  }

  uint64_t v11 = v10;
  unint64_t v12 = (uint64_t)sub_100023ABC((uint64_t)v10);
  if (!v12)
  {
    if (dword_10008BA20)
    {
      unsigned int v18 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
    }

    sub_10003F5BC(v11);
    goto LABEL_9;
  }

  uint64_t v13 = (void *)v12;
  uint64_t v14 = 0;
  *(void *)(a1 + 352) = 0LL;
  uint64_t v15 = *(void *)(v12 + 8);
  uint64_t v16 = (unint64_t **)(a1 + 320);
  while (2)
  {
    switch(*(_BYTE *)v15)
    {
      case 0:
        if (v14) {
          unint64_t v12 = (uint64_t)sub_10002C28C((void *)a1);
        }
        int v19 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
        if (*(void *)(*(void *)(a1 + 64) + 272LL)) {
          BOOL v20 = v19 == 65001;
        }
        else {
          BOOL v20 = 0;
        }
        if (v20) {
          goto LABEL_75;
        }
        if (v19 > 64221)
        {
          switch(v19)
          {
            case 65002:
              goto LABEL_69;
            case 65003:
            case 65004:
            case 65005:
            case 65007:
            case 65009:
              goto LABEL_75;
            case 65006:
              goto LABEL_65;
            case 65008:
            case 65010:
              goto LABEL_70;
            default:
              if (v19 == 64222) {
                goto LABEL_69;
              }
              goto LABEL_75;
          }
        }

        if (v19 == 1)
        {
LABEL_69:
          if (!*v16) {
            goto LABEL_78;
          }
LABEL_70:
          if (!*(void *)(a1 + 352)) {
            goto LABEL_78;
          }
        }

        else
        {
          if (v19 != 3)
          {
LABEL_75:
            if (dword_10008BA20)
            {
              unsigned int v28 = (os_log_s *)ne_log_obj(v12);
              if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
                sub_10005A04C();
              }
            }

            goto LABEL_81;
          }

    uint64_t v7 = 0xFFFFFFFFLL;
LABEL_10:
    uint64_t v8 = *(void **)(a1 + 232);
    if (v8)
    {
      sub_10003F5BC(v8);
      *(void *)(a1 + 232) = 0LL;
    }

    uint64_t v9 = *(void **)(a1 + 216);
    if (v9)
    {
      sub_10003F5BC(v9);
      *(void *)(a1 + 216) = 0LL;
    }

    int v10 = *(void **)(a1 + 176);
    if (v10)
    {
      sub_10003F5BC(v10);
      *(void *)(a1 + 176) = 0LL;
    }

    return v7;
  }

  unint64_t v12 = sub_10002E664(*(void *)(a1 + 256), a2, **(void **)(a1 + 240), *(void *)(*(void *)(a1 + 240) + 8LL));
  if (!v12)
  {
    if (dword_10008BA20)
    {
      CFTypeID v62 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
        sub_100059FF4();
      }
    }

    goto LABEL_9;
  }

  uint64_t v13 = v12;
  uint64_t v14 = sub_100023ABC((uint64_t)v12);
  if (!v14)
  {
    if (dword_10008BA20)
    {
      __int16 v63 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
    }

    sub_10003F5BC(v13);
    goto LABEL_9;
  }

  uint64_t v15 = v14;
  uint64_t v16 = (_BYTE *)v14[1];
  if (*v16 != 8)
  {
    if (dword_10008BA20)
    {
      __int16 v64 = (os_log_s *)ne_log_obj(v14);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
        sub_10005AE18();
      }
    }

    goto LABEL_115;
  }

  unsigned int v18 = v16[16];
  uint64_t v17 = v16 + 16;
  int v19 = *((void *)v17 - 1);
  if (v18 != 1 && dword_10008BA20 != 0)
  {
    BOOL v21 = (os_log_s *)ne_log_obj(v14);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v22 = *v17;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = 8;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "received invalid next payload type %d, expecting %d.\n",  buf,  0xEu);
    }
  }

  int v24 = *(_DWORD *)(v4 + 24);
  char v23 = (unsigned int *)(v4 + 24);
  int v25 = **(_DWORD **)(a1 + 208) + bswap32(v24);
  unsigned int v26 = v25 - 28;
  if ((int)(v25 - 28) < 0)
  {
    if (dword_10008BA20)
    {
      int v65 = (os_log_s *)ne_log_obj(v26);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
        sub_10005AB44((uint64_t **)(a1 + 208), v23, v65);
      }
    }

    goto LABEL_115;
  }

  int v27 = (uint64_t)sub_10003F4BC(v26);
  if (!v27)
  {
    if (dword_10008BA20)
    {
      __int16 v66 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
        sub_10005ABD4();
      }
    }

  uint64_t v6 = 0xFFFFFFFFLL;
  if (v1) {
LABEL_10:
  }
    free(v1);
  return v6;
}

      uint64_t result = 0xFFFFFFFFLL;
      break;
  }

  return result;
}

  __ipsec_errcode = v5;
  return v8;
}

uint64_t sub_100012F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = 0LL;
  v77 = &v76;
  v78 = 0LL;
  uint64_t v3 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) != 5281)
  {
    if (dword_10008BA20)
    {
      unsigned int v18 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_49;
  }

  uint64_t v5 = sub_100023ABC(a2);
  if (!v5)
  {
    if (dword_10008BA20)
    {
      int v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
    }

LABEL_49:
    char v20 = 0;
    uint64_t v21 = 0xFFFFFFFFLL;
    goto LABEL_93;
  }

  uint64_t v6 = v5;
  uint64_t v7 = (unsigned __int8 *)v5[1];
  *(void *)(a1 + 352) = 0LL;
  if (*v7 != 1)
  {
    if (dword_10008BA20)
    {
      BOOL v22 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_1000592A8();
      }
    }

    goto LABEL_91;
  }

  uint64_t v8 = sub_100026BA4((size_t **)&v78, *((void *)v7 + 1));
  if ((v8 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      char v23 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_100058F00();
      }
    }

    goto LABEL_91;
  }

  v69 = v6;
  int v9 = 0;
  int v70 = 0;
  v71 = (size_t **)(a1 + 184);
  while (2)
  {
    v7 += 16;
    int v10 = *v7;
    switch(*v7)
    {
      case 0u:
        if (v70) {
          uint64_t v8 = (uint64_t)sub_10002C28C((void *)a1);
        }
        uint64_t v6 = v69;
        if (!*(void *)(a1 + 160) || !*v71)
        {
          if (dword_10008BA20)
          {
            char v33 = (os_log_s *)ne_log_obj(v8);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
              sub_100058F90();
            }
          }

          goto LABEL_91;
        }

        uint64_t v25 = sub_1000102F4(a1);
        if ((_DWORD)v25)
        {
          if (dword_10008BA20)
          {
            unsigned int v26 = (os_log_s *)ne_log_obj(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              sub_1000590C4();
            }
          }

          goto LABEL_91;
        }

        uint64_t v41 = sub_10000B528((unint64_t *)v78, (void *)a1);
        if ((v41 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            __int16 v63 = (os_log_s *)ne_log_obj(v41);
            if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
              sub_100058FBC();
            }
          }

          goto LABEL_91;
        }

        unsigned int v42 = *(void **)(a1 + 344);
        if (v42)
        {
          sub_10003F5BC(v42);
          *(void *)(a1 + 344) = 0LL;
        }

        *(void *)(a1 + 8) = *(void *)(*(void *)(a2 + 8) + 8LL);
        if ((*(_BYTE *)(a1 + 96) & 1) != 0)
        {
          if (dword_10008BA20)
          {
            unsigned int v43 = (os_log_s *)ne_log_obj(v42);
            unsigned int v42 = (void *)os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v42)
            {
              size_t v44 = sub_10003F0A0(**(_DWORD **)(a1 + 88));
              *(_DWORD *)buf = 136315138;
              *(void *)v80 = v44;
              _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Selected NAT-T version: %s\n",  buf,  0xCu);
            }
          }

          *(_DWORD *)(a1 + 96) |= 6u;
          for (uint64_t i = v76; v76; uint64_t i = v76)
          {
            uint64_t v46 = sub_10003F8B4(a1, *(void *)(i + 8), *(_DWORD *)i);
            if (dword_10008BA20)
            {
              int v47 = v46;
              uint64_t v48 = (os_log_s *)ne_log_obj(v46);
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
              {
                int v49 = *(_DWORD *)i - 1;
                if (v47) {
                  __int128 v50 = "verified";
                }
                else {
                  __int128 v50 = "doesn't match";
                }
                *(_DWORD *)buf = 67109378;
                *(_DWORD *)v80 = v49;
                *(_WORD *)&v80[4] = 2080;
                *(void *)&v80[6] = v50;
                _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "NAT-D payload #%d %s\n",  buf,  0x12u);
              }
            }

            sub_10003F5BC(*(void **)(i + 8));
            uint64_t v51 = *(void *)(i + 16);
            __int128 v52 = *(void **)(i + 24);
            if (v51)
            {
              *(void *)(v51 + 24) = v52;
              __int128 v52 = *(void **)(i + 24);
            }

            else
            {
              v77 = *(uint64_t **)(i + 24);
            }

            void *v52 = v51;
            free((void *)i);
          }

          if (dword_10008BA20)
          {
            unint64_t v53 = (os_log_s *)ne_log_obj(v42);
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            {
              int v54 = "detected:";
              int v55 = *(_DWORD *)(a1 + 96);
              int v56 = "ME ";
              if ((v55 & 6) == 0) {
                int v54 = "not detected";
              }
              if ((v55 & 2) == 0) {
                int v56 = (const char *)&unk_10007E069;
              }
              *(_DWORD *)buf = 136315650;
              *(void *)v80 = v54;
              *(_WORD *)&v80[8] = 2080;
              *(void *)&v80[10] = v56;
              if ((v55 & 4) != 0) {
                __int16 v57 = "PEER";
              }
              else {
                __int16 v57 = (const char *)&unk_10007E069;
              }
              __int16 v81 = 2080;
              v82 = v57;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "NAT %s %s%s\n", buf, 0x20u);
            }
          }

          uint64_t v6 = v69;
          if ((*(_BYTE *)(a1 + 96) & 6) != 0) {
            sub_10003FDF8(a1);
          }
          sub_10004E564(a1);
        }

        uint64_t v58 = sub_100029CA4( *(void *)(*(void *)(a1 + 64) + 192LL),  *(void **)(a1 + 160),  (void **)(a1 + 168),  (void *)(a1 + 136));
        if ((v58 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            __int16 v64 = (os_log_s *)ne_log_obj(v58);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
              sub_100058FE8();
            }
          }

          goto LABEL_91;
        }

        uint64_t v59 = sub_10002D448(a1);
        if ((v59 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            int v65 = (os_log_s *)ne_log_obj(v59);
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
              sub_100059014();
            }
          }

          goto LABEL_91;
        }

        uint64_t v60 = sub_10002D804(a1);
        if ((v60 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            __int16 v66 = (os_log_s *)ne_log_obj(v60);
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
              sub_100059040();
            }
          }

          goto LABEL_91;
        }

        uint64_t v61 = sub_10002DAAC((void *)a1);
        if ((v61 & 0x80000000) != 0)
        {
          if (!dword_10008BA20) {
            goto LABEL_91;
          }
          v67 = (os_log_s *)ne_log_obj(v61);
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
            sub_10005906C();
          }
          goto LABEL_110;
        }

        uint64_t v62 = sub_10002DE98(a1);
        if ((v62 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            uint64_t v68 = (os_log_s *)ne_log_obj(v62);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
              sub_100059098();
            }
          }

          goto LABEL_110;
        }

        uint64_t v21 = sub_10002B2CC(a1);
        if ((_DWORD)v21 == -1)
        {
          char v20 = 0;
          goto LABEL_92;
        }

        if (!(_DWORD)v21)
        {
          sub_10002D160(a1);
          sub_100004344(v3, 5250);
          char v20 = 1;
          sub_100048C2C(1, 1, a1, 0LL);
          goto LABEL_92;
        }

        sub_10001BA48(a1, v21, 0LL);
        goto LABEL_91;
      case 1u:
      case 2u:
      case 3u:
      case 0xCu:
      case 0xEu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
        goto LABEL_56;
      case 4u:
        uint64_t v8 = sub_100026BA4((size_t **)(a1 + 160), *((void *)v7 + 1));
        if ((v8 & 0x80000000) == 0) {
          continue;
        }
        if (!dword_10008BA20) {
          goto LABEL_110;
        }
        int v27 = (os_log_s *)ne_log_obj(v8);
        uint64_t v6 = v69;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          sub_1000590F0();
        }
        goto LABEL_91;
      case 5u:
        uint64_t v8 = sub_100026BA4((size_t **)(a1 + 320), *((void *)v7 + 1));
        if ((v8 & 0x80000000) == 0) {
          continue;
        }
        if (!dword_10008BA20) {
          goto LABEL_110;
        }
        unsigned int v28 = (os_log_s *)ne_log_obj(v8);
        uint64_t v6 = v69;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          sub_100059148();
        }
        goto LABEL_91;
      case 6u:
        uint64_t v8 = sub_10002CCA8(a1, *((void *)v7 + 1));
        if ((v8 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            unsigned int v29 = (os_log_s *)ne_log_obj(v8);
            uint64_t v6 = v69;
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
              sub_1000591A0();
            }
            goto LABEL_91;
          }

    uint64_t v11 = 0xFFFFFFFFLL;
    if (!v15) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }

  uint64_t v21 = *(void **)(a1 + 128);
  if (*(_DWORD *)(a1 + 100) && *v21 >= 0x501uLL)
  {
    BOOL v22 = 0LL;
    LODWORD(v23) = *(_DWORD *)(a1 + 96);
  }

  else
  {
    char v23 = *(unsigned int *)(a1 + 96);
    BOOL v22 = (v23 >> 3) & 4;
  }

  int v24 = sub_10000A4F4( *(unsigned __int8 **)(a1 + 48),  *(unsigned __int8 **)(a1 + 56),  (uint64_t)v21,  a2,  v22,  (v23 >> 5) & 1);
  if ((_DWORD)v24 == -1)
  {
    if (dword_10008BA20)
    {
      int v27 = (os_log_s *)ne_log_obj(v24);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_10005960C();
      }
    }

    goto LABEL_49;
  }

  sub_100004344(v2, 5474);
  sub_100048C2C(1, 0, a1, 0LL);
  uint64_t v11 = 0LL;
  if (v15) {
LABEL_50:
  }
    sub_10003F5BC(v15);
LABEL_51:
  if (v8) {
LABEL_52:
  }
    sub_10003F5BC(v8);
LABEL_53:
  if (v9) {
    sub_10003F5BC(v9);
  }
  if (v16) {
    sub_10003F5BC(v16);
  }
  if (v18) {
    sub_10003F5BC(v18);
  }
  return v11;
}

                  if (!qword_100088FD8) {
                    qword_100088FD8 = os_transaction_create("IKEv1_Transaction");
                  }
                  if (!dword_10008BE28) {
                    dispatch_main();
                  }
                }

LABEL_110:
          char v20 = 0;
          uint64_t v21 = 0xFFFFFFFFLL;
          uint64_t v6 = v69;
          goto LABEL_92;
        }

        int v70 = 1;
        continue;
      case 7u:
        uint64_t v8 = sub_10002CF50(a1, *((void *)v7 + 1));
        if ((v8 & 0x80000000) == 0) {
          continue;
        }
        if (!dword_10008BA20) {
          goto LABEL_110;
        }
        uint64_t v30 = (os_log_s *)ne_log_obj(v8);
        uint64_t v6 = v69;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          sub_100059174();
        }
        goto LABEL_91;
      case 8u:
        *(void *)(a1 + 352) = *((void *)v7 + 1);
        continue;
      case 9u:
        uint64_t v8 = sub_100026BA4((size_t **)(a1 + 272), *((void *)v7 + 1));
        if ((v8 & 0x80000000) == 0) {
          continue;
        }
        if (!dword_10008BA20) {
          goto LABEL_110;
        }
        int v31 = (os_log_s *)ne_log_obj(v8);
        uint64_t v6 = v69;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_1000591CC();
        }
        goto LABEL_91;
      case 0xAu:
        uint64_t v8 = sub_100026BA4(v71, *((void *)v7 + 1));
        if ((v8 & 0x80000000) == 0) {
          continue;
        }
        if (!dword_10008BA20) {
          goto LABEL_110;
        }
        SecCertificateRef v32 = (os_log_s *)ne_log_obj(v8);
        uint64_t v6 = v69;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          sub_10005911C();
        }
        goto LABEL_91;
      case 0xBu:
        sub_10001C474(*((void *)v7 + 1), a1);
        continue;
      case 0xDu:
        uint64_t v8 = sub_10003F330(*((void *)v7 + 1));
        int v15 = v8;
        if (*(_DWORD *)(*(void *)(a1 + 64) + 176LL))
        {
          uint64_t v8 = sub_10003F6C0(v8);
          if ((_DWORD)v8) {
            sub_10003FEC0(a1, v15);
          }
        }

        switch(v15)
        {
          case 16:
            **(_DWORD **)(a1 + 408) |= 1u;
            break;
          case 17:
            **(_DWORD **)(a1 + 408) |= 2u;
            break;
          case 18:
            uint64_t v8 = sub_100015AB8(*((void *)v7 + 1));
            if ((v8 & 0x80000000) != 0)
            {
              if (dword_10008BA20)
              {
                uint64_t v16 = (os_log_s *)ne_log_obj(v8);
                uint64_t v8 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
                if ((_DWORD)v8) {
                  sub_100059224(&v72, v73);
                }
              }

              *(_DWORD *)(a1 + 100) = 1;
            }

            break;
          case 19:
            if (*(_DWORD *)(*(void *)(a1 + 64) + 208LL))
            {
              *(_DWORD *)(a1 + 368) = 1;
              if (dword_10008BA20)
              {
                uint64_t v17 = (os_log_s *)ne_log_obj(v8);
                uint64_t v8 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
                if ((_DWORD)v8) {
                  sub_1000591F8(&v74, v75);
                }
              }
            }

            break;
          default:
            continue;
        }

        continue;
      case 0xFu:
      case 0x14u:
        goto LABEL_10;
      default:
        if (v10 != 130)
        {
LABEL_56:
          if (dword_10008BA20)
          {
            int v24 = (os_log_s *)ne_log_obj(v8);
            uint64_t v6 = v69;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              sub_100058F2C();
            }
            goto LABEL_91;
          }

          goto LABEL_110;
        }

LABEL_10:
        if ((*(_BYTE *)(a1 + 96) & 1) == 0) {
          continue;
        }
        uint64_t v11 = *(void *)(a1 + 88);
        unint64_t v12 = malloc(0x20uLL);
        if (v12)
        {
          uint64_t v13 = (uint64_t *)v12;
          *((void *)v12 + 1) = 0LL;
          uint64_t v8 = sub_100026BA4((size_t **)v12 + 1, *((void *)v7 + 1));
          if ((v8 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              uint64_t v40 = (os_log_s *)ne_log_obj(v8);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
                sub_10005927C();
              }
            }

            free(v13);
            goto LABEL_110;
          }

          *(_DWORD *)uint64_t v13 = v9;
          v13[2] = 0LL;
          ++v9;
          uint64_t v14 = v77;
          v13[3] = (uint64_t)v77;
          *uint64_t v14 = (uint64_t)v13;
          v77 = v13 + 2;
          continue;
        }

        if (!dword_10008BA20) {
          goto LABEL_110;
        }
        uint64_t v34 = (os_log_s *)ne_log_obj(0LL);
        uint64_t v6 = v69;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          sub_100059250();
        }
LABEL_91:
        char v20 = 0;
        uint64_t v21 = 0xFFFFFFFFLL;
LABEL_92:
        sub_10003F5BC(v6);
LABEL_93:
        if (v78) {
          sub_10003F5BC(v78);
        }
        if ((v20 & 1) == 0)
        {
          int v35 = *(void **)(a1 + 160);
          if (v35)
          {
            sub_10003F5BC(v35);
            *(void *)(a1 + 160) = 0LL;
          }

          uint64_t v36 = *(void **)(a1 + 184);
          if (v36)
          {
            sub_10003F5BC(v36);
            *(void *)(a1 + 184) = 0LL;
          }

          uint64_t v37 = *(void **)(a1 + 320);
          if (v37)
          {
            sub_10003F5BC(v37);
            *(void *)(a1 + 320) = 0LL;
          }

          sub_10002C308(*(void **)(a1 + 288));
          *(void *)(a1 + 288) = 0LL;
          sub_10002C308(*(void **)(a1 + 296));
          *(void *)(a1 + 296) = 0LL;
          size_t v38 = *(void **)(a1 + 272);
          if (v38)
          {
            sub_10003F5BC(v38);
            *(void *)(a1 + 272) = 0LL;
          }

          sub_10002C308(*(void **)(a1 + 304));
          *(void *)(a1 + 304) = 0LL;
        }

        return v21;
    }
  }

        if ((*(_BYTE *)(a1 + 96) & 1) != 0)
        {
          int v9 = *(void *)(a1 + 88);
          if (v9)
          {
            if (*(unsigned __int16 *)(v9 + 14) == v8)
            {
              uint64_t v34 = 0LL;
              int v10 = sub_100026BA4((size_t **)&v34, *((void *)i + 1));
              if ((v10 & 0x80000000) != 0)
              {
                if (dword_10008BA20)
                {
                  uint64_t v30 = (os_log_s *)ne_log_obj(v10);
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                    sub_10005979C();
                  }
                }

                goto LABEL_76;
              }

              if (!v6) {
                *(_DWORD *)(a1 + 96) |= 6u;
              }
              uint64_t v11 = sub_10003F8B4(a1, (uint64_t)v34, v6);
              if (dword_10008BA20)
              {
                unint64_t v12 = v11;
                uint64_t v13 = (os_log_s *)ne_log_obj(v11);
                if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109378;
                  uint64_t v14 = "verified";
                  if (!v12) {
                    uint64_t v14 = "doesn't match";
                  }
                  *(_DWORD *)uint64_t v36 = v6;
                  *(_WORD *)&v36[4] = 2080;
                  *(void *)&v36[6] = v14;
                  _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "NAT-D payload #%d %s\n",  buf,  0x12u);
                }
              }

              ++v6;
              sub_10003F5BC(v34);
            }
          }
        }

        if ((*(_BYTE *)(a1 + 96) & 1) != 0)
        {
          uint64_t v8 = *(void *)(a1 + 88);
          if (v8)
          {
            if (*(unsigned __int16 *)(v8 + 14) == v7)
            {
              char v33 = 0LL;
              int v9 = sub_100026BA4((size_t **)&v33, *((void *)i + 1));
              if ((v9 & 0x80000000) != 0)
              {
                if (dword_10008BA20)
                {
                  unsigned int v28 = (os_log_s *)ne_log_obj(v9);
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
                    sub_10005979C();
                  }
                }

                char v23 = v32;
                goto LABEL_66;
              }

              if (!v5) {
                *(_DWORD *)(a1 + 96) |= 6u;
              }
              int v10 = sub_10003F8B4(a1, (uint64_t)v33, v5);
              if (dword_10008BA20)
              {
                uint64_t v11 = v10;
                unint64_t v12 = (os_log_s *)ne_log_obj(v10);
                if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109378;
                  uint64_t v13 = "verified";
                  if (!v11) {
                    uint64_t v13 = "doesn't match";
                  }
                  *(_DWORD *)int v35 = v5;
                  *(_WORD *)&v35[4] = 2080;
                  *(void *)&v35[6] = v13;
                  _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "NAT-D payload #%d %s\n",  buf,  0x12u);
                }
              }

              ++v5;
              sub_10003F5BC(v33);
            }
          }
        }

  if ((v4 - 64221) >= 2)
  {
    if (v4 != 65500) {
      goto LABEL_57;
    }
    goto LABEL_21;
  }
  }

  return v4;
}

    exit(1);
  }

  snprintf(byte_10008A077, 0x8BAuLL, a1, v5, v6);
  free(v5);
  free(v7);
  return byte_10008A077;
}

uint64_t sub_100013ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)(a1 + 16);
  int v2 = *(_DWORD *)(a1 + 16);
  v67 = 0LL;
  if (v2 != 5250)
  {
    if (dword_10008BA20)
    {
      unint64_t v12 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v6 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_100059548();
    }
  }

  uint64_t v7 = (uint64_t **)sub_10002AB18(a1, 1);
  *(void *)(a1 + 256) = v7;
  if (!v7)
  {
    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_100059310();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v8 = (uint64_t)v7;
  int v9 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
  if (*(void *)(*(void *)(a1 + 64) + 272LL)) {
    BOOL v10 = v9 == 65001;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    goto LABEL_28;
  }
  uint64_t v11 = 0LL;
  if (v9 <= 64220)
  {
    if (v9 == 1) {
      goto LABEL_28;
    }
    if (v9 != 3) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }

  switch(v9)
  {
    case 65500:
LABEL_28:
      uint64_t v17 = 0LL;
      int v18 = 8;
LABEL_29:
      uint64_t v7 = (uint64_t **)sub_100026E18(v17, v8, v18);
      uint64_t v11 = v7;
      v67 = v7;
      break;
    case 65005:
LABEL_23:
      uint64_t v14 = sub_10002BD24(a1);
      if ((v14 & 0x80000000) != 0)
      {
        if (dword_10008BA20)
        {
          unint64_t v53 = (os_log_s *)ne_log_obj(v14);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            sub_1000594F0();
          }
        }

        return 0xFFFFFFFFLL;
      }

      uint64_t v15 = sub_10002C034((void *)a1);
      if ((v15 & 0x80000000) != 0)
      {
        if (dword_10008BA20)
        {
          int v55 = (os_log_s *)ne_log_obj(v15);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
            sub_10005951C();
          }
        }

        return 0xFFFFFFFFLL;
      }

      uint64_t v16 = *(void *)(a1 + 280);
      if (v16 && *(_DWORD *)(*(void *)(a1 + 64) + 116LL)) {
        uint64_t v17 = sub_100026E18(0LL, *(void *)(v16 + 24), 6);
      }
      else {
        uint64_t v17 = 0LL;
      }
      uint64_t v8 = *(void *)(a1 + 264);
      int v18 = 9;
      goto LABEL_29;
    case 64221:
      goto LABEL_28;
  }

LABEL_30:
  if ((*(_BYTE *)(a1 + 96) & 1) == 0)
  {
    int v19 = 0LL;
    char v20 = 0LL;
    goto LABEL_48;
  }

  if (dword_10008BA20)
  {
    uint64_t v21 = (os_log_s *)ne_log_obj(v7);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Adding remote and local NAT-D payloads.\n",  buf,  2u);
    }
  }

  uint64_t v22 = sub_10003F6D0(a1, *(void *)(a1 + 48));
  if (!v22)
  {
    if (dword_10008BA20)
    {
      unsigned int v29 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_100059488((const sockaddr **)(a1 + 48));
      }
    }

    return 0xFFFFFFFFLL;
  }

  char v20 = (void *)v22;
  uint64_t v23 = sub_10003F6D0(a1, *(void *)(a1 + 56));
  if (!v23)
  {
    if (dword_10008BA20)
    {
      uint64_t v30 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_100059488((const sockaddr **)(a1 + 56));
      }
    }

    int v19 = 0LL;
    int v31 = 0LL;
    SecCertificateRef v32 = 0LL;
    uint64_t v33 = 0xFFFFFFFFLL;
    goto LABEL_111;
  }

  int v19 = (void *)v23;
  uint64_t v24 = *(void *)(a1 + 88);
  int v25 = *(unsigned __int16 *)(v24 + 14);
  if (*(_DWORD *)v24 == 14)
  {
    unsigned int v26 = sub_100026E18(v11, v23, v25);
    int v27 = *(unsigned __int16 *)(*(void *)(a1 + 88) + 14LL);
    uint64_t v28 = (uint64_t)v20;
  }

  else
  {
    unsigned int v26 = sub_100026E18(v11, (uint64_t)v20, v25);
    int v27 = *(unsigned __int16 *)(*(void *)(a1 + 88) + 14LL);
    uint64_t v28 = (uint64_t)v19;
  }

  uint64_t v11 = (uint64_t **)sub_100026E18(v26, v28, v27);
  v67 = v11;
LABEL_48:
  if ((~**(_DWORD **)(a1 + 408) & 3) == 0)
  {
    int v34 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
    if (v34 == 65001 && *(void *)(*(void *)(a1 + 64) + 272LL) != 0LL || v34 != 64221)
    {
      int v31 = 0LL;
      goto LABEL_57;
    }

    size_t v44 = sub_10002D2A0((size_t *)a1);
    if (v44)
    {
      __int16 v45 = v44;
      uint64_t v46 = sub_10002A2C8(*(void *)(a1 + 192), (uint64_t)v44, a1);
      if (v46)
      {
        uint64_t v47 = v46;
        sub_10003F5BC(v45);
        unsigned int v64 = *(_DWORD *)(*(void *)(a1 + 64) + 24LL);
        uint64_t v48 = sub_10003F4BC(*(void *)v47 + 24LL);
        if (v48)
        {
          int v31 = v48;
          *(void *)v48[1] = bswap32(v64) | 0x379E100100000000LL;
          uint64_t v49 = v48[1];
          *(_OWORD *)(v49 + 8) = *(_OWORD *)a1;
          memcpy((void *)(v49 + 24), *(const void **)(v47 + 8), *(void *)v47);
          sub_10003F5BC((void *)v47);
          uint64_t v11 = (uint64_t **)sub_100026E18(v11, (uint64_t)v31, 11);
          v67 = v11;
LABEL_57:
          if ((*(_BYTE *)(a1 + 432) & 1) != 0
            || !*(_DWORD *)(*(void *)(a1 + 64) + 168LL)
            || sub_100009F88(*(void *)(a1 + 48)))
          {
            SecCertificateRef v32 = 0LL;
          }

          else
          {
            unsigned int v65 = *(_DWORD *)(*(void *)(a1 + 64) + 24LL);
            uint64_t v60 = sub_10003F4BC(0x18uLL);
            if (!v60)
            {
              if (dword_10008BA20)
              {
                __int16 v63 = (os_log_s *)ne_log_obj(0LL);
                if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
                  sub_1000593D8();
                }
              }

              SecCertificateRef v32 = 0LL;
              goto LABEL_109;
            }

            SecCertificateRef v32 = v60;
            *(void *)v60[1] = bswap32(v65) | 0x260100100000000LL;
            *(_OWORD *)(v60[1] + 8LL) = *(_OWORD *)a1;
            v67 = (uint64_t **)sub_100026E18(v11, (uint64_t)v60, 11);
            uint64_t v61 = sub_100009FCC(*(unsigned __int8 **)(a1 + 48));
            if ((_DWORD)v61 == -1)
            {
              if (dword_10008BA20)
              {
                uint64_t v62 = (os_log_s *)ne_log_obj(v61);
                if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
                  sub_10005945C();
                }
              }
            }
          }

          *(_BYTE *)(a1 + 82) |= 1u;
          goto LABEL_63;
        }

        if (dword_10008BA20)
        {
          uint64_t v59 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
            sub_1000593D8();
          }
        }

        uint64_t v58 = (void *)v47;
      }

      else
      {
        if (dword_10008BA20)
        {
          __int16 v57 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
            sub_1000593AC();
          }
        }

        uint64_t v58 = v45;
      }

      sub_10003F5BC(v58);
    }

    else if (dword_10008BA20)
    {
      int v54 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
        sub_10005933C(a1);
      }
    }

    SecCertificateRef v32 = 0LL;
    int v31 = 0LL;
    goto LABEL_109;
  }

  SecCertificateRef v32 = 0LL;
  int v31 = 0LL;
LABEL_63:
  uint64_t v37 = sub_100026E60(&v67, a1);
  *(void *)(a1 + 128) = v37;
  if ((~**(_DWORD **)(a1 + 408) & 3) == 0)
  {
    size_t v38 = sub_10002EA40(a1, (uint64_t)v37, *(void *)(*(void *)(a1 + 328) + 8LL), **(void **)(a1 + 328));
    if (!v38)
    {
      if (dword_10008BA20)
      {
        __int128 v52 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
          sub_100059404();
        }
      }

      goto LABEL_109;
    }

    uint64_t v37 = v38;
    sub_10003F5BC(*(void **)(a1 + 128));
    *(void *)(a1 + 128) = v37;
  }

  uint64_t v39 = sub_100024890(a1, v37);
  if ((v39 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      __int128 v50 = (os_log_s *)ne_log_obj(v39);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
        sub_100058CE4();
      }
    }
  }

  else
  {
    uint64_t v40 = *(void **)(a1 + 128);
    if (*(_DWORD *)(a1 + 100) && *v40 >= 0x501uLL)
    {
      uint64_t v41 = 0LL;
      LODWORD(v42) = *(_DWORD *)(a1 + 96);
    }

    else
    {
      unint64_t v42 = *(unsigned int *)(a1 + 96);
      uint64_t v41 = (v42 >> 3) & 4;
    }

    uint64_t v43 = sub_10000A4F4( *(unsigned __int8 **)(a1 + 48),  *(unsigned __int8 **)(a1 + 56),  (uint64_t)v40,  a2,  v41,  (v42 >> 5) & 1);
    if ((_DWORD)v43 != -1)
    {
      *(_BYTE *)(a1 + 82) |= 1u;
      sub_100004344(v3, 9216);
      uint64_t v33 = 0LL;
      goto LABEL_110;
    }

    if (dword_10008BA20)
    {
      uint64_t v51 = (os_log_s *)ne_log_obj(v43);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
        sub_100059430();
      }
    }
  }

  if (v7) {
    sub_10003F5BC(v7);
  }
  return 0LL;
}

    free(v13);
  }

  else if (dword_10008BA20)
  {
    uint64_t v24 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      sub_10005BA0C();
    }
  }

  return 0xFFFFFFFFLL;
}

      uint64_t v7 = (unsigned __int16 *)((char *)v7 + v14 + 4);
      uint64_t v8 = v12 - (v14 + 4);
LABEL_35:
      if (v8 <= 0) {
        goto LABEL_78;
      }
    }
  }

  if (!*(_BYTE *)(a1 + 417))
  {
    *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 6);
    if (sub_100048678(a1, v7, v8))
    {
      BOOL v10 = 0LL;
      goto LABEL_7;
    }

    *(_BYTE *)(a1 + 417) = 1;
    *(void *)(a1 + 424) = sub_10003F5F0(a3);
    uint64_t v41 = sub_10004DBEC((void *)a1);
    if (dword_10008BA20)
    {
      unint64_t v42 = (os_log_s *)ne_log_obj(v41);
      int v9 = 0LL;
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT)) {
        return v9;
      }
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "IPSec Extended Authentication requested.\n",  buf,  2u);
    }
  }

  return 0LL;
}

    uint64_t v23 = *(void *)(v23 + 1712);
  }

  while (v23);
  if (!v24) {
    goto LABEL_50;
  }
  if (dword_10008BA20)
  {
    uint64_t v33 = (os_log_s *)ne_log_obj(v21);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
      sub_100066F18(v24);
    }
  }

  return v24;
}

LABEL_109:
  uint64_t v33 = 0xFFFFFFFFLL;
LABEL_110:
  if (v20) {
LABEL_111:
  }
    sub_10003F5BC(v20);
  if (v19) {
    sub_10003F5BC(v19);
  }
  if (v31) {
    sub_10003F5BC(v31);
  }
  if (v32) {
    sub_10003F5BC(v32);
  }
  return v33;
}

uint64_t sub_100014200(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) == 5504)
  {
    uint64_t v4 = sub_100023ABC(a2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = v4[1];
      if (*(_BYTE *)v6 == 1)
      {
        uint64_t v7 = sub_100026BA4((size_t **)(a1 + 336), *(void *)(v6 + 8));
        if ((v7 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            uint64_t v23 = (os_log_s *)ne_log_obj(v7);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
              sub_100058F00();
            }
          }
        }

        else
        {
          int v10 = *(unsigned __int8 *)(v6 + 16);
          int v9 = (unsigned __int8 *)(v6 + 16);
          int v8 = v10;
          if (v10)
          {
            while (2)
            {
              if (dword_10008BA20)
              {
                uint64_t v11 = (os_log_s *)ne_log_obj(v7);
                uint64_t v7 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
                if ((_DWORD)v7) {
                  sub_100059578(v45, v9, &v46, v11);
                }
                int v8 = *v9;
              }

              switch(v8)
              {
                case 4:
                  uint64_t v7 = sub_100026BA4((size_t **)(a1 + 160), *((void *)v9 + 1));
                  if ((v7 & 0x80000000) == 0) {
                    goto LABEL_35;
                  }
                  if (dword_10008BA20)
                  {
                    int v34 = (os_log_s *)ne_log_obj(v7);
                    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
                      sub_1000590F0();
                    }
                  }

                  goto LABEL_58;
                case 5:
                  uint64_t v7 = sub_100026BA4((size_t **)(a1 + 320), *((void *)v9 + 1));
                  if ((v7 & 0x80000000) == 0) {
                    goto LABEL_35;
                  }
                  if (dword_10008BA20)
                  {
                    int v35 = (os_log_s *)ne_log_obj(v7);
                    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
                      sub_100059148();
                    }
                  }

                  goto LABEL_58;
                case 7:
                  uint64_t v7 = sub_10002CF50(a1, *((void *)v9 + 1));
                  if ((v7 & 0x80000000) == 0) {
                    goto LABEL_35;
                  }
                  if (dword_10008BA20)
                  {
                    uint64_t v36 = (os_log_s *)ne_log_obj(v7);
                    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
                      sub_100059174();
                    }
                  }

                  goto LABEL_58;
                case 10:
                  uint64_t v7 = sub_100026BA4((size_t **)(a1 + 184), *((void *)v9 + 1));
                  if ((v7 & 0x80000000) == 0) {
                    goto LABEL_35;
                  }
                  if (dword_10008BA20)
                  {
                    uint64_t v37 = (os_log_s *)ne_log_obj(v7);
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
                      sub_10005911C();
                    }
                  }

                  goto LABEL_58;
                case 13:
                  uint64_t v7 = sub_10003F330(*((void *)v9 + 1));
                  int v12 = v7;
                  if (*(_DWORD *)(*(void *)(a1 + 64) + 176LL) && (uint64_t v7 = sub_10003F6C0(v7), (_DWORD)v7))
                  {
                    sub_10003FEC0(a1, v12);
                  }

                  else
                  {
                    switch(v12)
                    {
                      case 16:
                        uint64_t v13 = *(int **)(a1 + 408);
                        int v14 = *v13 | 1;
                        goto LABEL_25;
                      case 17:
                        uint64_t v13 = *(int **)(a1 + 408);
                        int v14 = *v13 | 2;
LABEL_25:
                        int *v13 = v14;
                        break;
                      case 18:
                        uint64_t v7 = sub_100015AB8(*((void *)v9 + 1));
                        if ((v7 & 0x80000000) != 0)
                        {
                          if (dword_10008BA20)
                          {
                            uint64_t v15 = (os_log_s *)ne_log_obj(v7);
                            uint64_t v7 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
                            if ((_DWORD)v7) {
                              sub_100059224(&v39, v40);
                            }
                          }

                          *(_DWORD *)(a1 + 100) = 1;
                        }

                        break;
                      case 19:
                        if (*(_DWORD *)(*(void *)(a1 + 64) + 208LL))
                        {
                          *(_DWORD *)(a1 + 368) = 1;
                          if (dword_10008BA20)
                          {
                            uint64_t v16 = (os_log_s *)ne_log_obj(v7);
                            uint64_t v7 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
                            if ((_DWORD)v7) {
                              sub_1000591F8(&v41, v42);
                            }
                          }
                        }

                        break;
                      default:
                        break;
                    }
                  }

LABEL_35:
                  int v17 = v9[16];
                  v9 += 16;
                  int v8 = v17;
                  if (!v17) {
                    break;
                  }
                  continue;
                default:
                  if (dword_10008BA20)
                  {
                    uint64_t v33 = (os_log_s *)ne_log_obj(v7);
                    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
                      sub_100058F2C();
                    }
                  }

                  goto LABEL_58;
              }

              break;
            }
          }

          if (*(void *)(a1 + 160) && *(void *)(a1 + 184))
          {
            uint64_t v21 = sub_1000102F4(a1);
            if ((_DWORD)v21)
            {
              if (dword_10008BA20)
              {
                uint64_t v22 = (os_log_s *)ne_log_obj(v21);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                  sub_1000590C4();
                }
              }
            }

            else
            {
              if ((*(_BYTE *)(a1 + 96) & 1) != 0)
              {
                if (dword_10008BA20)
                {
                  uint64_t v30 = (os_log_s *)ne_log_obj(v21);
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                  {
                    int v31 = sub_10003F0A0(**(_DWORD **)(a1 + 88));
                    *(_DWORD *)buf = 136315138;
                    size_t v44 = v31;
                    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Selected NAT-T version: %s\n",  buf,  0xCu);
                  }
                }

                sub_10004E564(a1);
              }

              uint64_t v32 = sub_10000B528(*(unint64_t **)(a1 + 336), (void *)a1);
              if ((v32 & 0x80000000) == 0)
              {
                sub_10002D160(a1);
                sub_100004344(v3, 5505);
                sub_10003F5BC(v5);
                return 0LL;
              }

              if (dword_10008BA20)
              {
                size_t v38 = (os_log_s *)ne_log_obj(v32);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
                  sub_100058FBC();
                }
              }
            }
          }

          else if (dword_10008BA20)
          {
            uint64_t v24 = (os_log_s *)ne_log_obj(v7);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              sub_100058F90();
            }
          }
        }
      }

      else if (dword_10008BA20)
      {
        char v20 = (os_log_s *)ne_log_obj(v4);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_1000592A8();
        }
      }

    if (!v7) {
      return 0xFFFFFFFFLL;
    }
LABEL_36:
    sub_10003F5BC(v7);
    return 0xFFFFFFFFLL;
  }

  uint64_t v16 = sub_100015874(a1, v2);
  if ((_DWORD)v16 == -1)
  {
    if (dword_10008BA20)
    {
      int v17 = (os_log_s *)ne_log_obj(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        sub_10005CAFC();
        if (!v7) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_36;
      }
    }

    goto LABEL_35;
  }

    sub_10003F5BC((void *)v13);
    return 0LL;
  }

  if (dword_10008BA20)
  {
    int v27 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
LABEL_27:
    }
      sub_10005F258();
  }

  return 0xFFFFFFFFLL;
}

      sub_100048468(a1, (uint64_t)off_1000884F8[0]);
      sub_100048500((uint64_t *)a1);
      return;
    }

    int v9 = __error();
  }

  while (*v9 == 4);
  if (dword_10008BA20)
  {
    int v17 = (os_log_s *)ne_log_obj(v9);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
LABEL_6:
    }
      sub_1000657CC();
  }

              exit(1);
            }

            if (!dword_10008BA20) {
              goto LABEL_35;
            }
            int v25 = (os_log_s *)ne_log_obj(v12);
            if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              goto LABEL_35;
            }
          }

          else
          {
            if (!dword_10008BA20) {
              goto LABEL_35;
            }
            uint64_t v24 = (os_log_s *)ne_log_obj(v12);
            if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              goto LABEL_35;
            }
          }

      if (!dword_10008BA20) {
        goto LABEL_13;
      }
      uint64_t v15 = (os_log_s *)ne_log_obj(v4);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_13;
      }
      *(_WORD *)int v19 = 0;
      uint64_t v6 = v15;
      uint64_t v7 = "session died while sleeping.\n";
    }

    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, v19, 2u);
LABEL_13:
    a1 = sub_10004D770(v2, off_100088518[0]);
  }

LABEL_58:
      sub_10003F5BC(v5);
    }

    else if (dword_10008BA20)
    {
      int v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
    }
  }

  else if (dword_10008BA20)
  {
    int v18 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_100058E74();
    }
  }

  int v25 = *(void **)(a1 + 336);
  if (v25)
  {
    sub_10003F5BC(v25);
    *(void *)(a1 + 336) = 0LL;
  }

  unsigned int v26 = *(void **)(a1 + 160);
  if (v26)
  {
    sub_10003F5BC(v26);
    *(void *)(a1 + 160) = 0LL;
  }

  int v27 = *(void **)(a1 + 184);
  if (v27)
  {
    sub_10003F5BC(v27);
    *(void *)(a1 + 184) = 0LL;
  }

  uint64_t v28 = *(void **)(a1 + 320);
  if (v28)
  {
    sub_10003F5BC(v28);
    *(void *)(a1 + 320) = 0LL;
  }

  sub_10002C308(*(void **)(a1 + 304));
  *(void *)(a1 + 304) = 0LL;
  return 0xFFFFFFFFLL;
}

  sub_10003F5BC(v9);
  sub_10003F5BC(v23);
  if (v11) {
    sub_10003F5BC(v11);
  }
  return v5;
}

uint64_t sub_1000147F0(uint64_t a1, uint64_t a2)
{
  v83 = 0LL;
  int v2 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) != 5505)
  {
    if (dword_10008BA20)
    {
      uint64_t v16 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    return 0xFFFFFFFFLL;
  }

  sub_100026984((void *)(a1 + 8), *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v5 = sub_1000108E0(a1);
  if ((v5 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      int v17 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_100058C08();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v6 = sub_100029E9C(*(void *)(*(void *)(a1 + 64) + 192LL), (size_t **)(a1 + 152), (void *)(a1 + 136));
  if ((v6 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      int v18 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100058C8C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v7 = sub_1000076AC(*(_DWORD *)(*(void *)(a1 + 64) + 140LL));
  *(void *)(a1 + 176) = v7;
  if (!v7)
  {
    if (dword_10008BA20)
    {
      int v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100058CB8();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v8 = sub_100029CA4( *(void *)(*(void *)(a1 + 72) + 64LL),  *(void **)(a1 + 160),  (void **)(a1 + 168),  (void *)(a1 + 136));
  if ((v8 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      char v20 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_100058FE8();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v9 = sub_10002D448(a1);
  if ((v9 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v21 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_100059014();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v10 = sub_10002D804(a1);
  if ((v10 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v22 = (os_log_s *)ne_log_obj(v10);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_100059040();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v11 = sub_10002DAAC((void *)a1);
  if ((v11 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v23 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_10005906C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v12 = sub_10002DE98(a1);
  if ((v12 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100059098();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v13 = (os_log_s *)ne_log_obj(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      sub_100059714();
    }
  }

  uint64_t v14 = sub_10002AB18(a1, 1);
  *(void *)(a1 + 256) = v14;
  if (!v14)
  {
    if (dword_10008BA20)
    {
      unsigned int v26 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_1000595E0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*(_DWORD *)(*(void *)(a1 + 64) + 120LL))
  {
    uint64_t v14 = sub_10002D27C(*(_DWORD *)(*(void *)(a1 + 72) + 48LL));
    if ((_DWORD)v14)
    {
      uint64_t v14 = (uint64_t)sub_10002D070(a1);
      if (v14)
      {
        uint64_t v79 = v14;
        char v15 = 0;
        goto LABEL_46;
      }

      if (dword_10008BA20)
      {
        uint64_t v37 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          sub_1000596E8();
        }
      }

      return 0xFFFFFFFFLL;
    }
  }

  uint64_t v79 = 0LL;
  char v15 = 1;
LABEL_46:
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
  {
    unsigned int v29 = sub_10003F2A0(**(unsigned int **)(a1 + 88));
    uint64_t v80 = (uint64_t)v29;
    if (dword_10008BA20)
    {
      uint64_t v30 = (os_log_s *)ne_log_obj(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Adding remote and local NAT-D payloads.\n",  buf,  2u);
      }
    }

    uint64_t v31 = sub_10003F6D0(a1, *(void *)(a1 + 48));
    if (!v31)
    {
      if (dword_10008BA20)
      {
        int v34 = (os_log_s *)ne_log_obj(0LL);
        int v35 = (void *)v80;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          sub_100059488((const sockaddr **)(a1 + 48));
        }
        uint64_t v33 = 0LL;
        uint64_t v32 = 0LL;
        uint64_t v36 = 0LL;
        int v25 = 0LL;
        goto LABEL_145;
      }

      uint64_t v33 = 0LL;
      uint64_t v32 = 0LL;
      uint64_t v36 = 0LL;
      int v25 = 0LL;
      goto LABEL_105;
    }

    int v25 = (void *)v31;
    uint64_t v14 = sub_10003F6D0(a1, *(void *)(a1 + 56));
    uint64_t v78 = v14;
    if (!v14)
    {
      if (dword_10008BA20)
      {
        size_t v44 = (os_log_s *)ne_log_obj(0LL);
        int v35 = (void *)v80;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
          sub_100059488((const sockaddr **)(a1 + 56));
        }
        uint64_t v33 = 0LL;
        uint64_t v32 = 0LL;
        uint64_t v36 = 0LL;
        goto LABEL_145;
      }

      uint64_t v33 = 0LL;
      uint64_t v32 = 0LL;
      uint64_t v36 = 0LL;
      goto LABEL_105;
    }
  }

  else
  {
    uint64_t v78 = 0LL;
    int v25 = 0LL;
    uint64_t v80 = 0LL;
  }

  if (*(_DWORD *)(a1 + 368) && *(_DWORD *)(*(void *)(a1 + 64) + 208LL))
  {
    uint64_t v14 = (uint64_t)sub_10003F2A0(19LL);
    uint64_t v32 = (void *)v14;
  }

  else
  {
    uint64_t v32 = 0LL;
  }

  if (*(_DWORD *)(a1 + 100))
  {
    uint64_t v14 = (uint64_t)sub_10003F2A0(18LL);
    if (v14)
    {
      uint64_t v14 = (uint64_t)sub_100015FDC((void **)v14, 0x80000000);
      uint64_t v33 = (void *)v14;
    }

    else
    {
      uint64_t v33 = 0LL;
    }

    if (v33 || !dword_10008BA20) {
      goto LABEL_78;
    }
    size_t v38 = (os_log_s *)ne_log_obj(v14);
    uint64_t v14 = os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v14) {
      sub_1000596BC();
    }
  }

  uint64_t v33 = 0LL;
LABEL_78:
  int v39 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
  if (*(void *)(*(void *)(a1 + 64) + 272LL) && v39 == 65001)
  {
    uint64_t v40 = 0LL;
    goto LABEL_112;
  }

  uint64_t v40 = 0LL;
  if (v39 <= 64221)
  {
    if (v39 == 1)
    {
LABEL_96:
      __int16 v45 = sub_100026E18(0LL, *(void *)(a1 + 344), 1);
      uint64_t v46 = sub_100026E18(v45, *(void *)(a1 + 152), 4);
      uint64_t v47 = sub_100026E18(v46, *(void *)(a1 + 176), 10);
      uint64_t v48 = sub_100026E18(v47, *(void *)(a1 + 312), 5);
      uint64_t v49 = *(void *)(a1 + 256);
      int v50 = 8;
LABEL_110:
      uint64_t v14 = (uint64_t)sub_100026E18(v48, v49, v50);
      uint64_t v40 = (uint64_t **)v14;
      v83 = (uint64_t **)v14;
      if ((v15 & 1) == 0)
      {
        uint64_t v14 = (uint64_t)sub_100026E18((void *)v14, v79, 7);
        uint64_t v40 = (uint64_t **)v14;
        v83 = (uint64_t **)v14;
      }

LABEL_112:
      int v59 = **(_DWORD **)(a1 + 408);
      if ((v59 & 1) == 0)
      {
        int v54 = 0LL;
        goto LABEL_119;
      }

      if (dword_10008BA20)
      {
        uint64_t v60 = (os_log_s *)ne_log_obj(v14);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int16 v81 = 0;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Adding xauth VID payload.\n", v81, 2u);
        }
      }

      uint64_t v61 = sub_10003F2A0(16LL);
      if (v61)
      {
        int v54 = v61;
        uint64_t v40 = (uint64_t **)sub_100026E18(v40, (uint64_t)v61, 13);
        v83 = v40;
        int v59 = **(_DWORD **)(a1 + 408);
LABEL_119:
        if ((v59 & 2) != 0)
        {
          uint64_t v62 = sub_10003F2A0(17LL);
          if (!v62)
          {
            if (dword_10008BA20)
            {
              v77 = (os_log_s *)ne_log_obj(0LL);
              int v35 = (void *)v80;
              uint64_t v36 = (void *)v78;
              if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
                sub_100059638();
              }
              unint64_t v53 = 0LL;
              goto LABEL_146;
            }

            unint64_t v53 = 0LL;
            goto LABEL_156;
          }

          unint64_t v53 = v62;
          uint64_t v40 = (uint64_t **)sub_100026E18(v40, (uint64_t)v62, 13);
          v83 = v40;
        }

        else
        {
          unint64_t v53 = 0LL;
        }

        if (v80)
        {
          __int16 v63 = sub_100026E18(v40, v80, 13);
          uint64_t v64 = *(void *)(a1 + 88);
          int v65 = *(unsigned __int16 *)(v64 + 14);
          if (*(_DWORD *)v64 == 14)
          {
            __int16 v66 = sub_100026E18(v63, v78, v65);
            int v67 = *(unsigned __int16 *)(*(void *)(a1 + 88) + 14LL);
            uint64_t v68 = (uint64_t)v25;
          }

          else
          {
            __int16 v66 = sub_100026E18(v63, (uint64_t)v25, v65);
            int v67 = *(unsigned __int16 *)(*(void *)(a1 + 88) + 14LL);
            uint64_t v68 = v78;
          }

          uint64_t v40 = (uint64_t **)sub_100026E18(v66, v68, v67);
          v83 = v40;
        }

        if (v33)
        {
          uint64_t v40 = (uint64_t **)sub_100026E18(v40, (uint64_t)v33, 13);
          v83 = v40;
        }

        if (v32) {
          v83 = (uint64_t **)sub_100026E18(v40, (uint64_t)v32, 13);
        }
        *(void *)(a1 + 128) = sub_100026E60(&v83, a1);
        *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)(a1 + 64) + 200LL);
        uint64_t v69 = sub_100024B4C(a1);
        if ((_DWORD)v69 == -1)
        {
          if (dword_10008BA20)
          {
            char v74 = (os_log_s *)ne_log_obj(v69);
            int v35 = (void *)v80;
            uint64_t v36 = (void *)v78;
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
              sub_100058CE4();
            }
            goto LABEL_146;
          }
        }

        else
        {
          int v70 = *(void **)(a1 + 128);
          if (*(_DWORD *)(a1 + 100) && *v70 >= 0x501uLL)
          {
            uint64_t v71 = 0LL;
            LODWORD(v72) = *(_DWORD *)(a1 + 96);
          }

          else
          {
            unint64_t v72 = *(unsigned int *)(a1 + 96);
            uint64_t v71 = (v72 >> 3) & 4;
          }

          uint64_t v73 = sub_10000A4F4( *(unsigned __int8 **)(a1 + 48),  *(unsigned __int8 **)(a1 + 56),  (uint64_t)v70,  a2,  v71,  (v72 >> 5) & 1);
          if ((_DWORD)v73 != -1)
          {
            sub_100004344(v2, 5538);
            sub_100048C2C(1, 0, a1, 0LL);
            uint64_t v27 = 0LL;
LABEL_157:
            int v55 = (void *)v79;
            int v35 = (void *)v80;
            uint64_t v36 = (void *)v78;
            goto LABEL_158;
          }

          if (dword_10008BA20)
          {
            uint64_t v76 = (os_log_s *)ne_log_obj(v73);
            int v35 = (void *)v80;
            uint64_t v36 = (void *)v78;
            if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
              sub_10005960C();
            }
            goto LABEL_146;
          }
        }

LABEL_156:
        uint64_t v27 = 0xFFFFFFFFLL;
        goto LABEL_157;
      }

      if (dword_10008BA20)
      {
        v75 = (os_log_s *)ne_log_obj(0LL);
        int v35 = (void *)v80;
        uint64_t v36 = (void *)v78;
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
          sub_100059664();
        }
LABEL_145:
        unint64_t v53 = 0LL;
        int v54 = 0LL;
LABEL_146:
        uint64_t v27 = 0xFFFFFFFFLL;
        int v55 = (void *)v79;
        goto LABEL_158;
      }

LABEL_154:
      unint64_t v53 = 0LL;
      int v54 = 0LL;
      goto LABEL_156;
    }

    if (v39 != 3) {
      goto LABEL_112;
    }
  }

  else if (v39 != 64222 && v39 != 65006)
  {
    if (v39 != 65002) {
      goto LABEL_112;
    }
    goto LABEL_96;
  }

  uint64_t v41 = sub_10002BD24(a1);
  if ((v41 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v51 = (os_log_s *)ne_log_obj(v41);
      int v35 = (void *)v80;
      uint64_t v36 = (void *)v78;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
        sub_100059690();
      }
      goto LABEL_145;
    }

    goto LABEL_154;
  }

  uint64_t v42 = sub_10002C034((void *)a1);
  if ((v42 & 0x80000000) == 0)
  {
    if (*(void *)(a1 + 280)) {
      BOOL v43 = *(_DWORD *)(*(void *)(a1 + 64) + 116LL) == 0;
    }
    else {
      BOOL v43 = 1;
    }
    int v56 = sub_100026E18(0LL, *(void *)(a1 + 344), 1);
    __int16 v57 = sub_100026E18(v56, *(void *)(a1 + 152), 4);
    uint64_t v58 = sub_100026E18(v57, *(void *)(a1 + 176), 10);
    uint64_t v48 = sub_100026E18(v58, *(void *)(a1 + 312), 5);
    if (!v43) {
      uint64_t v48 = sub_100026E18(v48, *(void *)(*(void *)(a1 + 280) + 24LL), 6);
    }
    uint64_t v49 = *(void *)(a1 + 264);
    int v50 = 9;
    goto LABEL_110;
  }

  uint64_t v36 = (void *)v78;
  if (dword_10008BA20)
  {
    __int128 v52 = (os_log_s *)ne_log_obj(v42);
    int v35 = (void *)v80;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
      sub_10005951C();
    }
    goto LABEL_145;
  }

uint64_t sub_100015240(uint64_t a1, void *a2)
{
  uint64_t v3 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) != 5538)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_7;
  }

  if ((*(_BYTE *)(a2[1] + 19LL) & 1) != 0)
  {
    uint64_t v4 = sub_10002E664(a1, a2, **(void **)(a1 + 328), *(void *)(*(void *)(a1 + 328) + 8LL));
    if (v4) {
      goto LABEL_9;
    }
    if (dword_10008BA20)
    {
      uint64_t v27 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_1000597C8();
      }
    }

LABEL_7:
    uint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_77;
  }

  uint64_t v4 = sub_10003F5F0((uint64_t)a2);
LABEL_9:
  uint64_t v7 = (uint64_t)sub_100023ABC((uint64_t)v4);
  if (!v7)
  {
    if (dword_10008BA20)
    {
      int v18 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
    }

    char v19 = 0;
    uint64_t v6 = 0xFFFFFFFFLL;
    if (v4) {
      goto LABEL_75;
    }
    goto LABEL_76;
  }

  int v8 = 0;
  int v9 = 0;
  *(void *)(a1 + 352) = 0LL;
  int v34 = (void *)v7;
  uint64_t v10 = *(unsigned __int8 **)(v7 + 8);
  while (2)
  {
    int v11 = *v10;
    switch(*v10)
    {
      case 6u:
        uint64_t v7 = sub_10002CCA8(a1, *((void *)v10 + 1));
        if ((v7 & 0x80000000) == 0)
        {
          int v8 = 1;
          goto LABEL_32;
        }

        if (!dword_10008BA20) {
          goto LABEL_73;
        }
        unsigned int v29 = (os_log_s *)ne_log_obj(v7);
        int v25 = v34;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
          sub_100059744();
        }
        goto LABEL_69;
      case 7u:
      case 0xAu:
      case 0xCu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
        goto LABEL_58;
      case 8u:
        *(void *)(a1 + 352) = *((void *)v10 + 1);
        goto LABEL_32;
      case 9u:
        uint64_t v7 = sub_100026BA4((size_t **)(a1 + 272), *((void *)v10 + 1));
        if ((v7 & 0x80000000) == 0) {
          goto LABEL_32;
        }
        if (!dword_10008BA20) {
          goto LABEL_73;
        }
        uint64_t v30 = (os_log_s *)ne_log_obj(v7);
        int v25 = v34;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          sub_100059770();
        }
        goto LABEL_69;
      case 0xBu:
        sub_10001C474(*((void *)v10 + 1), a1);
        goto LABEL_32;
      case 0xDu:
        uint64_t v7 = sub_10003F330(*((void *)v10 + 1));
        goto LABEL_32;
      case 0x14u:
        goto LABEL_15;
      default:
        if (v11 == 130)
        {
LABEL_15:
          if ((*(_BYTE *)(a1 + 96) & 1) != 0)
          {
            uint64_t v12 = *(void *)(a1 + 88);
            if (v12)
            {
              if (*(unsigned __int16 *)(v12 + 14) == v11)
              {
                int v35 = 0LL;
                uint64_t v13 = sub_100026BA4((size_t **)&v35, *((void *)v10 + 1));
                if ((v13 & 0x80000000) != 0)
                {
                  if (dword_10008BA20)
                  {
                    uint64_t v31 = (os_log_s *)ne_log_obj(v13);
                    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                      sub_10005979C();
                    }
                  }

  uint64_t v6 = "[null]";
  if (v5) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = "[null]";
  }
  if (v3) {
    uint64_t v6 = (const char *)v3;
  }
  snprintf(byte_10008A931, 0x8BAuLL, a1, v7, v6);
  if (v5) {
    free(v5);
  }
  if (v3) {
    free(v3);
  }
  return byte_10008A931;
}

        int v9 = 0xFFFFFFFFLL;
LABEL_82:
        sub_10003F5BC(v10);
        return v9;
      }

      uint64_t v13 = (int)bswap32(*v7) >> 16;
      if (v13 < 0)
      {
        if (dword_10008BA20)
        {
          uint64_t v16 = (os_log_s *)ne_log_obj(v11);
          int v11 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)v11)
          {
            uint64_t v28 = sub_10003DEE4(v13 & 0x7FFF);
            unsigned int v29 = bswap32(v7[1]) >> 16;
            *(_DWORD *)buf = 136315394;
            int v59 = v28;
            uint64_t v60 = 1024;
            LODWORD(v61) = v29;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Short attribute %s = %d\n",  buf,  0x12u);
          }
        }

        if ((v13 & 0x7FFF) == 0x4088)
        {
          int v11 = (uint64_t)sub_1000469D4(a1, v7);
          if (v11)
          {
            int v17 = (void *)v11;
            uint64_t v10 = sub_100043DD8(v10, v11);
            sub_10003F5BC(v17);
          }
        }

        else if (dword_10008BA20)
        {
          char v19 = (os_log_s *)ne_log_obj(v11);
          int v11 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v11)
          {
            char v20 = sub_10003DEE4(v13 & 0x7FFF);
            *(_DWORD *)buf = 136315138;
            int v59 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Ignored short attribute %s\n",  buf,  0xCu);
          }
        }

        int v8 = v12 - 4;
        v7 += 2;
        goto LABEL_35;
      }

      uint64_t v14 = bswap32(v7[1]) >> 16;
      if (v14 + 4 > (unint64_t)v8)
      {
        if (dword_10008BA20)
        {
          uint64_t v48 = (os_log_s *)ne_log_obj(v11);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
            sub_100064684((unsigned __int16)v13);
          }
        }

        goto LABEL_7;
      }

      if (dword_10008BA20)
      {
        int v15 = (os_log_s *)ne_log_obj(v11);
        int v11 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v11)
        {
          uint64_t v27 = sub_10003DEE4((unsigned __int16)v13);
          *(_DWORD *)buf = 136315394;
          int v59 = v27;
          uint64_t v60 = 2048;
          uint64_t v61 = v14;
          _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Attribute %s, len %zu\n", buf, 0x16u);
        }
      }

      if ((unsigned __int16)v13 >= 0x7000u)
      {
        int v11 = (uint64_t)sub_1000452B4();
      }

      else if ((unsigned __int16)v13 <= 0x4087u)
      {
        if ((unsigned __int16)v13 != 7)
        {
          if ((unsigned __int16)v13 != 13)
          {
LABEL_44:
            if (dword_10008BA20)
            {
              uint64_t v23 = (os_log_s *)ne_log_obj(v11);
              int v11 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v11)
              {
                uint64_t v24 = sub_10003DEE4((unsigned __int16)v13);
                *(_DWORD *)buf = 136315138;
                int v59 = v24;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Ignored attribute %s\n", buf, 0xCu);
              }
            }

            goto LABEL_30;
          }

LABEL_73:
                  char v19 = 0;
                  uint64_t v6 = 0xFFFFFFFFLL;
                  int v25 = v34;
                  goto LABEL_74;
                }

                if (!v9) {
                  *(_DWORD *)(a1 + 96) |= 6u;
                }
                uint64_t v14 = sub_10003F8B4(a1, (uint64_t)v35, v9);
                if (dword_10008BA20)
                {
                  int v15 = v14;
                  uint64_t v16 = (os_log_s *)ne_log_obj(v14);
                  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109378;
                    int v17 = "verified";
                    if (!v15) {
                      int v17 = "doesn't match";
                    }
                    *(_DWORD *)uint64_t v37 = v9;
                    *(_WORD *)&v37[4] = 2080;
                    *(void *)&v37[6] = v17;
                    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "NAT-D payload #%d %s\n",  buf,  0x12u);
                  }
                }

                ++v9;
                sub_10003F5BC(v35);
              }
            }
          }

    uint64_t v40 = 0xFFFFFFFFLL;
    goto LABEL_74;
  }

  uint64_t v4 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) != 6352)
  {
    if (dword_10008BA20)
    {
      int v25 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_73;
  }

  uint64_t v5 = sub_10000F860((void *)a1, 0);
  if ((v5 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_10005A9B8();
      }
    }

    goto LABEL_73;
  }

  uint64_t v6 = sub_1000076AC(*(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 140LL));
  *(void *)(a1 + 208) = v6;
  if (!v6)
  {
    if (dword_10008BA20)
    {
      uint64_t v27 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_100058CB8();
      }
    }

    goto LABEL_73;
  }

  uint64_t v7 = *(void *)(a1 + 120);
  int v8 = *(_DWORD *)(v7 + 20);
  if (v8)
  {
    int v9 = sub_10002A198(*(unsigned int *)(v7 + 20), a1 + 152);
    if ((v9 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v41 = (os_log_s *)ne_log_obj(v9);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
          sub_10005AA94();
        }
      }

      goto LABEL_73;
    }

    uint64_t v10 = sub_100029E9C(*(void *)(a1 + 152), (size_t **)(a1 + 168), (void *)(a1 + 144));
    if ((v10 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        BOOL v43 = (os_log_s *)ne_log_obj(v10);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
          sub_100058C8C();
        }
      }

      goto LABEL_73;
    }
  }

  int v11 = sub_1000110F8(a1);
  if ((v11 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v42 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        sub_10005A9E4();
      }
    }

    goto LABEL_73;
  }

  if (dword_1000882C8 >= 7)
  {
    sub_100033CEC( 7,  *(void *)(*(void *)(a1 + 192) + 8LL),  **(void **)(a1 + 192),  "IDci:\n",  v12,  v13,  v14,  v15,  (char)v49);
    if (dword_1000882C8 >= 7) {
      sub_100033CEC( 7,  *(void *)(*(void *)(a1 + 200) + 8LL),  **(void **)(a1 + 200),  "IDcr:\n",  v16,  v17,  v18,  v19,  (char)v49);
    }
  }

  char v20 = *(_BYTE *)(*(void *)(*(void *)(a1 + 192) + 8LL) + 1LL)
     || *(_BYTE *)(*(void *)(*(void *)(a1 + 200) + 8LL) + 1LL)
     || *(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 160LL)
     || !sub_10000FEF8(*(void *)(a1 + 120));
  uint64_t v21 = **(void **)(a1 + 224) + **(void **)(a1 + 208) + 8LL;
  if (v8) {
    uint64_t v21 = **(void **)(a1 + 168) + (int)v21 + 4LL;
  }
  if (v20) {
    LODWORD(v21) = v21 + **(_DWORD **)(a1 + 192) + **(_DWORD **)(a1 + 200) + 8;
  }
  if (sub_10000FEB8(*(void *)(a1 + 120)) && (*(_BYTE *)(*(void *)(a1 + 256) + 96LL) & 6) != 0)
  {
    int v22 = sub_10003FAA8(a1, &v50, &v49);
    uint64_t v23 = v22;
    if ((_DWORD)v22)
    {
      if ((_DWORD)v22 == -1)
      {
        if (dword_10008BA20)
        {
          uint64_t v24 = (os_log_s *)ne_log_obj(v22);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            sub_10005AA68();
          }
        }

        goto LABEL_73;
      }

      LODWORD(v21) = v21 + *(_DWORD *)v50 + *(_DWORD *)v49 + 8;
    }
  }

  else
  {
    uint64_t v23 = 0;
  }

  uint64_t v28 = sub_10003F4BC((int)v21);
  if (!v28)
  {
    if (dword_10008BA20)
    {
      size_t v44 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
        sub_10005A784();
      }
    }

    goto LABEL_73;
  }

  unsigned int v29 = v28;
  uint64_t v30 = sub_100026D88(v28[1], *(uint64_t **)(a1 + 224), 10);
  if (v20) {
    uint64_t v31 = 5;
  }
  else {
    uint64_t v31 = v23;
  }
  if (v8) {
    uint64_t v32 = 4;
  }
  else {
    uint64_t v32 = v31;
  }
  uint64_t v33 = sub_100026D88((uint64_t)v30, *(uint64_t **)(a1 + 208), v32);
  if (v8) {
    uint64_t v33 = sub_100026D88((uint64_t)v33, *(uint64_t **)(a1 + 168), v31);
  }
  if (v20)
  {
    int v34 = sub_100026D88((uint64_t)v33, *(uint64_t **)(a1 + 192), 5);
    uint64_t v33 = sub_100026D88((uint64_t)v34, *(uint64_t **)(a1 + 200), v23);
  }

  if (v23)
  {
    int v35 = sub_100026D88((uint64_t)v33, (uint64_t *)v50, v23);
    sub_100026D88((uint64_t)v35, (uint64_t *)v49, 0);
  }

  uint64_t v36 = (uint64_t *)sub_10002AA48(*(void *)(a1 + 256), *(_DWORD *)(a1 + 108), (uint64_t)v29);
  if (!v36)
  {
    if (dword_10008BA20)
    {
      __int16 v45 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        sub_10005AA10();
      }
    }

    sub_10003F5BC(v29);
    goto LABEL_73;
  }

  uint64_t v37 = v36;
  __int16 v38 = sub_10001D864(a1, (uint64_t)v29, v36);
  *(void *)(a1 + 80) = v38;
  if (!v38)
  {
    if (dword_10008BA20)
    {
      uint64_t v47 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
        sub_10005AA3C();
      }
    }

    goto LABEL_86;
  }

  *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 200LL);
  int v39 = sub_1000250E4(a1);
  if ((_DWORD)v39 == -1)
  {
    if (dword_10008BA20)
    {
      uint64_t v48 = (os_log_s *)ne_log_obj(v39);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
        sub_100058CE4();
      }
    }

LABEL_69:
        char v19 = 0;
        uint64_t v6 = 0xFFFFFFFFLL;
LABEL_74:
        sub_10003F5BC(v25);
        if (v4) {
LABEL_75:
        }
          sub_10003F5BC(v4);
LABEL_76:
        if ((v19 & 1) == 0)
        {
LABEL_77:
          sub_10002C308(*(void **)(a1 + 288));
          *(void *)(a1 + 288) = 0LL;
          sub_10002C308(*(void **)(a1 + 296));
          *(void *)(a1 + 296) = 0LL;
          uint64_t v32 = *(void **)(a1 + 272);
          if (v32)
          {
            sub_10003F5BC(v32);
            *(void *)(a1 + 272) = 0LL;
          }
        }

        return v6;
    }
  }

uint64_t sub_100015774(uint64_t a1, uint64_t a2)
{
  int v2 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) == 5507)
  {
    if ((*(_BYTE *)(*(void *)(a2 + 8) + 19LL) & 1) != 0) {
      memcpy( *(void **)(**(void **)(a1 + 328) + 8LL),  *(const void **)(*(void *)(*(void *)(a1 + 328) + 8LL) + 8LL),  ***(void ***)(a1 + 328));
    }
    *(_BYTE *)(a1 + 82) |= 1u;
    sub_100004344(v2, 9216);
    return 0LL;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    return 0xFFFFFFFFLL;
  }

void sub_10001581C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t *sub_100015830(const sockaddr **a1)
{
  return sub_10003C888(*a1);
}

  ;
}

  ;
}

void sub_100015864( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_100015874(uint64_t a1, unint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + 96);
  uint64_t v5 = sub_100008438(*(unsigned __int8 **)(a1 + 56));
  if ((_DWORD)v5 == -1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = v5;
    LODWORD(v8) = 0;
    int v9 = v4 & 0x20;
    unint64_t v10 = (unint64_t)(v4 & 0x20) >> 3;
    int v11 = (_BYTE *)a2[1];
    char v39 = v11[18];
    while (1)
    {
      size_t v12 = v6 >= 0x4DC ? 1244LL : v6;
      uint64_t v13 = sub_10003F4BC(v12 + 36);
      if (!v13) {
        break;
      }
      uint64_t v14 = v13;
      uint64_t v8 = (v8 + 1);
      sub_100026D0C((uint64_t)v13, a1, 132);
      size_t v15 = v14[1];
      *(_BYTE *)(v15 + 18) = v39;
      *(_WORD *)(v15 + 28) = 0;
      *(_WORD *)(v15 + 30) = bswap32(v12 + 8) >> 16;
      *(_WORD *)(v15 + 32) = 256;
      *(_BYTE *)(v15 + 34) = v8;
      *(_BYTE *)(v15 + 35) = v6 < 0x4DD;
      memcpy((void *)(v15 + 36), v11, v12);
      if (v9)
      {
        uint64_t v16 = sub_10003F4BC(*v14 + v10);
        if (!v16)
        {
          if (dword_10008BA20)
          {
            uint64_t v30 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              sub_1000598FC(v30, v31, v32, v33, v34, v35, v36, v37);
            }
          }

          goto LABEL_27;
        }

        int v17 = v16;
        int v18 = (_DWORD *)v16[1];
        *int v18 = 0;
        memcpy((char *)v18 + v10, (const void *)v14[1], *v14);
        sub_10003F5BC(v14);
        uint64_t v14 = v17;
      }

      uint64_t v19 = sub_10003C110( v7,  (const void *)v14[1],  *v14,  *(unsigned __int8 **)(a1 + 56),  *(unsigned __int8 **)(a1 + 48),  *(_DWORD *)(qword_10008B848 + 276));
      if ((_DWORD)v19 == -1)
      {
        if (dword_10008BA20)
        {
          int v22 = (os_log_s *)ne_log_obj(v19);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            sub_10005988C(v22, v23, v24, v25, v26, v27, v28, v29);
          }
        }

uint64_t sub_100015AB8(uint64_t a1)
{
  return bswap32(*(_DWORD *)(a1 + (((uint64_t)(int)sub_1000076A4() >> 3) & 0xFFFFFFFFFFFFFFFCLL) + 4));
}

uint64_t sub_100015AEC(uint64_t a1, void *a2)
{
  if (*a2 <= 0x23uLL)
  {
    if (dword_10008BA20)
    {
      int v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_10005996C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v3 = a2[1];
  uint64_t v4 = bswap32(*(unsigned __int16 *)(v3 + 30)) >> 16;
  if (*a2 < (unint64_t)(v4 + 28) || v4 <= 8)
  {
    if (dword_10008BA20)
    {
      unint64_t v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100059998();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v8 = sub_10003F4BC(v4 - 8);
  if (!v8)
  {
    if (dword_10008BA20)
    {
      uint64_t v33 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        sub_100059860();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v9 = v8;
  unint64_t v10 = (char *)malloc(0x20uLL);
  if (!v10)
  {
    if (dword_10008BA20)
    {
      uint64_t v34 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        sub_100059860();
      }
    }

    sub_10003F5BC(v9);
    return 0xFFFFFFFFLL;
  }

  int v11 = v10;
  *((_WORD *)v10 + 7) = 0;
  *(_DWORD *)(v10 + 10) = 0;
  uint64_t result = (uint64_t)memcpy((void *)v9[1], (const void *)(v3 + 36), *v9);
  int v15 = *(unsigned __int8 *)(v3 + 34);
  uint64_t v13 = v3 + 34;
  int v14 = v15;
  *(_DWORD *)int v11 = v15;
  int v16 = *(_BYTE *)(v13 + 1) & 1;
  *((_DWORD *)v11 + 1) = v16;
  v11[2] = 0LL;
  v11[3] = v9;
  unsigned int v17 = bswap32(*(unsigned __int16 *)(v13 - 2));
  unsigned int v18 = HIWORD(v17);
  *((_WORD *)v11 + 4) = HIWORD(v17);
  if (dword_10008BA20)
  {
    uint64_t v19 = (os_log_s *)ne_log_obj(result);
    uint64_t result = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      int v35 = 136315906;
      uint64_t v36 = "isakmp_frag_extract";
      __int16 v37 = 1024;
      int v38 = v14;
      __int16 v39 = 1024;
      unsigned int v40 = v18;
      __int16 v41 = 1024;
      int v42 = v16;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%s: received fragment #%d  frag ID=%d  last frag=%d\n",  (uint8_t *)&v35,  0x1Eu);
    }
  }

  if (v16) {
    int v20 = v14;
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = *(void *)(a1 + 104);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 104);
    while (*(_DWORD *)v22 != v14)
    {
      if (*(_DWORD *)(v22 + 4)) {
        int v20 = *(_DWORD *)v22;
      }
      uint64_t v22 = *(void *)(v22 + 16);
      if (!v22) {
        goto LABEL_26;
      }
    }

    sub_10003F5BC(v9);
    free(v11);
    return 0LL;
  }

LABEL_26:
  v11[2] = v21;
  *(void *)(a1 + 104) = v11;
  if (!v20) {
    return 0LL;
  }
  if (v20 >= 1)
  {
    int v23 = 1;
    do
    {
      uint64_t v24 = v11;
      while (*(_DWORD *)v24 != v23)
      {
        uint64_t result = 0LL;
        uint64_t v24 = (void *)v24[2];
        if (!v24) {
          return result;
        }
      }
    }

    while (v23++ != v20);
  }

  if (dword_10008BA20)
  {
    uint64_t v26 = (os_log_s *)ne_log_obj(result);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
      sub_1000599C4(v13, v26, v27, v28, v29, v30, v31, v32);
    }
  }

  return 1LL;
}

        sub_10003F5BC(v16);
        return 0xFFFFFFFFLL;
      }

      sub_10003F5BC(v16);
      v13 += v14;
      v6 -= v14;
      if (!v6) {
        goto LABEL_14;
      }
    }

    if (dword_10008BA20)
    {
      uint64_t v29 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_100059860();
      }
    }

    return 0xFFFFFFFFLL;
  }

  else
  {
    int v11 = 0LL;
LABEL_14:
    if (dword_10008BA20)
    {
      uint64_t v28 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
        sub_100059B48();
      }
    }
  }

  return v11;
}

      int v14 = (sockaddr *)*v6;
      if (*(_BYTE *)(*v6 + 1) == 30 && v14->sa_data[6] == 255)
      {
        if (dword_10008BA20)
        {
          uint64_t v25 = (os_log_s *)ne_log_obj(v14);
          uint64_t v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          int v14 = (sockaddr *)*v6;
          if (v26)
          {
            uint64_t v27 = sub_10003C888(v14);
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Ignoring multicast address %s\n",  buf,  0xCu);
            int v14 = (sockaddr *)*v6;
          }
        }

        free(v14);
        *unint64_t v6 = 0LL;
      }

      else
      {
        int v15 = socket(*(unsigned __int8 *)(*v6 + 1), 2, 0);
        *((_DWORD *)v1 + 4) = v15;
        if ((v15 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            uint64_t v24 = (os_log_s *)ne_log_obj(v15);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              sub_10005C7F0();
            }
          }

          goto LABEL_105;
        }

        int v16 = fcntl(v15, 4, 4LL);
        if ((_DWORD)v16 == -1 && dword_10008BA20 != 0)
        {
          unsigned int v18 = (os_log_s *)ne_log_obj(v16);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
            sub_10005CA94(&v76, v77, v18);
          }
        }

        uint64_t v19 = *(unsigned __int8 *)(*v6 + 1);
        if (v19 == 30)
        {
          *(_DWORD *)uint64_t v80 = if_nametoindex((const char *)v1[5]);
          if (*(_DWORD *)v80)
          {
            uint64_t v28 = setsockopt(*((_DWORD *)v1 + 4), 41, 125, v80, 4u);
            if ((v28 & 0x80000000) != 0)
            {
              if (dword_10008BA20)
              {
                uint64_t v49 = (os_log_s *)ne_log_obj(v28);
                if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
                  sub_10005CA54();
                }
              }

              goto LABEL_105;
            }
          }

          uint64_t v29 = setsockopt(*((_DWORD *)v1 + 4), 41, 61, &v78, 4u);
          if ((v29 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              size_t v44 = (os_log_s *)ne_log_obj(v29);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                __int16 v45 = __error();
                uint64_t v46 = strerror(*v45);
                *(_DWORD *)buf = 67109378;
                *(_DWORD *)&uint8_t buf[4] = 61;
                *(_WORD *)&uint8_t buf[8] = 2080;
                *(void *)&buf[10] = v46;
                _os_log_error_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "setsockopt IPV6_RECVDSTADDR (%d):%s\n",  buf,  0x12u);
              }
            }

            goto LABEL_105;
          }
        }

        else if (v19 == 2)
        {
          *(_DWORD *)buf = if_nametoindex((const char *)v1[5]);
          if (*(_DWORD *)buf)
          {
            int v20 = setsockopt(*((_DWORD *)v1 + 4), 0, 25, buf, 4u);
            if ((v20 & 0x80000000) != 0)
            {
              if (dword_10008BA20)
              {
                uint64_t v48 = (os_log_s *)ne_log_obj(v20);
                if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
                  sub_10005CA14();
                }
              }

              goto LABEL_105;
            }
          }

          uint64_t v21 = setsockopt(*((_DWORD *)v1 + 4), 0, 7, &v78, 4u);
          if ((v21 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              uint64_t v22 = (os_log_s *)ne_log_obj(v21);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                sub_10005C9D4();
              }
            }

            goto LABEL_105;
          }
        }

        uint64_t v30 = *(unsigned __int8 *)(*v6 + 1);
        if ((_DWORD)v30 == 30)
        {
          uint64_t v31 = setsockopt(*((_DWORD *)v1 + 4), 41, 42, &v78, 4u);
          if ((v31 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              uint64_t v69 = (os_log_s *)ne_log_obj(v31);
              if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
                sub_10005C830();
              }
            }

            return 0xFFFFFFFFLL;
          }

          uint64_t v30 = *(unsigned __int8 *)(*v6 + 1);
        }

        uint64_t v32 = setsockopt(*((_DWORD *)v1 + 4), 0xFFFF, 4, &v78, 4u);
        if ((v32 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            BOOL v43 = (os_log_s *)ne_log_obj(v32);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
              sub_10005C89C();
            }
          }

          goto LABEL_105;
        }

        uint64_t v33 = setsockopt(*((_DWORD *)v1 + 4), 0xFFFF, 512, &v78, 4u);
        if ((v33 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            uint64_t v47 = (os_log_s *)ne_log_obj(v33);
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
              sub_10005C8DC();
            }
          }

          goto LABEL_105;
        }

        if (sub_10003D53C(*v6) == 500)
        {
          uint64_t v34 = setsockopt(*((_DWORD *)v1 + 4), 0xFFFF, 4134, &v78, 4u);
          if ((v34 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              uint64_t v58 = (os_log_s *)ne_log_obj(v34);
              if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
                sub_10005C91C();
              }
            }

            goto LABEL_105;
          }
        }

        if ((bind(*((_DWORD *)v1 + 4), (const sockaddr *)v1[1], *(unsigned __int8 *)v1[1]) & 0x80000000) == 0)
        {
          if (*((_DWORD *)v1 + 8)) {
            ++v3;
          }
          int v35 = *((_DWORD *)v1 + 4);
          uint64_t v36 = (dispatch_source_s *)v1[3];
          __int16 v37 = v35;
          if (v36)
          {
            dispatch_source_cancel(v36);
            v1[3] = 0LL;
            __int16 v37 = *((_DWORD *)v1 + 4);
          }

          int v38 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v37, 0LL, &_dispatch_main_q);
          v1[3] = (uint64_t)v38;
          if (!v38)
          {
            if (dword_10008BA20)
            {
              int v70 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
                sub_10005C9A8();
              }
            }

            return 0xFFFFFFFFLL;
          }

          ++v2;
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 0x40000000LL;
          handler[2] = sub_100024754;
          handler[3] = &unk_100084F38;
          v75 = v35;
          dispatch_source_set_event_handler(v38, handler);
          __int16 v39 = (dispatch_source_s *)v1[3];
          v72[0] = _NSConcreteStackBlock;
          v72[1] = 0x40000000LL;
          v72[2] = sub_10002475C;
          v72[3] = &unk_100084F58;
          uint64_t v73 = v35;
          v72[4] = v39;
          dispatch_source_set_cancel_handler(v39, v72);
          dispatch_resume((dispatch_object_t)v1[3]);
          if (dword_10008BA20)
          {
            unsigned int v40 = (os_log_s *)ne_log_obj(a1);
            a1 = os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)a1)
            {
              __int16 v41 = sub_10003C888((const sockaddr *)v1[1]);
              int v42 = *((_DWORD *)v1 + 4);
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = v41;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v42;
              _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%s used as isakmp port (fd=%d)\n",  buf,  0x12u);
            }
          }

          goto LABEL_107;
        }

        int v50 = __error();
        uint64_t v51 = *v50;
        if (dword_10008BA20)
        {
          __int128 v52 = (os_log_s *)ne_log_obj(v50);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            uint64_t v71 = sub_10003C888((const sockaddr *)*v6);
            uint64_t v61 = strerror(v51);
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v71;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v61;
            _os_log_error_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "failed to bind to address %s (%s).\n",  buf,  0x16u);
          }
        }

        if (v51 != 49 || *(_BYTE *)(*v6 + 1) != 30) {
          goto LABEL_104;
        }
        v98 = 0u;
        v99 = 0u;
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v85 = 0u;
        memset(buf, 0, sizeof(buf));
        __strlcpy_chk(buf, v1[5], 16LL, 16LL);
        unint64_t v53 = (_OWORD *)v1[1];
        int v54 = *(_OWORD *)((char *)v53 + 12);
        *(_OWORD *)&buf[16] = *v53;
        *(_OWORD *)&buf[28] = v54;
        int v55 = ioctl(*((_DWORD *)v1 + 4), 0xC1206949uLL, buf);
        if ((v55 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            int v59 = (os_log_s *)ne_log_obj(v55);
            if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
              sub_10005C95C((uint64_t)v79, (const sockaddr **)v1 + 1);
            }
          }

void *sub_100015DF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (!v2)
  {
    if (!dword_10008BA20)
    {
      uint64_t v8 = 0LL;
LABEL_34:
      *(void *)(a1 + 104) = 0LL;
      return v8;
    }

    int v14 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_100059A40();
    }
    goto LABEL_29;
  }

  int v3 = 0;
  int v4 = 0;
  size_t v5 = 0LL;
  do
  {
    if (*(_DWORD *)v2 > v3 && *(_DWORD *)(v2 + 4)) {
      int v3 = *(_DWORD *)v2;
    }
    uint64_t v6 = v2 + 16;
    uint64_t v2 = *(void *)(v2 + 16);
    v5 += **(void **)(v6 + 8);
    ++v4;
  }

  while (v2);
  uint64_t v7 = sub_10003F4BC(v5);
  if (!v7)
  {
    if (dword_10008BA20)
    {
      int v16 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_100059860();
      }
    }

LABEL_29:
    uint64_t v8 = 0LL;
LABEL_30:
    uint64_t v17 = *(void *)(a1 + 104);
    if (v17)
    {
      do
      {
        uint64_t v18 = *(void *)(v17 + 16);
        sub_10003F5BC(*(void **)(v17 + 24));
        free((void *)v17);
        uint64_t v17 = v18;
      }

      while (v18);
    }

    goto LABEL_34;
  }

  uint64_t v8 = v7;
  if (v3 < 1)
  {
LABEL_16:
    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_100059A6C();
      }
    }

    goto LABEL_30;
  }

  int v9 = (char *)v7[1];
  int v10 = 1;
LABEL_10:
  uint64_t v11 = *(void *)(a1 + 104);
  do
  {
    if (*(_DWORD *)v11 == v10)
    {
      uint64_t v7 = memcpy(v9, *(const void **)(*(void *)(v11 + 24) + 8LL), **(void **)(v11 + 24));
      v9 += **(void **)(v11 + 24);
      if (v10++ == v3) {
        goto LABEL_16;
      }
      goto LABEL_10;
    }

    uint64_t v11 = *(void *)(v11 + 16);
  }

  while (v11);
  if (dword_10008BA20)
  {
    int v15 = (os_log_s *)ne_log_obj(v7);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_100059AD8(v10, v15);
    }
  }

  sub_10003F5BC(v8);
  return 0LL;
}

    sub_100041EFC(v4);
  }

  return v8;
}

  free(v14);
}

  uint64_t v13 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_read,  *(int *)(qword_10008B848 + 28),  0LL,  &_dispatch_main_q);
  *(void *)(qword_10008B848 + 40) = v13;
  if (v13)
  {
    dispatch_source_set_event_handler_f(v13, (dispatch_function_t)sub_1000474E4);
    int v14 = *(_DWORD *)(qword_10008B848 + 28);
    int v15 = *(dispatch_source_s **)(qword_10008B848 + 40);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000LL;
    handler[2] = sub_1000495F8;
    handler[3] = &unk_100086C30;
    int v23 = v14;
    dispatch_source_set_cancel_handler(v15, handler);
    dispatch_resume(*(dispatch_object_t *)(qword_10008B848 + 40));
    return 0LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v18 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_1000661E0();
    }
  }

  return 0xFFFFFFFFLL;
}

      uint64_t v24 = v25;
      goto LABEL_30;
    }

    if (a4)
    {
      uint64_t v21 = sub_10000886C(v23, a4);
      if (!v21) {
        goto LABEL_29;
      }
    }

    uint64_t v21 = memcmp((const void *)(v23 + 8), __s2, 0x100uLL);
    if (!(_DWORD)v21)
    {
      if (dword_10008BA20)
      {
        uint64_t v36 = (os_log_s *)ne_log_obj(v21);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
          sub_100066EB0((const sockaddr *)a2);
        }
      }

      return v23;
    }

    if (v8 && v8 != 4500 && v8 != 500) {
      goto LABEL_42;
    }
    uint64_t v31 = memcmp((const void *)(v23 + 8), v51, 0x100uLL);
    if (!(_DWORD)v31)
    {
      if (dword_10008BA20)
      {
        __int16 v37 = (os_log_s *)ne_log_obj(v31);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
          sub_100066F88((const sockaddr *)a2);
        }
      }

      return v23;
    }

    if ((*(_WORD *)(v23 + 264) & 2) != 0)
    {
      uint64_t v32 = memcmp((const void *)(v23 + 8), v49, 0x100uLL);
      if (!(_DWORD)v32)
      {
        if (dword_10008BA20)
        {
          int v38 = (os_log_s *)ne_log_obj(v32);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
            sub_100066FF0((const sockaddr *)a2);
          }
        }

        return v23;
      }
    }

    uint64_t v21 = memcmp((const void *)(v23 + 8), v47, 0x100uLL);
    uint64_t v24 = v23;
    if ((_DWORD)v21)
    {
LABEL_42:
      if (a4) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = v25;
      }
    }

void **sub_100015FDC(void **a1, unsigned int a2)
{
  int v4 = sub_1000076A4();
  size_t v5 = (char *)*a1;
  uint64_t v6 = sub_10003F51C(a1, (size_t)(v5 + 4));
  if (v6)
  {
    a1 = v6;
    *(_DWORD *)&v5[(void)v6[1]] = 0;
LABEL_4:
    *(_DWORD *)((char *)a1[1] + ((uint64_t)v4 >> 3)) |= bswap32(a2);
    return a1;
  }

  if (dword_10008BA20)
  {
    uint64_t v8 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100059860();
    }
  }

  return 0LL;
}

uint64_t sub_10001608C( uint64_t a1, unint64_t *a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5, char a6)
{
  unint64_t v6 = *a2;
  if (*a2)
  {
    uint64_t v10 = a1;
    LODWORD(v11) = 0;
    int v12 = a6 & 1;
    uint64_t v41 = (4 * v12);
    uint64_t v13 = (char *)a2[1];
    BOOL v43 = v13;
    int v40 = v12;
    while (1)
    {
      size_t v14 = v6 >= 0x4DC ? 1244LL : v6;
      int v15 = sub_10003F4BC(v14 + 36);
      if (!v15) {
        break;
      }
      int v16 = v15;
      uint64_t v11 = (v11 + 1);
      size_t v17 = v15[1];
      __int128 v18 = *(_OWORD *)v43;
      uint64_t v19 = *((void *)v43 + 2);
      *(_DWORD *)(v17 + 24) = *((_DWORD *)v43 + 6);
      *(void *)(v17 + 16) = v19;
      *(_OWORD *)size_t v17 = v18;
      *(_DWORD *)(v17 + 24) = bswap32(*(_DWORD *)v15);
      *(_BYTE *)(v17 + 16) = -124;
      *(_WORD *)(v17 + 28) = 0;
      *(_WORD *)(v17 + 30) = bswap32(v14 + 8) >> 16;
      *(_WORD *)(v17 + 32) = 256;
      *(_BYTE *)(v17 + 34) = v11;
      *(_BYTE *)(v17 + 35) = v6 < 0x4DD;
      memcpy((void *)(v17 + 36), v13, v14);
      if (v12)
      {
        unsigned int v42 = v11;
        uint64_t v20 = v10;
        uint64_t v21 = a3;
        uint64_t v22 = a4;
        uint64_t v23 = a5;
        uint64_t v24 = sub_10003F4BC(*v16 + v41);
        if (!v24)
        {
          if (dword_10008BA20)
          {
            uint64_t v31 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
              sub_100059BE0(v31, v32, v33, v34, v35, v36, v37, v38);
            }
          }

          goto LABEL_26;
        }

        uint64_t v25 = v24;
        uint64_t v26 = (_DWORD *)v24[1];
        *uint64_t v26 = 0;
        memcpy((char *)v26 + v41, (const void *)v16[1], *v16);
        sub_10003F5BC(v16);
        int v16 = v25;
        a5 = v23;
        a4 = v22;
        a3 = v21;
        uint64_t v10 = v20;
        uint64_t v11 = v42;
        int v12 = v40;
      }

      uint64_t v27 = sub_10003C110(v10, (const void *)v16[1], *v16, a3, a4, a5);
      if ((_DWORD)v27 == -1)
      {
        if (dword_10008BA20)
        {
          uint64_t v30 = (os_log_s *)ne_log_obj(v27);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            sub_100059BB4();
          }
        }

void sub_100016308( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100016318( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t sub_10001633C(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = 0LL;
  memset(v33, 0, sizeof(v33));
  uint64_t v2 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) != 5184)
  {
    if (dword_10008BA20)
    {
      int v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_9;
  }

  if (a2)
  {
    if (dword_10008BA20)
    {
      int v3 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_100059CD4();
      }
    }

uint64_t sub_100016760(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = 0LL;
  uint64_t v2 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) != 5217)
  {
    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_28;
  }

  int v4 = sub_100023ABC(a2);
  if (!v4)
  {
    if (dword_10008BA20)
    {
      size_t v14 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
    }

uint64_t sub_100016B08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) == 5186)
  {
    *(void *)(a1 + 8) = *(void *)(*(void *)(a2 + 8) + 8LL);
    uint64_t v5 = sub_100029E9C(*(void *)(*(void *)(a1 + 72) + 64LL), (size_t **)(a1 + 152), (void *)(a1 + 136));
    if ((v5 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v13 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_100058C8C();
        }
      }
    }

    else
    {
      uint64_t v6 = sub_1000076AC(*(_DWORD *)(*(void *)(a1 + 64) + 140LL));
      *(void *)(a1 + 176) = v6;
      if (v6)
      {
        uint64_t v7 = sub_100016D2C(a1);
        *(void *)(a1 + 128) = v7;
        if (v7)
        {
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)(a1 + 64) + 200LL);
          uint64_t v8 = sub_100024B4C(a1);
          if ((_DWORD)v8 == -1)
          {
            if (dword_10008BA20)
            {
              int v18 = (os_log_s *)ne_log_obj(v8);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
                sub_100058CE4();
              }
            }
          }

          else
          {
            int v9 = *(void **)(a1 + 128);
            if (*(_DWORD *)(a1 + 100) && *v9 >= 0x501uLL)
            {
              uint64_t v10 = 0LL;
              LODWORD(v11) = *(_DWORD *)(a1 + 96);
            }

            else
            {
              unint64_t v11 = *(unsigned int *)(a1 + 96);
              uint64_t v10 = (v11 >> 3) & 4;
            }

            uint64_t v16 = sub_10000A4F4( *(unsigned __int8 **)(a1 + 48),  *(unsigned __int8 **)(a1 + 56),  (uint64_t)v9,  a2,  v10,  (v11 >> 5) & 1);
            if ((_DWORD)v16 != -1)
            {
              sub_100004344(v2, 5219);
              return 0LL;
            }

            if (dword_10008BA20)
            {
              uint64_t v19 = (os_log_s *)ne_log_obj(v16);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
                sub_10005960C();
              }
            }
          }
        }

        else if (dword_10008BA20)
        {
          uint64_t v15 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            sub_100059D94();
          }
        }
      }

      else if (dword_10008BA20)
      {
        size_t v14 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_100058CB8();
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    int v12 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100058E74();
    }
  }

  return 0xFFFFFFFFLL;
}

void *sub_100016D2C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != 1
    || !*(_DWORD *)(*(void *)(a1 + 64) + 120LL)
    || !sub_10002D27C(*(_DWORD *)(*(void *)(a1 + 72) + 48LL)))
  {
    int v3 = 0LL;
    char v4 = 1;
LABEL_7:
    uint64_t v5 = sub_100026E18(0LL, *(void *)(a1 + 152), 4);
    uint64_t v6 = (uint64_t **)sub_100026E18(v5, *(void *)(a1 + 176), 10);
    uint64_t v7 = v6;
    uint64_t v24 = v6;
    if ((v4 & 1) == 0)
    {
      uint64_t v7 = (uint64_t **)sub_100026E18(v6, (uint64_t)v3, 7);
      uint64_t v24 = v7;
    }

    if ((*(_BYTE *)(a1 + 96) & 1) == 0)
    {
      uint64_t v8 = 0LL;
      int v9 = 0LL;
      goto LABEL_30;
    }

    uint64_t v10 = sub_10003F6D0(a1, *(void *)(a1 + 48));
    if (v10)
    {
      int v9 = (void *)v10;
      uint64_t v11 = sub_10003F6D0(a1, *(void *)(a1 + 56));
      if (v11)
      {
        uint64_t v8 = (void *)v11;
        if (dword_10008BA20)
        {
          int v12 = (os_log_s *)ne_log_obj(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Adding remote and local NAT-D payloads.\n",  v23,  2u);
          }
        }

        uint64_t v13 = *(void *)(a1 + 88);
        int v14 = *(unsigned __int16 *)(v13 + 14);
        if (*(_DWORD *)v13 == 14)
        {
          uint64_t v15 = sub_100026E18(v7, (uint64_t)v8, v14);
          int v16 = *(unsigned __int16 *)(*(void *)(a1 + 88) + 14LL);
          uint64_t v17 = (uint64_t)v9;
        }

        else
        {
          uint64_t v15 = sub_100026E18(v7, (uint64_t)v9, v14);
          int v16 = *(unsigned __int16 *)(*(void *)(a1 + 88) + 14LL);
          uint64_t v17 = (uint64_t)v8;
        }

        uint64_t v24 = (uint64_t **)sub_100026E18(v15, v17, v16);
LABEL_30:
        BOOL v20 = sub_100026E60(&v24, a1);
        if (!v3)
        {
LABEL_32:
          if (v9) {
            sub_10003F5BC(v9);
          }
          if (v8) {
            sub_10003F5BC(v8);
          }
          return v20;
        }

LABEL_31:
        sub_10003F5BC(v3);
        goto LABEL_32;
      }

      if (dword_10008BA20)
      {
        uint64_t v19 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
          sub_100059DC0((const sockaddr **)(a1 + 56));
        }
      }

      uint64_t v8 = 0LL;
    }

    else
    {
      if (dword_10008BA20)
      {
        int v18 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_100059DC0((const sockaddr **)(a1 + 48));
        }
      }

      uint64_t v8 = 0LL;
      int v9 = 0LL;
    }

    BOOL v20 = 0LL;
    if (!v3) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  uint64_t v2 = sub_10002D070(a1);
  if (v2)
  {
    int v3 = v2;
    char v4 = 0;
    goto LABEL_7;
  }

  if (dword_10008BA20)
  {
    uint64_t v22 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_100059E2C();
    }
  }

  return 0LL;
}

    uint64_t v7 = 0LL;
    goto LABEL_32;
  }

  uint64_t v7 = v19;
  memcpy((void *)v19[1], v11, *v19);
  if (v18) {
    free(v18);
  }
LABEL_32:
  fclose(v8);
  return v7;
}

      int v16 = sub_10002D2A0((size_t *)a1);
      if (!v16)
      {
        if (dword_10008BA20)
        {
          uint64_t v29 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            sub_10005F054(a1);
          }
        }

        return 0xFFFFFFFFLL;
      }

      BOOL v21 = (uint64_t)v16;
      if (dword_10008BA20)
      {
        uint64_t v22 = (os_log_s *)ne_log_obj(v16);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          sub_10005F0F0();
        }
      }

      uint64_t v23 = sub_10003F4BC(**(_DWORD **)(a1 + 184) + **(_DWORD **)(a1 + 176));
      if (!v23)
      {
        if (dword_10008BA20)
        {
          uint64_t v30 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            sub_10005F0C4();
          }
        }

        sub_10003F5BC((void *)v21);
        return 0xFFFFFFFFLL;
      }

      int v9 = v23;
      uint64_t v24 = v23[1];
      if (*(_DWORD *)(a1 + 20)) {
        uint8_t v25 = 184LL;
      }
      else {
        uint8_t v25 = 176LL;
      }
      uint64_t v26 = *(void *)(a1 + v25);
      memcpy((void *)v23[1], *(const void **)(v26 + 8), *(void *)v26);
      if (*(_DWORD *)(a1 + 20)) {
        uint64_t v27 = 176LL;
      }
      else {
        uint64_t v27 = 184LL;
      }
      memcpy((void *)(v24 + *(void *)v26), *(const void **)(*(void *)(a1 + v27) + 8LL), **(void **)(a1 + v27));
      int v14 = sub_10002A2C8(v21, (uint64_t)v9, a1);
      *(void *)(a1 + 192) = v14;
      sub_10003F5BC((void *)v21);
      goto LABEL_45;
    }

          sub_10003B568();
        }

        goto LABEL_20;
      }
    }

    else if ((_DWORD)v1 != 1)
    {
      if (!(_DWORD)v1) {
        return;
      }
LABEL_20:
      if (dword_10008BA20)
      {
        int v3 = (os_log_s *)ne_log_obj(a1);
        a1 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)a1)
        {
          *(_DWORD *)buf = 67109120;
          uint64_t v22 = v1;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "caught signal %d\n", buf, 8u);
        }
      }

      goto LABEL_23;
    }

    a1 = sub_100044FA4(0);
    if ((_DWORD)a1) {
      break;
    }
    if (!dword_10008BE28)
    {
      if (v1 == 1)
      {
        sub_100009C24(1LL);
        sub_1000092FC(1LL);
      }

      uint64_t v2 = sub_1000526B4(v1);
      if ((_DWORD)v2)
      {
        if (dword_10008BA20)
        {
          uint64_t v13 = (os_log_s *)ne_log_obj(v2);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
            sub_100063740(v13, v14, v15, v16, v17, v18, v19, v20);
          }
        }

        exit(1);
      }

      if (!*(void *)(qword_10008B848 + 128) && !byte_10008BA24) {
        sub_10003432C(*(char **)(qword_10008B848 + 168));
      }
      a1 = sub_100038984(1LL);
      if ((_DWORD)a1) {
        goto LABEL_31;
      }
    }

  if (a2[1] == 256)
  {
    if ((*(_BYTE *)(a1 + 432) & 1) != 0) {
      *(_DWORD *)(v2 + 1144) = 2;
    }
    if (!dword_10008BA20) {
      goto LABEL_44;
    }
    uint64_t v19 = (os_log_s *)ne_log_obj(a1);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_44;
    }
    LOWORD(v28) = 0;
    BOOL v20 = "IPSec Extended Authentication Passed.\n";
  }

  else
  {
    if (dword_10008BA20)
    {
      BOOL v21 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_100065618();
      }
    }

    uint64_t v22 = sub_10000B328(a1);
    uint64_t v23 = sub_1000488E4(0x18u, 0, v22, 0, 0LL);
    **(_DWORD **)(a1 + 408) |= 0x800u;
    if (!dword_10008BA20) {
      goto LABEL_44;
    }
    uint64_t v19 = (os_log_s *)ne_log_obj(v23);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_44;
    }
    LOWORD(v28) = 0;
    BOOL v20 = "IPSec Extended Authentication Failed.\n";
  }

  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v28, 2u);
LABEL_44:
  uint64_t result = sub_10003F4BC(4uLL);
  if (result)
  {
    *(_DWORD *)result[1] = 36800;
    return result;
  }

  if (dword_10008BA20)
  {
    uint8_t v25 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_100059860();
    }
  }

  return 0LL;
}

    int v18 = *(void *)(v18 + 296);
    if (!v18) {
      return result;
    }
  }

  while (1)
  {
    if (*(_DWORD *)(v20 + 56) && *(_DWORD *)v20 == 3)
    {
      if (!*a3) {
        *a3 = *(_DWORD *)(v18 + 100);
      }
      BOOL v21 = a2 == 1 ? 24LL : 28LL;
      *(_DWORD *)(a4 + 40LL * (int)result) = *(_DWORD *)(v20 + v21);
      uint64_t result = (result + 1);
      if ((_DWORD)result == (_DWORD)a5) {
        return a5;
      }
    }

    BOOL v20 = *(void *)(v20 + 72);
    if (!v20) {
      goto LABEL_31;
    }
  }

      int v14 = *(void *)(v2 + 1704);
      if (v14)
      {
        while ((*(_BYTE *)(v14 + 264) & 2) != 0 || (*(_BYTE *)(v14 + 57) & 0x20) == 0)
        {
          int v14 = *(void *)(v14 + 296);
          if (!v14) {
            goto LABEL_35;
          }
        }

uint64_t sub_100016FAC(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) == 5219)
  {
    uint64_t v4 = (uint64_t)sub_100023ABC(a2);
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      int v6 = 0;
      for (uint64_t i = *(unsigned __int8 **)(v4 + 8); ; i += 16)
      {
        unsigned int v8 = *i;
        if (v8 <= 0x13) {
          break;
        }
        if (v8 != 20 && v8 != 130)
        {
LABEL_58:
          if (dword_10008BA20)
          {
            uint8_t v25 = (os_log_s *)ne_log_obj(v4);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              sub_100059D00();
            }
          }

          goto LABEL_76;
        }

uint64_t sub_1000174E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) == 5188)
  {
    uint64_t v5 = sub_100029CA4( *(void *)(*(void *)(a1 + 72) + 64LL),  *(void **)(a1 + 160),  (void **)(a1 + 168),  (void *)(a1 + 136));
    if ((v5 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        int v18 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_100058FE8();
        }
      }
    }

    else
    {
      uint64_t v6 = sub_10002D448(a1);
      if ((v6 & 0x80000000) != 0)
      {
        if (dword_10008BA20)
        {
          int v19 = (os_log_s *)ne_log_obj(v6);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
            sub_100059014();
          }
        }
      }

      else
      {
        uint64_t v7 = sub_10002D804(a1);
        if ((v7 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            BOOL v20 = (os_log_s *)ne_log_obj(v7);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
              sub_100059040();
            }
          }
        }

        else
        {
          uint64_t v8 = sub_10002DAAC((void *)a1);
          if ((v8 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              BOOL v21 = (os_log_s *)ne_log_obj(v8);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                sub_10005906C();
              }
            }
          }

          else
          {
            uint64_t v9 = sub_10002DE98(a1);
            if ((v9 & 0x80000000) != 0)
            {
              if (dword_10008BA20)
              {
                uint64_t v22 = (os_log_s *)ne_log_obj(v9);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                  sub_100059098();
                }
              }
            }

            else
            {
              uint64_t v10 = sub_1000108E0(a1);
              if ((v10 & 0x80000000) != 0)
              {
                if (dword_10008BA20)
                {
                  uint64_t v23 = (os_log_s *)ne_log_obj(v10);
                  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                    sub_100058C08();
                  }
                }
              }

              else
              {
                uint64_t v11 = sub_10002AB18(a1, 1);
                *(void *)(a1 + 256) = v11;
                if (v11)
                {
                  *(_BYTE *)(a1 + 82) |= 1u;
                  int v12 = sub_100017850(a1);
                  *(void *)(a1 + 128) = v12;
                  if (v12)
                  {
                    *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)(a1 + 64) + 200LL);
                    uint64_t v13 = sub_100024B4C(a1);
                    if ((_DWORD)v13 == -1)
                    {
                      if (dword_10008BA20)
                      {
                        uint64_t v28 = (os_log_s *)ne_log_obj(v13);
                        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
                          sub_100058CE4();
                        }
                      }
                    }

                    else
                    {
                      int v14 = *(void **)(a1 + 128);
                      if (*(_DWORD *)(a1 + 100) && *v14 >= 0x501uLL)
                      {
                        uint64_t v15 = 0LL;
                        LODWORD(v16) = *(_DWORD *)(a1 + 96);
                      }

                      else
                      {
                        unint64_t v16 = *(unsigned int *)(a1 + 96);
                        uint64_t v15 = (v16 >> 3) & 4;
                      }

                      uint64_t v26 = sub_10000A4F4( *(unsigned __int8 **)(a1 + 48),  *(unsigned __int8 **)(a1 + 56),  (uint64_t)v14,  a2,  v15,  (v16 >> 5) & 1);
                      if ((_DWORD)v26 != -1)
                      {
                        memcpy( *(void **)(*(void *)(*(void *)(a1 + 328) + 8LL) + 8LL),  *(const void **)(**(void **)(a1 + 328) + 8LL),  ***(void ***)(a1 + 328));
                        sub_100004344(v2, 5221);
                        return 0LL;
                      }

                      if (dword_10008BA20)
                      {
                        uint64_t v29 = (os_log_s *)ne_log_obj(v26);
                        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                          sub_10005960C();
                        }
                      }
                    }
                  }

                  else if (dword_10008BA20)
                  {
                    uint8_t v25 = (os_log_s *)ne_log_obj(0LL);
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
                      sub_100059E84();
                    }
                  }
                }

                else if (dword_10008BA20)
                {
                  uint64_t v24 = (os_log_s *)ne_log_obj(0LL);
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
                    sub_100059E58();
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v17 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_100058E74();
    }
  }

  return 0xFFFFFFFFLL;
}

void *sub_100017850(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  int v3 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
  if (*(void *)(*(void *)(a1 + 64) + 272LL)) {
    BOOL v4 = v3 == 65001;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    goto LABEL_22;
  }
  if (v3 > 65004)
  {
    int v7 = 65500;
LABEL_21:
    if (v3 != v7)
    {
LABEL_52:
      if (dword_10008BA20)
      {
        uint8_t v25 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          sub_100059EDC();
        }
      }

      return 0LL;
    }

    goto LABEL_22;
  }

  if (v3 > 64220)
  {
    if (v3 == 64221) {
      goto LABEL_22;
    }
    if (v3 == 64222) {
      goto LABEL_42;
    }
    int v7 = 65002;
    goto LABEL_21;
  }

  if ((v3 - 4) < 2)
  {
LABEL_12:
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100059F68();
      }
    }

    return 0LL;
  }

  if (v3 == 1)
  {
LABEL_22:
    uint64_t v8 = sub_100026E18(0LL, *(void *)(a1 + 312), 5);
    uint64_t v9 = (uint64_t **)sub_100026E18(v8, *(void *)(a1 + 256), 8);
    uint64_t v10 = v9;
    uint64_t v11 = 0LL;
LABEL_23:
    uint64_t v30 = v9;
    goto LABEL_24;
  }

  if (v3 != 3) {
    goto LABEL_52;
  }
LABEL_42:
  uint64_t v17 = sub_10002BD24(a1);
  if ((v17 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(v17);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100059690();
      }
    }

    return 0LL;
  }

  uint64_t v18 = sub_10002C034((void *)a1);
  if ((v18 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(v18);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_10005951C();
      }
    }

    return 0LL;
  }

  if (!*(_DWORD *)(a1 + 20)
    && *(_DWORD *)(*(void *)(a1 + 64) + 120LL)
    && sub_10002D27C(*(_DWORD *)(*(void *)v2 + 48LL)))
  {
    uint64_t v27 = sub_10002D070(a1);
    if (!v27)
    {
      if (dword_10008BA20)
      {
        uint64_t v29 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
          sub_100059F3C();
        }
      }

      return 0LL;
    }

    uint64_t v11 = v27;
    char v19 = 0;
  }

  else
  {
    uint64_t v11 = 0LL;
    char v19 = 1;
  }

  if (*(void *)(a1 + 280))
  {
    int v20 = *(_DWORD *)(*(void *)(a1 + 64) + 116LL);
    BOOL v21 = sub_100026E18(0LL, *(void *)(a1 + 312), 5);
    if (!v20) {
      goto LABEL_64;
    }
    uint64_t v22 = *(void *)(*(void *)(a1 + 280) + 24LL);
    int v23 = 6;
  }

  else
  {
    uint64_t v22 = *(void *)(a1 + 312);
    BOOL v21 = 0LL;
    int v23 = 5;
  }

  BOOL v21 = sub_100026E18(v21, v22, v23);
LABEL_64:
  uint64_t v28 = (uint64_t **)sub_100026E18(v21, *(void *)(a1 + 264), 9);
  uint64_t v10 = v28;
  uint64_t v30 = v28;
  if ((v19 & 1) == 0)
  {
    uint64_t v9 = (uint64_t **)sub_100026E18(v28, (uint64_t)v11, 7);
    uint64_t v10 = v9;
    goto LABEL_23;
  }

LABEL_24:
  if (*(_DWORD *)(a1 + 20)) {
    int v12 = 0LL;
  }
  else {
    int v12 = sub_100027AE8((unint64_t *)a1, v10);
  }
  uint64_t v6 = sub_100026E60(&v30, a1);
  uint64_t v13 = sub_10002EA40(a1, (uint64_t)v6, *(void *)(*(void *)(a1 + 328) + 8LL), **(void **)(a1 + 328));
  if (v13)
  {
    sub_10003F5BC(v6);
    uint64_t v6 = v13;
    if (!v11) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  if (dword_10008BA20)
  {
    int v14 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      sub_100059EB0();
      if (!v11) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
  }

  if (v11) {
LABEL_33:
  }
    sub_10003F5BC(v11);
LABEL_34:
  if (v13) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v6 == 0LL;
  }
  if (!v15)
  {
    sub_10003F5BC(v6);
    uint64_t v6 = 0LL;
  }

  if (v12) {
    sub_10003F5BC(v12);
  }
  return v6;
}

    exit(1);
  }

  if (dword_10008BA20)
  {
    uint64_t v11 = (os_log_s *)ne_log_obj(v9);
    int v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      sub_100024670(a1, 0);
      unint64_t v16 = 136315138;
      uint64_t v17 = &xmmword_100088748;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "ISAKMP-SA deleted spi:%s\n",  (uint8_t *)&v16,  0xCu);
    }

    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        sub_100024670(a1, 0);
        unint64_t v16 = 136315650;
        uint64_t v17 = (__int128 *)v7;
        uint64_t v18 = 2080;
        char v19 = v10;
        int v20 = 2080;
        BOOL v21 = &xmmword_100088748;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "ISAKMP-SA deleted %s-%s spi:%s\n",  (uint8_t *)&v16,  0x20u);
      }
    }
  }

  free(v7);
  free(v10);
  return (void *)sub_10004ABA4(a1);
}

        unint64_t v16 = v28;
        if (v28)
        {
          do
          {
            uint64_t v17 = v16;
            unint64_t v16 = (uint64_t *)v16[5];
          }

          while (v16);
          uint64_t v18 = (uint64_t **)(v17 + 5);
        }

        else
        {
          uint64_t v18 = &v28;
        }

        *uint64_t v18 = v6;
      }

      if (++v3 == 256)
      {
        if (dword_10008BA20)
        {
          uint64_t v22 = (os_log_s *)ne_log_obj(v5);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
            sub_100063244();
          }
        }

        int v23 = v28;
        if (v28)
        {
          for (uint64_t i = v28[4]; i; uint64_t i = *(void *)(i + 72))
            sub_100037130(7LL, (int *)i);
        }

        *(void *)(a1 + 120) = v23;
        sub_10004B2A8(a1);
        if (v4)
        {
          sub_100036658(v4);
          BOOL v4 = 0LL;
        }

        goto LABEL_46;
      }
    }
  }

  BOOL v4 = 0LL;
LABEL_41:
  if (v28) {
    sub_100036658(v28);
  }
  if (v4) {
    sub_100036658(v4);
  }
  BOOL v4 = (uint64_t *)0xFFFFFFFFLL;
  if (v2) {
LABEL_46:
  }
    sub_10000BFD4(v2);
  return (uint64_t)v4;
}

uint64_t sub_100017BE8(uint64_t a1, void *a2)
{
  int v3 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) != 5221)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_9;
  }

  if ((*(_BYTE *)(a2[1] + 19LL) & 1) == 0)
  {
    if (dword_10008BA20)
    {
      BOOL v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100059FC8();
      }
    }

LABEL_56:
        char v24 = 0;
        uint64_t v6 = 0xFFFFFFFFLL;
LABEL_57:
        sub_10003F5BC(v13);
        sub_10003F5BC(v11);
        if ((v24 & 1) == 0) {
          goto LABEL_10;
        }
        return v6;
      case 8:
        *(void *)(a1 + 352) = *(void *)(v15 + 8);
        goto LABEL_30;
      case 9:
        uint64_t v12 = sub_100026BA4((size_t **)(a1 + 272), *(void *)(v15 + 8));
        if ((v12 & 0x80000000) == 0) {
          goto LABEL_30;
        }
        if (dword_10008BA20)
        {
          int v23 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_100059770();
          }
        }

        goto LABEL_56;
      case 0xB:
        sub_10001C474(*(void *)(v15 + 8), a1);
        goto LABEL_30;
      case 0xD:
        uint64_t v12 = sub_10003F330(*(void *)(v15 + 8));
        if ((_DWORD)v12 == 19 && *(_DWORD *)(*(void *)(a1 + 64) + 208LL)) {
          *(_DWORD *)(a1 + 368) = 1;
        }
        goto LABEL_30;
      default:
        if (dword_10008BA20)
        {
          int v20 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            sub_100059D00();
          }
        }

        goto LABEL_56;
    }
  }

    sub_100036658(v8);
    return 0xFFFFFFFFLL;
  }

      if (!dword_10008BA20) {
        return v12;
      }
      uint64_t v27 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
        return v12;
      }
LABEL_55:
      sub_10006335C();
      return v12;
    }

    if (v8)
    {
      a1 = sub_10003B75C((unint64_t)v3, v19, v18);
      if ((_DWORD)a1) {
        goto LABEL_42;
      }
LABEL_34:
      uint64_t v22 = v12[2];
      int v23 = v22 < v16;
      if (v22 > v16) {
        unint64_t v16 = v12[2];
      }
      if (!v23) {
        int v14 = v12;
      }
      goto LABEL_42;
    }

    a1 = sub_10003B99C((unint64_t)v3, v19, v18);
    if (!(_DWORD)a1) {
      goto LABEL_34;
    }
    a1 = sub_10003B75C((unint64_t)v3, *(void *)v12, v12[2]);
    if (!(_DWORD)a1)
    {
      int v20 = v12[2];
      BOOL v21 = v20 < v16;
      if (v20 > v16) {
        unint64_t v16 = v12[2];
      }
      if (!v21) {
        uint64_t v15 = v12;
      }
    }

uint64_t sub_100017FF0(uint64_t a1)
{
  int v1 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) == 5190)
  {
    memcpy( *(void **)(**(void **)(a1 + 328) + 8LL),  *(const void **)(*(void *)(*(void *)(a1 + 328) + 8LL) + 8LL),  ***(void ***)(a1 + 328));
    sub_100004344(v1, 9216);
    return 0LL;
  }

  else
  {
    if (dword_10008BA20)
    {
      int v3 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    return 0xFFFFFFFFLL;
  }

uint64_t sub_10001807C(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) == 5440)
  {
    BOOL v4 = sub_100023ABC(a2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = v4[1];
      if (*(_BYTE *)v6 == 1)
      {
        uint64_t v7 = sub_100026BA4((size_t **)(a1 + 336), *(void *)(v6 + 8));
        if ((v7 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            int v20 = (os_log_s *)ne_log_obj(v7);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
              sub_100058F00();
            }
          }
        }

        else
        {
          for (uint64_t i = v6 + 16; *(_BYTE *)i == 13; i += 16LL)
          {
            uint64_t v7 = sub_10003F330(*(void *)(i + 8));
            int v9 = v7;
            if (*(_DWORD *)(*(void *)(a1 + 64) + 176LL))
            {
              uint64_t v7 = sub_10003F6C0(v7);
              if ((_DWORD)v7) {
                sub_10003FEC0(a1, v9);
              }
            }

            switch(v9)
            {
              case 16:
                uint64_t v10 = *(int **)(a1 + 408);
                int v11 = *v10 | 1;
                goto LABEL_13;
              case 17:
                uint64_t v10 = *(int **)(a1 + 408);
                int v11 = *v10 | 2;
LABEL_13:
                int *v10 = v11;
                break;
              case 18:
                uint64_t v7 = sub_100015AB8(*(void *)(i + 8));
                if ((v7 & 0x80000000) != 0)
                {
                  if (dword_10008BA20)
                  {
                    uint64_t v12 = (os_log_s *)ne_log_obj(v7);
                    uint64_t v7 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
                    if ((_DWORD)v7) {
                      sub_100059D60(&v24, v25, v12);
                    }
                  }

                  *(_DWORD *)(a1 + 100) = 1;
                }

                break;
              case 19:
                if (*(_DWORD *)(*(void *)(a1 + 64) + 208LL)) {
                  *(_DWORD *)(a1 + 368) = 1;
                }
                break;
              default:
                continue;
            }
          }

          if (*(_BYTE *)i)
          {
            if (dword_10008BA20)
            {
              BOOL v21 = (os_log_s *)ne_log_obj(v7);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                sub_100059D00();
              }
            }
          }

          else
          {
            if ((*(_BYTE *)(a1 + 96) & 1) != 0)
            {
              if (dword_10008BA20)
              {
                unint64_t v16 = (os_log_s *)ne_log_obj(v7);
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v17 = sub_10003F0A0(**(_DWORD **)(a1 + 88));
                  *(_DWORD *)buf = 136315138;
                  uint64_t v27 = v17;
                  _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Selected NAT-T version: %s\n",  buf,  0xCu);
                }
              }

              sub_10004E564(a1);
            }

            uint64_t v18 = sub_10000B528(*(unint64_t **)(a1 + 336), (void *)a1);
            if ((v18 & 0x80000000) == 0)
            {
              sub_100004344(v3, 5441);
              sub_10003F5BC(v5);
              return 0LL;
            }

            if (dword_10008BA20)
            {
              uint64_t v22 = (os_log_s *)ne_log_obj(v18);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                sub_100058FBC();
              }
            }
          }
        }
      }

      else if (dword_10008BA20)
      {
        uint64_t v15 = (os_log_s *)ne_log_obj(v4);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_1000592A8();
        }
      }

      sub_10003F5BC(v5);
    }

    else if (dword_10008BA20)
    {
      int v14 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v13 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100058E74();
    }
  }

  int v23 = *(void **)(a1 + 336);
  if (v23)
  {
    sub_10003F5BC(v23);
    *(void *)(a1 + 336) = 0LL;
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1000183FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) != 5441)
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    return 0xFFFFFFFFLL;
  }

  sub_100026984((void *)(a1 + 8), *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v5 = (uint64_t **)sub_100026E18(0LL, *(void *)(a1 + 344), 1);
  uint64_t v6 = v5;
  uint64_t v31 = v5;
  int v7 = **(_DWORD **)(a1 + 408);
  if ((v7 & 1) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v12 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Adding xauth VID payload.\n", v30, 2u);
      }
    }

    uint64_t v13 = sub_10003F2A0(16LL);
    if (v13)
    {
      uint64_t v8 = v13;
      uint64_t v6 = (uint64_t **)sub_100026E18(v6, (uint64_t)v13, 13);
      uint64_t v31 = v6;
      if ((**(_DWORD **)(a1 + 408) & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }

    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_100059664();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v8 = 0LL;
  if ((v7 & 2) == 0)
  {
LABEL_4:
    int v9 = 0LL;
    goto LABEL_16;
  }

uint64_t sub_100018818(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) == 5474)
  {
    uint64_t v4 = (uint64_t)sub_100023ABC(a2);
    if (v4)
    {
      int v5 = 0;
      uint64_t v32 = (void *)v4;
      for (uint64_t i = *(unsigned __int8 **)(v4 + 8); ; i += 16)
      {
        unsigned int v7 = *i;
        if (v7 <= 0x13) {
          break;
        }
        if (v7 != 20 && v7 != 130)
        {
LABEL_50:
          unint64_t v23 = v32;
          if (dword_10008BA20)
          {
            uint64_t v24 = (os_log_s *)ne_log_obj(v4);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              sub_100059D00();
            }
          }

          goto LABEL_66;
        }

LABEL_66:
      sub_10003F5BC(v23);
    }

    else if (dword_10008BA20)
    {
      unint64_t v16 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v15 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_100058E74();
    }
  }

  uint64_t v29 = *(void **)(a1 + 160);
  if (v29)
  {
    sub_10003F5BC(v29);
    *(void *)(a1 + 160) = 0LL;
  }

  char v30 = *(void **)(a1 + 184);
  if (v30)
  {
    sub_10003F5BC(v30);
    *(void *)(a1 + 184) = 0LL;
  }

  uint64_t v31 = *(void **)(a1 + 320);
  if (v31)
  {
    sub_10003F5BC(v31);
    *(void *)(a1 + 320) = 0LL;
  }

  return 0xFFFFFFFFLL;
}

          size_t v44 = *(void **)(v4 + 64);
          if (v44)
          {
            do
            {
              __int16 v45 = (void *)v44[2];
              free(v44);
              size_t v44 = v45;
            }

            while (v45);
          }

          return 0xFFFFFFFFLL;
        }

        uint64_t v10 = v9;
        *uint64_t v9 = v8;
        a1 = (_DWORD *)sub_1000124A8(*v6);
        v10[1] = (_DWORD)a1;
        v10[3] = *v6;
        int v11 = *v7;
        while (v11)
        {
          uint64_t v12 = v11;
          int v11 = *(void *)(v11 + 16);
          if (!v11)
          {
            uint64_t v13 = (void *)(v12 + 16);
            goto LABEL_13;
          }
        }

        uint64_t v13 = (void *)(v4 + 64);
LABEL_13:
        const char *v13 = v10;
        ++v8;
      }

      uint64_t v6 = (unsigned int *)*((void *)v6 + 1);
      if (!v6) {
        goto LABEL_40;
      }
    }
  }

  BOOL v21 = (void *)a2[6];
  if (!v21)
  {
    if (dword_10008BA20)
    {
      int v40 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        sub_100062858();
      }
    }

    goto LABEL_66;
  }

  if (a3 == 16)
  {
    uint64_t v22 = (uint64_t *)(a1 + 16);
    unint64_t v23 = 1LL;
    while (1)
    {
      uint64_t v24 = a2[7];
      if (v24) {
        break;
      }
      uint64_t v25 = v23;
LABEL_39:
      BOOL v21 = (void *)v21[1];
      unint64_t v23 = v25;
      if (!v21) {
        goto LABEL_40;
      }
    }

    while (1)
    {
      a1 = calloc(1uLL, 0x18uLL);
      if (!a1) {
        break;
      }
      uint64_t v25 = (v23 + 1);
      *a1 = v23;
      *(void *)(a1 + 1) = *v21;
      a1[3] = *(_DWORD *)v24;
      uint64_t v26 = *v22;
      while (v26)
      {
        uint64_t v27 = v26;
        uint64_t v26 = *(void *)(v26 + 16);
        if (!v26)
        {
          uint64_t v28 = (void *)(v27 + 16);
          goto LABEL_36;
        }
      }

      uint64_t v28 = (void *)(v4 + 64);
LABEL_36:
      *uint64_t v28 = a1;
      uint64_t v24 = *(void *)(v24 + 8);
      LODWORD(v23) = v23 + 1;
      if (!v24) {
        goto LABEL_39;
      }
    }

    if (!dword_10008BA20) {
      goto LABEL_66;
    }
    unsigned int v42 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }

    sub_100009928(v17);
    return 0xFFFFFFFFLL;
  }

  *(_BYTE *)(v17 + 60) = 0;
  sub_100004344((int *)(v17 + 56), 63);
  if (a5)
  {
    uint64_t v22 = sub_100026CD4(a1);
    *(_DWORD *)(v17 + 108) = v22;
    if (*(void *)(a1 + 208))
    {
      if (!sub_10004290C(a1, v22))
      {
        if (dword_10008BA20)
        {
          int v54 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
            sub_100059098();
          }
        }

        goto LABEL_66;
      }

      unint64_t v23 = *(_DWORD *)(v17 + 108);
      goto LABEL_34;
    }

uint64_t sub_100018CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) == 5443)
  {
    uint64_t v5 = sub_100029E9C(*(void *)(*(void *)(a1 + 72) + 64LL), (size_t **)(a1 + 152), (void *)(a1 + 136));
    if ((v5 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v13 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_100058C8C();
        }
      }
    }

    else
    {
      uint64_t v6 = sub_1000076AC(*(_DWORD *)(*(void *)(a1 + 64) + 140LL));
      *(void *)(a1 + 176) = v6;
      if (v6)
      {
        unsigned int v7 = sub_100016D2C(a1);
        *(void *)(a1 + 128) = v7;
        if (v7)
        {
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)(a1 + 64) + 200LL);
          uint64_t v8 = sub_100024B4C(a1);
          if ((_DWORD)v8 == -1)
          {
            if (dword_10008BA20)
            {
              unint64_t v23 = (os_log_s *)ne_log_obj(v8);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                sub_100058CE4();
              }
            }
          }

          else
          {
            uint64_t v9 = *(void **)(a1 + 128);
            if (*(_DWORD *)(a1 + 100) && *v9 >= 0x501uLL)
            {
              uint64_t v10 = 0LL;
              LODWORD(v11) = *(_DWORD *)(a1 + 96);
            }

            else
            {
              unint64_t v11 = *(unsigned int *)(a1 + 96);
              uint64_t v10 = (v11 >> 3) & 4;
            }

            uint64_t v16 = sub_10000A4F4( *(unsigned __int8 **)(a1 + 48),  *(unsigned __int8 **)(a1 + 56),  (uint64_t)v9,  a2,  v10,  (v11 >> 5) & 1);
            if ((_DWORD)v16 == -1)
            {
              if (dword_10008BA20)
              {
                uint64_t v24 = (os_log_s *)ne_log_obj(v16);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
                  sub_10005960C();
                }
              }
            }

            else
            {
              uint64_t v17 = sub_100029CA4( *(void *)(*(void *)(a1 + 72) + 64LL),  *(void **)(a1 + 160),  (void **)(a1 + 168),  (void *)(a1 + 136));
              if ((v17 & 0x80000000) != 0)
              {
                if (dword_10008BA20)
                {
                  uint64_t v25 = (os_log_s *)ne_log_obj(v17);
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
                    sub_100058FE8();
                  }
                }
              }

              else
              {
                uint64_t v18 = sub_10002D448(a1);
                if ((v18 & 0x80000000) != 0)
                {
                  if (dword_10008BA20)
                  {
                    uint64_t v26 = (os_log_s *)ne_log_obj(v18);
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
                      sub_100059014();
                    }
                  }
                }

                else
                {
                  uint64_t v19 = sub_10002D804(a1);
                  if ((v19 & 0x80000000) != 0)
                  {
                    if (dword_10008BA20)
                    {
                      uint64_t v27 = (os_log_s *)ne_log_obj(v19);
                      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
                        sub_100059040();
                      }
                    }
                  }

                  else
                  {
                    uint64_t v20 = sub_10002DAAC((void *)a1);
                    if ((v20 & 0x80000000) != 0)
                    {
                      if (dword_10008BA20)
                      {
                        uint64_t v28 = (os_log_s *)ne_log_obj(v20);
                        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
                          sub_10005906C();
                        }
                      }
                    }

                    else
                    {
                      uint64_t v21 = sub_10002DE98(a1);
                      if ((v21 & 0x80000000) == 0)
                      {
                        sub_100004344(v2, 5476);
                        return 0LL;
                      }

                      if (dword_10008BA20)
                      {
                        uint64_t v29 = (os_log_s *)ne_log_obj(v21);
                        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                          sub_100059098();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        else if (dword_10008BA20)
        {
          uint64_t v15 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            sub_100059E84();
          }
        }
      }

      else if (dword_10008BA20)
      {
        int v14 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_100058CB8();
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v12 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100058E74();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10001901C(uint64_t a1, void *a2)
{
  int v3 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) != 5476)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_9;
  }

  if ((*(_BYTE *)(a2[1] + 19LL) & 1) == 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_10005A020();
      }
    }

LABEL_65:
          if (!*v16 || !*(void *)(a1 + 272))
          {
LABEL_78:
            if (dword_10008BA20)
            {
              uint64_t v29 = (os_log_s *)ne_log_obj(v12);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                sub_100058F90();
              }
            }

            goto LABEL_81;
          }
        }

        uint64_t v26 = sub_1000102F4(a1);
        if ((_DWORD)v26)
        {
          if (dword_10008BA20)
          {
            uint64_t v27 = (os_log_s *)ne_log_obj(v26);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
              sub_1000590C4();
            }
          }

          goto LABEL_81;
        }

        uint64_t v6 = sub_10002B2CC(a1);
        if ((_DWORD)v6 == -1)
        {
          char v30 = 0;
        }

        else
        {
          if ((_DWORD)v6)
          {
            sub_10001BA48(a1, v6, 0LL);
            goto LABEL_81;
          }

          sub_10002D160(a1);
          memcpy( *(void **)(**(void **)(a1 + 328) + 8LL),  *(const void **)(*(void *)(*(void *)(a1 + 328) + 8LL) + 8LL),  **(void **)(*(void *)(a1 + 328) + 8LL));
          sub_100004344(v3, 5445);
          uint64_t v6 = 0LL;
          char v30 = 1;
        }

        goto LABEL_82;
      case 5:
        uint64_t v12 = sub_100026BA4((size_t **)(a1 + 320), *(void *)(v15 + 8));
        if ((v12 & 0x80000000) == 0) {
          goto LABEL_31;
        }
        if (dword_10008BA20)
        {
          uint64_t v22 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            sub_100059148();
          }
        }

        goto LABEL_81;
      case 6:
        uint64_t v12 = sub_10002CCA8(a1, *(void *)(v15 + 8));
        if ((v12 & 0x80000000) == 0)
        {
          int v14 = 1;
LABEL_31:
          v15 += 16LL;
          continue;
        }

        if (dword_10008BA20)
        {
          unint64_t v23 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_100059744();
          }
        }

          if (dword_10008BA20)
          {
            unint64_t v23 = (os_log_s *)ne_log_obj(result);
            uint64_t v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
            if (v24) {
              sub_10005BBB8((uint64_t)__src);
            }
            if (dword_10008BA20)
            {
              uint64_t v25 = (os_log_s *)ne_log_obj(v24);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
                sub_10005BB34((uint64_t)__src);
              }
            }
          }

          if (!WORD5(__src[16])) {
            WORD5(__src[16]) = 255;
          }
          uint64_t v26 = sub_100034D04((unsigned __int8 *)__src, v3);
          uint64_t v27 = v26;
          if (v26)
          {
            if (*(_DWORD *)(v26 + 292) != 5)
            {
              uint64_t v31 = 1;
              goto LABEL_87;
            }

            if (*(_DWORD *)(*(void *)(v3[32] + 64) + 164LL))
            {
              if (!dword_10008BA20) {
                goto LABEL_84;
              }
              uint64_t v28 = (os_log_s *)ne_log_obj(v26);
              if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_84;
              }
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = sub_100035820((unsigned __int8 *)__src);
              uint64_t v29 = "Update the generated policy : %s\n";
LABEL_83:
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v29, buf, 0xCu);
LABEL_84:
              char v30 = (unsigned __int8 *)malloc(0x110uLL);
              v3[17] = (unint64_t)v30;
              if (!v30)
              {
                if (dword_10008BA20)
                {
                  __int16 v39 = (os_log_s *)ne_log_obj(0LL);
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
                    sub_10005BA0C();
                  }
                }

                return 0xFFFFFFFFLL;
              }

              memcpy(v30, __src, 0x110uLL);
              uint64_t v31 = 0;
LABEL_87:
              LOBYTE(__src[0]) = 2;
              uint64_t v49 = *(_OWORD *)((char *)&__src[4] + 8);
              int v50 = *(_OWORD *)((char *)&__src[5] + 8);
              uint64_t v51 = *(_OWORD *)((char *)&__src[6] + 8);
              __int128 v52 = *(_OWORD *)((char *)&__src[7] + 8);
              *(_OWORD *)buf = *(_OWORD *)((char *)__src + 8);
              uint64_t v46 = *(_OWORD *)((char *)&__src[1] + 8);
              uint64_t v47 = *(_OWORD *)((char *)&__src[2] + 8);
              uint64_t v48 = *(_OWORD *)((char *)&__src[3] + 8);
              *(_OWORD *)((char *)&__src[3] + 8) = *(_OWORD *)((char *)&__src[11] + 8);
              *(_OWORD *)((char *)&__src[2] + 8) = *(_OWORD *)((char *)&__src[10] + 8);
              *(_OWORD *)((char *)&__src[1] + 8) = *(_OWORD *)((char *)&__src[9] + 8);
              *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)((char *)&__src[15] + 8);
              *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)((char *)&__src[14] + 8);
              *(_OWORD *)((char *)&__src[5] + 8) = *(_OWORD *)((char *)&__src[13] + 8);
              *(_OWORD *)((char *)&__src[4] + 8) = *(_OWORD *)((char *)&__src[12] + 8);
              *(_OWORD *)((char *)__src + 8) = *(_OWORD *)((char *)&__src[8] + 8);
              *(_OWORD *)((char *)&__src[11] + 8) = v48;
              *(_OWORD *)((char *)&__src[10] + 8) = v47;
              *(_OWORD *)((char *)&__src[9] + 8) = v46;
              *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)buf;
              *(_OWORD *)((char *)&__src[15] + 8) = v52;
              *(_OWORD *)((char *)&__src[14] + 8) = v51;
              *(_OWORD *)((char *)&__src[13] + 8) = v50;
              *(_OWORD *)((char *)&__src[12] + 8) = v49;
              uint64_t v32 = BYTE8(__src[16]);
              BYTE8(__src[16]) = BYTE9(__src[16]);
              BYTE9(__src[16]) = v32;
              uint64_t v33 = sub_100034D04((unsigned __int8 *)__src, v3);
              uint64_t v34 = v33;
              if (v33)
              {
                if (!*((_DWORD *)v3 + 13)) {
                  *((_DWORD *)v3 + 13) = *(_DWORD *)(v33 + 288);
                }
              }

              else
              {
                if (!dword_10008BA20) {
                  goto LABEL_98;
                }
                __int16 v36 = (os_log_s *)ne_log_obj(0LL);
                uint64_t v33 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v33)
                {
                  BOOL v43 = 136315138;
                  size_t v44 = sub_100035820((unsigned __int8 *)__src);
                  _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "no outbound policy found: %s\n",  (uint8_t *)&v43,  0xCu);
                }
              }

              if (dword_10008BA20)
              {
                __int16 v37 = (os_log_s *)ne_log_obj(v33);
                uint64_t v33 = os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG);
                if ((_DWORD)v33)
                {
                  sub_10005BACC((unsigned __int8 *)__src);
                  if (v31)
                  {
LABEL_99:
                    if (*(_DWORD *)(v27 + 292) == 2)
                    {
                      uint64_t v38 = sub_100037B90((uint64_t)v3, v27, v34);
                      if ((v38 & 0x80000000) == 0) {
                        return 0LL;
                      }
                      if (dword_10008BA20)
                      {
                        uint64_t v41 = (os_log_s *)ne_log_obj(v38);
                        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
                          sub_10005BA38();
                        }
                      }
                    }

                    else if (dword_10008BA20)
                    {
                      int v40 = (os_log_s *)ne_log_obj(v33);
                      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
                        sub_10005BA64((unsigned __int8 *)__src);
                      }
                    }

                    return 0xFFFFFFFFLL;
                  }

                  return 4294967294LL;
                }
              }

LABEL_81:
        char v30 = 0;
        uint64_t v6 = 0xFFFFFFFFLL;
LABEL_82:
        sub_10003F5BC(v13);
        sub_10003F5BC(v11);
        if ((v30 & 1) == 0) {
          goto LABEL_10;
        }
        return v6;
      case 7:
        uint64_t v12 = sub_10002CF50(a1, *(void *)(v15 + 8));
        if ((v12 & 0x80000000) == 0) {
          goto LABEL_31;
        }
        if (dword_10008BA20)
        {
          uint64_t v24 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            sub_100059174();
          }
        }

        goto LABEL_81;
      case 8:
        *(void *)(a1 + 352) = *(void *)(v15 + 8);
        goto LABEL_31;
      case 9:
        uint64_t v12 = sub_100026BA4((size_t **)(a1 + 272), *(void *)(v15 + 8));
        if ((v12 & 0x80000000) == 0) {
          goto LABEL_31;
        }
        if (dword_10008BA20)
        {
          uint64_t v25 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            sub_100059770();
          }
        }

        goto LABEL_81;
      case 0xB:
        sub_10001C474(*(void *)(v15 + 8), a1);
        goto LABEL_31;
      case 0xD:
        uint64_t v12 = sub_10003F330(*(void *)(v15 + 8));
        goto LABEL_31;
      default:
        if (dword_10008BA20)
        {
          uint64_t v21 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            sub_100059D00();
          }
        }

        goto LABEL_81;
    }
  }

        v98 = 1;
        uint64_t v31 = v95;
        goto LABEL_82;
      }

      if (!dword_10008BA20)
      {
        unsigned int v7 = 13LL;
        goto LABEL_186;
      }

      v75 = v30;
      v82 = (os_log_s *)ne_log_obj(v27);
      uint64_t v31 = v95;
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR)) {
        sub_10005AC8C();
      }
      unsigned int v7 = 13LL;
LABEL_139:
      char v30 = v75;
LABEL_164:
      sub_10003F5BC(v94);
LABEL_116:
      sub_10003F5BC(v15);
      sub_10003F5BC(v13);
      if (v30) {
        free(v30);
      }
      if (v31) {
        free(v31);
      }
      if ((_DWORD)v7) {
        goto LABEL_10;
      }
      return v7;
    case 0xAu:
      uint64_t v27 = sub_100026BA4((size_t **)(a1 + 216), *((void *)v17 + 1));
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_82;
      }
      if (!dword_10008BA20) {
        goto LABEL_163;
      }
      v75 = v30;
      uint64_t v79 = (os_log_s *)ne_log_obj(v27);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
        sub_10005911C();
      }
      goto LABEL_138;
    case 0xBu:
      sub_10001C68C(*((void *)v17 + 1), a1);
      goto LABEL_82;
    default:
      goto LABEL_153;
  }

  uint64_t v62 = *(void **)(v17 + 80);
  if (v62)
  {
    sub_10003F5BC(v62);
    *(void *)(v17 + 80) = 0LL;
  }

uint64_t sub_100019564(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) == 5445)
  {
    uint64_t v5 = sub_1000108E0(a1);
    if ((v5 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        int v14 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_100058C08();
        }
      }
    }

    else
    {
      if (dword_10008BA20)
      {
        uint64_t v6 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
          sub_100059714();
        }
      }

      uint64_t v7 = sub_10002AB18(a1, 1);
      *(void *)(a1 + 256) = v7;
      if (v7)
      {
        *(_BYTE *)(a1 + 82) |= 1u;
        uint64_t v8 = sub_100017850(a1);
        *(void *)(a1 + 128) = v8;
        if (v8)
        {
          uint64_t v9 = sub_100024890(a1, v8);
          if ((v9 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              int v19 = (os_log_s *)ne_log_obj(v9);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
                sub_100058CE4();
              }
            }
          }

          else
          {
            uint64_t v10 = *(void **)(a1 + 128);
            if (*(_DWORD *)(a1 + 100) && *v10 >= 0x501uLL)
            {
              uint64_t v11 = 0LL;
              LODWORD(v12) = *(_DWORD *)(a1 + 96);
            }

            else
            {
              unint64_t v12 = *(unsigned int *)(a1 + 96);
              uint64_t v11 = (v12 >> 3) & 4;
            }

            uint64_t v17 = sub_10000A4F4( *(unsigned __int8 **)(a1 + 48),  *(unsigned __int8 **)(a1 + 56),  (uint64_t)v10,  a2,  v11,  (v12 >> 5) & 1);
            if ((_DWORD)v17 != -1)
            {
              memcpy( *(void **)(*(void *)(*(void *)(a1 + 328) + 8LL) + 8LL),  *(const void **)(**(void **)(a1 + 328) + 8LL),  ***(void ***)(a1 + 328));
              sub_100004344(v2, 9216);
              return 0LL;
            }

            if (dword_10008BA20)
            {
              BOOL v20 = (os_log_s *)ne_log_obj(v17);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
                sub_10005960C();
              }
            }
          }
        }

        else if (dword_10008BA20)
        {
          uint64_t v16 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_100059D94();
          }
        }
      }

      else if (dword_10008BA20)
      {
        uint64_t v15 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_100059E58();
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v13 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100058E74();
    }
  }

  return 0xFFFFFFFFLL;
}

  ;
}

uint64_t sub_10001979C(BOOL a1, void *a2)
{
  uint64_t v3 = a1;
  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (a1)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "receive Information.\n", buf, 2u);
    }
  }

  uint64_t v5 = a2[1];
  char v6 = *(_BYTE *)(v5 + 19);
  int v7 = *(_DWORD *)(v5 + 20);
  if ((v6 & 1) == 0)
  {
    uint64_t v8 = sub_10003F5F0((uint64_t)a2);
    uint64_t v9 = v8;
    if (*v8 < 0x20)
    {
LABEL_6:
      if (dword_10008BA20)
      {
        uint64_t v10 = (os_log_s *)ne_log_obj(v8);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_10005A0AC();
        }
      }

      goto LABEL_9;
    }

    unint64_t v21 = v8[1];
    int v24 = *(unsigned __int8 *)(v21 + 28);
    uint64_t v22 = (unsigned __int8 *)(v21 + 28);
    int v23 = v24;
    int v25 = *(unsigned __int8 *)(v3 + 81);
    if (v25 == 4)
    {
      int v26 = *(_DWORD *)(v3 + 16);
      if ((v26 & 0x2000) == 0)
      {
        int v29 = *(_DWORD *)(v3 + 20);
        if (v26 == 5283 && !v29) {
          goto LABEL_50;
        }
        if (v26 == 5507 && v29 == 1) {
          goto LABEL_50;
        }
      }
    }

    else
    {
      if (v25 != 2) {
        goto LABEL_251;
      }
      int v26 = *(_DWORD *)(v3 + 16);
    }

    if ((v26 & 0x2000) == 0)
    {
      int v30 = *(_DWORD *)(v3 + 20);
      if (v30 == 1)
      {
        int v31 = 5445;
      }

      else
      {
        if (v30) {
          goto LABEL_251;
        }
        if (v26 == 5190)
        {
LABEL_50:
          v160 = v22;
          uint64_t v34 = (uint64_t)v8;
          goto LABEL_51;
        }

        int v31 = 5221;
      }

      if (v26 == v31) {
        goto LABEL_50;
      }
    }

LABEL_251:
    BOOL v11 = !v23 && (v132 = *(_DWORD *)(v3 + 16), (v132 & 0x2000) == 0) && v132 == 5281 && *(_DWORD *)(v3 + 20) == 0;
    if (dword_10008BA20)
    {
      v134 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR)) {
        sub_10005A0D8(v23, v3, v134);
      }
    }

    uint64_t v12 = 0LL;
    goto LABEL_264;
  }

  if (!*(void *)(v3 + 328))
  {
    if (dword_10008BA20)
    {
      uint64_t v27 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_10005A41C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v13 = sub_10002E0FC(v3, v7);
  if (!v13)
  {
    if (dword_10008BA20)
    {
      uint64_t v28 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_10005A448();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v14 = v13;
  uint64_t v9 = sub_10002E664(v3, a2, *v13, v13[1]);
  sub_10002E08C(v14);
  if (!v9)
  {
    if (dword_10008BA20)
    {
      uint64_t v32 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        sub_10005A474();
      }
    }

    return 0xFFFFFFFFLL;
  }

  unint64_t v15 = *v9;
  if (*v9 <= 0x1F) {
    goto LABEL_6;
  }
  unint64_t v16 = v9[1];
  if (*(_BYTE *)(v16 + 16) != 8)
  {
    if (dword_10008BA20)
    {
      uint64_t v33 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        sub_10005A638();
      }
    }

    goto LABEL_9;
  }

  unint64_t v17 = v16 + 28;
  int v18 = *(unsigned __int8 *)(v16 + 28);
  if ((*(_BYTE *)(v3 + 17) & 0x20) == 0 && (!*(void *)(v3 + 72) || !*(void *)(v3 + 208)))
  {
    if (dword_10008BA20)
    {
      v143 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR)) {
        sub_10005A4A0();
      }
    }

    goto LABEL_9;
  }

  uint64_t v19 = bswap32(*(unsigned __int16 *)(v16 + 30)) >> 16;
  if (v15 < v19 + 32)
  {
    if (dword_10008BA20)
    {
      BOOL v20 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_10005A4CC();
      }
    }

    goto LABEL_9;
  }

  v140 = (unsigned __int16 *)(v17 + v19);
  size_t v141 = bswap32(*(unsigned __int16 *)(v17 + v19 + 2)) >> 16;
  if (v15 - v19 - 28 < v141)
  {
    if (dword_10008BA20)
    {
      v142 = (os_log_s *)ne_log_obj(v141);
      if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR)) {
        sub_10005A4F8();
      }
    }

    goto LABEL_9;
  }

  if (v141 <= 3)
  {
    if (dword_10008BA20)
    {
      v144 = (os_log_s *)ne_log_obj(v141);
      if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR)) {
        sub_10005A524();
      }
    }

    goto LABEL_9;
  }

  v160 = (unsigned __int8 *)(v16 + 28);
  v145 = sub_10003F4BC(v141);
  if (!v145)
  {
    if (dword_10008BA20)
    {
      v154 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR)) {
        sub_10005A550();
      }
    }

    goto LABEL_9;
  }

  v146 = v145;
  memcpy((void *)v145[1], v140, bswap32(v140[1]) >> 16);
  uint64_t v147 = sub_10002AA48(v3, *(_DWORD *)(v16 + 20), (uint64_t)v146);
  if (!v147)
  {
    if (dword_10008BA20)
    {
      v155 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR)) {
        sub_10005A57C();
      }
    }

    goto LABEL_314;
  }

  v148 = (void *)v147;
  size_t v149 = (bswap32(*(unsigned __int16 *)(v16 + 30)) >> 16) - 4LL;
  if (v149 != *(void *)v147)
  {
    if (dword_10008BA20)
    {
      v156 = (os_log_s *)ne_log_obj(v147);
      if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR)) {
        sub_10005A60C();
      }
    }

    goto LABEL_313;
  }

  uint64_t v150 = timingsafe_bcmp((const void *)(v16 + 32), *(const void **)(v147 + 8), v149);
  if ((_DWORD)v150)
  {
    if (dword_10008BA20)
    {
      v151 = (os_log_s *)ne_log_obj(v150);
      if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR)) {
        sub_10005A5E0();
      }
    }

LABEL_313:
    sub_10003F5BC(v148);
LABEL_314:
    sub_10003F5BC(v146);
    goto LABEL_9;
  }

  if (dword_10008BA20)
  {
    v157 = (os_log_s *)ne_log_obj(v150);
    if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG)) {
      sub_10005A5A8();
    }
  }

  sub_10003F5BC(v148);
  sub_10003F5BC(v146);
  uint64_t v34 = (uint64_t)v9;
  int v23 = v18;
LABEL_51:
  size_t v35 = (size_t)sub_100023ABC(v34);
  if (!v35)
  {
    if (dword_10008BA20)
    {
      v137 = (unint64_t *)v34;
      v138 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR)) {
        sub_100058ED4();
      }
      BOOL v11 = 0;
      uint64_t v12 = 0xFFFFFFFFLL;
      uint64_t v9 = v137;
      goto LABEL_264;
    }

    uint64_t v9 = (unint64_t *)v34;
LABEL_9:
    BOOL v11 = 0;
    uint64_t v12 = 0xFFFFFFFFLL;
    goto LABEL_264;
  }

  uint64_t v9 = (unint64_t *)v35;
  int v158 = v23;
  uint64_t v12 = 0LL;
  int v161 = 0;
  v159 = (void *)v34;
  uint64_t v36 = *(void *)(v35 + 8) + 8LL;
  while (2)
  {
    switch(*(_BYTE *)(v36 - 8))
    {
      case 8:
        goto LABEL_240;
      case 9:
        goto LABEL_98;
      case 0xA:
        if (dword_10008BA20)
        {
          __int16 v37 = (os_log_s *)ne_log_obj(v35);
          size_t v35 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v35) {
            sub_10005A3F0(&v162, v163);
          }
        }

        goto LABEL_240;
      case 0xB:
        uint64_t v38 = *(void *)v36;
        unsigned int v39 = *(unsigned __int16 *)(*(void *)v36 + 10LL);
        if (v39 == 3584)
        {
          int v40 = *(_DWORD *)(v3 + 16);
          if ((v40 & 0x2000) == 0 && v40 == 5281 && !*(_DWORD *)(v3 + 20))
          {
            if (dword_10008BA20)
            {
              uint64_t v41 = (os_log_s *)ne_log_obj(v35);
              size_t v35 = os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
              if ((_DWORD)v35)
              {
                v121 = sub_10003DE70(v158);
                v122 = sub_10003DDFC(14);
                int v123 = *(_DWORD *)(v3 + 16);
                int v124 = *(_DWORD *)(v3 + 20);
                *(_DWORD *)buf = 136315906;
                *(void *)v175 = v121;
                *(_WORD *)&v175[8] = 2080;
                *(void *)&v175[10] = v122;
                *(_WORD *)&v175[18] = 1024;
                *(_DWORD *)v176 = v123;
                *(_WORD *)&v176[4] = 1024;
                *(_DWORD *)v177 = v124;
                _os_log_error_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "%s message with %s notification receveid, status 0x%x, side %d\n",  buf,  0x22u);
              }
            }

            int v161 = 1;
            goto LABEL_240;
          }
        }

        int v53 = __rev16(v39);
        if (v53 > 36135)
        {
          if (v53 > 40499)
          {
            if (v53 == 40500) {
              goto LABEL_210;
            }
            if (v53 == 40501)
            {
              if (*(_DWORD *)(v3 + 20))
              {
                if (!dword_10008BA20) {
                  goto LABEL_210;
                }
                int v67 = (os_log_s *)ne_log_obj(v35);
                size_t v35 = os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v35) {
                  goto LABEL_210;
                }
                *(_WORD *)buf = 0;
                uint64_t v68 = v67;
                uint64_t v69 = "LOAD-BALANCE notification ignored - we are not the initiator.\n";
              }

              else if ((v6 & 1) != 0)
              {
                if (*(_WORD *)(v38 + 2) == 0x2000)
                {
                  int v95 = sub_10000B328(v3);
                  v96 = (unsigned int *)(v38 + 28);
                  size_t v35 = sub_1000488E4(0x9E35u, 1u, v95, 4u, (const void *)(v38 + 28));
                  if (dword_10008BA20)
                  {
                    v97 = (os_log_s *)ne_log_obj(v35);
                    size_t v35 = os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT);
                    if ((_DWORD)v35)
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEFAULT,  "Received LOAD_BALANCE notification.\n",  buf,  2u);
                    }
                  }

                  if (*(_DWORD *)(*(void *)(v3 + 48) + 4LL) != bswap32(*v96))
                  {
                    if (dword_10008BA20)
                    {
                      v98 = (os_log_s *)ne_log_obj(v35);
                      if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
                      {
                        unsigned int v99 = bswap32(*v96);
                        *(_DWORD *)buf = 67109120;
                        *(_DWORD *)v175 = v99;
                        _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEFAULT,  "Deleting old Phase 1 because of LOAD_BALANCE notification - redirect address=%x.\n",  buf,  8u);
                      }
                    }

                    if ((*(_BYTE *)(v3 + 17) & 0x20) != 0) {
                      sub_10001ADEC(v3);
                    }
                    size_t v35 = (size_t)sub_100023380(v3);
                  }

                  goto LABEL_210;
                }

                if (!dword_10008BA20
                  || (v106 = (os_log_s *)ne_log_obj(v35),
                      size_t v35 = os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT),
                      !(_DWORD)v35))
                {
LABEL_210:
                  unint64_t v107 = *(unsigned __int8 *)(v38 + 9);
                  if (*(_BYTE *)(v38 + 9))
                  {
                    if (v107 + 12 > bswap32(*(unsigned __int16 *)(v38 + 2)) >> 16)
                    {
                      if (dword_10008BA20)
                      {
                        v139 = (os_log_s *)ne_log_obj(v35);
                        if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR)) {
                          sub_10005A218();
                        }
                      }

                      goto LABEL_277;
                    }

                    v108 = sub_10003D680(v38 + 12, v107);
                    v109 = v108;
                    if (dword_10008BA20)
                    {
                      v110 = (os_log_s *)ne_log_obj(v108);
                      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
                      {
                        v111 = sub_10003DDFC(v53);
                        unsigned int v112 = bswap32(*(_DWORD *)(v38 + 4));
                        int v113 = *(unsigned __int8 *)(v38 + 8);
                        int v114 = *(unsigned __int8 *)(v38 + 9);
                        *(_DWORD *)buf = 67110402;
                        *(_DWORD *)v175 = v53;
                        *(_WORD *)&v175[4] = 2080;
                        *(void *)&v175[6] = v111;
                        *(_WORD *)&v175[14] = 1024;
                        *(_DWORD *)&v175[16] = v112;
                        *(_WORD *)v176 = 1024;
                        *(_DWORD *)&v176[2] = v113;
                        *(_WORD *)v177 = 2080;
                        *(void *)&v177[2] = v109;
                        __int16 v178 = 1024;
                        int v179 = v114;
                        _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEFAULT,  "Notification message %d:%s, doi=%d proto_id=%d spi=%s(size=%d).\n",  buf,  0x2Eu);
                      }
                    }

                    free(v109);
                  }

                  if ((unsigned __int16)(v53 - 1) <= 0x3FFEu)
                  {
                    uint64_t v115 = (bswap32(*(unsigned __int16 *)(v38 + 2)) >> 16) - 12LL;
                    uint64_t v116 = *(unsigned __int8 *)(v38 + 9);
                    size_t v35 = v115 - v116;
                    if (v115 != v116)
                    {
                      size_t v35 = (size_t)sub_10003F4BC(v35);
                      if (v35)
                      {
                        size_t v117 = v35;
                        v118 = memcpy(*(void **)(v35 + 8), (const void *)(v116 + v38 + 12), *(void *)v35);
                        if (dword_10008BA20)
                        {
                          v119 = (os_log_s *)ne_log_obj(v118);
                          if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
                          {
                            v127 = sub_1000298D0(*(char **)(v117 + 8), *(void *)v117);
                            *(_DWORD *)buf = 136315138;
                            *(void *)v175 = v127;
                            _os_log_error_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_ERROR,  "Message: '%s'.\n",  buf,  0xCu);
                          }
                        }

                        sub_10003F5BC((void *)v117);
                      }

                      else if (dword_10008BA20)
                      {
                        v120 = (os_log_s *)ne_log_obj(0LL);
                        size_t v35 = os_log_type_enabled(v120, OS_LOG_TYPE_ERROR);
                        if ((_DWORD)v35) {
                          sub_10005A1EC(&v164, v165);
                        }
                      }
                    }
                  }

                  goto LABEL_239;
                }

                *(_WORD *)buf = 0;
                uint64_t v68 = v106;
                uint64_t v69 = "isakmp_info_recv_lb Invalid length of payload\n";
              }

              else
              {
                if (!dword_10008BA20) {
                  goto LABEL_210;
                }
                v90 = (os_log_s *)ne_log_obj(v35);
                size_t v35 = os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v35) {
                  goto LABEL_210;
                }
                *(_WORD *)buf = 0;
                uint64_t v68 = v90;
                uint64_t v69 = "LOAD-BALANCE notification ignored - not protected.\n";
              }

              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, v69, buf, 2u);
              goto LABEL_210;
            }

LABEL_144:
            if ((unsigned __int16)(v53 - 1) > 0x3FFEu)
            {
              if (dword_10008BA20)
              {
                v82 = (os_log_s *)ne_log_obj(v35);
                size_t v35 = os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
                if ((_DWORD)v35) {
                  sub_10005A2BC((uint64_t)v180, v53);
                }
              }
            }

            else
            {
              if (!v7)
              {
                if (dword_10008BA20)
                {
                  v153 = (os_log_s *)ne_log_obj(v35);
                  if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR)) {
                    sub_10005A1C0();
                  }
                }

                goto LABEL_277;
              }

              size_t v35 = sub_100009448(v3, v7);
              if (v35)
              {
                if (dword_10008BA20)
                {
                  uint64_t v78 = (os_log_s *)ne_log_obj(v35);
                  size_t v35 = os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
                  if ((_DWORD)v35) {
                    sub_10005A280((uint64_t)v181, v53);
                  }
                }
              }

              else if (dword_10008BA20)
              {
                v100 = (os_log_s *)ne_log_obj(0LL);
                size_t v35 = os_log_type_enabled(v100, OS_LOG_TYPE_ERROR);
                if ((_DWORD)v35) {
                  sub_10005A244((uint64_t)v182, v53);
                }
              }
            }

            goto LABEL_210;
          }

          if (v53 != 36136)
          {
            if (v53 == 36137)
            {
              if ((v6 & 1) != 0)
              {
                if (dword_10008BA20)
                {
                  __int16 v63 = (os_log_s *)ne_log_obj(v35);
                  size_t v35 = os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v35)
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "DPD R-U-There-Ack received\n",  buf,  2u);
                  }
                }

                int v64 = *(unsigned __int16 *)(v3 + 384);
                if (bswap32(*(_DWORD *)(v38 + 28)) == v64)
                {
                  if (*(void *)(v38 + 12) == *(void *)v3 && *(void *)(v38 + 20) == *(void *)(v3 + 8))
                  {
                    *(_BYTE *)(v3 + 386) = 0;
                    *(_WORD *)(v3 + 384) = v64 + 1;
                    *(void *)(v3 + 376) = time(0LL);
                    uint64_t v129 = *(unsigned int *)(v3 + 388);
                    if ((_DWORD)v129)
                    {
                      sub_10003AA44(v129);
                      *(_DWORD *)(v3 + 388) = 0;
                    }

                    uint64_t v130 = sub_10001CC3C(v3, 0);
                    if (dword_10008BA20)
                    {
                      v131 = (os_log_s *)ne_log_obj(v130);
                      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEFAULT,  "received an R-U-THERE-ACK\n",  buf,  2u);
                      }
                    }

                    size_t v35 = sub_100048F84(1LL, v3);
                  }

                  else if (dword_10008BA20)
                  {
                    int v65 = (os_log_s *)ne_log_obj(v35);
                    size_t v35 = os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
                    if ((_DWORD)v35) {
                      sub_10005A350(&v168, v169);
                    }
                  }
                }

                else if (dword_10008BA20)
                {
                  v91 = (os_log_s *)ne_log_obj(v35);
                  size_t v35 = os_log_type_enabled(v91, OS_LOG_TYPE_ERROR);
                  if ((_DWORD)v35)
                  {
                    unsigned int v92 = bswap32(*(_DWORD *)(v38 + 28));
                    int v93 = *(unsigned __int16 *)(v3 + 384);
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)v175 = v92;
                    *(_WORD *)&v175[4] = 1024;
                    *(_DWORD *)&v175[6] = v93;
                    v86 = v91;
                    v87 = "Wrong DPD sequence number (%d, %d expected).\n";
LABEL_204:
                    uint32_t v88 = 14;
LABEL_205:
                    _os_log_error_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, v87, buf, v88);
                  }
                }

                goto LABEL_239;
              }

              goto LABEL_210;
            }

            goto LABEL_144;
          }

          if ((v6 & 1) == 0) {
            goto LABEL_210;
          }
          if (dword_10008BA20)
          {
            uint64_t v73 = (os_log_s *)ne_log_obj(v35);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "DPD R-U-There received\n", buf, 2u);
            }
          }

          char v74 = sub_10003F4BC(0x20uLL);
          if (v74)
          {
            v75 = v74;
            uint64_t v76 = v74[1];
            *(_BYTE *)uint64_t v76 = 0;
            *(_WORD *)(v76 + 2) = 0x2000;
            *(void *)(v76 + 4) = 0x298D100101000000LL;
            *(void *)(v76 + 12) = *(void *)(v38 + 12);
            *(void *)(v76 + 20) = *(void *)(v38 + 20);
            *(_DWORD *)(v76 + 28) = *(_DWORD *)(v38 + 28);
            uint64_t v12 = sub_10001AEAC(v3, (uint64_t)v74, 11, 1);
            sub_10003F5BC(v75);
            if (dword_10008BA20)
            {
              v77 = (os_log_s *)ne_log_obj(v35);
              size_t v35 = os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v35)
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "received a valid R-U-THERE, ACK sent\n",  buf,  2u);
              }
            }
          }

          else
          {
            if (dword_10008BA20)
            {
              v94 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)) {
                sub_10005A324(&v166, v167);
              }
            }

            size_t v35 = (size_t)__error();
            uint64_t v12 = *(unsigned int *)v35;
          }

          if ((v12 & 0x80000000) != 0) {
            goto LABEL_278;
          }
LABEL_240:
          v36 += 16LL;
          continue;
        }

        if (v53 > 24576)
        {
          if (v53 == 24577) {
            goto LABEL_210;
          }
          if (v53 != 24578) {
            goto LABEL_144;
          }
          if ((v6 & 1) == 0) {
            goto LABEL_210;
          }
          sub_10001C130(v3);
LABEL_239:
          uint64_t v12 = 0LL;
          goto LABEL_240;
        }

        if (v53 == 0x4000) {
          goto LABEL_210;
        }
        if (v53 != 24576) {
          goto LABEL_144;
        }
        if ((v6 & 1) == 0) {
          goto LABEL_210;
        }
        unint64_t v54 = *(unsigned __int8 *)(v38 + 9);
        if (v54 + 12 <= bswap32(*(unsigned __int16 *)(v38 + 2)) >> 16)
        {
          int v55 = sub_10003D680(v38 + 12, v54);
          int v56 = v55;
          if (dword_10008BA20)
          {
            __int16 v57 = (os_log_s *)ne_log_obj(v55);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v58 = bswap32(*(_DWORD *)(v38 + 4));
              int v59 = *(unsigned __int8 *)(v38 + 8);
              int v60 = *(unsigned __int8 *)(v38 + 9);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)v175 = v58;
              *(_WORD *)&v175[4] = 1024;
              *(_DWORD *)&v175[6] = v59;
              *(_WORD *)&v175[10] = 2080;
              *(void *)&v175[12] = v56;
              *(_WORD *)v176 = 1024;
              *(_DWORD *)&v176[2] = v60;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "notification message ISAKMP-SA RESPONDER-LIFETIME, doi=%d proto_id=%d spi=%s(size=%d).\n",  buf,  0x1Eu);
            }
          }

          free(v56);
          goto LABEL_239;
        }

        if (dword_10008BA20)
        {
          v152 = (os_log_s *)ne_log_obj(v35);
          if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR)) {
            sub_10005A2F8();
          }
        }

LABEL_277:
        uint64_t v12 = 0xFFFFFFFFLL;
LABEL_278:
        sub_10003F5BC(v159);
        BOOL v11 = v161;
LABEL_264:
        sub_10003F5BC(v9);
        if (v11)
        {
          uint64_t v135 = *(void *)(v3 + 440);
          if (v135)
          {
            gettimeofday((timeval *)(v135 + 336), 0LL);
            if (!*(void *)(v135 + 296)) {
              *(void *)(v135 + 296) = off_100088528;
            }
            sub_10004CEC0(v135);
          }
        }

        return v12;
      case 0xC:
        uint64_t v42 = *(void *)v36;
        BOOL v43 = (unsigned int *)(*(void *)v36 + 4LL);
        int v44 = dword_10008BA20;
        if (*v43 == 0x1000000) {
          goto LABEL_66;
        }
        if (dword_10008BA20)
        {
          uint64_t v62 = (os_log_s *)ne_log_obj(v35);
          size_t v35 = os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v35) {
            sub_10005A3A8(v183, v43, v184, v62);
          }
        }

        if ((**(_BYTE **)(v3 + 408) & 2) == 0 || *v43) {
          goto LABEL_239;
        }
        int v44 = dword_10008BA20;
LABEL_66:
        uint64_t v45 = bswap32(*(unsigned __int16 *)(v42 + 10)) >> 16;
        if ((bswap32(*(unsigned __int16 *)(v42 + 2)) >> 16) - 12 != *(unsigned __int8 *)(v42 + 9) * (_DWORD)v45)
        {
          if (v44)
          {
            __int16 v66 = (os_log_s *)ne_log_obj(v35);
            size_t v35 = os_log_type_enabled(v66, OS_LOG_TYPE_ERROR);
            if ((_DWORD)v35) {
              sub_10005A37C(&v170, v171);
            }
          }

          goto LABEL_239;
        }

        if (v44)
        {
          uint64_t v46 = (os_log_s *)ne_log_obj(v35);
          size_t v35 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v35)
          {
            uint64_t v47 = sub_10003DFCC(*(unsigned __int8 *)(v42 + 8));
            *(_DWORD *)buf = 136315138;
            *(void *)v175 = v47;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "delete payload for protocol %s\n",  buf,  0xCu);
          }
        }

        uint64_t v48 = *(void *)(v3 + 64);
        if (*(_DWORD *)(v48 + 240) | v6 & 1)
        {
          uint64_t v49 = *(unsigned __int8 *)(v42 + 8);
          if ((v49 - 2) < 2)
          {
            if (*(_BYTE *)(v42 + 9) != 4)
            {
              if (dword_10008BA20)
              {
                v89 = (os_log_s *)ne_log_obj(v35);
                size_t v35 = os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
                if ((_DWORD)v35)
                {
LABEL_203:
                  int v104 = *(unsigned __int8 *)(v42 + 9);
                  int v105 = *(unsigned __int8 *)(v42 + 8);
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)v175 = v104;
                  *(_WORD *)&v175[4] = 1024;
                  *(_DWORD *)&v175[6] = v105;
                  v86 = v89;
                  v87 = "delete payload with strange spi size %d(proto_id:%d)\n";
                  goto LABEL_204;
                }
              }

              goto LABEL_239;
            }

            if (*(_DWORD *)(v48 + 180) && (*(_WORD *)(*(void *)(v3 + 440) + 264LL) & 8) != 0)
            {
              size_t v35 = (size_t)sub_1000095D4( *(void *)(v3 + 56),  *(void *)(v3 + 48),  *(unsigned __int8 *)(v42 + 8),  *(_DWORD *)(v42 + 12));
              if (v35)
              {
                *(_BYTE *)(v35 + 264) |= 4u;
                if (!dword_10008BA20) {
                  goto LABEL_239;
                }
                uint64_t v79 = (os_log_s *)ne_log_obj(v35);
                size_t v35 = os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v35)
                {
LABEL_235:
                  if (dword_10008BA20)
                  {
                    v126 = (os_log_s *)ne_log_obj(v35);
                    size_t v35 = os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT);
                    if ((_DWORD)v35)
                    {
                      *(_WORD *)buf = 0;
                      uint64_t v71 = v126;
                      unint64_t v72 = "purged SAs.\n";
                      goto LABEL_238;
                    }
                  }

                  goto LABEL_239;
                }

                *(_WORD *)buf = 0;
                uint64_t v80 = v79;
                __int16 v81 = "Ignoring SA delete from peer for L2TP server\n";
LABEL_244:
                _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, v81, buf, 2u);
                goto LABEL_235;
              }

              uint64_t v49 = *(unsigned __int8 *)(v42 + 8);
            }

            unint64_t v101 = *(void *)(v3 + 48);
            v102 = (int *)(v42 + 12);
            uint64_t v103 = v49;
          }

          else
          {
            if ((_DWORD)v49 != 4)
            {
              if ((_DWORD)v49 != 1)
              {
                if (dword_10008BA20)
                {
                  v84 = (os_log_s *)ne_log_obj(v35);
                  size_t v35 = os_log_type_enabled(v84, OS_LOG_TYPE_ERROR);
                  if ((_DWORD)v35)
                  {
                    int v85 = *(unsigned __int8 *)(v42 + 8);
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)v175 = v85;
                    v86 = v84;
                    v87 = "deletion message received, invalid proto_id: %d\n";
                    uint32_t v88 = 8;
                    goto LABEL_205;
                  }
                }

                goto LABEL_239;
              }

              if (*(_BYTE *)(v42 + 9) != 16)
              {
                if (dword_10008BA20)
                {
                  v89 = (os_log_s *)ne_log_obj(v35);
                  size_t v35 = os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
                  if ((_DWORD)v35) {
                    goto LABEL_203;
                  }
                }

                goto LABEL_239;
              }

              size_t v35 = sub_10000886C(*(void *)(v3 + 440), (void *)(v42 + 12));
              if (!v35) {
                goto LABEL_235;
              }
              uint64_t v50 = v35;
              if (*(_DWORD *)(v35 + 116))
              {
                uint64_t v51 = *(void *)(v35 + 440);
                if (v51)
                {
                  int v52 = *(unsigned __int16 *)(v51 + 264);
                  if ((~v52 & 0x401) == 0 && ((v52 & 8) == 0 || !*(_DWORD *)(*(void *)(v35 + 64) + 180LL))) {
                    sub_100025308(v35, 0);
                  }
                }
              }

              size_t v35 = *(unsigned int *)(v50 + 120);
              if ((_DWORD)v35)
              {
                size_t v35 = sub_10003AA44(v35);
                *(_DWORD *)(v50 + 120) = 0;
              }

              if (*(_DWORD *)(v50 + 24)
                || (*(_BYTE *)(v50 + 432) & 1) != 0
                && (uint64_t v125 = *(void *)(v50 + 440)) != 0
                && (*(_WORD *)(v125 + 264) & 0x400) != 0)
              {
                size_t v35 = sub_100008D44(v50);
                if ((_DWORD)v35) {
                  size_t v35 = sub_10001B744(v50, 1, 50002, 0LL);
                }
              }

              if (!*(_DWORD *)(*(void *)(v50 + 64) + 180LL) || (*(_WORD *)(*(void *)(v50 + 440) + 264LL) & 8) == 0)
              {
                size_t v35 = (size_t)sub_100023380(v50);
                goto LABEL_235;
              }

              if (!dword_10008BA20) {
                goto LABEL_239;
              }
              v128 = (os_log_s *)ne_log_obj(v35);
              size_t v35 = os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT);
              if (!(_DWORD)v35) {
                goto LABEL_235;
              }
              *(_WORD *)buf = 0;
              uint64_t v80 = v128;
              __int16 v81 = "Ignoring IKE delete from peer for L2TP server\n";
              goto LABEL_244;
            }

            int v172 = 0;
            int v83 = *(unsigned __int8 *)(v42 + 9);
            if (v83 == 4)
            {
              int v172 = *(_DWORD *)(v42 + 12);
            }

            else
            {
              if (v83 != 2)
              {
                if (dword_10008BA20)
                {
                  v89 = (os_log_s *)ne_log_obj(v35);
                  size_t v35 = os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
                  if ((_DWORD)v35) {
                    goto LABEL_203;
                  }
                }

                goto LABEL_239;
              }

              HIWORD(v172) = *(_WORD *)(v42 + 12);
            }

            unint64_t v101 = *(void *)(v3 + 48);
            v102 = &v172;
            uint64_t v103 = 4LL;
          }

          sub_10001BDF8(v101, v103, v102, v45, 0LL, 0LL);
          goto LABEL_235;
        }

        if (dword_10008BA20)
        {
          int v70 = (os_log_s *)ne_log_obj(v35);
          size_t v35 = os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v35)
          {
            *(_WORD *)buf = 0;
            uint64_t v71 = v70;
            unint64_t v72 = "Ignoring unencrypted delete payload (check the weak_phase1_check option)\n";
LABEL_238:
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, v72, buf, 2u);
            goto LABEL_239;
          }
        }

        goto LABEL_239;
      default:
        if (!*(_BYTE *)(v36 - 8)) {
          goto LABEL_278;
        }
LABEL_98:
        if (dword_10008BA20)
        {
          uint64_t v61 = (os_log_s *)ne_log_obj(v35);
          size_t v35 = os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v35) {
            sub_10005A174((uint64_t)v173, v160);
          }
        }

        goto LABEL_239;
    }
  }

uint64_t sub_10001ADEC(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 17) & 0x20) == 0) {
    return 0LL;
  }
  uint64_t v3 = sub_10003F4BC(0x1CuLL);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = v3[1];
    *(_BYTE *)uint64_t v5 = 0;
    *(_WORD *)(v5 + 2) = 7168;
    *(void *)(v5 + 4) = 0x100100101000000LL;
    *(_OWORD *)(v5 + 12) = *(_OWORD *)a1;
    uint64_t v6 = sub_10001AEAC(a1, (uint64_t)v3, 12, 0);
    sub_10003F5BC(v4);
    return v6;
  }

  else
  {
    if (dword_10008BA20)
    {
      int v7 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10005A664();
      }
    }

    return *__error();
  }

uint64_t sub_10001AEAC(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v8 = sub_100009738(16, 1);
  if (!v8)
  {
    if (dword_10008BA20)
    {
      uint64_t v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_10005A690();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_10003CA00(*(unsigned __int8 **)(a1 + 48));
  *(void *)(v9 + 8) = v10;
  if (!v10)
  {
    if (dword_10008BA20)
    {
      BOOL v20 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_10005A6BC();
      }
    }

    goto LABEL_43;
  }

  BOOL v11 = sub_10003CA00(*(unsigned __int8 **)(a1 + 56));
  *(void *)uint64_t v9 = v11;
  if (!v11)
  {
    if (dword_10008BA20)
    {
      unint64_t v21 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_10005A6E8();
      }
    }

    goto LABEL_43;
  }

  int v12 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 1LL);
  if (v12 != 2 && v12 != 30)
  {
    if (dword_10008BA20)
    {
      uint64_t v22 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_10005A714(a1 + 48, v22, v23);
      }
    }

LABEL_67:
  uint64_t v34 = 0xFFFFFFFFLL;
LABEL_68:
  sub_10004AAC4((void *)v9);
  if (v17) {
    sub_10003F5BC(v17);
  }
  return v34;
}

uint64_t sub_10001B34C(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 57) & 0x20) == 0) {
    return 0LL;
  }
  uint64_t v2 = sub_10004BAB4(*(void *)(a1 + 272));
  if (!v2)
  {
    uint64_t v2 = sub_100008980(*(void *)(a1 + 272), *(const sockaddr **)a1, *(const sockaddr **)(a1 + 8));
    if (!v2)
    {
      if (dword_10008BA20)
      {
        BOOL v11 = (os_log_s *)ne_log_obj(0LL);
        uint64_t v9 = 0LL;
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          return v9;
        }
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "No ph1 handler found, could not send DELETE_SA\n",  v13,  2u);
      }

      return 0LL;
    }
  }

  uint64_t v3 = *(void *)(*(void *)(a1 + 128) + 32LL);
  if (!v3) {
    return 0LL;
  }
  while (1)
  {
    signed int v4 = *(_DWORD *)(v3 + 8) + 12;
    uint64_t v5 = sub_10003F4BC(v4);
    if (!v5) {
      break;
    }
    uint64_t v6 = v5;
    uint64_t v7 = v5[1];
    *(_BYTE *)uint64_t v7 = 0;
    *(_WORD *)(v7 + 2) = bswap32(v4) >> 16;
    *(_DWORD *)(v7 + 4) = 0x1000000;
    *(_BYTE *)(v7 + 8) = *(_DWORD *)v3;
    size_t v8 = *(void *)(v3 + 8);
    *(_BYTE *)(v7 + 9) = v8;
    *(_WORD *)(v7 + 10) = 256;
    memcpy((void *)(v7 + 12), (const void *)(v3 - v8 + 28), v8);
    uint64_t v9 = sub_10001AEAC(v2, v6, 12LL, 0LL);
    sub_10003F5BC(v6);
    uint64_t v3 = *(void *)(v3 + 72);
    if (!v3) {
      return v9;
    }
  }

  if (dword_10008BA20)
  {
    uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10005A664();
    }
  }

  return *__error();
}

uint64_t sub_10001B4D4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10 = sub_10004AC7C((uint64_t)a3, (uint64_t)a2, 0, 0LL);
  BOOL v11 = sub_1000389B8((uint64_t)a2);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    uint64_t v13 = sub_100008DA0(16);
    if (v13)
    {
      uint64_t v14 = (uint64_t)v13;
      void *v13 = *(void *)a1;
      sub_100026984(v13 + 1, (uint64_t)a2, (uint64_t)a3);
      sub_100004344((int *)(v14 + 16), 63);
      *(void *)(v14 + 64) = v12;
      sub_100038F3C(v12);
      *(_DWORD *)(v14 + 20) = 0;
      *(_BYTE *)(v14 + 80) = *(_BYTE *)(a1 + 17);
      *(_BYTE *)(v14 + 82) = 0;
      *(_DWORD *)(v14 + 84) = 0;
      unint64_t v15 = sub_100044ACC();
      *(void *)(v14 + 408) = v15;
      if (!v15) {
        goto LABEL_27;
      }
      *(_DWORD *)(v14 + 100) = 0;
      *(void *)(v14 + 104) = 0LL;
      uint64_t v16 = sub_100022DEC(v14, v12, a2, a3);
      if ((v16 & 0x80000000) == 0)
      {
        if (a5) {
          signed int v17 = *(_DWORD *)a5 + 12;
        }
        else {
          signed int v17 = 12;
        }
        uint64_t v22 = sub_10003F4BC(v17);
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = v22[1];
          *(_BYTE *)uint64_t v24 = 0;
          *(_WORD *)(v24 + 2) = bswap32(v17) >> 16;
          *(_DWORD *)(v24 + 4) = 0x1000000;
          *(_WORD *)(v24 + 8) = 1;
          *(_WORD *)(v24 + 10) = bswap32(a4) >> 16;
          if (a5) {
            memcpy((void *)(v24 + 12), *(const void **)(a5 + 8), *(void *)a5);
          }
          sub_10001B744(v14, 0, a4, (unsigned __int16 *)a5);
          uint64_t v21 = sub_10001AEAC(v14, (uint64_t)v23, 11, 0);
          sub_10003F5BC(v23);
          goto LABEL_28;
        }

        if (dword_10008BA20)
        {
          uint64_t v25 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            sub_10005A784();
          }
        }

uint64_t sub_10001B744(uint64_t a1, int a2, int a3, unsigned __int16 *a4)
{
  uint64_t result = sub_10000B328(a1);
  int v9 = result;
  if (a2 == 1)
  {
    int v10 = sub_10002BD00(*(void *)(a1 + 280), 1);
    uint64_t v11 = sub_10002BD00(*(void *)(a1 + 280), 2);
    if (v10)
    {
      if (dword_10008BA20)
      {
        uint64_t v12 = (os_log_s *)ne_log_obj(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  ">>> Server reports client's certificate is pre-mature\n",  buf,  2u);
        }
      }

      LOWORD(a3) = -15532;
    }

    else if ((_DWORD)v11)
    {
      if (dword_10008BA20)
      {
        uint64_t v18 = (os_log_s *)ne_log_obj(v11);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v32 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  ">>> Server reports client's certificate is expired\n",  v32,  2u);
        }
      }

      LOWORD(a3) = -15531;
    }

    unsigned int v19 = (unsigned __int16)a3;
    unsigned int v20 = 1;
    int v21 = v9;
    unsigned int v22 = 0;
    uint64_t v23 = 0LL;
  }

  else
  {
    if (a3 > 30) {
      return result;
    }
    int v13 = sub_10002BD00(*(void *)(a1 + 288), 1);
    int v14 = sub_10002BD00(*(void *)(a1 + 288), 2);
    int v15 = sub_10002BD00(*(void *)(a1 + 288), 3);
    uint64_t v16 = sub_10002BD00(*(void *)(a1 + 288), 4);
    if (v13)
    {
      if (dword_10008BA20)
      {
        signed int v17 = (os_log_s *)ne_log_obj(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int v31 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  ">>> Server's certificate is pre-mature\n",  v31,  2u);
        }
      }

      LOWORD(a3) = -15530;
    }

    else if (v14)
    {
      if (dword_10008BA20)
      {
        uint64_t v24 = (os_log_s *)ne_log_obj(v16);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int v30 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  ">>> Server's certificate is expired\n",  v30,  2u);
        }
      }

      LOWORD(a3) = -15529;
    }

    else if (v15)
    {
      if (dword_10008BA20)
      {
        uint64_t v25 = (os_log_s *)ne_log_obj(v16);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)size_t v29 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  ">>> Server's certificate subject name not valid\n",  v29,  2u);
        }
      }

      LOWORD(a3) = -15528;
    }

    else if ((_DWORD)v16)
    {
      if (dword_10008BA20)
      {
        int v26 = (os_log_s *)ne_log_obj(v16);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v28 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  ">>> Server's certificate subject alternate name not valid\n",  v28,  2u);
        }
      }

      LOWORD(a3) = -15527;
    }

    if (a4)
    {
      unsigned __int16 v27 = *a4;
      uint64_t v23 = (const void *)*((void *)a4 + 1);
    }

    else
    {
      unsigned __int16 v27 = 0;
      uint64_t v23 = 0LL;
    }

    unsigned int v19 = (unsigned __int16)a3;
    unsigned int v22 = v27;
    unsigned int v20 = 0;
    int v21 = v9;
  }

  return sub_1000488E4(v19, v20, v21, v22, v23);
}

uint64_t sub_10001BA48(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 24578 || a2 == 40501) {
    uint64_t v7 = 16LL;
  }
  else {
    uint64_t v7 = 0LL;
  }
  signed int v8 = v7 | 0xC;
  if (a3) {
    v8 += *(_DWORD *)a3;
  }
  int v9 = sub_10003F4BC(v8);
  if (v9)
  {
    int v10 = v9;
    uint64_t v11 = v9[1];
    *(_BYTE *)uint64_t v11 = 0;
    *(_WORD *)(v11 + 2) = bswap32(v8) >> 16;
    *(_DWORD *)(v11 + 4) = bswap32(*(_DWORD *)(*(void *)(a1 + 64) + 24LL));
    *(_BYTE *)(v11 + 8) = 1;
    *(_BYTE *)(v11 + 9) = v7;
    *(_WORD *)(v11 + 10) = bswap32(a2) >> 16;
    if (a2 == 40501 || a2 == 24578) {
      *(_OWORD *)(v11 + 12) = *(_OWORD *)a1;
    }
    if (a3) {
      memcpy((void *)(v11 + v7 + 12), *(const void **)(a3 + 8), *(void *)a3);
    }
    sub_10001B744(a1, 0, a2, (unsigned __int16 *)a3);
    uint64_t v12 = sub_10001AEAC(a1, (uint64_t)v10, 11, *(_BYTE *)(a1 + 82));
    sub_10003F5BC(v10);
    return v12;
  }

  else
  {
    if (dword_10008BA20)
    {
      int v14 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_10005A784();
      }
    }

    return *__error();
  }

uint64_t sub_10001BB98(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 128);
  if (!v3) {
    return 22LL;
  }
  uint64_t v7 = *(_DWORD **)(v3 + 32);
  signed int v8 = v7[2] + 12;
  if (a3) {
    v8 += *(_DWORD *)a3;
  }
  uint64_t v9 = *(void *)(a1 + 256);
  int v10 = sub_10003F4BC(v8);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = v10[1];
    *(_BYTE *)uint64_t v12 = 0;
    *(_WORD *)(v12 + 2) = bswap32(v8) >> 16;
    *(_DWORD *)(v12 + 4) = 0x1000000;
    *(_BYTE *)(v12 + 8) = *v7;
    *(_BYTE *)(v12 + 9) = *((void *)v7 + 1);
    *(_WORD *)(v12 + 10) = bswap32(a2) >> 16;
    *(_DWORD *)(v12 + 12) = v7[6];
    uint64_t v13 = v12 + 12;
    if (a3) {
      memcpy((void *)(v13 + *((void *)v7 + 1)), *(const void **)(a3 + 8), *(void *)a3);
    }
    char v14 = *(_BYTE *)(a1 + 105) | 1;
    *(_BYTE *)(a1 + 105) = v14;
    uint64_t v15 = sub_10001AEAC(v9, (uint64_t)v11, 11, v14);
    sub_10003F5BC(v11);
    return v15;
  }

  else
  {
    if (dword_10008BA20)
    {
      signed int v17 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_10005A784();
      }
    }

    return *__error();
  }

void *sub_10001BCCC(void **a1, _BYTE **a2, unsigned int a3, _DWORD *a4, uint64_t a5)
{
  if (*a2) {
    **a2 = 11;
  }
  signed int v9 = a4[2] + 12;
  if (a5) {
    v9 += *(_DWORD *)a5;
  }
  if (a1)
  {
    int v10 = *a1;
    uint64_t v11 = sub_10003F51C(a1, (size_t)*a1 + v9);
    uint64_t v12 = v11;
    uint64_t v13 = (int)v10;
    if (v11)
    {
LABEL_7:
      uint64_t v14 = v12[1] + v13;
      *(_BYTE *)uint64_t v14 = 0;
      *(_WORD *)(v14 + 2) = bswap32(v9) >> 16;
      *(_DWORD *)(v14 + 4) = 0x1000000;
      *(_BYTE *)(v14 + 8) = *a4;
      *(_BYTE *)(v14 + 9) = *((void *)a4 + 1);
      *(_WORD *)(v14 + 10) = bswap32(a3) >> 16;
      *(_DWORD *)(v14 + 12) = a4[6];
      if (a5) {
        memcpy((void *)(v14 + 12 + *((void *)a4 + 1)), *(const void **)(a5 + 8), *(void *)a5);
      }
      *a2 = (_BYTE *)v14;
      return v12;
    }
  }

  else
  {
    uint64_t v11 = sub_10003F4BC(v9);
    uint64_t v12 = v11;
    uint64_t v13 = 0LL;
    if (v11) {
      goto LABEL_7;
    }
  }

  if (dword_10008BA20)
  {
    uint64_t v15 = (os_log_s *)ne_log_obj(v11);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_10005A860();
    }
  }

  return v12;
}

void sub_10001BDF8(unint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  int v41 = a2;
  unsigned int v11 = sub_10002F5C8(a2);
  uint64_t v12 = sub_10002F0B4(v11);
  if (v12)
  {
    uint64_t v38 = v12;
    if ((uint64_t)*v12 < 1)
    {
      unint64_t v42 = 0LL;
    }

    else
    {
      uint64_t v34 = a3;
      uint64_t v35 = a4;
      unint64_t v42 = 0LL;
      unint64_t v13 = (unint64_t)v12[1];
      uint64_t v14 = (char *)*v12 + v13;
      unint64_t v36 = a1;
      uint64_t v37 = a5;
      if (a5) {
        BOOL v15 = a6 == 0LL;
      }
      else {
        BOOL v15 = 1;
      }
      int v16 = !v15;
      int v39 = v16;
      int v40 = a6;
      do
      {
        unint64_t v17 = *(unsigned __int16 *)(v13 + 4);
        if (v17 < 2) {
          break;
        }
        if (*(_BYTE *)(v13 + 1) == 10)
        {
          uint64_t v18 = sub_100041F1C(v13, (uint64_t)v47);
          if ((_DWORD)v18 || (uint64_t v18 = sub_10004201C((uint64_t)v47), (_DWORD)v18))
          {
            if (dword_10008BA20)
            {
              unsigned int v19 = (os_log_s *)ne_log_obj(v18);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
                sub_10005A88C();
              }
            }
          }

          else
          {
            uint64_t v20 = v48;
            if (v48)
            {
              uint64_t v21 = v49;
              if (v49)
              {
                if (v50)
                {
                  if (*(unsigned __int8 *)(v48 + 9) - 1 <= 1)
                  {
                    unsigned int v22 = (unsigned __int8 *)(v50 + 8);
                    if (!sub_10003B83C(v36, v50 + 8))
                    {
                      if (v35)
                      {
                        uint64_t v23 = (unsigned __int8 *)(v21 + 8);
                        uint64_t v24 = v34;
                        uint64_t v25 = v35;
                        do
                        {
                          if (*v24 == *(_DWORD *)(v20 + 4))
                          {
                            if (v39)
                            {
                              if (v42 >= *a6) {
                                int v26 = 0LL;
                              }
                              else {
                                int v26 = (_DWORD *)(v37 + 4 * v42);
                              }
                            }

                            else
                            {
                              int v26 = 0LL;
                            }

                            unsigned __int16 v27 = sub_100009674((uint64_t)v23, (uint64_t)v22, v41, *v24, v26);
                            uint64_t v28 = sub_100040DD0( *(_DWORD *)(qword_10008B848 + 32),  *(_BYTE *)(v13 + 3),  0LL,  v23,  v22,  *(_DWORD *)(v20 + 4));
                            if (v27)
                            {
                              sub_100027414(v27);
                              uint64_t v28 = sub_10004AAC4(v27);
                              unint64_t v29 = v42;
                              if (v26) {
                                unint64_t v29 = v42 + 1;
                              }
                              unint64_t v42 = v29;
                            }

                            a6 = v40;
                            if (dword_10008BA20)
                            {
                              int v30 = (os_log_s *)ne_log_obj(v28);
                              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                              {
                                int v31 = sub_10003DFCC(v41);
                                unsigned int v32 = bswap32(*v24);
                                *(_DWORD *)buf = 136315394;
                                int v44 = v31;
                                __int16 v45 = 1024;
                                unsigned int v46 = v32;
                                _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Purged IPsec-SA proto_id=%s spi=%u.\n",  buf,  0x12u);
                              }
                            }
                          }

                          ++v24;
                          --v25;
                        }

                        while (v25);
                      }
                    }
                  }
                }
              }
            }
          }
        }

        v13 += 8 * v17;
      }

      while (v13 < (unint64_t)v14);
    }

    if (a6) {
      *a6 = v42;
    }
    sub_10003F5BC(v38);
  }

  else if (dword_10008BA20)
  {
    uint64_t v33 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "pfkey_dump_sadb returned nothing.\n",  v47,  2u);
    }
  }

void sub_10001C130(uint64_t a1)
{
  if (!dword_10008B858)
  {
    uint64_t v2 = sub_10002F0B4(0);
    if (v2)
    {
      uint64_t v3 = v2;
      if ((uint64_t)*v2 >= 1)
      {
        unint64_t v4 = (unint64_t)v2[1];
        uint64_t v5 = (char *)*v2 + v4;
        do
        {
          unint64_t v6 = *(unsigned __int16 *)(v4 + 4);
          if (v6 < 2) {
            break;
          }
          if (*(_BYTE *)(v4 + 1) == 10)
          {
            uint64_t v7 = sub_100041F1C(v4, (uint64_t)v26);
            if ((_DWORD)v7 || (uint64_t v7 = sub_10004201C((uint64_t)v26), (_DWORD)v7))
            {
              if (dword_10008BA20)
              {
                signed int v8 = (os_log_s *)ne_log_obj(v7);
                if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
                  sub_10005A88C();
                }
              }
            }

            else
            {
              uint64_t v9 = v27;
              if (v27 && v28 && v29 && *(unsigned __int8 *)(v27 + 9) - 1 <= 1)
              {
                int v10 = (unsigned __int8 *)(v28 + 8);
                uint64_t v23 = (unsigned __int8 *)(v29 + 8);
                unint64_t v11 = *(void *)(a1 + 56);
                unint64_t v12 = v28 + 8;
                if ((*(_BYTE *)(a1 + 96) & 6) != 0)
                {
                  if (!sub_10003B8F4(v11, v12))
                  {
                    uint64_t v13 = sub_10003B8F4(*(void *)(a1 + 48), (unint64_t)v23);
                    if (!(_DWORD)v13) {
                      goto LABEL_28;
                    }
                  }

                  if (!sub_10003B8F4(*(void *)(a1 + 48), (unint64_t)v10))
                  {
                    uint64_t v13 = sub_10003B8F4(*(void *)(a1 + 56), (unint64_t)v23);
                    if (!(_DWORD)v13) {
                      goto LABEL_28;
                    }
                  }
                }

                else if (!sub_10003B6D4(v11, v12) {
                       && (uint64_t v13 = sub_10003B6D4(*(void *)(a1 + 48), (unint64_t)v23), !(_DWORD)v13)
                }
                       || !sub_10003B6D4(*(void *)(a1 + 48), (unint64_t)v10)
                       && (uint64_t v13 = sub_10003B6D4(*(void *)(a1 + 56), (unint64_t)v23), !(_DWORD)v13))
                {
LABEL_28:
                  uint64_t v14 = 0LL;
                  BOOL v15 = byte_100085050;
                  while (1)
                  {
                    int v16 = *v15;
                    v15 += 16;
                    if (++v14 == 3) {
                      goto LABEL_12;
                    }
                  }

                  if ((_DWORD)v14 != 3)
                  {
                    if (dword_10008BA20)
                    {
                      log = (os_log_s *)ne_log_obj(v13);
                      if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                      {
                        unsigned int v17 = bswap32(*(_DWORD *)(v9 + 4));
                        *(_DWORD *)buf = 67109120;
                        unsigned int v25 = v17;
                        _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "purging spi=%u.\n",  buf,  8u);
                      }
                    }

                    sub_100040DD0( *(_DWORD *)(qword_10008B848 + 32),  *(_BYTE *)(v4 + 3),  0LL,  v10,  v23,  *(_DWORD *)(v9 + 4));
                    int v18 = sub_10002F638(*(unsigned __int8 *)(v4 + 3));
                    unsigned int v19 = sub_1000095D4((uint64_t)v10, (uint64_t)v23, v18, *(_DWORD *)(v9 + 4));
                    if (v19)
                    {
                      uint64_t v20 = v19;
                      sub_100027414(v19);
                      sub_10004AAC4(v20);
                    }
                  }
                }
              }
            }
          }

LABEL_12:
          v4 += 8 * v6;
        }

        while (v4 < (unint64_t)v5);
      }

      sub_10003F5BC(v3);
    }

    else if (dword_10008BA20)
    {
      uint64_t v21 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v26 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "pfkey_dump_sadb returned nothing.\n",  v26,  2u);
      }
    }
  }

  if (*(void *)(a1 + 448)) {
    int v10 = sub_10002355C;
  }
  else {
    int v10 = sub_100025304;
  }
  uint64_t result = sub_10003A890(1LL, (uint64_t)v10, a1);
  *(_DWORD *)(a1 + 112) = (_DWORD)result;
  return result;
}

    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = sub_10003E6BC(*(_DWORD *)(*(void *)v2 + 48LL));
        uint64_t v33 = 136315138;
        uint64_t v34 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "not supported authentication method %s\n",  (uint8_t *)&v33,  0xCu);
      }
    }

    return 0xFFFFFFFFLL;
  }

  if ((v3 - 64221) >= 2)
  {
    uint64_t v7 = 65002;
    goto LABEL_30;
  }

      unint64_t v12 = 0xFFFFFFFFLL;
      uint64_t v14 = (sockaddr *)v5;
LABEL_38:
      free(v14);
      return v12;
    }
  }

  else
  {
    int v10 = (unsigned __int8 *)sub_10003BAA0((const sockaddr *)v5);
    if (!v10)
    {
      if (dword_10008BA20)
      {
        int v26 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          sub_100066578();
        }
      }

      goto LABEL_12;
    }
  }

  int v16 = *(_DWORD *)(a1 + 20);
  BOOL v15 = (_OWORD *)(a1 + 20);
  if (v16)
  {
    *((_OWORD *)v5 + 7) = 0u;
    *(_OWORD *)(v5 + 25) = 0u;
    *(_OWORD *)(v5 + 21) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    *uint64_t v5 = 32775708;
    nw_nat64_synthesize_v6(v15, v6, v5 + 2);
  }

  unsigned int v17 = (sockaddr *)sub_10003CA00((unsigned __int8 *)v5);
  uint64_t v14 = v17;
  if (!v17)
  {
    if (dword_10008BA20)
    {
      unsigned int v25 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_1000665A4();
      }
    }

    goto LABEL_36;
  }

  int sa_family = v17->sa_family;
  if (sa_family != 30 && sa_family != 2)
  {
    if (dword_10008BA20)
    {
      uint64_t v27 = (os_log_s *)ne_log_obj(v17);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_1000665D0((uint64_t)&v14->sa_family, v27, v28, v29, v30, v31, v32, v33);
      }
    }

    goto LABEL_36;
  }

  *(_WORD *)v17->sa_data = *(_WORD *)(*(void *)v8 + 2LL);
  unsigned int v19 = sub_1000082AC((unint64_t)v10);
  uint64_t v20 = sub_10003D630((uint64_t)v10, __rev16(v19));
  if (!v20)
  {
LABEL_36:
    unint64_t v12 = 0xFFFFFFFFLL;
    goto LABEL_37;
  }

  if (dword_10008BA20)
  {
    uint64_t v21 = (os_log_s *)ne_log_obj(v20);
    unsigned int v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (v22)
    {
      uint64_t v35 = 136315138;
      unint64_t v36 = sub_10003CB98(v14);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "accept a request to establish IKE-SA: %s\n",  (uint8_t *)&v35,  0xCu);
    }

    if (dword_10008BA20)
    {
      uint64_t v23 = (os_log_s *)ne_log_obj(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = sub_10003CB98(v14);
        uint64_t v35 = 136315138;
        unint64_t v36 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "IPSec connecting to server %s\n",  (uint8_t *)&v35,  0xCu);
      }
    }
  }

  unint64_t v12 = ((int)sub_1000229F0(0LL, v8, &v14->sa_len, v10, a2, v15) >> 31);
LABEL_37:
  free(v5);
  free(v10);
  if (v14) {
    goto LABEL_38;
  }
  return v12;
}

      if (dword_10008BA20)
      {
        unint64_t v6 = (os_log_s *)ne_log_obj();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "vpn session is idle: drop ph1 rekey.\n",  (uint8_t *)v11,  2u);
        }
      }

      return 1LL;
    }
  }

  return 0LL;
}

void sub_10001C474(BOOL a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (dword_10008BA20)
  {
    unint64_t v4 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (a1)
    {
      LOWORD(v16) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Notify Message received\n",  (uint8_t *)&v16,  2u);
    }
  }

  unsigned int v6 = *(unsigned __int16 *)(v3 + 10);
  uint64_t v5 = (unsigned __int16 *)(v3 + 10);
  signed int v7 = bswap32(v6) >> 16;
  if (v7 <= 40499)
  {
    if ((v7 - 24576) >= 2 && v7 != 0x4000)
    {
      if (v7 == 24578)
      {
        if (dword_10008BA20)
        {
          signed int v8 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v16) = 0;
            uint64_t v9 = "Ignore INITIAL-CONTACT notification, because it is only accepted after Phase 1.\n";
LABEL_23:
            unint64_t v12 = v8;
            uint32_t v13 = 2;
            goto LABEL_24;
          }
        }

        return;
      }

void sub_10001C68C(BOOL a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (dword_10008BA20)
  {
    unint64_t v4 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (a1)
    {
      LOWORD(v24) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Phase 2 Notify Message received\n",  (uint8_t *)&v24,  2u);
    }
  }

  uint64_t v5 = (unsigned __int16 *)(v3 + 10);
  signed int v6 = bswap32(*(unsigned __int16 *)(v3 + 10)) >> 16;
  int v7 = 24577;
  if (v6 > 24577)
  {
    if (v6 > 40500)
    {
      if (v6 != 40501)
      {
        int v7 = 40503;
LABEL_16:
        if (v6 != v7)
        {
          uint64_t v16 = sub_10001BA48(*(void *)(a2 + 256), 1u, 0LL);
          if (dword_10008BA20)
          {
            unsigned int v17 = (os_log_s *)ne_log_obj(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
              sub_10005A8C8(v5);
            }
          }

          return;
        }

        goto LABEL_17;
      }

      if (!dword_10008BA20) {
        return;
      }
      BOOL v15 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(v24) = 0;
      unint64_t v12 = "Ignore LOAD-BALANCE notification, because it is only accepted after Phase 1.\n";
    }

    else
    {
      if (v6 != 24578)
      {
        int v7 = 40500;
        goto LABEL_16;
      }

      if (!dword_10008BA20) {
        return;
      }
      BOOL v15 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(v24) = 0;
      unint64_t v12 = "Ignore INITIAL-CONTACT notification, because it is only accepted after Phase 1.\n";
    }

    uint32_t v13 = v15;
    uint32_t v14 = 2;
    goto LABEL_27;
  }

  if (v6 != 0x4000)
  {
    if (v6 == 24576)
    {
      unint64_t v8 = *(unsigned __int8 *)(v3 + 9);
      if (v8 + 12 <= bswap32(*(unsigned __int16 *)(v3 + 2)) >> 16)
      {
        int v18 = sub_10003D680(v3 + 12, v8);
        unsigned int v19 = v18;
        if (dword_10008BA20)
        {
          uint64_t v20 = (os_log_s *)ne_log_obj(v18);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v21 = bswap32(*(_DWORD *)(v3 + 4));
            int v22 = *(unsigned __int8 *)(v3 + 8);
            int v23 = *(unsigned __int8 *)(v3 + 9);
            int v24 = 67109890;
            *(_DWORD *)unsigned int v25 = v21;
            *(_WORD *)&v25[4] = 1024;
            *(_DWORD *)&v25[6] = v22;
            __int16 v26 = 2080;
            uint64_t v27 = v19;
            __int16 v28 = 1024;
            int v29 = v23;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "notification message IPSEC-SA RESPONDER-LIFETIME, doi=%d proto_id=%d spi=%s(size=%d).\n",  (uint8_t *)&v24,  0x1Eu);
          }
        }

        free(v19);
      }

      else if (dword_10008BA20)
      {
        uint64_t v9 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_10005A934();
        }
      }

      return;
    }

    goto LABEL_16;
  }

void sub_10001C988(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 17) & 0x20) != 0)
  {
    if (*(_DWORD *)(*(void *)(a1 + 64) + 220LL) <= (int)*(unsigned __int8 *)(a1 + 386))
    {
      int v18 = sub_10000B328(a1);
      sub_1000488E4(0xC351u, 0, v18, 0, 0LL);
      sub_100026F6C(a1);
      if (dword_10008BA20)
      {
        uint64_t v20 = (os_log_s *)ne_log_obj(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v22) = 0;
          unint64_t v4 = "DPD: remote seems to be dead\n";
          uint64_t v16 = v20;
          uint32_t v17 = 2;
          goto LABEL_19;
        }
      }
    }

    else
    {
      uint64_t v5 = sub_10003F4BC(0x20uLL);
      if (v5)
      {
        signed int v6 = v5;
        uint64_t v7 = v5[1];
        *(_BYTE *)uint64_t v7 = 0;
        *(_WORD *)(v7 + 2) = 0x2000;
        *(void *)(v7 + 4) = 0x288D100101000000LL;
        *(void *)(v7 + 12) = *(void *)a1;
        *(void *)(v7 + 20) = *(void *)(a1 + 8);
        unsigned int v8 = *(unsigned __int16 *)(a1 + 384);
        if (!*(_WORD *)(a1 + 384))
        {
          unsigned int v9 = time(0LL);
          srand(v9);
          __int16 v10 = rand();
          unsigned int v8 = v10 & 0xFFF;
          *(_WORD *)(a1 + 384) = v10 & 0xFFF;
        }

        *(_DWORD *)(v7 + 28) = bswap32(v8);
        int v11 = sub_10001AEAC(a1, (uint64_t)v6, 11, 0);
        sub_10003F5BC(v6);
        if (dword_10008BA20)
        {
          uint32_t v13 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            int v22 = 67109120;
            int v23 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "DPD R-U-There sent (%d)\n",  (uint8_t *)&v22,  8u);
          }
        }

        ++*(_BYTE *)(a1 + 386);
        uint64_t v14 = sub_10001CC3C(a1, 1LL);
        if (dword_10008BA20)
        {
          uint64_t v2 = (os_log_s *)ne_log_obj(v14);
          if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          {
            int v15 = *(_DWORD *)(*(void *)(a1 + 64) + 212LL);
            int v22 = 67109120;
            int v23 = v15;
            unint64_t v4 = "rescheduling send_r_u (%d).\n";
            goto LABEL_15;
          }
        }
      }

      else if (dword_10008BA20)
      {
        unsigned int v21 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_10005A664();
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(_DWORD *)(a1 + 16);
      int v22 = 67109120;
      int v23 = v3;
      unint64_t v4 = "DPD r-u send aborted, invalid Phase 1 status %d....\n";
LABEL_15:
      uint64_t v16 = v2;
      uint32_t v17 = 8;
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&v22, v17);
    }
  }

uint64_t sub_10001CC3C(uint64_t a1, int a2)
{
  if (!a1) {
    return 1LL;
  }
  int v3 = *(int **)(a1 + 64);
  if (!v3) {
    return 1LL;
  }
  if (!*(_DWORD *)(a1 + 368)) {
    return 0LL;
  }
  uint64_t result = v3[54];
  if (!(_DWORD)result) {
    return result;
  }
  if (a2)
  {
    uint64_t result = v3[53];
LABEL_12:
    uint64_t v5 = sub_10001C988;
    goto LABEL_13;
  }

  uint64_t v5 = sub_10001CCD0;
LABEL_13:
  unsigned int v6 = sub_10003A890(result, (uint64_t)v5, a1);
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 388) = v6;
  return result;
}

void sub_10001CCD0(uint64_t a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    return;
  }
  int v3 = *(_DWORD *)(v2 + 224);
  if (v3 != 2)
  {
    if (v3 != 1)
    {
      if (dword_10008BA20)
      {
        unint64_t v4 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(_DWORD *)(*(void *)(a1 + 64) + 224LL);
          int v20 = 67109120;
          int v21 = v8;
          unsigned int v6 = "DPD monitoring aborted, invalid algorithm %d....\n";
          goto LABEL_16;
        }
      }

      return;
    }

    if ((*(_BYTE *)(a1 + 17) & 0x20) == 0)
    {
      if (dword_10008BA20)
      {
        unint64_t v4 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          int v5 = *(_DWORD *)(a1 + 16);
          int v20 = 67109120;
          int v21 = v5;
          unsigned int v6 = "DPD monitoring (for ALGORITHM_INBOUND_DETECT) aborted, invalid Phase 1 status %d....\n";
LABEL_16:
          unsigned int v9 = v4;
          uint32_t v10 = 8;
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v20, v10);
          return;
        }
      }

      return;
    }

    if (dword_10008BA20)
    {
      int v11 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v20) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "DPD monitoring (for ALGORITHM_INBOUND_DETECT) ....\n",  (uint8_t *)&v20,  2u);
      }
    }

    if (*(_BYTE *)(a1 + 387))
    {
      *(_BYTE *)(a1 + 387) = 0;
      uint64_t v12 = sub_10001CC3C(a1, 0LL);
      if (dword_10008BA20)
      {
        uint32_t v13 = (os_log_s *)ne_log_obj(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          unsigned int v6 = "ike packets received from peer... reschedule monitor.\n";
          unsigned int v9 = v13;
          uint32_t v10 = 2;
          goto LABEL_17;
        }
      }

      return;
    }

    if ((*(_WORD *)(*(void *)(a1 + 440) + 264LL) & 0x40) != 0)
    {
      uint64_t v18 = sub_10001CC3C(a1, 0LL);
      if (dword_10008BA20)
      {
        uint64_t v19 = (os_log_s *)ne_log_obj(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "rescheduling DPD monitoring (for ALGORITHM_INBOUND_DETECT).\n",  (uint8_t *)&v20,  2u);
        }
      }
    }

    else
    {
      sub_10001C988(a1);
    }

void sub_10001D05C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if ((*(_BYTE *)(a1 + 17) & 0x20) != 0)
    {
      if (*(_DWORD *)(a1 + 368))
      {
        uint64_t v3 = *(void *)(a1 + 64);
        if (*(_DWORD *)(v3 + 216))
        {
          if (*(_DWORD *)(v3 + 224))
          {
            if (!*(_BYTE *)(a1 + 387))
            {
              uint64_t v5 = *(unsigned int *)(a1 + 388);
              if ((_DWORD)v5)
              {
                sub_10003AA44(v5);
                *(_DWORD *)(a1 + 388) = 0;
              }

              uint64_t v6 = sub_10001CC3C(a1, 0);
              if (dword_10008BA20)
              {
                int v7 = (os_log_s *)ne_log_obj(v6);
                if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
                {
                  int v8 = 136315138;
                  uint64_t v9 = a2;
                  _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s... rescheduling send_r_u.\n",  (uint8_t *)&v8,  0xCu);
                }
              }
            }

            ++*(_BYTE *)(a1 + 387);
          }
        }
      }
    }
  }

char *sub_10001D16C(uint64_t a1, int a2)
{
  return sub_10003DDFC(a2);
}

char *sub_10001D180(unsigned __int16 *a1)
{
  return sub_10003DDFC(bswap32(*a1) >> 16);
}

uint64_t sub_10001D194(uint64_t result, float a2)
{
  *uint64_t v3 = a2;
  *uint64_t v2 = result;
  return result;
}

const char *sub_10001D1A0()
{
  return ipsec_strerror();
}

uint64_t sub_10001D1B0(uint64_t a1)
{
  int v1 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) != 6336)
  {
    if (dword_10008BA20)
    {
      uint64_t v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v3 = sub_100026CD4(*(void *)(a1 + 256));
  *(_DWORD *)(a1 + 108) = v3;
  unint64_t v4 = *(void **)(a1 + 240);
  if (v4)
  {
    sub_10002E08C(v4);
    int v3 = *(_DWORD *)(a1 + 108);
  }

  uint64_t result = (uint64_t)sub_10002E0FC(*(void *)(a1 + 256), v3);
  *(void *)(a1 + 240) = result;
  if (result)
  {
    sub_100004344(v1, 6384);
    if (dword_10008B858) {
      return 0LL;
    }
    uint64_t v7 = sub_10002FDD0(a1);
    if ((v7 & 0x80000000) == 0)
    {
      if (dword_10008BA20)
      {
        int v8 = (os_log_s *)ne_log_obj(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
          sub_10005A98C();
        }
      }

      unsigned int v9 = sub_10003A890(*(int *)(qword_10008B848 + 284), (uint64_t)sub_10002FC90, a1);
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 64) = v9;
      return result;
    }

    if (dword_10008BA20)
    {
      uint32_t v10 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10005A960();
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t sub_10001D2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = 0LL;
  uint64_t v50 = 0LL;
  if (a2)
  {
    if (dword_10008BA20)
    {
      uint64_t v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_10005AAC0();
      }
    }

LABEL_86:
    uint64_t v40 = 0xFFFFFFFFLL;
    goto LABEL_87;
  }

  sub_100004344(v4, 6369);
  uint64_t v40 = 0LL;
LABEL_87:
  sub_10003F5BC(v29);
  sub_10003F5BC(v37);
LABEL_74:
  if (v50) {
    sub_10003F5BC(v50);
  }
  if (v49) {
    sub_10003F5BC(v49);
  }
  return v40;
}

void *sub_10001D864(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10003F4BC(*(_DWORD *)a3 + *(_DWORD *)a2 + 32);
  if (!v6)
  {
    if (dword_10008BA20)
    {
      uint64_t v12 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10005A784();
      }
    }

    return 0LL;
  }

  uint64_t v7 = v6;
  *(_BYTE *)(a1 + 105) |= 1u;
  uint64_t v8 = sub_100026D70((uint64_t)v6, a1, 8);
  if (!v8)
  {
    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_10005AAEC();
      }
    }

    goto LABEL_14;
  }

  uint64_t v9 = sub_100026D88(v8, a3, 1);
  memcpy(v9, *(const void **)(a2 + 8), *(void *)a2);
  uint64_t v10 = sub_10002EA40( *(void *)(a1 + 256),  (uint64_t)v7,  *(void *)(*(void *)(a1 + 240) + 8LL),  **(void **)(a1 + 240));
  if (!v10)
  {
    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_10005A7B0();
      }
    }

uint64_t sub_10001D9A8(uint64_t a1, void *a2)
{
  int v3 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) != 6369)
  {
    if (dword_10008BA20)
    {
      uint64_t v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_9;
  }

  uint64_t v4 = a2[1];
  if ((*(_BYTE *)(v4 + 19) & 1) == 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10005AB18();
      }
    }

LABEL_115:
    int v31 = 0LL;
    int v30 = 0LL;
    uint64_t v7 = 0xFFFFFFFFLL;
    goto LABEL_116;
  }

  unsigned int v92 = (size_t **)(a1 + 208);
  uint64_t v93 = v19;
  v94 = (void **)v27;
  uint64_t v28 = *(void *)(v27 + 8);
  *(void *)(a1 + 232) = 0LL;
  v97 = (size_t **)(a1 + 232);
  if (!*v17)
  {
    int v31 = 0LL;
    int v30 = 0LL;
    int v29 = 0;
LABEL_123:
    if (v93 && *v97 && *(void *)(a1 + 216))
    {
      int v67 = v30;
      uint64_t v68 = memcpy(v94[1], (const void *)(*v92)[1], **v92);
      if (dword_10008BA20)
      {
        uint64_t v69 = (os_log_s *)ne_log_obj(v68);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
        {
          v86 = *v94;
          size_t v87 = **v92 + v29;
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v86;
          *(_WORD *)&buf[12] = 2048;
          size_t v102 = v87;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEBUG,  "HASH allocated:hbuf->l=%zu actual:tlen=%zu\n",  buf,  0x16u);
        }
      }

      os_log_s *v94 = (void *)(**(void **)(a1 + 208) + v29);
      uint64_t v70 = sub_10002AA48(*(void *)(a1 + 256), *(_DWORD *)(a1 + 108), (uint64_t)v94);
      if (v70)
      {
        uint64_t v71 = (void *)v70;
        int v72 = timingsafe_bcmp(*(const void **)(v70 + 8), (const void *)(v93 + 4), *(void *)v70);
        sub_10003F5BC(v71);
        if (v72)
        {
          if (dword_10008BA20)
          {
            char v74 = (os_log_s *)ne_log_obj(v73);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG)) {
              sub_10005AC2C();
            }
          }

          uint64_t v7 = 23LL;
        }

        else
        {
          uint64_t v80 = sub_10000DA44(a1);
          int v30 = v67;
          if ((v80 & 0x80000000) == 0)
          {
            sub_100004344(v3, 6338);
            uint64_t v7 = 0LL;
            goto LABEL_164;
          }

          if (!dword_10008BA20)
          {
            uint64_t v7 = 14LL;
            goto LABEL_164;
          }

          v84 = (os_log_s *)ne_log_obj(v80);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
            sub_10005AC00();
          }
          uint64_t v7 = 14LL;
        }
      }

      else
      {
        if (dword_10008BA20)
        {
          v77 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
            sub_10005AA10();
          }
        }

        uint64_t v7 = 0xFFFFFFFFLL;
      }

      int v30 = v67;
      goto LABEL_164;
    }

    if (!dword_10008BA20) {
      goto LABEL_163;
    }
    v75 = v30;
    uint64_t v76 = (os_log_s *)ne_log_obj(v27);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
      sub_100058F90();
    }
LABEL_138:
    uint64_t v7 = 0xFFFFFFFFLL;
    goto LABEL_139;
  }

  int v98 = 0;
  int v29 = 0;
  int v30 = 0LL;
  int v31 = 0LL;
  int v32 = (char *)(v28 + **(void **)(a1 + 208));
  v91 = &v104;
  while (1)
  {
    uint64_t v27 = (uint64_t)memcpy(v32, *((const void **)v17 + 1), *((int *)v17 + 1));
    unsigned int v33 = *v17;
    if (v33 <= 0xF) {
      break;
    }
    BOOL v36 = v33 == 16 || v33 == 21;
    if (!v36 && v33 != 131)
    {
LABEL_153:
      if (dword_10008BA20)
      {
        v75 = v30;
        __int16 v81 = (os_log_s *)ne_log_obj(v27);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)) {
          sub_100059D00();
        }
        goto LABEL_138;
      }

LABEL_163:
      uint64_t v7 = 0xFFFFFFFFLL;
      goto LABEL_164;
    }

    *(void *)buf = 0LL;
    sub_100026BA4((size_t **)buf, *((void *)v17 + 1));
    uint64_t v27 = *(void *)buf;
    if (!*(void *)buf) {
      goto LABEL_82;
    }
    uint64_t v37 = sub_10003FCF4(*(uint64_t *)buf);
    if (!v37) {
      goto LABEL_46;
    }
    uint64_t v34 = (const sockaddr *)v37;
    if (v30)
    {
      if (v31)
      {
        free(v37);
LABEL_46:
        uint64_t v34 = v30;
        goto LABEL_47;
      }

      if (!dword_10008BA20)
      {
        int v31 = (sockaddr *)v37;
        goto LABEL_46;
      }

      int v53 = (os_log_s *)ne_log_obj(v37);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG)) {
        sub_10005ADDC((uint64_t)v103, v34);
      }
      int v31 = (sockaddr *)v34;
      uint64_t v34 = v30;
    }

    else if (dword_10008BA20)
    {
      uint64_t v50 = (os_log_s *)ne_log_obj(v37);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
        sub_10005ADA0((uint64_t)v105, v34);
      }
    }

LABEL_184:
                uint64_t v7 = 0xFFFFFFFFLL;
                int v30 = v96;
                goto LABEL_164;
              }

              if (dword_10008BA20)
              {
                v89 = (os_log_s *)ne_log_obj(0LL);
                if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
                  sub_10005AD1C();
                }
              }
            }

            uint64_t v7 = 0xFFFFFFFFLL;
            int v31 = v95;
            int v30 = v96;
            goto LABEL_164;
          }
        }

uint64_t sub_10001E580(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) == 6338)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        sub_10005AFDC();
      }
    }

    uint64_t v6 = sub_10003F4BC(**(void **)(a1 + 216) + **(void **)(a1 + 208));
    if (v6)
    {
      uint64_t v7 = v6;
      memcpy((void *)v6[1], *(const void **)(*(void *)(a1 + 208) + 8LL), **(void **)(a1 + 208));
      memcpy( (void *)(v7[1] + **(void **)(a1 + 208)),  *(const void **)(*(void *)(a1 + 216) + 8LL),  **(void **)(a1 + 216));
      uint64_t v8 = (uint64_t *)sub_10002A968(*(void *)(a1 + 256), *(_DWORD *)(a1 + 108), (uint64_t)v7);
      sub_10003F5BC(v7);
      if (v8)
      {
        uint64_t v10 = sub_10003F4BC(*(_DWORD *)v8 + 32);
        if (!v10)
        {
          if (dword_10008BA20)
          {
            int v23 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
              sub_10005A784();
            }
          }

          uint64_t v21 = 0xFFFFFFFFLL;
          goto LABEL_74;
        }

        uint64_t v11 = v10;
        uint64_t v12 = sub_100026D70((uint64_t)v10, a1, 8);
        if (!v12)
        {
          if (dword_10008BA20)
          {
            unsigned int v24 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              sub_10005AE7C();
            }
          }

          goto LABEL_72;
        }

        sub_100026D88(v12, v8, 0);
        uint64_t v13 = sub_10002EA40( *(void *)(a1 + 256),  (uint64_t)v11,  *(void *)(*(void *)(a1 + 240) + 8LL),  **(void **)(a1 + 240));
        *(void *)(a1 + 80) = v13;
        if (!v13)
        {
          if (dword_10008BA20)
          {
            unsigned int v25 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              sub_10005A7B0();
            }
          }

          goto LABEL_72;
        }

        uint64_t v14 = v13;
        uint64_t v15 = *(void *)(a1 + 256);
        if ((*(_BYTE *)(a1 + 105) & 2) != 0)
        {
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)(v15 + 64) + 200LL);
          uint64_t v26 = sub_1000250E4(a1);
          if ((_DWORD)v26 == -1)
          {
            if (dword_10008BA20)
            {
              int v41 = (os_log_s *)ne_log_obj(v26);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
                sub_10005AFB0();
              }
            }

            goto LABEL_72;
          }
        }

        else
        {
          uint64_t v16 = sub_100024890(v15, v14);
          if ((v16 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              uint64_t v17 = (os_log_s *)ne_log_obj(v16);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
                sub_100058CE4();
              }
            }

LABEL_72:
            uint64_t v21 = 0xFFFFFFFFLL;
            goto LABEL_73;
          }
        }

        unint64_t v27 = *(void *)(a1 + 256);
        uint64_t v28 = *(unsigned __int8 **)(v27 + 48);
        int v29 = *(unsigned __int8 **)(v27 + 56);
        int v30 = *(void **)(a1 + 80);
        if (*(_DWORD *)(v27 + 100) && *v30 >= 0x501uLL)
        {
          uint64_t v31 = 0LL;
          LODWORD(v27) = *(_DWORD *)(v27 + 96);
        }

        else
        {
          unint64_t v27 = *(unsigned int *)(v27 + 96);
          uint64_t v31 = (v27 >> 3) & 4;
        }

        uint64_t v32 = sub_10000A4F4(v28, v29, (uint64_t)v30, a2, v31, (v27 >> 5) & 1);
        if ((_DWORD)v32 == -1)
        {
          if (dword_10008BA20)
          {
            uint64_t v40 = (os_log_s *)ne_log_obj(v32);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
              sub_10005960C();
            }
          }

          goto LABEL_72;
        }

        uint64_t v33 = sub_10002A3E0(a1, 0);
        if ((v33 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            unint64_t v42 = (os_log_s *)ne_log_obj(v33);
            if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
              sub_10005AEA8();
            }
          }

          goto LABEL_72;
        }

        if ((*(_BYTE *)(a1 + 105) & 2) != 0)
        {
          sub_100004344(v2, 6371);
        }

        else
        {
          sub_100004344(v2, 6344);
          if (dword_10008BA20)
          {
            uint64_t v35 = (os_log_s *)ne_log_obj(v34);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
              sub_10005AF84();
            }
          }

          uint64_t v36 = sub_1000301FC(a1);
          if ((v36 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              int v43 = (os_log_s *)ne_log_obj(v36);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
                sub_10005AED4();
              }
            }

            goto LABEL_72;
          }

          if (dword_10008BA20)
          {
            uint64_t v37 = (os_log_s *)ne_log_obj(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
              sub_10005AF58();
            }
          }

          uint64_t v38 = sub_1000305C8(a1);
          if ((v38 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              int v44 = (os_log_s *)ne_log_obj(v38);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                sub_10005AF00();
              }
            }

            goto LABEL_72;
          }

          if (dword_10008BA20)
          {
            uint64_t v39 = (os_log_s *)ne_log_obj(v38);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
              sub_10005AF2C();
            }
          }
        }

        uint64_t v21 = 0LL;
LABEL_73:
        sub_10003F5BC(v11);
LABEL_74:
        sub_10003F5BC(v8);
        return v21;
      }

      if (dword_10008BA20)
      {
        BOOL v20 = (os_log_s *)ne_log_obj(v9);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_10005AA10();
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_10005ABD4();
      }
    }
  }

  else if (dword_10008BA20)
  {
    int v18 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_100058E74();
    }
  }

  return 0xFFFFFFFFLL;
}

        a1[17] = 0LL;
        return;
      }
    }

    if (dword_10008BA20)
    {
      uint64_t v16 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Get a source address of SP index from Phase 1 address due to no ID payloads found OR because ID type is not address.\n",  v31,  2u);
      }
    }

    uint64_t v14 = __memcpy_chk(&buf[8], a1[1], *(unsigned __int8 *)a1[1], 264LL);
    if (buf[9] == 30)
    {
      uint64_t v17 = 0x80;
    }

    else
    {
      if (buf[9] != 2)
      {
        buf[264] = 0;
        goto LABEL_47;
      }

      uint64_t v17 = 32;
    }

    buf[264] = v17;
LABEL_47:
    if (dword_10008BA20)
    {
      int v18 = (os_log_s *)ne_log_obj(v14);
      uint64_t v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if (v19)
      {
        *(_DWORD *)uint64_t v31 = 67109376;
        *(_DWORD *)&v31[4] = buf[264];
        *(_WORD *)&v31[8] = 1024;
        *(_DWORD *)&v31[10] = *(unsigned __int16 *)&buf[266];
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "get src/dst address from ID payload prefixlen=%u ul_proto=%u\n",  v31,  0xEu);
      }

      if (dword_10008BA20)
      {
        BOOL v20 = (os_log_s *)ne_log_obj(v19);
        uint64_t v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
        if (v21) {
          sub_10005D66C();
        }
        if (dword_10008BA20)
        {
          int v22 = (os_log_s *)ne_log_obj(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
            sub_10005D5F0();
          }
        }
      }
    }

    if (!*(_WORD *)&buf[266]) {
      *(_WORD *)&buf[266] = 255;
    }
    int v23 = sub_100030E48((uint64_t)a1);
    if ((v23 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        unsigned int v25 = (os_log_s *)ne_log_obj(v23);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          sub_10005D5C4();
        }
      }
    }

    else if (dword_10008BA20)
    {
      unsigned int v24 = (os_log_s *)ne_log_obj(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "pfkey spddelete(inbound) sent.\n", v31, 2u);
      }
    }

    *a1 = v2;
    a1[1] = (uint64_t)v3;
    buf[0] = 2;
    uint64_t v35 = *(_OWORD *)&buf[72];
    uint64_t v36 = *(_OWORD *)&buf[88];
    uint64_t v37 = *(_OWORD *)&buf[104];
    uint64_t v38 = *(_OWORD *)&buf[120];
    *(_OWORD *)uint64_t v31 = *(_OWORD *)&buf[8];
    uint64_t v32 = *(_OWORD *)&buf[24];
    uint64_t v33 = *(_OWORD *)&buf[40];
    uint64_t v34 = *(_OWORD *)&buf[56];
    *(_OWORD *)&buf[56] = *(_OWORD *)&buf[184];
    *(_OWORD *)&buf[40] = *(_OWORD *)&buf[168];
    *(_OWORD *)&_BYTE buf[24] = *(_OWORD *)&buf[152];
    *(_OWORD *)&buf[120] = *(_OWORD *)&buf[248];
    *(_OWORD *)&buf[104] = *(_OWORD *)&buf[232];
    *(_OWORD *)&buf[88] = *(_OWORD *)&buf[216];
    *(_OWORD *)&buf[72] = *(_OWORD *)&buf[200];
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)&buf[136];
    *(_OWORD *)&buf[184] = v34;
    *(_OWORD *)&buf[168] = v33;
    *(_OWORD *)&buf[152] = v32;
    *(_OWORD *)&buf[136] = *(_OWORD *)v31;
    *(_OWORD *)&buf[248] = v38;
    *(_OWORD *)&buf[232] = v37;
    *(_OWORD *)&buf[216] = v36;
    *(_OWORD *)&buf[200] = v35;
    uint64_t v26 = buf[264];
    buf[264] = buf[265];
    buf[265] = v26;
    unint64_t v27 = sub_100030E48((uint64_t)a1);
    if ((v27 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        int v29 = (os_log_s *)ne_log_obj(v27);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
          sub_10005D598();
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v28 = (os_log_s *)ne_log_obj(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v30 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "pfkey spddelete(outbound) sent.\n",  v30,  2u);
      }
    }

    goto LABEL_72;
  }

uint64_t sub_10001E9F0(uint64_t a1, void *a2)
{
  uint64_t v2 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) != 6371)
  {
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if ((*(_BYTE *)(a2[1] + 19LL) & 1) == 0)
  {
    if (dword_10008BA20)
    {
      int v3 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_10005AB18();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v8 = sub_10002E664(*(void *)(a1 + 256), a2, **(void **)(a1 + 240), *(void *)(*(void *)(a1 + 240) + 8LL));
  if (!v8)
  {
    if (dword_10008BA20)
    {
      uint64_t v17 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_10005B008();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v9 = v8;
  uint64_t v10 = sub_100023ABC((uint64_t)v8);
  if (!v10)
  {
    if (dword_10008BA20)
    {
      unsigned int v24 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_10005B034();
      }
    }

    sub_10003F5BC(v9);
    return 0xFFFFFFFFLL;
  }

  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v37 = v10;
  for (uint64_t i = (unsigned __int8 *)*((void *)v10 + 1); ; i += 16)
  {
    int v14 = *i;
    if (v14 == 8)
    {
      uint64_t v12 = *((void *)i + 1);
      continue;
    }

    if (v14 != 11) {
      break;
    }
    if (v11)
    {
      if (dword_10008BA20)
      {
        uint64_t v15 = (os_log_s *)ne_log_obj(v10);
        uint64_t v10 = (void *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v10)
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Ignoring multiple notifications\n",  buf,  2u);
        }
      }
    }

    else
    {
      sub_10001C68C(*((void *)i + 1), a1);
      uint64_t v16 = sub_10003F4BC(*((int *)i + 1));
      if (!v16)
      {
        if (dword_10008BA20)
        {
          unint64_t v27 = (os_log_s *)ne_log_obj(0LL);
          int v23 = v37;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
            sub_10005B0B8();
          }
          uint64_t v11 = 0LL;
LABEL_52:
          uint64_t v5 = 0xFFFFFFFFLL;
          goto LABEL_58;
        }

        uint64_t v11 = 0LL;
LABEL_56:
        uint64_t v5 = 0xFFFFFFFFLL;
LABEL_57:
        int v23 = v37;
        goto LABEL_58;
      }

      uint64_t v11 = v16;
      uint64_t v10 = memcpy((void *)v16[1], *((const void **)i + 1), *v16);
    }
  }

  if (*i)
  {
    if (dword_10008BA20)
    {
      unsigned int v25 = (os_log_s *)ne_log_obj(v10);
      int v23 = v37;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_100059D00();
      }
      goto LABEL_52;
    }

    goto LABEL_56;
  }

  if (!v12)
  {
    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(v10);
      int v23 = v37;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_100058F90();
      }
      goto LABEL_52;
    }

    goto LABEL_56;
  }

  uint64_t v18 = sub_10002AA48(*(void *)(a1 + 256), *(_DWORD *)(a1 + 108), (uint64_t)v11);
  sub_10003F5BC(0LL);
  if (!v18)
  {
    if (dword_10008BA20)
    {
      uint64_t v28 = (os_log_s *)ne_log_obj(v19);
      int v23 = v37;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_10005B060();
      }
      goto LABEL_52;
    }

    goto LABEL_56;
  }

  int v20 = timingsafe_bcmp(*(const void **)(v18 + 8), (const void *)(v12 + 4), *(void *)v18);
  sub_10003F5BC((void *)v18);
  if (v20)
  {
    if (!dword_10008BA20)
    {
      uint64_t v5 = 23LL;
      goto LABEL_57;
    }

    int v22 = (os_log_s *)ne_log_obj(v21);
    int v23 = v37;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      sub_10005B08C();
    }
    uint64_t v5 = 23LL;
  }

  else
  {
    sub_100004344(v2, 6344);
    *(_BYTE *)(a1 + 105) ^= 2u;
    if (dword_10008B858)
    {
      uint64_t v5 = 0LL;
      goto LABEL_57;
    }

    if (dword_10008BA20)
    {
      int v30 = (os_log_s *)ne_log_obj(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
        sub_10005AF84();
      }
    }

    uint64_t v31 = sub_1000301FC(a1);
    if ((v31 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v35 = (os_log_s *)ne_log_obj(v31);
        int v23 = v37;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          sub_10005AED4();
        }
        goto LABEL_52;
      }

      goto LABEL_56;
    }

    if (dword_10008BA20)
    {
      uint64_t v32 = (os_log_s *)ne_log_obj(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        sub_10005AF58();
      }
    }

    uint64_t v33 = sub_1000305C8(a1);
    if ((v33 & 0x80000000) != 0)
    {
      int v23 = v37;
      if (dword_10008BA20)
      {
        uint64_t v36 = (os_log_s *)ne_log_obj(v33);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
          sub_10005AF00();
        }
      }

      goto LABEL_52;
    }

    int v23 = v37;
    if (dword_10008BA20)
    {
      uint64_t v34 = (os_log_s *)ne_log_obj(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
        sub_10005AF2C();
      }
    }

    uint64_t v5 = 0LL;
  }

uint64_t sub_10001EE94(uint64_t a1, void *a2)
{
  int v3 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) != 6592)
  {
    if (dword_10008BA20)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_9;
  }

  uint64_t v5 = a2[1];
  if ((*(_BYTE *)(v5 + 19) & 1) == 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v6 = (os_log_s *)ne_log_obj(a1);
      uint64_t v7 = 16LL;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10005AB18();
      }
    }

    else
    {
      uint64_t v7 = 16LL;
    }

    goto LABEL_10;
  }

  uint64_t v15 = sub_10002E664(*(void *)(a1 + 256), a2, **(void **)(a1 + 240), *(void *)(*(void *)(a1 + 240) + 8LL));
  if (!v15)
  {
    if (dword_10008BA20)
    {
      int v23 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_10005B008();
      }
    }

    goto LABEL_9;
  }

  uint64_t v16 = v15;
  uint64_t v17 = sub_100023ABC((uint64_t)v15);
  if (!v17)
  {
    if (dword_10008BA20)
    {
      unsigned int v24 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_10005B034();
      }
    }

    sub_10003F5BC(v16);
LABEL_9:
    uint64_t v7 = 0xFFFFFFFFLL;
LABEL_10:
    uint64_t v9 = *(void **)(a1 + 224);
    if (v9)
    {
      sub_10003F5BC(v9);
      *(void *)(a1 + 224) = 0LL;
    }

    uint64_t v10 = *(void **)(a1 + 216);
    if (v10)
    {
      sub_10003F5BC(v10);
      *(void *)(a1 + 216) = 0LL;
    }

    uint64_t v11 = *(void **)(a1 + 176);
    if (v11)
    {
      sub_10003F5BC(v11);
      *(void *)(a1 + 176) = 0LL;
    }

    uint64_t v12 = *(void **)(a1 + 192);
    if (v12)
    {
      sub_10003F5BC(v12);
      *(void *)(a1 + 192) = 0LL;
    }

    uint64_t v13 = *(void **)(a1 + 200);
    if (v13)
    {
      sub_10003F5BC(v13);
      *(void *)(a1 + 200) = 0LL;
    }

    return v7;
  }

  uint64_t v18 = v17;
  uint64_t v19 = (_BYTE *)v17[1];
  if (*v19 != 8)
  {
    if (dword_10008BA20)
    {
      unsigned int v25 = (os_log_s *)ne_log_obj(v17);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_10005AE18();
      }
    }

    uint64_t v26 = 0LL;
    unint64_t v27 = 0LL;
    uint64_t v7 = 15LL;
    goto LABEL_160;
  }

  int v21 = v19[16];
  int v20 = v19 + 16;
  uint64_t v22 = *((void *)v20 - 1);
  if (v21 == 1)
  {
    uint64_t v7 = 0xFFFFFFFFLL;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v28 = (os_log_s *)ne_log_obj(v17);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = *v20;
        *(_DWORD *)buf = 67109376;
        int v98 = v29;
        __int16 v99 = 1024;
        int v100 = 1;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "received invalid next payload type %d, expecting %d.\n",  buf,  0xEu);
      }
    }

    uint64_t v7 = 15LL;
  }

  unsigned int v30 = bswap32(*(_DWORD *)(v5 + 24));
  size_t v31 = v30 - 28;
  if ((int)(v30 - 28) < 0)
  {
    if (dword_10008BA20)
    {
      int v53 = (os_log_s *)ne_log_obj(v31);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
        sub_10005B0E4();
      }
    }

    goto LABEL_96;
  }

  uint64_t v32 = (uint64_t)sub_10003F4BC(v31);
  if (!v32)
  {
    if (dword_10008BA20)
    {
      unint64_t v54 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
        sub_10005ABD4();
      }
    }

LABEL_96:
    uint64_t v26 = 0LL;
    unint64_t v27 = 0LL;
    goto LABEL_160;
  }

  uint64_t v83 = v22;
  v84 = v18;
  uint64_t v37 = *(char **)(v32 + 8);
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  size_t v87 = (size_t **)(a1 + 216);
  uint32_t v88 = (size_t **)(a1 + 224);
  *(void *)(a1 + 176) = 0LL;
  int v85 = (void *)v32;
  *(void *)(a1 + 200) = 0LL;
  v86 = (unint64_t **)(a1 + 200);
  *(void *)(a1 + 192) = 0LL;
  v89 = (unint64_t **)(a1 + 192);
  unsigned int v92 = v16;
  if (!*v20)
  {
    v90 = 0LL;
    uint64_t v26 = 0LL;
    int v38 = 0;
LABEL_98:
    uint64_t v18 = v84;
    if (!v83 || !*v88 || !*v87)
    {
      if (dword_10008BA20)
      {
        uint64_t v61 = (os_log_s *)ne_log_obj(v32);
        uint64_t v7 = 16LL;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
          sub_10005B148();
        }
      }

      else
      {
        uint64_t v7 = 16LL;
      }

      goto LABEL_158;
    }

    unsigned int v55 = dword_1000882C8;
    if (*v86 && dword_1000882C8 >= 7)
    {
      sub_100033CEC(7, (*v86)[1], **v86, "received IDci2:", v33, v34, v35, v36, v81);
      unsigned int v55 = dword_1000882C8;
    }

    if (*v89 && v55 >= 7) {
      sub_100033CEC(7, (*v89)[1], **v89, "received IDcr2:", v33, v34, v35, v36, v81);
    }
    *int v85 = v38;
    uint64_t v56 = sub_10002AA48(*(void *)(a1 + 256), *(_DWORD *)(a1 + 108), (uint64_t)v85);
    if (!v56)
    {
      if (dword_10008BA20)
      {
        uint64_t v62 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
          sub_10005B060();
        }
      }

      goto LABEL_158;
    }

    __int16 v57 = (void *)v56;
    int v58 = timingsafe_bcmp(*(const void **)(v56 + 8), (const void *)(v83 + 4), *(void *)v56);
    sub_10003F5BC(v57);
    if (v58)
    {
      if (dword_10008BA20)
      {
        uint64_t v60 = (os_log_s *)ne_log_obj(v59);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
          sub_10005B27C();
        }
      }

      uint64_t v7 = 23LL;
      goto LABEL_158;
    }

    uint64_t v67 = sub_10001F9A4((uint64_t *)a1);
    if ((_DWORD)v67)
    {
      if (dword_10008BA20)
      {
        uint64_t v68 = (os_log_s *)ne_log_obj(v67);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
          sub_10005B250();
        }
      }

      uint64_t v7 = 0xFFFFFFFFLL;
      goto LABEL_158;
    }

    uint64_t v72 = sub_10001FDA8(a1);
    if ((_DWORD)v72)
    {
      uint64_t v7 = v72;
      if ((_DWORD)v72 != -2)
      {
        if (!dword_10008BA20) {
          goto LABEL_158;
        }
        uint64_t v78 = (os_log_s *)ne_log_obj(v72);
        if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
          sub_10005B174();
        }
        goto LABEL_185;
      }

      uint64_t v73 = sub_100037EBC(a1);
      if ((_DWORD)v73)
      {
        if (dword_10008BA20)
        {
          char v74 = (os_log_s *)ne_log_obj(v73);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
            sub_10005B224();
          }
        }

        uint64_t v7 = 0xFFFFFFFFLL;
        goto LABEL_185;
      }
    }

    uint64_t v75 = sub_10000D45C(a1);
    if ((v75 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v79 = (os_log_s *)ne_log_obj(v75);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
          sub_10005B1A0();
        }
      }

      goto LABEL_183;
    }

    int v76 = *(_DWORD *)(*(void *)(a1 + 128) + 20LL);
    if (*(void *)(a1 + 176))
    {
      if (!v76)
      {
        if (dword_10008BA20)
        {
          v77 = (os_log_s *)ne_log_obj(v75);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
            sub_10005B1F8();
          }
        }

LABEL_183:
        uint64_t v7 = 14LL;
        goto LABEL_185;
      }
    }

    else if (v76)
    {
      if (dword_10008BA20)
      {
        uint64_t v80 = (os_log_s *)ne_log_obj(v75);
        if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR)) {
          sub_10005B1CC();
        }
      }

      goto LABEL_183;
    }

    sub_10004B2A8(a1);
    *(void *)(a1 + 88) = sub_10003F5F0((uint64_t)a2);
    sub_100004344(v3, 6593);
    uint64_t v7 = 0LL;
    goto LABEL_185;
  }

  int v38 = 0;
  int v39 = 0;
  uint64_t v26 = 0LL;
  v90 = 0LL;
  while (1)
  {
    uint64_t v40 = memcpy(v37, *((const void **)v20 + 1), *((int *)v20 + 1));
    int v45 = *v20;
    if (v45 != 5) {
      int v39 = 0;
    }
    if (*v20 <= 0xFu) {
      break;
    }
    BOOL v46 = v45 == 16 || v45 == 21;
    if (!v46 && v45 != 131)
    {
LABEL_137:
      if (!dword_10008BA20)
      {
        uint64_t v7 = 16LL;
        goto LABEL_157;
      }

      uint64_t v69 = (os_log_s *)ne_log_obj(v40);
      uint64_t v7 = 16LL;
      uint64_t v18 = v84;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
        sub_10005B2A8();
      }
      goto LABEL_158;
    }

    uint64_t v93 = 0LL;
    sub_100026BA4((size_t **)&v93, *((void *)v20 + 1));
    uint64_t v32 = (uint64_t)v93;
    if (v93)
    {
      uint64_t v47 = v26;
      uint64_t v48 = sub_10003FCF4((uint64_t)v93);
      if (!v48) {
        goto LABEL_85;
      }
      uint64_t v26 = (sockaddr *)v48;
      if (v47)
      {
        if (v90)
        {
          free(v48);
        }

        else
        {
          if (dword_10008BA20)
          {
            v91 = (os_log_s *)ne_log_obj(v48);
            if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG)) {
              sub_10005B480((uint64_t)v96, v26);
            }
          }

          v90 = v26;
        }

LABEL_85:
        uint64_t v26 = v47;
LABEL_86:
        uint64_t v16 = v92;
      }

      else
      {
        if (!dword_10008BA20) {
          goto LABEL_86;
        }
        v82 = (os_log_s *)ne_log_obj(v48);
        uint64_t v16 = v92;
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG)) {
          sub_10005B444((uint64_t)buf, v26);
        }
      }

      sub_10003F5BC(v93);
    }

                sub_10003F5BC(v13);
                goto LABEL_86;
              }
            }
          }
        }
      }
    }
  }

  if (v13) {
    sub_10003F5BC(v13);
  }
  uint64_t v15 = 0xFFFFFFFFLL;
  if (v18) {
    goto LABEL_53;
  }
  return v15;
}

LABEL_88:
    int v51 = v20[16];
    v20 += 16;
    uint64_t v52 = *((int *)v20 - 3);
    v37 += v52;
    v38 += v52;
    if (!v51) {
      goto LABEL_98;
    }
  }

  switch(*v20)
  {
    case 1u:
      if (*v88)
      {
        if (dword_10008BA20)
        {
          __int16 v63 = (os_log_s *)ne_log_obj(v88);
          uint64_t v18 = v84;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
            sub_10005B334();
          }
          goto LABEL_158;
        }

LABEL_157:
        uint64_t v18 = v84;
        goto LABEL_158;
      }

      uint64_t v32 = sub_100026BA4(v88, *((void *)v20 + 1));
      if ((v32 & 0x80000000) != 0)
      {
        if (dword_10008BA20)
        {
          __int16 v66 = (os_log_s *)ne_log_obj(v32);
          uint64_t v18 = v84;
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
            sub_10005B308();
          }
          goto LABEL_158;
        }

        goto LABEL_157;
      }

      goto LABEL_88;
    case 4u:
      uint64_t v32 = sub_100026BA4((size_t **)(a1 + 176), *((void *)v20 + 1));
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_88;
      }
      if (!dword_10008BA20) {
        goto LABEL_157;
      }
      int v64 = (os_log_s *)ne_log_obj(v32);
      uint64_t v18 = v84;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
        sub_10005B38C();
      }
      goto LABEL_158;
    case 5u:
      if (!*v86)
      {
        uint64_t v32 = sub_100026BA4(v86, *((void *)v20 + 1));
        if ((v32 & 0x80000000) == 0)
        {
          ++v39;
          goto LABEL_88;
        }

        if (!dword_10008BA20) {
          goto LABEL_157;
        }
        uint64_t v71 = (os_log_s *)ne_log_obj(v32);
        uint64_t v18 = v84;
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
          sub_10005B3B8();
        }
LABEL_158:
        unint64_t v27 = v90;
        goto LABEL_159;
      }

      if (*v89)
      {
        uint64_t v7 = 18LL;
        goto LABEL_157;
      }

      uint64_t v49 = v26;
      if (!v39)
      {
        if (dword_10008BA20)
        {
          uint64_t v50 = (os_log_s *)ne_log_obj(v86);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
            sub_10005B410(&v94, v95, v50);
          }
        }
      }

      uint64_t v32 = sub_100026BA4(v89, *((void *)v20 + 1));
      if ((v32 & 0x80000000) == 0)
      {
        uint64_t v26 = v49;
        uint64_t v16 = v92;
        goto LABEL_88;
      }

      uint64_t v26 = v49;
      if (dword_10008BA20)
      {
        uint64_t v70 = (os_log_s *)ne_log_obj(v32);
        uint64_t v18 = v84;
        uint64_t v16 = v92;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
          sub_10005B3E4();
        }
        goto LABEL_158;
      }

      uint64_t v18 = v84;
LABEL_185:
      unint64_t v27 = v90;
      uint64_t v16 = v92;
LABEL_159:
      sub_10003F5BC(v85);
LABEL_160:
      sub_10003F5BC(v16);
      sub_10003F5BC(v18);
      if (v26) {
        free(v26);
      }
      if (v27) {
        free(v27);
      }
      if ((_DWORD)v7) {
        goto LABEL_10;
      }
      return v7;
    case 0xAu:
      uint64_t v32 = sub_100026BA4(v87, *((void *)v20 + 1));
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_88;
      }
      if (!dword_10008BA20) {
        goto LABEL_157;
      }
      int v65 = (os_log_s *)ne_log_obj(v32);
      uint64_t v18 = v84;
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
        sub_10005B360();
      }
      goto LABEL_158;
    case 0xBu:
      sub_10001C68C(*((void *)v20 + 1), a1);
      goto LABEL_88;
    default:
      goto LABEL_137;
  }

uint64_t sub_10001F9A4(uint64_t *a1)
{
  uint64_t v2 = a1[24];
  if (v2)
  {
    int v3 = sub_10003F5F0(v2);
  }

  else
  {
    uint64_t v4 = *a1;
    int v5 = *(unsigned __int8 *)(*a1 + 1);
    if (v5 == 2)
    {
      unsigned int v6 = 32;
    }

    else
    {
      if (v5 != 30)
      {
        if (dword_10008BA20)
        {
          int v14 = (os_log_s *)ne_log_obj(v4);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            sub_100057F10();
          }
        }

        return 0xFFFFFFFFLL;
      }

      unsigned int v6 = 128;
    }

    int v3 = sub_1000113C0(v4, v6, 255);
  }

  uint64_t v7 = v3;
  if (!v3)
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10005B4BC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v8 = a1[25];
  if (v8)
  {
    uint64_t v9 = sub_10003F5F0(v8);
LABEL_22:
    uint64_t v15 = v9;
    if (v9)
    {
      uint64_t v16 = (void *)sub_10003A03C((uint64_t)v7, (uint64_t)v9, *(void *)(a1[32] + 320), 0);
      uint64_t v17 = v16;
      a1[14] = (uint64_t)v16;
      uint64_t v18 = a1 + 14;
      if (v16)
      {
        if (*v16) {
          goto LABEL_65;
        }
        uint64_t v19 = a1[34];
        if (!v19 || (*(_WORD *)(v19 + 264) & 0x400) == 0) {
          goto LABEL_65;
        }
      }

      uint64_t v20 = a1[32];
      if ((*(_BYTE *)(v20 + 96) & 2) != 0 && *(void *)(qword_10008B848 + 296))
      {
        uint64_t v16 = (void *)sub_10003A03C((uint64_t)v7, (uint64_t)v15, *(void *)(v20 + 320), 1);
        *uint64_t v18 = (uint64_t)v16;
      }

      if (v16 && dword_10008BA20)
      {
        int v21 = (os_log_s *)ne_log_obj(v16);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
          sub_10005B634();
        }
        uint64_t v16 = (void *)*v18;
      }

      if (v16)
      {
        if (*v16) {
          goto LABEL_65;
        }
        uint64_t v22 = a1[34];
        if (!v22 || (*(_WORD *)(v22 + 264) & 0x400) == 0) {
          goto LABEL_65;
        }
      }

      uint64_t v23 = sub_10004E14C((uint64_t)a1);
      unsigned int v30 = (void *)a1[14];
      if (v30 && dword_10008BA20)
      {
        size_t v31 = (os_log_s *)ne_log_obj(v23);
        uint64_t v23 = os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v23) {
          sub_10005B608();
        }
        unsigned int v30 = (void *)*v18;
      }

      if (v30 && *v30) {
        goto LABEL_65;
      }
      if (a1[25])
      {
        if (dword_10008BA20)
        {
          uint64_t v32 = (os_log_s *)ne_log_obj(v23);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
            sub_10005B5DC();
          }
        }

        uint64_t v23 = sub_10003A21C(a1[25], *(void *)(a1[32] + 320), v24, v25, v26, v27, v28, v29);
        a1[14] = v23;
        if (v23)
        {
          if (dword_10008BA20)
          {
            uint64_t v33 = (os_log_s *)ne_log_obj(v23);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
              sub_10005B5B0();
            }
          }

          goto LABEL_65;
        }
      }

      else if (v30)
      {
        goto LABEL_65;
      }

      if (!v17)
      {
        if (dword_10008BA20)
        {
          uint64_t v42 = (os_log_s *)ne_log_obj(v23);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
            sub_10005B250();
          }
        }

        goto LABEL_70;
      }

      *uint64_t v18 = (uint64_t)v17;
LABEL_65:
      uint64_t v37 = sub_10003A63C(*v18);
      uint64_t v38 = *(void *)(*v18 + 16);
      if (!v38 || (uint64_t v37 = sub_100046298(a1[32], (char **)(v38 + 8), 1), !(_DWORD)v37))
      {
        if (dword_10008BA20)
        {
          uint64_t v40 = (os_log_s *)ne_log_obj(v37);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
            sub_10005B514((uint64_t **)v18);
          }
        }

        uint64_t v36 = 0LL;
        goto LABEL_75;
      }

      if (dword_10008BA20)
      {
        int v39 = (os_log_s *)ne_log_obj(v37);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
          sub_10005B584();
        }
      }

uint64_t sub_10001FDA8(uint64_t a1)
{
  uint64_t result = sub_100021154((unsigned __int8 *)a1, 0);
  if ((_DWORD)result == -2 || !(_DWORD)result) {
    return result;
  }
  if ((*(_BYTE *)(*(void *)(a1 + 256) + 96LL) & 2) == 0 || !*(void *)(qword_10008B848 + 296))
  {
    uint64_t v3 = *(void *)(a1 + 272);
    if (!v3 || (*(_WORD *)(v3 + 264) & 0x400) == 0) {
      return result;
    }
    goto LABEL_10;
  }

  uint64_t v3 = *(void *)(a1 + 272);
  if (v3)
  {
LABEL_10:
    if ((*(_WORD *)(v3 + 264) & 0x400) != 0) {
      uint64_t result = sub_10004E39C(a1);
    }
  }

  if ((_DWORD)result != -2)
  {
    if ((_DWORD)result) {
      return sub_100021154((unsigned __int8 *)a1, 1);
    }
  }

  return result;
}

uint64_t sub_10001FE44(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56) != 6593)
  {
    if (dword_10008BA20)
    {
      unsigned int v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    return 0xFFFFFFFFLL;
  }

  sub_100004344((int *)(a1 + 56), 6640);
  uint64_t v2 = sub_10002FDD0(a1);
  if ((v2 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v7 = (os_log_s *)ne_log_obj(v2);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10005B660();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_10005A98C();
    }
  }

  unsigned int v4 = sub_10003A890(*(int *)(qword_10008B848 + 284), (uint64_t)sub_10002FC90, a1);
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 64) = v4;
  return result;
}

uint64_t sub_10001FF48(uint64_t a1, uint64_t a2)
{
  v77 = 0LL;
  uint64_t v78 = 0LL;
  int v76 = 0LL;
  if (a2)
  {
    if (dword_10008BA20)
    {
      uint64_t v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_10005B818();
      }
    }

    goto LABEL_107;
  }

  unsigned int v4 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) != 6608)
  {
    if (dword_10008BA20)
    {
      uint64_t v16 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    goto LABEL_107;
  }

  uint64_t v5 = sub_10000E14C(a1);
  if ((v5 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v17 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_10005B68C();
      }
    }

    goto LABEL_107;
  }

  unsigned int v6 = sub_1000076AC(*(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 140LL));
  *(void *)(a1 + 208) = v6;
  if (!v6)
  {
    if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100058CB8();
      }
    }

    goto LABEL_107;
  }

  int v7 = *(_DWORD *)(*(void *)(a1 + 128) + 20LL);
  uint64_t v8 = *(void *)(a1 + 176);
  if (v8 && v7)
  {
    uint64_t v9 = sub_10002A198(*(unsigned int *)(*(void *)(a1 + 128) + 20LL), a1 + 152);
    if ((v9 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v59 = (os_log_s *)ne_log_obj(v9);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
          sub_10005B6B8();
        }
      }

      goto LABEL_107;
    }

    uint64_t v10 = sub_100029E9C(*(void *)(a1 + 152), (size_t **)(a1 + 168), (void *)(a1 + 144));
    if ((v10 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v60 = (os_log_s *)ne_log_obj(v10);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
          sub_10005B6E4();
        }
      }

      goto LABEL_107;
    }

    unsigned int v6 = *(void **)(a1 + 208);
    uint64_t v8 = *(void *)(a1 + 176);
  }

  uint64_t v11 = **(void **)(a1 + 232) + *v6 + 8LL;
  if (v8 && v7) {
    uint64_t v11 = **(void **)(a1 + 168) + (int)v11 + 4LL;
  }
  int v12 = *(_DWORD **)(a1 + 200);
  if (v12) {
    LODWORD(v11) = *v12 + **(_DWORD **)(a1 + 192) + v11 + 8;
  }
  uint64_t v13 = sub_10000FEB8(*(void *)(a1 + 128));
  if ((_DWORD)v13 && (*(_BYTE *)(*(void *)(a1 + 256) + 96LL) & 6) != 0)
  {
    uint64_t v13 = sub_10003FAA8(a1, &v78, &v77);
    int v14 = v13;
    if ((_DWORD)v13)
    {
      if ((_DWORD)v13 == -1)
      {
        if (dword_10008BA20)
        {
          uint64_t v15 = (os_log_s *)ne_log_obj(v13);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            sub_10005B7EC();
          }
        }

        goto LABEL_107;
      }

      LODWORD(v11) = v11 + *(_DWORD *)v78 + *(_DWORD *)v77 + 8;
    }
  }

  else
  {
    int v14 = 0;
  }

  if (dword_10008BA20)
  {
    uint64_t v19 = (os_log_s *)ne_log_obj(v13);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      sub_10005B7C0();
    }
  }

  sub_1000370F4(7LL, *(void *)(a1 + 128));
  uint64_t v20 = sub_10003F4BC((int)v11);
  if (!v20)
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_10005A784();
      }
    }

    goto LABEL_107;
  }

  uint64_t v21 = (uint64_t)v20;
  uint64_t v22 = sub_100026D88(v20[1], *(uint64_t **)(a1 + 232), 10);
  int v76 = v22;
  if (*(void *)(a1 + 176) && v7)
  {
    int v23 = 4;
  }

  else if (*(void *)(a1 + 200))
  {
    int v23 = 5;
  }

  else
  {
    int v23 = v14;
  }

  uint64_t v25 = sub_100026D88((uint64_t)v22, *(uint64_t **)(a1 + 208), v23);
  uint64_t v26 = v25;
  if (*(void *)(a1 + 176) && v7)
  {
    int v76 = v25;
    if (*(void *)(a1 + 200)) {
      int v27 = 5;
    }
    else {
      int v27 = v14;
    }
    uint64_t v26 = sub_100026D88((uint64_t)v25, *(uint64_t **)(a1 + 168), v27);
  }

  uint64_t v28 = *(uint64_t **)(a1 + 200);
  if (v28)
  {
    uint64_t v33 = sub_100026D88((uint64_t)v26, v28, 5);
    if (dword_1000882C8 >= 7) {
      sub_100033CEC( 7,  *(void *)(*(void *)(a1 + 200) + 8LL),  **(void **)(a1 + 200),  "sending IDci2:",  v29,  v30,  v31,  v32,  v74);
    }
    int v76 = v33;
    uint64_t v26 = sub_100026D88((uint64_t)v33, *(uint64_t **)(a1 + 192), v14);
    if (dword_1000882C8 >= 7) {
      sub_100033CEC( 7,  *(void *)(*(void *)(a1 + 192) + 8LL),  **(void **)(a1 + 192),  "sending IDcr2:",  v34,  v35,  v36,  v37,  v74);
    }
  }

  uint64_t v38 = *(void *)(a1 + 128);
  int v39 = *(_DWORD *)(v38 + 24);
  if ((v39 & 1) == 0)
  {
    if ((v39 & 2) == 0) {
      goto LABEL_72;
    }
    uint64_t v40 = 0LL;
    goto LABEL_65;
  }

  unsigned int v75 = bswap32(*(_DWORD *)(v38 + 8));
  uint64_t v41 = (void **)sub_1000268CC(0LL, 1, 1u);
  if (!v41)
  {
    if (dword_10008BA20)
    {
      uint64_t v61 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
        sub_10005B73C();
      }
    }

    goto LABEL_106;
  }

  uint64_t v42 = (void **)sub_1000267F8(v41, 2u, &v75, 4);
  if (!v42)
  {
    if (!dword_10008BA20) {
      goto LABEL_106;
    }
    int v64 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
      goto LABEL_106;
    }
    goto LABEL_105;
  }

  uint64_t v40 = v42;
  if ((*(_BYTE *)(v38 + 24) & 2) != 0)
  {
LABEL_65:
    unsigned int v75 = bswap32(*(_DWORD *)(v38 + 16));
    uint64_t v43 = (void **)sub_1000268CC(v40, 1, 2u);
    if (!v43)
    {
      if (dword_10008BA20)
      {
        __int16 v63 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
          sub_10005B73C();
        }
      }

      goto LABEL_106;
    }

    uint64_t v44 = (void **)sub_1000267F8(v43, 2u, &v75, 4);
    if (v44)
    {
      uint64_t v40 = v44;
      goto LABEL_68;
    }

    if (!dword_10008BA20 || (__int16 v66 = (os_log_s *)ne_log_obj(0LL), !os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)))
    {
LABEL_106:
      sub_10003F5BC((void *)v21);
LABEL_107:
      uint64_t v67 = 0xFFFFFFFFLL;
      goto LABEL_108;
    }

LABEL_68:
  uint64_t v45 = *(void *)(v38 + 32);
  if (v45)
  {
    while (1)
    {
      BOOL v46 = sub_10001BCCC((void **)v21, &v76, 0x6000u, (_DWORD *)v45, (uint64_t)v40);
      if (!v46) {
        break;
      }
      uint64_t v21 = (uint64_t)v46;
      uint64_t v45 = *(void *)(v45 + 72);
      if (!v45) {
        goto LABEL_71;
      }
    }

    if (dword_10008BA20)
    {
      uint64_t v69 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
        sub_10005B794();
      }
    }

    uint64_t v67 = 0xFFFFFFFFLL;
    goto LABEL_111;
  }

LABEL_71:
  sub_10003F5BC(v40);
LABEL_72:
  if (v14)
  {
    uint64_t v47 = sub_100026D88((uint64_t)v26, (uint64_t *)v78, v14);
    sub_100026D88((uint64_t)v47, (uint64_t *)v77, 0);
  }

  uint64_t v48 = sub_10003F4BC(*(void *)v21 + **(void **)(a1 + 216));
  if (!v48)
  {
    if (dword_10008BA20)
    {
      uint64_t v62 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
        sub_10005ABD4();
      }
    }

    goto LABEL_106;
  }

  uint64_t v49 = v48;
  memcpy((void *)v48[1], *(const void **)(*(void *)(a1 + 216) + 8LL), **(void **)(a1 + 216));
  memcpy((void *)(v49[1] + **(void **)(a1 + 216)), *(const void **)(v21 + 8), *(void *)v21);
  uint64_t v50 = (uint64_t *)sub_10002AA48(*(void *)(a1 + 256), *(_DWORD *)(a1 + 108), (uint64_t)v49);
  sub_10003F5BC(v49);
  if (!v50)
  {
    if (dword_10008BA20)
    {
      int v65 = (os_log_s *)ne_log_obj(v51);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
        sub_10005AA10();
      }
    }

    goto LABEL_106;
  }

  uint64_t v52 = sub_10001D864(a1, v21, v50);
  *(void *)(a1 + 80) = v52;
  if (!v52)
  {
    if (dword_10008BA20)
    {
      uint64_t v70 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
        sub_10005B710();
      }
    }

    goto LABEL_129;
  }

  *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 200LL);
  uint64_t v53 = sub_1000250E4(a1);
  if ((_DWORD)v53 == -1)
  {
    if (dword_10008BA20)
    {
      uint64_t v72 = (os_log_s *)ne_log_obj(v53);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
        sub_100058CE4();
      }
    }

    goto LABEL_129;
  }

  unint64_t v54 = *(void *)(a1 + 256);
  unsigned int v55 = *(unsigned __int8 **)(v54 + 48);
  uint64_t v56 = *(unsigned __int8 **)(v54 + 56);
  __int16 v57 = *(void **)(a1 + 80);
  if (*(_DWORD *)(v54 + 100) && *v57 >= 0x501uLL)
  {
    uint64_t v58 = 0LL;
    LODWORD(v54) = *(_DWORD *)(v54 + 96);
  }

  else
  {
    unint64_t v54 = *(unsigned int *)(v54 + 96);
    uint64_t v58 = (v54 >> 3) & 4;
  }

  uint64_t v71 = sub_10000A4F4(v55, v56, (uint64_t)v57, *(void *)(a1 + 88), v58, (v54 >> 5) & 1);
  if ((_DWORD)v71 == -1)
  {
    if (dword_10008BA20)
    {
      uint64_t v73 = (os_log_s *)ne_log_obj(v71);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
        sub_10005960C();
      }
    }

LABEL_129:
    uint64_t v67 = 0xFFFFFFFFLL;
    goto LABEL_130;
  }

  sub_100004344(v4, 6626);
  uint64_t v67 = 0LL;
LABEL_130:
  sub_10003F5BC((void *)v21);
  sub_10003F5BC(v50);
LABEL_108:
  if (v78) {
    sub_10003F5BC(v78);
  }
  uint64_t v40 = (void **)v77;
  if (v77) {
LABEL_111:
  }
    sub_10003F5BC(v40);
  return v67;
}

uint64_t sub_100020728(uint64_t a1, void *a2)
{
  uint64_t v2 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) != 6626)
  {
    if (dword_10008BA20)
    {
      unsigned int v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if ((*(_BYTE *)(a2[1] + 19LL) & 1) == 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v3 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_10005AB18();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v8 = sub_10002E664(*(void *)(a1 + 256), a2, **(void **)(a1 + 240), *(void *)(*(void *)(a1 + 240) + 8LL));
  if (!v8)
  {
    if (dword_10008BA20)
    {
      uint64_t v22 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_10005B008();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v9 = v8;
  uint64_t v10 = sub_100023ABC((uint64_t)v8);
  if (!v10)
  {
    if (dword_10008BA20)
    {
      int v23 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_10005B034();
      }
    }

    uint64_t v5 = 0xFFFFFFFFLL;
    goto LABEL_49;
  }

  uint64_t v11 = v10;
  uint64_t v12 = 0LL;
  for (uint64_t i = (unsigned __int8 *)v10[1]; ; i += 16)
  {
    int v14 = *i;
    if (v14 != 8) {
      break;
    }
    uint64_t v12 = *((void *)i + 1);
LABEL_18:
    ;
  }

  if (v14 == 11)
  {
    sub_10001C68C(*((void *)i + 1), a1);
    goto LABEL_18;
  }

  if (*i)
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(v10);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100059D00();
      }
    }

    goto LABEL_47;
  }

  if (!v12)
  {
    if (dword_10008BA20)
    {
      uint64_t v25 = (os_log_s *)ne_log_obj(v10);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_100058F90();
      }
    }

    goto LABEL_47;
  }

  uint64_t v15 = sub_10003F4BC(**(void **)(a1 + 208) + **(void **)(a1 + 216));
  if (!v15)
  {
    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_10005ABD4();
      }
    }

    goto LABEL_47;
  }

  uint64_t v16 = v15;
  memcpy((void *)v15[1], *(const void **)(*(void *)(a1 + 216) + 8LL), **(void **)(a1 + 216));
  memcpy( (void *)(v16[1] + **(void **)(a1 + 216)),  *(const void **)(*(void *)(a1 + 208) + 8LL),  **(void **)(a1 + 208));
  uint64_t v17 = sub_10002A968(*(void *)(a1 + 256), *(_DWORD *)(a1 + 108), (uint64_t)v16);
  sub_10003F5BC(v16);
  if (!v17)
  {
    if (dword_10008BA20)
    {
      int v27 = (os_log_s *)ne_log_obj(v18);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_10005B060();
      }
    }

uint64_t sub_100020A70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) == 6595)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        sub_10005B89C();
      }
    }

    signed int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 128) + 32LL) + 8LL) + 12;
    int v7 = sub_10003F4BC(v6);
    if (v7)
    {
      uint64_t v8 = (uint64_t)v7;
      uint64_t v9 = v7[1];
      *(_BYTE *)uint64_t v9 = 0;
      *(_WORD *)(v9 + 2) = bswap32(v6) >> 16;
      *(_DWORD *)(v9 + 4) = 0x1000000;
      uint64_t v10 = *(void *)(*(void *)(a1 + 128) + 32LL);
      *(_BYTE *)(v9 + 8) = *(_DWORD *)v10;
      *(_BYTE *)(v9 + 9) = 8;
      *(_WORD *)(v9 + 10) = 64;
      memcpy((void *)(v9 + 12), (const void *)(v10 + 24), *(void *)(v10 + 8));
      uint64_t v11 = (uint64_t *)sub_10002AA48(*(void *)(a1 + 256), *(_DWORD *)(a1 + 108), v8);
      if (!v11)
      {
        if (dword_10008BA20)
        {
          int v27 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
            sub_10005AA10();
          }
        }

        uint64_t v26 = 0xFFFFFFFFLL;
        goto LABEL_47;
      }

      uint64_t v12 = v11;
      uint64_t v13 = sub_10003F4BC(*(_DWORD *)v11 + *(_DWORD *)v8 + 32);
      if (!v13)
      {
        if (dword_10008BA20)
        {
          int v28 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_10005A784();
          }
        }

        uint64_t v26 = 0xFFFFFFFFLL;
        goto LABEL_46;
      }

      int v14 = v13;
      uint64_t v15 = sub_100026D70((uint64_t)v13, a1, 8);
      if (v15)
      {
        uint64_t v16 = sub_100026D88(v15, v12, 11);
        memcpy(v16, *(const void **)(v8 + 8), *(void *)v8);
        uint64_t v17 = sub_10002EA40( *(void *)(a1 + 256),  (uint64_t)v14,  *(void *)(*(void *)(a1 + 240) + 8LL),  **(void **)(a1 + 240));
        *(void *)(a1 + 80) = v17;
        if (v17)
        {
          uint64_t v18 = sub_100024890(*(void *)(a1 + 256), v17);
          if ((v18 & 0x80000000) != 0)
          {
            if (dword_10008BA20)
            {
              uint64_t v32 = (os_log_s *)ne_log_obj(v18);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
                sub_100058CE4();
              }
            }
          }

          else
          {
            unint64_t v19 = *(void *)(a1 + 256);
            uint64_t v20 = *(unsigned __int8 **)(v19 + 48);
            uint64_t v21 = *(unsigned __int8 **)(v19 + 56);
            uint64_t v22 = *(void **)(a1 + 80);
            if (*(_DWORD *)(v19 + 100) && *v22 >= 0x501uLL)
            {
              uint64_t v23 = 0LL;
              LODWORD(v19) = *(_DWORD *)(v19 + 96);
            }

            else
            {
              unint64_t v19 = *(unsigned int *)(v19 + 96);
              uint64_t v23 = (v19 >> 3) & 4;
            }

            uint64_t v31 = sub_10000A4F4(v20, v21, (uint64_t)v22, a2, v23, (v19 >> 5) & 1);
            if ((_DWORD)v31 != -1)
            {
              sub_100004344(v2, 6596);
              uint64_t v26 = 0LL;
LABEL_45:
              sub_10003F5BC(v14);
LABEL_46:
              sub_10003F5BC(v12);
LABEL_47:
              sub_10003F5BC((void *)v8);
              return v26;
            }

            if (dword_10008BA20)
            {
              uint64_t v33 = (os_log_s *)ne_log_obj(v31);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
                sub_10005960C();
              }
            }
          }
        }

        else if (dword_10008BA20)
        {
          uint64_t v30 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            sub_10005A7B0();
          }
        }
      }

      else if (dword_10008BA20)
      {
        uint64_t v29 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
          sub_10005B870();
        }
      }

      uint64_t v26 = 0xFFFFFFFFLL;
      goto LABEL_45;
    }

    if (dword_10008BA20)
    {
      uint64_t v25 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_10005B0B8();
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v24 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      sub_100058E74();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100020DB8(uint64_t a1)
{
  int v1 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) != 6596)
  {
    if (dword_10008BA20)
    {
      signed int v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100058E74();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v3 = sub_10002A3E0(a1, 1);
  if ((v3 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      int v7 = (os_log_s *)ne_log_obj(v3);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10005B8C8();
      }
    }

    return 0xFFFFFFFFLL;
  }

  sub_100004344(v1, 6600);
  *(_BYTE *)(a1 + 105) ^= 2u;
  if (dword_10008B858) {
    return 0LL;
  }
  if (dword_10008BA20)
  {
    uint64_t v8 = (os_log_s *)ne_log_obj(v4);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10005AF84();
    }
  }

  uint64_t v9 = sub_1000301FC(a1);
  if ((v9 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v21 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_10005AED4();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v10 = (os_log_s *)ne_log_obj(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_10005AF58();
    }
  }

  uint64_t v11 = sub_1000305C8(a1);
  if ((v11 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v22 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_10005AF00();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v12 = (os_log_s *)ne_log_obj(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      sub_10005AF2C();
    }
  }

  if (!*(void *)(a1 + 136)) {
    return 0LL;
  }
  uint64_t v13 = *(void *)a1;
  uint64_t v14 = *(void *)(a1 + 8);
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v13;
  uint64_t v15 = sub_100030994(a1);
  if ((v15 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v23 = (os_log_s *)ne_log_obj(v15);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_10005B8F4();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v16 = (os_log_s *)ne_log_obj(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      sub_10005B978();
    }
  }

  uint64_t v17 = *(void *)(a1 + 136);
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v14;
  *(_BYTE *)uint64_t v17 = 2;
  __int128 v29 = *(_OWORD *)(v17 + 72);
  __int128 v30 = *(_OWORD *)(v17 + 88);
  __int128 v31 = *(_OWORD *)(v17 + 104);
  __int128 v32 = *(_OWORD *)(v17 + 120);
  __int128 v25 = *(_OWORD *)(v17 + 8);
  __int128 v26 = *(_OWORD *)(v17 + 24);
  __int128 v27 = *(_OWORD *)(v17 + 40);
  __int128 v28 = *(_OWORD *)(v17 + 56);
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v17 + 136);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)(v17 + 152);
  *(_OWORD *)(v17 + 40) = *(_OWORD *)(v17 + 168);
  *(_OWORD *)(v17 + 120) = *(_OWORD *)(v17 + 248);
  *(_OWORD *)(v17 + 104) = *(_OWORD *)(v17 + 232);
  *(_OWORD *)(v17 + 88) = *(_OWORD *)(v17 + 216);
  *(_OWORD *)(v17 + 72) = *(_OWORD *)(v17 + 200);
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(v17 + 184);
  *(_OWORD *)(v17 + 184) = v28;
  *(_OWORD *)(v17 + 168) = v27;
  *(_OWORD *)(v17 + 152) = v26;
  *(_OWORD *)(v17 + 136) = v25;
  *(_OWORD *)(v17 + 248) = v32;
  *(_OWORD *)(v17 + 232) = v31;
  *(_OWORD *)(v17 + 216) = v30;
  *(_OWORD *)(v17 + 200) = v29;
  char v18 = *(_BYTE *)(v17 + 264);
  *(_BYTE *)(v17 + 264) = *(_BYTE *)(v17 + 265);
  *(_BYTE *)(v17 + 265) = v18;
  uint64_t v19 = sub_100030994(a1);
  if ((v19 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(v19);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_10005B920();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v20 = (os_log_s *)ne_log_obj(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      sub_10005B94C();
    }
  }

  sub_100035488(*(void **)(a1 + 136));
  free(*(void **)(a1 + 136));
  uint64_t result = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(_DWORD *)(a1 + 248) = 1;
  return result;
}

uint64_t sub_100021154(unsigned __int8 *a1, int a2)
{
  uint64_t v3 = (unint64_t *)a1;
  uint64_t v4 = *((void *)a1 + 24);
  if (*((void *)a1 + 25))
  {
    if (v4)
    {
LABEL_3:
      if (!a2 && (*((void *)a1 + 4) || *((void *)a1 + 5)))
      {
        if (dword_10008BA20)
        {
          uint64_t v17 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            sub_10005BD18();
          }
        }

        return 0xFFFFFFFFLL;
      }

      if (dword_10008BA20)
      {
        uint64_t v5 = (os_log_s *)ne_log_obj(a1);
        a1 = (unsigned __int8 *)os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)a1) {
          sub_10005BC94(a2, v5);
        }
      }

      memset(__src, 0, sizeof(__src));
      LOBYTE(__src[0]) = 1;
      if (a2
        || (a1 = (unsigned __int8 *)v3[24]) == 0LL
        || ((unsigned int v6 = **((unsigned __int8 **)a1 + 1), v7 = v6 > 6, v8 = (1 << v6) & 0x72, !v7) ? (v9 = v8 == 0) : (v9 = 1),
            v9))
      {
        if (dword_10008BA20)
        {
          uint64_t v15 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
            sub_10005BC68();
          }
        }

        uint64_t v16 = __memcpy_chk((char *)&__src[8] + 8, *v3, *(unsigned __int8 *)*v3, 136LL);
        if (BYTE9(__src[8]) == 30)
        {
          int v13 = 0;
          BYTE9(__src[16]) = 0x80;
          if (a2) {
            goto LABEL_57;
          }
        }

        else if (BYTE9(__src[8]) == 2)
        {
          int v13 = 0;
          BYTE9(__src[16]) = 32;
          WORD5(__src[8]) = 0;
          if (a2) {
            goto LABEL_57;
          }
        }

        else
        {
          int v13 = 0;
          BYTE9(__src[16]) = 0;
          if (a2) {
            goto LABEL_57;
          }
        }
      }

      else
      {
        uint64_t result = sub_100011750( (unint64_t *)a1,  (uint64_t)&__src[8] + 8,  (_BYTE *)&__src[16] + 9,  (__int16 *)&__src[16] + 5,  *((unsigned __int8 *)v3 + 61));
        if ((_DWORD)result) {
          return result;
        }
        int v11 = **(unsigned __int8 **)(v3[24] + 8);
        if (v11 == 5)
        {
          uint64_t result = sub_1000279FC((uint64_t)&__src[8] + 8, *v3);
          if ((_DWORD)result) {
            return result;
          }
          int v11 = **(unsigned __int8 **)(v3[24] + 8);
        }

        if (v11 == 5) {
          int v12 = 5;
        }
        else {
          int v12 = 0;
        }
        if (v11 == 1) {
          int v13 = 1;
        }
        else {
          int v13 = v12;
        }
      }

      uint64_t v16 = v3[25];
      if (v16)
      {
        unsigned int v18 = **(unsigned __int8 **)(v16 + 8);
        if (v18 <= 6 && ((1 << v18) & 0x72) != 0)
        {
          uint64_t result = sub_100011750( (unint64_t *)v16,  (uint64_t)__src + 8,  (_BYTE *)&__src[16] + 8,  (__int16 *)&__src[16] + 5,  *((unsigned __int8 *)v3 + 61));
          if ((_DWORD)result) {
            return result;
          }
          int v19 = **(unsigned __int8 **)(v3[25] + 8);
          if (v19 == 5)
          {
            uint64_t result = sub_1000279FC((uint64_t)__src + 8, v3[1]);
            if ((_DWORD)result) {
              return result;
            }
            int v19 = **(unsigned __int8 **)(v3[25] + 8);
          }

          if (v13 == v19 && BYTE9(__src[8]) == BYTE9(__src[0]))
          {
            uint64_t v20 = (unsigned __int8 *)sub_10003CA00((unsigned __int8 *)&__src[8] + 8);
            v3[4] = (unint64_t)v20;
            if (!v20)
            {
              if (!dword_10008BA20) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v42 = (os_log_s *)ne_log_obj(0LL);
              if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
                return 0xFFFFFFFFLL;
              }
LABEL_115:
              sub_10005BA0C();
              return 0xFFFFFFFFLL;
            }

            uint64_t result = (uint64_t)sub_10003CA00((unsigned __int8 *)__src + 8);
            v3[5] = result;
            if (!result)
            {
              if (!dword_10008BA20) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v21 = (os_log_s *)ne_log_obj(0LL);
              if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                return 0xFFFFFFFFLL;
              }
              goto LABEL_115;
            }
          }

LABEL_57:
      if (dword_10008BA20)
      {
        uint64_t v22 = (os_log_s *)ne_log_obj(v16);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          sub_10005BC3C();
        }
      }

      uint64_t result = __memcpy_chk((char *)__src + 8, v3[1], *(unsigned __int8 *)v3[1], 264LL);
      if (BYTE9(__src[0]) == 30)
      {
        BYTE8(__src[16]) = 0x80;
      }

      else if (BYTE9(__src[0]) == 2)
      {
        BYTE8(__src[16]) = 32;
        WORD5(__src[0]) = 0;
      }

      else
      {
        BYTE8(__src[16]) = 0;
      }

      goto LABEL_65;
    }
  }

  else if (!v4)
  {
    goto LABEL_3;
  }

  if (dword_10008BA20)
  {
    uint64_t v14 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_10005BD44();
    }
  }

  return 18LL;
}

          if (*(unsigned __int8 *)(v3 + 16) != 132)
          {
            sub_10001979C(v13, a1);
            return;
          }

          goto LABEL_101;
        }

        if (dword_10008BA20)
        {
          __int16 v57 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
            sub_10005C2D8();
          }
        }
      }

      else
      {
LABEL_62:
        if (dword_10008BA20)
        {
          uint64_t v40 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
            sub_10005C1A0(v3 + 18, a2, v40);
          }
        }
      }

      break;
  }

uint64_t *sub_100021918(uint64_t a1, const sockaddr *a2)
{
  return sub_10003C888(a2);
}

  ;
}

  ;
}

void sub_100021968( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

char *sub_10002198C(unsigned __int8 *a1)
{
  return sub_100035820(a1);
}

void sub_100021994(uint64_t a1)
{
  socklen_t v44 = 128;
  unsigned int v43 = 128;
  if (xmmword_10008C6E0 == 0)
  {
    int v2 = a1;
    while (1)
    {
      ssize_t v3 = sub_10003BE30(v2, (uint64_t)v51, 0x40uLL, 2, &v50, &v44, (uint64_t)v49, &v43);
      if ((v3 & 0x80000000) == 0) {
        break;
      }
      uint64_t v4 = __error();
      if (*v4 != 4)
      {
        if (dword_10008BA20)
        {
          uint64_t v5 = (os_log_s *)ne_log_obj(v4);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          {
LABEL_10:
            sub_10005BD9C();
            return;
          }
        }

        return;
      }
    }

    if ((_DWORD)v3 == 1 && LOBYTE(v51[0]) == 255)
    {
      ssize_t v6 = recvfrom(v2, v51, 1uLL, 0, &v50, &v44);
      if (v6 != 1)
      {
        if (dword_10008BA20)
        {
          BOOL v7 = (os_log_s *)ne_log_obj(v6);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_10005BE08();
          }
        }
      }
    }

    else
    {
      if (v51[1]) {
        BOOL v8 = v51[0] == 0;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        uint64_t v9 = 4LL;
      }
      else {
        uint64_t v9 = 0LL;
      }
      *(_OWORD *)__int128 v52 = *(_OWORD *)((unint64_t)v51 | v9);
      *(_OWORD *)&v52[12] = *(_OWORD *)(((unint64_t)v51 | v9) + 0xC);
      if (v3 >= 0x1C && (unsigned int v10 = bswap32(*(unsigned int *)&v52[24]), v10 > 0x1B))
      {
        if (v10 < 0x10000)
        {
          uint64_t v17 = sub_10003F4BC(v10 + v9);
          if (v17)
          {
            unsigned int v18 = v17;
            while (1)
            {
              ssize_t v19 = sub_10003BE30(v2, v18[1], *v18, 0, &v50, &v44, (uint64_t)v49, &v43);
              if ((v19 & 0x80000000) == 0) {
                break;
              }
              uint64_t v20 = __error();
              if (*v20 != 4)
              {
                if (dword_10008BA20)
                {
                  uint64_t v21 = (os_log_s *)ne_log_obj(v20);
                  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                    sub_10005BD9C();
                  }
                }

LABEL_77:
                uint64_t v38 = v18;
                goto LABEL_78;
              }
            }

            if ((int)v19 < (int)v9)
            {
              if (dword_10008BA20)
              {
                __int128 v25 = (os_log_s *)ne_log_obj(v19);
                if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
                  sub_10005BF88();
                }
              }

              goto LABEL_77;
            }

            size_t v26 = v19 - v9;
            uint64_t v27 = sub_10003F4BC(v26);
            if (!v27)
            {
              if (dword_10008BA20)
              {
                uint64_t v37 = (os_log_s *)ne_log_obj(0LL);
                if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
                  sub_10005BFFC();
                }
              }

              goto LABEL_77;
            }

            __int128 v28 = v27;
            __int128 v29 = memcpy((void *)v27[1], (const void *)(v18[1] + v9), *v27);
            if (v26 == *v28)
            {
              if (dword_10008BA20)
              {
                __int128 v30 = (os_log_s *)ne_log_obj(v29);
                __int128 v29 = (void *)os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG);
                if ((_DWORD)v29)
                {
                  uint64_t v42 = sub_10003CE10("from %s to %s", &v50, v49);
                  *(_DWORD *)buf = 134218242;
                  size_t v46 = v26;
                  __int16 v47 = 2080;
                  __int128 v48 = v42;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "%zd bytes message received %s\n",  buf,  0x16u);
                }
              }

              if (v50.sa_family == 30 || v50.sa_family == 2)
              {
                if (*(_WORD *)v50.sa_data)
                {
                  uint64_t v31 = sub_10000A114(&v50, (uint64_t)v49, (uint64_t)v28);
                  if ((_DWORD)v31)
                  {
                    if (dword_10008BA20)
                    {
                      char v32 = (os_log_s *)ne_log_obj(v31);
                      BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
                      if (v33)
                      {
                        uint64_t v34 = sub_10003C888(&v50);
                        *(_DWORD *)buf = 136315138;
                        size_t v46 = (size_t)v34;
                        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Received retransmitted packet from %s.\n",  buf,  0xCu);
                      }

                      if (dword_10008BA20)
                      {
                        uint64_t v35 = (os_log_s *)ne_log_obj(v33);
                        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                        {
                          uint64_t v36 = sub_10003C888(&v50);
                          *(_DWORD *)buf = 136315138;
                          size_t v46 = (size_t)v36;
                          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "the packet is retransmitted by %s.\n",  buf,  0xCu);
                        }
                      }
                    }
                  }

                  else
                  {
                    sub_10002201C(v28, &v50, &v49[0].sa_len);
                  }
                }

                else if (dword_10008BA20)
                {
                  uint64_t v41 = (os_log_s *)ne_log_obj(v29);
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
                    sub_10005C0CC();
                  }
                }
              }

              else if (dword_10008BA20)
              {
                uint64_t v40 = (os_log_s *)ne_log_obj(v29);
                if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
                  sub_10005C068();
                }
              }
            }

            else if (dword_10008BA20)
            {
              int v39 = (os_log_s *)ne_log_obj(v29);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
                sub_10005C0F8();
              }
            }

            sub_10003F5BC(v18);
            uint64_t v38 = v28;
LABEL_78:
            sub_10003F5BC(v38);
          }

          else
          {
            if (dword_10008BA20)
            {
              uint64_t v22 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                sub_10005BF14();
              }
            }

            ssize_t v23 = recvfrom(v2, v52, 0x1CuLL, 0, &v50, &v44);
            if (v23 < 0)
            {
              if (dword_10008BA20)
              {
                BOOL v24 = (os_log_s *)ne_log_obj(v23);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_10;
                }
              }
            }
          }
        }

        else
        {
          if (dword_10008BA20)
          {
            uint64_t v14 = (os_log_s *)ne_log_obj(v3);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
              sub_10005BEE8();
            }
          }

          ssize_t v15 = recvfrom(v2, v52, 0x1CuLL, 0, &v50, &v44);
          if (v15 < 0)
          {
            if (dword_10008BA20)
            {
              uint64_t v16 = (os_log_s *)ne_log_obj(v15);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
                goto LABEL_10;
              }
            }
          }
        }
      }

      else
      {
        if (dword_10008BA20)
        {
          int v11 = (os_log_s *)ne_log_obj(v3);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
            sub_10005BE74();
          }
        }

        ssize_t v12 = recvfrom(v2, v52, 0x1CuLL, 0, &v50, &v44);
        if (v12 < 0)
        {
          if (dword_10008BA20)
          {
            int v13 = (os_log_s *)ne_log_obj(v12);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
              sub_10005BD9C();
            }
          }
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    int v1 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
      sub_10005BD70();
    }
  }

      CFRelease(v48);
LABEL_80:
      CFRelease(v12);
      CFRelease(v10);
      if (a5 && !*a5) {
        *a5 = 4;
      }
      return 18LL;
    case 9:
      int v65 = sub_100005664(a1);
      if (!v65)
      {
        if (dword_10008BA20)
        {
          uint64_t v79 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
          {
            sub_10005E984();
            if (!a5) {
              return 20LL;
            }
            goto LABEL_114;
          }
        }

void sub_10002201C(void *a1, sockaddr *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1[1];
  if (*(void *)v3 == qword_10008B840)
  {
    if (dword_10008BA20)
    {
      __int128 v29 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_10005C174();
      }
    }

    return;
  }

  uint64_t v4 = *(unsigned __int8 *)(v3 + 17);
  if ((v4 & 0xF0) != 0x10)
  {
    if (dword_10008BA20)
    {
      __int128 v30 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_10005C580(v4, v30, v31, v32, v33, v34, v35, v36);
      }
    }

    return;
  }

  if ((_DWORD)v4 != 16) {
    return;
  }
  ssize_t v6 = (char *)(v3 + 19);
  unsigned int v5 = *(unsigned __int8 *)(v3 + 19);
  if (v5 >= 8)
  {
    if (dword_10008BA20)
    {
      uint64_t v37 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
        sub_10005C51C();
      }
    }

    return;
  }

  if ((v5 & 2) != 0 && !*(_DWORD *)(v3 + 20))
  {
    uint64_t v38 = sub_10001B4D4(a1[1], &a2->sa_len, a3, 8u, 0LL);
    if (dword_10008BA20)
    {
      int v39 = (os_log_s *)ne_log_obj(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
        sub_10005C4F0();
      }
    }

    return;
  }

  uint64_t v10 = sub_10004AC7C((uint64_t)a3, (uint64_t)a2, 0, (void *)v3);
  if (!v10)
  {
    uint64_t v10 = sub_10004AC7C((uint64_t)a3, (uint64_t)a2, 1, 0LL);
    if (!v10)
    {
      if (dword_10008BA20)
      {
        int v11 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "failed to allocate or find ike session.\n",  buf,  2u);
        }
      }

      sub_10003B688();
    }
  }

  uint64_t v12 = sub_10000886C(v10, (void *)v3);
  uint64_t v13 = v12;
  if (v12)
  {
    if (*(void *)(v3 + 8) == qword_10008B840 && !*(_DWORD *)(v12 + 20))
    {
      if (dword_10008BA20)
      {
        __int128 v51 = (os_log_s *)ne_log_obj(v12);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          __int128 v52 = "Malformed cookie received or the initiator's cookies collide.\n";
LABEL_93:
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, v52, buf, 2u);
        }
      }

      return;
    }

    if ((*(_DWORD *)(v12 + 96) & 9) == 1)
    {
      uint64_t v14 = (void *)(v12 + 48);
      if (sub_10003B8F4(*(void *)(v12 + 48), (unint64_t)a2)
        || sub_10003B8F4(*(void *)(v13 + 56), (unint64_t)a3))
      {
        free(*(void **)(v13 + 48));
        free(*(void **)(v13 + 56));
        *uint64_t v14 = 0LL;
        *(void *)(v13 + 56) = 0LL;
        ssize_t v15 = sub_10003CA00(&a2->sa_len);
        *(void *)(v13 + 48) = v15;
        if (!v15)
        {
          if (dword_10008BA20)
          {
            uint64_t v16 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
              sub_10005C4C4();
            }
          }

          sub_10003B688();
        }

        uint64_t v17 = sub_10003CA00(a3);
        *(void *)(v13 + 56) = v17;
        if (!v17)
        {
          if (dword_10008BA20)
          {
            unsigned int v18 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              sub_10005C4C4();
            }
          }

          sub_10003B688();
        }

        *(_DWORD *)(v13 + 96) |= 0x28u;
        if (dword_10008BA20)
        {
          ssize_t v19 = (os_log_s *)ne_log_obj(v17);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = sub_10003CE10("%s<->%s", *(const sockaddr **)(v13 + 48), *(sockaddr **)(v13 + 56));
            *(_DWORD *)buf = 136315138;
            *(void *)__int16 v66 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "NAT-T: ports changed to: %s\n",  buf,  0xCu);
          }
        }
      }
    }

    uint64_t v21 = sub_10003C888(*(const sockaddr **)(v13 + 48));
    uint64_t v22 = strdup((const char *)v21);
    ssize_t v23 = sub_10003C888(a2);
    BOOL v24 = strdup((const char *)v23);
    if (v22)
    {
      __int128 v25 = v24;
      if (v24)
      {
        if (dword_10008BA20)
        {
          log = (os_log_s *)ne_log_obj(v24);
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)__int16 v66 = v22;
            *(_WORD *)&v66[8] = 2080;
            *(void *)&v66[10] = v25;
            _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "Remote address mismatched. db=%s, act=%s\n",  buf,  0x16u);
          }
        }

        free(v22);
        free(v25);
LABEL_39:
        sub_10001D05C(v13, (uint64_t)"IKE packet received from peer");
        goto LABEL_40;
      }

      if (dword_10008BA20)
      {
        __int16 v63 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
          goto LABEL_131;
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v62 = (os_log_s *)ne_log_obj(v24);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
LABEL_131:
      }
        sub_10005C498();
    }

    exit(1);
  }

LABEL_40:
  uint64_t v27 = (unsigned __int8 *)(v3 + 18);
  int v26 = *(unsigned __int8 *)(v3 + 18);
  switch(*(_BYTE *)(v3 + 18))
  {
    case 2:
    case 4:
      if (*(_DWORD *)(v3 + 20))
      {
        if (dword_10008BA20)
        {
          __int128 v28 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_10005C2AC();
          }
        }

        return;
      }

      if (v13) {
        goto LABEL_82;
      }
      uint64_t v12 = sub_1000088F8(v10, (void *)v3);
      if (v12)
      {
        uint64_t v13 = v12;
        int v26 = *v27;
LABEL_82:
        if (*(unsigned __int8 *)(v13 + 81) == v26)
        {
          sub_100004404(v13, a1);
        }

        else if (dword_10008BA20)
        {
          unint64_t v54 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
            sub_10005C210((unsigned __int8 *)(v13 + 81), (unsigned __int8 *)(v3 + 18), v54);
          }
        }
      }

      else if (*(void *)(v3 + 8) == qword_10008B840)
      {
        sub_100027D08(v10, (uint64_t)a1, &a2->sa_len, a3, *v27);
      }

      else if (dword_10008BA20)
      {
        __int128 v51 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          __int128 v52 = "Malformed cookie received or the spi expired.\n";
          goto LABEL_93;
        }
      }

      return;
    case 3:
      goto LABEL_62;
    case 5:
      goto LABEL_56;
    case 6:
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 17) & 0x20) != 0)
        {
          sub_100042410(v13, a1);
        }

        else if (dword_10008BA20)
        {
          uint64_t v41 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            int v42 = *v27;
            unsigned int v43 = sub_10003C888(a2);
            sub_100024670(v13, *(_DWORD *)(v13 + 84));
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)__int16 v66 = v42;
            *(_WORD *)&v66[4] = 2080;
            *(void *)&v66[6] = v43;
            *(_WORD *)&v66[14] = 2080;
            *(void *)&v66[16] = &xmmword_100088748;
            _os_log_error_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "mode config %d from %s, but ISAKMP-SA %s isn't established.\n",  buf,  0x1Cu);
          }
        }
      }

      else if (dword_10008BA20)
      {
        uint64_t v53 = (os_log_s *)ne_log_obj(v12);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
          sub_10005C428(v3 + 18, a2, v53);
        }
      }

      return;
    default:
      if (v26 == 32)
      {
        int v44 = *(_DWORD *)(v3 + 20);
        if (v13)
        {
          uint64_t v45 = *(void *)(v13 + 408);
          if (v45)
          {
            uint64_t v12 = *(void *)(v45 + 1176);
            if (v12)
            {
              sub_10002E08C((void *)v12);
              *(void *)(*(void *)(v13 + 408) + 1176LL) = 0LL;
            }
          }

          if (*(unsigned __int8 *)(v3 + 16) == 132)
          {
LABEL_101:
            sub_1000280B4(v13, a1, a2, (uint64_t)a3);
            return;
          }

          if ((*(_BYTE *)(v13 + 17) & 0x20) != 0)
          {
            uint64_t v58 = sub_100009448(v13, v44);
            if (v58)
            {
              char v59 = *v6;
              if ((*v6 & 2) != 0) {
                *(_BYTE *)(v58 + 105) |= 2u;
              }
              if ((v59 & 1) == 0 || (uint64_t v60 = *(void *)(v58 + 256)) != 0 && *(void *)(v60 + 72))
              {
                sub_100004818(v58, a1);
              }

              else if (dword_10008BA20)
              {
                uint64_t v61 = (os_log_s *)ne_log_obj(v58);
                if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
                  sub_10005C3FC();
                }
              }
            }

            else
            {
              sub_10002827C(v13, a1);
            }
          }

          else if (dword_10008BA20)
          {
            size_t v46 = (os_log_s *)ne_log_obj(v12);
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
              sub_10005C388(v13);
            }
          }
        }

        else
        {
          uint64_t v55 = sub_10001B4D4(v3, &a2->sa_len, a3, 4u, 0LL);
          if (dword_10008BA20)
          {
            uint64_t v56 = (os_log_s *)ne_log_obj(v55);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
              sub_10005C304((unsigned int *)(v3 + 20), v3);
            }
          }
        }
      }

      else if (v26 == 34)
      {
LABEL_56:
        if (v13) {
          goto LABEL_57;
        }
        uint64_t v47 = sub_1000088F8(v10, (void *)v3);
        if (v47)
        {
          uint64_t v13 = v47;
          uint64_t v48 = sub_10003B8F4(*(void *)(v47 + 48), (unint64_t)a2);
          if ((_DWORD)v48)
          {
            if (dword_10008BA20)
            {
              __int128 v49 = (os_log_s *)ne_log_obj(v48);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                sockaddr v50 = sub_10003C888(*(const sockaddr **)(v13 + 48));
                *(_DWORD *)buf = 136315138;
                *(void *)__int16 v66 = v50;
                _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Remote address mismatched. db=%s\n",  buf,  0xCu);
              }
            }
          }

  if (!*(void *)(v4 + 64))
  {
    if (dword_10008BA20)
    {
      uint64_t v37 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
        sub_10006282C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  return 0LL;
}

          free(v6);
          goto LABEL_41;
        }

  sub_10003F5BC(v7);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000229F0(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, int a5, _OWORD *a6)
{
  uint64_t v11 = a1;
  if (!a1)
  {
    uint64_t v11 = sub_10004AC7C((uint64_t)a4, (uint64_t)a3, 1, 0LL);
    if (!v11)
    {
      if (dword_10008BA20)
      {
        uint64_t v12 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v35) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "failed to allocate or find ike session.\n",  (uint8_t *)&v35,  2u);
        }
      }

      sub_10003B688();
    }
  }

  uint64_t v13 = sub_100008DA0(16);
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = (uint64_t)v13;
  *((void *)v13 + 8) = a2;
  sub_100038F3C(a2);
  *(_DWORD *)(v14 + 20) = 0;
  *(_DWORD *)(v14 + 24) = a5;
  if (a6) {
    *(_OWORD *)(v14 + 28) = *a6;
  }
  *(_BYTE *)(v14 + 80) = 16;
  *(_DWORD *)(v14 + 84) = 0;
  *(_BYTE *)(v14 + 82) = 0;
  *(_DWORD *)(v14 + 400) = 0;
  ssize_t v15 = sub_100044ACC();
  *(void *)(v14 + 408) = v15;
  if (!v15) {
    goto LABEL_16;
  }
  *(_DWORD *)(v14 + 100) = *(_DWORD *)(a2 + 148) == 2;
  *(void *)(v14 + 104) = 0LL;
  *(void *)(v14 + 72) = 0LL;
  if ((sub_100022DEC(v14, a2, a3, a4) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = sub_10004B374(v11, v14);
  if ((_DWORD)v16)
  {
    if (dword_10008BA20)
    {
      uint64_t v17 = (os_log_s *)ne_log_obj(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v35) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Failed to link ph1 to session\n",  (uint8_t *)&v35,  2u);
      }
    }

LABEL_16:
    sub_100008E44(v14);
    return 0xFFFFFFFFLL;
  }

  if (a5 == 3 && (*(_BYTE *)(v14 + 432) & 1) == 0)
  {
    *(_WORD *)(*(void *)(v14 + 440) + 264LL) |= 1u;
    ++*(_DWORD *)(*(void *)(v14 + 440) + 364LL);
    *(_BYTE *)(v14 + 432) |= 1u;
  }

  int v19 = **(unsigned __int8 **)(a2 + 16);
  *(_BYTE *)(v14 + 81) = v19;
  if (v19 == 2)
  {
    int v20 = 5184;
  }

  else
  {
    if (v19 != 4) {
      return 0xFFFFFFFFLL;
    }
    int v20 = 5248;
  }

  sub_100004344((int *)(v14 + 16), v20);
  if (dword_10008BA20)
  {
    uint64_t v22 = (os_log_s *)ne_log_obj(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      sub_10005C5E4();
    }
  }

  ssize_t v23 = sub_10003C888(*(const sockaddr **)(v14 + 56));
  BOOL v24 = strdup((const char *)v23);
  if (!v24)
  {
    if (dword_10008BA20)
    {
      uint64_t v34 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        sub_10005C498();
      }
    }

    exit(1);
  }

  __int128 v25 = v24;
  if (dword_10008BA20)
  {
    int v26 = (os_log_s *)ne_log_obj(v24);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = sub_10003C888(*(const sockaddr **)(v14 + 48));
      int v35 = 136315394;
      uint64_t v36 = v25;
      __int16 v37 = 2080;
      uint64_t v38 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "initiate new phase 1 negotiation: %s<=>%s\n",  (uint8_t *)&v35,  0x16u);
    }

    int v28 = dword_10008BA20;
    free(v25);
    if (v28)
    {
      __int128 v30 = (os_log_s *)ne_log_obj(v29);
      BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
      if (v31)
      {
        uint64_t v32 = sub_10003DD88(*(unsigned __int8 *)(v14 + 81));
        int v35 = 136315138;
        uint64_t v36 = v32;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "begin %s mode.\n", (uint8_t *)&v35, 0xCu);
      }

      if (dword_10008BA20)
      {
        uint64_t v33 = (os_log_s *)ne_log_obj(v31);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v35) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "IPSec Phase 1 started (Initiated by me).\n",  (uint8_t *)&v35,  2u);
        }
      }
    }
  }

  else
  {
    free(v24);
  }

  if (sub_1000046B4(v14, 0LL))
  {
    sub_10004ABA4(v14);
    return 0xFFFFFFFFLL;
  }

  sub_100048C2C(1, 0, v14, 0LL);
  return 0LL;
}

    uint64_t v11 = 0LL;
LABEL_17:
    if (*a4)
    {
      SecDHDestroy();
      *a4 = 0LL;
    }

    sub_10003F5BC(*a3);
    sub_10003F5BC(v11);
    return 0xFFFFFFFFLL;
  }

  uint64_t v11 = v10;
  uint64_t v12 = v10[1];
  uint64_t __n = *v10;
  uint64_t v13 = SecDHComputeKey(*a4, a2[1], *a2, v12, &__n);
  if ((_DWORD)v13)
  {
    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_10005DC80();
      }
    }

    goto LABEL_17;
  }

  unsigned int v18 = sub_10003F4BC(v9);
  *a3 = v18;
  if (!v18)
  {
    if (dword_10008BA20)
    {
      uint64_t v21 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_10005DC28();
      }
    }

    goto LABEL_17;
  }

  int v19 = memcpy((void *)(v18[1] + v9 - __n), (const void *)v11[1], __n);
  if (dword_10008BA20)
  {
    int v20 = (os_log_s *)ne_log_obj(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      sub_10005DC54();
    }
  }

  if (*a4)
  {
    SecDHDestroy();
    *a4 = 0LL;
  }

  sub_10003F5BC(v11);
  return 0LL;
}

  uint64_t v12 = 0LL;
LABEL_17:
  if (*a3)
  {
    SecDHDestroy();
    *a3 = 0LL;
  }

  sub_10003F5BC(*a2);
  sub_10003F5BC(v12);
  return 0xFFFFFFFFLL;
}

uint64_t sub_100022DEC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  BOOL v7 = (unsigned __int8 *)sub_10003CA00(a3);
  *(void *)(a1 + 48) = v7;
  if (!v7) {
    goto LABEL_27;
  }
  int v8 = v7[1];
  if (v8 != 30 && v8 != 2)
  {
    if (!dword_10008BA20) {
      goto LABEL_27;
    }
    uint64_t v12 = (os_log_s *)ne_log_obj(v7);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
LABEL_26:
    sub_10005C610();
    goto LABEL_27;
  }

  int v10 = *((unsigned __int16 *)v7 + 1);
  uint64_t v9 = (__int16 *)(v7 + 2);
  if (v10)
  {
    if (a4)
    {
LABEL_6:
      uint64_t v11 = (unsigned __int8 *)sub_10003CA00(a4);
      goto LABEL_14;
    }
  }

  else
  {
    __int16 v13 = *(_WORD *)(*(void *)a2 + 2LL);
    if (!v13) {
      __int16 v13 = -3071;
    }
    *uint64_t v9 = v13;
    if (a4) {
      goto LABEL_6;
    }
  }

  uint64_t v11 = (unsigned __int8 *)sub_10003BAA0(*(const sockaddr **)(a1 + 48));
LABEL_14:
  unint64_t v14 = (unint64_t)v11;
  *(void *)(a1 + 56) = v11;
  if (!v11)
  {
LABEL_27:
    sub_100008E44(a1);
    return 0xFFFFFFFFLL;
  }

  int v15 = v11[1];
  if (v15 != 30 && v15 != 2)
  {
    if (!dword_10008BA20) {
      goto LABEL_27;
    }
    int v19 = (os_log_s *)ne_log_obj(v11);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  uint64_t v16 = *((unsigned __int16 *)v11 + 1);
  if (!*(_WORD *)(v14 + 2))
  {
    uint64_t v16 = sub_1000082AC(v14);
    *(_WORD *)(v14 + 2) = v16;
  }

  if (dword_10008BA20)
  {
    uint64_t v17 = (os_log_s *)ne_log_obj(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Marking ports as changed\n", v20, 2u);
    }
  }

  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 96) |= 0x20u;
  return result;
}

uint64_t sub_100022FB8(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 64) + 168LL);
  if (*(_DWORD *)(a1 + 20) == 1
    && (uint64_t v3 = *(void *)(a1 + 56), *(_BYTE *)(v3 + 1) == 2)
    && (uint64_t v4 = *(void *)(qword_10008B848 + 72)) != 0)
  {
    if (*(_DWORD *)(v3 + 4) == *(_DWORD *)(v4 + 16))
    {
      unsigned int v5 = sub_10003F4BC(4uLL);
      if (v5)
      {
        ssize_t v6 = v5;
        *(_DWORD *)v5[1] = *(_DWORD *)(v4 + 20);
        uint64_t v7 = sub_10001BA48(a1, 0x9E35u, (uint64_t)v5);
        if (dword_10008BA20)
        {
          int v8 = (os_log_s *)ne_log_obj(v7);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v9 = bswap32(*(_DWORD *)(v4 + 20));
            v33[0] = 67109120;
            v33[1] = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "sent redirect notification - address = %x.\n",  (uint8_t *)v33,  8u);
          }
        }

        sub_10003F5BC(v6);
        if (*(_WORD *)(v4 + 24))
        {
          sub_10004B724(a1);
          sub_100023380(a1);
        }
      }

      else if (dword_10008BA20)
      {
        uint64_t v32 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          sub_10005C6C8();
        }
      }
    }
  }

  else
  {
    time((time_t *)(a1 + 360));
    *(_DWORD *)(a1 + 112) = sub_10003A890( *(void *)(*(void *)(a1 + 72) + 16LL),  (uint64_t)sub_10002355C,  a1);
    if (*(_DWORD *)(*(void *)(a1 + 64) + 280LL))
    {
      if (*(_DWORD *)(a1 + 20))
      {
        unint64_t v10 = bswap64(*(void *)(a1 + 8));
        unint64_t v11 = bswap64(*(void *)a1);
        BOOL v12 = v10 >= v11;
        BOOL v13 = v10 > v11;
        int v14 = !v12;
        unsigned int v15 = v13 - v14;
        if (!v15) {
          unsigned int v15 = -1;
        }
      }

      else
      {
        unint64_t v16 = bswap64(*(void *)a1);
        unint64_t v17 = bswap64(*(void *)(a1 + 8));
        BOOL v12 = v16 >= v17;
        BOOL v18 = v16 > v17;
        int v19 = !v12;
        unsigned int v15 = v18 - v19;
        if (v15 <= 1) {
          unsigned int v15 = 1;
        }
      }

      uint64_t v20 = sub_10004A87C((int)v15 > 0, *(_DWORD *)(*(void *)(a1 + 72) + 16LL));
      if ((_DWORD)v20)
      {
        *(_DWORD *)(a1 + 116) = sub_10003A890(v20, (uint64_t)sub_100023560, a1);
      }

      else if (dword_10008BA20)
      {
        uint64_t v21 = (os_log_s *)ne_log_obj(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_10005C69C();
        }
      }
    }

    if ((*(_BYTE *)(a1 + 432) & 1) == 0 && (**(_BYTE **)(a1 + 408) & 1) != 0)
    {
      int v22 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
      if (!*(void *)(*(void *)(a1 + 64) + 272LL) || v22 != 65001)
      {
        BOOL v24 = (v22 - 65002) > 8 || ((1 << (v22 + 22)) & 0x151) == 0;
        if (!v24 || v22 == 64222)
        {
          sub_100045C64(a1);
          int v2 = 0;
        }
      }
    }

    if (*(_DWORD *)(a1 + 368) && *(_DWORD *)(*(void *)(a1 + 64) + 216LL)) {
      sub_10001CC3C(a1, 0);
    }
    if ((*(_BYTE *)(a1 + 432) & 1) == 0 && !dword_10008B858 && v2 != 0 && !sub_100009F88(*(void *)(a1 + 48)))
    {
      sub_10001BA48(a1, 0x6002u, 0LL);
      uint64_t v27 = sub_100009FCC(*(unsigned __int8 **)(a1 + 48));
      if ((_DWORD)v27 == -1)
      {
        if (dword_10008BA20)
        {
          int v28 = (os_log_s *)ne_log_obj(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_10005C670();
          }
        }
      }
    }

    sub_100023568(a1);
    if (dword_10008BA20)
    {
      __int128 v30 = (os_log_s *)ne_log_obj(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
        sub_10005C5E4();
      }
    }

    sub_10004C7CC(*(void *)(a1 + 440), a1);
    sub_100048C2C(0, 0, a1, 0LL);
    sub_100048F84(1LL, a1);
  }

  return 0LL;
}

void *sub_100023380(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v2)
  {
    sub_10003AA44(v2);
    *(_DWORD *)(a1 + 112) = 0;
  }

  uint64_t v3 = *(unsigned int *)(a1 + 388);
  if ((_DWORD)v3)
  {
    sub_10003AA44(v3);
    *(_DWORD *)(a1 + 388) = 0;
  }

  if ((*(_BYTE *)(a1 + 17) & 0x40) == 0)
  {
    uint64_t v4 = sub_10003C888(*(const sockaddr **)(a1 + 56));
    unsigned int v5 = strdup((const char *)v4);
    ssize_t v6 = sub_10003C888(*(const sockaddr **)(a1 + 48));
    uint64_t v7 = strdup((const char *)v6);
    if (v5)
    {
      int v8 = v7;
      if (v7)
      {
        if (dword_10008BA20)
        {
          unsigned int v9 = (os_log_s *)ne_log_obj(v7);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            sub_100024670(a1, 0);
            int v14 = 136315650;
            unsigned int v15 = v5;
            __int16 v16 = 2080;
            unint64_t v17 = v8;
            __int16 v18 = 2080;
            int v19 = &xmmword_100088748;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "ISAKMP-SA expired %s-%s spi:%s\n",  (uint8_t *)&v14,  0x20u);
          }
        }

        free(v5);
        free(v8);
        sub_100004344((int *)(a1 + 16), 17408);
        sub_10004B724(a1);
        goto LABEL_12;
      }

      if (dword_10008BA20)
      {
        BOOL v13 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          goto LABEL_21;
        }
      }
    }

    else if (dword_10008BA20)
    {
      BOOL v12 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
LABEL_21:
      }
        sub_10005C498();
    }

    exit(1);
  }

void sub_100023560(uint64_t a1)
{
}

void sub_100023568(uint64_t a1)
{
  uint64_t v2 = sub_10003C888(*(const sockaddr **)(a1 + 56));
  uint64_t v3 = strdup((const char *)v2);
  uint64_t v4 = sub_10003C888(*(const sockaddr **)(a1 + 48));
  unsigned int v5 = strdup((const char *)v4);
  if (!v3)
  {
    if (dword_10008BA20)
    {
      int v14 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
    }

    goto LABEL_23;
  }

  ssize_t v6 = v5;
  if (!v5)
  {
    if (dword_10008BA20)
    {
      unsigned int v15 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
LABEL_22:
      }
        sub_10005C498();
    }

void *sub_1000237C0(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 v5 = a1;
  if (dword_10008BA20)
  {
    ssize_t v6 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10005C74C();
    }
  }

  uint64_t v7 = sub_10003F4BC(0x50uLL);
  if (!v7)
  {
    if (dword_10008BA20)
    {
      uint64_t v21 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_1000565A0();
      }
    }

    return 0LL;
  }

  BOOL v8 = v7;
  unint64_t v9 = *((void *)v7 + 1);
  if (a3 < 1 || (char v10 = v5) == 0)
  {
LABEL_25:
    *(_BYTE *)unint64_t v9 = 0;
    *(_DWORD *)(v9 + 4) = 0;
    *(void *)(v9 + 8) = 0LL;
    if (dword_10008BA20)
    {
      __int16 v20 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        sub_10005C720();
      }
    }

    return v8;
  }

  int v11 = v5;
  unint64_t v12 = v9 + *(void *)v7 - 16;
  while (1)
  {
    if (a3 <= 4)
    {
      if (dword_10008BA20)
      {
        int v22 = (os_log_s *)ne_log_obj(v7);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          sub_10005C6F4();
        }
      }

      goto LABEL_37;
    }

    if (dword_10008BA20)
    {
      BOOL v13 = (os_log_s *)ne_log_obj(v7);
      uint64_t v7 = (void *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v7)
      {
        int v14 = sub_10003DE70(v11);
        *(_DWORD *)buf = 67109378;
        int v28 = v11;
        __int16 v29 = 2080;
        __int128 v30 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "seen nptype=%u(%s)\n", buf, 0x12u);
      }
    }

    *(_BYTE *)unint64_t v9 = v10;
    unsigned int v15 = bswap32(*((unsigned __int16 *)a2 + 1)) >> 16;
    *(_DWORD *)(v9 + 4) = v15;
    if (v15 < 4 || a3 < v15)
    {
      if (dword_10008BA20)
      {
        ssize_t v23 = (os_log_s *)ne_log_obj(v7);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "isakmp_parsewoh invalid length of payload (2)\n",  buf,  2u);
        }
      }

LABEL_37:
      BOOL v24 = v8;
      goto LABEL_38;
    }

    *(void *)(v9 + 8) = a2;
    v9 += 16LL;
    if (v12 <= v9) {
      break;
    }
LABEL_20:
    int v11 = *a2;
    a2 += v15;
    a3 -= v15;
    BOOL v19 = a3 < 1 || v11 == 0;
    char v10 = v11;
    if (v19) {
      goto LABEL_25;
    }
  }

  uint64_t v17 = v8[1];
  uint64_t v7 = sub_10003F51C((void **)v8, 2LL * *v8);
  if (v7)
  {
    BOOL v8 = v7;
    uint64_t v18 = *((void *)v7 + 1);
    unint64_t v12 = v18 + *(void *)v7 - 16;
    unint64_t v9 = v18 + 16LL * (int)((v9 - v17) >> 4);
    unsigned int v15 = bswap32(*((unsigned __int16 *)a2 + 1)) >> 16;
    goto LABEL_20;
  }

  if (dword_10008BA20)
  {
    int v26 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "failed to realloc buffer.\n", buf, 2u);
    }
  }

  BOOL v24 = 0LL;
LABEL_38:
  sub_10003F5BC(v24);
  return 0LL;
}

void *sub_100023ABC(uint64_t a1)
{
  return sub_1000237C0( *(unsigned __int8 *)(*(void *)(a1 + 8) + 16LL),  (unsigned __int8 *)(*(void *)(a1 + 8) + 28LL),  *(_DWORD *)a1 - 28);
}

uint64_t sub_100023AD8()
{
  time_t v0 = sub_10000A818();
  sub_1000247C4();
  sub_1000078F8();
  return 0xFFFFFFFFLL;
}

uint64_t sub_100023B0C(uint64_t a1)
{
  int v78 = 1;
  int v1 = *(uint64_t **)(qword_10008B848 + 120);
  if (v1)
  {
    int v2 = 0;
    int v3 = 0;
    int v4 = 0;
    while (1)
    {
      ssize_t v6 = v1 + 1;
      uint64_t v5 = v1[1];
      if (!v5) {
        goto LABEL_107;
      }
      if (*((_DWORD *)v1 + 4) != -1)
      {
        ++v2;
        if (*((_DWORD *)v1 + 8)) {
          ++v3;
        }
        goto LABEL_107;
      }

      int v7 = *(unsigned __int8 *)(v5 + 1);
      if (v7 != 30) {
        break;
      }
      if (!*(_DWORD *)(v5 + 8)
        && !*(_DWORD *)(v5 + 12)
        && !*(_DWORD *)(v5 + 16)
        && !*(_DWORD *)(v5 + 20)
        && dword_10008BA20 != 0)
      {
        BOOL v13 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          char v10 = v13;
          int v11 = "listening to wildcard address, broadcast IKE packet may kill you\n";
LABEL_16:
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
        }
      }

LABEL_104:
          close(*((_DWORD *)v1 + 4));
          *((_DWORD *)v1 + 4) = -1;
LABEL_105:
          free((void *)v1[1]);
          v1[1] = 0LL;
          *((_DWORD *)v1 + 4) = -1;
          if (!*(_DWORD *)(qword_10008B848 + 112) && *(_DWORD *)(qword_10008B848 + 308)) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_107;
        }

        if ((buf[16] & 0x1D) != 0)
        {
          if (dword_10008BA20)
          {
            uint64_t v56 = (os_log_s *)ne_log_obj(v55);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
            {
              __int16 v57 = sub_10003C888((const sockaddr *)*v6);
              *(_DWORD *)uint64_t v80 = 136315394;
              char v81 = v57;
              __int16 v82 = 1024;
              int v83 = *(_DWORD *)&buf[16];
              _os_log_error_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_ERROR,  "failed to bind to address %s: because of interface address error, flags %x.\n",  v80,  0x12u);
            }
          }

          goto LABEL_104;
        }

        if (dword_10008BA20)
        {
          uint64_t v60 = (os_log_s *)ne_log_obj(v55);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          {
            uint64_t v62 = sub_10003C888((const sockaddr *)*v6);
            *(_DWORD *)uint64_t v80 = 136315394;
            char v81 = v62;
            __int16 v82 = 1024;
            int v83 = *(_DWORD *)&buf[16];
            _os_log_error_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "failed to bind to address %s: because interface address is/was not ready (flags %x).\n",  v80,  0x12u);
          }
        }

        a1 = close(*((_DWORD *)v1 + 4));
        *((_DWORD *)v1 + 4) = -1;
        int v4 = 1;
      }

            i[4] = v51;
            i[5] = 1;
            goto LABEL_105;
          }

          if (v50 == 61443) {
            goto LABEL_104;
          }
          if (v50 == 61444) {
            goto LABEL_103;
          }
LABEL_105:
          if (dword_10008BA20)
          {
            __int128 v52 = (os_log_s *)ne_log_obj(v8);
            BOOL v8 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v8)
            {
              uint8_t v76 = v37;
              uint64_t v53 = sub_10003E374(v50);
              __int128 v54 = sub_10003E374(i[4]);
              uint64_t v55 = i[4];
              *(_DWORD *)buf = 136315906;
              *(void *)uint64_t v80 = v53;
              int v37 = v76;
              *(_WORD *)&v80[8] = 1024;
              char v81 = v50;
              __int16 v82 = 2080;
              int v83 = v54;
              v84 = 1024;
              __int128 v85 = v55;
              _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Adjusting peer's encmode %s(%d)->%s(%d)\n",  buf,  0x22u);
            }
          }

LABEL_107:
      int v1 = (uint64_t *)*v1;
      if (!v1)
      {
        if (!v2) {
          goto LABEL_125;
        }
        BOOL v63 = sub_10003FF64();
        if (v63 && !v3 && dword_10008BA20)
        {
          int v64 = (os_log_s *)ne_log_obj(v63);
          BOOL v65 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
          if (v65)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "NAT-T is enabled in at least one remote{} section,\n",  buf,  2u);
          }

          if (dword_10008BA20)
          {
            __int16 v66 = (os_log_s *)ne_log_obj(v65);
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "but no 'isakmp_natt' address was specified!\n",  buf,  2u);
            }
          }
        }

        if (v4) {
          sub_10003A890(5LL, (uint64_t)sub_1000083E0, 0LL);
        }
        return 0LL;
      }
    }

    if (v7 != 2)
    {
      if (dword_10008BA20)
      {
        ssize_t v23 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          sub_10005C7A4(v100, &v101, v23);
        }
      }

      goto LABEL_105;
    }

    if (*(_DWORD *)(v5 + 4)) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = dword_10008BA20 == 0;
    }
    if (v8) {
      goto LABEL_26;
    }
    unint64_t v9 = (os_log_s *)ne_log_obj(a1);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    *(_WORD *)buf = 0;
    char v10 = v9;
    int v11 = "listening to wildcard address,broadcast IKE packet may kill you\n";
    goto LABEL_16;
  }

LABEL_125:
  if (dword_10008BA20)
  {
    uint64_t v68 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
      sub_10005C778();
    }
  }

  return 0xFFFFFFFFLL;
}

void *sub_100024648()
{
  return sub_1000078F8();
}

void sub_10002465C()
{
}

__int128 *sub_100024670(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 0LL;
  int v5 = 0;
  xmmword_100088768 = 0u;
  unk_100088778 = 0u;
  xmmword_100088748 = 0u;
  unk_100088758 = 0u;
  do
  {
    snprintf((char *)&xmmword_100088748 + v5, 64LL - v5, "%02x", *(unsigned __int8 *)(a1 + v4));
    uint64_t v6 = v5 + 2LL;
    if (v4 == 7)
    {
      *((_BYTE *)&xmmword_100088748 + v6) = 58;
      LODWORD(v6) = v5 + 3;
    }

    ++v4;
    int v5 = v6;
  }

  while (v4 != 16);
  if (a2) {
    snprintf((char *)&xmmword_100088748 + (int)v6, 64LL - (int)v6, ":%08x", bswap32(a2) >> 16);
  }
  return &xmmword_100088748;
}

void sub_100024754(uint64_t a1)
{
}

void sub_10002475C(uint64_t a1)
{
}

void sub_100024784()
{
  for (uint64_t i = *(void **)(qword_10008B848 + 120); i; uint64_t i = (void *)*i)
  {
    int v1 = (dispatch_object_s *)i[3];
    if (v1) {
      dispatch_suspend(v1);
    }
  }

void sub_1000247C4()
{
  for (uint64_t i = *(uint64_t **)(qword_10008B848 + 120); i; uint64_t i = (uint64_t *)*i)
  {
    if (i[1])
    {
      int v1 = (dispatch_source_s *)i[3];
      if (v1)
      {
        dispatch_source_cancel(v1);
        i[3] = 0LL;
        *((_DWORD *)i + 9) = 0;
        *((_DWORD *)i + 4) = -1;
      }
    }
  }

void sub_10002481C()
{
  int v1 = (void *)(qword_10008B848 + 120);
  time_t v0 = *(uint64_t **)(qword_10008B848 + 120);
  if (v0)
  {
    do
    {
      int v2 = (uint64_t *)*v0;
      if (*((_DWORD *)v0 + 9))
      {
        int v1 = v0;
      }

      else
      {
        int v3 = (dispatch_source_s *)v0[3];
        uint64_t v4 = (uint64_t *)*v0;
        if (v3)
        {
          dispatch_source_cancel(v3);
          v0[3] = 0LL;
          uint64_t v4 = (uint64_t *)*v0;
        }

        *int v1 = v4;
        sub_10000793C(v0);
      }

      time_t v0 = v2;
    }

    while (v2);
  }

uint64_t sub_100024890(uint64_t a1, size_t *a2)
{
  int v2 = a2;
  unsigned int v4 = (*(_DWORD *)(a1 + 96) >> 3) & 4;
  if (*(_DWORD *)(a1 + 100) && *a2 > 0x500) {
    unsigned int v4 = 0;
  }
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = dword_10008BA20 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (!v4)
    {
      int v7 = 0LL;
      goto LABEL_15;
    }
  }

  else
  {
    BOOL v8 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10005CB54();
    }
  }

  char v10 = sub_10003F4BC(*v2 + v5);
  if (!v10)
  {
    if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_10005CAD0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v7 = v10;
  int v11 = (_DWORD *)v10[1];
  _DWORD *v11 = 0;
  memcpy((char *)v11 + v5, (const void *)v2[1], *v2);
  int v2 = v7;
LABEL_15:
  uint64_t v12 = sub_100008438(*(unsigned __int8 **)(a1 + 56));
  if ((_DWORD)v12 == -1) {
    goto LABEL_35;
  }
  uint64_t v13 = v12;
  if (dword_10008BA20)
  {
    int v14 = (os_log_s *)ne_log_obj(v12);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      size_t v22 = *v2;
      ssize_t v23 = sub_10003CE10("from %s to %s", *(const sockaddr **)(a1 + 56), *(sockaddr **)(a1 + 48));
      int v24 = 134218242;
      size_t v25 = v22;
      __int16 v26 = 2080;
      uint64_t v27 = v23;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%zu bytes %s\n", (uint8_t *)&v24, 0x16u);
    }
  }

  unint64_t v15 = *v2;
  if (!*(_DWORD *)(a1 + 100) || v15 < 0x501)
  {
    uint64_t v19 = sub_10003C110( v13,  (const void *)v2[1],  v15,  *(unsigned __int8 **)(a1 + 56),  *(unsigned __int8 **)(a1 + 48),  *(_DWORD *)(qword_10008B848 + 276));
    if ((_DWORD)v19 != -1) {
      goto LABEL_30;
    }
    if (dword_10008BA20)
    {
      uint64_t v21 = (os_log_s *)ne_log_obj(v19);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        sub_10005CB28();
        if (!v7) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_36;
      }
    }

uint64_t sub_100024B08(uint64_t a1)
{
  uint64_t result = sub_100024B4C();
  if ((result & 0x80000000) != 0)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v3)
    {
      sub_10003AA44(v3);
      *(_DWORD *)(a1 + 120) = 0;
    }

    return sub_10004ABA4(a1);
  }

  return result;
}

uint64_t sub_100024B4C(uint64_t a1)
{
  if (!*(void *)(a1 + 128)) {
    return 0xFFFFFFFFLL;
  }
  if (*(int *)(a1 + 124) > 0)
  {
    sub_10004F068(a1);
    uint64_t v2 = sub_100024890(a1, *(size_t **)(a1 + 128));
    if ((v2 & 0x80000000) == 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v3 = (os_log_s *)ne_log_obj(v2);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          sub_100024670(a1, *(_DWORD *)(a1 + 84));
          int v11 = 136315138;
          uint64_t v12 = &xmmword_100088748;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Resend Phase 1 packet %s\n",  (uint8_t *)&v11,  0xCu);
        }
      }

      int v4 = *(_DWORD *)(a1 + 124) - 1;
      *(_DWORD *)(a1 + 124) = v4;
      uint64_t v5 = sub_10000A100(*(_DWORD *)(*(void *)(a1 + 64) + 200LL) - v4, *(_DWORD *)(*(void *)(a1 + 64) + 204LL));
      unsigned int v6 = sub_10003A890(v5, (uint64_t)sub_100024B08, a1);
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 120) = v6;
      return result;
    }

    if (dword_10008BA20)
    {
      char v10 = (os_log_s *)ne_log_obj(v2);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10005CBF4(a1);
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    BOOL v8 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10005CB80(a1);
    }
  }

  if (*(_DWORD *)(a1 + 20)) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_BYTE *)(a1 + 432) & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = *(void *)(a1 + 440);
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_WORD *)(v9 + 264) & 0x400) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = sub_100024D00(a1);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_100024D00(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112) || *(_DWORD *)(a1 + 116)) {
    return 0xFFFFFFFFLL;
  }
  int v3 = *(_DWORD *)(a1 + 16);
  BOOL v4 = v3 == 5281 || v3 == 5217;
  if (!v4
    || (*(_BYTE *)(a1 + 96) & 8) == 0
    || sub_10003D53C(*(void *)(a1 + 56)) != 4500
    && sub_10003D53C(*(void *)(a1 + 48)) != 4500
    || (*(_BYTE *)(a1 + 432) & 2) != 0)
  {
    return 0xFFFFFFFFLL;
  }

  uint64_t v5 = sub_10003C888(*(const sockaddr **)(a1 + 56));
  unsigned int v6 = strdup((const char *)v5);
  int v7 = (uint64_t *)(a1 + 48);
  BOOL v8 = sub_10003C888(*(const sockaddr **)(a1 + 48));
  uint64_t v9 = strdup((const char *)v8);
  if (!v6)
  {
    if (dword_10008BA20)
    {
      ssize_t v23 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
    }

    goto LABEL_51;
  }

  char v10 = v9;
  if (!v9)
  {
    if (dword_10008BA20)
    {
      int v24 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
LABEL_50:
      }
        sub_10005C498();
    }

LABEL_51:
    exit(1);
  }

  if (dword_10008BA20)
  {
    int v11 = (os_log_s *)ne_log_obj(v9);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_100024670(a1, 0);
      int v25 = 136315650;
      __int16 v26 = v6;
      __int16 v27 = 2080;
      uint64_t v28 = v10;
      __int16 v29 = 2080;
      uint64_t v30 = &xmmword_100088748;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "ISAKMP-SA rekey failed... retrying %s-%s spi:%s\n",  (uint8_t *)&v25,  0x20u);
    }
  }

  free(v6);
  free(v10);
  uint64_t v12 = sub_10004E598(*(void *)(a1 + 440), 1);
  if (!(_DWORD)v12)
  {
    uint64_t v15 = sub_10004BEC4(*(void *)(a1 + 440), a1);
    if ((_DWORD)v15)
    {
      if (!dword_10008BA20) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v16 = (os_log_s *)ne_log_obj(v15);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LOWORD(v25) = 0;
      uint64_t v17 = "request to retry ISAKMP-SA rekey was ignored due to another established ph1.\n";
    }

    else
    {
      *(_DWORD *)(a1 + 96) &= ~8u;
      uint64_t v18 = sub_1000389B8(*(void *)(a1 + 48));
      if (!v18)
      {
        if (dword_10008BA20)
        {
          size_t v22 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            sub_10005CC68((const sockaddr **)v7);
          }
        }

        return 0xFFFFFFFFLL;
      }

      uint64_t v19 = v18;
      if (dword_10008BA20)
      {
        uint64_t v20 = (os_log_s *)ne_log_obj(v18);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v25) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "begin Phase 1 rekey retry.\n",  (uint8_t *)&v25,  2u);
        }
      }

      uint64_t v21 = sub_1000229F0(*(void *)(a1 + 440), v19, *(void *)(a1 + 48), *(void *)(a1 + 56), 0LL, a1 + 28);
      if ((v21 & 0x80000000) == 0)
      {
        uint64_t result = 0LL;
        *(_BYTE *)(a1 + 432) |= 1u;
        return result;
      }

      if (!dword_10008BA20) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v16 = (os_log_s *)ne_log_obj(v21);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      LOWORD(v25) = 0;
      uint64_t v17 = "Phase 1 rekey retry Failed.\n";
    }

    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v25, 2u);
    return 0xFFFFFFFFLL;
  }

  if (!dword_10008BA20) {
    return 0LL;
  }
  uint64_t v13 = (os_log_s *)ne_log_obj(v12);
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v14)
  {
    LOWORD(v25) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "request for ISAKMP-SA rekey was ignored due to idleness.\n",  (uint8_t *)&v25,  2u);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000250B0(void *a1)
{
  uint64_t result = sub_1000250E4();
  if ((result & 0x80000000) != 0) {
    return sub_10004AAC4(a1);
  }
  return result;
}

uint64_t sub_1000250E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 256);
  if (!v1)
  {
    if (dword_10008BA20)
    {
      BOOL v8 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_10005CCD0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v3 = (uint64_t *)(a1 + 256);
  if ((*(_BYTE *)(v1 + 17) & 0x40) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10005CDE4(v3, a1);
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*(int *)(a1 + 72) <= 0)
  {
    if (dword_10008BA20)
    {
      char v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10005CCFC(v3, a1);
      }
    }

    return 0xFFFFFFFFLL;
  }

  sub_10004EF80(a1);
  uint64_t v4 = sub_100024890(*(void *)(a1 + 256), *(size_t **)(a1 + 80));
  if ((v4 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      int v11 = (os_log_s *)ne_log_obj(v4);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_10005CD70(v3, a1);
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v5 = (os_log_s *)ne_log_obj(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      sub_100024670(*(void *)(a1 + 256), *(_DWORD *)(a1 + 108));
      int v12 = 136315138;
      uint64_t v13 = &xmmword_100088748;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Resend Phase 2 packet %s\n",  (uint8_t *)&v12,  0xCu);
    }
  }

  --*(_DWORD *)(a1 + 72);
  uint64_t v6 = sub_10000A100( *(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 200LL) - *(_DWORD *)(*(void *)(a1 + 256) + 124LL),  *(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 204LL));
  uint64_t result = (uint64_t)sub_10003A890(v6, (uint64_t)sub_1000250B0, a1);
  *(_DWORD *)(a1 + 68) = result;
  if ((_DWORD)result)
  {
    sub_10001D05C(*v3, (uint64_t)"Phase 2 packets sent to peer: retransmit timer armed");
    return 0LL;
  }

  return result;
}

void sub_100025308(uint64_t a1, int a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v4)
  {
    sub_10003AA44(v4);
    *(_DWORD *)(a1 + 116) = 0;
  }

  if (*(_DWORD *)(a1 + 112)
    || (uint64_t v14 = *(void *)(*(void *)(a1 + 72) + 24LL)) != 0
    && (unsigned int v15 = sub_10003A890(v14, (uint64_t)sub_10002355C, a1), (*(_DWORD *)(a1 + 112) = v15) != 0))
  {
    if ((*(_BYTE *)(a1 + 17) & 0x20) != 0 && (*(_BYTE *)(a1 + 432) & 2) == 0)
    {
      uint64_t v5 = sub_10003C888(*(const sockaddr **)(a1 + 56));
      uint64_t v6 = strdup((const char *)v5);
      int v7 = (const sockaddr **)(a1 + 48);
      BOOL v8 = sub_10003C888(*(const sockaddr **)(a1 + 48));
      uint64_t v9 = strdup((const char *)v8);
      if (v6)
      {
        char v10 = v9;
        if (v9)
        {
          if (dword_10008BA20)
          {
            int v11 = (os_log_s *)ne_log_obj(v9);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              sub_100024670(a1, 0);
              int v25 = 136315650;
              __int16 v26 = v6;
              __int16 v27 = 2080;
              uint64_t v28 = v10;
              __int16 v29 = 2080;
              uint64_t v30 = &xmmword_100088748;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "ISAKMP-SA rekey-timer expired %s-%s spi:%s\n",  (uint8_t *)&v25,  0x20u);
            }
          }

          free(v6);
          free(v10);
          if (a2 || !sub_10004E598(*(void *)(a1 + 440), 1))
          {
            uint64_t v12 = sub_10004BEC4(*(void *)(a1 + 440), a1);
            if ((_DWORD)v12)
            {
              if (dword_10008BA20)
              {
                uint64_t v13 = (os_log_s *)ne_log_obj(v12);
                if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v25) = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Request for ISAKMP-SA rekey was ignored due to another established ph1.\n",  (uint8_t *)&v25,  2u);
                }
              }
            }

            else
            {
              uint64_t v16 = sub_10004BF08(*(void *)(a1 + 440), a1);
              if ((_DWORD)v16)
              {
                if (dword_10008BA20)
                {
                  uint64_t v17 = (os_log_s *)ne_log_obj(v16);
                  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
                    sub_10005CEC0();
                  }
                }

                *(_DWORD *)(a1 + 116) = sub_10003A890(1LL, (uint64_t)sub_100023560, a1);
              }

              else
              {
                uint64_t v18 = *(void *)(a1 + 64);
                if (v18 || (uint64_t v16 = (uint64_t)sub_1000389B8((uint64_t)*v7), (v18 = v16) != 0))
                {
                  if (dword_10008BA20)
                  {
                    uint64_t v19 = (os_log_s *)ne_log_obj(v16);
                    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(v25) = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Begin Phase 1 rekey.\n",  (uint8_t *)&v25,  2u);
                    }
                  }

                  uint64_t v20 = sub_1000229F0( *(void *)(a1 + 440),  v18,  *(unsigned __int8 **)(a1 + 48),  *(unsigned __int8 **)(a1 + 56),  0,  (_OWORD *)(a1 + 28));
                  if ((v20 & 0x80000000) != 0)
                  {
                    if (dword_10008BA20)
                    {
                      uint64_t v21 = (os_log_s *)ne_log_obj(v20);
                      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
                      {
                        LOWORD(v25) = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Phase 1 rekey Failed.\n",  (uint8_t *)&v25,  2u);
                      }
                    }
                  }

                  *(_BYTE *)(a1 + 432) |= 1u;
                }

                else if (dword_10008BA20)
                {
                  size_t v22 = (os_log_s *)ne_log_obj(0LL);
                  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                    sub_10005CE58(v7);
                  }
                }
              }
            }
          }

          return;
        }

        if (dword_10008BA20)
        {
          int v24 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            goto LABEL_45;
          }
        }
      }

      else if (dword_10008BA20)
      {
        ssize_t v23 = (os_log_s *)ne_log_obj(v9);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
LABEL_45:
        }
          sub_10005C498();
      }

      exit(1);
    }
  }

void *sub_100025688(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v2)
  {
    sub_10003AA44(v2);
    *(_DWORD *)(a1 + 112) = 0;
  }

  uint64_t v3 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v3)
  {
    sub_10003AA44(v3);
    *(_DWORD *)(a1 + 116) = 0;
  }

  uint64_t v4 = *(unsigned int *)(a1 + 388);
  if ((_DWORD)v4)
  {
    sub_10003AA44(v4);
    *(_DWORD *)(a1 + 388) = 0;
  }

  if (*(void *)(a1 + 448))
  {
    uint64_t result = sub_10003A890(1LL, (uint64_t)sub_100025304, a1);
    *(_DWORD *)(a1 + 112) = (_DWORD)result;
    return result;
  }

  sub_10001ADEC(a1);
  uint64_t v6 = sub_10003C888(*(const sockaddr **)(a1 + 56));
  int v7 = strdup((const char *)v6);
  BOOL v8 = sub_10003C888(*(const sockaddr **)(a1 + 48));
  uint64_t v9 = strdup((const char *)v8);
  if (!v7)
  {
    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        goto LABEL_23;
      }
    }

    goto LABEL_24;
  }

  char v10 = v9;
  if (!v9)
  {
    if (dword_10008BA20)
    {
      unsigned int v15 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
LABEL_23:
      }
        sub_10005C498();
    }

void *sub_1000258C8(void *result)
{
  if ((*((_BYTE *)result + 57) & 0x40) != 0) {
    return result;
  }
  uint64_t v1 = (uint64_t)result;
  uint64_t v2 = *((unsigned int *)result + 16);
  if ((_DWORD)v2)
  {
    sub_10003AA44(v2);
    *(_DWORD *)(v1 + 64) = 0;
  }

  uint64_t v3 = sub_10003CB98(*(const sockaddr **)v1);
  uint64_t v4 = strdup(v3);
  uint64_t v5 = sub_10003CB98(*(const sockaddr **)(v1 + 8));
  uint64_t v6 = strdup(v5);
  if (!v4)
  {
    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
    }

    goto LABEL_25;
  }

  int v7 = v6;
  if (!v6)
  {
    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
LABEL_24:
      }
        sub_10005C498();
    }

LABEL_25:
    exit(1);
  }

  if (dword_10008BA20)
  {
    BOOL v8 = (os_log_s *)ne_log_obj(v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136315394;
      int v16 = v4;
      __int16 v17 = 2080;
      __int16 v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Phase 2 sa expired %s-%s\n",  (uint8_t *)&v15,  0x16u);
    }
  }

  free(v4);
  free(v7);
  if ((*(_BYTE *)(v1 + 57) & 0x20) != 0)
  {
    uint64_t v9 = *(void *)(v1 + 128);
    if (v9)
    {
      for (uint64_t i = *(unsigned int **)(v9 + 32); i; uint64_t i = (unsigned int *)*((void *)i + 9))
      {
        if (i[14])
        {
          int v11 = *(_DWORD *)(qword_10008B848 + 32);
          char v12 = sub_10002F5C8(*i);
          sub_100040DD0(v11, v12, 0LL, *(unsigned __int8 **)v1, *(unsigned __int8 **)(v1 + 8), i[7]);
        }
      }
    }
  }

  if (*(_BYTE *)(v1 + 61) == 16) {
    sub_100004344((int *)(v1 + 56), 18432);
  }
  uint64_t result = sub_10003A890(1LL, (uint64_t)sub_100025AC0, v1);
  *(_DWORD *)(v1 + 64) = (_DWORD)result;
  return result;
}

uint64_t sub_100025AC4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v2)
  {
    sub_10003AA44(v2);
    *(_DWORD *)(a1 + 64) = 0;
  }

  uint64_t v3 = sub_10003CB98(*(const sockaddr **)a1);
  uint64_t v4 = strdup(v3);
  uint64_t v5 = sub_10003CB98(*(const sockaddr **)(a1 + 8));
  uint64_t v6 = strdup(v5);
  if (!v4)
  {
    if (dword_10008BA20)
    {
      char v10 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_14;
      }
    }

    goto LABEL_15;
  }

  int v7 = v6;
  if (!v6)
  {
    if (dword_10008BA20)
    {
      int v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
LABEL_14:
      }
        sub_10005C498();
    }

LABEL_15:
    exit(1);
  }

  if (dword_10008BA20)
  {
    BOOL v8 = (os_log_s *)ne_log_obj(v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315394;
      uint64_t v13 = v4;
      __int16 v14 = 2080;
      int v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Phase 2 sa deleted %s-%s\n",  (uint8_t *)&v12,  0x16u);
    }
  }

  free(v4);
  free(v7);
  return sub_10004AAC4((void *)a1);
}

  sub_10003F5BC(v3);
  return 0xFFFFFFFFLL;
}

  v9[15] = 0u;
  v9[16] = 0u;
  v9[13] = 0u;
  v9[14] = 0u;
  v9[11] = 0u;
  v9[12] = 0u;
  v9[9] = 0u;
  v9[10] = 0u;
  v9[7] = 0u;
  v9[8] = 0u;
  v9[5] = 0u;
  v9[6] = 0u;
  v9[3] = 0u;
  v9[4] = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  *uint64_t v9 = 0u;
  uint8_t v8[16] = *((_BYTE *)v3 + 6);
  int v12 = *(unsigned __int8 *)(v1 + 8);
  int v11 = (char *)(v1 + 8);
  v8[280] = *(v11 - 3);
  v8[281] = *(_BYTE *)(v2 + 5);
  *((_WORD *)v8 + 141) = *(v11 - 4);
  memcpy(v8 + 24, v11, v12);
  memcpy(v8 + 152, (const void *)(v2 + 8), *(unsigned __int8 *)(v2 + 8));
  sub_100035768(v8);
  return 0LL;
}

      exit(1);
    }

    uint64_t v5 = a1 + 4;
    uint64_t v6 = 4;
  }

  if (8 * v6 < a3)
  {
    if (dword_10008BA20)
    {
      BOOL v8 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100064028();
      }
    }

    goto LABEL_15;
  }

  memcpy(a1, a2, *a2);
  v5[a3 >> 3] &= 0xFF00u >> (a3 & 7);
  int v7 = (a3 >> 3) + 1;
  if (v7 < v6) {
    bzero(&v5[v7], ~(a3 >> 3) + v6);
  }
}

    int v16 = bswap32(v10[1]) >> 16;
    if (v16 + 4 > v11)
    {
      if (dword_10008BA20)
      {
        size_t v22 = (os_log_s *)ne_log_obj(v6);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109632;
          int v25 = v12;
          __int16 v26 = 2048;
          __int16 v27 = v16;
          uint64_t v28 = 2048;
          __int16 v29 = v11 - 4;
          _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "isakmp_cfg_set packet too short for type %d, expected %zu actual %zu\n",  buf,  0x1Cu);
        }
      }

      goto LABEL_40;
    }

    uint64_t v9 = v11 - (v16 + 4);
    char v10 = (unsigned __int16 *)((char *)v10 + v16 + 4);
LABEL_19:
    if (v9 <= 0) {
      goto LABEL_20;
    }
  }

  if (dword_10008BA20)
  {
    uint64_t v21 = (os_log_s *)ne_log_obj(v6);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      sub_100064874();
    }
  }

uint64_t sub_100025C28(uint64_t a1)
{
  if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      sub_10005CF54();
    }
  }

  uint64_t v3 = (const sockaddr **)(a1 + 8);
  uint64_t v4 = sub_1000389B8(*(void *)(a1 + 8));
  if (!v4)
  {
    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_10005CEEC(v3);
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v5 = (uint64_t)v4;
  if (v4[36])
  {
    if (!dword_10008BA20) {
      return 0LL;
    }
    uint64_t v6 = (os_log_s *)ne_log_obj(v4);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v7)
    {
      uint64_t v9 = sub_10003CB98(*v3);
      int v29 = 136315138;
      uint64_t v30 = v9;
      char v10 = "Because of passive mode, ignore the acquire message for %s.\n";
      int v11 = v6;
      uint32_t v12 = 12;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v29, v12);
      return 0LL;
    }

    return result;
  }

  BOOL v14 = sub_10004C020(*(void *)(a1 + 272), a1);
  if (v14)
  {
    if (dword_10008BA20)
    {
      int v15 = (os_log_s *)ne_log_obj(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v29) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Request for establishing IPsec-SA was ignored due to another negoing ph2.\n",  (uint8_t *)&v29,  2u);
      }
    }

    return 0xFFFFFFFFLL;
  }

  if ((*(_BYTE *)(a1 + 264) & 1) != 0) {
    sub_10004D0D8((uint64_t *)a1);
  }
  if (*(_BYTE *)(a1 + 61) != 16 || (uint64_t v16 = sub_10004BCC0(a1)) == 0)
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(qword_10008B848 + 280);
    uint64_t v21 = sub_10003A890(1LL, (uint64_t)sub_100025FF0, a1);
    if (dword_10008BA20)
    {
      size_t v22 = (os_log_s *)ne_log_obj(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        ssize_t v23 = sub_10003CB98(*v3);
        int v29 = 136315138;
        uint64_t v30 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "IPsec-SA request for %s queued due to no Phase 1 found.\n",  (uint8_t *)&v29,  0xCu);
      }
    }

    BOOL v24 = sub_10004D8F0(*(void *)(a1 + 272));
    if (v24)
    {
      if (!dword_10008BA20) {
        return 0LL;
      }
      uint64_t v19 = (os_log_s *)ne_log_obj(v24);
      BOOL v25 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0LL;
      if (!v25) {
        return result;
      }
      LOWORD(v29) = 0;
      char v10 = "Request for Phase 1 was ignored due to another negotiating Phase 1.\n";
    }

    else
    {
      int v26 = sub_1000229F0( *(void *)(a1 + 272),  v5,  *(unsigned __int8 **)(a1 + 8),  *(unsigned __int8 **)a1,  0,  (_OWORD *)(a1 + 16));
      uint64_t result = 0LL;
      if ((v26 & 0x80000000) == 0) {
        return result;
      }
      if (!dword_10008BA20) {
        return result;
      }
      uint64_t v19 = (os_log_s *)ne_log_obj(0LL);
      BOOL v27 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0LL;
      if (!v27) {
        return result;
      }
      LOWORD(v29) = 0;
      char v10 = "Request for Phase 1 failed. Will try later.\n";
    }

uint64_t sub_100025FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000468F0((void *)a1);
  if ((_DWORD)v4)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10005CFAC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v6 = (os_log_s *)ne_log_obj(v4);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    if (v7) {
      sub_10005C5E4();
    }
    if (dword_10008BA20)
    {
      BOOL v8 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        sub_10005CF80();
      }
    }
  }

  uint64_t v9 = sub_10003C888(*(const sockaddr **)a2);
  char v10 = strdup((const char *)v9);
  if (!v10)
  {
    if (dword_10008BA20)
    {
      uint64_t v17 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_10005C498();
      }
    }

    exit(1);
  }

  int v11 = v10;
  if (dword_10008BA20)
  {
    uint32_t v12 = (os_log_s *)ne_log_obj(v10);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = sub_10003C888(*(const sockaddr **)(a2 + 8));
      int v18 = 136315394;
      uint64_t v19 = v11;
      __int16 v20 = 2080;
      uint64_t v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "initiate new phase 2 negotiation: %s<=>%s\n",  (uint8_t *)&v18,  0x16u);
    }
  }

  free(v11);
  *(_BYTE *)(a2 + 264) &= ~2u;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 28);
  sub_100004344((int *)(a2 + 56), 6336);
  if (dword_10008BA20)
  {
    int v15 = (os_log_s *)ne_log_obj(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v18) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "IPSec Phase 2 started (Initiated by me).\n",  (uint8_t *)&v18,  2u);
    }
  }

  sub_100048C2C(1, 0, 0LL, a2);
  return 0LL;
}

uint64_t sub_100026218(uint64_t a1)
{
  if ((*(_BYTE *)(*(void *)(a1 + 256) + 17LL) & 0x40) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_10005CFD8();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v2 = (int *)(a1 + 56);
  if (*(_BYTE *)(a1 + 60)) {
    int v3 = 6608;
  }
  else {
    int v3 = 6352;
  }
  sub_100004344(v2, v3);
  if (*(_BYTE *)(a1 + 60) != 1)
  {
    return 0xFFFFFFFFLL;
  }

  return 0LL;
}

void sub_1000262CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 61) == 16 && *(_DWORD *)(a1 + 56) != 6336 || (*(_BYTE *)(a1 + 264) & 2) != 0)
  {
    if (dword_10008BA20)
    {
      BOOL v8 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(_DWORD *)(a1 + 56);
        int v10 = *(unsigned __int8 *)(a1 + 264) << 30 >> 31;
        v39[0] = 67109632;
        v39[1] = v9;
        __int16 v40 = 1024;
        int v41 = 6336;
        __int16 v42 = 1024;
        int v43 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "CHKPH1THERE: ph2 handle has advanced too far (status %d, START %d, dying %d)... ignoring\n",  (uint8_t *)v39,  0x14u);
      }
    }
  }

  else
  {
    int v2 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 96) = v2 - 1;
    if (v2 <= 0)
    {
      if (dword_10008BA20)
      {
        int v11 = (os_log_s *)ne_log_obj(a1);
        BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
        if (v12) {
          sub_10005D004(a1);
        }
        if (dword_10008BA20)
        {
          uint64_t v13 = (os_log_s *)ne_log_obj(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v39[0]) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "delete Phase 2 handler.\n",  (uint8_t *)v39,  2u);
          }
        }
      }

      sub_10002FD0C(a1);
LABEL_51:
      sub_10004AAC4((void *)a1);
      return;
    }

    uint64_t v3 = sub_10004BCC0(a1);
    uint64_t v4 = v3;
    if (!v3 || (*(_BYTE *)(v3 + 17) & 0x20) == 0)
    {
      uint64_t v5 = sub_10004D8F0(*(void *)(a1 + 272));
      if ((_DWORD)v5) {
        goto LABEL_8;
      }
      int v35 = sub_1000389B8(*(void *)(a1 + 8));
      if (v35)
      {
        if (v4) {
          uint64_t v36 = (_OWORD *)(v4 + 28);
        }
        else {
          uint64_t v36 = 0LL;
        }
        uint64_t v5 = sub_1000229F0( *(void *)(a1 + 272),  (uint64_t)v35,  *(unsigned __int8 **)(a1 + 8),  *(unsigned __int8 **)a1,  0,  v36);
        int v6 = dword_10008BA20;
        if ((v5 & 0x80000000) == 0 || !dword_10008BA20) {
          goto LABEL_9;
        }
        int v37 = (os_log_s *)ne_log_obj(v5);
        uint64_t v5 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v5)
        {
LABEL_8:
          int v6 = dword_10008BA20;
LABEL_9:
          if (v6)
          {
            BOOL v7 = (os_log_s *)ne_log_obj(v5);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v39[0]) = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CHKPH1THERE: no established ph1 handler found\n",  (uint8_t *)v39,  2u);
            }
          }

          goto LABEL_12;
        }

        LOWORD(v39[0]) = 0;
        uint64_t v38 = "CHKPH1THERE: no established/negoing ph1 handler found... failed to initiate new one\n";
      }

      else
      {
        if (!dword_10008BA20)
        {
LABEL_12:
          sub_10003A890(1LL, (uint64_t)sub_100025FF0, a1);
          return;
        }

        int v37 = (os_log_s *)ne_log_obj(0LL);
        uint64_t v5 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v5) {
          goto LABEL_8;
        }
        LOWORD(v39[0]) = 0;
        uint64_t v38 = "CHKPH1THERE: no remoteconf found... failed to initiate new one\n";
      }

      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v38, (uint8_t *)v39, 2u);
      goto LABEL_8;
    }

    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(v3);
      BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
      if (v15) {
        sub_10005D2FC();
      }
      if (dword_10008BA20)
      {
        uint64_t v16 = (os_log_s *)ne_log_obj(v15);
        BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
        if (v17) {
          sub_10005D28C(v4);
        }
        if (dword_10008BA20)
        {
          int v18 = (os_log_s *)ne_log_obj(v17);
          BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
          if (v19) {
            sub_10005D21C(v4);
          }
          if (dword_10008BA20)
          {
            __int16 v20 = (os_log_s *)ne_log_obj(v19);
            BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
            if (v21) {
              sub_10005D1F0();
            }
            if (dword_10008BA20)
            {
              size_t v22 = (os_log_s *)ne_log_obj(v21);
              BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
              if (v23) {
                sub_10005D0EC((const sockaddr **)a1);
              }
              if (dword_10008BA20)
              {
                BOOL v24 = (os_log_s *)ne_log_obj(v23);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
                  sub_10005D180(a1);
                }
              }
            }
          }
        }
      }
    }

    uint64_t v25 = *(void *)a1;
    unsigned int v26 = sub_10003D53C(*(void *)(v4 + 56));
    sub_10003D630(v25, v26);
    uint64_t v27 = *(void *)(a1 + 8);
    unsigned int v28 = sub_10003D53C(*(void *)(v4 + 48));
    int v29 = sub_10003D630(v27, v28);
    if (dword_10008BA20)
    {
      uint64_t v30 = (os_log_s *)ne_log_obj(v29);
      BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG);
      if (v31) {
        sub_10005D154();
      }
      if (dword_10008BA20)
      {
        uint64_t v32 = (os_log_s *)ne_log_obj(v31);
        BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG);
        if (v33) {
          sub_10005D0EC((const sockaddr **)a1);
        }
        if (dword_10008BA20)
        {
          uint64_t v34 = (os_log_s *)ne_log_obj(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
            sub_10005D084((const sockaddr **)(a1 + 8));
          }
        }
      }
    }
  }

uint64_t sub_100026784(_WORD *a1, unsigned int a2, void *__src, signed int a4)
{
  *a1 = bswap32(a2) >> 16;
  a1[1] = bswap32(a4) >> 16;
  uint64_t v5 = a1 + 2;
  memcpy(a1 + 2, __src, a4);
  return (uint64_t)v5 + a4;
}

_WORD *sub_1000267D4(_WORD *a1, int a2, unsigned int a3)
{
  *a1 = bswap32(a2 | 0x8000) >> 16;
  a1[1] = bswap32(a3) >> 16;
  return a1 + 2;
}

void *sub_1000267F8(void **a1, unsigned int a2, const void *a3, signed int a4)
{
  int v7 = a4 + 4;
  if (a1)
  {
    BOOL v8 = *a1;
    int v9 = sub_10003F51C(a1, (int)(v7 + *a1));
    int v10 = v9;
    uint64_t v11 = (int)v8;
    if (v9)
    {
LABEL_3:
      BOOL v12 = (_WORD *)(v10[1] + v11);
      *BOOL v12 = bswap32(a2) >> 16;
      v12[1] = bswap32(a4) >> 16;
      memcpy(v12 + 2, a3, a4);
      return v10;
    }
  }

  else
  {
    int v9 = sub_10003F4BC(v7);
    int v10 = v9;
    uint64_t v11 = 0LL;
    if (v9) {
      goto LABEL_3;
    }
  }

  if (dword_10008BA20)
  {
    uint64_t v13 = (os_log_s *)ne_log_obj(v9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_10005D328();
    }
  }

  return v10;
}

void *sub_1000268CC(void **a1, int a2, unsigned int a3)
{
  if (a1)
  {
    uint64_t v5 = *a1;
    int v6 = sub_10003F51C(a1, (int)(*a1 + 4));
    int v7 = v6;
    uint64_t v8 = (int)v5;
    if (v6)
    {
LABEL_3:
      int v9 = (_WORD *)(v7[1] + v8);
      *int v9 = bswap32(a2 | 0x8000) >> 16;
      v9[1] = bswap32(a3) >> 16;
      return v7;
    }
  }

  else
  {
    int v6 = sub_10003F4BC(4uLL);
    int v7 = v6;
    uint64_t v8 = 0LL;
    if (v6) {
      goto LABEL_3;
    }
  }

  if (dword_10008BA20)
  {
    int v10 = (os_log_s *)ne_log_obj(v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10005D328();
    }
  }

  return v7;
}

uint64_t sub_100026984(void *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a2 + 1);
  if (v3 != *(unsigned __int8 *)(a3 + 1))
  {
    if (dword_10008BA20)
    {
      int v9 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10005D3EC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (v3 == 30)
  {
    int v7 = (_DWORD *)(a2 + 8);
    uint64_t v8 = (_DWORD *)(a3 + 8);
  }

  else
  {
    if (v3 != 2)
    {
      if (dword_10008BA20)
      {
        __int16 v20 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_10005C068();
        }
      }

      return 0xFFFFFFFFLL;
    }

    int v7 = (_DWORD *)(a2 + 4);
    uint64_t v8 = (_DWORD *)(a3 + 4);
  }

  int v10 = sub_10003F4BC(*(_DWORD *)(qword_10008B848 + 304) + 20);
  if (!v10)
  {
    if (dword_10008BA20)
    {
      BOOL v21 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_10005D354();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v11 = v10;
  uint64_t v12 = v10[1];
  *(_DWORD *)uint64_t v12 = *v7;
  *(_WORD *)(v12 + 4) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(v12 + 6) = *v8;
  *(_WORD *)(v12 + 10) = *(_WORD *)(a3 + 2);
  *(void *)(v12 + 12) = time(0LL);
  uint64_t v13 = sub_1000076AC(*(_DWORD *)(qword_10008B848 + 304));
  if (!v13)
  {
    sub_10003F5BC(v11);
    return 0xFFFFFFFFLL;
  }

  uint64_t v14 = v13;
  memcpy((void *)(v12 + 20), (const void *)v13[1], *(int *)(qword_10008B848 + 304));
  sub_10003F5BC(v14);
  BOOL v15 = sub_10000759C((uint64_t)v11);
  *a1 = *(void *)v15[1];
  uint64_t v16 = sub_10003D680((uint64_t)a1, 8uLL);
  BOOL v17 = v16;
  if (dword_10008BA20)
  {
    int v18 = (os_log_s *)ne_log_obj(v16);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      sub_10005D380();
    }
  }

  free(v17);
  sub_10003F5BC(v11);
  sub_10003F5BC(v15);
  return 0LL;
}

uint64_t sub_100026BA4(size_t **a1, uint64_t a2)
{
  if (*a1)
  {
    if (dword_10008BA20)
    {
      int v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v10[0] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "ignore this payload, same payload type exist.\n",  (uint8_t *)v10,  2u);
      }
    }
  }

  else
  {
    uint64_t v4 = bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16;
    if (v4 > 3)
    {
      int v7 = sub_10003F4BC(v4 - 4);
      *a1 = v7;
      if (v7)
      {
        memcpy((void *)v7[1], (const void *)(a2 + 4), *v7);
        return 0LL;
      }

      if (dword_10008BA20)
      {
        int v9 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_1000565A0();
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10005D468();
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100026CD4(uint64_t a1)
{
  do
    uint64_t v2 = sub_100007704();
  while (sub_100009448(a1, v2));
  return v2;
}

uint64_t sub_100026D0C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100026D1C(a1, a2, a3, *(_BYTE *)(a2 + 81), *(_BYTE *)(a2 + 82), *(_DWORD *)(a2 + 84));
}

uint64_t sub_100026D1C(uint64_t a1, uint64_t a2, char a3, char a4, char a5, int a6)
{
  if (*(void *)a1 < 0x1CuLL) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)uint64_t v7 = *(void *)a2;
  *(void *)(v7 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(v7 + 16) = a3;
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(v7 + 18) = a4;
  *(_BYTE *)(v7 + 19) = a5;
  unsigned int v8 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(v7 + 20) = a6;
  *(_DWORD *)(v7 + 24) = v8;
  return *(void *)(a1 + 8) + 28LL;
}

uint64_t sub_100026D70(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100026D1C(a1, *(void *)(a2 + 256), a3, 32, *(_BYTE *)(a2 + 105), *(_DWORD *)(a2 + 108));
}

char *sub_100026D88(uint64_t a1, uint64_t *a2, int a3)
{
  if (dword_10008BA20)
  {
    int v6 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10005D4D4(a2, a3, v6);
    }
  }

  *(_BYTE *)a1 = a3;
  size_t v8 = *a2;
  uint64_t v7 = (const void *)a2[1];
  *(_WORD *)(a1 + 2) = bswap32(*a2 + 4) >> 16;
  int v9 = (char *)(a1 + 4);
  memcpy(v9, v7, v8);
  return &v9[*a2];
}

void *sub_100026E18(void *a1, uint64_t a2, int a3)
{
  uint64_t result = malloc(0x20uLL);
  if (a1) {
    *a1 = result;
  }
  *uint64_t result = 0LL;
  result[1] = a1;
  result[2] = a2;
  *((_DWORD *)result + 6) = a3;
  return result;
}

void *sub_100026E60(uint64_t ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = (uint64_t **)v4[1];
  }

  while (v4);
  size_t v6 = 28LL;
  uint64_t v7 = v5;
  do
  {
    v6 += *v7[2] + 4;
    uint64_t v7 = (uint64_t **)*v7;
  }

  while (v7);
  size_t v8 = sub_10003F4BC(v6);
  if (!v8)
  {
    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_10005A784();
      }
    }

    return 0LL;
  }

  int v9 = v8;
  uint64_t v10 = sub_100026D1C( (uint64_t)v8,  a2,  *((_DWORD *)v5 + 6),  *(_BYTE *)(a2 + 81),  *(_BYTE *)(a2 + 82),  *(_DWORD *)(a2 + 84));
  if (!v10)
  {
    sub_10003F5BC(v9);
    return 0LL;
  }

  uint64_t v11 = (char *)v10;
  do
  {
    if (*v5) {
      int v12 = *((_DWORD *)*v5 + 6);
    }
    else {
      int v12 = 0;
    }
    uint64_t v11 = sub_100026D88((uint64_t)v11, v5[2], v12);
    uint64_t v13 = *v5;
    free(v5);
    uint64_t v5 = (uint64_t **)v13;
  }

  while (v13);
  *a1 = 0LL;
  return v9;
}

void sub_100026F6C(uint64_t a1)
{
  if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      sub_100024670(a1, *(_DWORD *)(a1 + 84));
      *(_DWORD *)buf = 136315138;
      v38[0] = &xmmword_100088748;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "purging ISAKMP-SA spi=%s.\n", buf, 0xCu);
    }
  }

  sub_100004344((int *)(a1 + 16), 17408);
  uint64_t v3 = sub_10004B724(a1);
  uint64_t v4 = sub_10002F0B4(0);
  if (v4)
  {
    uint64_t v5 = v4;
    if ((uint64_t)*v4 >= 1)
    {
      unint64_t v6 = (unint64_t)v4[1];
      uint64_t v7 = (char *)*v4 + v6;
      while (1)
      {
        unint64_t v8 = *(unsigned __int16 *)(v6 + 4);
        if (v8 < 2) {
          goto LABEL_41;
        }
        if (*(_BYTE *)(v6 + 1) == 10)
        {
          uint64_t v9 = sub_100041F1C(v6, (uint64_t)buf);
          if ((_DWORD)v9 || (uint64_t v9 = sub_10004201C((uint64_t)buf), (_DWORD)v9))
          {
            if (dword_10008BA20)
            {
              uint64_t v10 = (os_log_s *)ne_log_obj(v9);
              if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
                sub_10005D558();
              }
            }

            goto LABEL_14;
          }

          uint64_t v11 = *(void *)((char *)v38 + 4);
          if (*(void *)((char *)v38 + 4)
            && v39
            && v40
            && *(unsigned __int8 *)(*(void *)((char *)v38 + 4) + 9LL) <= 2u)
          {
            int v12 = (unsigned __int8 *)(v39 + 8);
            unint64_t v13 = v40 + 8;
            if (!sub_10003B8F4(*(void *)(a1 + 56), v39 + 8)
              && !sub_10003B8F4(*(void *)(a1 + 48), v13))
            {
              break;
            }

            if (!sub_10003B8F4(*(void *)(a1 + 56), v13)
              && !sub_10003B8F4(*(void *)(a1 + 48), (unint64_t)v12))
            {
              break;
            }
          }
        }

void sub_100027414(uint64_t *a1)
{
  if (a1 && *((_DWORD *)a1 + 62))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (unsigned __int8 *)a1[1];
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "generated policy, deleting it.\n", buf, 2u);
      }
    }

    memset(buf, 0, 272);
    a1[17] = (uint64_t)buf;
    *a1 = (uint64_t)v3;
    a1[1] = v2;
    buf[0] = 1;
    uint64_t v5 = (unsigned __int8 *)a1[24];
    if (v5 && (unsigned int v6 = **((unsigned __int8 **)v5 + 1), v6 <= 6) && ((1 << v6) & 0x72) != 0)
    {
      if (sub_100011750( (unint64_t *)v5,  (uint64_t)&buf[136],  &buf[265],  (__int16 *)&buf[266],  *((unsigned __int8 *)a1 + 61))) {
        goto LABEL_72;
      }
      int v7 = **(unsigned __int8 **)(a1[24] + 8);
      if (v7 == 5)
      {
        int v7 = **(unsigned __int8 **)(a1[24] + 8);
      }

      if (v7 == 5) {
        int v8 = 5;
      }
      else {
        int v8 = 0;
      }
      if (v7 == 1) {
        int v9 = 1;
      }
      else {
        int v9 = v8;
      }
    }

    else
    {
      if (dword_10008BA20)
      {
        uint64_t v10 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)BOOL v31 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Get a destination address of SP index from Phase 1 address due to no ID payloads found OR because ID type is not address.\n",  v31,  2u);
        }
      }

      __memcpy_chk(&buf[136], *a1, *(unsigned __int8 *)*a1, 136LL);
      if (buf[137] == 30)
      {
        int v9 = 0;
        uint8_t v11 = 0x80;
      }

      else
      {
        if (buf[137] != 2)
        {
          int v9 = 0;
          buf[265] = 0;
          goto LABEL_28;
        }

        int v9 = 0;
        uint8_t v11 = 32;
      }

      buf[265] = v11;
    }

uint64_t sub_1000279FC(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 == 255 || v2 == 254 && ((unsigned int v3 = *(unsigned __int8 *)(a1 + 9), (v3 & 0xC0) == 0x80) || v3 >= 0xC0))
  {
    if (*(_BYTE *)(a2 + 1) == 30)
    {
      if (*(unsigned __int8 *)(a2 + 8) == 254 && (*(_BYTE *)(a2 + 9) & 0xC0) == 0x80)
      {
        uint64_t v4 = 0LL;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        return v4;
      }

      if (dword_10008BA20)
      {
        unsigned int v6 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          sub_10005D6E8();
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10005D714();
      }
    }

    return 0xFFFFFFFFLL;
  }

  return 0LL;
}

void *sub_100027AE8(unint64_t *a1, void *a2)
{
  int v2 = a1;
  if ((a1[54] & 1) != 0 || !*(_DWORD *)(a1[8] + 168) || (a1 = sub_100009F88(a1[6])) != 0LL)
  {
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = v2[54] & 1;
        int v6 = *(_DWORD *)(v2[8] + 168);
        int v7 = sub_100009F88(v2[6]);
        v17[0] = 67109632;
        v17[1] = v5;
        __int16 v18 = 1024;
        int v19 = v6;
        __int16 v20 = 1024;
        BOOL v21 = v7 != 0LL;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "failed to add initial-contact payload: rekey %d, ini-contact %d, contacted %d.\n",  (uint8_t *)v17,  0x14u);
      }
    }

    return 0LL;
  }

  else
  {
    unsigned int v10 = *(_DWORD *)(v2[8] + 24);
    uint8_t v11 = sub_10003F4BC(0x18uLL);
    int v8 = v11;
    if (v11)
    {
      *(void *)v11[1] = bswap32(v10) | 0x260100100000000LL;
      *(_OWORD *)(v11[1] + 8LL) = *(_OWORD *)v2;
      int v12 = malloc(0x20uLL);
      if (a2) {
        *a2 = v12;
      }
      *int v12 = 0LL;
      v12[1] = a2;
      v12[2] = v8;
      *((_DWORD *)v12 + 6) = 11;
      if (dword_10008BA20)
      {
        unsigned int v13 = (os_log_s *)ne_log_obj(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v17[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "added initial-contact payload.\n",  (uint8_t *)v17,  2u);
        }
      }

      uint64_t v14 = sub_100009FCC((unsigned __int8 *)v2[6]);
      if ((_DWORD)v14 == -1)
      {
        if (dword_10008BA20)
        {
          int v15 = (os_log_s *)ne_log_obj(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            sub_10005C670();
          }
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v16 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_1000593D8();
      }
    }
  }

  return v8;
}

void sub_100027D08(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, int a5)
{
  uint64_t v10 = *(void *)(a2 + 8);
  uint8_t v11 = sub_1000389B8((uint64_t)a3);
  if (!v11)
  {
    if (dword_10008BA20)
    {
      int v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_10005D740();
      }
    }

    return;
  }

  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = sub_100039010((uint64_t)v11, a5);
  if (!v13)
  {
    if (dword_10008BA20)
    {
      __int16 v20 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_10005D76C(a5);
      }
    }

    return;
  }

  uint64_t v14 = (unsigned __int8 *)v13;
  int v15 = sub_100008DA0(16);
  if (!v15) {
    return;
  }
  uint64_t v16 = (uint64_t)v15;
  void *v15 = *(void *)v10;
  v15[8] = v12;
  sub_100038F3C(v12);
  *(_BYTE *)(v16 + 82) = 0;
  *(void *)(v16 + 20) = 1LL;
  int v17 = *v14;
  *(_BYTE *)(v16 + 81) = v17;
  *(_BYTE *)(v16 + 80) = *(_BYTE *)(v10 + 17);
  *(_DWORD *)(v16 + 84) = 0;
  if (v17 == 2)
  {
    int v18 = 5440;
  }

  else
  {
    if (v17 != 4)
    {
LABEL_19:
      sub_100008E44(v16);
      return;
    }

    int v18 = 5504;
  }

  sub_100004344((int *)(v16 + 16), v18);
  BOOL v21 = sub_100044ACC();
  *(void *)(v16 + 408) = v21;
  if (!v21) {
    goto LABEL_19;
  }
  *(_DWORD *)(v16 + 100) = 0;
  *(void *)(v16 + 104) = 0LL;
  *(void *)(v16 + 72) = 0LL;
  if ((sub_100022DEC(v16, v12, a3, a4) & 0x80000000) == 0)
  {
    uint64_t v22 = sub_10004B374(a1, v16);
    if ((_DWORD)v22) {
      goto LABEL_19;
    }
    if (dword_10008BA20)
    {
      uint64_t v23 = (os_log_s *)ne_log_obj(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
        sub_10005C5E4();
      }
    }

    unsigned int v24 = sub_10003C888(*(const sockaddr **)(v16 + 56));
    uint64_t v25 = strdup((const char *)v24);
    if (!v25)
    {
      if (dword_10008BA20)
      {
        __int128 v35 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          sub_10005C498();
        }
      }

      exit(1);
    }

    uint8_t v26 = v25;
    if (dword_10008BA20)
    {
      uint64_t v27 = (os_log_s *)ne_log_obj(v25);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v28 = sub_10003C888(*(const sockaddr **)(v16 + 48));
        int v36 = 136315394;
        __int128 v37 = v26;
        __int16 v38 = 2080;
        uint64_t v39 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "respond new phase 1 negotiation: %s<=>%s\n",  (uint8_t *)&v36,  0x16u);
      }

      int v29 = dword_10008BA20;
      free(v26);
      if (v29)
      {
        BOOL v31 = (os_log_s *)ne_log_obj(v30);
        BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        if (v32)
        {
          __int128 v33 = sub_10003DD88(a5);
          int v36 = 136315138;
          __int128 v37 = v33;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "begin %s mode.\n", (uint8_t *)&v36, 0xCu);
        }

        if (dword_10008BA20)
        {
          __int128 v34 = (os_log_s *)ne_log_obj(v32);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v36) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "IPSec Phase 1 started (Initiated by peer).\n",  (uint8_t *)&v36,  2u);
          }
        }
      }
    }

    else
    {
      free(v25);
    }

    sub_10002201C(a2, a3, a4);
  }

void sub_1000280B4(uint64_t a1, void *a2, const sockaddr *a3, uint64_t a4)
{
  if (sub_100015AEC(a1, a2) == 1)
  {
    int v7 = sub_100015DF8(a1);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = sub_10000A114(a3, a4, (uint64_t)v7);
      if ((int)v9 < 1)
      {
        sub_10002201C(v8, a3, a4);
        sub_10003F5BC(v8);
      }

      else
      {
        if (dword_10008BA20)
        {
          uint64_t v10 = (os_log_s *)ne_log_obj(v9);
          BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          if (v11)
          {
            int v15 = 136315138;
            uint64_t v16 = sub_10003C888(a3);
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Received (reassembled) retransmitted packet from %s.\n",  (uint8_t *)&v15,  0xCu);
          }

          if (dword_10008BA20)
          {
            uint64_t v12 = (os_log_s *)ne_log_obj(v11);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v13 = sub_10003C888(a3);
              int v15 = 136315138;
              uint64_t v16 = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "the reassembled packet is retransmitted by %s.\n",  (uint8_t *)&v15,  0xCu);
            }
          }
        }

        sub_10003F5BC(v8);
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_10005D7DC();
      }
    }
  }

void sub_10002827C(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = sub_1000468F0((void *)a1);
  if ((_DWORD)v5)
  {
    if (dword_10008BA20)
    {
      int v6 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10005D834();
      }
    }

    return;
  }

  int v7 = sub_100009738(16, 0);
  if (v7)
  {
    uint64_t v8 = (uint64_t)v7;
    *((_WORD *)v7 + 30) = 4097;
    sub_100004344((int *)v7 + 14, 6592);
    *(_BYTE *)(v8 + 105) = *(_BYTE *)(v4 + 19);
    *(_DWORD *)(v8 + 108) = *(_DWORD *)(v4 + 20);
    *(_DWORD *)(v8 + 100) = sub_100031350();
    uint64_t v9 = sub_10002E0FC(a1, *(_DWORD *)(v8 + 108));
    *(void *)(v8 + 240) = v9;
    if (!v9) {
      goto LABEL_38;
    }
    uint64_t v10 = (unsigned __int8 *)sub_10003CA00(*(unsigned __int8 **)(a1 + 48));
    *(void *)(v8 + 8) = v10;
    if (!v10) {
      goto LABEL_38;
    }
    int v11 = v10[1];
    if (v11 != 2 && v11 != 30)
    {
      if (!dword_10008BA20) {
        goto LABEL_38;
      }
      uint8_t v26 = (os_log_s *)ne_log_obj(v10);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }

    uint64_t v13 = (unsigned __int8 *)sub_10003CA00(*(unsigned __int8 **)(a1 + 56));
    *(void *)uint64_t v8 = v13;
    if (!v13) {
      goto LABEL_38;
    }
    int v14 = v13[1];
    if (v14 != 2 && v14 != 30)
    {
      if (!dword_10008BA20) {
        goto LABEL_38;
      }
      uint64_t v27 = (os_log_s *)ne_log_obj(v13);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        goto LABEL_38;
      }
LABEL_37:
      sub_10005C610();
LABEL_38:
      sub_100009928(v8);
      return;
    }

    uint64_t v15 = sub_10004B5C4(a1, (void *)v8);
    if (!(_DWORD)v15)
    {
      *(_BYTE *)(v8 + 264) &= ~2u;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(a1 + 28);
      if (dword_10008BA20)
      {
        uint64_t v16 = (os_log_s *)ne_log_obj(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
          sub_10005C5E4();
        }
      }

      int v17 = sub_10003C888(*(const sockaddr **)v8);
      int v18 = strdup((const char *)v17);
      if (!v18)
      {
        if (dword_10008BA20)
        {
          unsigned int v28 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_10005C498();
          }
        }

        exit(1);
      }

      int v19 = v18;
      if (dword_10008BA20)
      {
        __int16 v20 = (os_log_s *)ne_log_obj(v18);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v21 = sub_10003C888(*(const sockaddr **)(v8 + 8));
          int v29 = 136315394;
          uint64_t v30 = v19;
          __int16 v31 = 2080;
          BOOL v32 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "respond new phase 2 negotiation: %s<=>%s\n",  (uint8_t *)&v29,  0x16u);
        }

        int v22 = dword_10008BA20;
        free(v19);
        if (v22)
        {
          unsigned int v24 = (os_log_s *)ne_log_obj(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v29) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "IPSec Phase 2 started (Initiated by peer).\n",  (uint8_t *)&v29,  2u);
          }
        }
      }

      else
      {
        free(v18);
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v25 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_10005D808();
    }
  }

__int128 *sub_100028604(uint64_t *a1, uint64_t a2)
{
  return sub_100024670(*a1, *(_DWORD *)(a2 + 108));
}

  ;
}

  ;
}

void sub_100028634(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

__int128 *sub_100028640(uint64_t a1)
{
  return sub_100024670(a1, *(_DWORD *)(a1 + 84));
}

char *sub_10002864C(const sockaddr **a1)
{
  return sub_10003CB98(*a1);
}

uint64_t *sub_100028658(uint64_t a1, const sockaddr *a2)
{
  return sub_10003C888(a2);
}

  ;
}

void sub_100028678()
{
  qword_10008B848 = (uint64_t)calloc(1uLL, 0x140uLL);
  if (!qword_10008B848) {
    sub_10005D860();
  }
  sub_1000286D4();
  time_t v0 = (void *)qword_10008B848;
  *(_DWORD *)(qword_10008B848 + 28) = -1;
  void *v0 = "/etc/racoon/racoon.conf";
  uint64_t v1 = qword_10008B848;
  *(void *)(qword_10008B848 + 96) = 0LL;
  *(void *)(v1 + 104) = v1 + 96;
}

double sub_1000286D4()
{
  uint64_t v0 = qword_10008B848;
  *(void *)(qword_10008B848 + 8) = 0LL;
  *(_DWORD *)(v0 + 112) = 1;
  *(_DWORD *)(v0 + 16) = 294912500;
  *(_DWORD *)(v0 + 24) = 2;
  *(_OWORD *)(v0 + 248) = xmmword_10006A080;
  *(_OWORD *)(v0 + 264) = xmmword_10006A090;
  *(void *)(v0 + 280) = 0x1E0000001ELL;
  *(void *)&double result = 16LL;
  *(void *)(v0 + 304) = 16LL;
  *(_DWORD *)(v0 + 312) = 1;
  *(_DWORD *)(v0 + 288) = 20;
  *(void *)(v0 + 80) = *(_DWORD *)(v0 + 80) & 0xFFFFFFEE | 0x10;
  return result;
}

void sub_10002874C()
{
  uint64_t v0 = qword_10008B848;
  for (uint64_t i = 136LL; i != 176; i += 8LL)
  {
    int v2 = *(void **)(v0 + i);
    if (v2)
    {
      free(v2);
      *(void *)(qword_10008B848 + i) = 0LL;
      uint64_t v0 = qword_10008B848;
    }
  }

  do
  {
    uint64_t v3 = qword_10008B848;
    uint64_t v4 = *(void **)(qword_10008B848 + i);
    if (v4)
    {
      sub_10003F5BC(v4);
      uint64_t v3 = qword_10008B848;
    }

    *(void *)(v3 + i) = 0LL;
    i += 8LL;
  }

  while (i != 248);
  uint64_t v5 = *(void **)(qword_10008B848 + 296);
  if (v5)
  {
    sub_10003F5BC(v5);
    *(void *)(qword_10008B848 + 296) = 0LL;
  }

void sub_1000287D8()
{
  qword_10008B850 = qword_10008B848;
  qword_10008B848 = 0LL;
  sub_100028678();
}

void sub_1000287F0()
{
  qword_10008B848 = qword_10008B850;
  qword_10008B850 = 0LL;
}

size_t *sub_100028828(void *a1)
{
  if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      sub_10005D8A4();
    }
  }

  uint64_t v3 = (char *)calloc(1uLL, *a1 - 3LL);
  if (v3)
  {
    uint64_t v4 = v3;
    memcpy(v3, (const void *)(a1[1] + 4LL), *a1 - 4LL);
    v4[*a1 - 4] = 0;
    uint64_t v5 = sub_100028900(v4, *(_DWORD *)a1 - 4);
    free(v4);
  }

  else
  {
    if (dword_10008BA20)
    {
      int v6 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10005D878();
      }
    }

    return 0LL;
  }

  return v5;
}

size_t *sub_100028900(const char *a1, int a2)
{
  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_10005D980();
    }
  }

  uint64_t v5 = (FILE *)sub_100039EE0(*(const char **)(qword_10008B848 + 144), 1);
  if ((_DWORD)v5 || (uint64_t v5 = fopen(*(const char **)(qword_10008B848 + 144), "r")) == 0LL)
  {
    if (dword_10008BA20)
    {
      int v6 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10005D8D0(v6);
      }
    }

    return 0LL;
  }

  uint64_t v8 = v5;
  if (!fgets(__s1, 1024, v5)) {
    goto LABEL_31;
  }
  size_t v9 = a2;
  while (2)
  {
    char v10 = __s1[0];
    if (!__s1[0] || __s1[0] == 35) {
      goto LABEL_30;
    }
    int v11 = __s1;
    while ((v10 & 0x80) == 0)
    {
      if ((_DefaultRuneLocale.__runetype[v10] & 0x4000) != 0) {
        goto LABEL_21;
      }
LABEL_19:
      int v12 = *++v11;
      char v10 = v12;
      if (!v12) {
        goto LABEL_30;
      }
    }

    if (!__maskrune(v10, 0x4000uLL)) {
      goto LABEL_19;
    }
LABEL_21:
    if (!*v11) {
      goto LABEL_30;
    }
    char *v11 = 0;
    do
    {
      while (1)
      {
        __darwin_ct_rune_t v14 = *++v11;
        __darwin_ct_rune_t v13 = v14;
        if (v14 < 0) {
          break;
        }
        if ((_DefaultRuneLocale.__runetype[v13] & 0x4000) == 0) {
          goto LABEL_27;
        }
      }
    }

    while (__maskrune(v13, 0x4000uLL));
LABEL_27:
    if (!v13 || strncmp(__s1, a1, v9) || __s1[v9])
    {
LABEL_30:
      if (!fgets(__s1, 1024, v8)) {
        goto LABEL_31;
      }
      continue;
    }

    break;
  }

  size_t v16 = 0LL;
  for (size_t i = 0LL; v11[v16] && v11[v16] != 10; size_t i = v16)
    ++v16;
  v11[v16] = 0;
  if (strncmp(v11, "0x", 2uLL))
  {
    int v18 = 0LL;
    goto LABEL_43;
  }

  int v18 = sub_10003D750(v11 + 2, 16, &i);
  int v11 = v18;
  if (!v18)
  {
    if (dword_10008BA20)
    {
      BOOL v21 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_10005D878();
      }
    }

    goto LABEL_31;
  }

size_t *sub_100028BD4(sockaddr *a1)
{
  if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      sub_10005D9AC();
    }
  }

  if (getnameinfo(a1, a1->sa_len, __s, 0x401u, v5, 0x20u, 10))
  {
    __strlcpy_chk(__s, "(invalid)", 1025LL, 1025LL);
    __strlcpy_chk(v5, "(invalid)", 32LL, 32LL);
  }

  int v3 = strlen(__s);
  return sub_100028900(__s, v3);
}

void sub_100028CC4(char *__str, int a2, int a3, const char *a4)
{
  if (*a4 == 47)
  {
    uint64_t v5 = (const char *)&unk_10007E069;
    int v6 = (const char *)&unk_10007E069;
  }

  else
  {
    int v6 = *(const char **)(qword_10008B848 + 8LL * a3 + 136);
    uint64_t v5 = "/";
  }

  uint64_t v7 = snprintf(__str, a2, "%s%s%s", v6, v5, a4);
  if (dword_10008BA20)
  {
    uint64_t v8 = (os_log_s *)ne_log_obj(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10005D9D8((uint64_t)__str, v8);
    }
  }

uint64_t sub_100028D6C(unsigned int a1)
{
  if (a1 > 2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_10006A0A8[a1];
  }
}

uint64_t sub_100028D8C(int a1)
{
  if (a1) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1LL;
  }
}

uint64_t start(int a1, const char **a2)
{
  uint64_t v4 = geteuid();
  if ((_DWORD)v4) {
    sub_10005DC14(v4);
  }
  umask(0x3Fu);
  uint64_t v5 = umask(0x3Fu);
  if ((_DWORD)v5 != 63) {
    sub_10005DC00(v5);
  }
  sub_100028678();
  sub_100039000();
  sub_100029978();
  sub_10003F0EC();
  int v6 = strrchr(*a2, 47);
  qword_10008B9E8 = (uint64_t)v6;
  if (v6) {
    uint64_t v7 = v6 + 1;
  }
  else {
    uint64_t v7 = *a2;
  }
  qword_10008B9E8 = (uint64_t)v7;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = getopt(a1, (char *const *)a2, "dDLFp:P:a:f:l:vsZBCx46");
          if ((int)v8 > 101)
          {
            switch((int)v8)
            {
              case 'p':
                *(_WORD *)(qword_10008B848 + 16) = atoi(optarg);
                continue;
              case 'q':
              case 'r':
              case 't':
              case 'u':
              case 'w':
                goto LABEL_80;
              case 's':
                *(_DWORD *)(qword_10008B848 + 80) &= ~0x10u;
                continue;
              case 'v':
                ++dword_100088284;
                continue;
              case 'x':
                byte_10008878C = 1;
                continue;
              default:
                if ((_DWORD)v8 == 102)
                {
                  *(void *)qword_10008B848 = optarg;
                }

                else
                {
                  if ((_DWORD)v8 != 108) {
                    goto LABEL_80;
                  }
                  *(void *)(qword_10008B848 + 128) = optarg;
                }

                break;
            }
          }

          else
          {
            switch((_DWORD)v8)
            {
              case 'Z':
                puts("Local test mode.");
                dword_10008B858 = 1;
                break;
              case 'd':
                sub_1000343DC(7);
                break;
              case 'a':
                fprintf(__stderrp, "%s: the option is disabled in the configuration\n", (const char *)qword_10008B9E8);
                goto LABEL_79;
              default:
LABEL_80:
                sub_1000295CC();
            }
          }
        }

        switch((int)v8)
        {
          case 'C':
            ++dword_100088788;
            continue;
          case 'D':
            if (dword_10008B9F0) {
              goto LABEL_78;
            }
            dword_10008B860 = 1;
            continue;
          case 'E':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
            goto LABEL_80;
          case 'F':
            if (dword_10008B860)
            {
LABEL_78:
              fwrite("-D and -F are mutually exclusive\n", 0x21uLL, 1uLL, __stderrp);
              goto LABEL_79;
            }

            puts("Foreground mode.");
            dword_10008B9F0 = 1;
            break;
          case 'L':
            dword_10008B9F4 = 1;
            continue;
          default:
            if ((_DWORD)v8 != 80) {
              goto LABEL_80;
            }
            *(_WORD *)(qword_10008B848 + 18) = atoi(optarg);
            continue;
        }
      }

      if ((_DWORD)v8 != 52) {
        break;
      }
      *(_DWORD *)(qword_10008B848 + 24) = 2;
    }

    if ((_DWORD)v8 != 54) {
      break;
    }
    *(_DWORD *)(qword_10008B848 + 24) = 30;
  }

  if ((_DWORD)v8 != -1 || optind != a1) {
    goto LABEL_80;
  }
  if (dword_10008BA20)
  {
    size_t v9 = (os_log_s *)ne_log_obj(v8);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = getpid();
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = getppid();
      __int16 v34 = 1024;
      int v35 = dword_10008B860;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "racoon started: pid=%d  started by: %d, launchdlaunched %d\n",  buf,  0x14u);
    }

    if (dword_10008BA20)
    {
      int v11 = (os_log_s *)ne_log_obj(v10);
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      if (v12)
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = aRacoonIpsecToo_0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s\n", buf, 0xCu);
      }

      if (dword_10008BA20)
      {
        __darwin_ct_rune_t v13 = (os_log_s *)ne_log_obj(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *(void *)qword_10008B848;
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Reading configuration from %s\n",  buf,  0xCu);
        }
      }
    }
  }

  uint64_t v15 = sub_10002F284();
  if ((v15 & 0x80000000) != 0) {
    sub_10005DA4C(v15);
  }
  word_10008878E = *(_WORD *)(qword_10008B848 + 16);
  uint64_t v16 = sub_100052558(v15);
  if ((_DWORD)v16) {
    sub_10005DBEC(v16);
  }
  uint64_t v17 = qword_10008B848;
  *(_WORD *)(qword_10008B848 + 16) = word_10008878E;
  if (!*(void *)(v17 + 128) && !byte_10008BA24) {
    sub_10003432C(*(char **)(v17 + 168));
  }
  *(_DWORD *)buf = 4500;
  uint64_t result = sysctlbyname("net.inet.ipsec.esp_port", 0LL, 0LL, buf, 4uLL);
  if ((_DWORD)result) {
    sub_10005DBC0();
  }
  if (!(_DWORD)xmmword_10008BE38 || qword_10008BE90 || (uint64_t result = sub_100044DE4(255LL), !(_DWORD)result))
  {
    if (dword_100088788) {
      sub_1000390E0();
    }
    if (dword_10008B9F0)
    {
      close(0);
      goto LABEL_60;
    }

    if ((byte_10008878C & 1) != 0 || !dword_10008B860)
    {
      if (!byte_10008878C)
      {
        __envp = 0LL;
        if (a1 < 33)
        {
          if (daemon(0, 0) < 0) {
            sub_10005DAB8();
          }
          uint64_t v25 = setuid(0);
          if ((_DWORD)v25)
          {
            if (dword_10008BA20)
            {
              uint64_t v30 = (os_log_s *)ne_log_obj(v25);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                sub_10005DB94();
              }
            }
          }

          else
          {
            uint64_t v26 = setgid(0);
            if ((_DWORD)v26)
            {
              if (dword_10008BA20)
              {
                __int16 v31 = (os_log_s *)ne_log_obj(v26);
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                  sub_10005DB68();
                }
              }
            }

            else
            {
              *(void *)buf = "/usr/sbin/racoon";
              if (a1 >= 2) {
                memcpy(&buf[8], a2 + 1, 8LL * (a1 - 1));
              }
              uint64_t v27 = &buf[8 * a1];
              void *v27 = "-x";
              v27[1] = 0LL;
              uint64_t v28 = execve("/usr/sbin/racoon", (char *const *)buf, &__envp);
              if (dword_10008BA20)
              {
                int v29 = (os_log_s *)ne_log_obj(v28);
                if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                  sub_10005DADC(v29);
                }
              }
            }
          }
        }

        else if (dword_10008BA20)
        {
          unsigned int v24 = (os_log_s *)ne_log_obj(result);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            sub_10005DA8C();
          }
        }

LABEL_79:
        exit(1);
      }

      uint64_t v22 = atexit((void (*)(void))sub_1000294F8);
      if ((v22 & 0x80000000) != 0)
      {
        if (dword_10008BA20)
        {
          uint64_t v23 = (os_log_s *)ne_log_obj(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
LABEL_70:
          }
            sub_10005DA60();
        }
      }
    }

    else
    {
      if (dword_10008BA20)
      {
        int v19 = (os_log_s *)ne_log_obj(result);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "racoon launched by launchd.\n", buf, 2u);
        }
      }

      byte_10008878C = 1;
      uint64_t v20 = atexit((void (*)(void))sub_1000294F8);
      if ((v20 & 0x80000000) != 0)
      {
        if (dword_10008BA20)
        {
          BOOL v21 = (os_log_s *)ne_log_obj(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            goto LABEL_70;
          }
        }
      }
    }

        char v59 = v48 + v33;
        if (v59 <= *(int *)(v28 + 24))
        {
          BOOL v65 = *(void *)(v28 + 8);
          uint64_t v4 = &byte_10008A931[1743];
        }

        else
        {
          uint64_t v130 = v55;
          uint64_t v60 = v12;
          uint64_t v61 = v16;
          uint64_t v62 = v59 + (v48 >> 1);
          v133 = v27;
          v136 = v26;
          BOOL v63 = realloc(*(void **)(v28 + 8), v62);
          uint64_t v27 = v133;
          uint64_t v26 = v136;
          *(void *)(*(void *)(v136 + 8 * v133) + 8LL) = v63;
          int v64 = *(void *)(v136 + 8 * v133);
          BOOL v65 = *(void *)(v64 + 8);
          if (!v65) {
            sub_100054798("out of dynamic memory in yy_get_next_buffer()");
          }
          *(_DWORD *)(v64 + 24) = v62 - 2;
          uint64_t v4 = byte_10008A931 + 1743;
          uint64_t v16 = v61;
          BOOL v10 = byte_10008A931 + 1743;
          int v11 = byte_10006C39C;
          BOOL v12 = v60;
          uint64_t v14 = byte_10008A931 + 1743;
          uint64_t v15 = byte_10008A931 + 1743;
          a3 = &jpt_1000529FC;
          uint64_t v17 = v131;
          uint64_t v55 = v130;
        }

        qword_10008B320 = v59;
        *(_BYTE *)(v65 + v59) = 0;
        *(_BYTE *)(v59 + *(void *)(*(void *)(v26 + 8 * v27) + 8LL) + 1) = 0;
        BOOL v32 = *(char **)(*(void *)(v26 + 8 * v27) + 8LL);
        uint64_t v5 = &byte_10008BE9C[356];
        qword_10008C760 = (uint64_t)v32;
        if (v55 == 1)
        {
          int v36 = *((int *)v10 + 191);
          __darwin_ct_rune_t v13 = word_100070436;
LABEL_85:
          *((void *)v4 + 97) = &v32[v36];
          int v3 = &byte_10008A931[1743];
          __int16 v66 = dword_10008B2E4;
          if (dword_10008B2E4 >= 1) {
            __int16 v66 = dword_10008B2E4 - 1;
          }
          uint64_t v23 = (v66 >> 1) + 303;
          goto LABEL_28;
        }

        if (v55)
        {
          __darwin_ct_rune_t v13 = word_100070436;
          __int16 v31 = *(_BYTE **)(*(void *)(qword_10008B2E8 + 8 * qword_10008B2F0) + 8LL);
          int v29 = qword_10008B320;
          int v36 = *((int *)v10 + 191);
LABEL_91:
          int v19 = &v31[v29];
          *((void *)v4 + 97) = &v31[v29];
          uint64_t v67 = v16;
          uint64_t v68 = v11;
          uint64_t v69 = v13;
          LODWORD(v18) = sub_1000546B8();
          a3 = &jpt_1000529FC;
          uint64_t v15 = byte_10008A931 + 1743;
          uint64_t v14 = byte_10008A931 + 1743;
          __darwin_ct_rune_t v13 = v69;
          BOOL v12 = byte_10008A931 + 1743;
          int v11 = v68;
          uint64_t v16 = v67;
          BOOL v10 = byte_10008A931 + 1743;
          uint64_t v4 = byte_10008A931 + 1743;
          int v6 = byte_10008A931 + 1743;
          uint64_t v17 = (char *)(*((void *)v5 + 236) + v36);
          int v3 = byte_10008A931 + 1743;
          continue;
        }

        int v19 = &v32[~(_DWORD)v127 + (int)v19];
        *((void *)v4 + 97) = v19;
        uint8_t v76 = v16;
        v77 = v11;
        int v78 = v14;
        LODWORD(v18) = sub_1000546B8();
        a3 = &jpt_1000529FC;
        uint64_t v15 = byte_10008A931 + 1743;
        uint64_t v14 = v78;
        BOOL v12 = byte_10008A931 + 1743;
        int v11 = v77;
        uint64_t v16 = v76;
        BOOL v10 = &byte_10008A931[1743];
        uint64_t v4 = byte_10008A931 + 1743;
        uint64_t v17 = (char *)(qword_10008C760 + dword_10008B2FC);
        int v3 = byte_10008A931 + 1743;
        __darwin_ct_rune_t v13 = word_100070436;
        goto LABEL_18;
      case 303:
      case 304:
      case 305:
      case 306:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
        if (qword_10008B2E8) {
          uint64_t v79 = *(void ***)(qword_10008B2E8 + 8 * qword_10008B2F0);
        }
        else {
          uint64_t v79 = 0LL;
        }
        sub_100054418(v79);
        while (1)
        {
          uint64_t v80 = dword_10008B330[0];
          char v81 = --dword_10008B330[0];
          __int16 v82 = &dword_10008B330[32 * v81];
          __int128 v85 = *((void *)v82 + 5);
          int v83 = (glob_t *)(v82 + 10);
          v84 = v85;
          if (!v85) {
            break;
          }
          __int128 v86 = *(void *)&dword_10008B330[32 * v81 + 18];
          if (!v86) {
            break;
          }
          __int128 v87 = &dword_10008B330[32 * v81];
          __int128 v90 = v87[32];
          __int128 v88 = v87 + 32;
          __int128 v89 = v90;
          if (v84 <= v90) {
            break;
          }
          __int128 v91 = *(const char **)(v86 + 8 * v89);
          *__int128 v88 = v89 + 1;
          dword_10008B330[0] = v80;
          if (!sub_100054480(v91))
          {
            __int128 v92 = sub_1000542C4((FILE *)qword_10008C740, 0x4000);
            sub_1000545F8(v92);
            int v3 = &byte_10008A931[1743];
            dword_10008B2E4 = 3;
            goto LABEL_112;
          }
        }

        globfree(v83);
        if (dword_10008B330[0])
        {
          sub_1000545F8(*(void *)&dword_10008B330[32 * (uint64_t)dword_10008B330[0] + 6]);
          int v3 = byte_10008A931 + 1743;
LABEL_112:
          uint64_t v4 = byte_10008A931 + 1743;
          uint64_t v16 = byte_10008BE9C + 356;
          int v11 = byte_10006C39C;
          BOOL v12 = byte_10008A931 + 1743;
          __darwin_ct_rune_t v13 = word_100070436;
          uint64_t v14 = byte_10008A931 + 1743;
          uint64_t v15 = byte_10008A931 + 1743;
          a3 = &jpt_1000529FC;
          goto LABEL_15;
        }

        return 0LL;
      default:
        sub_100054798("fatal flex scanner internal error--no action found");
    }
  }

uint64_t sub_1000294F8()
{
  uint64_t result = getpid();
  if (dword_10008B85C == (_DWORD)result)
  {
    uint64_t v1 = *(const char **)(qword_10008B848 + 160);
    if (v1)
    {
      if (*v1 != 47)
      {
        __strlcat_chk(v2, "/var/run/", 1024LL, 1024LL);
        __strlcat_chk(v2, *(void *)(qword_10008B848 + 160), 1024LL, 1024LL);
        return unlink(v2);
      }
    }

    else
    {
      uint64_t v1 = "/var/run/racoon.pid";
    }

    __strlcpy_chk(v2, v1, 1024LL, 1024LL);
    return unlink(v2);
  }

  return result;
}

void sub_1000295CC()
{
}

void sub_1000296AC(uint64_t a1, const char *a2)
{
}

uint64_t sub_1000296B4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = 0LL; i != a2; ++i)
    {
      if (i && (i & 0x1F) == 0) {
        putchar(10);
      }
      if ((i & 3) == 0) {
        putchar(32);
      }
      printf("%02x", *(unsigned __int8 *)(a1 + i));
    }
  }

  putchar(10);
  return 0LL;
}

const char *sub_100029740(unsigned int a1, int a2)
{
  if (a2 > 128) {
    return "Failed to convert.";
  }
  int v2 = byte_100088790;
  __memset_chk(byte_100088790, 48LL, a2, 129LL);
  byte_100088790[a2] = 0;
  int v5 = a2 - 1;
  if (a2 >= 1)
  {
    uint64_t v6 = 0LL;
    do
    {
      if (((a1 >> v6) & 1) != 0) {
        byte_100088790[v5] = 49;
      }
      ++v6;
      --v5;
    }

    while (a2 != v6);
  }

  return v2;
}

char *sub_1000297D0(const char *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    snprintf(byte_100088811, 0x400uLL, "%s:%d:%s()");
  }
  else {
    snprintf(byte_100088811, 0x400uLL, "%s:%d");
  }
  return byte_100088811;
}

uint64_t sub_100029858(const char *a1)
{
  if (stat(a1, &v2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return LODWORD(v2.st_size);
  }
}

double sub_100029884(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a1 + 8);
  if (v2 >= v3)
  {
    uint64_t v4 = -*(void *)a1;
  }

  else
  {
    v2 += 1000000;
    uint64_t v4 = ~*(void *)a1;
  }

  return (double)(v2 - v3) / 1000000.0 + (double)(*(void *)a2 + v4);
}

char *sub_1000298D0(char *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    int v4 = 0;
    int v5 = a1;
    while (1)
    {
      __darwin_ct_rune_t v7 = *v5++;
      __darwin_ct_rune_t v6 = v7;
      if (v7 < 0)
      {
        if (__maskrune(v6, 0x800uLL)) {
          goto LABEL_10;
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v6] & 0x800) != 0)
      {
        goto LABEL_10;
      }

      if (!v4 || a1[v4 - 1] == 32) {
        goto LABEL_11;
      }
      LOBYTE(v6) = 32;
LABEL_10:
      a1[v4++] = v6;
LABEL_11:
      if (!--v3) {
        goto LABEL_14;
      }
    }
  }

  int v4 = 0;
LABEL_14:
  a1[v4] = 0;
  return a1;
}

uint64_t sub_100029978()
{
  int v2 = sub_10003D750( "FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD129024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DDEF951 9B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245E485B576 625E7EC6 F44C42E9 A63A3620 FFFFFFFF FFFFFFFF",  16,  &v1);
  *(_OWORD *)&qword_10008B990 = 0u;
  unk_10008B9A0 = 0u;
  qword_10008B9B0 = 0LL;
  qword_10008B988 = 0x100000001LL;
  qword_10008B990 = (uint64_t)sub_10003F5F0((uint64_t)&v1);
  qword_10008B998 = 2LL;
  free(v2);
  int v2 = sub_10003D750( "FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD129024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DDEF951 9B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7EDEE386BFB 5 A899FA5 AE9F2411 7C4B1FE6 49286651 ECE65381FFFFFFFF FFFFFFFF",  16,  &v1);
  *(_OWORD *)&qword_10008B870 = 0u;
  unk_10008B880 = 0u;
  qword_10008B890 = 0LL;
  qword_10008B868 = 0x100000002LL;
  qword_10008B870 = (uint64_t)sub_10003F5F0((uint64_t)&v1);
  qword_10008B878 = 2LL;
  free(v2);
  int v2 = sub_10003D750( "FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD129024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DDEF951 9B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7EDEE386BFB 5 A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3DC2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F83655D23 DCA3AD 96 1C62F356 208552BB 9ED52907 7096966D670C354E 4ABC9804 F1746C08 CA237327 FFFFFFFF FFFFFFFF",  16,  &v1);
  *(_OWORD *)&qword_10008B8A0 = 0u;
  *(_OWORD *)algn_10008B8B0 = 0u;
  qword_10008B8C0 = 0LL;
  qword_10008B898 = 0x100000005LL;
  qword_10008B8A0 = (uint64_t)sub_10003F5F0((uint64_t)&v1);
  qword_10008B8A8 = 2LL;
  free(v2);
  int v2 = sub_10003D750( "FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD129024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DDEF951 9B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7EDEE386BFB 5 A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3DC2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F83655D23 DCA3AD 96 1C62F356 208552BB 9ED52907 7096966D670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3BE39E772C 180E8603 9B 2783A2 EC07A28F B5C55DF0 6F4C52C9DE2BCBF6 95581718 3995497C EA956AE5 15D22618 98FA051015728E5A 8AACAA68 FFFFFFFF FFFFFFFF",  16,  &v1);
  *(_OWORD *)&qword_10008B8D0 = 0u;
  unk_10008B8E0 = 0u;
  qword_10008B8F0 = 0LL;
  qword_10008B8C8 = 0x10000000ELL;
  qword_10008B8D0 = (uint64_t)sub_10003F5F0((uint64_t)&v1);
  qword_10008B8D8 = 2LL;
  free(v2);
  int v2 = sub_10003D750( "FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD129024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DDEF951 9B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7EDEE386BFB 5 A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3DC2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F83655D23 DCA3AD 96 1C62F356 208552BB 9ED52907 7096966D670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3BE39E772C 180E8603 9B 2783A2 EC07A28F B5C55DF0 6F4C52C9DE2BCBF6 95581718 3995497C EA956AE5 15D22618 98FA051015728E5A 8AAAC42D AD33170 D 04507A33 A85521AB DF1CBA64ECFB8504 58DBEF0A 8AEA7157 5D060C7D B3970F85 A6E1E4C7ABF5AE8C DB0933D7 1E8C94E0 4A2 5619D CEE3D226 1AD2EE6BF12FFA06 D98A0864 D8760273 3EC86A64 521F2B18 177B200CBBE11757 7A615D6C 770988C0 BAD946E2 08E24FA0 74E5AB3143DB5BFC E0FD108E 4B82D120 A93AD2CA FFFFFFFF FFFFFFFF",  16,  &v1);
  *(_OWORD *)&qword_10008B900 = 0u;
  *(_OWORD *)algn_10008B910 = 0u;
  qword_10008B920 = 0LL;
  qword_10008B8F8 = 0x10000000FLL;
  qword_10008B900 = (uint64_t)sub_10003F5F0((uint64_t)&v1);
  qword_10008B908 = 2LL;
  free(v2);
  int v2 = subv1);
  *(_OWORD *)&qword_10008B930 = 0u;
  unk_10008B940 = 0u;
  qword_10008B950 = 0LL;
  qword_10008B928 = 0x100000010LL;
  qword_10008B930 = (uint64_t)sub_10003F5F0((uint64_t)&v1);
  qword_10008B938 = 2LL;
  free(v2);
  int v2 = subv1);
  *(_OWORD *)&qword_10008B960 = 0u;
  *(_OWORD *)algn_10008B970 = 0u;
  qword_10008B980 = 0LL;
  qword_10008B958 = 0x100000011LL;
  qword_10008B960 = (uint64_t)sub_10003F5F0((uint64_t)&v1);
  qword_10008B968 = 2LL;
  free(v2);
  int v2 = subv1);
  *(_OWORD *)&qword_10008B9C0 = 0u;
  *(_OWORD *)algn_10008B9D0 = 0u;
  qword_10008B9E0 = 0LL;
  qword_10008B9B8 = 0x100000012LL;
  qword_10008B9C0 = (uint64_t)sub_10003F5F0((uint64_t)&v1);
  qword_10008B9C8 = 2LL;
  free(v2);
  return 0LL;
}

void sub_100029C48(void *a1)
{
  int v2 = (void *)a1[1];
  if (v2)
  {
    sub_10003F5BC(v2);
    a1[1] = 0LL;
  }

  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    sub_10003F5BC(v3);
    a1[3] = 0LL;
  }

  int v4 = (void *)a1[4];
  if (v4)
  {
    sub_10003F5BC(v4);
    a1[4] = 0LL;
  }

  int v5 = (void *)a1[5];
  if (v5) {
    sub_10003F5BC(v5);
  }
  free(a1);
}

uint64_t sub_100029CA4(BOOL a1, void *a2, void **a3, void *a4)
{
  uint64_t v7 = a1;
  if (dword_10008BA20)
  {
    uint64_t v8 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
    if (a1) {
      sub_10005DD18();
    }
  }

  if (*a2 != **(void **)(v7 + 8))
  {
    if (dword_10008BA20)
    {
      uint64_t v15 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_10005DCAC();
      }
    }

    goto LABEL_16;
  }

  size_t v9 = SecDHGetMaxKeyLength(*a4);
  BOOL v10 = sub_10003F4BC(v9);
  if (!v10)
  {
    if (dword_10008BA20)
    {
      uint64_t v16 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_10005DC28();
      }
    }

uint64_t sub_100029E9C(BOOL a1, size_t **a2, void *a3)
{
  uint64_t v5 = a1;
  if (dword_10008BA20)
  {
    __darwin_ct_rune_t v6 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    if (a1) {
      sub_10005DF14();
    }
  }

  *a2 = 0LL;
  int v7 = *(_DWORD *)(v5 + 4);
  if ((v7 - 2) >= 2)
  {
    if (v7 != 1)
    {
      if (dword_10008BA20)
      {
        int v11 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_10005DD44();
        }
      }

      goto LABEL_16;
    }

    uint64_t v9 = SecDHCreate(2LL, *(void *)(*(void *)(v5 + 8) + 8LL), **(void **)(v5 + 8), 0LL, 0LL, 0LL, a3);
    if ((_DWORD)v9)
    {
      if (dword_10008BA20)
      {
        BOOL v10 = (os_log_s *)ne_log_obj(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_10005DE84();
        }
      }

      goto LABEL_16;
    }

    size_t v14 = SecDHGetMaxKeyLength(*a3);
    size_t v12 = sub_10003F4BC(v14);
    size_t v15 = v12[1];
    size_t __n = *v12;
    uint64_t v16 = SecDHGenerateKeypair(*a3, v15, &__n);
    if ((_DWORD)v16)
    {
      if (dword_10008BA20)
      {
        uint64_t v17 = (os_log_s *)ne_log_obj(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_10005DE58();
        }
      }

      goto LABEL_17;
    }

    if (dword_10008BA20)
    {
      int v18 = (os_log_s *)ne_log_obj(v16);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
        sub_10005DE2C();
      }
    }

    int v19 = sub_10003F4BC(v14);
    *a2 = v19;
    if (!v19)
    {
      if (dword_10008BA20)
      {
        uint64_t v26 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          sub_10005DC28();
        }
      }

      goto LABEL_17;
    }

    memcpy((void *)(v19[1] + v14 - __n), (const void *)v12[1], __n);
    uint64_t v20 = *(size_t **)(v5 + 8);
    BOOL v21 = *a2;
    size_t v22 = *v20;
    size_t v23 = **a2;
    if (*v20 != v23)
    {
      if (*v20 < v23)
      {
        if (!dword_10008BA20) {
          goto LABEL_17;
        }
        unsigned int v24 = (os_log_s *)ne_log_obj(v22);
        BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
        if (v25) {
          sub_10005DDD4();
        }
LABEL_42:
        if (dword_10008BA20)
        {
          uint64_t v30 = (os_log_s *)ne_log_obj(v25);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            sub_10005DDA8();
          }
        }

        goto LABEL_17;
      }

      uint64_t v27 = sub_10003F4BC(v22);
      if (!v27)
      {
        if (!dword_10008BA20) {
          goto LABEL_17;
        }
        int v29 = (os_log_s *)ne_log_obj(0LL);
        BOOL v25 = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
        if (v25) {
          sub_10005DE00();
        }
        goto LABEL_42;
      }

      uint64_t v28 = v27;
      memcpy((void *)(v27[1] + *v20 - *v21), (const void *)v21[1], *v21);
      sub_10003F5BC(*a2);
      *a2 = v28;
    }

    sub_10003F5BC(v12);
    return 0LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v8 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10005DEB0();
    }
  }

uint64_t sub_10002A198(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 0LL;
  uint64_t v3 = sub_100005208(a1);
  if (!v3)
  {
    if (dword_10008BA20)
    {
      int v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_10005DF40();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v4 = v3;
  if (!*((_DWORD *)v3 + 1) || !v3[1] || !*((_DWORD *)v3 + 4))
  {
    if (dword_10008BA20)
    {
      BOOL v10 = (os_log_s *)ne_log_obj(v3);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10005DFA0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v5 = calloc(1uLL, 0x30uLL);
  *(void *)a2 = v5;
  if (v5)
  {
    __int128 v6 = *(_OWORD *)v4;
    __int128 v7 = *((_OWORD *)v4 + 2);
    v5[1] = *((_OWORD *)v4 + 1);
    _DWORD v5[2] = v7;
    *uint64_t v5 = v6;
    uint64_t v8 = sub_10003F5F0((uint64_t)v4[1]);
    uint64_t result = 0LL;
    *(void *)(*(void *)a2 + 8LL) = v8;
    return result;
  }

  if (!dword_10008BA20) {
    return 0LL;
  }
  size_t v12 = (os_log_s *)ne_log_obj(0LL);
  uint64_t result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    sub_10005DE00();
    return 0LL;
  }

  return result;
}

uint64_t sub_10002A2C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 72);
  if (!v3 || *(_BYTE *)(a3 + 80) != 16 || (uint64_t result = sub_100004C9C(*(unsigned int *)(v3 + 52), result, a2)) == 0)
  {
    if (dword_10008BA20)
    {
      int v4 = (os_log_s *)ne_log_obj(result);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_10005E000();
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10002A350(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  if (v2 && *(_BYTE *)(a2 + 80) == 16) {
    int v3 = *(_DWORD *)(v2 + 52);
  }
  else {
    int v3 = 1;
  }
  uint64_t v4 = sub_100004C20(v3, a1);
  if (!v4)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10005E060();
      }
    }
  }

  return v4;
}

uint64_t sub_10002A3E0(uint64_t a1, int a2)
{
  if (*(_DWORD *)(*(void *)(a1 + 128) + 20LL))
  {
    uint64_t v4 = *(void **)(a1 + 176);
    if (v4)
    {
      if ((sub_100029CA4(*(void *)(a1 + 152), v4, (void **)(a1 + 184), (void *)(a1 + 144)) & 0x80000000) != 0) {
        return 0xFFFFFFFFLL;
      }
    }
  }

  if ((sub_10002A488(a1, a2, 1) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = sub_10002A488(a1, a2, 0);
  if ((v5 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (dword_10008BA20)
  {
    __int128 v6 = (os_log_s *)ne_log_obj(v5);
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    if (!(_DWORD)result) {
      return result;
    }
    sub_10005E0C0();
  }

  return 0LL;
}

uint64_t sub_10002A488(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)(*(void *)(a1 + 128) + 20LL) && (__int128 v6 = *(void **)(a1 + 184)) != 0LL)
  {
    uint64_t v7 = *v6 + 5LL;
    int v8 = 1;
  }

  else
  {
    int v8 = 0;
    LODWORD(v7) = 5;
  }

  uint64_t v9 = sub_10003F4BC((int)v7 + **(_DWORD **)(a1 + 208) + **(_DWORD **)(a1 + 216));
  if (!v9)
  {
    if (dword_10008BA20)
    {
      uint64_t v39 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
        sub_10005E0EC();
      }
    }

LABEL_75:
  for (uint64_t i = *(void **)(*(void *)(a1 + 128) + 32LL); i; uint64_t i = (void *)i[9])
  {
    int v43 = (void *)i[4];
    if (v43)
    {
      sub_10003F5BC(v43);
      i[4] = 0LL;
    }

    int v44 = (void *)i[5];
    if (v44)
    {
      sub_10003F5BC(v44);
      i[5] = 0LL;
    }
  }

  uint64_t v37 = 0xFFFFFFFFLL;
  if (v9) {
    goto LABEL_82;
  }
LABEL_83:
  if (v18) {
    sub_10003F5BC(v18);
  }
  return v37;
}

uint64_t sub_10002A968(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v6 = sub_10003F4BC(*(_DWORD *)a3 + 5);
  if (v6)
  {
    uint64_t v7 = v6;
    *(_BYTE *)v6[1] = 0;
    *(_DWORD *)(v6[1] + 1LL) = a2;
    memcpy((void *)(v6[1] + 5LL), *(const void **)(a3 + 8), *(void *)a3);
    uint64_t v8 = sub_10002A2C8(*(void *)(a1 + 208), (uint64_t)v7, a1);
    sub_10003F5BC(v7);
    return v8;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "failed to get hash buffer\n", v11, 2u);
      }
    }

    return 0LL;
  }

uint64_t sub_10002AA48(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v6 = sub_10003F4BC(*(_DWORD *)a3 + 4);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (_DWORD *)v6[1];
    *uint64_t v8 = a2;
    memcpy(v8 + 1, *(const void **)(a3 + 8), *(void *)a3);
    uint64_t v9 = sub_10002A2C8(*(void *)(a1 + 208), (uint64_t)v7, a1);
    sub_10003F5BC(v7);
    return v9;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "failed to get hash buffer\n", v12, 2u);
      }
    }

    return 0LL;
  }

uint64_t sub_10002AB18(uint64_t a1, int a2)
{
  if (a2 == 1) {
    uint64_t v4 = 312LL;
  }
  else {
    uint64_t v4 = 320LL;
  }
  uint64_t v5 = sub_10003F4BC(**(_DWORD **)(a1 + 152)
                   + **(_DWORD **)(a1 + 160)
                   + **(_DWORD **)(a1 + 336)
                   + **(_DWORD **)(a1 + v4) + 16);
  if (v5)
  {
    __int128 v6 = v5;
    BOOL v7 = a2 == 1;
    BOOL v8 = a2 == 1;
    BOOL v9 = a2 != 1;
    uint64_t v10 = v5[1];
    if (v7) {
      uint64_t v11 = 152LL;
    }
    else {
      uint64_t v11 = 160LL;
    }
    uint64_t v12 = *(void *)(a1 + v11);
    if (v7) {
      uint64_t v13 = 160LL;
    }
    else {
      uint64_t v13 = 152LL;
    }
    memcpy((void *)v5[1], *(const void **)(v12 + 8), *(void *)v12);
    uint64_t v14 = (char *)(v10 + *(void *)v12);
    uint64_t v15 = *(void *)(a1 + v13);
    memcpy(v14, *(const void **)(v15 + 8), *(void *)v15);
    uint64_t v16 = &v14[*(void *)v15];
    if (*(_DWORD *)(a1 + 20)) {
      uint64_t v17 = 8LL * v8;
    }
    else {
      uint64_t v17 = 8LL * v9;
    }
    *(void *)uint64_t v16 = *(void *)(a1 + v17);
    if (*(_DWORD *)(a1 + 20)) {
      uint64_t v18 = 8LL * v9;
    }
    else {
      uint64_t v18 = 8LL * v8;
    }
    *((void *)v16 + 1) = *(void *)(a1 + v18);
    uint64_t v19 = v16 + 16;
    uint64_t v20 = *(void *)(a1 + 336);
    memcpy(v16 + 16, *(const void **)(v20 + 8), *(void *)v20);
    memcpy((char *)v19 + *(void *)v20, *(const void **)(*(void *)(a1 + v4) + 8LL), **(void **)(a1 + v4));
    uint64_t v21 = sub_10002A2C8(*(void *)(a1 + 192), (uint64_t)v6, a1);
    sub_10003F5BC(v6);
    return v21;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v23 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_10005E144();
      }
    }

    return 0LL;
  }

uint64_t sub_10002AC9C(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 81) != 1)
  {
    if (dword_10008BA20)
    {
      BOOL v7 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10005E1FC();
      }
    }

    return 0LL;
  }

  int v4 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
  if (*(void *)(*(void *)(a1 + 64) + 272LL)) {
    BOOL v5 = v4 == 65001;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    goto LABEL_21;
  }
  if (v4 <= 64220)
  {
    if ((v4 - 4) >= 2 && v4 != 1)
    {
      if (v4 != 3)
      {
LABEL_57:
        if (dword_10008BA20)
        {
          uint64_t v30 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            sub_10005E19C();
          }
        }

        return 0LL;
      }

      goto LABEL_45;
    }

    goto LABEL_21;
  }

  if ((v4 - 65002) <= 8)
  {
    int v6 = 1 << (v4 + 22);
    if ((v6 & 0x1E1) == 0)
    {
      if ((v6 & 0x18) != 0) {
        goto LABEL_45;
      }
      goto LABEL_10;
    }

LABEL_45:
  uint64_t v23 = sub_10003F4BC(**(_DWORD **)(a1 + 184) + **(_DWORD **)(a1 + 176));
  if (!v23)
  {
    if (dword_10008BA20)
    {
      unint64_t v29 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_10005E144();
      }
    }

    return 0LL;
  }

  uint64_t v14 = v23;
  uint64_t v24 = v23[1];
  if (a2 == 1) {
    uint64_t v25 = 184LL;
  }
  else {
    uint64_t v25 = 176LL;
  }
  uint64_t v26 = *(void *)(a1 + v25);
  if (a2 == 1) {
    uint64_t v27 = 176LL;
  }
  else {
    uint64_t v27 = 184LL;
  }
  memcpy((void *)v23[1], *(const void **)(v26 + 8), *(void *)v26);
  memcpy((void *)(v24 + *(void *)v26), *(const void **)(*(void *)(a1 + v27) + 8LL), **(void **)(a1 + v27));
  uint64_t v28 = sub_10002A350((uint64_t)v14, a1);
  if (!v28)
  {
    uint64_t v19 = 0LL;
    goto LABEL_33;
  }

  uint64_t v10 = (void *)v28;
  sub_10003F5BC(v14);
  uint64_t v9 = (uint64_t)v10;
LABEL_23:
  if (a2 == 1) {
    uint64_t v11 = 152LL;
  }
  else {
    uint64_t v11 = 160LL;
  }
  if (a2 == 1) {
    uint64_t v12 = 312LL;
  }
  else {
    uint64_t v12 = 320LL;
  }
  uint64_t v13 = sub_10003F4BC(**(_DWORD **)(a1 + v11) + **(_DWORD **)(a1 + 336) + **(_DWORD **)(a1 + v12) + 16);
  uint64_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = (char *)v13[1];
    uint64_t v16 = *(void *)(a1 + v11);
    memcpy(v15, *(const void **)(v16 + 8), *(void *)v16);
    uint64_t v17 = &v15[*(void *)v16];
    *(void *)uint64_t v17 = *(void *)a1;
    *((void *)v17 + 1) = *(void *)(a1 + 8);
    uint64_t v18 = v17 + 16;
    memcpy(v17 + 16, *(const void **)(*(void *)(a1 + 336) + 8LL), **(void **)(a1 + 336));
    memcpy( (char *)v18 + **(void **)(a1 + 336),  *(const void **)(*(void *)(a1 + v12) + 8LL),  **(void **)(a1 + v12));
    uint64_t v19 = sub_10002A2C8(v9, (uint64_t)v14, a1);
    if (!v10) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  if (dword_10008BA20)
  {
    int v22 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_10005E144();
    }
  }

  uint64_t v19 = 0LL;
  if (v10) {
LABEL_31:
  }
    sub_10003F5BC(v10);
LABEL_32:
  if (v14) {
LABEL_33:
  }
    sub_10003F5BC(v14);
  return v19;
}

  if (v56)
  {
    int v54 = sub_1000422D8(v54, v41, (char *)a16, (char *)a17, (char *)a15, a18);
    if (!v54) {
      goto LABEL_49;
    }
  }

  if (v54 + 32 > v41) {
    goto LABEL_49;
  }
  *(_OWORD *)int v54 = 0u;
  *(_OWORD *)(v54 + 16) = 0u;
  *(void *)int v54 = 196612LL;
  *(void *)(v54 + 8) = 0LL;
  *(void *)(v54 + 16) = a10;
  *(void *)(v54 + 24) = a11;
  if (v54 + 32 + a13 != v41) {
    goto LABEL_49;
  }
  memcpy((void *)(v54 + 32), __src, a13);
  BOOL v32 = sub_100040810(a1, v38, v53);
  free(v38);
  if ((v32 & 0x80000000) == 0)
  {
    __ipsec_errcode = 0;
    return v32;
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10002AFE8(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 81) != 1)
  {
    if (dword_10008BA20)
    {
      BOOL v8 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_10005E1FC();
      }
    }

    return 0LL;
  }

  int v4 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
  if (*(void *)(*(void *)(a1 + 64) + 272LL)) {
    BOOL v5 = v4 == 65001;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    if (v4 > 65004)
    {
    }

    else if ((v4 - 64221) >= 2 && v4 != 3)
    {
LABEL_11:
      if (dword_10008BA20)
      {
        BOOL v7 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_10005E19C();
        }
      }

      return 0LL;
    }
  }

  uint64_t v10 = sub_10003F4BC(**(_DWORD **)(a1 + 184) + **(_DWORD **)(a1 + 176));
  if (!v10)
  {
    if (dword_10008BA20)
    {
      unint64_t v29 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_10005E144();
      }
    }

    return 0LL;
  }

  uint64_t v11 = v10;
  uint64_t v12 = v10[1];
  if (a2 == 1) {
    uint64_t v13 = 184LL;
  }
  else {
    uint64_t v13 = 176LL;
  }
  uint64_t v14 = *(void *)(a1 + v13);
  if (a2 == 1) {
    uint64_t v15 = 176LL;
  }
  else {
    uint64_t v15 = 184LL;
  }
  memcpy((void *)v10[1], *(const void **)(v14 + 8), *(void *)v14);
  memcpy((void *)(v12 + *(void *)v14), *(const void **)(*(void *)(a1 + v15) + 8LL), **(void **)(a1 + v15));
  uint64_t v16 = (void *)sub_10002A350((uint64_t)v11, a1);
  sub_10003F5BC(v11);
  if (!v16) {
    return 0LL;
  }
  if (a2 == 1) {
    uint64_t v17 = 160LL;
  }
  else {
    uint64_t v17 = 152LL;
  }
  if (a2 == 1) {
    uint64_t v18 = 152LL;
  }
  else {
    uint64_t v18 = 160LL;
  }
  if (a2 == 1) {
    uint64_t v19 = 320LL;
  }
  else {
    uint64_t v19 = 312LL;
  }
  uint64_t v20 = sub_10003F4BC(**(_DWORD **)(a1 + v17)
                    + **(_DWORD **)(a1 + v18)
                    + **(_DWORD **)(a1 + 336)
                    + **(_DWORD **)(a1 + v19) + 16);
  if (v20)
  {
    uint64_t v21 = v20;
    int v22 = (char *)v20[1];
    uint64_t v23 = *(void *)(a1 + v17);
    memcpy(v22, *(const void **)(v23 + 8), *(void *)v23);
    uint64_t v24 = &v22[*(void *)v23];
    uint64_t v25 = *(void *)(a1 + v18);
    memcpy(v24, *(const void **)(v25 + 8), *(void *)v25);
    uint64_t v26 = &v24[*(void *)v25];
    *(void *)uint64_t v26 = *(void *)a1;
    *((void *)v26 + 1) = *(void *)(a1 + 8);
    uint64_t v27 = v26 + 16;
    memcpy(v26 + 16, *(const void **)(*(void *)(a1 + 336) + 8LL), **(void **)(a1 + 336));
    memcpy( (char *)v27 + **(void **)(a1 + 336),  *(const void **)(*(void *)(a1 + v19) + 8LL),  **(void **)(a1 + v19));
    uint64_t v28 = sub_10002A2C8((uint64_t)v16, (uint64_t)v21, a1);
    sub_10003F5BC(v21);
  }

  else
  {
    if (dword_10008BA20)
    {
      int v31 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        sub_10005E144();
      }
    }

    uint64_t v28 = 0LL;
  }

  sub_10003F5BC(v16);
  return v28;
}

uint64_t sub_10002B2CC(uint64_t a1)
{
  uint64_t v1 = a1;
  CFTypeRef cf = 0LL;
  uint64_t v2 = a1 + 64;
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 272LL);
  uint64_t v4 = a1 + 72;
  int v5 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
  int v6 = 65001;
  if (v3) {
    BOOL v7 = v5 == 65001;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    goto LABEL_26;
  }
  if (v5 > 65004)
  {
    if ((v5 - 65007) < 4)
    {
LABEL_12:
      if (*(void *)(a1 + 320) && *(void *)(a1 + 352))
      {
        if (dword_10008BA20)
        {
          BOOL v8 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
            sub_10005E628(v4);
          }
        }

        return 0xFFFFFFFFLL;
      }

      if (!dword_10008BA20) {
        return 16LL;
      }
      uint64_t v9 = (os_log_s *)ne_log_obj(a1);
      uint64_t v10 = 16LL;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        return v10;
      }
      goto LABEL_19;
    }

    int v11 = 65500;
LABEL_25:
    int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
    if (v5 != v11)
    {
LABEL_83:
      if (dword_10008BA20)
      {
        __int16 v34 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          sub_10005A04C();
        }
      }

      return 0xFFFFFFFFLL;
    }

    goto LABEL_26;
  }

  if (v5 > 64220)
  {
    if (v5 == 64221) {
      goto LABEL_51;
    }
    if (v5 == 64222)
    {
      if ((**(_BYTE **)(a1 + 408) & 1) != 0)
      {
        if (dword_10008BA20)
        {
          __int16 v42 = (os_log_s *)ne_log_obj(a1);
          uint64_t v10 = 0LL;
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT)) {
            return v10;
          }
          LOWORD(v70) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "No SIG was passed, but hybrid auth is enabled\n",  (uint8_t *)&v70,  2u);
        }

        return 0LL;
      }

      if (!dword_10008BA20) {
        return 3LL;
      }
      __int128 v33 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        return 3LL;
      }
LABEL_81:
      sub_10005E228();
      return 3LL;
    }

    int v11 = 65002;
    goto LABEL_25;
  }

  int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
  if (v5 == 1)
  {
LABEL_26:
    if (*(void *)(a1 + 320))
    {
      uint64_t v12 = *(void *)(a1 + 352);
      if (v12)
      {
        BOOL v14 = v6 == 65001 && v3 != 0 || v6 == 65500;
        if (v14 && (**(_BYTE **)(a1 + 408) & 1) == 0)
        {
          if (!dword_10008BA20) {
            return 3LL;
          }
          uint64_t v15 = (os_log_s *)ne_log_obj(a1);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            return 3LL;
          }
          goto LABEL_81;
        }

        if (*(_BYTE *)(a1 + 80) != 16) {
          return 0xFFFFFFFFLL;
        }
        int v17 = *(unsigned __int8 *)(a1 + 81);
        if (v17 == 1)
        {
          if (*(_DWORD *)(a1 + 20))
          {
            uint64_t v37 = sub_10002AC9C(a1, 0);
LABEL_96:
            uint64_t v38 = (void *)v37;
            if (!v37) {
              return 0xFFFFFFFFLL;
            }
            int v39 = memcmp(*(const void **)(v37 + 8), (const void *)(v12 + 4), *(void *)v37);
            sub_10003F5BC(v38);
            if (!v39)
            {
              if (dword_10008BA20)
              {
                int v43 = (os_log_s *)ne_log_obj(v40);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
                  sub_10005E2B8();
                }
              }

              return 0LL;
            }

            if (dword_10008BA20)
            {
              int v41 = (os_log_s *)ne_log_obj(v40);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
                sub_10005E2E4();
              }
            }

            return 23LL;
          }
        }

        else if (v17 != 4 && v17 != 2)
        {
          if (dword_10008BA20)
          {
            uint64_t v18 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              sub_10005E254();
            }
          }

          return 7LL;
        }

        uint64_t v37 = sub_10002AB18(a1, 0);
        goto LABEL_96;
      }
    }

    if (!dword_10008BA20) {
      return 16LL;
    }
    uint64_t v16 = (os_log_s *)ne_log_obj(a1);
    uint64_t v10 = 16LL;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      return v10;
    }
LABEL_19:
    sub_100058F90();
    return v10;
  }

  if (v5 != 3) {
    goto LABEL_83;
  }
LABEL_51:
  if (!*(void *)(a1 + 320))
  {
    if (dword_10008BA20)
    {
      BOOL v32 = (os_log_s *)ne_log_obj(a1);
      uint64_t v10 = 16LL;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        sub_10005E310();
      }
      return v10;
    }

    return 16LL;
  }

  if (!*(void *)(a1 + 272))
  {
    if (dword_10008BA20)
    {
      int v35 = (os_log_s *)ne_log_obj(a1);
      uint64_t v10 = 16LL;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        sub_10005E33C();
      }
      return v10;
    }

    return 16LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v19 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)a1) {
      sub_10005E5FC();
    }
  }

  if (*(_DWORD *)(*(void *)v2 + 108LL) != 1)
  {
    if (dword_10008BA20)
    {
      int v36 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        sub_10005E594();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (!*(void *)(v1 + 288))
  {
    if (dword_10008BA20)
    {
      int v44 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
        sub_10005E368();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (!*(_DWORD *)(*(void *)v2 + 124LL)) {
    goto LABEL_124;
  }
  a1 = sub_10002BBBC(v1);
  uint64_t v10 = a1;
  if ((_DWORD)a1) {
    return v10;
  }
  uint64_t v20 = *(void *)v2;
  if (!*(_DWORD *)(*(void *)v2 + 124LL) || *(_DWORD *)(v20 + 108) != 1)
  {
LABEL_124:
    if (dword_10008BA20)
    {
      int v49 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)a1) {
        sub_10005E4E4();
      }
    }

    if (*(_BYTE *)(v1 + 80) != 16) {
      return 0xFFFFFFFFLL;
    }
    int v50 = *(unsigned __int8 *)(v1 + 81);
    if (v50 == 1)
    {
      if (*(_DWORD *)(v1 + 20)) {
        uint64_t v51 = sub_10002AC9C(v1, 0);
      }
      else {
        uint64_t v51 = sub_10002AFE8(v1, 0);
      }
LABEL_138:
      __int16 v53 = (void *)v51;
      if (v51)
      {
        uint64_t v54 = *(void *)v2;
        int v55 = *(_DWORD *)(*(void *)v2 + 104LL);
        uint64_t v56 = *(void *)(v54 + 272);
        int v57 = *(_DWORD *)(*(void *)v4 + 48LL);
        BOOL v58 = v57 != 65001 || v56 == 0;
        if (v58 && v57 == 64221) {
          int v55 = **(unsigned __int8 **)(v1 + 288);
        }
        if (v55 != 4)
        {
          if (dword_10008BA20)
          {
            BOOL v65 = (os_log_s *)ne_log_obj(v51);
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
              sub_10005E484();
            }
          }

          sub_10003F5BC(v53);
          return 0xFFFFFFFFLL;
        }

        if (!cf)
        {
          if (dword_10008BA20)
          {
            char v59 = (os_log_s *)ne_log_obj(v51);
            if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
              sub_10005E458();
            }
          }
        }

        if (*(_BYTE *)(v1 + 80) == 16)
        {
          uint64_t v60 = sub_1000064FC((__SecKey *)cf, (uint64_t)v53, *(void *)(v1 + 272), 0);
          int v61 = v60;
          if ((_DWORD)v60)
          {
            if (dword_10008BA20)
            {
              uint64_t v62 = (os_log_s *)ne_log_obj(v60);
              if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
                sub_10005E3EC(v61);
              }
            }
          }

          CFRelease(cf);
          sub_10003F5BC(v53);
          if (v61)
          {
            if (dword_10008BA20)
            {
              int v64 = (os_log_s *)ne_log_obj(v63);
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
                sub_10005E394();
              }
            }

            return 25LL;
          }
        }

        else
        {
          CFRelease(cf);
          sub_10003F5BC(v53);
        }

        if (dword_10008BA20)
        {
          uint64_t v67 = (os_log_s *)ne_log_obj(v63);
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG)) {
            sub_10005E3C0();
          }
        }

        return 0LL;
      }

      return 0xFFFFFFFFLL;
    }

    if (v50 == 4 || v50 == 2)
    {
      uint64_t v51 = sub_10002AB18(v1, 0);
      goto LABEL_138;
    }

    if (dword_10008BA20)
    {
      int v52 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
        sub_10005E254();
      }
    }

    return 7LL;
  }

  int v21 = *(_DWORD *)(v20 + 104);
  int v22 = *(_DWORD *)(*(void *)v4 + 48LL);
  BOOL v23 = v22 != 65001 || *(void *)(v20 + 272) == 0LL;
  if (v23 && v22 == 64221) {
    int v21 = **(unsigned __int8 **)(v1 + 288);
  }
  if (v21 != 4)
  {
    if (dword_10008BA20)
    {
      uint64_t v45 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        sub_10005E484();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v24 = 0LL;
  uint64_t v70 = 0LL;
  if (*(_DWORD *)(v20 + 132) != 1)
  {
LABEL_117:
    uint64_t v46 = sub_10002BC58(v1);
    a1 = sub_100005B18(v46, *(void *)(v1 + 288), v24, (SecKeyRef *)&cf);
    int v47 = a1;
    if (v24) {
      CFRelease(v24);
    }
    if (v47)
    {
      if (dword_10008BA20)
      {
        uint64_t v48 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
          sub_10005E568();
        }
      }

      return 22LL;
    }

    goto LABEL_124;
  }

  uint64_t v25 = sub_100007840(*(void **)(v20 + 56), &v70);
  uint64_t v26 = *(CFIndex **)(v25 + 8);
  CFIndex v27 = v26[1];
  if (*(_DWORD *)v25 != 4)
  {
    CFStringRef v31 = CFStringCreateWithBytes(0LL, (const UInt8 *)v27, *v26, 0x8000100u, 0);
    goto LABEL_116;
  }

  int v28 = *(unsigned __int8 *)(v27 + 1);
  if (v28 == 30) {
    return 18LL;
  }
  if (v28 == 2)
  {
    v29.s_addr = *(_DWORD *)(v27 + 4);
    uint64_t v30 = inet_ntoa(v29);
    CFStringRef v31 = CFStringCreateWithCString(0LL, v30, 0x8000100u);
LABEL_116:
    uint64_t v24 = (__CFString *)v31;
    if (v31) {
      goto LABEL_117;
    }
    if (dword_10008BA20)
    {
      uint64_t v68 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
        sub_10005E53C();
      }
    }

    return 18LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v69 = (os_log_s *)ne_log_obj(v25);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
      sub_10005E510();
    }
  }

  return 24LL;
}

uint64_t sub_10002BBBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 320);
  if (v1 && (uint64_t v2 = *(void *)(a1 + 288)) != 0)
  {
    uint64_t v3 = *(unsigned __int8 **)(v1 + 8);
    int v6 = *v3;
    uint64_t v4 = (uint64_t)(v3 + 4);
    int v5 = v6;
    int v7 = *(_DWORD *)v1 - 4;
    while (1)
    {
      uint64_t result = sub_10002C334(v2 + 8, v5, v7, v4, (_DWORD *)(v2 + 32));
      if (!(_DWORD)result) {
        break;
      }
      uint64_t v2 = *(void *)(v2 + 40);
      if (!v2) {
        return 18LL;
      }
    }
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10005E69C();
      }
    }

    return 18LL;
  }

  return result;
}

uint64_t sub_10002BC58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 320);
  if (v1 && (uint64_t v2 = *(void *)(a1 + 288)) != 0)
  {
    if (*(void *)(v2 + 40))
    {
      uint64_t v3 = *(unsigned __int8 **)(v1 + 8);
      int v4 = *(_DWORD *)v1 - 4;
      do
      {
        uint64_t v2 = *(void *)(v2 + 40);
      }

      while (v2);
    }
  }

  else
  {
    if (dword_10008BA20)
    {
      int v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10005E69C();
      }
    }

    return 0LL;
  }

  return v2;
}

uint64_t sub_10002BD00(uint64_t result, int a2)
{
  if (result)
  {
    while (*(_DWORD *)(result + 32) != a2)
    {
      uint64_t result = *(void *)(result + 40);
      if (!result) {
        return result;
      }
    }

    return 1LL;
  }

  return result;
}

uint64_t sub_10002BD24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (*(_DWORD *)(v1 + 104) != 4)
  {
    if (dword_10008BA20)
    {
      int v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_10005E858();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*(void *)(a1 + 280)) {
    return 0LL;
  }
  int v29 = 0;
  if (!*(_DWORD *)(v1 + 64))
  {
    if (dword_10008BA20)
    {
      int v17 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_10005E6C8();
      }
    }

    goto LABEL_24;
  }

  int v5 = *(uint64_t **)(v1 + 72);
  CFDataRef v6 = v28;
  int v7 = sub_1000066DC(v28, &v29);
  BOOL v8 = v7;
  if (dword_10008BA20)
  {
    uint64_t v9 = (os_log_s *)ne_log_obj(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_10005E7F4();
    }
  }

  CFRelease(v6);
  if (!v8)
  {
    if (dword_10008BA20)
    {
      BOOL v23 = (os_log_s *)ne_log_obj(v10);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_10005E6F4(v23);
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v11 = sub_10002DDF8();
  *(void *)(a1 + 280) = v11;
  if (!v11)
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_10005E770();
      }
    }

    goto LABEL_49;
  }

  uint64_t v12 = sub_10003F4BC(*v8 + 1);
  *(void *)(*(void *)(a1 + 280) + 24LL) = v12;
  uint64_t v13 = *(void *)(*(void *)(a1 + 280) + 24LL);
  if (!v13)
  {
    if (dword_10008BA20)
    {
      uint64_t v25 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_10005E79C();
      }
    }

    uint64_t v26 = *(void **)(a1 + 280);
    if (v26)
    {
      do
      {
        CFIndex v27 = (void *)v26[5];
        sub_10002DE64(v26);
        uint64_t v26 = v27;
      }

      while (v27);
    }

    *(void *)(a1 + 280) = 0LL;
LABEL_49:
    sub_10003F5BC(v8);
    return 0xFFFFFFFFLL;
  }

  BOOL v14 = memcpy((void *)(*(void *)(v13 + 8) + 1LL), (const void *)v8[1], *v8);
  **(_BYTE **)(*(void *)(*(void *)(a1 + 280) + 24LL) + 8LL) = *(_DWORD *)(*(void *)(a1 + 64) + 104LL);
  uint64_t v15 = *(void *)(a1 + 280);
  *(_BYTE *)uint64_t v15 = *(_DWORD *)(*(void *)(a1 + 64) + 104LL);
  *(_DWORD *)(v15 + 32) = v29;
  *(void *)(v15 + 16) = *(void *)(*(void *)(v15 + 24) + 8LL) + 1LL;
  *(void *)(*(void *)(a1 + 280) + 8LL) = **(void **)(*(void *)(a1 + 280) + 24LL) - 1LL;
  if (dword_10008BA20)
  {
    uint64_t v16 = (os_log_s *)ne_log_obj(v14);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      sub_10005E7C8();
    }
  }

  sub_10003F5BC(v8);
LABEL_24:
  uint64_t v18 = *(void *)(a1 + 280);
  if (!v18) {
    return 0LL;
  }
  uint64_t v19 = *(void *)(a1 + 280);
  do
  {
    int v20 = *(_DWORD *)(v19 + 32);
    if (v20 == 1) {
      break;
    }
    uint64_t v19 = *(void *)(v19 + 40);
  }

  while (v19);
  do
  {
    if (*(_DWORD *)(v18 + 32) == 2)
    {
      if (v20 == 1) {
        unsigned __int16 v21 = -15532;
      }
      else {
        unsigned __int16 v21 = -15531;
      }
      goto LABEL_36;
    }

    uint64_t v18 = *(void *)(v18 + 40);
  }

  while (v18);
  if (v20 != 1) {
    return 0LL;
  }
  unsigned __int16 v21 = -15532;
LABEL_36:
  int v22 = sub_10000B328(a1);
  sub_1000488E4(v21, 0, v22, 0, 0LL);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10002C034(void *a1)
{
  uint64_t v1 = a1[8];
  if (*(_DWORD *)(v1 + 104) == 4 && *(_DWORD *)(v1 + 64))
  {
    uint64_t v3 = *(uint64_t **)(v1 + 72);
    if (v3 && !sub_10002C11C(v3, &v9))
    {
      CFDataRef v4 = v9;
      a1[33] = sub_10000651C(v9, a1[32]);
      CFRelease(v4);
      if (a1[33]) {
        return 0LL;
      }
      if (dword_10008BA20)
      {
        BOOL v8 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          sub_10005E8C0();
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    int v7 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10005E858();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10002C11C(uint64_t *a1, CFDataRef *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = (unsigned __int8 *)a1[1];
  uint64_t v5 = (UInt8 *)malloc((int)*a1);
  if (v5)
  {
    CFDataRef v6 = v5;
    if ((int)v4 < 1)
    {
      int v10 = 0;
    }

    else
    {
      int v7 = 0;
      int v8 = 0;
      int v9 = 0;
      int v10 = 0;
      do
      {
        unsigned int v12 = *v3++;
        uint64_t v11 = v12;
        if (v12 == 61LL)
        {
          ++v9;
        }

        else
        {
          if ((v11 & 0x80) != 0) {
            __uint32_t v13 = __maskrune(v11, 0x4000uLL);
          }
          else {
            __uint32_t v13 = _DefaultRuneLocale.__runetype[v11] & 0x4000;
          }
          if (!v13) {
            int v9 = 0;
          }
        }

        if ((byte_10006A13A[v11] & 0x80000000) == 0)
        {
          ++v7;
          int v8 = byte_10006A13A[v11] + (v8 << 6);
          if ((v7 & 3) == 0)
          {
            v6[v10] = BYTE2(v8);
            if (v9 > 1)
            {
              ++v10;
            }

            else
            {
              uint64_t v14 = v10 + 2LL;
              v6[v10 + 1] = BYTE1(v8);
              if (v9 == 1)
              {
                v10 += 2;
              }

              else
              {
                v10 += 3;
                v6[v14] = v8;
              }
            }
          }
        }

        LODWORD(v4) = v4 - 1;
      }

      while ((_DWORD)v4);
    }

    CFDataRef v16 = CFDataCreate(0LL, v6, v10);
    *a2 = v16;
    free(v6);
    if (v16) {
      return 0LL;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    sub_100054D48((uint64_t)"memory error - could not allocate buffer for certificate reference conversion from base-64.");
    return 0xFFFFFFFFLL;
  }

void *sub_10002C28C(void *result)
{
  if (*(_DWORD *)(result[8] + 124LL))
  {
    uint64_t v1 = result;
    uint64_t result = (void *)sub_10002BBBC((uint64_t)result);
    if ((_DWORD)result)
    {
      if (dword_10008BA20)
      {
        uint64_t v2 = (os_log_s *)ne_log_obj(result);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
          sub_10005E8EC();
        }
      }

      uint64_t result = (void *)v1[36];
      if (result)
      {
        do
        {
          uint64_t v3 = (void *)result[5];
          sub_10002DE64(result);
          uint64_t result = v3;
        }

        while (v3);
      }

      v1[36] = 0LL;
    }
  }

  return result;
}

void *sub_10002C308(void *result)
{
  if (result)
  {
    do
    {
      uint64_t v1 = (void *)result[5];
      sub_10002DE64(result);
      uint64_t result = v1;
    }

    while (v1);
  }

  return result;
}

uint64_t sub_10002C334(uint64_t a1, int a2, int a3, uint64_t a4, _DWORD *a5)
{
  LODWORD(v8) = a3;
  switch(a2)
  {
    case 1:
    case 5:
      SecCertificateRef v9 = sub_100005664(a1);
      if (!v9)
      {
        if (!dword_10008BA20) {
          goto LABEL_113;
        }
        int v75 = (os_log_s *)ne_log_obj(0LL);
        if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
          goto LABEL_113;
        }
        sub_10005E984();
        if (a5) {
          goto LABEL_114;
        }
        return 20LL;
      }

      SecCertificateRef v10 = v9;
      uint64_t v11 = (const __CFArray *)SecCertificateCopyIPAddresses();
      if (v11)
      {
        unsigned int v12 = v11;
        CFIndex Count = CFArrayGetCount(v11);
        if (Count < 1)
        {
LABEL_43:
          if (dword_10008BA20)
          {
            uint64_t v37 = (os_log_s *)ne_log_obj(Count);
            BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
            if (v38) {
              sub_10005EB10();
            }
            if (dword_10008BA20)
            {
              int v39 = (os_log_s *)ne_log_obj(v38);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
                sub_10005EAA4(a2);
              }
            }
          }

          goto LABEL_80;
        }

        CFIndex v18 = Count;
        CFIndex v19 = 0LL;
        BOOL v21 = a2 == 1 && v8 > 3;
        BOOL v22 = a2 == 5 && v8 >= 0x10;
        char v23 = !v22;
        BOOL v96 = v21;
        char v97 = v23;
        while (1)
        {
          memset(v98, 0, sizeof(v98));
          int v99 = 0;
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v19);
          CFIndex Count = CFStringGetLength(ValueAtIndex);
          if (!Count) {
            goto LABEL_42;
          }
          uint64_t v25 = (char *)malloc(0x40uLL);
          if (!v25)
          {
            if (dword_10008BA20)
            {
              int v83 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
                sub_10005EB3C();
              }
            }

            uint64_t v64 = 0xFFFFFFFFLL;
            goto LABEL_134;
          }

          uint64_t v26 = v25;
          if (CFStringGetCString(ValueAtIndex, v25, 64LL, 0x8000100u) != 1)
          {
LABEL_29:
            free(v26);
            goto LABEL_42;
          }

          if (a2 == 1)
          {
            int v27 = inet_pton(2, v26, v98);
            free(v26);
            if (!v27) {
              goto LABEL_42;
            }
            if (v96)
            {
              unsigned int v28 = bswap32(*(_DWORD *)a4);
              unsigned int v29 = bswap32(*(unsigned int *)v98);
              BOOL v22 = v28 >= v29;
              BOOL v30 = v28 > v29;
              int v31 = !v22;
              int v32 = v30 - v31;
              goto LABEL_41;
            }

            if ((v97 & 1) != 0) {
              goto LABEL_42;
            }
          }

          else
          {
            if (a2 != 5) {
              goto LABEL_29;
            }
            int v33 = inet_pton(30, v26, &v98[4]);
            free(v26);
            char v34 = v97;
            if (!v33) {
              char v34 = 1;
            }
            if ((v34 & 1) != 0) {
              goto LABEL_42;
            }
          }

          unint64_t v35 = bswap64(*(void *)a4);
          unint64_t v36 = bswap64(*(unint64_t *)v98);
          if (v35 == v36
            && (unint64_t v35 = bswap64(*(void *)(a4 + 8)), v36 = bswap64(*(unint64_t *)&v98[8]), v35 == v36))
          {
            int v32 = 0;
          }

          else if (v35 < v36)
          {
            int v32 = -1;
          }

          else
          {
            int v32 = 1;
          }

LABEL_123:
        if (!*a5) {
          *a5 = 4;
        }
        goto LABEL_146;
      }

      unsigned int v12 = v55;
      CFIndex v56 = CFArrayGetCount(v55);
      unint64_t v8 = (int)v8;
      uint64_t v57 = (uint64_t)CFStringCreateWithBytes(kCFAllocatorDefault, (const UInt8 *)a4, (int)v8, 0x8000100u, 0);
      if (!v57)
      {
        if (dword_10008BA20 && (__int128 v85 = (os_log_s *)ne_log_obj(0LL), os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)))
        {
          sub_10005EB68();
          if (a5)
          {
LABEL_143:
            if (!*a5) {
              *a5 = 5;
            }
          }
        }

        else if (a5)
        {
          goto LABEL_143;
        }

        CFRelease(v12);
        goto LABEL_146;
      }

      uint64_t v48 = (const __CFString *)v57;
      if (v56 >= 1)
      {
        for (CFIndex j = 0LL; j != v56; ++j)
        {
          char v59 = (const __CFString *)CFArrayGetValueAtIndex(v12, j);
          uint64_t v57 = CFStringCompare(v59, v48, 0LL);
          if (!v57)
          {
LABEL_135:
            CFRelease(v48);
            goto LABEL_139;
          }
        }
      }

      if (dword_10008BA20)
      {
        uint64_t v60 = (os_log_s *)ne_log_obj(v57);
        BOOL v61 = os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
        if (v61) {
          sub_10005EB10();
        }
        if (dword_10008BA20)
        {
          uint64_t v62 = (os_log_s *)ne_log_obj(v61);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
            sub_10005EC04();
          }
        }
      }

LABEL_113:
        if (!a5) {
          return 20LL;
        }
LABEL_114:
        if (!*a5) {
          *a5 = 5;
        }
        return 20LL;
      }

      unsigned int v12 = v65;
      uint64_t v66 = j__SecCertificateCopySubjectSequence();
      SecCertificateRef v10 = (SecCertificateRef)v66;
      if (v66)
      {
        int Length = CFDataGetLength((CFDataRef)v66);
        BytePtr = CFDataGetBytePtr(v10);
        if (BytePtr)
        {
          uint64_t v73 = (uint64_t)BytePtr;
          if (Length == (_DWORD)v8)
          {
            BytePtr = (const UInt8 *)memcmp((const void *)a4, BytePtr, (int)v8);
            if (!(_DWORD)BytePtr)
            {
LABEL_139:
              CFRelease(v12);
LABEL_169:
              CFRelease(v10);
              return 0LL;
            }
          }

          if (!dword_10008BA20) {
            goto LABEL_156;
          }
          char v74 = (os_log_s *)ne_log_obj(BytePtr);
          uint64_t v66 = os_log_type_enabled(v74, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v66) {
            sub_10005EA20();
          }
        }

        else
        {
          if (!dword_10008BA20) {
            goto LABEL_163;
          }
          __int128 v86 = (os_log_s *)ne_log_obj(0LL);
          uint64_t v66 = os_log_type_enabled(v86, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v66) {
            sub_10005EA78();
          }
          uint64_t v73 = 0LL;
        }

LABEL_153:
        if (dword_10008BA20
          && (v87 = (os_log_s *)ne_log_obj(v66), uint64_t v66 = os_log_type_enabled(v87, OS_LOG_TYPE_ERROR), (_DWORD)v66))
        {
          sub_10005EA20();
          if (v73) {
            goto LABEL_156;
          }
        }

        else if (v73)
        {
LABEL_156:
          char v88 = sub_10003E4EC(9);
          sub_100033CEC(3, v73, Length, "subjectName (type %s):\n", v89, v90, v91, v92, v88);
LABEL_163:
LABEL_165:
          if (a5 && !*a5) {
            *a5 = 3;
          }
          CFRelease(v12);
          if (!v10) {
            return 0LL;
          }
          goto LABEL_169;
        }

        if (dword_10008BA20)
        {
          __int128 v93 = (os_log_s *)ne_log_obj(v66);
          if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR)) {
            sub_10005E9B0();
          }
        }

        goto LABEL_163;
      }

      if (dword_10008BA20
        && (v82 = (os_log_s *)ne_log_obj(0LL), uint64_t v66 = os_log_type_enabled(v82, OS_LOG_TYPE_ERROR), (_DWORD)v66))
      {
        sub_10005EA4C();
        if (a5)
        {
LABEL_128:
          if (!*a5)
          {
            uint64_t v73 = 0LL;
            int Length = 0;
            *a5 = 3;
            goto LABEL_153;
          }
        }
      }

      else if (a5)
      {
        goto LABEL_128;
      }

      uint64_t v73 = 0LL;
      int Length = 0;
      goto LABEL_153;
    default:
      if (dword_10008BA20)
      {
        uint64_t v63 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
          sub_10005E918(a2);
        }
      }

      return 18LL;
  }

uint64_t sub_10002CCA8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 4) != 4)
  {
    if (dword_10008BA20)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_10005ECCC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*(void *)(a1 + 288)) {
    BOOL v4 = dword_10008BA20 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "preexisting CERT payload... chaining.\n",  v14,  2u);
    }
  }

  uint64_t result = (uint64_t)sub_10002CE1C(a2);
  if (!result)
  {
    if (dword_10008BA20)
    {
      unsigned int v12 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10005EC74();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*(_BYTE *)result == 4)
  {
    uint64_t v7 = *(void *)(a1 + 288);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 288);
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = *(void *)(v8 + 40);
      }

      while (v8);
      *(void *)(v9 + 40) = result;
    }

    else
    {
      uint64_t v7 = result;
    }

    *(void *)(a1 + 288) = v7;
    if (!dword_10008BA20) {
      return 0LL;
    }
    __uint32_t v13 = (os_log_s *)ne_log_obj(result);
    uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      sub_10005ECA0();
      return 0LL;
    }
  }

  else
  {
    do
    {
      uint64_t v10 = *(void *)(result + 40);
      sub_10002DE64((void *)result);
      uint64_t result = v10;
    }

    while (v10);
  }

  return result;
}

void *sub_10002CE1C(uint64_t a1)
{
  if (bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16 <= 4)
  {
    if (dword_10008BA20)
    {
      uint64_t v1 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        sub_10005ED2C();
      }
    }

    return 0LL;
  }

  uint64_t v3 = sub_10002DDF8();
  if (!v3)
  {
    if (dword_10008BA20)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_10005EC74();
      }
    }

    return 0LL;
  }

  BOOL v4 = v3;
  uint64_t v5 = sub_10003F4BC((bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16) - 4LL);
  v4[3] = v5;
  if (v5)
  {
    memcpy((void *)v5[1], (const void *)(a1 + 4), *v5);
    uint64_t v6 = *(void *)v4[3];
    uint64_t v7 = *(_BYTE **)(v4[3] + 8LL);
    *(_BYTE *)BOOL v4 = *v7;
    v4[1] = v6 - 1;
    v4[2] = v7 + 1;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10005ED58();
      }
    }

    do
    {
      uint64_t v11 = (void *)v4[5];
      sub_10002DE64(v4);
      BOOL v4 = v11;
    }

    while (v11);
  }

  return v4;
}

uint64_t sub_10002CF50(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 4) != 4)
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10005EDDC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  BOOL v4 = *(void **)(a1 + 304);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)v4[5];
      sub_10002DE64(v4);
      BOOL v4 = v5;
    }

    while (v5);
    *(void *)(a1 + 304) = 0LL;
  }

  uint64_t v6 = sub_10002CE1C(a2);
  if (!v6)
  {
    if (dword_10008BA20)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_10005ED84();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v7 = *(void **)(a1 + 304);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 304);
    do
    {
      uint64_t v9 = v8;
      uint64_t v8 = *(void *)(v8 + 40);
    }

    while (v8);
    *(void *)(v9 + 40) = v6;
  }

  else
  {
    uint64_t v7 = v6;
  }

  *(void *)(a1 + 304) = v7;
  if (dword_10008BA20)
  {
    __uint32_t v13 = (os_log_s *)ne_log_obj(v6);
    uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
    if (!(_DWORD)result) {
      return result;
    }
    sub_10005EDB0();
  }

  return 0LL;
}

void *sub_10002D070(uint64_t a1)
{
  uint64_t v2 = sub_10003F4BC(1uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v5 = a1 + 64;
    uint64_t v4 = v6;
    int v7 = *(_DWORD *)(v6 + 104);
    if (v7)
    {
      *(_BYTE *)v2[1] = v7;
      if (dword_10008BA20)
      {
        uint64_t v8 = (os_log_s *)ne_log_obj(v2);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
          sub_10005EEDC(v5);
        }
      }
    }

    else
    {
      *(_BYTE *)v2[1] = *(_DWORD *)(v4 + 112);
      if (dword_10008BA20)
      {
        uint64_t v10 = (os_log_s *)ne_log_obj(v2);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          sub_10005EE68(v5);
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v9 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10005EE3C();
    }
  }

  return v3;
}

uint64_t sub_10002D160(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 304);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = a1;
  uint64_t v3 = (unsigned __int8 **)(a1 + 304);
  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
    uint64_t v1 = *v3;
    if ((_DWORD)a1)
    {
      int v7 = sub_10003DD14(*v1);
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "peer transmitted CR: %s\n",  (uint8_t *)&v8,  0xCu);
      uint64_t v1 = *v3;
    }
  }

  if (*(_DWORD *)(*(void *)(v2 + 64) + 104LL) == *v1) {
    return 0LL;
  }
  if (dword_10008BA20)
  {
    uint64_t v6 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10005EF50();
    }
  }

  return 0xFFFFFFFFLL;
}

BOOL sub_10002D27C(int a1)
{
  return (a1 - 65005) < 2 || a1 == 3 || a1 == 64221;
}

size_t *sub_10002D2A0(size_t *a1)
{
  uint64_t v1 = a1;
  size_t v2 = a1[8];
  uint64_t v3 = *(void *)(v2 + 88);
  if (!v3)
  {
    if (*((_BYTE *)a1 + 81) != 2)
    {
      a1 = sub_100028828((void *)a1[40]);
      uint64_t v4 = a1;
      if (a1) {
        return v4;
      }
      if (*(_DWORD *)(v1[8] + 136))
      {
        if (dword_10008BA20)
        {
          uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            sub_10005F028();
          }
        }

        return 0LL;
      }
    }

uint64_t sub_10002D448(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  int v3 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
  if (*(void *)(*(void *)(a1 + 64) + 272LL)) {
    BOOL v4 = v3 == 65001;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    goto LABEL_31;
  }
  if (v3 > 65004)
  {
    int v7 = 65500;
LABEL_30:
    if (v3 != v7)
    {
LABEL_58:
      if (dword_10008BA20)
      {
        int v32 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          sub_10005F11C();
        }
      }

      return 0xFFFFFFFFLL;
    }

    goto LABEL_31;
  }

  if (v3 <= 64220)
  {
    if ((v3 - 4) >= 2)
    {
      if (v3 != 1)
      {
        if (v3 != 3) {
          goto LABEL_58;
        }
        goto LABEL_18;
      }

LABEL_18:
  int v8 = sub_10003F4BC(**(_DWORD **)(a1 + 184) + **(_DWORD **)(a1 + 176));
  if (!v8)
  {
    if (dword_10008BA20)
    {
      uint64_t v15 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_10005F17C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v9 = v8;
  uint64_t v10 = v8[1];
  if (*(_DWORD *)(a1 + 20)) {
    uint64_t v11 = 184LL;
  }
  else {
    uint64_t v11 = 176LL;
  }
  uint64_t v12 = *(void *)(a1 + v11);
  memcpy((void *)v8[1], *(const void **)(v12 + 8), *(void *)v12);
  if (*(_DWORD *)(a1 + 20)) {
    uint64_t v13 = 176LL;
  }
  else {
    uint64_t v13 = 184LL;
  }
  memcpy((void *)(v10 + *(void *)v12), *(const void **)(*(void *)(a1 + v13) + 8LL), **(void **)(a1 + v13));
  uint64_t v14 = sub_10002A2C8((uint64_t)v9, *(void *)(a1 + 168), a1);
  *(void *)(a1 + 192) = v14;
LABEL_45:
  if (v14) {
    uint64_t v28 = 0LL;
  }
  else {
    uint64_t v28 = 0xFFFFFFFFLL;
  }
  sub_10003F5BC(v9);
  return v28;
}

  uint64_t v14 = sub_1000400E0(v7, v13, a3);
  uint64_t v11 = v14;
  if ((_DWORD)v14)
  {
    if (dword_10008BA20)
    {
      uint64_t v15 = (os_log_s *)ne_log_obj(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_100060A04();
      }
    }
  }

  return v11;
}

  for (CFIndex i = *((void *)a2 + 8); i; CFIndex i = *(void *)(i + 16))
    sub_1000373B4(a1, *a2, (unsigned int *)i);
}

uint64_t sub_10002D804(uint64_t a1)
{
  if (!*(void *)(a1 + 192))
  {
    if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_10005F1A8();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v2 = sub_10003F4BC(**(_DWORD **)(a1 + 168) + 17);
  if (!v2)
  {
    if (!dword_10008BA20) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v19 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_22;
  }

  int v3 = v2;
  BOOL v4 = (char *)v2[1];
  memcpy(v4, *(const void **)(*(void *)(a1 + 168) + 8LL), **(void **)(a1 + 168));
  uint64_t v5 = &v4[**(void **)(a1 + 168)];
  *(void *)uint64_t v5 = *(void *)a1;
  *((void *)v5 + 1) = *(void *)(a1 + 8);
  v5[16] = 0;
  uint64_t v6 = sub_10002A2C8(*(void *)(a1 + 192), (uint64_t)v3, a1);
  *(void *)(a1 + 200) = v6;
  if (v6)
  {
    sub_10003F5BC(v3);
    int v7 = sub_10003F4BC(**(_DWORD **)(a1 + 168) + **(_DWORD **)(a1 + 200) + 17);
    if (!v7)
    {
      if (!dword_10008BA20) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v20 = (os_log_s *)ne_log_obj(0LL);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_22;
    }

    int v3 = v7;
    int v8 = (char *)v7[1];
    memcpy(v8, *(const void **)(*(void *)(a1 + 200) + 8LL), **(void **)(a1 + 200));
    uint64_t v9 = &v8[**(void **)(a1 + 200)];
    memcpy(v9, *(const void **)(*(void *)(a1 + 168) + 8LL), **(void **)(a1 + 168));
    uint64_t v10 = &v9[**(void **)(a1 + 168)];
    *(void *)uint64_t v10 = *(void *)a1;
    *((void *)v10 + 1) = *(void *)(a1 + 8);
    v10[16] = 1;
    uint64_t v11 = sub_10002A2C8(*(void *)(a1 + 192), (uint64_t)v3, a1);
    *(void *)(a1 + 208) = v11;
    if (v11)
    {
      sub_10003F5BC(v3);
      uint64_t v12 = sub_10003F4BC(**(_DWORD **)(a1 + 168) + **(_DWORD **)(a1 + 208) + 17);
      if (v12)
      {
        int v3 = v12;
        uint64_t v13 = (char *)v12[1];
        memcpy(v13, *(const void **)(*(void *)(a1 + 208) + 8LL), **(void **)(a1 + 208));
        uint64_t v14 = &v13[**(void **)(a1 + 208)];
        memcpy(v14, *(const void **)(*(void *)(a1 + 168) + 8LL), **(void **)(a1 + 168));
        uint64_t v15 = &v14[**(void **)(a1 + 168)];
        *(void *)uint64_t v15 = *(void *)a1;
        *((void *)v15 + 1) = *(void *)(a1 + 8);
        v15[16] = 2;
        uint64_t v16 = sub_10002A2C8(*(void *)(a1 + 192), (uint64_t)v3, a1);
        *(void *)(a1 + 224) = v16;
        if (v16)
        {
          sub_10003F5BC(v3);
          return 0LL;
        }

        goto LABEL_15;
      }

      if (!dword_10008BA20) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v21 = (os_log_s *)ne_log_obj(0LL);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        return 0xFFFFFFFFLL;
      }
LABEL_22:
      sub_10005F0C4();
      return 0xFFFFFFFFLL;
    }
  }

uint64_t sub_10002DAAC(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 9);
  uint64_t v3 = sub_100004E18(*(_DWORD *)(a1[9] + 40LL), *(unsigned int *)(a1[9] + 44LL));
  if ((_DWORD)v3 == -1)
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(v3);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_10005F1D4(v2, v24);
      }
    }

    return 0xFFFFFFFFLL;
  }

  BOOL v4 = sub_10003F4BC(v3 >> 3);
  a1[30] = v4;
  uint64_t v5 = (uint64_t **)(a1 + 30);
  if (!v4)
  {
    if (!dword_10008BA20) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v25 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_27;
  }

  uint64_t v6 = sub_100004BCC(*(_DWORD *)(*(void *)v2 + 52LL));
  if ((_DWORD)v6 == -1)
  {
    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_10005F284();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v7 = a1[28];
  uint64_t v8 = a1[30];
  if (*(void *)v8 <= *(void *)v7)
  {
    memcpy(*(void **)(v8 + 8), *(const void **)(v7 + 8), *(void *)v8);
    return 0LL;
  }

  unsigned int v9 = v6;
  if (dword_10008BA20)
  {
    uint64_t v10 = (os_log_s *)ne_log_obj(v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_10005F354();
    }
  }

  size_t v11 = v9 >> 3;
  uint64_t v12 = sub_10003F4BC(v11);
  if (v12)
  {
    uint64_t v13 = (uint64_t)v12;
    uint64_t v14 = **v5;
    if (v14 >= 1)
    {
      uint64_t v15 = (char *)(*v5)[1];
      uint64_t v16 = &v15[v14];
      int v17 = 1;
      while (1)
      {
        if (v15 == (char *)(*v5)[1])
        {
          **(_BYTE **)(v13 + 8) = 0;
          *(void *)uint64_t v13 = 1LL;
        }

        uint64_t v18 = sub_10002A2C8(a1[28], v13, (uint64_t)a1);
        if (!v18) {
          break;
        }
        uint64_t v19 = v18;
        if (dword_10008BA20)
        {
          uint64_t v20 = (os_log_s *)ne_log_obj(v18);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            int v31 = v17;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "compute intermediate encryption key K%d\n",  buf,  8u);
          }
        }

        LODWORD(v21) = (_DWORD)v16 - (_DWORD)v15;
        uint64_t v22 = (int)v21;
        char v23 = memcpy(v15, *(const void **)(v19 + 8), (int)v21);
        *(void *)uint64_t v13 = v11;
        if (*(void *)v19 != v11)
        {
          if (dword_10008BA20)
          {
            unsigned int v29 = (os_log_s *)ne_log_obj(v23);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
              sub_10005F2EC();
            }
          }

          sub_10003F5BC((void *)v19);
          break;
        }

        v15 += v22;
        memcpy(*(void **)(v13 + 8), *(const void **)(v19 + 8), v11);
        sub_10003F5BC((void *)v19);
        ++v17;
        if (v15 >= v16) {
          goto LABEL_35;
        }
      }

      sub_10003F5BC((void *)v13);
      return 0xFFFFFFFFLL;
    }

void *sub_10002DDF8()
{
  uint64_t v0 = calloc(1uLL, 0x30uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    v0[3] = 0LL;
    v0[5] = 0LL;
  }

  else if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10005F3D4();
    }
  }

  return v1;
}

void sub_10002DE64(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[3];
    if (v2) {
      sub_10003F5BC(v2);
    }
    free(a1);
  }

uint64_t sub_10002DE98(uint64_t a1)
{
  uint64_t v2 = sub_10003F4BC(**(_DWORD **)(a1 + 160) + **(_DWORD **)(a1 + 152));
  if (!v2)
  {
    if (dword_10008BA20)
    {
      uint64_t v16 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_10005F400();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v3 = v2;
  uint64_t v4 = v2[1];
  if (*(_DWORD *)(a1 + 20)) {
    uint64_t v5 = 160LL;
  }
  else {
    uint64_t v5 = 152LL;
  }
  uint64_t v6 = *(void *)(a1 + v5);
  memcpy((void *)v2[1], *(const void **)(v6 + 8), *(void *)v6);
  if (*(_DWORD *)(a1 + 20)) {
    uint64_t v7 = 152LL;
  }
  else {
    uint64_t v7 = 160LL;
  }
  memcpy((void *)(v4 + *(void *)v6), *(const void **)(*(void *)(a1 + v7) + 8LL), **(void **)(a1 + v7));
  uint64_t v8 = (uint64_t *)calloc(1uLL, 0x10uLL);
  if (!v8)
  {
    if (dword_10008BA20)
    {
      int v17 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_10005F400();
      }
    }

    sub_10003F5BC(v3);
    return 0xFFFFFFFFLL;
  }

  unsigned int v9 = v8;
  uint64_t v10 = sub_10002A350((uint64_t)v3, a1);
  *unsigned int v9 = v10;
  if (!v10)
  {
LABEL_28:
    sub_10003F5BC(v3);
    sub_10002E08C(v9);
    return 0xFFFFFFFFLL;
  }

  int v11 = sub_100004E58(*(_DWORD *)(*(void *)(a1 + 72) + 40LL));
  uint64_t v12 = *v9;
  *(void *)*unsigned int v9 = v11;
  if (v11 == -1)
  {
    if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_10005F42C();
      }
    }

    goto LABEL_28;
  }

  uint64_t v13 = sub_10003F5F0(v12);
  v9[1] = (uint64_t)v13;
  if (!v13)
  {
    if (dword_10008BA20)
    {
      uint64_t v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_10005F48C();
      }
    }

    goto LABEL_28;
  }

  sub_10003F5BC(v3);
  uint64_t v14 = *(void **)(a1 + 328);
  if (v14) {
    sub_10002E08C(v14);
  }
  uint64_t result = 0LL;
  *(void *)(a1 + 328) = v9;
  return result;
}

void sub_10002E08C(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)*a1;
    if (v2) {
      sub_10003F5BC(v2);
    }
    uint64_t v3 = (void *)a1[1];
    if (v3) {
      sub_10003F5BC(v3);
    }
    free(a1);
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        sub_10005F500();
      }
    }
  }

uint64_t *sub_10002E0FC(uint64_t a1, int a2)
{
  uint64_t v4 = sub_10003F4BC(***(_DWORD ***)(a1 + 328) + 4);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (char *)v4[1];
    uint64_t v7 = memcpy(v6, *(const void **)(**(void **)(a1 + 328) + 8LL), ***(void ***)(a1 + 328));
    *(_DWORD *)&v6[***(void ***)(a1 + 328)] = a2;
    if (dword_10008BA20)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        sub_10005F52C();
      }
    }

    unsigned int v9 = (uint64_t *)calloc(1uLL, 0x10uLL);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = sub_10002A350((uint64_t)v5, a1);
      uint64_t *v10 = v11;
      if (v11)
      {
        int v12 = sub_100004E58(*(_DWORD *)(*(void *)(a1 + 72) + 40LL));
        uint64_t v13 = *v10;
        *(void *)uint64_t *v10 = v12;
        if (v12 == -1)
        {
          if (dword_10008BA20)
          {
            uint64_t v18 = (os_log_s *)ne_log_obj(v13);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              sub_10005F42C();
            }
          }
        }

        else
        {
          uint64_t v14 = sub_10003F5F0(v13);
          v10[1] = (uint64_t)v14;
          if (v14)
          {
LABEL_24:
            sub_10003F5BC(v5);
            return v10;
          }

          if (dword_10008BA20)
          {
            uint64_t v15 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
              sub_10005F48C();
            }
          }
        }
      }

      sub_10002E08C(v10);
    }

    else if (dword_10008BA20)
    {
      int v17 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_10005F400();
      }
    }

    uint64_t v10 = 0LL;
    goto LABEL_24;
  }

  if (dword_10008BA20)
  {
    uint64_t v16 = (os_log_s *)((uint64_t (*)(void))ne_log_obj)();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_10005F400();
    }
  }

  return 0LL;
}

void *sub_10002E2C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (dword_10008BA20)
  {
    uint64_t v8 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10005F7AC();
    }
  }

  uint64_t v9 = sub_100004E58(*(_DWORD *)(*(void *)(a1 + 72) + 40LL));
  if ((_DWORD)v9 == -1)
  {
    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_10005F42C();
      }
    }

    return 0LL;
  }

  int v10 = v9;
  bzero(*(void **)(a4 + 8), *(void *)a4);
  memcpy(*(void **)(a4 + 8), (const void *)(a2[1] + *a2 - v10), v10);
  uint64_t v15 = a2[1];
  size_t v16 = *(_DWORD *)a2 - 28;
  int v17 = sub_10003F4BC(v16);
  if (!v17)
  {
    if (dword_10008BA20)
    {
      unsigned int v29 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_10005F558();
      }
    }

    return 0LL;
  }

  uint64_t v18 = v17;
  memcpy((void *)v17[1], (const void *)(v15 + 28), v16);
  uint64_t v19 = (uint64_t *)sub_100004EA4(*(_DWORD *)(*(void *)(a1 + 72) + 40LL), (uint64_t)v18, *(void *)(a1 + 240), a3);
  uint64_t v20 = v19;
  if (v19 && v19[1] && *v19)
  {
    sub_10003F5BC(v18);
    if (dword_10008BA20)
    {
      uint64_t v22 = (os_log_s *)ne_log_obj(v21);
      BOOL v21 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
      if (v21) {
        sub_10005F780();
      }
    }

    if (*(_DWORD *)(qword_10008B848 + 264)) {
      unsigned __int8 v23 = *(_BYTE *)(*v20 + v20[1] - 1) + 1;
    }
    else {
      unsigned __int8 v23 = *(_BYTE *)(*v20 + v20[1] - 1);
    }
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(v21);
      BOOL v21 = os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
      if (v21) {
        sub_10005F71C();
      }
    }

    if (*(_DWORD *)(qword_10008B848 + 260))
    {
      if (*v20 < (unint64_t)v23)
      {
        if (dword_10008BA20)
        {
          uint64_t v25 = (os_log_s *)ne_log_obj(v21);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            sub_10005F668(v23, v20, v25);
          }
        }

        goto LABEL_50;
      }

      *v20 -= v23;
      if (dword_10008BA20)
      {
        int v31 = (os_log_s *)ne_log_obj(v21);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
          sub_10005F6F0();
        }
      }
    }

    else if (dword_10008BA20)
    {
      BOOL v30 = (os_log_s *)ne_log_obj(v21);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
        sub_10005F63C();
      }
    }

    int v32 = sub_10003F4BC(*(_DWORD *)v20 + 28);
    if (v32)
    {
      uint64_t v28 = v32;
      int v33 = (_OWORD *)v32[1];
      char v34 = (__int128 *)a2[1];
      __int128 v35 = *v34;
      *(_OWORD *)((char *)v33 + 12) = *(__int128 *)((char *)v34 + 12);
      *int v33 = v35;
      unint64_t v36 = memcpy((void *)(v32[1] + 28LL), (const void *)v20[1], *v20);
      *(_DWORD *)(v28[1] + 24LL) = bswap32(*(_DWORD *)v28);
      if (dword_10008BA20)
      {
        uint64_t v37 = (os_log_s *)ne_log_obj(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
          sub_10005F610();
        }
      }

      goto LABEL_51;
    }

    if (dword_10008BA20)
    {
      BOOL v38 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
        sub_10005F5E4();
      }
    }

void *sub_10002E664(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 80) == 16) {
    return sub_10002E2C0(a1, a2, a3, a4);
  }
  if (dword_10008BA20)
  {
    uint64_t v5 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10005F7D8();
    }
  }

  return 0LL;
}

void *sub_10002E6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (dword_10008BA20)
  {
    uint64_t v8 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10005F91C();
    }
  }

  uint64_t v9 = sub_100004E58(*(_DWORD *)(*(void *)(a1 + 72) + 40LL));
  if ((_DWORD)v9 == -1)
  {
    if (dword_10008BA20)
    {
      int v33 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        sub_10005F42C();
      }
    }

    return 0LL;
  }

  int v10 = v9;
  uint64_t v40 = a3;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v38 = a2;
  int v12 = *(_DWORD *)a2 - 28;
  int v13 = v9 + 28 - *(_DWORD *)a2 + v12 / (int)v9 * v9;
  uint64_t v39 = a4;
  if (*(_DWORD *)(qword_10008B848 + 252))
  {
    uint64_t v9 = sub_100007704();
    v13 += v10 + v10 * (v9 % (*(_DWORD *)(qword_10008B848 + 256) + 1));
  }

  if (dword_10008BA20)
  {
    uint64_t v14 = (os_log_s *)ne_log_obj(v9);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      sub_10005F8BC();
    }
  }

  uint64_t v15 = sub_10003F4BC((v13 + v12));
  if (!v15)
  {
    if (dword_10008BA20)
    {
      char v34 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        sub_10005F804();
      }
    }

    return 0LL;
  }

  uint64_t v16 = (uint64_t)v15;
  int v17 = (const void *)(v11 + 28);
  if (v13 && *(_DWORD *)(qword_10008B848 + 248))
  {
    uint64_t v18 = (_BYTE *)(v15[1] + v12);
    int v19 = v13;
    do
    {
      *v18++ = sub_100007704();
      --v19;
    }

    while (v19);
  }

  memcpy(*(void **)(v16 + 8), v17, v12);
  *(_BYTE *)(*(void *)(v16 + 8) + (v13 + v12 - 1)) = v13 - (*(_DWORD *)(qword_10008B848 + 264) != 0);
  if (dword_1000882C8 >= 7) {
    sub_100033CEC( 7,  *(void *)(v16 + 8),  *(void *)v16,  "About to encrypt %d bytes",  v20,  v21,  v22,  v23,  *(void *)v16);
  }
  uint64_t v24 = sub_100004F00(*(_DWORD *)(*(void *)(a1 + 72) + 40LL), v16, *(void *)(a1 + 240), v40);
  if (!v24)
  {
    if (dword_10008BA20)
    {
      __int128 v35 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        sub_10005F830();
      }
    }

    sub_10003F5BC((void *)v16);
    return 0LL;
  }

  uint64_t v25 = v24;
  sub_10003F5BC((void *)v16);
  bzero(*(void **)(v39 + 8), *(void *)v39);
  memcpy(*(void **)(v39 + 8), (const void *)(*(void *)(v25 + 8) + *(void *)v25 - v10), v10);
  uint64_t v26 = sub_10003F4BC(*(_DWORD *)v25 + 28);
  uint64_t v27 = v26;
  if (v26)
  {
    uint64_t v28 = (_OWORD *)v26[1];
    unsigned int v29 = *(__int128 **)(v38 + 8);
    __int128 v30 = *v29;
    *(_OWORD *)((char *)v28 + 12) = *(__int128 *)((char *)v29 + 12);
    *uint64_t v28 = v30;
    int v31 = memcpy((void *)(v26[1] + 28LL), *(const void **)(v25 + 8), *(void *)v25);
    *(_DWORD *)(v27[1] + 24LL) = bswap32(*(_DWORD *)v27);
    if (dword_10008BA20)
    {
      int v32 = (os_log_s *)ne_log_obj(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        sub_10005F890();
      }
    }
  }

  else if (dword_10008BA20)
  {
    unint64_t v36 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      sub_10005F804();
    }
  }

  sub_10003F5BC((void *)v25);
  return v27;
}

void *sub_10002EA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 80) == 16) {
    return sub_10002E6C8(a1, a2, a3, a4);
  }
  if (dword_10008BA20)
  {
    uint64_t v5 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10005F948();
    }
  }

  return 0LL;
}

  ;
}

  ;
}

void sub_10002EACC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

uint64_t sub_10002EAE0(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  uint64_t v2 = sub_100041F1C(a1, (uint64_t)v28);
  if ((_DWORD)v2)
  {
    if (dword_10008BA20)
    {
      uint64_t v3 = (os_log_s *)ne_log_obj(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_10005FAE8();
      }
    }

    goto LABEL_9;
  }

  uint64_t v4 = sub_10004201C((uint64_t)v28);
  if (!(_DWORD)v4)
  {
    uint64_t v1 = (void *)v28[0];
    uint64_t v8 = (unsigned __int8 *)(v28[0] + 1LL);
    uint64_t v9 = (unsigned __int8 *)(v28[0] + 2LL);
    int v10 = *(unsigned __int8 *)(v28[0] + 2LL);
    if (*(_BYTE *)(v28[0] + 2LL))
    {
      if (dword_10008BA20)
      {
        int v11 = *v8;
        int v12 = (os_log_s *)ne_log_obj(v4);
        int v13 = v12;
        if (v10 != 2 || v11 != 18)
        {
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            sub_10005F9D4();
          }
          goto LABEL_32;
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = sub_10003EAA0(*v8);
          uint64_t v18 = strerror(*v9);
          int v24 = 136315394;
          uint64_t v25 = v17;
          __int16 v26 = 2080;
          uint64_t v27 = v18;
          int v19 = "pfkey %s failed: %s\n";
          uint64_t v20 = v13;
          uint32_t v21 = 22;
LABEL_31:
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v24, v21);
        }
      }
    }

    else
    {
      unint64_t v15 = *v8;
      if (v15 >= 0x1B)
      {
        if (dword_10008BA20)
        {
          uint64_t v16 = (os_log_s *)ne_log_obj(v4);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_10005F974();
          }
        }

        goto LABEL_32;
      }

      if (((0x7521CA1uLL >> v15) & 1) == 0)
      {
        uint64_t v6 = (qword_100084F78[v15](v28) >> 31);
        goto LABEL_10;
      }

      if (dword_10008BA20)
      {
        uint64_t v22 = (os_log_s *)ne_log_obj(v4);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v23 = sub_10003EAA0(*v8);
          int v24 = 136315138;
          uint64_t v25 = v23;
          int v19 = "unsupported PF_KEY message %s\n";
          uint64_t v20 = v22;
          uint32_t v21 = 12;
          goto LABEL_31;
        }
      }
    }

void sub_10002ED64(uint64_t a1)
{
  if (xmmword_10008C6E0 == 0)
  {
    unint64_t v6 = 0LL;
    uint64_t v2 = sub_10002EE80(*(_DWORD *)(qword_10008B848 + 32), &v6);
    if (v2)
    {
      sub_10002EAE0((uint64_t)v2);
    }

    else if ((v6 & 0x8000000000000000LL) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v4 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          sub_10005FB7C();
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v3 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "recv short message from pfkey\n", v5, 2u);
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v1 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
      sub_10005FB50();
    }
  }

void *sub_10002EE80(int a1, unint64_t *a2)
{
  socklen_t v10 = 4;
  LODWORD(__size) = 0;
  if (getsockopt(a1, 0xFFFF, 4128, &__size, &v10) < 0 || !(_DWORD)__size) {
    return 0LL;
  }
  uint64_t v4 = calloc(1uLL, (int)__size);
  if (v4)
  {
    do
    {
      unint64_t v5 = recv(a1, v4, (int)__size, 0);
      *a2 = v5;
      if ((v5 & 0x8000000000000000LL) == 0) {
        goto LABEL_10;
      }
      unint64_t v6 = __error();
    }

    while (*v6 == 4);
    if (dword_10008BA20)
    {
      uint64_t v7 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10005FBF0();
      }
    }

    unint64_t v5 = *a2;
    if ((*a2 & 0x8000000000000000LL) != 0)
    {
LABEL_14:
      free(v4);
      return 0LL;
    }

void sub_10002EF6C(uint64_t a1)
{
  if (xmmword_10008C6E0 == 0)
  {
    uint64_t v2 = *(void **)(qword_10008B848 + 96);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)*v2;
        sub_10002EAE0(v2[2]);
        uint64_t v4 = (void *)*v2;
        unint64_t v5 = (void *)v2[1];
        if (*v2)
        {
          v4[1] = v5;
          unint64_t v5 = (void *)v2[1];
        }

        else
        {
          *(void *)(qword_10008B848 + 104) = v5;
        }

        *unint64_t v5 = v4;
        free(v2);
        uint64_t v2 = v3;
      }

      while (v3);
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v1 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "ignoring (saved) pfkey messages until power-mgmt event is handled.\n",  (uint8_t *)v6,  2u);
    }
  }

uint64_t sub_10002F054(uint64_t a1)
{
  uint64_t v2 = calloc(0x18uLL, 1uLL);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = v2;
  uint64_t result = 0LL;
  *uint64_t v3 = 0LL;
  unint64_t v5 = *(void **)(qword_10008B848 + 104);
  v3[1] = v5;
  v3[2] = a1;
  *unint64_t v5 = v3;
  *(void *)(qword_10008B848 + 104) = v3;
  return result;
}

void **sub_10002F0B4(unsigned int a1)
{
  pid_t v2 = getpid();
  uint64_t v3 = sub_100041DFC();
  if ((v3 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      int v13 = (os_log_s *)ne_log_obj(v3);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_10005FC64();
      }
    }

    return 0LL;
  }

  else
  {
    int v4 = v3;
    if (dword_10008BA20)
    {
      unint64_t v5 = (os_log_s *)ne_log_obj(v3);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        sub_10005FD60();
      }
    }

    uint64_t v6 = sub_10004166C(v4, a1);
    if ((v6 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v14 = (os_log_s *)ne_log_obj(v6);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_10005FCCC();
        }
      }

      uint64_t v8 = 0LL;
    }

    else
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      while (1)
      {
        do
        {
          while (1)
          {
            while (1)
            {
              if (v7) {
                free(v7);
              }
              uint64_t v9 = sub_10002EE80(v4, &v17);
              uint64_t v7 = v9;
              if (v9) {
                break;
              }
              if ((v17 & 0x8000000000000000LL) != 0) {
                goto LABEL_29;
              }
            }

            if (*((_BYTE *)v9 + 1) == 10) {
              break;
            }
            sub_10002F054((uint64_t)v9);
            uint64_t v7 = 0LL;
          }
        }

        while (v9[3] != v2);
        socklen_t v10 = v8 ? (char *)*v8 : 0LL;
        size_t v11 = 8LL * *((unsigned __int16 *)v9 + 2);
        int v12 = sub_10003F51C(v8, (size_t)&v10[v11]);
        uint64_t v8 = v12;
        if (!v12) {
          break;
        }
        memcpy(&v10[(void)v12[1]], v7, v11);
        if (!v7[2]) {
          goto LABEL_34;
        }
      }

      if (dword_10008BA20)
      {
        uint64_t v16 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          sub_10005FD34();
        }
      }

uint64_t sub_10002F284()
{
  uint64_t v0 = sub_100041DFC();
  *(_DWORD *)(qword_10008B848 + 32) = v0;
  if ((v0 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(v0);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10005FD8C();
      }
    }
  }

  else
  {
    uint64_t v1 = 0LL;
    int v2 = 0;
    uint64_t v3 = &off_100085058;
    do
    {
      if (dword_10008BA20)
      {
        int v4 = (os_log_s *)ne_log_obj(v0);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
          sub_10005FEB4(v23, v1, &v24, v4);
        }
      }

      uint64_t v0 = sub_100041178(*(_DWORD *)(qword_10008B848 + 32), *((unsigned __int8 *)v3 - 8));
      if ((v0 & 0x80000000) != 0 || (uint64_t v0 = sub_100041330(*(_DWORD *)(qword_10008B848 + 32)), (v0 & 0x80000000) != 0))
      {
        if (dword_10008BA20)
        {
          unint64_t v5 = (os_log_s *)ne_log_obj(v0);
          uint64_t v0 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v0)
          {
            uint64_t v6 = *v3;
            uint64_t v7 = ipsec_strerror();
            *(_DWORD *)buf = 136315394;
            uint64_t v20 = v6;
            __int16 v21 = 2080;
            uint64_t v22 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "failed to register %s (%s)\n",  buf,  0x16u);
          }
        }

        ++v2;
      }

      ++v1;
      v3 += 2;
    }

    while (v1 != 3);
    if (v2 == 3)
    {
      if (dword_10008BA20)
      {
        uint64_t v8 = (os_log_s *)ne_log_obj(v0);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          sub_10005FDF4();
        }
      }

      close(*(_DWORD *)(qword_10008B848 + 32));
    }

    else
    {
      sub_100035804();
      socklen_t v10 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_read,  *(int *)(qword_10008B848 + 32),  0LL,  &_dispatch_main_q);
      *(void *)(qword_10008B848 + 48) = v10;
      if (v10)
      {
        dispatch_source_set_event_handler_f(v10, (dispatch_function_t)sub_10002ED64);
        int v11 = *(_DWORD *)(qword_10008B848 + 32);
        int v12 = *(dispatch_source_s **)(qword_10008B848 + 48);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 0x40000000LL;
        handler[2] = sub_10002F58C;
        handler[3] = &unk_100085080;
        int v18 = v11;
        dispatch_source_set_cancel_handler(v12, handler);
        dispatch_resume(*(dispatch_object_t *)(qword_10008B848 + 48));
        uint64_t v13 = sub_100041DF0(*(_DWORD *)(qword_10008B848 + 32));
        if ((v13 & 0x80000000) == 0) {
          return 0LL;
        }
        if (dword_10008BA20)
        {
          uint64_t v16 = (os_log_s *)ne_log_obj(v13);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_10005FE4C();
          }
        }

        dispatch_source_cancel(*(dispatch_source_t *)(qword_10008B848 + 48));
        *(void *)(qword_10008B848 + 48) = 0LL;
      }

      else if (dword_10008BA20)
      {
        unint64_t v15 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_10005FE20();
        }
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10002F58C(uint64_t a1)
{
  return sub_100041EFC(*(_DWORD *)(a1 + 32));
}

void sub_10002F594()
{
  *(void *)(qword_10008B848 + 48) = 0LL;
}

uint64_t sub_10002F5C8(uint64_t a1)
{
  if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10005FF04();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10002F638(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((_DWORD)a1 != 2)
  {
    if ((_DWORD)a1 == 9)
    {
      return 4LL;
    }

    else if ((_DWORD)a1 != 3)
    {
      if (dword_10008BA20)
      {
        int v2 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          sub_10005FF64();
        }
      }

      return 0xFFFFFFFFLL;
    }
  }

  return v1;
}

uint64_t sub_10002F6B0(int a1)
{
  uint64_t result = 2LL;
  switch(a1)
  {
    case 1:
    case 3:
      return result;
    case 2:
    case 4:
      goto LABEL_4;
    default:
      if (a1 != 61443)
      {
        if (a1 == 61444)
        {
LABEL_4:
          uint64_t result = 1LL;
        }

        else
        {
          if (dword_10008BA20)
          {
            uint64_t v3 = (os_log_s *)ne_log_obj(2LL);
            if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
              sub_10005FFC4();
            }
          }

          uint64_t result = 0xFFFFFFFFLL;
        }
      }

      break;
  }

  return result;
}

uint64_t sub_10002F74C(uint64_t a1)
{
  if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10005FFC4();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10002F7B8( uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int *a6, _DWORD *a7, unsigned int *a8, _DWORD *a9)
{
  *a9 = 0;
  if (a2 != 2)
  {
    if (a2 == 4)
    {
      int v22 = sub_10002FC2C(a3);
      *a5 = v22;
      if (v22 != -1)
      {
        uint64_t result = 0LL;
        *a6 = 0;
        *a9 = 128;
        *a7 = 0;
        *a8 = 0;
        if (*a5) {
          return result;
        }
        if (dword_10008BA20)
        {
          uint64_t v23 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_100060108();
          }
        }
      }
    }

    else if (a2 == 3)
    {
      int v15 = sub_10002FA40(a3);
      *a5 = v15;
      if (v15 != -1)
      {
        uint64_t v16 = sub_100004F94(a3, *a6);
        if ((_DWORD)v16 == -1 && dword_10008BA20)
        {
          unint64_t v17 = (os_log_s *)ne_log_obj(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            sub_10006007C();
          }
          *a6 = -1;
        }

        else
        {
          *a6 = v16;
          if ((_DWORD)v16 != -1)
          {
            *a6 = v16 >> 3;
            int v25 = sub_10002FB18(a4);
            *a7 = v25;
            if (v25 != -1)
            {
              uint64_t v26 = sub_10002FBC8(a4);
              *a8 = v26;
              if ((_DWORD)v26 != -1)
              {
                *a8 = v26 >> 3;
                if (*a5) {
                  return 0LL;
                }
                if (dword_10008BA20)
                {
                  uint64_t v27 = (os_log_s *)ne_log_obj(v26);
                  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
                    sub_100060050();
                  }
                }
              }
            }
          }
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100060024();
      }
    }

    goto LABEL_27;
  }

  int v18 = sub_10002FB18(a4);
  *a7 = v18;
  if (v18 == -1 || (unsigned int v19 = sub_10002FBC8(a4), *a8 = v19, v19 == -1))
  {
LABEL_27:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  *a8 = v19 >> 3;
  if ((_DWORD)a3 == 1 && (_DWORD)a4 == 4)
  {
    *a7 = 3;
    *a9 |= 1u;
  }

  uint64_t result = 0LL;
  *a5 = 0;
  *a6 = 0;
  if (!*a7)
  {
    if (dword_10008BA20)
    {
      __int16 v21 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_1000600DC();
      }
    }

    goto LABEL_27;
  }

  return result;
}

uint64_t sub_10002FA40(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 0:
    case 1:
    case 8:
      return result;
    case 2:
      uint64_t result = 2LL;
      break;
    case 4:
    case 7:
    case 9:
      if (dword_10008BA20)
      {
        uint64_t v3 = (os_log_s *)ne_log_obj(1LL);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          sub_100060194();
        }
      }

      goto LABEL_9;
    case 5:
      uint64_t result = 5LL;
      break;
    case 6:
      uint64_t result = 4LL;
      break;
    case 10:
      uint64_t result = 3LL;
      break;
    case 11:
      uint64_t result = 12LL;
      break;
    default:
      if (dword_10008BA20)
      {
        int v4 = (os_log_s *)ne_log_obj(1LL);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          sub_100060134();
        }
      }

uint64_t sub_10002FB18(int a1)
{
  uint64_t result = 1LL;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      return 2LL;
    case 3:
      if (dword_10008BA20)
      {
        uint64_t v3 = (os_log_s *)ne_log_obj(1LL);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          sub_1000601F4(v3, v4, v5, v6, v7, v8, v9, v10);
        }
      }

      return 0xFFFFFFFFLL;
    case 4:
      return 0LL;
    case 5:
      return 6LL;
    case 6:
      return 7LL;
    case 7:
      return 8LL;
    default:
      if (a1 == 252) {
        return result;
      }
      if (a1 == 253) {
        return 2LL;
      }
      else {
        return 0LL;
      }
  }

uint64_t sub_10002FBC8(uint64_t result)
{
  if ((_DWORD)result)
  {
    uint64_t result = sub_10000506C(result);
    if ((_DWORD)result == -1)
    {
      if (dword_10008BA20)
      {
        int v1 = (os_log_s *)ne_log_obj(result);
        if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
          sub_100060260();
        }
      }

      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_10002FC2C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 - 1) >= 3)
  {
    if (dword_10008BA20)
    {
      int v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_100060134();
      }
    }

    return 0xFFFFFFFFLL;
  }

  return v1;
}

uint64_t sub_10002FC94(uint64_t a1)
{
  if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1000602C0(a1);
    }
  }

  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3)
  {
    sub_10003AA44(v3);
    *(_DWORD *)(a1 + 64) = 0;
  }

  if (!*(_BYTE *)(a1 + 60)) {
    sub_10002FD0C(a1);
  }
  return sub_10004AAC4((void *)a1);
}

uint64_t sub_10002FD0C(uint64_t a1)
{
  int v2 = (char *)calloc(1uLL, 0x10uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    *((void *)v2 + 1) = 0LL;
    *(void *)(v2 + 3) = 0LL;
    *(_WORD *)int v2 = 1538;
    v2[2] = 2;
    v2[3] = *(_BYTE *)(a1 + 104);
    *((_WORD *)v2 + 2) = 2;
    *((_DWORD *)v2 + 2) = *(_DWORD *)(a1 + 100);
    *((_DWORD *)v2 + 3) = getpid();
    sub_100040810(*(_DWORD *)(qword_10008B848 + 32), v3, 0x10u);
    free(v3);
    return 0LL;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100060328();
      }
    }

    return 0xFFFFFFFFLL;
  }

uint64_t sub_10002FDD0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 60))
  {
    uint64_t v2 = *(void *)(a1 + 128);
    uint64_t v3 = *(void *)(a1 + 112);
    if (!v3 || !*(void *)(v3 + 40)) {
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v4 = (sockaddr **)(a1 + 32);
    if (*(void *)(a1 + 32))
    {
      uint64_t v5 = (sockaddr **)(a1 + 40);
      if (*(void *)(a1 + 40))
      {
      }
    }

    goto LABEL_9;
  }

  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 160LL)) {
    goto LABEL_6;
  }
LABEL_9:
  uint64_t v5 = (sockaddr **)(a1 + 8);
  uint64_t v4 = (sockaddr **)a1;
LABEL_10:
  uint64_t v6 = *(unsigned int **)(v2 + 32);
  if (!v6) {
    return 0LL;
  }
  uint64_t v7 = *v4;
  uint64_t v8 = *v5;
  while (1)
  {
    uint64_t v9 = sub_10002F5C8(*v6);
    uint64_t v10 = v9;
    if ((_DWORD)v9 != 9) {
      break;
    }
    unsigned int v12 = 256;
    unsigned int v11 = 0xFFFF;
LABEL_16:
    uint64_t v13 = sub_10002F6B0(v6[4]);
    if ((_DWORD)v13 == -1)
    {
      if (dword_10008BA20)
      {
        uint64_t v20 = (os_log_s *)ne_log_obj(v13);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_100060354();
        }
      }

      return 0xFFFFFFFFLL;
    }

    uint64_t v14 = v13;
    if (dword_10008BA20)
    {
      int v15 = (os_log_s *)ne_log_obj(v13);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        sub_10006041C(&v24, v25, v15);
      }
    }

    uint64_t v16 = sub_1000403AC( *(_DWORD *)(qword_10008B848 + 32),  v10,  v14,  &v8->sa_len,  &v7->sa_len,  v12,  v11,  v6[13],  0,  v23,  0,  0,  *(_DWORD *)(a1 + 100),  0);
    if ((v16 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        __int16 v21 = (os_log_s *)ne_log_obj(v16);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_1000603B4();
        }
      }

      return 0xFFFFFFFFLL;
    }

    if (dword_10008BA20)
    {
      unint64_t v17 = (os_log_s *)ne_log_obj(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v18 = sub_100030080(v8, v7, v10, 0, v14);
        *(_DWORD *)buf = 136315138;
        uint64_t v27 = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "pfkey GETSPI sent: %s\n", buf, 0xCu);
      }
    }

    uint64_t v6 = (unsigned int *)*((void *)v6 + 9);
    if (!v6) {
      return 0LL;
    }
  }

  if ((_DWORD)v9 != -1)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    goto LABEL_16;
  }

  if (dword_10008BA20)
  {
    int v22 = (os_log_s *)ne_log_obj(v9);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_100060458();
    }
  }

  return 0xFFFFFFFFLL;
}

char *sub_100030080(const sockaddr *a1, const sockaddr *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  int v9 = sub_10002F638(a3);
  if (v9 == -1) {
    return 0LL;
  }
  int v10 = v9;
  if ((_DWORD)a5)
  {
    int v11 = sub_10002F74C(a5);
    if (v11 == -1) {
      return 0LL;
    }
    int v12 = v11;
    uint64_t v13 = sub_10003DFCC(v10);
    uint64_t v14 = sub_10003E374(v12);
    int v15 = "/";
  }

  else
  {
    uint64_t v13 = sub_10003DFCC(v9);
    int v15 = (const char *)&unk_10007E069;
    uint64_t v14 = (char *)&unk_10007E069;
  }

  unsigned int v16 = snprintf(byte_100088C11, 0xFFuLL, "%s%s%s ", v13, v15, v14);
  if (v16 > 0xFE) {
    return 0LL;
  }
  int v18 = &byte_100088C11[v16];
  size_t v19 = 255 - v16;
  uint64_t v20 = sub_10003C888(a1);
  int v21 = snprintf(v18, v19, "%s->", (const char *)v20);
  uint64_t result = 0LL;
  if ((v21 & 0x80000000) == 0)
  {
    int v22 = v19 - v21;
    if ((int)v19 > v21)
    {
      int v23 = &v18[v21];
      uint8_t v24 = sub_10003C888(a2);
      int v25 = snprintf(v23, v22, "%s ", (const char *)v24);
      uint64_t result = 0LL;
      if ((v25 & 0x80000000) == 0 && v22 > v25)
      {
        if (a4)
        {
          uint64_t v26 = bswap32(a4);
          snprintf(&v23[v25], v22 - v25, "spi=%lu(0x%lx)", v26, v26);
        }

        return byte_100088C11;
      }
    }
  }

  return result;
}

uint64_t sub_1000301FC(uint64_t a1)
{
  if (*(void *)(a1 + 128)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = dword_10008BA20 == 0;
  }
  if (!v2)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1000605E0();
    }
  }

  if (*(_BYTE *)(a1 + 60))
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (!v4 || !*(void *)(v4 + 40)) {
      goto LABEL_15;
    }
LABEL_12:
    uint64_t v5 = (unsigned __int8 **)(a1 + 32);
    if (*(void *)(a1 + 32))
    {
      uint64_t v6 = (unsigned __int8 **)(a1 + 40);
      if (*(void *)(a1 + 40))
      {
      }
    }

    goto LABEL_15;
  }

  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 160LL)) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v6 = (unsigned __int8 **)(a1 + 8);
  uint64_t v5 = (unsigned __int8 **)a1;
LABEL_16:
  uint64_t v7 = *(unsigned int **)(*(void *)(a1 + 128) + 32LL);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = *v5;
  int v9 = *v6;
  char v10 = 4;
  while (1)
  {
    uint64_t v11 = sub_10002F5C8(*v7);
    int v12 = v11;
    if ((_DWORD)v11 == 9)
    {
      char v10 = 0;
    }

    else if ((_DWORD)v11 == -1)
    {
      if (dword_10008BA20)
      {
        int v31 = (os_log_s *)ne_log_obj(v11);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_100060580();
        }
      }

      return 0xFFFFFFFFLL;
    }

    uint64_t v13 = sub_10002F6B0(v7[4]);
    if ((_DWORD)v13 == -1) {
      break;
    }
    int v14 = v13;
    int v15 = (unsigned int *)*((void *)v7 + 8);
    uint64_t v16 = v15[1];
    unsigned int v36 = v15[2];
    uint64_t v17 = v15[3];
    unsigned int v34 = 0;
    uint64_t v18 = sub_10002F7B8(v13, *v7, v16, v17, &v37, &v36, &v35, &v34, &v33);
    if ((v18 & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
    if (dword_10008BA20)
    {
      size_t v19 = (os_log_s *)ne_log_obj(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109888;
        int v39 = v37;
        __int16 v40 = 1024;
        unsigned int v41 = v36;
        __int16 v42 = 1024;
        int v43 = v35;
        __int16 v44 = 1024;
        unsigned int v45 = v34;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "call pfkey_send_update: e_type %d, e_klen %d, a_type %d, a_klen %d\n",  buf,  0x1Au);
      }
    }

    if (!v7[5])
    {
      __int16 v20 = 0;
      int v22 = v33;
      goto LABEL_41;
    }

    __int16 v20 = sub_10003D53C(*(void *)(*(void *)(a1 + 256) + 48LL));
    int v21 = v33;
    int v22 = v33 | 2;
    v33 |= 2u;
    uint64_t v23 = *(void *)(a1 + 256);
    uint64_t v24 = *(void *)(v23 + 64);
    if (v14 == 1 && *(_DWORD *)(v24 + 180) == 1 && v8[1] == 2)
    {
      int v22 = v21 | 0xA;
      int v33 = v21 | 0xA;
      if ((*(_BYTE *)(v23 + 96) & 4) == 0) {
        goto LABEL_41;
      }
      int v25 = 4106;
LABEL_36:
      int v22 = v21 | v25;
      goto LABEL_40;
    }

    int v26 = *(_DWORD *)(v23 + 96);
    if ((v26 & 2) == 0)
    {
      if ((v26 & 4) == 0) {
        goto LABEL_41;
      }
      int v25 = 4098;
      goto LABEL_36;
    }

    if (*(_DWORD *)(v24 + 184) != 1) {
      goto LABEL_41;
    }
    int v22 = v21 | 6;
LABEL_40:
    int v33 = v22;
LABEL_41:
    uint64_t v27 = sub_100040854( *(_DWORD *)(qword_10008B848 + 32),  v12,  v14,  v9,  v8,  v7[6],  v7[13],  v10,  *(char **)(*((void *)v7 + 4) + 8LL),  v37,  v36,  v35,  v34,  v22,  0,  0,  0,  *(void *)(*(void *)(a1 + 128) + 8LL),  HIDWORD(*(void *)(*(void *)(a1 + 128) + 8LL)),  0,  0,  *(_DWORD *)(a1 + 100),  v20,  v32,  0);
    if ((v27 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        __int128 v30 = (os_log_s *)ne_log_obj(v27);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          sub_100060518();
        }
      }

      return 0xFFFFFFFFLL;
    }

    uint64_t v7 = (unsigned int *)*((void *)v7 + 9);
    if (!v7) {
      return 0LL;
    }
  }

  if (dword_10008BA20)
  {
    unsigned int v29 = (os_log_s *)ne_log_obj(v13);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      sub_1000604B8();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1000305C8(uint64_t a1)
{
  if (*(void *)(a1 + 128)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = dword_10008BA20 == 0;
  }
  if (!v2)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100060674();
    }
  }

  if (*(_BYTE *)(a1 + 60))
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (!v4 || !*(void *)(v4 + 40)) {
      goto LABEL_15;
    }
LABEL_12:
    uint64_t v5 = (unsigned __int8 **)(a1 + 32);
    if (*(void *)(a1 + 32))
    {
      uint64_t v6 = (unsigned __int8 **)(a1 + 40);
      if (*(void *)(a1 + 40))
      {
      }
    }

    goto LABEL_15;
  }

  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 160LL)) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v6 = (unsigned __int8 **)(a1 + 8);
  uint64_t v5 = (unsigned __int8 **)a1;
LABEL_16:
  uint64_t v7 = *(unsigned int **)(*(void *)(a1 + 128) + 32LL);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = *v5;
  int v9 = *v6;
  char v10 = 4;
  while (1)
  {
    uint64_t v11 = sub_10002F5C8(*v7);
    int v12 = v11;
    if ((_DWORD)v11 == 9)
    {
      char v10 = 0;
    }

    else if ((_DWORD)v11 == -1)
    {
      if (dword_10008BA20)
      {
        int v31 = (os_log_s *)ne_log_obj(v11);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_100060458();
        }
      }

      return 0xFFFFFFFFLL;
    }

    uint64_t v13 = sub_10002F6B0(v7[4]);
    if ((_DWORD)v13 == -1) {
      break;
    }
    int v14 = v13;
    int v15 = (unsigned int *)*((void *)v7 + 8);
    uint64_t v16 = v15[1];
    unsigned int v36 = v15[2];
    uint64_t v17 = v15[3];
    unsigned int v34 = 0;
    uint64_t v18 = sub_10002F7B8(v13, *v7, v16, v17, &v37, &v36, &v35, &v34, &v33);
    if ((v18 & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
    if (dword_10008BA20)
    {
      size_t v19 = (os_log_s *)ne_log_obj(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109888;
        int v39 = v37;
        __int16 v40 = 1024;
        unsigned int v41 = v36;
        __int16 v42 = 1024;
        int v43 = v35;
        __int16 v44 = 1024;
        unsigned int v45 = v34;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "call pfkey_send_add: e_type %d, e_klen %d, a_type %d, a_klen %d\n",  buf,  0x1Au);
      }
    }

    if (!v7[5])
    {
      __int16 v20 = 0;
      int v22 = v33;
      goto LABEL_41;
    }

    __int16 v20 = sub_10003D53C(*(void *)(*(void *)(a1 + 256) + 48LL));
    int v21 = v33;
    int v22 = v33 | 2;
    v33 |= 2u;
    uint64_t v23 = *(void *)(a1 + 256);
    uint64_t v24 = *(void *)(v23 + 64);
    if (v14 == 1 && *(_DWORD *)(v24 + 180) == 1 && v8[1] == 2)
    {
      int v22 = v21 | 0xA;
      int v33 = v21 | 0xA;
      if ((*(_BYTE *)(v23 + 96) & 4) == 0) {
        goto LABEL_41;
      }
      int v25 = 4106;
LABEL_36:
      int v22 = v21 | v25;
      goto LABEL_40;
    }

    int v26 = *(_DWORD *)(v23 + 96);
    if ((v26 & 2) == 0)
    {
      if ((v26 & 4) == 0) {
        goto LABEL_41;
      }
      int v25 = 4098;
      goto LABEL_36;
    }

    if (*(_DWORD *)(v24 + 184) != 1) {
      goto LABEL_41;
    }
    int v22 = v21 | 6;
LABEL_40:
    int v33 = v22;
LABEL_41:
    uint64_t v27 = sub_100040D5C( *(_DWORD *)(qword_10008B848 + 32),  v12,  v14,  v8,  v9,  v7[7],  v7[12],  v10,  *(char **)(*((void *)v7 + 5) + 8LL),  v37,  v36,  v35,  v34,  v22,  0,  0,  0,  *(void *)(*(void *)(a1 + 128) + 8LL),  HIDWORD(*(void *)(*(void *)(a1 + 128) + 8LL)),  0,  0,  *(_DWORD *)(a1 + 100),  v20,  v32,  0);
    if ((v27 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        __int128 v30 = (os_log_s *)ne_log_obj(v27);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          sub_10006060C();
        }
      }

      return 0xFFFFFFFFLL;
    }

    uint64_t v7 = (unsigned int *)*((void *)v7 + 9);
    if (!v7) {
      return 0LL;
    }
  }

  if (dword_10008BA20)
  {
    unsigned int v29 = (os_log_s *)ne_log_obj(v13);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      sub_100060354();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100030994(uint64_t a1)
{
  uint64_t v16 = 0LL;
  int v15 = 0;
  uint64_t v1 = *(void *)(a1 + 136);
  uint64_t v2 = *(void *)(*(void *)(a1 + 128) + 8LL);
  uint64_t v3 = sub_100030AC4(&v16, &v15, 13, (const void **)a1);
  if (!(_DWORD)v3)
  {
    uint64_t v6 = (unsigned __int8 *)(v1 + 8);
    unsigned int v7 = *(unsigned __int8 *)(v1 + 264);
    uint64_t v8 = (unsigned __int8 *)(v1 + 136);
    unsigned int v9 = *(unsigned __int8 *)(v1 + 265);
    __int16 v10 = *(_WORD *)(v1 + 266);
    uint64_t v11 = (void *)v16;
    ssize_t v12 = sub_100041B88(*(_DWORD *)(qword_10008B848 + 32), v6, v7, v8, v9, v10, v2, 0LL, (void *)v16, v15, 0);
    if ((v12 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        int v14 = (os_log_s *)ne_log_obj(v12);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          sub_1000606A0();
          if (!v11) {
            return 0LL;
          }
          goto LABEL_14;
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        sub_100060708();
        if (!v11) {
          return 0LL;
        }
        goto LABEL_14;
      }
    }

    if (!v11) {
      return 0LL;
    }
LABEL_14:
    free(v11);
    return 0LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100060734();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100030AC4(void *a1, int *a2, int a3, const void **a4)
{
  if (a3 == 15 || (uint64_t v8 = *((void *)a4[16] + 4)) == 0)
  {
    int v9 = 16;
  }

  else
  {
    int v9 = 16;
    do
    {
      if (*(_DWORD *)(v8 + 16) == 1) {
        int v10 = *(unsigned __int8 *)*a4 + *(unsigned __int8 *)a4[1] + 8;
      }
      else {
        int v10 = 8;
      }
      v9 += ((v10 - 1) | 7) + 1;
      uint64_t v8 = *(void *)(v8 + 72);
    }

    while (v8);
  }

  uint64_t v11 = (unsigned __int8 *)a4[17];
  ssize_t v12 = (char *)malloc(v9);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v27 = a1;
    uint64_t v28 = a2;
    *(_WORD *)ssize_t v12 = v9 >> 3;
    *(_DWORD *)(v12 + 2) = 131090;
    v12[6] = *v11;
    *((_DWORD *)v12 + 2) = 0;
    if (a3 == 15 || (uint64_t v14 = *((void *)a4[16] + 4)) == 0)
    {
LABEL_20:
      uint64_t result = 0LL;
      void *v27 = v13;
      *uint64_t v28 = v9;
      return result;
    }

    int v15 = v12 + 24;
    while (1)
    {
      uint64_t v16 = sub_1000101EC(*(_DWORD *)v14);
      if ((_DWORD)v16 == -1) {
        break;
      }
      __int16 v17 = v16;
      uint64_t v18 = sub_10002F6B0(*(_DWORD *)(v14 + 16));
      if ((_DWORD)v18 == -1)
      {
        if (dword_10008BA20)
        {
          int v26 = (os_log_s *)ne_log_obj(v18);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            sub_100060354();
          }
        }

        goto LABEL_30;
      }

      v13[9] = v17;
      *((_BYTE *)v13 + 20) = v18;
      *((_BYTE *)v13 + 21) = 2;
      v13[11] = 0;
      if (*(_DWORD *)(v14 + 16) == 1)
      {
        size_t v19 = (unsigned __int8 *)a4[1];
        size_t v20 = *(unsigned __int8 *)*a4;
        size_t v21 = *v19;
        __int16 v22 = v20 + v21 + 8;
        memcpy(v13 + 12, *a4, v20);
        memcpy(&v15[v20], v19, v21);
      }

      else
      {
        __int16 v22 = 8;
      }

      v13[8] = ((v22 - 1) | 7) + 1;
      uint64_t v14 = *(void *)(v14 + 72);
      if (!v14) {
        goto LABEL_20;
      }
    }

    if (dword_10008BA20)
    {
      int v25 = (os_log_s *)ne_log_obj(v16);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_100060458();
      }
    }

uint64_t sub_100030D18(uint64_t a1)
{
  uint64_t v16 = 0LL;
  int v15 = 0;
  uint64_t v1 = *(void *)(a1 + 136);
  uint64_t v2 = *(void *)(*(void *)(a1 + 128) + 8LL);
  uint64_t v3 = sub_100030AC4(&v16, &v15, 14, (const void **)a1);
  if (!(_DWORD)v3)
  {
    uint64_t v6 = (unsigned __int8 *)(v1 + 8);
    unsigned int v7 = *(unsigned __int8 *)(v1 + 264);
    uint64_t v8 = (unsigned __int8 *)(v1 + 136);
    unsigned int v9 = *(unsigned __int8 *)(v1 + 265);
    __int16 v10 = *(_WORD *)(v1 + 266);
    uint64_t v11 = (void *)v16;
    ssize_t v12 = sub_100041AC0(*(_DWORD *)(qword_10008B848 + 32), v6, v7, v8, v9, v10, v2, 0LL, (void *)v16, v15, 0);
    if ((v12 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v14 = (os_log_s *)ne_log_obj(v12);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          sub_100060760();
          if (!v11) {
            return 0LL;
          }
          goto LABEL_14;
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        sub_1000607C8();
        if (!v11) {
          return 0LL;
        }
        goto LABEL_14;
      }
    }

    if (!v11) {
      return 0LL;
    }
LABEL_14:
    free(v11);
    return 0LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100060734();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100030E48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  unsigned int __src = 0LL;
  uint64_t v2 = sub_100030AC4(&__src, &v14, 15, (const void **)a1);
  if (!(_DWORD)v2)
  {
    uint64_t v5 = (unsigned __int8 *)(v1 + 8);
    unsigned int v6 = *(unsigned __int8 *)(v1 + 264);
    unsigned int v7 = (unsigned __int8 *)(v1 + 136);
    unsigned int v8 = *(unsigned __int8 *)(v1 + 265);
    __int16 v9 = *(_WORD *)(v1 + 266);
    __int16 v10 = __src;
    ssize_t v11 = sub_100041BEC(*(_DWORD *)(qword_10008B848 + 32), v5, v6, v7, v8, v9, __src, v14, 0);
    if ((v11 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v13 = (os_log_s *)ne_log_obj(v11);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          sub_1000607F4();
          if (!v10) {
            return 0LL;
          }
          goto LABEL_14;
        }
      }
    }

    else if (dword_10008BA20)
    {
      ssize_t v12 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        sub_10006085C();
        if (!v10) {
          return 0LL;
        }
        goto LABEL_14;
      }
    }

    if (!v10) {
      return 0LL;
    }
LABEL_14:
    free(v10);
    return 0LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100060734();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100030F68(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 388) = 0;
    uint64_t v2 = (const void *)(a1 + 400);
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
    *(_OWORD *)(a1 + 560) = 0u;
    *(_OWORD *)(a1 + 576) = 0u;
    *(_OWORD *)(a1 + 592) = 0u;
    *(_OWORD *)(a1 + 608) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 688) = 0u;
    *(_OWORD *)(a1 + 704) = 0u;
    uint64_t result = sub_10004D1F4(a1, 1, &v7, a1 + 400, 8LL);
    *(_DWORD *)(a1 + 388) = result;
    if (!(_DWORD)result) {
      return result;
    }
    v8[0] = a1;
    v8[1] = 0LL;
    if ((sub_10004214C(*(_DWORD *)(qword_10008B848 + 32), v7, v8, 1u, 1, v2, result) & 0x80000000) == 0) {
      return *(unsigned int *)(a1 + 388);
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_100060888(v4, v5, v6);
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10003107C(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 1040) = 0;
    uint64_t v2 = (const void *)(a1 + 1048);
    *(_OWORD *)(a1 + 1048) = 0u;
    *(_OWORD *)(a1 + 1064) = 0u;
    *(_OWORD *)(a1 + 1080) = 0u;
    *(_OWORD *)(a1 + 1096) = 0u;
    *(_OWORD *)(a1 + 1112) = 0u;
    *(_OWORD *)(a1 + 1128) = 0u;
    *(_OWORD *)(a1 + 1144) = 0u;
    *(_OWORD *)(a1 + 1160) = 0u;
    *(_OWORD *)(a1 + 1176) = 0u;
    *(_OWORD *)(a1 + 1192) = 0u;
    *(_OWORD *)(a1 + 1208) = 0u;
    *(_OWORD *)(a1 + 1224) = 0u;
    *(_OWORD *)(a1 + 1240) = 0u;
    *(_OWORD *)(a1 + 1256) = 0u;
    *(_OWORD *)(a1 + 1272) = 0u;
    *(_OWORD *)(a1 + 1288) = 0u;
    *(_OWORD *)(a1 + 1304) = 0u;
    *(_OWORD *)(a1 + 1320) = 0u;
    *(_OWORD *)(a1 + 1336) = 0u;
    *(_OWORD *)(a1 + 1352) = 0u;
    uint64_t result = sub_10004D1F4(a1, 2, &v7, a1 + 1048, 8LL);
    *(_DWORD *)(a1 + 1040) = result;
    if (!(_DWORD)result) {
      return result;
    }
    v8[0] = a1;
    v8[1] = 0LL;
    if ((sub_10004214C(*(_DWORD *)(qword_10008B848 + 32), v7, v8, 1u, 2, v2, result) & 0x80000000) == 0) {
      return *(unsigned int *)(a1 + 1040);
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_100060900(v4, v5, v6);
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100031190(unsigned int a1, int a2, unsigned int a3)
{
  uint64_t v6 = sub_100005604(a1);
  switch((_DWORD)v6)
  {
    case 3:
      int v7 = 15;
      break;
    case 4:
      return 0LL;
    case 5:
      int v7 = 14;
      break;
    default:
      if (dword_10008BA20)
      {
        ssize_t v12 = (os_log_s *)ne_log_obj(v6);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          sub_100060978();
        }
      }

      return 0xFFFFFFFFLL;
  }

  int v8 = sub_100005604(a1);
  uint64_t v9 = sub_10000549C(a1, a2);
  switch(v8)
  {
    case 3:
      int v10 = sub_10002FA40(v9);
      break;
    case 4:
      int v10 = sub_10002FC2C(v9);
      break;
    case 5:
      int v10 = sub_10002FB18(v9);
      break;
    default:
      if (dword_10008BA20)
      {
        uint64_t v16 = (os_log_s *)ne_log_obj(v9);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          sub_1000609A4();
        }
      }

      return 0xFFFFFFFFLL;
  }

  int v13 = v10;
  if (v10 == -1) {
    return 0xFFFFFFFFLL;
  }
  if (!a3)
  {
    uint64_t v17 = sub_10004023C(v7, v10, &v20);
    if (!(_DWORD)v17)
    {
      a3 = WORD1(v20);
      goto LABEL_18;
    }

    if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100060A04();
      }
    }

    return 0xFFFFFFFFLL;
  }

uint64_t sub_100031354(void *a1)
{
  uint64_t v1 = a1[5];
  if (!v1 || (v2 = a1[6]) == 0 || (uint64_t v3 = (unsigned __int16 *)a1[18]) == 0LL)
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100060A6C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*v3 <= 1u)
  {
    if (!dword_10008BA20) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_7;
  }

  int v7 = (char *)sub_100035444();
  if (!v7)
  {
    if (dword_10008BA20)
    {
      int v13 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_100060AC4();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v8 = v7;
  uint8_t v7[16] = *((_BYTE *)v3 + 6);
  uint64_t v9 = v7 + 16;
  *((_DWORD *)v7 + 72) = *((_DWORD *)v3 + 2);
  unsigned int v10 = v3[2];
  *((_DWORD *)v7 + 73) = v10;
  *((void *)v7 + 37) = 0LL;
  if (v10 > 5)
  {
    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100060AF0();
      }
    }

    sub_100035450(v8);
    return 0xFFFFFFFFLL;
  }

  if (v10 == 2)
  {
    unsigned int v15 = *v3;
    if (v15 >= 3)
    {
      uint64_t v16 = v7 + 296;
      int v17 = 8 * v15 - 16;
      uint64_t v18 = v3 + 8;
      while (1)
      {
        if (v17 < 8 || (unsigned int v19 = *v18, v17 < v19))
        {
          if (dword_10008BA20)
          {
            __int16 v32 = (os_log_s *)ne_log_obj(v7);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
              sub_100060B1C();
            }
          }

          return 0xFFFFFFFFLL;
        }

        if (v19 <= 7) {
          break;
        }
        int v7 = (char *)sub_100035814();
        *(void *)uint64_t v16 = v7;
        if (!v7)
        {
          if (dword_10008BA20)
          {
            unsigned int v34 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
              sub_100060B48();
            }
          }

          return 0xFFFFFFFFLL;
        }

        *(void *)int v7 = 0LL;
        int v20 = v18[1];
        if ((v20 - 50) > 0x3A || ((1LL << (v20 - 50)) & 0x400000000000003LL) == 0)
        {
          if (dword_10008BA20)
          {
            int v39 = (os_log_s *)ne_log_obj(v7);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
              sub_100060B74();
            }
          }

          return 0xFFFFFFFFLL;
        }

        uint64_t v22 = *(void *)v16;
        *(_WORD *)(*(void *)v16 + 264LL) = v20;
        int v23 = *((unsigned __int8 *)v18 + 4);
        if ((v23 - 1) >= 2)
        {
          if (dword_10008BA20)
          {
            int v35 = (os_log_s *)ne_log_obj(v7);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
              sub_100060CCC();
            }
          }

          return 0xFFFFFFFFLL;
        }

        *(_BYTE *)(v22 + 266) = v23;
        unsigned int v24 = *((unsigned __int8 *)v18 + 5);
        if (v24 >= 3)
        {
          if (v24 != 3)
          {
            if (dword_10008BA20)
            {
              __int16 v40 = (os_log_s *)ne_log_obj(v7);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
                sub_100060BD8();
              }
            }

            return 0xFFFFFFFFLL;
          }

          *(_DWORD *)(v22 + 268) = v18[3];
        }

        *(_DWORD *)(v22 + 272) = v24;
        unsigned int v25 = *v18;
        if (v25 >= 9)
        {
          unsigned int v26 = v25 - 8;
          if (v25 - 8 < 0x10
            || (v27 = (unsigned __int8 *)(v18 + 4), size_t v28 = *((unsigned __int8 *)v18 + 8), v26 < v28))
          {
            if (dword_10008BA20)
            {
              unsigned int v36 = (os_log_s *)ne_log_obj(v7);
              if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
                sub_100060C38();
              }
            }

            return 0xFFFFFFFFLL;
          }

          unsigned int v29 = memmove((void *)(v22 + 8), v18 + 4, v28);
          uint64_t v30 = *v27;
          if (v26 - v30 < 0x10 || (size_t v31 = v27[v30], (int)(v26 - v30) < (int)v31))
          {
            if (dword_10008BA20)
            {
              uint64_t v38 = (os_log_s *)ne_log_obj(v29);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
                sub_100060C64();
              }
            }

            return 0xFFFFFFFFLL;
          }

          int v7 = (char *)memmove((void *)(*(void *)v16 + 136LL), &v27[v30], v31);
          uint64_t v22 = *(void *)v16;
          unsigned int v25 = *v18;
        }

        *(void *)(v22 + 280) = v8;
        v17 -= v25;
        if (v17 < 0 && dword_10008BA20)
        {
          int v37 = (os_log_s *)ne_log_obj(v7);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
            sub_100060C90(&buf, v42, v37);
          }
          goto LABEL_15;
        }

        uint64_t v16 = *(char **)v16;
        uint64_t v18 = (unsigned __int16 *)((char *)v18 + *v18);
        if (v17 < 1) {
          goto LABEL_15;
        }
      }

      if (!dword_10008BA20) {
        return 0xFFFFFFFFLL;
      }
      int v33 = (os_log_s *)ne_log_obj(v7);
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        return 0xFFFFFFFFLL;
      }
LABEL_7:
      sub_100060A98();
      return 0xFFFFFFFFLL;
    }
  }

uint64_t sub_10003181C(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (!v1 || !a1[6])
  {
    if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100060D2C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(*a1 + 12);
  uint64_t v4 = getpid();
  if (v3 != (_DWORD)v4)
  {
    if (dword_10008BA20)
    {
      unsigned int v19 = (os_log_s *)ne_log_obj(v4);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        sub_100060FE0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v5 = sub_100009408(*(_DWORD *)(v2 + 8));
  if (!v5)
  {
    if (dword_10008BA20)
    {
      int v20 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        sub_100060D58(v2 + 8, v2);
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v6 = v5;
  if ((*(_BYTE *)(v5 + 264) & 2) != 0)
  {
    if (dword_10008BA20)
    {
      size_t v21 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_100060F7C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v7 = (_BYTE *)(v5 + 61);
  if (*(_BYTE *)(v5 + 61) != 16)
  {
    if (dword_10008BA20)
    {
      uint64_t v22 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_100060F1C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if ((*(_DWORD *)(v5 + 56) | 0x100) != 0x19F0)
  {
    if (dword_10008BA20)
    {
      unsigned int v24 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100060DC0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (!*(void *)(v5 + 256) && !sub_10004BCC0(v5))
  {
    if (dword_10008BA20)
    {
      uint64_t v27 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_100060E20(v6);
      }
    }

    goto LABEL_43;
  }

  uint64_t v8 = sub_10002F638(*(unsigned __int8 *)(v2 + 3));
  uint64_t v9 = 128LL;
  if (!*(_BYTE *)(v6 + 60)) {
    uint64_t v9 = 120LL;
  }
  uint64_t v10 = *(void *)(*(void *)(v6 + v9) + 32LL);
  if (!v10) {
    goto LABEL_40;
  }
  int v11 = v8;
  int v12 = 1;
  int v13 = 1;
  do
  {
    if (*(_DWORD *)v10 == v11 && !*(_DWORD *)(v10 + 24))
    {
      *(_DWORD *)(v10 + 24) = *(_DWORD *)(v1 + 4);
      int v13 = dword_10008BA20;
      if (dword_10008BA20)
      {
        uint64_t v14 = (os_log_s *)ne_log_obj(v8);
        uint64_t v8 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v8)
        {
          uint64_t v30 = *(const sockaddr **)v6;
          size_t v31 = *(const sockaddr **)(v6 + 8);
          uint64_t v15 = *(unsigned __int8 *)(v2 + 3);
          unsigned int v29 = *(_DWORD *)(v1 + 4);
          uint64_t v16 = sub_10002F6B0(*(_DWORD *)(v10 + 16));
          int v17 = sub_100030080(v31, v30, v15, v29, v16);
          *(_DWORD *)uint8_t buf = 136315138;
          int v33 = v17;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "pfkey GETSPI succeeded: %s\n",  buf,  0xCu);
        }

        int v13 = 0;
      }
    }

    if (!*(_DWORD *)(v10 + 24)) {
      int v12 = 0;
    }
    uint64_t v10 = *(void *)(v10 + 72);
  }

  while (v10);
  if (v13)
  {
LABEL_40:
    if (dword_10008BA20)
    {
      int v23 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_100060E88(v6);
      }
    }

uint64_t sub_100031C14(uint64_t *a1)
{
  if (dword_10008B858) {
    return 0LL;
  }
  uint64_t v2 = *a1;
  if (!*a1 || (uint64_t v3 = a1[1]) == 0 || !a1[5] || !a1[6])
  {
    if (dword_10008BA20)
    {
      uint64_t v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10006104C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v4 = a1[19];
  if (v4) {
    uint64_t v5 = *(unsigned __int8 *)(v4 + 4);
  }
  else {
    uint64_t v5 = 0LL;
  }
  int v7 = *(_DWORD *)(v2 + 12);
  uint64_t v8 = getpid();
  if (v7 != (_DWORD)v8)
  {
    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
        sub_100060FE0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v9 = sub_100009408(*(_DWORD *)(v2 + 8));
  if (!v9)
  {
    if (dword_10008BA20)
    {
      uint64_t v27 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
        sub_100060D58(v2 + 8, v2);
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v10 = v9;
  if ((*(_BYTE *)(v9 + 264) & 2) != 0)
  {
    if (dword_10008BA20)
    {
      size_t v28 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_100060F7C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if ((*(_DWORD *)(v9 + 56) | 0x100) != 0x19C8)
  {
    if (dword_10008BA20)
    {
      unsigned int v29 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_100060DC0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v11 = *(void *)(*(void *)(v9 + 128) + 32LL);
  if (v11)
  {
    int v12 = 0;
    int v13 = (unsigned __int8 *)(v2 + 3);
    do
    {
      uint64_t v14 = sub_10002F638(*v13);
      if ((_DWORD)v14 == -1)
      {
        if (dword_10008BA20)
        {
          uint64_t v30 = (os_log_s *)ne_log_obj(v14);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            sub_100061078();
          }
        }

        return 0xFFFFFFFFLL;
      }

      int v15 = v14;
      uint64_t v16 = sub_10002F74C(v5);
      if ((_DWORD)v16 == -1)
      {
        if (dword_10008BA20)
        {
          size_t v31 = (os_log_s *)ne_log_obj(v16);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            sub_1000610D8();
          }
        }

        return 0xFFFFFFFFLL;
      }

      if (*(_DWORD *)v11 == v15 && *(_DWORD *)(v11 + 24) == *(_DWORD *)(v3 + 4))
      {
        *(_DWORD *)(v11 + 56) = 1;
        if (dword_10008BA20)
        {
          int v17 = (os_log_s *)ne_log_obj(v16);
          BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
          if (v18)
          {
            unsigned int v24 = sub_100030080(*(const sockaddr **)(v10 + 8), *(const sockaddr **)v10, *v13, *(_DWORD *)(v3 + 4), v5);
            *(_DWORD *)uint8_t buf = 136315138;
            *(void *)unsigned int v41 = v24;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "pfkey UPDATE succeeded: %s\n",  buf,  0xCu);
          }

          if (dword_10008BA20)
          {
            unsigned int v19 = (os_log_s *)ne_log_obj(v18);
            BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
            if (v20)
            {
              int v21 = *v13;
              unsigned int v22 = bswap32(*(_DWORD *)(v3 + 4));
              *(_DWORD *)uint8_t buf = 67109632;
              *(_DWORD *)unsigned int v41 = v21;
              *(_WORD *)&v41[4] = 1024;
              *(_DWORD *)&v41[6] = v22;
              __int16 v42 = 1024;
              int v43 = v5;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "IPsec-SA established (update): satype=%u spi=%#x mode=%u\n",  buf,  0x14u);
            }

            if (dword_10008BA20)
            {
              int v23 = (os_log_s *)ne_log_obj(v20);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v25 = sub_100030080( *(const sockaddr **)(v10 + 8),  *(const sockaddr **)v10,  *v13,  *(_DWORD *)(v3 + 4),  v5);
                *(_DWORD *)uint8_t buf = 136315138;
                *(void *)unsigned int v41 = v25;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "IPsec-SA established (update): %s\n",  buf,  0xCu);
              }
            }
          }
        }
      }

      if (!*(_DWORD *)(v11 + 56)) {
        int v12 = 1;
      }
      uint64_t v11 = *(void *)(v11 + 72);
    }

    while (v11);
    if (v12) {
      return 0LL;
    }
  }

  uint64_t v32 = *(unsigned int *)(v10 + 64);
  if ((_DWORD)v32)
  {
    sub_10003AA44(v32);
    *(_DWORD *)(v10 + 64) = 0;
  }

  sub_100004344((int *)(v10 + 56), 10240);
  sub_10004C2DC(v10);
  if (dword_10008BA20)
  {
    unsigned int v34 = (os_log_s *)ne_log_obj(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v10 + 60)) {
        int v35 = "peer";
      }
      else {
        int v35 = "me";
      }
      *(_DWORD *)uint8_t buf = 136315138;
      *(void *)unsigned int v41 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "IPSec Phase 2 established (Initiated by %s).\n",  buf,  0xCu);
    }
  }

  uint64_t v36 = *(void *)(v10 + 256);
  if (v36) {
    ++*(_DWORD *)(v36 + 400);
  }
  uint64_t v37 = *(unsigned int *)(v10 + 68);
  if ((_DWORD)v37)
  {
    sub_10003AA44(v37);
    *(_DWORD *)(v10 + 68) = 0;
  }

  sub_10004BA8C((void *)v10);
  uint64_t v38 = sub_10003A890(*(void *)(*(void *)(v10 + 128) + 8LL), (uint64_t)sub_1000258C4, v10);
  *(_DWORD *)(v10 + 64) = (_DWORD)v38;
  if (!dword_10008BA20) {
    return 0LL;
  }
  int v39 = (os_log_s *)ne_log_obj(v38);
  uint64_t result = os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    sub_10005C5E4();
    return 0LL;
  }

  return result;
}

uint64_t sub_10003214C(uint64_t *a1)
{
  if (dword_10008B858) {
    return 0LL;
  }
  uint64_t v2 = *a1;
  if (!*a1 || (uint64_t v3 = a1[1]) == 0 || !a1[5] || !a1[6])
  {
    if (dword_10008BA20)
    {
      uint64_t v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100061138();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v4 = a1[19];
  if (v4) {
    uint64_t v5 = *(unsigned __int8 *)(v4 + 4);
  }
  else {
    uint64_t v5 = 0LL;
  }
  int v7 = *(_DWORD *)(v2 + 12);
  uint64_t v8 = getpid();
  if (v7 != (_DWORD)v8)
  {
    if (dword_10008BA20)
    {
      BOOL v18 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
        sub_100060FE0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v9 = sub_100009408(*(_DWORD *)(v2 + 8));
  if (!v9)
  {
    if (dword_10008BA20)
    {
      unsigned int v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        sub_100061164(v2 + 8, v2);
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v10 = v9;
  if (dword_10008BA20)
  {
    uint64_t v11 = (os_log_s *)ne_log_obj(v9);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      int v13 = *(unsigned __int8 *)(v2 + 3);
      unsigned int v14 = bswap32(*(_DWORD *)(v3 + 4));
      int v21 = 67109632;
      *(_DWORD *)unsigned int v22 = v13;
      *(_WORD *)&v22[4] = 1024;
      *(_DWORD *)&v22[6] = v14;
      __int16 v23 = 1024;
      int v24 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "IPsec-SA established (add): satype=%u spi=%#x mode=%u\n",  (uint8_t *)&v21,  0x14u);
    }

    if (dword_10008BA20)
    {
      int v15 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        BOOL v20 = sub_100030080( *(const sockaddr **)v10,  *(const sockaddr **)(v10 + 8),  *(unsigned __int8 *)(v2 + 3),  *(_DWORD *)(v3 + 4),  v5);
        int v21 = 136315138;
        *(void *)unsigned int v22 = v20;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "IPsec-SA established (add): %s\n",  (uint8_t *)&v21,  0xCu);
      }
    }
  }

  sub_10004CB1C(*(void *)(v10 + 272), v10);
  uint64_t v16 = sub_100048C2C(0, 0, 0LL, v10);
  if (!dword_10008BA20) {
    return 0LL;
  }
  int v17 = (os_log_s *)ne_log_obj(v16);
  uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    sub_10005C5E4();
    return 0LL;
  }

  return result;
}

uint64_t sub_1000323DC(uint64_t *a1)
{
  if (dword_10008B858) {
    return 0LL;
  }
  uint64_t v2 = *a1;
  if (!*a1 || (v3 = a1[5]) == 0 || (uint64_t v4 = a1[6]) == 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1000611CC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v5 = a1[1];
  int v6 = *(_DWORD *)(v2 + 12);
  uint64_t v7 = getpid();
  if (v6 == (_DWORD)v7)
  {
    if (dword_10008BA20)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        sub_1000611F8(v2);
      }
    }

    return 0xFFFFFFFFLL;
  }

  unsigned int v11 = *(unsigned __int8 *)(v2 + 3);
  uint64_t v10 = (unsigned __int8 *)(v2 + 3);
  uint64_t v12 = sub_10002F638(v11);
  if ((_DWORD)v12 == -1)
  {
    if (dword_10008BA20)
    {
      uint64_t v27 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_100061078();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v13 = v12;
  unsigned int v14 = (const sockaddr *)(v3 + 8);
  int v15 = (const sockaddr *)(v4 + 8);
  if (!dword_10008BA20) {
    goto LABEL_24;
  }
  uint64_t v16 = (os_log_s *)ne_log_obj(v12);
  BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
  if (v17) {
    sub_100061338();
  }
  if (!dword_10008BA20) {
    goto LABEL_24;
  }
  BOOL v18 = (os_log_s *)ne_log_obj(v17);
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
  if (v19) {
    sub_1000612CC(v14);
  }
  if (!dword_10008BA20 || (BOOL v20 = (os_log_s *)ne_log_obj(v19), !os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)))
  {
LABEL_24:
    if (v5) {
      goto LABEL_25;
    }
LABEL_37:
    sub_100009CF0((uint64_t)v14, (unint64_t)v15, v13);
    sub_100009E74((uint64_t)v14, (unint64_t)v15);
    return 0LL;
  }

  sub_100061260(v15);
  if (!v5) {
    goto LABEL_37;
  }
LABEL_25:
  int v21 = (const sockaddr **)sub_1000095D4((uint64_t)v14, (uint64_t)v15, v13, *(_DWORD *)(v5 + 4));
  if (v21)
  {
    if (dword_10008BA20)
    {
      unsigned int v22 = v21;
      __int16 v23 = (os_log_s *)ne_log_obj(v21);
      uint64_t result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        int v24 = sub_100030080(*v22, v22[1], *v10, *(_DWORD *)(v5 + 4), 0LL);
        int v30 = 136315138;
        size_t v31 = v24;
        unsigned int v25 = "pfkey DELETE received: %s\n";
        uint64_t v26 = v23;
LABEL_35:
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&v30, 0xCu);
        return 0LL;
      }

      return result;
    }

    return 0LL;
  }

  if (!dword_10008BA20) {
    return 0LL;
  }
  size_t v28 = (os_log_s *)ne_log_obj(0LL);
  uint64_t result = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    unsigned int v29 = sub_100030080(v14, v15, *v10, *(_DWORD *)(v5 + 4), 0LL);
    int v30 = 136315138;
    size_t v31 = v29;
    unsigned int v25 = "no iph2 found: %s\n";
    uint64_t v26 = v28;
    goto LABEL_35;
  }

  return result;
}

uint64_t sub_1000326C0(void *a1)
{
  if (dword_10008B858) {
    return 0LL;
  }
  uint64_t v2 = a1;
  uint64_t v3 = *a1;
  if (!*a1 || (uint64_t v4 = a1[5]) == 0 || (v5 = a1[6]) == 0 || (v6 = a1[18]) == 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100061398();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*(_WORD *)(v6 + 4) != 2)
  {
    if (!dword_10008BA20) {
      return 0LL;
    }
    unsigned int v11 = (os_log_s *)ne_log_obj(a1);
    uint64_t result = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      sub_100061810();
      return 0LL;
    }

    return result;
  }

  uint64_t v7 = (const sockaddr *)(v5 + 8);
  int v8 = *(unsigned __int8 *)(v5 + 9);
  if (v8 == 30)
  {
  }

  else if (v8 == 2 && (*(_DWORD *)(v5 + 12) & 0xF0) == 0xE0)
  {
LABEL_11:
    if (!dword_10008BA20) {
      return 0LL;
    }
    uint64_t v9 = (os_log_s *)ne_log_obj(a1);
    uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      sub_1000617A8(v7);
      return 0LL;
    }

    return result;
  }

  uint64_t v12 = (const sockaddr *)(v4 + 8);
  uint64_t v13 = qword_10008B848 + 120;
  do
  {
    uint64_t v13 = *(void *)v13;
    if (!v13)
    {
      if (!dword_10008BA20) {
        return 0LL;
      }
      BOOL v17 = (os_log_s *)ne_log_obj(a1);
      uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)result)
      {
        sub_1000613C4(v12);
        return 0LL;
      }

      return result;
    }

    unsigned int v14 = sub_10003C888(*(const sockaddr **)(v13 + 8));
    if (dword_10008BA20)
    {
      int v15 = v14;
      uint64_t v16 = (os_log_s *)ne_log_obj(v14);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint8_t buf = 136315138;
        *(void *)uint64_t v64 = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "checking listen addrs: %s", buf, 0xCu);
      }
    }

    a1 = (void *)sub_10003B6D4(*(void *)(v13 + 8), (unint64_t)v12);
  }

  while ((_DWORD)a1);
  int v19 = *(_DWORD *)(v6 + 8);
  BOOL v18 = (int *)(v6 + 8);
  BOOL v20 = v7;
  uint64_t v21 = sub_1000094A0((unint64_t)v12, (unint64_t)v7, v19);
  if (v21)
  {
    if ((*(_BYTE *)(v21 + 57) & 0x20) == 0)
    {
      if (dword_10008BA20)
      {
        unsigned int v22 = (os_log_s *)ne_log_obj(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          sub_10006177C();
        }
      }

      return 0xFFFFFFFFLL;
    }

    uint64_t v23 = *(void *)(v21 + 272);
  }

  else
  {
    uint64_t v23 = 0LL;
  }

  int v24 = sub_100035420(*v18);
  if (!v24)
  {
    if (dword_10008BA20)
    {
      uint64_t v36 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        sub_10006142C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v25 = (uint64_t)v24;
  if (dword_10008BA20)
  {
    uint64_t v26 = (os_log_s *)ne_log_obj(v24);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
      sub_100061714(v25);
    }
  }

  buf[0] = 1;
  __int128 v71 = *(_OWORD *)(v25 + 264);
  __int128 v70 = *(_OWORD *)(v25 + 248);
  __int128 v69 = *(_OWORD *)(v25 + 232);
  __int128 v67 = *(_OWORD *)(v25 + 200);
  __int128 v66 = *(_OWORD *)(v25 + 184);
  __int128 v65 = *(_OWORD *)(v25 + 168);
  __int128 v68 = *(_OWORD *)(v25 + 216);
  *(_OWORD *)&v64[4] = *(_OWORD *)(v25 + 152);
  __int128 v27 = *(_OWORD *)(v25 + 120);
  __int128 v28 = *(_OWORD *)(v25 + 104);
  __int128 v29 = *(_OWORD *)(v25 + 88);
  __int128 v79 = *(_OWORD *)(v25 + 136);
  __int128 v76 = v29;
  __int128 v77 = v28;
  __int128 v78 = v27;
  __int128 v30 = *(_OWORD *)(v25 + 24);
  __int128 v31 = *(_OWORD *)(v25 + 40);
  __int128 v32 = *(_OWORD *)(v25 + 56);
  __int128 v75 = *(_OWORD *)(v25 + 72);
  __int128 v74 = v32;
  __int128 v73 = v31;
  __int128 v72 = v30;
  char v80 = *(_BYTE *)(v25 + 281);
  char v81 = *(_BYTE *)(v25 + 280);
  __int16 v82 = *(_WORD *)(v25 + 282);
  uint64_t v33 = sub_100034C38(buf);
  uint64_t v34 = (uint64_t)v33;
  if (v33)
  {
    if (dword_10008BA20)
    {
      int v35 = (os_log_s *)ne_log_obj(v33);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
        sub_1000616AC(v34);
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v37 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)BOOL v61 = 136315138;
      uint64_t v62 = sub_100035820(buf);
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "No in-bound policy found: %s\n", v61, 0xCu);
    }
  }

  uint64_t v38 = sub_1000389B8((uint64_t)v20);
  if (!v38)
  {
    if (dword_10008BA20)
    {
      int v55 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
        sub_10006148C(v20);
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v39 = v38;
  __int16 v40 = sub_100009738(v38[73], 0);
  if (!v40)
  {
    if (dword_10008BA20)
    {
      CFIndex v56 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
        sub_1000614F4();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v41 = (uint64_t)v40;
  if (dword_10008BA20)
  {
    __int16 v42 = (os_log_s *)ne_log_obj(v40);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
      sub_100061648();
    }
  }

  *(_BYTE *)(v41 + 61) = v39[73];
  *(_BYTE *)(v41 + 60) = 0;
  *(_DWORD *)(v41 + 52) = *v18;
  *(_BYTE *)(v41 + 104) = *(_BYTE *)(v3 + 3);
  *(_DWORD *)(v41 + 100) = *(_DWORD *)(v3 + 8);
  sub_10004862C((_OWORD *)(v41 + 16));
  int v43 = sub_10003CA00((unsigned __int8 *)(v2[5] + 8LL));
  *(void *)uint64_t v41 = v43;
  if (!v43) {
    goto LABEL_99;
  }
  __int16 v44 = sub_10003CA00((unsigned __int8 *)(v2[6] + 8LL));
  *(void *)(v41 + 8) = v44;
  if (!v44) {
    goto LABEL_99;
  }
  if (*(_BYTE *)(v41 + 61) == 16) {
    sub_100004344((int *)(v41 + 56), 6336);
  }
  if (dword_10008BA20)
  {
    unsigned int v45 = (os_log_s *)ne_log_obj(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
      sub_1000615E0((unsigned __int8 *)(v25 + 16));
    }
  }

  uint64_t v46 = sub_1000113C0(v25 + 24, *(unsigned __int8 *)(v25 + 280), *(unsigned __int16 *)(v25 + 282));
  if (!v46)
  {
    if (dword_10008BA20)
    {
      uint64_t v57 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
        sub_100061520((unsigned __int8 *)(v25 + 16));
      }
    }

    goto LABEL_99;
  }

  uint64_t v47 = v46;
  uint64_t v48 = sub_1000113C0(v25 + 152, *(unsigned __int8 *)(v25 + 281), *(unsigned __int16 *)(v25 + 282));
  if (!v48)
  {
    if (dword_10008BA20)
    {
      BOOL v58 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
        sub_100061520((unsigned __int8 *)(v25 + 16));
      }
    }

    sub_10003F5BC(v47);
    goto LABEL_99;
  }

  int v49 = v48;
  *(void *)(v41 + 112) = sub_10003A03C((uint64_t)v47, (uint64_t)v48, 0LL, 0);
  sub_10003F5BC(v47);
  sub_10003F5BC(v49);
  uint64_t v50 = *(void *)(v41 + 112);
  if (!v50)
  {
    if (dword_10008BA20)
    {
      char v59 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
        sub_10005B250();
      }
    }

    goto LABEL_99;
  }

  sub_10003A63C(v50);
  uint64_t v51 = sub_100037B90(v41, v25, v34);
  if ((v51 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v60 = (os_log_s *)ne_log_obj(v51);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
        sub_100061588();
      }
    }

uint64_t sub_100032DF0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1 || (v2 = a1[1]) == 0 || (v3 = a1[5]) == 0 || (uint64_t v4 = a1[6]) == 0 || a1[3] && a1[4])
  {
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10006183C();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v7 = a1[19];
  if (v7) {
    uint64_t v8 = *(unsigned __int8 *)(v7 + 4);
  }
  else {
    uint64_t v8 = 0LL;
  }
  unsigned int v10 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v9 = (unsigned __int8 *)(v1 + 3);
  uint64_t v11 = sub_10002F638(v10);
  if ((_DWORD)v11 == -1)
  {
    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_100061078();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v12 = v11;
  uint64_t v13 = (const sockaddr *)(v3 + 8);
  unsigned int v14 = (const sockaddr *)(v4 + 8);
  if (dword_10008BA20)
  {
    int v15 = (os_log_s *)ne_log_obj(v11);
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      int v17 = *v9;
      unsigned int v18 = bswap32(*(_DWORD *)(v2 + 4));
      int v33 = 67109632;
      *(_DWORD *)uint64_t v34 = v17;
      *(_WORD *)&v34[4] = 1024;
      *(_DWORD *)&v34[6] = v18;
      LOWORD(v35[0]) = 1024;
      *(_DWORD *)((char *)v35 + 2) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "IPsec-SA expired: satype=%u spi=%#x mode=%u\n",  (uint8_t *)&v33,  0x14u);
    }

    if (dword_10008BA20)
    {
      int v19 = (os_log_s *)ne_log_obj(v16);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        __int128 v30 = sub_100030080(v13, v14, *v9, *(_DWORD *)(v2 + 4), v8);
        int v33 = 136315138;
        *(void *)uint64_t v34 = v30;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "IPsec-SA expired: %s\n",  (uint8_t *)&v33,  0xCu);
      }
    }
  }

  BOOL v20 = sub_1000095D4((uint64_t)v13, (uint64_t)v14, v12, *(_DWORD *)(v2 + 4));
  if (!v20)
  {
    if (dword_10008BA20)
    {
      __int128 v27 = (os_log_s *)ne_log_obj(0LL);
      uint64_t result = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
      if (!(_DWORD)result) {
        return result;
      }
      __int128 v28 = sub_100030080(v13, v14, *v9, *(_DWORD *)(v2 + 4), v8);
      int v33 = 136315138;
      *(void *)uint64_t v34 = v28;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "no such a SA found: %s\n",  (uint8_t *)&v33,  0xCu);
    }

    return 0LL;
  }

  uint64_t v21 = (uint64_t)v20;
  if ((v20[33] & 2) == 0 && (*((_BYTE *)v20 + 57) & 0x20) != 0)
  {
    uint64_t v29 = *((unsigned int *)v20 + 16);
    if ((_DWORD)v29)
    {
      sub_10003AA44(v29);
      *(_DWORD *)(v21 + 64) = 0;
    }

    sub_100004344((int *)(v21 + 56), 18432);
    if (*(_BYTE *)(v21 + 60)
      || sub_10004BF88(*(void *)(v21 + 272), v21)
      || sub_10004E598(*(void *)(v21 + 272), 2))
    {
      sub_10004AAC4((void *)v21);
    }

    else
    {
      sub_1000097E0(v21);
      uint64_t v31 = sub_100025C28(v21);
      if ((v31 & 0x80000000) != 0)
      {
        if (dword_10008BA20)
        {
          __int128 v32 = (os_log_s *)ne_log_obj(v31);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            sub_100061868();
          }
        }

        sub_10004AAC4((void *)v21);
        return 0xFFFFFFFFLL;
      }
    }

    return 0LL;
  }

  if (!dword_10008BA20) {
    return 0LL;
  }
  unsigned int v22 = (os_log_s *)ne_log_obj(v20);
  BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v23)
  {
    int v24 = *(_DWORD *)(v21 + 56);
    if ((*(_BYTE *)(v21 + 264) & 2) != 0) {
      uint64_t v25 = "is dying";
    }
    else {
      uint64_t v25 = "has not been established";
    }
    int v33 = 136315394;
    *(void *)uint64_t v34 = v25;
    *(_WORD *)&v34[8] = 1024;
    v35[0] = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "The expire message is received but the handler %s (status = 0x%x).\n",  (uint8_t *)&v33,  0x12u);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000331B4(void *a1)
{
  if (*a1)
  {
    sub_100009C24(0LL);
    sub_1000092FC(0LL);
    return 0LL;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_100061894();
      }
    }

    return 0xFFFFFFFFLL;
  }

uint64_t sub_100033220(void *a1)
{
  if (*a1 && (v2 = a1[5]) != 0 && (v3 = a1[6]) != 0 && (uint64_t v4 = a1[18]) != 0)
  {
    __int128 v13 = 0u;
    memset(v12, 0, sizeof(v12));
    LOBYTE(v12[0]) = *(_BYTE *)(v4 + 6);
    unsigned int v6 = *(unsigned __int8 *)(v2 + 8);
    uint64_t v5 = v2 + 8;
    BYTE8(v13) = *(_BYTE *)(v5 - 3);
    BYTE9(v13) = *(_BYTE *)(v3 + 5);
    WORD5(v13) = *(unsigned __int8 *)(v5 - 4);
    __memcpy_chk((char *)v12 + 8, v5, v6, 264LL);
    __memcpy_chk((char *)&v12[8] + 8, v3 + 8, *(unsigned __int8 *)(v3 + 8), 136LL);
    uint64_t v7 = sub_100034C38((unsigned __int8 *)v12);
    if (v7)
    {
      uint64_t v8 = v7;
      sub_100035744(v7);
      sub_100035450(v8);
    }

    else if (dword_10008BA20)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1000618EC((unsigned __int8 *)v12);
      }
    }

    return ((int)sub_100031354(a1) >> 31);
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1000618C0();
      }
    }

    return 0xFFFFFFFFLL;
  }

uint64_t sub_1000333A0(void *a1)
{
  if (*a1 && (v2 = a1[5]) != 0 && (v3 = a1[6]) != 0 && (uint64_t v4 = a1[18]) != 0)
  {
    __int128 v13 = 0u;
    memset(v12, 0, sizeof(v12));
    LOBYTE(v12[0]) = *(_BYTE *)(v4 + 6);
    unsigned int v6 = *(unsigned __int8 *)(v2 + 8);
    uint64_t v5 = v2 + 8;
    BYTE8(v13) = *(_BYTE *)(v5 - 3);
    BYTE9(v13) = *(_BYTE *)(v3 + 5);
    WORD5(v13) = *(unsigned __int8 *)(v5 - 4);
    __memcpy_chk((char *)v12 + 8, v5, v6, 264LL);
    __memcpy_chk((char *)&v12[8] + 8, v3 + 8, *(unsigned __int8 *)(v3 + 8), 136LL);
    uint64_t v7 = sub_100034C38((unsigned __int8 *)v12);
    if (v7)
    {
      uint64_t v8 = v7;
      if (dword_10008BA20)
      {
        uint64_t v9 = (os_log_s *)ne_log_obj(v7);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_100061980((unsigned __int8 *)v12);
        }
      }

      sub_100035744(v8);
      sub_100035450(v8);
    }

    return ((int)sub_100031354(a1) >> 31);
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_100061954();
      }
    }

    return 0xFFFFFFFFLL;
  }

uint64_t sub_100033520(void *a1)
{
  if (*a1 && (v1 = a1[5]) != 0 && (v2 = a1[6]) != 0 && (uint64_t v3 = a1[18]) != 0)
  {
    __int128 v12 = 0u;
    memset(v11, 0, sizeof(v11));
    LOBYTE(v11[0]) = *(_BYTE *)(v3 + 6);
    unsigned int v5 = *(unsigned __int8 *)(v1 + 8);
    uint64_t v4 = v1 + 8;
    BYTE8(v12) = *(_BYTE *)(v4 - 3);
    BYTE9(v12) = *(_BYTE *)(v2 + 5);
    WORD5(v12) = *(unsigned __int8 *)(v4 - 4);
    __memcpy_chk((char *)v11 + 8, v4, v5, 264LL);
    __memcpy_chk((char *)&v11[8] + 8, v2 + 8, *(unsigned __int8 *)(v2 + 8), 136LL);
    unsigned int v6 = sub_100034C38((unsigned __int8 *)v11);
    if (v6)
    {
      uint64_t v7 = v6;
      sub_10000AB88((void *)*(unsigned int *)(v3 + 8), 1);
      sub_100035744(v7);
      sub_100035450(v7);
      return 0LL;
    }

    if (dword_10008BA20)
    {
      unsigned int v10 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10005B9A4((unsigned __int8 *)v11);
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v9 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1000619E8();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1000336A0(void *a1)
{
  if (*a1) {
    return 0LL;
  }
  if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100061A14();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1000336FC(void *a1)
{
  if (!*a1)
  {
    if (!dword_10008BA20) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v8 = (os_log_s *)ne_log_obj(a1);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
LABEL_15:
    sub_100061A40();
    return 0xFFFFFFFFLL;
  }

  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[18];
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || v4 == 0)
  {
    if (!dword_10008BA20) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v7 = (os_log_s *)ne_log_obj(a1);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_15;
  }

  __int128 v16 = 0u;
  memset(v15, 0, sizeof(v15));
  LOBYTE(v15[0]) = *(_BYTE *)(v4 + 6);
  unsigned int v11 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v10 = v2 + 8;
  BYTE8(v16) = *(_BYTE *)(v10 - 3);
  BYTE9(v16) = *(_BYTE *)(v3 + 5);
  WORD5(v16) = *(unsigned __int8 *)(v10 - 4);
  __memcpy_chk((char *)v15 + 8, v10, v11, 264LL);
  __memcpy_chk((char *)&v15[8] + 8, v3 + 8, *(unsigned __int8 *)(v3 + 8), 136LL);
  __int128 v12 = sub_100034C38((unsigned __int8 *)v15);
  if (v12)
  {
    __int128 v13 = v12;
    if (dword_10008BA20)
    {
      unsigned int v14 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100061980((unsigned __int8 *)v15);
      }
    }

    sub_100035744(v13);
    sub_100035450(v13);
  }

  return ((int)sub_100031354(a1) >> 31);
}

uint64_t sub_1000338AC(void *a1)
{
  if (*a1)
  {
    sub_100009C24(0LL);
    sub_1000092FC(0LL);
    sub_100035790();
    return 0LL;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_100061A6C();
      }
    }

    return 0xFFFFFFFFLL;
  }

uint64_t sub_10003391C(void *a1)
{
  if (*a1 && (v1 = a1[5]) != 0 && (v2 = a1[6]) != 0 && (uint64_t v3 = a1[18]) != 0)
  {
    __int128 v12 = 0u;
    memset(v11, 0, sizeof(v11));
    LOBYTE(v11[0]) = *(_BYTE *)(v3 + 6);
    unsigned int v5 = *(unsigned __int8 *)(v1 + 8);
    uint64_t v4 = v1 + 8;
    BYTE8(v12) = *(_BYTE *)(v4 - 3);
    BYTE9(v12) = *(_BYTE *)(v2 + 5);
    WORD5(v12) = *(unsigned __int8 *)(v4 - 4);
    __memcpy_chk((char *)v11 + 8, v4, v5, 264LL);
    __memcpy_chk((char *)&v11[8] + 8, v2 + 8, *(unsigned __int8 *)(v2 + 8), 136LL);
    unsigned int v6 = sub_100034C38((unsigned __int8 *)v11);
    if (v6)
    {
      uint64_t v7 = v6;
      sub_10000AB88((void *)*(unsigned int *)(v3 + 8), 0);
      sub_100035744(v7);
      sub_100035450(v7);
      return 0LL;
    }

    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10005B9A4((unsigned __int8 *)v11);
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v9 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100061A98();
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100033A9C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (v2 = a1[20]) != 0 && (uint64_t v3 = a1[21]) != 0)
  {
    int v4 = *(_DWORD *)(v1 + 12);
    uint64_t v5 = getpid();
    if (v4 == (_DWORD)v5)
    {
      uint64_t v6 = *(void *)(v2 + 8);
      if (v6)
      {
        unsigned int v7 = *(_DWORD *)(v3 + 12);
        if (v7)
        {
          sub_10004D2E8(v6, *(_DWORD *)(v3 + 4), (void *)(v3 + 16), v7);
          return 0LL;
        }

        if (dword_10008BA20)
        {
          __int128 v12 = (os_log_s *)ne_log_obj(v6);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
            sub_100061B58(v1);
          }
        }
      }

      else if (dword_10008BA20)
      {
        unsigned int v11 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
          sub_100061AF0(v1);
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        sub_100060FE0();
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v9 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100061AC4();
    }
  }

  return 0xFFFFFFFFLL;
}

void sub_100033BE8(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100033BF4( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

const char *sub_100033C08()
{
  return ipsec_strerror();
}

char *sub_100033C10(uint64_t a1)
{
  return sub_10003EAA0(*(unsigned __int8 *)(a1 + 1));
}

  ;
}

char *sub_100033C34(uint64_t a1, uint64_t a2)
{
  return sub_10003EAA0(*(unsigned __int8 *)(a2 + 1));
}

char *sub_100033C44(uint64_t a1)
{
  return sub_10003CB98(*(const sockaddr **)(a1 + 8));
}

  ;
}

char *sub_100033C5C(const sockaddr *a1)
{
  return sub_10003CB98(a1);
}

char *sub_100033C64(uint64_t a1)
{
  return sub_100035820((unsigned __int8 *)(a1 + 16));
}

void sub_100033C70( __asl_object_s *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((a2 - 3) <= 4)
  {
    asl_set(a1, "Level", off_1000850A0[a2 - 3]);
    uint64_t v10 = (char *)malloc(0x200uLL);
    if (v10)
    {
      unsigned int v11 = v10;
      char *v10 = 0;
      vsnprintf(v10, 0x200uLL, a3, &a9);
      free(v11);
    }
  }

void sub_100033CEC( int a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  size_t v13 = (a3 >> 2) + 2 * a3 + (a3 >> 5) + 3;
  unsigned int v14 = malloc(v13);
  if (a3)
  {
    uint64_t v15 = 0LL;
    int v16 = 0;
    while ((v15 & 0x1F) != 0)
    {
      if ((v15 & 3) == 0)
      {
        char v17 = 32;
LABEL_7:
        v14[v16++] = v17;
      }

      snprintf(&v14[v16], v13 - v16, "%02x", *(unsigned __int8 *)(a2 + v15));
      v16 += 2;
      if (a3 == ++v15) {
        goto LABEL_11;
      }
    }

    char v17 = 10;
    goto LABEL_7;
  }

  int v16 = 0;
LABEL_11:
  if (v13 - v16 >= 2) {
    *(_WORD *)&v14[v16] = 10;
  }
  __str[0] = 10;
  uint64_t v18 = vsnprintf(__str, 0x200uLL, a4, &a9);
  if (dword_10008BA20)
  {
    if (a1 <= 2)
    {
      int v19 = (os_log_s *)ne_log_obj(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT)) {
        sub_100061BC0();
      }
      goto LABEL_29;
    }

    if (a1 == 3)
    {
      BOOL v20 = (os_log_s *)ne_log_obj(v18);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_100061C30();
      }
      goto LABEL_29;
    }

    if (a1 <= 5)
    {
      uint64_t v21 = (os_log_s *)ne_log_obj(v18);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_29;
      }
      *(_DWORD *)uint8_t buf = 136315394;
      __int128 v27 = __str;
      __int16 v28 = 2080;
      uint64_t v29 = v14;
      unsigned int v22 = v21;
      os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s %s", buf, 0x16u);
      goto LABEL_29;
    }

    int v24 = (os_log_s *)ne_log_obj(v18);
    uint64_t v25 = v24;
    if (a1 == 6)
    {
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
        goto LABEL_29;
      }
      *(_DWORD *)uint8_t buf = 136315394;
      __int128 v27 = __str;
      __int16 v28 = 2080;
      uint64_t v29 = v14;
      unsigned int v22 = v25;
      os_log_type_t v23 = OS_LOG_TYPE_INFO;
      goto LABEL_26;
    }

    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
      sub_100061CA0();
    }
  }

void sub_100033F80( uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1)
  {
    uint64_t v15 = calloc(1uLL, 0x58uLL);
    if (v15)
    {
      int v16 = v15;
      *(_DWORD *)a1 = a3;
      v50[1] = &a9;
      char v17 = (const char **)(a1 + 24);
      uint64_t v18 = vasprintf((char **)(a1 + 24), a6, &a9);
      *(_DWORD *)(a1 + 32) = v18;
      *(void *)(a1 + 40) = a4;
      *(void *)(a1 + 48) = a5;
      uint64_t v19 = *(void *)(a1 + 56);
      while (v19)
      {
        uint64_t v20 = v19;
        uint64_t v19 = *(void *)(v19 + 72);
        if (!v19)
        {
          *(void *)(v20 + 72) = v16;
          v16[10] = v20 + 72;
          break;
        }
      }

      if (a2 == 2)
      {
        v50[0] = 0LL;
        uint64_t v21 = *(void *)(a1 + 56);
        if (v21)
        {
          do
          {
            if (*v17)
            {
              unsigned int v22 = v50[0];
              if (v50[0])
              {
                int v49 = *v17;
                v50[0] = 0LL;
                asprintf(v50, "%s\n\t\t-> %s", v22, v49);
                free(v22);
              }

              else
              {
                uint64_t v18 = asprintf(v50, "%s", *v17);
              }
            }

            uint64_t v21 = *(void *)(v21 + 72);
          }

          while (v21);
          if (v50[0] && dword_10008BA20 != 0)
          {
            if (a3 <= 2)
            {
              int v24 = (os_log_s *)ne_log_obj(v18);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT)) {
                sub_100061D10((uint64_t)v50, v24, v25, v26, v27, v28, v29, v30);
              }
              return;
            }

            if (a3 == 3)
            {
              uint64_t v31 = (os_log_s *)ne_log_obj(v18);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                sub_100061D78((uint64_t)v50, v31, v32, v33, v34, v35, v36, v37);
              }
              return;
            }

            if (a3 <= 5)
            {
              uint64_t v38 = (os_log_s *)ne_log_obj(v18);
              if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
                return;
              }
              *(_DWORD *)uint8_t buf = 136315138;
              uint64_t v52 = v50[0];
              int v39 = v38;
              os_log_type_t v40 = OS_LOG_TYPE_DEFAULT;
LABEL_30:
              _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s", buf, 0xCu);
              return;
            }

            uint64_t v41 = (os_log_s *)ne_log_obj(v18);
            __int16 v42 = v41;
            if (a3 == 6)
            {
              if (!os_log_type_enabled(v41, OS_LOG_TYPE_INFO)) {
                return;
              }
              *(_DWORD *)uint8_t buf = 136315138;
              uint64_t v52 = v50[0];
              int v39 = v42;
              os_log_type_t v40 = OS_LOG_TYPE_INFO;
              goto LABEL_30;
            }

            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
              sub_100061DE0((uint64_t)v50, v42, v43, v44, v45, v46, v47, v48);
            }
          }
        }
      }
    }
  }

void sub_1000341F8(const char *a1)
{
  if (a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = "bad file path";
  }
  syslog(5, "%s: about to add racoon log file: %s\n", "plogsetfile", v2);
  if (qword_10008B9F8)
  {
    free((void *)qword_10008B9F8);
    if (dword_1000882CC != -1)
    {
      asl_remove_log_file((asl_object_t)qword_10008BA18, dword_1000882CC);
      asl_close_auxiliary_file(dword_1000882CC);
      dword_1000882CC = -1;
    }
  }

  uint64_t v3 = strdup(a1);
  qword_10008B9F8 = (uint64_t)v3;
  if (!v3)
  {
    if (dword_10008BA20)
    {
      uint64_t v6 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100061E48(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    exit(1);
  }

  int v4 = open(v3, 777, 420LL);
  dword_1000882CC = v4;
  if (v4 < 0)
  {
    uint64_t v5 = __error();
    syslog(5, "%s: failed to add racoon log file: %s. error %d\n", "plogsetfile", v2, *v5);
  }

  else
  {
    asl_add_log_file((asl_object_t)qword_10008BA18, v4);
  }

void sub_10003432C(char *__s2)
{
  uint64_t v1 = (void *)qword_10008B9F8;
  if ((unint64_t)__s2 | qword_10008B9F8)
  {
    if (__s2 && qword_10008B9F8)
    {
      if (dword_1000882CC == -1)
      {
LABEL_8:
        free(v1);
        qword_10008B9F8 = 0LL;
LABEL_9:
        if (__s2) {
          sub_1000341F8(__s2);
        }
        return;
      }

      asl_remove_log_file((asl_object_t)qword_10008BA18, dword_1000882CC);
      close(dword_1000882CC);
      dword_1000882CC = -1;
      uint64_t v1 = (void *)qword_10008B9F8;
    }

    if (!v1) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

uint64_t sub_1000343D0()
{
  return dword_1000882C8;
}

uint64_t sub_1000343DC(int a1)
{
  if ((a1 - 1) >= 7)
  {
    unsigned int v1 = dword_1000882C8;
  }

  else
  {
    dword_1000882C8 = a1;
    unsigned int v1 = a1;
  }

  int v2 = ~(-1 << (v1 + 1)) | ((v1 > 5) << 8);
  syslog(7, "%s: about to set racoon's log level %d, mask %x\n", "plogsetlevel", a1, v2);
  return asl_set_filter(0LL, v2);
}

uint64_t sub_100034464(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (const char *)result;
    int v2 = strncmp((const char *)result, "Emergency", 9uLL);
    if (!v2) {
      return sub_1000343DC(v2);
    }
    if (!strncmp(v1, "Alert", 5uLL))
    {
      dword_1000882C8 = 1;
      syslog(7, "%s: about to set racoon's log level %d, mask %x\n", "plogsetlevel", 1, 3);
      int v3 = 3;
    }

    else if (!strncmp(v1, "Critical", 8uLL))
    {
      dword_1000882C8 = 2;
      syslog(7, "%s: about to set racoon's log level %d, mask %x\n", "plogsetlevel", 2, 7);
      int v3 = 7;
    }

    else if (!strncmp(v1, "Error", 5uLL))
    {
      dword_1000882C8 = 3;
      syslog(7, "%s: about to set racoon's log level %d, mask %x\n", "plogsetlevel", 3, 15);
      int v3 = 15;
    }

    else if (!strncmp(v1, "Warning", 6uLL))
    {
      dword_1000882C8 = 4;
      syslog(7, "%s: about to set racoon's log level %d, mask %x\n", "plogsetlevel", 4, 31);
      int v3 = 31;
    }

    else
    {
      if (strncmp(v1, "Notice", 6uLL))
      {
        if (!strncmp(v1, "Info", 4uLL))
        {
          int v2 = 6;
        }

        else
        {
          uint64_t result = strncmp(v1, "Debug", 5uLL);
          if ((_DWORD)result) {
            return result;
          }
          int v2 = 7;
        }

        return sub_1000343DC(v2);
      }

      dword_1000882C8 = 5;
      syslog(7, "%s: about to set racoon's log level %d, mask %x\n", "plogsetlevel", 5, 63);
      int v3 = 63;
    }

    return asl_set_filter(0LL, v3);
  }

  return result;
}

void sub_10003469C(const char *a1)
{
  if (a1)
  {
    size_t v2 = strlen(a1);
    if ((int)v2 >= 3 && *a1 == 34 && (uint64_t v3 = (v2 - 1), a1[v3] == 34))
    {
      a1[v3] = 0;
      sub_100034464((uint64_t)(a1 + 1));
    }

    else if (dword_10008BA20)
    {
      int v4 = (os_log_s *)ne_log_obj(v2);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100061EB0();
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v5 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100061E7C(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }

void sub_100034754()
{
  int valuePtr = 0;
  buffer[0] = 0;
  SCPreferencesSynchronize((SCPreferencesRef)qword_10008C710);
  Value = (const __CFDictionary *)SCPreferencesGetValue((SCPreferencesRef)qword_10008C710, @"Global");
  if (Value)
  {
    unsigned int v1 = Value;
    CFTypeID v2 = CFGetTypeID(Value);
    if (v2 == CFDictionaryGetTypeID())
    {
      uint64_t v3 = (const __CFNumber *)CFDictionaryGetValue(v1, @"DebugLevel");
      if (v3 && (int v4 = v3, v5 = CFGetTypeID(v3), v5 == CFNumberGetTypeID()))
      {
        CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
        sub_1000343DC(valuePtr);
      }

      else
      {
        uint64_t v6 = (const __CFString *)CFDictionaryGetValue(v1, @"DebugLevelString");
        if (v6)
        {
          uint64_t v7 = v6;
          CFTypeID v8 = CFGetTypeID(v6);
          if (v8 == CFStringGetTypeID())
          {
            CFStringGetCString(v7, buffer, 16LL, 0);
            sub_100034464((uint64_t)buffer);
          }
        }
      }

      uint64_t v9 = (const __CFString *)CFDictionaryGetValue(v1, @"DebugLogfile");
      if (v9)
      {
        uint64_t v10 = v9;
        CFTypeID v11 = CFGetTypeID(v9);
        if (v11 == CFStringGetTypeID())
        {
          CFStringGetCString(v10, &byte_10008BA24, 1024LL, 0);
          sub_1000341F8(&byte_10008BA24);
        }
      }
    }
  }

void sub_1000348CC()
{
  byte_10008BA24 = 0;
  qword_10008BA18 = 0LL;
  dword_1000882C8 = 5;
  syslog(7, "%s: about to set racoon's log level %d, mask %x\n", "plogsetlevel", 5, 63);
  asl_set_filter(0LL, 63);
  sub_100034754();
}

char *sub_100034930(char *__s1, uint64_t a2, const char *a3)
{
  if (qword_10008BA00) {
    free((void *)qword_10008BA00);
  }
  if (__s1)
  {
    uint64_t v6 = strdup(__s1);
    qword_10008BA00 = (uint64_t)v6;
    if (v6) {
      free(v6);
    }
    if (a2) {
      goto LABEL_7;
    }
  }

  else
  {
    qword_10008BA00 = 0LL;
    if (a2)
    {
LABEL_7:
      uint64_t v7 = strdup(__s1);
      goto LABEL_10;
    }
  }

  uint64_t v7 = 0LL;
LABEL_10:
  qword_10008BA08 = (uint64_t)v7;
  if (qword_10008BA10) {
    free((void *)qword_10008BA10);
  }
  if (a3) {
    uint64_t result = strdup(a3);
  }
  else {
    uint64_t result = 0LL;
  }
  qword_10008BA10 = (uint64_t)result;
  return result;
}

char *sub_1000349D0(const __CFAllocator *a1, CFStringRef theString)
{
  CFIndex Length = CFStringGetLength(theString);
  CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  uint64_t v6 = (char *)CFAllocatorAllocate(a1, v5, 0LL);
  CFStringGetCString(theString, v6, v5, 0x8000100u);
  return v6;
}

void sub_100034A40(int a1, CFStringRef format, ...)
{
  uint64_t v3 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0LL, format, va);
  int v4 = sub_1000349D0(kCFAllocatorDefault, v3);
  CFIndex v5 = v4;
  if (!dword_10008BA20) {
    goto LABEL_17;
  }
  if (a1 <= 2)
  {
    uint64_t v6 = (os_log_s *)ne_log_obj(v4);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_100061F10();
    }
    goto LABEL_17;
  }

  if (a1 == 3)
  {
    uint64_t v7 = (os_log_s *)ne_log_obj(v4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100061F70();
    }
    goto LABEL_17;
  }

  if (a1 <= 5)
  {
    CFTypeID v8 = (os_log_s *)ne_log_obj(v4);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    *(_DWORD *)uint8_t buf = 136315138;
    unsigned int v14 = v5;
    uint64_t v9 = v8;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s", buf, 0xCu);
    goto LABEL_17;
  }

  CFTypeID v11 = (os_log_s *)ne_log_obj(v4);
  uint64_t v12 = v11;
  if (a1 == 6)
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
      goto LABEL_17;
    }
    *(_DWORD *)uint8_t buf = 136315138;
    unsigned int v14 = v5;
    uint64_t v9 = v12;
    os_log_type_t v10 = OS_LOG_TYPE_INFO;
    goto LABEL_14;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_100061FD0();
  }
LABEL_17:
  CFAllocatorDeallocate(kCFAllocatorDefault, v5);
  CFRelease(v3);
}

  ;
}

void sub_100034C28( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t *sub_100034C38(unsigned __int8 *a1)
{
  CFTypeID v2 = &qword_100088D18;
  do
    CFTypeID v2 = (uint64_t *)*v2;
  while (v2 && sub_100034C78(a1, (unsigned __int8 *)v2 + 16));
  return v2;
}

BOOL sub_100034C78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 != *a2
      || a1[264] != a2[264]
      || a1[265] != a2[265]
      || *((unsigned __int16 *)a1 + 133) != *((unsigned __int16 *)a2 + 133)
}

uint64_t sub_100034D04(unsigned __int8 *a1, unint64_t *a2)
{
  uint64_t v2 = qword_100088D18;
  if (!qword_100088D18) {
    return v2;
  }
  int v5 = 0;
  uint64_t v6 = a2 + 1;
  while (1)
  {
    uint64_t v7 = sub_100035078(a1, (unsigned __int8 *)(v2 + 16));
    if ((_DWORD)v7) {
      goto LABEL_36;
    }
    if (*a1)
    {
      uint64_t v8 = *(void *)(v2 + 296);
      if (v8) {
        break;
      }
    }

BOOL sub_100035078(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a2 && *a1 != *a2) {
    return 1LL;
  }
  int v4 = *((unsigned __int16 *)a1 + 133);
  if (v4 != 255)
  {
    int v5 = *((unsigned __int16 *)a2 + 133);
    if (v5 != 255 && v4 != v5) {
      return 1LL;
    }
  }

  if (a1[9] != a2[9] || a1[137] != a2[137]) {
    return 1LL;
  }
  uint64_t v7 = a2 + 8;
  if (a1[8] > 0x80u || *v7 >= 0x81u)
  {
    if (dword_10008BA20)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100062220(a1 + 8, v7, v8);
      }
    }

    return 1LL;
  }

  sub_10003D16C((char *)v34, a1 + 8, a2[264]);
  sub_10003D16C((char *)v33, a2 + 8, a2[264]);
  if (dword_10008BA20)
  {
    os_log_type_t v10 = (os_log_s *)ne_log_obj(v9);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
    if (v11)
    {
      int v19 = a2[264];
      int v27 = 134218498;
      uint64_t v28 = a1;
      __int16 v29 = 1024;
      int v30 = v19;
      __int16 v31 = 2080;
      uint64_t v32 = sub_10003C888(v34);
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%p masked with /%d: %s\n",  (uint8_t *)&v27,  0x1Cu);
    }

    if (dword_10008BA20)
    {
      int v12 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v20 = a2[264];
        uint64_t v21 = sub_10003C888(v33);
        int v27 = 134218498;
        uint64_t v28 = a2;
        __int16 v29 = 1024;
        int v30 = v20;
        __int16 v31 = 2080;
        uint64_t v32 = v21;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%p masked with /%d: %s\n",  (uint8_t *)&v27,  0x1Cu);
      }
    }
  }

  uint64_t v13 = sub_10003B83C((unint64_t)v34, (unint64_t)v33);
  if ((_DWORD)v13) {
    return 1LL;
  }
  if (a1[136] > 0x80u || a2[136] >= 0x81u)
  {
    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(v13);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_1000622A8(v26);
      }
    }

    exit(1);
  }

  sub_10003D16C((char *)v34, a1 + 136, a2[265]);
  sub_10003D16C((char *)v33, a2 + 136, a2[265]);
  if (dword_10008BA20)
  {
    int v16 = (os_log_s *)ne_log_obj(v15);
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (v17)
    {
      int v22 = a2[265];
      uint64_t v23 = sub_10003C888(v34);
      int v27 = 134218498;
      uint64_t v28 = a1;
      __int16 v29 = 1024;
      int v30 = v22;
      __int16 v31 = 2080;
      uint64_t v32 = v23;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%p masked with /%d: %s\n",  (uint8_t *)&v27,  0x1Cu);
    }

    if (dword_10008BA20)
    {
      int v18 = (os_log_s *)ne_log_obj(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        int v24 = a2[265];
        uint64_t v25 = sub_10003C888(v33);
        int v27 = 134218498;
        uint64_t v28 = a2;
        __int16 v29 = 1024;
        int v30 = v24;
        __int16 v31 = 2080;
        uint64_t v32 = v25;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%p masked with /%d: %s\n",  (uint8_t *)&v27,  0x1Cu);
      }
    }
  }

  return sub_10003B83C((unint64_t)v34, (unint64_t)v33) != 0;
}

uint64_t *sub_100035420(int a1)
{
  uint64_t result = &qword_100088D18;
  do
    uint64_t result = (uint64_t *)*result;
  while (result && *((_DWORD *)result + 72) != a1);
  return result;
}

void *sub_100035444()
{
  return calloc(1uLL, 0x130uLL);
}

void sub_100035450(void *a1)
{
  uint64_t v2 = (void *)a1[37];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      free(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  free(a1);
}

void sub_100035488(void *__src)
{
  if (LOBYTE(__dst[0]) == 2)
  {
    __int128 v21 = *(_OWORD *)&__dst[25];
    __int128 v22 = *(_OWORD *)&__dst[27];
    __int128 v23 = *(_OWORD *)&__dst[29];
    __int128 v24 = *(_OWORD *)&__dst[31];
    __int128 v17 = *(_OWORD *)&__dst[17];
    __int128 v18 = *(_OWORD *)&__dst[19];
    __int128 v19 = *(_OWORD *)&__dst[21];
    __int128 v20 = *(_OWORD *)&__dst[23];
    __int128 v11 = *(_OWORD *)&__dst[5];
    __int128 v12 = *(_OWORD *)&__dst[7];
    __int128 v9 = *(_OWORD *)&__dst[1];
    __int128 v10 = *(_OWORD *)&__dst[3];
    __int128 v15 = *(_OWORD *)&__dst[13];
    __int128 v16 = *(_OWORD *)&__dst[15];
    __int128 v13 = *(_OWORD *)&__dst[9];
    __int128 v14 = *(_OWORD *)&__dst[11];
    char v1 = BYTE1(__dst[33]);
    char v2 = __dst[33];
  }

  else
  {
    if (LOBYTE(__dst[0]) != 1) {
      return;
    }
    __int128 v21 = *(_OWORD *)&__dst[9];
    __int128 v22 = *(_OWORD *)&__dst[11];
    __int128 v23 = *(_OWORD *)&__dst[13];
    __int128 v24 = *(_OWORD *)&__dst[15];
    __int128 v17 = *(_OWORD *)&__dst[1];
    __int128 v18 = *(_OWORD *)&__dst[3];
    __int128 v19 = *(_OWORD *)&__dst[5];
    __int128 v20 = *(_OWORD *)&__dst[7];
    __int128 v11 = *(_OWORD *)&__dst[21];
    __int128 v12 = *(_OWORD *)&__dst[23];
    __int128 v9 = *(_OWORD *)&__dst[17];
    __int128 v10 = *(_OWORD *)&__dst[19];
    __int128 v15 = *(_OWORD *)&__dst[29];
    __int128 v16 = *(_OWORD *)&__dst[31];
    __int128 v13 = *(_OWORD *)&__dst[25];
    __int128 v14 = *(_OWORD *)&__dst[27];
    char v1 = __dst[33];
    char v2 = BYTE1(__dst[33]);
  }

  *(_OWORD *)&__dst[9] = v21;
  *(_OWORD *)&__dst[11] = v22;
  *(_OWORD *)&__dst[13] = v23;
  *(_OWORD *)&__dst[15] = v24;
  *(_OWORD *)&__dst[1] = v17;
  *(_OWORD *)&__dst[3] = v18;
  *(_OWORD *)&__dst[5] = v19;
  *(_OWORD *)&__dst[7] = v20;
  *(_OWORD *)&__dst[23] = v12;
  *(_OWORD *)&__dst[21] = v11;
  *(_OWORD *)&__dst[19] = v10;
  *(_OWORD *)&__dst[17] = v9;
  *(_OWORD *)&__dst[31] = v16;
  *(_OWORD *)&__dst[29] = v15;
  *(_OWORD *)&__dst[27] = v14;
  *(_OWORD *)&__dst[25] = v13;
  LOBYTE(__dst[33]) = v1;
  LOBYTE(__dst[0]) = 1;
  uint64_t v3 = &qword_100088D18;
  BYTE1(__dst[33]) = v2;
  while (1)
  {
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      break;
    }
    if (!sub_100034C78((unsigned __int8 *)__dst, (unsigned __int8 *)v3 + 16))
    {
      uint64_t v4 = *v3;
      int v5 = (uint64_t *)v3[1];
      if (*v3)
      {
        *(void *)(v4 + 8) = v5;
        int v5 = (uint64_t *)v3[1];
      }

      else
      {
        qword_100088D20 = v3[1];
      }

      *int v5 = v4;
      sub_10003B200();
      sub_100035450(v3);
      break;
    }
  }

  *(_OWORD *)&__dst[9] = v13;
  *(_OWORD *)&__dst[11] = v14;
  *(_OWORD *)&__dst[13] = v15;
  *(_OWORD *)&__dst[15] = v16;
  *(_OWORD *)&__dst[1] = v9;
  *(_OWORD *)&__dst[3] = v10;
  *(_OWORD *)&__dst[5] = v11;
  *(_OWORD *)&__dst[7] = v12;
  *(_OWORD *)&__dst[21] = v19;
  *(_OWORD *)&__dst[23] = v20;
  *(_OWORD *)&__dst[17] = v17;
  *(_OWORD *)&__dst[19] = v18;
  *(_OWORD *)&__dst[29] = v23;
  *(_OWORD *)&__dst[31] = v24;
  *(_OWORD *)&__dst[25] = v21;
  *(_OWORD *)&__dst[27] = v22;
  LOBYTE(__dst[33]) = v2;
  BYTE1(__dst[33]) = v1;
  uint64_t v6 = &qword_100088D18;
  LOBYTE(__dst[0]) = 2;
  while (1)
  {
    uint64_t v6 = (uint64_t *)*v6;
    if (!v6) {
      break;
    }
    if (!sub_100034C78((unsigned __int8 *)__dst, (unsigned __int8 *)v6 + 16))
    {
      uint64_t v7 = *v6;
      uint64_t v8 = (uint64_t *)v6[1];
      if (*v6)
      {
        *(void *)(v7 + 8) = v8;
        uint64_t v8 = (uint64_t *)v6[1];
      }

      else
      {
        qword_100088D20 = v6[1];
      }

      *uint64_t v8 = v7;
      sub_10003B200();
      sub_100035450(v6);
      return;
    }
  }

void sub_100035744(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v2 = (void *)a1[1];
  if (*a1)
  {
    *(void *)(v1 + 8) = v2;
    char v2 = (void *)a1[1];
  }

  else
  {
    qword_100088D20 = a1[1];
  }

  *char v2 = v1;
  sub_10003B200();
}

void sub_100035768(void *a1)
{
  uint64_t v1 = (uint64_t *)qword_100088D18;
  *a1 = qword_100088D18;
  if (!v1) {
    uint64_t v1 = &qword_100088D18;
  }
  v1[1] = (uint64_t)a1;
  qword_100088D18 = (uint64_t)a1;
  a1[1] = &qword_100088D18;
  sub_10003B200();
}

void sub_100035790()
{
  uint64_t v0 = (void *)qword_100088D18;
  if (qword_100088D18)
  {
    do
    {
      char v2 = (void *)*v0;
      uint64_t v1 = (void *)v0[1];
      if (*v0)
      {
        v2[1] = v1;
        uint64_t v1 = (void *)v0[1];
      }

      else
      {
        qword_100088D20 = v0[1];
      }

      *uint64_t v1 = v2;
      sub_10003B200();
      sub_100035450(v0);
      uint64_t v0 = v2;
    }

    while (v2);
  }

BOOL sub_1000357F0()
{
  return qword_100088D18 != 0;
}

void sub_100035804()
{
  qword_100088D18 = 0LL;
  qword_100088D20 = (uint64_t)&qword_100088D18;
}

void *sub_100035814()
{
  return calloc(1uLL, 0x120uLL);
}

char *sub_100035820(unsigned __int8 *a1)
{
  char v2 = sub_10003C888((const sockaddr *)(a1 + 8));
  for (CFIndex i = (const char *)v2; *i; ++i)
  {
    if (*i == 91)
    {
      *i++ = 0;
      break;
    }
  }

  unsigned int v4 = snprintf(byte_100088D28, 0xFFuLL, "%s/%d[%s ", (const char *)v2, a1[264], i);
  if (v4 > 0xFE) {
    return 0LL;
  }
  uint64_t v6 = &byte_100088D28[v4];
  size_t v7 = 255 - v4;
  uint64_t v8 = sub_10003C888((const sockaddr *)(a1 + 136));
  for (CFIndex j = (const char *)v8; *j; ++j)
  {
    if (*j == 91)
    {
      *j++ = 0;
      break;
    }
  }

  int v10 = snprintf(v6, v7, "%s/%d[%s ", (const char *)v8, a1[265], j);
  uint64_t result = 0LL;
  if ((v10 & 0x80000000) == 0 && (int)v7 > v10)
  {
    size_t v11 = (int)v7 - v10;
    __int128 v12 = &v6[v10];
    __int128 v13 = sub_10003EC10(*((unsigned __int16 *)a1 + 133));
    __int128 v14 = sub_10003EB88(*a1);
    snprintf(v12, v11, "proto=%s dir=%s", v13, v14);
    return byte_100088D28;
  }

  return result;
}

uint64_t *sub_100035950(uint64_t a1, const sockaddr **a2)
{
  return sub_10003C888(*a2);
}

void *sub_100035964()
{
  return calloc(1uLL, 0x30uLL);
}

void *sub_100035970()
{
  return calloc(1uLL, 0x50uLL);
}

uint64_t *sub_10003597C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = *(void *)(v2 + 40);
    }

    while (v2);
    uint64_t result = (uint64_t *)(v3 + 40);
  }

  *uint64_t result = a2;
  return result;
}

void *sub_10003599C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t result = (void *)(a1 + 32);
  uint64_t v3 = v4;
  while (v3)
  {
    uint64_t v5 = v3;
    uint64_t v3 = *(void *)(v3 + 72);
    if (!v3)
    {
      uint64_t result = (void *)(v5 + 72);
      break;
    }
  }

  *uint64_t result = a2;
  return result;
}

uint64_t sub_1000359BC(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 72) = *(void *)(result + 32);
  *(void *)(result + 32) = a2;
  return result;
}

void *sub_1000359CC()
{
  return calloc(1uLL, 0x18uLL);
}

void *sub_1000359D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t result = (void *)(a1 + 64);
  uint64_t v3 = v4;
  while (v3)
  {
    uint64_t v5 = v3;
    uint64_t v3 = *(void *)(v3 + 16);
    if (!v3)
    {
      uint64_t result = (void *)(v5 + 16);
      break;
    }
  }

  *uint64_t result = a2;
  return result;
}

uint64_t sub_1000359F8(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = *a1;
    if (*a1)
    {
      if (v3 == a2)
      {
LABEL_7:
        uint64_t result = 0LL;
        *uint64_t v2 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = 0LL;
        return result;
      }

      while (1)
      {
        uint64_t v4 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
        if (!v3) {
          break;
        }
        if (v3 == a2)
        {
          uint64_t v2 = (void *)(v4 + 16);
          goto LABEL_7;
        }
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100035A44(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (uint64_t)calloc(1uLL, 0x30uLL);
  if (!v8)
  {
    if (dword_10008BA20)
    {
      size_t v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1000622E8();
      }
    }

    return 0LL;
  }

  uint64_t v9 = v8;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)a2;
  switch(*(_DWORD *)(*(void *)(a1 + 64) + 172LL))
  {
    case 1:
      *(void *)(v8 + 8) = *(void *)(a2 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(a2 + 16);
      int v10 = *(_DWORD *)(a2 + 20);
      goto LABEL_45;
    case 2:
      uint64_t v12 = *(void *)(a2 + 8);
      if (v12 <= *(void *)(a3 + 8))
      {
        int v22 = *(_DWORD *)(a2 + 16);
        if (v22 <= *(_DWORD *)(a3 + 16))
        {
          *(void *)(v8 + 8) = v12;
LABEL_39:
          *(_DWORD *)(v9 + 16) = v22;
          int v10 = *(_DWORD *)(a3 + 20);
          if (!v10)
          {
            int v10 = *(_DWORD *)(a2 + 20);
            goto LABEL_45;
          }

          if (*(_DWORD *)(a2 + 20) == v10) {
            goto LABEL_45;
          }
          if (dword_10008BA20)
          {
            int v30 = (os_log_s *)ne_log_obj(v8);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              sub_1000625F4();
            }
          }
        }

        else if (dword_10008BA20)
        {
          __int128 v23 = (os_log_s *)ne_log_obj(v8);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_100062594();
          }
        }
      }

      else if (dword_10008BA20)
      {
        __int128 v13 = (os_log_s *)ne_log_obj(v8);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_100062534();
        }
      }

      goto LABEL_141;
    case 3:
      uint64_t v14 = *(void *)(a2 + 8);
      uint64_t v15 = *(void *)(a3 + 8);
      if (v14 <= v15)
      {
        *(void *)(v8 + 8) = v14;
      }

      else
      {
        *(void *)(v8 + 8) = v15;
        *(_DWORD *)(v8 + 24) |= 1u;
        if (dword_10008BA20)
        {
          __int128 v16 = (os_log_s *)ne_log_obj(v8);
          uint64_t v8 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v8)
          {
            uint64_t v17 = *(void *)(a3 + 8);
            uint64_t v18 = *(void *)(a2 + 8);
            *(_DWORD *)uint8_t buf = 67109376;
            *(_DWORD *)char v80 = v17;
            *(_WORD *)&uint8_t v80[4] = 1024;
            *(_DWORD *)&v80[6] = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "use own lifetime: my:%d peer:%d\n",  buf,  0xEu);
          }
        }
      }

      int v24 = *(_DWORD *)(a3 + 16);
      if (*(_DWORD *)(a2 + 16) > v24)
      {
        *(_DWORD *)(v9 + 16) = v24;
        *(_DWORD *)(v9 + 24) |= 1u;
        if (dword_10008BA20)
        {
          uint64_t v25 = (os_log_s *)ne_log_obj(v8);
          uint64_t v8 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v8)
          {
            int v26 = *(_DWORD *)(a3 + 16);
            int v27 = *(_DWORD *)(a2 + 16);
            *(_DWORD *)uint8_t buf = 67109376;
            *(_DWORD *)char v80 = v26;
            *(_WORD *)&uint8_t v80[4] = 1024;
            *(_DWORD *)&v80[6] = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "use own lifebyte: my:%d peer:%d\n",  buf,  0xEu);
          }
        }
      }

      int v22 = *(_DWORD *)(a2 + 16);
      goto LABEL_39;
    case 4:
      uint64_t v19 = *(void *)(a2 + 8);
      if (v19 != *(void *)(a3 + 8))
      {
        if (dword_10008BA20)
        {
          uint64_t v28 = (os_log_s *)ne_log_obj(v8);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_1000626B4();
          }
        }

        goto LABEL_141;
      }

      int v20 = *(_DWORD *)(a2 + 16);
      if (v20 != *(_DWORD *)(a3 + 16))
      {
        if (dword_10008BA20)
        {
          __int16 v29 = (os_log_s *)ne_log_obj(v8);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            sub_100062654();
          }
        }

        goto LABEL_141;
      }

      int v10 = *(_DWORD *)(a2 + 20);
      if (v10 != *(_DWORD *)(a3 + 20))
      {
        if (dword_10008BA20)
        {
          __int128 v69 = (os_log_s *)ne_log_obj(v8);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
            sub_1000625F4();
          }
        }

        goto LABEL_141;
      }

      *(void *)(v8 + 8) = v19;
      *(_DWORD *)(v8 + 16) = v20;
LABEL_45:
      *(_DWORD *)(v9 + 20) = v10;
      CFIndex i = *(int **)(a2 + 32);
      if (i)
      {
        int v32 = 0;
        uint64_t v33 = *(void *)(a2 + 32);
        do
        {
          ++v32;
          uint64_t v33 = *(void *)(v33 + 72);
        }

        while (v33);
      }

      else
      {
        int v32 = 0;
      }

      uint64_t v34 = *(void *)(a3 + 32);
      if (v34)
      {
        int v35 = 0;
        uint64_t v36 = *(void *)(a3 + 32);
        do
        {
          ++v35;
          uint64_t v36 = *(void *)(v36 + 72);
        }

        while (v36);
      }

      else
      {
        int v35 = 0;
      }

      if (v32 != v35) {
        goto LABEL_141;
      }
      uint64_t v37 = v78;
      if (!a4) {
        goto LABEL_63;
      }
LABEL_57:
      if (a4 != 1)
      {
        while (1)
        {
LABEL_68:
          BOOL v38 = i != 0LL;
          BOOL v39 = v34 != 0;
          if (!i || !v34) {
            goto LABEL_129;
          }
          if (*i != *(_DWORD *)v34)
          {
            if (dword_10008BA20)
            {
              __int128 v70 = (os_log_s *)ne_log_obj(v8);
              if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
                sub_1000624B0((int *)v34, i);
              }
            }

            goto LABEL_141;
          }

          uint64_t v40 = *((void *)i + 1);
          uint64_t v41 = *(void *)(v34 + 8);
          if (v40 != v41)
          {
            if (*i != 4) {
              goto LABEL_153;
            }
            if (v40 == 2 && v41 == 4)
            {
              if (!dword_10008BA20) {
                goto LABEL_83;
              }
LABEL_80:
              __int16 v42 = (os_log_s *)ne_log_obj(v8);
              uint64_t v8 = os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
              if ((_DWORD)v8) {
                sub_10006241C(&v77, v37, v42);
              }
              goto LABEL_83;
            }

            if (v41 != 2) {
              goto LABEL_153;
            }
            if (v40 == 4 && dword_10008BA20) {
              goto LABEL_80;
            }
            if (v40 != 4)
            {
LABEL_153:
              if (dword_10008BA20)
              {
                __int128 v72 = (os_log_s *)ne_log_obj(v8);
                if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
                  sub_100062450();
                }
              }

              goto LABEL_141;
            }
          }

LABEL_83:
          if ((*(_BYTE *)(a1 + 96) & 6) == 0) {
            goto LABEL_108;
          }
          uint64_t v43 = sub_10003F994(*(_DWORD *)(v34 + 16));
          if ((_DWORD)v43)
          {
            int v44 = *(_DWORD *)(v34 + 16);
            int v45 = 1;
            if (v44 > 61442)
            {
              if (v44 == 61443) {
                goto LABEL_92;
              }
              if (v44 == 61444) {
                goto LABEL_91;
              }
            }

            else
            {
              if (v44 != 3)
              {
                if (v44 != 4) {
                  goto LABEL_93;
                }
LABEL_91:
                int v45 = 2;
              }

  uint64_t v25 = 0xFFFFFFFFLL;
LABEL_84:
  sub_10004AAC4((void *)v17);
LABEL_85:
  if (v38) {
    sub_10003F5BC(v38);
  }
  return v25;
}

LABEL_92:
              *(_DWORD *)(v34 + 16) = v45;
              *(_DWORD *)(v34 + 20) = 1;
            }

          sub_10003A5C8(*(_DWORD *)(v5 + 16));
        }

        else if (dword_10008BA20)
        {
          uint64_t v14 = (os_log_s *)ne_log_obj(v7);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            sub_100066720();
          }
        }
      }

      else if (dword_10008BA20)
      {
        __int128 v13 = (os_log_s *)ne_log_obj(v7);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_1000666BC();
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100066690();
      }
    }
  }

  else if (dword_10008BA20)
  {
    int v10 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100066664();
    }
  }

  return 0xFFFFFFFFLL;
}

LABEL_93:
            if (dword_10008BA20)
            {
              uint64_t v46 = (os_log_s *)ne_log_obj(v43);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                __int128 v75 = v37;
                uint64_t v47 = sub_10003E374(v44);
                uint64_t v48 = sub_10003E374(*(_DWORD *)(v34 + 16));
                unsigned int v49 = *(_DWORD *)(v34 + 16);
                *(_DWORD *)uint8_t buf = 136315906;
                *(void *)char v80 = v47;
                uint64_t v37 = v75;
                *(_WORD *)&v80[8] = 1024;
                int v81 = v44;
                __int16 v82 = 2080;
                int v83 = v48;
                __int16 v84 = 1024;
                unsigned int v85 = v49;
                _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Adjusting my encmode %s(%d)->%s(%d)\n",  buf,  0x22u);
              }
            }
          }

          uint64_t v8 = sub_10003F994(i[4]);
          if (!(_DWORD)v8) {
            goto LABEL_108;
          }
          int v50 = i[4];
          int v51 = 1;
          if (v50 <= 61442)
          {
            if (v50 != 3)
            {
              if (v50 != 4) {
                goto LABEL_105;
              }
LABEL_103:
              int v51 = 2;
            }

LABEL_108:
          if (i[4] != *(_DWORD *)(v34 + 16))
          {
            if (dword_10008BA20)
            {
              __int128 v71 = (os_log_s *)ne_log_obj(v8);
              if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
                sub_100062398((int *)(v34 + 16), i + 4);
              }
            }

            goto LABEL_141;
          }

          uint64_t v56 = *((void *)i + 8);
          if (!v56) {
            goto LABEL_141;
          }
          while (1)
          {
            uint64_t v57 = *(void *)(v34 + 64);
            if (v57) {
              break;
            }
LABEL_113:
            uint64_t v56 = *(void *)(v56 + 16);
            if (!v56) {
              goto LABEL_141;
            }
          }

          while (sub_100036484(*i, (unsigned int *)v56, (unsigned int *)v57))
          {
            uint64_t v57 = *(void *)(v57 + 16);
            if (!v57) {
              goto LABEL_113;
            }
          }

          BOOL v58 = (uint64_t *)calloc(1uLL, 0x50uLL);
          if (!v58)
          {
            if (dword_10008BA20)
            {
              __int128 v73 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
                sub_100062340();
              }
            }

            goto LABEL_141;
          }

          char v59 = v58;
          *(_DWORD *)BOOL v58 = *i;
          v58[1] = *((void *)i + 1);
          *((_DWORD *)v58 + 4) = i[4];
          *((_DWORD *)v58 + 6) = *(_DWORD *)(v34 + 24);
          *((_DWORD *)v58 + 7) = i[6];
          v58[6] = *(void *)(v34 + 48);
          *((_DWORD *)v58 + 5) = *(_DWORD *)(v34 + 20) | i[5];
          uint64_t v8 = (uint64_t)calloc(1uLL, 0x18uLL);
          if (!v8)
          {
            if (dword_10008BA20)
            {
              __int128 v74 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
                sub_10006236C();
              }
            }

            free(v59);
            goto LABEL_141;
          }

          *(_OWORD *)uint64_t v8 = *(_OWORD *)v56;
          uint64_t v60 = v59 + 8;
          uint64_t v61 = v59[8];
          while (v61)
          {
            uint64_t v62 = v61;
            uint64_t v61 = *(void *)(v61 + 16);
            if (!v61)
            {
              uint64_t v60 = (uint64_t *)(v62 + 16);
              break;
            }
          }

          uint64_t *v60 = v8;
          uint64_t v63 = *(void *)(v9 + 32);
          while (v63)
          {
            uint64_t v64 = v63;
            uint64_t v63 = *(void *)(v63 + 72);
            if (!v63)
            {
              __int128 v65 = (uint64_t **)(v64 + 72);
              goto LABEL_126;
            }
          }

          __int128 v65 = (uint64_t **)(v9 + 32);
LABEL_126:
          os_log_s *v65 = v59;
          CFIndex i = (int *)*((void *)i + 9);
          uint64_t v34 = *(void *)(v34 + 72);
          if (a4) {
            goto LABEL_57;
          }
LABEL_63:
          if (!i) {
            goto LABEL_128;
          }
          uint64_t v34 = *(void *)(a3 + 32);
          if (!v34) {
            goto LABEL_128;
          }
          while (*(_DWORD *)v34 != *i)
          {
            uint64_t v34 = *(void *)(v34 + 72);
            if (!v34) {
              goto LABEL_128;
            }
          }
        }
      }

      if (v34)
      {
        for (CFIndex i = *(int **)(a2 + 32); i; CFIndex i = (int *)*((void *)i + 9))
        {
          if (*i == *(_DWORD *)v34) {
            goto LABEL_68;
          }
        }
      }

LABEL_128:
      BOOL v38 = i != 0LL;
      BOOL v39 = v34 != 0;
LABEL_129:
      if (v38) {
        uint64_t v66 = v34;
      }
      else {
        uint64_t v66 = 0LL;
      }
      if (v39) {
        __int128 v67 = i;
      }
      else {
        __int128 v67 = 0LL;
      }
      if (a4 != 1) {
        __int128 v67 = i;
      }
      if (a4) {
        uint64_t v66 = v34;
      }
      else {
        __int128 v67 = i;
      }
      if ((unint64_t)v67 | v66)
      {
LABEL_141:
        sub_100036658((uint64_t *)v9);
        return 0LL;
      }

      return v9;
    default:
      if (dword_10008BA20)
      {
        __int128 v21 = (os_log_s *)ne_log_obj(v8);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_100062314();
        }
      }

      goto LABEL_141;
  }

uint64_t sub_100036484(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  if (a2[1] != a3[1])
  {
    if (dword_10008BA20)
    {
      int v12 = a1;
      __int128 v13 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = sub_10003E1F4(v12, a3[1]);
        uint64_t v15 = sub_10003E1F4(v12, a2[1]);
        int v17 = 136315394;
        *(void *)uint64_t v18 = v14;
        *(_WORD *)&v18[8] = 2080;
        uint64_t v19 = v15;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "trns_id mismatched: my:%s peer:%s\n",  (uint8_t *)&v17,  0x16u);
      }
    }

    return 1LL;
  }

  uint64_t v5 = a2 + 3;
  if (a2[3] != a3[3])
  {
    if (dword_10008BA20)
    {
      __int128 v16 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        sub_100062714(a3 + 3, v5);
      }
    }

    return 1LL;
  }

  if ((int)a2[2] > (int)a3[2] && dword_10008BA20 != 0)
  {
    size_t v7 = (os_log_s *)ne_log_obj(a1);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (!v8) {
      return result;
    }
    unsigned int v10 = a3[2];
    unsigned int v11 = a2[2];
    int v17 = 67109376;
    *(_DWORD *)uint64_t v18 = v10;
    *(_WORD *)&v18[4] = 1024;
    *(_DWORD *)&v18[6] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "less key length proposed, mine:%d peer:%d.  Use initiaotr's one.\n",  (uint8_t *)&v17,  0xEu);
  }

  return 0LL;
}

void sub_100036658(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (uint64_t *)v1[5];
      sub_100036F3C(v1[4]);
      free(v1);
      uint64_t v1 = v2;
    }

    while (v2);
  }

uint64_t sub_100036690(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20) && dword_10008BA20 != 0)
  {
    uint64_t v5 = (os_log_s *)ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 20);
      int v7 = *(_DWORD *)(a2 + 20);
      int v16 = 67109376;
      int v17 = v6;
      __int16 v18 = 1024;
      int v19 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "pfs_group mismatch. mine:%d peer:%d\n",  (uint8_t *)&v16,  0xEu);
    }
  }

  if (*(void *)(a1 + 8) > *(void *)(a2 + 8) && dword_10008BA20 != 0)
  {
    uint64_t v9 = (os_log_s *)ne_log_obj();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(void *)(a2 + 8);
      int v16 = 67109376;
      int v17 = v10;
      __int16 v18 = 1024;
      int v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "less lifetime proposed. mine:%d peer:%d\n",  (uint8_t *)&v16,  0xEu);
    }
  }

  if (*(_DWORD *)(a1 + 16) > *(_DWORD *)(a2 + 16))
  {
    if (dword_10008BA20)
    {
      int v12 = (os_log_s *)ne_log_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(_DWORD *)(a1 + 16);
        int v14 = *(_DWORD *)(a2 + 16);
        int v16 = 67109376;
        int v17 = v13;
        __int16 v18 = 1024;
        int v19 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "less lifebyte proposed. mine:%d peer:%d\n",  (uint8_t *)&v16,  0xEu);
      }
    }
  }

  return 0LL;
}

uint64_t sub_100036854(_DWORD *a1, void *a2, int a3)
{
  uint64_t v4 = (uint64_t)a1;
  int v5 = *a1;
  if (*a1 == 4)
  {
    int v14 = (int *)a2[8];
    if (!v14)
    {
      if (dword_10008BA20)
      {
        BOOL v39 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
          sub_100062884();
        }
      }

      goto LABEL_66;
    }

    uint64_t v15 = (uint64_t *)(a1 + 16);
    int v16 = 1;
    while (1)
    {
      a1 = calloc(1uLL, 0x18uLL);
      if (!a1) {
        break;
      }
      int v17 = *v14;
      *a1 = v16;
      a1[1] = v17;
      a1[3] = 254;
      uint64_t v18 = *v15;
      while (v18)
      {
        uint64_t v19 = v18;
        uint64_t v18 = *(void *)(v18 + 16);
        if (!v18)
        {
          int v20 = (void *)(v19 + 16);
          goto LABEL_24;
        }
      }

      int v20 = (void *)(v4 + 64);
LABEL_24:
      *int v20 = a1;
      int v14 = (int *)*((void *)v14 + 1);
      ++v16;
      if (!v14) {
        goto LABEL_40;
      }
    }

    if (!dword_10008BA20) {
      goto LABEL_66;
    }
    uint64_t v41 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
LABEL_65:
    sub_10006236C();
    goto LABEL_66;
  }

  if (v5 != 3)
  {
    if (v5 != 2)
    {
      if (dword_10008BA20)
      {
        int v30 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          sub_100062798(v4, v30, v31, v32, v33, v34, v35, v36);
        }
      }

      goto LABEL_66;
    }

    int v6 = (unsigned int *)a2[7];
    if (!v6)
    {
      if (dword_10008BA20)
      {
        BOOL v38 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          sub_100062800();
        }
      }

      goto LABEL_66;
    }

    int v7 = (uint64_t *)(a1 + 16);
    int v8 = 1;
    while (1)
    {
      if (*v6 != 254)
      {
        uint64_t v9 = calloc(1uLL, 0x18uLL);
        if (!v9)
        {
          if (dword_10008BA20)
          {
            uint64_t v43 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
              goto LABEL_65;
            }
          }

void *sub_100036BC4(void *result)
{
  if (result)
  {
    do
    {
      uint64_t v1 = (void *)result[2];
      free(result);
      uint64_t result = v1;
    }

    while (v1);
  }

  return result;
}

uint64_t *sub_100036BF0(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = (uint64_t *)calloc(1uLL, 0x30uLL);
    if (v2)
    {
      uint64_t v3 = v2;
      *(_DWORD *)uint64_t v2 = *(unsigned __int8 *)(*v1 + 4);
      uint64_t v4 = v2 + 4;
      while (1)
      {
        int v5 = calloc(1uLL, 0x50uLL);
        if (!v5)
        {
          if (dword_10008BA20)
          {
            uint64_t v25 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              sub_100062340();
            }
          }

          goto LABEL_34;
        }

        int v6 = v5;
        unint64_t v7 = *(unsigned __int8 *)(*v1 + 6);
        if (v7 >= 5) {
          break;
        }
        *(_DWORD *)int v5 = *(unsigned __int8 *)(*v1 + 5);
        v5[1] = v7;
        *((_DWORD *)v5 + 6) = 0;
        uint64_t v8 = (uint64_t)memcpy( (char *)v5 - *(unsigned __int8 *)(*v1 + 6) + 28,  (const void *)(*v1 + 8),  *(unsigned __int8 *)(*v1 + 6));
        v6[6] = 0LL;
        uint64_t v9 = v1;
        do
        {
          if (dword_10008BA20)
          {
            uint64_t v10 = (os_log_s *)ne_log_obj(v8);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            {
              int v36 = *(unsigned __int8 *)(*v9 + 4);
              uint64_t v34 = sub_10003DFCC(*(unsigned __int8 *)(*v9 + 5));
              uint64_t v16 = v9[1];
              int v17 = *(unsigned __int8 *)(*v9 + 6);
              int v33 = *(unsigned __int8 *)(*v9 + 7);
              int v35 = *(unsigned __int8 *)(v16 + 4);
              uint64_t v18 = sub_10003E1F4(*(unsigned __int8 *)(*v9 + 5), *(unsigned __int8 *)(v16 + 5));
              *(_DWORD *)uint8_t buf = 67110402;
              int v38 = v36;
              __int16 v39 = 2080;
              uint64_t v40 = v34;
              __int16 v41 = 1024;
              int v42 = v17;
              __int16 v43 = 1024;
              int v44 = v33;
              __int16 v45 = 1024;
              int v46 = v35;
              __int16 v47 = 2080;
              uint64_t v48 = v18;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "prop#=%d prot-id=%s spi-size=%d #trns=%d trns#=%d trns-id=%s\n",  buf,  0x2Eu);
            }
          }

          uint64_t v11 = calloc(1uLL, 0x18uLL);
          if (!v11)
          {
            if (dword_10008BA20)
            {
              uint64_t v23 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                sub_10006236C();
              }
            }

            goto LABEL_33;
          }

          uint64_t v12 = v11;
          uint64_t v8 = sub_100011D20(v9[1], (uint64_t)v3, v6, v11);
          if ((v8 & 0x80000000) != 0)
          {
            sub_100036658(v3);
            free(v12);
            free(v6);
            return 0LL;
          }

          uint64_t v13 = v6[8];
          while (v13)
          {
            uint64_t v14 = v13;
            uint64_t v13 = *(void *)(v13 + 16);
            if (!v13)
            {
              uint64_t v15 = (void *)(v14 + 16);
              goto LABEL_17;
            }
          }

          uint64_t v15 = v6 + 8;
LABEL_17:
          void *v15 = v12;
          uint64_t v9 = (uint64_t *)v9[3];
        }

        while (v9);
        if (!*((_DWORD *)v6 + 4)) {
          *((_DWORD *)v6 + 4) = 2;
        }
        uint64_t v19 = *v4;
        while (v19)
        {
          uint64_t v20 = v19;
          uint64_t v19 = *(void *)(v19 + 72);
          if (!v19)
          {
            __int128 v21 = (void *)(v20 + 72);
            goto LABEL_25;
          }
        }

        __int128 v21 = v4;
LABEL_25:
        *__int128 v21 = v6;
        uint64_t v1 = (uint64_t *)v1[2];
        if (!v1) {
          return v3;
        }
      }

      if (dword_10008BA20)
      {
        uint64_t v26 = (os_log_s *)ne_log_obj(v5);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          sub_1000628B0((uint64_t)v1, v26, v27, v28, v29, v30, v31, v32);
        }
      }

void sub_100036F3C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = *(void **)(v1 + 64);
      uint64_t v3 = *(void *)(v1 + 72);
      if (v2)
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          free(v2);
          uint64_t v2 = v4;
        }

        while (v4);
      }

      sub_10003F5BC(*(void **)(v1 + 32));
      sub_10003F5BC(*(void **)(v1 + 40));
      free((void *)v1);
      uint64_t v1 = v3;
    }

    while (v3);
  }

void sub_100036F9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    do
    {
      for (uint64_t i = *(void *)(v3 + 32); i; uint64_t i = *(void *)(i + 72))
        sub_100037130(a1, (int *)i);
      uint64_t v3 = *(void *)(v3 + 40);
    }

    while (v3);
    return;
  }

  if (!dword_10008BA20) {
    return;
  }
  if ((int)a1 <= 2)
  {
    int v5 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_10006291C();
    }
    return;
  }

  if ((_DWORD)a1 == 3)
  {
    int v6 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100062954();
    }
    return;
  }

  if (a1 <= 5)
  {
    unint64_t v7 = (os_log_s *)ne_log_obj(a1);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v14 = 0;
    uint64_t v8 = (uint8_t *)&v14;
    uint64_t v9 = v7;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_20;
  }

  uint64_t v11 = (os_log_s *)ne_log_obj(a1);
  uint64_t v12 = v11;
  if ((_DWORD)a1 == 6)
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
      return;
    }
    __int16 v13 = 0;
    uint64_t v8 = (uint8_t *)&v13;
    uint64_t v9 = v12;
    os_log_type_t v10 = OS_LOG_TYPE_INFO;
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "(null)", v8, 2u);
    return;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_100062980();
  }
}

void sub_1000370F4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = *(void *)(a2 + 32); i; uint64_t i = *(void *)(i + 72))
      sub_100037130(a1, (int *)i);
  }

void sub_100037130(uint64_t a1, int *a2)
{
  if (!a2) {
    return;
  }
  if (dword_10008BA20)
  {
    if ((int)a1 <= 2)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
        sub_1000629AC();
      }
      goto LABEL_18;
    }

    if ((_DWORD)a1 == 3)
    {
      int v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100062A2C();
      }
      goto LABEL_18;
    }

    if (a1 <= 5)
    {
      int v6 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      unint64_t v7 = sub_10003DFCC(*a2);
      uint64_t v8 = *((void *)a2 + 1);
      uint64_t v9 = bswap32(a2[6]);
      uint64_t v10 = bswap32(a2[7]);
      uint64_t v11 = sub_10003E45C(4, a2[4]);
      unsigned int v13 = a2[12];
      unsigned int v12 = a2[13];
      int v26 = 136316674;
      uint64_t v27 = v7;
      __int16 v28 = 1024;
      int v29 = v8;
      __int16 v30 = 2048;
      uint64_t v31 = v9;
      __int16 v32 = 2048;
      uint64_t v33 = v10;
      __int16 v34 = 2080;
      int v35 = v11;
      __int16 v36 = 1024;
      unsigned int v37 = v12;
      __int16 v38 = 1024;
      unsigned int v39 = v13;
      __int16 v14 = v6;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_15;
    }

    uint64_t v16 = (os_log_s *)ne_log_obj(a1);
    int v17 = v16;
    if ((_DWORD)a1 != 6)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        sub_100062AAC();
      }
      goto LABEL_18;
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = sub_10003DFCC(*a2);
      uint64_t v19 = *((void *)a2 + 1);
      uint64_t v20 = bswap32(a2[6]);
      uint64_t v21 = bswap32(a2[7]);
      int v22 = sub_10003E45C(4, a2[4]);
      unsigned int v24 = a2[12];
      unsigned int v23 = a2[13];
      int v26 = 136316674;
      uint64_t v27 = v18;
      __int16 v28 = 1024;
      int v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = v20;
      __int16 v32 = 2048;
      uint64_t v33 = v21;
      __int16 v34 = 2080;
      int v35 = v22;
      __int16 v36 = 1024;
      unsigned int v37 = v23;
      __int16 v38 = 1024;
      unsigned int v39 = v24;
      __int16 v14 = v17;
      os_log_type_t v15 = OS_LOG_TYPE_INFO;
LABEL_15:
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  " (proto_id=%s spisize=%d spi=%08lx spi_p=%08lx encmode=%s reqid=%d:%d)\n",  (uint8_t *)&v26,  0x3Cu);
    }
  }

void sub_1000373B4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    return;
  }
  int v5 = a1;
  if ((_DWORD)a2 == 4)
  {
    if (!dword_10008BA20) {
      return;
    }
    if ((int)a1 <= 2)
    {
      unint64_t v7 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
        sub_100062F60((uint64_t)a3);
      }
      return;
    }

    if ((_DWORD)a1 == 3)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100062FD4((uint64_t)a3);
      }
      return;
    }

    if (a1 > 5)
    {
      uint64_t v33 = (os_log_s *)ne_log_obj(a1);
      __int16 v34 = v33;
      if (v5 != 6)
      {
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
          sub_100063048((uint64_t)a3);
        }
        return;
      }

      if (!os_log_type_enabled(v33, OS_LOG_TYPE_INFO)) {
        return;
      }
      int v35 = sub_10003E1F4(4, a3[1]);
      int v48 = 136315138;
      unsigned int v49 = v35;
      int v22 = "  (trns_id=%s)\n";
      unsigned int v23 = v34;
      os_log_type_t v24 = OS_LOG_TYPE_INFO;
    }

    else
    {
      uint64_t v20 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      uint64_t v21 = sub_10003E1F4(4, a3[1]);
      int v48 = 136315138;
      unsigned int v49 = v21;
      int v22 = "  (trns_id=%s)\n";
      unsigned int v23 = v20;
      os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    }

    uint32_t v36 = 12;
LABEL_61:
    _os_log_impl((void *)&_mh_execute_header, v23, v24, v22, (uint8_t *)&v48, v36);
    return;
  }

  if ((_DWORD)a2 == 3)
  {
    if (!dword_10008BA20) {
      return;
    }
    if ((int)a1 <= 2)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_100062DE0();
      }
      return;
    }

    if ((_DWORD)a1 == 3)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_100062E60();
      }
      return;
    }

    if (a1 > 5)
    {
      unsigned int v37 = (os_log_s *)ne_log_obj(a1);
      __int16 v38 = v37;
      if (v5 != 6)
      {
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
          sub_100062EE0();
        }
        return;
      }

      if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO)) {
        return;
      }
      unsigned int v39 = sub_10003E1F4(3, a3[1]);
      unsigned int v40 = a3[2];
      __int16 v41 = sub_10003E45C(5, a3[3]);
      int v48 = 136315650;
      unsigned int v49 = v39;
      __int16 v50 = 1024;
      LODWORD(v51[0]) = v40;
      WORD2(v51[0]) = 2080;
      *(void *)((char *)v51 + 6) = v41;
      int v22 = "  (trns_id=%s encklen=%d authtype=%s)\n";
      unsigned int v23 = v38;
      os_log_type_t v24 = OS_LOG_TYPE_INFO;
    }

    else
    {
      uint64_t v25 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v26 = sub_10003E1F4(3, a3[1]);
      unsigned int v27 = a3[2];
      __int16 v28 = sub_10003E45C(5, a3[3]);
      int v48 = 136315650;
      unsigned int v49 = v26;
      __int16 v50 = 1024;
      LODWORD(v51[0]) = v27;
      WORD2(v51[0]) = 2080;
      *(void *)((char *)v51 + 6) = v28;
      int v22 = "  (trns_id=%s encklen=%d authtype=%s)\n";
      unsigned int v23 = v25;
      os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    }

    uint32_t v36 = 28;
    goto LABEL_61;
  }

  if ((_DWORD)a2 != 2)
  {
    if (!dword_10008BA20) {
      return;
    }
    if ((int)a1 <= 2)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)) {
        sub_100062B2C(a2, v9);
      }
      return;
    }

    if ((_DWORD)a1 == 3)
    {
      unsigned int v13 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_100062B9C(a2, v13, v14, v15, v16, v17, v18, v19);
      }
      return;
    }

    if (a1 > 5)
    {
      int v46 = (os_log_s *)ne_log_obj(a1);
      __int16 v47 = v46;
      if (v5 != 6)
      {
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
          sub_100062C00(a2, v47);
        }
        return;
      }

      if (!os_log_type_enabled(v46, OS_LOG_TYPE_INFO)) {
        return;
      }
      int v48 = 67109120;
      LODWORD(v49) = a2;
      int v22 = "(unknown proto_id %d)\n";
      unsigned int v23 = v47;
      os_log_type_t v24 = OS_LOG_TYPE_INFO;
    }

    else
    {
      __int16 v32 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v48 = 67109120;
      LODWORD(v49) = a2;
      int v22 = "(unknown proto_id %d)\n";
      unsigned int v23 = v32;
      os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    }

    uint32_t v36 = 8;
    goto LABEL_61;
  }

  if (!dword_10008BA20) {
    return;
  }
  if ((int)a1 <= 2)
  {
    int v6 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_100062C70();
    }
    return;
  }

  if ((_DWORD)a1 == 3)
  {
    unsigned int v12 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100062CF0();
    }
    return;
  }

  if (a1 <= 5)
  {
    int v29 = (os_log_s *)ne_log_obj(a1);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v30 = sub_10003E1F4(2, a3[1]);
    uint64_t v31 = sub_10003E45C(5, a3[3]);
    int v48 = 136315394;
    unsigned int v49 = v30;
    __int16 v50 = 2080;
    v51[0] = v31;
    int v22 = "  (trns_id=%s authtype=%s)\n";
    unsigned int v23 = v29;
    os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
LABEL_56:
    uint32_t v36 = 22;
    goto LABEL_61;
  }

  int v42 = (os_log_s *)ne_log_obj(a1);
  __int16 v43 = v42;
  if (v5 == 6)
  {
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v44 = sub_10003E1F4(2, a3[1]);
    __int16 v45 = sub_10003E45C(5, a3[3]);
    int v48 = 136315394;
    unsigned int v49 = v44;
    __int16 v50 = 2080;
    v51[0] = v45;
    int v22 = "  (trns_id=%s authtype=%s)\n";
    unsigned int v23 = v43;
    os_log_type_t v24 = OS_LOG_TYPE_INFO;
    goto LABEL_56;
  }

  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
    sub_100062D68();
  }
}

void sub_100037968(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 <= 19) {
    *((_BYTE *)v27 + a3) = 0;
  }
  if (dword_10008BA20)
  {
    if ((int)a1 <= 2)
    {
      int v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
        sub_1000630BC();
      }
      goto LABEL_19;
    }

    if ((_DWORD)a1 == 3)
    {
      unint64_t v7 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100063130();
      }
      goto LABEL_19;
    }

    if (a1 <= 5)
    {
      uint64_t v8 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      int v19 = 136315906;
      uint64_t v20 = v27;
      __int16 v21 = 2048;
      uint64_t v22 = a2;
      __int16 v23 = 2048;
      uint64_t v24 = v9;
      __int16 v25 = 2048;
      uint64_t v26 = v10;
      uint64_t v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s%p: next=%p tnext=%p\n", (uint8_t *)&v19, 0x2Au);
      goto LABEL_19;
    }

    unsigned int v13 = (os_log_s *)ne_log_obj(a1);
    uint64_t v14 = v13;
    if ((_DWORD)a1 == 6)
    {
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
        goto LABEL_19;
      }
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      int v19 = 136315906;
      uint64_t v20 = v27;
      __int16 v21 = 2048;
      uint64_t v22 = a2;
      __int16 v23 = 2048;
      uint64_t v24 = v15;
      __int16 v25 = 2048;
      uint64_t v26 = v16;
      uint64_t v11 = v14;
      os_log_type_t v12 = OS_LOG_TYPE_INFO;
      goto LABEL_16;
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      sub_1000631A4();
    }
  }

LABEL_19:
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    sub_100037968(a1, v17, (a3 + 1));
  }
  uint64_t v18 = *(void *)(a2 + 24);
  if (v18) {
    sub_100037968(a1, v18, (a3 + 1));
  }
}

void sub_100037B88(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100037B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = 1;
  uint64_t v7 = (uint64_t)calloc(1uLL, 0x30uLL);
  if (!v7)
  {
    if (dword_10008BA20)
    {
      os_log_type_t v12 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1000622E8();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v8 = (uint64_t *)v7;
  *(_DWORD *)uint64_t v7 = 1;
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)(v7 + 8) = *(void *)(v9 + 24);
  *(void *)(v7 + 16) = *(void *)(v9 + 32);
  if (!*(_DWORD *)(qword_10008B848 + 312))
  {
    uint64_t v10 = (uint64_t *)(a2 + 296);
    do
    {
      uint64_t v10 = (uint64_t *)*v10;
      if (!v10)
      {
        int v6 = 1;
        goto LABEL_13;
      }
    }

    while (*((_BYTE *)v10 + 266) != 2);
    uint64_t v7 = sub_10002F74C(2LL);
    int v6 = v7;
    uint64_t v11 = *(void *)(a1 + 256);
    if (v11 && (*(_BYTE *)(v11 + 96) & 6) != 0) {
      int v6 = v7 + *(unsigned __int16 *)(*(void *)(v11 + 88) + 12LL);
    }
  }

uint64_t sub_100037EBC(uint64_t a1)
{
  __int16 v28 = 0LL;
  if (*(_BYTE *)(a1 + 61) != 16) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = sub_10000B778(*(unint64_t **)(a1 + 224), 1u);
  if (v2)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    while (1)
    {
      uint64_t v5 = v2[v3];
      if (v5)
      {
        if (v4)
        {
          sub_100036658(v4);
          uint64_t v5 = v2[v3];
        }

        uint64_t v4 = sub_100036BF0((uint64_t *)v5);
        if (!v4) {
          goto LABEL_41;
        }
        uint64_t v5 = (uint64_t)calloc(1uLL, 0x30uLL);
        if (!v5)
        {
          if (dword_10008BA20)
          {
            int v25 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              sub_1000622E8();
            }
          }

          goto LABEL_41;
        }

        int v6 = (void *)v5;
        *(_DWORD *)uint64_t v5 = 1;
        uint64_t v7 = *(void *)(a1 + 112);
        *(void *)(v5 + 8) = *(void *)(v7 + 24);
        *(void *)(v5 + 16) = *(void *)(v7 + 32);
        if (v4[5]) {
          BOOL v8 = dword_10008BA20 == 0;
        }
        else {
          BOOL v8 = 1;
        }
        if (!v8)
        {
          uint64_t v9 = (os_log_s *)ne_log_obj(v5);
          uint64_t v5 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v5) {
            sub_100063270(&v26, v27, v9);
          }
        }

        uint64_t v10 = v4[4];
        if (v10)
        {
          while (1)
          {
            uint64_t v11 = calloc(1uLL, 0x50uLL);
            if (!v11) {
              break;
            }
            os_log_type_t v12 = v11;
            _DWORD *v11 = *(_DWORD *)v10;
            *((void *)v11 + 1) = *(void *)(v10 + 8);
            uint8_t v11[4] = *(_DWORD *)(v10 + 16);
            v11[6] = 0;
            v11[7] = *(_DWORD *)(v10 + 24);
            *((void *)v11 + 6) = 0LL;
            uint64_t v5 = sub_100036854(v11, *(void **)(a1 + 112), *(unsigned __int8 *)(a1 + 61));
            if ((v5 & 0x80000000) != 0)
            {
              if (dword_10008BA20)
              {
                int v20 = (os_log_s *)ne_log_obj(v5);
                if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
                  sub_100063218();
                }
              }

              free(v12);
              goto LABEL_40;
            }

            uint64_t v13 = v6[4];
            while (v13)
            {
              uint64_t v14 = v13;
              uint64_t v13 = *(void *)(v13 + 72);
              if (!v13)
              {
                uint64_t v15 = (void *)(v14 + 72);
                goto LABEL_23;
              }
            }

            uint64_t v15 = v6 + 4;
LABEL_23:
            void *v15 = v12;
            uint64_t v10 = *(void *)(v10 + 72);
            if (!v10) {
              goto LABEL_24;
            }
          }

          if (dword_10008BA20)
          {
            uint64_t v19 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
              sub_100062340();
            }
          }

uint64_t sub_1000381B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0LL;
  }
  while (*(_DWORD *)(v1 + 16) != 1)
  {
    uint64_t v1 = *(void *)(v1 + 72);
    if (!v1) {
      return 0LL;
    }
  }

  return 1LL;
}

__n128 sub_1000381E4(__n128 *a1)
{
  uint64_t v2 = calloc(1uLL, 0x18uLL);
  if (v2)
  {
    __n128 result = *a1;
    *uint64_t v2 = *a1;
  }

  return result;
}

_OWORD *sub_100038218(_OWORD *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result + 4;
    do
    {
      __n128 result = calloc(1uLL, 0x18uLL);
      if (!result) {
        break;
      }
      *__n128 result = *(_OWORD *)v2;
      uint64_t v4 = *v3;
      while (v4)
      {
        uint64_t v5 = v4;
        uint64_t v4 = *(void *)(v4 + 16);
        if (!v4)
        {
          int v6 = (void *)(v5 + 16);
          goto LABEL_9;
        }
      }

      int v6 = v3;
LABEL_9:
      *int v6 = result;
      uint64_t v2 = *(void *)(v2 + 16);
    }

    while (v2);
  }

  return result;
}

void *sub_100038280(void *result, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result + 4;
    do
    {
      __n128 result = calloc(1uLL, 0x50uLL);
      if (!result) {
        break;
      }
      int v6 = result;
      *(_DWORD *)__n128 result = *(_DWORD *)v4;
      result[1] = *(void *)(v4 + 8);
      result[2] = *(void *)(v4 + 16);
      if (!a3)
      {
        result[3] = *(void *)(v4 + 24);
        result[6] = *(void *)(v4 + 48);
      }

      __n128 result = sub_100038218(result, *(void *)(v4 + 64));
      uint64_t v7 = *v5;
      while (v7)
      {
        uint64_t v8 = v7;
        uint64_t v7 = *(void *)(v7 + 72);
        if (!v7)
        {
          uint64_t v9 = (void *)(v8 + 72);
          goto LABEL_11;
        }
      }

      uint64_t v9 = v5;
LABEL_11:
      *uint64_t v9 = v6;
      uint64_t v4 = *(void *)(v4 + 72);
    }

    while (v4);
  }

  return result;
}

uint64_t sub_100038328(uint64_t result, int a2)
{
  uint64_t v9 = 0LL;
  if (result)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = calloc(1uLL, 0x30uLL);
      if (!v4) {
        break;
      }
      uint64_t v5 = v4;
      *(_DWORD *)uint64_t v4 = *(_DWORD *)v3;
      v4[1] = *(void *)(v3 + 8);
      v4[2] = *(void *)(v3 + 16);
      *((_DWORD *)v4 + 6) = *(_DWORD *)(v3 + 24);
      sub_100038280(v4, *(void *)(v3 + 32), a2);
      uint64_t v6 = v9;
      if (v9)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(void *)(v6 + 40);
        }

        while (v6);
        uint64_t v8 = (uint64_t *)(v7 + 40);
      }

      else
      {
        uint64_t v8 = &v9;
      }

      *uint64_t v8 = (uint64_t)v5;
      uint64_t v3 = *(void *)(v3 + 40);
    }

    while (v3);
    return v9;
  }

  return result;
}

  ;
}

  ;
}

  ;
}

char *sub_100038458()
{
  return sub_10003E45C(4, *(unsigned int *)(v0 + 16));
}

  ;
}

  ;
}

  ;
}

void sub_1000384B8( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

char *sub_1000384CC(uint64_t a1, uint64_t a2)
{
  return sub_10003E45C(5, a2);
}

char *sub_1000384D4(uint64_t a1)
{
  return sub_10003E1F4(2, *(unsigned int *)(a1 + 4));
}

char *sub_1000384E4(uint64_t a1)
{
  return sub_10003E1F4(4, *(unsigned int *)(a1 + 4));
}

  ;
}

char *sub_100038504(uint64_t a1)
{
  return sub_10003E1F4(3, *(unsigned int *)(a1 + 4));
}

void sub_100038514(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

  ;
}

void sub_100038534( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

char *sub_100038548@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 56) = a2;
  return sub_10003DFCC(*a1);
}

void sub_100038554(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

  ;
}

_DWORD *sub_100038574(uint64_t a1, int a2)
{
  uint64_t v3 = (sockaddr *)a1;
  uint64_t v5 = (unsigned __int8 *)(a1 + 1);
  int v4 = *(unsigned __int8 *)(a1 + 1);
  if (*(_BYTE *)(a1 + 1))
  {
    if (v4 != 30 && v4 != 2)
    {
      if (dword_10008BA20)
      {
        int v25 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          sub_1000632A4(v5, v25);
        }
      }

      return 0LL;
    }

    int v7 = *(unsigned __int16 *)(a1 + 2);
    BOOL v8 = *(_WORD *)(a1 + 2) == 0;
    if (getnameinfo((const sockaddr *)a1, *(unsigned __int8 *)a1, v34, 0x401u, v33, 0x20u, 10))
    {
      __strlcpy_chk(v34, "(invalid)", 1025LL, 1025LL);
      __strlcpy_chk(v33, "(invalid)", 32LL, 32LL);
    }

    uint64_t v9 = "[";
    uint64_t v10 = (const char *)&unk_10007E069;
    if (v7)
    {
      uint64_t v11 = v33;
    }

    else
    {
      uint64_t v9 = (const char *)&unk_10007E069;
      uint64_t v11 = (char *)&unk_10007E069;
    }

    if (v7) {
      uint64_t v10 = "]";
    }
    a1 = snprintf(__str, 0x42BuLL, "%s%s%s%s", v34, v9, v11, v10);
  }

  else
  {
    strcpy(__str, "anonymous");
    BOOL v8 = 1;
  }

  os_log_type_t v12 = (_DWORD *)qword_100088E28;
  if (!qword_100088E28)
  {
LABEL_75:
    if (dword_10008BA20)
    {
      uint64_t v31 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
        sub_10006331C(v31);
      }
    }

    return 0LL;
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  int v16 = 0;
  uint64_t v17 = 0LL;
  do
  {
    if (!*v5 && !*(_BYTE *)(*(void *)v12 + 1LL))
    {
      if (!dword_10008BA20) {
        return v12;
      }
      uint8_t v26 = (os_log_s *)ne_log_obj(a1);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
        return v12;
      }
      goto LABEL_55;
    }

    int v18 = v12[2];
    unint64_t v19 = *(void *)v12;
    if (!v18)
    {
      if (v8)
      {
        a1 = sub_10003B6D4((unint64_t)v3, v19);
        if (!(_DWORD)a1) {
          goto LABEL_56;
        }
        goto LABEL_42;
      }

      a1 = sub_10003B8F4((unint64_t)v3, v19);
      if ((_DWORD)a1)
      {
        a1 = sub_10003B6D4((unint64_t)v3, *(void *)v12);
        if (!(_DWORD)a1) {
          uint64_t v13 = v12;
        }
        goto LABEL_42;
      }

uint64_t sub_100038984(uint64_t result)
{
  uint64_t v1 = (void *)qword_100088E28;
  if (!qword_100088E28) {
    return 1LL;
  }
  if ((_DWORD)result)
  {
    while (!*(_BYTE *)(*v1 + 1LL))
    {
      uint64_t v1 = (void *)v1[38];
      if (!v1) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

_DWORD *sub_1000389B8(uint64_t a1)
{
  __n128 result = sub_100038574(a1, 1);
  if (!result)
  {
    if (*(_BYTE *)(a1 + 1) != 30) {
      return 0LL;
    }
    int v4 = 528;
    nw_nat64_extract_v4(&v3, a1 + 8, &v5);
    __n128 result = (_DWORD *)sub_1000389B8(&v4);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

_DWORD *sub_100038A58()
{
  uint64_t v0 = calloc(1uLL, 0x140uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    v0[71] = 0;
    *((void *)v0 + 31) = 0LL;
    *((void *)v0 + 3) = 0x100000001LL;
    *((void *)v0 + 36) = 0x1000000001LL;
    v0[8] = 0;
    *((void *)v0 + 7) = sub_100007734();
    *(_OWORD *)(v1 + 34) = xmmword_10006A210;
    *(_OWORD *)(v1 + 26) = xmmword_10006A220;
    *((void *)v1 + 15) = 0x100000001LL;
    *(_OWORD *)(v1 + 38) = xmmword_10006A230;
    *((void *)v1 + 25) = *(void *)(qword_10008B848 + 268);
    *(_OWORD *)(v1 + 42) = xmmword_10006A240;
    v1[46] = 1;
    *((void *)v1 + 5) = 0LL;
    *((void *)v1 + 6) = 0LL;
    *((_OWORD *)v1 + 13) = xmmword_10006A250;
    *((void *)v1 + 28) = 1LL;
    v1[60] = 0;
    *((void *)v1 + 34) = 0LL;
    v1[70] = 1;
  }

  return v1;
}

void *sub_100038B34(const sockaddr *a1)
{
  uint64_t v2 = sub_100038574((uint64_t)a1, 0);
  if (v2) {
    return sub_100038BA0((void **)v2);
  }
  if (dword_10008BA20)
  {
    int v4 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10006341C(a1, v4);
    }
  }

  return 0LL;
}

void *sub_100038BA0(void **a1)
{
  uint64_t v2 = calloc(1uLL, 0x140uLL);
  __int128 v3 = v2;
  if (v2)
  {
    memcpy(v2, a1, 0x140uLL);
    *__int128 v3 = 0LL;
    v3[37] = 0LL;
    v3[9] = 0LL;
    v3[31] = 0LL;
    *(void *)((char *)v3 + 284) = &_mh_execute_header;
    v3[11] = 0LL;
    v3[12] = 0LL;
    v3[34] = 0LL;
    v3[5] = 0LL;
    v3[6] = 0LL;
    uint64_t v4 = v3[2];
    if (v4) {
      v3[2] = sub_100038CDC(v4);
    }
    int v5 = sub_100007734();
    v3[7] = v5;
    sub_1000077F4(a1[7], sub_100038C38, (uint64_t)v5);
  }

  return v3;
}

uint64_t sub_100038C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = calloc(1uLL, 0x10uLL);
  if (!v4) {
    return -1LL;
  }
  int v5 = v4;
  *(_DWORD *)uint64_t v4 = 4;
  if (sub_100010D84((void ***)v4 + 1, *(_DWORD *)a1, *(void *)(a1 + 8)))
  {
    free(v5);
    return -1LL;
  }

  *int v5 = *(_DWORD *)a1;
  sub_1000077AC(a2, (uint64_t)v5);
  return 0LL;
}

_DWORD *sub_100038CB4()
{
  __n128 result = calloc(1uLL, 0x10uLL);
  if (result) {
    *__n128 result = 4;
  }
  return result;
}

void *sub_100038CDC(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = malloc(0x10uLL);
  __int128 v3 = v2;
  if (v2)
  {
    *(_DWORD *)uint64_t v2 = *(_DWORD *)a1;
    v2[1] = 0LL;
    if (*(void *)(a1 + 8)) {
      v2[1] = sub_100038CDC();
    }
  }

  return v3;
}

void sub_100038D34(void *a1)
{
  uint64_t v2 = (void **)*a1;
  if (v2) {
    free(v2);
  }
  __int128 v3 = (void *)a1[37];
  if (v3) {
    free(v3);
  }
  if (a1[34]) {
    sub_100047490((void ***)a1 + 34);
  }
  uint64_t v4 = (void *)a1[2];
  if (v4)
  {
    sub_100038E44(v4);
    a1[2] = 0LL;
  }

  int v5 = (void *)a1[5];
  if (v5) {
    sub_10003F5BC(v5);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6) {
    sub_10000787C(v6, (void (*)(void))sub_100038E70);
  }
  int v7 = (void *)a1[24];
  if (v7) {
    sub_100029C48(v7);
  }
  BOOL v8 = (void *)a1[31];
  if (v8) {
    sub_100038E98(v8);
  }
  uint64_t v9 = (void *)a1[33];
  if (v9)
  {
    do
    {
      uint64_t v10 = (void *)v9[2];
      uint64_t v11 = (void *)v9[3];
      if (v10)
      {
        do
        {
          os_log_type_t v12 = (void *)v10[12];
          uint64_t v13 = (void *)v10[6];
          if (v13) {
            free(v13);
          }
          uint64_t v14 = (void *)v10[7];
          if (v14) {
            free(v14);
          }
          free(v10);
          uint64_t v10 = v12;
        }

        while (v12);
      }

      free(v9);
      uint64_t v9 = v11;
    }

    while (v11);
  }

  uint64_t v15 = (void *)a1[11];
  if (v15) {
    sub_10003F5BC(v15);
  }
  int v16 = (void *)a1[9];
  if (v16) {
    sub_10003F5BC(v16);
  }
  uint64_t v17 = (void *)a1[12];
  if (v17) {
    sub_10003F5BC(v17);
  }
  free(a1);
}

void sub_100038E44(void *a1)
{
  if (a1[1]) {
    sub_100038E44();
  }
  free(a1);
}

void sub_100038E70(void **a1)
{
}

void sub_100038E98(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2) {
    sub_100029C48(v2);
  }
  if (a1[10]) {
    sub_100038E98();
  }
  free(a1);
}

uint64_t sub_100038ED0(uint64_t result)
{
  uint64_t v1 = qword_100088E28;
  *(void *)(result + 304) = qword_100088E28;
  qword_100088E28 = result;
  if (v1) {
    uint64_t v2 = (uint64_t *)(v1 + 312);
  }
  else {
    uint64_t v2 = &qword_100088E30;
  }
  *uint64_t v2 = result + 304;
  *(void *)(result + 312) = &qword_100088E28;
  *(_DWORD *)(result + 284) = 1;
  return result;
}

uint64_t sub_100038F0C(uint64_t result)
{
  if (*(_DWORD *)(result + 284))
  {
    uint64_t v1 = *(void *)(result + 304);
    uint64_t v2 = *(void **)(result + 312);
    if (v1)
    {
      *(void *)(v1 + 312) = v2;
      uint64_t v2 = *(void **)(result + 312);
    }

    else
    {
      qword_100088E30 = *(void *)(result + 312);
    }

    *uint64_t v2 = v1;
  }

  *(_DWORD *)(result + 284) = 0;
  return result;
}

uint64_t sub_100038F3C(uint64_t result)
{
  return result;
}

void sub_100038F4C(void *a1)
{
  int v1 = *((_DWORD *)a1 + 72);
  BOOL v2 = __OFSUB__(v1--, 1);
  *((_DWORD *)a1 + 72) = v1;
  if ((v1 < 0) ^ v2 | (v1 == 0))
  {
    if (*((_DWORD *)a1 + 71))
    {
      uint64_t v3 = a1[38];
      uint64_t v4 = (void *)a1[39];
      if (v3)
      {
        *(void *)(v3 + 312) = v4;
        uint64_t v4 = (void *)a1[39];
      }

      else
      {
        qword_100088E30 = a1[39];
      }

      *uint64_t v4 = v3;
    }

    *((_DWORD *)a1 + 71) = 0;
    sub_100038D34(a1);
  }

uint64_t sub_100038F90()
{
  uint64_t result = qword_100088E28;
  if (qword_100088E28)
  {
    do
    {
      uint64_t v1 = *(void *)(result + 304);
      if (*(_DWORD *)(result + 284))
      {
        BOOL v2 = *(uint64_t **)(result + 312);
        if (v1)
        {
          *(void *)(v1 + 312) = v2;
          BOOL v2 = *(uint64_t **)(result + 312);
        }

        else
        {
          qword_100088E30 = *(void *)(result + 312);
        }

        *BOOL v2 = v1;
      }

      *(_DWORD *)(result + 284) = 0;
      int v3 = *(_DWORD *)(result + 288);
      BOOL v4 = __OFSUB__(v3--, 1);
      *(_DWORD *)(result + ++*(_DWORD *)(result + 288) = v3;
      if ((v3 < 0) ^ v4 | (v3 == 0)) {
        sub_100038D34((void *)result);
      }
      uint64_t result = v1;
    }

    while (v1);
  }

  return result;
}

void sub_100039000()
{
  qword_100088E28 = 0LL;
  qword_100088E30 = (uint64_t)&qword_100088E28;
}

uint64_t sub_100039010(uint64_t a1, int a2)
{
  for (uint64_t result = *(void *)(a1 + 16); result; uint64_t result = *(void *)(result + 8))
  {
    if (*(_DWORD *)result == a2) {
      break;
    }
  }

  return result;
}

_DWORD *sub_100039030()
{
  uint64_t result = calloc(1uLL, 0x60uLL);
  if (result)
  {
    result[14] = -1;
    *((void *)result + 10) = 0LL;
    *((void *)result + 11) = 0LL;
  }

  return result;
}

uint64_t sub_10003905C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  uint64_t v4 = *(void *)(a2 + 248);
  BOOL v2 = (void *)(a2 + 248);
  uint64_t v3 = v4;
  if (v4)
  {
    do
    {
      uint64_t v5 = v3;
      uint64_t v3 = *(void *)(v3 + 80);
    }

    while (v3);
    BOOL v2 = (void *)(v5 + 80);
  }

  *BOOL v2 = result;
  return result;
}

uint64_t sub_100039080(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v2 = **(void **)(qword_100088E30 + 8);
  if (!v2) {
    return 0LL;
  }
  while (1)
  {
    uint64_t result = a1(v2, a2);
    if (result) {
      break;
    }
    uint64_t v2 = **(void **)(*(void *)(v2 + 312) + 8LL);
    if (!v2) {
      return 0LL;
    }
  }

  return result;
}

void sub_1000390E0()
{
  uint64_t v0 = **(void **)(qword_100088E30 + 8);
  if (v0)
  {
    *((void *)&v1 + 1) = *(void *)"e_type ";
    strcpy((char *)&v82, "\texchange_type ");
    *(void *)&__int128 v1 = 136315138LL;
    __int128 v84 = v1;
    *(void *)&__int128 v1 = 67109634LL;
    __int128 v85 = v1;
    *(void *)&__int128 v1 = 134217984LL;
    __int128 v83 = v1;
    do
    {
      uint64_t v2 = *(void *)(v0 + 16);
      uint64_t v3 = *(void *)(v0 + 248);
      int v4 = *(_DWORD *)(v0 + 8);
      uint64_t v5 = *(const sockaddr **)v0;
      if (v4) {
        uint64_t v6 = sub_10003CA7C(v5, v4);
      }
      else {
        uint64_t v6 = sub_10003C888(v5);
      }
      uint64_t v7 = snprintf(__str, 0x400uLL, "remote %s", (const char *)v6);
      BOOL v8 = *(const sockaddr ***)(v0 + 256);
      if (v8)
      {
        uint64_t v9 = &__str[(int)v7];
        size_t v10 = 1024LL - (int)v7;
        uint64_t v11 = sub_10003C888(*v8);
        uint64_t v7 = snprintf(v9, v10, " inherit %s", (const char *)v11);
      }

      if (dword_10008BA20)
      {
        os_log_type_t v12 = (os_log_s *)ne_log_obj(v7);
        uint64_t v7 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v7)
        {
          *(_DWORD *)uint8_t buf = v84;
          *(void *)__int128 v87 = __str;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s {\n", buf, 0xCu);
        }
      }

      *(_OWORD *)__str = v82;
      if (v2)
      {
        uint64_t v13 = &__str[15];
        do
        {
          uint64_t v14 = sub_10003ED18(*(_DWORD *)v2);
          if (*(void *)(v2 + 8)) {
            uint64_t v15 = ", ";
          }
          else {
            uint64_t v15 = ";\n";
          }
          uint64_t v7 = snprintf(v13, (char *)&v91 - v13, "%s%s", v14, v15);
          v13 += (int)v7;
          uint64_t v2 = *(void *)(v2 + 8);
        }

        while (v2);
      }

      if (dword_10008BA20)
      {
        int v16 = (os_log_s *)ne_log_obj(v7);
        BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        if (v17)
        {
          *(_DWORD *)uint8_t buf = v84;
          *(void *)__int128 v87 = __str;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }

        if (dword_10008BA20)
        {
          int v18 = (os_log_s *)ne_log_obj(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v19 = sub_10003ECC0(*(_DWORD *)(v0 + 24));
            *(_DWORD *)uint8_t buf = v84;
            *(void *)__int128 v87 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "\tdoi %s;\n", buf, 0xCu);
          }
        }
      }

      int v20 = sub_10003EE08(*(_DWORD *)(v0 + 32));
      uint64_t v21 = snprintf(__str, 0x400uLL, "\tmy_identifier %s", v20);
      if (*(_DWORD *)(v0 + 32) != 5)
      {
        uint64_t v28 = *(void *)(v0 + 40);
        if (v28) {
          uint64_t v21 = snprintf(&__str[(int)v21], 1024LL - (int)v21, " %s", *(const char **)(v28 + 8));
        }
        if (dword_10008BA20)
        {
          int v29 = (os_log_s *)ne_log_obj(v21);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint8_t buf = v84;
            *(void *)__int128 v87 = __str;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%s;\n", buf, 0xCu);
          }
        }

        uint64_t v21 = sub_1000077F4(*(void **)(v0 + 56), (uint64_t (*)(void, uint64_t))sub_100039DD8, 0LL);
        goto LABEL_38;
      }

      if (dword_10008BA20)
      {
        int v22 = (os_log_s *)ne_log_obj(v21);
        uint64_t v21 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          *(_DWORD *)uint8_t buf = v84;
          *(void *)__int128 v87 = __str;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%s;\n", buf, 0xCu);
        }
      }

      int v23 = *(_DWORD *)(v0 + 108);
      if (!v23) {
        goto LABEL_38;
      }
      if (v23 == 1)
      {
        if (dword_10008BA20)
        {
          BOOL v24 = (os_log_s *)ne_log_obj(v21);
          uint64_t v21 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v21)
          {
            *(_WORD *)uint8_t buf = 0;
            int v25 = v24;
            uint8_t v26 = "\t/* peers certificate from payload */\n";
            uint32_t v27 = 2;
            goto LABEL_84;
          }

          goto LABEL_38;
        }
      }

      else if (dword_10008BA20)
      {
        uint64_t v56 = (os_log_s *)ne_log_obj(v21);
        uint64_t v21 = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          int v57 = *(_DWORD *)(v0 + 108);
          *(_DWORD *)uint8_t buf = 67109120;
          *(_DWORD *)__int128 v87 = v57;
          int v25 = v56;
          uint8_t v26 = "\tpeers_certfile *UNKNOWN* (%d)\n";
          uint32_t v27 = 8;
LABEL_84:
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v26, buf, v27);
        }

LABEL_38:
        if (dword_10008BA20)
        {
          __int16 v30 = (os_log_s *)ne_log_obj(v21);
          uint64_t v21 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v21)
          {
            uint64_t v31 = sub_10003EE68(*(_DWORD *)(v0 + 116));
            *(_DWORD *)uint8_t buf = v84;
            *(void *)__int128 v87 = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "\tsend_cert %s;\n", buf, 0xCu);
          }

          if (dword_10008BA20)
          {
            __int16 v32 = (os_log_s *)ne_log_obj(v21);
            uint64_t v21 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v21)
            {
              uint64_t v33 = sub_10003EE68(*(_DWORD *)(v0 + 120));
              *(_DWORD *)uint8_t buf = v84;
              *(void *)__int128 v87 = v33;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "\tsend_cr %s;\n", buf, 0xCu);
            }

            if (dword_10008BA20)
            {
              __int16 v34 = (os_log_s *)ne_log_obj(v21);
              uint64_t v21 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v21)
              {
                int v35 = sub_10003EE68(*(_DWORD *)(v0 + 124));
                *(_DWORD *)uint8_t buf = v84;
                *(void *)__int128 v87 = v35;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "\tverify_cert %s;\n", buf, 0xCu);
              }

              if (dword_10008BA20)
              {
                uint32_t v36 = (os_log_s *)ne_log_obj(v21);
                uint64_t v21 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v21)
                {
                  unsigned int v37 = sub_10003EE68(*(_DWORD *)(v0 + 136));
                  *(_DWORD *)uint8_t buf = v84;
                  *(void *)__int128 v87 = v37;
                  _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "\tverify_identifier %s;\n",
                    buf,
                    0xCu);
                }

                if (dword_10008BA20)
                {
                  __int16 v38 = (os_log_s *)ne_log_obj(v21);
                  uint64_t v21 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v21)
                  {
                    unsigned int v39 = "force";
                    if (*(_DWORD *)(v0 + 176) != 2) {
                      unsigned int v39 = sub_10003EE68(*(_DWORD *)(v0 + 176));
                    }
                    *(_DWORD *)uint8_t buf = v84;
                    *(void *)__int128 v87 = v39;
                    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "\tnat_traversal %s;\n",
                      buf,
                      0xCu);
                  }

                  if (dword_10008BA20)
                  {
                    unsigned int v40 = (os_log_s *)ne_log_obj(v21);
                    uint64_t v21 = os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
                    if ((_DWORD)v21)
                    {
                      __int16 v41 = sub_10003EE68(*(_DWORD *)(v0 + 180));
                      *(_DWORD *)uint8_t buf = v84;
                      *(void *)__int128 v87 = v41;
                      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "\tnatt_multiple_user %s;\n",
                        buf,
                        0xCu);
                    }

                    if (dword_10008BA20)
                    {
                      int v42 = (os_log_s *)ne_log_obj(v21);
                      uint64_t v21 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
                      if ((_DWORD)v21)
                      {
                        int v43 = *(_DWORD *)(v0 + 140);
                        *(_DWORD *)uint8_t buf = 67109120;
                        *(_DWORD *)__int128 v87 = v43;
                        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "\tnonce_size %d;\n",
                          buf,
                          8u);
                      }

                      if (dword_10008BA20)
                      {
                        int v44 = (os_log_s *)ne_log_obj(v21);
                        uint64_t v21 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
                        if ((_DWORD)v21)
                        {
                          __int16 v45 = sub_10003EE68(*(_DWORD *)(v0 + 144));
                          *(_DWORD *)uint8_t buf = v84;
                          *(void *)__int128 v87 = v45;
                          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "\tpassive %s;\n",
                            buf,
                            0xCu);
                        }

                        if (dword_10008BA20)
                        {
                          int v46 = (os_log_s *)ne_log_obj(v21);
                          uint64_t v21 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
                          if ((_DWORD)v21)
                          {
                            __int16 v47 = "force";
                            if (*(_DWORD *)(v0 + 148) != 2) {
                              __int16 v47 = sub_10003EE68(*(_DWORD *)(v0 + 148));
                            }
                            *(_DWORD *)uint8_t buf = v84;
                            *(void *)__int128 v87 = v47;
                            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "\tike_frag %s;\n",
                              buf,
                              0xCu);
                          }

                          if (dword_10008BA20)
                          {
                            int v48 = (os_log_s *)ne_log_obj(v21);
                            uint64_t v21 = os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
                            if ((_DWORD)v21)
                            {
                              int v49 = *(_DWORD *)(v0 + 152);
                              *(_DWORD *)uint8_t buf = 67109120;
                              *(_DWORD *)__int128 v87 = v49;
                              _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "\tesp_frag %d;\n",
                                buf,
                                8u);
                            }

                            if (dword_10008BA20)
                            {
                              __int16 v50 = (os_log_s *)ne_log_obj(v21);
                              uint64_t v21 = os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
                              if ((_DWORD)v21)
                              {
                                int v51 = sub_10003EE68(*(_DWORD *)(v0 + 168));
                                *(_DWORD *)uint8_t buf = v84;
                                *(void *)__int128 v87 = v51;
                                _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "\tinitial_contact %s;\n",
                                  buf,
                                  0xCu);
                              }

                              if (dword_10008BA20)
                              {
                                uint64_t v52 = (os_log_s *)ne_log_obj(v21);
                                uint64_t v21 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
                                if ((_DWORD)v21)
                                {
                                  uint64_t v53 = sub_10003EE68(*(_DWORD *)(v0 + 164));
                                  *(_DWORD *)uint8_t buf = v84;
                                  *(void *)__int128 v87 = v53;
                                  _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "\tgenerate_policy %s;\n",
                                    buf,
                                    0xCu);
                                }

                                if (dword_10008BA20)
                                {
                                  SecCertificateRef v54 = (os_log_s *)ne_log_obj(v21);
                                  uint64_t v21 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
                                  if ((_DWORD)v21)
                                  {
                                    unsigned int v55 = sub_10003EE68(*(_DWORD *)(v0 + 160));
                                    *(_DWORD *)uint8_t buf = v84;
                                    *(void *)__int128 v87 = v55;
                                    _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "\tsupport_proxy %s;\n",
                                      buf,
                                      0xCu);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      for (; v3; uint64_t v3 = *(void *)(v3 + 80))
      {
        if (dword_10008BA20)
        {
          BOOL v58 = (os_log_s *)ne_log_obj(v21);
          uint64_t v21 = os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v21)
          {
            *(_WORD *)uint8_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "\n", buf, 2u);
          }

          if (dword_10008BA20)
          {
            char v59 = (os_log_s *)ne_log_obj(v21);
            uint64_t v21 = os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v21)
            {
              int v60 = *(_DWORD *)(v3 + 4);
              int v61 = *(_DWORD *)(v3 + 8);
              uint64_t v62 = sub_10003C888(**(const sockaddr ***)(v3 + 88));
              *(_DWORD *)uint8_t buf = v85;
              *(_DWORD *)__int128 v87 = v60;
              *(_WORD *)&v87[4] = 1024;
              *(_DWORD *)&v87[6] = v61;
              __int16 v88 = 2080;
              uint64_t v89 = v62;
              _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "\t/* prop_no=%d, trns_no=%d, rmconf=%s */\n",  buf,  0x18u);
            }

            if (dword_10008BA20)
            {
              uint64_t v63 = (os_log_s *)ne_log_obj(v21);
              uint64_t v21 = os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v21)
              {
                *(_WORD *)uint8_t buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "\tproposal {\n", buf, 2u);
              }

              if (dword_10008BA20)
              {
                uint64_t v64 = (os_log_s *)ne_log_obj(v21);
                uint64_t v21 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v21)
                {
                  uint64_t v65 = *(void *)(v3 + 16);
                  *(_DWORD *)uint8_t buf = v83;
                  *(void *)__int128 v87 = v65;
                  _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "\t\tlifetime time %lu sec;\n",
                    buf,
                    0xCu);
                }

                if (dword_10008BA20)
                {
                  uint64_t v66 = (os_log_s *)ne_log_obj(v21);
                  uint64_t v21 = os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v21)
                  {
                    uint64_t v67 = *(void *)(v3 + 32);
                    *(_DWORD *)uint8_t buf = v83;
                    *(void *)__int128 v87 = v67;
                    _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "\t\tlifetime bytes %zd;\n",
                      buf,
                      0xCu);
                  }

                  if (dword_10008BA20)
                  {
                    __int128 v68 = (os_log_s *)ne_log_obj(v21);
                    uint64_t v21 = os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
                    if ((_DWORD)v21)
                    {
                      __int128 v69 = sub_100005224(*(unsigned int *)(v3 + 60));
                      *(_DWORD *)uint8_t buf = v84;
                      *(void *)__int128 v87 = v69;
                      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "\t\tdh_group %s;\n",
                        buf,
                        0xCu);
                    }

                    if (dword_10008BA20)
                    {
                      __int128 v70 = (os_log_s *)ne_log_obj(v21);
                      uint64_t v21 = os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT);
                      if ((_DWORD)v21)
                      {
                        __int128 v71 = sub_100004E7C(*(_DWORD *)(v3 + 40));
                        *(_DWORD *)uint8_t buf = v84;
                        *(void *)__int128 v87 = v71;
                        _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "\t\tencryption_algorithm %s;\n",
                          buf,
                          0xCu);
                      }

                      if (dword_10008BA20)
                      {
                        __int128 v72 = (os_log_s *)ne_log_obj(v21);
                        uint64_t v21 = os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
                        if ((_DWORD)v21)
                        {
                          __int128 v73 = sub_100004BF8(*(_DWORD *)(v3 + 52));
                          *(_DWORD *)uint8_t buf = v84;
                          *(void *)__int128 v87 = v73;
                          _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "\t\thash_algorithm %s;\n",
                            buf,
                            0xCu);
                        }

                        if (dword_10008BA20)
                        {
                          __int128 v74 = (os_log_s *)ne_log_obj(v21);
                          uint64_t v21 = os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT);
                          if ((_DWORD)v21)
                          {
                            __int128 v75 = sub_100004BF8(*(_DWORD *)(v3 + 72));
                            *(_DWORD *)uint8_t buf = v84;
                            *(void *)__int128 v87 = v75;
                            _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "\t\tprf_algorithm %s;\n",
                              buf,
                              0xCu);
                          }

                          if (dword_10008BA20)
                          {
                            __int128 v76 = (os_log_s *)ne_log_obj(v21);
                            uint64_t v21 = os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
                            if ((_DWORD)v21)
                            {
                              uint8_t v77 = sub_100005284(*(_DWORD *)(v3 + 48));
                              *(_DWORD *)uint8_t buf = v84;
                              *(void *)__int128 v87 = v77;
                              _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "\t\tauthentication_method %s;\n",
                                buf,
                                0xCu);
                            }

                            if (dword_10008BA20)
                            {
                              __int128 v78 = (os_log_s *)ne_log_obj(v21);
                              uint64_t v21 = os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT);
                              if ((_DWORD)v21)
                              {
                                *(_WORD *)uint8_t buf = 0;
                                _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "\t}\n", buf, 2u);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      if (dword_10008BA20)
      {
        __int128 v79 = (os_log_s *)ne_log_obj(v21);
        BOOL v80 = os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
        if (v80)
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "}\n", buf, 2u);
        }

        if (dword_10008BA20)
        {
          int v81 = (os_log_s *)ne_log_obj(v80);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint8_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "\n", buf, 2u);
          }
        }
      }

      uint64_t v0 = **(void **)(*(void *)(v0 + 312) + 8LL);
    }

    while (v0);
  }

          uint64_t v21 = *v7;
          uint64_t v11 = sub_1000468F0((void *)a1);
          if ((_DWORD)v11)
          {
            if (dword_10008BA20)
            {
              int v22 = (os_log_s *)ne_log_obj(v11);
              uint64_t v11 = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
              if ((_DWORD)v11) {
                sub_100064848(&v56, v57);
              }
            }

            goto LABEL_30;
          }

          int v25 = bswap32(v21) >> 16;
          switch(v25)
          {
            case 1u:
              if (dword_10008BE84)
              {
                if (dword_10008BA20)
                {
                  uint8_t v26 = (os_log_s *)ne_log_obj(v11);
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
                    sub_10006481C(&v52, v53);
                  }
                }
              }

              else
              {
                uint32_t v36 = sub_100044B38(a1);
                if ((_DWORD)v36 == -1)
                {
                  if (dword_10008BA20)
                  {
                    unsigned int v40 = (os_log_s *)ne_log_obj(v36);
                    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
                      sub_1000647F0(&v54, v55);
                    }
                  }
                }

                else
                {
                  unsigned int v37 = *(int **)(a1 + 408);
                  __int16 v38 = *v37;
                  v37[10] = bswap32(v37[1] + bswap32(xmmword_10008BE38));
                  *unsigned int v37 = v38 | 0x20;
                }
              }

              uint64_t v31 = (__int128 *)(*(void *)(a1 + 408) + 40LL);
              goto LABEL_73;
            case 2u:
              if (dword_10008BE84)
              {
                if (dword_10008BA20)
                {
                  __int16 v32 = (os_log_s *)ne_log_obj(v11);
                  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
                    sub_10006481C(&v50, v51);
                  }
                }
              }

              else
              {
                unsigned int v39 = *(_DWORD **)(a1 + 408);
                v39[11] = DWORD1(xmmword_10008BE38);
                *v39 |= 0x40u;
              }

              uint64_t v31 = (__int128 *)(*(void *)(a1 + 408) + 44LL);
LABEL_73:
              __int16 v30 = v7;
              goto LABEL_74;
            case 3u:
              uint64_t v33 = (int *)&xmmword_10008BE38 + 2;
              __int16 v34 = dword_10008BE4C;
              goto LABEL_61;
            case 4u:
              uint64_t v33 = (int *)&unk_10008BE50;
              __int16 v34 = dword_10008BE60;
LABEL_61:
              uint64_t v11 = (uint64_t)sub_100045174(v7, v33, v34);
              goto LABEL_28;
            default:
              if (v25 != 13)
              {
                if (dword_10008BA20)
                {
                  int v35 = (os_log_s *)ne_log_obj(v11);
                  uint64_t v11 = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
                  if ((_DWORD)v11)
                  {
                    *(_DWORD *)uint8_t buf = 67109120;
                    LODWORD(v59) = v25;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Unexpected type %d\n",  buf,  8u);
                  }
                }

                goto LABEL_30;
              }

              __int16 v30 = v7;
              uint64_t v31 = &xmmword_10008BE38;
LABEL_74:
              uint64_t v11 = (uint64_t)sub_1000450E8(v30, v31);
              break;
          }

          goto LABEL_28;
        }

        uint64_t v11 = (uint64_t)sub_100044840(v11, v7, "racoon / IPsec-tools", 0x14uLL);
      }

      else
      {
        uint64_t v11 = (uint64_t)sub_1000469D4(a1, v7);
      }

        int v16 = *(_DWORD *)(v2 + 380);
        if (v16 && sub_10003A9F4(v16, v19) && *(uint64_t *)v19 <= qword_10008C6F0)
        {
          BOOL v17 = *(unsigned int *)(v2 + 380);
          if ((_DWORD)v17)
          {
            sub_10003AA44(v17);
            *(_DWORD *)(v2 + 380) = 0;
          }

          if ((*(_BYTE *)(v2 + 280) & 2) == 0)
          {
            int v18 = *(int *)(v2 + 368);
            if ((_DWORD)v18) {
              *(_DWORD *)(v2 + 380) = sub_10003A890(v18, (uint64_t)sub_10004EA18, v2);
            }
          }
        }

        a1 = *(unsigned int *)(v2 + 384);
        if ((_DWORD)a1)
        {
          a1 = sub_10003A9F4(a1, v19);
          if ((_DWORD)a1)
          {
            if (*(uint64_t *)v19 <= qword_10008C6F0)
            {
              a1 = *(unsigned int *)(v2 + 384);
              if ((_DWORD)a1)
              {
                a1 = sub_10003AA44(a1);
                *(_DWORD *)(v2 + 384) = 0;
              }

              if ((*(_BYTE *)(v2 + 280) & 2) == 0)
              {
                a1 = *(int *)(v2 + 372);
                if ((_DWORD)a1)
                {
                  a1 = (uint64_t)sub_10003A890(a1, (uint64_t)sub_10004EBC4, v2);
                  *(_DWORD *)(v2 + 384) = a1;
                }
              }
            }
          }
        }

        continue;
      }

_DWORD *sub_100039D58(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = calloc(1uLL, 0x60uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[14] = -1;
    *((void *)v2 + 10) = 0LL;
    *((void *)v2 + 11) = 0LL;
    __int128 v4 = *(_OWORD *)(a1 + 32);
    __int128 v5 = *(_OWORD *)(a1 + 48);
    __int128 v6 = *(_OWORD *)(a1 + 64);
    *((_OWORD *)v2 + 5) = *(_OWORD *)(a1 + 80);
    __int128 v7 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
    *((_OWORD *)v2 + 1) = v7;
    *((_OWORD *)v2 + 3) = v5;
    *((_OWORD *)v2 + 4) = v6;
    *((_OWORD *)v2 + 2) = v4;
    *((void *)v2 + 10) = 0LL;
    if (*(void *)(a1 + 64)) {
      sub_10002A198(*(unsigned int *)(a1 + 60), (uint64_t)(v2 + 16));
    }
  }

  return v3;
}

uint64_t sub_100039DD8(uint64_t a1)
{
  uint64_t v2 = sub_10003EE08(*(_DWORD *)a1);
  uint64_t v3 = snprintf(__str, 0x400uLL, "\tpeers_identifier %s", v2);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    uint64_t v3 = snprintf(&__str[(int)v3], 1024LL - (int)v3, " %s", *(const char **)(v4 + 8));
  }
  if (dword_10008BA20)
  {
    __int128 v5 = (os_log_s *)ne_log_obj(v3);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 136315138;
      BOOL v8 = __str;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s;\n", buf, 0xCu);
    }
  }

  return 0LL;
}

uint64_t sub_100039EE0(const char *a1, int a2)
{
  uid_t v4 = getuid();
  uint64_t v5 = geteuid();
  if (v4 != (_DWORD)v5)
  {
    if (dword_10008BA20)
    {
      uint64_t v15 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_1000635F0(v15);
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (stat(a1, &v24)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = getuid();
  if (v24.st_uid != (_DWORD)v6)
  {
    if (dword_10008BA20)
    {
      int v16 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_10006358C((uint64_t)a1, v16, v17, v18, v19, v20, v21, v22);
      }
    }

    return 0xFFFFFFFFLL;
  }

  if ((v24.st_mode & 0xF000) != 0x8000)
  {
    if (dword_10008BA20)
    {
      int v23 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_100063504((uint64_t)a1, &v24.st_mode, v23);
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t result = 0LL;
  if (a2 && (v24.st_mode & 0x3F) != 0)
  {
    if (dword_10008BA20)
    {
      BOOL v8 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1000634A0((uint64_t)a1, v8, v9, v10, v11, v12, v13, v14);
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t sub_10003A03C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = qword_10008B848;
  if (a4 && !*(void *)(qword_10008B848 + 296)) {
    return 0LL;
  }
  if (a3) {
    int v8 = 1;
  }
  else {
    int v8 = 2;
  }
  uint64_t v9 = qword_100088E38;
  while (!v9)
  {
LABEL_30:
    BOOL v22 = v8 == 1;
    int v8 = 2;
    if (!v22) {
      return 0LL;
    }
  }

  uint64_t v10 = 0LL;
  uint64_t v11 = v9;
  while (1)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(void *)(v11 + 40);
    if (v13)
    {
      if (v8 == 2) {
        goto LABEL_18;
      }
      a1 = memcmp(*(const void **)(a3 + 8), *(const void **)(v13 + 8), *(void *)v13);
      if ((_DWORD)a1) {
        goto LABEL_18;
      }
    }

    else if (v8 == 1)
    {
      goto LABEL_18;
    }

    uint64_t v14 = *(void *)v11;
    uint64_t v10 = v11;
    if (*(void *)v11) {
      break;
    }
LABEL_19:
    uint64_t v11 = *(void *)(v11 + 120);
    if (!v11)
    {
      uint64_t v12 = v10;
      if (!v10) {
        goto LABEL_30;
      }
LABEL_32:
      if (dword_10008BA20)
      {
        int v23 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
          sub_100063630(v23, v24, v25);
        }
      }

      return v12;
    }
  }

  if (!v6)
  {
    if (v12) {
      goto LABEL_32;
    }
    uint64_t v10 = 0LL;
    goto LABEL_19;
  }

  if (*(void *)v6 != *(void *)v14
    || (a1 = memcmp(*(const void **)(v6 + 8), *(const void **)(v14 + 8), *(void *)v6), (_DWORD)a1))
  {
LABEL_18:
    uint64_t v10 = v12;
    goto LABEL_19;
  }

  if (!a4)
  {
    uint64_t v21 = *(void *)(v11 + 8);
    if (*(void *)a2 == *(void *)v21)
    {
      a1 = memcmp(*(const void **)(a2 + 8), *(const void **)(v21 + 8), *(void *)a2);
      uint64_t v10 = v12;
      if (!(_DWORD)a1) {
        return v11;
      }
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  uint64_t v15 = *(unint64_t **)(v7 + 296);
  int v16 = (const void *)v15[1];
  a1 = memcmp(v16, *(const void **)(*(void *)(v11 + 8) + 8LL), **(void **)(v11 + 8));
  uint64_t v10 = v12;
  if ((_DWORD)a1) {
    goto LABEL_19;
  }
  return v11;
}

uint64_t sub_10003A21C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1;
  if (!dword_10008BA20
    || (uint64_t v10 = (os_log_s *)ne_log_obj(a1), a1 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG), !(_DWORD)a1))
  {
    if (v9) {
      goto LABEL_4;
    }
    return 0LL;
  }

  sub_100063698(v10, v11, v12);
  if (!v9) {
    return 0LL;
  }
LABEL_4:
  uint64_t v13 = qword_100088E38;
  if (!qword_100088E38) {
    return 0LL;
  }
  uint64_t v14 = 0LL;
  do
  {
    uint64_t v15 = v14;
    if (*(void *)v13)
    {
      if (dword_1000882C8 >= 7)
      {
        sub_100033CEC( 7,  *(void *)(*(void *)v13 + 8LL),  **(void **)v13,  "getsainfo_by_dst_id - sainfo id - src:\n",  a5,  a6,  a7,  a8,  v22);
        if (dword_1000882C8 >= 7) {
          sub_100033CEC( 7,  *(void *)(*(void *)(v13 + 8) + 8LL),  **(void **)(v13 + 8),  "getsainfo_by_dst_id - sainfo id - dst:\n",  a5,  a6,  a7,  a8,  v22);
        }
      }
    }

    else if (dword_10008BA20)
    {
      int v16 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)a1) {
        sub_100063664(&v23, v24, v16);
      }
    }

    uint64_t v17 = *(void *)(v13 + 40);
    if (!v17) {
      goto LABEL_21;
    }
    if (dword_1000882C8 >= 7) {
      sub_100033CEC( 7,  *(void *)(v17 + 8),  *(void *)v17,  "getsainfo_by_dst_id - sainfo id_i:\n",  a5,  a6,  a7,  a8,  v22);
    }
    if (!a2
      || (a1 = memcmp(*(const void **)(a2 + 8), *(const void **)(*(void *)(v13 + 40) + 8LL), **(void **)(v13 + 40)),
          (_DWORD)a1))
    {
      uint64_t v14 = v15;
    }

    else
    {
LABEL_21:
      uint64_t v14 = v13;
      if (*(void *)v13)
      {
        a1 = memcmp(*(const void **)(v9 + 8), *(const void **)(*(void *)(v13 + 8) + 8LL), **(void **)(v13 + 8));
        uint64_t v14 = v15;
        if (!(_DWORD)a1) {
          return v13;
        }
      }
    }

    uint64_t v13 = *(void *)(v13 + 120);
  }

  while (v13);
  if (v14)
  {
    if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
        sub_100063630(v18, v19, v20);
      }
    }
  }

  return v14;
}

double sub_10003A420()
{
  uint64_t v0 = calloc(1uLL, 0x88uLL);
  if (v0)
  {
    v0[3] = 28800LL;
    *((_DWORD *)v0 + 8) = 0x7FFFFFFF;
    double result = COERCE_DOUBLE(&_mh_execute_header);
    *(void *)((char *)v0 + 108) = &_mh_execute_header;
  }

  return result;
}

void sub_10003A45C(void *a1)
{
  for (uint64_t i = 0LL; i != 7; ++i)
  {
    uint64_t v3 = (void *)a1[i + 6];
    if (v3)
    {
      do
      {
        uid_t v4 = (void *)v3[1];
        free(v3);
        uint64_t v3 = v4;
      }

      while (v4);
    }
  }

  if (*a1) {
    sub_10003F5BC((void *)*a1);
  }
  uint64_t v5 = (void *)a1[1];
  if (v5) {
    sub_10003F5BC(v5);
  }
  uint64_t v6 = (void *)a1[2];
  if (v6) {
    sub_10003F5BC(v6);
  }
  free(a1);
}

void *sub_10003A4D4(void *result)
{
  if (result)
  {
    do
    {
      __int128 v1 = (void *)result[1];
      free(result);
      double result = v1;
    }

    while (v1);
  }

  return result;
}

uint64_t sub_10003A500(uint64_t result)
{
  uint64_t v1 = qword_100088E38;
  *(void *)(result + 1memset(v27, 32, 20) = qword_100088E38;
  if (v1) {
    *(void *)(v1 + 128) = result + 120;
  }
  qword_100088E38 = result;
  *(void *)(result + 128) = &qword_100088E38;
  *(_DWORD *)(result + 108) = 1;
  return result;
}

uint64_t sub_10003A534(uint64_t result)
{
  if (*(_DWORD *)(result + 108))
  {
    uint64_t v1 = *(void *)(result + 120);
    if (v1) {
      *(void *)(v1 + 128) = *(void *)(result + 128);
    }
    **(void **)(result + 128) = v1;
    *(_DWORD *)(result + 108) = 0;
  }

  return result;
}

void sub_10003A55C()
{
  uint64_t v0 = qword_100088E38;
  while (v0)
  {
    uint64_t v1 = v0;
    uint64_t v0 = *(void *)(v0 + 120);
    if (!*(_DWORD *)(v1 + 104))
    {
      if (*(_DWORD *)(v1 + 108))
      {
        if (v0) {
          *(void *)(v0 + 128) = *(void *)(v1 + 128);
        }
        **(void **)(v1 + 128) = v0;
        *(_DWORD *)(v1 + 108) = 0;
      }

      int v2 = *(_DWORD *)(v1 + 112);
      BOOL v3 = __OFSUB__(v2--, 1);
      *(_DWORD *)(v1 + 112) = v2;
      if ((v2 < 0) ^ v3 | (v2 == 0)) {
        sub_10003A45C((void *)v1);
      }
    }
  }

void sub_10003A5C8(int a1)
{
  uint64_t v1 = qword_100088E38;
  while (v1)
  {
    uint64_t v3 = v1;
    uint64_t v1 = *(void *)(v1 + 120);
    if (*(_DWORD *)(v3 + 104) == a1)
    {
      if (*(_DWORD *)(v3 + 108))
      {
        if (v1) {
          *(void *)(v1 + 128) = *(void *)(v3 + 128);
        }
        **(void **)(v3 + 128) = v1;
        *(_DWORD *)(v3 + 108) = 0;
      }

      int v4 = *(_DWORD *)(v3 + 112);
      BOOL v5 = __OFSUB__(v4--, 1);
      *(_DWORD *)(v3 + 112) = v4;
      if ((v4 < 0) ^ v5 | (v4 == 0)) {
        sub_10003A45C((void *)v3);
      }
    }
  }

uint64_t sub_10003A63C(uint64_t result)
{
  return result;
}

void sub_10003A64C(void *a1)
{
  int v1 = *((_DWORD *)a1 + 28);
  BOOL v2 = __OFSUB__(v1--, 1);
  *((_DWORD *)a1 + 28) = v1;
  if ((v1 < 0) ^ v2 | (v1 == 0))
  {
    if (*((_DWORD *)a1 + 27))
    {
      uint64_t v3 = a1[15];
      if (v3) {
        *(void *)(v3 + 128) = a1[16];
      }
      *(void *)a1[16] = v3;
      *((_DWORD *)a1 + 27) = 0;
    }

    sub_10003A45C(a1);
  }

void sub_10003A688()
{
  qword_100088E38 = 0LL;
}

void *sub_10003A694()
{
  return calloc(1uLL, 0x10uLL);
}

uint64_t *sub_10003A6A0(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2)
    {
      double result = (uint64_t *)(v3 + 8);
      break;
    }
  }

  *double result = a2;
  return result;
}

uint64_t *sub_10003A6C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = sub_100011910(v2);
    if (v3)
    {
      int v4 = (char *)v3;
      snprintf((char *)&qword_100088E40, 0x100uLL, "%s", v3);
      free(v4);
    }

    uint64_t v5 = a1[1];
    if (v5)
    {
      uint64_t v6 = sub_100011910(v5);
      if (v6)
      {
        uint64_t v7 = v6;
        size_t v8 = strlen((const char *)&qword_100088E40);
        snprintf((char *)&qword_100088E40 + v8, 256 - v8, " %s", v7);
        free(v7);
      }
    }

    else
    {
      size_t v9 = strlen((const char *)&qword_100088E40);
      snprintf((char *)&qword_100088E40 + v9, 256 - v9, " anonymous");
    }
  }

  else
  {
    strcpy((char *)&qword_100088E40, "anonymous");
  }

  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = sub_100011910(v10);
    if (v11)
    {
      uint64_t v12 = v11;
      size_t v13 = strlen((const char *)&qword_100088E40);
      snprintf((char *)&qword_100088E40 + v13, 256 - v13, " from %s", v12);
      free(v12);
    }
  }

  return &qword_100088E40;
}

void sub_10003A800(_DWORD *a1)
{
  if (xmmword_10008C6E0 != 0) {
    a1[8] = 1;
  }
  uint64_t v2 = *((void *)a1 + 5);
  uint64_t v3 = (void *)*((void *)a1 + 6);
  if (v2)
  {
    *(void *)(v2 + 48) = v3;
    uint64_t v3 = (void *)*((void *)a1 + 6);
  }

  else
  {
    qword_100088F48 = *((void *)a1 + 6);
  }

  *uint64_t v3 = v2;
  if (!a1[8])
  {
    int v4 = (void (*)(void))*((void *)a1 + 2);
    if (v4)
    {
      if (!dword_10008BE28) {
        v4(*((void *)a1 + 3));
      }
    }
  }

  free(a1);
}

void *sub_10003A890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = dword_1000882D0;
  if (!dword_1000882D0)
  {
    int v6 = 1;
    dword_1000882D0 = 1;
  }

  double result = malloc(0x38uLL);
  if (result)
  {
    size_t v8 = result;
    dword_1000882D0 = v6 + 1;
    *(_DWORD *)double result = v6;
    *((_DWORD *)result + 8) = 0;
    result[2] = a2;
    result[3] = a3;
    result[1] = time(&v11[5]) + a1;
    v8[5] = 0LL;
    size_t v9 = (void *)qword_100088F48;
    v8[6] = qword_100088F48;
    *size_t v9 = v8;
    qword_100088F48 = (uint64_t)(v8 + 5);
    dispatch_time_t v10 = dispatch_time(0LL, 1000000000 * a1);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000LL;
    v11[2] = sub_10003A9A8;
    v11[3] = &unk_1000850C8;
    uint8_t v11[4] = v8;
    dispatch_after(v10, &_dispatch_main_q, v11);
    return (void *)*(unsigned int *)v8;
  }

  return result;
}

time_t sub_10003A988()
{
  return time(&v1);
}

void sub_10003A9A8(uint64_t a1)
{
}

BOOL sub_10003A9B0(int a1)
{
  uint64_t v1 = 1LL;
  if (a1)
  {
    uint64_t v2 = qword_100088F40;
    if (qword_100088F40)
    {
      while (*(_DWORD *)v2 != a1)
      {
        uint64_t v2 = *(void *)(v2 + 40);
        if (!v2) {
          return 1LL;
        }
      }

      return *(_DWORD *)(v2 + 32) != 0;
    }
  }

  return v1;
}

uint64_t sub_10003A9F4(int a1, void *a2)
{
  uint64_t v2 = 0LL;
  if (a1)
  {
    uint64_t v3 = qword_100088F40;
    if (qword_100088F40)
    {
      while (*(_DWORD *)v3 != a1)
      {
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          return 0LL;
        }
      }

      if (*(_DWORD *)(v3 + 32)) {
        return 0LL;
      }
      *a2 = *(void *)(v3 + 8);
      return 1LL;
    }
  }

  return v2;
}

uint64_t sub_10003AA44(uint64_t result)
{
  if ((_DWORD)result)
  {
    uint64_t v1 = qword_100088F40;
    if (qword_100088F40)
    {
      while (*(_DWORD *)v1 != (_DWORD)result)
      {
        uint64_t v1 = *(void *)(v1 + 40);
        if (!v1) {
          return result;
        }
      }

      *(_DWORD *)(v1 + 32) = 1;
    }
  }

  return result;
}

void sub_10003AA78()
{
  for (uint64_t i = qword_100088F40; i; uint64_t i = *(void *)(i + 40))
    *(_DWORD *)(i + 32) = 1;
}

uint64_t sub_10003AA98(uint64_t result)
{
  for (uint64_t i = qword_100088F40; i; uint64_t i = *(void *)(i + 40))
  {
    if (*(void *)(i + 24) == result) {
      *(_DWORD *)(i + 32) = 1;
    }
  }

  return result;
}

void sub_10003AAC4()
{
  qword_100088F40 = 0LL;
  qword_100088F48 = (uint64_t)&qword_100088F40;
}

uint64_t sub_10003AAD4(unsigned int a1)
{
  if (dword_10008B860)
  {
    unsigned __int8 v1 = a1;
    uint64_t v5 = a1;
    uint64_t v2 = vproc_swap_integer(0LL, 7LL, &v5, &qword_1000882D8);
    if (v2)
    {
      if (dword_10008BA20)
      {
        uint64_t v3 = (os_log_s *)ne_log_obj(v2);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          sub_1000636CC(v1, v3);
        }
      }
    }
  }

  return qword_1000882D8;
}

void sub_10003AB68()
{
  qword_10008BE30 = (uint64_t)&_dispatch_main_q;
  sub_10003AAC4();
  uint64_t v0 = sub_10004F1D0();
  if ((v0 & 0x80000000) != 0)
  {
    if (!dword_10008BA20) {
      goto LABEL_60;
    }
    uint64_t v31 = (os_log_s *)ne_log_obj(v0);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      goto LABEL_60;
    }
    LOWORD(buffer.__sigaction_u.__sa_handler) = 0;
    __int16 v32 = "failed to initialize power-mgmt.";
    goto LABEL_59;
  }

  if (*(_DWORD *)(qword_10008B848 + 112) == 1)
  {
    uint64_t v1 = sub_100008674();
    if ((_DWORD)v1)
    {
      if (!dword_10008BA20) {
        goto LABEL_60;
      }
      uint64_t v31 = (os_log_s *)ne_log_obj(v1);
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      LOWORD(buffer.__sigaction_u.__sa_handler) = 0;
      __int16 v32 = "failed to initialize route socket.\n";
      goto LABEL_59;
    }
  }

  uint64_t Session = NEPolicyCreateSession(kCFAllocatorDefault, @"racoon", 0LL, 0LL);
  qword_100088FE0 = Session;
  if (!Session) {
    goto LABEL_23;
  }
  uint64_t v42 = 0LL;
  memset(&buffer, 0, 48);
  pid_t v3 = getpid();
  uint64_t Session = proc_pidinfo(v3, 17, 1uLL, &buffer, 56);
  if ((_DWORD)Session != 56) {
    goto LABEL_23;
  }
  uint64_t Session = (uint64_t)CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, (CFUUIDBytes)buffer);
  if (!Session) {
    goto LABEL_23;
  }
  int v4 = (const void *)Session;
  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    goto LABEL_11;
  }
  int v6 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  BOOL v7 = v6 != 0LL;
  if (v6)
  {
    size_t v8 = v6;
    CFDictionarySetValue(v6, @"ConditionType", @"Application");
    CFDictionarySetValue(v8, @"ApplicationUUID", v4);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
  }

  size_t v9 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v9)
  {
    dispatch_time_t v10 = v9;
    CFDictionarySetValue(v9, @"ConditionType", @"AllInterfaces");
    CFArrayAppendValue(Mutable, v10);
    CFRelease(v10);
  }

  else
  {
LABEL_11:
    BOOL v7 = 0;
  }

  uint64_t v11 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v11)
  {
    size_t v13 = v11;
    CFDictionaryAddValue(v11, @"Result", @"Pass");
    BOOL v12 = v7 && NEPolicyAdd(qword_100088FE0, 0LL, Mutable, v13, 0LL) != 0;
    CFRelease(v13);
    if (!Mutable)
    {
LABEL_21:
      CFRelease(v4);
      if (v12)
      {
        uint64_t Session = NEPolicyApply(qword_100088FE0);
        BOOL v14 = (_DWORD)Session != 0;
LABEL_24:
        if (!v14)
        {
          if (dword_10008BA20)
          {
            uint64_t v15 = (os_log_s *)ne_log_obj(Session);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buffer.__sigaction_u.__sa_handler) = 0;
              _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "failed to initialize NEPolicy session.\n",  (uint8_t *)&buffer,  2u);
            }
          }
        }

        uint64_t v16 = sub_1000083FC();
        if ((_DWORD)v16)
        {
          if (!dword_10008BA20) {
            goto LABEL_60;
          }
          uint64_t v31 = (os_log_s *)ne_log_obj(v16);
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            goto LABEL_60;
          }
          LOWORD(buffer.__sigaction_u.__sa_handler) = 0;
          __int16 v32 = "failed to initialize listening addresses.\n";
        }

        else
        {
          uint64_t v17 = sub_100023AD8();
          if ((_DWORD)v17)
          {
            if (!dword_10008BA20) {
              goto LABEL_60;
            }
            uint64_t v31 = (os_log_s *)ne_log_obj(v17);
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
              goto LABEL_60;
            }
            LOWORD(buffer.__sigaction_u.__sa_handler) = 0;
            __int16 v32 = "failed to initialize isakmp";
          }

          else
          {
            uint64_t v18 = sub_1000491FC();
            if ((_DWORD)v18)
            {
              if (dword_10008BA20)
              {
                uint64_t v19 = (os_log_s *)ne_log_obj(v18);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(buffer.__sigaction_u.__sa_handler) = 0;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "failed to initialize vpn control port",  (uint8_t *)&buffer,  2u);
                }
              }
            }

            uint64_t v20 = 0LL;
            while (1)
            {
              int v21 = dword_10006A270[v20];
              buffer.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_10003B614;
              *(void *)&buffer.sa_mask = 0x4200000000LL;
              uint64_t v22 = sigaction(v21, &buffer, 0LL);
              if ((v22 & 0x80000000) != 0) {
                break;
              }
              if (++v20 == 6)
              {
                for (uint64_t i = 0LL; i != 33; ++i)
                  dword_100088F50[i] = 0;
                if (dword_10008B9F0) {
                  goto LABEL_49;
                }
                dword_10008B85C = getpid();
                uint64_t v24 = *(const char **)(qword_10008B848 + 160);
                if (!v24)
                {
                  uint64_t v24 = "/var/run/racoon.pid";
                  goto LABEL_43;
                }

                if (*v24 == 47)
                {
LABEL_43:
                  __strlcpy_chk(&buffer, v24, 1024LL, 1024LL);
                }

                else
                {
                  __strlcat_chk(&buffer, "/var/run/", 1024LL, 1024LL);
                  __strlcat_chk(&buffer, *(void *)(qword_10008B848 + 160), 1024LL, 1024LL);
                }

                uint64_t v25 = fopen((const char *)&buffer, "w");
                if (v25)
                {
                  uint64_t v33 = v25;
                  int v34 = fileno(v25);
                  uint64_t v35 = fchmod(v34, 0x1A4u);
                  if ((_DWORD)v35 != -1)
                  {
                    fprintf(v33, "%ld\n", dword_10008B85C);
                    fclose(v33);
                    goto LABEL_49;
                  }

                  if (dword_10008BA20)
                  {
                    uint32_t v36 = (os_log_s *)ne_log_obj(v35);
                    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                    {
                      unsigned int v37 = __error();
                      __int16 v38 = strerror(*v37);
                      *(_DWORD *)uint8_t buf = 136315138;
                      p_sigaction buffer = (sigaction *)v38;
                      _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
                    }
                  }

                  fclose(v33);
                }

                else
                {
                  if (dword_10008BA20)
                  {
                    uint8_t v26 = (os_log_s *)ne_log_obj(0LL);
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint8_t buf = 136315138;
                      p_sigaction buffer = &buffer;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "cannot open %s",  buf,  0xCu);
                    }
                  }

LABEL_59:
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, v32, (uint8_t *)&buffer, 2u);
        goto LABEL_60;
      }

void sub_10003B200()
{
  int v0 = *(_DWORD *)(qword_10008B848 + 80);
  if (*(_DWORD *)(qword_10008B848 + 88))
  {
    if (v0 != 17
      || sub_1000496A8()
      || sub_10004F7E0()
      || (BOOL v1 = sub_1000357F0())
      || !sub_100038984(v1))
    {
      uint64_t v2 = *(unsigned int *)(qword_10008B848 + 88);
      if ((_DWORD)v2)
      {
        sub_10003AA44(v2);
        unsigned int v3 = 0;
LABEL_8:
        *(_DWORD *)(qword_10008B848 + 88) = v3;
      }
    }
  }

  else if (v0 == 17 && !sub_1000496A8() && !sub_10004F7E0())
  {
    BOOL v4 = sub_1000357F0();
    if (!v4)
    {
      if (sub_100038984(v4))
      {
        uint64_t v5 = *(int *)(qword_10008B848 + 84);
        if (!(_DWORD)v5) {
          sub_10003B2C0(v5);
        }
        unsigned int v3 = sub_10003A890(v5, (uint64_t)sub_10003B2C0, 0LL);
        goto LABEL_8;
      }
    }
  }

void sub_10003B2C0(uint64_t a1)
{
  if (dword_10008BA20)
  {
    BOOL v1 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "performing auto exit\n", v2, 2u);
    }
  }

  sub_10003B568();
}

void sub_10003B320(uint64_t a1)
{
  uint64_t v1 = 0LL;
  while (1)
  {
    if (!dword_100088F50[v1]) {
      goto LABEL_23;
    }
    --dword_100088F50[v1];
    if ((int)v1 > 1)
    {
      if ((_DWORD)v1 != 30)
      {
        if ((_DWORD)v1 == 2 || (_DWORD)v1 == 15)
        {
          if (dword_10008BA20)
          {
            BOOL v12 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint8_t buf = 67109120;
              int v22 = v1;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "caught signal %d\n", buf, 8u);
            }
          }

void sub_10003B568()
{
  if (dword_10008BE28) {
    sub_100009C24(0LL);
  }
  sub_1000092FC(0LL);
  sub_100008640();
  sub_100024648();
  sub_10002F594();
  sub_100049600(v0);
  uint64_t v1 = qword_100088FD8;
  if (qword_100088FD8)
  {
    os_release((void *)qword_100088FD8);
    qword_100088FD8 = 0LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "racoon shutdown\n", v3, 2u);
    }
  }

  exit(0);
}

void sub_10003B614(int a1)
{
  if (a1 == 15) {
    dword_10008BE28 = 1;
  }
  dword_10008BE2C = 1;
  dispatch_async((dispatch_queue_t)qword_10008BE30, &stru_100085108);
}

void sub_10003B65C(id a1)
{
  if (dword_10008BE2C)
  {
    sub_10003B320((uint64_t)a1);
    dword_10008BE2C = 0;
  }

void sub_10003B688()
{
}

void sub_10003B694()
{
  uint64_t v0 = qword_10008B848;
  uint64_t v1 = *(dispatch_object_s **)(qword_10008B848 + 56);
  if (v1)
  {
    dispatch_suspend(v1);
    uint64_t v0 = qword_10008B848;
  }

  uint64_t v2 = *(dispatch_object_s **)(v0 + 40);
  if (v2) {
    dispatch_suspend(v2);
  }
  sub_100024784();
}

uint64_t sub_10003B6D4(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 | a2;
  if (a1 | a2)
  {
    uint64_t v2 = 1LL;
    if (a1)
    {
      if (a2)
      {
        if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2)
        {
          int v3 = *(unsigned __int8 *)(a1 + 1);
          if (v3 == *(unsigned __int8 *)(a2 + 1))
          {
            if (v3 == 30)
            {
              if (*(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16))
              {
                int v4 = *(_DWORD *)(a1 + 24);
                int v5 = *(_DWORD *)(a2 + 24);
LABEL_15:
                if (v4 == v5) {
                  return 0LL;
                }
              }
            }

            else if (v3 == 2)
            {
              int v4 = *(_DWORD *)(a1 + 4);
              int v5 = *(_DWORD *)(a2 + 4);
              goto LABEL_15;
            }
          }
        }

        return 1LL;
      }
    }
  }

  return v2;
}

BOOL sub_10003B75C(unint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3 = a1 | a2;
  if (a1 | a2)
  {
    uint64_t v3 = 1LL;
    if (a1)
    {
      if (a2)
      {
        int v4 = *(unsigned __int8 *)(a1 + 1);
        if (v4 != 2)
        {
          if (v4 == 30)
          {
            uint64_t v5 = 0LL;
            while (1)
            {
              unsigned int v6 = -1 << -(char)a3;
              if (!a3) {
                unsigned int v6 = 0;
              }
              BOOL v7 = a3 < 32;
              if (a3 >= 32) {
                a3 -= 32;
              }
              else {
                a3 = 0;
              }
              if (!v7) {
                unsigned int v6 = -1;
              }
              if (((*(_DWORD *)(a1 + 8 + v5) ^ *(_DWORD *)(a2 + 8 + v5)) & bswap32(v6)) != 0) {
                break;
              }
              v5 += 4LL;
              if (v5 == 16) {
                return *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24);
              }
            }
          }

          return 1LL;
        }

        return ((*(_DWORD *)(a1 + 4) ^ *(_DWORD *)(a2 + 4)) & bswap32(-1 << -(char)a3)) != 0;
      }
    }
  }

  return v3;
}

uint64_t sub_10003B83C(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 | a2;
  if (a1 | a2)
  {
    uint64_t v2 = 1LL;
    if (a1)
    {
      if (a2)
      {
        if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2)
        {
          int v3 = *(unsigned __int8 *)(a1 + 1);
          if (v3 == *(unsigned __int8 *)(a2 + 1))
          {
            if (v3 == 30)
            {
              if ((!*(_WORD *)(a1 + 2)
                 || !*(_WORD *)(a2 + 2)
                 || *(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2))
                && *(void *)(a1 + 8) == *(void *)(a2 + 8)
                && *(void *)(a1 + 16) == *(void *)(a2 + 16))
              {
                int v4 = *(_DWORD *)(a1 + 24);
                int v5 = *(_DWORD *)(a2 + 24);
LABEL_21:
                if (v4 == v5) {
                  return 0LL;
                }
              }
            }

            else if (v3 == 2 {
                   && (!*(_WORD *)(a1 + 2)
            }
                    || !*(_WORD *)(a2 + 2)
                    || *(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2)))
            {
              int v4 = *(_DWORD *)(a1 + 4);
              int v5 = *(_DWORD *)(a2 + 4);
              goto LABEL_21;
            }
          }
        }

        return 1LL;
      }
    }
  }

  return v2;
}

uint64_t sub_10003B8F4(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 | a2;
  if (a1 | a2)
  {
    uint64_t v2 = 1LL;
    if (a1)
    {
      if (a2)
      {
        if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2)
        {
          int v3 = *(unsigned __int8 *)(a1 + 1);
          if (v3 == *(unsigned __int8 *)(a2 + 1))
          {
            if (v3 == 30)
            {
              if (*(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2)
                && *(void *)(a1 + 8) == *(void *)(a2 + 8)
                && *(void *)(a1 + 16) == *(void *)(a2 + 16))
              {
                int v4 = *(_DWORD *)(a1 + 24);
                int v5 = *(_DWORD *)(a2 + 24);
LABEL_17:
                if (v4 == v5) {
                  return 0LL;
                }
              }
            }

            else if (v3 == 2 && *(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2))
            {
              int v4 = *(_DWORD *)(a1 + 4);
              int v5 = *(_DWORD *)(a2 + 4);
              goto LABEL_17;
            }
          }
        }

        return 1LL;
      }
    }
  }

  return v2;
}

BOOL sub_10003B99C(unint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3 = a1 | a2;
  if (a1 | a2)
  {
    uint64_t v3 = 1LL;
    if (a1)
    {
      if (a2)
      {
        if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2)
        {
          int v4 = *(unsigned __int8 *)(a1 + 1);
          if (v4 == *(unsigned __int8 *)(a2 + 1))
          {
            if (v4 == 30)
            {
              if (*(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2))
              {
                uint64_t v5 = 0LL;
                while (1)
                {
                  unsigned int v6 = -1 << -(char)a3;
                  if (!a3) {
                    unsigned int v6 = 0;
                  }
                  BOOL v7 = a3 < 32;
                  if (a3 >= 32) {
                    a3 -= 32;
                  }
                  else {
                    a3 = 0;
                  }
                  if (!v7) {
                    unsigned int v6 = -1;
                  }
                  if (((*(_DWORD *)(a1 + 8 + v5) ^ *(_DWORD *)(a2 + 8 + v5)) & bswap32(v6)) != 0) {
                    break;
                  }
                  v5 += 4LL;
                  if (v5 == 16) {
                    return *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24);
                  }
                }
              }
            }

            else if (v4 == 2 {
                   && *(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2)
            }
                   && ((*(_DWORD *)(a1 + 4) ^ *(_DWORD *)(a2 + 4)) & bswap32(-1 << -(char)a3)) == 0)
            {
              return 0LL;
            }
          }
        }

        return 1LL;
      }
    }
  }

  return v3;
}

sockaddr *sub_10003BAA0(const sockaddr *a1)
{
  socklen_t v16 = 128;
  uint64_t v2 = (sockaddr *)calloc(1uLL, 0x80uLL);
  if (!v2)
  {
    if (dword_10008BA20)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1000637A0();
      }
    }

    return 0LL;
  }

  uint64_t v3 = v2;
  uint64_t v4 = socket(a1->sa_family, 2, 0);
  if ((v4 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      BOOL v12 = (os_log_s *)ne_log_obj(v4);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1000637CC();
      }
    }

    goto LABEL_22;
  }

  uint64_t v5 = v4;
  uint64_t v6 = fcntl(v4, 4, 4LL);
  if ((_DWORD)v6 == -1 && dword_10008BA20 != 0)
  {
    uint64_t v8 = (os_log_s *)ne_log_obj(v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100063910();
    }
  }

  sub_10003BC64(v5, a1->sa_family);
  uint64_t v9 = connect(v5, a1, a1->sa_len);
  if ((v9 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      size_t v13 = (os_log_s *)ne_log_obj(v9);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_100063838();
      }
    }

    close(v5);
LABEL_22:
    free(v3);
    return 0LL;
  }

  uint64_t v10 = getsockname(v5, v3, &v16);
  if ((v10 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v15 = (os_log_s *)ne_log_obj(v10);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_1000638A4();
      }
    }

    close(v5);
    return 0LL;
  }

  close(v5);
  return v3;
}

uint64_t sub_10003BC64(uint64_t a1, uint64_t a2)
{
  int v2 = a1;
  if ((_DWORD)a2 == 2)
  {
    int v4 = 0;
    int v5 = 21;
  }

  else
  {
    if ((_DWORD)a2 != 30)
    {
      if (dword_10008BA20)
      {
        uint64_t v15 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_10006393C(a2, v15, v16, v17, v18, v19, v20, v21);
        }
      }

      return 0xFFFFFFFFLL;
    }

    int v4 = 41;
    int v5 = 28;
  }

  uint64_t v6 = ipsec_set_policy("in bypass", 9);
  if (!v6)
  {
    if (!dword_10008BA20) {
      return 0xFFFFFFFFLL;
    }
    int v22 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
LABEL_15:
    sub_1000639A0();
    return 0xFFFFFFFFLL;
  }

  BOOL v7 = v6;
  socklen_t policylen = ipsec_get_policylen(v6);
  uint64_t v9 = setsockopt(v2, v4, v5, v7, policylen);
  if ((v9 & 0x80000000) != 0)
  {
    if (!dword_10008BA20) {
      return 0xFFFFFFFFLL;
    }
    uint8_t v23 = (os_log_s *)ne_log_obj(v9);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_24;
  }

  free(v7);
  uint64_t v10 = ipsec_set_policy("out bypass", 10);
  if (!v10)
  {
    if (!dword_10008BA20) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v24 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_15;
  }

  uint64_t v11 = v10;
  socklen_t v12 = ipsec_get_policylen(v10);
  uint64_t v13 = setsockopt(v2, v4, v5, v11, v12);
  if ((v13 & 0x80000000) == 0)
  {
    free(v11);
    return 0LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v25 = (os_log_s *)ne_log_obj(v13);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
LABEL_24:
    }
      sub_100063A0C();
  }

  return 0xFFFFFFFFLL;
}

ssize_t sub_10003BE30( int a1, uint64_t a2, unint64_t a3, int a4, void *a5, socklen_t *a6, uint64_t a7, unsigned int *a8)
{
  *(void *)__int16 v38 = 128LL;
  uint64_t v16 = getsockname(a1, &v41, v38);
  if ((v16 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(v16);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1000638A4();
      }
    }

    return 0xFFFFFFFFLL;
  }

  else
  {
    v37.msg_name = a5;
    v37.msg_namelen = *a6;
    v40[0] = a2;
    v40[1] = a3;
    v37.msg_iov = (iovec *)v40;
    v37.msg_iovlen = 1;
    memset(v39, 0, sizeof(v39));
    v37.msg_control = v39;
    *(void *)&v37.msg_controllen = 256LL;
    while (1)
    {
      ssize_t result = recvmsg(a1, &v37, a4);
      *(void *)__int16 v38 = result;
      if ((result & 0x8000000000000000LL) == 0) {
        break;
      }
      int v22 = __error();
      if (*v22 != 4)
      {
        if (dword_10008BA20)
        {
          uint8_t v23 = (os_log_s *)ne_log_obj(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_100063A78();
          }
        }

        return 0xFFFFFFFFLL;
      }
    }

    if (result)
    {
      *a6 = v37.msg_namelen;
      unsigned int v25 = *a8;
      *a8 = 0;
      msg_control = (unsigned int *)v37.msg_control;
      if (v37.msg_controllen >= 0xC && v37.msg_control != 0LL)
      {
        int sa_family = v41.sa_family;
        int v29 = (unsigned int *)((char *)v37.msg_control + v37.msg_controllen);
        __int16 v30 = *(_WORD *)v41.sa_data;
        do
        {
          if (sa_family == 2)
          {
            if (msg_control[1]) {
              goto LABEL_40;
            }
            if (msg_control[2] != 7 || v25 < 0x10) {
              goto LABEL_40;
            }
            *a8 = 16;
            *(void *)a7 = 0LL;
            *(void *)(a7 + 8) = 0LL;
            *(_WORD *)a7 = 528;
            *(_DWORD *)(a7 + 4) = msg_control[3];
          }

          else
          {
            if (sa_family != 30 || msg_control[1] != 41) {
              goto LABEL_40;
            }
            if (msg_control[2] != 46 || v25 < 0x1C) {
              goto LABEL_40;
            }
            unsigned int v32 = 0;
            *a8 = 28;
            *(void *)a7 = 0LL;
            *(void *)(a7 + 8) = 0LL;
            *(_DWORD *)(a7 + 24) = 0;
            *(void *)(a7 + 16) = 0LL;
            *(_WORD *)a7 = 7708;
            *(_OWORD *)(a7 + 8) = *(_OWORD *)(msg_control + 3);
            if (*(unsigned __int8 *)(a7 + 8) == 254)
            {
              if ((*(_BYTE *)(a7 + 9) & 0xC0) == 0x80) {
                unsigned int v32 = msg_control[7];
              }
              else {
                unsigned int v32 = 0;
              }
            }

            *(_DWORD *)(a7 + 24) = v32;
          }

          *(_WORD *)(a7 + 2) = v30;
          unsigned int v25 = -1;
LABEL_40:
          int v34 = (unsigned int *)((char *)msg_control + ((*msg_control + 3LL) & 0x1FFFFFFFCLL));
          if (v34 + 3 <= v29)
          {
            BOOL v35 = v34 == msg_control;
          }

          else
          {
            int v34 = 0LL;
            BOOL v35 = 1;
          }

          msg_control = v34;
        }

        while (!v35);
      }

      if (dword_1000882C8 >= 7)
      {
        sub_100033CEC(7, a2, a3, "@@@@@@ data from readmsg:\n", v18, v19, v20, v21, v36);
        return *(void *)v38;
      }
    }
  }

  return result;
}

uint64_t sub_10003C110( uint64_t a1, const void *a2, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6)
{
  if (a4[1] != a5[1])
  {
    if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100063DD0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  LODWORD(v11) = a1;
  socklen_t v57 = 128;
  uint64_t v12 = getsockname(a1, &__s1, &v57);
  if ((v12 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v19 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_1000638A4();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    uint64_t v13 = (os_log_s *)ne_log_obj(v12);
    uint64_t v12 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v12) {
      sub_100063EE4(&__s1);
    }
    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(v12);
      uint64_t v12 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v12) {
        sub_100063E70((const sockaddr *)a4);
      }
      if (dword_10008BA20)
      {
        uint64_t v15 = (os_log_s *)ne_log_obj(v12);
        uint64_t v12 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v12) {
          sub_100063DFC((const sockaddr *)a5);
        }
      }
    }
  }

  int v16 = a4[1];
  if (v16 != __s1.sa_family)
  {
    if (dword_10008BA20)
    {
      uint64_t v20 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_100063DD0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (v16 == 30)
  {
    *(_OWORD *)uint64_t v56 = *(_OWORD *)a4;
    *(_OWORD *)&v56[12] = *(_OWORD *)(a4 + 12);
    *(_OWORD *)unsigned int v55 = *(_OWORD *)a5;
    *(_OWORD *)&v55[12] = *(_OWORD *)(a5 + 12);
    if (v56[8] == 255 || v56[8] == 254 && (v56[9] & 0xC0) == 0x80) {
      int v17 = *(_DWORD *)&v56[24];
    }
    else {
      int v17 = 0;
    }
    *(_DWORD *)&v55[4] = 0;
    *(_DWORD *)&v56[4] = 0;
    *(void *)&v82.msg_namelen = 28LL;
    *(void *)&v82.msg_iovlen = 1LL;
    v82.msg_name = v55;
    v81[0] = a2;
    v81[1] = a3;
    v82.msg_iov = (iovec *)v81;
    __int128 v67 = 0u;
    __int128 v68 = 0u;
    __int128 v69 = 0u;
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    __int128 v75 = 0u;
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    __int128 v79 = 0u;
    __int128 v80 = 0u;
    v82.msg_control = buf;
    v82.msg_flags = 0;
    v82.msg_controllen = 32;
    *(void *)uint8_t buf = 0x2900000020LL;
    *(_DWORD *)uint64_t v65 = 46;
    *(_OWORD *)&v65[4] = *(_OWORD *)&v56[8];
    int v66 = v17;
    if (dword_10008BA20)
    {
      unsigned int v40 = (os_log_s *)ne_log_obj(v12);
      BOOL v41 = os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG);
      if (v41) {
        sub_100063BB0((const sockaddr *)v56);
      }
      if (dword_10008BA20)
      {
        uint64_t v42 = (os_log_s *)ne_log_obj(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
          sub_100063B34((const sockaddr *)v55);
        }
      }
    }

    if (a6 >= 1)
    {
      int v43 = 0;
      while (1)
      {
        ssize_t v44 = sendmsg(v11, &v82, 0);
        socklen_t v57 = v44;
        if ((v44 & 0x80000000) != 0)
        {
          if (dword_10008BA20)
          {
            __int16 v45 = (os_log_s *)ne_log_obj(v44);
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
              sub_100063AE4();
            }
          }

          ssize_t v44 = (ssize_t)__error();
          if (*(_DWORD *)v44 != 65)
          {
            ssize_t v44 = (ssize_t)__error();
            if (*(_DWORD *)v44 != 50)
            {
              ssize_t v44 = (ssize_t)__error();
              if (*(_DWORD *)v44 != 51) {
                return 0xFFFFFFFFLL;
              }
            }
          }

          socklen_t v57 = 0;
        }

        if (dword_10008BA20)
        {
          int v46 = (os_log_s *)ne_log_obj(v44);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
          {
            socklen_t v47 = v57;
            sub_10003C888((const sockaddr *)a5);
            *(_DWORD *)BOOL v58 = 67109634;
            int v59 = v43 + 1;
            __int16 v60 = 1024;
            socklen_t v61 = v47;
            __int16 v62 = 2080;
            uint64_t v63 = &qword_100088FE8;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "%d times of %d bytes message will be sent to %s\n",  v58,  0x18u);
          }
        }

        if (a6 == ++v43) {
          return v57;
        }
      }
    }

    return v57;
  }

  int v25 = memcmp(&__s1, a4, *a4);
  if (!v25) {
    goto LABEL_39;
  }
  *(_DWORD *)uint8_t buf = 1;
  uint64_t v26 = socket(v16, 2, 0);
  if ((v26 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      int v49 = (os_log_s *)ne_log_obj(v26);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
        sub_1000637CC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v11 = v26;
  char v53 = 4;
  uint64_t v27 = fcntl(v26, 4);
  if ((_DWORD)v27 == -1)
  {
    if (dword_10008BA20)
    {
      BOOL v28 = (os_log_s *)ne_log_obj(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_100063DA4();
      }
    }
  }

  uint64_t v29 = setsockopt(v11, 0xFFFF, 512, buf, 4u);
  if ((v29 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      __int16 v50 = (os_log_s *)ne_log_obj(v29);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
        sub_100063CCC();
      }
    }

    goto LABEL_97;
  }

  uint64_t v30 = a4[1];
  if ((_DWORD)v30 == 30)
  {
    uint64_t v31 = setsockopt(v11, 41, 42, buf, 4u);
    if ((v31 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v52 = (os_log_s *)ne_log_obj(v31);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
          sub_10005C830();
        }
      }

      goto LABEL_97;
    }

    uint64_t v30 = a4[1];
  }

  if ((sub_10003BC64(v11, v30) & 0x80000000) != 0) {
    goto LABEL_97;
  }
  uint64_t v32 = bind(v11, (const sockaddr *)a4, *a4);
  if ((v32 & 0x80000000) != 0)
  {
    if (dword_10008BA20)
    {
      int v51 = (os_log_s *)ne_log_obj(v32);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
        sub_100063D38();
      }
    }

LABEL_97:
    close(v11);
    return 0xFFFFFFFFLL;
  }

uint64_t *sub_10003C888(const sockaddr *a1)
{
  if (a1)
  {
    if (a1->sa_family)
    {
      if (getnameinfo(a1, a1->sa_len, v3, 0x401u, v2, 0x20u, 10))
      {
        __strlcpy_chk(v3, "(invalid)", 1025LL, 1025LL);
        __strlcpy_chk(v2, "(invalid)", 32LL, 32LL);
      }

      snprintf((char *)&qword_100088FE8, 0x42BuLL, "%s[%s]", v3, v2);
    }

    else
    {
      strcpy((char *)&qword_100088FE8, "anonymous");
    }
  }

  else
  {
    LOBYTE(qword_100088FE8) = 0;
  }

  return &qword_100088FE8;
}

_BYTE *sub_10003C994(char a1)
{
  int v2 = calloc(1uLL, 0x80uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *int v2 = a1;
  }

  else if (dword_10008BA20)
  {
    int v4 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100063F58();
    }
  }

  return v3;
}

void *sub_10003CA00(unsigned __int8 *a1)
{
  int v2 = calloc(1uLL, 0x80uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    __memcpy_chk(v2, a1, *a1, 128LL);
  }

  else if (dword_10008BA20)
  {
    int v4 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100063F58();
    }
  }

  return v3;
}

uint64_t *sub_10003CA7C(const sockaddr *a1, int a2)
{
  if (a1)
  {
    if (a1->sa_family)
    {
      if (getnameinfo(a1, a1->sa_len, v5, 0x401u, v4, 0x20u, 10))
      {
        __strlcpy_chk(v5, "(invalid)", 1025LL, 1025LL);
        __strlcpy_chk(v4, "(invalid)", 32LL, 32LL);
      }

      snprintf((char *)&qword_100089413, 0x42BuLL, "%s/%d[%s]", v5, a2, v4);
    }

    else
    {
      strcpy((char *)&qword_100089413, "anonymous");
    }
  }

  else
  {
    LOBYTE(qword_100089413) = 0;
  }

  return &qword_100089413;
}

char *sub_10003CB98(const sockaddr *a1)
{
  if (a1)
  {
    if (getnameinfo(a1, a1->sa_len, v2, 0x401u, 0LL, 0, 10)) {
      __strlcpy_chk(v2, "(invalid)", 1025LL, 1025LL);
    }
    snprintf(&byte_10008983E, 0x42BuLL, "%s", v2);
  }

  else
  {
    byte_10008983E = 0;
  }

  return &byte_10008983E;
}

int *sub_10003CC54(uint64_t a1)
{
  if (a1)
  {
    if (*(_OWORD *)a1 == 0LL)
    {
      dword_100089C6C = 7958113;
    }

    else
    {
      sub_10003CB98((const sockaddr *)a1);
      snprintf((char *)&dword_100089C6C, 0x40BuLL, "%s", &byte_10008983E);
      size_t v2 = strlen((const char *)&dword_100089C6C);
      snprintf((char *)&dword_100089C6C + v2, 1035 - v2, "/%ld", *(void *)(a1 + 128));
    }
  }

  else
  {
    LOBYTE(dword_100089C6C) = 0;
  }

  return &dword_100089C6C;
}

char *sub_10003CD14(const char *a1, uint64_t a2, uint64_t a3)
{
  int v5 = strdup((const char *)dword_100089C6C);
  sub_10003CC54(a3);
  uint64_t v6 = strdup((const char *)dword_100089C6C);
  if (!v5)
  {
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_9;
      }
    }

    goto LABEL_10;
  }

  BOOL v7 = v6;
  if (!v6)
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
LABEL_9:
      }
        sub_10005C498();
    }

char *sub_10003CE10(const char *a1, const sockaddr *a2, sockaddr *a3)
{
  uint64_t v3 = a3;
  if (!a2)
  {
    int v5 = 0LL;
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  sub_10003C888(a2);
  int v5 = strdup((const char *)&qword_100088FE8);
  if (!v5)
  {
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
LABEL_22:
      }
        sub_10005C498();
    }

_BYTE *sub_10003CF40(const char *a1, const char *a2)
{
  size_t v2 = a2;
  memset(&v18, 0, sizeof(v18));
  v18.ai_socktype = 2;
  v18.ai_flags = 4;
  uint64_t v4 = getaddrinfo(a1, a2, &v18, &v17);
  if ((_DWORD)v4)
  {
    if (dword_10008BA20)
    {
      int v5 = v4;
      uint64_t v6 = (os_log_s *)ne_log_obj(v4);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        if (v2) {
          BOOL v7 = ",";
        }
        else {
          BOOL v7 = (const char *)&unk_10007E069;
        }
        if (!v2) {
          size_t v2 = (const char *)&unk_10007E069;
        }
        uint64_t v8 = gai_strerror(v5);
        *(_DWORD *)uint8_t buf = 136315906;
        uint64_t v20 = a1;
        __int16 v21 = 2080;
        uint64_t v22 = v7;
        __int16 v23 = 2080;
        uint64_t v24 = v2;
        __int16 v25 = 2080;
        uint64_t v26 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "getaddrinfo(%s%s%s): %s\n", buf, 0x2Au);
      }
    }

    return 0LL;
  }

  if (v17->ai_next) {
    BOOL v9 = dword_10008BA20 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = (os_log_s *)ne_log_obj(v4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = ",";
      uint64_t v12 = (const char *)&unk_10007E069;
      *(_DWORD *)uint8_t buf = 136315650;
      uint64_t v20 = a1;
      if (!v2) {
        uint64_t v11 = (const char *)&unk_10007E069;
      }
      __int16 v21 = 2080;
      if (v2) {
        uint64_t v12 = v2;
      }
      uint64_t v22 = v11;
      __int16 v23 = 2080;
      uint64_t v24 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "getaddrinfo(%s%s%s): resolved to multiple address, taking the first one\n",  buf,  0x20u);
    }
  }

  uint64_t v13 = sub_10003C994(128);
  if (!v13)
  {
    if (dword_10008BA20)
    {
      uint64_t v15 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_1000560EC();
      }
    }

    freeaddrinfo(v17);
    return 0LL;
  }

  uint64_t v14 = v13;
  memcpy(v13, v17->ai_addr, v17->ai_addrlen);
  freeaddrinfo(v17);
  return v14;
}

void sub_10003D16C(char *a1, unsigned __int8 *a2, unint64_t a3)
{
  int v4 = a2[1];
  if (v4 == 30)
  {
    int v5 = a1 + 8;
    unsigned int v6 = 16;
  }

  else
  {
    if (v4 != 2)
    {
      if (dword_10008BA20)
      {
        BOOL v9 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_100063FC4();
        }
      }

uint64_t sub_10003D29C(unint64_t *__s1, sockaddr *a2)
{
  if (__s1 && a2)
  {
    uint64_t result = memcmp(__s1, &unk_10006A2B8, 0x88uLL);
    if (!(_DWORD)result) {
      return result;
    }
    if (*((unsigned __int8 *)__s1 + 1) == a2->sa_family)
    {
      int v5 = sub_10003D53C((uint64_t)__s1);
      int v6 = sub_10003D53C((uint64_t)a2);
      int v7 = 0;
      if (!v5 || !v6)
      {
LABEL_9:
        sub_10003D16C((char *)v23, &a2->sa_len, __s1[16]);
        sub_10003CC54((uint64_t)__s1);
        uint64_t v8 = strdup((const char *)dword_100089C6C);
        sub_10003CB98(a2);
        BOOL v9 = strdup(&byte_10008983E);
        sub_10003CB98(v23);
        uint64_t v10 = strdup(&byte_10008983E);
        if (v8)
        {
          if (v9)
          {
            uint64_t v11 = v10;
            if (v10)
            {
              if (dword_10008BA20)
              {
                uint64_t v12 = (os_log_s *)ne_log_obj(v10);
                if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
                {
                  int v17 = 136315650;
                  addrinfo v18 = v8;
                  __int16 v19 = 2080;
                  uint64_t v20 = v9;
                  __int16 v21 = 2080;
                  uint64_t v22 = v11;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "naddr=%s, saddr=%s (masked=%s)\n",  (uint8_t *)&v17,  0x20u);
                }
              }

              free(v8);
              free(v9);
              free(v11);
LABEL_17:
              return 0xFFFFFFFFLL;
            }

            if (dword_10008BA20)
            {
              int v16 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
                goto LABEL_32;
              }
            }

uint64_t sub_10003D53C(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFLL;
  }
  int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30 || v1 == 2)
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 2);
  }

  else
  {
    if (dword_10008BA20)
    {
      int v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_10006412C();
      }
    }

    unsigned int v2 = 0xFFFF;
  }

  return __rev16(v2);
}

uint64_t sub_10003D5BC(uint64_t result)
{
  if (result)
  {
    int v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 30 || v1 == 2)
    {
      result += 2LL;
    }

    else
    {
      if (dword_10008BA20)
      {
        unsigned int v2 = (os_log_s *)ne_log_obj(result);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          sub_10006412C();
        }
      }

      return 0LL;
    }
  }

  return result;
}

_WORD *sub_10003D630(uint64_t a1, unsigned int a2)
{
  uint64_t result = (_WORD *)sub_10003D5BC(a1);
  if (result) {
    *uint64_t result = __rev16(a2);
  }
  return result;
}

void sub_10003D65C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t *sub_10003D664(const sockaddr *a1)
{
  return sub_10003C888(a1);
}

  ;
}

char *sub_10003D680(uint64_t a1, unint64_t a2)
{
  size_t v4 = (a2 >> 3) + 2 * a2 + 10;
  int v5 = (char *)malloc(v4);
  if (v5)
  {
    if (a2)
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = 0LL;
      do
      {
        snprintf(&v5[v6], v4 - v6, "%02x", *(unsigned __int8 *)(a1 + v7));
        uint64_t v8 = v6 + 2;
        if ((~(_BYTE)v7 & 7) == 0)
        {
          v5[v8] = 32;
          uint64_t v8 = v6 + 3;
          v5[v6 + 3] = 0;
        }

        ++v7;
        uint64_t v6 = v8;
      }

      while (a2 != v7);
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    v5[v8] = 0;
  }

  return v5;
}

_BYTE *sub_10003D750(_BYTE *a1, int a2, void *a3)
{
  LOBYTE(v3) = *a1;
  if (!*a1) {
    return 0LL;
  }
  unint64_t v7 = 0LL;
  uint64_t v8 = 1LL;
  do
  {
    if ((v3 & 0x80) != 0)
    {
    }

    else
    {
      __uint32_t v9 = _DefaultRuneLocale.__runetype[(char)v3];
      if ((v9 & 0x10000) != 0)
      {
        ++v7;
      }

      else if ((v9 & 0x4000) == 0)
      {
        return 0LL;
      }
    }

    int v3 = a1[v8++];
  }

  while (v3);
  uint64_t v10 = 0LL;
  if (v7)
  {
    if ((v7 & 1) == 0)
    {
      uint64_t v11 = malloc(v7 >> 1);
      uint64_t v10 = v11;
      if (v11)
      {
        int v12 = *a1;
        if (*a1)
        {
          uint64_t v13 = 0LL;
          int v14 = 0;
          uint64_t v15 = a1 + 1;
          int v16 = v11;
          do
          {
            if ((v12 & 0x80) == 0 && (_DefaultRuneLocale.__runetype[v12] & 0x10000) != 0)
            {
              if (v14)
              {
                __str[1] = v12;
                __str[2] = 0;
                char v17 = strtol(__str, 0LL, a2);
                int v14 = 0;
                *v16++ = v17;
                ++v13;
              }

              else
              {
                __str[0] = v12;
                int v14 = 1;
              }
            }

            int v18 = *v15++;
            int v12 = v18;
          }

          while (v18);
        }

        else
        {
          uint64_t v13 = 0LL;
        }

        *a3 = v13;
      }
    }
  }

  return v10;
}

char *sub_10003D884(int a1)
{
  return byte_10008B1EB;
}

const char *sub_10003D8C8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 > 5506)
  {
    if (a3 <= 6591)
    {
      if (a3 <= 6343)
      {
        if (a3 > 6335)
        {
          if (a3 == 6336) {
            return "IKEv1 quick I start";
          }
          if (a3 == 6338) {
            return "IKEv1 quick I msg2 rcvd";
          }
        }

        else
        {
          if (a3 == 5507) {
            return "IKEv1 agg R msg3 rcvd";
          }
          if (a3 == 5538) {
            return "IKEv1 agg R msg2 sent";
          }
        }
      }

      else if (a3 <= 6368)
      {
        if (a3 == 6344) {
          return "IKEv1 quick I addsa";
        }
        if (a3 == 6352) {
          return "IKEv1 quick I getspi done";
        }
      }

      else
      {
        switch(a3)
        {
          case 6369:
            return "IKEv1 quick I msg1 sent";
          case 6371:
            return "IKEv1 quick I msg3 sent";
          case 6384:
            return "IKEv1 quick I getspi sent";
        }
      }
    }

    else
    {
      if (a3 <= 6625)
      {
        switch(a3)
        {
          case 6592:
            uint64_t result = "IKEv1 quick R start";
            break;
          case 6593:
            uint64_t result = "IKEv1 quick R msg1 rcvd";
            break;
          case 6594:
          case 6597:
          case 6598:
          case 6599:
            return "???";
          case 6595:
            uint64_t result = "IKEv1 quick R msg3 rcvd";
            break;
          case 6596:
            uint64_t result = "IKEv1 quick R commit";
            break;
          case 6600:
            uint64_t result = "IKEv1 quick R addsa";
            break;
          default:
            if (a3 != 6608) {
              return "???";
            }
            uint64_t result = "IKEv1 quick R getspi done";
            break;
        }

        return result;
      }

      if (a3 > 10239)
      {
        switch(a3)
        {
          case 18432:
            return "Phase 2 expired";
          case 17408:
            return "Phase 1 expired";
          case 10240:
            return "Phase 2 established";
        }
      }

      else
      {
        switch(a3)
        {
          case 6626:
            return "IKEv1 quick R msg2 sent";
          case 6640:
            return "IKEv1 quick R getspi sent";
          case 9216:
            return "Phase 1 Established";
        }
      }
    }

    return "???";
  }

  if (a3 > 5280)
  {
    if (a3 > 5473)
    {
      if (a3 > 5503)
      {
        if (a3 == 5504) {
          return "IKEv1 agg R start";
        }
        if (a3 == 5505) {
          return "IKEv1 agg R msg1 rcvd";
        }
      }

      else
      {
        if (a3 == 5474) {
          return "IKEv1 ident R msg2 sent";
        }
        if (a3 == 5476) {
          return "IKEv1 ident R msg4 sent";
        }
      }

      return "???";
    }

    switch(a3)
    {
      case 5440:
        return "IKEv1 ident R start";
      case 5441:
        return "IKEv1 ident R msg1 rcvd";
      case 5442:
      case 5444:
        return "???";
      case 5443:
        return "IKEv1 ident R msg3 rcvd";
      case 5445:
        return "IKEv1 ident R msg5 rcvd";
      default:
        if (a3 == 5281)
        {
          uint64_t result = "IKEv1 agg I msg1 sent";
        }

        else
        {
          if (a3 != 5283) {
            return "???";
          }
          uint64_t result = "IKEv1 agg I msg3 sent";
        }

        break;
    }
  }

  else
  {
    if (a3 > 5216)
    {
      if (a3 <= 5220)
      {
        if (a3 == 5217) {
          return "IKEv1 ident I msg1 sent";
        }
        if (a3 == 5219) {
          return "IKEv1 ident I msg3 sent";
        }
      }

      else
      {
        switch(a3)
        {
          case 5221:
            return "IKEv1 ident I msg5 sent";
          case 5248:
            return "IKEv1 agg I start";
          case 5250:
            return "IKEv1 agg I msg2 rcvd";
        }
      }

      return "???";
    }

    switch(a3)
    {
      case 5184:
        uint64_t result = "IKEv1 ident I start";
        break;
      case 5185:
      case 5187:
      case 5189:
        return "???";
      case 5186:
        uint64_t result = "IKEv1 ident I msg2 rcvd";
        break;
      case 5188:
        uint64_t result = "IKEv1 ident I msg4 rcvd";
        break;
      case 5190:
        uint64_t result = "IKEv1 ident I msg6 rcvd";
        break;
      default:
        if (a3 != 63) {
          return "???";
        }
        uint64_t result = "IKEv1 info";
        break;
    }
  }

  return result;
}

char *sub_10003DD14(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085128[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 66)
    {
      unsigned int v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085128[v1 + 2];
}

char *sub_10003DD88(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085230[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 60)
    {
      unsigned int v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085230[v1 + 2];
}

char *sub_10003DDFC(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085320[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 216)
    {
      unsigned int v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085320[v1 + 2];
}

char *sub_10003DE70(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085680[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 126)
    {
      unsigned int v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085680[v1 + 2];
}

char *sub_10003DEE4(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085878[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 216)
    {
      unsigned int v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085878[v1 + 2];
}

char *sub_10003DF58(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085BD8[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 24)
    {
      unsigned int v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085BD8[v1 + 2];
}

char *sub_10003DFCC(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085C38[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 24)
    {
      unsigned int v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085C38[v1 + 2];
}

const char *sub_10003E040(int a1)
{
  if (a1 == 1) {
    return "IKE";
  }
  uint64_t v1 = byte_10008B1EB;
  snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
  return v1;
}

char *sub_10003E098(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085C98[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 36)
    {
      unsigned int v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085C98[v1 + 2];
}

char *sub_10003E10C(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085D28[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 78)
    {
      unsigned int v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085D28[v1 + 2];
}

char *sub_10003E180(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085E60[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 18)
    {
      unsigned int v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085E60[v1 + 2];
}

char *sub_10003E1F4(int a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  while (dword_100085C38[v2] != a1)
  {
    v2 += 6LL;
    if (v2 == 24)
    {
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a2);
      return byte_10008B1EB;
    }
  }

  return (char *)(*(uint64_t (**)(uint64_t))&dword_100085C38[v2 + 4])(a2);
}

char *sub_10003E278(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085EA8[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 54)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085EA8[v1 + 2];
}

char *sub_10003E2EC(int a1)
{
  uint64_t v1 = 0LL;
  for (char i = 1; ; char i = 0)
  {
    char v3 = i;
    if (*((_DWORD *)&unk_100086790 + 6 * v1) == a1) {
      break;
    }
    uint64_t v1 = 1LL;
    if ((v3 & 1) == 0)
    {
      size_t v4 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v4;
    }
  }

  return (char *)*((void *)&unk_100086790 + 3 * v1 + 1);
}

char *sub_10003E374(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100085F80[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 42)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100085F80[v1 + 2];
}

char *sub_10003E3E8(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100086028[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 42)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100086028[v1 + 2];
}

char *sub_10003E45C(int a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  for (char i = &off_100085EB8; *((_DWORD *)i - 4) != a1 || ((0x1E6uLL >> v2) & 1) != 0; i += 3)
  {
    if (++v2 == 9)
    {
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a2);
      return byte_10008B1EB;
    }
  }

  return (char *)((uint64_t (*)(uint64_t))*i)(a2);
}

char *sub_10003E4EC(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_1000860D0[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 66)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_1000860D0[v1 + 2];
}

char *sub_10003E560(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_1000861D8[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 108)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_1000861D8[v1 + 2];
}

char *sub_10003E5D4(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100086388[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 42)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100086388[v1 + 2];
}

char *sub_10003E648(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100086430[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 48)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100086430[v1 + 2];
}

char *sub_10003E6BC(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_1000864F0[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 90)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_1000864F0[v1 + 2];
}

char *sub_10003E730(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100086658[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 60)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100086658[v1 + 2];
}

char *sub_10003E7A4(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100086748[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 18)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100086748[v1 + 2];
}

char *sub_10003E818(int a1)
{
  uint64_t v1 = 0LL;
  for (char i = 1; ; char i = 0)
  {
    char v3 = i;
    if (*((_DWORD *)&unk_100086790 + 6 * v1) == a1) {
      break;
    }
    uint64_t v1 = 1LL;
    if ((v3 & 1) == 0)
    {
      size_t v4 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v4;
    }
  }

  return (char *)*((void *)&unk_100086790 + 3 * v1 + 1);
}

char *sub_10003E8A0(int a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  for (char i = &off_1000861E8; *((_DWORD *)i - 4) != a1 || ((0x3FBE0uLL >> v2) & 1) != 0; i += 3)
  {
    if (++v2 == 18)
    {
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a2);
      return byte_10008B1EB;
    }
  }

  return (char *)((uint64_t (*)(uint64_t))*i)(a2);
}

char *sub_10003E934(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_1000867C0[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 18)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_1000867C0[v1 + 2];
}

char *sub_10003E9A8(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100086808[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 42)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100086808[v1 + 2];
}

char *sub_10003EA1C(int a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  while (dword_100086808[v2] != a1)
  {
    v2 += 6LL;
    if (v2 == 42)
    {
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a2);
      return byte_10008B1EB;
    }
  }

  return (char *)(*(uint64_t (**)(uint64_t))&dword_100086808[v2 + 4])(a2);
}

char *sub_10003EAA0(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_1000868B0[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 138)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_1000868B0[v1 + 2];
}

char *sub_10003EB14(int a1)
{
  uint64_t v1 = 0LL;
  while (dword_100086AD8[v1] != a1)
  {
    v1 += 6LL;
    if (v1 == 48)
    {
      uint64_t v2 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v2;
    }
  }

  return *(char **)&dword_100086AD8[v1 + 2];
}

char *sub_10003EB88(int a1)
{
  uint64_t v1 = 0LL;
  for (char i = 1; ; char i = 0)
  {
    char v3 = i;
    if (*((_DWORD *)&unk_100086B98 + 6 * v1) == a1) {
      break;
    }
    uint64_t v1 = 1LL;
    if ((v3 & 1) == 0)
    {
      size_t v4 = byte_10008B1EB;
      snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
      return v4;
    }
  }

  return (char *)*((void *)&unk_100086B98 + 3 * v1 + 1);
}

const char *sub_10003EC10(int a1)
{
  if (a1 <= 16)
  {
    if (a1 == 1) {
      return "icmp";
    }
    if (a1 == 6) {
      return "tcp";
    }
LABEL_12:
    uint64_t v1 = byte_10008B1EB;
    snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
    return v1;
  }

  if (a1 == 17) {
    return "udp";
  }
  if (a1 == 58) {
    return "icmpv6";
  }
  if (a1 != 255) {
    goto LABEL_12;
  }
  return "any";
}

const char *sub_10003ECC0(int a1)
{
  if (a1 == 1) {
    return "ipsec_doi";
  }
  uint64_t v1 = byte_10008B1EB;
  snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
  return v1;
}

const char *sub_10003ED18(int a1)
{
  if (a1 > 31)
  {
    switch(a1)
    {
      case ' ':
        return "_quick";
      case '!':
        return "_newgrp";
      case '""':
        return "_ackinfo";
      default:
LABEL_14:
        uint64_t v1 = byte_10008B1EB;
        snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
        break;
    }
  }

  else
  {
    uint64_t v1 = "_none";
    switch(a1)
    {
      case 0:
        return v1;
      case 1:
        uint64_t v1 = "base";
        break;
      case 2:
        uint64_t v1 = "main";
        break;
      case 3:
        uint64_t v1 = "_auth";
        break;
      case 4:
        uint64_t v1 = "aggressive";
        break;
      case 5:
        uint64_t v1 = "_info";
        break;
      default:
        goto LABEL_14;
    }
  }

  return v1;
}

char *sub_10003EE08(int a1)
{
  uint64_t v1 = byte_10008B1EB;
  snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
  return v1;
}

const char *sub_10003EE68(int a1)
{
  if (!a1) {
    return "off";
  }
  if (a1 == 1) {
    return "on";
  }
  uint64_t v1 = byte_10008B1EB;
  snprintf(byte_10008B1EB, 0x14uLL, "%d", a1);
  return v1;
}

void *sub_10003EED0(unsigned __int8 *a1)
{
  uint64_t v2 = malloc(*a1 + 24LL);
  if (v2)
  {
    *(_DWORD *)uint64_t v2 = dword_10008BE98 + time(0LL);
    memcpy(v2 + 3, a1, *a1);
    char v3 = (char *)off_1000882E0;
    v2[1] = off_1000882E0;
    size_t v4 = v3 + 16;
    BOOL v5 = v3 == 0LL;
    off_1000882E0 = v2;
    uint64_t v6 = &off_1000882E8;
    if (!v5) {
      uint64_t v6 = v4;
    }
    *uint64_t v6 = v2 + 1;
    v2[2] = &off_1000882E0;
  }

  return v2;
}

uint64_t sub_10003EF60(unsigned __int8 *a1, int a2)
{
  if (!dword_10008BE98) {
    return 0LL;
  }
  time_t v4 = time(0LL);
  BOOL v5 = *(void **)off_1000882E8[1];
  if (!v5)
  {
LABEL_12:
    if (a2 && !sub_10003EED0(a1))
    {
      if (dword_10008BA20)
      {
        int v12 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          sub_100064190(v12);
        }
      }

      return dword_10008BE98 + time(0LL);
    }

    return 0LL;
  }

  time_t v6 = v4;
  while (1)
  {
    if (v6 > *(int *)v5)
    {
      uint64_t v7 = v5[1];
      uint64_t v8 = (void *)v5[2];
      if (v7)
      {
        *(void *)(v7 + 16) = v8;
        uint64_t v8 = (void *)v5[2];
      }

      else
      {
        off_1000882E8 = (_UNKNOWN **)v5[2];
      }

      *uint64_t v8 = v7;
      free(v5);
      __uint32_t v9 = off_1000882E8;
      goto LABEL_11;
    }

    __uint32_t v9 = (_UNKNOWN **)v5[2];
LABEL_11:
    BOOL v5 = *(void **)v9[1];
    if (!v5) {
      goto LABEL_12;
    }
  }

  uint64_t result = *(unsigned int *)v5;
  if (a2)
  {
    uint64_t v11 = (int)result - v6 + dword_10008BE98;
    if (v11 >= 10) {
      LODWORD(v11) = 10;
    }
    uint64_t result = (v11 + v6);
    *(_DWORD *)BOOL v5 = result;
  }

  return result;
}

__int128 *sub_10003F0A0(int a1)
{
  if (a1 == 19) {
    return &xmmword_10006A35C;
  }
  uint64_t v2 = 0LL;
  while (dword_1000882F0[v2] != a1)
  {
    v2 += 6LL;
    if (v2 == 120) {
      return 0LL;
    }
  }

  return *(__int128 **)&dword_1000882F0[v2 + 2];
}

double sub_10003F0EC()
{
  for (uint64_t i = 0LL; i != 114; i += 6LL)
  {
    uint64_t v1 = &dword_1000882F0[i];
    int v16 = *(const char **)&dword_1000882F0[i + 2];
    size_t v15 = strlen(v16);
    uint64_t v2 = sub_100007664((uint64_t)&v15);
    *(void *)&dword_1000882F0[i + 4] = v2;
    if (!v2)
    {
      if (dword_10008BA20)
      {
        char v3 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          sub_100064208(&v13, v14, v3);
        }
      }
    }

    time_t v4 = (void *)*((void *)v1 + 2);
    if (*v1 == 17)
    {
      *(_BYTE *)(v4[1] + 14LL) = 1;
      *(_BYTE *)(v4[1] + 15LL) = 0;
    }

    else if (*v1 == 16)
    {
      BOOL v5 = sub_10003F4BC(8uLL);
      if (v5)
      {
        time_t v6 = v5;
        *(void *)v5[1] = *(void *)v4[1];
        sub_10003F5BC(v4);
        time_t v4 = v6;
      }

      else
      {
        if (dword_10008BA20)
        {
          uint64_t v7 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_100064208(&v17, v18, v7);
          }
        }

        time_t v4 = 0LL;
      }
    }

    *((void *)v1 + 2) = v4;
  }

  uint64_t v8 = sub_10003F4BC(0x10uLL);
  qword_1000884C8 = (uint64_t)v8;
  if (!v8)
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000641D0(v10, v11, v12);
      }
    }

    exit(1);
  }

  double result = -1.61043727e48;
  *(_OWORD *)v8[1] = xmmword_10006A35C;
  return result;
}

void *sub_10003F2A0(uint64_t a1)
{
  uint64_t v1 = 0LL;
  if ((_DWORD)a1 == -1) {
    int v2 = 0;
  }
  else {
    int v2 = a1;
  }
  do
  {
    if (dword_1000882F0[v1] == v2) {
      return sub_10003F5F0(*(void *)&dword_1000882F0[v1 + 4]);
    }
    v1 += 6LL;
  }

  while (v1 != 120);
  if (dword_10008BA20)
  {
    char v3 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10006423C(v2, v3);
    }
  }

  return 0LL;
}

uint64_t sub_10003F330(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v1 = 0LL;
  signed int v2 = (bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16) - 4;
  char v3 = (const char *)(a1 + 4);
  do
  {
    uint64_t v4 = *(void *)&dword_1000882F0[v1 + 4];
    unint64_t v5 = *(void *)v4;
    uint64_t v6 = strncmp(*(const char **)(v4 + 8), v3, *(void *)v4);
    if (!(_DWORD)v6)
    {
      if (v5 >= v2)
      {
        if (!dword_10008BA20) {
          return dword_1000882F0[v1];
        }
        uint64_t v12 = (os_log_s *)ne_log_obj(v6);
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          return dword_1000882F0[v1];
        }
        uint64_t v15 = *(void *)&dword_1000882F0[v1 + 2];
        int v16 = 136315138;
        uint64_t v17 = v15;
        int v14 = "received Vendor ID: %s\n";
      }

      else
      {
        if (!dword_10008BA20) {
          return dword_1000882F0[v1];
        }
        uint64_t v12 = (os_log_s *)ne_log_obj(v6);
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          return dword_1000882F0[v1];
        }
        uint64_t v13 = *(void *)&dword_1000882F0[v1 + 2];
        int v16 = 136315138;
        uint64_t v17 = v13;
        int v14 = "received broken Microsoft ID: %s\n";
      }

      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v16, 0xCu);
      return dword_1000882F0[v1];
    }

    v1 += 6LL;
  }

  while (v1 != 120);
  return 0xFFFFFFFFLL;
}

void *sub_10003F4BC(size_t a1)
{
  signed int v2 = malloc(0x10uLL);
  char v3 = v2;
  if (v2)
  {
    *signed int v2 = a1;
    if (a1)
    {
      uint64_t v4 = calloc(1uLL, a1);
      v3[1] = v4;
      if (!v4)
      {
        free(v3);
        return 0LL;
      }
    }

    else
    {
      v2[1] = 0LL;
    }
  }

  return v3;
}

void **sub_10003F51C(void **a1, size_t __size)
{
  if (!a1) {
    return (void **)sub_10003F4BC(__size);
  }
  char v3 = a1;
  if (!*a1)
  {
    sub_10003F5BC(a1);
    return (void **)sub_10003F4BC(__size);
  }

  uint64_t v4 = (char *)realloc(a1[1], __size);
  if (v4)
  {
    unint64_t v5 = v4;
    *char v3 = (void *)__size;
    v3[1] = v5;
  }

  else
  {
    sub_10003F5BC(v3);
    return 0LL;
  }

  return v3;
}

void sub_10003F5BC(void *a1)
{
  if (a1)
  {
    signed int v2 = (void *)a1[1];
    if (v2) {
      free(v2);
    }
    free(a1);
  }

void *sub_10003F5F0(uint64_t a1)
{
  if (a1)
  {
    signed int v2 = sub_10003F4BC(*(void *)a1);
    char v3 = v2;
    if (v2) {
      memcpy((void *)v2[1], *(const void **)(a1 + 8), *(void *)a1);
    }
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_1000642B0(v4);
      }
    }

    return 0LL;
  }

  return v3;
}

void *sub_10003F668(const void *a1, size_t a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = sub_10003F4BC(a2);
  unint64_t v5 = v4;
  if (v4) {
    memcpy((void *)v4[1], a1, a2);
  }
  return v5;
}

BOOL sub_10003F6C0(int a1)
{
  return (a1 - 6) < 0xA;
}

uint64_t sub_10003F6D0(BOOL a1, uint64_t a2)
{
  char v3 = (void *)a1;
  if (*(void *)(a1 + 72)) {
    BOOL v4 = dword_10008BA20 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unint64_t v5 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (a1)
    {
      uint64_t v6 = sub_10003C888((const sockaddr *)a2);
      int v7 = *(_DWORD *)(v3[9] + 52LL);
      if (*(_DWORD *)(v3[8] + 176LL) == 2) {
        uint64_t v8 = "(NAT-T forced)";
      }
      else {
        uint64_t v8 = (const char *)&unk_10007E069;
      }
      int v20 = 136315650;
      __int16 v21 = v6;
      __int16 v22 = 1024;
      int v23 = v7;
      __int16 v24 = 2080;
      __int16 v25 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Hashing %s with algo #%d %s\n",  (uint8_t *)&v20,  0x1Cu);
    }
  }

  int v9 = *(unsigned __int8 *)(a2 + 1);
  if (v9 == 30)
  {
    uint64_t v10 = (const void *)(a2 + 8);
    size_t v11 = 16LL;
  }

  else
  {
    if (v9 != 2)
    {
      if (dword_10008BA20)
      {
        uint64_t v17 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000642F0();
        }
      }

      return 0LL;
    }

    uint64_t v10 = (const void *)(a2 + 4);
    size_t v11 = 4LL;
  }

  uint64_t v12 = sub_10003F4BC(v11 + 18);
  if (!v12) {
    return 0LL;
  }
  uint64_t v13 = v12;
  int v14 = (void *)v12[1];
  *int v14 = *v3;
  v14[1] = v3[1];
  uint64_t v15 = v14 + 2;
  int v16 = v14 + 2;
  if (*(_DWORD *)(v3[8] + 176LL) == 2) {
    bzero(v16, v11);
  }
  else {
    memcpy(v16, v10, v11);
  }
  *(_WORD *)((char *)v15 + v11) = *(_WORD *)(a2 + 2);
  uint64_t v18 = sub_10002A350((uint64_t)v13, (uint64_t)v3);
  sub_10003F5BC(v13);
  return v18;
}

uint64_t sub_10003F8B4(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(*(void *)(a1 + 64) + 176LL) == 2) {
    return 0LL;
  }
  int v6 = **(_DWORD **)(a1 + 88);
  int v7 = (uint64_t *)(a1 + 48);
  if (a3) {
    uint64_t v8 = (uint64_t *)(a1 + 48);
  }
  else {
    uint64_t v8 = (uint64_t *)(a1 + 56);
  }
  if (a3) {
    int v9 = -5;
  }
  else {
    int v9 = -3;
  }
  if (a3)
  {
    int v7 = (uint64_t *)(a1 + 56);
    int v10 = -3;
  }

  else
  {
    int v10 = -5;
  }

  BOOL v11 = v6 == 14;
  if (v6 == 14) {
    uint64_t v12 = v7;
  }
  else {
    uint64_t v12 = v8;
  }
  if (v11) {
    int v13 = v10;
  }
  else {
    int v13 = v9;
  }
  uint64_t v14 = sub_10003F6D0(a1, *v12);
  if (*(void *)a2 == *(void *)v14 && !memcmp(*(const void **)(a2 + 8), *(const void **)(v14 + 8), *(void *)a2))
  {
    *(_DWORD *)(a1 + 96) &= v13;
    uint64_t v3 = 1LL;
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  uint64_t v15 = *(void *)(a1 + 440);
  if (v15) {
    *(_DWORD *)(v15 + 284) = *(_DWORD *)(a1 + 96);
  }
  sub_10003F5BC((void *)v14);
  return v3;
}

uint64_t sub_10003F994(int a1)
{
  BOOL v1 = a1 == 61443 || a1 == 61444;
  return (a1 - 3) < 2 || v1;
}

uint64_t sub_10003F9C0(uint64_t a1, int a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)a1 = a2;
  int v4 = a2 - 6;
  if ((a2 - 6) >= 0xA)
  {
    if (dword_10008BA20)
    {
      BOOL v11 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_100064350(a2, v11);
      }
    }

    return 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t result = 0LL;
    __int16 v6 = word_10006A36C[v4];
    __int16 v7 = word_10006A380[v4];
    __int16 v8 = word_10006A394[v4];
    __int16 v9 = word_10006A3A8[v4];
    __int16 v10 = word_10006A3BC[v4];
    *(_WORD *)(a1 + 4) = *(_WORD *)(qword_10008B848 + 18);
    *(_WORD *)(a1 + 14) = v6;
    *(_WORD *)(a1 + 16) = v7;
    *(_WORD *)(a1 + 6) = v8;
    *(_WORD *)(a1 + 8) = v9;
    *(_WORD *)(a1 + 10) = 2;
    *(_WORD *)(a1 + 12) = v10;
  }

  return result;
}

uint64_t sub_10003FAA8(uint64_t a1, void *a2, void *a3)
{
  *a3 = 0LL;
  *a2 = 0LL;
  uint64_t v3 = *(void *)(*(void *)(a1 + 256) + 88LL);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(unsigned __int16 *)(v3 + 16);
  if (*(_WORD *)(v3 + 16))
  {
    __int16 v7 = *(unsigned __int8 **)(a1 + 8LL * (*(_BYTE *)(a1 + 60) != 0));
    __int16 v8 = *(unsigned __int8 **)(a1 + 8LL * (*(_BYTE *)(a1 + 60) == 0));
    int v9 = v7[1];
    if (v9 == 2)
    {
      size_t v10 = 4LL;
    }

    else
    {
      if (v9 != 30)
      {
        if (!dword_10008BA20) {
          return 0xFFFFFFFFLL;
        }
        int v13 = (os_log_s *)ne_log_obj(a1);
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_13;
      }

      size_t v10 = 16LL;
    }

    int v11 = v8[1];
    if (v11 == 2)
    {
      uint64_t v12 = 4LL;
      goto LABEL_15;
    }

    if (v11 == 30)
    {
      uint64_t v12 = 16LL;
LABEL_15:
      uint64_t v14 = sub_10003F4BC(v10 + 4);
      if (v14)
      {
        uint64_t v15 = v14;
        size_t __len = v12;
        int v16 = sub_10003F4BC(v12 + 4);
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = (_BYTE *)v15[1];
          int v19 = v7[1];
          if (v19 == 30)
          {
            *uint64_t v18 = 5;
            int v20 = v18 + 4;
            __int16 v21 = v7 + 8;
          }

          else
          {
            if (v19 != 2) {
              goto LABEL_33;
            }
            *uint64_t v18 = 1;
            int v20 = v18 + 4;
            __int16 v21 = v7 + 4;
          }

          memmove(v20, v21, v10);
LABEL_33:
          uint64_t v27 = (_BYTE *)v17[1];
          int v28 = v8[1];
          if (v28 == 30)
          {
            _BYTE *v27 = 5;
            uint64_t v29 = v27 + 4;
            uint64_t v30 = v8 + 8;
          }

          else
          {
            if (v28 != 2)
            {
LABEL_38:
              *a2 = v15;
              *a3 = v17;
              return v4;
            }

            _BYTE *v27 = 1;
            uint64_t v29 = v27 + 4;
            uint64_t v30 = v8 + 4;
          }

          memmove(v29, v30, __len);
          goto LABEL_38;
        }

        sub_10003F5BC(v15);
        if (!dword_10008BA20) {
          return 0xFFFFFFFFLL;
        }
        __int16 v25 = (os_log_s *)ne_log_obj(v24);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          return 0xFFFFFFFFLL;
        }
      }

      else
      {
        if (!dword_10008BA20) {
          return 0xFFFFFFFFLL;
        }
        int v23 = (os_log_s *)ne_log_obj(0LL);
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          return 0xFFFFFFFFLL;
        }
      }

      sub_100064438();
      return 0xFFFFFFFFLL;
    }

    if (!dword_10008BA20) {
      return 0xFFFFFFFFLL;
    }
    __int16 v22 = (os_log_s *)ne_log_obj(a1);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
LABEL_13:
    sub_1000643D8();
    return 0xFFFFFFFFLL;
  }

  return v4;
}

char *sub_10003FCF4(uint64_t a1)
{
  BOOL v1 = *(unsigned __int8 **)(a1 + 8);
  int v2 = *v1;
  if (v2 != 5)
  {
    if (v2 != 1)
    {
      if (dword_10008BA20)
      {
        unint64_t v5 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          sub_100064464();
        }
      }

      return 0LL;
    }

    uint64_t result = (char *)malloc(0x10uLL);
    if (result)
    {
      int v4 = *((_DWORD *)v1 + 1);
      *(_DWORD *)uint64_t result = 528;
      *((_DWORD *)result + 1) = v4;
      return result;
    }

    if (!dword_10008BA20) {
      return 0LL;
    }
    __int16 v6 = (os_log_s *)ne_log_obj(0LL);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    goto LABEL_15;
  }

  uint64_t result = (char *)malloc(0x1CuLL);
  if (result)
  {
    *(_DWORD *)uint64_t result = 7708;
    *(_OWORD *)(result + 8) = *(_OWORD *)(v1 + 4);
    return result;
  }

  if (dword_10008BA20)
  {
    __int16 v7 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
LABEL_15:
    }
      sub_1000644C4();
  }

  return 0LL;
}

void sub_10003FDF8(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 96) & 6) != 0 && *(_WORD *)(*(void *)(a1 + 88) + 4LL))
  {
    *(_DWORD *)(a1 + 96) |= 0x28u;
    if (*(_BYTE *)(a1 + 80) == 16) {
      sub_10004C198((uint64_t *)a1);
    }
  }

void sub_10003FEC0(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 88) || (int v4 = calloc(1uLL, 0x14uLL), (*(void *)(a1 + 88) = v4) != 0LL))
  {
    int v5 = sub_10004E580(a1);
    if (v5) {
      int v6 = v5;
    }
    else {
      int v6 = a2;
    }
    __int16 v7 = *(int **)(a1 + 88);
  }

  else if (dword_10008BA20)
  {
    __int16 v8 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1000644F0();
    }
  }

BOOL sub_10003FF64()
{
  return sub_100039080((uint64_t (*)(uint64_t, uint64_t))sub_10003FF8C, 0LL) != 0;
}

uint64_t sub_10003FF8C(uint64_t result)
{
  if (!*(_DWORD *)(result + 176)) {
    return 0LL;
  }
  return result;
}

void *sub_10003FF9C(void *a1, _OWORD *a2)
{
  if (!a2) {
    return 0LL;
  }
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  unint64_t v4 = (unint64_t)sub_10003F2A0(15LL);
  *(void *)a2 = v4;
  int v5 = sub_10003F2A0(14LL);
  *((void *)a2 + (v4 != 0)) = v5;
  if (v4) {
    int v6 = 2;
  }
  else {
    int v6 = 1;
  }
  if (v5) {
    LODWORD(v4) = v6;
  }
  else {
    LODWORD(v4) = v4 != 0;
  }
  __int16 v7 = sub_10003F2A0(13LL);
  *((void *)a2 + v4) = v7;
  if (v7) {
    LODWORD(v4) = v4 + 1;
  }
  __int16 v8 = sub_10003F2A0(12LL);
  *((void *)a2 + v4) = v8;
  if (v8) {
    LODWORD(v4) = v4 + 1;
  }
  int v9 = sub_10003F2A0(11LL);
  *((void *)a2 + v4) = v9;
  if (v9) {
    LODWORD(v4) = v4 + 1;
  }
  size_t v10 = sub_10003F2A0(10LL);
  *((void *)a2 + v4) = v10;
  if (v10) {
    LODWORD(v4) = v4 + 1;
  }
  int v11 = sub_10003F2A0(9LL);
  *((void *)a2 + v4) = v11;
  if (v11) {
    LODWORD(v4) = v4 + 1;
  }
  uint64_t v12 = sub_10003F2A0(8LL);
  *((void *)a2 + v4) = v12;
  if (v12) {
    LODWORD(v4) = v4 + 1;
  }
  int v13 = sub_10003F2A0(6LL);
  *((void *)a2 + v4) = v13;
  if (v13) {
    LODWORD(v4) = v4 + 1;
  }
  uint64_t v14 = sub_10003F2A0(7LL);
  *((void *)a2 + v4) = v14;
  if (v14) {
    unint64_t v4 = (v4 + 1);
  }
  else {
    unint64_t v4 = v4;
  }
  if ((_DWORD)v4)
  {
    for (unint64_t i = 0LL; i < v4; ++i)
      a1 = sub_100026E18(a1, *((void *)a2 + i), 13);
  }

  return a1;
}

uint64_t sub_1000400E0(int a1, int a2, unsigned int a3)
{
  if (a1 == 14)
  {
    int v3 = 2;
    return sub_100040118(v3, a2, a3);
  }

  if (a1 == 15)
  {
    int v3 = 3;
    return sub_100040118(v3, a2, a3);
  }

  __ipsec_errcode = 2;
  return 0xFFFFFFFFLL;
}

uint64_t sub_100040118(int a1, int a2, unsigned int a3)
{
  unint64_t v4 = sub_1000401A0(a1, a2);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = *((unsigned __int16 *)v4 + 1);
  unsigned int v6 = *((unsigned __int16 *)v4 + 2);
  if (v5 <= a3 && v6 >= a3)
  {
    int v9 = 0;
    uint64_t result = 0LL;
  }

  else
  {
    fprintf(__stderrp, "%d %d %d\n", a3, v5, v6);
    uint64_t result = 0xFFFFFFFFLL;
    int v9 = 14;
  }

  __ipsec_errcode = v9;
  return result;
}

unsigned __int8 *sub_1000401A0(int a1, int a2)
{
  uint64_t v2 = 0LL;
  while (dword_10006A3E4[v2] != a1)
  {
    if (++v2 == 3) {
      goto LABEL_6;
    }
  }

  if (v2 == 0xFFFFFFFFLL)
  {
LABEL_6:
    int v3 = 2;
LABEL_7:
    uint64_t result = 0LL;
    __ipsec_errcode = v3;
    return result;
  }

  unsigned int v5 = (unsigned __int16 *)qword_10008B200[v2];
  if (!v5)
  {
    int v3 = 22;
    goto LABEL_7;
  }

  unsigned int v6 = *v5;
  if (v6 < 0x10)
  {
LABEL_14:
    int v3 = 1;
    goto LABEL_7;
  }

  uint64_t result = (unsigned __int8 *)(v5 + 4);
  int v7 = v6 + 8;
  while (*result != a2)
  {
    result += 8;
    v7 -= 8;
    if (v7 <= 23) {
      goto LABEL_14;
    }
  }

  return result;
}

uint64_t sub_10004023C(int a1, int a2, void *a3)
{
  if (a3)
  {
    int v5 = 2;
    if (a1 != 14)
    {
      if (a1 != 15)
      {
        uint64_t v8 = 0xFFFFFFFFLL;
        goto LABEL_9;
      }

      int v5 = 3;
    }

    unsigned int v6 = sub_1000401A0(v5, a2);
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
    int v7 = v6;
    int v5 = 0;
    uint64_t v8 = 0LL;
    *a3 = *(void *)v7;
  }

  else
  {
    uint64_t v8 = 0xFFFFFFFFLL;
    int v5 = 2;
  }

uint64_t sub_1000402C0(unsigned int a1, int a2)
{
  __ipsec_errcode = 0;
  else {
    int v2 = 100;
  }
  switch(a1)
  {
    case 0u:
      uint64_t result = 0LL;
      dword_1000884D0 = v2;
      break;
    case 1u:
      uint64_t result = 0LL;
      dword_1000884D4 = v2;
      break;
    case 2u:
      uint64_t result = 0LL;
      dword_1000884D8 = v2;
      break;
    case 3u:
      uint64_t result = 0LL;
      dword_1000884DC = v2;
      break;
    default:
      *(_DWORD *)a1 = 2;
      uint64_t result = 1LL;
      break;
  }

  return result;
}

uint64_t sub_100040350(int a1)
{
  switch(a1)
  {
    case 0:
      uint64_t result = dword_1000884D0;
      break;
    case 1:
      uint64_t result = dword_1000884D4;
      break;
    case 2:
      uint64_t result = dword_1000884D8;
      break;
    case 3:
      uint64_t result = dword_1000884DC;
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }

  return result;
}

uint64_t sub_1000403AC( int a1, char a2, char a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, char a14)
{
  if (!a4 || !a5)
  {
    int v24 = 2;
    goto LABEL_38;
  }

  int v16 = a4[1];
  if (v16 != a5[1])
  {
    int v24 = 24;
    goto LABEL_38;
  }

  if (a6 > a7 || a6 - 1 <= 0xFE)
  {
    int v24 = 18;
    goto LABEL_38;
  }

  if (v16 != 2)
  {
    if (v16 == 30)
    {
      char v23 = 0x80;
      goto LABEL_13;
    }

    int v24 = 15;
LABEL_38:
    __ipsec_errcode = v24;
    return 0xFFFFFFFFLL;
  }

  char v23 = 32;
LABEL_13:
  char v41 = v23;
  if (a9) {
    int v25 = 82;
  }
  else {
    int v25 = 50;
  }
  int v26 = v25 + ((*a4 - 1) | 7) + ((*a5 - 1) | 7);
  BOOL v27 = a6 < 0x100 || a7 == -1;
  char v28 = v27;
  char v40 = v28;
  if (!v27) {
    v26 += 16;
  }
  uint64_t v29 = v26;
  uint64_t v30 = calloc(1uLL, v26);
  if (!v30)
  {
    __int16 v38 = __error();
    socklen_t v39 = strerror(*v38);
    __ipsec_set_strerror(v39);
    return 0xFFFFFFFFLL;
  }

  uint64_t v31 = v30;
  pid_t v32 = getpid();
  *uint64_t v31 = 0LL;
  v31[1] = 0LL;
  *(_WORD *)uint64_t v31 = 258;
  *((_BYTE *)v31 + 2) = 0;
  *((_BYTE *)v31 + 3) = a2;
  *((_DWORD *)v31 + 1) = (unsigned __int16)(v29 >> 3);
  *((_DWORD *)v31 + 2) = a13;
  *((_DWORD *)v31 + 3) = v32;
  unint64_t v33 = (unint64_t)v31 + v29;
  v31[2] = 0LL;
  v31[3] = 0LL;
  *((_DWORD *)v31 + 4) = 1245186;
  *((_BYTE *)v31 + memset(v27, 32, 20) = a3;
  *((_DWORD *)v31 + 7) = a8;
  *((_BYTE *)v31 + 21) = a14;
  *((_WORD *)v31 + 11) |= 1u;
  ssize_t v34 = sub_1000406B4((_WORD *)v31 + 16, (unint64_t)v31 + v29, 5, a4, v41, 255);
  if (!v34) {
    goto LABEL_36;
  }
  int v35 = sub_1000406B4(v34, (unint64_t)v31 + v29, 6, a5, v41, 255);
  if (!v35) {
    goto LABEL_36;
  }
  if (a9)
  {
    *(_OWORD *)int v35 = 0u;
    *((_OWORD *)v35 + 1) = 0u;
    *(void *)int v35 = 196612LL;
    *((void *)v35 + 1) = 0LL;
    *((void *)v35 + 2) = a11;
    *((void *)v35 + 3) = 0LL;
    v35 += 32;
  }

  if ((v40 & 1) != 0) {
    goto LABEL_35;
  }
  if ((unint64_t)(v35 + 16) > v33)
  {
LABEL_36:
    free(v31);
    return 0xFFFFFFFFLL;
  }

  *(_DWORD *)int v35 = 1048578;
  *((_DWORD *)v35 + 1) = a6;
  *((_DWORD *)v35 + 2) = a7;
  *((_DWORD *)v35 + 3) = 0;
  v35 += 16;
LABEL_35:
  ssize_t v36 = sub_100040810(a1, v31, v29);
  free(v31);
  if ((v36 & 0x80000000) == 0)
  {
    __ipsec_errcode = 0;
    return v36;
  }

  return 0xFFFFFFFFLL;
}

unint64_t sub_100040670(uint64_t a1, unint64_t a2, char a3, int a4, char a5)
{
  unint64_t result = a1 + 16;
  if (result > a2) {
    return 0LL;
  }
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)a1 = 1245186;
  *(_BYTE *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_BYTE *)(a1 + 5) = a5;
  *(_WORD *)(a1 + 6) = 1;
  return result;
}

char *sub_1000406B4(_WORD *a1, unint64_t a2, __int16 a3, unsigned __int8 *a4, char a5, char a6)
{
  int v6 = (*a4 - 1) | 7;
  uint64_t v7 = (v6 + 9);
  uint64_t v8 = (char *)a1 + v7;
  bzero(a1, (v6 + 9));
  *a1 = v7 >> 3;
  a1[1] = a3;
  *((_BYTE *)a1 + 4) = a6;
  *((_BYTE *)a1 + 5) = a5;
  a1[3] = 0;
  memcpy(a1 + 4, a4, *a4);
  return v8;
}

unint64_t sub_100040750( uint64_t a1, unint64_t a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  unint64_t result = a1 + 32;
  if (result > a2) {
    return 0LL;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = 4;
  *(_WORD *)(a1 + 2) = a3;
  if (a3 == 3)
  {
    *(_DWORD *)(a1 + 4) = a4;
    *(void *)(a1 + 8) = a5;
    *(void *)(a1 + 16) = a6;
    goto LABEL_8;
  }

  if (a3 == 4)
  {
    *(_DWORD *)(a1 + 4) = dword_1000884D0 * a4 / 0x64u;
    unint64_t v9 = dword_1000884D8 * a6 / 0x64uLL;
    *(void *)(a1 + 8) = dword_1000884D4 * a5 / 0x64uLL;
    *(void *)(a1 + 16) = v9;
    a7 = dword_1000884DC * a7 / 0x64;
LABEL_8:
    *(void *)(a1 + 24) = a7;
  }

  return result;
}

ssize_t sub_100040810(int a1, const void *a2, unsigned int a3)
{
  ssize_t result = send(a1, a2, a3, 0);
  if ((result & 0x80000000) != 0)
  {
    unint64_t v4 = __error();
    int v5 = strerror(*v4);
    __ipsec_set_strerror(v5);
    return 0xFFFFFFFFLL;
  }

  else
  {
    __ipsec_errcode = 0;
  }

  return result;
}

uint64_t sub_100040854( int a1, int a2, char a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6, int a7, char a8, char *a9, int a10, unsigned int a11, int a12, unsigned int a13, int a14, int a15, unsigned int a16, int a17, unsigned int a18, int a19, unsigned int a20, int a21, int a22, __int16 a23, __int16 a24, char a25)
{
  return sub_1000408C8( a1,  2,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a18,  a20,  a22,  a23,  SHIWORD(a22),  a25);
}

uint64_t sub_1000408C8( int a1, char a2, int a3, char a4, unsigned __int8 *a5, unsigned __int8 *a6, int a7, int a8, char a9, char *a10, int a11, unsigned int a12, int a13, unsigned int a14, int a15, int a16, unsigned int a17, unsigned int a18, unsigned int a19, int a20, __int16 a21, __int16 a22, char a23)
{
  __int16 v62 = 0LL;
  if (!a5 || !a6)
  {
    int v33 = 2;
    goto LABEL_37;
  }

  int v25 = a5[1];
  if (v25 != a6[1])
  {
    int v33 = 24;
    goto LABEL_37;
  }

  if (v25 != 2)
  {
    if (v25 == 30)
    {
      char v32 = 0x80;
      goto LABEL_10;
    }

    int v33 = 15;
LABEL_37:
    __ipsec_errcode = v33;
    return 0xFFFFFFFFLL;
  }

  char v32 = 32;
LABEL_10:
  if (a3 == 2)
  {
    if (!a11)
    {
      if (a13) {
        goto LABEL_14;
      }
      goto LABEL_34;
    }

LABEL_36:
    int v33 = 13;
    goto LABEL_37;
  }

  if (a3 == 9)
  {
    if (a11)
    {
      if (!a13) {
        goto LABEL_14;
      }
LABEL_34:
      int v33 = 20;
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (a3 != 3)
  {
    int v33 = 10;
    goto LABEL_37;
  }

  if (!a11) {
    goto LABEL_34;
  }
LABEL_14:
  char v60 = v32;
  if (getifaddrs(&v62) < 0) {
    return 0xFFFFFFFFLL;
  }
  ssize_t v34 = v62;
  if (!v62)
  {
LABEL_27:
    int v40 = 0;
    char v59 = 1;
    goto LABEL_43;
  }

  while (1)
  {
    ifa_addr = v34->ifa_addr;
    if (!ifa_addr) {
      goto LABEL_26;
    }
    int sa_family = ifa_addr->sa_family;
    if (sa_family != a5[1]) {
      goto LABEL_26;
    }
    if (sa_family == 30) {
      break;
    }
    if (sa_family != 2 || *(_DWORD *)&ifa_addr->sa_data[2] == *((_DWORD *)a5 + 1)) {
      goto LABEL_40;
    }
LABEL_26:
    ssize_t v34 = v34->ifa_next;
    if (!v34) {
      goto LABEL_27;
    }
  }

  uint64_t v38 = *(void *)&ifa_addr->sa_data[6];
  uint64_t v37 = *(void *)&ifa_addr[1].sa_len;
  if (v38 != *((void *)a5 + 1) || v37 != *((void *)a5 + 2)) {
    goto LABEL_26;
  }
LABEL_40:
  char v59 = 0;
  if (v34->ifa_name) {
    int v40 = 80;
  }
  else {
    int v40 = 0;
  }
LABEL_43:
  int v43 = ((a14 - 1) | 7) + 9;
  if (!a13) {
    int v43 = 0;
  }
  BOOL v58 = a3 != 9 && a11 != 0;
  int v44 = ((a12 - 1) | 7) + 147;
  if (!v58) {
    int v44 = 138;
  }
  size_t v45 = v44 + v43 + ((*a5 - 1) | 7) + ((*a6 - 1) | 7) + v40;
  socklen_t v61 = calloc(1uLL, v45);
  if (!v61)
  {
    socklen_t v47 = __error();
    int v48 = strerror(*v47);
    __ipsec_set_strerror(v48);
    uint64_t v41 = 0xFFFFFFFFLL;
    int v49 = 0LL;
LABEL_66:
    if (v62) {
      freeifaddrs(v62);
    }
    if (v49) {
      free(v49);
    }
    return v41;
  }

  pid_t v46 = getpid();
  if ((int)v45 > 15)
  {
    void *v61 = 0LL;
    v61[1] = 0LL;
    *(_BYTE *)socklen_t v61 = 2;
    *((_BYTE *)v61 + 1) = a2;
    *((_BYTE *)v61 + 2) = 0;
    *((_BYTE *)v61 + 3) = a3;
    int v49 = v61;
    *((_DWORD *)v61 + 1) = (unsigned __int16)(v45 >> 3);
    *((_DWORD *)v61 + 2) = a20;
    *((_DWORD *)v61 + 3) = v46;
    unint64_t v50 = (unint64_t)v61 + v45;
    v61[2] = 0LL;
    v61[3] = 0LL;
    uint8_t v61[4] = 0LL;
    *((_DWORD *)v61 + 4) = 65539;
    *((_DWORD *)v61 + 5) = a7;
    *((_BYTE *)v61 + 24) = a9;
    *((_BYTE *)v61 + 25) = 0;
    *((_BYTE *)v61 + 26) = a13;
    *((_BYTE *)v61 + 27) = a11;
    *((_DWORD *)v61 + 7) = a15;
    *((_WORD *)v61 + 16) = a21;
    int v51 = (_WORD *)sub_100040670((uint64_t)(v61 + 5), (unint64_t)v61 + v45, a4, a8, a23);
    if (!v51) {
      goto LABEL_65;
    }
    uint64_t v52 = sub_1000406B4(v51, (unint64_t)v61 + v45, 5, a5, v60, 255);
    if (!v52) {
      goto LABEL_65;
    }
    uint64_t v53 = (uint64_t)sub_1000406B4(v52, (unint64_t)v61 + v45, 6, a6, v60, 255);
    if (!v53) {
      goto LABEL_65;
    }
    if ((v59 & 1) != 0 || (ifa_name = v34->ifa_name) == 0LL)
    {
      int v55 = a13;
    }

    else
    {
      uint64_t v53 = sub_1000422D8(v53, (unint64_t)v61 + v45, 0LL, ifa_name, 0LL, 0);
      int v55 = a13;
      if (!v53)
      {
LABEL_65:
        uint64_t v41 = 0xFFFFFFFFLL;
        goto LABEL_66;
      }
    }

    if ((!v58 || (uint64_t v53 = (uint64_t)sub_100042384((_WORD *)v53, (unint64_t)v61 + v45, 9, a10, a12)) != 0)
      && (!v55 || (uint64_t v53 = (uint64_t)sub_100042384((_WORD *)v53, (unint64_t)v61 + v45, 8, &a10[a12], a14)) != 0)
      && v53 + 32 <= v50)
    {
      *(_OWORD *)uint64_t v53 = 0u;
      *(_OWORD *)(v53 + 16) = 0u;
      *(_DWORD *)uint64_t v53 = 196612;
      *(_DWORD *)(v53 + 4) = a16;
      *(void *)(v53 + 8) = a17;
      *(void *)(v53 + 16) = a18;
      *(void *)(v53 + 24) = a19;
      unint64_t v56 = sub_100040750(v53 + 32, (unint64_t)v61 + v45, 4, a16, a17, a18, a19);
      uint64_t v41 = 0xFFFFFFFFLL;
      if (v56)
      {
        if (v56 == v50)
        {
          ssize_t v57 = sub_100040810(a1, v61, v45);
          if ((v57 & 0x80000000) == 0)
          {
            uint64_t v41 = v57;
            __ipsec_errcode = 0;
          }
        }
      }

      goto LABEL_66;
    }

    goto LABEL_65;
  }

  free(v61);
  freeifaddrs(v62);
  return 0xFFFFFFFFLL;
}

    socklen_t v39 = 0;
    uint64_t v38 = 0LL;
    goto LABEL_37;
  }

  char v23 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(v17 + 108) = v23;
  if (!*(void *)(a1 + 208)) {
    goto LABEL_36;
  }
LABEL_34:
  uint64_t v37 = (const void **)sub_10002AA48(a1, v23, a2);
  if (!v37)
  {
    if (dword_10008BA20)
    {
      int v48 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
        sub_100059E58();
      }
    }

    goto LABEL_66;
  }

  uint64_t v38 = v37;
  socklen_t v39 = *(_DWORD *)v37 + 4;
LABEL_37:
  int v40 = v38 != 0LL;
  if ((a4 & 4) != 0) {
    int v40 = 4 * (v38 != 0LL);
  }
  *(_BYTE *)(v17 + 105) = v40;
  sub_10004B5C4(a1, (void *)v17);
  uint64_t v41 = v39 + *(_DWORD *)a2 + 28;
  uint64_t v42 = sub_10003F4BC(v41);
  *(void *)(v17 + 80) = v42;
  if (!v42)
  {
    if (dword_10008BA20)
    {
      socklen_t v47 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
        sub_10005A784();
      }
    }

    goto LABEL_83;
  }

  int v43 = v42[1];
  *(void *)int v43 = *(void *)a1;
  *(void *)(v43 + 8) = *(void *)(a1 + 8);
  if (v38) {
    int v44 = 8;
  }
  else {
    int v44 = a3;
  }
  *(_BYTE *)(v43 + 16) = v44;
  *(_BYTE *)(v43 + 17) = *(_BYTE *)(a1 + 80);
  *(_BYTE *)(v43 + 18) = 6;
  *(_BYTE *)(v43 + 19) = *(_BYTE *)(v17 + 105);
  *(_DWORD *)(v43 + memset(v27, 32, 20) = *(_DWORD *)(v17 + 108);
  *(_DWORD *)(v43 + 24) = bswap32(v41);
  if (v38)
  {
    *(_BYTE *)(v43 + 28) = a3;
    size_t v45 = (size_t)*v38;
    *(_WORD *)(v43 + 30) = bswap32(*v38 + 4) >> 16;
    memcpy((void *)(v43 + 32), v38[1], v45);
    pid_t v46 = (char *)*v38 + v43 + 32;
  }

  else
  {
    pid_t v46 = (char *)(v43 + 28);
  }

  int v49 = memcpy(v46, *(const void **)(a2 + 8), *(void *)a2);
  if (dword_10008BA20)
  {
    unint64_t v50 = (os_log_s *)ne_log_obj(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v68) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "MODE_CFG packet to send\n",  (uint8_t *)&v68,  2u);
    }
  }

  if ((*(_BYTE *)(v43 + 19) & 1) != 0)
  {
    int v51 = sub_10002EA40( a1,  *(void *)(v17 + 80),  *(void *)(*(void *)(v15 + 1176) + 8LL),  **(void **)(v15 + 1176));
    uint64_t v52 = *(void **)(v17 + 80);
    if (v52)
    {
      sub_10003F5BC(v52);
      *(void *)(v17 + 80) = 0LL;
    }

    if (!v51)
    {
      if (dword_10008BA20)
      {
        char v60 = (os_log_s *)ne_log_obj(v52);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
          sub_10005A7B0();
        }
      }

      goto LABEL_83;
    }

    *(void *)(v17 + 80) = v51;
  }

  if (a6 >= 1)
  {
    *(_DWORD *)(v17 + 72) = a6;
    uint64_t v53 = sub_1000250E4(v17);
    if ((v53 & 0x80000000) == 0)
    {
      int v25 = 0LL;
      goto LABEL_85;
    }

    if (dword_10008BA20)
    {
      char v59 = (os_log_s *)ne_log_obj(v53);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
        sub_100064AE8();
      }
    }

    goto LABEL_81;
  }

  int v55 = sub_100024890(*(void *)(v17 + 256), *(size_t **)(v17 + 80));
  if ((v55 & 0x80000000) == 0)
  {
    if (a7)
    {
      unint64_t v56 = *(void **)(v17 + 80);
      ssize_t v57 = *(void *)(v17 + 256);
      if (*(_DWORD *)(v57 + 100) && *v56 > 0x500uLL) {
        BOOL v58 = 0LL;
      }
      else {
        BOOL v58 = ((unint64_t)*(unsigned int *)(v57 + 96) >> 3) & 4;
      }
      int v55 = sub_10000A4F4( *(unsigned __int8 **)(a1 + 48),  *(unsigned __int8 **)(a1 + 56),  (uint64_t)v56,  a7,  v58,  (*(_DWORD *)(a1 + 96) >> 5) & 1);
      uint64_t v63 = dword_10008BA20;
      if ((_DWORD)v55 != -1 || !dword_10008BA20) {
        goto LABEL_93;
      }
      uint64_t v64 = (os_log_s *)ne_log_obj(v55);
      int v55 = os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v55) {
        sub_10005960C();
      }
    }

    uint64_t v63 = dword_10008BA20;
LABEL_93:
    if (v63)
    {
      uint64_t v65 = (os_log_s *)ne_log_obj(v55);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        int v66 = sub_10003DE70(a3);
        __int128 v68 = 136315138;
        __int128 v69 = v66;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "sendto mode config %s.\n",  (uint8_t *)&v68,  0xCu);
      }
    }

    __int128 v67 = *(void **)(v17 + 80);
    if (v67)
    {
      sub_10003F5BC(v67);
      int v25 = 0LL;
      *(void *)(v17 + 80) = 0LL;
    }

    else
    {
      int v25 = 0LL;
    }

    goto LABEL_84;
  }

  if (dword_10008BA20)
  {
    socklen_t v61 = (os_log_s *)ne_log_obj(v55);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
      sub_100058CE4();
    }
  }

uint64_t sub_100040D5C( int a1, int a2, char a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6, int a7, char a8, char *a9, int a10, unsigned int a11, int a12, unsigned int a13, int a14, int a15, unsigned int a16, int a17, unsigned int a18, int a19, unsigned int a20, int a21, int a22, __int16 a23, __int16 a24, char a25)
{
  return sub_1000408C8( a1,  3,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a18,  a20,  a22,  a23,  SHIWORD(a22),  a25);
}

uint64_t sub_100040DD0(int a1, char a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6)
{
  return sub_100040DDC(a1, 4, a2, a4, a5, a6);
}

uint64_t sub_100040DDC(int a1, char a2, char a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6)
{
  if (!a4 || !a5)
  {
    int v14 = 2;
    goto LABEL_20;
  }

  int v8 = a4[1];
  if (v8 != a5[1])
  {
    int v14 = 24;
    goto LABEL_20;
  }

  if (v8 != 2)
  {
    if (v8 == 30)
    {
      char v13 = 0x80;
      goto LABEL_10;
    }

    int v14 = 15;
LABEL_20:
    __ipsec_errcode = v14;
    return 0xFFFFFFFFLL;
  }

  char v13 = 32;
LABEL_10:
  uint64_t v15 = ((*a5 - 1LL) | 7) + ((*a4 - 1LL) | 7);
  uint64_t v16 = v15 + 58;
  uint64_t v17 = calloc(1uLL, v15 + 58);
  if (v17)
  {
    uint64_t v18 = v17;
    pid_t v19 = getpid();
    *uint64_t v18 = 0LL;
    v18[1] = 0LL;
    *(_BYTE *)uint64_t v18 = 2;
    *((_BYTE *)v18 + 1) = a2;
    *((_BYTE *)v18 + 2) = 0;
    *((_BYTE *)v18 + 3) = a3;
    *((_DWORD *)v18 + 1) = (unsigned __int16)(v16 >> 3);
    *((_DWORD *)v18 + 2) = 0;
    *((_DWORD *)v18 + 3) = v19;
    v18[2] = 0LL;
    v18[3] = 0LL;
    v18[4] = 0LL;
    *((_DWORD *)v18 + 4) = 65539;
    *((_DWORD *)v18 + 5) = a6;
    v18[3] = 0LL;
    *((_WORD *)v18 + 16) = 0;
    int v20 = sub_1000406B4((_WORD *)v18 + 20, (unint64_t)v18 + v16, 5, a4, v13, 255);
    if (!v20) {
      goto LABEL_18;
    }
    __int16 v21 = sub_1000406B4(v20, (unint64_t)v18 + v16, 6, a5, v13, 255);
    if (v21 && v21 == (char *)v18 + v16)
    {
      ssize_t v23 = sub_100040810(a1, v18, v16);
      free(v18);
      if ((v23 & 0x80000000) == 0)
      {
        __ipsec_errcode = 0;
        return v23;
      }
    }

    else
    {
LABEL_18:
      free(v18);
    }
  }

  else
  {
    int v25 = __error();
    int v26 = strerror(*v25);
    __ipsec_set_strerror(v26);
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_100040FC0(int a1, char a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (!a4 || !a5)
  {
    int v11 = 2;
    goto LABEL_19;
  }

  int v7 = a4[1];
  if (v7 != a5[1])
  {
    int v11 = 24;
    goto LABEL_19;
  }

  if (v7 != 2)
  {
    if (v7 == 30)
    {
      char v10 = 0x80;
      goto LABEL_10;
    }

    int v11 = 15;
LABEL_19:
    __ipsec_errcode = v11;
    return 0xFFFFFFFFLL;
  }

  char v10 = 32;
LABEL_10:
  uint64_t v12 = ((*a5 - 1LL) | 7) + ((*a4 - 1LL) | 7);
  uint64_t v13 = v12 + 34;
  int v14 = calloc(1uLL, v12 + 34);
  if (v14)
  {
    uint64_t v15 = v14;
    pid_t v16 = getpid();
    void *v15 = 0LL;
    v15[1] = 0LL;
    *(_WORD *)uint64_t v15 = 1026;
    *((_BYTE *)v15 + 2) = 0;
    *((_BYTE *)v15 + 3) = a2;
    *((_DWORD *)v15 + 1) = (unsigned __int16)(v13 >> 3);
    *((_DWORD *)v15 + 2) = 0;
    *((_DWORD *)v15 + 3) = v16;
    uint64_t v17 = sub_1000406B4((_WORD *)v15 + 8, (unint64_t)v15 + v13, 5, a4, v10, 255);
    if (!v17) {
      goto LABEL_17;
    }
    uint64_t v18 = sub_1000406B4(v17, (unint64_t)v15 + v13, 6, a5, v10, 255);
    if (v18 && v18 == (char *)v15 + v13)
    {
      ssize_t v20 = sub_100040810(a1, v15, v13);
      free(v15);
      if ((v20 & 0x80000000) == 0)
      {
        __ipsec_errcode = 0;
        return v20;
      }
    }

    else
    {
LABEL_17:
      free(v15);
    }
  }

  else
  {
    __int16 v22 = __error();
    ssize_t v23 = strerror(*v22);
    __ipsec_set_strerror(v23);
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10004116C(int a1, char a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6)
{
  return sub_100040DDC(a1, 5, a2, a4, a5, a6);
}

uint64_t sub_100041178(int a1, unsigned int a2)
{
  uint64_t v4 = 0LL;
  if (a2)
  {
    while (dword_10006A3E4[v4] != a2)
    {
      if (++v4 == 3) {
        goto LABEL_10;
      }
    }

    if (v4 == 0xFFFFFFFFLL)
    {
LABEL_10:
      __ipsec_errcode = 2;
      return 0xFFFFFFFFLL;
    }

    int v7 = (void *)qword_10008B200[v4];
    if (v7)
    {
      free(v7);
      qword_10008B200[v4] = 0LL;
    }
  }

  else
  {
    do
    {
      int v5 = *(void **)((char *)qword_10008B200 + v4);
      if (v5)
      {
        free(v5);
        *(uint64_t *)((char *)qword_10008B200 + v4) = 0LL;
      }

      v4 += 8LL;
    }

    while (v4 != 24);
  }

  return sub_100041248(a1, 7, a2);
}

uint64_t sub_100041248(int a1, int a2, unsigned int a3)
{
  char v3 = a3;
  char v4 = a2;
  if (a2 == 11)
  {
    if (a3 >= 2)
    {
LABEL_3:
      __ipsec_errcode = 10;
      return 0xFFFFFFFFLL;
    }
  }

  else if (a3 > 9 || ((1 << a3) & 0x20D) == 0)
  {
    goto LABEL_3;
  }

  int v6 = (char *)calloc(1uLL, 0x10uLL);
  if (!v6)
  {
    char v10 = __error();
    int v11 = strerror(*v10);
    __ipsec_set_strerror(v11);
    return 0xFFFFFFFFLL;
  }

  int v7 = v6;
  pid_t v8 = getpid();
  char *v7 = 2;
  v7[1] = v4;
  v7[2] = 0;
  v7[3] = v3;
  *(void *)(v7 + 4) = 2LL;
  *((_DWORD *)v7 + 3) = v8;
  ssize_t v9 = sub_100040810(a1, v7, 0x10u);
  free(v7);
  if ((v9 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  __ipsec_errcode = 0;
  return v9;
}

uint64_t sub_100041330(int a1)
{
  pid_t v2 = getpid();
  char v3 = sub_1000413E0(a1);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  char v4 = v3;
  while (*((_BYTE *)v4 + 1) != 7 || *((_DWORD *)v4 + 3) != v2)
  {
    free(v4);
    char v4 = sub_1000413E0(a1);
    if (!v4) {
      return 0xFFFFFFFFLL;
    }
  }

  unsigned __int16 v5 = 8 * v4[2];
  v4[2] = v5;
  int v6 = sub_10004152C((uint64_t)v4, v5 & 0xFFF8);
  free(v4);
  if (v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0LL;
  __ipsec_errcode = 0;
  return result;
}

unsigned __int16 *sub_1000413E0(int a1)
{
  while (1)
  {
    unint64_t v2 = recv(a1, v13, 0x10uLL, 2);
    if ((v2 & 0x8000000000000000LL) == 0) {
      break;
    }
    if (*__error() != 4)
    {
      char v3 = __error();
      char v4 = strerror(*v3);
      __ipsec_set_strerror(v4);
      return 0LL;
    }
  }

  if (v2 <= 0xF)
  {
    recv(a1, v13, 0x10uLL, 0);
    unsigned __int16 v5 = 0LL;
    __ipsec_errcode = 30;
    return v5;
  }

  size_t v6 = 8LL * v13[2];
  unsigned __int16 v5 = (unsigned __int16 *)calloc(1uLL, v6);
  if (!v5)
  {
    char v10 = __error();
    int v11 = strerror(*v10);
    __ipsec_set_strerror(v11);
    return v5;
  }

  while (1)
  {
    ssize_t v7 = recv(a1, v5, v6, 0);
    if ((v7 & 0x8000000000000000LL) == 0) {
      break;
    }
    if (*__error() != 4)
    {
      pid_t v8 = __error();
      ssize_t v9 = strerror(*v8);
      __ipsec_set_strerror(v9);
      goto LABEL_15;
    }
  }

  if (v7 == v6 && v6 == 8LL * v5[2])
  {
    __ipsec_errcode = 0;
    return v5;
  }

  __ipsec_errcode = 26;
LABEL_15:
  free(v5);
  return 0LL;
}

uint64_t sub_10004152C(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int16 *)(a1 + 4) == a2)
  {
    unint64_t v2 = a1 + a2;
    char v3 = (unsigned __int16 *)(a1 + 16);
    if (a2 >= 0x18)
    {
      do
      {
        uint64_t v6 = *v3;
        int v8 = v3[1];
        if ((v8 & 0xFFFE) != 0xE) {
          goto LABEL_4;
        }
        unsigned __int16 v9 = 8 * v6;
        *char v3 = v9;
        if (v8 == 14)
        {
          uint64_t v10 = 0LL;
        }

        else
        {
          if (v8 != 15) {
            goto LABEL_4;
          }
          uint64_t v10 = 1LL;
        }

        int v11 = (void *)qword_10008B200[v10];
        if (v11)
        {
          free(v11);
          unsigned __int16 v9 = *v3;
        }

        size_t v12 = v9;
        uint64_t v13 = malloc(v9);
        qword_10008B200[v10] = (uint64_t)v13;
        if (!v13)
        {
          int v14 = __error();
          uint64_t v15 = strerror(*v14);
          __ipsec_set_strerror(v15);
          return 0xFFFFFFFFLL;
        }

        memcpy(v13, v3, v12);
        char v3 = (unsigned __int16 *)((char *)v3 + v12);
      }

      while ((unint64_t)v3 < v2 && v2 >= (unint64_t)(v3 + 4));
    }

    if (v3 == (unsigned __int16 *)v2)
    {
      uint64_t result = 0LL;
      __ipsec_errcode = 0;
      return result;
    }

LABEL_4:
    int v4 = 10;
  }

  else
  {
    int v4 = 2;
  }

  __ipsec_errcode = v4;
  return 0xFFFFFFFFLL;
}

uint64_t sub_100041660(int a1, unsigned int a2)
{
  return sub_100041248(a1, 9, a2);
}

uint64_t sub_10004166C(int a1, unsigned int a2)
{
  return sub_100041248(a1, 10, a2);
}

uint64_t sub_100041678(int a1, int a2)
{
  return sub_100041248(a1, 11, a2 != 0);
}

ssize_t sub_100041688( int a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, char a6, void *__src, int a8, int a9)
{
  return sub_1000416EC(a1, 14, a2, 0LL, a3, a4, 0LL, a5, a6, 0LL, 0LL, __src, a8, a9, 0LL, 0LL, 0LL, 0);
}

ssize_t sub_1000416EC( int a1, char a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned int a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned int a8, char a9, uint64_t a10, uint64_t a11, void *__src, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
  if (!a3 || !a6)
  {
    int v28 = 2;
LABEL_22:
    __ipsec_errcode = v28;
    return 0xFFFFFFFFLL;
  }

  int v20 = a3[1];
  if (v20 != a6[1])
  {
    int v28 = 24;
    goto LABEL_22;
  }

  char v21 = a8;
  char v23 = a5;
  if (v20 == 2)
  {
    unsigned int v27 = 32;
    goto LABEL_10;
  }

  if (v20 != 30)
  {
    int v28 = 15;
    goto LABEL_22;
  }

  unsigned int v27 = 128;
LABEL_10:
  if (v27 < a5 || v27 < a8)
  {
    int v28 = 16;
    goto LABEL_22;
  }

  if (a15 | a16 | a17) {
    BOOL v29 = 0;
  }
  else {
    BOOL v29 = a18 == 0;
  }
  int v30 = !v29;
  if (a4) {
    int v31 = ((*a4 - 1) | 7) + 9;
  }
  else {
    int v31 = 0;
  }
  if (a7) {
    int v34 = ((*a7 - 1) | 7) + 9;
  }
  else {
    int v34 = 0;
  }
  int v56 = v30;
  if (v30) {
    int v35 = 80;
  }
  else {
    int v35 = 0;
  }
  size_t v36 = a13 + ((2 * *a3 - 2) | 0xE) + v31 + v34 + v35 + 66;
  uint64_t v37 = (char *)calloc(1uLL, v36);
  if (!v37)
  {
    int v49 = __error();
    unint64_t v50 = strerror(*v49);
    __ipsec_set_strerror(v50);
    return 0xFFFFFFFFLL;
  }

  uint64_t v38 = v37;
  pid_t v39 = getpid();
  unsigned int v40 = v36;
  unint64_t v41 = (unint64_t)&v38[v36];
  *(void *)uint64_t v38 = 0LL;
  *((void *)v38 + 1) = 0LL;
  *uint64_t v38 = 2;
  v38[1] = a2;
  *((_WORD *)v38 + 1) = 0;
  unsigned int v55 = v40;
  *((_DWORD *)v38 + 1) = (unsigned __int16)(v40 >> 3);
  *((_DWORD *)v38 + 2) = a14;
  *((_DWORD *)v38 + 3) = v39;
  uint64_t v42 = v38 + 16;
  unint64_t v43 = v41;
  if (a4)
  {
    char v44 = a9;
    uint64_t v42 = sub_1000406B4(v42, v41, 23, a3, v23, a9);
    if (!v42) {
      goto LABEL_49;
    }
    unint64_t v43 = v41;
    __int16 v45 = 24;
    pid_t v46 = a4;
    char v47 = v23;
    char v48 = a9;
  }

  else
  {
    __int16 v45 = 5;
    pid_t v46 = a3;
    char v47 = v23;
    char v44 = a9;
    char v48 = a9;
  }

  int v51 = sub_1000406B4(v42, v43, v45, v46, v47, v48);
  if (!v51) {
    goto LABEL_49;
  }
  if (a7)
  {
    uint64_t v52 = sub_1000406B4(v51, v41, 25, a6, v21, v44);
    unsigned int v53 = v55;
    if (!v52) {
      goto LABEL_49;
    }
    uint64_t v54 = (uint64_t)sub_1000406B4(v52, v41, 26, a7, v21, v44);
    if (!v54) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }

  uint64_t v54 = (uint64_t)sub_1000406B4(v51, v41, 6, a6, v21, v44);
  unsigned int v53 = v55;
  if (!v54)
  {
LABEL_49:
    free(v38);
    return 0xFFFFFFFFLL;
  }

ssize_t sub_100041A54( int a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned int a7, char a8, void *__src, int a10, int a11, __int128 a12, uint64_t a13, int a14)
{
  return sub_1000416EC( a1,  14,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  0LL,  0LL,  __src,  a10,  a11,  a12,  *((uint64_t *)&a12 + 1),  a13,  a14);
}

ssize_t sub_100041AC0( int a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8, void *a9, int a10, int a11)
{
  return sub_1000416EC(a1, 14, a2, 0LL, a3, a4, 0LL, a5, a6, a7, a8, a9, a10, a11, 0LL, 0LL, 0LL, 0);
}

ssize_t sub_100041B24( int a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, char a6, void *__src, int a8, int a9)
{
  return sub_1000416EC(a1, 13, a2, 0LL, a3, a4, 0LL, a5, a6, 0LL, 0LL, __src, a8, a9, 0LL, 0LL, 0LL, 0);
}

ssize_t sub_100041B88( int a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8, void *a9, int a10, int a11)
{
  return sub_1000416EC(a1, 13, a2, 0LL, a3, a4, 0LL, a5, a6, a7, a8, a9, a10, a11, 0LL, 0LL, 0LL, 0);
}

ssize_t sub_100041BEC( int a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, char a6, void *__src, int a8, int a9)
{
  if (a8 == 16) {
    return sub_1000416EC(a1, 15, a2, 0LL, a3, a4, 0LL, a5, a6, 0LL, 0LL, __src, 16, a9, 0LL, 0LL, 0LL, 0);
  }
  __ipsec_errcode = 2;
  return 0xFFFFFFFFLL;
}

uint64_t sub_100041C74(int a1, int a2)
{
  return sub_100041C80(a1, 22, a2);
}

uint64_t sub_100041C80(int a1, char a2, int a3)
{
  uint64_t v6 = (char *)calloc(1uLL, 0x20uLL);
  if (!v6)
  {
    uint64_t v10 = __error();
    int v11 = strerror(*v10);
    __ipsec_set_strerror(v11);
    return 0xFFFFFFFFLL;
  }

  ssize_t v7 = v6;
  pid_t v8 = getpid();
  char *v7 = 2;
  v7[1] = a2;
  *((_WORD *)v7 + 1) = 0;
  *(void *)(v7 + 4) = 4LL;
  *((_DWORD *)v7 + 3) = v8;
  *((void *)v7 + 2) = 1179650LL;
  *((_DWORD *)v7 + 6) = a3;
  *((_DWORD *)v7 + 7) = 0;
  ssize_t v9 = sub_100040810(a1, v7, 0x20u);
  free(v7);
  if ((v9 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  __ipsec_errcode = 0;
  return v9;
}

uint64_t sub_100041D38(int a1, int a2)
{
  return sub_100041C80(a1, 24, a2);
}

uint64_t sub_100041D44(int a1, int a2)
{
  return sub_100041C80(a1, 25, a2);
}

uint64_t sub_100041D50(int a1, int a2)
{
  return sub_100041C80(a1, 16, a2);
}

ssize_t sub_100041D5C( int a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, char a6, void *__src, int a8, int a9)
{
  if (a8 == 16) {
    return sub_1000416EC(a1, 20, a2, 0LL, a3, a4, 0LL, a5, a6, 0LL, 0LL, __src, 16, a9, 0LL, 0LL, 0LL, 0);
  }
  __ipsec_errcode = 2;
  return 0xFFFFFFFFLL;
}

uint64_t sub_100041DE4(int a1)
{
  return sub_100041248(a1, 19, 0);
}

uint64_t sub_100041DF0(int a1)
{
  return sub_100041248(a1, 18, 0);
}

uint64_t sub_100041DFC()
{
  size_t v7 = 8LL;
  uint64_t v6 = 2506752LL;
  uint64_t v0 = socket(29, 3, 2);
  if ((v0 & 0x80000000) != 0)
  {
    char v3 = __error();
    int v4 = strerror(*v3);
    __ipsec_set_strerror(v4);
    return 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v1 = v0;
    if (sysctlbyname("kern.ipc.maxsockbuf", v8, &v7, &v6, 8uLL)) {
      int v2 = 233016;
    }
    else {
      int v2 = 2228224;
    }
    int v9 = v2;
    setsockopt(v1, 0xFFFF, 4097, &v9, 4u);
    setsockopt(v1, 0xFFFF, 4098, &v9, 4u);
    if (v9 == 2228224) {
      sysctlbyname("kern.ipc.maxsockbuf", 0LL, 0LL, v8, v7);
    }
    __ipsec_errcode = 0;
  }

  return v1;
}

uint64_t sub_100041EFC(int a1)
{
  uint64_t result = close(a1);
  __ipsec_errcode = 0;
  return result;
}

uint64_t sub_100041F1C(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  int v4 = 2;
  if (a1 && a2)
  {
    *(void *)(a2 + 232) = 0LL;
    *(_OWORD *)(a2 + 216) = 0u;
    *(_OWORD *)(a2 + 200) = 0u;
    *(_OWORD *)(a2 + 184) = 0u;
    *(_OWORD *)(a2 + 168) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 1memset(v27, 32, 20) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
    unint64_t v5 = *(unsigned __int16 *)(a1 + 4);
    unint64_t v6 = a1 + 8 * v5;
    *(void *)a2 = a1;
    size_t v7 = (unsigned __int16 *)(a1 + 16);
    if (v5 >= 3)
    {
      while (1)
      {
        pid_t v8 = &v7[4 * *v7];
        uint64_t v10 = v7[1];
        if (*(void *)(a2 + 8 * v10))
        {
          uint64_t result = 0xFFFFFFFFLL;
          int v4 = 12;
          goto LABEL_11;
        }

        int v4 = 12;
        *(void *)(a2 + 8 * v10) = v7;
        if ((unint64_t)v8 < v6)
        {
          size_t v7 = v8;
        }

        goto LABEL_5;
      }
    }

    pid_t v8 = v7;
LABEL_5:
    else {
      int v4 = 3;
    }
    else {
      uint64_t result = 0xFFFFFFFFLL;
    }
  }

LABEL_11:
  __ipsec_errcode = v4;
  return result;
}

  uint64_t v18 = (_DWORD)a1 == 30;
  sub_100009C24(v18);
  sub_1000092FC(v18);
  sub_100038F90();
  sub_10003A55C();
  sub_10003B200();
  sub_1000287D8();
  int v20 = sub_100052558(v19);
  sub_1000287F0();
  return v20;
}

uint64_t sub_10004201C(uint64_t a1)
{
  if (a1 && (int v2 = *(_BYTE **)a1) != 0LL)
  {
    if (*v2 == 2)
    {
      unsigned int v3 = v2[1];
      if (v3 <= 0x1A)
      {
        int v6 = v2[3];
        uint64_t result = 0xFFFFFFFFLL;
        int v5 = 1;
        switch(v6)
        {
          case 0:
            char v7 = v3 - 1;
            unsigned int v8 = 191;
            goto LABEL_14;
          case 1:
            if (v3 == 11) {
              goto LABEL_17;
            }
            goto LABEL_24;
          case 2:
          case 3:
          case 9:
            char v7 = v3 - 14;
            if (v3 - 14 < 6)
            {
              unsigned int v8 = 55;
LABEL_14:
              if (((v8 >> v7) & 1) != 0) {
                goto LABEL_25;
              }
            }

uint64_t sub_10004214C(int a1, int a2, void *a3, unsigned int a4, int a5, const void *a6, int a7)
{
  ssize_t v7 = 0xFFFFFFFFLL;
  if (a3 && a6 && a7)
  {
    int v15 = 40 * a7;
    size_t v16 = 40 * a7 + 56;
    uint64_t v17 = calloc(1uLL, v16);
    if (v17)
    {
      uint64_t v18 = v17;
      pid_t v19 = getpid();
      *uint64_t v18 = 0LL;
      v18[1] = 0LL;
      *(_DWORD *)uint64_t v18 = 5890;
      *((_DWORD *)v18 + 1) = (unsigned __int16)(v16 >> 3);
      *((_DWORD *)v18 + 2) = a2;
      *((_DWORD *)v18 + 3) = v19;
      int v20 = (char *)(v18 + 5);
      v18[2] = 0LL;
      v18[3] = 0LL;
      v18[4] = 0LL;
      *((_DWORD *)v18 + 4) = 1310723;
      v18[3] = *a3;
      if (a4 >= 2) {
        v18[4] = a3[1];
      }
      uint64_t v21 = (v15 + 16);
      if (&v20[v21] <= (char *)v18 + v16)
      {
        bzero(v20, (v15 + 16));
        *((_WORD *)v18 + memset(v27, 32, 20) = v21 >> 3;
        *((_WORD *)v18 + 21) = 21;
        *((_DWORD *)v18 + 11) = a5;
        *((_DWORD *)v18 + 13) = a7;
        memmove(v18 + 7, a6, (40 * a7));
        ssize_t v7 = sub_100040810(a1, v18, v16);
        free(v18);
        if ((v7 & 0x80000000) == 0)
        {
          __ipsec_errcode = 0;
          return v7;
        }
      }

      else
      {
LABEL_11:
        free(v18);
      }
    }

    else
    {
      __int16 v22 = __error();
      char v23 = strerror(*v22);
      __ipsec_set_strerror(v23);
    }

    return 0xFFFFFFFFLL;
  }

  return v7;
}

uint64_t sub_1000422D8(uint64_t a1, unint64_t a2, char *__src, char *a4, char *a5, __int16 a6)
{
  uint64_t v6 = a1 + 80;
  if (a1 + 80 > a2) {
    return 0LL;
  }
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)a1 = 1441802;
  if (__src) {
    strncpy((char *)(a1 + 4), __src, 0x17uLL);
  }
  if (a4) {
    strncpy((char *)(a1 + 28), a4, 0x17uLL);
  }
  if (a5) {
    strncpy((char *)(a1 + 52), a5, 0x17uLL);
  }
  *(_WORD *)(a1 + 76) = a6;
  return v6;
}

char *sub_100042384(_WORD *a1, unint64_t a2, __int16 a3, const void *a4, unsigned int a5)
{
  int v5 = (a5 - 1) | 7;
  uint64_t v6 = (v5 + 9);
  ssize_t v7 = (char *)a1 + v6;
  bzero(a1, (v5 + 9));
  *a1 = v6 >> 3;
  a1[1] = a3;
  a1[2] = 8 * a5;
  a1[3] = 0;
  memcpy(a1 + 4, a4, a5);
  return v7;
}

void sub_100042410(uint64_t a1, void *a2)
{
  if (*a2 <= 0x1BuLL)
  {
    if (dword_10008BA20)
    {
      int v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_10006451C();
      }
    }

    return;
  }

  uint64_t v4 = a2[1];
  if ((*(_BYTE *)(v4 + 19) & 1) == 0)
  {
    if (dword_10008BA20)
    {
      int v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100064548();
      }
    }

    return;
  }

  uint64_t v7 = *(void *)(a1 + 408);
  unsigned int v8 = *(uint64_t **)(v7 + 1176);
  if (v8)
  {
    int v9 = *(_DWORD *)(v4 + 20);
    if (*(_DWORD *)(v7 + 1184) == v9) {
      goto LABEL_14;
    }
  }

  else
  {
    int v9 = *(_DWORD *)(v4 + 20);
  }

  unsigned int v8 = sub_10004290C(a1, v9);
  *(void *)(*(void *)(a1 + 408) + 1176LL) = v8;
LABEL_14:
  uint64_t v10 = (uint64_t)sub_10002E664(a1, a2, *v8, v8[1]);
  if (!v10)
  {
    if (dword_10008BA20)
    {
      int v20 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_100064574();
      }
    }

    return;
  }

  int v11 = (void *)v10;
  if (dword_10008BA20)
  {
    size_t v12 = (os_log_s *)ne_log_obj(v10);
    uint64_t v10 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "MODE_CFG packet\n", buf, 2u);
    }
  }

  uint64_t v13 = v11[1];
  signed int v14 = *(_DWORD *)v11 - 28;
  unsigned int v15 = *(unsigned __int8 *)(v13 + 16);
  if (v14 < 1 || v15 == 0)
  {
LABEL_23:
    uint64_t v17 = sub_100009448(a1, *(_DWORD *)(v13 + 20));
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(unsigned int *)(v17 + 68);
      if ((_DWORD)v19)
      {
        sub_10003AA44(v19);
        *(_DWORD *)(v18 + 68) = 0;
      }

      sub_10004AAC4((void *)v18);
    }

    goto LABEL_27;
  }

  uint64_t v21 = (unsigned __int8 *)(v13 + 28);
  while (1)
  {
    if (v14 <= 3)
    {
      if (!dword_10008BA20) {
        goto LABEL_27;
      }
      uint64_t v37 = (os_log_s *)ne_log_obj(v10);
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      *(_WORD *)uint8_t buf = 0;
      uint64_t v38 = "Short payload header\n";
      goto LABEL_60;
    }

    size_t v22 = v14;
    if (v14 < bswap32(*((unsigned __int16 *)v21 + 1)) >> 16)
    {
      if (!dword_10008BA20) {
        goto LABEL_27;
      }
      uint64_t v37 = (os_log_s *)ne_log_obj(v10);
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      *(_WORD *)uint8_t buf = 0;
      uint64_t v38 = "Short payload\n";
LABEL_60:
      pid_t v39 = v37;
      uint32_t v40 = 2;
      goto LABEL_61;
    }

    if (dword_10008BA20)
    {
      char v23 = (os_log_s *)ne_log_obj(v10);
      uint64_t v10 = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v10)
      {
        *(_DWORD *)uint8_t buf = 67109120;
        unsigned int v48 = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Seen payload %d\n", buf, 8u);
      }
    }

    if (v15 == 14)
    {
      uint64_t v10 = sub_100042994(a1, *(_DWORD *)(v13 + 20), (uint64_t)v21, (uint64_t)a2);
      goto LABEL_48;
    }

    if (v15 != 8)
    {
      if (dword_10008BA20)
      {
        int v33 = (os_log_s *)ne_log_obj(v10);
        uint64_t v10 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v10)
        {
          *(_DWORD *)uint8_t buf = 67109120;
          unsigned int v48 = v15;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Unexpected next payload %d\n", buf, 8u);
        }
      }

      goto LABEL_48;
    }

    uint64_t v24 = bswap32(*((unsigned __int16 *)v21 + 1)) >> 16;
    int v25 = (unsigned __int16 *)&v21[v24];
    unsigned int v26 = bswap32(*(unsigned __int16 *)&v21[v24 + 2]);
    size_t v27 = HIWORD(v26);
    if (v24 + v27 > v22)
    {
      if (!dword_10008BA20) {
        goto LABEL_27;
      }
      unint64_t v41 = (os_log_s *)ne_log_obj(v10);
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      unsigned int v42 = bswap32(v25[1]);
      *(_DWORD *)uint8_t buf = 67109376;
      unsigned int v48 = HIWORD(v42);
      __int16 v49 = 1024;
      int v50 = v27;
      uint64_t v38 = "Invalid Hash payload. len %d, overall-len %d\n";
      pid_t v39 = v41;
      uint32_t v40 = 14;
LABEL_61:
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v38, buf, v40);
      goto LABEL_27;
    }

    int v28 = sub_10003F4BC(HIWORD(v26));
    if (!v28)
    {
      if (dword_10008BA20)
      {
        unint64_t v43 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
          sub_100059860();
        }
      }

      goto LABEL_27;
    }

    BOOL v29 = v28;
    memcpy((void *)v28[1], v25, v27);
    uint64_t v30 = sub_10002AA48(a1, *(_DWORD *)(v13 + 20), (uint64_t)v29);
    if (!v30) {
      break;
    }
    uint64_t v31 = v30;
    uint64_t v32 = timingsafe_bcmp(v21 + 4, *(const void **)(v31 + 8), *(void *)v31);
    if ((_DWORD)v32)
    {
      if (dword_10008BA20)
      {
        pid_t v46 = (os_log_s *)ne_log_obj(v32);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          sub_1000645CC();
        }
      }

      sub_10003F5BC(v29);
      __int16 v45 = (void *)v31;
      goto LABEL_76;
    }

    sub_10003F5BC(v29);
    sub_10003F5BC((void *)v31);
LABEL_48:
    unsigned int v34 = bswap32(*((unsigned __int16 *)v21 + 1));
    uint64_t v35 = HIWORD(v34);
    signed int v14 = v22 - HIWORD(v34);
    unsigned int v15 = *v21;
    v21 += v35;
    if (v14 < 1 || v15 == 0) {
      goto LABEL_23;
    }
  }

  if (dword_10008BA20)
  {
    char v44 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
      sub_1000645A0();
    }
  }

  __int16 v45 = v29;
LABEL_76:
  sub_10003F5BC(v45);
LABEL_27:
  sub_10003F5BC(v11);
}

uint64_t *sub_10004290C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 408);
  if (v2)
  {
    int v5 = *(void **)(v2 + 1176);
    if (v5) {
      sub_10002E08C(v5);
    }
    uint64_t result = sub_10002E0FC(a1, a2);
    *(void *)(v2 + 1176) = result;
    *(_DWORD *)(v2 + 1184) = a2;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v7 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000645F8();
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100042994(BOOL a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  int v8 = *(unsigned __int8 *)(a3 + 4);
  if (dword_10008BA20)
  {
    int v9 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (a1)
    {
      int v12 = 136315138;
      uint64_t v13 = sub_10003DF58(v8);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Configuration exchange type %s\n",  (uint8_t *)&v12,  0xCu);
    }
  }

  switch(v8)
  {
    case 1:
      *(_DWORD *)(v7 + 84) = a2;
      uint64_t result = sub_100043140(v7, (unsigned __int16 *)a3, a4);
      break;
    case 2:
      uint64_t result = sub_100042B40(v7, (unsigned __int16 *)a3);
      break;
    case 3:
      *(_DWORD *)(v7 + 84) = a2;
      uint64_t result = sub_10004394C(v7, (unsigned __int16 *)a3, a4);
      break;
    case 4:
      sub_10002E08C(*(void **)(*(void *)(v7 + 408) + 1176LL));
      uint64_t result = 0LL;
      *(void *)(*(void *)(v7 + 408) + 1176LL) = 0LL;
      break;
    default:
      if (dword_10008BA20)
      {
        int v11 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 67109120;
          LODWORD(v13) = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Unepected configuration exchange type %d\n",  (uint8_t *)&v12,  8u);
        }
      }

      uint64_t result = 0xFFFFFFFFLL;
      break;
  }

  return result;
}

uint64_t sub_100042B40(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v2 = *(int **)(result + 408);
  int v3 = *v2;
  if ((*v2 & 0x8000) != 0) {
    return 0LL;
  }
  uint64_t v5 = result;
  uint64_t v6 = a2 + 1;
  unsigned int v7 = bswap32(a2[1]) >> 16;
  int v8 = a2 + 4;
  if (v7 < 9)
  {
LABEL_54:
    *uint64_t v2 = v3 | 0x8000;
    if (*(_DWORD *)(v5 + 24)
      || (*(_BYTE *)(v5 + 432) & 1) != 0 && (uint64_t v43 = *(void *)(v5 + 440)) != 0 && (*(_WORD *)(v43 + 264) & 0x400) != 0)
    {
      unsigned int v34 = (void *)*((void *)v2 + 149);
      if (v34) {
        sub_10003F5BC(v34);
      }
      uint64_t v35 = bswap32(*v6) >> 16;
      if (v35 <= 7)
      {
        if (dword_10008BA20)
        {
          size_t v36 = (os_log_s *)ne_log_obj(v34);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
            sub_1000646F4((uint64_t)v6, v36, v37, v38, v39, v40, v41, v42);
          }
        }

        return 0xFFFFFFFFLL;
      }

      size_t v44 = v35 - 8;
      __int16 v45 = sub_10003F4BC(v35 - 8);
      *(void *)(*(void *)(v5 + 408) + 1192LL) = v45;
      if (!v45)
      {
        if (dword_10008BA20)
        {
          char v47 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
            sub_100064764();
          }
        }

        return 0xFFFFFFFFLL;
      }

      memcpy((void *)v45[1], v8, v44);
    }

    if ((*(_BYTE *)(v5 + 17) & 0x20) != 0) {
      sub_100048C2C(0, 0, v5, 0LL);
    }
    return 0LL;
  }

  int v9 = v7 - 8;
  unsigned int v48 = a2 + 4;
  while (1)
  {
    int v10 = v9;
    int v11 = (int)bswap32(*v8) >> 16;
    if (v11 < 0)
    {
      int v14 = v11 & 0x7FFF;
      if (dword_10008BA20)
      {
        unsigned int v15 = (os_log_s *)ne_log_obj(result);
        uint64_t result = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)result)
        {
          uint64_t v31 = sub_10003DEE4(v11 & 0x7FFF);
          unsigned int v32 = bswap32(v8[1]) >> 16;
          *(_DWORD *)uint8_t buf = 136315394;
          int v50 = v31;
          __int16 v51 = 1024;
          LODWORD(v52) = v32;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Short attribute %s = %d\n",  buf,  0x12u);
        }
      }

      if (v14 == 28679)
      {
        sub_10004585C(v5, v8);
      }

      else if (v14 == 16520)
      {
        uint64_t result = sub_100045DFC(v5, v8, bswap32(a2[3]) >> 16);
        if ((_DWORD)result) {
          return result;
        }
      }

      else if (dword_10008BA20)
      {
        uint64_t v18 = (os_log_s *)ne_log_obj(result);
        uint64_t result = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)result)
        {
          uint64_t v19 = sub_10003DEE4(v11 & 0x7FFF);
          *(_DWORD *)uint8_t buf = 136315138;
          int v50 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Ignored short attribute %s\n", buf, 0xCu);
        }
      }

      int v9 = v10 - 4;
      v8 += 2;
      goto LABEL_34;
    }

    uint64_t v12 = bswap32(v8[1]) >> 16;
    if (v12 + 4 > (unint64_t)v9)
    {
      if (dword_10008BA20)
      {
        pid_t v46 = (os_log_s *)ne_log_obj(result);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          sub_100064684((unsigned __int16)v11);
        }
      }

      return 0xFFFFFFFFLL;
    }

    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(result);
      uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)result)
      {
        unsigned int v26 = sub_10003DEE4((unsigned __int16)v11);
        *(_DWORD *)uint8_t buf = 136315394;
        int v50 = v26;
        __int16 v51 = 2048;
        uint64_t v52 = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Attribute %s, len %zu\n", buf, 0x16u);
      }
    }

    if ((unsigned __int16)v11 - 28672 > 0xB)
    {
LABEL_11:
      if ((unsigned __int16)v11 - 16520 >= 0xA)
      {
        switch((__int16)v11)
        {
          case 1:
            uint64_t v27 = *(void *)(v5 + 408);
            if ((*(_BYTE *)v27 & 0x80) != 0) {
              goto LABEL_23;
            }
            sub_100043CD4((uint64_t)v8, (_DWORD *)(v27 + 40));
            uint64_t v24 = *(int **)(v5 + 408);
            int v25 = *v24 | 0x80;
            goto LABEL_50;
          case 2:
            uint64_t v28 = *(void *)(v5 + 408);
            if ((*(_BYTE *)(v28 + 1) & 1) != 0) {
              goto LABEL_23;
            }
            sub_100043CD4((uint64_t)v8, (_DWORD *)(v28 + 44));
            uint64_t v24 = *(int **)(v5 + 408);
            int v25 = *v24 | 0x100;
            goto LABEL_50;
          case 3:
            uint64_t v29 = *(void *)(v5 + 408);
            if ((*(_BYTE *)(v29 + 1) & 2) != 0) {
              goto LABEL_23;
            }
            sub_100043D34((uint64_t)v8, (_DWORD *)(v29 + 4LL * *(int *)(v29 + 60) + 48), (_DWORD *)(v29 + 60));
            uint64_t v24 = *(int **)(v5 + 408);
            int v25 = *v24 | 0x200;
            goto LABEL_50;
          case 4:
            uint64_t v30 = *(void *)(v5 + 408);
            if ((*(_BYTE *)(v30 + 1) & 4) != 0) {
              goto LABEL_23;
            }
            sub_100043D34((uint64_t)v8, (_DWORD *)(v30 + 4LL * *(int *)(v30 + 80) + 64), (_DWORD *)(v30 + 80));
            uint64_t v24 = *(int **)(v5 + 408);
            int v25 = *v24 | 0x400;
            goto LABEL_50;
          case 5:
          case 13:
            if (!*(_DWORD *)(v5 + 24)) {
              goto LABEL_26;
            }
            goto LABEL_23;
          case 7:
            goto LABEL_22;
          default:
LABEL_26:
            if (dword_10008BA20)
            {
              size_t v16 = (os_log_s *)ne_log_obj(result);
              uint64_t result = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)result)
              {
                uint64_t v17 = sub_10003DEE4((unsigned __int16)v11);
                *(_DWORD *)uint8_t buf = 136315138;
                int v50 = v17;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Ignored attribute %s\n", buf, 0xCu);
              }
            }

            goto LABEL_23;
        }
      }

      uint64_t result = sub_100045DFC(v5, v8, bswap32(a2[3]) >> 16);
      if ((_DWORD)result) {
        return result;
      }
      goto LABEL_23;
    }

    if (((1 << v11) & 0xF7B) != 0)
    {
LABEL_22:
      sub_10004585C(v5, v8);
    }

    else
    {
      uint64_t v20 = *(void *)(v5 + 408);
      if ((*(_BYTE *)(v20 + 1) & 0x10) == 0)
      {
        uint64_t v21 = (void *)(v20 + 84);
        unsigned int v22 = bswap32(v8[1]) >> 16;
        if (v22 >= 0x400) {
          size_t v23 = 1024LL;
        }
        else {
          size_t v23 = v22;
        }
        uint64_t result = (uint64_t)memcpy(v21, v8 + 2, v23);
        uint64_t v24 = *(int **)(v5 + 408);
        int v25 = *v24 | 0x1000;
LABEL_50:
        *uint64_t v24 = v25;
      }
    }

uint64_t sub_100043140(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned int v6 = bswap32(a2[1]) >> 16;
  unsigned int v7 = a2 + 4;
  int v8 = v6 - 8;
  if (!*(_DWORD *)(a1 + 24) && !sub_10004DB80(a1))
  {
    uint64_t v11 = (uint64_t)sub_10003F4BC(8uLL);
    if (!v11)
    {
      if (dword_10008BA20)
      {
        pid_t v46 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          sub_100059860();
        }
      }

      return 0xFFFFFFFFLL;
    }

    int v10 = (size_t *)v11;
    uint64_t v49 = a3;
    **(void **)(v11 + 8) = 0LL;
    if (v6 < 9)
    {
LABEL_78:
      size_t v43 = v10[1];
      *(_WORD *)(v43 + 2) = bswap32(*(unsigned __int16 *)v10) >> 16;
      *(_BYTE *)(v43 + 4) = 2;
      *(_WORD *)(v43 + 6) = a2[3];
      if (dword_10008BA20)
      {
        size_t v44 = (os_log_s *)ne_log_obj(v11);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint8_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Sending MODE_CFG REPLY\n", buf, 2u);
        }
      }

      uint64_t v9 = sub_100043EB0(a1, (uint64_t)v10, 14, 1, 0, 0, v49);
      goto LABEL_82;
    }

    while (1)
    {
      int v12 = v8;
      if (v8 <= 3)
      {
        if (dword_10008BA20)
        {
          char v47 = (os_log_s *)ne_log_obj(v11);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
            sub_100064790();
          }
        }

uint64_t sub_10004394C(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)sub_10003F4BC(8uLL);
  if (!v6)
  {
    if (dword_10008BA20)
    {
      uint64_t v20 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_100059860();
      }
    }

    return 0xFFFFFFFFLL;
  }

  unsigned int v7 = (size_t *)v6;
  **(void **)(v6 + 8) = 0LL;
  unsigned int v8 = bswap32(a2[1]) >> 16;
  if (v8 < 9)
  {
LABEL_20:
    size_t v17 = v7[1];
    *(_WORD *)(v17 + 2) = bswap32(*(unsigned __int16 *)v7) >> 16;
    *(_BYTE *)(v17 + 4) = 4;
    *(_WORD *)(v17 + 6) = a2[3];
    if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Sending MODE_CFG ACK\n", buf, 2u);
      }
    }

    uint64_t v19 = sub_100043EB0(a1, (uint64_t)v7, 14, 1, 0, 0, a3);
    if ((*(_BYTE *)(*(void *)(a1 + 408) + 1LL) & 8) != 0)
    {
      if ((*(_BYTE *)(a1 + 17) & 0x20) != 0) {
        sub_10001ADEC(a1);
      }
      sub_100023380(a1);
      sub_10003F5BC(v7);
    }

    else
    {
      sub_10003F5BC(v7);
      if ((*(_BYTE *)(a1 + 432) & 1) == 0 && *(_DWORD *)(*(void *)(a1 + 64) + 156LL) && !(_DWORD)v19) {
        return sub_1000444C4(a1);
      }
    }

    return v19;
  }

  int v9 = v8 - 8;
  int v10 = a2 + 4;
  while (1)
  {
    unint64_t v11 = v9;
    unsigned int v12 = bswap32(*v10) >> 16;
    if (dword_10008BA20)
    {
      int v13 = (os_log_s *)ne_log_obj(v6);
      uint64_t v6 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v6) {
        sub_100064924(&v32, v12, &v33);
      }
    }

    if ((v12 & 0x7FFF) == 0x408F)
    {
      uint64_t v6 = (uint64_t)sub_100046EA0(a1, v10);
      if (v6)
      {
        uint64_t v14 = (void *)v6;
        unsigned int v7 = sub_100043DD8(v7, v6);
        sub_10003F5BC(v14);
        if ((v12 & 0x8000) != 0) {
          goto LABEL_18;
        }
        goto LABEL_15;
      }

void sub_100043CD4(uint64_t a1, _DWORD *a2)
{
  if (*(_WORD *)(a1 + 2) == 1024)
  {
    *a2 = *(_DWORD *)(a1 + 4);
  }

  else if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100064974();
    }
  }

void sub_100043D34(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*(_WORD *)(a1 + 2) == 1024)
  {
    if (*a3 == 3)
    {
      if (dword_10008BA20)
      {
        int v3 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          sub_1000649A0();
        }
      }
    }

    else
    {
      *a2 = *(_DWORD *)(a1 + 4);
      ++*a3;
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100064974();
    }
  }

size_t *sub_100043DD8(size_t *a1, uint64_t a2)
{
  int v3 = a1;
  uint64_t v4 = sub_10003F4BC(*(void *)a2 + *a1);
  if (v4)
  {
    uint64_t v5 = v4;
    memcpy((void *)v4[1], (const void *)v3[1], *v3);
    memcpy((void *)(v5[1] + *v3), *(const void **)(a2 + 8), *(void *)a2);
    sub_10003F5BC(v3);
    return v5;
  }

  else if (dword_10008BA20)
  {
    uint64_t v6 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100059860();
    }
  }

  return v3;
}

void *sub_100043E7C(int a1, _WORD *a2, char *__s)
{
  size_t v5 = strlen(__s);
  return sub_100044840(v5, a2, __s, v5);
}

uint64_t sub_100043EB0(uint64_t a1, uint64_t a2, int a3, char a4, int a5, int a6, uint64_t a7)
{
  if ((*(_BYTE *)(a1 + 17) & 0x20) == 0
    || !*(void *)(a1 + 56)
    || (unsigned int v8 = (unsigned __int8 **)(a1 + 48), !*(void *)(a1 + 48)))
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1000649CC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v15 = *(void *)(a1 + 408);
  uint64_t v16 = sub_100009738(16, 2);
  if (!v16)
  {
    if (dword_10008BA20)
    {
      uint64_t v27 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_1000649F8();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v17 = (uint64_t)v16;
  uint64_t v18 = sub_10003CA00(*v8);
  *(void *)(v17 + 8) = v18;
  if (!v18)
  {
    if (dword_10008BA20)
    {
      __int16 v28 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_100064A24();
      }
    }

    goto LABEL_66;
  }

  uint64_t v19 = sub_10003CA00(*(unsigned __int8 **)(a1 + 56));
  *(void *)uint64_t v17 = v19;
  if (!v19)
  {
    if (dword_10008BA20)
    {
      unint64_t v29 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_100064A50();
      }
    }

    goto LABEL_66;
  }

  int v20 = (*v8)[1];
  if (v20 != 2 && v20 != 30)
  {
    if (dword_10008BA20)
    {
      int v30 = (os_log_s *)ne_log_obj(v19);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_100064A7C(a1 + 48, v30, v31, v32, v33, v34, v35, v36);
      }
    }

uint64_t sub_1000444C4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24)
    && (uint64_t v2 = *(void *)(a1 + 48), *(_BYTE *)(v2 + 1) == 2)
    && (int v3 = *(void **)(qword_10008B848 + 64)) != 0LL)
  {
    uint64_t v4 = 0LL;
    int v5 = *(_DWORD *)(v2 + 4);
    size_t v6 = 72LL;
    do
    {
      unsigned int v7 = v3 + 6;
      while (1)
      {
        unsigned int v7 = (void *)*v7;
        if (!v7) {
          break;
        }
        if (*((_DWORD *)v7 + 4) == v5)
        {
          uint64_t v4 = (size_t *)v7[7];
          if (v4) {
            v6 += *v4;
          }
          break;
        }
      }

      int v3 = (void *)*v3;
    }

    while (v3);
  }

  else
  {
    uint64_t v4 = 0LL;
    size_t v6 = 72LL;
  }

  unsigned int v8 = sub_10003F4BC(v6);
  if (v8)
  {
    int v9 = v8;
    uint64_t v10 = v8[1];
    *(_WORD *)(v10 + 2) = bswap32(v6) >> 16;
    *(_BYTE *)(v10 + 4) = 1;
    uint64_t v11 = sub_100007704();
    uint64_t v12 = 0LL;
    *(_WORD *)(v10 + 6) = bswap32(v11) >> 16;
    int v13 = (_WORD *)(v10 + 8);
    do
    {
      if (v12 == 10 && v4)
      {
        _WORD *v13 = 1792;
        size_t v15 = *v4;
        uint64_t v14 = (const void *)v4[1];
        v13[1] = bswap32(*v4) >> 16;
        uint64_t v16 = v13 + 2;
        uint64_t v11 = (uint64_t)memcpy(v13 + 2, v14, v15);
        int v13 = (_WORD *)((char *)v16 + *v4);
      }

      else
      {
        *(_DWORD *)int v13 = bswap32((unsigned __int16)word_10006A418[v12]) >> 16;
        v13 += 2;
      }

      v12 += 2LL;
    }

    while (v12 != 32);
    if (dword_10008BA20)
    {
      uint64_t v17 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Sending MODE_CFG REQUEST\n", buf, 2u);
      }
    }

    uint64_t v18 = sub_100043EB0(a1, (uint64_t)v9, 14, 1, 1, *(_DWORD *)(*(void *)(a1 + 64) + 200LL), 0LL);
    sub_10003F5BC(v9);
    if (dword_10008BA20)
    {
      int v20 = (os_log_s *)ne_log_obj(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v23[0] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "IPSec Network Configuration requested.\n",  (uint8_t *)v23,  2u);
      }
    }
  }

  else
  {
    if (dword_10008BA20)
    {
      unsigned int v21 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_100059860();
      }
    }

    return 0xFFFFFFFFLL;
  }

  return v18;
}

void *sub_100044718(uint64_t a1, unsigned __int16 *a2)
{
  if ((*a2 & 0x80) != 0) {
    size_t v3 = 4LL;
  }
  else {
    size_t v3 = (bswap32(a2[1]) >> 16) + 4LL;
  }
  uint64_t v4 = sub_10003F4BC(v3);
  int v5 = v4;
  if (v4)
  {
    memcpy((void *)v4[1], a2, (bswap32(a2[1]) >> 16) + 4LL);
  }

  else if (dword_10008BA20)
  {
    size_t v6 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100059860();
    }
  }

  return v5;
}

void *sub_1000447B4(uint64_t a1, _WORD *a2, unsigned int a3)
{
  int v5 = sub_10003F4BC(4uLL);
  size_t v6 = v5;
  if (v5)
  {
    unsigned int v7 = (_WORD *)v5[1];
    _WORD *v7 = *a2 | 0x80;
    v7[1] = bswap32(a3) >> 16;
  }

  else if (dword_10008BA20)
  {
    unsigned int v8 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100059860();
    }
  }

  return v6;
}

void *sub_100044840(uint64_t a1, _WORD *a2, const void *a3, size_t a4)
{
  unsigned int v7 = sub_10003F4BC(a4 + 4);
  unsigned int v8 = v7;
  if (v7)
  {
    int v9 = (_WORD *)v7[1];
    *int v9 = *a2;
    v9[1] = bswap32(a4) >> 16;
    memcpy(v9 + 2, a3, a4);
  }

  else if (dword_10008BA20)
  {
    uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100059860();
    }
  }

  return v8;
}

void sub_1000448DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 408);
  if (v1)
  {
    if ((*(_BYTE *)v1 & 4) != 0)
    {
      sub_100044980(a1, *(unsigned int *)(v1 + 4));
      uint64_t v1 = *(void *)(a1 + 408);
    }

    size_t v3 = *(void **)(v1 + 1176);
    if (v3)
    {
      sub_10002E08C(v3);
      *(void *)(*(void *)(a1 + 408) + 1176LL) = 0LL;
      uint64_t v1 = *(void *)(a1 + 408);
    }

    uint64_t v4 = *(void **)(v1 + 1112);
    if (v4)
    {
      sub_100045AD8(v4, (_DWORD *)(v1 + 1120));
      uint64_t v1 = *(void *)(a1 + 408);
    }

    int v5 = *(void **)(v1 + 1128);
    if (v5)
    {
      sub_100045AD8(v5, (_DWORD *)(v1 + 1136));
      uint64_t v1 = *(void *)(a1 + 408);
    }

    sub_100047294(v1 + 1144);
    size_t v6 = *(void ***)(a1 + 408);
    if (v6[149])
    {
      sub_10003F5BC(v6[149]);
      size_t v6 = *(void ***)(a1 + 408);
    }

    free(v6);
    *(void *)(a1 + 408) = 0LL;
  }

uint64_t sub_100044980(uint64_t a1, uint64_t a2)
{
  if (!qword_10008BE68)
  {
    if (dword_10008BA20)
    {
      size_t v6 = (os_log_s *)ne_log_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100064B14();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (!*(_BYTE *)(qword_10008BE68 + a2))
  {
    if (dword_10008BA20)
    {
      unsigned int v7 = (os_log_s *)ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100064B40(a2, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    return 0xFFFFFFFFLL;
  }

  *(_BYTE *)(qword_10008BE68 + a2) = 0;
  **(_DWORD **)(a1 + 408) &= 4u;
  if (dword_10008BA20)
  {
    size_t v3 = (os_log_s *)ne_log_obj();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (!v4) {
      return result;
    }
    v14[0] = 67109120;
    v14[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Released port %d\n", (uint8_t *)v14, 8u);
  }

  return 0LL;
}

void *sub_100044ACC()
{
  uint64_t v0 = malloc(0x4B0uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    bzero(v0, 0x4B0uLL);
  }

  else if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100064BA4();
    }
  }

  return v1;
}

uint64_t sub_100044B38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 408);
  if ((*(_BYTE *)v1 & 4) != 0) {
    return *(unsigned int *)(v1 + 4);
  }
  if (!qword_10008BE68)
  {
    if (dword_10008BA20)
    {
      size_t v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100064B14();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (!qword_10008BE90) {
    goto LABEL_25;
  }
  unint64_t v3 = 0LL;
  unint64_t v4 = 0LL;
  while (*(_BYTE *)(qword_10008BE68 + v3))
  {
    unint64_t v3 = (v4 + 1);
    unint64_t v4 = v3;
    unint64_t v5 = v3;
    if (qword_10008BE90 <= v3) {
      goto LABEL_13;
    }
  }

  unint64_t v5 = v4;
LABEL_13:
  if (qword_10008BE90 == v3)
  {
LABEL_25:
    if (dword_10008BA20)
    {
      unsigned int v7 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100064BD0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  *(_BYTE *)(qword_10008BE68 + v3) = 1;
  if (dword_10008BA20)
  {
    uint64_t v9 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109120;
      v11[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Using port %d\n", (uint8_t *)v11, 8u);
    }
  }

  uint64_t v10 = *(_DWORD **)(a1 + 408);
  *v10 |= 4u;
  v10[1] = v5;
  return v5;
}

size_t sub_100044CCC(size_t result, int a2, uint64_t a3, int a4)
{
  unint64_t v4 = (_BYTE *)result;
  if (a4 == 1) {
    uint64_t v5 = 14LL;
  }
  else {
    uint64_t v5 = 4LL;
  }
  if (a2 >= 1)
  {
    int v8 = a2;
    int v9 = 0;
    do
    {
      uint64_t result = __memcpy_chk(&v12, a3, v5, 14LL);
      if (!v12) {
        break;
      }
      inet_ntop(2, &v12, &v4[v9], 0x28u);
      uint64_t result = strlen(&v4[v9]);
      int v10 = v9 + result;
      if (a4 == 1)
      {
        v4[v10] = 47;
        uint64_t v11 = v10 + 1LL;
        inet_ntop(2, &v13, &v4[v11], 0x28u);
        uint64_t result = strlen(&v4[v11]);
        int v10 = v11 + result;
      }

      a3 += v5;
      v4[v10] = 32;
      int v9 = v10 + 1;
      --v8;
    }

    while (v8);
    if (v9 >= 1) {
      v4 += (v9 - 1);
    }
  }

  *unint64_t v4 = 0;
  return result;
}

uint64_t sub_100044DE4(BOOL a1)
{
  if (qword_10008BE90 == a1) {
    return 0LL;
  }
  int v2 = a1;
  size_t v3 = a1;
  if (dword_10008BA20)
  {
    unint64_t v4 = (os_log_s *)ne_log_obj(a1);
    a1 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (a1)
    {
      int v10 = 134218240;
      uint64_t v11 = qword_10008BE90;
      __int16 v12 = 1024;
      int v13 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Resize address pool from %zu to %d\n",  (uint8_t *)&v10,  0x12u);
    }
  }

  if (qword_10008BE68)
  {
    int v5 = qword_10008BE90;
    if (qword_10008BE90 > v3)
    {
      while (--v5 >= v2)
      {
        if (*(_BYTE *)(qword_10008BE68 + v5))
        {
          size_t v3 = v5;
          if (dword_10008BA20)
          {
            size_t v6 = (os_log_s *)ne_log_obj(a1);
            if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
              sub_100064CB8(v2, v5, v6);
            }
          }

          goto LABEL_14;
        }
      }
    }
  }

  int v5 = v2;
LABEL_14:
  unsigned int v7 = (char *)realloc((void *)qword_10008BE68, v3);
  if (v7)
  {
    uint64_t v8 = (uint64_t)v7;
    if (v3 > qword_10008BE90) {
      bzero(&v7[qword_10008BE90], v3 - qword_10008BE90);
    }
    uint64_t result = 0LL;
    qword_10008BE68 = v8;
    qword_10008BE90 = v3;
  }

  else
  {
    if (dword_10008BA20)
    {
      int v9 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100064BFC(v5, v9);
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t sub_100044FA4(int a1)
{
  unk_10008BE54 = 0u;
  xmmword_10008BE38 = 0u;
  unk_10008BE48 = 0u;
  if (a1 != 1 && qword_10008BE68) {
    free((void *)qword_10008BE68);
  }
  qword_10008BE90 = 0LL;
  qword_10008BE68 = 0LL;
  *(void *)&dword_10008BE70 = 0LL;
  if (a1 != 1)
  {
    int v2 = (void *)qword_10008BE78;
    if (qword_10008BE78)
    {
      if (dword_10008BE80 >= 1)
      {
        uint64_t v3 = 0LL;
        do
          free(*(void **)(qword_10008BE78 + 8 * v3++));
        while (v3 < dword_10008BE80);
        int v2 = (void *)qword_10008BE78;
      }

      free(v2);
    }
  }

  qword_10008BE78 = 0LL;
  *(void *)&dword_10008BE80 = 0LL;
  dword_10008BE88 = 0;
  dword_10008BE98 = 1;
  __strlcpy_chk(byte_10008BE9C, &unk_10007E069, 1025LL, 1025LL);
  __strlcpy_chk(&byte_10008BE9C[1025], "/etc/motd", 1025LL, 1025LL);
  if (a1 != 1 && qword_10008C6A0) {
    sub_100045AD8((void *)qword_10008C6A0, &dword_10008C6A8);
  }
  dword_10008C6BC = 0;
  dword_10008C6C0 = 0;
  qword_10008C6A0 = 0LL;
  *(void *)&dword_10008C6A8 = 0LL;
  if (a1 != 1 && qword_10008C6B0) {
    free((void *)qword_10008C6B0);
  }
  qword_10008C6B0 = 0LL;
  dword_10008C6B8 = 0;
  return 0LL;
}

void *sub_1000450E8(_WORD *a1, _DWORD *a2)
{
  unint64_t v4 = sub_10003F4BC(8uLL);
  int v5 = v4;
  if (v4)
  {
    uint64_t v6 = v4[1];
    *(_WORD *)uint64_t v6 = *a1;
    *(_WORD *)(v6 + 2) = 1024;
    *(_DWORD *)(v6 + 4) = *a2;
  }

  else if (dword_10008BA20)
  {
    unsigned int v7 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100059860();
    }
  }

  return v5;
}

size_t *sub_100045174(_WORD *a1, int *a2, int a3)
{
  uint64_t v6 = sub_10003F4BC(0LL);
  if (!v6)
  {
    if (dword_10008BA20)
    {
      int v13 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_100059860();
      }
    }

    return 0LL;
  }

  unsigned int v7 = v6;
  if (a3 >= 1)
  {
    uint64_t v8 = a3;
    while (1)
    {
      int v9 = sub_10003F4BC(8uLL);
      if (!v9) {
        break;
      }
      int v10 = v9;
      uint64_t v11 = v9[1];
      *(_WORD *)uint64_t v11 = *a1;
      *(_WORD *)(v11 + 2) = 1024;
      int v12 = *a2++;
      *(_DWORD *)(v11 + 4) = v12;
      unsigned int v7 = sub_100043DD8(v7, (uint64_t)v9);
      sub_10003F5BC(v10);
      if (!--v8) {
        return v7;
      }
    }

    if (dword_10008BA20)
    {
      uint64_t v14 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        sub_100059860();
        if (!v7) {
          return v7;
        }
        goto LABEL_13;
      }
    }

    if (v7)
    {
LABEL_13:
      sub_10003F5BC(v7);
      return 0LL;
    }
  }

  return v7;
}

void sub_10004528C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void *sub_1000452B4()
{
  uint64_t v0 = __chkstk_darwin();
  if ((**(_BYTE **)(v0 + 408) & 2) != 0)
  {
    uint64_t v11 = v1;
    unsigned int v12 = bswap32((unsigned __int16)*v1);
    int v13 = HIWORD(v12);
    if ((v12 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        int v27 = HIWORD(v12) & 0x7FFF;
        __int16 v28 = (os_log_s *)ne_log_obj(v0);
        BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG);
        if (v29) {
          sub_100064F40(v27, (uint64_t)v11, v28);
        }
        if (dword_10008BA20)
        {
          int v30 = (os_log_s *)ne_log_obj(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            sub_100064ED4(v27);
          }
        }
      }
    }

    else
    {
      int v14 = v0;
      switch(v13)
      {
        case 28672:
          uint64_t v15 = open(&byte_10008BE9C[1025], 0, 0LL);
          if ((_DWORD)v15 == -1)
          {
            if (dword_10008BA20)
            {
              uint64_t v35 = (os_log_s *)ne_log_obj(v15);
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
                sub_100064DE4(v35, v36, v37, v38, v39, v40, v41, v42);
              }
            }
          }

          else
          {
            int v16 = v15;
            ssize_t v17 = read(v15, __s, 0x10000uLL);
            int v18 = v17;
            if ((_DWORD)v17 != -1)
            {
              close(v16);
              __s[v18] = 0;
              return sub_100043E7C(v14, v11, __s);
            }

            if (dword_10008BA20)
            {
              uint64_t v19 = (os_log_s *)ne_log_obj(v17);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
                sub_100064E5C(v19, v20, v21, v22, v23, v24, v25, v26);
              }
            }

            close(v16);
          }

          break;
        case 28673:
          unsigned int v31 = dword_10008C6C0;
          return sub_1000447B4(v0, v1, v31);
        case 28674:
          return sub_100043E7C(v0, v1, byte_10008BE9C);
        case 28675:
          return sub_100044840(v0, v1, (const void *)qword_10008C6B0, dword_10008C6B8);
        case 28676:
          int v32 = dword_10008C6AC;
          int v33 = 28676;
          goto LABEL_28;
        case 28678:
          int v32 = dword_10008C6AC;
          int v33 = 28678;
LABEL_28:
          if (v32 != v33) {
            return 0LL;
          }
          return sub_1000456A4(v1, (uint64_t *)qword_10008C6A0, dword_10008C6A8);
        case 28679:
          unsigned int v31 = dword_10008C6BC;
          return sub_1000447B4(v0, v1, v31);
        case 28682:
          return sub_100044718(v0, v1);
        default:
          if (dword_10008BA20)
          {
            uint64_t v34 = (os_log_s *)ne_log_obj(v0);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
              sub_100064D78(v13);
            }
          }

          return 0LL;
      }
    }
  }

  else if (dword_10008BA20)
  {
    int v2 = (os_log_s *)ne_log_obj(v0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100064D48(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  return 0LL;
}

void *sub_1000456A4(_WORD *a1, uint64_t *a2, int a3)
{
  uint64_t v6 = 14LL * a3;
  uint64_t v7 = sub_10003F4BC(v6 + 4);
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = (_WORD *)v7[1];
    *uint64_t v9 = *a1;
    v9[1] = bswap32(v6) >> 16;
    if (a3 >= 1)
    {
      int v10 = v9 + 2;
      uint64_t v11 = a3;
      do
      {
        uint64_t v12 = *a2;
        *(void *)((char *)v10 + 6) = *(uint64_t *)((char *)a2 + 6);
        void *v10 = v12;
        inet_ntop(2, a2, v29, 0x28u);
        int v13 = inet_ntop(2, (char *)a2 + 4, v28, 0x28u);
        if (dword_10008BA20)
        {
          int v14 = (os_log_s *)ne_log_obj(v13);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint8_t buf = 136315394;
            uint64_t v25 = v29;
            __int16 v26 = 2080;
            int v27 = v28;
            _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "splitnet: %s/%s\n", buf, 0x16u);
          }
        }

        a2 = (uint64_t *)a2[2];
        int v10 = (void *)((char *)v10 + 14);
        --v11;
      }

      while (v11);
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v15 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_100064FD8(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }

  return v8;
}

void sub_10004585C(uint64_t a1, _WORD *a2)
{
  int v2 = a2 + 2;
  unsigned int v3 = bswap32(*a2 & 0xFF7F) >> 16;
  uint64_t v5 = a2 + 1;
  unsigned int v6 = __rev16((unsigned __int16)a2[1]);
  switch(v3)
  {
    case 0x7000u:
    case 0x7001u:
    case 0x7003u:
    case 0x7005u:
    case 0x7008u:
    case 0x7009u:
    case 0x700Au:
      if (!*(_DWORD *)(a1 + 24)) {
        goto LABEL_3;
      }
      break;
    case 0x7004u:
      uint64_t v8 = *(int **)(a1 + 408);
      int v9 = *v8;
      if ((*v8 & 0x2000) == 0)
      {
        if (a2[1] && v6 >= 0xE)
        {
          uint64_t v10 = (18725 * (v6 >> 1)) >> 17;
          do
          {
            sub_100045A54((uint64_t *)(*(void *)(a1 + 408) + 1112LL), v2, (_DWORD *)(*(void *)(a1 + 408) + 1120LL));
            int v2 = (void *)((char *)v2 + 14);
            --v10;
          }

          while (v10);
          uint64_t v8 = *(int **)(a1 + 408);
          int v9 = *v8;
        }

        int v11 = v9 | 0x2000;
        goto LABEL_20;
      }

      break;
    case 0x7006u:
      uint64_t v8 = *(int **)(a1 + 408);
      int v12 = *v8;
      if ((*v8 & 0x4000) == 0)
      {
        if (a2[1] && v6 >= 0xE)
        {
          uint64_t v13 = (18725 * (v6 >> 1)) >> 17;
          do
          {
            sub_100045A54((uint64_t *)(*(void *)(a1 + 408) + 1128LL), v2, (_DWORD *)(*(void *)(a1 + 408) + 1136LL));
            int v2 = (void *)((char *)v2 + 14);
            --v13;
          }

          while (v13);
          uint64_t v8 = *(int **)(a1 + 408);
          int v12 = *v8;
        }

        int v11 = v12 | 0x4000;
LABEL_20:
        *uint64_t v8 = v11;
      }

      break;
    case 0x7007u:
      *(_DWORD *)(*(void *)(a1 + 408) + 1140LL) = v6;
      if (dword_10008BA20)
      {
        int v14 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          sub_100065008(v5, v14);
        }
      }

      break;
    default:
LABEL_3:
      if (dword_10008BA20)
      {
        uint64_t v7 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315138;
          uint64_t v16 = sub_10003DEE4(v3);
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Ignored attribute %s\n",  (uint8_t *)&v15,  0xCu);
        }
      }

      break;
  }

uint64_t sub_100045A54(uint64_t *a1, void *a2, _DWORD *a3)
{
  unsigned int v6 = malloc(0x18uLL);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  *unsigned int v6 = *a2;
  *(void *)((char *)v6 + 6) = *(void *)((char *)a2 + 6);
  v6[2] = 0LL;
  uint64_t v7 = *a1;
  if (*a1)
  {
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = *(void *)(v7 + 16);
    }

    while (v7);
    a1 = (uint64_t *)(v8 + 16);
  }

  uint64_t v9 = 0LL;
  *a1 = (uint64_t)v6;
  ++*a3;
  return v9;
}

void *sub_100045AD8(void *result, _DWORD *a2)
{
  *a2 = 0;
  if (result)
  {
    do
    {
      int v2 = (void *)result[2];
      free(result);
      uint64_t result = v2;
    }

    while (v2);
  }

  return result;
}

_BYTE *sub_100045B08(void *a1)
{
  uint64_t v1 = a1;
  int v2 = 0;
  if (a1)
  {
    unsigned int v3 = a1;
    do
    {
      inet_ntop(2, v3, __s, 0x28u);
      inet_ntop(2, (char *)v3 + 4, v10, 0x28u);
      int v4 = strlen(__s);
      v2 += v4 + strlen(v10) + 2;
      unsigned int v3 = (void *)v3[2];
    }

    while (v3);
  }

  uint64_t v5 = malloc(v2);
  unsigned int v6 = v5;
  if (v5)
  {
    *uint64_t v5 = 0;
    if (v1)
    {
      if (v2 >= 1)
      {
        for (int i = 0; i < v2; i += v8)
        {
          inet_ntop(2, v1, __s, 0x28u);
          inet_ntop(2, (char *)v1 + 4, v10, 0x28u);
          int v8 = snprintf(&v6[i], v2 - i, "%s/%s ", __s, v10);
          if (v8 < 0) {
            break;
          }
          uint64_t v1 = (void *)v1[2];
          if (!v1) {
            break;
          }
        }
      }
    }
  }

  return v6;
}

char *sub_100045C5C(int a1)
{
  return sub_10003DEE4(a1);
}

void sub_100045C64(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 17) & 0x20) != 0)
  {
    unsigned int v3 = (_DWORD *)(*(void *)(a1 + 408) + 1144LL);
    if (*v3)
    {
      if (dword_10008BA20)
      {
        int v4 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          sub_1000650DC((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
        }
      }
    }

    else
    {
      if (dword_10008BA20)
      {
        int v11 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending Xauth request\n", v16, 2u);
        }
      }

      int v12 = sub_10003F4BC(0x14uLL);
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = v12[1];
        *(void *)uint64_t v14 = 0LL;
        *(void *)(v14 + 8) = 0LL;
        *(_DWORD *)(v14 + 16) = 0;
        *(_WORD *)(v14 + 2) = 5120;
        *(_BYTE *)(v14 + 4) = 1;
        *(_WORD *)(v14 + 6) = bswap32(sub_100007704()) >> 16;
        *(void *)(v14 + 8) = 0x8940000088C0LL;
        *(_DWORD *)(v14 + 16) = 35392;
        sub_100043EB0(a1, (uint64_t)v13, 14, 1, 1, 0, 0LL);
        sub_10003F5BC(v13);
        *unsigned int v3 = 1;
      }

      else if (dword_10008BA20)
      {
        int v15 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_1000650B0();
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v1 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_100065084();
    }
  }

uint64_t sub_100045DFC(uint64_t a1, _WORD *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 408);
  if ((*(_BYTE *)v3 & 1) == 0)
  {
    if (dword_10008BA20)
    {
      int v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100065144();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*(_DWORD *)(v3 + 1144) != 1)
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000652A0(v3 + 1144, v10, v11, v12, v13, v14, v15, v16);
      }
    }

    return 0xFFFFFFFFLL;
  }

  unsigned int v8 = bswap32(*a2 & 0xFF7F) >> 16;
  switch(v8)
  {
    case 0x408Au:
      uint64_t v18 = (void **)(v3 + 1168);
LABEL_19:
      size_t v19 = bswap32((unsigned __int16)a2[1]) >> 16;
      uint64_t v20 = realloc(*v18, v19 + 1);
      *uint64_t v18 = v20;
      if (!v20)
      {
        if (dword_10008BA20)
        {
          uint64_t v23 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            sub_100065274();
          }
        }

        return 0xFFFFFFFFLL;
      }

      uint64_t v21 = v20;
      memcpy(v20, a2 + 2, v19);
      v21[v19] = 0;
      break;
    case 0x4089u:
      uint64_t v18 = (void **)(v3 + 1160);
      goto LABEL_19;
    case 0x4088u:
      if (a2[1])
      {
        if (dword_10008BA20)
        {
          uint64_t v9 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v42 = 67109120;
            int v43 = 34880;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Unexpected authentication type %d\n",  (uint8_t *)&v42,  8u);
          }
        }

        return 0xFFFFFFFFLL;
      }

      *(_DWORD *)(v3 + 1152) = 0;
      break;
    default:
      if (dword_10008BA20)
      {
        uint64_t v22 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          int v42 = 67109120;
          int v43 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "ignored Xauth attribute %d\n",  (uint8_t *)&v42,  8u);
        }
      }

      break;
  }

  uint64_t v24 = *(const char **)(v3 + 1160);
  if (!v24) {
    return 0LL;
  }
  uint64_t v25 = *(const char **)(v3 + 1168);
  if (!v25) {
    return 0LL;
  }
  __strlcpy_chk(*(void *)(a1 + 408) + 8LL, *(void *)(v3 + 1160), 32LL, 32LL);
  uint64_t v26 = sub_100044B38(a1);
  uint64_t v27 = v26;
  if ((_DWORD)v26 == -1)
  {
    if (dword_10008BA20)
    {
      int v30 = (os_log_s *)ne_log_obj(v26);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_100065170();
      }
    }

    int v29 = -1;
    goto LABEL_50;
  }

  if (dword_10008BE70)
  {
    if (dword_10008BA20)
    {
      __int16 v28 = (os_log_s *)ne_log_obj(v26);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_100065248();
      }
    }

    int v29 = -1;
  }

  else
  {
    int v29 = sub_100046240(v24, v25);
    if (!v29 && dword_10008BE80) {
      int v29 = sub_100046298(a1, (char **)qword_10008BE78, dword_10008BE80);
    }
  }

  uint64_t v31 = (int)sub_10003EF60(*(unsigned __int8 **)(a1 + 48), v29);
  uint64_t v32 = v31 - time(0LL);
  if (v32 < 1)
  {
LABEL_50:
    uint64_t v37 = a1;
    uint64_t v38 = v27;
    unsigned int v39 = a3;
    int v40 = v29;
    return sub_1000464D8(v37, v38, v39, v40);
  }

  int v33 = sub_10003CB98(*(const sockaddr **)(a1 + 48));
  if (dword_10008BA20)
  {
    uint64_t v34 = (uint64_t)v33;
    uint64_t v35 = (os_log_s *)ne_log_obj(v33);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      sub_1000651C8(v34, v32, v35);
    }
  }

  uint64_t v36 = malloc(0x1CuLL);
  if (v36)
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)a1;
    v36[4] = v27;
    v36[5] = a3;
    v36[6] = -1;
    sub_10003A890(v32, (uint64_t)sub_1000466BC, (uint64_t)v36);
    return 0LL;
  }

  if (dword_10008BA20)
  {
    uint64_t v41 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      sub_10006519C();
    }
  }

  uint64_t v37 = a1;
  uint64_t v38 = v27;
  unsigned int v39 = a3;
  int v40 = -1;
  return sub_1000464D8(v37, v38, v39, v40);
}

uint64_t sub_100046240(const char *a1, const char *a2)
{
  uint64_t v3 = getpwnam(a1);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (!v3->pw_uid) {
    return 0xFFFFFFFFLL;
  }
  pw_passwd = v3->pw_passwd;
  uint64_t v5 = crypt(a2, pw_passwd);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  if (!strcmp(v5, pw_passwd)) {
    return 0LL;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100046298(uint64_t a1, char **a2, int a3)
{
  if (!*(void *)(a1 + 408))
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100065308();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (a3 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = a1;
  uint64_t v5 = a3;
  while (1)
  {
    uint64_t v6 = *(const char **)(*(void *)(v4 + 408) + 1160LL);
    if (!v6)
    {
      if (dword_10008BA20)
      {
        uint64_t v11 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_100065334();
        }
      }

      return 0xFFFFFFFFLL;
    }

    if (!dword_10008BE74) {
      break;
    }
    if (dword_10008BA20)
    {
      uint64_t v7 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
      if ((_DWORD)a1) {
        sub_100065360(&v16, v17, v7);
      }
      goto LABEL_10;
    }

uint64_t sub_1000464D8(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 408);
  uint64_t v5 = *(void *)(v4 + 1160);
  if ((*(_BYTE *)(a1 + 432) & 2) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 136315138;
        uint64_t v13 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "dropped login for user %s\n",  (uint8_t *)&v12,  0xCu);
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v7 = a1;
  if (a4)
  {
    if ((_DWORD)a2 != -1) {
      a1 = sub_100044980(a1, a2);
    }
    if (dword_10008BA20)
    {
      unsigned int v8 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 136315138;
        uint64_t v13 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "login failed for user %s\n",  (uint8_t *)&v12,  0xCu);
      }
    }

    sub_100046730(v7, 0, a3);
    *(_DWORD *)(v4 + 1144) = 0;
    if ((*(_BYTE *)(v7 + 17) & 0x20) != 0) {
      sub_10001ADEC(v7);
    }
    sub_100023380(v7);
    return 0xFFFFFFFFLL;
  }

  *(_DWORD *)(v4 + 1144) = 2;
  if (dword_10008BA20)
  {
    uint64_t v11 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315138;
      uint64_t v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "login succeeded for user %s\n",  (uint8_t *)&v12,  0xCu);
    }
  }

  sub_100046730(v7, 1u, a3);
  return 0LL;
}

void sub_1000466BC(uint64_t a1)
{
  uint64_t v2 = sub_10000886C(0LL, (void *)a1);
  if (v2)
  {
    sub_1000464D8(v2, *(unsigned int *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24));
  }

  else if (dword_10008BA20)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10006539C();
    }
  }

  free((void *)a1);
}

void sub_100046730(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = sub_10003F4BC(0xCuLL);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = v6[1];
    *(void *)uint64_t v8 = 0LL;
    *(_DWORD *)(v8 + 8) = 0;
    *(_WORD *)(v8 + 2) = 3072;
    *(_BYTE *)(v8 + 4) = 3;
    *(_WORD *)(v8 + 6) = bswap32(a3) >> 16;
    *(_WORD *)(v8 + 8) = -28736;
    *(_WORD *)(v8 + 10) = bswap32(a2) >> 16;
    sub_100043EB0(a1, (uint64_t)v6, 14, 1, 1, 0, 0LL);
    sub_10003F5BC(v7);
  }

  else if (dword_10008BA20)
  {
    uint64_t v9 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1000650B0();
    }
  }

uint64_t sub_10004680C(const char *a1, char *a2)
{
  uint64_t v4 = getgrnam(a2);
  if (v4)
  {
    for (int i = (const char **)v4->gr_mem; *i; ++i)
    {
      uint64_t v6 = strcmp(*i, a1);
      if (!(_DWORD)v6)
      {
        if (dword_10008BA20)
        {
          uint64_t v7 = (os_log_s *)ne_log_obj(v6);
          BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (!v8) {
            return result;
          }
          *(_WORD *)uint64_t v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "membership validated\n", v17, 2u);
        }

        return 0LL;
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v10 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1000653C8((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16);
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1000468F0(void *a1)
{
  int v1 = *(_DWORD *)(a1[9] + 48LL);
  if (*(void *)(a1[8] + 272LL)) {
    BOOL v2 = v1 == 65001;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    return 0LL;
  }
  BOOL v3 = (v1 - 65002) > 8 || ((1 << (v1 + 22)) & 0x151) == 0;
  if (v3 && v1 != 64222) {
    return 0LL;
  }
  uint64_t v5 = a1[51];
  if ((*(_BYTE *)v5 & 1) != 0)
  {
    if (*(_DWORD *)(v5 + 1144) == 2) {
      return 0LL;
    }
    if (dword_10008BA20)
    {
      BOOL v8 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100065458();
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v6 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10006542C();
    }
  }

  return 0xFFFFFFFFLL;
}

void *sub_1000469D4(uint64_t a1, unsigned __int16 *a2)
{
  if ((**(_BYTE **)(a1 + 408) & 1) == 0)
  {
    if (dword_10008BA20)
    {
      BOOL v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_100065484();
      }
    }

    return 0LL;
  }

  int v6 = *a2;
  __int16 v7 = v6 & 0xFF7F;
  unsigned int v8 = bswap32(v6 & 0xFFFFFF7F) >> 16;
  switch(v8)
  {
    case 0x4088u:
      if ((v6 & 0x80) != 0)
      {
        uint64_t v28 = (uint64_t)(a2 + 1);
        if (!a2[1])
        {
          int v16 = 0;
          uint64_t v15 = 0LL;
          char v37 = 0;
          uint64_t v20 = 0LL;
          goto LABEL_45;
        }

        if (dword_10008BA20)
        {
          int v29 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            sub_1000654DC(v28, v29, v30, v31, v32, v33, v34, v35);
          }
        }
      }

      else if (dword_10008BA20)
      {
        uint64_t v18 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_1000654B0();
        }
      }

      return 0LL;
    case 0x4089u:
      uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 272LL);
      if (v19 && *(void *)v19)
      {
        int v16 = 0;
        uint64_t v15 = 0LL;
        uint64_t v20 = **(void **)v19 - 1LL;
        *(_DWORD *)(v19 + 16) |= 1u;
        goto LABEL_44;
      }

      if (dword_10008BA20)
      {
        uint64_t v27 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          sub_10006554C();
        }
      }

      return 0LL;
    case 0x408Au:
    case 0x408Bu:
      uint64_t v10 = a1 + 64;
      uint64_t v11 = *(void ***)(*(void *)(a1 + 64) + 272LL);
      if (!v11) {
        return 0LL;
      }
      uint64_t v12 = *v11;
      if (!v12) {
        return 0LL;
      }
      uint64_t v13 = sub_10003F4BC(*v12 + 3LL);
      if (v13)
      {
        uint64_t v14 = v13;
        *(_DWORD *)v13[1] = 0;
        memcpy( (void *)(v13[1] + 4),  *(const void **)(**(void **)(*(void *)v10 + 272LL) + 8LL),  ***(void ***)(*(void *)v10 + 272LL) - 1LL);
        uint64_t v15 = *(size_t **)(*(void *)(*(void *)v10 + 272LL) + 8LL);
        if (v15)
        {
          int v16 = 0;
LABEL_43:
          sub_10003F5BC(v14);
          *(_DWORD *)(*(void *)(*(void *)v10 + 272LL) + 16LL) |= 2u;
          uint64_t v20 = *v15 - 1;
LABEL_44:
          char v37 = 1;
LABEL_45:
          unsigned int v39 = sub_10003F4BC(v20 + 4);
          BOOL v3 = v39;
          if (!v39)
          {
            if (dword_10008BA20)
            {
              int v42 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
                sub_100059860();
              }
            }

            goto LABEL_56;
          }

          uint64_t v40 = v39[1];
          if ((v37 & 1) == 0)
          {
            *(_DWORD *)uint64_t v40 = (unsigned __int16)__rev16(v8 | 0x8000);
            goto LABEL_56;
          }

          *(_WORD *)uint64_t v40 = v7;
          *(_WORD *)(v40 + 2) = bswap32(v20) >> 16;
          if (v8 - 16522 >= 2)
          {
            if (v8 != 16521) {
              goto LABEL_56;
            }
            uint64_t v41 = *(const void **)(**(void **)(*(void *)(a1 + 64) + 272LL) + 8LL);
          }

          else
          {
            uint64_t v41 = (const void *)v15[1];
          }

          memcpy((void *)(v40 + 4), v41, v20);
LABEL_56:
          if (v16) {
            sub_10003F5BC(v15);
          }
          return v3;
        }

        uint64_t v38 = sub_100028828(v14);
        if (v38)
        {
          uint64_t v15 = v38;
          int v16 = 1;
          goto LABEL_43;
        }

        if (dword_10008BA20)
        {
          char v44 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
            sub_100065578(a1 + 64, v44, v45, v46, v47, v48, v49, v50);
          }
        }

        uint64_t v26 = v14;
LABEL_65:
        sub_10003F5BC(v26);
      }

      else
      {
        if (!dword_10008BA20) {
          return 0LL;
        }
        uint64_t v36 = (os_log_s *)ne_log_obj(0LL);
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
          return 0LL;
        }
LABEL_39:
        sub_100059860();
      }

      return 0LL;
    case 0x408Cu:
      if ((v6 & 0x80) != 0 || !a2[1]) {
        return 0LL;
      }
      uint64_t v21 = sub_10003F4BC(__rev16(a2[1]));
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v23 = memcpy((void *)v21[1], a2 + 2, *v21);
        if (dword_10008BA20)
        {
          uint64_t v24 = (os_log_s *)ne_log_obj(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = sub_1000298D0((char *)v22[1], *v22);
            int v51 = 136315138;
            char v52 = v25;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "XAUTH Message: '%s'.\n",  (uint8_t *)&v51,  0xCu);
          }
        }

        uint64_t v26 = v22;
        goto LABEL_65;
      }

      if (!dword_10008BA20) {
        return 0LL;
      }
      int v43 = (os_log_s *)ne_log_obj(0LL);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        return 0LL;
      }
      goto LABEL_39;
    default:
      if (dword_10008BA20)
      {
        uint64_t v17 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          int v51 = 136315138;
          char v52 = sub_10003DEE4(v8);
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Ignored attribute %s\n",  (uint8_t *)&v51,  0xCu);
        }
      }

      return 0LL;
  }

void *sub_100046EA0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 408);
  if ((*(_BYTE *)v2 & 1) == 0)
  {
    if (dword_10008BA20)
    {
      BOOL v3 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_1000655EC();
      }
    }

    return 0LL;
  }

  int v5 = *a2;
  unsigned int v6 = bswap32(v5 & 0xFFFFFF7F) >> 16;
  if (v6 == 16524)
  {
    if ((v5 & 0x80) == 0 && a2[1])
    {
      uint64_t v11 = sub_10003F4BC(__rev16(a2[1]));
      if (!v11)
      {
        if (dword_10008BA20)
        {
          uint64_t v26 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            sub_100059860();
          }
        }

        return 0LL;
      }

      uint64_t v12 = v11;
      uint64_t v13 = memcpy((void *)v11[1], a2 + 2, *v11);
      if (dword_10008BA20)
      {
        uint64_t v14 = (os_log_s *)ne_log_obj(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = sub_1000298D0((char *)v12[1], *v12);
          int v28 = 136315138;
          int v29 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "XAUTH Message: '%s'.\n",  (uint8_t *)&v28,  0xCu);
        }
      }

      sub_10003F5BC(v12);
    }

    goto LABEL_23;
  }

  if (v6 != 16527)
  {
LABEL_23:
    if (dword_10008BA20)
    {
      int v16 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = sub_10003DEE4(v6);
        int v28 = 136315138;
        int v29 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Ignored attribute %s\n",  (uint8_t *)&v28,  0xCu);
      }
    }

    return 0LL;
  }

  int v8 = *(_DWORD *)(*(void *)(a1 + 72) + 48LL);
  if (*(void *)(*(void *)(a1 + 64) + 272LL)) {
    BOOL v9 = v8 == 65001;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    switch(v8)
    {
      case 65002:
        if ((*(_BYTE *)(a1 + 432) & 1) != 0) {
          goto LABEL_31;
        }
        if (dword_10008BA20)
        {
          uint64_t v10 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            sub_100065670();
          }
        }

        return 0LL;
      case 65003:
      case 65004:
      case 65006:
      case 65008:
        goto LABEL_52;
      case 65005:
      case 65007:
      case 65009:
        goto LABEL_31;
      default:
        if (v8 == 64221 || v8 == 65500) {
          goto LABEL_31;
        }
LABEL_52:
        if (dword_10008BA20)
        {
          uint64_t v27 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
            sub_100065644();
          }
        }

        break;
    }

    return 0LL;
  }

void sub_100047294(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if ((v2 - 1) >= 3)
  {
    if (v2)
    {
      if (dword_10008BA20)
      {
        BOOL v3 = (os_log_s *)ne_log_obj();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(_DWORD *)(a1 + 8);
          int v9 = 67109120;
          int v10 = v8;
          int v5 = "Unexpected authtype %d\n";
          goto LABEL_13;
        }
      }
    }

    else
    {
      unsigned int v6 = *(void **)(a1 + 16);
      if (v6) {
        free(v6);
      }
      __int16 v7 = *(void **)(a1 + 24);
      if (v7) {
        free(v7);
      }
    }
  }

  else if (dword_10008BA20)
  {
    BOOL v3 = (os_log_s *)ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(a1 + 8);
      int v9 = 67109120;
      int v10 = v4;
      int v5 = "Unsupported authtype %d\n";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v9, 8u);
    }
  }

uint64_t sub_1000473DC(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*v2)
    {
      sub_10003F5BC((void *)*v2);
      **(void **)a1 = 0LL;
      int v2 = *(void **)a1;
    }

    BOOL v3 = (void *)v2[1];
    if (v3)
    {
      sub_10003F5BC(v3);
      *(void *)(*(void *)a1 + 8LL) = 0LL;
      int v2 = *(void **)a1;
    }

    uint64_t result = 0LL;
    goto LABEL_9;
  }

  int v5 = malloc(0x18uLL);
  *(void *)a1 = v5;
  if (v5)
  {
    int v2 = v5;
    uint64_t result = 0LL;
    *int v2 = 0LL;
    v2[1] = 0LL;
LABEL_9:
    *((_DWORD *)v2 + 4) = 0;
    return result;
  }

  if (dword_10008BA20)
  {
    unsigned int v6 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10006569C();
    }
  }

  return 0xFFFFFFFFLL;
}

void sub_100047490(void ***a1)
{
  int v2 = *a1;
  if (v2)
  {
    if (*v2)
    {
      sub_10003F5BC(*v2);
      int v2 = *a1;
    }

    if (v2[1])
    {
      sub_10003F5BC(v2[1]);
      int v2 = *a1;
    }

    free(v2);
    *a1 = 0LL;
  }

void sub_1000474E4()
{
  socklen_t v17 = 128;
  dword_10008BA20 = 1;
  uint64_t v0 = calloc(1uLL, 0x38uLL);
  if (v0)
  {
    int v1 = v0;
    *((void *)v0 + 6) = 0LL;
    uint64_t v2 = accept(*(_DWORD *)(qword_10008B848 + 28), &v18, &v17);
    *((_DWORD *)v1 + 4) = v2;
    if ((v2 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v11 = (os_log_s *)ne_log_obj(v2);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_100065734();
        }
      }
    }

    else
    {
      uint64_t v3 = *(void *)(qword_10008B848 + 64);
      *(void *)int v1 = v3;
      uint64_t v4 = qword_10008B848;
      if (v3) {
        *(void *)(*(void *)(qword_10008B848 + 64) + 8LL) = v1;
      }
      *(void *)(v4 + 64) = v1;
      *((void *)v1 + 1) = v4 + 64;
      int v5 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_read,  v2,  0LL,  &_dispatch_main_q);
      *((void *)v1 + 3) = v5;
      if (v5)
      {
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 0x40000000LL;
        handler[2] = sub_10004771C;
        handler[3] = &unk_100086BF0;
        void handler[4] = v1;
        dispatch_source_set_event_handler(v5, handler);
        int v6 = *((_DWORD *)v1 + 4);
        __int16 v7 = (dispatch_source_s *)*((void *)v1 + 3);
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 0x40000000LL;
        _DWORD v14[2] = sub_100048440;
        v14[3] = &unk_100086C10;
        int v15 = v6;
        v14[4] = v7;
        dispatch_source_set_cancel_handler(v7, v14);
        dispatch_resume(*((dispatch_object_t *)v1 + 3));
        if (dword_10008BA20)
        {
          int v9 = (os_log_s *)ne_log_obj(v8);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v13 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "accepted connection on vpn control socket.\n",  v13,  2u);
          }
        }

        sub_10003B200();
        return;
      }

      if (dword_10008BA20)
      {
        uint64_t v12 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          sub_1000657A0();
        }
      }
    }

    free(v1);
    return;
  }

  if (dword_10008BA20)
  {
    int v10 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1000656C8();
    }
  }

void sub_10004771C(uint64_t a1)
{
}

void sub_100047724(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
LABEL_2:
    while (1)
    {
      unint64_t v2 = recv( *(_DWORD *)(a1 + 16),  (void *)(*(void *)(a1 + 40) + *(unsigned int *)(a1 + 32)),  *(unsigned int *)(a1 + 36),  0);
      if ((v2 & 0x8000000000000000LL) == 0) {
        break;
      }
      __int16 v7 = __error();
      if (*v7 != 4)
      {
        if (dword_10008BA20)
        {
          uint64_t v8 = (os_log_s *)ne_log_obj(v7);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_6;
          }
        }

        return;
      }
    }

    unint64_t v12 = v2;
    if (v2)
    {
      unint64_t v13 = *(unsigned int *)(a1 + 36);
      unint64_t v14 = (*(_DWORD *)(a1 + 32) + v2);
      *(_DWORD *)(a1 + 32) = v14;
      if (v2 < v13)
      {
        if (dword_10008BA20)
        {
          int v15 = (os_log_s *)ne_log_obj(v2);
          BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          LODWORD(v13) = *(_DWORD *)(a1 + 36);
          if (v16)
          {
            *(_DWORD *)uint8_t buf = 134218240;
            *(void *)__int16 v88 = v12;
            *(_WORD *)&v88[8] = 1024;
            *(_DWORD *)&v88[10] = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "received partial vpn_control command - len=%ld - expected %u\n",  buf,  0x12u);
            LODWORD(v13) = *(_DWORD *)(a1 + 36);
          }
        }

        *(_DWORD *)(a1 + 36) = v13 - v12;
        return;
      }

      uint64_t v20 = *(unsigned __int16 **)(a1 + 40);
      uint64_t v21 = 0LL;
      switch(bswap32(*v20) >> 16)
      {
        case 1u:
          if (v14 <= 0x17)
          {
            if (dword_10008BA20)
            {
              int v22 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                sub_1000659B4();
              }
            }

            goto LABEL_197;
          }

          char v37 = v20 + 10;
          if ((unint64_t)(bswap32(v20[10]) >> 16) + 24 > v14)
          {
            if (dword_10008BA20)
            {
              uint64_t v38 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
                sub_100065A14();
              }
            }

            goto LABEL_197;
          }

          if (dword_10008BA20)
          {
            __int128 v69 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "received bind command on vpn control socket.\n",  buf,  2u);
            }
          }

          __int128 v70 = calloc(1uLL, 0x40uLL);
          if (!v70)
          {
            if (dword_10008BA20)
            {
              __int128 v79 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
                sub_1000656C8();
              }
            }

            goto LABEL_197;
          }

          __int128 v71 = v70;
          if (*v37)
          {
            __int128 v72 = sub_10003F4BC(__rev16((unsigned __int16)*v37));
            v71[7] = v72;
            if (!v72)
            {
              if (dword_10008BA20)
              {
                __int128 v80 = (os_log_s *)ne_log_obj(0LL);
                if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR)) {
                  sub_1000656C8();
                }
              }

              free(v71);
              goto LABEL_197;
            }

            memcpy((void *)v72[1], v20 + 12, bswap32(v20[10]) >> 16);
          }

          *((_DWORD *)v71 + 4) = *((_DWORD *)v20 + 4);
          __int128 v73 = (void *)(a1 + 48);
          uint64_t v74 = *(void *)(a1 + 48);
          void *v71 = v74;
          if (v74) {
            *(void *)(v74 + 8) = v71;
          }
          LODWORD(v21) = 0;
          *__int128 v73 = v71;
          v71[1] = v73;
          *(_DWORD *)(qword_10008B848 + 80) |= 0x10u;
          goto LABEL_198;
        case 2u:
          if (v14 <= 0x13)
          {
            if (dword_10008BA20)
            {
              uint64_t v26 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
                sub_100065A8C();
              }
            }

            goto LABEL_197;
          }

          if (dword_10008BA20)
          {
            unsigned int v39 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "received unbind command on vpn control socket.\n",  buf,  2u);
            }
          }

          uint64_t v40 = *(_DWORD **)(a1 + 48);
          if (!v40) {
            goto LABEL_192;
          }
          break;
        case 3u:
          if (v14 <= 0x1B)
          {
            if (dword_10008BA20)
            {
              uint64_t v27 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
                sub_100065AEC();
              }
            }

            goto LABEL_197;
          }

          if (dword_10008BA20)
          {
            uint64_t v45 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v46 = bswap32(*((_DWORD *)v20 + 5));
              *(_DWORD *)uint8_t buf = 67109120;
              *(_DWORD *)__int16 v88 = v46;
              _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "received redirect command on vpn control socket - address = %x.\n",  buf,  8u);
            }
          }

          uint64_t v47 = (void *)(qword_10008B848 + 72);
          uint64_t v48 = *(void **)(qword_10008B848 + 72);
          uint64_t v49 = v48;
          while (v49)
          {
            uint64_t v50 = v49;
            uint64_t v49 = (void *)*v49;
            if (*((_DWORD *)v50 + 4) == *((_DWORD *)v20 + 4))
            {
              int v51 = *((_DWORD *)v20 + 5);
              if (!v51)
              {
                if (v49) {
                  v49[1] = v50[1];
                }
                *(void *)v50[1] = v49;
                free(v50);
                goto LABEL_192;
              }

              LODWORD(v21) = 0;
              *((_DWORD *)v50 + 5) = v51;
              *((_WORD *)v50 + 12) = bswap32(v20[12]) >> 16;
              goto LABEL_198;
            }
          }

          __int128 v67 = malloc(0x20uLL);
          if (!v67)
          {
            if (dword_10008BA20)
            {
              __int128 v78 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
                sub_100065B54();
              }
            }

            goto LABEL_197;
          }

          int v68 = v67;
          v67[2] = *((void *)v20 + 2);
          *((_WORD *)v67 + 12) = bswap32(v20[12]) >> 16;
          void *v67 = v48;
          if (v48) {
            v48[1] = v67;
          }
          LODWORD(v21) = 0;
          void *v47 = v68;
          v68[1] = v47;
          goto LABEL_198;
        case 4u:
          goto LABEL_198;
        case 0x11u:
          if (v14 <= 0x13)
          {
            if (dword_10008BA20)
            {
              int v29 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                sub_100065CB8();
              }
            }

            goto LABEL_197;
          }

          if (dword_10008BE2C)
          {
            sub_10003B320(0LL);
            dword_10008BE2C = 0;
          }

          if (dword_10008BA20)
          {
            char v52 = (os_log_s *)ne_log_obj(v21);
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "received connect command on vpn control socket.\n",  buf,  2u);
            }
          }

          uint64_t v21 = a1 + 48;
          while (1)
          {
            uint64_t v21 = *(void *)v21;
            if (!v21) {
              goto LABEL_198;
            }
            if (*((_DWORD *)v20 + 4) == *(_DWORD *)(v21 + 16))
            {
              int v53 = 1;
              goto LABEL_154;
            }
          }

        case 0x12u:
          if (v14 <= 0x13)
          {
            if (dword_10008BA20)
            {
              uint64_t v30 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                sub_100065D18();
              }
            }

            goto LABEL_197;
          }

          if (dword_10008BA20)
          {
            char v54 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "received disconnect command on vpn control socket.\n",  buf,  2u);
            }
          }

          uint64_t v21 = a1 + 48;
          while (1)
          {
            uint64_t v21 = *(void *)v21;
            if (!v21) {
              goto LABEL_198;
            }
            if (*((_DWORD *)v20 + 4) == *(_DWORD *)(v21 + 16))
            {
              LODWORD(v21) = sub_100049AE4(v21, (uint64_t)off_1000884F0[0]);
              goto LABEL_198;
            }
          }

        case 0x13u:
          if (v14 <= 0x1F)
          {
            if (dword_10008BA20)
            {
              uint64_t v31 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                sub_100065D78();
              }
            }

            goto LABEL_197;
          }

          if (dword_10008BA20)
          {
            uint64_t v55 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "received start_ph2 command on vpn control socket.\n",  buf,  2u);
            }
          }

          uint64_t v21 = a1 + 48;
          while (1)
          {
            uint64_t v21 = *(void *)v21;
            if (!v21) {
              goto LABEL_198;
            }
            if (*((_DWORD *)v20 + 4) == *(_DWORD *)(v21 + 16))
            {
              LODWORD(v21) = sub_100049BC4(v21, (uint64_t)v20, v14);
              goto LABEL_198;
            }
          }

        case 0x14u:
          if (v14 <= 0x13)
          {
            if (dword_10008BA20)
            {
              uint64_t v32 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
                sub_100065B80();
              }
            }

            goto LABEL_197;
          }

          if ((unint64_t)(bswap32(v20[7]) >> 16) + 16 > v14)
          {
            if (dword_10008BA20)
            {
              char v56 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
                sub_100065BE0();
              }
            }

            goto LABEL_197;
          }

          if (dword_10008BA20)
          {
            __int128 v75 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "received xauth info command vpn control socket.\n",  buf,  2u);
            }
          }

          uint64_t v76 = a1 + 48;
          do
          {
            uint64_t v76 = *(void *)v76;
            if (!v76) {
              goto LABEL_192;
            }
            int v77 = *((_DWORD *)v20 + 4);
          }

          while (v77 != *(_DWORD *)(v76 + 16));
          LODWORD(v21) = sub_10004A54C(v77, v20 + 10, (bswap32(v20[7]) >> 16) - 4LL);
          goto LABEL_198;
        case 0x15u:
          if (v14 <= 0x13)
          {
            if (dword_10008BA20)
            {
              uint64_t v33 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
                sub_100065DD8();
              }
            }

            goto LABEL_197;
          }

          if (dword_10008BA20)
          {
            uint64_t v57 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "received start_dpd command on vpn control socket.\n",  buf,  2u);
            }
          }

          uint64_t v58 = a1 + 48;
          do
          {
            uint64_t v58 = *(void *)v58;
            if (!v58) {
              goto LABEL_192;
            }
            int v59 = *((_DWORD *)v20 + 4);
          }

          while (v59 != *(_DWORD *)(v58 + 16));
          *(void *)&v88[4] = 0LL;
          *(_DWORD *)uint8_t buf = 528;
          *(_DWORD *)__int16 v88 = v59;
          LODWORD(v21) = sub_10000AC98((unint64_t)buf);
          goto LABEL_198;
        case 0x16u:
          if (v14 <= 0x17)
          {
            if (dword_10008BA20)
            {
              uint64_t v34 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
                sub_100065E38();
              }
            }

            goto LABEL_197;
          }

          if (dword_1000882C8 >= 5) {
            sub_100033CEC( 5,  *(void *)(a1 + 40),  (bswap32(v20[7]) >> 16) + 16LL,  "received assert command on vpn control socket.\n",  v3,  v4,  v5,  v6,  v83[0]);
          }
          *(void *)&v88[4] = 0LL;
          int v60 = *((_DWORD *)v20 + 4);
          int v61 = *((_DWORD *)v20 + 5);
          *(_DWORD *)uint8_t buf = 528;
          *(_DWORD *)__int16 v88 = v60;
          uint64_t v86 = 0LL;
          v85[0] = 528;
          v85[1] = v61;
          LODWORD(v21) = sub_10004A7EC((uint64_t)buf, (uint64_t)v85);
          goto LABEL_198;
        case 0x17u:
          if (v14 <= 0x13)
          {
            if (dword_10008BA20)
            {
              uint64_t v35 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
                sub_100065E98();
              }
            }

            goto LABEL_197;
          }

          if (dword_10008BA20)
          {
            __int16 v62 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint8_t buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "received reconnect command on vpn control socket.\n",  buf,  2u);
            }
          }

          uint64_t v21 = a1 + 48;
          while (1)
          {
            uint64_t v21 = *(void *)v21;
            if (!v21) {
              break;
            }
            if (*((_DWORD *)v20 + 4) == *(_DWORD *)(v21 + 16))
            {
              int v53 = 3;
LABEL_154:
              LODWORD(v21) = sub_10004977C(v21, v53);
              break;
            }
          }

LABEL_198:
          v20[7] = 0;
          v20[6] = bswap32(v21) >> 16;
          ssize_t v81 = send(*(_DWORD *)(a1 + 16), v20, 0x10uLL, 0);
          if (v81 < 0)
          {
            if (dword_10008BA20)
            {
              msghdr v82 = (os_log_s *)ne_log_obj(v81);
              if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR)) {
                sub_1000658CC();
              }
            }
          }

          free(*(void **)(a1 + 40));
          *(void *)(a1 + 32) = 0LL;
          *(void *)(a1 + 40) = 0LL;
          return;
        case 0x18u:
          if (v14 <= 0x1F)
          {
            if (dword_10008BA20)
            {
              uint64_t v36 = (os_log_s *)ne_log_obj(0LL);
              if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
                sub_100065C58();
              }
            }

            goto LABEL_197;
          }

          if (dword_10008BA20)
          {
            int v63 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              int v64 = *((_DWORD *)v20 + 4);
              *(_DWORD *)uint8_t buf = 67109120;
              *(_DWORD *)__int16 v88 = v64;
              _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "received set v6 prefix of len %u command on vpn control socket, adding to all addresses.\n",  buf,  8u);
            }
          }

          uint64_t v65 = *(uint64_t **)(a1 + 48);
          if (v65)
          {
            LODWORD(v21) = 0;
            do
            {
              int v66 = (uint64_t *)*v65;
              *(_OWORD *)((char *)v65 + memset(v27, 32, 20) = *((_OWORD *)v20 + 1);
              uint64_t v65 = v66;
            }

            while (v66);
          }

          else
          {
LABEL_192:
            LODWORD(v21) = 0;
          }

          goto LABEL_198;
        default:
          if (dword_10008BA20)
          {
            int v28 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
              sub_100065938(v20, v28);
            }
          }

LABEL_197:
          LODWORD(v21) = 0xFFFF;
          goto LABEL_198;
      }

      while (1)
      {
        uint64_t v41 = *(_DWORD **)v40;
        int v42 = *((_DWORD *)v20 + 4);
        if (v42 == -1) {
          break;
        }
        if (v42 == v40[4]) {
          goto LABEL_95;
        }
LABEL_100:
        LODWORD(v21) = 0;
        uint64_t v40 = v41;
        if (!v41) {
          goto LABEL_198;
        }
      }

      int v42 = v40[4];
LABEL_95:
      sub_10003A5C8(v42);
      uint64_t v43 = *(void *)v40;
      if (*(void *)v40) {
        *(void *)(v43 + 8) = *((void *)v40 + 1);
      }
      **((void **)v40 + 1) = v43;
      char v44 = (void *)*((void *)v40 + 7);
      if (v44) {
        sub_10003F5BC(v44);
      }
      free(v40);
      goto LABEL_100;
    }

    if (dword_10008BA20)
    {
      sockaddr v18 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint8_t buf = 0;
        uint64_t v19 = "vpn_control socket closed by peer while reading packet\n";
LABEL_34:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 2u);
        goto LABEL_35;
      }
    }

    goto LABEL_35;
  }

  do
  {
    unint64_t v10 = recv(*(_DWORD *)(a1 + 16), v83, 0x10uLL, 2);
    if ((v10 & 0x8000000000000000LL) == 0)
    {
      if (v10)
      {
        if (v10 > 0xF)
        {
          size_t v23 = (bswap32(v84) >> 16) + 16;
          *(_DWORD *)(a1 + 32) = 0;
          *(_DWORD *)(a1 + 36) = v23;
          uint64_t v24 = malloc(v23);
          *(void *)(a1 + 40) = v24;
          if (v24) {
            goto LABEL_2;
          }
          if (dword_10008BA20)
          {
            uint64_t v25 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              sub_1000658A0();
            }
          }
        }

        else if (dword_10008BA20)
        {
          uint64_t v11 = (os_log_s *)ne_log_obj(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
            sub_100065838();
          }
        }

        return;
      }

      if (dword_10008BA20)
      {
        sockaddr v18 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint8_t buf = 0;
          uint64_t v19 = "vpn_control socket closed by peer.\n";
          goto LABEL_34;
        }
      }

void sub_100048440(uint64_t a1)
{
}

void *sub_100048468(uint64_t a1, uint64_t a2)
{
  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "received disconnect all command.\n", v7, 2u);
    }
  }

  uint64_t result = *(void **)(a1 + 48);
  if (result)
  {
    do
    {
      uint64_t v6 = (void *)*result;
      sub_100049AE4((uint64_t)result, a2);
      uint64_t result = v6;
    }

    while (v6);
  }

  return result;
}

uint64_t sub_100048500(uint64_t *a1)
{
  if (dword_10008BA20)
  {
    unint64_t v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "vpncontrol_close_comm.\n", (uint8_t *)v10, 2u);
    }
  }

  uint64_t v3 = *a1;
  if (*a1) {
    *(void *)(v3 + 8) = a1[1];
  }
  *(void *)a1[1] = v3;
  if (*((_DWORD *)a1 + 4) != -1)
  {
    dispatch_source_cancel((dispatch_source_t)a1[3]);
    *((_DWORD *)a1 + 4) = -1;
  }

  uint64_t v4 = (void *)a1[5];
  if (v4)
  {
    free(v4);
    a1[4] = 0LL;
    a1[5] = 0LL;
  }

  uint64_t v5 = (_DWORD *)a1[6];
  if (v5)
  {
    do
    {
      uint64_t v6 = *(_DWORD **)v5;
      sub_10003A5C8(v5[4]);
      uint64_t v7 = *(void *)v5;
      if (*(void *)v5) {
        *(void *)(v7 + 8) = *((void *)v5 + 1);
      }
      **((void **)v5 + 1) = v7;
      uint64_t v8 = (void *)*((void *)v5 + 7);
      if (v8) {
        sub_10003F5BC(v8);
      }
      free(v5);
      uint64_t v5 = v6;
    }

    while (v6);
  }

  free(a1);
  uint64_t result = sub_10003B200();
  dword_10008BA20 = *(void *)(qword_10008B848 + 64) != 0LL;
  return result;
}

uint64_t sub_10004862C(_OWORD *a1)
{
  for (int i = *(void **)(qword_10008B848 + 64); i; int i = (void *)*i)
  {
    unint64_t v2 = i + 6;
    while (1)
    {
      unint64_t v2 = (void *)*v2;
      if (!v2) {
        break;
      }
      if (*((_DWORD *)v2 + 5))
      {
        *a1 = *(_OWORD *)((char *)v2 + 20);
        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100048678(uint64_t result, const void *a2, size_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    if (dword_10008BA20)
    {
      uint64_t v6 = (os_log_s *)ne_log_obj(result);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint8_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "sending vpn_control xauth need info status\n",  buf,  2u);
      }
    }

    uint64_t v7 = (__int16 *)malloc(a3 + 20);
    if (v7)
    {
      uint64_t v8 = v7;
      v7[1] = 0;
      int v9 = sub_10000B328(v5);
      if (v9)
      {
        int v10 = v9;
        v8[6] = 0;
        *((_DWORD *)v8 + 1) = 0;
        *((_DWORD *)v8 + 2) = 0;
        v8[7] = bswap32(a3 + 4) >> 16;
        __int16 v11 = sub_10004DB80(v5) ? 641 : 385;
        *uint64_t v8 = v11;
        *((_DWORD *)v8 + 4) = sub_10000B328(v5);
        ssize_t v12 = (ssize_t)memcpy(v8 + 10, a2, a3);
        for (int i = *(uint64_t **)(qword_10008B848 + 64); i; int i = (uint64_t *)*i)
        {
          unint64_t v14 = i + 6;
          while (1)
          {
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              break;
            }
            int v15 = *((_DWORD *)v14 + 4);
            if (v15 == -1 || v15 == v10)
            {
              if (dword_10008BA20)
              {
                socklen_t v17 = (os_log_s *)ne_log_obj(v12);
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)uint8_t buf = 134217984;
                  size_t v21 = a3 + 20;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "vpn control writing %zu bytes\n",  buf,  0xCu);
                }
              }

              ssize_t v12 = send(*((_DWORD *)i + 4), v8, a3 + 20, 0);
              if (v12 < 0 && dword_10008BA20)
              {
                sockaddr v18 = (os_log_s *)ne_log_obj(v12);
                ssize_t v12 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
                if ((_DWORD)v12) {
                  sub_100065F24();
                }
              }

              break;
            }
          }
        }
      }

      free(v8);
      return 0LL;
    }

    else
    {
      if (dword_10008BA20)
      {
        uint64_t v19 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
          sub_100065EF8();
        }
      }

      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_1000488E4(unsigned int a1, unsigned int a2, int a3, unsigned int a4, const void *a5)
{
  size_t v10 = a4;
  size_t v11 = a4 + 24LL;
  ssize_t v12 = (char *)malloc(v11);
  if (v12)
  {
    unint64_t v13 = v12;
    *(_WORD *)ssize_t v12 = 384;
    *(void *)(v12 + 2) = 0LL;
    *(_DWORD *)(v12 + 10) = 0;
    *((_WORD *)v12 + 7) = bswap32(a4 + 8) >> 16;
    *((_DWORD *)v12 + 4) = a3;
    *((_WORD *)v12 + 10) = __rev16(a1);
    *((_WORD *)v12 + 11) = __rev16(a2);
    if (a4) {
      ssize_t v12 = (char *)memcpy(v12 + 24, a5, v10);
    }
    if (dword_10008BA20)
    {
      unint64_t v14 = (os_log_s *)ne_log_obj(v12);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100065FE8(a1, a2, v14);
      }
    }

    for (int i = *(uint64_t **)(qword_10008B848 + 64); i; int i = (uint64_t *)*i)
    {
      BOOL v16 = i + 6;
      while (1)
      {
        BOOL v16 = (uint64_t *)*v16;
        if (!v16) {
          break;
        }
        int v17 = *((_DWORD *)v16 + 4);
        if (v17 == -1 || v17 == a3)
        {
          ssize_t v19 = send(*((_DWORD *)i + 4), v13, v11, 0);
          if (v19 < 0)
          {
            if (dword_10008BA20)
            {
              int v22 = (os_log_s *)ne_log_obj(v19);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                sub_100065F9C();
              }
            }
          }

          else if (dword_10008BA20)
          {
            ssize_t v20 = v19;
            size_t v21 = (os_log_s *)ne_log_obj(v19);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint8_t buf = 134218240;
              ssize_t v26 = v20;
              __int16 v27 = 2048;
              size_t v28 = v11;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "Sent %zd/%zu bytes\n",  buf,  0x16u);
            }
          }

          break;
        }
      }
    }

    free(v13);
    return 0LL;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100065F70();
      }
    }

    return 0xFFFFFFFFLL;
  }

const char *sub_100048B3C(int a1)
{
  if (a1 > 32800)
  {
    if (a1 > 33024)
    {
      if (a1 == 33025) {
        return "Need authentication info";
      }
      if (a1 == 33026) {
        return "Need re-authentication info";
      }
    }

    else
    {
      if (a1 == 32801) {
        return "Phase 2 started";
      }
      if (a1 == 32802) {
        return "Phase 2 established";
      }
    }
  }

  else if (a1 > 32785)
  {
    if (a1 == 32786) {
      return "Phase 1 started by peer";
    }
    if (a1 == 32787) {
      return "Phase 1 established";
    }
  }

  else
  {
    if (a1 == 32769) {
      return "IKE failed";
    }
    if (a1 == 32785) {
      return "Phase 1 started by us";
    }
  }

  return (const char *)&unk_10007E069;
}

uint64_t sub_100048C2C(int a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a1 || !a3 || (uint64_t v8 = *(void *)(a3 + 408)) == 0 || *(_DWORD *)(v8 + 1144) == 2)
  {
    size_t v29 = 20LL;
    int v9 = malloc(0x14uLL);
    uint64_t v30 = v9;
    v9[1] = 0;
    if (!a3)
    {
      unint64_t v14 = v9;
      uint64_t v10 = sub_10000B408(a4);
      if ((_DWORD)v10)
      {
        int v11 = v10;
        if (a1) {
          unsigned int v15 = -32735;
        }
        else {
          unsigned int v15 = -32734;
        }
        unsigned int v13 = bswap32(v15) >> 16;
        goto LABEL_18;
      }

      if (dword_10008BA20)
      {
        size_t v28 = (os_log_s *)ne_log_obj(v10);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          sub_100066084();
        }
      }

uint64_t sub_100048F84(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a2 + 440);
  if (!v3 || (*(_BYTE *)(v3 + 280) & 1) == 0) {
    return 0LL;
  }
  int v6 = sub_10000B328(a2);
  uint64_t result = sub_100048FF8(a1, v6);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  *(_BYTE *)(*(void *)(a2 + 440) + 280LL) &= ~1u;
  return result;
}

uint64_t sub_100048FF8(uint64_t a1, int a2)
{
  v13[1] = 0x800000000000000LL;
  v13[0] = 897LL;
  int v14 = a2;
  int v15 = (unsigned __int16)a1;
  if (dword_10008BA20)
  {
    int v3 = a1;
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 67109376;
      int v17 = v3;
      __int16 v18 = 1024;
      int v19 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "sending vpn_control status (peer response) message - code=%d  addr=%x.\n",  buf,  0xEu);
    }
  }

  uint64_t v5 = *(uint64_t **)(qword_10008B848 + 64);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v7 = v5 + 6;
    while (1)
    {
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        break;
      }
      int v8 = *((_DWORD *)v7 + 4);
      if (v8 == -1 || v8 == a2)
      {
        ssize_t v10 = send(*((_DWORD *)v5 + 4), v13, 0x18uLL, 0);
        uint64_t result = 0LL;
        if ((v10 & 0x8000000000000000LL) == 0) {
          goto LABEL_18;
        }
        if (dword_10008BA20)
        {
          unsigned int v12 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            sub_100066128();
          }
        }

        break;
      }
    }

    uint64_t result = v6;
LABEL_18:
    uint64_t v5 = (uint64_t *)*v5;
    uint64_t v6 = result;
  }

  while (v5);
  return result;
}

uint64_t sub_100049188(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a2 + 272);
  if (!v3 || (*(_BYTE *)(v3 + 280) & 1) == 0) {
    return 0LL;
  }
  int v6 = sub_10000B408(a2);
  uint64_t result = sub_100048FF8(a1, v6);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  *(_BYTE *)(*(void *)(a2 + 272) + 280LL) &= ~1u;
  return result;
}

uint64_t sub_1000491FC()
{
  if (!off_1000884E0)
  {
    uint64_t result = 0LL;
    *(_DWORD *)(qword_10008B848 + 28) = -1;
    return result;
  }

  size_t cnt = 0LL;
  *(void *)fds = 0LL;
  uint64_t v0 = launch_activate_socket("Listeners", (int **)fds, &cnt);
  if ((_DWORD)v0)
  {
    if (dword_10008BA20)
    {
      int v1 = v0;
      unint64_t v2 = (os_log_s *)ne_log_obj(v0);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_1000664A0(v1);
      }
    }
  }

  else if (*(void *)fds)
  {
    if (cnt) {
      int v4 = **(_DWORD **)fds;
    }
    else {
      int v4 = 0;
    }
    free(*(void **)fds);
    *(_DWORD *)(qword_10008B848 + 28) = v4;
    if (v4) {
      goto LABEL_29;
    }
    goto LABEL_11;
  }

  *(_DWORD *)(qword_10008B848 + 28) = 0;
LABEL_11:
  unk_10008B272 = 0u;
  xmmword_10008B258 = 0u;
  unk_10008B268 = 0u;
  xmmword_10008B238 = 0u;
  unk_10008B248 = 0u;
  xmmword_10008B218 = 0u;
  unk_10008B228 = 0u;
  BYTE1(xmmword_10008B218) = 1;
  snprintf((char *)&xmmword_10008B218 + 2, 0x68uLL, "%s", off_1000884E0);
  uint64_t v5 = socket(1, 1, 0);
  *(_DWORD *)(qword_10008B848 + 28) = v5;
  if ((_DWORD)v5 == -1)
  {
    if (dword_10008BA20)
    {
      ssize_t v10 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100066174();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v6 = fcntl(v5, 4, 4LL);
  if ((_DWORD)v6 == -1)
  {
    if (dword_10008BA20)
    {
      uint64_t v7 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100066474();
      }
    }
  }

  unlink((const char *)&xmmword_10008B218 + 2);
  uint64_t v8 = bind(*(_DWORD *)(qword_10008B848 + 28), (const sockaddr *)&xmmword_10008B218, 0x6Au);
  if ((_DWORD)v8)
  {
    if (dword_10008BA20)
    {
      int v9 = (os_log_s *)ne_log_obj(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1000663F4(v9);
      }
    }

uint64_t sub_1000495F8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t *sub_100049600(uint64_t a1)
{
  if (dword_10008BA20)
  {
    int v1 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "vpncontrol_close.\n", v5, 2u);
    }
  }

  dispatch_source_cancel(*(dispatch_source_t *)(qword_10008B848 + 40));
  uint64_t v2 = qword_10008B848;
  *(void *)(qword_10008B848 + 40) = 0LL;
  *(_DWORD *)(v2 + 28) = -1;
  uint64_t result = *(uint64_t **)(v2 + 64);
  if (result)
  {
    do
    {
      uint64_t v4 = *result;
      sub_100048500(result);
      uint64_t result = (uint64_t *)v4;
    }

    while (v4);
  }

  return result;
}

BOOL sub_1000496A8()
{
  return *(void *)(qword_10008B848 + 64) != 0LL;
}

void sub_1000496C4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10004977C(uint64_t a1, int a2)
{
  uint64_t v4 = calloc(1uLL, 0x80uLL);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = v4;
  *uint64_t v4 = 32768528;
  uint64_t v6 = a1 + 16;
  v4[1] = *(_DWORD *)(a1 + 16);
  uint64_t v7 = sub_1000389B8((uint64_t)v4);
  if (!v7)
  {
    if (dword_10008BA20)
    {
      unsigned int v13 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_10006650C((const sockaddr *)v5);
      }
    }

    goto LABEL_12;
  }

  uint64_t v8 = (uint64_t)v7;
  int v9 = (unsigned __int8 *)*((void *)v7 + 37);
  if (v9)
  {
    ssize_t v10 = (unsigned __int8 *)sub_10003CA00(v9);
    if (!v10)
    {
      if (dword_10008BA20)
      {
        uint64_t v11 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_100066638();
        }
      }

uint64_t sub_100049AE4(uint64_t a1, uint64_t a2)
{
  *(void *)&v8[0].sa_data[6] = 0LL;
  int v3 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)&v8[0].sa_len = 528;
  *(_DWORD *)&v8[0].sa_data[2] = v3;
  if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = sub_10003CB98(v8);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "IPSec disconnecting from server %s\n",  (uint8_t *)&v6,  0xCu);
    }
  }

  sub_10004CE0C((unint64_t)v8, 0, a2);
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100049BC4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v81 = 0LL;
  int v6 = *(_DWORD *)(a1 + 16);
  v80[0] = 528;
  v80[1] = v6;
  uint64_t v7 = sub_100008CE8(0LL, (unint64_t)v80);
  if (v7)
  {
    uint64_t v8 = v7;
    if ((*(_BYTE *)(v7 + 17) & 0x20) != 0)
    {
      unsigned int v11 = __rev16(*(unsigned __int16 *)(a2 + 26));
      unint64_t v12 = 24LL * v11 + 32;
      if (v12 <= a3)
      {
        if (v12 + 8LL * (bswap32(*(unsigned __int16 *)(a2 + 28)) >> 16) <= a3)
        {
          if (!*(_WORD *)(a2 + 26)) {
            return 0LL;
          }
          int v15 = 0;
          uint64_t v16 = a2 + 32;
          uint64_t v74 = v7;
          uint64_t v75 = a2 + 32 + 24LL * v11;
          __int128 v72 = (void *)(v7 + 64);
          __int128 v73 = (void *)(v7 + 72);
          uint64_t v78 = v5;
          while (1)
          {
            sub_10003A420();
            if (!v17) {
              break;
            }
            uint64_t v18 = v17;
            if (*(_DWORD *)(v16 + 4) == -1) {
              size_t v19 = 8LL;
            }
            else {
              size_t v19 = 12LL;
            }
            int v20 = sub_10003F4BC(v19);
            *(void *)uint64_t v18 = v20;
            if (!v20)
            {
              if (dword_10008BA20)
              {
                uint64_t v65 = (os_log_s *)ne_log_obj(0LL);
                if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
LABEL_99:
                }
                  sub_1000667B0();
              }

LABEL_91:
              sub_10003A64C((void *)v18);
              goto LABEL_92;
            }

            if (*(_DWORD *)(v16 + 12) == -1) {
              size_t v21 = 8LL;
            }
            else {
              size_t v21 = 12LL;
            }
            uint64_t v22 = (uint64_t)sub_10003F4BC(v21);
            *(void *)(v18 + 8) = v22;
            if (!v22)
            {
              if (dword_10008BA20)
              {
                int v66 = (os_log_s *)ne_log_obj(0LL);
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_99;
                }
              }

              goto LABEL_91;
            }

            uint64_t v23 = *(void *)(*(void *)v18 + 8LL);
            int v24 = *(_DWORD *)(v16 + 4);
            if (v24 == -1)
            {
              char v25 = 1;
            }

            else
            {
              *(_DWORD *)(v23 + 8) = v24;
              char v25 = 4;
            }

            *(_BYTE *)uint64_t v23 = v25;
            *(_DWORD *)(v23 + 4) = *(_DWORD *)v16;
            *(_WORD *)(v23 + 2) = *(_WORD *)(v16 + 16);
            __int16 v26 = *(_WORD *)(v16 + 20);
            *(_BYTE *)(v23 + 1) = v26;
            uint64_t v27 = *(void *)(v22 + 8);
            int v28 = *(_DWORD *)(v16 + 12);
            if (v28 == -1)
            {
              char v29 = 1;
            }

            else
            {
              *(_DWORD *)(v27 + 8) = v28;
              char v29 = 4;
            }

            *(_BYTE *)uint64_t v27 = v29;
            *(_DWORD *)(v27 + 4) = *(_DWORD *)(v16 + 8);
            *(_WORD *)(v27 + 2) = *(_WORD *)(v16 + 18);
            *(_BYTE *)(v27 + 1) = v26;
            *(_DWORD *)(v18 + 104) = *(_DWORD *)(v5 + 16);
            *(void *)(v18 + 24) = bswap32(*(_DWORD *)(a2 + 20));
            int v77 = v15;
            if (*(_WORD *)(a2 + 24))
            {
              uint64_t v22 = sub_10000549C(5, __rev16(*(unsigned __int16 *)(a2 + 24)));
              *(_DWORD *)(v18 + 36) = v22;
              if ((_DWORD)v22 == -1)
              {
                if (dword_10008BA20)
                {
                  __int128 v67 = (os_log_s *)ne_log_obj(v22);
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
                    sub_100066B58();
                  }
                }

                goto LABEL_91;
              }
            }

            else
            {
              int v30 = *(_DWORD *)(*(void *)(v8 + 408) + 1140LL);
              if (v30)
              {
                if (*(_BYTE *)(v8 + 81) == 4)
                {
                  if (dword_10008BA20)
                  {
                    uint64_t v31 = (os_log_s *)ne_log_obj(v22);
                    uint64_t v22 = os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG);
                    if ((_DWORD)v22) {
                      sub_100066AD0(v84, (uint64_t)v72, &v85, v31);
                    }
                  }

                  uint64_t v32 = (int *)(*v72 + 188LL);
                }

                else
                {
                  if (dword_10008BA20)
                  {
                    uint64_t v33 = (os_log_s *)ne_log_obj(v22);
                    uint64_t v22 = os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG);
                    if ((_DWORD)v22) {
                      sub_100066B14(v82, (uint64_t)v73, v83, v33);
                    }
                  }

                  uint64_t v32 = (int *)(*v73 + 60LL);
                }

                int v30 = *v32;
              }

              *(_DWORD *)(v18 + 36) = v30;
            }

            uint64_t v76 = v16;
            if (*(_WORD *)(a2 + 28))
            {
              unsigned int v34 = 0;
              int v35 = (unsigned __int16 *)v75;
              uint64_t v79 = v18;
              while (1)
              {
                uint64_t v36 = sub_10003A694();
                if (!v36) {
                  break;
                }
                char v37 = v36;
                uint64_t v38 = a2;
                unsigned int v39 = *v35;
                uint64_t v40 = __rev16(v39);
                unsigned int v41 = v35[1];
                unsigned int v42 = __rev16(v41);
                unsigned int v43 = v35[2];
                uint64_t v44 = sub_10000549C(v40, v42);
                *char v37 = v44;
                if ((_DWORD)v44 == -1)
                {
                  if (dword_10008BA20)
                  {
                    int v51 = (os_log_s *)ne_log_obj(v44);
                    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
                      sub_1000669A8();
                    }
                  }

                  free(v37);
                  uint64_t v5 = v78;
                  goto LABEL_91;
                }

                uint64_t v45 = sub_1000052C4(v40, v42);
                LODWORD(v46) = v45;
                if ((_DWORD)v45)
                {
                  if (v43)
                  {
                    uint64_t v46 = __rev16(v43);
                    uint64_t v47 = sub_1000052F4(v40, v42, v46);
                    if ((v47 & 0x80000000) != 0)
                    {
                      if (dword_10008BA20)
                      {
                        char v56 = (os_log_s *)ne_log_obj(v47);
                        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
                          sub_100066A6C(v46, v56, v57, v58, v59, v60, v61, v62);
                        }
                      }

LABEL_90:
                      free(v37);
                      uint64_t v5 = v78;
                      uint64_t v18 = v79;
                      goto LABEL_91;
                    }
                  }
                }

                else if (v43)
                {
                  if (dword_10008BA20)
                  {
                    int v63 = (os_log_s *)ne_log_obj(v45);
                    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
                      sub_100066A40();
                    }
                  }

                  goto LABEL_90;
                }

                v37[1] = v46;
                if ((v39 != 256 || v41 != 4608) && sub_100031190(v40, v42, v46))
                {
                  uint64_t v52 = sub_100005604(v40);
                  if ((_DWORD)v52 == 5) {
                    int v53 = 2;
                  }
                  else {
                    int v53 = v52;
                  }
                  if (dword_10008BA20)
                  {
                    uint64_t v54 = *v37;
                    uint64_t v55 = (os_log_s *)ne_log_obj(v52);
                    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                      sub_1000669D4(v53, v54);
                    }
                  }

                  goto LABEL_90;
                }

                uint64_t v18 = v79;
                uint64_t v22 = (uint64_t)sub_10003A6A0((uint64_t *)(v79 + 8LL * v40 + 48), (uint64_t)v37);
                ++v34;
                a2 = v38;
                v35 += 4;
              }

              uint64_t v5 = v78;
              if (dword_10008BA20)
              {
                uint64_t v50 = (os_log_s *)ne_log_obj(0LL);
                if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
                  sub_10006697C();
                }
              }

              goto LABEL_91;
            }

LABEL_62:
            if (!*(void *)(v18 + 48))
            {
              uint64_t v5 = v78;
              if (dword_10008BA20)
              {
                int v68 = (os_log_s *)ne_log_obj(v22);
                if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
                  sub_1000667DC((uint64_t *)v18);
                }
              }

              goto LABEL_91;
            }

            uint64_t v5 = v78;
            if (!*(void *)(v18 + 56))
            {
              if (dword_10008BA20)
              {
                __int128 v69 = (os_log_s *)ne_log_obj(v22);
                if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
                  sub_100066844((uint64_t *)v18);
                }
              }

              goto LABEL_91;
            }

            if (!*(void *)(v18 + 64))
            {
              if (dword_10008BA20)
              {
                __int128 v70 = (os_log_s *)ne_log_obj(v22);
                if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
                  sub_1000668AC((uint64_t *)v18);
                }
              }

              goto LABEL_91;
            }

            uint64_t v48 = (void *)sub_10003A03C(*(void *)v18, *(void *)(v18 + 8), *(void *)(v18 + 40), 0);
            if (v48 && !*v48 && !*(void *)v18)
            {
              if (dword_10008BA20)
              {
                __int128 v71 = (os_log_s *)ne_log_obj(v48);
                if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
                  sub_100066914((uint64_t *)v18);
                }
              }

              goto LABEL_91;
            }

            sub_10003A500(v18);
            uint64_t result = 0LL;
            int v15 = v77 + 1;
            uint64_t v16 = v76 + 24;
            uint64_t v8 = v74;
          }

          if (dword_10008BA20)
          {
            int v64 = (os_log_s *)ne_log_obj(0LL);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
              sub_100066784();
            }
          }

uint64_t sub_10004A390(uint64_t a1, void *a2, size_t *a3)
{
  *a2 = 0LL;
  if (!*(void *)(*(void *)(a1 + 408) + 1192LL)) {
    return 1LL;
  }
  int v6 = sub_100007974(*(const sockaddr **)(a1 + 56), 0);
  if (!v6)
  {
    if (dword_10008BA20)
    {
      size_t v19 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100066B84();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v7 = v6;
  size_t v8 = (unsigned __int16)(**(_WORD **)(*(void *)(a1 + 408) + 1192LL) + 44);
  int v9 = calloc(1uLL, v8);
  *a2 = v9;
  if (!v9)
  {
    if (dword_10008BA20)
    {
      int v20 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_100066BB0();
      }
    }

    return 0xFFFFFFFFLL;
  }

  ssize_t v10 = v9;
  v9[1] = 256;
  uint64_t v11 = *(void *)(a1 + 56);
  if (*(_BYTE *)(v11 + 1) == 2) {
    *((_DWORD *)v9 + 5) = *(_DWORD *)(v11 + 4);
  }
  *((_DWORD *)v9 + 6) = 0;
  unsigned __int16 v12 = strlen((const char *)v7[5]);
  *(void *)(v10 + 14) = 0LL;
  unsigned int v13 = v10 + 14;
  v13[1] = 0LL;
  if (v12 >= 0xFu) {
    size_t v14 = 15LL;
  }
  else {
    size_t v14 = v12;
  }
  memcpy(v13, (const void *)v7[5], v14);
  int v15 = memcpy( v13 + 2,  *(const void **)(*(void *)(*(void *)(a1 + 408) + 1192LL) + 8LL),  **(void **)(*(void *)(a1 + 408) + 1192LL));
  *a3 = v8;
  if (dword_10008BA20)
  {
    uint64_t v16 = (os_log_s *)ne_log_obj(v15);
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (!v17) {
      return result;
    }
    *(_WORD *)size_t v21 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "IPSec Network Configuration established.\n",  v21,  2u);
  }

  return 0LL;
}

uint64_t sub_10004A54C(int a1, _WORD *a2, size_t a3)
{
  uint64_t v26 = 0LL;
  v25[0] = 528;
  v25[1] = a1;
  uint64_t v5 = sub_100008CE8(0LL, (unint64_t)v25);
  if (!v5)
  {
    if (dword_10008BA20)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_100066BDC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v6 = v5;
  if (!*(_BYTE *)(v5 + 417))
  {
    if (dword_10008BA20)
    {
      unsigned __int16 v12 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_100066C08();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v7 = a3;
  if ((int)a3 >= 1)
  {
    int v7 = a3;
    size_t v8 = a2;
    do
    {
      if ((*v8 & 0x80) == 0)
      {
        uint64_t v9 = bswap32((unsigned __int16)v8[1]) >> 16;
        v7 -= v9;
        size_t v8 = (_WORD *)((char *)v8 + v9);
      }

      v7 -= 4;
      v8 += 2;
    }

    while (v7 > 0);
  }

  if (v7)
  {
    if (dword_10008BA20)
    {
      ssize_t v10 = (os_log_s *)ne_log_obj(v5);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100066C98();
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v15 = sub_10003F4BC(a3 + 8);
  if (!v15)
  {
    if (dword_10008BA20)
    {
      uint64_t v23 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_100066C34();
      }
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v16 = v15;
  *(void *)v15[1] = 0LL;
  uint64_t v17 = v15[1];
  *(_WORD *)(v17 + 2) = bswap32(*(unsigned __int16 *)v15) >> 16;
  *(_BYTE *)(v17 + 4) = 2;
  *(_WORD *)(v17 + 6) = *(unsigned __int8 *)(v6 + 416);
  *(_BYTE *)(v6 + 417) = 0;
  uint64_t v18 = memcpy((void *)(v17 + 8), a2, a3);
  if (dword_10008BA20)
  {
    size_t v19 = (os_log_s *)ne_log_obj(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      sub_100066C60();
    }
  }

  uint64_t v13 = sub_100043EB0(v6, (uint64_t)v16, 14, 1, 0, 0, *(void *)(v6 + 424));
  int v20 = *(void **)(v6 + 424);
  if (v20)
  {
    sub_10003F5BC(v20);
    *(void *)(v6 + 424) = 0LL;
  }

  uint64_t v21 = sub_10004DCA8(v6);
  if (dword_10008BA20)
  {
    uint64_t v22 = (os_log_s *)ne_log_obj(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v24 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "IPSec Extended Authentication sent.\n",  v24,  2u);
    }
  }

  sub_10003F5BC(v16);
  return v13;
}

uint64_t sub_10004A7EC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10004EF10(a1, a2);
  if ((_DWORD)result)
  {
    if (dword_10008BA20)
    {
      int v3 = (os_log_s *)ne_log_obj(result);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_100066CC4();
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

  ;
}

uint64_t *sub_10004A858(uint64_t *a1)
{
  return sub_10003A6C0(a1);
}

void sub_10004A860(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

void sub_10004A870()
{
  qword_10008C6D0 = 0LL;
}

uint64_t sub_10004A87C(int a1, unsigned int a2)
{
  unsigned int v2 = a2 / 0xA;
  if (a1) {
    int v3 = -1;
  }
  else {
    int v3 = -2;
  }
  BOOL v4 = __CFADD__(v3, a2);
  unsigned int v5 = v3 + a2;
  if (!v4) {
    unsigned int v5 = 0;
  }
  int v6 = 8 * v2;
  unsigned int v7 = 9 * v2;
  if (!a1) {
    unsigned int v7 = v6;
  }
  if (a2 >= 0xA) {
    return v7;
  }
  else {
    return v5;
  }
}

uint64_t sub_10004A8BC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (dword_10008BA20)
    {
      unsigned int v2 = (os_log_s *)ne_log_obj(result);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        int v3 = 136315138;
        BOOL v4 = sub_10003C888((const sockaddr *)(v1 + 128));
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "New IKE Session to %s.\n",  (uint8_t *)&v3,  0xCu);
      }
    }

    return sub_10004A978((__int128 *)v1);
  }

  return result;
}

uint64_t sub_10004A978(__int128 *a1)
{
  if (a1)
  {
    unsigned int v2 = calloc(1uLL, 0x6C0uLL);
    uint64_t v3 = (uint64_t)v2;
    if (v2)
    {
      bzero(v2, 0x6C0uLL);
      __int128 v4 = *a1;
      __int128 v5 = a1[1];
      __int128 v6 = a1[2];
      *(_OWORD *)(v3 + 56) = a1[3];
      *(_OWORD *)(v3 + 40) = v6;
      *(_OWORD *)(v3 + 24) = v5;
      *(_OWORD *)(v3 + 8) = v4;
      __int128 v7 = a1[4];
      __int128 v8 = a1[5];
      __int128 v9 = a1[6];
      *(_OWORD *)(v3 + 1memset(v27, 32, 20) = a1[7];
      *(_OWORD *)(v3 + 104) = v9;
      *(_OWORD *)(v3 + 88) = v8;
      *(_OWORD *)(v3 + 72) = v7;
      __int128 v10 = a1[8];
      __int128 v11 = a1[9];
      __int128 v12 = a1[10];
      *(_OWORD *)(v3 + 184) = a1[11];
      *(_OWORD *)(v3 + 168) = v12;
      *(_OWORD *)(v3 + 152) = v11;
      *(_OWORD *)(v3 + 136) = v10;
      __int128 v13 = a1[12];
      __int128 v14 = a1[13];
      __int128 v15 = a1[14];
      *(_OWORD *)(v3 + 248) = a1[15];
      *(_OWORD *)(v3 + 232) = v15;
      *(_OWORD *)(v3 + 216) = v14;
      *(_OWORD *)(v3 + 200) = v13;
      *(_OWORD *)(v3 + 1696) = 0u;
      uint64_t v16 = qword_10008C6D0;
      *(void *)(v3 + 1712) = qword_10008C6D0;
      if (v16) {
        *(void *)(v16 + 17memset(v27, 32, 20) = v3 + 1712;
      }
      qword_10008C6D0 = v3;
      *(void *)(v3 + 17memset(v27, 32, 20) = &qword_10008C6D0;
    }
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v17 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_100066CF0(v17, v18, v19, v20, v21, v22, v23, v24);
      }
    }

    return 0LL;
  }

  return v3;
}

uint64_t sub_10004AA84(uint64_t a1)
{
  for (int i = *(void **)(a1 + 1704); i; int i = *(void **)(a1 + 1704))
    sub_10004AAC4(i);
  while (1)
  {
    uint64_t result = *(void *)(a1 + 1696);
    if (!result) {
      break;
    }
    sub_10004ABA4(result);
  }

  return result;
}

uint64_t sub_10004AAC4(void *a1)
{
  if (a1 && a1[34])
  {
    sub_10003AA98((uint64_t)a1);
    if (a1[32])
    {
      a1[32] = 0LL;
      uint64_t v2 = a1[39];
      if (v2) {
        *(void *)(v2 + 3memset(v27, 32, 20) = a1[40];
      }
      *(void *)a1[40] = v2;
    }

    uint64_t v3 = a1[37];
    if (v3) {
      *(void *)(v3 + 304) = a1[38];
    }
    *(void *)a1[38] = v3;
    uint64_t v4 = a1[34];
    a1[34] = 0LL;
    int v5 = *(_DWORD *)(v4 + 360) - 1;
    *(_DWORD *)(v4 + 360) = v5;
    if (!(*(_DWORD *)(v4 + 352) | v5))
    {
      *(_BYTE *)(v4 + 280) |= 2u;
      sub_10004B95C((unsigned int *)v4);
    }

    sub_100009928(a1);
    return 0LL;
  }

  else
  {
    if (dword_10008BA20)
    {
      __int128 v7 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100066D60(v7, v8, v9, v10, v11, v12, v13, v14);
      }
    }

    return 0xFFFFFFFFLL;
  }

uint64_t sub_10004ABA4(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 440))
  {
    if (*(_BYTE *)(a1 + 80) == 16 && *(void *)(a1 + 448)) {
      sub_10004B724(a1);
    }
    sub_10003AA98(a1);
    uint64_t v2 = *(void *)(a1 + 440);
    uint64_t v3 = *(void *)(a1 + 456);
    if (v3) {
      *(void *)(v3 + 464) = *(void *)(a1 + 464);
    }
    **(void **)(a1 + 464) = v3;
    *(void *)(a1 + 440) = 0LL;
    int v4 = *(_DWORD *)(v2 + 352) - 1;
    *(_DWORD *)(v2 + 352) = v4;
    if (!v4 && !*(_DWORD *)(v2 + 360))
    {
      *(_BYTE *)(v2 + 280) |= 2u;
      sub_10004B95C((unsigned int *)v2);
    }

    sub_100008E44(a1);
    return 0LL;
  }

  else
  {
    if (dword_10008BA20)
    {
      __int128 v6 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100066DD0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    return 0xFFFFFFFFLL;
  }

uint64_t sub_10004AC7C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if (!a1 || !a2)
  {
    if (dword_10008BA20)
    {
      uint64_t v10 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100067128(v10, v11, v12, v13, v14, v15, v16, v17);
      }
    }

    return 0LL;
  }

  int v8 = sub_10003D53C(a2);
  memset(__s2, 0, sizeof(__s2));
  memset(v51, 0, sizeof(v51));
  memset(v52, 0, sizeof(v52));
  memset(v50, 0, sizeof(v50));
  memset(v49, 0, sizeof(v49));
  memset(v47, 0, sizeof(v47));
  memset(v48, 0, sizeof(v48));
  int v9 = *(unsigned __int8 *)(a1 + 1);
  if (v9 == 30)
  {
    __s2[0] = *(sockaddr *)a1;
    sockaddr v18 = __s2[0];
    *(sockaddr *)&__s2[0].sa_data[10] = *(sockaddr *)(a1 + 12);
    v51[0] = v18;
    *(sockaddr *)((char *)v51 + 12) = *(sockaddr *)&__s2[0].sa_data[10];
    v49[0] = v18;
    *(sockaddr *)((char *)v49 + 12) = *(sockaddr *)&__s2[0].sa_data[10];
    v47[0] = v18;
    *(sockaddr *)((char *)v47 + 12) = *(sockaddr *)&__s2[0].sa_data[10];
  }

  else if (v9 == 2)
  {
    __s2[0] = *(sockaddr *)a1;
    v51[0] = __s2[0];
    v49[0] = __s2[0];
    v47[0] = __s2[0];
  }

  sub_10003D630((uint64_t)v51, 0x1F4u);
  sub_10003D630((uint64_t)v49, 0x1194u);
  sub_10003D630((uint64_t)v47, 0);
  int v19 = *(unsigned __int8 *)(a2 + 1);
  if (v19 == 30)
  {
    __s2[8] = *(sockaddr *)a2;
    sockaddr v20 = __s2[8];
    *(sockaddr *)&__s2[8].sa_data[10] = *(sockaddr *)(a2 + 12);
    v52[0] = v20;
    *(sockaddr *)((char *)v52 + 12) = *(sockaddr *)&__s2[8].sa_data[10];
    v50[0] = v20;
    *(sockaddr *)((char *)v50 + 12) = *(sockaddr *)&__s2[8].sa_data[10];
    v48[0] = v20;
    *(sockaddr *)((char *)v48 + 12) = *(sockaddr *)&__s2[8].sa_data[10];
  }

  else if (v19 == 2)
  {
    __s2[8] = *(sockaddr *)a2;
    v52[0] = __s2[8];
    v50[0] = __s2[8];
    v48[0] = __s2[8];
  }

  sub_10003D630((uint64_t)v52, 0x1F4u);
  sub_10003D630((uint64_t)v50, 0x1194u);
  uint64_t v21 = (uint64_t)sub_10003D630((uint64_t)v48, 0);
  if (dword_10008BA20)
  {
    uint64_t v22 = (os_log_s *)ne_log_obj(v21);
    uint64_t v21 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v21) {
      sub_1000670C0((const sockaddr *)a2);
    }
  }

  uint64_t v23 = qword_10008C6D0;
  if (!qword_10008C6D0)
  {
LABEL_50:
    if (a3)
    {
      if (dword_10008BA20)
      {
        unsigned int v34 = (os_log_s *)ne_log_obj(v21);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
          sub_100066E40(__s2);
        }
      }

      return sub_10004A978((__int128 *)__s2);
    }

    return 0LL;
  }

  uint64_t v24 = 0LL;
  do
  {
    uint64_t v25 = v24;
    if (dword_10008BA20)
    {
      uint64_t v26 = (os_log_s *)ne_log_obj(v21);
      uint64_t v21 = os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v21) {
        sub_100067058(v45, v23, &v46, v26);
      }
    }

    if ((*(_BYTE *)(v23 + 280) & 2) != 0
      || (*(_WORD *)(v23 + 264) & 0x20) != 0
      || *(void *)(v23 + 336)
      || *(_DWORD *)(v23 + 344))
    {
      if (dword_10008BA20)
      {
        uint64_t v27 = (os_log_s *)ne_log_obj(v21);
        uint64_t v21 = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v21)
        {
          int v28 = sub_10003C888((const sockaddr *)(v23 + 136));
          int v29 = *(_DWORD *)(v23 + 352);
          int v30 = *(_DWORD *)(v23 + 360);
          *(_DWORD *)uint8_t buf = 136315650;
          uint64_t v40 = v28;
          __int16 v41 = 1024;
          int v42 = v29;
          __int16 v43 = 1024;
          int v44 = v30;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "still searching. skipping... session to %s is already stopped, active ph1 %d ph2 %d.\n",  buf,  0x18u);
        }
      }

uint64_t sub_10004B1D0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(_DWORD **)(result + 64);
    if (v1)
    {
      int v2 = v1[57];
      if (v2 || v1[54])
      {
        uint64_t v3 = *(_DWORD **)(result + 440);
        if (!v3[93]) {
          v3[93] = v2;
        }
        if (!v3[94]) {
          v3[94] = v1[58];
        }
        if (!v3[92])
        {
          int v4 = v1[54];
          if (v4 && (v1[56] - 1) <= 1)
          {
            if (v4 <= v2) {
              int v5 = v2;
            }
            else {
              int v5 = v1[54];
            }
            if (v4 >= v2) {
              int v6 = v2;
            }
            else {
              int v6 = v4;
            }
            if (v2)
            {
              int v2 = v6;
            }

            else
            {
              int v2 = v6;
              if ((v4 & 0x80000000) == 0)
              {
                unsigned int v7 = v5 / 0x14u;
                if (v5 < 6) {
                  int v8 = 1;
                }
                else {
                  int v8 = 3;
                }
                if (v5 <= 59) {
                  unsigned int v7 = v8;
                }
LABEL_33:
                v3[92] = v7;
                return result;
              }
            }
          }

          else if (!v2)
          {
            return result;
          }

          if (v2 < 6) {
            int v9 = 1;
          }
          else {
            int v9 = 3;
          }
          if (v2 <= 59) {
            unsigned int v7 = v9;
          }
          else {
            unsigned int v7 = v2 / 0x14u;
          }
          goto LABEL_33;
        }
      }
    }
  }

  return result;
}

uint64_t sub_10004B2A8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = *(void *)(result + 272);
    if (v2)
    {
      if (!*(_DWORD *)(result + 48) && (*(_WORD *)(v2 + 264) & 4) == 0)
      {
        uint64_t v3 = *(void *)(result + 128);
        if (v3)
        {
          uint64_t result = sub_10000FEB8(v3);
          if ((_DWORD)result)
          {
            uint64_t v4 = v1[16];
LABEL_11:
            uint64_t result = sub_10000FEF8(v4);
            if (!(_DWORD)result) {
              return result;
            }
            *(_WORD *)(v1[34] + 264LL) &= ~4u;
            *(_WORD *)(v1[34] + 264LL) |= 8u;
            uint64_t v5 = v1[34];
            __int16 v6 = *(_WORD *)(v5 + 264) & 0xFFEF;
            goto LABEL_14;
          }
        }

        else
        {
          uint64_t result = v1[15];
          if (!result) {
            return result;
          }
          uint64_t result = sub_10000FEB8(result);
          if ((_DWORD)result)
          {
            uint64_t v4 = v1[15];
            goto LABEL_11;
          }
        }

        *(_WORD *)(v1[34] + 264LL) &= ~4u;
        *(_WORD *)(v1[34] + 264LL) &= ~8u;
        uint64_t v5 = v1[34];
        __int16 v6 = *(_WORD *)(v5 + 264) | 0x10;
LABEL_14:
        *(_WORD *)(v5 + 264) = v6;
      }
    }
  }

  return result;
}

uint64_t sub_10004B374(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    gettimeofday((timeval *)(a1 + 304), 0LL);
    if (*(_DWORD *)(a2 + 24)) {
      *(_WORD *)(a1 + 264) = *(_WORD *)(a1 + 264) & 0xFFE3 | 4;
    }
    *(void *)(a2 + 440) = a1;
    uint64_t v4 = *(void *)(a1 + 1696);
    *(void *)(a2 + 456) = v4;
    if (v4) {
      *(void *)(v4 + 464) = a2 + 456;
    }
    *(void *)(a1 + 1696) = a2;
    *(void *)(a2 + 464) = a1 + 1696;
    ++*(_DWORD *)(a1 + 352);
    int v5 = *(_DWORD *)(a1 + 356);
    if ((v5 || *(_DWORD *)(a2 + 20)) && !*(_DWORD *)(a2 + 24))
    {
      __int16 v6 = *(_WORD *)(a1 + 264);
      if (!v5)
      {
LABEL_20:
        *(_DWORD *)(a1 + 356) = v5 + 1;
        sub_10004B1D0(a2);
        return 0LL;
      }
    }

    else
    {
      __int16 v6 = *(_WORD *)(a1 + 264) | 0x400;
      *(_WORD *)(a1 + 264) = v6;
      if (!v5) {
        goto LABEL_20;
      }
    }

    if ((v6 & 1) != 0 && *(_BYTE *)(a2 + 80) == 16)
    {
      *(_BYTE *)(a2 + 432) |= 1u;
      int v5 = *(_DWORD *)(a1 + 356);
    }

    goto LABEL_20;
  }

  if (dword_10008BA20)
  {
    unsigned int v7 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100067198(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10004B490(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 272)) {
      BOOL v4 = dword_10008BA20 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      int v5 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100067278(v5, v6, v7, v8, v9, v10, v11, v12);
      }
    }

    *(void *)(a2 + 272) = a1;
    uint64_t v13 = *(void *)(a1 + 1704);
    *(void *)(a2 + 296) = v13;
    if (v13) {
      *(void *)(v13 + 304) = a2 + 296;
    }
    *(void *)(a1 + 1704) = a2;
    *(void *)(a2 + 304) = a1 + 1704;
    ++*(_DWORD *)(a1 + 360);
    int v14 = *(_DWORD *)(a1 + 364);
    if (!v14 && !*(_BYTE *)(a2 + 60)) {
      *(_WORD *)(a1 + 264) |= 0x400u;
    }
    if (!*(_DWORD *)(a2 + 48) && v14 && (*(_WORD *)(a1 + 264) & 1) != 0 && *(_BYTE *)(a2 + 61) == 16)
    {
      *(_BYTE *)(a2 + 264) |= 1u;
      int v14 = *(_DWORD *)(a1 + 364);
    }

    *(_DWORD *)(a1 + 364) = v14 + 1;
    sub_10004B2A8(a2);
    return 0LL;
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v16 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_100067208(v16, v17, v18, v19, v20, v21, v22, v23);
      }
    }

    return 0xFFFFFFFFLL;
  }

uint64_t sub_10004B5C4(uint64_t a1, void *a2)
{
  if (!a2)
  {
    if (dword_10008BA20)
    {
      uint64_t v13 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_1000672E8(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (!a2[32])
  {
    if (a2[34] || !sub_10004B490(*(void *)(a1 + 440), (uint64_t)a2))
    {
      sub_10004B69C(a1, a2);
      return 0LL;
    }

    return 0xFFFFFFFFLL;
  }

  if (dword_10008BA20)
  {
    BOOL v4 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100067358(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  if (a2[32] == a1) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_10004B69C(uint64_t a1, void *a2)
{
  if (a2[32]) {
    BOOL v4 = dword_10008BA20 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1000673C8(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }

  a2[32] = a1;
  uint64_t v13 = (void *)(a1 + 448);
  uint64_t v14 = *(void *)(a1 + 448);
  a2[39] = v14;
  if (v14) {
    *(void *)(v14 + 3memset(v27, 32, 20) = a2 + 39;
  }
  void *v13 = a2;
  a2[40] = v13;
}

uint64_t sub_10004B724(uint64_t a1)
{
  if (!a1)
  {
    if (dword_10008BA20)
    {
      uint64_t v7 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100067438(v7, v8, v9, v10, v11, v12, v13, v14);
      }
    }

    return 0LL;
  }

  uint64_t v2 = *(void *)(a1 + 440);
  if (!v2)
  {
    if (dword_10008BA20)
    {
      uint64_t v15 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 136315138;
        uint64_t v21 = "ike_session_update_ph1_ph2tree";
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "invalid parent session in %s.\n",  (uint8_t *)&v20,  0xCu);
      }
    }

    return 0LL;
  }

  uint64_t v3 = *(void *)(v2 + 1696);
  if (!v3)
  {
LABEL_7:
    if (dword_10008BA20)
    {
      BOOL v4 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(vmemset(v27, 32, 20) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "no ph1bind replacement found. NULL ph1.\n",  (uint8_t *)&v20,  2u);
      }
    }

    uint64_t v5 = *(void **)(a1 + 448);
    if (v5)
    {
      do
      {
        uint64_t v6 = (void *)v5[39];
        if (v5[32])
        {
          char v5[32] = 0LL;
          if (v6) {
            v6[40] = v5[40];
          }
          *(void *)v5[40] = v6;
        }

        uint64_t v5 = v6;
      }

      while (v6);
    }

    return 0LL;
  }

  while ((*(_BYTE *)(v3 + 432) & 2) != 0 || (*(_BYTE *)(v3 + 17) & 0x20) == 0)
  {
    uint64_t v3 = *(void *)(v3 + 456);
    if (!v3) {
      goto LABEL_7;
    }
  }

  if (v3 == a1)
  {
    if (dword_10008BA20)
    {
      uint64_t v17 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(vmemset(v27, 32, 20) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "no ph1bind replacement found. same ph1.\n",  (uint8_t *)&v20,  2u);
      }
    }

    uint64_t v18 = *(void **)(a1 + 448);
    if (v18)
    {
      do
      {
        uint64_t v19 = (void *)v18[39];
        if (v18[32])
        {
          v18[32] = 0LL;
          if (v19) {
            v19[40] = v18[40];
          }
          *(void *)v18[40] = v19;
        }

        uint64_t v18 = v19;
      }

      while (v19);
    }

    return a1;
  }

  else
  {
    sub_10004BB28(a1, v3);
  }

  return v3;
}

void sub_10004B95C(unsigned int *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[95];
    if ((_DWORD)v2)
    {
      sub_10003AA44(v2);
      a1[95] = 0;
    }

    uint64_t v3 = a1[96];
    if ((_DWORD)v3)
    {
      sub_10003AA44(v3);
      a1[96] = 0;
    }

    uint64_t v4 = a1[423];
    if ((_DWORD)v4)
    {
      uint64_t v4 = sub_10003AA44(v4);
      a1[423] = 0;
    }

    if ((*((void *)a1 + 38) || a1[78]) && !*((void *)a1 + 42) && !a1[86]) {
      uint64_t v4 = gettimeofday((timeval *)a1 + 21, 0LL);
    }
    if (dword_10008BA20)
    {
      uint64_t v5 = (os_log_s *)ne_log_obj(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315138;
        uint64_t v8 = sub_10003C888((const sockaddr *)(a1 + 34));
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Freeing IKE-Session to %s.\n",  (uint8_t *)&v7,  0xCu);
      }
    }

    uint64_t v6 = *((void *)a1 + 214);
    if (v6) {
      *(void *)(v6 + 17memset(v27, 32, 20) = *((void *)a1 + 215);
    }
    **((void **)a1 + 215) = v6;
    free(a1);
  }

void *sub_10004BA8C(void *result)
{
  if (result[32])
  {
    result[32] = 0LL;
    uint64_t v1 = result[39];
    if (v1) {
      *(void *)(v1 + 3memset(v27, 32, 20) = result[40];
    }
    *(void *)result[40] = v1;
  }

  return result;
}

uint64_t sub_10004BAB4(uint64_t a1)
{
  if (a1)
  {
    for (uint64_t result = *(void *)(a1 + 1696); result; uint64_t result = *(void *)(result + 456))
    {
      if ((*(_BYTE *)(result + 432) & 2) == 0 && (*(_BYTE *)(result + 17) & 0x20) != 0) {
        break;
      }
    }
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v2 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_1000674A8(v2, v3, v4, v5, v6, v7, v8, v9);
      }
    }

    return 0LL;
  }

  return result;
}

void sub_10004BB28(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    if (dword_10008BA20)
    {
      uint64_t v11 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_100067518(v11, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }

  else if (*(void *)(a1 + 440) == *(void *)(a2 + 440))
  {
    uint64_t v19 = *(void *)(a1 + 448);
    while (v19)
    {
      uint64_t v20 = v19;
      uint64_t v19 = *(void *)(v19 + 312);
      if (*(void *)(v20 + 272) != *(void *)(a2 + 440) && dword_10008BA20 != 0)
      {
        uint64_t v22 = (os_log_s *)ne_log_obj(a1);
        a1 = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
        if ((_DWORD)a1) {
          sub_1000675D4(&v25, v26, v22);
        }
      }

      if (*(void *)(v20 + 256) == a2 && dword_10008BA20 != 0)
      {
        uint64_t v24 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          sub_100067588(buf, &v28, v24);
        }
      }

      sub_10004BD64(a2, v20);
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100067610(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }

uint64_t sub_10004BCC0(uint64_t a1)
{
  if (a1 && !*(_DWORD *)(a1 + 48))
  {
    uint64_t v12 = sub_10004BAB4(*(void *)(a1 + 272));
    uint64_t v10 = v12;
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 256);
      if (!v13 || v12 == v13)
      {
        if (!v13) {
          sub_10004B69C(v12, (void *)a1);
        }
      }

      else
      {
        sub_10004BD64(v12, a1);
      }
    }
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_100067680(v2, v3, v4, v5, v6, v7, v8, v9);
      }
    }

    return 0LL;
  }

  return v10;
}

void sub_10004BD64(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 256))
  {
    *(void *)(a2 + 256) = 0LL;
    uint64_t v4 = *(void *)(a2 + 312);
    if (v4) {
      *(void *)(v4 + 3memset(v27, 32, 20) = *(void *)(a2 + 320);
    }
    **(void **)(a2 + 3memset(v27, 32, 20) = v4;
  }

  sub_10004B69C(a1, (void *)a2);
  uint64_t v5 = *(void **)(a2 + 240);
  if (v5)
  {
    sub_10002E08C(v5);
    if ((*(_BYTE *)(a1 + 17) & 0x20) != 0)
    {
      uint64_t v6 = sub_10002E0FC(a1, *(_DWORD *)(a2 + 108));
      *(void *)(a2 + 240) = v6;
      if (dword_10008BA20)
      {
        uint64_t v7 = (os_log_s *)ne_log_obj(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v8 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Phase 1-2 binding changed... recalculated ivm.\n",  v8,  2u);
        }
      }
    }

    else
    {
      *(void *)(a2 + 240) = 0LL;
    }
  }

uint64_t sub_10004BE34(uint64_t a1)
{
  if (!a1)
  {
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_1000676F0(v4, v5, v6, v7, v8, v9, v10, v11);
      }
    }

    return 0LL;
  }

  uint64_t v1 = *(void *)(a1 + 1696);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  do
  {
    if ((*(_BYTE *)(v1 + 432) & 2) == 0)
    {
      int v3 = *(_DWORD *)(v1 + 16);
      if ((v3 & 0x3000) != 0 && (!result || v3 > *(_DWORD *)(result + 16))) {
        uint64_t result = v1;
      }
    }

    uint64_t v1 = *(void *)(v1 + 456);
  }

  while (v1);
  return result;
}

uint64_t sub_10004BEC4(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 1696);
    if (v2)
    {
      while (v2 == a2 || (*(_BYTE *)(v2 + 432) & 2) != 0 || (*(_BYTE *)(v2 + 17) & 0x20) == 0 || !*(_DWORD *)(v2 + 116))
      {
        uint64_t v2 = *(void *)(v2 + 456);
        if (!v2) {
          return 0LL;
        }
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL sub_10004BF08(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (dword_10008BA20)
    {
      int v3 = (os_log_s *)ne_log_obj(0LL);
      BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100067760(v3, v5, v6, v7, v8, v9, v10, v11);
    }

    return 0LL;
  }

  uint64_t v2 = *(void *)(a1 + 1696);
  if (!v2) {
    return 0LL;
  }
  while (v2 == a2 || (*(_BYTE *)(v2 + 432) & 2) != 0 || (*(_BYTE *)(v2 + 17) & 0x10) == 0)
  {
    uint64_t v2 = *(void *)(v2 + 456);
    if (!v2) {
      return 0LL;
    }
  }

  return 1LL;
}

BOOL sub_10004BF88(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (dword_10008BA20)
    {
      int v3 = (os_log_s *)ne_log_obj(0LL);
      BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_1000677D0(v3, v5, v6, v7, v8, v9, v10, v11);
    }

    return 0LL;
  }

  uint64_t v2 = *(void *)(a1 + 1704);
  if (!v2) {
    return 0LL;
  }
  while (v2 == a2
       || *(_DWORD *)(v2 + 48)
       || (*(_BYTE *)(v2 + 264) & 2) != 0
       || *(_DWORD *)(a2 + 52) != *(_DWORD *)(v2 + 52)
       || (*(_BYTE *)(v2 + 57) & 0x20) == 0)
  {
    uint64_t v2 = *(void *)(v2 + 296);
    if (!v2) {
      return 0LL;
    }
  }

  return 1LL;
}

BOOL sub_10004C020(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (dword_10008BA20)
    {
      uint64_t v7 = (os_log_s *)ne_log_obj(0LL);
      BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100067840(v7, v9, v10, v11, v12, v13, v14, v15);
    }

    return 0LL;
  }

  uint64_t v2 = *(void *)(a1 + 1704);
  if (!v2) {
    return 0LL;
  }
  while (1)
  {
    if (dword_10008BA20)
    {
      uint64_t v4 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)a1)
      {
        int v5 = *(_DWORD *)(a2 + 52);
        int v6 = *(_DWORD *)(v2 + 52);
        *(_DWORD *)uint8_t buf = 136315650;
        uint64_t v17 = "ike_session_has_other_negoing_ph2";
        __int16 v18 = 1024;
        int v19 = v5;
        __int16 v20 = 1024;
        int v21 = v6;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s: ph2 sub spid %d, db spid %d\n",  buf,  0x18u);
      }
    }

    if (v2 != a2
      && !*(_DWORD *)(v2 + 48)
      && (*(_BYTE *)(v2 + 264) & 2) == 0
      && *(_DWORD *)(a2 + 52) == *(_DWORD *)(v2 + 52)
      && (*(_BYTE *)(v2 + 57) & 0x10) != 0)
    {
      break;
    }

    uint64_t v2 = *(void *)(v2 + 296);
    if (!v2) {
      return 0LL;
    }
  }

  return 1LL;
}

void sub_10004C198(uint64_t *a1)
{
  uint64_t v1 = a1[55];
  if (v1)
  {
    uint64_t v3 = v1 + 8;
    uint64_t v4 = v1 + 136;
    unsigned int v5 = sub_10003D53C(a1[7]);
    sub_10003D630(v3, v5);
    unsigned int v6 = sub_10003D53C(a1[6]);
    sub_10003D630(v4, v6);
    *(_WORD *)(a1[55] + 264) |= 2u;
    for (int i = *(uint64_t **)(a1[55] + 1704); i; int i = (uint64_t *)i[37])
    {
      uint64_t v8 = *i;
      uint64_t v9 = i[1];
      unsigned int v10 = sub_10003D53C(a1[7]);
      sub_10003D630(v8, v10);
      unsigned int v11 = sub_10003D53C(a1[6]);
      sub_10003D630(v9, v11);
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v12 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      uint64_t v14 = "ike_session_ikev1_float_ports";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "invalid parent session in %s.\n",  (uint8_t *)&v13,  0xCu);
    }
  }

void sub_10004C2DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 272);
  if (!v2 || *(_DWORD *)(a1 + 48))
  {
    if (dword_10008BA20)
    {
      uint64_t v3 = (os_log_s *)ne_log_obj(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_1000678B0(v3, v4, v5, v6, v7, v8, v9, v10);
      }
    }

    return;
  }

  if (*(_DWORD *)(v2 + 1692))
  {
    sub_10003AA44(*(unsigned int *)(v2 + 1692));
    uint64_t v2 = *(void *)(a1 + 272);
    *(_DWORD *)(v2 + 1692) = 0;
  }

  if ((*(_WORD *)(v2 + 264) & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + 280) & 4) == 0) {
      goto LABEL_13;
    }
  }

  else
  {
    gettimeofday((timeval *)(v2 + 320), 0LL);
    *(_WORD *)(*(void *)(a1 + 272) + 264LL) |= 1u;
    uint64_t v2 = *(void *)(a1 + 272);
  }

  sub_10004C48C((int *)v2);
LABEL_13:
  *(_BYTE *)(*(void *)(a1 + 272) + 280LL) &= ~4u;
  *(void *)(*(void *)(a1 + 272) + 296LL) = 0LL;
  sub_10004B2A8(a1);
  if (*(_BYTE *)(a1 + 61) == 16 && *(void *)(a1 + 256))
  {
    *(void *)(a1 + 256) = 0LL;
    uint64_t v11 = *(void *)(a1 + 312);
    if (v11) {
      *(void *)(v11 + 3memset(v27, 32, 20) = *(void *)(a1 + 320);
    }
    **(void **)(a1 + 3memset(v27, 32, 20) = v11;
  }

  uint64_t v12 = sub_100049188(1LL, a1);
  if (dword_10008BA20)
  {
    int v13 = (os_log_s *)ne_log_obj(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(_DWORD *)(a1 + 52);
      int v15 = 136315394;
      uint64_t v16 = "ike_session_ph2_established";
      __int16 v17 = 1024;
      int v18 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s: ph2 established, spid %d\n",  (uint8_t *)&v15,  0x12u);
    }
  }

uint64_t sub_10004C48C(int *a1)
{
  uint64_t v2 = a1[92];
  if ((_DWORD)v2) {
    a1[95] = sub_10003A890(v2, (uint64_t)sub_10004EA18, (uint64_t)a1);
  }
  uint64_t result = a1[93];
  if ((_DWORD)result)
  {
    uint64_t result = (uint64_t)sub_10003A890(result, (uint64_t)sub_10004EBC4, (uint64_t)a1);
    a1[96] = result;
  }

  return result;
}

void *sub_10004C4E0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x4000) != 0)
  {
    uint64_t result = sub_10003A890(1LL, (uint64_t)sub_100025304, a1);
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 112) = (_DWORD)result;
  }

  else
  {
    if ((v2 & 0x2000) != 0) {
      sub_10001ADEC(a1);
    }
    return sub_100023380(a1);
  }

  return result;
}

void sub_10004C53C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = *(void *)(a1 + 440);
      if (v4)
      {
        if (a1 != a2 && v4 == *(void *)(a2 + 440))
        {
          if ((*(_WORD *)(v4 + 264) & 0x400) != 0 && *(_DWORD *)(a1 + 20) == 1) {
            return;
          }
          uint64_t v5 = *(unsigned int *)(a2 + 112);
          if ((_DWORD)v5)
          {
            sub_10003AA44(v5);
            *(_DWORD *)(a2 + ++*(_DWORD *)(result + 112) = 0;
          }

          uint64_t v6 = *(unsigned int *)(a2 + 116);
          if ((_DWORD)v6)
          {
            sub_10003AA44(v6);
            *(_DWORD *)(a2 + 116) = 0;
          }

          *(_BYTE *)(a2 + 432) |= 2u;
          uint64_t v7 = sub_10003C888(*(const sockaddr **)(a2 + 56));
          uint64_t v8 = strdup((const char *)v7);
          uint64_t v9 = sub_10003C888(*(const sockaddr **)(a2 + 48));
          uint64_t v10 = strdup((const char *)v9);
          uint64_t v11 = sub_100024670(a2, 0);
          uint64_t v12 = strdup((const char *)v11);
          if (v8)
          {
            if (v10)
            {
              int v13 = v12;
              if (v12)
              {
                if (dword_10008BA20)
                {
                  int v14 = (os_log_s *)ne_log_obj(v12);
                  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
                  {
                    int v27 = 136315906;
                    uint64_t v28 = v8;
                    __int16 v29 = 2080;
                    int v30 = v10;
                    __int16 v31 = 2080;
                    uint64_t v32 = v13;
                    __int16 v33 = 2080;
                    unsigned int v34 = sub_100024670(a1, 0);
                    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "ISAKMP-SA %s-%s (spi:%s) needs to be deleted, replaced by (spi:%s)\n",  (uint8_t *)&v27,  0x2Au);
                  }
                }

                free(v8);
                free(v10);
                free(v13);
                sub_10004BB28(a2, a1);
                if (*(_DWORD *)(a2 + 20)) {
                  uint64_t v15 = 7LL;
                }
                else {
                  uint64_t v15 = 5LL;
                }
                *(_DWORD *)(a2 + ++*(_DWORD *)(result + 112) = sub_10003A890(v15, (uint64_t)sub_10004C538, a2);
                return;
              }

              if (dword_10008BA20)
              {
                uint64_t v26 = (os_log_s *)ne_log_obj(0LL);
                if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_34;
                }
              }

void sub_10004C7CC(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && *(void *)(a2 + 440) == a1)
  {
    if ((*(_WORD *)(a1 + 264) & 0x400) == 0 || *(_DWORD *)(a2 + 20) != 1)
    {
      uint64_t v11 = *(void *)(a1 + 1696);
      while (v11)
      {
        uint64_t v12 = v11;
        uint64_t v11 = *(void *)(v11 + 456);
        if (v12 != a2 && (*(_BYTE *)(v12 + 432) & 2) == 0)
        {
          uint64_t v13 = *(unsigned int *)(v12 + 112);
          if ((_DWORD)v13)
          {
            sub_10003AA44(v13);
            *(_DWORD *)(v12 + ++*(_DWORD *)(result + 112) = 0;
          }

          uint64_t v14 = *(unsigned int *)(v12 + 116);
          if ((_DWORD)v14)
          {
            sub_10003AA44(v14);
            *(_DWORD *)(v12 + 116) = 0;
          }

          *(_BYTE *)(v12 + 432) |= 2u;
          uint64_t v15 = sub_10003C888(*(const sockaddr **)(v12 + 56));
          uint64_t v16 = strdup((const char *)v15);
          uint64_t v17 = sub_10003C888(*(const sockaddr **)(v12 + 48));
          uint64_t v18 = strdup((const char *)v17);
          if (!v16)
          {
            if (dword_10008BA20)
            {
              uint64_t v23 = (os_log_s *)ne_log_obj(v18);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
LABEL_33:
              }
                sub_10005C498();
            }

uint64_t sub_10004CA28(uint64_t result)
{
  if (!*(_DWORD *)(result + 48))
  {
    uint64_t v1 = result;
    if ((*(_BYTE *)(result + 57) & 0x40) == 0)
    {
      uint64_t v2 = *(unsigned int *)(result + 64);
      if ((_DWORD)v2)
      {
        uint64_t v2 = sub_10003AA44(v2);
        *(_DWORD *)(v1 + 64) = 0;
      }

      if (dword_10008BA20)
      {
        uint64_t v3 = (os_log_s *)ne_log_obj(v2);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          sub_100067A00((int *)(v1 + 56), v1, v3);
        }
      }

      if ((*(_BYTE *)(v1 + 57) & 0x20) != 0)
      {
        sub_10001B34C(v1);
        uint64_t v4 = *(void *)(v1 + 128);
        if (v4)
        {
          for (int i = *(unsigned int **)(v4 + 32); i; int i = (unsigned int *)*((void *)i + 9))
          {
            if (i[14])
            {
              int v6 = *(_DWORD *)(qword_10008B848 + 32);
              char v7 = sub_10002F5C8(*i);
              sub_100040DD0(v6, v7, 0LL, *(unsigned __int8 **)v1, *(unsigned __int8 **)(v1 + 8), i[7]);
            }
          }
        }
      }

      sub_100027414((uint64_t *)v1);
      return sub_10004AAC4((void *)v1);
    }
  }

  return result;
}

void sub_10004CB1C(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && *(void *)(a2 + 272) == a1 && !*(_DWORD *)(a2 + 48))
  {
    if ((*(_WORD *)(a1 + 264) & 0x400) == 0 || *(_BYTE *)(a2 + 60) != 1)
    {
      uint64_t v11 = *(void *)(a1 + 1704);
      while (v11)
      {
        uint64_t v12 = v11;
        uint64_t v11 = *(void *)(v11 + 296);
        if (v12 != a2 && *(_DWORD *)(v12 + 52) == *(_DWORD *)(a2 + 52))
        {
          char v13 = *(_BYTE *)(v12 + 264);
          if ((v13 & 2) == 0)
          {
            uint64_t v14 = *(unsigned int *)(v12 + 64);
            if ((_DWORD)v14)
            {
              uint64_t v14 = sub_10003AA44(v14);
              *(_DWORD *)(v12 + 64) = 0;
              char v13 = *(_BYTE *)(v12 + 264);
            }

            *(_BYTE *)(v12 + 264) = v13 | 2;
            if (dword_10008BA20)
            {
              uint64_t v15 = (os_log_s *)ne_log_obj(v14);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v16 = sub_100030080( *(const sockaddr **)v12,  *(const sockaddr **)(v12 + 8),  *(unsigned __int8 *)(v12 + 104),  *(_DWORD *)(v12 + 52),  0LL);
                *(_DWORD *)uint8_t buf = 136315138;
                uint64_t v19 = v16;
                _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "IPsec-SA needs to be deleted: %s\n",  buf,  0xCu);
              }
            }

            if (*(_BYTE *)(v12 + 60)) {
              uint64_t v17 = 5LL;
            }
            else {
              uint64_t v17 = 3LL;
            }
            *(_DWORD *)(v12 + 64) = sub_10003A890(v17, (uint64_t)sub_10004CB18, v12);
          }
        }
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v3 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100067A9C(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }

void sub_10004CCE8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 336) || *(_DWORD *)(a1 + 344))
    {
      if (dword_10008BA20)
      {
        uint64_t v3 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = 136315138;
          uint64_t v14 = "ike_session_stopped_by_controller";
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "already stopped %s.\n",  (uint8_t *)&v13,  0xCu);
        }
      }
    }

    else
    {
      *(_WORD *)(a1 + 264) |= 0x20u;
      gettimeofday((timeval *)(a1 + 336), 0LL);
      if (!*(void *)(a1 + 296)) {
        *(void *)(a1 + 296) = a2;
      }
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100067B0C(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

void sub_10004CE0C(unint64_t a1, int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = qword_10008C6D0;
    while (v3)
    {
      while (1)
      {
        uint64_t v7 = v3;
        uint64_t v3 = *(void *)(v3 + 1712);
        unint64_t v8 = v7 + 136;
        if (a2) {
          break;
        }
LABEL_8:
        sub_10004CCE8(v7, a3);
        if (!v3) {
          return;
        }
      }

LABEL_5:
      ;
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v9 = (os_log_s *)ne_log_obj(0LL);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100067B7C(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }

      IOAllowPowerChange(dword_10008C6FC, notificationID);
      break;
    case 2u:
      if (dword_10008BA20)
      {
        uint64_t v9 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
          sub_1000685EC();
        }
      }

      byte_10008B284 = 0;
      *(void *)&xmmword_10008C6E0 = 0LL;
      break;
    case 9u:
      uint64_t v11 = sub_10003A988();
      *((void *)&xmmword_10008C6E0 + 1) = v11;
      if ((void)xmmword_10008C6E0)
      {
        if (dword_10008BA20)
        {
          uint64_t v12 = (os_log_s *)ne_log_obj(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
            sub_10006869C();
          }
        }
      }

      else if (dword_10008BA20)
      {
        uint64_t v15 = (os_log_s *)ne_log_obj(v11);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          sub_100068670();
        }
      }

      break;
    case 0xBu:
      if (byte_10008B284 == 1)
      {
        if (dword_10008BA20)
        {
          uint64_t v13 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
            sub_100068618();
          }
        }

        byte_10008B284 = 0;
      }

      else if (dword_10008BA20)
      {
        uint64_t v14 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          sub_100068644();
        }
      }

      break;
    default:
      if (dword_10008BA20)
      {
        uint64_t v10 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          sub_100068550(a3, v10);
        }
      }

      break;
  }

  dispatch_async_f(&_dispatch_main_q, &unk_10008C6F8, (dispatch_function_t)sub_10004F4A0);
}

uint64_t sub_10004CEC0(uint64_t result)
{
  for (i = *(void *)(result + 1696); i; uint64_t result = sub_10004ABA4(v2))
  {
    uint64_t v2 = i;
    uint64_t i = *(void *)(i + 456);
    if (dword_10008BA20)
    {
      uint64_t v3 = (os_log_s *)ne_log_obj(result);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "deleteallph1 of given session: got a ph1 handler...\n",  v5,  2u);
      }
    }

    int v4 = sub_10000B328(v2);
    sub_1000488E4(0xEu, 1u, v4, 0, 0LL);
  }

  return result;
}

void sub_10004CF80(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 440)) != 0)
  {
    uint64_t v2 = *(void *)(v1 + 1704);
    if (v2)
    {
      do
      {
        uint64_t v3 = *(void *)(v2 + 296);
        char v4 = *(_BYTE *)(v2 + 264);
        if ((v4 & 2) == 0)
        {
          uint64_t v5 = *(unsigned int *)(v2 + 64);
          if ((_DWORD)v5)
          {
            uint64_t v5 = sub_10003AA44(v5);
            *(_DWORD *)(v2 + 64) = 0;
            char v4 = *(_BYTE *)(v2 + 264);
          }

          *(_BYTE *)(v2 + 264) = v4 | 2;
          if (dword_10008BA20)
          {
            uint64_t v6 = (os_log_s *)ne_log_obj(v5);
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v7 = sub_100030080( *(const sockaddr **)v2,  *(const sockaddr **)(v2 + 8),  *(unsigned __int8 *)(v2 + 104),  *(_DWORD *)(v2 + 52),  0LL);
              *(_DWORD *)uint8_t buf = 136315138;
              uint64_t v17 = v7;
              _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "IPsec-SA needs to be purged: %s\n",  buf,  0xCu);
            }
          }

          sub_10004CA28(v2);
        }

        uint64_t v2 = v3;
      }

      while (v3);
    }
  }

  else if (dword_10008BA20)
  {
    unint64_t v8 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100067BEC(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }

void sub_10004D0D8(uint64_t *a1)
{
  uint64_t v1 = a1[34];
  if (v1)
  {
    uint64_t v3 = v1 + 136;
    uint64_t v4 = *a1;
    unsigned int v5 = sub_10003D53C(v1 + 8);
    sub_10003D630(v4, v5);
    uint64_t v6 = a1[1];
    unsigned int v7 = sub_10003D53C(v3);
    sub_10003D630(v6, v7);
  }

  else if (dword_10008BA20)
  {
    unint64_t v8 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = "ike_session_update_ph2_ports";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "invalid parent session in %s.\n",  (uint8_t *)&v9,  0xCu);
    }
  }

uint64_t sub_10004D1F4(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  if ((a2 - 1) > 1 || a1 == 0 || a3 == 0LL || a4 == 0 || (_DWORD)a5 == 0)
  {
    if (dword_10008BA20)
    {
      int v9 = (os_log_s *)ne_log_obj(a1);
      uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result) {
        return result;
      }
      sub_100067C5C(v9, v11, v12, v13, v14, v15, v16, v17);
    }

    return 0LL;
  }

  *a3 = 0;
  uint64_t v18 = *(void *)(a1 + 1704);
  if (!v18) {
    return 0LL;
  }
  uint64_t result = 0LL;
  while (1)
  {
    uint64_t v19 = *(void *)(v18 + 128);
    if (v19)
    {
      uint64_t v20 = *(void *)(v19 + 32);
      if (v20) {
        break;
      }
    }

void sub_10004D2E8(uint64_t a1, int a2, void *__src, unsigned int a4)
{
  if ((a2 - 3) >= 0xFFFFFFFE && a1 != 0 && __src != 0LL)
  {
    uint64_t v14 = a1;
    if ((*(_WORD *)(a1 + 264) & 0x21) != 1 || *(void *)(a1 + 336) || *(_DWORD *)(a1 + 344))
    {
      if (dword_10008BA20)
      {
        uint64_t v15 = (os_log_s *)ne_log_obj(a1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint8_t buf = 136315138;
          uint64_t v50 = "ike_session_update_traffic_idle_status";
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "dropping update on invalid session in %s.\n",  buf,  0xCu);
        }
      }

      return;
    }

    if (a4)
    {
      uint64_t v19 = 0LL;
      int v20 = 0;
      uint64_t v47 = (void *)(a1 + 736);
      uint64_t v48 = (void *)(a1 + 1384);
      int v21 = 1;
      while (1)
      {
        if (a2 == 1)
        {
          uint64_t v22 = *(unsigned int *)(v14 + 392);
          if ((_DWORD)v22)
          {
            uint64_t v23 = &__src[5 * v19];
            int v26 = *v23;
            uint64_t v24 = v23 + 4;
            int v25 = v26;
            __int16 v27 = v47;
            do
            {
              if (v25 == *((_DWORD *)v27 - 4))
              {
                if (*v24 != *v27) {
                  int v21 = 0;
                }
                int v20 = 1;
              }

              v27 += 5;
              --v22;
            }

            while (v22);
          }
        }

        else
        {
          uint64_t v28 = *(unsigned int *)(v14 + 1044);
          if ((_DWORD)v28)
          {
            __int16 v29 = &__src[5 * v19];
            int v32 = *v29;
            int v30 = v29 + 4;
            int v31 = v32;
            __int16 v33 = v48;
            do
            {
              if (v31 == *((_DWORD *)v33 - 4))
              {
                if (*v30 != *v33) {
                  int v21 = 0;
                }
                int v20 = 1;
              }

              v33 += 5;
              --v28;
            }

            while (v28);
          }
        }

        if (v20 || !__src[5 * v19 + 2]) {
          goto LABEL_43;
        }
        if (!dword_10008BA20) {
          goto LABEL_42;
        }
        unsigned int v34 = (os_log_s *)ne_log_obj(a1);
        a1 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
        int v21 = 0;
        if ((_DWORD)a1) {
          break;
        }
LABEL_43:
        if (++v19 == a4) {
          goto LABEL_46;
        }
      }

      *(_DWORD *)uint8_t buf = 67109120;
      LODWORD(v50) = a2;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "new SA: dir %d....\n", buf, 8u);
LABEL_42:
      int v21 = 0;
      goto LABEL_43;
    }

    int v21 = 1;
LABEL_46:
    size_t v35 = 40LL * a4;
    if (a2 == 1)
    {
      *(_OWORD *)(v14 + 1008) = 0u;
      *(_OWORD *)(v14 + 1024) = 0u;
      *(_OWORD *)(v14 + 976) = 0u;
      *(_OWORD *)(v14 + 992) = 0u;
      *(_OWORD *)(v14 + 944) = 0u;
      *(_OWORD *)(v14 + 960) = 0u;
      *(_OWORD *)(v14 + 912) = 0u;
      *(_OWORD *)(v14 + 928) = 0u;
      *(_OWORD *)(v14 + 880) = 0u;
      *(_OWORD *)(v14 + 896) = 0u;
      *(_OWORD *)(v14 + 848) = 0u;
      *(_OWORD *)(v14 + 864) = 0u;
      *(_OWORD *)(v14 + 816) = 0u;
      *(_OWORD *)(v14 + 832) = 0u;
      *(_OWORD *)(v14 + 784) = 0u;
      *(_OWORD *)(v14 + 800) = 0u;
      *(_OWORD *)(v14 + 752) = 0u;
      *(_OWORD *)(v14 + 768) = 0u;
      *(_OWORD *)(v14 + 7memset(v27, 32, 20) = 0u;
      *(_OWORD *)(v14 + 736) = 0u;
      time_t v36 = (time_t)memmove((void *)(v14 + 720), __src, v35);
      *(_DWORD *)(v14 + 392) = a4;
      if (!v21)
      {
        __int16 v37 = 192;
LABEL_51:
        *(_WORD *)(v14 + 264) |= v37;
        time_t v36 = time(0LL);
        *(void *)(v14 + 272) = v36;
      }
    }

    else
    {
      *(_OWORD *)(v14 + 1656) = 0u;
      *(_OWORD *)(v14 + 1672) = 0u;
      *(_OWORD *)(v14 + 1624) = 0u;
      *(_OWORD *)(v14 + 1640) = 0u;
      *(_OWORD *)(v14 + 1592) = 0u;
      *(_OWORD *)(v14 + 1608) = 0u;
      *(_OWORD *)(v14 + 1560) = 0u;
      *(_OWORD *)(v14 + 1576) = 0u;
      *(_OWORD *)(v14 + 1528) = 0u;
      *(_OWORD *)(v14 + 1544) = 0u;
      *(_OWORD *)(v14 + 1496) = 0u;
      *(_OWORD *)(v14 + 1512) = 0u;
      *(_OWORD *)(v14 + 1464) = 0u;
      *(_OWORD *)(v14 + 1480) = 0u;
      *(_OWORD *)(v14 + 1432) = 0u;
      *(_OWORD *)(v14 + 1448) = 0u;
      *(_OWORD *)(v14 + 1400) = 0u;
      *(_OWORD *)(v14 + 1416) = 0u;
      *(_OWORD *)(v14 + 1368) = 0u;
      *(_OWORD *)(v14 + 1384) = 0u;
      time_t v36 = (time_t)memmove((void *)(v14 + 1368), __src, v35);
      *(_DWORD *)(v14 + 1044) = a4;
      if (!v21)
      {
        __int16 v37 = 768;
        goto LABEL_51;
      }
    }

    unsigned int v38 = *(_DWORD *)(v14 + 376);
    if (v38 <= 1 && (*(_WORD *)(v14 + 264) & 0x80) != 0)
    {
      if (!dword_10008BA20) {
        goto LABEL_63;
      }
      unsigned int v39 = (os_log_s *)ne_log_obj(v36);
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_63;
      }
      int v43 = *(_DWORD *)(v14 + 376);
      int v44 = *(_DWORD *)(v14 + 372);
      *(_DWORD *)uint8_t buf = 136315650;
      uint64_t v50 = "ike_session_monitor_idle";
      __int16 v51 = 1024;
      int v52 = v43;
      __int16 v53 = 1024;
      int v54 = v44;
      int v42 = "%s: restart idle-timeout because peer sent data. monitoring dir %d. idle timer %d s\n";
    }

    else
    {
      if ((v38 | 2) != 2 || (*(_WORD *)(v14 + 264) & 0x200) == 0) {
        return;
      }
      if (!dword_10008BA20) {
        goto LABEL_63;
      }
      unsigned int v39 = (os_log_s *)ne_log_obj(v36);
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_63;
      }
      int v40 = *(_DWORD *)(v14 + 376);
      int v41 = *(_DWORD *)(v14 + 372);
      *(_DWORD *)uint8_t buf = 136315650;
      uint64_t v50 = "ike_session_monitor_idle";
      __int16 v51 = 1024;
      int v52 = v40;
      __int16 v53 = 1024;
      int v54 = v41;
      int v42 = "%s: restart idle-timeout because i sent data. monitoring dir %d. idle times %d s\n";
    }

    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v42, buf, 0x18u);
LABEL_63:
    uint64_t v45 = *(unsigned int *)(v14 + 384);
    if ((_DWORD)v45)
    {
      sub_10003AA44(v45);
      *(_DWORD *)(v14 + 384) = 0;
    }

    int v46 = *(_DWORD *)(v14 + 372);
    if (v46) {
      *(_DWORD *)(v14 + 384) = sub_10003A890(v46, (uint64_t)sub_10004EBC4, v14);
    }
    *(_WORD *)(v14 + 264) &= 0xFD7Fu;
    return;
  }

  if (dword_10008BA20)
  {
    uint64_t v6 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100067CCC(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

uint64_t sub_10004D770(uint64_t result, char *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    __int128 v11 = 0uLL;
    *(_BYTE *)(result + 280) |= 2u;
    sub_10004CCE8(result, (uint64_t)a2);
    uint64_t result = *(unsigned int *)(v3 + 384);
    if ((_DWORD)result)
    {
      uint64_t result = sub_10003AA44(result);
      *(_DWORD *)(v3 + 384) = 0;
    }

    uint64_t v4 = *(void *)(v3 + 1704);
    if (v4)
    {
      do
      {
        uint64_t v5 = *(void *)(v4 + 296);
        if ((*(_BYTE *)(v4 + 57) & 0x20) != 0) {
          sub_10001B34C(v4);
        }
        uint64_t result = (uint64_t)sub_1000258C8((void *)v4);
        uint64_t v4 = v5;
      }

      while (v5);
    }

    uint64_t v6 = *(void *)(v3 + 1696);
    if (v6)
    {
      do
      {
        if (*(_DWORD *)(v6 + 28)) {
          __int128 v11 = *(_OWORD *)(v6 + 28);
        }
        uint64_t v7 = *(void *)(v6 + 456);
        if ((*(_BYTE *)(v6 + 17) & 0x20) != 0) {
          sub_10001ADEC(v6);
        }
        uint64_t result = (uint64_t)sub_100023380(v6);
        uint64_t v6 = v7;
      }

      while (v7);
    }

    if (a2 && (*(_WORD *)(v3 + 264) & 4) != 0 && off_1000884F0[0] != a2 && off_1000884F8[0] != a2)
    {
      if (*(_BYTE *)(v3 + 137) == 2)
      {
        int v8 = *(_DWORD *)(v3 + 140);
      }

      else if ((_DWORD)v11)
      {
        nw_nat64_extract_v4(&v11, v3 + 144, &v10);
        int v8 = v10;
      }

      else
      {
        int v8 = 0;
      }

      if (off_100088508[0] == a2) {
        unsigned int v9 = 50003;
      }
      else {
        unsigned int v9 = 0xFFFF;
      }
      return sub_1000488E4(v9, 0, v8, 0, 0LL);
    }
  }

  return result;
}

BOOL sub_10004D8F0(uint64_t a1)
{
  if (!a1)
  {
    if (dword_10008BA20)
    {
      uint64_t v2 = (os_log_s *)ne_log_obj(0LL);
      BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100067D3C(v2, v4, v5, v6, v7, v8, v9, v10);
    }

    return 0LL;
  }

  uint64_t v1 = *(void *)(a1 + 1696);
  if (!v1) {
    return 0LL;
  }
  while ((*(_BYTE *)(v1 + 432) & 2) != 0 || (*(_BYTE *)(v1 + 17) & 0x10) == 0)
  {
    uint64_t v1 = *(void *)(v1 + 456);
    if (!v1) {
      return 0LL;
    }
  }

  return 1LL;
}

BOOL sub_10004D968(uint64_t a1)
{
  if (!a1)
  {
    if (dword_10008BA20)
    {
      uint64_t v2 = (os_log_s *)ne_log_obj(0LL);
      BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100067DAC(v2, v4, v5, v6, v7, v8, v9, v10);
    }

    return 0LL;
  }

  uint64_t v1 = *(void *)(a1 + 1696);
  if (!v1) {
    return 0LL;
  }
  while ((*(_BYTE *)(v1 + 432) & 2) != 0 || (*(_BYTE *)(v1 + 17) & 0x20) == 0)
  {
    uint64_t v1 = *(void *)(v1 + 456);
    if (!v1) {
      return 0LL;
    }
  }

  return 1LL;
}

BOOL sub_10004D9E0(uint64_t a1)
{
  if (!a1)
  {
    if (dword_10008BA20)
    {
      uint64_t v2 = (os_log_s *)ne_log_obj(0LL);
      BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100067E1C(v2, v4, v5, v6, v7, v8, v9, v10);
    }

    return 0LL;
  }

  uint64_t v1 = *(void *)(a1 + 1704);
  if (!v1) {
    return 0LL;
  }
  while ((*(_BYTE *)(v1 + 264) & 2) != 0 || (*(_BYTE *)(v1 + 57) & 0x10) == 0)
  {
    uint64_t v1 = *(void *)(v1 + 296);
    if (!v1) {
      return 0LL;
    }
  }

  return 1LL;
}

BOOL sub_10004DA58(uint64_t a1)
{
  if (!a1)
  {
    if (dword_10008BA20)
    {
      uint64_t v2 = (os_log_s *)ne_log_obj(0LL);
      BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100067E8C(v2, v4, v5, v6, v7, v8, v9, v10);
    }

    return 0LL;
  }

  uint64_t v1 = *(void *)(a1 + 1704);
  if (!v1) {
    return 0LL;
  }
  while ((*(_BYTE *)(v1 + 264) & 2) != 0 || (*(_BYTE *)(v1 + 57) & 0x20) == 0)
  {
    uint64_t v1 = *(void *)(v1 + 296);
    if (!v1) {
      return 0LL;
    }
  }

  return 1LL;
}

void sub_10004DAD0(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 272)) != 0)
  {
    uint64_t v2 = *(void *)(v1 + 1696);
    if (v2)
    {
      do
      {
        uint64_t v3 = *(void *)(v2 + 456);
        if ((*(_BYTE *)(v2 + 17) & 0x20) != 0) {
          sub_10001ADEC(v2);
        }
        sub_100023380(v2);
        uint64_t v2 = v3;
      }

      while (v3);
    }
  }

  else if (dword_10008BA20)
  {
    uint64_t v4 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100067EFC(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

BOOL sub_10004DB54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 272);
  BOOL result = 0;
  if (v1)
  {
    __int16 v2 = *(_WORD *)(v1 + 264);
    if ((v2 & 0x400) != 0 && (v2 & 4) != 0 && (*(_BYTE *)(a1 + 264) & 1) != 0) {
      return 1;
    }
  }

  return result;
}

BOOL sub_10004DB80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 440);
  BOOL result = 0;
  if (v1)
  {
    __int16 v2 = *(_WORD *)(v1 + 264);
    if ((v2 & 0x400) != 0 && (v2 & 4) != 0 && (*(_BYTE *)(a1 + 432) & 1) != 0) {
      return 1;
    }
  }

  return result;
}

BOOL sub_10004DBAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 440);
  return v1 && (*(_WORD *)(v1 + 264) & 0x400) != 0;
}

BOOL sub_10004DBCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 272);
  return v1 && (*(_WORD *)(v1 + 264) & 0x400) != 0;
}

void *sub_10004DBEC(void *result)
{
  uint64_t v1 = result[55];
  if (v1 && (~*(unsigned __int16 *)(v1 + 264) & 0x404) == 0 && !*(_DWORD *)(v1 + 1692))
  {
    __int16 v2 = result;
    BOOL result = sub_10003A890(300LL, (uint64_t)sub_10004DC40, v1);
    *(_DWORD *)(v2[55] + 1692LL) = (_DWORD)result;
  }

  return result;
}

void *sub_10004DC40(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 1692);
  if ((_DWORD)v2)
  {
    sub_10003AA44(v2);
    *(_DWORD *)(a1 + 1692) = 0;
  }

  if (!sub_10004DA58(a1)) {
    return (void *)sub_10004D770(a1, off_100088510[0]);
  }
  BOOL result = sub_10003A890(300LL, (uint64_t)sub_10004DC40, a1);
  *(_DWORD *)(a1 + 1692) = (_DWORD)result;
  return result;
}

uint64_t sub_10004DCA8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 440);
  if (v1)
  {
    uint64_t v2 = result;
    BOOL result = *(unsigned int *)(v1 + 1692);
    if ((_DWORD)result)
    {
      BOOL result = sub_10003AA44(result);
      *(_DWORD *)(*(void *)(v2 + 440) + 1692LL) = 0;
    }
  }

  return result;
}

uint64_t sub_10004DCE0(void *a1, void *a2)
{
  uint64_t v4 = a1[24];
  if (v4)
  {
    uint64_t v5 = a2[24];
    if (v5)
    {
      if (*(void *)v4 == *(void *)v5 && !memcmp(*(const void **)(v4 + 8), *(const void **)(v5 + 8), *(void *)v4))
      {
        uint64_t v29 = a1[25];
        if (v29)
        {
          uint64_t v30 = a2[25];
          if (v30)
          {
            if (*(void *)v29 == *(void *)v30
              && !memcmp(*(const void **)(v29 + 8), *(const void **)(v30 + 8), *(void *)v29))
            {
              return 0LL;
            }
          }
        }
      }
    }
  }

  uint64_t v6 = a1[35];
  if (v6)
  {
    uint64_t v7 = a2[35];
    if (v7)
    {
      if (*(void *)v6 == *(void *)v7 && !memcmp(*(const void **)(v6 + 8), *(const void **)(v7 + 8), *(void *)v6))
      {
        uint64_t v31 = a1[36];
        if (v31)
        {
          uint64_t v32 = a2[36];
          if (v32)
          {
            if (*(void *)v31 == *(void *)v32
              && !memcmp(*(const void **)(v31 + 8), *(const void **)(v32 + 8), *(void *)v31))
            {
              return 0LL;
            }
          }
        }
      }
    }
  }

  uint64_t v8 = a2[35];
  if (v4)
  {
    if (v8)
    {
      if (*(void *)v4 == *(void *)v8 && !memcmp(*(const void **)(v4 + 8), *(const void **)(v8 + 8), *(void *)v4))
      {
        uint64_t v33 = a1[25];
        if (v33)
        {
          uint64_t v34 = a2[36];
          if (v34)
          {
            if (*(void *)v33 == *(void *)v34
              && !memcmp(*(const void **)(v33 + 8), *(const void **)(v34 + 8), *(void *)v33))
            {
              return 0LL;
            }
          }
        }
      }

      if (*(void *)v4 == *(void *)v8 && !memcmp(*(const void **)(v4 + 8), *(const void **)(v8 + 8), *(void *)v4))
      {
        uint64_t v35 = a1[25];
        if (v35)
        {
          uint64_t v36 = a2[25];
          if (v36)
          {
            if (*(void *)v35 == *(void *)v36
              && !memcmp(*(const void **)(v35 + 8), *(const void **)(v36 + 8), *(void *)v35))
            {
              return 0LL;
            }
          }
        }
      }
    }

    uint64_t v9 = a2[24];
    if (v9)
    {
      if (*(void *)v4 == *(void *)v9 && !memcmp(*(const void **)(v4 + 8), *(const void **)(v9 + 8), *(void *)v4))
      {
        uint64_t v37 = a1[25];
        if (v37)
        {
          uint64_t v38 = a2[36];
          if (v38)
          {
            if (*(void *)v37 == *(void *)v38
              && !memcmp(*(const void **)(v37 + 8), *(const void **)(v38 + 8), *(void *)v37))
            {
              return 0LL;
            }
          }
        }
      }
    }
  }

  if (!v8 || !sub_10004E0E0(v8))
  {
    uint64_t v10 = a2[36];
    if (!v10 || !sub_10004E0E0(v10)) {
      return 0xFFFFFFFFLL;
    }
  }

  uint64_t v11 = a1[24];
  if (v11)
  {
    uint64_t v12 = sub_10003F5F0(v11);
    uint64_t v13 = v12;
    if (v12)
    {
      size_t v14 = v12[1];
      if (*(_BYTE *)v14 == 1) {
        *(_WORD *)(v14 + 2) = 0;
      }
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  uint64_t v16 = a1[25];
  if (v16)
  {
    uint64_t v17 = sub_10003F5F0(v16);
    uint64_t v18 = v17;
    if (v17)
    {
      size_t v19 = v17[1];
      if (*(_BYTE *)v19 == 1) {
        *(_WORD *)(v19 + 2) = 0;
      }
    }

    if (!v13) {
      goto LABEL_45;
    }
LABEL_35:
    int v20 = (uint64_t *)a2[35];
    if (v20)
    {
      size_t v21 = *v13;
      uint64_t v22 = *v20;
      if (*v13 == *v20)
      {
        int v23 = memcmp((const void *)v13[1], (const void *)v20[1], *v13);
        if (v18)
        {
          if (!v23)
          {
            uint64_t v24 = a2[36];
            if (v24)
            {
            }
          }
        }
      }

      int v25 = (void *)a1[24];
      if (v25)
      {
        if (*v25 == v22 && !memcmp((const void *)v13[1], (const void *)v20[1], v21))
        {
          uint64_t v41 = a1[25];
          if (v41)
          {
            uint64_t v42 = a2[25];
            if (v42)
            {
              if (*(void *)v41 == *(void *)v42
                && !memcmp(*(const void **)(v41 + 8), *(const void **)(v42 + 8), *(void *)v41))
              {
                sub_10003F5BC(v13);
                uint64_t v15 = 0LL;
                if (!v18) {
                  return v15;
                }
                goto LABEL_53;
              }
            }
          }
        }
      }
    }

    goto LABEL_45;
  }

  uint64_t v18 = 0LL;
  if (v13) {
    goto LABEL_35;
  }
LABEL_45:
  if (v18)
  {
    uint64_t v26 = a1[24];
    if (v26)
    {
      uint64_t v27 = a2[24];
      if (v27)
      {
        if (*(void *)v26 == *(void *)v27
          && !memcmp(*(const void **)(v26 + 8), *(const void **)(v27 + 8), *(void *)v26))
        {
          unsigned int v39 = (void *)a1[25];
          if (v39)
          {
            uint64_t v40 = a2[36];
            if (v40)
            {
              if (*v39 == *(void *)v40 && !memcmp((const void *)v18[1], *(const void **)(v40 + 8), *v18))
              {
                if (!v13)
                {
LABEL_86:
                  uint64_t v15 = 0LL;
LABEL_53:
                  sub_10003F5BC(v18);
                  return v15;
                }

BOOL sub_10004E0E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(_BYTE *)v1 == 1 && !*(_WORD *)(v1 + 2)) {
    return 1LL;
  }
  if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(a1);
    BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    sub_100067F6C((unsigned __int8 *)v1, v2);
  }

  return 0LL;
}

uint64_t sub_10004E14C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 272);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_WORD *)(v1 + 264) & 0x400) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(a1 + 192);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)(a1 + 200);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = sub_10004E360(v3, v4);
  int v6 = v5;
  if (dword_10008BA20)
  {
    uint64_t v7 = (os_log_s *)ne_log_obj(v5);
    uint64_t v5 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v5) {
      sub_100068128();
    }
  }

  uint64_t v8 = *(void *)(*(void *)(a1 + 272) + 1704LL);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    if (v8 == a1 || (*(_BYTE *)(v8 + 264) & 2) != 0 || (*(_BYTE *)(v8 + 57) & 0x60) == 0 || !*(void *)(v8 + 112)) {
      goto LABEL_17;
    }
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(v5);
      uint64_t v5 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v5) {
        break;
      }
    }

    if (v6) {
      goto LABEL_20;
    }
LABEL_16:
    uint64_t v5 = sub_10004DCE0((void *)a1, (void *)v8);
    if (!(_DWORD)v5) {
      goto LABEL_20;
    }
LABEL_17:
    uint64_t v8 = *(void *)(v8 + 296);
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
  }

  sub_1000680E4(v18, &v19, v9);
  if (!v6) {
    goto LABEL_16;
  }
LABEL_20:
  if (dword_10008BA20)
  {
    uint64_t v10 = (os_log_s *)ne_log_obj(v5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_100068070(v10, v11, v12);
    }
  }

  uint64_t v13 = *(void *)(v8 + 112);
  *(void *)(a1 + ++*(_DWORD *)(result + 112) = v13;
  if (v13) {
    uint64_t v13 = sub_10003A63C(v13);
  }
  if (*(_DWORD *)(a1 + 52))
  {
    if (dword_10008BA20)
    {
      size_t v14 = (os_log_s *)ne_log_obj(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        sub_100068000();
      }
    }
  }

  else
  {
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 52);
  }

  uint64_t v16 = *(void *)(v8 + 280);
  if (v16)
  {
    if (*(void *)(a1 + 280))
    {
      sub_10003F5BC(*(void **)(a1 + 280));
      uint64_t v16 = *(void *)(v8 + 280);
    }

    *(void *)(a1 + 280) = sub_10003F5F0(v16);
  }

  uint64_t result = *(void *)(v8 + 288);
  if (result)
  {
    if (*(void *)(a1 + 288))
    {
      sub_10003F5BC(*(void **)(a1 + 288));
      uint64_t result = *(void *)(v8 + 288);
    }

    uint64_t v17 = sub_10003F5F0(result);
    uint64_t result = 0LL;
    *(void *)(a1 + ++*(_DWORD *)(result + 288) = v17;
  }

  return result;
}

BOOL sub_10004E360(uint64_t a1, uint64_t a2)
{
  return sub_10004F13C(a1) && sub_10004F13C(a2);
}

uint64_t sub_10004E39C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 272);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_WORD *)(v1 + 264) & 0x400) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(a1 + 192);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)(a1 + 200);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = sub_10004E360(v3, v4);
  int v6 = v5;
  if (dword_10008BA20)
  {
    uint64_t v7 = (os_log_s *)ne_log_obj(v5);
    uint64_t v5 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v5) {
      sub_1000682BC();
    }
  }

  uint64_t v8 = *(void *)(*(void *)(a1 + 272) + 1704LL);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    if (v8 == a1 || (*(_BYTE *)(v8 + 264) & 2) != 0 || (*(_BYTE *)(v8 + 57) & 0x60) == 0 || !*(void *)(v8 + 128)) {
      goto LABEL_17;
    }
    if (dword_10008BA20)
    {
      uint64_t v9 = (os_log_s *)ne_log_obj(v5);
      uint64_t v5 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v5) {
        break;
      }
    }

    if (v6) {
      goto LABEL_20;
    }
LABEL_16:
    uint64_t v5 = sub_10004DCE0((void *)a1, (void *)v8);
    if (!(_DWORD)v5) {
      goto LABEL_20;
    }
LABEL_17:
    uint64_t v8 = *(void *)(v8 + 296);
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
  }

  sub_100068278(v18, &v19, v9);
  if (!v6) {
    goto LABEL_16;
  }
LABEL_20:
  if (dword_10008BA20)
  {
    uint64_t v10 = (os_log_s *)ne_log_obj(v5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_100068204(v10, v11, v12);
    }
  }

  uint64_t v13 = sub_100038328(*(void *)(v8 + 128), 1);
  int v15 = *(_DWORD *)(a1 + 52);
  uint64_t v14 = a1 + 52;
  *(void *)(v14 + 68) = v13;
  if (v15)
  {
    if (!dword_10008BA20) {
      return 0LL;
    }
    uint64_t v16 = (os_log_s *)ne_log_obj(v13);
    uint64_t result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      sub_100068194();
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    *(_DWORD *)uint64_t v14 = *(_DWORD *)(v8 + 52);
  }

  return result;
}

uint64_t sub_10004E564(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 440);
  if (v1)
  {
    uint64_t v2 = *(_DWORD **)(result + 88);
    if (v2) {
      LODWORD(v2) = *v2;
    }
    *(_DWORD *)(v1 + ++*(_DWORD *)(result + 288) = (_DWORD)v2;
  }

  return result;
}

uint64_t sub_10004E580(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 440);
  if (v1) {
    return *(unsigned int *)(v1 + 288);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10004E598(uint64_t a1, int a2)
{
  if (a1)
  {
    if ((*(_WORD *)(a1 + 264) & 0x10) != 0)
    {
      if (*(void *)(a1 + 272) && *(_DWORD *)(a1 + 368) && *(_DWORD *)(a1 + 372))
      {
        time_t v7 = time(0LL) - *(void *)(a1 + 272);
        time_t v8 = 2 * *(_DWORD *)(a1 + 368);
        if (v7 > v8)
        {
          if (dword_10008BA20)
          {
            uint64_t v9 = (os_log_s *)ne_log_obj();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              v11[0] = 67109120;
              v11[1] = a2;
              _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "btmm session is idle: drop ph%drekey.\n",  (uint8_t *)v11,  8u);
            }
          }
        }

        if (v7 > v8) {
          return 1LL;
        }
      }
    }

    else if (a2 == 1)
    {
      uint64_t v4 = *(void *)(a1 + 1704);
      if (v4)
      {
        uint64_t v5 = *(void *)(a1 + 1704);
        while ((*(_BYTE *)(v5 + 264) & 2) != 0 || (*(_BYTE *)(v5 + 57) & 0x10) == 0)
        {
          uint64_t v5 = *(void *)(v5 + 296);
          if (!v5)
          {
            while ((*(_BYTE *)(v4 + 264) & 2) != 0 || (*(_BYTE *)(v4 + 57) & 0x20) == 0)
            {
              uint64_t v4 = *(void *)(v4 + 296);
              if (!v4) {
                goto LABEL_12;
              }
            }

            return 0LL;
          }
        }

        return 0LL;
      }

void sub_10004E740(uint64_t a1)
{
  uint64_t v1 = qword_10008C6D0;
  while (v1)
  {
    uint64_t v2 = v1;
    uint64_t v1 = *(void *)(v1 + 1712);
    char v3 = *(_BYTE *)(v2 + 280);
    if ((v3 & 2) != 0)
    {
      if (!dword_10008BA20) {
        continue;
      }
      time_t v8 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (!(_DWORD)a1) {
        continue;
      }
      *(_WORD *)uint64_t v19 = 0;
      uint64_t v9 = v8;
      uint64_t v10 = "skipping sweep of dying session.\n";
      goto LABEL_24;
    }

    uint64_t v4 = *(unsigned int *)(v2 + 1692);
    if ((_DWORD)v4)
    {
      uint64_t v4 = sub_10003AA44(v4);
      *(_DWORD *)(v2 + 1692) = 0;
      char v3 = *(_BYTE *)(v2 + 280);
    }

    if ((v3 & 4) != 0)
    {
      uint64_t v11 = *(unsigned int *)(v2 + 380);
      if ((_DWORD)v11)
      {
        sub_10003AA44(v11);
        *(_DWORD *)(v2 + 380) = 0;
      }

      a1 = *(unsigned int *)(v2 + 384);
      if ((_DWORD)a1)
      {
        a1 = sub_10003AA44(a1);
        *(_DWORD *)(v2 + 384) = 0;
      }

      if (!dword_10008BA20) {
        continue;
      }
      uint64_t v12 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      if (!(_DWORD)a1) {
        continue;
      }
      *(_WORD *)uint64_t v19 = 0;
      uint64_t v9 = v12;
      uint64_t v10 = "skipping sweep of asserted session.\n";
LABEL_24:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, v19, 2u);
      continue;
    }

    if ((*(_WORD *)(v2 + 264) & 0x20) != 0 || *(void *)(v2 + 336) || *(_DWORD *)(v2 + 344))
    {
      if (!dword_10008BA20) {
        goto LABEL_13;
      }
      uint64_t v5 = (os_log_s *)ne_log_obj(v4);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_13;
      }
      *(_WORD *)uint64_t v19 = 0;
      int v6 = v5;
      time_t v7 = "sweeping stopped session.\n";
    }

    else
    {
      uint64_t v13 = *(void *)(v2 + 1696);
      if (v13)
      {
        while ((*(_BYTE *)(v13 + 432) & 2) != 0 || (*(_BYTE *)(v13 + 17) & 0x20) == 0)
        {
          uint64_t v13 = *(void *)(v13 + 456);
          if (!v13) {
            goto LABEL_31;
          }
        }

        goto LABEL_38;
      }

void sub_10004EA18(uint64_t a1)
{
  if (a1 && (*(_WORD *)(a1 + 264) & 0x21) == 1 && !*(void *)(a1 + 336) && !*(_DWORD *)(a1 + 344))
  {
    uint64_t v10 = *(unsigned int *)(a1 + 380);
    if ((_DWORD)v10)
    {
      sub_10003AA44(v10);
      *(_DWORD *)(a1 + 380) = 0;
    }

    uint64_t v11 = sub_100030F68(a1);
    if ((v11 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v12 = (os_log_s *)ne_log_obj(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315138;
          int v16 = "ike_session_traffic_cop";
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "pk_sendget_inbound_sastats failed in %s.\n",  (uint8_t *)&v15,  0xCu);
        }
      }
    }

    uint64_t v13 = sub_10003107C(a1);
    if ((v13 & 0x80000000) != 0)
    {
      if (dword_10008BA20)
      {
        uint64_t v14 = (os_log_s *)ne_log_obj(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315138;
          int v16 = "ike_session_traffic_cop";
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "pk_sendget_outbound_sastats failed in %s.\n",  (uint8_t *)&v15,  0xCu);
        }
      }
    }

    *(_DWORD *)(a1 + 380) = sub_10003A890(*(int *)(a1 + 368), (uint64_t)sub_10004EA18, a1);
  }

  else if (dword_10008BA20)
  {
    uint64_t v2 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100068328(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

uint64_t sub_10004EBC4(uint64_t a1)
{
  return sub_10004D770(a1, off_100088508[0]);
}

uint64_t sub_10004EBD0(uint64_t a1)
{
  uint64_t v1 = &dword_10008BA20;
  if (!a1 || (*(_BYTE *)(a1 + 280) & 2) != 0)
  {
    if (dword_10008BA20)
    {
      uint64_t v30 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_100068398(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }

    return 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 1704);
    while (v2)
    {
      uint64_t v3 = v2;
      uint64_t v2 = *(void *)(v2 + 296);
      char v4 = *(_BYTE *)(v3 + 264);
      if ((v4 & 2) == 0)
      {
        int v5 = *(_DWORD *)(v3 + 56);
        if ((v5 & 0x4000) == 0)
        {
          uint64_t v6 = *(unsigned int *)(v3 + 64);
          if ((_DWORD)v6)
          {
            uint64_t v6 = sub_10003AA44(v6);
            *(_DWORD *)(v3 + 64) = 0;
            char v4 = *(_BYTE *)(v3 + 264);
            int v5 = *(_DWORD *)(v3 + 56);
          }

          *(_BYTE *)(v3 + 264) = v4 | 2;
          if ((v5 & 0x2000) != 0)
          {
            uint64_t v7 = *(void *)(v3 + 128);
            if (v7)
            {
              for (uint64_t i = *(unsigned int **)(v7 + 32); i; uint64_t i = (unsigned int *)*((void *)i + 9))
              {
                if (i[14])
                {
                  if (*v1)
                  {
                    uint64_t v9 = (os_log_s *)ne_log_obj(v6);
                    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v10 = v1;
                      uint64_t v11 = *(unsigned __int8 **)v3;
                      uint64_t v12 = *(const sockaddr **)(v3 + 8);
                      uint64_t v13 = *(unsigned __int8 *)(v3 + 104);
                      unsigned int v14 = *(_DWORD *)(v3 + 52);
                      uint64_t v15 = sub_10002F6B0(i[4]);
                      int v16 = (const sockaddr *)v11;
                      uint64_t v1 = v10;
                      uint64_t v17 = sub_100030080(v16, v12, v13, v14, v15);
                      *(_DWORD *)uint8_t buf = 136315138;
                      uint64_t v40 = v17;
                      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Assert: Phase 2 %s deleted\n",  buf,  0xCu);
                    }
                  }

                  int v18 = *(_DWORD *)(qword_10008B848 + 32);
                  char v19 = sub_10002F5C8(*i);
                  uint64_t v20 = sub_10002F6B0(i[4]);
                  uint64_t v6 = sub_100040DD0(v18, v19, v20, *(unsigned __int8 **)v3, *(unsigned __int8 **)(v3 + 8), i[7]);
                }
              }
            }
          }

          sub_100004344((int *)(v3 + 56), 18432);
          *(_DWORD *)(v3 + 64) = sub_10003A890(3LL, (uint64_t)sub_10004CB18, v3);
        }
      }
    }

    uint64_t v21 = *(void *)(a1 + 1696);
    while (v21)
    {
      uint64_t v22 = v21;
      uint64_t v21 = *(void *)(v21 + 456);
      if ((*(_BYTE *)(v22 + 432) & 2) == 0 && (*(_BYTE *)(v22 + 17) & 0x40) == 0)
      {
        uint64_t v23 = *(unsigned int *)(v22 + 112);
        if ((_DWORD)v23)
        {
          sub_10003AA44(v23);
          *(_DWORD *)(v22 + ++*(_DWORD *)(result + 112) = 0;
        }

        uint64_t v24 = *(unsigned int *)(v22 + 116);
        if ((_DWORD)v24)
        {
          uint64_t v24 = sub_10003AA44(v24);
          *(_DWORD *)(v22 + 116) = 0;
        }

        *(_BYTE *)(v22 + 432) |= 2u;
        if (*v1)
        {
          int v25 = (os_log_s *)ne_log_obj(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v26 = sub_100024670(v22, 0);
            *(_DWORD *)uint8_t buf = 136315138;
            uint64_t v40 = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Assert: Phase 1 %s deleted\n",  buf,  0xCu);
          }
        }

        uint64_t v27 = *(void **)(v22 + 448);
        if (v27)
        {
          do
          {
            uint64_t v28 = (void *)v27[39];
            if (v27[32])
            {
              v27[32] = 0LL;
              if (v28) {
                char v28[40] = v27[40];
              }
              *(void *)v27[40] = v28;
            }

            uint64_t v27 = v28;
          }

          while (v28);
        }

        sub_100004344((int *)(v22 + 16), 17408);
        *(_DWORD *)(v22 + ++*(_DWORD *)(result + 112) = sub_10003A890(5LL, (uint64_t)sub_10004C538, v22);
      }
    }

    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 280) |= 4u;
  }

  return result;
}

uint64_t sub_10004EF10(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v2 = sub_10004AC7C(a1, a2, 0, 0LL);
    if (v2) {
      return sub_10004EBD0(v2);
    }
  }

  else if (dword_10008BA20)
  {
    char v4 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100068408(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  return 0xFFFFFFFFLL;
}

void sub_10004EF80(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 264) & 3) == 1)
  {
    uint64_t v2 = *(void *)(a1 + 256);
    if (v2)
    {
      int v3 = *(_DWORD *)(v2 + 116);
      if (v3)
      {
        BOOL v4 = sub_10003A9B0(v3);
        if (!v4 && !*(_BYTE *)(a1 + 60))
        {
          uint64_t v5 = *(void *)(a1 + 272);
          if (v5)
          {
            if ((*(_WORD *)(v5 + 264) & 0x404) == 0x400
              && *(_DWORD *)(*(void *)(*(void *)(a1 + 256) + 64LL) + 200LL) - *(_DWORD *)(a1 + 72) == 3)
            {
              if (dword_10008BA20)
              {
                uint64_t v6 = (os_log_s *)ne_log_obj(v4);
                if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t v7 = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Many Phase 2 retransmits: try Phase 1 rekey and this Phase 2 to quit earlier.\n",  v7,  2u);
                }
              }

              sub_100025308(*(void *)(a1 + 256), 1);
              *(_DWORD *)(a1 + 72) = 0;
            }
          }
        }
      }
    }
  }

void sub_10004F068(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 432) & 3) == 1
    && !*(_DWORD *)(a1 + 116)
    && (*(_BYTE *)(a1 + 17) & 0x10) != 0
    && !*(_DWORD *)(a1 + 20))
  {
    uint64_t v2 = *(void *)(a1 + 440);
    if (v2)
    {
      if ((*(_WORD *)(v2 + 264) & 0x400) != 0)
      {
        BOOL v3 = sub_10004BF08(v2, a1);
        if (!v3 && *(_DWORD *)(*(void *)(a1 + 64) + 200LL) - *(_DWORD *)(a1 + 124) == 3)
        {
          if (dword_10008BA20)
          {
            BOOL v4 = (os_log_s *)ne_log_obj(v3);
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v5 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Many Phase 1 retransmits: try quit earlier.\n",  v5,  2u);
            }
          }

          *(_DWORD *)(a1 + 124) = 0;
        }
      }
    }
  }

BOOL sub_10004F13C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 8);
  int v2 = *v1;
  if (v2 == 4)
  {
    if (*((_DWORD *)v1 + 2)) {
      goto LABEL_6;
    }
  }

  else if (v2 != 1)
  {
    goto LABEL_6;
  }

  if (!*((_DWORD *)v1 + 1)) {
    return 1LL;
  }
LABEL_6:
  if (dword_10008BA20)
  {
    BOOL v3 = (os_log_s *)ne_log_obj(a1);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    sub_100068478(v1, v3);
  }

  return 0LL;
}

  ;
}

uint64_t sub_10004F1D0()
{
  uint64_t v0 = IORegisterForSystemPower( 0LL,  (IONotificationPortRef *)&qword_10008C708,  (IOServiceInterestCallback)sub_10004F264,  dword_10008C700);
  dword_10008C6FC = v0;
  if ((_DWORD)v0)
  {
    IONotificationPortSetDispatchQueue((IONotificationPortRef)qword_10008C708, &_dispatch_main_q);
    return 0LL;
  }

  else
  {
    if (dword_10008BA20)
    {
      int v2 = (os_log_s *)ne_log_obj(v0);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        sub_100068518();
      }
    }

    return 0xFFFFFFFFLL;
  }

void sub_10004F264(uint64_t a1, int a2, int a3, intptr_t notificationID)
{
  HIDWORD(v5) = a3;
  LODWORD(v5) = a3 + 536870288;
  switch((v5 >> 4))
  {
    case 0u:
      goto LABEL_5;
    case 1u:
      byte_10008B284 = 1;
      time_t v7 = sub_10003A988();
      *(void *)&xmmword_10008C6E0 = v7;
      if (dword_10008BA20)
      {
        uint64_t v8 = (os_log_s *)ne_log_obj(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
          sub_1000685C0();
        }
      }

void sub_10004F47C()
{
}

void sub_10004F4A0(uint64_t a1)
{
  if ((void)xmmword_10008C6E0) {
    BOOL v1 = *((void *)&xmmword_10008C6E0 + 1) == 0LL;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    if (!*((void *)&xmmword_10008C6E0 + 1)) {
      return;
    }
    if (dword_10008BA20)
    {
      int v2 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
        sub_1000686F4();
      }
    }
  }

  else
  {
    if (dword_10008BA20)
    {
      BOOL v3 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        sub_1000686C8();
      }
    }

    qword_10008C6F0 = sub_10003A988();
    sub_10000AE84(qword_10008C6F0);
    *(void *)&xmmword_10008C6E0 = 0LL;
  }

  *((void *)&xmmword_10008C6E0 + 1) = 0LL;
}

void sub_10004F558()
{
  if (!qword_10008C710)
  {
    uint64_t v0 = SCPreferencesCreate(0LL, @"racoon", @"com.apple.ipsec.plist");
    qword_10008C710 = (uint64_t)v0;
    if (v0)
    {
      if (SCPreferencesSetCallback(v0, (SCPreferencesCallBack)sub_10004F5CC, &stru_10008B288))
      {
        if (!SCPreferencesSetDispatchQueue((SCPreferencesRef)qword_10008C710, &_dispatch_main_q)) {
          sub_100068720();
        }
      }
    }
  }

void sub_10004F5CC(uint64_t a1, char a2)
{
  if ((a2 & 2) != 0) {
    sub_100034754();
  }
}

CFDictionaryRef sub_10004F5D8(const __CFDictionary *result)
{
  if (result)
  {
    BOOL v1 = result;
    int valuePtr = 0;
    BOOL result = (const __CFDictionary *)CFDictionaryGetValue(result, @"IKEVersion");
    if (result)
    {
      CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
      if (valuePtr != 1) {
        return 0LL;
      }
      BOOL result = (const __CFDictionary *)CFDictionaryContainsKey(v1, @"ReparseConfFile");
      if ((_DWORD)result)
      {
        BOOL result = (const __CFDictionary *)CFDictionaryGetValue(v1, @"ReparseConfFile");
        if (result)
        {
          BOOL result = (const __CFDictionary *)CFBooleanGetValue(result);
          if ((_DWORD)result)
          {
            sub_1000526B4(30LL);
            *(void *)(qword_10008B848 + 80) = 17LL;
            if (!qword_10008B2B0) {
              qword_10008B2B0 = (uint64_t)CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            }
            int v2 = dword_100088530;
            int v3 = (dword_100088530 + 1) > 1 ? dword_100088530 + 1 : 1;
            dword_100088530 = v3;
            unsigned int v8 = v2;
            BOOL result = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v8);
            if (result)
            {
              BOOL v4 = result;
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
              if (Mutable)
              {
                CFMutableDictionaryRef v6 = Mutable;
                CFDictionaryAddValue((CFMutableDictionaryRef)qword_10008B2B0, v4, Mutable);
                CFRelease(v6);
                CFRelease(v4);
                return (const __CFDictionary *)v8;
              }

              CFRelease(v4);
              return 0LL;
            }
          }
        }
      }
    }
  }

  return result;
}

CFNumberRef sub_10004F748(int a1)
{
  CFNumberRef result = 0LL;
  int valuePtr = a1;
  if (a1)
  {
    if (qword_10008B2B0)
    {
      CFNumberRef result = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (result)
      {
        int v3 = result;
        if (CFDictionaryContainsKey((CFDictionaryRef)qword_10008B2B0, result)) {
          CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10008B2B0, v3);
        }
        CFRelease(v3);
        if (!qword_10008B2B0 || !CFDictionaryGetCount((CFDictionaryRef)qword_10008B2B0)) {
          sub_10003B200();
        }
        return (CFNumberRef)1;
      }
    }
  }

  return result;
}

uint64_t sub_10004F7E0()
{
  uint64_t result = qword_10008B2B0;
  if (qword_10008B2B0) {
    return CFDictionaryGetCount((CFDictionaryRef)qword_10008B2B0) != 0;
  }
  return result;
}

void sub_10004F808()
{
  qword_10008C718 = 0LL;
  qword_10008C720 = (uint64_t)&qword_10008C718;
  if (qword_10008B2B8 != -1) {
    dispatch_once(&qword_10008B2B8, &stru_100086C90);
  }
  mach_service = xpc_connection_create_mach_service( "com.apple.SecureNetworking.IPSec",  (dispatch_queue_t)qword_10008B2C0,  1uLL);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000LL;
  handler[2] = sub_10004F8B8;
  handler[3] = &unk_100086C50;
  void handler[4] = mach_service;
  xpc_connection_set_event_handler(mach_service, handler);
  xpc_connection_resume(mach_service);
}

void sub_10004F8B8(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    if (qword_10008B2B8 != -1) {
      dispatch_once(&qword_10008B2B8, &stru_100086C90);
    }
    xpc_connection_set_target_queue((xpc_connection_t)object, (dispatch_queue_t)qword_10008B2C0);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000LL;
    handler[2] = sub_10004FB4C;
    handler[3] = &unk_100086CB0;
    void handler[4] = object;
    xpc_connection_set_event_handler((xpc_connection_t)object, handler);
    xpc_connection_resume((xpc_connection_t)object);
  }

  else
  {
    int v5 = (int)type;
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      if (dword_10008BA20)
      {
        time_t v7 = (os_log_s *)ne_log_obj(type);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_100068878();
        }
      }

      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      uint64_t v9 = (uint64_t)string;
      if (object == &_xpc_error_connection_invalid)
      {
        if (dword_10008BA20)
        {
          time_t v11 = (os_log_s *)ne_log_obj(string);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
            sub_100068738();
          }
        }

        uint64_t v12 = &qword_10008C718;
        do
          uint64_t v12 = (uint64_t *)*v12;
        while (v12 && v12[2] != *(void *)(a1 + 32));
        sub_10004FAD4((xpc_object_t *)v12);
        xpc_release(*(xpc_object_t *)(a1 + 32));
      }

      else if (object == &_xpc_error_connection_interrupted)
      {
        if (dword_10008BA20)
        {
          uint64_t v13 = (os_log_s *)ne_log_obj(string);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
            sub_100068798();
          }
        }
      }

      else if (dword_10008BA20)
      {
        uint64_t v10 = (os_log_s *)ne_log_obj(string);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_1000687F8((int)object, v9, v10);
        }
      }
    }

    else if (dword_10008BA20)
    {
      CFMutableDictionaryRef v6 = (os_log_s *)ne_log_obj(type);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1000688A4(v5, v6);
      }
    }
  }

void sub_10004FAD4(xpc_object_t *a1)
{
  if (a1)
  {
    xpc_release(a1[2]);
    xpc_object_t v2 = *a1;
    int v3 = &qword_10008C718;
    if (*a1) {
      int v3 = (uint64_t *)*a1;
    }
    v3[1] = (uint64_t)a1[1];
    *(void *)a1[1] = v2;
    free(a1);
  }

void sub_10004FB24(id a1)
{
  qword_10008B2C0 = (uint64_t)dispatch_queue_create("com.apple.SecureNetworking.IPSec.server", 0LL);
}

void sub_10004FB4C(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      if (dword_10008BA20)
      {
        uint64_t v17 = (os_log_s *)ne_log_obj(string);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
          sub_100068B2C();
        }
      }

      int v18 = &qword_10008C718;
      do
        int v18 = (uint64_t *)*v18;
      while (v18 && v18[2] != *(void *)(a1 + 32));
      sub_10004FAD4((xpc_object_t *)v18);
    }

    else if (dword_10008BA20)
    {
      int v5 = (os_log_s *)ne_log_obj(type);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        sub_100068B98();
      }
    }

    return;
  }

  int64_t int64 = xpc_dictionary_get_int64(object, "ipsecopcode");
  int64_t v7 = xpc_dictionary_get_int64(object, "ipsecobjectref");
  int64_t v8 = v7;
  if (int64 == 5)
  {
    *(void *)token.val = 0LL;
    *(void *)&token.val[2] = &token;
    *(void *)&token.val[4] = 0x2000000000LL;
    LOBYTE(token.val[6]) = 0;
    uint64_t v55 = 0LL;
    char v56 = &v55;
    uint64_t v57 = 0x2000000000LL;
    LOBYTE(v58) = 0;
    int64_t v19 = xpc_dictionary_get_int64(object, "ipsecikeid");
    int v20 = v19;
    if ((_DWORD)v19)
    {
      *(void *)block.val = _NSConcreteStackBlock;
      *(void *)&block.val[2] = 0x40000000LL;
      *(void *)&block.val[4] = sub_10005023C;
      *(void *)&block.val[6] = &unk_100086D00;
      LODWORD(v54) = v19;
      p_audit_token_t token = &token;
      __int16 v53 = &v55;
      dispatch_sync(&_dispatch_main_q, &block);
      uint64_t v21 = &qword_10008C718;
      do
        uint64_t v21 = (uint64_t *)*v21;
      while (v21 && *((_DWORD *)v21 + 8) != v20);
      sub_10004FAD4((xpc_object_t *)v21);
    }

    else if (dword_10008BA20)
    {
      uint64_t v24 = (os_log_s *)ne_log_obj(v19);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100068B00();
      }
    }

    int v25 = *(unsigned __int8 *)(*(void *)&token.val[2] + 24LL);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(object);
    if (remote_connection)
    {
      uint64_t v27 = remote_connection;
      xpc_object_t reply = xpc_dictionary_create_reply(object);
      if (reply)
      {
        uint64_t v29 = reply;
        xpc_dictionary_set_int64(reply, "ipsecobjectref", v8);
        xpc_dictionary_set_int64(v29, "ipsecopcode", 4101LL);
        xpc_dictionary_set_BOOL(v29, "reply", v25 != 0);
        xpc_connection_send_message(v27, v29);
        xpc_release(v29);
      }

      else if (dword_10008BA20)
      {
        uint64_t v31 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_100068AD4();
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v30 = (os_log_s *)ne_log_obj(0LL);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_100068AA8();
      }
    }

    _Block_object_dispose(&v55, 8);
    _Block_object_dispose(&token, 8);
  }

  else
  {
    if (int64 == 1)
    {
      uint64_t v55 = 0LL;
      char v56 = &v55;
      uint64_t v57 = 0x2000000000LL;
      int v58 = 0;
      xpc_dictionary_get_audit_token(object, &block);
      audit_token_t token = block;
      SecTaskRef v9 = SecTaskCreateWithAuditToken(0LL, &token);
      if (!v9)
      {
        if (dword_10008BA20)
        {
          uint64_t v23 = (os_log_s *)ne_log_obj(0LL);
          SecTaskRef v9 = (SecTaskRef)os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v9) {
            sub_1000689A0();
          }
        }

        goto LABEL_53;
      }

      uint64_t v10 = v9;
      time_t v11 = (const __CFBoolean *)SecTaskCopyValueForEntitlement( v9,  @"com.apple.private.SecureNetworking.ipsec_ike",  0LL);
      if (v11)
      {
        uint64_t v12 = v11;
        CFTypeID v13 = CFGetTypeID(v11);
        CFTypeID TypeID = CFBooleanGetTypeID();
        if (v13 == TypeID)
        {
          BOOL v15 = CFBooleanGetValue(v12) != 0;
        }

        else
        {
          if (dword_10008BA20)
          {
            uint64_t v32 = (os_log_s *)ne_log_obj(TypeID);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
              sub_100068A7C();
            }
          }

          BOOL v15 = 0;
        }

        CFRelease(v12);
      }

      else
      {
        BOOL v15 = 0;
      }

      CFRelease(v10);
      int v33 = dword_10008BA20;
      if (!v15 && dword_10008BA20)
      {
        uint64_t v34 = (os_log_s *)ne_log_obj(v9);
        SecTaskRef v9 = (SecTaskRef)os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v9) {
          sub_1000689CC();
        }
LABEL_53:
        int v33 = dword_10008BA20;
LABEL_54:
        if (v33)
        {
          uint64_t v35 = (os_log_s *)ne_log_obj(v9);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
            sub_100068974();
          }
        }

        goto LABEL_57;
      }

      if (!v15) {
        goto LABEL_54;
      }
      if (!xpc_dictionary_get_value(object, "ipsecikedict"))
      {
        if (!dword_10008BA20)
        {
LABEL_57:
          int64_t v36 = *((int *)v56 + 6);
          _Block_object_dispose(&v55, 8);
          xpc_connection_t v37 = xpc_dictionary_get_remote_connection(object);
          if (v37)
          {
            uint64_t v38 = v37;
            xpc_object_t v39 = xpc_dictionary_create_reply(object);
            if (v39)
            {
              uint64_t v40 = v39;
              xpc_dictionary_set_int64(v39, "ipsecikeid", v36);
              xpc_dictionary_set_int64(v40, "ipsecobjectref", v8);
              xpc_dictionary_set_int64(v40, "ipsecopcode", 4097LL);
              xpc_dictionary_set_BOOL(v40, "reply", (_DWORD)v36 != 0);
              xpc_connection_send_message(v38, v40);
              xpc_release(v40);
            }
          }

          return;
        }

        uint64_t v50 = (os_log_s *)ne_log_obj(0LL);
        SecTaskRef v9 = (SecTaskRef)os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v9) {
          sub_1000689F8();
        }
        goto LABEL_53;
      }

      uint64_t v41 = (uint64_t *)_CFXPCCreateCFObjectFromXPCObject();
      if (!v41)
      {
        if (dword_10008BA20)
        {
          uint64_t v42 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
            sub_100068A50();
          }
        }
      }

      if (xpc_dictionary_get_value(object, "ipsecchilddict"))
      {
        int v43 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
        if (v43 || !dword_10008BA20) {
          goto LABEL_73;
        }
        int v44 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
          sub_100068A24();
        }
      }

      int v43 = 0LL;
LABEL_73:
      *(void *)block.val = _NSConcreteStackBlock;
      *(void *)&block.val[2] = 0x40000000LL;
      *(void *)&block.val[4] = sub_100050208;
      *(void *)&block.val[6] = &unk_100086CD8;
      p_audit_token_t token = (audit_token_t *)&v55;
      __int16 v53 = v41;
      int v54 = v43;
      dispatch_sync(&_dispatch_main_q, &block);
      if (*((_DWORD *)v56 + 6))
      {
        xpc_connection_t v45 = xpc_dictionary_get_remote_connection(object);
        if (v45)
        {
          xpc_connection_t v46 = v45;
          int v47 = *((_DWORD *)v56 + 6);
          uint64_t v48 = malloc(0x28uLL);
          _OWORD v48[8] = v47;
          *((void *)v48 + 2) = v46;
          *((void *)v48 + 3) = v8;
          xpc_retain(v46);
          uint64_t v49 = (void *)qword_10008C720;
          *(void *)uint64_t v48 = 0LL;
          *((void *)v48 + 1) = v49;
          void *v49 = v48;
          qword_10008C720 = (uint64_t)v48;
        }
      }

      if (v41) {
        CFRelease(v41);
      }
      if (v43) {
        CFRelease(v43);
      }
      goto LABEL_57;
    }

    if (dword_10008BA20)
    {
      uint64_t v22 = (os_log_s *)ne_log_obj(v7);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_100068914();
      }
    }
  }

CFDictionaryRef sub_100050208(uint64_t a1)
{
  uint64_t result = sub_10004F5D8(*(const __CFDictionary **)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (_DWORD)result;
  return result;
}

CFNumberRef sub_10005023C(uint64_t a1)
{
  CFNumberRef result = sub_10004F748(*(_DWORD *)(a1 + 48));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

uint64_t sub_100050278(uint64_t a1, uint64_t a2, __int16 *a3)
{
  int v3 = 0;
  BOOL v4 = &byte_10008BE9C[356];
  dword_10008C738 = 0;
  int v5 = (size_t **)v190;
  dword_10008C728 = -2;
  uint64_t v6 = 200LL;
  unsigned int __src = v190;
  int64_t v7 = v191;
  int64_t v8 = v191;
  while (1)
  {
    *(_WORD *)int64_t v7 = v3;
    if (&v8[2 * v6 - 2] <= v7)
    {
      if ((unint64_t)v6 >> 4 > 0x270
        || ((unint64_t)(2 * v6) >= 0x2710 ? (uint64_t v6 = 10000LL) : (v6 *= 2LL),
            (SecTaskRef v9 = (char *)malloc(10 * v6 + 7)) == 0LL))
      {
        uint64_t v151 = 2LL;
        v152 = "memory exhausted";
        goto LABEL_412;
      }

      uint64_t v10 = v9;
      time_t v11 = v4;
      uint64_t v12 = (v7 - v8) >> 1;
      uint64_t v13 = v12 + 1;
      memcpy(v9, v8, 2 * (v12 + 1));
      a1 = (uint64_t)memcpy(&v10[(2 * v6 + 7) & 0xFFFFFFFFFFFFFFF8LL], __src, 8 * (v12 + 1));
      if (v8 != v191) {
        free(v8);
      }
      if (v6 <= v13)
      {
        uint64_t v151 = 1LL;
LABEL_416:
        free(v10);
        return v151;
      }

      int64_t v7 = &v10[2 * v12];
      int v5 = (size_t **)&v10[8 * v13 - 8 + ((2 * v6 + 7) & 0xFFFFFFFFFFFFFFF8LL)];
      unsigned int __src = &v10[(2 * v6 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      int64_t v8 = v10;
      BOOL v4 = v11;
    }

    int v14 = word_10006A74A[v3];
    if (v14 == -454) {
      goto LABEL_27;
    }
    a1 = *((unsigned int *)v4 + 458);
    if ((_DWORD)a1 == -2)
    {
      a1 = sub_1000527A0(a1, a2, a3);
      *((_DWORD *)v4 + 458) = a1;
    }

    if ((int)a1 <= 0)
    {
      int v15 = 0;
      *((_DWORD *)v4 + 458) = 0;
    }

    else
    {
      int v15 = a1 > 0x1A6 ? 2 : byte_10006ABEA[a1];
    }

    uint64_t v16 = (v15 + v14);
    if (v16 > 0x1DD || v15 != (__int16)word_10006AD92[v16])
    {
LABEL_27:
      unsigned int v17 = word_10006B50A[v3];
      if (!word_10006B50A[v3]) {
        goto LABEL_411;
      }
      goto LABEL_28;
    }

    int v3 = word_10006B14E[v16];
    if (v3 <= 0) {
      break;
    }
    if ((_DWORD)v16 == 46)
    {
      uint64_t v151 = 0LL;
      goto LABEL_413;
    }

    v5[1] = (size_t *)qword_10008C730;
    ++v5;
LABEL_295:
    v7 += 2;
  }

  if (!word_10006B14E[v16])
  {
LABEL_411:
    ++dword_10008C738;
    uint64_t v151 = 1LL;
    v152 = "syntax error";
LABEL_412:
    sub_100054D48((uint64_t)v152);
LABEL_413:
    uint64_t v10 = v8;
    if (v8 == v191) {
      return v151;
    }
    goto LABEL_416;
  }

  unsigned int v17 = -v3;
LABEL_28:
  uint64_t v18 = byte_10006B9AA[v17];
  uint64_t v19 = (uint64_t)v5[1 - v18];
  switch(v17)
  {
    case 0xFu:
      unint64_t v20 = (unint64_t)*(v5 - 1);
      if (v20 >= 5)
      {
        sub_1000543A8("invalid path type %d");
        return 0xFFFFFFFFLL;
      }

      uint64_t v21 = qword_10008B848;
      uint64_t v22 = *(void **)(qword_10008B848 + 8 * v20 + 136);
      if (v22)
      {
        free(v22);
        uint64_t v21 = qword_10008B848;
        unint64_t v20 = (unint64_t)*(v5 - 1);
      }

      uint64_t v23 = strdup((const char *)(*v5)[1]);
      *(void *)(v21 + 8 * v20 + 136) = v23;
      if (*(void *)(qword_10008B848 + 8LL * (void)*(v5 - 1) + 136))
      {
LABEL_110:
        sub_10003F5BC(*v5);
        BOOL v4 = byte_10008BE9C + 356;
        goto LABEL_291;
      }

      if (dword_10008BA20)
      {
        v165 = (os_log_s *)ne_log_obj(v23);
        if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR)) {
          goto LABEL_503;
        }
      }

      goto LABEL_504;
    case 0x11u:
      *(_DWORD *)(qword_10008B848 + 312) = *v5;
      goto LABEL_291;
    case 0x13u:
      sub_100028CC4(__str, 1024, 0, (const char *)(*(v5 - 1))[1]);
      sub_10003F5BC(*(v5 - 1));
      a1 = sub_100054DF8(__str);
      if ((_DWORD)a1) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_291;
    case 0x17u:
      --**v5;
      *(void *)(qword_10008B848 + 8LL * (void)*(v5 - 1) + 176) = *v5;
      if (*(void *)(qword_10008B848 + 8LL * (void)*(v5 - 1) + 176)) {
        goto LABEL_291;
      }
      v155 = __error();
      strerror(*v155);
      sub_1000543A8("failed to set my ident: %s");
      return 0xFFFFFFFFLL;
    case 0x1Au:
      sub_10003469C((const char *)(*v5)[1]);
      goto LABEL_289;
    case 0x1Bu:
      a1 = sub_1000343DC(*(_DWORD *)v5);
      goto LABEL_291;
    case 0x1Fu:
      *(_DWORD *)(qword_10008B848 + 248) = *v5;
      goto LABEL_291;
    case 0x21u:
      *(_DWORD *)(qword_10008B848 + 252) = *v5;
      goto LABEL_291;
    case 0x23u:
      *(_DWORD *)(qword_10008B848 + 256) = *v5;
      goto LABEL_291;
    case 0x25u:
      *(_DWORD *)(qword_10008B848 + 260) = *v5;
      goto LABEL_291;
    case 0x27u:
      *(_DWORD *)(qword_10008B848 + 264) = *v5;
      goto LABEL_291;
    case 0x2Cu:
      uint64_t v24 = (uint64_t)*v5;
      int v25 = 0;
      goto LABEL_62;
    case 0x2Eu:
      uint64_t v24 = (uint64_t)*v5;
      int v25 = 1;
LABEL_62:
      sub_100052478(v24, v25);
      goto LABEL_291;
    case 0x30u:
      sub_1000543A8("admin directive is obsoleted.");
      goto LABEL_291;
    case 0x32u:
    case 0x34u:
    case 0x36u:
      sub_100054338("admin port support not compiled in");
      goto LABEL_291;
    case 0x38u:
      *(_DWORD *)(qword_10008B848 + 308) = 1;
      goto LABEL_291;
    case 0x3Au:
      snprintf(__str, 0xAuLL, "%ld", *v5);
      uint64_t v19 = (uint64_t)sub_10003CF40((const char *)(*(v5 - 1))[1], __str);
      sub_10003F5BC(*(v5 - 1));
      if (!v19) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_291;
    case 0x3Bu:
      uint64_t v26 = calloc(1uLL, 0x10uLL);
      if (!v26)
      {
        sub_1000543A8("failed to allocate remote index struct");
        v156 = *(v5 - 2);
        goto LABEL_463;
      }

      uint64_t v19 = (uint64_t)v26;
      snprintf(__str, 0xAuLL, "%ld", *v5);
      *(void *)(v19 + 8) = sub_10003CF40((const char *)(*(v5 - 2))[1], __str);
      sub_10003F5BC(*(v5 - 2));
      if (*(void *)(v19 + 8))
      {
        *(_DWORD *)uint64_t v19 = *(v5 - 1);
        goto LABEL_291;
      }

      sub_1000543A8("failed to allocate sockaddr storage", v167);
      return 0xFFFFFFFFLL;
    case 0x3Cu:
      uint64_t v19 = 500LL;
      goto LABEL_291;
    case 0x3Du:
    case 0xB5u:
    case 0xB7u:
    case 0xB9u:
    case 0xBAu:
    case 0xBDu:
    case 0x12Bu:
    case 0x12Cu:
      uint64_t v19 = (uint64_t)*v5;
      goto LABEL_291;
    case 0x41u:
      goto LABEL_289;
    case 0x43u:
      goto LABEL_289;
    case 0x47u:
      int v27 = 28678;
      goto LABEL_77;
    case 0x49u:
      int v27 = 28676;
LABEL_77:
      dword_10008C6AC = v27;
      goto LABEL_291;
    case 0x4Du:
      size_t v28 = (*v5)[1];
      uint64_t v29 = byte_10008BE9C;
      goto LABEL_90;
    case 0x4Fu:
      dword_10008BE70 = 0;
      goto LABEL_291;
    case 0x51u:
    case 0x61u:
    case 0x6Fu:
      sub_1000543A8("racoon not configured with --with-libradius");
      goto LABEL_291;
    case 0x53u:
    case 0x63u:
      sub_1000543A8("racoon not configured with --with-libpam");
      goto LABEL_291;
    case 0x55u:
    case 0x5Bu:
    case 0x71u:
      sub_1000543A8("racoon not configured with --with-libldap");
      goto LABEL_291;
    case 0x59u:
      dword_10008BE74 = 0;
      goto LABEL_291;
    case 0x5Du:
      dword_10008BE88 = 0;
      goto LABEL_291;
    case 0x5Fu:
      uint64_t v30 = &xmmword_10008BE38;
      int v31 = 4;
      goto LABEL_223;
    case 0x65u:
      a1 = sub_100044DE4(*(unsigned int *)v5);
      if ((_DWORD)a1) {
        sub_1000543A8("cannot allocate memory for pool");
      }
      goto LABEL_291;
    case 0x67u:
      unsigned int v32 = *(_DWORD *)v5;
      dword_10008C6BC = *(_DWORD *)v5;
      goto LABEL_153;
    case 0x69u:
      dword_10008C6C0 = *v5;
      goto LABEL_291;
    case 0x6Bu:
      dword_10008BE98 = *v5;
      goto LABEL_291;
    case 0x6Du:
      dword_10008BE84 = 0;
      goto LABEL_291;
    case 0x73u:
      size_t v28 = (*v5)[1];
      uint64_t v29 = &byte_10008BE9C[1025];
LABEL_90:
      __strlcpy_chk(v29, v28, 1025LL, 1025LL);
      goto LABEL_289;
    case 0x77u:
      uint64_t v33 = dword_10008BE4C;
      if (dword_10008BE4C > 2)
      {
        sub_1000543A8("No more than %d DNS");
        return 0xFFFFFFFFLL;
      }

      uint64_t v34 = (const char *)(*v5)[1];
      ++dword_10008BE4C;
      goto LABEL_289;
    case 0x7Au:
      uint64_t v35 = dword_10008BE60;
      if (dword_10008BE60 > 3)
      {
        sub_1000543A8("No more than %d WINS");
        return 0xFFFFFFFFLL;
      }

      int64_t v36 = (const char *)(*v5)[1];
      ++dword_10008BE60;
      goto LABEL_289;
    case 0x7Du:
      unsigned int v37 = bswap32(-1 << -(char)*v5);
      if (*v5) {
        unsigned int v38 = v37;
      }
      else {
        unsigned int v38 = 0;
      }
      *(_DWORD *)&__str[4] = v38;
      xpc_object_t v39 = *(v5 - 1);
      goto LABEL_290;
    case 0x80u:
      int v179 = realloc((void *)qword_10008BE78, 8LL * dword_10008BE80 + 8);
      if (!v179) {
        sub_1000543A8("unable to allocate auth group list");
      }
      uint64_t v40 = *v5;
      size_t v41 = **v5;
      uint64_t v42 = malloc(v41 + 1);
      if (!v42)
      {
        sub_1000543A8("unable to allocate auth group name");
        uint64_t v40 = *v5;
        size_t v41 = **v5;
      }

      memcpy(v42, (const void *)v40[1], v41);
      *((_BYTE *)v42 + **v5) = 0;
      int v43 = dword_10008BE80;
      v179[dword_10008BE80] = v42;
      qword_10008BE78 = (uint64_t)v179;
      dword_10008BE80 = v43 + 1;
      goto LABEL_110;
    case 0x83u:
      size_t v44 = **v5;
      if (dword_10008C6B8)
      {
        int v45 = dword_10008C6B8 + v44 + 1;
        xpc_connection_t v46 = realloc((void *)qword_10008C6B0, v45);
        qword_10008C6B0 = (uint64_t)v46;
        if (!v46)
        {
          sub_1000543A8("error allocating splitdns list buffer");
          xpc_connection_t v46 = (_BYTE *)qword_10008C6B0;
        }

        v46[dword_10008C6B8] = 44;
        memcpy((void *)(qword_10008C6B0 + dword_10008C6B8 + 1), (const void *)(*v5)[1], **v5);
      }

      else
      {
        v108 = malloc(v44);
        qword_10008C6B0 = (uint64_t)v108;
        if (!v108)
        {
          sub_1000543A8("error allocating splitdns list buffer");
          v108 = (void *)qword_10008C6B0;
        }

        memcpy(v108, (const void *)(*v5)[1], **v5);
        int v45 = *(_DWORD *)*v5;
      }

      dword_10008C6B8 = v45;
      goto LABEL_289;
    case 0x87u:
      *(_DWORD *)(qword_10008B848 + 268) = *v5;
      goto LABEL_291;
    case 0x89u:
      *(_DWORD *)(qword_10008B848 + 272) = *(_DWORD *)v5 * *((_DWORD *)v5 - 2);
      goto LABEL_291;
    case 0x8Bu:
      *(_DWORD *)(qword_10008B848 + 276) = *v5;
      goto LABEL_291;
    case 0x8Du:
      *(_DWORD *)(qword_10008B848 + 280) = *(_DWORD *)v5 * *((_DWORD *)v5 - 2);
      goto LABEL_291;
    case 0x8Fu:
      *(_DWORD *)(qword_10008B848 + 284) = *(_DWORD *)v5 * *((_DWORD *)v5 - 2);
      goto LABEL_291;
    case 0x91u:
      int v47 = *(_DWORD *)v5 * *((_DWORD *)v5 - 2);
      uint64_t v48 = qword_10008B848;
      *(_DWORD *)(qword_10008B848 + 80) |= 1u;
      *(_DWORD *)(v48 + 84) = v47;
      goto LABEL_291;
    case 0x93u:
      *(_DWORD *)(qword_10008B848 + ++*(_DWORD *)(result + 288) = *(_DWORD *)v5 * *((_DWORD *)v5 - 2);
      goto LABEL_291;
    case 0x95u:
      sub_10003A420();
      qword_10008B2C8 = a1;
      if (a1) {
        goto LABEL_291;
      }
      sub_1000543A8("failed to allocate sainfo", v167);
      return 0xFFFFFFFFLL;
    case 0x96u:
      if (*(void *)(qword_10008B2C8 + 48))
      {
        if (*(void *)(qword_10008B2C8 + 56))
        {
          if (*(void *)(qword_10008B2C8 + 64))
          {
            uint64_t v49 = (uint64_t *)sub_10003A03C( *(void *)qword_10008B2C8,  *(void *)(qword_10008B2C8 + 8),  *(void *)(qword_10008B2C8 + 40),  0);
            if (v49)
            {
              uint64_t v50 = *v49;
              uint64_t v51 = qword_10008B2C8;
              if (!v50 && !*(void *)qword_10008B2C8)
              {
                sub_10003A6C0((uint64_t *)qword_10008B2C8);
                sub_1000543A8("duplicated sainfo: %s");
                return 0xFFFFFFFFLL;
              }
            }

            else
            {
              uint64_t v51 = qword_10008B2C8;
            }

            a1 = sub_10003A500(v51);
            goto LABEL_291;
          }

          sub_10003A6C0((uint64_t *)qword_10008B2C8);
          sub_1000543A8("no compression algorithm at %s");
        }

        else
        {
          sub_10003A6C0((uint64_t *)qword_10008B2C8);
          sub_1000543A8("no authentication algorithm at %s");
        }
      }

      else
      {
        sub_10003A6C0((uint64_t *)qword_10008B2C8);
        sub_1000543A8("no encryption algorithm at %s");
      }

      return 0xFFFFFFFFLL;
    case 0x98u:
      uint64_t v52 = qword_10008B2C8;
      *(void *)qword_10008B2C8 = 0LL;
      *(void *)(v52 + 8) = 0LL;
      goto LABEL_291;
    case 0x99u:
      uint64_t v53 = qword_10008B2C8;
      *(void *)qword_10008B2C8 = 0LL;
      *(void *)(v53 + 8) = *v5;
      goto LABEL_291;
    case 0x9Au:
      uint64_t v54 = qword_10008B2C8;
      *(void *)qword_10008B2C8 = *(v5 - 1);
      *(void *)(v54 + 8) = 0LL;
      goto LABEL_291;
    case 0x9Bu:
      uint64_t v55 = qword_10008B2C8;
      *(void *)qword_10008B2C8 = *(v5 - 1);
      *(void *)(v55 + 8) = *v5;
      goto LABEL_291;
    case 0x9Cu:
      if (*v5 == (size_t *)1 || *v5 == (size_t *)58)
      {
        uint64_t v56 = (uint64_t)*(v5 - 1);
        if (v56)
        {
LABEL_433:
          sub_1000543A8("port number must be any.", v167);
          return 0xFFFFFFFFLL;
        }
      }

      else
      {
        uint64_t v56 = (uint64_t)*(v5 - 1);
      }

      snprintf(__str, 0xAuLL, "%lu", v56);
      __int128 v87 = sub_10003CF40((const char *)(*(v5 - 3))[1], __str);
      sub_10003F5BC(*(v5 - 3));
      if (!v87) {
        return 0xFFFFFFFFLL;
      }
      int v112 = v87[1];
      if (v112 == 30)
      {
        int v113 = *v5;
        if (*v5 == (size_t *)1)
        {
LABEL_470:
          sub_1000543A8("upper layer protocol mismatched.\n");
          goto LABEL_475;
        }

        int v114 = 128;
      }

      else
      {
        if (v112 != 2)
        {
          sub_1000543A8("invalid family: %d");
LABEL_475:
          int v158 = v87;
LABEL_483:
          free(v158);
          return 0xFFFFFFFFLL;
        }

        int v113 = *v5;
        if (*v5 == (size_t *)58) {
          goto LABEL_470;
        }
        int v114 = 32;
      }

      if (*(v5 - 2) == (size_t *)-1LL) {
        unsigned int v115 = v114;
      }
      else {
        unsigned int v115 = *(v5 - 2);
      }
      uint64_t v19 = (uint64_t)sub_1000113C0((uint64_t)v87, v115, (int)v113);
      free(v87);
      if (!v19) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_291;
    case 0x9Du:
      if (*v5 == (size_t *)1 || *v5 == (size_t *)58)
      {
        uint64_t v57 = (uint64_t)*(v5 - 1);
        if (v57) {
          goto LABEL_433;
        }
        int v58 = v4;
      }

      else
      {
        int v58 = v4;
        uint64_t v57 = (uint64_t)*(v5 - 1);
      }

      snprintf(__str, 0xAuLL, "%lu", v57);
      uint64_t v116 = sub_10003CF40((const char *)(*(v5 - 4))[1], __str);
      if (!v116) {
        return 0xFFFFFFFFLL;
      }
      size_t v117 = v116;
      sub_10003F5BC(*(v5 - 4));
      v118 = sub_10003CF40((const char *)(*(v5 - 3))[1], __str);
      if (!v118)
      {
        int v158 = v117;
        goto LABEL_483;
      }

      __int128 v87 = v118;
      sub_10003F5BC(*(v5 - 3));
      int v119 = v117[1];
      if (v119 == 30)
      {
        v120 = *v5;
        if (*v5 == (size_t *)1)
        {
LABEL_472:
          sub_1000543A8("upper layer protocol mismatched.\n");
          free(v117);
          goto LABEL_475;
        }
      }

      else
      {
        if (v119 != 2)
        {
          sub_1000543A8("invalid family: %d", v117[1]);
          uint64_t v19 = 0LL;
LABEL_334:
          free(v117);
          free(v87);
          BOOL v4 = v58;
          if (v19) {
            goto LABEL_291;
          }
          return 0xFFFFFFFFLL;
        }

        v120 = *v5;
        if (*v5 == (size_t *)58) {
          goto LABEL_472;
        }
      }

      uint64_t v19 = (uint64_t)sub_1000115E0((uint64_t)v117, (uint64_t)v87, (int)v120);
      goto LABEL_334;
    case 0x9Eu:
      if (*(v5 - 1) == (size_t *)5)
      {
        sub_1000543A8("id type forbidden: %d");
      }

      else
      {
        uint64_t v59 = sub_10003F4BC(--**v5 + 4);
        if (v59)
        {
          uint64_t v19 = (uint64_t)v59;
          uint64_t v60 = v59[1];
          *(_BYTE *)uint64_t v60 = sub_100012518(*((_DWORD *)v5 - 2));
          *(_BYTE *)(v60 + 1) = 0;
          *(_WORD *)(v60 + 2) = 0;
          a1 = (uint64_t)memcpy((void *)(*(void *)(v19 + 8) + 4LL), (const void *)(*v5)[1], **v5);
          goto LABEL_291;
        }

LABEL_427:
        sub_1000543A8("failed to allocate identifier", v167);
      }

      return 0xFFFFFFFFLL;
    case 0x9Fu:
      *(void *)(qword_10008B2C8 + 40) = 0LL;
      goto LABEL_291;
    case 0xA0u:
      uint64_t v61 = sub_10003F4BC(**(void **)__str + 4LL);
      *(void *)(qword_10008B2C8 + 40) = v61;
      if (!v61) {
        goto LABEL_427;
      }
      uint64_t v62 = v61[1];
      *(_BYTE *)uint64_t v62 = sub_100012518(*((_DWORD *)v5 - 2));
      *(_BYTE *)(v62 + 1) = 0;
      *(_WORD *)(v62 + 2) = 0;
      memcpy( (void *)(*(void *)(*(void *)(qword_10008B2C8 + 40) + 8LL) + 4LL),  *(const void **)(*(void *)__str + 8LL),  **(void **)__str);
      xpc_object_t v39 = *(size_t **)__str;
      goto LABEL_290;
    case 0xA1u:
      a1 = (uint64_t)sub_10003F5F0((uint64_t)*v5);
      *(void *)(qword_10008B2C8 + 16) = a1;
      if (a1) {
        goto LABEL_291;
      }
      sub_1000543A8("failed to set sainfo xauth group.\n", v167);
      return 0xFFFFFFFFLL;
    case 0xA4u:
      unsigned int v32 = *(_DWORD *)v5;
      *(_DWORD *)(qword_10008B2C8 + 36) = *(_DWORD *)v5;
LABEL_153:
      if (v32 <= 0x12 && ((1 << v32) & 0x7C026) != 0) {
        goto LABEL_291;
      }
      sub_1000543A8("Invalid PFS group specified", v167);
      return 0xFFFFFFFFLL;
    case 0xA6u:
      *(void *)(qword_10008B2C8 + 24) = (void)*v5 * (void)*(v5 - 1);
      goto LABEL_291;
    case 0xA8u:
    case 0x133u:
      sub_1000543A8("byte lifetime support is deprecated", v167);
      return 0xFFFFFFFFLL;
    case 0xAAu:
      dword_10008B2D0 = *v5;
      goto LABEL_291;
    case 0xACu:
    case 0xAEu:
      sub_1000543A8("it's deprecated to specify a identifier in phase 2");
      goto LABEL_291;
    case 0xB0u:
    case 0xB1u:
      a1 = (uint64_t)sub_10003A6A0((uint64_t *)(qword_10008B2C8 + 8LL * dword_10008B2D0 + 48), (uint64_t)*v5);
      goto LABEL_291;
    case 0xB3u:
      int v63 = sub_10003A694();
      if (!v63)
      {
        sub_1000543A8("failed to get algorithm allocation", v167);
        return 0xFFFFFFFFLL;
      }

      uint64_t v19 = (uint64_t)v63;
      int v64 = sub_10000549C(dword_10008B2D0, *((_DWORD *)v5 - 2));
      *(_DWORD *)uint64_t v19 = v64;
      if (v64 == -1)
      {
        sub_1000543A8("algorithm mismatched", v167);
        goto LABEL_482;
      }

      unsigned int v65 = sub_1000052C4(dword_10008B2D0, *((_DWORD *)v5 - 2));
      a3 = (__int16 *)*v5;
      if (v65)
      {
        if (a3)
        {
          if ((sub_1000052F4(dword_10008B2D0, *((_DWORD *)v5 - 2), (uint64_t)a3) & 0x80000000) != 0)
          {
            sub_1000543A8("invalid keylen %d");
            goto LABEL_482;
          }

          if (*v5) {
            unsigned int v65 = *v5;
          }
        }
      }

      else if (a3)
      {
        sub_1000543A8("keylen not allowed");
        goto LABEL_482;
      }

      *(_DWORD *)(v19 + 4) = v65;
      a1 = dword_10008B2D0;
      a2 = (uint64_t)*(v5 - 1);
      if (dword_10008B2D0 == 1 && a2 == 18) {
        goto LABEL_291;
      }
      a1 = sub_100031190(dword_10008B2D0, a2, v65);
      if (!(_DWORD)a1) {
        goto LABEL_291;
      }
      int v160 = sub_100005604(dword_10008B2D0);
      uint64_t v161 = sub_10000549C(dword_10008B2D0, *((_DWORD *)v5 - 2));
      if (v160 == 5) {
        int v162 = 2;
      }
      else {
        int v162 = v160;
      }
      sub_10003E1F4(v162, v161);
      sub_1000543A8("algorithm %s not supported by the kernel (missing module?)");
LABEL_482:
      int v158 = (void *)v19;
      goto LABEL_483;
    case 0xB4u:
      uint64_t v19 = -1LL;
      goto LABEL_291;
    case 0xB6u:
    case 0xB8u:
    case 0xBCu:
    case 0x12Au:
    case 0x142u:
    case 0x145u:
      uint64_t v19 = 0LL;
      goto LABEL_291;
    case 0xBBu:
      uint64_t v19 = 255LL;
      goto LABEL_291;
    case 0xBEu:
      int v66 = sub_100038B34((const sockaddr *)(*v5)[1]);
      if (!v66)
      {
        v157 = sub_10003C888((const sockaddr *)*v5);
        sub_1000543A8("failed to get remoteconf for %s.", (const char *)v157);
        free((void *)(*(v5 - 2))[1]);
        free(*(v5 - 2));
LABEL_446:
        free((void *)(*v5)[1]);
        int v158 = *v5;
        goto LABEL_483;
      }

      __int128 v67 = v66;
      void *v66 = (*(v5 - 2))[1];
      int v68 = *(_DWORD *)*(v5 - 2);
      if (v68 == -1) {
        int v68 = 0;
      }
      *((_DWORD *)v66 + 2) = v68;
      __int128 v69 = sub_100038574((*v5)[1], 1);
      v67[31] = 0LL;
      v67[32] = v69;
      v67[33] = 0LL;
      qword_10008B2D8 = (uint64_t)v67;
      free(*(v5 - 2));
      free((void *)(*v5)[1]);
      free(*v5);
      a1 = (uint64_t)sub_10005251C();
      if (!a1) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v70 = qword_10008B2D8;
      uint64_t v71 = *(void *)(qword_10008B2D8 + 256);
      if (!v71) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v72 = *(void *)(v71 + 248);
      if (!v72) {
        return 0xFFFFFFFFLL;
      }
      *(void *)a1 = *(void *)(v72 + 16);
      *(_DWORD *)(a1 + 8) = *(void *)(v72 + 32);
      uint64_t v73 = *(void *)(v70 + 264);
      if (v73)
      {
        *(void *)(v73 + 32) = a1;
        uint64_t v73 = *(void *)(v70 + 264);
      }

      *(void *)(a1 + 24) = v73;
      *(void *)(v70 + 264) = a1;
      goto LABEL_291;
    case 0xC0u:
      uint64_t v74 = sub_100038A58();
      if (!v74)
      {
        sub_1000543A8("failed to get new remoteconf.");
        goto LABEL_446;
      }

      *(void *)uint64_t v74 = (*v5)[1];
      int v75 = *(_DWORD *)*v5;
      if (v75 == -1) {
        int v75 = 0;
      }
      v74[2] = v75;
      qword_10008B2D8 = (uint64_t)v74;
      free(*v5);
      uint64_t v76 = sub_10005251C();
      if (!v76) {
        return 0xFFFFFFFFLL;
      }
      int v77 = v76;
      a1 = sub_10000FF30();
      void *v77 = (int)a1;
      uint64_t v78 = qword_10008B2D8;
      uint64_t v79 = *(void *)(qword_10008B2D8 + 264);
      if (v79)
      {
        *(void *)(v79 + 32) = v77;
        uint64_t v79 = *(void *)(v78 + 264);
      }

      v77[3] = v79;
      *(void *)(v78 + 264) = v77;
LABEL_291:
      v109 = &v5[-v18];
      v7 -= 2 * v18;
      v109[1] = (size_t *)v19;
      int v5 = v109 + 1;
      uint64_t v110 = word_10006BB40[v17] - 168LL;
      uint64_t v111 = (*(__int16 *)v7 + word_10006BDD0[v110]);
      else {
        int v3 = word_10006BF2C[v110];
      }
      goto LABEL_295;
    case 0xC2u:
      uint64_t v80 = qword_10008B2D8;
      if (!*(void *)(qword_10008B2D8 + 16))
      {
        sub_1000543A8("no exchange mode specified.\n", v167);
        return 0xFFFFFFFFLL;
      }

      int v81 = *(_DWORD *)(qword_10008B2D8 + 32);
      if (v81 == 5)
      {
        uint64_t v121 = *(void *)(qword_10008B2D8 + 40);
        if (*(_DWORD *)(qword_10008B2D8 + 64))
        {
          if (v121)
          {
            sub_100054338("Both CERT and ASN1 ID are set. Hope this is OK.\n");
            uint64_t v80 = qword_10008B2D8;
          }
        }

        else if (!v121)
        {
          sub_1000543A8("ASN1 ID not specified and no CERT defined!\n", v167);
          return 0xFFFFFFFFLL;
        }
      }

      else if (!v81)
      {
        *(_DWORD *)(qword_10008B2D8 + 32) = 4;
      }

      if (*(_DWORD *)(v80 + 132) == 1)
      {
        a1 = sub_100007840(*(void **)(v80 + 56), __str);
        if (!a1)
        {
          sub_1000543A8("peers_identifier required for specified certificate verification option.\n", v167);
          return 0xFFFFFFFFLL;
        }

        uint64_t v80 = qword_10008B2D8;
      }

      int v123 = *(uint64_t **)(v80 + 264);
      int v124 = (void *)v123[2];
      if (!v124)
      {
        int v124 = *(void **)(v80 + 256);
        if (v124)
        {
          int v124 = (void *)v124[33];
          if (v124)
          {
            int v124 = (void *)v124[2];
            v123[2] = (uint64_t)v124;
          }
        }
      }

      if (v123[3])
      {
        if (dword_10008BA20)
        {
          v159 = (os_log_s *)ne_log_obj(a1);
          if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR)) {
            sub_100068C5C();
          }
        }

        return 0xFFFFFFFFLL;
      }

      uint64_t v125 = v124;
      if (!v124)
      {
        sub_10003C888(*(const sockaddr **)v80);
        sub_1000543A8("no remote specification found: %s.\n");
        return 0xFFFFFFFFLL;
      }

      do
      {
        if (!*((_DWORD *)v125 + 19))
        {
          sub_1000543A8("encryption algorithm required.", v167);
          return 0xFFFFFFFFLL;
        }

        if (!*((_DWORD *)v125 + 20))
        {
          sub_1000543A8("hash algorithm required.", v167);
          return 0xFFFFFFFFLL;
        }

        if (!*((_DWORD *)v125 + 21))
        {
          sub_1000543A8("DH group required.", v167);
          return 0xFFFFFFFFLL;
        }

        if (!*((_DWORD *)v125 + 22))
        {
          sub_1000543A8("authentication method required.", v167);
          return 0xFFFFFFFFLL;
        }

        uint64_t v125 = (void *)v125[12];
      }

      while (v125);
      uint64_t v168 = v80;
      do
      {
        v126 = v124;
        int v124 = (void *)v124[12];
      }

      while (v124);
      __int16 v178 = v126;
      int v175 = 1;
      v169 = v123;
      break;
    case 0xC3u:
      msghdr v82 = calloc(1uLL, 0x10uLL);
      if (!v82)
      {
        sub_1000543A8("failed to allocate remote index struct", v167);
        return 0xFFFFFFFFLL;
      }

      uint64_t v19 = (uint64_t)v82;
      a1 = (uint64_t)sub_10003C994(128);
      *(void *)(v19 + 8) = a1;
      if (a1)
      {
        *(_BYTE *)(a1 + 1) = 0;
        *(_WORD *)(a1 + 2) = bswap32(*(unsigned __int16 *)v5) >> 16;
        *(_DWORD *)uint64_t v19 = -1;
        goto LABEL_291;
      }

      sub_1000543A8("failed to allocate sockaddr storage", v167);
      goto LABEL_482;
    case 0xC4u:
      uint64_t v19 = (uint64_t)*v5;
      if (*v5) {
        goto LABEL_291;
      }
      sub_1000543A8("failed to allocate sockaddr_storage", v167);
      return 0xFFFFFFFFLL;
    case 0xC7u:
      *(void *)(qword_10008B2D8 + 16) = 0LL;
      goto LABEL_291;
    case 0xC9u:
      *(_DWORD *)(qword_10008B2D8 + 24) = *v5;
      goto LABEL_291;
    case 0xCBu:
      *(_DWORD *)(qword_10008B2D8 + 28) = *v5;
      goto LABEL_291;
    case 0xCDu:
      if (*v5 == (size_t *)1)
      {
        *(_DWORD *)(qword_10008B2D8 + 292) = 16;
        goto LABEL_291;
      }

      sub_1000543A8("invalid IKE version specified.\n", v167);
      return 0xFFFFFFFFLL;
    case 0xD0u:
      *(_DWORD *)(qword_10008B2D8 + 124) = *v5;
      goto LABEL_291;
    case 0xD2u:
      *(_DWORD *)(qword_10008B2D8 + 116) = *v5;
      goto LABEL_291;
    case 0xD4u:
      *(_DWORD *)(qword_10008B2D8 + 1memset(v27, 32, 20) = *v5;
      goto LABEL_291;
    case 0xD6u:
      *(_DWORD *)(qword_10008B2D8 + 128) = *v5;
      goto LABEL_291;
    case 0xD8u:
      uint64_t v83 = qword_10008B2D8;
      *(_DWORD *)(qword_10008B2D8 + 128) = *(v5 - 1);
      *(_DWORD *)(v83 + 132) = *v5;
      goto LABEL_291;
    case 0xDAu:
      sub_1000543A8("Apple specific features not compiled in.", v167);
      return 0xFFFFFFFFLL;
    case 0xDCu:
      if (sub_100010D84((void ***)(qword_10008B2D8 + 40), *((_DWORD *)v5 - 2), (uint64_t)*v5))
      {
        sub_1000543A8("failed to set identifer.\n");
LABEL_462:
        v156 = *v5;
LABEL_463:
        sub_10003F5BC(v156);
        return 0xFFFFFFFFLL;
      }

      sub_10003F5BC(*v5);
      uint64_t v84 = (uint64_t)*(v5 - 1);
LABEL_206:
      *(_DWORD *)(qword_10008B2D8 + 32) = v84;
      goto LABEL_291;
    case 0xDEu:
      a1 = sub_100010D8C((void ***)(qword_10008B2D8 + 40), *((_DWORD *)v5 - 4), (uint64_t)*v5, *((_DWORD *)v5 - 2));
      if ((_DWORD)a1) {
        goto LABEL_423;
      }
      uint64_t v84 = (uint64_t)*(v5 - 2);
      goto LABEL_206;
    case 0xE0u:
      if (sub_1000473DC(qword_10008B2D8 + 272) == -1)
      {
        sub_1000543A8("failed to allocate xauth state\n", v167);
        return 0xFFFFFFFFLL;
      }

      int v85 = sub_10003F5F0((uint64_t)*v5);
      **(void **)(qword_10008B2D8 + 272) = v85;
      if (!v85)
      {
LABEL_423:
        sub_1000543A8("failed to set identifer.\n", v167);
        return 0xFFFFFFFFLL;
      }

LABEL_289:
      xpc_object_t v39 = *v5;
LABEL_290:
      sub_10003F5BC(v39);
      goto LABEL_291;
    case 0xE2u:
      uint64_t v86 = sub_100038CB4();
      if (!v86) {
        goto LABEL_426;
      }
      __int128 v87 = (unsigned __int8 *)v86;
      if (!sub_100010D84((void ***)v86 + 1, *((_DWORD *)v5 - 2), (uint64_t)*v5))
      {
        sub_10003F5BC(*v5);
        uint64_t v88 = (uint64_t)*(v5 - 1);
LABEL_216:
        *(_DWORD *)__int128 v87 = v88;
        a1 = (uint64_t)sub_1000077AC(*(void *)(qword_10008B2D8 + 56), (uint64_t)v87);
        goto LABEL_291;
      }

      sub_1000543A8("failed to set identifer.\n");
      free(v87);
      goto LABEL_462;
    case 0xE4u:
      uint64_t v89 = sub_100038CB4();
      if (!v89)
      {
LABEL_426:
        sub_1000543A8("failed to allocate idspec", v167);
        return 0xFFFFFFFFLL;
      }

      __int128 v87 = (unsigned __int8 *)v89;
      if (sub_100010D8C((void ***)v89 + 1, *((_DWORD *)v5 - 4), (uint64_t)*v5, *((_DWORD *)v5 - 2)))
      {
        sub_1000543A8("failed to set identifer.\n", v167);
        goto LABEL_475;
      }

      uint64_t v88 = (uint64_t)*(v5 - 2);
      goto LABEL_216;
    case 0xE6u:
      *(_DWORD *)(qword_10008B2D8 + 136) = *v5;
      goto LABEL_291;
    case 0xE8u:
      uint64_t v90 = sub_10003CF40((const char *)(*v5)[1], 0LL);
      sub_10003F5BC(*v5);
      if (!v90) {
        return 0xFFFFFFFFLL;
      }
      *(void *)(qword_10008B2D8 + 296) = v90;
      goto LABEL_291;
    case 0xEAu:
      uint64_t v91 = qword_10008B2D8;
      *(_DWORD *)(qword_10008B2D8 + 80) = *(v5 - 1);
      *(void *)(v91 + 88) = *v5;
      goto LABEL_291;
    case 0xECu:
      if (*v5 != (size_t *)3)
      {
        sub_1000543A8("shared secret value missing.\n", v167);
        return 0xFFFFFFFFLL;
      }

      uint64_t v30 = (__int128 *)qword_10008B2D8;
      int v31 = 3;
LABEL_223:
      *((_DWORD *)v30 + memset(v27, 32, 20) = v31;
      goto LABEL_291;
    case 0xEEu:
      *(_DWORD *)(qword_10008B2D8 + 140) = *v5;
      goto LABEL_291;
    case 0xF0u:
      sub_1000543A8("dh_group cannot be defined here.", v167);
      return 0xFFFFFFFFLL;
    case 0xF2u:
      *(_DWORD *)(qword_10008B2D8 + 144) = *v5;
      goto LABEL_291;
    case 0xF4u:
      *(_DWORD *)(qword_10008B2D8 + 148) = *v5;
      goto LABEL_291;
    case 0xF6u:
      *(_DWORD *)(qword_10008B2D8 + 148) = 2;
      goto LABEL_291;
    case 0xF8u:
      sub_100054338("Your kernel does not support esp_frag");
      goto LABEL_291;
    case 0xFAu:
      *(_DWORD *)(qword_10008B2D8 + 156) = *v5;
      goto LABEL_291;
    case 0xFCu:
      *(_DWORD *)(qword_10008B2D8 + 240) = *v5;
      goto LABEL_291;
    case 0xFEu:
    case 0x100u:
      *(_DWORD *)(qword_10008B2D8 + 164) = *v5;
      goto LABEL_291;
    case 0x102u:
      *(_DWORD *)(qword_10008B2D8 + 160) = *v5;
      goto LABEL_291;
    case 0x104u:
      *(_DWORD *)(qword_10008B2D8 + 168) = *v5;
      goto LABEL_291;
    case 0x106u:
    case 0x108u:
      *(_DWORD *)(qword_10008B2D8 + 176) = *v5;
      goto LABEL_291;
    case 0x10Au:
      *(_DWORD *)(qword_10008B2D8 + 180) = *v5;
      goto LABEL_291;
    case 0x10Cu:
      *(_DWORD *)(qword_10008B2D8 + 184) = *v5;
      goto LABEL_291;
    case 0x10Eu:
      *(_DWORD *)(qword_10008B2D8 + 208) = *v5;
      goto LABEL_291;
    case 0x110u:
      *(_DWORD *)(qword_10008B2D8 + 216) = *v5;
      goto LABEL_291;
    case 0x112u:
      *(_DWORD *)(qword_10008B2D8 + 212) = *v5;
      goto LABEL_291;
    case 0x114u:
      *(_DWORD *)(qword_10008B2D8 + 2memset(v27, 32, 20) = *v5;
      goto LABEL_291;
    case 0x116u:
      *(_DWORD *)(qword_10008B2D8 + 224) = *v5;
      goto LABEL_291;
    case 0x118u:
      uint64_t v92 = qword_10008B2D8;
      *(_DWORD *)(qword_10008B2D8 + 228) = *(v5 - 2);
      *(_DWORD *)(v92 + 232) = *v5;
      goto LABEL_291;
    case 0x11Au:
      **(void **)(qword_10008B2D8 + 264) = (void)*v5 * (void)*(v5 - 1);
      goto LABEL_291;
    case 0x11Cu:
      *(_DWORD *)(qword_10008B2D8 + 172) = *v5;
      goto LABEL_291;
    case 0x11Eu:
      sub_1000543A8("byte lifetime support is deprecated in Phase 1", v167);
      return 0xFFFFFFFFLL;
    case 0x120u:
      a1 = (uint64_t)calloc(1uLL, 0x78uLL);
      if (!a1)
      {
        sub_1000543A8("failed to allocate spproto", v167);
        return 0xFFFFFFFFLL;
      }

      *(_DWORD *)(a1 + 12) = 0;
      *(_DWORD *)(a1 + 40) = -1;
      uint64_t v93 = qword_10008B2D8;
      *(void *)(a1 + ++*(_DWORD *)(result + 112) = *(void *)(qword_10008B2D8 + 264);
      uint64_t v94 = *(void *)(*(void *)(v93 + 264) + 16LL);
      if (v94)
      {
        *(void *)(v94 + 104) = a1;
        uint64_t v94 = *(void *)(*(void *)(v93 + 264) + 16LL);
      }

      *(void *)(a1 + 96) = v94;
      *(void *)(*(void *)(v93 + 264) + 16LL) = a1;
      goto LABEL_291;
    case 0x123u:
      a1 = (uint64_t)malloc(0x10uLL);
      if (!a1)
      {
        sub_1000543A8("failed to allocate etypes", v167);
        return 0xFFFFFFFFLL;
      }

      *(_DWORD *)a1 = *v5;
      *(void *)(a1 + 8) = 0LL;
      uint64_t v95 = *(void *)(qword_10008B2D8 + 16);
      if (v95)
      {
        do
        {
          uint64_t v96 = v95;
          uint64_t v95 = *(void *)(v95 + 8);
        }

        while (v95);
        *(void *)(v96 + 8) = a1;
      }

      else
      {
        *(void *)(qword_10008B2D8 + 16) = a1;
      }

      goto LABEL_291;
    case 0x124u:
      uint64_t v97 = qword_10008B2D8;
      *(_DWORD *)(qword_10008B2D8 + 104) = *(v5 - 1);
      *(_DWORD *)(v97 + 64) = 1;
      *(void *)(v97 + 72) = 0LL;
      goto LABEL_291;
    case 0x126u:
      uint64_t v98 = qword_10008B2D8;
      *(_DWORD *)(qword_10008B2D8 + 104) = *(v5 - 2);
      *(_DWORD *)(v98 + 64) = 1;
      *(void *)(v98 + 72) = *v5;
      goto LABEL_291;
    case 0x128u:
      a1 = sub_10000549C(5, *(_DWORD *)v5);
      if ((_DWORD)a1 == -1) {
        goto LABEL_424;
      }
      uint64_t v99 = (int)a1;
      goto LABEL_259;
    case 0x129u:
      int v100 = *v5;
      if ((unint64_t)*v5 > 0x12 || ((0x3FC1uLL >> (char)v100) & 1) != 0)
      {
LABEL_424:
        sub_1000543A8("must be DH group", v167);
      }

      else
      {
        uint64_t v99 = dword_10006BAF4[(void)v100];
LABEL_259:
        unint64_t v101 = v99 - 1;
        if (v101 < 0x12 && ((0x3E013u >> v101) & 1) != 0)
        {
          uint64_t v19 = qword_10006C088[v101];
          goto LABEL_291;
        }

        sub_1000543A8("Invalid DH group specified", v167);
      }

      return 0xFFFFFFFFLL;
    case 0x12Fu:
      sub_1000543A8("strength directive is obsoleted.");
      goto LABEL_291;
    case 0x131u:
      *(void *)(*(void *)(*(void *)(qword_10008B2D8 + 264) + 16LL) + 16LL) = (void)*v5 * (void)*(v5 - 1);
      goto LABEL_291;
    case 0x135u:
      *(_DWORD *)(*(void *)(*(void *)(qword_10008B2D8 + 264) + 16LL) + 84LL) = *v5;
      goto LABEL_291;
    case 0x137u:
      uint64_t v102 = qword_10008B2D8;
      uint64_t v103 = *(void *)(*(void *)(qword_10008B2D8 + 264) + 16LL);
      if (*(_DWORD *)(v103 + 40) != 2)
      {
        sub_1000543A8("wrong Vendor ID for gssapi_id", v167);
        return 0xFFFFFFFFLL;
      }

      int v104 = *(void **)(v103 + 48);
      if (v104)
      {
        free(v104);
        uint64_t v103 = *(void *)(*(void *)(v102 + 264) + 16LL);
      }

      a1 = (uint64_t)strdup((const char *)(*v5)[1]);
      *(void *)(v103 + 48) = a1;
      if (!a1)
      {
        if (dword_10008BA20)
        {
          char v166 = (os_log_s *)ne_log_obj(0LL);
          if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR)) {
LABEL_503:
          }
            sub_10005C498();
        }

LABEL_504:
        exit(1);
      }

      goto LABEL_291;
    case 0x139u:
      a1 = sub_10000549C(*((_DWORD *)v5 - 4), *((_DWORD *)v5 - 2));
      if ((_DWORD)a1 == -1)
      {
        sub_1000543A8("algorithm mismatched 1", v167);
        return 0xFFFFFFFFLL;
      }

      uint64_t v105 = (uint64_t)*(v5 - 2);
      if (v105 != 6)
      {
        if (v105 == 4)
        {
          *(_DWORD *)(*(void *)(*(void *)(qword_10008B2D8 + 264) + 16LL) + 80LL) = a1;
          goto LABEL_291;
        }

        if (v105 != 3)
        {
          sub_1000543A8("algorithm mismatched 2", v167);
          return 0xFFFFFFFFLL;
        }

        *(_DWORD *)(*(void *)(*(void *)(qword_10008B2D8 + 264) + 16LL) + 76LL) = a1;
        a1 = sub_1000052C4(*((_DWORD *)v5 - 4), *((_DWORD *)v5 - 2));
        int v106 = a1;
        a3 = (__int16 *)*v5;
        if ((_DWORD)a1)
        {
          if (a3)
          {
            a1 = sub_1000052F4(*((unsigned int *)v5 - 4), *((_DWORD *)v5 - 2), (uint64_t)a3);
            unint64_t v107 = *v5;
            if ((a1 & 0x80000000) != 0)
            {
              sub_1000543A8("invalid keylen %d");
              return 0xFFFFFFFFLL;
            }

            if (v107)
            {
              *(_DWORD *)(*(void *)(*(void *)(qword_10008B2D8 + 264) + 16LL) + 12LL) = (_DWORD)v107;
              goto LABEL_291;
            }
          }
        }

        else if (a3)
        {
          sub_1000543A8("keylen not allowed", v167);
          return 0xFFFFFFFFLL;
        }

        *(_DWORD *)(*(void *)(*(void *)(qword_10008B2D8 + 264) + 16LL) + 12LL) = v106;
        goto LABEL_291;
      }

      uint64_t v122 = *(void *)(*(void *)(qword_10008B2D8 + 264) + 16LL);
      *(_DWORD *)(v122 + 88) = a1;
      if (*(v5 - 1) != (size_t *)48) {
        goto LABEL_291;
      }
      if (*(_DWORD *)(v122 + 40) == -1)
      {
        *(_DWORD *)(v122 + 40) = 2;
        goto LABEL_291;
      }

      sub_1000543A8("Vendor ID mismatch for auth method", v167);
      return 0xFFFFFFFFLL;
    case 0x13Bu:
    case 0x13Eu:
    case 0x143u:
    case 0x146u:
      uint64_t v19 = 1LL;
      goto LABEL_291;
    case 0x13Cu:
      uint64_t v19 = 60LL;
      goto LABEL_291;
    case 0x13Du:
      uint64_t v19 = 3600LL;
      goto LABEL_291;
    case 0x13Fu:
      uint64_t v19 = 1024LL;
      goto LABEL_291;
    case 0x140u:
      uint64_t v19 = 0x100000LL;
      goto LABEL_291;
    case 0x141u:
      uint64_t v19 = 0x40000000LL;
      goto LABEL_291;
    case 0x144u:
    case 0x147u:
      uint64_t v19 = 2LL;
      goto LABEL_291;
    default:
      goto LABEL_291;
  }

  do
  {
    if (dword_10008BA20)
    {
      v127 = (os_log_s *)ne_log_obj(a1);
      a1 = os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)a1)
      {
        uint64_t v145 = v178[2];
        if (!v145) {
          uint64_t v145 = *v123;
        }
        *(_DWORD *)__str = 134217984;
        *(void *)&__str[4] = v145;
        _os_log_debug_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEBUG, "lifetime = %ld\n", __str, 0xCu);
      }

      if (dword_10008BA20)
      {
        v128 = (os_log_s *)ne_log_obj(a1);
        a1 = os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)a1)
        {
          int v146 = *((_DWORD *)v178 + 6);
          if (!v146) {
            int v146 = *((_DWORD *)v123 + 2);
          }
          *(_DWORD *)__str = 67109120;
          *(_DWORD *)&__str[4] = v146;
          _os_log_debug_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEBUG, "lifebyte = %d\n", __str, 8u);
        }

        if (dword_10008BA20)
        {
          uint64_t v129 = (os_log_s *)ne_log_obj(a1);
          a1 = os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG);
          if ((_DWORD)a1)
          {
            int v147 = *((_DWORD *)v178 + 3);
            *(_DWORD *)__str = 67109120;
            *(_DWORD *)&__str[4] = v147;
            _os_log_debug_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEBUG, "encklen=%d\n", __str, 8u);
          }
        }
      }
    }

    *(_DWORD *)((char *)v192 + 3) = 0;
    unsigned int v130 = *((_DWORD *)v178 + 19);
    unsigned int v131 = *((_DWORD *)v178 + 20);
    v192[0] = 0;
    unsigned int v180 = v130;
    v192[3] = v130;
    v192[4] = v131;
    unsigned int v174 = v131;
    unsigned int v176 = *((_DWORD *)v178 + 21);
    unsigned int v177 = *((_DWORD *)v178 + 22);
    v192[5] = v176;
    v192[6] = v177;
    uint64_t v132 = v178[2];
    if (!v132) {
      uint64_t v132 = *v123;
    }
    uint64_t v173 = v132;
    int v133 = *((_DWORD *)v178 + 6);
    if (!v133) {
      int v133 = *((_DWORD *)v123 + 2);
    }
    int v172 = v133;
    int v170 = *((_DWORD *)v178 + 3);
    int v171 = *((_DWORD *)v178 + 10);
    if (dword_10008BA20)
    {
      v134 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__str = 67109376;
        *(_DWORD *)&__str[4] = 1;
        *(_WORD *)&__str[8] = 1024;
        *(_DWORD *)&__str[10] = v175;
        _os_log_debug_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "p:%d t:%d\n", __str, 0xEu);
      }
    }

    for (uint64_t i = 3LL; i != 7; ++i)
    {
      uint64_t v136 = v192[i];
      uint64_t v137 = snprintf(v193, 0xAuLL, "%d", v192[i]);
      if (dword_10008BA20)
      {
        v138 = (os_log_s *)ne_log_obj(v137);
        uint64_t v137 = os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v137)
        {
          v139 = sub_10003EA1C(i, v136);
          v140 = "(";
          size_t v141 = v193;
          if (v193[0] == 48) {
            size_t v141 = (char *)&unk_10007E069;
          }
          if (!(_DWORD)v136) {
            v140 = (const char *)&unk_10007E069;
          }
          *(_DWORD *)__str = 136315906;
          *(void *)&__str[4] = v139;
          *(_WORD *)&__str[12] = 2080;
          v185 = v140;
          __int16 v186 = 2080;
          if ((_DWORD)v136) {
            v142 = ")";
          }
          else {
            v142 = (const char *)&unk_10007E069;
          }
          v187 = v141;
          __int16 v188 = 2080;
          v189 = v142;
          _os_log_debug_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEBUG, "%s%s%s%s\n", __str, 0x2Au);
        }
      }
    }

    if (dword_10008BA20)
    {
      v143 = (os_log_s *)ne_log_obj(v137);
      if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG)) {
        sub_100068C28(&v182, v183, v143);
      }
    }

    BOOL v4 = byte_10008BE9C + 356;
    if (!v180 || !v177 || !v176)
    {
      sub_10003EA1C(3, v180);
      sub_10003EA1C(6, v177);
      sub_10003EA1C(4, v174);
      sub_10003EA1C(5, v176);
      sub_1000543A8("few definition of algorithm enc=%s ameth=%s hash=%s dhgroup=%s.\n");
LABEL_430:
      if (dword_10008BA20)
      {
        v154 = (os_log_s *)ne_log_obj(v153);
        if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR)) {
          sub_100068BD0();
        }
      }

      return 0xFFFFFFFFLL;
    }

    v144 = sub_100039030();
    int v123 = v169;
    if (!v144)
    {
      sub_1000543A8("failed to allocate isakmp sa");
      goto LABEL_430;
    }

    v144[1] = 1;
    v144[2] = v175;
    *((void *)v144 + 2) = v173;
    *((void *)v144 + 4) = v172;
    v144[10] = v180;
    v144[11] = v170;
    v144[12] = v177;
    v144[13] = v174;
    v144[18] = v174;
    v144[14] = v171;
    v144[15] = v176;
    a1 = sub_10003905C((uint64_t)v144, v168);
    ++v175;
    __int16 v178 = (void *)v178[13];
  }

  while (v178);
  if (!*(void *)(v168 + 248))
  {
    if (dword_10008BA20)
    {
      v163 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR)) {
        sub_100068BFC();
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (!sub_100039010(qword_10008B2D8, 4)) {
    goto LABEL_409;
  }
  uint64_t v148 = qword_10008B2D8;
  uint64_t v149 = *(void *)(qword_10008B2D8 + 248);
  if (!v149)
  {
    *(_DWORD *)(qword_10008B2D8 + 188) = 0;
LABEL_494:
    sub_1000543A8("DH group must be set in the proposal.\n", v167);
    return 0xFFFFFFFFLL;
  }

  uint64_t v150 = 0LL;
  do
  {
    if ((_DWORD)v150)
    {
      if ((_DWORD)v150 != *(_DWORD *)(v149 + 60))
      {
        sub_1000543A8("DH group must be equal in all proposals when aggressive mode is used.\n", v167);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      uint64_t v150 = *(unsigned int *)(v149 + 60);
    }

    uint64_t v149 = *(void *)(v149 + 80);
  }

  while (v149);
  *(_DWORD *)(qword_10008B2D8 + 188) = v150;
  if (!(_DWORD)v150) {
    goto LABEL_494;
  }
  if ((sub_10002A198(v150, v148 + 192) & 0x80000000) == 0)
  {
LABEL_409:
    a1 = sub_100038ED0(qword_10008B2D8);
    goto LABEL_291;
  }

  sub_1000543A8("failed to set DH value.\n", v167);
  return 0xFFFFFFFFLL;
}

void sub_100052478(uint64_t a1, int a2)
{
  BOOL v4 = sub_100008160();
  if (v4)
  {
    int v5 = v4;
    v4[1] = a1;
    if (a1)
    {
      *((_DWORD *)v4 + 4) = -1;
      *((_DWORD *)v4 + 8) = a2;
      *((_DWORD *)v4 + 9) = 1;
      sub_1000083D0(v4, (void *)(qword_10008B848 + 120));
      *(_DWORD *)(qword_10008B848 + ++*(_DWORD *)(result + 112) = 0;
    }

    else
    {
      sub_1000543A8("failed to copy sockaddr_storage ");
      sub_10000793C(v5);
    }
  }

  else
  {
    sub_1000543A8("failed to allocate myaddrs");
  }

void *sub_10005251C()
{
  uint64_t v0 = calloc(1uLL, 0x28uLL);
  if (!v0) {
    sub_1000543A8("failed to allocate proposal");
  }
  return v0;
}

uint64_t sub_100052558(uint64_t a1)
{
  if (dword_10008BA20)
  {
    BOOL v1 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
      sub_100068E50();
    }
  }

  sub_100054FC4();
  uint64_t v2 = sub_100054DF8(*(const char **)qword_10008B848);
  if ((_DWORD)v2)
  {
    if (dword_10008BA20)
    {
      int v5 = (os_log_s *)ne_log_obj(v2);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100068DCC(v5);
      }
    }
  }

  else
  {
    uint64_t v6 = sub_100050278(v2, v3, v4);
    if (!(_DWORD)v6)
    {
      if (dword_10008C754)
      {
        if (dword_10008BA20)
        {
          uint64_t v19 = (os_log_s *)ne_log_obj(v6);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
            sub_100068CB8(v19, v20, v21, v22, v23, v24, v25, v26);
          }
        }

        sub_100055000();
        exit(1);
      }

      sub_100055000();
      if (dword_10008BA20)
      {
        uint64_t v16 = (os_log_s *)ne_log_obj(v15);
        uint64_t result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
        if (!(_DWORD)result) {
          return result;
        }
        sub_100068C88();
      }

      return 0LL;
    }

    if (dword_10008C754)
    {
      if (dword_10008BA20)
      {
        int64_t v7 = (os_log_s *)ne_log_obj(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_100068D58(v7, v8, v9, v10, v11, v12, v13, v14);
        }
      }
    }

    else if (dword_10008BA20)
    {
      uint64_t v18 = (os_log_s *)ne_log_obj(v6);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100068D2C();
      }
    }

    sub_100055000();
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1000526B4(uint64_t a1)
{
  if (a1 > 0x1F)
  {
    if (!dword_10008BA20) {
      goto LABEL_11;
    }
    uint64_t v10 = (os_log_s *)ne_log_obj(a1);
    BOOL v3 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (v3) {
      sub_100068F6C();
    }
  }

  else
  {
    if (!dword_10008BA20) {
      goto LABEL_11;
    }
    uint64_t v2 = (os_log_s *)ne_log_obj(a1);
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
    if (v3) {
      sub_100068EFC(a1, v2, v4, v5, v6, v7, v8, v9);
    }
  }

  if (dword_10008BA20)
  {
    uint64_t v11 = (os_log_s *)ne_log_obj(v3);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      sub_100068E80((_DWORD)a1 == 30, v11, v12, v13, v14, v15, v16, v17);
    }
  }

uint64_t sub_1000527A0(uint64_t a1, uint64_t a2, __int16 *a3)
{
  BOOL v3 = &byte_10008A931[1743];
  uint64_t v4 = &byte_10008A931[1743];
  uint64_t v5 = &byte_10008BE9C[356];
  uint64_t v6 = &byte_10008A931[1743];
  if ((byte_10008B2E0 & 1) == 0)
  {
    byte_10008B2E0 = 1;
    if (!dword_10008B2E4) {
      dword_10008B2E4 = 1;
    }
    if (!qword_10008C740) {
      qword_10008C740 = (uint64_t)__stdinp;
    }
    if (!qword_10008C748) {
      qword_10008C748 = (uint64_t)__stdoutp;
    }
    uint64_t v7 = qword_10008B2E8;
    if (!qword_10008B2E8 || (uint64_t v8 = qword_10008B2F0, (v9 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0)) == 0))
    {
      sub_10005421C();
      uint64_t v9 = sub_1000542C4((FILE *)qword_10008C740, 0x4000);
      uint64_t v4 = &byte_10008A931[1743];
      uint64_t v7 = qword_10008B2E8;
      uint64_t v8 = qword_10008B2F0;
      *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0) = v9;
    }

    qword_10008B320 = *(void *)(v9 + 32);
    qword_10008B308 = *(void *)(v9 + 16);
    qword_10008C760 = qword_10008B308;
    qword_10008C740 = **(void **)(v7 + 8 * v8);
    byte_10008B310 = *(_BYTE *)qword_10008B308;
    BOOL v3 = &byte_10008A931[1743];
  }

  if ((byte_10008B2F8 & 1) == 0)
  {
    dword_10008B2E4 = 3;
    byte_10008B2F8 = 1;
  }

  uint64_t v10 = &byte_10008A931[1743];
  uint64_t v11 = byte_10006C39C;
  uint64_t v12 = &byte_10008A931[1743];
  uint64_t v13 = word_100070436;
  uint64_t v14 = &byte_10008A931[1743];
  uint64_t v15 = &byte_10008A931[1743];
  uint64_t v16 = &byte_10008BE9C[356];
LABEL_15:
  *((_DWORD *)v10 + 191) = 0;
  uint64_t v17 = (char *)*((void *)v4 + 97);
  if (v12[768] == 1)
  {
    *((_DWORD *)v10 + 191) = (_DWORD)v17 - *((_DWORD *)v5 + 472);
    v12[768] = 0;
  }

  *uint64_t v17 = v6[784];
  LODWORD(v18) = *((_DWORD *)v3 + 185);
  uint64_t v19 = v17;
  do
  {
LABEL_18:
    uint64_t v20 = v11[*v19];
    if (word_10006C49C[(int)v18])
    {
      *((_DWORD *)v15 + 197) = v18;
      *((void *)v14 + 99) = v19;
    }

    uint64_t v21 = (int)v18;
    uint64_t v22 = word_10006E5AE[(int)v18] + v20;
    if ((_DWORD)v18 != (__int16)word_10006D3AA[v22])
    {
      do
      {
        uint64_t v21 = word_10006F4D4[v21];
        if (v21 >= 1927) {
          uint64_t v20 = *((unsigned __int8 *)&unk_1000703FA + v20);
        }
        uint64_t v22 = word_10006E5AE[v21] + v20;
      }

      while (word_10006D3AA[v22] != (unsigned __int16)v21);
    }

    uint64_t v18 = v13[v22];
    ++v19;
  }

  while (word_10006E5AE[v18] != 2246);
  while (2)
  {
    LOWORD(v23) = word_10006C49C[(int)v18];
    if (!(_WORD)v23)
    {
      uint64_t v19 = (char *)*((void *)v14 + 99);
      LOWORD(v23) = word_10006C49C[*((int *)v15 + 197)];
    }

    int v23 = (__int16)v23;
    uint64_t v24 = &v17[-*((int *)v10 + 191)];
    *((void *)v5 + 236) = v24;
    *((void *)v16 + 235) = v19 - v24;
    v6[784] = *v19;
    char *v19 = 0;
    *((void *)v4 + 97) = v19;
LABEL_28:
    switch(v23)
    {
      case 0:
        char *v19 = v6[784];
        uint64_t v19 = (char *)*((void *)v14 + 99);
        LODWORD(v18) = *((_DWORD *)v15 + 197);
        continue;
      case 1:
        *((_DWORD *)v3 + 185) = 7;
        return 258LL;
      case 2:
        qword_10008C730 = 0LL;
        return 259LL;
      case 3:
        uint64_t v102 = 1LL;
        goto LABEL_151;
      case 4:
        uint64_t v102 = 2LL;
        goto LABEL_151;
      case 5:
        uint64_t v102 = 3LL;
        goto LABEL_151;
      case 6:
        uint64_t v102 = 4LL;
LABEL_151:
        qword_10008C730 = v102;
        return 259LL;
      case 7:
      case 10:
      case 21:
      case 84:
        *((_DWORD *)v3 + 185) = 3;
        return 412LL;
      case 8:
        return 260LL;
      case 9:
        *((_DWORD *)v3 + 185) = 9;
        sub_100054338("it is obsoleted.  use my_identifier in each remote directives.", v15, a3, v127);
        return 261LL;
      case 11:
        return 373LL;
      case 12:
        *((_DWORD *)v3 + 185) = 11;
        return 263LL;
      case 13:
        uint64_t v100 = 3LL;
        goto LABEL_130;
      case 14:
        uint64_t v100 = 4LL;
        goto LABEL_130;
      case 15:
        uint64_t v100 = 5LL;
        goto LABEL_130;
      case 16:
        uint64_t v100 = 6LL;
        goto LABEL_130;
      case 17:
      case 18:
        goto LABEL_129;
      case 19:
      case 20:
        sub_100054338("it is obsoleted.  use debug2", v15, a3);
LABEL_129:
        uint64_t v100 = 7LL;
LABEL_130:
        qword_10008C730 = v100;
        return 264LL;
      case 22:
        *((_DWORD *)v3 + 185) = 13;
        return 265LL;
      case 23:
      case 31:
      case 40:
      case 68:
      case 165:
        return 413LL;
      case 24:
        return 266LL;
      case 25:
        return 267LL;
      case 26:
        return 268LL;
      case 27:
        return 269LL;
      case 28:
        return 270LL;
      case 29:
      case 38:
      case 66:
      case 76:
      case 85:
      case 101:
        int v98 = 3;
        goto LABEL_123;
      case 30:
        *((_DWORD *)v3 + 185) = 15;
        return 271LL;
      case 32:
        return 272LL;
      case 33:
        return 273LL;
      case 34:
        return 274LL;
      case 35:
        return 276LL;
      case 36:
        return 277LL;
      case 37:
        return 275LL;
      case 39:
        *((_DWORD *)v3 + 185) = 19;
        return 278LL;
      case 41:
        return 279LL;
      case 42:
        return 280LL;
      case 43:
        return 281LL;
      case 44:
        return 282LL;
      case 45:
        return 283LL;
      case 46:
        return 284LL;
      case 47:
        return 285LL;
      case 48:
        return 292LL;
      case 49:
        return 294LL;
      case 50:
        return 293LL;
      case 51:
        return 286LL;
      case 52:
        return 290LL;
      case 53:
        return 291LL;
      case 54:
        return 287LL;
      case 55:
        return 288LL;
      case 56:
        return 296LL;
      case 57:
        return 295LL;
      case 58:
        return 297LL;
      case 59:
        return 298LL;
      case 60:
        return 299LL;
      case 61:
        return 300LL;
      case 62:
        return 301LL;
      case 63:
        return 302LL;
      case 64:
        return 303LL;
      case 65:
      case 96:
        return 415LL;
      case 67:
        *((_DWORD *)v3 + 185) = 17;
        return 304LL;
      case 69:
        return 305LL;
      case 70:
        return 306LL;
      case 71:
        return 307LL;
      case 72:
        return 308LL;
      case 73:
        return 309LL;
      case 74:
        return 310LL;
      case 75:
        return 311LL;
      case 77:
        *((_DWORD *)v3 + 185) = 25;
        return 315LL;
      case 78:
      case 98:
        return 319LL;
      case 79:
        return 386LL;
      case 80:
        return 388LL;
      case 81:
        return 316LL;
      case 82:
        return 317LL;
      case 83:
        int v103 = 27;
        goto LABEL_222;
      case 86:
        return 392LL;
      case 87:
        return 397LL;
      case 88:
      case 113:
        sub_100054338("it is obsoleted.  use my_identifier.", v15, a3, v127);
        return 261LL;
      case 89:
      case 114:
        return 336LL;
      case 90:
      case 149:
      case 167:
        return 393LL;
      case 91:
      case 150:
      case 168:
        return 394LL;
      case 92:
      case 151:
      case 169:
        return 395LL;
      case 93:
        qword_10008C730 = 0LL;
        return 312LL;
      case 94:
        uint64_t v104 = 1LL;
        goto LABEL_285;
      case 95:
        uint64_t v104 = 2LL;
        goto LABEL_285;
      case 97:
        *((_DWORD *)v3 + 185) = 29;
        return 318LL;
      case 99:
        return 320LL;
      case 100:
        int v103 = 31;
LABEL_222:
        *((_DWORD *)v3 + 185) = v103;
        return 413LL;
      case 102:
        return 321LL;
      case 103:
      case 296:
      case 298:
        goto LABEL_15;
      case 104:
        uint64_t v105 = 2LL;
        goto LABEL_227;
      case 105:
        uint64_t v105 = 4LL;
LABEL_227:
        qword_10008C730 = v105;
        return 322LL;
      case 106:
        return 323LL;
      case 107:
        qword_10008C730 = 1LL;
        return 324LL;
      case 108:
        return 325LL;
      case 109:
        return 422LL;
      case 110:
        uint64_t v106 = 1LL;
        goto LABEL_235;
      case 111:
        uint64_t v106 = 2LL;
        goto LABEL_235;
      case 112:
        uint64_t v106 = 4LL;
LABEL_235:
        qword_10008C730 = v106;
        return 326LL;
      case 115:
        return 382LL;
      case 116:
        return 337LL;
      case 117:
        return 338LL;
      case 118:
        return 339LL;
      case 119:
        return 327LL;
      case 120:
        return 330LL;
      case 121:
        qword_10008C730 = 4LL;
        return 348LL;
      case 122:
        uint64_t v93 = "plainrsa not supported.";
        goto LABEL_116;
      case 123:
        uint64_t v94 = v16;
        uint64_t v95 = v11;
        uint64_t v96 = v12;
        sub_1000543A8("Apple specific features not compiled in.", v15, a3);
        a3 = &jpt_1000529FC;
        uint64_t v15 = byte_10008A931 + 1743;
        uint64_t v14 = byte_10008A931 + 1743;
        uint64_t v13 = word_100070436;
        uint64_t v12 = v96;
        goto LABEL_121;
      case 124:
        return 340LL;
      case 125:
        return 343LL;
      case 126:
        return 344LL;
      case 127:
        return 329LL;
      case 128:
        return 347LL;
      case 129:
        return 331LL;
      case 130:
        return 332LL;
      case 131:
        return 333LL;
      case 132:
      case 173:
        return 351LL;
      case 133:
        return 350LL;
      case 134:
        return 362LL;
      case 135:
        sub_100054338("it is obsoleted.  use support_proxy.", v15, a3);
        return 364LL;
      case 136:
        return 364LL;
      case 137:
        return 354LL;
      case 138:
        return 355LL;
      case 139:
        qword_10008C730 = 2LL;
        return 357LL;
      case 140:
        return 358LL;
      case 141:
        return 359LL;
      case 142:
        return 360LL;
      case 143:
        uint64_t v107 = 1LL;
        goto LABEL_265;
      case 144:
        uint64_t v107 = 2LL;
        goto LABEL_265;
      case 145:
        uint64_t v107 = 4LL;
        goto LABEL_265;
      case 146:
        uint64_t v107 = 3LL;
LABEL_265:
        qword_10008C730 = v107;
        return 361LL;
      case 147:
        return 352LL;
      case 148:
        return 353LL;
      case 152:
        return 374LL;
      case 153:
        return 375LL;
      case 154:
        return 376LL;
      case 155:
        return 377LL;
      case 156:
        return 378LL;
      case 157:
        return 379LL;
      case 158:
        return 380LL;
      case 159:
        return 381LL;
      case 160:
        return 389LL;
      case 161:
        return 390LL;
      case 162:
        return 391LL;
      case 163:
        return 383LL;
      case 164:
        *((_DWORD *)v3 + 185) = 33;
        return 365LL;
      case 166:
        int v98 = 31;
LABEL_123:
        *((_DWORD *)v3 + 185) = v98;
        return 414LL;
      case 170:
        uint64_t v104 = 3LL;
        goto LABEL_285;
      case 171:
        uint64_t v104 = 6LL;
        goto LABEL_285;
      case 172:
        uint64_t v104 = 4LL;
LABEL_285:
        qword_10008C730 = v104;
        return 312LL;
      case 174:
      case 175:
        return 370LL;
      case 176:
        *((_DWORD *)v3 + 185) = 37;
        return 371LL;
      case 177:
        qword_10008C730 = 1LL;
        return 372LL;
      case 178:
        qword_10008C730 = 0LL;
        return 372LL;
      case 179:
        *((_DWORD *)v3 + 185) = 3;
        return 412LL;
      case 180:
        qword_10008C730 = 1LL;
        return 399LL;
      case 181:
        qword_10008C730 = 0LL;
        return 399LL;
      case 182:
        v108 = (const char *)(*((void *)v5 + 236) + 1LL);
        *((void *)v5 + 236) = v108;
        qword_10008C730 = atoi(v108);
        return 384LL;
      case 183:
        v109 = (unsigned __int8 *)(*((void *)v5 + 236) + 1LL);
        do
          int v110 = *v109++;
        while (v110 != 93);
        *(v109 - 1) = 0;
        uint64_t v111 = (const char *)(*((void *)v5 + 236) + 1LL);
        *((void *)v5 + 236) = v111;
        qword_10008C730 = atoi(v111);
        return 385LL;
      case 184:
        ++*((void *)v5 + 236);
        int v112 = sub_10003F4BC(*((void *)v16 + 235) + 1LL);
        qword_10008C730 = (uint64_t)v112;
        if (!v112) {
          goto LABEL_411;
        }
        memcpy((void *)v112[1], *((const void **)v5 + 236), *v112);
        return 404LL;
      case 185:
        uint64_t v113 = 50LL;
        goto LABEL_308;
      case 186:
        uint64_t v113 = 51LL;
        goto LABEL_308;
      case 187:
        uint64_t v113 = 108LL;
        goto LABEL_308;
      case 188:
        uint64_t v113 = 1LL;
        goto LABEL_308;
      case 189:
        uint64_t v113 = 58LL;
        goto LABEL_308;
      case 190:
        uint64_t v113 = 6LL;
        goto LABEL_308;
      case 191:
        uint64_t v113 = 17LL;
LABEL_308:
        qword_10008C730 = v113;
        return 387LL;
      case 192:
        uint64_t v101 = 1LL;
        goto LABEL_359;
      case 193:
        uint64_t v101 = 2LL;
        goto LABEL_359;
      case 194:
        uint64_t v101 = 3LL;
        goto LABEL_359;
      case 195:
        uint64_t v101 = 4LL;
        goto LABEL_359;
      case 196:
        uint64_t v101 = 5LL;
        goto LABEL_359;
      case 197:
        uint64_t v101 = 6LL;
        goto LABEL_359;
      case 198:
        uint64_t v101 = 7LL;
        goto LABEL_359;
      case 199:
        uint64_t v101 = 8LL;
        goto LABEL_359;
      case 200:
        uint64_t v101 = 9LL;
        goto LABEL_359;
      case 201:
        uint64_t v101 = 10LL;
        goto LABEL_359;
      case 202:
      case 203:
        uint64_t v101 = 11LL;
        goto LABEL_359;
      case 204:
      case 205:
        uint64_t v101 = 12LL;
        goto LABEL_359;
      case 206:
        uint64_t v101 = 13LL;
        goto LABEL_359;
      case 207:
        uint64_t v101 = 18LL;
        goto LABEL_359;
      case 208:
        uint64_t v101 = 14LL;
        goto LABEL_359;
      case 209:
        uint64_t v101 = 15LL;
        goto LABEL_359;
      case 210:
      case 211:
        uint64_t v101 = 19LL;
        goto LABEL_359;
      case 212:
      case 213:
        uint64_t v101 = 20LL;
        goto LABEL_359;
      case 214:
      case 215:
        uint64_t v101 = 21LL;
        goto LABEL_359;
      case 216:
        uint64_t v101 = 22LL;
        goto LABEL_359;
      case 217:
        uint64_t v101 = 23LL;
        goto LABEL_359;
      case 218:
        uint64_t v101 = 16LL;
        goto LABEL_359;
      case 219:
        uint64_t v101 = 17LL;
        goto LABEL_359;
      case 220:
        uint64_t v101 = 27LL;
        goto LABEL_359;
      case 221:
        uint64_t v101 = 28LL;
        goto LABEL_359;
      case 222:
        uint64_t v101 = 29LL;
        goto LABEL_359;
      case 223:
      case 224:
        uint64_t v101 = 30LL;
        goto LABEL_359;
      case 225:
      case 226:
        uint64_t v101 = 31LL;
        goto LABEL_359;
      case 227:
      case 228:
        uint64_t v101 = 32LL;
        goto LABEL_359;
      case 229:
        uint64_t v101 = 24LL;
        goto LABEL_359;
      case 230:
        uint64_t v101 = 25LL;
        goto LABEL_359;
      case 231:
        uint64_t v101 = 26LL;
        goto LABEL_359;
      case 232:
        uint64_t v101 = 33LL;
        goto LABEL_359;
      case 233:
        uint64_t v101 = 34LL;
        goto LABEL_359;
      case 234:
        uint64_t v101 = 37LL;
        goto LABEL_359;
      case 235:
        uint64_t v101 = 35LL;
        goto LABEL_359;
      case 236:
        uint64_t v101 = 36LL;
        goto LABEL_359;
      case 237:
        uint64_t v101 = 38LL;
        goto LABEL_359;
      case 238:
        uint64_t v101 = 39LL;
        goto LABEL_359;
      case 239:
        uint64_t v101 = 40LL;
        goto LABEL_359;
      case 240:
        uint64_t v101 = 41LL;
        goto LABEL_359;
      case 241:
        uint64_t v101 = 42LL;
        goto LABEL_359;
      case 242:
        uint64_t v101 = 43LL;
        goto LABEL_359;
      case 243:
        uint64_t v101 = 45LL;
        goto LABEL_359;
      case 244:
        uint64_t v101 = 44LL;
        goto LABEL_359;
      case 245:
        uint64_t v101 = 46LL;
        goto LABEL_359;
      case 246:
        uint64_t v101 = 47LL;
        goto LABEL_359;
      case 247:
        uint64_t v101 = 48LL;
        goto LABEL_359;
      case 248:
        uint64_t v101 = 49LL;
        goto LABEL_359;
      case 249:
        uint64_t v101 = 50LL;
        goto LABEL_359;
      case 250:
        uint64_t v101 = 51LL;
        goto LABEL_359;
      case 251:
        uint64_t v101 = 52LL;
        goto LABEL_359;
      case 252:
        uint64_t v101 = 53LL;
        goto LABEL_359;
      case 253:
        uint64_t v101 = 54LL;
        goto LABEL_359;
      case 254:
        uint64_t v101 = 55LL;
        goto LABEL_359;
      case 255:
        uint64_t v101 = 56LL;
        goto LABEL_359;
      case 256:
        uint64_t v101 = 57LL;
        goto LABEL_359;
      case 257:
        uint64_t v101 = 58LL;
LABEL_359:
        qword_10008C730 = v101;
        return 313LL;
      case 258:
        sub_100054338("it is obsoleted.", v15, a3);
        return 262LL;
      case 259:
        uint64_t v114 = 2LL;
        goto LABEL_370;
      case 260:
        uint64_t v114 = 1LL;
        goto LABEL_370;
      case 261:
        uint64_t v114 = 3LL;
        goto LABEL_370;
      case 262:
        uint64_t v114 = 8LL;
        goto LABEL_370;
      case 263:
        uint64_t v114 = 4LL;
        goto LABEL_370;
      case 264:
        uint64_t v114 = 7LL;
        goto LABEL_370;
      case 265:
        goto LABEL_369;
      case 266:
        sub_100054338("certname will be obsoleted in near future.", v15, a3);
LABEL_369:
        uint64_t v114 = 5LL;
LABEL_370:
        qword_10008C730 = v114;
        return 334LL;
      case 267:
        qword_10008C730 = 0LL;
        return 341LL;
      case 268:
        uint64_t v115 = 1LL;
        goto LABEL_374;
      case 269:
        uint64_t v93 = "Apple specific features not compiled in.";
LABEL_116:
        uint64_t v94 = v16;
        uint64_t v95 = v11;
        uint64_t v97 = v13;
        sub_1000543A8(v93, v15, a3, v127);
        goto LABEL_120;
      case 270:
        uint64_t v115 = 3LL;
LABEL_374:
        qword_10008C730 = v115;
        return 341LL;
      case 271:
        qword_10008C730 = 0LL;
        return 345LL;
      case 272:
        qword_10008C730 = 1LL;
        return 345LL;
      case 273:
        uint64_t v116 = 2LL;
        goto LABEL_380;
      case 274:
        uint64_t v116 = 1LL;
LABEL_380:
        qword_10008C730 = v116;
        return 346LL;
      case 275:
        uint64_t v117 = 2LL;
        goto LABEL_383;
      case 276:
        uint64_t v117 = 1LL;
LABEL_383:
        qword_10008C730 = v117;
        return 335LL;
      case 277:
        return 405LL;
      case 278:
        return 406LL;
      case 279:
        return 407LL;
      case 280:
        return 408LL;
      case 281:
        return 409LL;
      case 282:
        return 410LL;
      case 283:
        return 411LL;
      case 284:
        return 416LL;
      case 285:
        return 417LL;
      case 286:
        return 418LL;
      case 287:
        return 421LL;
      case 288:
        return 419LL;
      case 289:
        return 420LL;
      case 290:
        qword_10008C730 = 1LL;
        return 400LL;
      case 291:
        qword_10008C730 = 0LL;
        return 400LL;
      case 292:
        qword_10008C730 = strtol(*((const char **)v5 + 236), &__endptr, 10);
        return 398LL;
      case 293:
        v118 = v16;
        int v119 = sub_10003F4BC(*((void *)v16 + 235) + (*((void *)v16 + 235) & 1LL) + 1);
        qword_10008C730 = (uint64_t)v119;
        if (!v119) {
          goto LABEL_411;
        }
        v120 = (_WORD *)v119[1];
        _WORD *v120 = 30768;
        uint64_t v121 = v120 + 1;
        uint64_t v122 = *((void *)v118 + 235);
        if ((v122 & 1) != 0)
        {
          uint64_t v121 = (char *)v120 + 3;
          *((_BYTE *)v120 + 2) = 48;
          uint64_t v122 = *((void *)v118 + 235);
        }

        memcpy(v121, (const void *)(*((void *)v5 + 236) + 2LL), v122 - 1);
        return 401LL;
      case 294:
        int v123 = (unsigned __int8 *)(*((void *)v5 + 236) + 1LL);
        do
          int v124 = *v123++;
        while (v124 != 34);
        *(v123 - 1) = 0;
        uint64_t v125 = sub_10003F4BC(*((void *)v16 + 235) - 1LL);
        qword_10008C730 = (uint64_t)v125;
        if (!v125) {
          goto LABEL_411;
        }
        memcpy((void *)v125[1], (const void *)(*((void *)v5 + 236) + 1LL), *v125);
        return 402LL;
      case 295:
        v126 = sub_10003F4BC(*((void *)v16 + 235) + 1LL);
        qword_10008C730 = (uint64_t)v126;
        if (v126)
        {
          memcpy((void *)v126[1], *((const void **)v5 + 236), *v126);
          return 403LL;
        }

        else
        {
LABEL_411:
          sub_1000543A8("vmalloc failed", v127);
          return 0xFFFFFFFFLL;
        }

      case 297:
        ++dword_10008B330[32 * (uint64_t)dword_10008B330[0] + 8];
        goto LABEL_15;
      case 299:
        return 412LL;
      case 300:
        v12[768] = 1;
        goto LABEL_15;
      case 301:
        uint64_t v94 = v16;
        uint64_t v95 = v11;
        uint64_t v97 = v13;
        fwrite(*((const void **)v5 + 236), *((void *)v16 + 235), 1uLL, (FILE *)qword_10008C748);
LABEL_120:
        a3 = &jpt_1000529FC;
        uint64_t v15 = byte_10008A931 + 1743;
        uint64_t v14 = byte_10008A931 + 1743;
        uint64_t v13 = v97;
        uint64_t v12 = byte_10008A931 + 1743;
LABEL_121:
        uint64_t v11 = v95;
        uint64_t v16 = v94;
        uint64_t v10 = byte_10008A931 + 1743;
        uint64_t v4 = byte_10008A931 + 1743;
        goto LABEL_15;
      case 302:
        uint64_t v25 = *((void *)v5 + 236);
        char *v19 = v6[784];
        uint64_t v26 = qword_10008B2E8;
        uint64_t v27 = qword_10008B2F0;
        uint64_t v28 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0);
        uint64_t v127 = v25;
        if (*(_DWORD *)(v28 + 64))
        {
          uint64_t v29 = qword_10008B320;
        }

        else
        {
          uint64_t v29 = *(void *)(v28 + 32);
          qword_10008B320 = v29;
          *(void *)uint64_t v28 = qword_10008C740;
          uint64_t v28 = *(void *)(v26 + 8 * v27);
          *(_DWORD *)(v28 + 64) = 1;
        }

        unint64_t v30 = *((void *)v4 + 97);
        int v31 = *(_BYTE **)(v28 + 8);
        if (v30 <= (unint64_t)&v31[v29])
        {
          uint64_t v5 = &byte_10008BE9C[356];
          uint64_t v19 = (char *)(qword_10008C760 + ~(_DWORD)v25 + (int)v19);
          *((void *)v4 + 97) = v19;
          uint64_t v70 = v14;
          uint64_t v71 = v15;
          LODWORD(v18) = sub_1000546B8();
          uint64_t v15 = v71;
          uint64_t v14 = v70;
          if (word_10006C49C[(int)v18])
          {
            *((_DWORD *)v71 + 197) = v18;
            *((void *)v70 + 99) = v19;
          }

          uint64_t v72 = (int)v18;
          uint64_t v73 = word_10006E5AE[(int)v18] + 1LL;
          uint64_t v4 = &byte_10008A931[1743];
          uint64_t v6 = byte_10008A931 + 1743;
          uint64_t v16 = byte_10008BE9C + 356;
          uint64_t v10 = &byte_10008A931[1743];
          uint64_t v11 = byte_10006C39C;
          uint64_t v12 = byte_10008A931 + 1743;
          uint64_t v13 = word_100070436;
          a3 = &jpt_1000529FC;
          if ((_DWORD)v18 != (__int16)word_10006D3AA[v73])
          {
            do
            {
              int v74 = (unsigned __int16)word_10006F4D4[v72];
              uint64_t v72 = (__int16)v74;
              uint64_t v73 = word_10006E5AE[(__int16)v74] + 1LL;
            }

            while (v74 != word_10006D3AA[v73]);
          }

          int v75 = (unsigned __int16)word_100070436[v73];
          uint64_t v17 = (char *)(qword_10008C760 + dword_10008B2FC);
          if (word_100070436[v73] && v75 != 1926)
          {
            LODWORD(v18) = (__int16)v75;
            qword_10008B308 = (uint64_t)++v19;
            goto LABEL_18;
          }

          continue;
        }

        unsigned int v32 = (char *)qword_10008C760;
        if (!*(_DWORD *)(v28 + 60))
        {
          uint64_t v36 = *((int *)v10 + 191);
          uint64_t v5 = byte_10008BE9C + 356;
          if (v30 - (qword_10008C760 + v36) != 1) {
            goto LABEL_91;
          }
          goto LABEL_85;
        }

        int v33 = ~(_DWORD)qword_10008C760 + v30;
        if (v33 >= 1)
        {
          int v34 = ~(_DWORD)qword_10008C760 + v30;
          do
          {
            char v35 = *v32++;
            *v31++ = v35;
            --v34;
          }

          while (v34);
          uint64_t v28 = *(void *)(v26 + 8 * v27);
        }

        unsigned int v131 = v17;
        if (*(_DWORD *)(v28 + 64) == 2)
        {
          qword_10008B320 = 0LL;
          goto LABEL_41;
        }

        int v37 = *(_DWORD *)(v28 + 24);
        unsigned int v38 = v37 + ~v33;
        int v128 = v33;
        if (!v38)
        {
          int v132 = ~v33;
          do
          {
            if (!*(_DWORD *)(v28 + 40))
            {
              *(void *)(v28 + 8) = 0LL;
LABEL_414:
              sub_100054798("fatal error - scanner input buffer overflow");
            }

            int v39 = v30;
            uint64_t v40 = v27;
            uint64_t v41 = v26;
            uint64_t v42 = v4;
            int v43 = *(void **)(v28 + 8);
            int v44 = 2 * v37;
            *(_DWORD *)(v28 + 24) = v44;
            uint64_t v134 = v28;
            int v45 = realloc(v43, v44 + 2);
            *(void *)(v134 + 8) = v45;
            if (!v45) {
              goto LABEL_414;
            }
            unint64_t v30 = (unint64_t)v45 + v39 - (int)v43;
            uint64_t v4 = v42;
            *((void *)v42 + 97) = v30;
            uint64_t v26 = v41;
            uint64_t v27 = v40;
            uint64_t v28 = *(void *)(v41 + 8 * v40);
            int v37 = *(_DWORD *)(v28 + 24);
            unsigned int v38 = v37 + v132;
          }

          while (!(v37 + v132));
          uint64_t v10 = &byte_10008A931[1743];
          int v33 = v128;
        }

        if (v38 >= 0x2000) {
          size_t v46 = 0x2000LL;
        }
        else {
          size_t v46 = v38;
        }
        if (*(_DWORD *)(v28 + 44))
        {
          size_t v47 = v46;
          unint64_t v48 = 0LL;
          while (1)
          {
            int v49 = getc((FILE *)qword_10008C740);
            if (v49 == -1 || v49 == 10) {
              break;
            }
            *(_BYTE *)(*(void *)(*(void *)(qword_10008B2E8 + 8 * qword_10008B2F0) + 8LL) + v33 + v48++) = v49;
            if (v47 == v48)
            {
              unint64_t v48 = v47;
              break;
            }
          }

          if (v49 == -1)
          {
            int v54 = ferror((FILE *)qword_10008C740);
            uint64_t v16 = byte_10008BE9C + 356;
            uint64_t v11 = byte_10006C39C;
            uint64_t v12 = byte_10008A931 + 1743;
            uint64_t v14 = byte_10008A931 + 1743;
            uint64_t v15 = byte_10008A931 + 1743;
            a3 = &jpt_1000529FC;
            uint64_t v17 = v131;
            if (v54) {
LABEL_417:
            }
              sub_100054798("input in flex scanner failed");
          }

          else
          {
            if (v49 == 10) {
              *(_BYTE *)(*(void *)(*(void *)(qword_10008B2E8 + 8 * qword_10008B2F0) + 8LL) + v33 + v48++) = 10;
            }
            uint64_t v16 = byte_10008BE9C + 356;
            uint64_t v11 = byte_10006C39C;
            uint64_t v12 = byte_10008A931 + 1743;
            uint64_t v14 = byte_10008A931 + 1743;
            uint64_t v15 = byte_10008A931 + 1743;
            a3 = &jpt_1000529FC;
            uint64_t v17 = v131;
          }

          qword_10008B320 = v48;
LABEL_73:
          uint64_t v26 = qword_10008B2E8;
          uint64_t v27 = qword_10008B2F0;
          uint64_t v28 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0);
          *(void *)(v28 + 32) = v48;
          if (v48)
          {
            int v55 = 0;
            int v33 = v128;
            uint64_t v6 = byte_10008A931 + 1743;
            goto LABEL_79;
          }

          int v33 = v128;
          uint64_t v6 = byte_10008A931 + 1743;
        }

        else
        {
          *__error() = 0;
          size_t v51 = fread( (void *)(*(void *)(*(void *)(qword_10008B2E8 + 8 * qword_10008B2F0) + 8LL) + v33),  1uLL,  v46,  (FILE *)qword_10008C740);
          size_t v52 = v46;
          unint64_t v48 = (int)v51;
          qword_10008B320 = (int)v51;
          uint64_t v16 = byte_10008BE9C + 356;
          uint64_t v11 = byte_10006C39C;
          uint64_t v12 = byte_10008A931 + 1743;
          uint64_t v14 = byte_10008A931 + 1743;
          uint64_t v15 = byte_10008A931 + 1743;
          a3 = &jpt_1000529FC;
          uint64_t v17 = v131;
          if (v51 << 32) {
            goto LABEL_73;
          }
          size_t v135 = v52;
          while (ferror((FILE *)qword_10008C740))
          {
            if (*__error() != 4) {
              goto LABEL_417;
            }
            *__error() = 0;
            clearerr((FILE *)qword_10008C740);
            size_t v53 = fread( (void *)(*(void *)(*(void *)(qword_10008B2E8 + 8 * qword_10008B2F0) + 8LL) + v128),  1uLL,  v135,  (FILE *)qword_10008C740);
            unint64_t v48 = (int)v53;
            qword_10008B320 = (int)v53;
            if (v53 << 32)
            {
              uint64_t v16 = byte_10008BE9C + 356;
              uint64_t v11 = byte_10006C39C;
              uint64_t v12 = byte_10008A931 + 1743;
              uint64_t v14 = byte_10008A931 + 1743;
              uint64_t v15 = byte_10008A931 + 1743;
              a3 = &jpt_1000529FC;
              uint64_t v17 = v131;
              goto LABEL_73;
            }
          }

          uint64_t v26 = qword_10008B2E8;
          uint64_t v27 = qword_10008B2F0;
          uint64_t v28 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0);
          uint64_t v16 = byte_10008BE9C + 356;
          uint64_t v11 = byte_10006C39C;
          uint64_t v12 = byte_10008A931 + 1743;
          uint64_t v14 = byte_10008A931 + 1743;
          uint64_t v15 = byte_10008A931 + 1743;
          a3 = &jpt_1000529FC;
          int v33 = v128;
          uint64_t v17 = v131;
          uint64_t v6 = byte_10008A931 + 1743;
LABEL_41:
          *(void *)(v28 + 32) = 0LL;
        }

        if (*((_DWORD *)v10 + 191) == v33)
        {
          uint64_t v56 = v16;
          int v129 = v33;
          uint64_t v57 = v11;
          int v58 = v12;
          sub_1000547CC((FILE *)qword_10008C740);
          a3 = &jpt_1000529FC;
          uint64_t v15 = byte_10008A931 + 1743;
          uint64_t v14 = byte_10008A931 + 1743;
          uint64_t v12 = v58;
          uint64_t v11 = v57;
          int v33 = v129;
          uint64_t v17 = v131;
          uint64_t v16 = v56;
          unint64_t v48 = qword_10008B320;
          uint64_t v26 = qword_10008B2E8;
          uint64_t v27 = qword_10008B2F0;
          uint64_t v28 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0);
          int v55 = 1;
        }

        else
        {
          unint64_t v48 = 0LL;
          int v55 = 2;
          *(_DWORD *)(v28 + 64) = 2;
        }

void *sub_10005421C()
{
  uint64_t result = (void *)qword_10008B2E8;
  if (qword_10008B2E8)
  {
    uint64_t v1 = qword_10008B328;
    if (qword_10008B2F0 >= (unint64_t)(qword_10008B328 - 1))
    {
      uint64_t result = realloc((void *)qword_10008B2E8, 8 * (qword_10008B328 + 8));
      qword_10008B2E8 = (uint64_t)result;
      if (result)
      {
        uint64_t v2 = &result[v1];
        v2[2] = 0u;
        v2[3] = 0u;
        *uint64_t v2 = 0u;
        v2[1] = 0u;
        qword_10008B328 = v1 + 8;
        return result;
      }

uint64_t sub_1000542C4(FILE *a1, int a2)
{
  uint64_t v4 = malloc(0x48uLL);
  *(_DWORD *)(v5 + 40) = 1;
  sub_100054878(v5, a1);
  return v5;
}

void sub_100054338(char *__format, ...)
{
}

void sub_1000543A8(char *__format, ...)
{
}

void sub_100054418(void **a1)
{
  if (a1)
  {
    if (qword_10008B2E8) {
      uint64_t v2 = *(void ***)(qword_10008B2E8 + 8 * qword_10008B2F0);
    }
    else {
      uint64_t v2 = 0LL;
    }
    if (v2 == a1) {
      *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0) = 0LL;
    }
    if (*((_DWORD *)a1 + 10)) {
      free(a1[1]);
    }
    free(a1);
  }

uint64_t sub_100054480(const char *a1)
{
  uint64_t v2 = fopen(a1, "r");
  qword_10008C740 = (uint64_t)v2;
  if (v2)
  {
    uint64_t v3 = dword_10008B330[0];
    if (*(void *)&dword_10008B330[32 * (uint64_t)dword_10008B330[0] + 2])
    {
      fclose(*((FILE **)&unk_10008B338 + 16 * (uint64_t)dword_10008B330[0] + 1));
      uint64_t v3 = dword_10008B330[0];
      free(*((void **)&unk_10008B338 + 16 * (uint64_t)dword_10008B330[0]));
      uint64_t v2 = (FILE *)qword_10008C740;
    }

    uint64_t v4 = &dword_10008B330[32 * v3];
    *((void *)v4 + 2) = v2;
    uint64_t v5 = strdup(a1);
    *((void *)v4 + 1) = v5;
    if (!v5)
    {
      if (dword_10008BA20)
      {
        uint64_t v13 = (os_log_s *)ne_log_obj(0LL);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_100061E48(v13, v14, v15, v16, v17, v18, v19, v20);
        }
      }

      exit(1);
    }

    v4[8] = 1;
    if (!dword_10008BA20) {
      return 0LL;
    }
    uint64_t v6 = (os_log_s *)ne_log_obj(v5);
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      sub_100069034((uint64_t)a1, v6);
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = __stderrp;
    uint64_t v9 = __error();
    uint64_t v10 = strerror(*v9);
    uint64_t v11 = fprintf(v8, "failed to open file %s (%s)\n", a1, v10);
    if (dword_10008BA20)
    {
      uint64_t v12 = (os_log_s *)ne_log_obj(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_100068F98((uint64_t)a1, v12);
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

void *sub_1000545F8(uint64_t a1)
{
  uint64_t result = sub_10005421C();
  uint64_t v3 = qword_10008B2E8;
  if (qword_10008B2E8)
  {
    uint64_t v4 = qword_10008B2F0;
    uint64_t v5 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0);
    if (v5 == a1) {
      return result;
    }
    if (v5)
    {
      uint64_t v6 = qword_10008B308;
      *(_BYTE *)qword_10008B308 = byte_10008B310;
      *(void *)(*(void *)(v3 + 8 * v4) + 16LL) = v6;
      *(void *)(*(void *)(v3 + 8 * v4) + 32LL) = qword_10008B320;
    }
  }

  else
  {
    if (!a1) {
      return result;
    }
    uint64_t v4 = qword_10008B2F0;
  }

  *(void *)(v3 + 8 * v4) = a1;
  qword_10008B320 = *(void *)(a1 + 32);
  qword_10008B308 = *(void *)(a1 + 16);
  qword_10008C760 = qword_10008B308;
  qword_10008C740 = **(void **)(v3 + 8 * v4);
  byte_10008B310 = *(_BYTE *)qword_10008B308;
  return result;
}

uint64_t sub_1000546B8()
{
  uint64_t result = dword_10008B2E4;
  for (uint64_t i = (_BYTE *)(qword_10008C760 + dword_10008B2FC); (unint64_t)i < qword_10008B308; ++i)
  {
    if (*i) {
      uint64_t v2 = byte_10006C39C[*i];
    }
    else {
      uint64_t v2 = &_mh_execute_header.magic + 1;
    }
    if (word_10006C49C[(int)result])
    {
      dword_10008B314 = result;
      qword_10008B318 = (uint64_t)i;
    }

    uint64_t v3 = (int)result;
    uint64_t v4 = word_10006E5AE[(int)result] + v2;
    if ((_DWORD)result != (__int16)word_10006D3AA[v4])
    {
      do
      {
        uint64_t v3 = word_10006F4D4[v3];
        if (v3 >= 1927) {
          uint64_t v2 = *((unsigned __int8 *)&unk_1000703FA + v2);
        }
        uint64_t v4 = word_10006E5AE[v3] + v2;
      }

      while (word_10006D3AA[v4] != (unsigned __int16)v3);
    }

    uint64_t result = word_100070436[v4];
  }

  return result;
}

void sub_100054798(const char *a1)
{
}

int *sub_1000547CC(FILE *a1)
{
  if (!qword_10008B2E8 || (uint64_t v2 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0)) == 0)
  {
    sub_10005421C();
    uint64_t v2 = sub_1000542C4((FILE *)qword_10008C740, 0x4000);
    *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0) = v2;
  }

  uint64_t result = sub_100054878(v2, a1);
  uint64_t v4 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0);
  uint64_t v5 = *(void *)(v4 + 32);
  qword_10008B308 = *(void *)(v4 + 16);
  qword_10008C760 = qword_10008B308;
  uint64_t v6 = *(uint64_t **)(qword_10008B2E8 + 8 * qword_10008B2F0);
  qword_10008B320 = v5;
  qword_10008C740 = *v6;
  byte_10008B310 = *(_BYTE *)qword_10008B308;
  return result;
}

int *sub_100054878(uint64_t a1, FILE *a2)
{
  int v4 = *__error();
  sub_10005491C(a1);
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 1;
  uint64_t v5 = qword_10008B2E8;
  if (qword_10008B2E8) {
    uint64_t v5 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0);
  }
  if (v5 != a1) {
    *(void *)(a1 + 52) = 1LL;
  }
  if (a2)
  {
    int v6 = fileno(a2);
    BOOL v7 = isatty(v6) > 0;
  }

  else
  {
    BOOL v7 = 0;
  }

  *(_DWORD *)(a1 + 44) = v7;
  uint64_t result = __error();
  *uint64_t result = v4;
  return result;
}

uint64_t sub_10005491C(uint64_t result)
{
  if (result)
  {
    *(void *)(result + 32) = 0LL;
    **(_BYTE **)(result + 8) = 0;
    *(_BYTE *)(*(void *)(result + 8) + 1LL) = 0;
    *(void *)(result + 16) = *(void *)(result + 8);
    *(_DWORD *)(result + 48) = 1;
    *(_DWORD *)(result + 64) = 0;
    if (qword_10008B2E8) {
      uint64_t v1 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0);
    }
    else {
      uint64_t v1 = 0LL;
    }
    if (v1 == result)
    {
      uint64_t v2 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0);
      qword_10008B320 = *(void *)(v2 + 32);
      qword_10008B308 = *(void *)(v2 + 16);
      qword_10008C760 = qword_10008B308;
      qword_10008C740 = **(void **)(qword_10008B2E8 + 8 * qword_10008B2F0);
      byte_10008B310 = *(_BYTE *)qword_10008B308;
    }
  }

  return result;
}

void *sub_1000549BC(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = sub_10005421C();
    uint64_t v2 = qword_10008B2E8;
    uint64_t v3 = qword_10008B2F0;
    if (qword_10008B2E8)
    {
      if (*(void *)(qword_10008B2E8 + 8 * qword_10008B2F0))
      {
        uint64_t v4 = qword_10008B308;
        *(_BYTE *)qword_10008B308 = byte_10008B310;
        *(void *)(*(void *)(v2 + 8 * v3) + 16LL) = v4;
        *(void *)(*(void *)(v2 + 8 * v3++) + 32LL) = qword_10008B320;
        qword_10008B2F0 = v3;
      }
    }

    *(void *)(v2 + 8 * v3) = v1;
    uint64_t v5 = v1[4];
    qword_10008B308 = v1[2];
    qword_10008C760 = qword_10008B308;
    int v6 = *(uint64_t **)(v2 + 8 * v3);
    qword_10008B320 = v5;
    qword_10008C740 = *v6;
    byte_10008B310 = *(_BYTE *)qword_10008B308;
  }

  return result;
}

void sub_100054A64()
{
  if (qword_10008B2E8)
  {
    uint64_t v0 = *(void ***)(qword_10008B2E8 + 8 * qword_10008B2F0);
    if (v0)
    {
      sub_100054418(v0);
      uint64_t v1 = qword_10008B2E8;
      uint64_t v2 = qword_10008B2F0;
      *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0) = 0LL;
      if (v2)
      {
        uint64_t v3 = v2 - 1;
        qword_10008B2F0 = v3;
        uint64_t v4 = *(void *)(v1 + 8 * v3);
        if (v4)
        {
          qword_10008B320 = *(void *)(v4 + 32);
          qword_10008B308 = *(void *)(v4 + 16);
          qword_10008C760 = qword_10008B308;
          qword_10008C740 = **(void **)(v1 + 8 * v3);
          byte_10008B310 = *(_BYTE *)qword_10008B308;
        }
      }
    }
  }

char *sub_100054AF8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 - 2;
  if (a2 < 2 || *(_BYTE *)(a1 + v2) || *(_BYTE *)(a2 + a1 - 1)) {
    return 0LL;
  }
  int v6 = (char *)malloc(0x48uLL);
  if (!v6) {
    sub_100054798("out of dynamic memory in yy_scan_buffer()");
  }
  uint64_t v4 = v6;
  *((_DWORD *)v6 + 6) = v2;
  *((void *)v6 + 1) = a1;
  *((void *)v6 + 2) = a1;
  *(void *)int v6 = 0LL;
  *((void *)v6 + 4) = (int)v2;
  *((void *)v6 + 5) = 0LL;
  *((_DWORD *)v6 + 12) = 1;
  *(void *)(v6 + 60) = 0LL;
  sub_1000545F8((uint64_t)v6);
  return v4;
}

char *sub_100054B8C(const char *a1)
{
  size_t v2 = (int)strlen(a1);
  return sub_100054BB4(a1, v2);
}

char *sub_100054BB4(const void *a1, size_t a2)
{
  unint64_t v4 = a2 + 2;
  uint64_t v5 = malloc(a2 + 2);
  if (!v5) {
    sub_100054798("out of dynamic memory in yy_scan_bytes()");
  }
  uint64_t v6 = (uint64_t)v5;
  if (a2) {
    memcpy(v5, a1, a2);
  }
  *(_WORD *)(v6 + a2) = 0;
  uint64_t result = sub_100054AF8(v6, v4);
  if (!result) {
    sub_100054798("bad buffer in yy_scan_bytes()");
  }
  *((_DWORD *)result + 10) = 1;
  return result;
}

uint64_t sub_100054C38()
{
  return dword_100088534;
}

uint64_t sub_100054C44()
{
  return qword_10008C740;
}

uint64_t sub_100054C50()
{
  return qword_10008C748;
}

uint64_t sub_100054C5C()
{
  return qword_10008C758;
}

uint64_t sub_100054C68()
{
  return qword_10008C760;
}

uint64_t sub_100054C74(uint64_t result)
{
  dword_100088534 = result;
  return result;
}

uint64_t sub_100054C80(uint64_t result)
{
  qword_10008C740 = result;
  return result;
}

uint64_t sub_100054C8C(uint64_t result)
{
  qword_10008C748 = result;
  return result;
}

uint64_t sub_100054C98()
{
  return dword_10008C750;
}

uint64_t sub_100054CA4(uint64_t result)
{
  dword_10008C750 = result;
  return result;
}

uint64_t sub_100054CB0()
{
  for (uint64_t i = (void *)qword_10008B2E8; qword_10008B2E8; uint64_t i = (void *)qword_10008B2E8)
  {
    if (!i[qword_10008B2F0]) {
      break;
    }
    sub_100054418((void **)i[qword_10008B2F0]);
    *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0) = 0LL;
    sub_100054A64();
  }

  free(i);
  qword_10008B2E8 = 0LL;
  qword_10008B2F0 = 0LL;
  qword_10008B328 = 0LL;
  qword_10008B308 = 0LL;
  byte_10008B2E0 = 0;
  dword_10008B2E4 = 0;
  qword_10008C740 = 0LL;
  qword_10008C748 = 0LL;
  return 0LL;
}

void sub_100054D48(uint64_t a1)
{
  if (dword_10008BA20)
  {
    uint64_t v1 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1000690A8();
    }
  }

  ++dword_10008C754;
}

void sub_100054DA8(uint64_t a1)
{
  if (dword_10008BA20)
  {
    uint64_t v1 = (os_log_s *)ne_log_obj(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1000690A8();
    }
  }

uint64_t sub_100054DF8(const char *a1)
{
  if (dword_10008B330[0] < 10)
  {
    uint64_t v11 = glob(a1, 2048, 0LL, (glob_t *)&dword_10008B330[32 * (uint64_t)dword_10008B330[0] + 10]);
    if ((_DWORD)v11
      || (uint64_t v14 = dword_10008B330[0], v15 = &dword_10008B330[32 * (uint64_t)dword_10008B330[0]], !*((void *)v15 + 5)))
    {
      if (dword_10008BA20)
      {
        uint64_t v12 = (os_log_s *)ne_log_obj(v11);
        BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0LL;
        if (!v13) {
          return result;
        }
        int v24 = 136315138;
        uint64_t v25 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "glob found no matches for path %s\n",  (uint8_t *)&v24,  0xCu);
      }

      return 0LL;
    }

    else
    {
      v15[32] = 0;
      uint64_t v16 = v15 + 32;
      uint64_t v17 = qword_10008B2E8;
      if (qword_10008B2E8) {
        uint64_t v17 = *(void *)(qword_10008B2E8 + 8 * qword_10008B2F0);
      }
      uint64_t v18 = 0LL;
      int v19 = 0;
      *(void *)&dword_10008B330[32 * v14 + 6] = v17;
      LODWORD(v17) = v14 + 1;
      while (1)
      {
        uint64_t v20 = *(const char **)(*(void *)&dword_10008B330[32 * v14 + 18] + 8 * v18);
        _DWORD *v16 = v19 + 1;
        dword_10008B330[0] = v17;
        uint64_t v17 = dword_10008B330[0];
        uint64_t v14 = --dword_10008B330[0];
        uint64_t v21 = &dword_10008B330[32 * v17 - 32];
        int v22 = v21[32];
        uint64_t v16 = v21 + 32;
        int v19 = v22;
        uint64_t v18 = v22;
      }

      uint64_t v23 = sub_1000542C4((FILE *)qword_10008C740, 0x4000);
      sub_1000545F8(v23);
      uint64_t result = 0LL;
      dword_10008B2E4 = 3;
    }
  }

  else
  {
    if (dword_10008BA20)
    {
      uint64_t v1 = (os_log_s *)ne_log_obj(a1);
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        sub_100069114(v1, v2, v3, v4, v5, v6, v7, v8);
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

void sub_100054FC4()
{
  uint64_t v0 = &dword_100000008;
  do
  {
    uint64_t v1 = (_OWORD *)((char *)&dword_10008B330 + v0);
    v1[6] = 0uLL;
    v1[7] = 0uLL;
    v1[4] = 0uLL;
    v1[5] = 0uLL;
    v1[2] = 0uLL;
    v1[3] = 0uLL;
    v0 += 128LL;
    *uint64_t v1 = 0uLL;
    v1[1] = 0uLL;
  }

  while (v0 != 1288);
  dword_10008B330 = 0;
}

void sub_100055000()
{
  for (uint64_t i = 0LL; i != 320; i += 32LL)
  {
    uint64_t v1 = &dword_10008B330[i];
    if (*(void *)&dword_10008B330[i + 2])
    {
      fclose(*((FILE **)v1 + 2));
      free(*((void **)v1 + 1));
      *((void *)v1 + 1) = 0LL;
    }
  }

void sub_10005507C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_1000550A8()
{
}

void sub_1000550D4()
{
}

void sub_100055100()
{
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "===\n", v1, 2u);
  sub_100004AE4();
}

void sub_100055138()
{
}

void sub_100055164()
{
}

void sub_100055190()
{
}

void sub_1000551BC()
{
}

void sub_10005521C()
{
}

void sub_10005527C()
{
}

void sub_1000552DC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100055340( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100055370( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000553A0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100055404()
{
}

void sub_100055430()
{
}

void sub_10005545C()
{
}

void sub_100055488()
{
}

void sub_1000554B4()
{
}

void sub_10005551C()
{
}

void sub_100055548()
{
}

void sub_1000555B0()
{
}

void sub_1000555DC()
{
}

void sub_100055608(int *a1, os_log_s *a2)
{
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "eval result unknown: value = %d.\n",  (uint8_t *)v3,  8u);
  sub_100004AE4();
}

void sub_10005567C()
{
  sub_1000068DC((void *)&_mh_execute_header, v0, v1, "eval uint64_t result = kSecTrustResultInvalid.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_1000556A8()
{
  sub_1000068DC((void *)&_mh_execute_header, v0, v1, "eval uint64_t result = kSecTrustResultProceed.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_1000556D4()
{
  sub_1000068DC((void *)&_mh_execute_header, v0, v1, "eval uint64_t result = kSecTrustResultDeny.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100055700()
{
  sub_1000068DC((void *)&_mh_execute_header, v0, v1, "eval uint64_t result = kSecTrustResultUnspecified.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005572C()
{
  sub_1000068DC( (void *)&_mh_execute_header,  v0,  v1,  "eval uint64_t result = kSecTrustResultRecoverableTrustFailure.\n",  v2,  v3,  v4,  v5,  v6);
  sub_100004AE4();
}

void sub_100055758()
{
  sub_1000068DC( (void *)&_mh_execute_header,  v0,  v1,  "eval uint64_t result = kSecTrustResultFatalTrustFailure.\n",  v2,  v3,  v4,  v5,  v6);
  sub_100004AE4();
}

void sub_100055784()
{
  sub_1000068DC((void *)&_mh_execute_header, v0, v1, "eval uint64_t result = kSecTrustResultOtherError.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_1000557B0()
{
}

void sub_1000557DC(int a1, os_log_s *a2)
{
  int v2 = 136315394;
  uint64_t v3 = "crypto_cssm_check_x509cert";
  __int16 v4 = 1024;
  int v5 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "%s: checking chain of %d certificates.\n",  (uint8_t *)&v2,  0x12u);
}

void sub_100055864()
{
}

void sub_100055890()
{
}

void sub_1000558F8()
{
}

void sub_100055960()
{
}

void sub_10005598C()
{
}

void sub_1000559B8()
{
}

void sub_1000559E4()
{
}

void sub_100055A10()
{
  uint64_t v2 = sub_10000883C();
  uint64_t v3 = sub_1000087FC(v2);
  *uint64_t v1 = 136315138;
  os_log_s *v0 = v3;
  sub_100008818((void *)&_mh_execute_header, v4, v5, "socket(SOCK_DGRAM) failed:%s\n");
  sub_100008858();
}

void sub_100055A54()
{
  uint64_t v2 = sub_10000883C();
  uint64_t v3 = sub_1000087FC(v2);
  *uint64_t v1 = 136315138;
  os_log_s *v0 = v3;
  sub_100008818((void *)&_mh_execute_header, v4, v5, "ioctl(SIOCGIFAFLAG_IN6) failed:%s\n");
  sub_100008858();
}

void sub_100055A98(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "failed to put IPv6 socket in non-blocking mode\n",  buf,  2u);
}

void sub_100055AD4(os_log_s *a1)
{
  uint64_t v2 = sub_100008864();
  int v3 = 136315138;
  uint64_t v4 = sub_1000087FC(v2);
  _os_log_error_impl( (void *)&_mh_execute_header,  a1,  OS_LOG_TYPE_ERROR,  "getifaddrs failed: %s\n",  (uint8_t *)&v3,  0xCu);
  sub_100006918();
}

void sub_100055B54()
{
}

void sub_100055B80()
{
}

void sub_100055BAC()
{
}

void sub_100055BD8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100055C3C()
{
}

void sub_100055C68(uint8_t *a1, uint64_t a2, _DWORD *a3, os_log_s *a4)
{
  int v4 = *(unsigned __int8 *)(*(void *)a2 + 1LL);
  *(_DWORD *)a1 = 67109120;
  *a3 = v4;
  sub_10000884C((void *)&_mh_execute_header, a4, (uint64_t)a3, "unsupported AF %d\n", a1);
}

void sub_100055CB0(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 1);
  v4[0] = 67109120;
  v4[1] = v3;
  sub_10000884C((void *)&_mh_execute_header, a2, a3, "no socket matches address family %d\n", (uint8_t *)v4);
  sub_100004AE4();
}

void sub_100055D1C()
{
  int v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100008804((void *)&_mh_execute_header, v1, v2, "read(PF_ROUTE) failed: %s\n", v3, v4, v5, v6, 2u);
  sub_100006918();
}

void sub_100055D8C()
{
}

void sub_100055DB8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100055E20()
{
  int v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100008804((void *)&_mh_execute_header, v1, v2, "socket(PF_ROUTE) failed: %s", v3, v4, v5, v6, 2u);
  sub_100006918();
}

void sub_100055E90()
{
}

void sub_100055EBC()
{
}

void sub_100055EE8()
{
}

void sub_100055F14()
{
}

void sub_100055F40(_DWORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = sub_10003C888(*(const sockaddr **)(a2 + 48));
  *a1 = 136315138;
  *a3 = v5;
  sub_10000B4E8((void *)&_mh_execute_header, v6, v7, "p->remote: %s\n");
  sub_100008858();
}

void sub_100055F90(_DWORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = sub_10003C888(*(const sockaddr **)(a2 + 56));
  *a1 = 136315138;
  *a3 = v5;
  sub_10000B4E8((void *)&_mh_execute_header, v6, v7, "p->local: %s\n");
  sub_100008858();
}

void sub_100055FE0(const sockaddr *a1)
{
}

void sub_100056050(const sockaddr *a1)
{
}

void sub_1000560C0()
{
}

void sub_1000560EC()
{
}

void sub_100056118(uint64_t a1, os_log_s *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "already responded within the past %ld secs\n",  (uint8_t *)&v2,  0xCu);
  sub_100005634();
}

void sub_100056188()
{
}

void sub_1000561B4(int *a1, uint64_t a2, os_log_t log)
{
  int v3 = *a1;
  uint64_t v4 = **(void **)(a2 + 24);
  v5[0] = 67109632;
  v5[1] = v3;
  __int16 v6 = 2048;
  uint64_t v7 = v4;
  __int16 v8 = 1024;
  int v9 = 1280;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "!!! skipped retransmitting frags: frag_flags %x, r->sendbuf->l %zu, max %d\n",  (uint8_t *)v5,  0x18u);
  sub_100005634();
}

void sub_100056250()
{
}

void sub_10005627C()
{
}

void sub_1000562A8()
{
}

void sub_1000562D4()
{
  sub_10000B4FC( (void *)&_mh_execute_header,  v0,  v1,  "Failed to get IPv4 address for Phase 1 (family=%u, NAT64Prefix=%u)\n",  v2,  v3);
  sub_100005634();
}

void sub_100056340()
{
}

void sub_10005636C()
{
  sub_10000B4FC( (void *)&_mh_execute_header,  v0,  v1,  "Failed to get IPv4 address for Phase 2 (family=%u, NAT64Prefix=%u)\n",  v2,  v3);
  sub_100005634();
}

void sub_1000563D8()
{
}

void sub_100056404()
{
}

void sub_100056430(uint64_t a1)
{
}

void sub_1000564AC()
{
}

void sub_1000564DC()
{
  sub_100012888((void *)&_mh_execute_header, v0, v1, "Invalid SA length = %zu.\n", v2);
  sub_100005634();
}

void sub_100056540()
{
}

void sub_1000565A0()
{
}

void sub_1000565CC()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "Invalid payload type=%u\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005662C()
{
}

void sub_100056658(int *a1, os_log_s *a2, uint64_t a3)
{
  int v3 = *a1;
  int v4 = 134218240;
  uint64_t v5 = 8LL;
  __int16 v6 = 1024;
  int v7 = v3;
  sub_1000128BC( (void *)&_mh_execute_header,  a2,  a3,  "get_proppair invalid length of proposal, expected %lu actual %d\n",  (uint8_t *)&v4);
  sub_100005634();
}

void sub_1000566D4()
{
  __int16 v3 = 2048;
  uint64_t v4 = v0;
  sub_1000128BC( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  "get_proppair invalid length of proposal spi size, expected %u actual %zu\n",  v2);
  sub_100005634();
}

void sub_100056754()
{
}

void sub_1000567B4()
{
}

void sub_100056814(_BYTE *a1, _BYTE *a2)
{
}

void sub_100056840(_BYTE *a1, _BYTE *a2)
{
}

void sub_10005686C(uint64_t a1, uint64_t a2)
{
}

void sub_100056900(uint64_t a1)
{
}

void sub_1000569BC()
{
}

void sub_100056A20()
{
}

void sub_100056A8C()
{
}

void sub_100056AF0()
{
}

void sub_100056B58()
{
}

void sub_100056BC0(_BYTE *a1, _BYTE *a2)
{
}

void sub_100056BEC()
{
}

void sub_100056C4C()
{
}

void sub_100056C78()
{
}

void sub_100056CD8()
{
}

void sub_100056D3C()
{
}

void sub_100056D68(_BYTE *a1, _BYTE *a2)
{
}

void sub_100056D94(_BYTE *a1, _BYTE *a2)
{
}

void sub_100056DC0(_BYTE *a1, _BYTE *a2)
{
}

void sub_100056DEC(_BYTE *a1, _BYTE *a2)
{
}

void sub_100056E18(_BYTE *a1, _BYTE *a2)
{
}

void sub_100056E44()
{
}

void sub_100056E74()
{
}

void sub_100056EA0()
{
}

void sub_100056ECC()
{
}

void sub_100056EF8()
{
}

void sub_100056F24()
{
}

void sub_100056F50()
{
}

void sub_100056F7C()
{
  LOWORD(sub_10001287C((void *)&_mh_execute_header, v0, v1, "begin compare proposals.\n", v2) = 1024;
  HIWORD(sub_10001287C((void *)&_mh_execute_header, v0, v1, "begin compare proposals.\n", v2) = *(unsigned __int8 *)(*(void *)v0 + 5LL);
  sub_10000B4FC((void *)&_mh_execute_header, v0, v1, "proto_id mismathed: my:%d peer:%d\n", 67109376, v2);
  sub_100005634();
}

void sub_100056FF8()
{
}

void sub_100057024()
{
}

void sub_100057050()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalid SPI size=%d for IPSEC proposal.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_1000570B0()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalid SPI size=%d for IPCOMP proposal.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100057110()
{
}

void sub_10005713C()
{
}

void sub_1000571A0(int a1, os_log_s *a2, uint64_t a3)
{
  v3[0] = 67109376;
  v3[1] = 0;
  __int16 v4 = 1024;
  int v5 = a1;
  sub_1000128B0((void *)&_mh_execute_header, a2, a3, "invalid length %d for TLV attribute %d.\n", (uint8_t *)v3);
  sub_100005634();
}

void sub_100057214()
{
}

void sub_100057274()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalied encryption algorithm=%d.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_1000572D4()
{
  HIWORD(sub_10001287C((void *)&_mh_execute_header, v2, (uint64_t)v2, "peer's single bundle:\n", v3) = v0;
  sub_10000B4FC( (void *)&_mh_execute_header,  v0,  v1,  "check_attr_isakmp: packet too short - attr length %u for type %d\n",  v2,  v3);
  sub_100005634();
}

void sub_100057338()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalied hash algorithm=%d.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100057398()
{
}

void sub_1000573F8(int a1, os_log_s *a2)
{
}

void sub_10005746C()
{
}

void sub_1000574CC()
{
}

void sub_10005752C()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "attr type=%u isn't supported.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005758C()
{
}

void sub_1000575EC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005654((void *)&_mh_execute_header, a1, a3, "attr type=%u isn't supported.\n", a5, a6, a7, a8, 0);
  sub_100004AE4();
}

void sub_100057658()
{
}

void sub_1000576B8()
{
}

void sub_10005771C()
{
}

void sub_100057748()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalid encryption mode=%u.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_1000577A8()
{
}

void sub_1000577D4()
{
}

void sub_100057800(_BYTE *a1, _BYTE *a2)
{
}

void sub_10005782C()
{
}

void sub_100057858()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalid auth algorithm=%u.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_1000578B8(unsigned __int8 *a1, uint64_t a2, os_log_s *a3)
{
  LOWORD(sub_10001287C((void *)&_mh_execute_header, v2, (uint64_t)v2, "UDP encapsulation requested\n", v3) = 1024;
  HIWORD(sub_10001287C((void *)&_mh_execute_header, v2, (uint64_t)v2, "UDP encapsulation requested\n", v3) = *a1;
  sub_10000B4FC((void *)&_mh_execute_header, a2, a3, "auth algorithm %u conflicts with transform %u.\n", 67109376, v3);
  sub_100005634();
}

void sub_10005792C()
{
}

void sub_10005798C()
{
}

void sub_1000579B8()
{
}

void sub_1000579E4()
{
}

void sub_100057A48(_BYTE *a1, _BYTE *a2)
{
}

void sub_100057A74()
{
}

void sub_100057AA0()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalid group description=%u.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100057B00()
{
}

void sub_100057B2C()
{
}

void sub_100057B90()
{
}

void sub_100057BF4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005654((void *)&_mh_execute_header, a1, a3, "invalid attr type=%u.\n", a5, a6, a7, a8, 0);
  sub_100004AE4();
}

void sub_100057C60()
{
}

void sub_100057C8C()
{
}

void sub_100057CB8()
{
}

void sub_100057D1C()
{
}

void sub_100057D48()
{
}

void sub_100057D74()
{
}

void sub_100057DD4()
{
  sub_100004AD4((void *)&_mh_execute_header, v0, v1, "invalid iph1 passed id_p == NULL\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100057E00()
{
  sub_100012888((void *)&_mh_execute_header, v0, v1, "invalid value passed as ident (len=%lu)\n", v2);
  sub_100005634();
}

void sub_100057E68(unsigned __int8 *a1, os_log_s *a2)
{
}

void sub_100057EE0()
{
}

void sub_100057F10()
{
}

void sub_100057F78()
{
}

void sub_100057FA4()
{
}

void sub_100057FD0()
{
}

void sub_100057FFC()
{
}

void sub_100058028()
{
}

void sub_100058054()
{
}

void sub_100058080()
{
}

void sub_1000580FC()
{
}

void sub_100058178()
{
}

void sub_1000581A4()
{
}

void sub_100058208()
{
}

void sub_100058234()
{
}

void sub_100058298()
{
}

void sub_1000582C8()
{
}

void sub_10005832C(unsigned __int8 *a1, os_log_s *a2)
{
}

void sub_1000583A0()
{
}

void sub_100058400()
{
}

void sub_100058460()
{
}

void sub_10005848C()
{
}

void sub_1000584EC()
{
}

void sub_10005854C()
{
}

void sub_100058578()
{
}

void sub_1000585DC()
{
}

void sub_100058648(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67109632;
  v3[1] = 2;
  __int16 v4 = 1024;
  int v5 = a2;
  __int16 v6 = 2048;
  uint64_t v7 = a1 - 4;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "invalid IPsec attr(%d), attr-len %d, overall-len %lu\n",  (uint8_t *)v3,  0x18u);
  sub_100005634();
}

void sub_1000586DC()
{
}

void sub_100058708()
{
  __int16 v3 = 1024;
  int v4 = v0;
  sub_1000128BC( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  "lifetime mismatched in a proposal, prev:%ld curr:%u.\n",  v2);
  sub_100005634();
}

void sub_10005877C()
{
}

void sub_1000587E0()
{
}

void sub_10005880C()
{
}

void sub_100058838()
{
}

void sub_100058864()
{
}

void sub_100058890()
{
}

void sub_1000588F0()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "Illegal protocol id=%u.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100058950()
{
}

void sub_1000589B0()
{
  int v3 = 1;
  sub_1000128B0((void *)&_mh_execute_header, v0, v1, "invalid transform-id=%u in proto_id=%u.\n", v2);
  sub_100005634();
}

void sub_100058A1C()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalid transform-id=%u in AH.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100058A7C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005654((void *)&_mh_execute_header, a1, a3, "not support transform-id=%u in AH.\n", a5, a6, a7, a8, 0);
  sub_100004AE4();
}

void sub_100058AE8()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalid transform-id=%u in ESP.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100058B48()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "not support transform-id=%u in ESP.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100058BA8()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalid transform-id=%u in IPCOMP.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100058C08()
{
}

void sub_100058C34()
{
}

void sub_100058C60()
{
}

void sub_100058C8C()
{
}

void sub_100058CB8()
{
}

void sub_100058CE4()
{
}

void sub_100058D10(uint64_t a1, os_log_s *a2)
{
}

void sub_100058D98()
{
}

void sub_100058DC4()
{
}

void sub_100058DF0()
{
}

void sub_100058E1C()
{
}

void sub_100058E48()
{
}

void sub_100058E74()
{
}

void sub_100058ED4()
{
}

void sub_100058F00()
{
}

void sub_100058F2C()
{
}

void sub_100058F90()
{
}

void sub_100058FBC()
{
}

void sub_100058FE8()
{
}

void sub_100059014()
{
}

void sub_100059040()
{
}

void sub_10005906C()
{
}

void sub_100059098()
{
}

void sub_1000590C4()
{
}

void sub_1000590F0()
{
}

void sub_10005911C()
{
}

void sub_100059148()
{
}

void sub_100059174()
{
}

void sub_1000591A0()
{
}

void sub_1000591CC()
{
}

void sub_1000591F8(_BYTE *a1, _BYTE *a2)
{
}

void sub_100059224(_BYTE *a1, _BYTE *a2)
{
}

void sub_100059250()
{
}

void sub_10005927C()
{
}

void sub_1000592A8()
{
}

void sub_100059310()
{
}

void sub_10005933C(uint64_t a1)
{
}

void sub_1000593AC()
{
}

void sub_1000593D8()
{
}

void sub_100059404()
{
}

void sub_100059430()
{
}

void sub_10005945C()
{
}

void sub_100059488(const sockaddr **a1)
{
}

void sub_1000594F0()
{
}

void sub_10005951C()
{
}

void sub_100059548()
{
}

void sub_100059578(uint8_t *a1, unsigned __int8 *a2, char **a3, os_log_s *a4)
{
  uint8_t v7 = sub_10003DE70(*a2);
  *(_DWORD *)a1 = 136315138;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "received payload of type %s\n", a1, 0xCu);
}

void sub_1000595E0()
{
}

void sub_10005960C()
{
}

void sub_100059638()
{
}

void sub_100059664()
{
}

void sub_100059690()
{
}

void sub_1000596BC()
{
}

void sub_1000596E8()
{
}

void sub_100059714()
{
}

void sub_100059744()
{
}

void sub_100059770()
{
}

void sub_10005979C()
{
}

void sub_1000597C8()
{
}

void sub_1000597F4()
{
}

void sub_100059860()
{
}

void sub_10005988C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000598FC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10005996C()
{
}

void sub_100059998()
{
}

void sub_1000599C4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100059A40()
{
}

void sub_100059A6C()
{
}

void sub_100059AD8(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Missing fragment #%d\n", (uint8_t *)v2, 8u);
  sub_100004AE4();
}

void sub_100059B48()
{
}

void sub_100059BB4()
{
}

void sub_100059BE0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100059C50()
{
}

void sub_100059C7C()
{
}

void sub_100059CA8()
{
}

void sub_100059CD4()
{
}

void sub_100059D00()
{
}

void sub_100059D60(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_10001287C((void *)&_mh_execute_header, a3, (uint64_t)a3, "remote supports FRAGMENTATION\n", a1);
}

void sub_100059D94()
{
}

void sub_100059DC0(const sockaddr **a1)
{
}

void sub_100059E2C()
{
}

void sub_100059E58()
{
}

void sub_100059E84()
{
}

void sub_100059EB0()
{
}

void sub_100059EDC()
{
}

void sub_100059F3C()
{
}

void sub_100059F68()
{
}

void sub_100059FC8()
{
}

void sub_100059FF4()
{
}

void sub_10005A020()
{
}

void sub_10005A04C()
{
}

void sub_10005A0AC()
{
}

void sub_10005A0D8(int a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = sub_10003DE70(a1);
  int v6 = *(_DWORD *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 20);
  int v8 = 136315650;
  int v9 = v5;
  __int16 v10 = 1024;
  int v11 = v6;
  __int16 v12 = 1024;
  int v13 = v7;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "%s message must be encrypted, status 0x%x, side %d\n",  (uint8_t *)&v8,  0x18u);
  sub_100006918();
}

void sub_10005A174(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = sub_10003DE70(*a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v3, v4, "reject the packet, received unexpected payload type %s.\n");
  sub_100008858();
}

void sub_10005A1C0()
{
}

void sub_10005A1EC(_BYTE *a1, _BYTE *a2)
{
}

void sub_10005A218()
{
}

void sub_10005A244(uint64_t a1, int a2)
{
  uint64_t v2 = sub_10001D16C(a1, a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v3, v4, "Fatal %s notify messsage, Phase 1 should be deleted.\n");
  sub_100008858();
}

void sub_10005A280(uint64_t a1, int a2)
{
  uint64_t v2 = sub_10001D16C(a1, a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v3, v4, "Fatal %s notify messsage, Phase 2 should be deleted.\n");
  sub_100008858();
}

void sub_10005A2BC(uint64_t a1, int a2)
{
  uint64_t v2 = sub_10001D16C(a1, a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v3, v4, "Unhandled notify message %s, no Phase 2 handle found.\n");
  sub_100008858();
}

void sub_10005A2F8()
{
}

void sub_10005A324(_BYTE *a1, _BYTE *a2)
{
}

void sub_10005A350(_BYTE *a1, _BYTE *a2)
{
}

void sub_10005A37C(_BYTE *a1, _BYTE *a2)
{
}

void sub_10005A3A8(uint8_t *a1, unsigned int *a2, unsigned int *a3, os_log_s *a4)
{
  unsigned int v4 = bswap32(*a2);
  *(_DWORD *)a1 = 67109120;
  *a3 = v4;
  sub_10000884C((void *)&_mh_execute_header, a4, (uint64_t)a3, "delete payload with invalid doi:%d.\n", a1);
}

void sub_10005A3F0(_BYTE *a1, _BYTE *a2)
{
}

void sub_10005A41C()
{
  sub_100004AD4((void *)&_mh_execute_header, v0, v1, "iph1->ivm == NULL\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005A448()
{
}

void sub_10005A474()
{
}

void sub_10005A4A0()
{
}

void sub_10005A4CC()
{
}

void sub_10005A4F8()
{
}

void sub_10005A524()
{
}

void sub_10005A550()
{
}

void sub_10005A57C()
{
}

void sub_10005A5A8()
{
}

void sub_10005A5E0()
{
}

void sub_10005A60C()
{
}

void sub_10005A638()
{
}

void sub_10005A664()
{
}

void sub_10005A690()
{
}

void sub_10005A6BC()
{
}

void sub_10005A6E8()
{
}

void sub_10005A714(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(*(void *)a1 + 1LL);
  v4[0] = 67109120;
  v4[1] = v3;
  sub_10000884C((void *)&_mh_execute_header, a2, a3, "invalid family: %d\n", (uint8_t *)v4);
  sub_100004AE4();
}

void sub_10005A784()
{
}

void sub_10005A7B0()
{
}

void sub_10005A7DC()
{
}

void sub_10005A808()
{
}

void sub_10005A834()
{
}

void sub_10005A860()
{
}

void sub_10005A88C()
{
  os_log_t v0 = sub_10001D1A0();
  sub_10001D194((uint64_t)v0, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v1, v2, "pfkey_check (%s)\n");
  sub_100008858();
}

void sub_10005A8C8(unsigned __int16 *a1)
{
}

void sub_10005A934()
{
}

void sub_10005A960()
{
}

void sub_10005A98C()
{
}

void sub_10005A9B8()
{
}

void sub_10005A9E4()
{
}

void sub_10005AA10()
{
}

void sub_10005AA3C()
{
}

void sub_10005AA68()
{
}

void sub_10005AA94()
{
}

void sub_10005AAC0()
{
}

void sub_10005AAEC()
{
}

void sub_10005AB18()
{
}

void sub_10005AB44(uint64_t **a1, unsigned int *a2, os_log_t log)
{
  uint64_t v3 = **a1;
  unsigned int v4 = bswap32(*a2);
  int v5 = 134218240;
  uint64_t v6 = v3;
  __int16 v7 = 1024;
  unsigned int v8 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "invalid length (%lu,%d) while getting hash buffer.\n",  (uint8_t *)&v5,  0x12u);
  sub_100005634();
}

void sub_10005ABD4()
{
}

void sub_10005AC00()
{
}

void sub_10005AC2C()
{
}

void sub_10005AC58(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100012854((void *)&_mh_execute_header, a3, (uint64_t)a3, "Ignored, multiple SA isn't supported.\n", a1);
}

void sub_10005AC8C()
{
  sub_100004AD4((void *)&_mh_execute_header, v0, v1, "mismatched ID was returned.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005ACB8()
{
}

void sub_10005AD1C()
{
}

void sub_10005AD48()
{
}

void sub_10005AD74()
{
}

void sub_10005ADA0(uint64_t a1, const sockaddr *a2)
{
  uint64_t v2 = sub_100021918(a1, a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_10000B4E8((void *)&_mh_execute_header, v3, v4, "initiaor rcvd NAT-OA i: %s\n");
  sub_100008858();
}

void sub_10005ADDC(uint64_t a1, const sockaddr *a2)
{
  uint64_t v2 = sub_100021918(a1, a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_10000B4E8((void *)&_mh_execute_header, v3, v4, "initiator rcvd NAT-OA r: %s\n");
  sub_100008858();
}

void sub_10005AE18()
{
}

void sub_10005AE7C()
{
}

void sub_10005AEA8()
{
}

void sub_10005AED4()
{
}

void sub_10005AF00()
{
}

void sub_10005AF2C()
{
}

void sub_10005AF58()
{
}

void sub_10005AF84()
{
}

void sub_10005AFB0()
{
}

void sub_10005AFDC()
{
}

void sub_10005B008()
{
}

void sub_10005B034()
{
}

void sub_10005B060()
{
}

void sub_10005B08C()
{
}

void sub_10005B0B8()
{
}

void sub_10005B0E4()
{
}

void sub_10005B148()
{
}

void sub_10005B174()
{
}

void sub_10005B1A0()
{
}

void sub_10005B1CC()
{
}

void sub_10005B1F8()
{
}

void sub_10005B224()
{
}

void sub_10005B250()
{
}

void sub_10005B27C()
{
}

void sub_10005B2A8()
{
}

void sub_10005B308()
{
}

void sub_10005B334()
{
}

void sub_10005B360()
{
}

void sub_10005B38C()
{
}

void sub_10005B3B8()
{
}

void sub_10005B3E4()
{
}

void sub_10005B410(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100012854( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "IDr2 payload is not immediatelly followed by IDi2. We allowed.\n",  a1);
}

void sub_10005B444(uint64_t a1, const sockaddr *a2)
{
  uint64_t v2 = sub_100021918(a1, a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_10000B4E8((void *)&_mh_execute_header, v3, v4, "responder rcvd NAT-OA i: %s\n");
  sub_100008858();
}

void sub_10005B480(uint64_t a1, const sockaddr *a2)
{
  uint64_t v2 = sub_100021918(a1, a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_10000B4E8((void *)&_mh_execute_header, v3, v4, "responder rcvd NAT-OA r: %s\n");
  sub_100008858();
}

void sub_10005B4BC()
{
}

void sub_10005B4E8()
{
}

void sub_10005B514(uint64_t **a1)
{
}

void sub_10005B584()
{
}

void sub_10005B5B0()
{
}

void sub_10005B5DC()
{
}

void sub_10005B608()
{
}

void sub_10005B634()
{
}

void sub_10005B660()
{
}

void sub_10005B68C()
{
}

void sub_10005B6B8()
{
}

void sub_10005B6E4()
{
}

void sub_10005B710()
{
}

void sub_10005B73C()
{
}

void sub_10005B768()
{
}

void sub_10005B794()
{
}

void sub_10005B7C0()
{
}

void sub_10005B7EC()
{
}

void sub_10005B818()
{
}

void sub_10005B844()
{
}

void sub_10005B870()
{
}

void sub_10005B89C()
{
}

void sub_10005B8C8()
{
}

void sub_10005B8F4()
{
}

void sub_10005B920()
{
}

void sub_10005B94C()
{
}

void sub_10005B978()
{
}

void sub_10005B9A4(unsigned __int8 *a1)
{
}

void sub_10005BA0C()
{
}

void sub_10005BA38()
{
}

void sub_10005BA64(unsigned __int8 *a1)
{
}

void sub_10005BACC(unsigned __int8 *a1)
{
}

void sub_10005BB34(uint64_t a1)
{
  sub_100021968( (void *)&_mh_execute_header,  v1,  v2,  "get dst address from ID payload %s prefixlen=%u ul_proto=%u\n",  v3,  v4,  v5,  v6,  v7);
  sub_10002197C();
}

void sub_10005BBB8(uint64_t a1)
{
  sub_100021968( (void *)&_mh_execute_header,  v1,  v2,  "get a src address from ID payload %s prefixlen=%u ul_proto=%u\n",  v3,  v4,  v5,  v6,  v7);
  sub_10002197C();
}

void sub_10005BC3C()
{
}

void sub_10005BC68()
{
}

void sub_10005BC94(int a1, os_log_s *a2)
{
  int v2 = 136315394;
  uint64_t v3 = "get_proposal_r_remote";
  __int16 v4 = 1024;
  int v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s: ignore_id %x.\n", (uint8_t *)&v2, 0x12u);
  sub_100005634();
}

void sub_10005BD18()
{
}

void sub_10005BD44()
{
}

void sub_10005BD70()
{
}

void sub_10005BD9C()
{
  os_log_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "failed to receive isakmp packet: %s\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_10005BE08()
{
  os_log_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "failed to receive keep alive packet: %s\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_10005BE74()
{
  __int16 v3 = 2048;
  uint64_t v4 = 28LL;
  sub_100028634( (void *)&_mh_execute_header,  v0,  v1,  "packet shorter than isakmp header size (size: %zu, minimum expected: %zu)\n",  v2);
  sub_100005634();
}

void sub_10005BEE8()
{
}

void sub_10005BF14()
{
}

void sub_10005BF88()
{
}

void sub_10005BFFC()
{
}

void sub_10005C068()
{
}

void sub_10005C0CC()
{
  sub_100004AD4( (void *)&_mh_execute_header,  v0,  v1,  "src port == 0 (valid as UDP but not with IKE)\n",  v2,  v3,  v4,  v5,  v6);
  sub_100004AE4();
}

void sub_10005C0F8()
{
}

void sub_10005C174()
{
}

void sub_10005C1A0(uint64_t a1, const sockaddr *a2, os_log_s *a3)
{
}

void sub_10005C210(unsigned __int8 *a1, unsigned __int8 *a2, os_log_s *a3)
{
  uint64_t v5 = sub_10003DD88(*a1);
  uint8_t v6 = sub_10003DD88(*a2);
  int v8 = 136315394;
  int v9 = v5;
  __int16 v10 = 2080;
  int v11 = v6;
  sub_100028634( (void *)&_mh_execute_header,  a3,  v7,  "Exchange type is mismatched: db=%s packet=%s, ignore it.\n",  (uint8_t *)&v8);
  sub_10002197C();
}

void sub_10005C2AC()
{
}

void sub_10005C2D8()
{
}

void sub_10005C304(unsigned int *a1, uint64_t a2)
{
}

void sub_10005C388(uint64_t a1)
{
}

void sub_10005C3FC()
{
}

void sub_10005C428(uint64_t a1, const sockaddr *a2, os_log_s *a3)
{
}

void sub_10005C498()
{
}

void sub_10005C4C4()
{
}

void sub_10005C4F0()
{
}

void sub_10005C51C()
{
}

void sub_10005C580( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10005C5E4()
{
  sub_1000068DC((void *)&_mh_execute_header, v0, v1, "===\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005C610()
{
}

void sub_10005C670()
{
}

void sub_10005C69C()
{
}

void sub_10005C6C8()
{
}

void sub_10005C6F4()
{
}

void sub_10005C720()
{
}

void sub_10005C74C()
{
}

void sub_10005C778()
{
}

void sub_10005C7A4(uint8_t *a1, _DWORD *a2, os_log_s *a3)
{
  int v3 = *(_DWORD *)(qword_10008B848 + 24);
  *(_DWORD *)a1 = 67109120;
  *a2 = v3;
  sub_10000884C((void *)&_mh_execute_header, a3, (uint64_t)a3, "unsupported address family %d\n", a1);
}

void sub_10005C7F0()
{
  os_log_t v0 = sub_10000883C();
  uint64_t v1 = sub_1000087FC(v0);
  sub_10001D194((uint64_t)v1, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v2, v3, "socket (%s)\n");
  sub_100008858();
}

void sub_10005C830()
{
  os_log_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "setsockopt IPV6_USE_MIN_MTU (%s)\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_10005C89C()
{
  os_log_t v0 = sub_10000883C();
  uint64_t v1 = sub_1000087FC(v0);
  sub_10001D194((uint64_t)v1, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v2, v3, "setsockopt SO_REUSEADDR (%s)\n");
  sub_100008858();
}

void sub_10005C8DC()
{
  os_log_t v0 = sub_10000883C();
  uint64_t v1 = sub_1000087FC(v0);
  sub_10001D194((uint64_t)v1, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v2, v3, "setsockopt SO_REUSEPORT (%s)\n");
  sub_100008858();
}

void sub_10005C91C()
{
  os_log_t v0 = sub_10000883C();
  uint64_t v1 = sub_1000087FC(v0);
  sub_10001D194((uint64_t)v1, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v2, v3, "setsockopt (%s)\n");
  sub_100008858();
}

void sub_10005C95C(uint64_t a1, const sockaddr **a2)
{
  uint64_t v2 = sub_10003C888(*a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_100008818( (void *)&_mh_execute_header,  v3,  v4,  "failed to bind to address %s: can't read interface address flags.\n");
  sub_100008858();
}

void sub_10005C9A8()
{
}

void sub_10005C9D4()
{
  os_log_t v0 = sub_10000883C();
  uint64_t v1 = sub_1000087FC(v0);
  sub_10001D194((uint64_t)v1, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v2, v3, "setsockopt IP_RECVDSTADDR (%s)\n");
  sub_100008858();
}

void sub_10005CA14()
{
  os_log_t v0 = sub_10000883C();
  uint64_t v1 = sub_1000087FC(v0);
  sub_10001D194((uint64_t)v1, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v2, v3, "setsockopt IP_BOUND_IF (%s)\n");
  sub_100008858();
}

void sub_10005CA54()
{
  os_log_t v0 = sub_10000883C();
  uint64_t v1 = sub_1000087FC(v0);
  sub_10001D194((uint64_t)v1, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v2, v3, "setsockopt IPV6_BOUND_IF (%s)\n");
  sub_100008858();
}

void sub_10005CA94(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "failed to put socket in non-blocking mode\n",  buf,  2u);
}

void sub_10005CAD0()
{
}

void sub_10005CAFC()
{
}

void sub_10005CB28()
{
}

void sub_10005CB54()
{
}

void sub_10005CB80(uint64_t a1)
{
}

void sub_10005CBF4(uint64_t a1)
{
}

void sub_10005CC68(const sockaddr **a1)
{
}

void sub_10005CCD0()
{
}

void sub_10005CCFC(uint64_t *a1, uint64_t a2)
{
}

void sub_10005CD70(uint64_t *a1, uint64_t a2)
{
}

void sub_10005CDE4(uint64_t *a1, uint64_t a2)
{
}

void sub_10005CE58(const sockaddr **a1)
{
}

void sub_10005CEC0()
{
}

void sub_10005CEEC(const sockaddr **a1)
{
}

void sub_10005CF54()
{
}

void sub_10005CF80()
{
}

void sub_10005CFAC()
{
}

void sub_10005CFD8()
{
}

void sub_10005D004(uint64_t a1)
{
}

void sub_10005D084(const sockaddr **a1)
{
}

void sub_10005D0EC(const sockaddr **a1)
{
}

void sub_10005D154()
{
}

void sub_10005D180(uint64_t a1)
{
}

void sub_10005D1F0()
{
}

void sub_10005D21C(uint64_t a1)
{
}

void sub_10005D28C(uint64_t a1)
{
}

void sub_10005D2FC()
{
}

void sub_10005D328()
{
}

void sub_10005D354()
{
}

void sub_10005D380()
{
}

void sub_10005D3EC()
{
}

void sub_10005D468()
{
}

void sub_10005D4D4(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v3 = *a1;
  int v4 = 134218240;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "add payload of len %zu, next type %d\n",  (uint8_t *)&v4,  0x12u);
  sub_100005634();
}

void sub_10005D558()
{
  os_log_t v0 = ipsec_strerror();
  sub_10001D194((uint64_t)v0, 4.8149e-34);
  sub_100008818((void *)&_mh_execute_header, v1, v2, "pfkey_check (%s)\n");
  sub_100008858();
}

void sub_10005D598()
{
}

void sub_10005D5C4()
{
}

void sub_10005D5F0()
{
  sub_100021968( (void *)&_mh_execute_header,  v1,  v2,  "get dst address from ID payload %s prefixlen=%u ul_proto=%u\n",  v3,  v4,  v5,  v6,  v7);
  sub_10002197C();
}

void sub_10005D66C()
{
  sub_100021968( (void *)&_mh_execute_header,  v1,  v2,  "get a src address from ID payload %s prefixlen=%u ul_proto=%u\n",  v3,  v4,  v5,  v6,  v7);
  sub_10002197C();
}

void sub_10005D6E8()
{
}

void sub_10005D714()
{
}

void sub_10005D740()
{
}

void sub_10005D76C(unsigned __int8 a1)
{
}

void sub_10005D7DC()
{
}

void sub_10005D808()
{
}

void sub_10005D834()
{
}

void sub_10005D860()
{
}

void sub_10005D878()
{
}

void sub_10005D8A4()
{
}

void sub_10005D8D0(os_log_t log)
{
  uint64_t v1 = *(void *)(qword_10008B848 + 144);
  int v2 = 136315138;
  uint64_t v3 = v1;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "failed to open pre_share_key file %s\n",  (uint8_t *)&v2,  0xCu);
}

void sub_10005D954()
{
}

void sub_10005D980()
{
}

void sub_10005D9AC()
{
}

void sub_10005D9D8(uint64_t a1, os_log_s *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "filename: %s\n", (uint8_t *)&v2, 0xCu);
}

void sub_10005DA4C(uint64_t a1)
{
}

void sub_10005DA60()
{
}

void sub_10005DA8C()
{
}

void sub_10005DAB8()
{
  uint64_t v0 = __error();
  uint64_t v1 = sub_1000087FC(v0);
  sub_1000296AC((uint64_t)v1, "failed to be daemon. (%s)");
}

void sub_10005DADC(os_log_s *a1)
{
  uint64_t v2 = __error();
  int v3 = 136315138;
  uint64_t v4 = sub_1000087FC(v2);
  _os_log_error_impl( (void *)&_mh_execute_header,  a1,  OS_LOG_TYPE_ERROR,  "failed to exec racoon. (%s)",  (uint8_t *)&v3,  0xCu);
}

void sub_10005DB68()
{
}

void sub_10005DB94()
{
}

void sub_10005DBC0()
{
  uint64_t v0 = __error();
  uint64_t v1 = sub_1000087FC(v0);
  sub_1000296AC((uint64_t)v1, "couldn't set net.inet.ipsec.esp_port to %d. (%s)");
}

void sub_10005DBEC(uint64_t a1)
{
}

void sub_10005DC00(uint64_t a1)
{
}

void sub_10005DC14(uint64_t a1)
{
}

void sub_10005DC28()
{
}

void sub_10005DC54()
{
}

void sub_10005DC80()
{
}

void sub_10005DCAC()
{
  sub_10002EACC((void *)&_mh_execute_header, v0, v1, "remote public key length (%zu) != prime length (%zu)\n", v2, v3);
  sub_100005634();
}

void sub_10005DD18()
{
}

void sub_10005DD44()
{
}

void sub_10005DDA8()
{
}

void sub_10005DDD4()
{
}

void sub_10005DE00()
{
}

void sub_10005DE2C()
{
}

void sub_10005DE58()
{
}

void sub_10005DE84()
{
}

void sub_10005DEB0()
{
}

void sub_10005DF14()
{
}

void sub_10005DF40()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "invalid DH parameter grp=%d.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005DFA0()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "unsupported DH parameters grp=%d.\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005E000()
{
}

void sub_10005E060()
{
}

void sub_10005E0C0()
{
}

void sub_10005E0EC()
{
}

void sub_10005E118()
{
}

void sub_10005E144()
{
}

void sub_10005E170()
{
}

void sub_10005E19C()
{
}

void sub_10005E1FC()
{
}

void sub_10005E228()
{
}

void sub_10005E254()
{
}

void sub_10005E2B8()
{
}

void sub_10005E2E4()
{
}

void sub_10005E310()
{
}

void sub_10005E33C()
{
}

void sub_10005E368()
{
}

void sub_10005E394()
{
}

void sub_10005E3C0()
{
}

void sub_10005E3EC(int a1)
{
}

void sub_10005E458()
{
}

void sub_10005E484()
{
}

void sub_10005E4E4()
{
}

void sub_10005E510()
{
}

void sub_10005E53C()
{
}

void sub_10005E568()
{
}

void sub_10005E594()
{
}

void sub_10005E5FC()
{
}

void sub_10005E628(uint64_t a1)
{
}

void sub_10005E69C()
{
}

void sub_10005E6C8()
{
}

void sub_10005E6F4(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "my";
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "failed to get %s CERT.\n",  (uint8_t *)&v1,  0xCu);
  sub_100005634();
}

void sub_10005E770()
{
}

void sub_10005E79C()
{
}

void sub_10005E7C8()
{
}

void sub_10005E7F4()
{
}

void sub_10005E858()
{
}

void sub_10005E8C0()
{
}

void sub_10005E8EC()
{
}

void sub_10005E918(int a1)
{
}

void sub_10005E984()
{
}

void sub_10005E9B0()
{
}

void sub_10005EA20()
{
}

void sub_10005EA4C()
{
}

void sub_10005EA78()
{
}

void sub_10005EAA4(int a1)
{
}

void sub_10005EB10()
{
}

void sub_10005EB3C()
{
}

void sub_10005EB68()
{
}

void sub_10005EB94()
{
}

void sub_10005EC04()
{
}

void sub_10005EC74()
{
}

void sub_10005ECA0()
{
}

void sub_10005ECCC()
{
}

void sub_10005ED2C()
{
}

void sub_10005ED58()
{
}

void sub_10005ED84()
{
}

void sub_10005EDB0()
{
}

void sub_10005EDDC()
{
}

void sub_10005EE3C()
{
}

void sub_10005EE68(uint64_t a1)
{
}

void sub_10005EEDC(uint64_t a1)
{
}

void sub_10005EF50()
{
}

void sub_10005EFB8(const sockaddr **a1)
{
}

void sub_10005F028()
{
}

void sub_10005F054(uint64_t a1)
{
}

void sub_10005F0C4()
{
}

void sub_10005F0F0()
{
}

void sub_10005F11C()
{
}

void sub_10005F17C()
{
}

void sub_10005F1A8()
{
}

void sub_10005F1D4(uint64_t a1, os_log_s *a2)
{
  int v3 = *(_DWORD *)(*(void *)a1 + 40LL);
  int v2 = *(_DWORD *)(*(void *)a1 + 44LL);
  v4[0] = 67109376;
  v4[1] = v3;
  __int16 v5 = 1024;
  int v6 = v2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "invalid encryption algoritym %d, or invalid key length %d.\n",  (uint8_t *)v4,  0xEu);
  sub_100005634();
}

void sub_10005F258()
{
}

void sub_10005F284()
{
}

void sub_10005F2EC()
{
  sub_10002EACC((void *)&_mh_execute_header, v0, v1, "internal error: res->l=%zu buf->l=%zu\n", v2, v3);
  sub_100005634();
}

void sub_10005F354()
{
  _os_log_debug_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "len(SKEYID_e) < len(Ka) (%zu < %zu), generating long key (Ka = K1 | K2 | ...)\n",  v1,  0x16u);
  sub_100005634();
}

void sub_10005F3D4()
{
}

void sub_10005F400()
{
}

void sub_10005F42C()
{
}

void sub_10005F48C()
{
  os_log_t v0 = __error();
  strerror(*v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "vdup (%s)\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_10005F500()
{
}

void sub_10005F52C()
{
}

void sub_10005F558()
{
}

void sub_10005F584()
{
}

void sub_10005F5E4()
{
}

void sub_10005F610()
{
}

void sub_10005F63C()
{
}

void sub_10005F668(unsigned __int8 a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *a2;
  v4[0] = 67109376;
  v4[1] = a1;
  __int16 v5 = 2048;
  uint64_t v6 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "invalid padding len=%u, buflen=%zu.\n",  (uint8_t *)v4,  0x12u);
  sub_100005634();
}

void sub_10005F6F0()
{
}

void sub_10005F71C()
{
  sub_10000882C((void *)&_mh_execute_header, v0, v1, "padding len=%u\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005F780()
{
}

void sub_10005F7AC()
{
}

void sub_10005F7D8()
{
}

void sub_10005F804()
{
}

void sub_10005F830()
{
}

void sub_10005F890()
{
}

void sub_10005F8BC()
{
  sub_10000882C((void *)&_mh_execute_header, v0, v1, "pad length = %u\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005F91C()
{
}

void sub_10005F948()
{
}

void sub_10005F974()
{
  sub_100005654((void *)&_mh_execute_header, v0, v1, "unknown PF_KEY message type=%u\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_10005F9D4()
{
  uint64_t v3 = sub_10003EAA0(*v2);
  uint64_t v4 = strerror(*v1);
  int v5 = 136315394;
  uint8_t v6 = v3;
  __int16 v7 = 2080;
  int v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "pfkey %s failed: %s\n", (uint8_t *)&v5, 0x16u);
}

void sub_10005FA80()
{
}

void sub_10005FAE8()
{
}

void sub_10005FB50()
{
}

void sub_10005FB7C()
{
  uint64_t v0 = __error();
  strerror(*v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "failed to recv from pfkey (%s)\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_10005FBF0()
{
  uint64_t v0 = __error();
  strerror(*v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "failed to recv pfkey message: %s\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_10005FC64()
{
}

void sub_10005FCCC()
{
}

void sub_10005FD34()
{
}

void sub_10005FD60()
{
}

void sub_10005FD8C()
{
}

void sub_10005FDF4()
{
}

void sub_10005FE20()
{
}

void sub_10005FE4C()
{
}

void sub_10005FEB4(uint8_t *a1, uint64_t a2, void *a3, os_log_s *a4)
{
  uint64_t v4 = *(void *)&byte_100085050[16 * a2 + 8];
  *(_DWORD *)a1 = 136315138;
  *a3 = v4;
  sub_100033BE8((void *)&_mh_execute_header, a4, (uint64_t)a3, "call pfkey_send_register for %s\n", a1);
}

void sub_10005FF04()
{
}

void sub_10005FF64()
{
}

void sub_10005FFC4()
{
}

void sub_100060024()
{
}

void sub_100060050()
{
}

void sub_10006007C()
{
}

void sub_1000600DC()
{
}

void sub_100060108()
{
}

void sub_100060134()
{
}

void sub_100060194()
{
}

void sub_1000601F4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100060260()
{
}

void sub_1000602C0(uint64_t a1)
{
}

void sub_100060328()
{
}

void sub_100060354()
{
}

void sub_1000603B4()
{
}

void sub_10006041C(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "call pfkey_send_getspi\n", buf, 2u);
}

void sub_100060458()
{
}

void sub_1000604B8()
{
}

void sub_100060518()
{
}

void sub_100060580()
{
}

void sub_1000605E0()
{
}

void sub_10006060C()
{
}

void sub_100060674()
{
}

void sub_1000606A0()
{
}

void sub_100060708()
{
}

void sub_100060734()
{
}

void sub_100060760()
{
}

void sub_1000607C8()
{
}

void sub_1000607F4()
{
}

void sub_10006085C()
{
}

void sub_100060888(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = "pk_sendget_inbound_sastats";
  sub_100033BE8((void *)&_mh_execute_header, a1, a3, "invalid args in %s \n", (uint8_t *)&v3);
}

void sub_100060900(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = "pk_sendget_outbound_sastats";
  sub_100033BE8((void *)&_mh_execute_header, a1, a3, "invalid args in %s \n", (uint8_t *)&v3);
}

void sub_100060978()
{
}

void sub_1000609A4()
{
}

void sub_100060A04()
{
}

void sub_100060A6C()
{
}

void sub_100060A98()
{
}

void sub_100060AC4()
{
}

void sub_100060AF0()
{
}

void sub_100060B1C()
{
}

void sub_100060B48()
{
}

void sub_100060B74()
{
}

void sub_100060BD8()
{
}

void sub_100060C38()
{
}

void sub_100060C64()
{
}

void sub_100060C90(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "becoming tlen < 0\n", buf, 2u);
}

void sub_100060CCC()
{
}

void sub_100060D2C()
{
}

void sub_100060D58(uint64_t a1, uint64_t a2)
{
}

void sub_100060DC0()
{
}

void sub_100060E20(uint64_t a1)
{
}

void sub_100060E88(uint64_t a1)
{
}

void sub_100060EF0()
{
}

void sub_100060F1C()
{
}

void sub_100060F7C()
{
}

void sub_100060FE0()
{
}

void sub_10006104C()
{
}

void sub_100061078()
{
}

void sub_1000610D8()
{
}

void sub_100061138()
{
}

void sub_100061164(uint64_t a1, uint64_t a2)
{
}

void sub_1000611CC()
{
}

void sub_1000611F8(uint64_t a1)
{
}

void sub_100061260(const sockaddr *a1)
{
}

void sub_1000612CC(const sockaddr *a1)
{
}

void sub_100061338()
{
}

void sub_100061398()
{
}

void sub_1000613C4(const sockaddr *a1)
{
}

void sub_10006142C()
{
}

void sub_10006148C(const sockaddr *a1)
{
}

void sub_1000614F4()
{
}

void sub_100061520(unsigned __int8 *a1)
{
}

void sub_100061588()
{
}

void sub_1000615B4()
{
}

void sub_1000615E0(unsigned __int8 *a1)
{
}

void sub_100061648()
{
}

void sub_1000616AC(uint64_t a1)
{
}

void sub_100061714(uint64_t a1)
{
}

void sub_10006177C()
{
}

void sub_1000617A8(const sockaddr *a1)
{
}

void sub_100061810()
{
}

void sub_10006183C()
{
}

void sub_100061868()
{
}

void sub_100061894()
{
}

void sub_1000618C0()
{
}

void sub_1000618EC(unsigned __int8 *a1)
{
}

void sub_100061954()
{
}

void sub_100061980(unsigned __int8 *a1)
{
}

void sub_1000619E8()
{
}

void sub_100061A14()
{
}

void sub_100061A40()
{
}

void sub_100061A6C()
{
}

void sub_100061A98()
{
}

void sub_100061AC4()
{
}

void sub_100061AF0(uint64_t a1)
{
}

void sub_100061B58(uint64_t a1)
{
}

void sub_100061BC0()
{
}

void sub_100061C30()
{
}

void sub_100061CA0()
{
}

void sub_100061D10( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100061D78( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100061DE0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100061E48( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100061E7C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100061EB0()
{
}

void sub_100061F10()
{
}

void sub_100061F70()
{
}

void sub_100061FD0()
{
}

void sub_100062030(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10003C888((const sockaddr *)(a2 + 136));
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_10000B4E8((void *)&_mh_execute_header, v3, v4, "dst2: %s\n");
  sub_100008858();
}

void sub_10006207C(uint64_t a1, const sockaddr **a2)
{
  uint64_t v2 = sub_100035950(a1, a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_10000B4E8((void *)&_mh_execute_header, v3, v4, "dst1: %s\n");
  sub_100008858();
}

void sub_1000620B8(uint64_t a1, const sockaddr *a2)
{
  uint64_t v2 = sub_10003C888(a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_10000B4E8((void *)&_mh_execute_header, v3, v4, "src2: %s\n");
  sub_100008858();
}

void sub_100062104(uint64_t a1, const sockaddr **a2)
{
  uint64_t v2 = sub_100035950(a1, a2);
  sub_10001D194((uint64_t)v2, 4.8149e-34);
  sub_10000B4E8((void *)&_mh_execute_header, v3, v4, "src1: %s\n");
  sub_100008858();
}

void sub_100062140( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000621B0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100062220(unsigned __int8 *a1, unsigned __int8 *a2, os_log_t log)
{
  int v3 = *a1;
  int v4 = *a2;
  v5[0] = 67109376;
  v5[1] = v3;
  __int16 v6 = 1024;
  int v7 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "unexpected error: src.ss_len:%d dst.ss_len:%d\n",  (uint8_t *)v5,  0xEu);
  sub_100005634();
}

void sub_1000622A8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "unexpected error\n", v1, 2u);
}

void sub_1000622E8()
{
}

void sub_100062314()
{
}

void sub_100062340()
{
}

void sub_10006236C()
{
}

void sub_100062398(int *a1, int *a2)
{
}

void sub_10006241C(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100012854((void *)&_mh_execute_header, a3, (uint64_t)a3, "IPComp SPI size promoted from 16bit to 32bit\n", a1);
}

void sub_100062450()
{
}

void sub_1000624B0(int *a1, int *a2)
{
}

void sub_100062534()
{
}

void sub_100062594()
{
}

void sub_1000625F4()
{
}

void sub_100062654()
{
}

void sub_1000626B4()
{
}

void sub_100062714(unsigned int *a1, unsigned int *a2)
{
  int v3 = sub_1000384CC((uint64_t)a1, *a1);
  sub_1000384CC((uint64_t)v3, *a2);
  sub_100038418();
  sub_100038534((void *)&_mh_execute_header, v4, v5, "authtype mismatched: my:%s peer:%s\n", v6, v7, v8, v9, v10);
  sub_10002197C();
}

void sub_100062798( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100062800()
{
}

void sub_10006282C()
{
}

void sub_100062858()
{
}

void sub_100062884()
{
}

void sub_1000628B0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006291C()
{
}

void sub_100062954()
{
}

void sub_100062980()
{
}

void sub_1000629AC()
{
}

void sub_100062A2C()
{
}

void sub_100062AAC()
{
}

void sub_100062B2C(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "(unknown proto_id %d)\n", (uint8_t *)v2, 8u);
  sub_100004AE4();
}

void sub_100062B9C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100062C00(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "(unknown proto_id %d)\n", (uint8_t *)v2, 8u);
  sub_100004AE4();
}

void sub_100062C70()
{
  os_log_t v2 = sub_1000384D4(v1);
  sub_1000384CC((uint64_t)v2, *(unsigned int *)(v0 + 12));
  sub_100038418();
  sub_100038524();
  _os_log_fault_impl(v3, v4, v5, v6, v7, 0x16u);
  sub_10002197C();
}

void sub_100062CF0()
{
  os_log_t v2 = sub_1000384D4(v1);
  sub_1000384CC((uint64_t)v2, *(unsigned int *)(v0 + 12));
  sub_100038418();
  sub_1000384B8((void *)&_mh_execute_header, v3, v4, "  (trns_id=%s authtype=%s)\n", v5, v6, v7, v8, v9);
  sub_10002197C();
}

void sub_100062D68()
{
  os_log_t v2 = sub_1000384D4(v1);
  sub_1000384CC((uint64_t)v2, *(unsigned int *)(v0 + 12));
  sub_100038418();
  sub_100038534((void *)&_mh_execute_header, v3, v4, "  (trns_id=%s authtype=%s)\n", v5, v6, v7, v8, v9);
  sub_10002197C();
}

void sub_100062DE0()
{
  os_log_t v2 = sub_100038504(v1);
  sub_1000384CC((uint64_t)v2, *(unsigned int *)(v0 + 12));
  sub_100038478();
  sub_100038524();
  _os_log_fault_impl(v3, v4, v5, v6, v7, 0x1Cu);
  sub_1000384F4();
}

void sub_100062E60()
{
  os_log_t v2 = sub_100038504(v1);
  sub_1000384CC((uint64_t)v2, *(unsigned int *)(v0 + 12));
  sub_100038478();
  sub_100038564();
  _os_log_error_impl(v3, v4, v5, v6, v7, 0x1Cu);
  sub_1000384F4();
}

void sub_100062EE0()
{
  os_log_t v2 = sub_100038504(v1);
  sub_1000384CC((uint64_t)v2, *(unsigned int *)(v0 + 12));
  sub_100038478();
  sub_10001293C();
  _os_log_debug_impl(v3, v4, v5, v6, v7, 0x1Cu);
  sub_1000384F4();
}

void sub_100062F60(uint64_t a1)
{
}

void sub_100062FD4(uint64_t a1)
{
}

void sub_100063048(uint64_t a1)
{
}

void sub_1000630BC()
{
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "%s%p: next=%p tnext=%p\n", v1, 0x2Au);
  sub_1000384B0();
}

void sub_100063130()
{
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "%s%p: next=%p tnext=%p\n", v1, 0x2Au);
  sub_1000384B0();
}

void sub_1000631A4()
{
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s%p: next=%p tnext=%p\n", v1, 0x2Au);
  sub_1000384B0();
}

void sub_100063218()
{
}

void sub_100063244()
{
}

void sub_100063270(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100012854((void *)&_mh_execute_header, a3, (uint64_t)a3, "pp_peer is inconsistency, ignore it.\n", a1);
}

void sub_1000632A4(unsigned __int8 *a1, os_log_s *a2)
{
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "invalid ip address family: %d\n",  (uint8_t *)v3,  8u);
}

void sub_10006331C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "no remote configuration found.\n", v1, 2u);
}

void sub_10006335C()
{
}

void sub_1000633BC()
{
}

void sub_10006341C(const sockaddr *a1, os_log_s *a2)
{
}

void sub_1000634A0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100063504(uint64_t a1, _WORD *a2, os_log_t log)
{
  int v3 = *a2 & 0xF000;
  int v4 = 136315394;
  uint64_t v5 = a1;
  __int16 v6 = 1024;
  int v7 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s is an invalid file type 0x%x\n",  (uint8_t *)&v4,  0x12u);
  sub_100005634();
}

void sub_10006358C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000635F0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "setuid'ed execution not allowed\n", v1, 2u);
}

void sub_100063630(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)int v3 = 0;
  sub_10001287C((void *)&_mh_execute_header, a1, a3, "anonymous sainfo selected.\n", v3);
  sub_100004AE4();
}

void sub_100063664(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_10001287C((void *)&_mh_execute_header, a3, (uint64_t)a3, "getsainfo_by_dst_id - sainfo id = anonymous\n", a1);
}

void sub_100063698(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)int v3 = 0;
  sub_10001287C((void *)&_mh_execute_header, a1, a3, "getsainfo_by_dst_id - dst id:\n", v3);
  sub_100004AE4();
}

void sub_1000636CC(unsigned __int8 a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "failed to swap launchd keepalive integer %d\n",  (uint8_t *)v2,  8u);
  sub_100004AE4();
}

void sub_100063740( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100063770( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000637A0()
{
}

void sub_1000637CC()
{
  os_log_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "socket (%s)\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_100063838()
{
  os_log_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "connect (%s)\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_1000638A4()
{
  os_log_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "getsockname (%s)\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_100063910()
{
}

void sub_10006393C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000639A0()
{
}

void sub_100063A0C()
{
  uint64_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "setsockopt IP_IPSEC_POLICY (%s)\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_100063A78()
{
  uint64_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "recvmsg (%s)\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_100063AE4()
{
  uint64_t v3 = sub_10000883C();
  uint64_t v4 = sub_1000087FC(v3);
  *(_DWORD *)uint64_t v2 = 136315138;
  *uint64_t v1 = v4;
  sub_10003D65C((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "sendmsg (%s)\n", v2);
  sub_100008858();
}

void sub_100063B34(const sockaddr *a1)
{
}

void sub_100063BB0(const sockaddr *a1)
{
}

void sub_100063C2C()
{
  uint64_t v3 = sub_10000883C();
  uint64_t v4 = sub_1000087FC(v3);
  *(_DWORD *)uint64_t v2 = 136315138;
  *uint64_t v1 = v4;
  sub_10003D65C((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "treating socket error (%s) like packet loss\n", v2);
  sub_100008858();
}

void sub_100063C7C()
{
  uint64_t v3 = sub_10000883C();
  uint64_t v4 = sub_1000087FC(v3);
  *(_DWORD *)uint64_t v2 = 136315138;
  *uint64_t v1 = v4;
  sub_10003D65C((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "sendto (%s)\n", v2);
  sub_100008858();
}

void sub_100063CCC()
{
  uint64_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "setsockopt SO_REUSEPORT (%s)\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_100063D38()
{
  uint64_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "bind 1 (%s)\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_100063DA4()
{
}

void sub_100063DD0()
{
}

void sub_100063DFC(const sockaddr *a1)
{
}

void sub_100063E70(const sockaddr *a1)
{
}

void sub_100063EE4(const sockaddr *a1)
{
}

void sub_100063F58()
{
  uint64_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "%s\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_100063FC4()
{
}

void sub_100064028()
{
  __int16 v3 = 2048;
  uint64_t v4 = v0;
  _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "unexpected inconsistency: %d %zu\n",  v2,  0x12u);
}

void sub_1000640AC()
{
  __int16 v3 = 2048;
  uint64_t v4 = v0;
  _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "Call with null args: naddr=%p, saddr=%p\n",  v2,  0x16u);
}

void sub_10006412C()
{
}

void sub_100064190(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Throttle insertion failed\n", v1, 2u);
}

void sub_1000641D0(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)uint64_t v3 = 0;
  sub_100012854((void *)&_mh_execute_header, a1, a3, "unable to get memory for VID hash\n", v3);
}

void sub_100064208(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100012854((void *)&_mh_execute_header, a3, (uint64_t)a3, "unable to hash vendor ID string\n", a1);
}

void sub_10006423C(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "invalid vendor ID index: %d\n",  (uint8_t *)v2,  8u);
}

void sub_1000642B0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "vdup(NULL) called\n", v1, 2u);
}

void sub_1000642F0()
{
}

void sub_100064350(int a1, os_log_s *a2)
{
  int v3 = 136315138;
  uint64_t v4 = sub_10003F0A0(a1);
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "unsupported NAT-T version: %s\n",  (uint8_t *)&v3,  0xCu);
}

void sub_1000643D8()
{
}

void sub_100064438()
{
}

void sub_100064464()
{
}

void sub_1000644C4()
{
}

void sub_1000644F0()
{
}

void sub_10006451C()
{
}

void sub_100064548()
{
}

void sub_100064574()
{
}

void sub_1000645A0()
{
}

void sub_1000645CC()
{
}

void sub_1000645F8()
{
}

void sub_100064624()
{
}

void sub_100064684(int a1)
{
}

void sub_1000646F4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100064764()
{
}

void sub_100064790()
{
}

void sub_1000647F0(_BYTE *a1, _BYTE *a2)
{
}

void sub_10006481C(_BYTE *a1, _BYTE *a2)
{
}

void sub_100064848(_BYTE *a1, _BYTE *a2)
{
}

void sub_100064874()
{
}

void sub_1000648D4(_DWORD *a1, int a2, char **a3)
{
  uint64_t v5 = sub_10003DEE4(a2);
  *a1 = 136315138;
  *a3 = v5;
  sub_10000B4E8((void *)&_mh_execute_header, v6, v7, "Unexpected SET attribute %s\n");
  sub_100008858();
}

void sub_100064924(_DWORD *a1, __int16 a2, char **a3)
{
  uint64_t v5 = sub_10003DEE4(a2 & 0x7FFF);
  *a1 = 136315138;
  *a3 = v5;
  sub_10000B4E8((void *)&_mh_execute_header, v6, v7, "Attribute %s\n");
  sub_100008858();
}

void sub_100064974()
{
}

void sub_1000649A0()
{
}

void sub_1000649CC()
{
}

void sub_1000649F8()
{
}

void sub_100064A24()
{
}

void sub_100064A50()
{
}

void sub_100064A7C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100064AE8()
{
}

void sub_100064B14()
{
  sub_100004AD4((void *)&_mh_execute_header, v0, v1, "isakmp_cfg_config.port_pool == NULL\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100064B40( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100064BA4()
{
}

void sub_100064BD0()
{
}

void sub_100064BFC(int a1, os_log_s *a2)
{
  uint64_t v4 = qword_10008BE90;
  uint64_t v5 = __error();
  uint8_t v6 = strerror(*v5);
  int v7 = 134218498;
  uint64_t v8 = v4;
  __int16 v9 = 1024;
  int v10 = a1;
  __int16 v11 = 2080;
  __int16 v12 = v6;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "resize pool from %zu to %d impossible: %s",  (uint8_t *)&v7,  0x1Cu);
}

void sub_100064CB8(int a1, int a2, os_log_t log)
{
  int v3 = 134218496;
  uint64_t v4 = qword_10008BE90;
  __int16 v5 = 1024;
  int v6 = a1;
  __int16 v7 = 1024;
  int v8 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "resize pool from %zu to %d impossible port %d is in use\n",  (uint8_t *)&v3,  0x18u);
  sub_100005634();
}

void sub_100064D48( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100064D78(int a1)
{
}

void sub_100064DE4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100064E5C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100064ED4(int a1)
{
}

void sub_100064F40(int a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = sub_100045C5C(a1);
  unsigned int v6 = bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16;
  int v7 = 136315394;
  int v8 = v5;
  __int16 v9 = 1024;
  unsigned int v10 = v6;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_DEBUG,  "Short attribute %s = %d\n",  (uint8_t *)&v7,  0x12u);
  sub_100006918();
}

void sub_100064FD8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100065008(unsigned __int16 *a1, os_log_s *a2)
{
  unsigned int v2 = bswap32(*a1) >> 16;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "unity_pfs = %x\n", (uint8_t *)v3, 8u);
  sub_100004AE4();
}

void sub_100065084()
{
}

void sub_1000650B0()
{
}

void sub_1000650DC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100065144()
{
}

void sub_100065170()
{
}

void sub_10006519C()
{
}

void sub_1000651C8(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 136315394;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Throttling in action for %s: delay %lds\n",  (uint8_t *)&v3,  0x16u);
  sub_100005634();
}

void sub_100065248()
{
}

void sub_100065274()
{
}

void sub_1000652A0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100065308()
{
}

void sub_100065334()
{
}

void sub_100065360(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unknown group auth source\n", buf, 2u);
}

void sub_10006539C()
{
}

void sub_1000653C8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006542C()
{
}

void sub_100065458()
{
}

void sub_100065484()
{
}

void sub_1000654B0()
{
}

void sub_1000654DC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10006554C()
{
}

void sub_100065578( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000655EC()
{
}

void sub_100065618()
{
}

void sub_100065644()
{
}

void sub_100065670()
{
}

void sub_10006569C()
{
}

void sub_1000656C8()
{
  uint64_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "memory error: %s\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_100065734()
{
  uint64_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "failed to accept vpn_control command: %s\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_1000657A0()
{
}

void sub_1000657CC()
{
  uint64_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "failed to recv vpn_control command: %s\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_100065838()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length of vpn_control command - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_1000658A0()
{
}

void sub_1000658CC()
{
  uint64_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "failed to send vpn_control message: %s\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_100065938(unsigned __int16 *a1, os_log_s *a2)
{
  unsigned int v2 = bswap32(*a1) >> 16;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "invalid command: %d\n", (uint8_t *)v3, 8u);
  sub_100004AE4();
}

void sub_1000659B4()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl bind cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065A14()
{
  sub_100028634( (void *)&_mh_execute_header,  v0,  (uint64_t)v0,  "invalid length for vpnctl bind cmd - len=%ld - expected %ld\n",  v1);
  sub_100005634();
}

void sub_100065A8C()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl unbind cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065AEC()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl redirect cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065B54()
{
}

void sub_100065B80()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl xauth info cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065BE0()
{
  sub_100028634( (void *)&_mh_execute_header,  v0,  (uint64_t)v0,  "invalid length for vpnctl xauth info cmd - len=%ld - expected %ld\n",  v1);
  sub_100005634();
}

void sub_100065C58()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl nat64 prefix cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065CB8()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl connect cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065D18()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl disconnect cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065D78()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl start ph2 cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065DD8()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl start dpd cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065E38()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl assert cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065E98()
{
  sub_1000496C4( (void *)&_mh_execute_header,  v0,  v1,  "invalid header length for vpnctl reconnect cmd - len=%ld - expected %ld\n",  v2,  v3,  v4,  v5,  v6);
  sub_100005634();
}

void sub_100065EF8()
{
}

void sub_100065F24()
{
  uint64_t v2 = sub_10000883C();
  uint64_t v3 = sub_1000087FC(v2);
  sub_10001D194((uint64_t)v3, 4.8149e-34);
  sub_10003D65C( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_ERROR,  "failed to send vpn_control need authinfo status: %s\n",  v1);
  sub_100008858();
}

void sub_100065F70()
{
}

void sub_100065F9C()
{
  uint64_t v2 = sub_10000883C();
  uint64_t v3 = sub_1000087FC(v2);
  sub_10001D194((uint64_t)v3, 4.8149e-34);
  sub_10003D65C( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_ERROR,  "Unable to send vpn_control ike notify failed: %s\n",  v1);
  sub_100008858();
}

void sub_100065FE8(unsigned __int16 a1, __int16 a2, os_log_t log)
{
  uint64_t v3 = "remote";
  if (!a2) {
    uint64_t v3 = "local";
  }
  v4[0] = 67109378;
  v4[1] = a1;
  __int16 v5 = 2080;
  uint8_t v6 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "sending vpn_control ike failed message - code=%d  from=%s.\n",  (uint8_t *)v4,  0x12u);
  sub_100005634();
}

void sub_100066084()
{
}

void sub_1000660B0()
{
  uint64_t v2 = sub_10000883C();
  uint64_t v3 = sub_1000087FC(v2);
  sub_10001D194((uint64_t)v3, 4.8149e-34);
  sub_10003D65C( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_ERROR,  "failed to send vpn_control phase change status: %s\n",  v1);
  sub_100008858();
}

void sub_1000660FC()
{
}

void sub_100066128()
{
  uint64_t v2 = sub_10000883C();
  uint64_t v3 = sub_1000087FC(v2);
  sub_10001D194((uint64_t)v3, 4.8149e-34);
  sub_10003D65C( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_ERROR,  "unable to send vpn_control status (peer response): %s\n",  v1);
  sub_100008858();
}

void sub_100066174()
{
  uint64_t v0 = sub_100008864();
  sub_1000087FC(v0);
  sub_100012930();
  sub_10001581C((void *)&_mh_execute_header, v1, v2, "socket: %s\n", v3, v4, v5, v6, v7);
  sub_100006918();
}

void sub_1000661E0()
{
}

void sub_10006620C(os_log_s *a1)
{
  uint64_t v2 = sub_100008864();
  sub_1000087FC(v2);
  v4[0] = 136315394;
  sub_100049740();
  sub_100028634((void *)&_mh_execute_header, a1, v3, "listen(sockname:%s): %s\n", (uint8_t *)v4);
  sub_100006918();
}

void sub_10006628C(os_log_s *a1)
{
  uint64_t v2 = __error();
  sub_1000087FC(v2);
  v4[0] = 136315650;
  sub_100049754();
  __int16 v5 = 2080;
  uint64_t v6 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "chmod(%s, 0%03o): %s\n", (uint8_t *)v4, 0x1Cu);
}

void sub_100066334(os_log_s *a1)
{
  int v2 = dword_10008C6CC;
  uint64_t v3 = __error();
  sub_1000087FC(v3);
  v6[0] = 136315906;
  sub_100049754();
  __int16 v7 = v4;
  int v8 = v2;
  __int16 v9 = 2080;
  uint64_t v10 = v5;
  _os_log_error_impl( (void *)&_mh_execute_header,  a1,  OS_LOG_TYPE_ERROR,  "chown(%s, %d, %d): %s\n",  (uint8_t *)v6,  0x22u);
}

void sub_1000663F4(os_log_s *a1)
{
  int v2 = sub_100008864();
  sub_1000087FC(v2);
  v4[0] = 136315394;
  sub_100049740();
  sub_100028634((void *)&_mh_execute_header, a1, v3, "bind(sockname:%s): %s\n", (uint8_t *)v4);
  sub_100006918();
}

void sub_100066474()
{
}

void sub_1000664A0(int a1)
{
}

void sub_10006650C(const sockaddr *a1)
{
}

void sub_100066578()
{
}

void sub_1000665A4()
{
}

void sub_1000665D0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100066638()
{
}

void sub_100066664()
{
}

void sub_100066690()
{
}

void sub_1000666BC()
{
  sub_10002EACC( (void *)&_mh_execute_header,  v0,  v1,  "invalid length for vpn ph2 selector - len=%ld - expected %ld\n",  v2,  v3);
}

void sub_100066720()
{
  sub_10002EACC( (void *)&_mh_execute_header,  v0,  v1,  "invalid length for vpn ph2 algo - len=%ld - expected %ld\n",  v2,  v3);
}

void sub_100066784()
{
}

void sub_1000667B0()
{
}

void sub_1000667DC(uint64_t *a1)
{
}

void sub_100066844(uint64_t *a1)
{
}

void sub_1000668AC(uint64_t *a1)
{
}

void sub_100066914(uint64_t *a1)
{
}

void sub_10006697C()
{
}

void sub_1000669A8()
{
}

void sub_1000669D4(int a1, uint64_t a2)
{
}

void sub_100066A40()
{
}

void sub_100066A6C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100066AD0(uint8_t *a1, uint64_t a2, _DWORD *a3, os_log_s *a4)
{
  int v4 = *(_DWORD *)(*(void *)a2 + 188LL);
  *(_DWORD *)a1 = 67109120;
  *a3 = v4;
  sub_10004A860((void *)&_mh_execute_header, "Using dh group %d for aggressive mode\n", a1, a4);
}

void sub_100066B14(uint8_t *a1, uint64_t a2, _DWORD *a3, os_log_s *a4)
{
  int v4 = *(_DWORD *)(*(void *)a2 + 60LL);
  *(_DWORD *)a1 = 67109120;
  *a3 = v4;
  sub_10004A860((void *)&_mh_execute_header, "Using dh group %d for main mode\n", a1, a4);
}

void sub_100066B58()
{
}

void sub_100066B84()
{
}

void sub_100066BB0()
{
}

void sub_100066BDC()
{
}

void sub_100066C08()
{
}

void sub_100066C34()
{
}

void sub_100066C60()
{
}

void sub_100066C98()
{
}

void sub_100066CC4()
{
}

void sub_100066CF0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100066D60( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100066DD0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100066E40(const sockaddr *a1)
{
}

void sub_100066EB0(const sockaddr *a1)
{
}

void sub_100066F18(uint64_t a1)
{
}

void sub_100066F88(const sockaddr *a1)
{
}

void sub_100066FF0(const sockaddr *a1)
{
}

void sub_100067058(uint8_t *a1, uint64_t a2, uint64_t **a3, os_log_s *a4)
{
  uint8_t v7 = sub_10003C888((const sockaddr *)(a2 + 136));
  *(_DWORD *)a1 = 136315138;
  *a3 = v7;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a4,  OS_LOG_TYPE_DEBUG,  "still search for IKE-Session. this %s.\n",  a1,  0xCu);
}

void sub_1000670C0(const sockaddr *a1)
{
}

void sub_100067128( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067198( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067208( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067278( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000672E8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067358( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000673C8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067438( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000674A8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067518( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067588(uint8_t *buf, void *a2, os_log_t log)
{
  *(_DWORD *)uint8_t buf = 136315138;
  *a2 = "ike_session_rebind_all_ph12_to_new_ph1";
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Same Phase 2 in ph1bind replacement in %s.\n",  buf,  0xCu);
}

void sub_1000675D4(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Mismatched parent session in ph1bind replacement.\n",  buf,  2u);
}

void sub_100067610( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067680( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000676F0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067760( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000677D0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067840( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000678B0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067920( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067990( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067A00(int *a1, uint64_t a2, os_log_t log)
{
  int v3 = *a1;
  int v4 = *(_DWORD *)(a2 + 100);
  int v5 = *(unsigned __int8 *)(a2 + 264) << 30 >> 31;
  v6[0] = 67109632;
  v6[1] = v3;
  __int16 v7 = 1024;
  int v8 = v4;
  __int16 v9 = 1024;
  int v10 = v5;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "about to cleanup ph2: status %d, seq %d dying %d\n",  (uint8_t *)v6,  0x14u);
  sub_100005634();
}

void sub_100067A9C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067B0C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067B7C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067BEC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067C5C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067CCC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067D3C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067DAC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067E1C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067E8C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067EFC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067F6C(unsigned __int8 *a1, os_log_s *a2)
{
  int v2 = *a1;
  int v3 = *((unsigned __int16 *)a1 + 1);
  int v4 = 136315650;
  int v5 = "ike_session_is_id_portany";
  __int16 v6 = 1024;
  int v7 = v2;
  __int16 v8 = 1024;
  int v9 = v3;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "not portany_ids in %s: type %d, port %x.\n",  (uint8_t *)&v4,  0x18u);
  sub_100005634();
}

void sub_100068000()
{
}

void sub_100068070(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = "ike_session_get_sainfo_r";
  sub_100033BE8((void *)&_mh_execute_header, a1, a3, "candidate ph2 matched in %s.\n", (uint8_t *)&v3);
  sub_100005634();
}

void sub_1000680E4(uint8_t *a1, void *a2, os_log_s *a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "ike_session_get_sainfo_r";
  sub_100033BE8((void *)&_mh_execute_header, a3, (uint64_t)a3, "candidate ph2 found in %s.\n", a1);
}

void sub_100068128()
{
}

void sub_100068194()
{
}

void sub_100068204(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136315138;
  uint64_t v4 = "ike_session_get_proposal_r";
  sub_100033BE8((void *)&_mh_execute_header, a1, a3, "candidate ph2 matched in %s.\n", (uint8_t *)&v3);
  sub_100005634();
}

void sub_100068278(uint8_t *a1, void *a2, os_log_s *a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "ike_session_get_proposal_r";
  sub_100033BE8((void *)&_mh_execute_header, a3, (uint64_t)a3, "candidate ph2 found in %s.\n", a1);
}

void sub_1000682BC()
{
}

void sub_100068328( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100068398( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100068408( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100068478(unsigned __int8 *a1, os_log_s *a2)
{
  int v2 = *a1;
  int v3 = *((_DWORD *)a1 + 1);
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = 136315906;
  uint8_t v6 = "ike_session_is_id_ipany";
  __int16 v7 = 1024;
  int v8 = v2;
  __int16 v9 = 1024;
  int v10 = v3;
  __int16 v11 = 1024;
  int v12 = v4;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "not ipany_ids in %s: type %d, addr %x, mask %x.\n",  (uint8_t *)&v5,  0x1Eu);
}

void sub_100068518()
{
}

void sub_100068550(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "received power-mgmt event: %x\n",  (uint8_t *)v2,  8u);
  sub_100004AE4();
}

void sub_1000685C0()
{
}

void sub_1000685EC()
{
}

void sub_100068618()
{
}

void sub_100068644()
{
}

void sub_100068670()
{
}

void sub_10006869C()
{
}

void sub_1000686C8()
{
}

void sub_1000686F4()
{
}

void sub_100068720()
{
}

void sub_100068738()
{
}

void sub_100068798()
{
}

void sub_1000687F8(int a1, uint64_t a2, os_log_t log)
{
  v3[0] = 67109378;
  v3[1] = a1;
  __int16 v4 = 2080;
  uint64_t v5 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "xpc connection error %d:%s.\n",  (uint8_t *)v3,  0x12u);
  sub_100005634();
}

void sub_100068878()
{
  sub_100004AD4( (void *)&_mh_execute_header,  v0,  v1,  "load_XPC_Service received type == XPC_TYPE_ERROR\n",  v2,  v3,  v4,  v5,  v6);
  sub_100004AE4();
}

void sub_1000688A4(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "xpc connection unknown type %x.\n",  (uint8_t *)v2,  8u);
  sub_100004AE4();
}

void sub_100068914()
{
}

void sub_100068974()
{
}

void sub_1000689A0()
{
}

void sub_1000689CC()
{
}

void sub_1000689F8()
{
  sub_100004AD4((void *)&_mh_execute_header, v0, v1, "xpc_ike_dict == NULL\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100068A24()
{
  sub_100004AD4((void *)&_mh_execute_header, v0, v1, "do_ipsecike_create child_dict == NULL\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100068A50()
{
  sub_100004AD4((void *)&_mh_execute_header, v0, v1, "do_ipsecike_create ike_dict == NULL\n", v2, v3, v4, v5, v6);
  sub_100004AE4();
}

void sub_100068A7C()
{
}

void sub_100068AA8()
{
}

void sub_100068AD4()
{
}

void sub_100068B00()
{
  sub_100004AD4( (void *)&_mh_execute_header,  v0,  v1,  "do_ipsecike_stop: ikeid == kInternalIKESARefInvalid\n",  v2,  v3,  v4,  v5,  v6);
  sub_100004AE4();
}

void sub_100068B2C()
{
}

void sub_100068B98()
{
}

void sub_100068BD0()
{
}

void sub_100068BFC()
{
}

void sub_100068C28(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_10001287C((void *)&_mh_execute_header, a3, (uint64_t)a3, "\n", a1);
}

void sub_100068C5C()
{
}

void sub_100068C88()
{
}

void sub_100068CB8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100068D2C()
{
}

void sub_100068D58( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100068DCC(os_log_t log)
{
  uint64_t v1 = *(void *)qword_10008B848;
  int v2 = 136315138;
  uint64_t v3 = v1;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "could not read configuration file %s\n",  (uint8_t *)&v2,  0xCu);
  sub_100005634();
}

void sub_100068E50()
{
  sub_10001287C((void *)&_mh_execute_header, v0, v1, "===== parsing configuration\n", v2);
  sub_100004AE4();
}

void sub_100068E80( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005624((void *)&_mh_execute_header, a2, a3, "==== %s sessions.\n", a5, a6, a7, a8, 2u);
  sub_100005634();
}

void sub_100068EFC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005624( (void *)&_mh_execute_header,  a2,  a3,  "==== Got %s signal - re-parsing configuration.\n",  a5,  a6,  a7,  a8,  2u);
  sub_100005634();
}

void sub_100068F6C()
{
  sub_100004AD4( (void *)&_mh_execute_header,  v0,  v1,  "==== Got Unknown signal - re-parsing configuration.\n",  v2,  v3,  v4,  v5,  v6);
  sub_100004AE4();
}

void sub_100068F98(uint64_t a1, os_log_s *a2)
{
  uint64_t v4 = __error();
  uint64_t v5 = strerror(*v4);
  int v6 = 136315394;
  uint64_t v7 = a1;
  __int16 v8 = 2080;
  __int16 v9 = v5;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "failed to open file %s (%s)\n",  (uint8_t *)&v6,  0x16u);
  sub_10005508C();
}

void sub_100069034(uint64_t a1, os_log_s *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "reading configuration file %s\n",  (uint8_t *)&v2,  0xCu);
}

void sub_1000690A8()
{
}

void sub_100069114( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}