__n128 _s5ErrorVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;
  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CSTypeRef(uint64_t a1)
{
}

__n128 initializeWithTake for ConcurrencyDumper.HeapInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1000039DC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000039FC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for swift_metadata_allocation(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ArgumentDefinition.Help(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_100003A6C( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) != 0) {
    return swift_retain(a2);
  }
  char v15 = a6 & 1;
  sub_100003AF0(a1, a2, a3 & 1);
  sub_100003B00(a4, a5, v15);
  return sub_100003B00(a7, a8, a9 & 1);
}

uint64_t sub_100003AF0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_retain(a2);
  }
  else {
    return swift_bridgeObjectRetain(a2);
  }
}

uint64_t sub_100003B00(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_100003B10(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  if ((a7 & 1) != 0) {
    return swift_retain(a2);
  }
  sub_100003B00(a1, a2, a3 & 1);
  return sub_100003B00(a4, a5, a6 & 1);
}

uint64_t destroy for DumpRawMetadata(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 144));
}

uint64_t sub_100003BCC( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) != 0) {
    return swift_release(a2);
  }
  char v15 = a6 & 1;
  sub_100003C50(a1, a2, a3 & 1);
  sub_100003C60(a4, a5, v15);
  return sub_100003C60(a7, a8, a9 & 1);
}

uint64_t sub_100003C50(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_release(a2);
  }
  else {
    return swift_bridgeObjectRelease(a2);
  }
}

uint64_t sub_100003C60(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_100003C70(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  if ((a7 & 1) != 0) {
    return swift_release(a2);
  }
  sub_100003C60(a1, a2, a3 & 1);
  return sub_100003C60(a4, a5, a6 & 1);
}

uint64_t initializeWithCopy for DumpRawMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v20 = *(_BYTE *)(a2 + 64);
  char v21 = *(_BYTE *)(a2 + 65);
  sub_100003A6C(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v20, v21);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v20;
  *(_BYTE *)(a1 + 65) = v21;
  *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  LOBYTE(v9) = *(_BYTE *)(a2 + 129);
  LOBYTE(v10) = *(_BYTE *)(a2 + 128);
  swift_bridgeObjectRetain(v12);
  sub_100003B10(v13, v14, v15, v16, v17, v10, v9);
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v17;
  *(_BYTE *)(a1 + 128) = v10;
  *(_BYTE *)(a1 + 129) = v9;
  *(_WORD *)(a1 + 130) = *(_WORD *)(a2 + 130);
  uint64_t v18 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v18;
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t assignWithCopy for DumpRawMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v39 = *(_BYTE *)(a2 + 64);
  char v40 = *(_BYTE *)(a2 + 65);
  sub_100003A6C(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v39, v40);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(_BYTE *)(a1 + 64);
  char v21 = *(_BYTE *)(a1 + 65);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v39;
  *(_BYTE *)(a1 + 65) = v40;
  sub_100003BCC(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v22 = *(void *)(a2 + 80);
  uint64_t v23 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *(void *)(a2 + 88);
  uint64_t v25 = *(void *)(a2 + 96);
  uint64_t v26 = *(void *)(a2 + 104);
  uint64_t v27 = *(void *)(a2 + 112);
  uint64_t v28 = *(void *)(a2 + 120);
  LOBYTE(v9) = *(_BYTE *)(a2 + 129);
  LOBYTE(v10) = *(_BYTE *)(a2 + 128);
  sub_100003B10(v24, v25, v26, v27, v28, v10, v9);
  uint64_t v29 = *(void *)(a1 + 88);
  uint64_t v30 = *(void *)(a1 + 96);
  uint64_t v31 = *(void *)(a1 + 104);
  uint64_t v32 = *(void *)(a1 + 112);
  uint64_t v33 = *(void *)(a1 + 120);
  char v34 = *(_BYTE *)(a1 + 129);
  *(void *)(a1 + 88) = v24;
  *(void *)(a1 + 96) = v25;
  *(void *)(a1 + 104) = v26;
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v28;
  char v35 = *(_BYTE *)(a1 + 128);
  *(_BYTE *)(a1 + 128) = v10;
  *(_BYTE *)(a1 + 129) = v9;
  sub_100003C70(v29, v30, v31, v32, v33, v35, v34);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v36 = *(void *)(a2 + 144);
  uint64_t v37 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  return a1;
}

__n128 initializeWithTake for DumpRawMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for DumpRawMetadata(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a2 + 64);
  char v5 = *(_BYTE *)(a2 + 65);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  char v14 = *(_BYTE *)(a1 + 64);
  char v15 = *(_BYTE *)(a1 + 65);
  __int128 v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  __int128 v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 65) = v5;
  sub_100003BCC(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  uint64_t v18 = *(void *)(a2 + 80);
  uint64_t v19 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v18;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(a2 + 120);
  char v21 = *(_BYTE *)(a2 + 128);
  char v22 = *(_BYTE *)(a2 + 129);
  uint64_t v23 = *(void *)(a1 + 88);
  uint64_t v24 = *(void *)(a1 + 96);
  uint64_t v25 = *(void *)(a1 + 104);
  uint64_t v26 = *(void *)(a1 + 112);
  uint64_t v27 = *(void *)(a1 + 120);
  char v28 = *(_BYTE *)(a1 + 129);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = v20;
  char v29 = *(_BYTE *)(a1 + 128);
  *(_BYTE *)(a1 + 128) = v21;
  *(_BYTE *)(a1 + 129) = v22;
  sub_100003C70(v23, v24, v25, v26, v27, v29, v28);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  uint64_t v30 = *(void *)(a2 + 144);
  uint64_t v31 = *(void *)(a1 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v30;
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for DumpRawMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DumpRawMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 152) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DumpRawMetadata()
{
  return &type metadata for DumpRawMetadata;
}

double sub_10000415C()
{
  xmmword_1000BA160 = v7;
  unk_1000BA170 = v8;
  qword_1000BA180 = v9;
  xmmword_1000BA120 = v3;
  unk_1000BA130 = v4;
  xmmword_1000BA140 = v5;
  unk_1000BA150 = v6;
  double result = *(double *)&v2;
  xmmword_1000BA100 = v1;
  *(_OWORD *)algn_1000BA110 = v2;
  return result;
}

uint64_t sub_10000420C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v8 = &v39;
  __int128 v9 = *(_OWORD *)(a3 + 104);
  v34[0] = *(_OWORD *)(a3 + 88);
  v34[1] = v9;
  __int128 v10 = *(_OWORD *)(a3 + 136);
  v34[2] = *(_OWORD *)(a3 + 120);
  v34[3] = v10;
  uint64_t v11 = sub_100005104(&qword_1000B8748);
  OptionGroup.wrappedValue.getter(v11, v12, v13, (uint64_t)&v35);
  int v14 = sub_100008F4C();
  __int128 v39 = v35;
  char v40 = v36;
  sub_1000057D8((uint64_t)&v39);
  __int128 v41 = v37;
  char v42 = v38;
  sub_1000057D8((uint64_t)&v41);
  if (v14 == 2)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }

  uint64_t result = *(void *)(a1 + 40);
  if (!result)
  {
    __break(1u);
    return result;
  }

  uint64_t result = sub_100007DA4(result);
  if (!v3)
  {
    uint64_t v15 = result;
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16)
    {
LABEL_3:
      __int128 v8 = (__int128 *)swift_allocObject(&unk_1000AD650, 24LL, 7LL);
      *((void *)v8 + 2) = _swiftEmptyArrayStorage;
      __int128 v4 = v8 + 1;
      uint64_t v17 = swift_allocObject(&unk_1000AD678, 32LL, 7LL);
      *(void *)(v17 + 16) = sub_10000582C;
      *(void *)(v17 + 24) = v8;
      *(void *)&v34[0] = sub_100005858;
      *((void *)&v34[0] + 1) = v17;
      swift_retain_n(v8, 2LL);
      uint64_t v18 = swift_reflection_iterateMetadataAllocations(v16, sub_100008C98, v34);
      swift_release(*((void *)&v34[0] + 1));
      if (v18)
      {
        uint64_t v19 = String.init(cString:)(v18);
        uint64_t v21 = v20;
        unint64_t v22 = sub_100005888();
        swift_allocError(&_s5ErrorVN, v22, 0LL, 0LL);
        *uint64_t v23 = v19;
        v23[1] = v21;
        swift_willThrow();
        swift_release_n(v8, 2LL);
        return swift_bridgeObjectRelease(v15);
      }

LABEL_9:
      swift_release(v8);
      swift_beginAccess(v4, v34, 0LL, 0LL);
      uint64_t v25 = *((void *)v8 + 2);
      swift_bridgeObjectRetain(v25);
      swift_release(v8);
      uint64_t v26 = *(void *)(v25 + 16);
      if (v26)
      {
        swift_bridgeObjectRetain(v25);
        uint64_t v27 = (_DWORD *)(v25 + 48);
        do
        {
          unsigned int v28 = *(v27 - 4);
          uint64_t v29 = *((void *)v27 - 1);
          int v30 = *v27;
          v27 += 6;
          unsigned int v31 = v28;
          uint64_t v32 = v29;
          int v33 = v30;
          sub_1000044A8(&v31, a1, a2, a3, v15);
          --v26;
        }

        while (v26);
        swift_bridgeObjectRelease(v25);
      }

      swift_bridgeObjectRelease(v25);
      return swift_bridgeObjectRelease(v15);
    }

    if ((*((_BYTE *)*a1 + 105) & 1) != 0)
    {
      v59 = (*a1)[2];
      char v34 = **a1;
      __int128 v35 = (*a1)[3];
      char v36 = (*a1)[4];
      __int128 v37 = (*a1)[5];
      char v38 = (*a1)[6];
      __int128 v39 = (*a1)[7];
      char v40 = (*a1)[8];
      __int128 v41 = (*a1)[9];
      v65 = (*a1)[10];
      char v42 = (*a1)[11];
      sub_1000251E8(v2[16], *(void *)v2[15]);
      int v14 = v42;
      uint64_t v13 = v65;
      uint64_t v12 = v41;
      uint64_t v11 = v40;
      __int128 v10 = v39;
      __int128 v9 = v38;
      __int128 v8 = v37;
      __int128 v7 = v36;
      __int128 v6 = v35;
      __int128 v5 = v59;
      uint64_t v3 = v34;
    }

    goto LABEL_16;
  }

  if (!v13) {
    goto LABEL_9;
  }
  v62 = (*a1)[12];
  v58 = (*a1)[11];
  v60 = (*a1)[9];
  v64 = (*a1)[10];
  uint64_t v17 = (*a1)[8];
  uint64_t v18 = (*a1)[7];
  uint64_t v19 = (*a1)[6];
  uint64_t v12 = HIDWORD(v4);
  uint64_t v20 = HIDWORD(v5);
  uint64_t v21 = v5 & 1;
  unint64_t v22 = (v5 >> 8) & 1;
  uint64_t v23 = WORD1(v5) & 1;
  LODWORD(v14) = BYTE3(v5) & 1;
  uint64_t v24 = v6 & 1;
  LODWORD(v13) = (v6 >> 8) & 1;
  uint64_t v25 = WORD1(v6) & 1;
  *((_BYTE *)v2 + 108) = BYTE4(v7) & 1;
  uint64_t v26 = BYTE3(v6) & 1;
  uint64_t v27 = HIDWORD(v6) & 1;
  *((_BYTE *)v2 + 136) = v15 & 1;
  unsigned int v28 = v2[16];
  uint64_t v29 = *(void **)v2[15];
  int v30 = (v6 >> 40) & 1;
  if ((v16 & 1) != 0)
  {
    unsigned int v31 = v29[7] + 112 * v28;
    *(void *)unsigned int v31 = v3;
    uint64_t v32 = (char *)v2 + 108;
    int v33 = v2 + 17;
LABEL_8:
    *(_DWORD *)(v31 + 8) = v4;
    *(_DWORD *)(v31 + 12) = v12;
    *(_BYTE *)(v31 + 16) = v21;
    *(_BYTE *)(v31 + 17) = v22;
    *(_BYTE *)(v31 + 18) = v23;
    *(_BYTE *)(v31 + 19) = v14;
    *(_DWORD *)(v31 + 20) = v20;
    *(_BYTE *)(v31 + 24) = v24;
    *(_BYTE *)(v31 + 25) = v13;
    *(_BYTE *)(v31 + 26) = v25;
    *(_BYTE *)(v31 + 27) = v26;
    *(_BYTE *)(v31 + 28) = v27;
    *(_BYTE *)(v31 + 29) = v30;
    *(_DWORD *)(v31 + 32) = v7;
    *(_BYTE *)(v31 + 36) = *v32;
    *(void *)(v31 + 40) = v8;
    *(void *)(v31 + 48) = v19;
    __int128 v9 = v19;
    __int128 v10 = v18;
    *(void *)(v31 + 56) = v18;
    *(void *)(v31 + 64) = v17;
    uint64_t v11 = v17;
    int v14 = v58;
    uint64_t v12 = v60;
    uint64_t v13 = v64;
    *(void *)(v31 + 72) = v60;
    *(void *)(v31 + 80) = v64;
    *(void *)(v31 + 88) = v58;
    *(void *)(v31 + 96) = v62;
    *(_BYTE *)(v31 + 104) = *v33;
LABEL_16:
    v52 = *v2;
    v51 = v2[1];
    v53 = v2[2];
    v54 = v2[3];
    v55 = v2[4];
    v66 = v2[5];
    v57 = v2[6];
    v56 = v2[7];
    v61 = *((_OWORD *)v2 + 5);
    v63 = *((_OWORD *)v2 + 4);
    sub_10002AC24(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
    sub_10002AB90(v52, v51, v53, v54, v55, v66, v57, v56, v63, *((uint64_t *)&v63 + 1), v61, *((uint64_t *)&v61 + 1));
    free(v2);
    return;
  }

  v43 = v2[14];
  v29[(v28 >> 6) + 8] |= 1LL << v28;
  *(void *)(v29[6] + 8 * v28) = v43;
  v44 = v29[7] + 112 * v28;
  *(void *)v44 = v3;
  *(void *)(v44 + 8) = v4;
  *(_BYTE *)(v44 + 16) = v21;
  *(_BYTE *)(v44 + 17) = v22;
  *(_BYTE *)(v44 + 18) = BYTE2(v5) & 1;
  *(_BYTE *)(v44 + 19) = v14;
  *(_DWORD *)(v44 + 20) = HIDWORD(v5);
  *(_BYTE *)(v44 + 24) = v24;
  *(_BYTE *)(v44 + 25) = v13;
  *(_BYTE *)(v44 + 26) = BYTE2(v6) & 1;
  *(_BYTE *)(v44 + 27) = v26;
  *(_BYTE *)(v44 + 28) = BYTE4(v6) & 1;
  *(_BYTE *)(v44 + 29) = v30;
  *(_DWORD *)(v44 + 32) = v7;
  *(_BYTE *)(v44 + 36) = *((_BYTE *)v2 + 108);
  *(void *)(v44 + 40) = v8;
  *(void *)(v44 + 48) = v9;
  *(void *)(v44 + 56) = v10;
  *(void *)(v44 + 64) = v17;
  int v14 = v58;
  uint64_t v12 = v60;
  uint64_t v13 = v64;
  *(void *)(v44 + 72) = v60;
  *(void *)(v44 + 80) = v64;
  LOBYTE(v23) = v62;
  *(void *)(v44 + 88) = v58;
  *(void *)(v44 + 96) = v62;
  LODWORD(v20) = *((unsigned __int8 *)v2 + 136);
  *(_BYTE *)(v44 + 104) = v20;
  v45 = v29[2];
  v46 = __OFADD__(v45, 1LL);
  v47 = v45 + 1;
  if (!v46)
  {
LABEL_15:
    __int128 v9 = v19;
    __int128 v10 = v18;
    uint64_t v11 = v17;
    v29[2] = v47;
    goto LABEL_16;
  }

  __break(1u);
LABEL_14:
  v48 = v2[14];
  v29[(v28 >> 6) + 8] |= 1LL << v28;
  *(void *)(v29[6] + 8 * v28) = v48;
  v49 = v29[7] + 112 * v28;
  *(void *)v49 = v3;
  *(_DWORD *)(v49 + 8) = v4;
  *(_DWORD *)(v49 + 12) = v12;
  *(_BYTE *)(v49 + 16) = v21;
  *(_BYTE *)(v49 + 17) = v22;
  *(_BYTE *)(v49 + 18) = v23;
  *(_BYTE *)(v49 + 19) = v14;
  *(_DWORD *)(v49 + 20) = v20;
  *(_BYTE *)(v49 + 24) = v24;
  *(_BYTE *)(v49 + 25) = v13;
  *(_BYTE *)(v49 + 26) = v25;
  *(_BYTE *)(v49 + 27) = v26;
  *(_BYTE *)(v49 + 28) = v27;
  *(_BYTE *)(v49 + 29) = v30;
  *(_DWORD *)(v49 + 32) = v7;
  *(_BYTE *)(v49 + 36) = *((_BYTE *)v2 + 140);
  *(void *)(v49 + 40) = v8;
  *(void *)(v49 + 48) = v19;
  *(void *)(v49 + 56) = v18;
  *(void *)(v49 + 64) = v17;
  int v14 = v58;
  uint64_t v12 = v60;
  uint64_t v13 = v64;
  *(void *)(v49 + 72) = v60;
  *(void *)(v49 + 80) = v64;
  *(void *)(v49 + 88) = v58;
  *(void *)(v49 + 96) = v62;
  *(_BYTE *)(v49 + 104) = *((_BYTE *)v2 + 144);
  v50 = v29[2];
  v46 = __OFADD__(v50, 1LL);
  v47 = v50 + 1;
  if (!v46) {
    goto LABEL_15;
  }
  __break(1u);
}

    uint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_10:
    *(_BYTE *)(a2 + v13++) = v21;
    if (a3 == v13)
    {
      uint64_t v13 = a3;
LABEL_33:
      uint64_t result = v23;
      a5 = v24;
      a4 = v22;
      goto LABEL_34;
    }
  }

  uint64_t result = sub_10008AED8(v15, a6, a7);
  uint64_t v17 = v28;
  uint64_t v20 = result;
  uint64_t v18 = result >> 14;
  if (result >> 14 >= v28) {
    goto LABEL_14;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

    *(void *)(*(void *)(v3 + 56) + 8 * v28) = v41;
LABEL_10:
    __int128 v2 = v40;
    uint64_t v19 = v40[1];
    v40[1] = (char *)v3;
    swift_bridgeObjectRelease(v19);
LABEL_11:
    sub_10002DA24(v20, v21, v22);
    v18 += 24;
    if (!--v4) {
      return swift_bridgeObjectRelease(v39);
    }
  }

  sub_100070B58(v31, isUniquelyReferenced_nonNull_native);
  uint64_t v32 = sub_100058B9C(v20, v21, v23);
  if ((v2 & 1) == (v33 & 1))
  {
    unsigned int v28 = v32;
    goto LABEL_9;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Name);
  __break(1u);
  return result;
}

LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  return result;
}

  swift_bridgeObjectRelease(v66);
  uint64_t v12 = sub_10006B05C(a4, a5);
  uint64_t v13 = sub_100032880(1, (uint64_t)v12);
  uint64_t result = swift_bridgeObjectRelease(v12);
  if (v11 != v5)
  {
    v67 = v13;
    v62 = (unsigned __int8 *)(v13 + 48);
    __int128 v35 = v5;
    while (1)
    {
      if (v35 >= v11) {
        goto LABEL_94;
      }
      char v36 = (uint64_t *)(v73 + (v35 << 6));
      __int128 v37 = v36[2];
      if ((v37 & 0x6000000000000000LL) == 0)
      {
        char v38 = *(void *)(v67 + 16);
        if (v38) {
          break;
        }
      }

  __int128 v7 = 0LL;
  __int128 v8 = 0LL;
  __int128 v9 = 0LL;
LABEL_10:
  *(_OWORD *)a1 = v5;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  return result;
}

  __break(1u);
  return result;
}

      v22 += 24;
      if (!--v21)
      {
        swift_bridgeObjectRelease(v20);
        uint64_t v12 = v39;
        goto LABEL_29;
      }
    }
  }

  sub_10002DA24(a3, a4, a5);
LABEL_33:
  sub_100033E1C(&v41);
  return sub_10005BFC4((uint64_t)&v41, v9);
}

uint64_t sub_1000044A8(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = *(void *)(a2 + 40);
  if (result)
  {
    int v10 = *a1;
    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v12 = a1[4];
    uint64_t v13 = swift_reflection_metadataAllocationTagName(result, *a1);
    uint64_t v55 = a5;
    if (v13)
    {
      uint64_t v14 = String.init(cString:)(v13);
      uint64_t v16 = v15;
    }

    else
    {
      uint64_t v16 = (void *)0xE90000000000003ELL;
      uint64_t v14 = 0x6E776F6E6B6E753CLL;
    }

    uint64_t v54 = sub_100005104(&qword_1000B8758);
    uint64_t v17 = swift_allocObject(v54, 64LL, 7LL);
    *(_OWORD *)(v17 + 16) = xmmword_100096510;
    _StringGuts.grow(_:)(48LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    *(void *)&__int128 v56 = 0xD00000000000001ALL;
    *((void *)&v56 + 1) = 0x800000010009BA90LL;
    uint64_t v53 = v11;
    *(void *)&__int128 v60 = v11;
    unint64_t v18 = sub_1000058CC();
    v19._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v60, 16LL, 0LL, &type metadata for UInt64, v18);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    v21._countAndFlagsBits = 9071406774580000LL;
    v21._object = (void *)0xE700000000000000LL;
    String.append(_:)(v21);
    *(void *)&__int128 v60 = v12;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v23 = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v23);
    v24._countAndFlagsBits = 0x203A67617420LL;
    v24._object = (void *)0xE600000000000000LL;
    String.append(_:)(v24);
    LODWORD(v60) = v10;
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    uint64_t v26 = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v26);
    v27._countAndFlagsBits = 10272LL;
    v27._object = (void *)0xE200000000000000LL;
    String.append(_:)(v27);
    v28._countAndFlagsBits = v14;
    v28._object = v16;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v16);
    v29._countAndFlagsBits = 41LL;
    v29._object = (void *)0xE100000000000000LL;
    String.append(_:)(v29);
    __int128 v30 = v56;
    *(void *)(v17 + 56) = &type metadata for String;
    *(_OWORD *)(v17 + 32) = v30;
    print(_:separator:terminator:)(v17, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    swift_bridgeObjectRelease(v17);
    __int128 v31 = *(_OWORD *)(a4 + 104);
    __int128 v56 = *(_OWORD *)(a4 + 88);
    __int128 v57 = v31;
    __int128 v32 = *(_OWORD *)(a4 + 136);
    __int128 v58 = *(_OWORD *)(a4 + 120);
    __int128 v59 = v32;
    uint64_t v33 = sub_100005104(&qword_1000B8748);
    OptionGroup.wrappedValue.getter(v33, v34, v35, (uint64_t)&v60);
    char v36 = sub_100008F4C();
    __int128 v64 = v60;
    char v65 = v61;
    sub_1000057D8((uint64_t)&v64);
    __int128 v56 = v62;
    LOBYTE(v57) = v63;
    uint64_t result = sub_1000057D8((uint64_t)&v56);
    if (v36 != 2)
    {
      if (v55 && *(void *)(v55 + 16) && (unint64_t v37 = sub_100023B88(v53), (v38 & 1) != 0))
      {
        uint64_t v39 = *(void *)(*(void *)(v55 + 56) + 8 * v37);
        uint64_t v40 = swift_allocObject(v54, 64LL, 7LL);
        *(_OWORD *)(v40 + 16) = xmmword_100096510;
        uint64_t v41 = swift_allocObject(&unk_1000AD6A0, 32LL, 7LL);
        *(void *)(v41 + 16) = a2;
        *(void *)(v41 + 24) = a3;
        swift_unknownObjectRetain_n(a2, 2LL);
        if ((v36 & 1) != 0)
        {
          swift_bridgeObjectRetain_n(v39, 2LL);
          v43 = sub_100005440(v39, sub_100005934);
          swift_bridgeObjectRelease(v39);
          uint64_t v44 = sub_100005104(&qword_1000B8768);
          uint64_t v45 = sub_1000062F8(&qword_1000B8770, &qword_1000B8768, (uint64_t)&protocol conformance descriptor for [A]);
          uint64_t v46 = 10LL;
          unint64_t v47 = 0xE100000000000000LL;
        }

        else
        {
          uint64_t v42 = swift_bridgeObjectRetain(v39);
          v43 = sub_100005144(v42, a2);
          uint64_t v44 = sub_100005104(&qword_1000B8768);
          uint64_t v45 = sub_1000062F8(&qword_1000B8770, &qword_1000B8768, (uint64_t)&protocol conformance descriptor for [A]);
          uint64_t v46 = 2128928LL;
          unint64_t v47 = 0xE300000000000000LL;
        }

        uint64_t v49 = BidirectionalCollection<>.joined(separator:)(v46, v47, v44, v45);
        uint64_t v51 = v50;
        swift_bridgeObjectRelease(v39);
        swift_unknownObjectRelease(a2);
        swift_release(v41);
        swift_bridgeObjectRelease(v43);
        *(void *)(v40 + 56) = &type metadata for String;
        *(void *)(v40 + 32) = v49;
        *(void *)(v40 + 40) = v51;
        print(_:separator:terminator:)(v40, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
        return swift_bridgeObjectRelease(v40);
      }

      else
      {
        uint64_t v48 = swift_allocObject(v54, 64LL, 7LL);
        *(_OWORD *)(v48 + 16) = xmmword_100096510;
        *(void *)(v48 + 56) = &type metadata for String;
        *(void *)(v48 + 32) = 0xD00000000000001ALL;
        *(void *)(v48 + 40) = 0x800000010009BAB0LL;
        print(_:separator:terminator:)(v48, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
        return swift_bridgeObjectRelease(v48);
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100004994(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  if (qword_1000B86D0 != -1) {
    swift_once(&qword_1000B86D0, sub_10001E0D4);
  }
  uint64_t v5 = off_1000BA488(v3, v4, a1, 0x8000000000000000LL);
  uint64_t v7 = v6;
  if (qword_1000B86B8 != -1) {
    swift_once(&qword_1000B86B8, sub_10001DFA8);
  }
  uint64_t v8 = off_1000BA470(v5, v7);
  uint64_t v10 = v9;
  if (qword_1000B86C8 != -1) {
    swift_once(&qword_1000B86C8, sub_10001E070);
  }
  uint64_t v11 = off_1000BA480(v8, v10);
  if (v11) {
    uint64_t v12 = String.init(cString:)(v11);
  }
  else {
    uint64_t v12 = 0LL;
  }
  if (qword_1000B86B0 != -1) {
    swift_once(&qword_1000B86B0, sub_10001DF3C);
  }
  uint64_t v13 = off_1000BA468(v5, v7);
  if (v13) {
    String.init(cString:)(v13);
  }
  return v12;
}

BOOL sub_100004B04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100004B1C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100004B60()
{
}

Swift::Int sub_100004B88(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100004BC8()
{
  if (*v0) {
    return 0xD000000000000010LL;
  }
  else {
    return 0x736E6F6974706FLL;
  }
}

uint64_t sub_100004C08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100005A44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100004C2C()
{
  return 0LL;
}

void sub_100004C38(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100004C44(uint64_t a1)
{
  unint64_t v2 = sub_100006294();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100004C6C(uint64_t a1)
{
  unint64_t v2 = sub_100006294();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100004C94@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000B8638 != -1) {
    swift_once(&qword_1000B8638, sub_10000415C);
  }
  return sub_100005980((uint64_t)&xmmword_1000BA100, a1);
}

uint64_t sub_100004CE8()
{
  __int128 v1 = *(_OWORD *)(v0 + 112);
  v25[6] = *(_OWORD *)(v0 + 96);
  v25[7] = v1;
  v25[8] = *(_OWORD *)(v0 + 128);
  __int128 v2 = *(_OWORD *)(v0 + 48);
  v25[2] = *(_OWORD *)(v0 + 32);
  v25[3] = v2;
  __int128 v3 = *(_OWORD *)(v0 + 80);
  v25[4] = *(_OWORD *)(v0 + 64);
  v25[5] = v3;
  __int128 v4 = *(_OWORD *)(v0 + 16);
  v25[0] = *(_OWORD *)v0;
  v25[1] = v4;
  uint64_t v26 = *(void *)(v0 + 144);
  uint64_t v5 = sub_100005104(&qword_1000B8740);
  OptionGroup.wrappedValue.getter(v5, v6, v7, (uint64_t)v17);
  unint64_t v8 = v17[0];
  unint64_t v9 = v17[1];
  char v10 = v18;
  unint64_t v11 = v19;
  unint64_t v12 = v20;
  char v13 = v21;
  uint64_t v14 = v22;
  uint64_t v15 = v23;
  int v27 = v24;
  sub_100005668((uint64_t)v25);
  sub_100009C30(v8, v9, v10, v11, v12, v13, (uint64_t)v25);
  sub_100005720((uint64_t)v25);
  sub_100003C50(v8, v9, v10);
  sub_100003C60(v11, v12, v13);
  return sub_100003C60(v14, v15, v27);
}

__n128 sub_100004E1C@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2 = (unsigned __int8 *)ArgumentVisibility.default.unsafeMutableAddressor();
  uint64_t v3 = *v2;
  unint64_t v4 = sub_1000059BC();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v3,  (uint64_t)&type metadata for UniversalOptions,  v4,  (uint64_t)&v27);
  __int128 v25 = v28;
  __n128 v26 = v27;
  __int128 v24 = v29;
  uint64_t v5 = v30;
  uint64_t v6 = v31;
  char v7 = v32;
  char v8 = v33;
  char v9 = v34;
  char v10 = v35;
  uint64_t v11 = v36;
  uint64_t v12 = v37;
  uint64_t v13 = *v2;
  unint64_t v14 = sub_100005A00();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v13,  (uint64_t)&type metadata for BacktraceOptions,  v14,  (uint64_t)&v27);
  uint64_t v15 = v29;
  char v16 = BYTE8(v29);
  char v17 = BYTE9(v29);
  char v18 = BYTE10(v29);
  char v19 = BYTE11(v29);
  uint64_t v20 = v30;
  uint64_t v21 = v31;
  __n128 result = v27;
  __int128 v23 = v28;
  *(__n128 *)a1 = v26;
  *(_OWORD *)(a1 + 16) = v25;
  *(_OWORD *)(a1 + 32) = v24;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 65) = v8;
  *(_BYTE *)(a1 + 66) = v9;
  *(_BYTE *)(a1 + 67) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(__n128 *)(a1 + 88) = result;
  *(_OWORD *)(a1 + 104) = v23;
  *(void *)(a1 + 120) = v15;
  *(_BYTE *)(a1 + 128) = v16;
  *(_BYTE *)(a1 + 129) = v17;
  *(_BYTE *)(a1 + 130) = v18;
  *(_BYTE *)(a1 + 131) = v19;
  *(void *)(a1 + 136) = v20;
  *(void *)(a1 + 144) = v21;
  return result;
}

uint64_t static ParsableArguments._errorLabel.getter()
{
  return 0x726F727245LL;
}

double sub_100004F70@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double result = sub_100005B30(a1, (uint64_t)v9);
  if (!v2)
  {
    __int128 v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(void *)(a2 + 144) = v10;
    __int128 v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    __int128 v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    double result = *(double *)v9;
    __int128 v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }

  return result;
}

unint64_t sub_100004FE0(uint64_t a1)
{
  unint64_t result = sub_100005004();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100005004()
{
  unint64_t result = qword_1000B8730;
  if (!qword_1000B8730)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096578, &type metadata for DumpRawMetadata);
    atomic_store(result, (unint64_t *)&qword_1000B8730);
  }

  return result;
}

unint64_t sub_100005048(uint64_t a1)
{
  unint64_t result = sub_10000506C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000506C()
{
  unint64_t result = qword_1000B8738;
  if (!qword_1000B8738)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000965A0, &type metadata for DumpRawMetadata);
    atomic_store(result, (unint64_t *)&qword_1000B8738);
  }

  return result;
}

uint64_t sub_1000050B0(unsigned int *a1, uint64_t (*a2)(void, void, void))
{
  return a2(*a1, *((void *)a1 + 1), a1[4]);
}

void sub_1000050E4(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1000050F0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100005104(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

void *sub_100005144(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v46 = _swiftEmptyArrayStorage;
    sub_100027228(0LL, v2, 0);
    uint64_t v41 = a1 + 24;
    uint64_t v42 = a2;
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v6 = *(void *)(v41 + 8 * v2);
      uint64_t v7 = *(void *)(a2 + 48);
      uint64_t v8 = *(void *)(a2 + 56);
      uint64_t v9 = qword_1000B86D0;
      swift_unknownObjectRetain(a2);
      if (v9 != -1) {
        swift_once(&qword_1000B86D0, sub_10001E0D4);
      }
      uint64_t v10 = off_1000BA488(v7, v8, v6, 0x8000000000000000LL);
      uint64_t v12 = v11;
      if (qword_1000B86B8 != -1) {
        swift_once(&qword_1000B86B8, sub_10001DFA8);
      }
      uint64_t v13 = off_1000BA470(v10, v12);
      uint64_t v15 = v14;
      if (qword_1000B86C8 != -1) {
        swift_once(&qword_1000B86C8, sub_10001E070);
      }
      uint64_t v16 = off_1000BA480(v13, v15);
      if (v16)
      {
        uint64_t v17 = String.init(cString:)(v16);
        unint64_t v19 = v18;
      }

      else
      {
        uint64_t v17 = 0LL;
        unint64_t v19 = 0LL;
      }

      if (qword_1000B86B0 != -1) {
        swift_once(&qword_1000B86B0, sub_10001DF3C);
      }
      uint64_t v20 = off_1000BA468(v10, v12);
      if (v20)
      {
        uint64_t v21 = String.init(cString:)(v20);
        unint64_t v23 = v22;
      }

      else
      {
        uint64_t v21 = 0LL;
        unint64_t v23 = 0LL;
      }

      uint64_t v43 = v6;
      uint64_t v44 = 30768LL;
      unint64_t v45 = 0xE200000000000000LL;
      unint64_t v24 = sub_1000058CC();
      v25._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v43, 16LL, 0LL, &type metadata for UInt64, v24);
      object = v25._object;
      String.append(_:)(v25);
      swift_bridgeObjectRelease(object);
      v27._countAndFlagsBits = 10272LL;
      v27._object = (void *)0xE200000000000000LL;
      String.append(_:)(v27);
      if (v19) {
        uint64_t v28 = v17;
      }
      else {
        uint64_t v28 = 0x6E776F6E6B6E753CLL;
      }
      if (v19) {
        unint64_t v29 = v19;
      }
      else {
        unint64_t v29 = 0xE90000000000003ELL;
      }
      unint64_t v30 = v29;
      String.append(_:)(*(Swift::String *)&v28);
      swift_bridgeObjectRelease(v29);
      v31._countAndFlagsBits = 8233LL;
      v31._object = (void *)0xE200000000000000LL;
      String.append(_:)(v31);
      if (v23) {
        uint64_t v32 = v21;
      }
      else {
        uint64_t v32 = 0x6E776F6E6B6E753CLL;
      }
      if (v23) {
        unint64_t v33 = v23;
      }
      else {
        unint64_t v33 = 0xE90000000000003ELL;
      }
      unint64_t v34 = v33;
      String.append(_:)(*(Swift::String *)&v32);
      a2 = v42;
      swift_unknownObjectRelease(v42);
      swift_bridgeObjectRelease(v33);
      uint64_t v35 = v44;
      unint64_t v36 = v45;
      uint64_t v46 = v3;
      unint64_t v38 = v3[2];
      unint64_t v37 = v3[3];
      if (v38 >= v37 >> 1)
      {
        sub_100027228((char *)(v37 > 1), v38 + 1, 1);
        uint64_t v3 = v46;
      }

      v3[2] = v38 + 1;
      uint64_t v39 = &v3[2 * v38];
      v39[4] = v35;
      v39[5] = v36;
      --v2;
    }

    while (v2);
  }

  return v3;
}

void *sub_100005440(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v42 = _swiftEmptyArrayStorage;
  sub_100027228(0LL, 0LL, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v35 = a1;
  if (v4)
  {
    uint64_t v36 = a1 + 24;
    Swift::Int v5 = 1LL;
    do
    {
      uint64_t v6 = *(void *)(v36 + 8 * v4);
      uint64_t v40 = 32LL;
      unint64_t v41 = 0xE100000000000000LL;
      v7._countAndFlagsBits = 32LL;
      v7._object = (void *)0xE100000000000000LL;
      Swift::String v8 = String.init(repeating:count:)(v7, v5);
      object = v8._object;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(object);
      uint64_t v10 = a2(v6);
      unint64_t v12 = v11;
      uint64_t v14 = v13;
      unint64_t v16 = v15;
      uint64_t v38 = v6;
      v39._countAndFlagsBits = 30768LL;
      v39._object = (void *)0xE200000000000000LL;
      unint64_t v17 = sub_1000058CC();
      v18._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v38, 16LL, 0LL, &type metadata for UInt64, v17);
      unint64_t v19 = v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v19);
      v20._countAndFlagsBits = 10272LL;
      v20._object = (void *)0xE200000000000000LL;
      String.append(_:)(v20);
      if (v12) {
        uint64_t v21 = v10;
      }
      else {
        uint64_t v21 = 0x6E776F6E6B6E753CLL;
      }
      if (v12) {
        unint64_t v22 = v12;
      }
      else {
        unint64_t v22 = 0xE90000000000003ELL;
      }
      unint64_t v23 = v22;
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease(v22);
      v24._countAndFlagsBits = 8233LL;
      v24._object = (void *)0xE200000000000000LL;
      String.append(_:)(v24);
      if (v16) {
        uint64_t v25 = v14;
      }
      else {
        uint64_t v25 = 0x6E776F6E6B6E753CLL;
      }
      if (v16) {
        unint64_t v26 = v16;
      }
      else {
        unint64_t v26 = 0xE90000000000003ELL;
      }
      unint64_t v27 = v26;
      String.append(_:)(*(Swift::String *)&v25);
      swift_bridgeObjectRelease(v26);
      uint64_t v28 = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(v28);
      uint64_t v29 = v40;
      unint64_t v30 = v41;
      uint64_t v42 = v3;
      unint64_t v32 = v3[2];
      unint64_t v31 = v3[3];
      if (v32 >= v31 >> 1)
      {
        sub_100027228((char *)(v31 > 1), v32 + 1, 1);
        uint64_t v3 = v42;
      }

      v3[2] = v32 + 1;
      unint64_t v33 = &v3[2 * v32];
      v33[4] = v29;
      v33[5] = v30;
      ++v5;
      --v4;
    }

    while (v4);
  }

  swift_bridgeObjectRelease(v35);
  return v3;
}

uint64_t sub_100005668(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 120);
  char v8 = *(_BYTE *)(a1 + 129);
  uint64_t v9 = *(void *)(a1 + 144);
  char v10 = *(_BYTE *)(a1 + 128);
  sub_100003A6C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(_BYTE *)(a1 + 64),  *(_BYTE *)(a1 + 65));
  swift_bridgeObjectRetain(v2);
  sub_100003B10(v3, v4, v5, v6, v7, v10, v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_100005720(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 120);
  char v8 = *(_BYTE *)(a1 + 129);
  uint64_t v9 = *(void *)(a1 + 144);
  char v10 = *(_BYTE *)(a1 + 128);
  sub_100003BCC( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(_BYTE *)(a1 + 64),  *(_BYTE *)(a1 + 65));
  swift_bridgeObjectRelease(v2);
  sub_100003C70(v3, v4, v5, v6, v7, v10, v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_1000057D8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100005808()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

char *sub_10000582C(int a1, uint64_t a2, int a3)
{
  return sub_1000089D8(a1, a2, a3, v3);
}

uint64_t sub_100005834()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100005858(unsigned int *a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*a1, *((void *)a1 + 1), a1[4]);
}

unint64_t sub_100005888()
{
  unint64_t result = qword_1000B8750;
  if (!qword_1000B8750)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096B64, &_s5ErrorVN);
    atomic_store(result, (unint64_t *)&qword_1000B8750);
  }

  return result;
}

unint64_t sub_1000058CC()
{
  unint64_t result = qword_1000B8760;
  if (!qword_1000B8760)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1000B8760);
  }

  return result;
}

uint64_t sub_100005910()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100005934(uint64_t a1)
{
  return sub_100004994(a1, *(void *)(v1 + 16));
}

uint64_t sub_10000593C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100005980(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1000059BC()
{
  unint64_t result = qword_1000B8778;
  if (!qword_1000B8778)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096D54, &type metadata for UniversalOptions);
    atomic_store(result, (unint64_t *)&qword_1000B8778);
  }

  return result;
}

unint64_t sub_100005A00()
{
  unint64_t result = qword_1000B8780;
  if (!qword_1000B8780)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096D38, &type metadata for BacktraceOptions);
    atomic_store(result, (unint64_t *)&qword_1000B8780);
  }

  return result;
}

uint64_t sub_100005A44(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x800000010009BB00LL)
  {
    swift_bridgeObjectRelease(0x800000010009BB00LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010009BB00LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }
}

double sub_100005B30@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v66 = sub_100005104(&qword_1000B8788);
  uint64_t v3 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  unint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (unsigned __int8 *)ArgumentVisibility.default.unsafeMutableAddressor();
  uint64_t v7 = *v6;
  unint64_t v8 = sub_1000059BC();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v7,  (uint64_t)&type metadata for UniversalOptions,  v8,  (uint64_t)&v112);
  uint64_t v81 = v112;
  uint64_t v82 = v113;
  uint64_t v83 = v114;
  uint64_t v84 = v115;
  uint64_t v85 = v116;
  uint64_t v86 = v117;
  uint64_t v87 = v118;
  uint64_t v88 = v119;
  LODWORD(v80) = v120;
  unsigned __int8 v9 = v121;
  int v137 = v122;
  int v79 = v123;
  uint64_t v89 = v125;
  uint64_t v90 = v124;
  unsigned __int8 v140 = v121;
  uint64_t v10 = *v6;
  unint64_t v11 = sub_100005A00();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v10,  (uint64_t)&type metadata for BacktraceOptions,  v11,  (uint64_t)&v112);
  uint64_t v76 = v112;
  uint64_t v77 = v113;
  uint64_t v78 = v114;
  uint64_t v70 = v115;
  uint64_t v71 = v116;
  int v72 = v117;
  int v12 = BYTE1(v117);
  int v68 = BYTE3(v117);
  int v69 = BYTE2(v117);
  uint64_t v67 = v118;
  uint64_t v73 = v119;
  v74 = a1;
  char v139 = BYTE1(v117);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100006270(a1, v13);
  unint64_t v15 = sub_100006294();
  uint64_t v16 = v75;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DumpRawMetadata.CodingKeys,  &type metadata for DumpRawMetadata.CodingKeys,  v15,  v13,  v14);
  if (v16)
  {
    unsigned __int8 v21 = v137;
    uint64_t v22 = v90;
    unsigned __int8 v23 = v79;
    uint64_t v24 = v73;
    char v25 = v72;
    uint64_t v27 = v70;
    uint64_t v26 = v71;
    sub_1000062D8(v74);
    uint64_t v112 = v81;
    uint64_t v113 = v82;
    uint64_t v114 = v83;
    uint64_t v115 = v84;
    uint64_t v116 = v85;
    uint64_t v117 = v86;
    uint64_t v118 = v87;
    uint64_t v119 = v88;
    unsigned __int8 v120 = v80;
    unsigned __int8 v121 = v140;
    unsigned __int8 v122 = v21;
    unsigned __int8 v123 = v23;
    uint64_t v124 = v22;
    uint64_t v125 = v89;
    uint64_t v126 = v76;
    uint64_t v127 = v77;
    uint64_t v128 = v78;
    uint64_t v129 = v27;
    uint64_t v130 = v26;
    char v131 = v25;
    char v132 = v139;
    char v133 = v69;
    char v134 = v68;
    uint64_t v135 = v67;
    uint64_t v136 = v24;
    sub_100005720((uint64_t)&v112);
  }

  else
  {
    char v17 = v9;
    LODWORD(v75) = v12;
    uint64_t v18 = v3;
    uint64_t v19 = sub_100005104(&qword_1000B8740);
    LOBYTE(v91) = 0;
    uint64_t v20 = sub_1000062F8( (unint64_t *)&qword_1000B8798,  &qword_1000B8740,  (uint64_t)&protocol conformance descriptor for OptionGroup<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v112, v19, &v91, v66, v19, v20);
    int v28 = v121;
    int v137 = v122;
    int v29 = v123;
    uint64_t v30 = v125;
    uint64_t v90 = v124;
    int v59 = v120;
    uint64_t v63 = v113;
    uint64_t v64 = v112;
    uint64_t v61 = v115;
    uint64_t v62 = v114;
    uint64_t v56 = v117;
    uint64_t v57 = v116;
    uint64_t v55 = v118;
    uint64_t v60 = v119;
    sub_100003A6C(v112, v113, v114, v115, v116, v117, v118, v119, v120, v121);
    uint64_t v58 = v30;
    swift_bridgeObjectRetain(v30);
    sub_100003BCC(v81, v82, v83, v84, v85, v86, v87, v88, v80, v17);
    swift_bridgeObjectRelease(v89);
    unsigned __int8 v140 = v28;
    uint64_t v31 = sub_100005104(&qword_1000B8748);
    char v138 = 1;
    uint64_t v32 = sub_1000062F8( &qword_1000B87A0,  &qword_1000B8748,  (uint64_t)&protocol conformance descriptor for OptionGroup<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v101, v31, &v138, v66, v31, v32);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v66);
    uint64_t v33 = v102;
    int v79 = v29;
    uint64_t v34 = v103;
    uint64_t v35 = v104;
    uint64_t v36 = v105;
    LODWORD(v30) = v107;
    LODWORD(v89) = v108;
    LODWORD(v88) = v109;
    uint64_t v37 = v111;
    uint64_t v86 = v101;
    uint64_t v87 = v110;
    LODWORD(v85) = v106;
    int v54 = v28;
    sub_100003B10(v101, v102, v103, v104, v105, v106, v107);
    swift_bridgeObjectRetain(v37);
    sub_100003C70(v76, v77, v78, v70, v71, v72, v75);
    swift_bridgeObjectRelease(v73);
    char v38 = v30;
    int v69 = v30;
    char v139 = v30;
    *(void *)&__int128 v91 = v64;
    *((void *)&v91 + 1) = v63;
    *(void *)&__int128 v92 = v62;
    *((void *)&v92 + 1) = v61;
    *(void *)&__int128 v93 = v57;
    *((void *)&v93 + 1) = v56;
    *(void *)&__int128 v94 = v55;
    *((void *)&v94 + 1) = v60;
    LOBYTE(v95) = v59;
    BYTE1(v95) = v28;
    BYTE2(v95) = v137;
    BYTE3(v95) = v79;
    *((void *)&v95 + 1) = v90;
    *(void *)&__int128 v96 = v58;
    uint64_t v39 = v86;
    *((void *)&v96 + 1) = v86;
    *(void *)&__int128 v97 = v33;
    uint64_t v82 = v34;
    uint64_t v83 = v33;
    *((void *)&v97 + 1) = v34;
    *(void *)&__int128 v98 = v35;
    uint64_t v80 = v36;
    uint64_t v81 = v35;
    *((void *)&v98 + 1) = v36;
    LOBYTE(v28) = v85;
    LOBYTE(v99) = v85;
    BYTE1(v99) = v38;
    BYTE2(v99) = v89;
    BYTE3(v99) = v88;
    *((void *)&v99 + 1) = v87;
    uint64_t v100 = v37;
    uint64_t v84 = v37;
    sub_100005668((uint64_t)&v91);
    sub_100003C70(v39, v33, v34, v35, v36, v28, v69);
    swift_bridgeObjectRelease(v37);
    uint64_t v41 = v63;
    uint64_t v40 = v64;
    uint64_t v43 = v61;
    uint64_t v42 = v62;
    uint64_t v45 = v56;
    uint64_t v44 = v57;
    uint64_t v46 = v55;
    sub_100003BCC(v64, v63, v62, v61, v57, v56, v55, v60, v59, v54);
    swift_bridgeObjectRelease(v58);
    sub_1000062D8(v74);
    uint64_t v112 = v40;
    uint64_t v113 = v41;
    uint64_t v114 = v42;
    uint64_t v115 = v43;
    uint64_t v116 = v44;
    uint64_t v117 = v45;
    uint64_t v118 = v46;
    uint64_t v119 = v60;
    unsigned __int8 v120 = v59;
    unsigned __int8 v121 = v140;
    unsigned __int8 v122 = v137;
    unsigned __int8 v123 = v79;
    uint64_t v124 = v90;
    uint64_t v125 = v58;
    uint64_t v126 = v86;
    uint64_t v127 = v83;
    uint64_t v128 = v82;
    uint64_t v129 = v81;
    uint64_t v130 = v80;
    char v131 = v85;
    char v132 = v139;
    char v133 = v89;
    char v134 = v88;
    uint64_t v135 = v87;
    uint64_t v136 = v84;
    sub_100005720((uint64_t)&v112);
    __int128 v47 = v98;
    uint64_t v48 = v65;
    *(_OWORD *)(v65 + 96) = v97;
    *(_OWORD *)(v48 + 112) = v47;
    *(_OWORD *)(v48 + 128) = v99;
    *(void *)(v48 + 144) = v100;
    __int128 v49 = v94;
    *(_OWORD *)(v48 + 32) = v93;
    *(_OWORD *)(v48 + 48) = v49;
    __int128 v50 = v96;
    *(_OWORD *)(v48 + 64) = v95;
    *(_OWORD *)(v48 + 80) = v50;
    double result = *(double *)&v91;
    __int128 v52 = v92;
    *(_OWORD *)uint64_t v48 = v91;
    *(_OWORD *)(v48 + 16) = v52;
  }

  return result;
}

void *sub_100006270(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_100006294()
{
  unint64_t result = qword_1000B8790;
  if (!qword_1000B8790)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000966A8, &type metadata for DumpRawMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8790);
  }

  return result;
}

uint64_t sub_1000062D8(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000062F8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10000593C(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for DumpRawMetadata.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DumpRawMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  __break(1u);
}

      uint64_t v14 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_52;
      }
      unint64_t v15 = 0;
      goto LABEL_23;
    }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DumpRawMetadata.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100006420 + 4 * byte_100096525[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100006454 + 4 * byte_100096520[v4]))();
}

uint64_t sub_100006454(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000645C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100006464LL);
  }
  return result;
}

uint64_t sub_100006470(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100006478LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10000647C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006484(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006490(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100006498(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DumpRawMetadata.CodingKeys()
{
  return &type metadata for DumpRawMetadata.CodingKeys;
}

void *sub_1000064B4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x288uLL);
}

uint64_t sub_1000064BC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 648)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000064DC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 648) = v3;
  return result;
}

void type metadata accessor for kinfo_proc(uint64_t a1)
{
}

unint64_t sub_1000065C8()
{
  unint64_t result = qword_1000B87B0;
  if (!qword_1000B87B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096680, &type metadata for DumpRawMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B87B0);
  }

  return result;
}

unint64_t sub_100006610()
{
  unint64_t result = qword_1000B87B8;
  if (!qword_1000B87B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000965F0, &type metadata for DumpRawMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B87B8);
  }

  return result;
}

unint64_t sub_100006658()
{
  unint64_t result = qword_1000B87C0;
  if (!qword_1000B87C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096618, &type metadata for DumpRawMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B87C0);
  }

  return result;
}

void *sub_10000669C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

uint64_t sub_1000066A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 352)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000066C4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 344) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 352) = v3;
  return result;
}

void type metadata accessor for eproc(uint64_t a1)
{
}

void *sub_100006760(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x128uLL);
}

uint64_t sub_100006768(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 296)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006788(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 296) = v3;
  return result;
}

void type metadata accessor for extern_proc(uint64_t a1)
{
}

uint64_t sub_100006814(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 152)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_100006870(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 152) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 152) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }

  return result;
}

void type metadata accessor for __sFILE(uint64_t a1)
{
}

__n128 sub_1000068FC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100006920(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 76)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006940(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 76) = v3;
  return result;
}

void type metadata accessor for _ucred(uint64_t a1)
{
}

__n128 sub_100006994(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1000069C0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000069E0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 104) = v3;
  return result;
}

void type metadata accessor for _pcred(uint64_t a1)
{
}

__n128 sub_100006A38(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t sub_100006A64(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006A84(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 136) = 0LL;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 144) = v3;
  return result;
}

void type metadata accessor for rusage(uint64_t a1)
{
}

void type metadata accessor for timeval(uint64_t a1)
{
}

__n128 initializeWithTake for ProcessMetadata(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100006B08(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006B28(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for itimerval(uint64_t a1)
{
}

__n128 sub_100006B68(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100006B7C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006B9C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for vmspace(uint64_t a1)
{
}

uint64_t sub_100006BEC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100006C0C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for extern_proc.__Unnamed_union_p_un(uint64_t a1)
{
}

void type metadata accessor for __sbuf(uint64_t a1)
{
}

void sub_100006C5C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t destroy for DumpConformanceCache(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 80));
}

uint64_t initializeWithCopy for DumpConformanceCache(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v14 = *(_BYTE *)(a2 + 64);
  char v15 = *(_BYTE *)(a2 + 65);
  sub_100003A6C(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v14;
  *(_BYTE *)(a1 + 65) = v15;
  *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for DumpConformanceCache(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v25 = *(_BYTE *)(a2 + 64);
  char v26 = *(_BYTE *)(a2 + 65);
  sub_100003A6C(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v25, v26);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(_BYTE *)(a1 + 64);
  char v21 = *(_BYTE *)(a1 + 65);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v25;
  *(_BYTE *)(a1 + 65) = v26;
  sub_100003BCC(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v22 = *(void *)(a2 + 80);
  uint64_t v23 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

__n128 initializeWithTake for DumpConformanceCache(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for DumpConformanceCache(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a2 + 64);
  char v5 = *(_BYTE *)(a2 + 65);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  char v14 = *(_BYTE *)(a1 + 64);
  char v15 = *(_BYTE *)(a1 + 65);
  __int128 v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  __int128 v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 65) = v5;
  sub_100003BCC(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  uint64_t v18 = *(void *)(a2 + 80);
  uint64_t v19 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v18;
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for DumpConformanceCache(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DumpConformanceCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DumpConformanceCache()
{
  return &type metadata for DumpConformanceCache;
}

double sub_100007034()
{
  xmmword_1000BA1E8 = v7;
  unk_1000BA1F8 = v8;
  qword_1000BA208 = v9;
  xmmword_1000BA1A8 = v3;
  unk_1000BA1B8 = v4;
  xmmword_1000BA1C8 = v5;
  unk_1000BA1D8 = v6;
  double result = *(double *)&v2;
  xmmword_1000BA188 = v1;
  unk_1000BA198 = v2;
  return result;
}

uint64_t sub_1000070E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 40);
  if (!v3)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }

  __int128 v6 = (void *)0xE90000000000003ELL;
  uint64_t v7 = 0x6E776F6E6B6E753CLL;
  uint64_t v8 = swift_reflection_typeRefForMetadata(*(void *)(a3 + 40), result);
  if (v8 && (uint64_t v9 = swift_reflection_copyNameForTypeRef(v3, v8, 0LL)) != 0)
  {
    uint64_t v10 = (void *)v9;
    uint64_t v11 = String.init(cString:)(v9);
    uint64_t v13 = v12;
    free(v10);
  }

  else
  {
    uint64_t v11 = 0x6E776F6E6B6E753CLL;
    uint64_t v13 = (void *)0xE90000000000003ELL;
  }

  double result = *(void *)(a3 + 40);
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v14 = swift_reflection_copyDemangledNameForProtocolDescriptor(result, a2);
  if (v14)
  {
    char v15 = (void *)v14;
    uint64_t v7 = String.init(cString:)(v14);
    __int128 v6 = v16;
    free(v15);
  }

  uint64_t v17 = sub_100005104(&qword_1000B8758);
  uint64_t v18 = swift_allocObject(v17, 64LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_100096510;
  _StringGuts.grow(_:)(19LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  strcpy((char *)v24, "Conformance: ");
  HIWORD(v24[1]) = -4864;
  v19._countAndFlagsBits = v11;
  v19._object = v13;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v13);
  v20._countAndFlagsBits = 8250LL;
  v20._object = (void *)0xE200000000000000LL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v7;
  v21._object = v6;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v6);
  uint64_t v22 = v24[0];
  uint64_t v23 = v24[1];
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 32) = v22;
  *(void *)(v18 + 40) = v23;
  print(_:separator:terminator:)(v18, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  return swift_bridgeObjectRelease(v18);
}

uint64_t static ExitCode.failure.getter()
{
  return 1LL;
}

Swift::Int sub_1000072B0()
{
  return Hasher._finalize()();
}

void sub_1000072F0()
{
}

Swift::Int sub_100007314(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100007350()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_100007368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

void sub_1000073FC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100007408(uint64_t a1)
{
  unint64_t v2 = sub_100007B44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100007430(uint64_t a1)
{
  unint64_t v2 = sub_100007B44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100007458@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000B8640 != -1) {
    swift_once(&qword_1000B8640, sub_100007034);
  }
  return sub_100005980((uint64_t)&xmmword_1000BA188, a1);
}

uint64_t sub_1000074A8()
{
  uint64_t v0 = sub_100005104(&qword_1000B8740);
  OptionGroup.wrappedValue.getter(v0, v1, v2, (uint64_t)&v12);
  uint64_t v3 = v12;
  uint64_t v4 = v13;
  char v5 = v14;
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  int v21 = v20;
  sub_10000A730(v12, v13, v14, v15, v16, v17);
  sub_100003C50(v3, v4, v5);
  sub_100003C60(v6, v7, v8);
  return sub_100003C60(v9, v10, v21);
}

double sub_1000075B0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(unsigned __int8 *)ArgumentVisibility.default.unsafeMutableAddressor();
  unint64_t v3 = sub_1000059BC();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v2,  (uint64_t)&type metadata for UniversalOptions,  v3,  (uint64_t)v14);
  char v4 = v15;
  char v5 = v16;
  char v6 = v17;
  char v7 = v18;
  uint64_t v8 = v19;
  uint64_t v9 = v20;
  double result = *(double *)v14;
  __int128 v11 = v14[1];
  __int128 v12 = v14[2];
  __int128 v13 = v14[3];
  *(_OWORD *)a1 = v14[0];
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  *(_BYTE *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 65) = v5;
  *(_BYTE *)(a1 + 66) = v6;
  *(_BYTE *)(a1 + 67) = v7;
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  return result;
}

double sub_100007638@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }

  return result;
}

unint64_t sub_100007690(uint64_t a1)
{
  unint64_t result = sub_1000076B4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000076B4()
{
  unint64_t result = qword_1000B8820;
  if (!qword_1000B8820)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000967A8, &type metadata for DumpConformanceCache);
    atomic_store(result, (unint64_t *)&qword_1000B8820);
  }

  return result;
}

unint64_t sub_1000076F8(uint64_t a1)
{
  unint64_t result = sub_10000771C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000771C()
{
  unint64_t result = qword_1000B8828;
  if (!qword_1000B8828)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000967D0, &type metadata for DumpConformanceCache);
    atomic_store(result, (unint64_t *)&qword_1000B8828);
  }

  return result;
}

uint64_t sub_100007760@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v3 = sub_100005104(&qword_1000B8830);
  uint64_t v59 = *(void *)(v3 - 8);
  uint64_t v60 = v3;
  __chkstk_darwin(v3);
  __int128 v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(unsigned __int8 *)ArgumentVisibility.default.unsafeMutableAddressor();
  unint64_t v7 = sub_1000059BC();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v6,  (uint64_t)&type metadata for UniversalOptions,  v7,  (uint64_t)&v68);
  uint64_t v61 = v69;
  uint64_t v62 = v68;
  uint64_t v8 = v71;
  uint64_t v82 = v70;
  uint64_t v9 = v72;
  uint64_t v65 = v74;
  uint64_t v66 = v73;
  uint64_t v64 = v75;
  int v10 = v76;
  int v11 = v77;
  uint64_t v67 = v81;
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100006270(a1, v12);
  unint64_t v14 = sub_100007B44();
  uint64_t v58 = v5;
  char v15 = v82;
  uint64_t v16 = v13;
  uint64_t v18 = v62;
  uint64_t v17 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DumpConformanceCache.CodingKeys,  &type metadata for DumpConformanceCache.CodingKeys,  v14,  v12,  v16);
  uint64_t v19 = v61;
  if (v17)
  {
    sub_1000062D8(a1);
    sub_100003BCC(v18, v19, v15, v8, v9, v66, v65, v64, v10, v11);
    return swift_bridgeObjectRelease(v67);
  }

  else
  {
    int v54 = v11;
    int v55 = v10;
    uint64_t v56 = v9;
    uint64_t v63 = v8;
    uint64_t v20 = v61;
    uint64_t v21 = v67;
    uint64_t v22 = sub_100005104(&qword_1000B8740);
    unint64_t v23 = sub_100007B88();
    uint64_t v24 = v22;
    uint64_t v25 = v60;
    uint64_t v26 = v22;
    uint64_t v27 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v68, v24, v28, v60, v26, v23);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v25);
    uint64_t v29 = v69;
    uint64_t v46 = v68;
    char v30 = v70;
    uint64_t v51 = v71;
    uint64_t v50 = v72;
    uint64_t v49 = v73;
    uint64_t v31 = v75;
    uint64_t v47 = v74;
    int v52 = v76;
    LODWORD(v60) = v77;
    LODWORD(v59) = v78;
    LODWORD(v58) = v79;
    uint64_t v32 = v81;
    uint64_t v53 = v80;
    uint64_t v48 = v81;
    uint64_t v44 = v69;
    uint64_t v45 = v70;
    sub_100003A6C(v68, v69, v70, v71, v72, v73, v74, v75, v76, v77);
    swift_bridgeObjectRetain(v32);
    sub_100003BCC(v18, v20, v82, v63, v56, v66, v65, v64, v55, v54);
    swift_bridgeObjectRelease(v21);
    sub_1000062D8(a1);
    LOBYTE(v32) = v52;
    uint64_t v33 = v46;
    char v34 = v30;
    uint64_t v35 = v51;
    uint64_t v36 = v50;
    uint64_t v37 = v49;
    uint64_t v38 = v47;
    sub_100003BCC(v46, v29, v34, v51, v50, v49, v47, v31, v52, v60);
    uint64_t v39 = v48;
    uint64_t result = swift_bridgeObjectRelease(v48);
    uint64_t v41 = v57;
    uint64_t v42 = v44;
    *uint64_t v57 = v33;
    v41[1] = v42;
    v41[2] = v45;
    v41[3] = v35;
    v41[4] = v36;
    v41[5] = v37;
    v41[6] = v38;
    v41[7] = v31;
    *((_BYTE *)v41 + 64) = v32;
    *((_BYTE *)v41 + 65) = v60;
    *((_BYTE *)v41 + 66) = v59;
    *((_BYTE *)v41 + 67) = (_BYTE)v58;
    v41[9] = v53;
    v41[10] = v39;
  }

  return result;
}

unint64_t sub_100007B44()
{
  unint64_t result = qword_1000B8838;
  if (!qword_1000B8838)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000968CC, &type metadata for DumpConformanceCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8838);
  }

  return result;
}

unint64_t sub_100007B88()
{
  unint64_t result = qword_1000B8798;
  if (!qword_1000B8798)
  {
    uint64_t v1 = sub_10000593C(&qword_1000B8740);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OptionGroup<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B8798);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for DumpConformanceCache.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for DumpConformanceCache.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100007C68 + 4 * asc_100096770[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100007C88 + 4 * byte_100096775[v4]))();
  }
}

_BYTE *sub_100007C68(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100007C88(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100007C90(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100007C98(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100007CA0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100007CA8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t static ExitCode.success.getter()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for DumpConformanceCache.CodingKeys()
{
  return &type metadata for DumpConformanceCache.CodingKeys;
}

unint64_t sub_100007CD0()
{
  unint64_t result = qword_1000B8840;
  if (!qword_1000B8840)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000968A4, &type metadata for DumpConformanceCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8840);
  }

  return result;
}

unint64_t sub_100007D18()
{
  unint64_t result = qword_1000B8848;
  if (!qword_1000B8848)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096814, &type metadata for DumpConformanceCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8848);
  }

  return result;
}

unint64_t sub_100007D60()
{
  unint64_t result = qword_1000B8850;
  if (!qword_1000B8850)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009683C, &type metadata for DumpConformanceCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8850);
  }

  return result;
}

uint64_t sub_100007DA4(uint64_t a1)
{
  uint64_t v2 = swift_allocObject(&unk_1000AE230, 24LL, 7LL);
  *(void *)(v2 + 16) = sub_10002962C(_swiftEmptyArrayStorage);
  uint64_t v3 = swift_allocObject(&unk_1000AE258, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_100008DB8;
  *(void *)(v3 + 24) = v2;
  int v11 = sub_100008DE4;
  uint64_t v12 = v3;
  swift_retain_n(v2, 2LL);
  uint64_t v4 = swift_reflection_iterateMetadataAllocationBacktraces(a1, sub_100008D48, &v11);
  swift_release(v12);
  if (v4)
  {
    uint64_t v5 = String.init(cString:)(v4);
    uint64_t v7 = v6;
    unint64_t v8 = sub_100005888();
    swift_allocError(&_s5ErrorVN, v8, 0LL, 0LL);
    *uint64_t v9 = v5;
    v9[1] = v7;
    swift_willThrow();
    swift_release_n(v2, 2LL);
  }

  else
  {
    swift_release(v2);
    swift_beginAccess(v2 + 16, &v11, 0LL, 0LL);
    uint64_t v5 = *(void *)(v2 + 16);
    swift_bridgeObjectRetain(v5);
    swift_release(v2);
  }

  return v5;
}

uint64_t sub_100007F0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100007F18(*a1, *a2);
}

uint64_t sub_100007F18(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2 = 6775156LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x73736572646461LL;
    }
    else {
      uint64_t v4 = 1702521203LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE700000000000000LL;
    }
    else {
      unint64_t v5 = 0xE400000000000000LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        uint64_t v2 = 0x73736572646461LL;
      }
      else {
        uint64_t v2 = 1702521203LL;
      }
      if (v6 == 1) {
        unint64_t v7 = 0xE700000000000000LL;
      }
      else {
        unint64_t v7 = 0xE400000000000000LL;
      }
      if (v4 != v2) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v5 = 0xE300000000000000LL;
    uint64_t v4 = 6775156LL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE300000000000000LL;
  if (v4 != 6775156)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0LL);
    goto LABEL_22;
  }

LABEL_19:
  if (v5 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
  unint64_t v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

  uint64_t v31 = sub_100005104(&qword_1000B8758);
  int v10 = swift_allocObject(v31, 64LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_100096510;
  aBlock = 0LL;
  uint64_t v58 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease(v58);
  aBlock = (void **)0xD00000000000001ELL;
  uint64_t v58 = 0x800000010009C100LL;
  int v54 = pid;
  v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  uint64_t v33 = v32._object;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v33);
  v34._countAndFlagsBits = 8250LL;
  v34._object = (void *)0xE200000000000000LL;
  String.append(_:)(v34);
  unint64_t result = mach_error_string(v28);
  if (result)
  {
    v35._countAndFlagsBits = String.init(cString:)(result);
    uint64_t v36 = v35._object;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(v36);
    v37._countAndFlagsBits = 32LL;
    v37._object = (void *)0xE100000000000000LL;
    String.append(_:)(v37);
    v38._countAndFlagsBits = 30768LL;
    v38._object = (void *)0xE200000000000000LL;
    String.append(_:)(v38);
    int v54 = v28;
    uint64_t v19 = sub_1000131F4();
    p_corpse_task_port = &v54;
    goto LABEL_4;
  }

  if (v5 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
  unint64_t v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

  if (v13 != v15) {
    goto LABEL_21;
  }
  swift_bridgeObjectRelease_n(v13, 2LL);
LABEL_22:
  if (a2 == a5 && a3 == a6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a5, a6, 0LL);
  }
}

void sub_100008010(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100008060(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100008110 + 4 * byte_100096923[a2]))(0x697461636F6C6C61LL);
}

uint64_t sub_100008110(uint64_t a1)
{
  if (a1 == 0x697461636F6C6C61LL && v1 == 0xEA00000000006E6FLL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x697461636F6C6C61LL, 0xEA00000000006E6FLL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006E6FLL);
  return v2 & 1;
}

Swift::Int sub_100008218()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xE700000000000000LL;
  uint64_t v3 = 0x73736572646461LL;
  if (v1 != 1)
  {
    uint64_t v3 = 1702521203LL;
    unint64_t v2 = 0xE400000000000000LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 6775156LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE300000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000082A8(uint64_t a1)
{
  unint64_t v2 = 0xE700000000000000LL;
  uint64_t v3 = 0x73736572646461LL;
  if (*v1 != 1)
  {
    uint64_t v3 = 1702521203LL;
    unint64_t v2 = 0xE400000000000000LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 6775156LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE300000000000000LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100008314(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xE700000000000000LL;
  uint64_t v4 = 0x73736572646461LL;
  if (v2 != 1)
  {
    uint64_t v4 = 1702521203LL;
    unint64_t v3 = 0xE400000000000000LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 6775156LL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE300000000000000LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1000083A0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100008D4C(*a1);
  *a2 = result;
  return result;
}

void sub_1000083CC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000LL;
  unint64_t v4 = 0xE700000000000000LL;
  uint64_t v5 = 0x73736572646461LL;
  if (v2 != 1)
  {
    uint64_t v5 = 1702521203LL;
    unint64_t v4 = 0xE400000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 6775156LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10000841C()
{
  uint64_t v1 = 0x73736572646461LL;
  if (*v0 != 1) {
    uint64_t v1 = 1702521203LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 6775156LL;
  }
}

unint64_t sub_100008468@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100008D4C(a1);
  *a2 = result;
  return result;
}

void sub_10000848C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100008498(uint64_t a1)
{
  unint64_t v2 = sub_100008634();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000084C0(uint64_t a1)
{
  unint64_t v2 = sub_100008634();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t swift_metadata_allocation.encode(to:)(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v17 = a3;
  uint64_t v8 = sub_100005104(&qword_1000B8858);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100006270(a1, v12);
  unint64_t v14 = sub_100008634();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10CodingKeysON, &_s10CodingKeysON, v14, v12, v13);
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v8);
  if (!v4)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v19, v8);
    char v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a4, &v18, v8);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_100008634()
{
  unint64_t result = qword_1000B8860;
  if (!qword_1000B8860)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096AE4, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000B8860);
  }

  return result;
}

uint64_t sub_100008678(void *a1)
{
  return swift_metadata_allocation.encode(to:)(a1, *v1, *((void *)v1 + 1), v1[4]);
}

BOOL static swift_metadata_allocation.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2 == a5;
}

BOOL static swift_metadata_allocation.< infix(_:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return a2 < a5;
}

unint64_t sub_1000086B4()
{
  unint64_t result = qword_1000B8868;
  if (!qword_1000B8868)
  {
    type metadata accessor for swift_metadata_allocation(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for swift_metadata_allocation, v1);
    atomic_store(result, (unint64_t *)&qword_1000B8868);
  }

  return result;
}

BOOL sub_1000086FC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) < *(void *)(a2 + 8);
}

BOOL sub_100008710(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8) >= *(void *)(a1 + 8);
}

BOOL sub_100008724(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) >= *(void *)(a2 + 8);
}

BOOL sub_100008738(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8) < *(void *)(a1 + 8);
}

BOOL sub_10000874C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t _s10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t _s10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10000883C + 4 * byte_10009692F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100008870 + 4 * byte_10009692A[v4]))();
}

uint64_t sub_100008870(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100008878(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100008880LL);
  }
  return result;
}

uint64_t sub_10000888C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100008894LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100008898(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000088A0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000088AC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *_s10CodingKeysOMa()
{
  return &_s10CodingKeysON;
}

unint64_t sub_1000088C8()
{
  unint64_t result = qword_1000B8870;
  if (!qword_1000B8870)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096ABC, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000B8870);
  }

  return result;
}

unint64_t sub_100008910()
{
  unint64_t result = qword_1000B8878;
  if (!qword_1000B8878)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000969F4, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000B8878);
  }

  return result;
}

unint64_t sub_100008958()
{
  unint64_t result = qword_1000B8880;
  if (!qword_1000B8880)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096A1C, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000B8880);
  }

  return result;
}

uint64_t CommandConfiguration.commandName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

char *sub_1000089D8(int a1, uint64_t a2, int a3, uint64_t a4)
{
  int v8 = (void *)(a4 + 16);
  swift_beginAccess(a4 + 16, v14, 1LL, 0LL);
  uint64_t v9 = *(char **)(a4 + 16);
  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(v9);
  *(void *)(a4 + 16) = v9;
  if ((result & 1) == 0)
  {
    unint64_t result = sub_100011E00(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
    uint64_t v9 = result;
    *int v8 = result;
  }

  unint64_t v12 = *((void *)v9 + 2);
  unint64_t v11 = *((void *)v9 + 3);
  if (v12 >= v11 >> 1)
  {
    unint64_t result = sub_100011E00((char *)(v11 > 1), v12 + 1, 1, v9);
    uint64_t v9 = result;
    *int v8 = result;
  }

  *((void *)v9 + 2) = v12 + 1;
  uint64_t v13 = &v9[24 * v12];
  *((_DWORD *)v13 + 8) = a1;
  *((void *)v13 + 5) = a2;
  *((_DWORD *)v13 + 12) = a3;
  return result;
}

uint64_t sub_100008ABC(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  BOOL v7 = sub_100026420(a3, a2);
  swift_beginAccess(v6, v12, 33LL, 0LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a4 + 16));
  uint64_t v11 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = 0x8000000000000000LL;
  sub_100025394((uint64_t)v7, a1, isUniquelyReferenced_nonNull_native);
  uint64_t v9 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = v11;
  swift_bridgeObjectRelease(v9);
  return swift_endAccess(v12);
}

uint64_t sub_100008B54(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_reflection_typeRefForMetadata(a2, a1);
  if (result)
  {
    uint64_t result = swift_reflection_copyNameForTypeRef(a2, result, 0LL);
    if (result)
    {
      uint64_t v5 = (void *)result;
      String.init(cString:)();
      uint64_t v7 = v6;
      free(v5);
      v8._object = (void *)0x800000010009BB60LL;
      v8._countAndFlagsBits = 0xD00000000000001DLL;
      LOBYTE(v5) = String.hasPrefix(_:)(v8);
      swift_bridgeObjectRelease(v7);
      uint64_t result = swift_reflection_typeRefForMetadata(a2, a1);
      if (!result) {
        return result;
      }
      uint64_t v9 = result;
      if (swift_reflection_genericArgumentCountOfTypeRef() == 1)
      {
        uint64_t result = swift_reflection_genericArgumentOfTypeRef(v9, 0LL);
        if (result)
        {
          swift_reflection_infoForTypeRef(&v10, a2, result);
          return (_DWORD)v10 == 13;
        }
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100008C50(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = *(void (**)(uint64_t *, uint64_t *))a3;
    uint64_t v4 = *(void *)(a3 + 8);
    uint64_t v5 = a2;
    uint64_t v6 = result;
    swift_retain(v4);
    v3(&v6, &v5);
    return swift_release(v4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100008C98(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(_DWORD *)(result + 16);
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v4 = *(void (**)(int *))a2;
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)result;
    uint64_t v7 = v3;
    int v8 = v2;
    swift_retain(v5);
    v4(&v6);
    return swift_release(v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100008CF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (a3)
    {
      uint64_t v4 = *(void (**)(uint64_t *, uint64_t *, uint64_t *))a4;
      uint64_t v5 = *(void *)(a4 + 8);
      uint64_t v7 = a2;
      uint64_t v8 = result;
      uint64_t v6 = a3;
      swift_retain(v5);
      v4(&v8, &v7, &v6);
      return swift_release(v5);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t sub_100008D4C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000AD338, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100008D94()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100008DB8(uint64_t a1, uint64_t a2, const void *a3)
{
  return sub_100008ABC(a1, a2, a3, v3);
}

uint64_t sub_100008DC0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100008DE4(void *a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(v3 + 16))(*a1, *a2, *a3);
}

void *_s5ErrorVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s5ErrorVwxx(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *_s5ErrorVwca(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *_s5ErrorVwta(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s5ErrorVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s5ErrorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s5ErrorVMa()
{
  return &_s5ErrorVN;
}

uint64_t sub_100008F4C()
{
  uint64_t v0 = sub_100005104(&qword_1000B88E8);
  Flag.wrappedValue.getter(v0, v1, v2, (uint64_t)&v6);
  if ((v6 & 1) != 0) {
    return 1LL;
  }
  Flag.wrappedValue.getter(v0, v3, v4, (uint64_t)&v6);
  if (v6) {
    return 0LL;
  }
  else {
    return 2LL;
  }
}

uint64_t sub_100008FE4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  char v4 = *((_BYTE *)v0 + 16);
  *(void *)&__int128 v30 = *v0;
  *((void *)&v30 + 1) = v3;
  char v31 = v4;
  uint64_t v5 = sub_100005104(&qword_1000B88D8);
  Argument.wrappedValue.getter(v5, v6, v7, (uint64_t)v32);
  uint64_t v8 = v33;
  swift_bridgeObjectRelease(v33);
  if (v8)
  {
    char v11 = *((_BYTE *)v1 + 64);
    __int128 v30 = *((_OWORD *)v1 + 3);
    char v31 = v11;
    uint64_t v12 = sub_100005104(&qword_1000B88E8);
    Flag.wrappedValue.getter(v12, v13, v14, (uint64_t)v32);
    if ((v32[0] & 1) != 0) {
      goto LABEL_7;
    }
  }

  *(void *)&__int128 v30 = v2;
  *((void *)&v30 + 1) = v3;
  char v31 = v4;
  Argument.wrappedValue.getter(v5, v9, v10, (uint64_t)v32);
  uint64_t v15 = v33;
  swift_bridgeObjectRelease(v33);
  if (v15) {
    goto LABEL_5;
  }
  char v16 = *((_BYTE *)v1 + 64);
  __int128 v30 = *((_OWORD *)v1 + 3);
  char v31 = v16;
  uint64_t v17 = sub_100005104(&qword_1000B88E8);
  Flag.wrappedValue.getter(v17, v18, v19, (uint64_t)v32);
  if ((v32[0] & 1) == 0)
  {
LABEL_7:
    unint64_t v27 = sub_10000DEC8();
    uint64_t v28 = swift_allocError(&type metadata for ValidationError, v27, 0LL, 0LL);
    *uint64_t v29 = 0xD000000000000031LL;
    v29[1] = 0x800000010009BC40LL;
    return swift_willThrow(v28);
  }

  else
  {
LABEL_5:
    char v20 = *((_BYTE *)v1 + 64);
    __int128 v30 = *((_OWORD *)v1 + 3);
    char v31 = v20;
    uint64_t v21 = sub_100005104(&qword_1000B88E8);
    uint64_t result = Flag.wrappedValue.getter(v21, v22, v23, (uint64_t)v32);
    if (v32[0] == 1)
    {
      LOBYTE(v30) = v32[0];
      return Option.wrappedValue.setter((uint64_t)&v30, v21, v25, v26);
    }
  }

  return result;
}

BOOL sub_100009180(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000919C()
{
  uint64_t v1 = 0x70726F436B726F66LL;
  if (*v0 != 1) {
    uint64_t v1 = 7105633LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6950724F656D616ELL;
  }
}

uint64_t sub_1000091F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10000DF0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000921C(uint64_t a1)
{
  unint64_t v2 = sub_10000F6C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009244(uint64_t a1)
{
  unint64_t v2 = sub_10000F6C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10000926C@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(_BYTE *)(a1 + 64) = v5;
  __n128 result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000092B8()
{
  return sub_100008FE4();
}

__n128 sub_1000092CC@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_BYTE *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_10000931C()
{
  return 0x636172746B636162LL;
}

uint64_t sub_100009354@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10000E714(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100009378(uint64_t a1)
{
  unint64_t v2 = sub_10000F684();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000093A0(uint64_t a1)
{
  unint64_t v2 = sub_10000F684();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t (*sub_1000093C8@<X0>(uint64_t a1@<X8>))(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v2._object = (void *)0x800000010009BDA0LL;
  v2._countAndFlagsBits = 0xD000000000000026LL;
  ArgumentHelp.init(stringLiteral:)(&v14, v2);
  ArgumentParser::ArgumentHelp v17 = v14;
  uint64_t v3 = static NameSpecification.long.getter();
  char v4 = Flag<A>.init(wrappedValue:name:help:)(0, v3, (uint64_t)&v17);
  uint64_t v6 = v5;
  char v8 = v7;
  v9._countAndFlagsBits = 0xD00000000000002ELL;
  v9._object = (void *)0x800000010009BDD0LL;
  ArgumentHelp.init(stringLiteral:)(&v15, v9);
  ArgumentParser::ArgumentHelp v16 = v15;
  uint64_t v10 = static NameSpecification.long.getter();
  uint64_t result = Flag<A>.init(wrappedValue:name:help:)(0, v10, (uint64_t)&v16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v8 & 1;
  *(void *)(a1 + 24) = result;
  *(void *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13 & 1;
  return result;
}

double sub_1000094D0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }

  return result;
}

uint64_t sub_100009510()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100009540 + 4 * byte_100096BB0[*v0]))( 0x64656C676E616DLL,  0xE700000000000000LL);
}

uint64_t sub_100009540()
{
  return 1852797802LL;
}

uint64_t sub_100009550()
{
  return 0x7972616D6D7573LL;
}

uint64_t sub_100009564()
{
  return 0x694674757074756FLL;
}

uint64_t sub_100009580@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10000EC28(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000095A4(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000095B0(uint64_t a1)
{
  unint64_t v2 = sub_10000F640();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000095D8(uint64_t a1)
{
  unint64_t v2 = sub_10000F640();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100009600@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2 = v5[3];
  a1[2] = v5[2];
  a1[3] = v2;
  a1[4] = v6[0];
  *(_OWORD *)((char *)a1 + 73) = *(_OWORD *)((char *)v6 + 9);
  double result = *(double *)v5;
  __int128 v4 = v5[1];
  *a1 = v5[0];
  a1[1] = v4;
  return result;
}

double sub_10000964C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[3];
    a2[2] = v7[2];
    a2[3] = v5;
    a2[4] = v8[0];
    *(_OWORD *)((char *)a2 + 73) = *(_OWORD *)((char *)v8 + 9);
    double result = *(double *)v7;
    __int128 v6 = v7[1];
    *a2 = v7[0];
    a2[1] = v6;
  }

  return result;
}

unint64_t sub_10000969C()
{
  uint64_t v0 = sub_100005104(&qword_1000B88A0);
  uint64_t v1 = swift_allocObject(v0, 128LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1000970A0;
  unint64_t v2 = sub_100009A98();
  *(void *)(v1 + 32) = &type metadata for DumpConformanceCache;
  *(void *)(v1 + 40) = v2;
  unint64_t v3 = sub_100009ADC();
  *(void *)(v1 + 48) = &type metadata for DumpRawMetadata;
  *(void *)(v1 + 56) = v3;
  unint64_t v4 = sub_100009B20();
  *(void *)(v1 + 64) = &type metadata for DumpGenericMetadata;
  *(void *)(v1 + 72) = v4;
  unint64_t v5 = sub_100009B64();
  *(void *)(v1 + 80) = &type metadata for DumpCacheNodes;
  *(void *)(v1 + 88) = v5;
  unint64_t v6 = sub_100009BA8();
  *(void *)(v1 + 96) = &type metadata for DumpArrays;
  *(void *)(v1 + 104) = v6;
  unint64_t result = sub_100009BEC();
  *(void *)(v1 + 112) = &type metadata for DumpConcurrency;
  *(void *)(v1 + 120) = result;
  qword_1000BA210 = v1;
  return result;
}

double sub_100009744()
{
  if (qword_1000B8648 != -1) {
    swift_once(&qword_1000B8648, sub_10000969C);
  }
  uint64_t v1 = swift_bridgeObjectRetain(qword_1000BA210);
  CommandConfiguration.init(commandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)( 0LL,  0LL,  0xD000000000000018LL,  0x800000010009BB80LL,  0LL,  0LL,  0LL,  0xE000000000000000LL,  (uint64_t)&v2,  0LL,  0xE000000000000000LL,  1,  (__n128)(unint64_t)v1,  0LL,  0LL);
  xmmword_1000BA278 = v8;
  unk_1000BA288 = v9;
  qword_1000BA298 = v10;
  xmmword_1000BA238 = v4;
  unk_1000BA248 = v5;
  xmmword_1000BA258 = v6;
  unk_1000BA268 = v7;
  double result = *(double *)&v3;
  xmmword_1000BA218 = v2;
  unk_1000BA228 = v3;
  return result;
}

uint64_t sub_100009820@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000B8650 != -1) {
    swift_once(&qword_1000B8650, sub_100009744);
  }
  return sub_100005980((uint64_t)&xmmword_1000BA218, a1);
}

void sub_100009870()
{
}

uint64_t sub_100009884(void *a1)
{
  return sub_1000062D8(a1);
}

int main(int argc, const char **argv, const char **envp)
{
  unint64_t v3 = sub_10000994C();
  static ParsableCommand.parseAsRoot(_:)(0LL, v3, (uint64_t)v7);
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  sub_1000099D4((uint64_t)v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  sub_1000062D8(v7);
  return 0;
}

unint64_t sub_10000994C()
{
  unint64_t result = qword_1000B8888;
  if (!qword_1000B8888)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096C34, &type metadata for SwiftInspect);
    atomic_store(result, (unint64_t *)&qword_1000B8888);
  }

  return result;
}

unint64_t sub_100009990()
{
  unint64_t result = qword_1000B8890;
  if (!qword_1000B8890)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096C18, &type metadata for SwiftInspect);
    atomic_store(result, (unint64_t *)&qword_1000B8890);
  }

  return result;
}

uint64_t sub_1000099D4(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

ValueMetadata *type metadata accessor for SwiftInspect()
{
  return &type metadata for SwiftInspect;
}

unint64_t sub_100009A0C(uint64_t a1)
{
  unint64_t result = sub_100009A30();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100009A30()
{
  unint64_t result = qword_1000B8898;
  if (!qword_1000B8898)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096BF0, &type metadata for SwiftInspect);
    atomic_store(result, (unint64_t *)&qword_1000B8898);
  }

  return result;
}

unint64_t sub_100009A74(uint64_t a1)
{
  unint64_t result = sub_100009990();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100009A98()
{
  unint64_t result = qword_1000B88A8;
  if (!qword_1000B88A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000967EC, &type metadata for DumpConformanceCache);
    atomic_store(result, (unint64_t *)&qword_1000B88A8);
  }

  return result;
}

unint64_t sub_100009ADC()
{
  unint64_t result = qword_1000B88B0;
  if (!qword_1000B88B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000965BC, &type metadata for DumpRawMetadata);
    atomic_store(result, (unint64_t *)&qword_1000B88B0);
  }

  return result;
}

unint64_t sub_100009B20()
{
  unint64_t result = qword_1000B88B8;
  if (!qword_1000B88B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097638, &type metadata for DumpGenericMetadata);
    atomic_store(result, (unint64_t *)&qword_1000B88B8);
  }

  return result;
}

unint64_t sub_100009B64()
{
  unint64_t result = qword_1000B88C0;
  if (!qword_1000B88C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097440, &type metadata for DumpCacheNodes);
    atomic_store(result, (unint64_t *)&qword_1000B88C0);
  }

  return result;
}

unint64_t sub_100009BA8()
{
  unint64_t result = qword_1000B88C8;
  if (!qword_1000B88C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097138, &type metadata for DumpArrays);
    atomic_store(result, (unint64_t *)&qword_1000B88C8);
  }

  return result;
}

unint64_t sub_100009BEC()
{
  unint64_t result = qword_1000B88D0;
  if (!qword_1000B88D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097CF8, &type metadata for DumpConcurrency);
    atomic_store(result, (unint64_t *)&qword_1000B88D0);
  }

  return result;
}

uint64_t sub_100009C30( unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, char a6, uint64_t a7)
{
  uint64_t v8 = v7;
  unint64_t v95 = a1;
  unint64_t v96 = a2;
  char v97 = a3 & 1;
  uint64_t v10 = sub_100005104(&qword_1000B88D8);
  Argument.wrappedValue.getter(v10, v11, v12, (uint64_t)&v99);
  char v13 = v100;
  if (!v100)
  {
    ArgumentParser::ArgumentHelp v16 = sub_1000156C0();
    if (v16)
    {
      uint64_t v17 = *((void *)v16 + 2);
      uint64_t v87 = v16;
      if (v17)
      {
        uint64_t v101 = 0LL;
        uint64_t v18 = 0LL;
        __int128 v91 = v16 + 32;
        uint64_t v88 = v17;
        char v90 = a6;
        do
        {
          mach_port_t v19 = *(_DWORD *)&v91[4 * v18++];
          unint64_t v95 = 91LL;
          unint64_t v96 = 0xE100000000000000LL;
          uint64_t v99 = v101;
          v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          object = v20._object;
          String.append(_:)(v20);
          swift_bridgeObjectRelease(object);
          v22._countAndFlagsBits = 47LL;
          v22._object = (void *)0xE100000000000000LL;
          String.append(_:)(v22);
          uint64_t v99 = v18;
          v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          uint64_t v24 = v23._object;
          String.append(_:)(v23);
          swift_bridgeObjectRelease(v24);
          v25._countAndFlagsBits = 47LL;
          v25._object = (void *)0xE100000000000000LL;
          String.append(_:)(v25);
          uint64_t v99 = v17;
          v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          unint64_t v27 = v26._object;
          String.append(_:)(v26);
          swift_bridgeObjectRelease(v27);
          v28._countAndFlagsBits = 93LL;
          v28._object = (void *)0xE100000000000000LL;
          String.append(_:)(v28);
          unint64_t v30 = v95;
          unint64_t v29 = v96;
          unint64_t v95 = a4;
          unint64_t v96 = a5;
          char v97 = a6 & 1;
          uint64_t v31 = sub_100005104(&qword_1000B88E8);
          Flag.wrappedValue.getter(v31, v32, v33, (uint64_t)&v99);
          char v34 = v99;
          uint64_t v35 = type metadata accessor for DarwinRemoteProcess();
          swift_allocObject(v35, 104LL, 7LL);
          uint64_t v36 = sub_100010EEC(v19, v34);
          if (v36)
          {
            uint64_t v37 = (uint64_t)v36;
            uint64_t v92 = v8;
            uint64_t v38 = sub_100005104(&qword_1000B8758);
            uint64_t v39 = swift_allocObject(v38, 96LL, 7LL);
            *(_OWORD *)(v39 + 16) = xmmword_1000970B0;
            *(void *)(v39 + 56) = &type metadata for String;
            *(void *)(v39 + 32) = v30;
            *(void *)(v39 + 40) = v29;
            uint64_t v99 = 0LL;
            uint64_t v100 = (void *)0xE000000000000000LL;
            v40._countAndFlagsBits = sub_100010AF4();
            uint64_t v41 = v40._object;
            uint64_t v42 = &v99;
            String.append(_:)(v40);
            swift_bridgeObjectRelease(v41);
            v43._countAndFlagsBits = 40LL;
            v43._object = (void *)0xE100000000000000LL;
            String.append(_:)(v43);
            swift_getObjectType(v37);
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, &off_1000B8B78);
            *(_DWORD *)sub_10000B40C(&v95) = *(_DWORD *)(v37 + 20);
            _print_unlocked<A, B>(_:_:)( &v95,  &v99,  (char *)&type metadata for Any + 8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            sub_1000062D8(&v95);
            v44._countAndFlagsBits = 41LL;
            v44._object = (void *)0xE100000000000000LL;
            String.append(_:)(v44);
            uint64_t v45 = v99;
            unint64_t v46 = (unint64_t)v100;
            *(void *)(v39 + 88) = &type metadata for String;
            *(void *)(v39 + 64) = v45;
            *(void *)(v39 + 72) = v46;
            if (qword_1000B8660 != -1) {
              swift_once(&qword_1000B8660, sub_1000134EC);
            }
            swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
            unint64_t v47 = sub_10000B3C8();
            print<A>(_:separator:terminator:to:)( v39,  32LL,  0xE100000000000000LL,  0LL,  0xE000000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v47);
            swift_endAccess(&v95);
            swift_bridgeObjectRelease(v39);
            sub_10000420C(v37, (uint64_t)&off_1000B8B78, a7);
            uint64_t v8 = v92;
            if (v92)
            {
              uint64_t v48 = swift_allocObject(v38, 64LL, 7LL);
              *(_OWORD *)(v48 + 16) = xmmword_100096510;
              unint64_t v95 = 0LL;
              unint64_t v96 = 0xE000000000000000LL;
              v49._countAndFlagsBits = 2108704LL;
              v49._object = (void *)0xE300000000000000LL;
              String.append(_:)(v49);
              uint64_t v99 = v92;
              uint64_t v50 = sub_100005104(&qword_1000B88F0);
              _print_unlocked<A, B>(_:_:)( &v99,  &v95,  v50,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
              unint64_t v51 = v95;
              unint64_t v52 = v96;
              *(void *)(v48 + 56) = &type metadata for String;
              *(void *)(v48 + 32) = v51;
              *(void *)(v48 + 40) = v52;
              swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
              print<A>(_:separator:terminator:to:)( v48,  32LL,  0xE100000000000000LL,  0LL,  0xE000000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v47);
              swift_endAccess(&v95);
              swift_bridgeObjectRelease(v48);
              swift_errorRelease(v92);
              uint64_t v8 = 0LL;
              a6 = v90;
            }

            else
            {
              BOOL v60 = __OFADD__(v101++, 1LL);
              a6 = v90;
              if (v60)
              {
                __break(1u);
LABEL_38:
                swift_once(&qword_1000B8660, sub_1000134EC);
LABEL_32:
                swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
                unint64_t v82 = sub_10000B3C8();
                print<A>(_:separator:terminator:to:)( v42,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v82);
                swift_endAccess(&v95);
                uint64_t v80 = (uint64_t)v42;
                return swift_bridgeObjectRelease(v80);
              }
            }

            swift_release_n(v37, 2LL);
            uint64_t v17 = v88;
          }

          else
          {
            uint64_t v53 = sub_100005104(&qword_1000B8758);
            uint64_t v54 = swift_allocObject(v53, 96LL, 7LL);
            *(_OWORD *)(v54 + 16) = xmmword_1000970B0;
            *(void *)(v54 + 56) = &type metadata for String;
            *(void *)(v54 + 32) = v30;
            *(void *)(v54 + 40) = v29;
            unint64_t v95 = 0LL;
            unint64_t v96 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(47LL);
            swift_bridgeObjectRelease(v96);
            unint64_t v95 = 0xD00000000000002DLL;
            unint64_t v96 = 0x800000010009BBC0LL;
            LODWORD(v99) = v19;
            v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
            uint64_t v56 = v55._object;
            String.append(_:)(v55);
            swift_bridgeObjectRelease(v56);
            unint64_t v57 = v95;
            unint64_t v58 = v96;
            *(void *)(v54 + 88) = &type metadata for String;
            *(void *)(v54 + 64) = v57;
            *(void *)(v54 + 72) = v58;
            if (qword_1000B8660 != -1) {
              swift_once(&qword_1000B8660, sub_1000134EC);
            }
            swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
            unint64_t v59 = sub_10000B3C8();
            print<A>(_:separator:terminator:to:)( v54,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v59);
            swift_endAccess(&v95);
            swift_bridgeObjectRelease(v54);
            a6 = v90;
          }

          uint64_t v61 = sub_100005104(&qword_1000B8758);
          uint64_t v62 = swift_allocObject(v61, 64LL, 7LL);
          *(_OWORD *)(v62 + 16) = xmmword_100096510;
          *(void *)(v62 + 56) = &type metadata for String;
          *(void *)(v62 + 32) = 1261460251LL;
          *(void *)(v62 + 40) = 0xE400000000000000LL;
          if (qword_1000B8660 != -1) {
            swift_once(&qword_1000B8660, sub_1000134EC);
          }
          swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
          unint64_t v63 = sub_10000B3C8();
          print<A>(_:separator:terminator:to:)( v62,  32LL,  0xE100000000000000LL,  13LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v63);
          swift_endAccess(&v95);
          swift_bridgeObjectRelease(v62);
        }

        while (v17 != v18);
      }

      swift_bridgeObjectRelease(v87);
      uint64_t v74 = sub_100005104(&qword_1000B8758);
      uint64_t v42 = (uint64_t *)swift_allocObject(v74, 64LL, 7LL);
      *((_OWORD *)v42 + 1) = xmmword_100096510;
      v42[7] = (uint64_t)&type metadata for String;
      v42[4] = 0LL;
      v42[5] = 0xE000000000000000LL;
    }

    else
    {
      uint64_t v81 = sub_100005104(&qword_1000B8758);
      uint64_t v42 = (uint64_t *)swift_allocObject(v81, 64LL, 7LL);
      *((_OWORD *)v42 + 1) = xmmword_100096510;
      v42[7] = (uint64_t)&type metadata for String;
      v42[4] = 0xD00000000000001FLL;
      v42[5] = 0x800000010009BBA0LL;
    }

    if (qword_1000B8660 != -1) {
      goto LABEL_38;
    }
    goto LABEL_32;
  }

  uint64_t v14 = v99;
  if ((sub_1000148D8(v99, (unint64_t)v100) & 1) != 0)
  {
    mach_port_t v15 = getpid();
  }

  else
  {
    if (qword_1000B8688 != -1) {
      swift_once(&qword_1000B8688, sub_10001DD44);
    }
    uint64_t v64 = (uint64_t (*)(void))off_1000BA440;
    NSString v65 = String._bridgeToObjectiveC()();
    mach_port_t v15 = v64();

    if (!v15)
    {
      uint64_t v83 = sub_100005104(&qword_1000B8758);
      uint64_t v84 = swift_allocObject(v83, 64LL, 7LL);
      *(_OWORD *)(v84 + 16) = xmmword_100096510;
      _StringGuts.grow(_:)(28LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      unint64_t v95 = 0xD00000000000001ALL;
      unint64_t v96 = 0x800000010009BC20LL;
      v85._countAndFlagsBits = v14;
      v85._object = v13;
      String.append(_:)(v85);
      swift_bridgeObjectRelease(v13);
      *(void *)(v84 + 56) = &type metadata for String;
      *(void *)(v84 + 32) = 0xD00000000000001ALL;
      *(void *)(v84 + 40) = 0x800000010009BC20LL;
      if (qword_1000B8660 != -1) {
        swift_once(&qword_1000B8660, sub_1000134EC);
      }
      swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
      unint64_t v86 = sub_10000B3C8();
      print<A>(_:separator:terminator:to:)( v84,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v86);
      swift_endAccess(&v95);
      uint64_t v80 = v84;
      return swift_bridgeObjectRelease(v80);
    }
  }

  swift_bridgeObjectRelease(v13);
  unint64_t v95 = a4;
  unint64_t v96 = a5;
  char v97 = a6 & 1;
  uint64_t v66 = sub_100005104(&qword_1000B88E8);
  Flag.wrappedValue.getter(v66, v67, v68, (uint64_t)&v99);
  char v69 = v99;
  uint64_t v70 = type metadata accessor for DarwinRemoteProcess();
  swift_allocObject(v70, 104LL, 7LL);
  uint64_t v71 = sub_100010EEC(v15, v69);
  if (!v71)
  {
    uint64_t v75 = sub_100005104(&qword_1000B8758);
    uint64_t v76 = swift_allocObject(v75, 64LL, 7LL);
    *(_OWORD *)(v76 + 16) = xmmword_100096510;
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v95 = 0xD00000000000002ALL;
    unint64_t v96 = 0x800000010009BBF0LL;
    LODWORD(v99) = v15;
    v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    unsigned __int8 v78 = v77._object;
    String.append(_:)(v77);
    swift_bridgeObjectRelease(v78);
    *(void *)(v76 + 56) = &type metadata for String;
    *(void *)(v76 + 32) = 0xD00000000000002ALL;
    *(void *)(v76 + 40) = 0x800000010009BBF0LL;
    if (qword_1000B8660 != -1) {
      swift_once(&qword_1000B8660, sub_1000134EC);
    }
    swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
    unint64_t v79 = sub_10000B3C8();
    print<A>(_:separator:terminator:to:)( v76,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v79);
    swift_endAccess(&v95);
    uint64_t v80 = v76;
    return swift_bridgeObjectRelease(v80);
  }

  uint64_t v72 = v71;
  sub_10000420C((uint64_t)v71, (uint64_t)&off_1000B8B78, a7);
  return swift_release(v72);
}

char *sub_10000A730( unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, char a6)
{
  unint64_t v109 = a1;
  unint64_t v110 = a2;
  char v111 = a3 & 1;
  uint64_t v6 = sub_100005104(&qword_1000B88D8);
  Argument.wrappedValue.getter(v6, v7, v8, (uint64_t)&v113);
  uint64_t v9 = v114;
  if (v114)
  {
    uint64_t v10 = v113;
    if ((sub_1000148D8(v113, (unint64_t)v114) & 1) != 0)
    {
      mach_port_t v11 = getpid();
    }

    else
    {
      if (qword_1000B8688 != -1) {
        swift_once(&qword_1000B8688, sub_10001DD44);
      }
      uint64_t v70 = (uint64_t (*)(void))off_1000BA440;
      NSString v71 = String._bridgeToObjectiveC()();
      mach_port_t v11 = v70();

      if (!v11)
      {
        uint64_t v98 = sub_100005104(&qword_1000B8758);
        uint64_t v99 = swift_allocObject(v98, 64LL, 7LL);
        *(_OWORD *)(v99 + 16) = xmmword_100096510;
        _StringGuts.grow(_:)(28LL);
        swift_bridgeObjectRelease(0xE000000000000000LL);
        unint64_t v109 = 0xD00000000000001ALL;
        unint64_t v110 = 0x800000010009BC20LL;
        v100._countAndFlagsBits = v10;
        v100._object = v9;
        String.append(_:)(v100);
        swift_bridgeObjectRelease(v9);
        *(void *)(v99 + 56) = &type metadata for String;
        *(void *)(v99 + 32) = 0xD00000000000001ALL;
        *(void *)(v99 + 40) = 0x800000010009BC20LL;
        if (qword_1000B8660 != -1) {
          swift_once(&qword_1000B8660, sub_1000134EC);
        }
        swift_beginAccess(&qword_1000BA328, &v109, 33LL, 0LL);
        unint64_t v101 = sub_10000B3C8();
        print<A>(_:separator:terminator:to:)( v99,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v101);
        swift_endAccess(&v109);
        uint64_t v97 = v99;
        return (char *)swift_bridgeObjectRelease(v97);
      }
    }

    swift_bridgeObjectRelease(v9);
    unint64_t v109 = a4;
    unint64_t v110 = a5;
    char v111 = a6 & 1;
    uint64_t v72 = sub_100005104(&qword_1000B88E8);
    Flag.wrappedValue.getter(v72, v73, v74, (uint64_t)&v113);
    char v75 = v113;
    uint64_t v76 = type metadata accessor for DarwinRemoteProcess();
    swift_allocObject(v76, 104LL, 7LL);
    unint64_t result = sub_100010EEC(v11, v75);
    if (result)
    {
      unsigned __int8 v78 = result;
      uint64_t v79 = *((void *)result + 5);
      if (v79)
      {
        uint64_t v80 = swift_allocObject(&unk_1000AE4D8, 32LL, 7LL);
        *(void *)(v80 + 16) = v78;
        *(void *)(v80 + 24) = &off_1000B8B78;
        uint64_t v81 = swift_allocObject(&unk_1000AE500, 32LL, 7LL);
        *(void *)(v81 + 16) = sub_10000FC9C;
        *(void *)(v81 + 24) = v80;
        unint64_t v109 = (unint64_t)sub_10000FC94;
        unint64_t v110 = v81;
        swift_retain(v80);
        swift_retain(v78);
        uint64_t v82 = swift_reflection_iterateConformanceCache(v79, sub_100008C50, &v109);
        swift_release(v110);
        if (v82)
        {
          uint64_t v83 = String.init(cString:)(v82);
          uint64_t v85 = v84;
          unint64_t v86 = sub_100005888();
          uint64_t v87 = swift_allocError(&_s5ErrorVN, v86, 0LL, 0LL);
          *uint64_t v88 = v83;
          v88[1] = v85;
          swift_willThrow(v87);
        }

        swift_release(v78);
        return (char *)swift_release(v80);
      }

      else
      {
        __break(1u);
      }

      return result;
    }

    uint64_t v92 = sub_100005104(&qword_1000B8758);
    uint64_t v42 = (uint64_t *)swift_allocObject(v92, 64LL, 7LL);
    *((_OWORD *)v42 + 1) = xmmword_100096510;
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v109 = 0xD00000000000002ALL;
    unint64_t v110 = 0x800000010009BBF0LL;
    LODWORD(v113) = v11;
    v93._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    object = v93._object;
    String.append(_:)(v93);
    swift_bridgeObjectRelease(object);
    v42[7] = (uint64_t)&type metadata for String;
    v42[4] = 0xD00000000000002ALL;
    v42[5] = 0x800000010009BBF0LL;
LABEL_35:
    if (qword_1000B8660 != -1) {
      goto LABEL_42;
    }
    goto LABEL_36;
  }

  uint64_t v12 = sub_1000156C0();
  if (!v12)
  {
    uint64_t v95 = sub_100005104(&qword_1000B8758);
    uint64_t v42 = (uint64_t *)swift_allocObject(v95, 64LL, 7LL);
    *((_OWORD *)v42 + 1) = xmmword_100096510;
    v42[7] = (uint64_t)&type metadata for String;
    v42[4] = 0xD00000000000001FLL;
    v42[5] = 0x800000010009BBA0LL;
    goto LABEL_35;
  }

  uint64_t v13 = *((void *)v12 + 2);
  uint64_t v102 = v12;
  if (!v13)
  {
LABEL_30:
    swift_bridgeObjectRelease(v102);
    uint64_t v89 = sub_100005104(&qword_1000B8758);
    uint64_t v90 = swift_allocObject(v89, 64LL, 7LL);
    *(_OWORD *)(v90 + 16) = xmmword_100096510;
    *(void *)(v90 + 56) = &type metadata for String;
    *(void *)(v90 + 32) = 0LL;
    *(void *)(v90 + 40) = 0xE000000000000000LL;
    if (qword_1000B8660 != -1) {
      swift_once(&qword_1000B8660, sub_1000134EC);
    }
    swift_beginAccess(&qword_1000BA328, &v109, 33LL, 0LL);
    unint64_t v91 = sub_10000B3C8();
    print<A>(_:separator:terminator:to:)( v90,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v91);
    swift_endAccess(&v109);
    return (char *)swift_bridgeObjectRelease(v90);
  }

  uint64_t v108 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v104 = v12 + 32;
  uint64_t v103 = *((void *)v12 + 2);
  while (1)
  {
    mach_port_t v15 = *(_DWORD *)&v104[4 * v14++];
    unint64_t v109 = 91LL;
    unint64_t v110 = 0xE100000000000000LL;
    uint64_t v113 = v108;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v17 = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v17);
    v18._countAndFlagsBits = 47LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    uint64_t v113 = v14;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    Swift::String v20 = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v20);
    v21._countAndFlagsBits = 47LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    uint64_t v113 = v13;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    Swift::String v23 = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v23);
    v24._countAndFlagsBits = 93LL;
    v24._object = (void *)0xE100000000000000LL;
    String.append(_:)(v24);
    unint64_t v26 = v109;
    unint64_t v25 = v110;
    unint64_t v109 = a4;
    unint64_t v110 = a5;
    char v111 = a6 & 1;
    uint64_t v27 = sub_100005104(&qword_1000B88E8);
    Flag.wrappedValue.getter(v27, v28, v29, (uint64_t)&v113);
    char v30 = v113;
    uint64_t v31 = type metadata accessor for DarwinRemoteProcess();
    swift_allocObject(v31, 104LL, 7LL);
    uint64_t v32 = sub_100010EEC(v15, v30);
    if (!v32)
    {
      uint64_t v59 = sub_100005104(&qword_1000B8758);
      uint64_t v60 = swift_allocObject(v59, 96LL, 7LL);
      *(_OWORD *)(v60 + 16) = xmmword_1000970B0;
      *(void *)(v60 + 56) = &type metadata for String;
      *(void *)(v60 + 32) = v26;
      *(void *)(v60 + 40) = v25;
      unint64_t v109 = 0LL;
      unint64_t v110 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(47LL);
      swift_bridgeObjectRelease(v110);
      unint64_t v109 = 0xD00000000000002DLL;
      unint64_t v110 = 0x800000010009BBC0LL;
      LODWORD(v113) = v15;
      v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
      uint64_t v62 = v61._object;
      String.append(_:)(v61);
      swift_bridgeObjectRelease(v62);
      unint64_t v63 = v109;
      unint64_t v64 = v110;
      *(void *)(v60 + 88) = &type metadata for String;
      *(void *)(v60 + 64) = v63;
      *(void *)(v60 + 72) = v64;
      if (qword_1000B8660 != -1) {
        swift_once(&qword_1000B8660, sub_1000134EC);
      }
      swift_beginAccess(&qword_1000BA328, &v109, 33LL, 0LL);
      unint64_t v65 = sub_10000B3C8();
      print<A>(_:separator:terminator:to:)( v60,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v65);
      swift_endAccess(&v109);
      swift_bridgeObjectRelease(v60);
      goto LABEL_18;
    }

    uint64_t v33 = v32;
    uint64_t v34 = sub_100005104(&qword_1000B8758);
    uint64_t v35 = swift_allocObject(v34, 96LL, 7LL);
    *(_OWORD *)(v35 + 16) = xmmword_1000970B0;
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 32) = v26;
    *(void *)(v35 + 40) = v25;
    uint64_t v113 = 0LL;
    uint64_t v114 = (void *)0xE000000000000000LL;
    v36._countAndFlagsBits = sub_100010AF4();
    uint64_t v37 = v36._object;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v37);
    v38._countAndFlagsBits = 40LL;
    v38._object = (void *)0xE100000000000000LL;
    String.append(_:)(v38);
    swift_getObjectType(v33);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, &off_1000B8B78);
    *(_DWORD *)sub_10000B40C(&v109) = *((_DWORD *)v33 + 5);
    _print_unlocked<A, B>(_:_:)( &v109,  &v113,  (char *)&type metadata for Any + 8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    sub_1000062D8(&v109);
    v39._countAndFlagsBits = 41LL;
    v39._object = (void *)0xE100000000000000LL;
    String.append(_:)(v39);
    uint64_t v40 = v113;
    unint64_t v41 = (unint64_t)v114;
    *(void *)(v35 + 88) = &type metadata for String;
    *(void *)(v35 + 64) = v40;
    *(void *)(v35 + 72) = v41;
    if (qword_1000B8660 != -1) {
      swift_once(&qword_1000B8660, sub_1000134EC);
    }
    uint64_t v42 = &qword_1000BA328;
    swift_beginAccess(&qword_1000BA328, &v109, 33LL, 0LL);
    unint64_t v43 = sub_10000B3C8();
    print<A>(_:separator:terminator:to:)( v35,  32LL,  0xE100000000000000LL,  0LL,  0xE000000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v43);
    swift_endAccess(&v109);
    swift_bridgeObjectRelease(v35);
    uint64_t v44 = *((void *)v33 + 5);
    if (!v44) {
      __break(1u);
    }
    uint64_t v45 = swift_allocObject(&unk_1000AE488, 32LL, 7LL);
    *(void *)(v45 + 16) = v33;
    *(void *)(v45 + 24) = &off_1000B8B78;
    uint64_t v46 = swift_allocObject(&unk_1000AE4B0, 32LL, 7LL);
    *(void *)(v46 + 16) = sub_10000B46C;
    *(void *)(v46 + 24) = v45;
    unint64_t v109 = (unint64_t)sub_10000B498;
    unint64_t v110 = v46;
    swift_retain(v45);
    swift_retain(v33);
    uint64_t v47 = swift_reflection_iterateConformanceCache(v44, sub_100008C50, &v109);
    swift_release(v110);
    if (!v47) {
      break;
    }
    uint64_t v48 = String.init(cString:)(v47);
    uint64_t v50 = v49;
    unint64_t v51 = sub_100005888();
    uint64_t v52 = swift_allocError(&_s5ErrorVN, v51, 0LL, 0LL);
    *uint64_t v53 = v48;
    v53[1] = v50;
    swift_willThrow(v52);
    swift_release(v45);
    uint64_t v54 = swift_allocObject(v34, 64LL, 7LL);
    *(_OWORD *)(v54 + 16) = xmmword_100096510;
    unint64_t v109 = 0LL;
    unint64_t v110 = 0xE000000000000000LL;
    v55._countAndFlagsBits = 2108704LL;
    v55._object = (void *)0xE300000000000000LL;
    String.append(_:)(v55);
    uint64_t v113 = v52;
    uint64_t v56 = sub_100005104(&qword_1000B88F0);
    _print_unlocked<A, B>(_:_:)( &v113,  &v109,  v56,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    unint64_t v57 = v109;
    unint64_t v58 = v110;
    *(void *)(v54 + 56) = &type metadata for String;
    *(void *)(v54 + 32) = v57;
    *(void *)(v54 + 40) = v58;
    swift_beginAccess(&qword_1000BA328, &v109, 33LL, 0LL);
    print<A>(_:separator:terminator:to:)( v54,  32LL,  0xE100000000000000LL,  0LL,  0xE000000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v43);
    swift_endAccess(&v109);
    swift_bridgeObjectRelease(v54);
    swift_errorRelease(v52);
LABEL_17:
    swift_release_n(v33, 2LL);
    uint64_t v13 = v103;
LABEL_18:
    uint64_t v67 = sub_100005104(&qword_1000B8758);
    uint64_t v68 = swift_allocObject(v67, 64LL, 7LL);
    *(_OWORD *)(v68 + 16) = xmmword_100096510;
    *(void *)(v68 + 56) = &type metadata for String;
    *(void *)(v68 + 32) = 1261460251LL;
    *(void *)(v68 + 40) = 0xE400000000000000LL;
    if (qword_1000B8660 != -1) {
      swift_once(&qword_1000B8660, sub_1000134EC);
    }
    swift_beginAccess(&qword_1000BA328, &v109, 33LL, 0LL);
    unint64_t v69 = sub_10000B3C8();
    print<A>(_:separator:terminator:to:)( v68,  32LL,  0xE100000000000000LL,  13LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v69);
    swift_endAccess(&v109);
    swift_bridgeObjectRelease(v68);
    if (v13 == v14) {
      goto LABEL_30;
    }
  }

  swift_release(v45);
  if (!__OFADD__(v108++, 1LL)) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_42:
  swift_once(&qword_1000B8660, sub_1000134EC);
LABEL_36:
  swift_beginAccess(&qword_1000BA328, &v109, 33LL, 0LL);
  unint64_t v96 = sub_10000B3C8();
  print<A>(_:separator:terminator:to:)( v42,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v96);
  swift_endAccess(&v109);
  uint64_t v97 = (uint64_t)v42;
  return (char *)swift_bridgeObjectRelease(v97);
}

unint64_t sub_10000B3C8()
{
  unint64_t result = qword_1000B88E0;
  if (!qword_1000B88E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097394, &type metadata for Std.File);
    atomic_store(result, (unint64_t *)&qword_1000B88E0);
  }

  return result;
}

void *sub_10000B40C(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_10000B448()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000B46C(uint64_t a1, uint64_t a2)
{
  return sub_1000070E4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10000B474()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000B498(void *a1, void *a2)
{
  return sub_10001E454(a1, a2, *(uint64_t (**)(void, void))(v2 + 16));
}

uint64_t sub_10000B4A0( unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, char a6)
{
  return sub_10000B4D8(a1, a2, a3, a4, a5, a6, (void (*)(char *, _UNKNOWN **))sub_10000FD68);
}

uint64_t sub_10000B4BC( unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, char a6)
{
  return sub_10000B4D8(a1, a2, a3, a4, a5, a6, (void (*)(char *, _UNKNOWN **))sub_100013664);
}

uint64_t sub_10000B4D8( unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, char a6, void (*a7)(char *, _UNKNOWN **))
{
  uint64_t v8 = v7;
  unint64_t v95 = a1;
  unint64_t v96 = a2;
  char v97 = a3 & 1;
  uint64_t v10 = sub_100005104(&qword_1000B88D8);
  Argument.wrappedValue.getter(v10, v11, v12, (uint64_t)&v99);
  uint64_t v13 = v100;
  if (!v100)
  {
    Swift::String v16 = sub_1000156C0();
    if (v16)
    {
      uint64_t v17 = *((void *)v16 + 2);
      uint64_t v87 = v16;
      if (v17)
      {
        uint64_t v101 = 0LL;
        uint64_t v18 = 0LL;
        unint64_t v91 = v16 + 32;
        uint64_t v88 = v17;
        char v90 = a6;
        do
        {
          mach_port_t v19 = *(_DWORD *)&v91[4 * v18++];
          unint64_t v95 = 91LL;
          unint64_t v96 = 0xE100000000000000LL;
          uint64_t v99 = v101;
          v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          object = v20._object;
          String.append(_:)(v20);
          swift_bridgeObjectRelease(object);
          v22._countAndFlagsBits = 47LL;
          v22._object = (void *)0xE100000000000000LL;
          String.append(_:)(v22);
          uint64_t v99 = v18;
          v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          Swift::String v24 = v23._object;
          String.append(_:)(v23);
          swift_bridgeObjectRelease(v24);
          v25._countAndFlagsBits = 47LL;
          v25._object = (void *)0xE100000000000000LL;
          String.append(_:)(v25);
          uint64_t v99 = v17;
          v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          uint64_t v27 = v26._object;
          String.append(_:)(v26);
          swift_bridgeObjectRelease(v27);
          v28._countAndFlagsBits = 93LL;
          v28._object = (void *)0xE100000000000000LL;
          String.append(_:)(v28);
          unint64_t v30 = v95;
          unint64_t v29 = v96;
          unint64_t v95 = a4;
          unint64_t v96 = a5;
          char v97 = a6 & 1;
          uint64_t v31 = sub_100005104(&qword_1000B88E8);
          Flag.wrappedValue.getter(v31, v32, v33, (uint64_t)&v99);
          char v34 = v99;
          uint64_t v35 = type metadata accessor for DarwinRemoteProcess();
          swift_allocObject(v35, 104LL, 7LL);
          Swift::String v36 = sub_100010EEC(v19, v34);
          if (v36)
          {
            uint64_t v37 = v36;
            uint64_t v92 = v8;
            uint64_t v38 = sub_100005104(&qword_1000B8758);
            uint64_t v39 = swift_allocObject(v38, 96LL, 7LL);
            *(_OWORD *)(v39 + 16) = xmmword_1000970B0;
            *(void *)(v39 + 56) = &type metadata for String;
            *(void *)(v39 + 32) = v30;
            *(void *)(v39 + 40) = v29;
            uint64_t v99 = 0LL;
            Swift::String v100 = (void *)0xE000000000000000LL;
            v40._countAndFlagsBits = sub_100010AF4();
            unint64_t v41 = v40._object;
            uint64_t v42 = &v99;
            String.append(_:)(v40);
            swift_bridgeObjectRelease(v41);
            v43._countAndFlagsBits = 40LL;
            v43._object = (void *)0xE100000000000000LL;
            String.append(_:)(v43);
            swift_getObjectType(v37);
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, &off_1000B8B78);
            *(_DWORD *)sub_10000B40C(&v95) = *((_DWORD *)v37 + 5);
            _print_unlocked<A, B>(_:_:)( &v95,  &v99,  (char *)&type metadata for Any + 8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            sub_1000062D8(&v95);
            v44._countAndFlagsBits = 41LL;
            v44._object = (void *)0xE100000000000000LL;
            String.append(_:)(v44);
            uint64_t v45 = v99;
            unint64_t v46 = (unint64_t)v100;
            *(void *)(v39 + 88) = &type metadata for String;
            *(void *)(v39 + 64) = v45;
            *(void *)(v39 + 72) = v46;
            if (qword_1000B8660 != -1) {
              swift_once(&qword_1000B8660, sub_1000134EC);
            }
            swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
            unint64_t v47 = sub_10000B3C8();
            print<A>(_:separator:terminator:to:)( v39,  32LL,  0xE100000000000000LL,  0LL,  0xE000000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v47);
            swift_endAccess(&v95);
            swift_bridgeObjectRelease(v39);
            a7(v37, &off_1000B8B78);
            uint64_t v8 = v92;
            if (v92)
            {
              uint64_t v48 = swift_allocObject(v38, 64LL, 7LL);
              *(_OWORD *)(v48 + 16) = xmmword_100096510;
              unint64_t v95 = 0LL;
              unint64_t v96 = 0xE000000000000000LL;
              v49._countAndFlagsBits = 2108704LL;
              v49._object = (void *)0xE300000000000000LL;
              String.append(_:)(v49);
              uint64_t v99 = v92;
              uint64_t v50 = sub_100005104(&qword_1000B88F0);
              _print_unlocked<A, B>(_:_:)( &v99,  &v95,  v50,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
              unint64_t v51 = v95;
              unint64_t v52 = v96;
              *(void *)(v48 + 56) = &type metadata for String;
              *(void *)(v48 + 32) = v51;
              *(void *)(v48 + 40) = v52;
              swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
              print<A>(_:separator:terminator:to:)( v48,  32LL,  0xE100000000000000LL,  0LL,  0xE000000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v47);
              swift_endAccess(&v95);
              swift_bridgeObjectRelease(v48);
              swift_errorRelease(v92);
              uint64_t v8 = 0LL;
              a6 = v90;
            }

            else
            {
              BOOL v60 = __OFADD__(v101++, 1LL);
              a6 = v90;
              if (v60)
              {
                __break(1u);
LABEL_38:
                swift_once(&qword_1000B8660, sub_1000134EC);
LABEL_32:
                swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
                unint64_t v82 = sub_10000B3C8();
                print<A>(_:separator:terminator:to:)( v42,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v82);
                swift_endAccess(&v95);
                uint64_t v80 = (uint64_t)v42;
                return swift_bridgeObjectRelease(v80);
              }
            }

            swift_release_n(v37, 2LL);
            uint64_t v17 = v88;
          }

          else
          {
            uint64_t v53 = sub_100005104(&qword_1000B8758);
            uint64_t v54 = swift_allocObject(v53, 96LL, 7LL);
            *(_OWORD *)(v54 + 16) = xmmword_1000970B0;
            *(void *)(v54 + 56) = &type metadata for String;
            *(void *)(v54 + 32) = v30;
            *(void *)(v54 + 40) = v29;
            unint64_t v95 = 0LL;
            unint64_t v96 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(47LL);
            swift_bridgeObjectRelease(v96);
            unint64_t v95 = 0xD00000000000002DLL;
            unint64_t v96 = 0x800000010009BBC0LL;
            LODWORD(v99) = v19;
            v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
            uint64_t v56 = v55._object;
            String.append(_:)(v55);
            swift_bridgeObjectRelease(v56);
            unint64_t v57 = v95;
            unint64_t v58 = v96;
            *(void *)(v54 + 88) = &type metadata for String;
            *(void *)(v54 + 64) = v57;
            *(void *)(v54 + 72) = v58;
            if (qword_1000B8660 != -1) {
              swift_once(&qword_1000B8660, sub_1000134EC);
            }
            swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
            unint64_t v59 = sub_10000B3C8();
            print<A>(_:separator:terminator:to:)( v54,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v59);
            swift_endAccess(&v95);
            swift_bridgeObjectRelease(v54);
            a6 = v90;
          }

          uint64_t v61 = sub_100005104(&qword_1000B8758);
          uint64_t v62 = swift_allocObject(v61, 64LL, 7LL);
          *(_OWORD *)(v62 + 16) = xmmword_100096510;
          *(void *)(v62 + 56) = &type metadata for String;
          *(void *)(v62 + 32) = 1261460251LL;
          *(void *)(v62 + 40) = 0xE400000000000000LL;
          if (qword_1000B8660 != -1) {
            swift_once(&qword_1000B8660, sub_1000134EC);
          }
          swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
          unint64_t v63 = sub_10000B3C8();
          print<A>(_:separator:terminator:to:)( v62,  32LL,  0xE100000000000000LL,  13LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v63);
          swift_endAccess(&v95);
          swift_bridgeObjectRelease(v62);
        }

        while (v17 != v18);
      }

      swift_bridgeObjectRelease(v87);
      uint64_t v74 = sub_100005104(&qword_1000B8758);
      uint64_t v42 = (uint64_t *)swift_allocObject(v74, 64LL, 7LL);
      *((_OWORD *)v42 + 1) = xmmword_100096510;
      v42[7] = (uint64_t)&type metadata for String;
      v42[4] = 0LL;
      v42[5] = 0xE000000000000000LL;
    }

    else
    {
      uint64_t v81 = sub_100005104(&qword_1000B8758);
      uint64_t v42 = (uint64_t *)swift_allocObject(v81, 64LL, 7LL);
      *((_OWORD *)v42 + 1) = xmmword_100096510;
      v42[7] = (uint64_t)&type metadata for String;
      v42[4] = 0xD00000000000001FLL;
      v42[5] = 0x800000010009BBA0LL;
    }

    if (qword_1000B8660 != -1) {
      goto LABEL_38;
    }
    goto LABEL_32;
  }

  uint64_t v14 = v99;
  if ((sub_1000148D8(v99, (unint64_t)v100) & 1) != 0)
  {
    mach_port_t v15 = getpid();
  }

  else
  {
    if (qword_1000B8688 != -1) {
      swift_once(&qword_1000B8688, sub_10001DD44);
    }
    unint64_t v64 = (uint64_t (*)(void))off_1000BA440;
    NSString v65 = String._bridgeToObjectiveC()();
    mach_port_t v15 = v64();

    if (!v15)
    {
      uint64_t v83 = sub_100005104(&qword_1000B8758);
      uint64_t v84 = swift_allocObject(v83, 64LL, 7LL);
      *(_OWORD *)(v84 + 16) = xmmword_100096510;
      _StringGuts.grow(_:)(28LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      unint64_t v95 = 0xD00000000000001ALL;
      unint64_t v96 = 0x800000010009BC20LL;
      v85._countAndFlagsBits = v14;
      v85._object = v13;
      String.append(_:)(v85);
      swift_bridgeObjectRelease(v13);
      *(void *)(v84 + 56) = &type metadata for String;
      *(void *)(v84 + 32) = 0xD00000000000001ALL;
      *(void *)(v84 + 40) = 0x800000010009BC20LL;
      if (qword_1000B8660 != -1) {
        swift_once(&qword_1000B8660, sub_1000134EC);
      }
      swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
      unint64_t v86 = sub_10000B3C8();
      print<A>(_:separator:terminator:to:)( v84,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v86);
      swift_endAccess(&v95);
      uint64_t v80 = v84;
      return swift_bridgeObjectRelease(v80);
    }
  }

  swift_bridgeObjectRelease(v13);
  unint64_t v95 = a4;
  unint64_t v96 = a5;
  char v97 = a6 & 1;
  uint64_t v66 = sub_100005104(&qword_1000B88E8);
  Flag.wrappedValue.getter(v66, v67, v68, (uint64_t)&v99);
  char v69 = v99;
  uint64_t v70 = type metadata accessor for DarwinRemoteProcess();
  swift_allocObject(v70, 104LL, 7LL);
  NSString v71 = sub_100010EEC(v15, v69);
  if (!v71)
  {
    uint64_t v75 = sub_100005104(&qword_1000B8758);
    uint64_t v76 = swift_allocObject(v75, 64LL, 7LL);
    *(_OWORD *)(v76 + 16) = xmmword_100096510;
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v95 = 0xD00000000000002ALL;
    unint64_t v96 = 0x800000010009BBF0LL;
    LODWORD(v99) = v15;
    v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    unsigned __int8 v78 = v77._object;
    String.append(_:)(v77);
    swift_bridgeObjectRelease(v78);
    *(void *)(v76 + 56) = &type metadata for String;
    *(void *)(v76 + 32) = 0xD00000000000002ALL;
    *(void *)(v76 + 40) = 0x800000010009BBF0LL;
    if (qword_1000B8660 != -1) {
      swift_once(&qword_1000B8660, sub_1000134EC);
    }
    swift_beginAccess(&qword_1000BA328, &v95, 33LL, 0LL);
    unint64_t v79 = sub_10000B3C8();
    print<A>(_:separator:terminator:to:)( v76,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v79);
    swift_endAccess(&v95);
    uint64_t v80 = v76;
    return swift_bridgeObjectRelease(v80);
  }

  uint64_t v72 = v71;
  a7(v71, &off_1000B8B78);
  return swift_release(v72);
}

char *sub_10000BFD8( unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, int a6)
{
  int v96 = a6;
  unint64_t v90 = a1;
  unint64_t v91 = a2;
  char v92 = a3 & 1;
  uint64_t v6 = sub_100005104(&qword_1000B88D8);
  Argument.wrappedValue.getter(v6, v7, v8, (uint64_t)&v94);
  unint64_t v9 = v95;
  if (v95)
  {
    uint64_t v10 = v94;
    if ((sub_1000148D8(v94, v95) & 1) != 0)
    {
      mach_port_t v11 = getpid();
    }

    else
    {
      if (qword_1000B8688 != -1) {
LABEL_42:
      }
        swift_once(&qword_1000B8688, sub_10001DD44);
      unint64_t v57 = (uint64_t (*)(void))off_1000BA440;
      NSString v58 = String._bridgeToObjectiveC()();
      mach_port_t v11 = v57();

      if (!v11)
      {
        uint64_t v79 = sub_100005104(&qword_1000B8758);
        uint64_t v80 = swift_allocObject(v79, 64LL, 7LL);
        *(_OWORD *)(v80 + 16) = xmmword_100096510;
        unint64_t v90 = 0LL;
        unint64_t v91 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(28LL);
        swift_bridgeObjectRelease(v91);
        unint64_t v90 = 0xD00000000000001ALL;
        unint64_t v91 = 0x800000010009BC20LL;
        v81._countAndFlagsBits = v10;
        v81._object = (void *)v9;
        String.append(_:)(v81);
        swift_bridgeObjectRelease(v9);
        unint64_t v82 = v90;
        unint64_t v83 = v91;
        *(void *)(v80 + 56) = &type metadata for String;
        *(void *)(v80 + 32) = v82;
        *(void *)(v80 + 40) = v83;
        if (qword_1000B8660 != -1) {
          swift_once(&qword_1000B8660, sub_1000134EC);
        }
        swift_beginAccess(&qword_1000BA328, &v90, 33LL, 0LL);
        unint64_t v84 = sub_10000B3C8();
        print<A>(_:separator:terminator:to:)( v80,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v84);
        swift_endAccess(&v90);
        uint64_t v78 = v80;
        return (char *)swift_bridgeObjectRelease(v78);
      }
    }

    swift_bridgeObjectRelease(v9);
    unint64_t v90 = a4;
    unint64_t v91 = a5;
    char v92 = v96 & 1;
    uint64_t v59 = sub_100005104(&qword_1000B88E8);
    Flag.wrappedValue.getter(v59, v60, v61, (uint64_t)&v94);
    char v62 = v94;
    uint64_t v63 = type metadata accessor for DarwinRemoteProcess();
    swift_allocObject(v63, 104LL, 7LL);
    unint64_t result = sub_100010EEC(v11, v62);
    if (result)
    {
      unint64_t v64 = result;
      uint64_t v65 = *((void *)result + 5);
      if (!v65) {
        goto LABEL_44;
      }
      if (object_getClass(result) == (Class)&OBJC_CLASS____TtC13swift_inspect19DarwinRemoteProcess) {
        uint64_t v66 = (uint64_t)v64;
      }
      else {
        uint64_t v66 = 0LL;
      }
      uint64_t v67 = type metadata accessor for ConcurrencyDumper();
      swift_allocObject(v67, 120LL, 7LL);
      swift_unknownObjectRetain(v64);
      uint64_t v68 = sub_10001EEB0(v65, v66);
      sub_100021004();
      sub_100022490();
      sub_100023214();
      swift_release(v64);
      return (char *)swift_release(v68);
    }

    uint64_t v71 = sub_100005104(&qword_1000B8758);
    uint64_t v70 = swift_allocObject(v71, 64LL, 7LL);
    *(_OWORD *)(v70 + 16) = xmmword_100096510;
    unint64_t v90 = 0LL;
    unint64_t v91 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease(v91);
    unint64_t v90 = 0xD00000000000002ALL;
    unint64_t v91 = 0x800000010009BBF0LL;
    LODWORD(v94) = v11;
    v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    object = v72._object;
    String.append(_:)(v72);
    swift_bridgeObjectRelease(object);
    unint64_t v74 = v90;
    unint64_t v75 = v91;
    *(void *)(v70 + 56) = &type metadata for String;
    *(void *)(v70 + 32) = v74;
    *(void *)(v70 + 40) = v75;
LABEL_35:
    if (qword_1000B8660 == -1) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }

  uint64_t v12 = sub_1000156C0();
  if (!v12)
  {
    uint64_t v76 = sub_100005104(&qword_1000B8758);
    uint64_t v70 = swift_allocObject(v76, 64LL, 7LL);
    *(_OWORD *)(v70 + 16) = xmmword_100096510;
    *(void *)(v70 + 56) = &type metadata for String;
    *(void *)(v70 + 32) = 0xD00000000000001FLL;
    *(void *)(v70 + 40) = 0x800000010009BBA0LL;
    goto LABEL_35;
  }

  Swift::String v85 = v12;
  uint64_t v13 = *((void *)v12 + 2);
  if (!v13)
  {
LABEL_31:
    swift_bridgeObjectRelease(v85);
    uint64_t v69 = sub_100005104(&qword_1000B8758);
    uint64_t v70 = swift_allocObject(v69, 64LL, 7LL);
    *(_OWORD *)(v70 + 16) = xmmword_100096510;
    *(void *)(v70 + 56) = &type metadata for String;
    *(void *)(v70 + 32) = 0LL;
    *(void *)(v70 + 40) = 0xE000000000000000LL;
    if (qword_1000B8660 == -1)
    {
LABEL_36:
      swift_beginAccess(&qword_1000BA328, &v90, 33LL, 0LL);
      unint64_t v77 = sub_10000B3C8();
      print<A>(_:separator:terminator:to:)( v70,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v77);
      swift_endAccess(&v90);
      uint64_t v78 = v70;
      return (char *)swift_bridgeObjectRelease(v78);
    }

LABEL_32:
    swift_once(&qword_1000B8660, sub_1000134EC);
    goto LABEL_36;
  }

  uint64_t v14 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v87 = v12 + 32;
  uint64_t v86 = *((void *)v12 + 2);
  while (1)
  {
    mach_port_t v15 = *(_DWORD *)&v87[4 * v10++];
    unint64_t v90 = 91LL;
    unint64_t v91 = 0xE100000000000000LL;
    uint64_t v94 = v14;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v17 = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v17);
    v18._countAndFlagsBits = 47LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    uint64_t v94 = v10;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    Swift::String v20 = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v20);
    v21._countAndFlagsBits = 47LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    uint64_t v94 = v13;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    Swift::String v23 = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v23);
    v24._countAndFlagsBits = 93LL;
    v24._object = (void *)0xE100000000000000LL;
    String.append(_:)(v24);
    unint64_t v26 = v90;
    unint64_t v25 = v91;
    unint64_t v90 = a4;
    unint64_t v91 = a5;
    char v92 = v96 & 1;
    uint64_t v27 = sub_100005104(&qword_1000B88E8);
    Flag.wrappedValue.getter(v27, v28, v29, (uint64_t)&v94);
    LOBYTE(v23) = v94;
    uint64_t v30 = type metadata accessor for DarwinRemoteProcess();
    swift_allocObject(v30, 104LL, 7LL);
    uint64_t v31 = sub_100010EEC(v15, (char)v23);
    if (!v31)
    {
      uint64_t v47 = sub_100005104(&qword_1000B8758);
      uint64_t v48 = swift_allocObject(v47, 96LL, 7LL);
      *(_OWORD *)(v48 + 16) = xmmword_1000970B0;
      *(void *)(v48 + 56) = &type metadata for String;
      *(void *)(v48 + 32) = v26;
      *(void *)(v48 + 40) = v25;
      unint64_t v90 = 0LL;
      unint64_t v91 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(47LL);
      swift_bridgeObjectRelease(v91);
      unint64_t v90 = 0xD00000000000002DLL;
      unint64_t v91 = 0x800000010009BBC0LL;
      LODWORD(v94) = v15;
      v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
      uint64_t v50 = v49._object;
      String.append(_:)(v49);
      swift_bridgeObjectRelease(v50);
      unint64_t v51 = v90;
      unint64_t v52 = v91;
      *(void *)(v48 + 88) = &type metadata for String;
      *(void *)(v48 + 64) = v51;
      *(void *)(v48 + 72) = v52;
      if (qword_1000B8660 != -1) {
        swift_once(&qword_1000B8660, sub_1000134EC);
      }
      swift_beginAccess(&qword_1000BA328, &v90, 33LL, 0LL);
      unint64_t v53 = sub_10000B3C8();
      print<A>(_:separator:terminator:to:)( v48,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v53);
      swift_endAccess(&v90);
      swift_bridgeObjectRelease(v48);
      uint64_t v13 = v86;
      goto LABEL_19;
    }

    unint64_t v9 = (unint64_t)v31;
    uint64_t v32 = sub_100005104(&qword_1000B8758);
    uint64_t v33 = swift_allocObject(v32, 96LL, 7LL);
    *(_OWORD *)(v33 + 16) = xmmword_1000970B0;
    *(void *)(v33 + 56) = &type metadata for String;
    *(void *)(v33 + 32) = v26;
    *(void *)(v33 + 40) = v25;
    uint64_t v94 = 0LL;
    unint64_t v95 = 0xE000000000000000LL;
    v34._countAndFlagsBits = sub_100010AF4();
    uint64_t v35 = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v35);
    v36._countAndFlagsBits = 40LL;
    v36._object = (void *)0xE100000000000000LL;
    String.append(_:)(v36);
    swift_getObjectType(v9);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, &off_1000B8B78);
    *(_DWORD *)sub_10000B40C(&v90) = *(_DWORD *)(v9 + 20);
    _print_unlocked<A, B>(_:_:)( &v90,  &v94,  (char *)&type metadata for Any + 8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    sub_1000062D8(&v90);
    v37._countAndFlagsBits = 41LL;
    v37._object = (void *)0xE100000000000000LL;
    String.append(_:)(v37);
    uint64_t v38 = v94;
    unint64_t v39 = v95;
    *(void *)(v33 + 88) = &type metadata for String;
    *(void *)(v33 + 64) = v38;
    *(void *)(v33 + 72) = v39;
    if (qword_1000B8660 != -1) {
      swift_once(&qword_1000B8660, sub_1000134EC);
    }
    swift_beginAccess(&qword_1000BA328, &v90, 33LL, 0LL);
    unint64_t v40 = sub_10000B3C8();
    print<A>(_:separator:terminator:to:)( v33,  32LL,  0xE100000000000000LL,  0LL,  0xE000000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v40);
    swift_endAccess(&v90);
    unint64_t result = (char *)swift_bridgeObjectRelease(v33);
    uint64_t v42 = *(void *)(v9 + 40);
    if (!v42) {
      break;
    }
    if (object_getClass((id)v9) == (Class)&OBJC_CLASS____TtC13swift_inspect19DarwinRemoteProcess) {
      uint64_t v43 = v9;
    }
    else {
      uint64_t v43 = 0LL;
    }
    uint64_t v44 = type metadata accessor for ConcurrencyDumper();
    swift_allocObject(v44, 120LL, 7LL);
    swift_unknownObjectRetain(v9);
    uint64_t v45 = sub_10001EEB0(v42, v43);
    sub_100021004();
    sub_100022490();
    sub_100023214();
    swift_release(v45);
    BOOL v46 = __OFADD__(v14++, 1LL);
    uint64_t v13 = v86;
    if (v46)
    {
      __break(1u);
      goto LABEL_42;
    }

    swift_release_n(v9, 2LL);
LABEL_19:
    uint64_t v54 = sub_100005104(&qword_1000B8758);
    uint64_t v55 = swift_allocObject(v54, 64LL, 7LL);
    *(_OWORD *)(v55 + 16) = xmmword_100096510;
    *(void *)(v55 + 56) = &type metadata for String;
    *(void *)(v55 + 32) = 1261460251LL;
    *(void *)(v55 + 40) = 0xE400000000000000LL;
    if (qword_1000B8660 != -1) {
      swift_once(&qword_1000B8660, sub_1000134EC);
    }
    swift_beginAccess(&qword_1000BA328, &v90, 33LL, 0LL);
    unint64_t v56 = sub_10000B3C8();
    print<A>(_:separator:terminator:to:)( v55,  32LL,  0xE100000000000000LL,  13LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v56);
    swift_endAccess(&v90);
    swift_bridgeObjectRelease(v55);
    if (v13 == v10) {
      goto LABEL_31;
    }
  }

  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

        Swift::String v20 = 0;
        return v20 & 1;
      }

      v37 &= 0x3Fu;
      Swift::String v18 = v36.n128_u64[1];
      uint64_t v17 = v36.n128_u64[0];
      sub_100066FC0(&v24, &v25);
      if ((v26 & 0xC0) != 0x80) {
        goto LABEL_32;
      }
      v26 &= 0x3Fu;
    }

    else
    {
      v37 &= 0x3Fu;
      Swift::String v18 = v36.n128_u64[1];
      uint64_t v17 = v36.n128_u64[0];
      sub_100066FC0(&v24, &v25);
      if (v26 >= 0x40u) {
        goto LABEL_32;
      }
    }

    if (__PAIR128__(v18, v17) != *(_OWORD *)&v25
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v25.n128_u64[0], v25.n128_u64[1], 0LL) & 1) == 0)
    {
      goto LABEL_32;
    }

    goto LABEL_38;
  }

  v32 &= ~0x8000000000000000LL;
  uint64_t v8 = v31;
  unint64_t v9 = v33;
  uint64_t v10 = v34;
  sub_100066F84(a2, (uint64_t)&v27);
  mach_port_t v11 = v28;
  if ((v28 & 0x8000000000000000LL) == 0)
  {
    sub_100066FC0(&v27, &v36);
    goto LABEL_32;
  }

  uint64_t v12 = v3;
  v28 &= ~0x8000000000000000LL;
  uint64_t v13 = v11;
  uint64_t v14 = v3 >> 6;
  Swift::String v16 = v29;
  mach_port_t v15 = v30;
  if (!v14)
  {
    if (v13 >= 0x40) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }

  if (v14 != 1)
  {
    if ((v13 & 0xC0) != 0x80) {
      goto LABEL_32;
    }
LABEL_27:
    if (*(_OWORD *)&v8 == *(_OWORD *)&v27) {
      goto LABEL_36;
    }
    Swift::String v19 = _stringCompareWithSmolCheck(_:_:expecting:)( v8.n128_u64[0],  v8.n128_u64[1],  v27.n128_u64[0],  v27.n128_u64[1],  0LL);
    Swift::String v20 = 0;
    if ((v19 & 1) != 0) {
      goto LABEL_36;
    }
    return v20 & 1;
  }

  if ((v13 & 0xC0) != 0x40) {
    goto LABEL_32;
  }
  if (*(_OWORD *)&v8 == *(_OWORD *)&v27)
  {
    if (((v12 ^ v13) & 1) != 0) {
      goto LABEL_32;
    }
LABEL_36:
    if (v9 != v16 || v10 != v15)
    {
      Swift::String v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v16, v15, 0LL);
      return v20 & 1;
    }

    goto LABEL_38;
  }

  Swift::String v23 = _stringCompareWithSmolCheck(_:_:expecting:)( v8.n128_u64[0],  v8.n128_u64[1],  v27.n128_u64[0],  v27.n128_u64[1],  0LL);
  Swift::String v20 = 0;
  if (((v12 ^ v13) & 1) == 0 && (v23 & 1) != 0) {
    goto LABEL_36;
  }
  return v20 & 1;
}

uint64_t sub_10000CA10( unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, char a6, uint64_t a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v10 = v9;
  unint64_t v98 = a1;
  unint64_t v99 = a2;
  char v100 = a3 & 1;
  uint64_t v11 = sub_100005104(&qword_1000B88D8);
  Argument.wrappedValue.getter(v11, v12, v13, (uint64_t)&v102);
  uint64_t v14 = v103;
  if (!v103)
  {
    uint64_t v17 = sub_1000156C0();
    if (v17)
    {
      uint64_t v18 = *((void *)v17 + 2);
      uint64_t v89 = v17;
      if (v18)
      {
        uint64_t v97 = 0LL;
        uint64_t v19 = 0LL;
        Swift::String v93 = v17 + 32;
        uint64_t v90 = *((void *)v17 + 2);
        do
        {
          mach_port_t v20 = *(_DWORD *)&v93[4 * v19++];
          unint64_t v98 = 91LL;
          unint64_t v99 = 0xE100000000000000LL;
          uint64_t v102 = v97;
          v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          object = v21._object;
          String.append(_:)(v21);
          swift_bridgeObjectRelease(object);
          v23._countAndFlagsBits = 47LL;
          v23._object = (void *)0xE100000000000000LL;
          String.append(_:)(v23);
          uint64_t v102 = v19;
          v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          unint64_t v25 = v24._object;
          String.append(_:)(v24);
          swift_bridgeObjectRelease(v25);
          v26._countAndFlagsBits = 47LL;
          v26._object = (void *)0xE100000000000000LL;
          String.append(_:)(v26);
          uint64_t v102 = v18;
          v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          uint64_t v28 = v27._object;
          String.append(_:)(v27);
          swift_bridgeObjectRelease(v28);
          v29._countAndFlagsBits = 93LL;
          v29._object = (void *)0xE100000000000000LL;
          String.append(_:)(v29);
          unint64_t v30 = v98;
          unint64_t v31 = v99;
          unint64_t v98 = a4;
          unint64_t v99 = a5;
          char v100 = a6 & 1;
          uint64_t v32 = sub_100005104(&qword_1000B88E8);
          Flag.wrappedValue.getter(v32, v33, v34, (uint64_t)&v102);
          char v35 = v102;
          uint64_t v36 = type metadata accessor for DarwinRemoteProcess();
          swift_allocObject(v36, 104LL, 7LL);
          Swift::String v37 = sub_100010EEC(v20, v35);
          uint64_t v104 = v10;
          if (v37)
          {
            uint64_t v38 = (uint64_t)v37;
            uint64_t v39 = sub_100005104(&qword_1000B8758);
            uint64_t v40 = swift_allocObject(v39, 96LL, 7LL);
            *(_OWORD *)(v40 + 16) = xmmword_1000970B0;
            *(void *)(v40 + 56) = &type metadata for String;
            *(void *)(v40 + 32) = v30;
            *(void *)(v40 + 40) = v31;
            uint64_t v102 = 0LL;
            uint64_t v103 = (void *)0xE000000000000000LL;
            v41._countAndFlagsBits = sub_100010AF4();
            uint64_t v42 = v41._object;
            uint64_t v43 = &v102;
            String.append(_:)(v41);
            swift_bridgeObjectRelease(v42);
            v44._countAndFlagsBits = 40LL;
            v44._object = (void *)0xE100000000000000LL;
            String.append(_:)(v44);
            swift_getObjectType(v38);
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, &off_1000B8B78);
            *(_DWORD *)sub_10000B40C(&v98) = *(_DWORD *)(v38 + 20);
            _print_unlocked<A, B>(_:_:)( &v98,  &v102,  (char *)&type metadata for Any + 8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            sub_1000062D8(&v98);
            v45._countAndFlagsBits = 41LL;
            v45._object = (void *)0xE100000000000000LL;
            String.append(_:)(v45);
            uint64_t v46 = v102;
            unint64_t v47 = (unint64_t)v103;
            *(void *)(v40 + 88) = &type metadata for String;
            *(void *)(v40 + 64) = v46;
            *(void *)(v40 + 72) = v47;
            if (qword_1000B8660 != -1) {
              swift_once(&qword_1000B8660, sub_1000134EC);
            }
            swift_beginAccess(&qword_1000BA328, &v98, 33LL, 0LL);
            unint64_t v48 = sub_10000B3C8();
            print<A>(_:separator:terminator:to:)( v40,  32LL,  0xE100000000000000LL,  0LL,  0xE000000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v48);
            swift_endAccess(&v98);
            swift_bridgeObjectRelease(v40);
            uint64_t v49 = v104;
            sub_1000175E0(v38, (uint64_t)&off_1000B8B78, a7, a8, a9);
            uint64_t v10 = v49;
            if (v49)
            {
              uint64_t v50 = swift_allocObject(v39, 64LL, 7LL);
              *(_OWORD *)(v50 + 16) = xmmword_100096510;
              unint64_t v98 = 0LL;
              unint64_t v99 = 0xE000000000000000LL;
              v51._countAndFlagsBits = 2108704LL;
              v51._object = (void *)0xE300000000000000LL;
              String.append(_:)(v51);
              uint64_t v102 = v49;
              uint64_t v52 = sub_100005104(&qword_1000B88F0);
              _print_unlocked<A, B>(_:_:)( &v102,  &v98,  v52,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
              unint64_t v53 = v98;
              unint64_t v54 = v99;
              *(void *)(v50 + 56) = &type metadata for String;
              *(void *)(v50 + 32) = v53;
              *(void *)(v50 + 40) = v54;
              swift_beginAccess(&qword_1000BA328, &v98, 33LL, 0LL);
              print<A>(_:separator:terminator:to:)( v50,  32LL,  0xE100000000000000LL,  0LL,  0xE000000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v48);
              swift_endAccess(&v98);
              swift_bridgeObjectRelease(v50);
              swift_errorRelease(v49);
              uint64_t v10 = 0LL;
              uint64_t v18 = v90;
            }

            else
            {
              BOOL v62 = __OFADD__(v97++, 1LL);
              uint64_t v18 = v90;
              if (v62)
              {
                __break(1u);
LABEL_38:
                swift_once(&qword_1000B8660, sub_1000134EC);
LABEL_32:
                swift_beginAccess(&qword_1000BA328, &v98, 33LL, 0LL);
                unint64_t v84 = sub_10000B3C8();
                print<A>(_:separator:terminator:to:)( v43,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v84);
                swift_endAccess(&v98);
                uint64_t v82 = (uint64_t)v43;
                return swift_bridgeObjectRelease(v82);
              }
            }

            swift_release_n(v38, 2LL);
          }

          else
          {
            uint64_t v55 = sub_100005104(&qword_1000B8758);
            uint64_t v56 = swift_allocObject(v55, 96LL, 7LL);
            *(_OWORD *)(v56 + 16) = xmmword_1000970B0;
            *(void *)(v56 + 56) = &type metadata for String;
            *(void *)(v56 + 32) = v30;
            *(void *)(v56 + 40) = v31;
            unint64_t v98 = 0LL;
            unint64_t v99 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(47LL);
            swift_bridgeObjectRelease(v99);
            unint64_t v98 = 0xD00000000000002DLL;
            unint64_t v99 = 0x800000010009BBC0LL;
            LODWORD(v102) = v20;
            v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
            NSString v58 = v57._object;
            String.append(_:)(v57);
            swift_bridgeObjectRelease(v58);
            unint64_t v59 = v98;
            unint64_t v60 = v99;
            *(void *)(v56 + 88) = &type metadata for String;
            *(void *)(v56 + 64) = v59;
            *(void *)(v56 + 72) = v60;
            if (qword_1000B8660 != -1) {
              swift_once(&qword_1000B8660, sub_1000134EC);
            }
            swift_beginAccess(&qword_1000BA328, &v98, 33LL, 0LL);
            unint64_t v61 = sub_10000B3C8();
            print<A>(_:separator:terminator:to:)( v56,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v61);
            swift_endAccess(&v98);
            swift_bridgeObjectRelease(v56);
            uint64_t v10 = v104;
          }

          uint64_t v63 = sub_100005104(&qword_1000B8758);
          uint64_t v64 = swift_allocObject(v63, 64LL, 7LL);
          *(_OWORD *)(v64 + 16) = xmmword_100096510;
          *(void *)(v64 + 56) = &type metadata for String;
          *(void *)(v64 + 32) = 1261460251LL;
          *(void *)(v64 + 40) = 0xE400000000000000LL;
          if (qword_1000B8660 != -1) {
            swift_once(&qword_1000B8660, sub_1000134EC);
          }
          swift_beginAccess(&qword_1000BA328, &v98, 33LL, 0LL);
          unint64_t v65 = sub_10000B3C8();
          print<A>(_:separator:terminator:to:)( v64,  32LL,  0xE100000000000000LL,  13LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v65);
          swift_endAccess(&v98);
          swift_bridgeObjectRelease(v64);
        }

        while (v18 != v19);
      }

      swift_bridgeObjectRelease(v89);
      uint64_t v76 = sub_100005104(&qword_1000B8758);
      uint64_t v43 = (uint64_t *)swift_allocObject(v76, 64LL, 7LL);
      *((_OWORD *)v43 + 1) = xmmword_100096510;
      v43[7] = (uint64_t)&type metadata for String;
      v43[4] = 0LL;
      v43[5] = 0xE000000000000000LL;
    }

    else
    {
      uint64_t v83 = sub_100005104(&qword_1000B8758);
      uint64_t v43 = (uint64_t *)swift_allocObject(v83, 64LL, 7LL);
      *((_OWORD *)v43 + 1) = xmmword_100096510;
      v43[7] = (uint64_t)&type metadata for String;
      v43[4] = 0xD00000000000001FLL;
      v43[5] = 0x800000010009BBA0LL;
    }

    if (qword_1000B8660 != -1) {
      goto LABEL_38;
    }
    goto LABEL_32;
  }

  uint64_t v15 = v102;
  if ((sub_1000148D8(v102, (unint64_t)v103) & 1) != 0)
  {
    mach_port_t v16 = getpid();
  }

  else
  {
    if (qword_1000B8688 != -1) {
      swift_once(&qword_1000B8688, sub_10001DD44);
    }
    uint64_t v66 = (uint64_t (*)(void))off_1000BA440;
    NSString v67 = String._bridgeToObjectiveC()();
    mach_port_t v16 = v66();

    if (!v16)
    {
      uint64_t v85 = sub_100005104(&qword_1000B8758);
      uint64_t v86 = swift_allocObject(v85, 64LL, 7LL);
      *(_OWORD *)(v86 + 16) = xmmword_100096510;
      _StringGuts.grow(_:)(28LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      unint64_t v98 = 0xD00000000000001ALL;
      unint64_t v99 = 0x800000010009BC20LL;
      v87._countAndFlagsBits = v15;
      v87._object = v14;
      String.append(_:)(v87);
      swift_bridgeObjectRelease(v14);
      *(void *)(v86 + 56) = &type metadata for String;
      *(void *)(v86 + 32) = 0xD00000000000001ALL;
      *(void *)(v86 + 40) = 0x800000010009BC20LL;
      if (qword_1000B8660 != -1) {
        swift_once(&qword_1000B8660, sub_1000134EC);
      }
      swift_beginAccess(&qword_1000BA328, &v98, 33LL, 0LL);
      unint64_t v88 = sub_10000B3C8();
      print<A>(_:separator:terminator:to:)( v86,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v88);
      swift_endAccess(&v98);
      uint64_t v82 = v86;
      return swift_bridgeObjectRelease(v82);
    }
  }

  swift_bridgeObjectRelease(v14);
  unint64_t v98 = a4;
  unint64_t v99 = a5;
  char v100 = a6 & 1;
  uint64_t v68 = sub_100005104(&qword_1000B88E8);
  Flag.wrappedValue.getter(v68, v69, v70, (uint64_t)&v102);
  char v71 = v102;
  uint64_t v72 = type metadata accessor for DarwinRemoteProcess();
  swift_allocObject(v72, 104LL, 7LL);
  uint64_t v73 = sub_100010EEC(v16, v71);
  if (!v73)
  {
    uint64_t v77 = sub_100005104(&qword_1000B8758);
    uint64_t v78 = swift_allocObject(v77, 64LL, 7LL);
    *(_OWORD *)(v78 + 16) = xmmword_100096510;
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v98 = 0xD00000000000002ALL;
    unint64_t v99 = 0x800000010009BBF0LL;
    LODWORD(v102) = v16;
    v79._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    uint64_t v80 = v79._object;
    String.append(_:)(v79);
    swift_bridgeObjectRelease(v80);
    *(void *)(v78 + 56) = &type metadata for String;
    *(void *)(v78 + 32) = 0xD00000000000002ALL;
    *(void *)(v78 + 40) = 0x800000010009BBF0LL;
    if (qword_1000B8660 != -1) {
      swift_once(&qword_1000B8660, sub_1000134EC);
    }
    swift_beginAccess(&qword_1000BA328, &v98, 33LL, 0LL);
    unint64_t v81 = sub_10000B3C8();
    print<A>(_:separator:terminator:to:)( v78,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v81);
    swift_endAccess(&v98);
    uint64_t v82 = v78;
    return swift_bridgeObjectRelease(v82);
  }

  unint64_t v74 = v73;
  sub_1000175E0((uint64_t)v73, (uint64_t)&off_1000B8B78, a7, a8, a9);
  return swift_release(v74);
}

uint64_t destroy for GenericMetadataOptions(uint64_t a1)
{
  return sub_100003C50(*(void *)(a1 + 72), *(void *)(a1 + 80), *(_BYTE *)(a1 + 88));
}

uint64_t initializeWithCopy for GenericMetadataOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  sub_100003B00(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(_BYTE *)(v2 + 40);
  sub_100003B00(v7, v8, v9);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(v2 + 48);
  uint64_t v11 = *(void *)(v2 + 56);
  char v12 = *(_BYTE *)(v2 + 64);
  sub_100003B00(v10, v11, v12);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v12;
  uint64_t v13 = *(void *)(v2 + 72);
  uint64_t v14 = *(void *)(v2 + 80);
  LOBYTE(v2) = *(_BYTE *)(v2 + 88);
  sub_100003AF0(v13, v14, v2);
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(_BYTE *)(a1 + 88) = v2;
  return a1;
}

uint64_t assignWithCopy for GenericMetadataOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  sub_100003B00(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100003C60(v7, v8, v9);
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t v11 = *(void *)(v2 + 32);
  char v12 = *(_BYTE *)(v2 + 40);
  sub_100003B00(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(_BYTE *)(a1 + 40);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = v12;
  sub_100003C60(v13, v14, v15);
  uint64_t v16 = *(void *)(v2 + 48);
  uint64_t v17 = *(void *)(v2 + 56);
  char v18 = *(_BYTE *)(v2 + 64);
  sub_100003B00(v16, v17, v18);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  char v21 = *(_BYTE *)(a1 + 64);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  *(_BYTE *)(a1 + 64) = v18;
  sub_100003C60(v19, v20, v21);
  uint64_t v22 = *(void *)(v2 + 72);
  uint64_t v23 = *(void *)(v2 + 80);
  LOBYTE(v2) = *(_BYTE *)(v2 + 88);
  sub_100003AF0(v22, v23, v2);
  uint64_t v24 = *(void *)(a1 + 72);
  uint64_t v25 = *(void *)(a1 + 80);
  char v26 = *(_BYTE *)(a1 + 88);
  *(void *)(a1 + 72) = v22;
  *(void *)(a1 + 80) = v23;
  *(_BYTE *)(a1 + 88) = v2;
  sub_100003C50(v24, v25, v26);
  return a1;
}

__n128 initializeWithTake for GenericMetadataOptions(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for GenericMetadataOptions(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_100003C60(v5, v6, v7);
  char v8 = *(_BYTE *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v8;
  sub_100003C60(v9, v10, v11);
  char v12 = *(_BYTE *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  char v15 = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v12;
  sub_100003C60(v13, v14, v15);
  char v16 = *(_BYTE *)(a2 + 88);
  uint64_t v17 = *(void *)(a1 + 72);
  uint64_t v18 = *(void *)(a1 + 80);
  char v19 = *(_BYTE *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = v16;
  sub_100003C50(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericMetadataOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericMetadataOptions( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 89) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 89) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GenericMetadataOptions()
{
  return &type metadata for GenericMetadataOptions;
}

uint64_t destroy for BacktraceOptions(uint64_t a1)
{
  return sub_100003C60(*(void *)(a1 + 24), *(void *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for BacktraceOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  sub_100003B00(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  LOBYTE(v2) = *(_BYTE *)(v2 + 40);
  sub_100003B00(v7, v8, v2);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v2;
  return a1;
}

uint64_t assignWithCopy for BacktraceOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  sub_100003B00(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100003C60(v7, v8, v9);
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t v11 = *(void *)(v2 + 32);
  LOBYTE(v2) = *(_BYTE *)(v2 + 40);
  sub_100003B00(v10, v11, v2);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  char v14 = *(_BYTE *)(a1 + 40);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = v2;
  sub_100003C60(v12, v13, v14);
  return a1;
}

__n128 initializeWithTake for BacktraceOptions(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for BacktraceOptions(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_100003C60(v5, v6, v7);
  char v8 = *(_BYTE *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v8;
  sub_100003C60(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for BacktraceOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BacktraceOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BacktraceOptions()
{
  return &type metadata for BacktraceOptions;
}

uint64_t destroy for UniversalOptions(uint64_t a1)
{
  return sub_100003C60(*(void *)(a1 + 48), *(void *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for UniversalOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  sub_100003AF0(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(_BYTE *)(v2 + 40);
  sub_100003B00(v7, v8, v9);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(v2 + 48);
  uint64_t v11 = *(void *)(v2 + 56);
  LOBYTE(v2) = *(_BYTE *)(v2 + 64);
  sub_100003B00(v10, v11, v2);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v2;
  return a1;
}

uint64_t assignWithCopy for UniversalOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(_BYTE *)(a2 + 16);
  sub_100003AF0(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100003C50(v7, v8, v9);
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t v11 = *(void *)(v2 + 32);
  char v12 = *(_BYTE *)(v2 + 40);
  sub_100003B00(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(_BYTE *)(a1 + 40);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = v12;
  sub_100003C60(v13, v14, v15);
  uint64_t v16 = *(void *)(v2 + 48);
  uint64_t v17 = *(void *)(v2 + 56);
  LOBYTE(v2) = *(_BYTE *)(v2 + 64);
  sub_100003B00(v16, v17, v2);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(_BYTE *)(a1 + 64);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  *(_BYTE *)(a1 + 64) = v2;
  sub_100003C60(v18, v19, v20);
  return a1;
}

__n128 initializeWithTake for UniversalOptions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for UniversalOptions(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_100003C50(v5, v6, v7);
  char v8 = *(_BYTE *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v8;
  sub_100003C60(v9, v10, v11);
  char v12 = *(_BYTE *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  char v15 = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v12;
  sub_100003C60(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for UniversalOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UniversalOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 65) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UniversalOptions()
{
  return &type metadata for UniversalOptions;
}

unint64_t sub_10000DD90(uint64_t a1)
{
  unint64_t result = sub_10000DDB4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000DDB4()
{
  unint64_t result = qword_1000B88F8;
  if (!qword_1000B88F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096CF4, &type metadata for GenericMetadataOptions);
    atomic_store(result, (unint64_t *)&qword_1000B88F8);
  }

  return result;
}

unint64_t sub_10000DDF8(uint64_t a1)
{
  unint64_t result = sub_10000DE1C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000DE1C()
{
  unint64_t result = qword_1000B8900;
  if (!qword_1000B8900)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096CCC, &type metadata for BacktraceOptions);
    atomic_store(result, (unint64_t *)&qword_1000B8900);
  }

  return result;
}

unint64_t sub_10000DE60(uint64_t a1)
{
  unint64_t result = sub_10000DE84();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000DE84()
{
  unint64_t result = qword_1000B8908;
  if (!qword_1000B8908)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096CA4, &type metadata for UniversalOptions);
    atomic_store(result, (unint64_t *)&qword_1000B8908);
  }

  return result;
}

unint64_t sub_10000DEC8()
{
  unint64_t result = qword_1000B8910;
  if (!qword_1000B8910)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ValidationError,  &type metadata for ValidationError);
    atomic_store(result, (unint64_t *)&qword_1000B8910);
  }

  return result;
}

uint64_t sub_10000DF0C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6950724F656D616ELL && a2 == 0xE900000000000064LL)
  {
    unint64_t v5 = 0xE900000000000064LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6950724F656D616ELL, 0xE900000000000064LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x70726F436B726F66LL && a2 == 0xEA00000000006573LL)
  {
    unint64_t v7 = 0xEA00000000006573LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x70726F436B726F66LL, 0xEA00000000006573LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 7105633 && a2 == 0xE300000000000000LL)
  {
    swift_bridgeObjectRelease(0xE300000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(7105633LL, 0xE300000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t (*sub_10000E068@<X0>(uint64_t a1@<X8>))(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v2._char countAndFlagsBits = 0xD00000000000002DLL;
  v2._object = (void *)0x800000010009BC80LL;
  ArgumentHelp.init(stringLiteral:)(&v20, v2);
  ArgumentParser::ArgumentHelp v25 = v20;
  Argument.init<A>(help:completion:)( (uint64_t)&v25,  0LL,  0LL,  255,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  (uint64_t)&v24);
  Swift::String abstract = v24.abstract;
  char countAndFlagsBits = v24.discussion._countAndFlagsBits;
  unint64_t v5 = (ArgumentParser::ArgumentVisibility::Representation *)ArgumentVisibility.default.unsafeMutableAddressor();
  v6._char countAndFlagsBits = 0xD000000000000090LL;
  v7.base = *v5;
  v8._object = (void *)0x800000010009BCB0LL;
  v6._object = (void *)0x800000010009BCE0LL;
  v8._char countAndFlagsBits = 0xD000000000000023LL;
  ArgumentHelp.init(_:discussion:valueName:visibility:)(&v21, v8, v6, (Swift::String_optional)0, v7);
  ArgumentParser::ArgumentHelp v24 = v21;
  uint64_t v9 = static NameSpecification.long.getter();
  uint64_t v10 = Flag<A>.init(wrappedValue:name:help:)(0, v9, (uint64_t)&v24);
  uint64_t v12 = v11;
  char v14 = v13;
  v15._object = (void *)0x800000010009BD80LL;
  v15._char countAndFlagsBits = 0xD000000000000014LL;
  ArgumentHelp.init(stringLiteral:)(&v22, v15);
  ArgumentParser::ArgumentHelp v23 = v22;
  uint64_t v16 = static NameSpecification.long.getter();
  unint64_t result = Flag<A>.init(wrappedValue:name:help:)(0, v16, (uint64_t)&v23);
  *(Swift::String *)a1 = abstract;
  *(_BYTE *)(a1 + 16) = countAndFlagsBits;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v14 & 1;
  *(void *)(a1 + 48) = result;
  *(void *)(a1 + 56) = v18;
  *(_BYTE *)(a1 + 64) = v19 & 1;
  return result;
}

uint64_t sub_10000E21C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  Swift::String v44 = a2;
  uint64_t v45 = sub_100005104(&qword_1000B8950);
  uint64_t v4 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  Swift::String v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v7._char countAndFlagsBits = 0xD00000000000002DLL;
  v7._object = (void *)0x800000010009BC80LL;
  ArgumentHelp.init(stringLiteral:)(&v58, v7);
  ArgumentParser::ArgumentHelp v63 = v58;
  Argument.init<A>(help:completion:)( (uint64_t)&v63,  0LL,  0LL,  255,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  (uint64_t)&v55);
  uint64_t v46 = v56;
  unint64_t v47 = v55;
  int v52 = v57;
  Swift::String v8 = (ArgumentParser::ArgumentVisibility::Representation *)ArgumentVisibility.default.unsafeMutableAddressor();
  v9._char countAndFlagsBits = 0xD000000000000090LL;
  v10.base = *v8;
  v11._object = (void *)0x800000010009BCB0LL;
  v9._object = (void *)0x800000010009BCE0LL;
  v11._char countAndFlagsBits = 0xD000000000000023LL;
  ArgumentHelp.init(_:discussion:valueName:visibility:)(&v59, v11, v9, (Swift::String_optional)0, v10);
  ArgumentParser::ArgumentHelp v62 = v59;
  uint64_t v12 = static NameSpecification.long.getter();
  Swift::String v51 = Flag<A>.init(wrappedValue:name:help:)(0, v12, (uint64_t)&v62);
  uint64_t v64 = v13;
  char v15 = v14;
  int v53 = v14 & 1;
  v16._object = (void *)0x800000010009BD80LL;
  v16._char countAndFlagsBits = 0xD000000000000014LL;
  ArgumentHelp.init(stringLiteral:)(&v60, v16);
  ArgumentParser::ArgumentHelp v61 = v60;
  uint64_t v17 = static NameSpecification.long.getter();
  uint64_t v49 = Flag<A>.init(wrappedValue:name:help:)(0, v17, (uint64_t)&v61);
  uint64_t v50 = v18;
  int v48 = v19;
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  sub_100006270(a1, v20);
  unint64_t v22 = sub_10000F6C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for UniversalOptions.CodingKeys,  &type metadata for UniversalOptions.CodingKeys,  v22,  v20,  v21);
  if (v2)
  {
    uint64_t v26 = v46;
    uint64_t v25 = (uint64_t)v47;
    char v27 = v52;
    uint64_t v28 = v51;
    uint64_t v29 = v64;
    char v30 = v53;
    sub_1000062D8(a1);
    sub_100003C50(v25, v26, v27);
    sub_100003C60((uint64_t)v28, v29, v30);
    return sub_100003C60((uint64_t)v49, v50, v48 & 1);
  }

  else
  {
    uint64_t v43 = v4;
    uint64_t v23 = sub_100005104(&qword_1000B88D8);
    char v54 = 0;
    uint64_t v24 = sub_1000062F8(&qword_1000B8960, &qword_1000B88D8, (uint64_t)&protocol conformance descriptor for Argument<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, v23, &v54, v45, v23, v24);
    sub_100003C50((uint64_t)v47, v46, v52);
    uint64_t v31 = (uint64_t)v55;
    uint64_t v32 = v56;
    LODWORD(v23) = v57;
    uint64_t v33 = sub_100005104(&qword_1000B88E8);
    char v54 = 1;
    sub_100003AF0(v31, v32, v23);
    uint64_t v46 = sub_1000062F8(&qword_1000B8928, &qword_1000B88E8, (uint64_t)&protocol conformance descriptor for Flag<A>);
    unint64_t v47 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, v33, &v54, v45, v33, v46);
    sub_100003C60((uint64_t)v51, v64, v15 & 1);
    uint64_t v34 = v55;
    char v54 = 2;
    uint64_t v64 = v56;
    int v53 = v57;
    sub_100003B00((uint64_t)v55, v56, v57);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, v47, &v54, v45, v47, v46);
    sub_100003C60((uint64_t)v49, v50, v48 & 1);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v45);
    char v35 = v34;
    uint64_t v50 = v56;
    Swift::String v51 = v34;
    int v52 = v23;
    LOBYTE(v33) = v57;
    uint64_t v36 = (uint64_t)v55;
    sub_100003B00((uint64_t)v55, v56, v57);
    sub_1000062D8(a1);
    sub_100003C50(v31, v32, v23);
    uint64_t v37 = (uint64_t)v35;
    uint64_t v38 = v64;
    LOBYTE(v35) = v53;
    sub_100003C60(v37, v64, v53);
    uint64_t v39 = v50;
    uint64_t result = sub_100003C60(v36, v50, v33);
    Swift::String v41 = v44;
    *Swift::String v44 = v31;
    v41[1] = v32;
    *((_BYTE *)v41 + 16) = v52;
    v41[3] = (uint64_t)v51;
    v41[4] = v38;
    *((_BYTE *)v41 + 40) = (_BYTE)v35;
    v41[6] = v36;
    v41[7] = v39;
    *((_BYTE *)v41 + 64) = v33;
  }

  return result;
}

uint64_t sub_10000E714(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x636172746B636162LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v5 = 0xE900000000000065LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636172746B636162LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x636172746B636162LL && a2 == 0xED0000676E6F4C65LL)
  {
    swift_bridgeObjectRelease(0xED0000676E6F4C65LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x636172746B636162LL, 0xED0000676E6F4C65LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10000E82C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v39 = sub_100005104(&qword_1000B8940);
  uint64_t v4 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  Swift::String v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v7._object = (void *)0x800000010009BDA0LL;
  v7._char countAndFlagsBits = 0xD000000000000026LL;
  ArgumentHelp.init(stringLiteral:)(&v47, v7);
  ArgumentParser::ArgumentHelp v50 = v47;
  uint64_t v8 = static NameSpecification.long.getter();
  Swift::String v9 = Flag<A>.init(wrappedValue:name:help:)(0, v8, (uint64_t)&v50);
  uint64_t v51 = v10;
  char v12 = v11;
  int v38 = v11 & 1;
  v13._char countAndFlagsBits = 0xD00000000000002ELL;
  v13._object = (void *)0x800000010009BDD0LL;
  ArgumentHelp.init(stringLiteral:)(&v48, v13);
  ArgumentParser::ArgumentHelp v49 = v48;
  uint64_t v14 = static NameSpecification.long.getter();
  Swift::String v41 = Flag<A>.init(wrappedValue:name:help:)(0, v14, (uint64_t)&v49);
  uint64_t v42 = v15;
  int v40 = v16;
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100006270(a1, v17);
  unint64_t v19 = sub_10000F684();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BacktraceOptions.CodingKeys,  &type metadata for BacktraceOptions.CodingKeys,  v19,  v17,  v18);
  if (v2)
  {
    uint64_t v22 = (uint64_t)v9;
    uint64_t v23 = v51;
    char v24 = v38;
    uint64_t v25 = v42;
    uint64_t v26 = v41;
    char v27 = v40;
    sub_1000062D8(a1);
    sub_100003C60(v22, v23, v24);
    return sub_100003C60((uint64_t)v26, v25, v27 & 1);
  }

  else
  {
    uint64_t v36 = v4;
    uint64_t v20 = sub_100005104(&qword_1000B88E8);
    char v43 = 0;
    uint64_t v21 = sub_1000062F8(&qword_1000B8928, &qword_1000B88E8, (uint64_t)&protocol conformance descriptor for Flag<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v20, &v43, v39, v20, v21);
    sub_100003C60((uint64_t)v9, v51, v12 & 1);
    uint64_t v28 = v44;
    uint64_t v29 = v45;
    char v30 = v46;
    char v43 = 1;
    sub_100003B00(v44, v45, v46);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v20, &v43, v39, v20, v21);
    sub_100003C60((uint64_t)v41, v42, v40 & 1);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v39);
    uint64_t v31 = v44;
    uint64_t v32 = v45;
    LOBYTE(v21) = v30;
    char v33 = v46;
    sub_100003B00(v44, v45, v46);
    sub_1000062D8(a1);
    sub_100003C60(v28, v29, v21);
    uint64_t result = sub_100003C60(v31, v32, v33);
    char v35 = v37;
    *uint64_t v37 = v28;
    v35[1] = v29;
    *((_BYTE *)v35 + 16) = v21;
    v35[3] = v31;
    v35[4] = v32;
    *((_BYTE *)v35 + 40) = v33;
  }

  return result;
}

uint64_t sub_10000EC28(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x64656C676E616DLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C676E616DLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1852797802 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1852797802LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x7972616D6D7573LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972616D6D7573LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x694674757074756FLL && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease(0xEA0000000000656CLL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x694674757074756FLL, 0xEA0000000000656CLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

__n128 sub_10000EDDC@<Q0>(uint64_t a1@<X8>)
{
  v2._char countAndFlagsBits = 0xD000000000000020LL;
  v2._object = (void *)0x800000010009BE00LL;
  ArgumentHelp.init(stringLiteral:)(&v30, v2);
  ArgumentParser::ArgumentHelp v37 = v30;
  uint64_t v3 = static NameSpecification.long.getter();
  char v27 = Flag<A>.init(wrappedValue:name:help:)(0, v3, (uint64_t)&v37);
  uint64_t v5 = v4;
  char v7 = v6;
  v8._char countAndFlagsBits = 0x4A2074757074754FLL;
  v8._object = (void *)0xEB000000004E4F53LL;
  ArgumentHelp.init(stringLiteral:)(&v31, v8);
  ArgumentParser::ArgumentHelp v36 = v31;
  uint64_t v9 = static NameSpecification.long.getter();
  uint64_t v10 = Flag<A>.init(wrappedValue:name:help:)(0, v9, (uint64_t)&v36);
  uint64_t v12 = v11;
  char v14 = v13;
  v15._char countAndFlagsBits = 0xD00000000000002BLL;
  v15._object = (void *)0x800000010009BE30LL;
  ArgumentHelp.init(stringLiteral:)(&v32, v15);
  ArgumentParser::ArgumentHelp v35 = v32;
  uint64_t v16 = static NameSpecification.long.getter();
  uint64_t v17 = Flag<A>.init(wrappedValue:name:help:)(0, v16, (uint64_t)&v35);
  uint64_t v19 = v18;
  char v21 = v20;
  v22._object = (void *)0x800000010009BE60LL;
  v22._char countAndFlagsBits = 0xD000000000000010LL;
  ArgumentHelp.init(stringLiteral:)(&v33, v22);
  ArgumentParser::ArgumentHelp v34 = v33;
  uint64_t v23 = static NameSpecification.long.getter();
  char v24 = static ExitCode.success.getter();
  Option.init<A>(wrappedValue:name:parsing:help:completion:)( v23,  v24,  (uint64_t)&v34,  0LL,  0LL,  255,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  (uint64_t)&v28);
  char v25 = v29;
  __n128 result = v28;
  *(void *)a1 = v27;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v7 & 1;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v14 & 1;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v19;
  *(_BYTE *)(a1 + 64) = v21 & 1;
  *(__n128 *)(a1 + 72) = result;
  *(_BYTE *)(a1 + 88) = v25;
  return result;
}

uint64_t sub_10000EFFC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v57 = a2;
  uint64_t v3 = sub_100005104(&qword_1000B8918);
  uint64_t v58 = *(void *)(v3 - 8);
  uint64_t v59 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6._char countAndFlagsBits = 0xD000000000000020LL;
  v6._object = (void *)0x800000010009BE00LL;
  ArgumentHelp.init(stringLiteral:)(&v77, v6);
  ArgumentParser::ArgumentHelp v84 = v77;
  uint64_t v7 = static NameSpecification.long.getter();
  ArgumentParser::ArgumentHelp v63 = Flag<A>.init(wrappedValue:name:help:)(0, v7, (uint64_t)&v84);
  uint64_t v85 = v8;
  char v10 = v9;
  int v60 = v9 & 1;
  v11._char countAndFlagsBits = 0x4A2074757074754FLL;
  v11._object = (void *)0xEB000000004E4F53LL;
  ArgumentHelp.init(stringLiteral:)(&v78, v11);
  ArgumentParser::ArgumentHelp v83 = v78;
  uint64_t v12 = static NameSpecification.long.getter();
  NSString v67 = Flag<A>.init(wrappedValue:name:help:)(0, v12, (uint64_t)&v83);
  uint64_t v72 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))v13;
  int v15 = v14;
  int v70 = v14 & 1;
  v16._char countAndFlagsBits = 0xD00000000000002BLL;
  v16._object = (void *)0x800000010009BE30LL;
  ArgumentHelp.init(stringLiteral:)(&v79, v16);
  ArgumentParser::ArgumentHelp v82 = v79;
  uint64_t v17 = static NameSpecification.long.getter();
  uint64_t v69 = Flag<A>.init(wrappedValue:name:help:)(0, v17, (uint64_t)&v82);
  uint64_t v71 = v18;
  char v20 = v19;
  int v68 = v19 & 1;
  v21._object = (void *)0x800000010009BE60LL;
  v21._char countAndFlagsBits = 0xD000000000000010LL;
  ArgumentHelp.init(stringLiteral:)(&v80, v21);
  ArgumentParser::ArgumentHelp v81 = v80;
  uint64_t v22 = static NameSpecification.long.getter();
  char v23 = static ExitCode.success.getter();
  Option.init<A>(wrappedValue:name:parsing:help:completion:)( v22,  v23,  (uint64_t)&v81,  0LL,  0LL,  255,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  (uint64_t)&v74);
  ArgumentParser::ArgumentHelp v61 = v74;
  ArgumentParser::ArgumentHelp v62 = a1;
  uint64_t v66 = v75;
  LODWORD(v65) = v76;
  uint64_t v24 = a1[3];
  uint64_t v25 = a1[4];
  uint64_t v26 = a1;
  char v27 = v5;
  sub_100006270(v26, v24);
  unint64_t v28 = sub_10000F640();
  uint64_t v29 = v64;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for GenericMetadataOptions.CodingKeys,  &type metadata for GenericMetadataOptions.CodingKeys,  v28,  v24,  v25);
  if (v29)
  {
    ArgumentParser::ArgumentHelp v33 = v63;
    uint64_t v34 = v85;
    char v35 = v60;
    ArgumentParser::ArgumentHelp v36 = v67;
    uint64_t v37 = (uint64_t)v72;
    char v38 = v70;
    uint64_t v39 = (uint64_t)v61;
    sub_1000062D8(v62);
    sub_100003C60((uint64_t)v33, v34, v35);
    sub_100003C60((uint64_t)v36, v37, v38);
    sub_100003C60((uint64_t)v69, v71, v68);
    return sub_100003C50(v39, (uint64_t)v66, (char)v65);
  }

  else
  {
    char v30 = v10;
    LODWORD(v64) = v15;
    uint64_t v31 = sub_100005104(&qword_1000B88E8);
    char v73 = 0;
    uint64_t v32 = sub_1000062F8(&qword_1000B8928, &qword_1000B88E8, (uint64_t)&protocol conformance descriptor for Flag<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v74, v31, &v73, v59, v31, v32);
    sub_100003C60((uint64_t)v63, v85, v30 & 1);
    uint64_t v40 = (uint64_t)v74;
    char v73 = 1;
    uint64_t v85 = (uint64_t)v75;
    int v41 = v76;
    sub_100003B00((uint64_t)v74, (uint64_t)v75, v76);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v74, v31, &v73, v59, v31, v32);
    int v60 = v41;
    sub_100003C60((uint64_t)v67, (uint64_t)v72, v64 & 1);
    uint64_t v42 = v74;
    char v73 = 2;
    uint64_t v72 = v75;
    int v70 = v76;
    sub_100003B00((uint64_t)v74, (uint64_t)v75, v76);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v74, v31, &v73, v59, v31, v32);
    sub_100003C60((uint64_t)v69, v71, v20 & 1);
    char v43 = v74;
    uint64_t v44 = (uint64_t)v75;
    int v45 = v76;
    uint64_t v46 = sub_100005104(&qword_1000B8930);
    char v73 = 3;
    uint64_t v71 = v44;
    uint64_t v47 = v44;
    LOBYTE(v44) = v45;
    sub_100003B00((uint64_t)v43, v47, v45);
    uint64_t v48 = sub_1000062F8(&qword_1000B8938, &qword_1000B8930, (uint64_t)&protocol conformance descriptor for Option<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v74, v46, &v73, v59, v46, v48);
    uint64_t v69 = v43;
    int v68 = v45;
    sub_100003C50((uint64_t)v61, (uint64_t)v66, (char)v65);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v27, v59);
    unint64_t v65 = v75;
    uint64_t v66 = v74;
    NSString v67 = v42;
    LODWORD(v64) = v76;
    sub_100003AF0((uint64_t)v74, (uint64_t)v75, v76);
    sub_1000062D8(v62);
    sub_100003C60(v40, v85, v60);
    uint64_t v49 = (uint64_t)v72;
    LOBYTE(v45) = v70;
    sub_100003C60((uint64_t)v42, (uint64_t)v72, v70);
    uint64_t v50 = v71;
    sub_100003C60((uint64_t)v43, v71, v44);
    uint64_t v51 = (uint64_t)v65;
    uint64_t v52 = (uint64_t)v66;
    LOBYTE(v44) = v64;
    uint64_t result = sub_100003C50((uint64_t)v66, (uint64_t)v65, v64);
    char v54 = v57;
    uint64_t v55 = v85;
    *unsigned __int8 v57 = v40;
    v54[1] = v55;
    *((_BYTE *)v54 + 16) = v60;
    v54[3] = (uint64_t)v67;
    v54[4] = v49;
    *((_BYTE *)v54 + 40) = v45;
    v54[6] = (uint64_t)v69;
    v54[7] = v50;
    *((_BYTE *)v54 + 64) = v68;
    v54[9] = v52;
    v54[10] = v51;
    *((_BYTE *)v54 + 88) = v44;
  }

  return result;
}

unint64_t sub_10000F640()
{
  unint64_t result = qword_1000B8920;
  if (!qword_1000B8920)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097044, &type metadata for GenericMetadataOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8920);
  }

  return result;
}

unint64_t sub_10000F684()
{
  unint64_t result = qword_1000B8948;
  if (!qword_1000B8948)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096FF4, &type metadata for BacktraceOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8948);
  }

  return result;
}

unint64_t sub_10000F6C8()
{
  unint64_t result = qword_1000B8958;
  if (!qword_1000B8958)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096FA4, &type metadata for UniversalOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8958);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for UniversalOptions.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10000F758 + 4 * byte_100096BB9[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10000F78C + 4 * byte_100096BB4[v4]))();
}

uint64_t sub_10000F78C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F794(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000F79CLL);
  }
  return result;
}

uint64_t sub_10000F7A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000F7B0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10000F7B4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F7BC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UniversalOptions.CodingKeys()
{
  return &type metadata for UniversalOptions.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BacktraceOptions.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10000F824 + 4 * byte_100096BC3[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10000F858 + 4 * byte_100096BBE[v4]))();
}

uint64_t sub_10000F858(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F860(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000F868LL);
  }
  return result;
}

uint64_t sub_10000F874(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000F87CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10000F880(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F888(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BacktraceOptions.CodingKeys()
{
  return &type metadata for BacktraceOptions.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GenericMetadataOptions.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for GenericMetadataOptions.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10000F980 + 4 * byte_100096BCD[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10000F9B4 + 4 * byte_100096BC8[v4]))();
}

uint64_t sub_10000F9B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F9BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000F9C4LL);
  }
  return result;
}

uint64_t sub_10000F9D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000F9D8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10000F9DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F9E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenericMetadataOptions.CodingKeys()
{
  return &type metadata for GenericMetadataOptions.CodingKeys;
}

unint64_t sub_10000FA04()
{
  unint64_t result = qword_1000B8968;
  if (!qword_1000B8968)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096E0C, &type metadata for GenericMetadataOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8968);
  }

  return result;
}

unint64_t sub_10000FA4C()
{
  unint64_t result = qword_1000B8970;
  if (!qword_1000B8970)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096EC4, &type metadata for BacktraceOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8970);
  }

  return result;
}

unint64_t sub_10000FA94()
{
  unint64_t result = qword_1000B8978;
  if (!qword_1000B8978)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096F7C, &type metadata for UniversalOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8978);
  }

  return result;
}

unint64_t sub_10000FADC()
{
  unint64_t result = qword_1000B8980;
  if (!qword_1000B8980)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096EEC, &type metadata for UniversalOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8980);
  }

  return result;
}

unint64_t sub_10000FB24()
{
  unint64_t result = qword_1000B8988;
  if (!qword_1000B8988)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096F14, &type metadata for UniversalOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8988);
  }

  return result;
}

unint64_t sub_10000FB6C()
{
  unint64_t result = qword_1000B8990;
  if (!qword_1000B8990)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096E34, &type metadata for BacktraceOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8990);
  }

  return result;
}

unint64_t sub_10000FBB4()
{
  unint64_t result = qword_1000B8998;
  if (!qword_1000B8998)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096E5C, &type metadata for BacktraceOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8998);
  }

  return result;
}

unint64_t sub_10000FBFC()
{
  unint64_t result = qword_1000B89A0;
  if (!qword_1000B89A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096D7C, &type metadata for GenericMetadataOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B89A0);
  }

  return result;
}

unint64_t sub_10000FC44()
{
  unint64_t result = qword_1000B89A8;
  if (!qword_1000B89A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096DA4, &type metadata for GenericMetadataOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B89A8);
  }

  return result;
}

ValueMetadata *type metadata accessor for DumpArrays()
{
  return &type metadata for DumpArrays;
}

double sub_10000FCB8()
{
  xmmword_1000BA300 = v7;
  unk_1000BA310 = v8;
  qword_1000BA320 = v9;
  xmmword_1000BA2C0 = v3;
  unk_1000BA2D0 = v4;
  xmmword_1000BA2E0 = v5;
  unk_1000BA2F0 = v6;
  double result = *(double *)&v2;
  xmmword_1000BA2A0 = v1;
  *(_OWORD *)algn_1000BA2B0 = v2;
  return result;
}

uint64_t sub_10000FD68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B8758);
  uint64_t v5 = swift_allocObject(v4, 160LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1000970C0;
  *(void *)(v5 + 32) = 0x73736572646441LL;
  *(void *)(v5 + 40) = 0xE700000000000000LL;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = 1702521171LL;
  *(void *)(v5 + 72) = 0xE400000000000000LL;
  *(void *)(v5 + 88) = &type metadata for String;
  *(void *)(v5 + 96) = 0x746E756F43LL;
  *(void *)(v5 + 104) = 0xE500000000000000LL;
  *(void *)(v5 + 152) = &type metadata for String;
  *(void *)(v5 + 120) = &type metadata for String;
  *(void *)(v5 + 128) = 0x7373616C43207349LL;
  *(void *)(v5 + 136) = 0xE800000000000000LL;
  print(_:separator:terminator:)(v5, 9LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  swift_bridgeObjectRelease(v5);
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v6 = swift_allocObject(&unk_1000AEA60, 32LL, 7LL);
  *(void *)(v6 + 16) = sub_100010514;
  *(void *)(v6 + 24) = &v13;
  uint64_t v7 = swift_allocObject(&unk_1000AEA88, 32LL, 7LL);
  *(void *)(v7 + 16) = sub_10001052C;
  *(void *)(v7 + 24) = v6;
  v12[0] = sub_10000B498;
  v12[1] = v7;
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  uint64_t v9 = qword_1000B8710;
  swift_retain(v6);
  if (v9 != -1) {
    swift_once(&qword_1000B8710, sub_10001E3F0);
  }
  off_1000BA4C8(v8, v12, 1LL, sub_100011698);
  swift_release(v7);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v6, "", 139LL, 190LL, 5LL, 0LL);
  uint64_t result = swift_release(v6);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000FF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_reflection_metadataForObject(*(void *)(a3 + 40), a1);
  if (!result) {
    return result;
  }
  uint64_t v9 = *(void *)(a3 + 40);
  if (!v9)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v10 = result;
  uint64_t result = swift_reflection_typeRefForMetadata(*(void *)(a3 + 40), result);
  if (!result) {
    return result;
  }
  uint64_t result = swift_reflection_copyNameForTypeRef(v9, result, 0LL);
  if (!result) {
    return result;
  }
  Swift::String v11 = (void *)result;
  String.init(cString:)(result);
  uint64_t v13 = v12;
  free(v11);
  v14._object = (void *)0x800000010009BB60LL;
  v14._char countAndFlagsBits = 0xD00000000000001DLL;
  LOBYTE(v11) = String.hasPrefix(_:)(v14);
  uint64_t result = swift_bridgeObjectRelease(v13);
  swift_getObjectType(a3);
  uint64_t result = (*(uint64_t (**)(void))(a4 + 72))();
  uint64_t v15 = *(void *)(a3 + 40);
  if (!v15) {
    goto LABEL_23;
  }
  Swift::String v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))result;
  swift_unknownObjectRetain(a3);
  uint64_t result = sub_100008B54(v10, v15);
  if (!*(void *)(a3 + 40))
  {
LABEL_24:
    __break(1u);
    return result;
  }

  char v17 = result;
  uint64_t v18 = v16(a3, a1, 24LL, 0LL);
  uint64_t v19 = v18;
  if (v18) {
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else {
    uint64_t v20 = 0LL;
  }
  uint64_t v21 = sub_100005104(&qword_1000B8758);
  uint64_t v22 = swift_allocObject(v21, 64LL, 7LL);
  *(_OWORD *)(v22 + 16) = xmmword_100096510;
  uint64_t v41 = 30768LL;
  unint64_t v42 = 0xE200000000000000LL;
  uint64_t v40 = a1;
  unint64_t v23 = sub_1000058CC();
  v24._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v40, 16LL, 0LL, &type metadata for UInt64, v23);
  object = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  v26._char countAndFlagsBits = 9LL;
  v26._object = (void *)0xE100000000000000LL;
  String.append(_:)(v26);
  uint64_t v40 = a2;
  v27._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  unint64_t v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  v29._char countAndFlagsBits = 9LL;
  v29._object = (void *)0xE100000000000000LL;
  String.append(_:)(v29);
  if (v19)
  {
    uint64_t v40 = v20;
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    unint64_t v32 = v31;
  }

  else
  {
    unint64_t v32 = 0xE90000000000003ELL;
    uint64_t v30 = 0x6E776F6E6B6E753CLL;
  }

  unint64_t v33 = v32;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease(v32);
  v34._char countAndFlagsBits = 9LL;
  v34._object = (void *)0xE100000000000000LL;
  String.append(_:)(v34);
  if ((v17 & 1) != 0) {
    uint64_t v35 = 1702195828LL;
  }
  else {
    uint64_t v35 = 0x65736C6166LL;
  }
  if ((v17 & 1) != 0) {
    unint64_t v36 = 0xE400000000000000LL;
  }
  else {
    unint64_t v36 = 0xE500000000000000LL;
  }
  unint64_t v37 = v36;
  String.append(_:)(*(Swift::String *)&v35);
  swift_bridgeObjectRelease(v36);
  uint64_t v38 = v41;
  unint64_t v39 = v42;
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 32) = v38;
  *(void *)(v22 + 40) = v39;
  print(_:separator:terminator:)(v22, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  return swift_bridgeObjectRelease(v22);
}

uint64_t sub_100010244(uint64_t a1)
{
  unint64_t v2 = sub_10001093C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001026C(uint64_t a1)
{
  unint64_t v2 = sub_10001093C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100010294@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000B8658 != -1) {
    swift_once(&qword_1000B8658, sub_10000FCB8);
  }
  return sub_100005980((uint64_t)&xmmword_1000BA2A0, a1);
}

uint64_t sub_1000102E4()
{
  uint64_t v0 = sub_100005104(&qword_1000B8740);
  OptionGroup.wrappedValue.getter(v0, v1, v2, (uint64_t)&v12);
  uint64_t v3 = v12;
  uint64_t v4 = v13;
  char v5 = v14;
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  int v21 = v20;
  sub_10000B4A0(v12, v13, v14, v15, v16, v17);
  sub_100003C50(v3, v4, v5);
  sub_100003C60(v6, v7, v8);
  return sub_100003C60(v9, v10, v21);
}

double sub_1000103EC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }

  return result;
}

unint64_t sub_100010444(uint64_t a1)
{
  unint64_t result = sub_100010468();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100010468()
{
  unint64_t result = qword_1000B89B0;
  if (!qword_1000B89B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000970F4, &type metadata for DumpArrays);
    atomic_store(result, (unint64_t *)&qword_1000B89B0);
  }

  return result;
}

unint64_t sub_1000104AC(uint64_t a1)
{
  unint64_t result = sub_1000104D0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000104D0()
{
  unint64_t result = qword_1000B89B8;
  if (!qword_1000B89B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009711C, &type metadata for DumpArrays);
    atomic_store(result, (unint64_t *)&qword_1000B89B8);
  }

  return result;
}

uint64_t sub_100010514(uint64_t a1, uint64_t a2)
{
  return sub_10000FF68(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10001051C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001052C(uint64_t a1, uint64_t a2)
{
  return sub_10001E568(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_100010534()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100010558@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v57 = a2;
  uint64_t v3 = sub_100005104(&qword_1000B89C0);
  uint64_t v59 = *(void *)(v3 - 8);
  uint64_t v60 = v3;
  __chkstk_darwin(v3);
  __int128 v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(unsigned __int8 *)ArgumentVisibility.default.unsafeMutableAddressor();
  unint64_t v7 = sub_1000059BC();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v6,  (uint64_t)&type metadata for UniversalOptions,  v7,  (uint64_t)&v68);
  uint64_t v61 = v69;
  uint64_t v62 = v68;
  uint64_t v8 = v71;
  uint64_t v82 = v70;
  uint64_t v9 = v72;
  uint64_t v65 = v74;
  uint64_t v66 = v73;
  uint64_t v64 = v75;
  int v10 = v76;
  int v11 = v77;
  uint64_t v67 = v81;
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100006270(a1, v12);
  unint64_t v14 = sub_10001093C();
  uint64_t v58 = v5;
  char v15 = v82;
  uint64_t v16 = v13;
  uint64_t v18 = v62;
  uint64_t v17 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DumpArrays.CodingKeys,  &type metadata for DumpArrays.CodingKeys,  v14,  v12,  v16);
  uint64_t v19 = v61;
  if (v17)
  {
    sub_1000062D8(a1);
    sub_100003BCC(v18, v19, v15, v8, v9, v66, v65, v64, v10, v11);
    return swift_bridgeObjectRelease(v67);
  }

  else
  {
    int v54 = v11;
    int v55 = v10;
    uint64_t v56 = v9;
    uint64_t v63 = v8;
    uint64_t v20 = v61;
    uint64_t v21 = v67;
    uint64_t v22 = sub_100005104(&qword_1000B8740);
    unint64_t v23 = sub_100007B88();
    uint64_t v24 = v22;
    uint64_t v25 = v60;
    uint64_t v26 = v22;
    Swift::String v27 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v68, v24, v28, v60, v26, v23);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v25);
    uint64_t v29 = v69;
    uint64_t v46 = v68;
    char v30 = v70;
    uint64_t v51 = v71;
    uint64_t v50 = v72;
    uint64_t v49 = v73;
    uint64_t v31 = v75;
    uint64_t v47 = v74;
    int v52 = v76;
    LODWORD(v60) = v77;
    LODWORD(v59) = v78;
    LODWORD(v58) = v79;
    uint64_t v32 = v81;
    uint64_t v53 = v80;
    uint64_t v48 = v81;
    uint64_t v44 = v69;
    uint64_t v45 = v70;
    sub_100003A6C(v68, v69, v70, v71, v72, v73, v74, v75, v76, v77);
    swift_bridgeObjectRetain(v32);
    sub_100003BCC(v18, v20, v82, v63, v56, v66, v65, v64, v55, v54);
    swift_bridgeObjectRelease(v21);
    sub_1000062D8(a1);
    LOBYTE(v32) = v52;
    uint64_t v33 = v46;
    char v34 = v30;
    uint64_t v35 = v51;
    uint64_t v36 = v50;
    uint64_t v37 = v49;
    uint64_t v38 = v47;
    sub_100003BCC(v46, v29, v34, v51, v50, v49, v47, v31, v52, v60);
    uint64_t v39 = v48;
    uint64_t result = swift_bridgeObjectRelease(v48);
    uint64_t v41 = v57;
    uint64_t v42 = v44;
    *unsigned __int8 v57 = v33;
    v41[1] = v42;
    v41[2] = v45;
    v41[3] = v35;
    v41[4] = v36;
    v41[5] = v37;
    v41[6] = v38;
    v41[7] = v31;
    *((_BYTE *)v41 + 64) = v32;
    *((_BYTE *)v41 + 65) = v60;
    *((_BYTE *)v41 + 66) = v59;
    *((_BYTE *)v41 + 67) = (_BYTE)v58;
    v41[9] = v53;
    v41[10] = v39;
  }

  return result;
}

unint64_t sub_10001093C()
{
  unint64_t result = qword_1000B89C8;
  if (!qword_1000B89C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097218, &type metadata for DumpArrays.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B89C8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DumpArrays.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000109C0 + 4 * byte_1000970D0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000109E0 + 4 * byte_1000970D5[v4]))();
  }
}

_BYTE *sub_1000109C0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000109E0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000109E8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000109F0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000109F8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100010A00(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DumpArrays.CodingKeys()
{
  return &type metadata for DumpArrays.CodingKeys;
}

unint64_t sub_100010A20()
{
  unint64_t result = qword_1000B89D0;
  if (!qword_1000B89D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000971F0, &type metadata for DumpArrays.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B89D0);
  }

  return result;
}

unint64_t sub_100010A68()
{
  unint64_t result = qword_1000B89D8;
  if (!qword_1000B89D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097160, &type metadata for DumpArrays.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B89D8);
  }

  return result;
}

unint64_t sub_100010AB0()
{
  unint64_t result = qword_1000B89E0;
  if (!qword_1000B89E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097188, &type metadata for DumpArrays.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B89E0);
  }

  return result;
}

unint64_t sub_100010AF4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1)
  {
    unint64_t v2 = *(void *)(v0 + 24);
  }

  else
  {
    uint64_t v3 = sub_1000144D4(*(_DWORD *)(v0 + 20));
    if (v4) {
      unint64_t v2 = v3;
    }
    else {
      unint64_t v2 = 0xD000000000000011LL;
    }
    uint64_t v5 = *(void *)(v0 + 32);
    if (v4) {
      unint64_t v6 = v4;
    }
    else {
      unint64_t v6 = 0x800000010009C060LL;
    }
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v6;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRelease(v5);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

char *sub_100010B7C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  if (v1)
  {
    unint64_t v2 = *(char **)(v0 + 96);
  }

  else
  {
    uint64_t v3 = v0;
    task_inspect_t v4 = *(_DWORD *)(v0 + 16);
    uint64_t v5 = type metadata accessor for DarwinRemoteProcess.PortList();
    swift_allocObject(v5, 32LL, 7LL);
    unint64_t v6 = sub_1000116B4(v4);
    if (v6)
    {
      uint64_t v7 = (uint64_t)v6;
      swift_retain(v3);
      unint64_t v2 = sub_100012DC8(v7);
      swift_release(v7);
      swift_release(v3);
    }

    else
    {
      unint64_t v2 = (char *)_swiftEmptyArrayStorage;
    }

    uint64_t v8 = *(void *)(v3 + 96);
    *(void *)(v3 + 96) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v8);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_100010C3C(uint64_t a1, int a2, uint64_t a3, _BYTE *a4)
{
  return sub_1000130B4(a2, a4);
}

uint64_t sub_100010C48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[8];
  uint64_t v4 = v2[9];
  if (qword_1000B86A8 != -1) {
    swift_once(&qword_1000B86A8, sub_10001DED8);
  }
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))off_1000BA460;
  uint64_t v6 = String.utf8CString.getter(95LL, 0xE100000000000000LL);
  uint64_t v7 = v5(v3, v4, v6 + 32);
  uint64_t v9 = v8;
  swift_release(v6);
  if (qword_1000B86E8 != -1) {
    swift_once(&qword_1000B86E8, sub_10001E200);
  }
  if (off_1000BA4A0(v7, v9))
  {
    uint64_t v11 = v2[10];
    uint64_t v10 = v2[11];
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))off_1000BA460;
    uint64_t v13 = String.utf8CString.getter(95LL, 0xE100000000000000LL);
    uint64_t v7 = v12(v11, v10, v13 + 32);
    uint64_t v9 = v14;
    swift_bridgeObjectRelease(0xE100000000000000LL);
    swift_release(v13);
  }

  else
  {
    swift_bridgeObjectRelease(0xE100000000000000LL);
  }

  if (qword_1000B86C0 != -1) {
    swift_once(&qword_1000B86C0, sub_10001E00C);
  }
  return off_1000BA478(v7, v9);
}

size_t sub_100010DC8(size_t result, uint64_t a2)
{
  if (result)
  {
    size_t v3 = result;
    uint64_t v4 = *(unsigned int *)(result + 16);
    uint64_t v5 = qword_1000B8700;
    swift_retain(result);
    if (v5 != -1) {
      swift_once(&qword_1000B8700, sub_10001E328);
    }
    uint64_t v6 = (const char *)off_1000BA4B8(v4, a2);
    if (v6)
    {
      size_t v7 = strlen(v6);
      swift_release(v3);
      if ((v7 & 0x8000000000000000LL) == 0) {
        return v7;
      }
      __break(1u);
    }

    swift_release(v3);
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_100010E68(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    unint64_t result = swift_retain(result);
    if (!a2)
    {
      swift_release(v5);
      return 0LL;
    }

    if ((a3 & 0x8000000000000000LL) == 0)
    {
      uint64_t v6 = static String._fromUTF8Repairing(_:)(a2, a3);
      uint64_t v8 = v7;
      uint64_t v9 = sub_100010C48(v6, v7);
      swift_release(v5);
      swift_bridgeObjectRelease(v8);
      return v9;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

char *sub_100010EEC(mach_port_t pid, char a2)
{
  kern_return_t v7;
  mach_error_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  void *object;
  Swift::String v13;
  char *result;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  mach_port_t *p_corpse_task_port;
  Swift::String v21;
  void *v22;
  void **v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  kern_return_t v27;
  mach_error_t v28;
  uint64_t v29;
  kern_return_t v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, const char *, unint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ReflectionContextWithDataLayout;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, unint64_t, void *);
  uint64_t v51;
  void *v52;
  char isEscapingClosureAtFileLocation;
  mach_port_t v54;
  mach_port_t corpse_task_port;
  mach_port_name_t task;
  void **aBlock;
  unint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;
  size_t v3 = v2;
  uint64_t v6 = *v2;
  v2[12] = 0LL;
  v2[4] = 0LL;
  v2[5] = 0LL;
  v2[3] = 0LL;
  *((_DWORD *)v2 + 5) = pid;
  task = 0;
  uint64_t v7 = task_for_pid(mach_task_self_, pid, &task);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_100005104(&qword_1000B8758);
    uint64_t v10 = swift_allocObject(v9, 64LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_100096510;
    aBlock = 0LL;
    uint64_t v58 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(36LL);
    swift_bridgeObjectRelease(v58);
    aBlock = (void **)0xD00000000000001BLL;
    uint64_t v58 = 0x800000010009C080LL;
    corpse_task_port = pid;
    v11._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._char countAndFlagsBits = 8250LL;
    v13._object = (void *)0xE200000000000000LL;
    String.append(_:)(v13);
    unint64_t result = mach_error_string(v8);
    if (result)
    {
      v15._char countAndFlagsBits = String.init(cString:)(result);
      uint64_t v16 = v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v16);
      v17._char countAndFlagsBits = 32LL;
      v17._object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      v18._char countAndFlagsBits = 30768LL;
      v18._object = (void *)0xE200000000000000LL;
      String.append(_:)(v18);
      corpse_task_port = v8;
      uint64_t v19 = sub_1000131F4();
      p_corpse_task_port = &corpse_task_port;
LABEL_4:
      v21._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)( p_corpse_task_port,  16LL,  0LL,  &type metadata for Int32,  v19);
      uint64_t v22 = v21._object;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(v22);
      unint64_t v23 = aBlock;
      uint64_t v24 = v58;
      *(void *)(v10 + 56) = &type metadata for String;
      *(void *)(v10 + 32) = v23;
      *(void *)(v10 + 40) = v24;
      if (qword_1000B8660 != -1) {
        swift_once(&qword_1000B8660, sub_1000134EC);
      }
      swift_beginAccess(&qword_1000BA328, &aBlock, 33LL, 0LL);
      uint64_t v25 = sub_10000B3C8();
      print<A>(_:separator:terminator:to:)( v10,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v25);
      swift_endAccess(&aBlock);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v3[4]);
      swift_bridgeObjectRelease(v3[12]);
      swift_deallocPartialClassInstance(v3, v6, 104LL, 7LL);
      return 0LL;
    }

    __break(1u);
    goto LABEL_33;
  }

  uint64_t v26 = task;
  if ((a2 & 1) == 0)
  {
LABEL_22:
    *((_DWORD *)v3 + 4) = v26;
    if (qword_1000B8698 != -1) {
      swift_once(&qword_1000B8698, sub_10001DE10);
    }
    uint64_t v39 = off_1000BA450(v26);
    uint64_t v41 = v40;
    v3[6] = v39;
    v3[7] = v40;
    if (qword_1000B86A0 != -1) {
      swift_once(&qword_1000B86A0, sub_10001DE74);
    }
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, const char *, unint64_t))off_1000BA458;
    v3[8] = off_1000BA458(v39, v41, "libswiftCore.dylib", 0x8000000000000000LL);
    void v3[9] = v43;
    v3[10] = v42(v3[6], v3[7], "libswift_Concurrency.dylib", 0x8000000000000000LL);
    v3[11] = v44;
    sub_10001D9D0(*((unsigned int *)v3 + 4));
    uint64_t v45 = variable initialization expression of ToolInfoV0.serializationVersion();
    uint64_t v46 = swift_retain(v3);
    ReflectionContextWithDataLayout = swift_reflection_createReflectionContextWithDataLayout( v46,  sub_100010C3C,  v45,  sub_100010DC4,  sub_100010DC8,  sub_100010EE8);
    if (ReflectionContextWithDataLayout)
    {
      v3[5] = ReflectionContextWithDataLayout;
      uint64_t v48 = v3[6];
      uint64_t v49 = v3[7];
      if (qword_1000B86D8 != -1) {
        swift_once(&qword_1000B86D8, sub_10001E138);
      }
      uint64_t v50 = (void (*)(uint64_t, uint64_t, unint64_t, void *))off_1000BA490;
      uint64_t v51 = swift_allocObject(&unk_1000AEC78, 32LL, 7LL);
      *(void *)(v51 + 16) = sub_1000132AC;
      *(void *)(v51 + 24) = v3;
      uint64_t v61 = sub_1000132C4;
      uint64_t v62 = v51;
      aBlock = _NSConcreteStackBlock;
      uint64_t v58 = 1107296256LL;
      uint64_t v59 = sub_100011BCC;
      uint64_t v60 = &unk_1000AEC90;
      int v52 = _Block_copy(&aBlock);
      swift_retain(v51);
      v50(v48, v49, 0x8000000000000000LL, v52);
      _Block_release(v52);
      swift_release(v62);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v51, "", 144LL, 177LL, 57LL, 1LL);
      swift_release(v51);
      if ((isEscapingClosureAtFileLocation & 1) == 0) {
        return (char *)v3;
      }
      __break(1u);
    }

    swift_release(v3);
    return 0LL;
  }

  corpse_task_port = 0;
  Swift::String v27 = task_generate_corpse(task, &corpse_task_port);
  if (!v27)
  {
LABEL_16:
    if (qword_1000B8708 != -1) {
      swift_once(&qword_1000B8708, sub_10001E38C);
    }
    off_1000BA4C0(v26);
    mach_port_deallocate(mach_task_self_, v26);
    uint64_t v26 = corpse_task_port;
    task = corpse_task_port;
    goto LABEL_22;
  }

  uint64_t v28 = v27;
  if (v27 == 6)
  {
    uint64_t v29 = 0LL;
    do
    {
      sleep(1LL << v29);
      if (v29 == 5)
      {
        uint64_t v26 = task;
        goto LABEL_22;
      }

      char v30 = task_generate_corpse(v26, &corpse_task_port);
      ++v29;
    }

    while (v30 == 6);
    uint64_t v28 = v30;
    if (v30) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }

LABEL_33:
  __break(1u);
  return result;
}

        uint64_t v13 = (v23 - 1) & v23;
        uint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      uint64_t v29 = 8 * v21;
      char v30 = *(void *)(v5 + 56);
      uint64_t v31 = *(void *)(*(void *)(v5 + 48) + v29);
      uint64_t v32 = *(void *)(v30 + v29);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v30 + v29));
      }
      unint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v31);
      char v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          Swift::String v27 = v17 == v26;
          if (v17 == v26) {
            uint64_t v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }

        while (v28 == -1);
        uint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v31;
      *(void *)(*(void *)(v8 + 56) + v19) = v32;
      ++*(void *)(v8 + 16);
    }
  }

  unint64_t result = swift_release(v5);
  *size_t v3 = v8;
  return result;
}

    uint64_t v11 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    uint64_t v35 = *v33;
    char v34 = v33[1];
    uint64_t v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    uint64_t v37 = *v36;
    uint64_t v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    unint64_t result = Hasher._finalize()();
    char v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        char v30 = v17 == v29;
        if (v17 == v29) {
          uint64_t v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = 16 * v18;
    uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    *uint64_t v20 = v35;
    v20[1] = v34;
    uint64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
    *uint64_t v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  size_t v3 = v40;
  uint64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  unint64_t result = swift_release(v5);
  *size_t v3 = v8;
  return result;
}

        uint64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }

      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      uint64_t v29 = *(void *)(v5 + 56) + 112 * v20;
      char v30 = *(void *)v29;
      uint64_t v31 = *(void *)(v29 + 8);
      uint64_t v32 = *(_BYTE *)(v29 + 16);
      uint64_t v33 = *(_BYTE *)(v29 + 17);
      int v55 = *(_BYTE *)(v29 + 19);
      uint64_t v56 = *(_BYTE *)(v29 + 18);
      uint64_t v53 = *(_BYTE *)(v29 + 24);
      int v54 = *(_DWORD *)(v29 + 20);
      uint64_t v51 = *(_BYTE *)(v29 + 26);
      int v52 = *(_BYTE *)(v29 + 25);
      uint64_t v49 = *(_BYTE *)(v29 + 28);
      uint64_t v50 = *(_BYTE *)(v29 + 27);
      uint64_t v47 = *(_DWORD *)(v29 + 32);
      uint64_t v48 = *(_BYTE *)(v29 + 29);
      uint64_t v46 = *(_BYTE *)(v29 + 36);
      uint64_t v58 = *(_OWORD *)(v29 + 40);
      unsigned __int8 v57 = *(_OWORD *)(v29 + 56);
      char v34 = *(void *)(v29 + 80);
      uint64_t v35 = *(void *)(v29 + 88);
      uint64_t v44 = *(void *)(v29 + 96);
      uint64_t v45 = *(void *)(v29 + 72);
      uint64_t v43 = *(_BYTE *)(v29 + 104);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v35);
      }

      unint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v28);
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      char v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0LL;
          }
          v24 |= v26;
          Swift::String v27 = *(void *)(v13 + 8 * v16);
        }

        while (v27 == -1);
        uint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(void *)(*(void *)(v8 + 48) + 8 * v17) = v28;
      uint64_t v18 = *(void *)(v8 + 56) + 112 * v17;
      *(void *)uint64_t v18 = v30;
      *(void *)(v18 + 8) = v31;
      *(_BYTE *)(v18 + 16) = v32;
      *(_BYTE *)(v18 + 17) = v33;
      *(_BYTE *)(v18 + 18) = v56;
      *(_BYTE *)(v18 + 19) = v55;
      *(_DWORD *)(v18 + 20) = v54;
      *(_BYTE *)(v18 + 24) = v53;
      *(_BYTE *)(v18 + 25) = v52;
      *(_BYTE *)(v18 + 26) = v51;
      *(_BYTE *)(v18 + 27) = v50;
      *(_BYTE *)(v18 + 28) = v49;
      *(_BYTE *)(v18 + 29) = v48;
      *(_DWORD *)(v18 + 32) = v47;
      *(_BYTE *)(v18 + 36) = v46;
      *(_OWORD *)(v18 + 40) = v58;
      *(_OWORD *)(v18 + 56) = v57;
      *(void *)(v18 + 72) = v45;
      *(void *)(v18 + 80) = v34;
      *(void *)(v18 + 88) = v35;
      *(void *)(v18 + 96) = v44;
      *(_BYTE *)(v18 + 104) = v43;
      ++*(void *)(v8 + 16);
      uint64_t v5 = v41;
    }
  }

  unint64_t result = swift_release(v5);
LABEL_43:
  *size_t v3 = v8;
  return result;
}

        uint64_t v13 = (v23 - 1) & v23;
        uint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v21);
      uint64_t v33 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*((void *)&v33 + 1));
      }
      unint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v29);
      uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v17 = result & ~v16;
      uint64_t v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          Swift::String v27 = v18 == v26;
          if (v18 == v26) {
            uint64_t v18 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v15 + 8 * v18);
        }

        while (v28 == -1);
        uint64_t v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }

      *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      *(void *)(*(void *)(v8 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v19) = v33;
      ++*(void *)(v8 + 16);
    }
  }

  unint64_t result = swift_release(v5);
LABEL_43:
  *size_t v3 = v8;
  return result;
}

      uint64_t v22 = 0LL;
      unint64_t v23 = 0;
      uint64_t v19 = 0uLL;
      *((_OWORD *)v8 + 1) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      uint64_t v20 = 0uLL;
      uint64_t v21 = 0uLL;
LABEL_34:
      *((_OWORD *)v8 + 3) = v19;
      *((_OWORD *)v8 + 4) = v20;
      *((_OWORD *)v8 + 5) = v21;
      v8[12] = v22;
      *((_BYTE *)v8 + 104) = v23;
      return sub_100028FF0;
    }

    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100025C88();
      goto LABEL_7;
    }

    sub_100024444(v14, a3 & 1);
    uint64_t v39 = sub_100023B88(a2);
    if ((v15 & 1) == (v40 & 1))
    {
      uint64_t v11 = v39;
      v8[16] = v39;
      if ((v15 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_33;
    }
  }

  unint64_t result = (void (*)(uint64_t **, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

  *(void *)&int v54 = v8;
  char v30 = sub_100005104(&qword_1000B90C8);
  uint64_t v31 = sub_10005EC18();
  uint64_t v32 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v30, v31);
  char v34 = v33;
  swift_bridgeObjectRelease(v8);
  uint64_t v50 = 15392LL;
  uint64_t v51 = 0xE200000000000000LL;
  uint64_t v35 = *(Swift::String *)(v0 + 88);
  uint64_t v58 = *(_OWORD *)(v0 + 72);
  uint64_t v59 = v35;
  uint64_t v60 = *(_OWORD *)(v0 + 104);
  uint64_t v61 = *(void *)(v0 + 120);
  uint64_t v36 = *(_OWORD *)(v0 + 24);
  int v54 = *(_OWORD *)(v0 + 8);
  int v55 = v36;
  uint64_t v37 = *(_OWORD *)(v0 + 56);
  uint64_t v56 = *(_OWORD *)(v0 + 40);
  unsigned __int8 v57 = v37;
  int v52 = v59;
  uint64_t v38 = v59._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v38)
  {
    uint64_t v49 = v59;
    swift_bridgeObjectRetain(v59._object);
  }

  else
  {
    swift_bridgeObjectRetain(v59._object);
    sub_10005D218((void *)v0, (unint64_t *)&v49);
    sub_100030564((uint64_t)&v52);
  }

  uint64_t v43 = v49._object;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v43);
  v44._char countAndFlagsBits = 62LL;
  v44._object = (void *)0xE100000000000000LL;
  String.append(_:)(v44);
  uint64_t v45 = v50;
  uint64_t v46 = (void *)v51;
  uint64_t v50 = v32;
  uint64_t v51 = v34;
  swift_bridgeObjectRetain(v34);
  v47._char countAndFlagsBits = v45;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v46);
  return v50;
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    char v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    unint64_t result = Hasher._finalize()();
    char v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      Swift::String v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  unint64_t result = swift_release(v5);
  *size_t v3 = v8;
  return result;
}

        uint64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }

      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(v5 + 48);
      char v30 = *(void *)(v29 + v28);
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
      {
        swift_retain(*(void *)(v29 + v28));
        swift_retain(v31);
      }

      Hasher.init(_seed:)(v36, *(void *)(v8 + 40));
      Hasher._combine(_:)(v30);
      unint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      char v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0LL;
          }
          v24 |= v26;
          Swift::String v27 = *(void *)(v13 + 8 * v16);
        }

        while (v27 == -1);
        uint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v8 + 48) + v18) = v30;
      *(void *)(*(void *)(v8 + 56) + v18) = v31;
      ++*(void *)(v8 + 16);
    }
  }

  unint64_t result = swift_release(v5);
LABEL_43:
  *size_t v3 = v8;
  return result;
}

  swift_bridgeObjectRetain(v30);
LABEL_35:
  LOBYTE(v52) = a1;
  BYTE1(v52) = a2 & 1;
  *((void *)&v52 + 1) = a3;
  v53.n128_u64[0] = v31;
  v53.n128_u8[8] = a5 & 1;
  v53.n128_u8[9] = a6 & 1;
  *(void *)&int v54 = v20;
  *((void *)&v54 + 1) = a8;
  *(void *)&int v55 = v37;
  *((void *)&v55 + 1) = a11;
  *(void *)&uint64_t v56 = v51;
  *((void *)&v56 + 1) = v24;
  *(void *)&unsigned __int8 v57 = v50;
  *((void *)&v57 + 1) = v23;
  *(void *)&uint64_t v58 = v27;
  *((void *)&v58 + 1) = v43;
  *(void *)&uint64_t v59 = v30;
  *((void *)&v59 + 1) = v35;
  uint64_t v60 = v33;
  sub_100091D50(&v52);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(a11);
  swift_bridgeObjectRelease(v31);
  sub_100091DE0(&v52);
  uint64_t v39 = v59;
  *(_OWORD *)(a9 + 96) = v58;
  *(_OWORD *)(a9 + 112) = v39;
  *(void *)(a9 + 128) = v60;
  uint64_t v40 = v55;
  *(_OWORD *)(a9 + 32) = v54;
  *(_OWORD *)(a9 + 48) = v40;
  uint64_t v41 = v57;
  *(_OWORD *)(a9 + 64) = v56;
  *(_OWORD *)(a9 + 80) = v41;
  unint64_t result = v53;
  *(_OWORD *)a9 = v52;
  *(__n128 *)(a9 + 16) = result;
  return result;
}

uint64_t sub_10001153C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1000B86E0 != -1) {
    swift_once(&qword_1000B86E0, sub_10001E19C);
  }
  uint64_t v6 = off_1000BA498(a1, a2);
  return swift_reflection_addImage(*(void *)(a3 + 40), v6);
}

uint64_t sub_1000115AC()
{
  uint64_t v1 = *(unsigned int *)(v0 + 16);
  if (qword_1000B8708 != -1) {
    swift_once(&qword_1000B8708, sub_10001E38C);
  }
  off_1000BA4C0(v1);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  if (qword_1000B8690 != -1) {
    swift_once(&qword_1000B8690, sub_10001DDAC);
  }
  off_1000BA448(v2, v3);
  mach_port_deallocate(mach_task_self_, *(_DWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t type metadata accessor for DarwinRemoteProcess()
{
  return objc_opt_self(&OBJC_CLASS____TtC13swift_inspect19DarwinRemoteProcess);
}

uint64_t sub_100011698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  return sub_100013238(a2, a4, a5);
}

uint64_t (*sub_1000116A8())()
{
  return sub_100010DC4;
}

char *sub_1000116B4(task_inspect_t a1)
{
  kern_return_t v3;
  mach_error_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  Swift::String v8;
  void *object;
  Swift::String v10;
  unint64_t v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mach_error_t v19;
  unint64_t v20;
  unint64_t v21;
  mach_msg_type_number_t act_listCnt;
  thread_act_array_t act_list;
  uint64_t v2 = v1;
  act_list = 0LL;
  act_listCnt = 0;
  uint64_t v3 = task_threads(a1, &act_list, &act_listCnt);
  if (!v3)
  {
    uint64_t v18 = act_listCnt;
    *(void *)(v1 + 16) = act_list;
    *(void *)(v1 + 24) = v18;
    return (char *)v2;
  }

  uint64_t v4 = v3;
  uint64_t v5 = sub_100005104(&qword_1000B8758);
  uint64_t v6 = swift_allocObject(v5, 64LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_100096510;
  _StringGuts.grow(_:)(47LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v20 = 0xD000000000000026LL;
  uint64_t v21 = 0x800000010009C030LL;
  unint64_t result = mach_error_string(v4);
  if (result)
  {
    v8._char countAndFlagsBits = String.init(cString:)(result);
    object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    v10._char countAndFlagsBits = 2016421920LL;
    v10._object = (void *)0xE400000000000000LL;
    String.append(_:)(v10);
    uint64_t v19 = v4;
    uint64_t v11 = sub_1000131F4();
    v12._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v19, 16LL, 0LL, &type metadata for Int32, v11);
    uint64_t v13 = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v13);
    v14._char countAndFlagsBits = 41LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    char v15 = v20;
    uint64_t v16 = v21;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 32) = v15;
    *(void *)(v6 + 40) = v16;
    print(_:separator:terminator:)(v6, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    swift_bridgeObjectRelease(v6);
    uint64_t v17 = type metadata accessor for DarwinRemoteProcess.PortList();
    swift_deallocPartialClassInstance(v1, v17, 32LL, 7LL);
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_10001187C()
{
  vm_address_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  if (v1)
  {
    if (!v2)
    {
LABEL_7:
      vm_deallocate(mach_task_self_, v1, 4 * v2);
      return swift_deallocClassInstance(v0, 32LL, 7LL);
    }

    uint64_t v3 = 4 * v2;
    uint64_t v4 = *(mach_port_name_t **)(v0 + 16);
    do
    {
      mach_port_name_t v5 = *v4++;
      uint64_t result = mach_port_deallocate(mach_task_self_, v5);
      v3 -= 4LL;
    }

    while (v3);
  }

  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (!(v2 >> 62))
  {
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for DarwinRemoteProcess.PortList()
{
  return objc_opt_self(&OBJC_CLASS____TtCC13swift_inspect19DarwinRemoteProcessP33_D5D8135E9301B5EDF79E501CF67907C38PortList);
}

__n128 initializeBufferWithCopyOfBuffer for DarwinRemoteProcess.ThreadInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DarwinRemoteProcess.ThreadInfo(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DarwinRemoteProcess.ThreadInfo(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 21) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DarwinRemoteProcess.ThreadInfo()
{
  return &type metadata for DarwinRemoteProcess.ThreadInfo;
}

unint64_t sub_1000119A8()
{
  unint64_t result = qword_1000B8B68;
  if (!qword_1000B8B68)
  {
    uint64_t v1 = sub_10000593C(&qword_1000B8B70);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UnsafeBufferPointer<A>.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_1000B8B68);
  }

  return result;
}

uint64_t sub_1000119F4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t result = swift_release(v3);
    uint64_t v7 = v4 + 4 * v5;
  }

  else
  {
    uint64_t result = swift_release(v3);
    uint64_t v7 = 0LL;
  }

  *a1 = v4;
  a1[1] = v7;
  return result;
}

uint64_t variable initialization expression of ToolInfoV0.serializationVersion()
{
  return 0LL;
}

uint64_t static SingleValueParsingStrategy.unconditional.getter()
{
  return 2LL;
}

uint64_t sub_100011A50()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100012994(*v0);
  swift_release(v1);
  return v2;
}

uint64_t sub_100011A84(int **a1, uint64_t a2, uint64_t a3)
{
  return sub_100012AF4(a1, a2, a3);
}

uint64_t sub_100011AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DarwinRemoteProcess.PortList();
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, v6, a3);
}

uint64_t sub_100011B0C(mach_port_name_t name)
{
  ipc_space_inspect_t v3 = *(_DWORD *)(v1 + 16);
  *(void *)object_addr = 0LL;
  if (mach_port_kernel_object(v3, name, object_addr, &object_addr[1])) {
    return 0LL;
  }
  unsigned int v4 = object_addr[1];
  uint64_t v5 = sub_100010B7C();
  uint64_t v6 = *((void *)v5 + 2);
  if (!v6)
  {
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v7 = v5 + 52;
  while ((*v7 & 1) != 0 || *((_DWORD *)v7 - 1) != v4)
  {
    v7 += 24;
    if (!--v6) {
      goto LABEL_8;
    }
  }

  uint64_t v8 = *(void *)(v7 - 20);
  swift_bridgeObjectRelease(v5);
  return v8;
}

uint64_t sub_100011BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

char *sub_100011BF4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C48);
    uint64_t v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  char v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8]) {
      memmove(v14, v15, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 4 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100011CEC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C40);
    uint64_t v11 = (char *)swift_allocObject(v10, 648 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 648);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[648 * v8]) {
      memmove(v13, v14, 648 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 648 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100011E00(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C50);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 24 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100011F14(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8BF8);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 24 * v8;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v15);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10001201C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C30);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100012114(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C58);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for ProcessMetadata);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100012214(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C70);
    uint64_t v11 = (char *)swift_allocObject(v10, 80 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[80 * v8]) {
      memmove(v13, v14, 80 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for Metadata);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100012328(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C60);
    uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v14 = sub_100005104(&qword_1000B8C68);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100012460(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C10);
    uint64_t v11 = (void *)swift_allocObject(v10, 120 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 120);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[15 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 120 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v14 = sub_100005104(&qword_1000B8C18);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100012594(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C20);
    uint64_t v11 = (void *)swift_allocObject(v10, (v9 << 7) | 0x20, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 95;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 7);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[16 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, v8 << 7);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v15 = sub_100005104(&qword_1000B8C28);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000126B4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C00);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000127B4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C08);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10001289C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C38);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_100012994(uint64_t result)
{
  uint64_t v1 = *(int **)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(result + 24);
    ipc_space_inspect_t v3 = _swiftEmptyArrayStorage;
    uint64_t v4 = 0LL;
    if (v2)
    {
      char v5 = &_swiftEmptyArrayStorage[4];
      uint64_t v6 = 4 * v2;
      while (1)
      {
        int v7 = *v1;
        if (!v4)
        {
          unint64_t v8 = v3[3];
          int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
          if (v9 <= 1) {
            uint64_t v10 = 1LL;
          }
          else {
            uint64_t v10 = v9;
          }
          uint64_t v11 = sub_100005104(&qword_1000B8BE8);
          int64_t v12 = (void *)swift_allocObject(v11, 4 * v10 + 32, 7LL);
          int64_t v13 = j__malloc_size(v12);
          uint64_t v14 = v13 - 32;
          if (v13 < 32) {
            uint64_t v14 = v13 - 29;
          }
          uint64_t v15 = v14 >> 2;
          void v12[2] = v10;
          v12[3] = 2 * (v14 >> 2);
          unint64_t v16 = (unint64_t)(v12 + 4);
          uint64_t v17 = v3[3] >> 1;
          if (v3[2])
          {
            v3[2] = 0LL;
          }

          char v5 = (_DWORD *)(v16 + 4 * v17);
          uint64_t v4 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
          uint64_t result = swift_release(v3);
          ipc_space_inspect_t v3 = v12;
        }

        BOOL v19 = __OFSUB__(v4--, 1LL);
        if (v19) {
          break;
        }
        ++v1;
        *v5++ = v7;
        v6 -= 4LL;
        if (!v6) {
          goto LABEL_24;
        }
      }

      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    ipc_space_inspect_t v3 = _swiftEmptyArrayStorage;
  }

LABEL_24:
  unint64_t v20 = v3[3];
  if (v20 < 2) {
    return (uint64_t)v3;
  }
  unint64_t v21 = v20 >> 1;
  BOOL v19 = __OFSUB__(v21, v4);
  uint64_t v22 = v21 - v4;
  if (!v19)
  {
    v3[2] = v22;
    return (uint64_t)v3;
  }

      uint64_t v2 = v87 + 1;
      swift_bridgeObjectRelease(v143);
      if (v87 + 1 == v86) {
        break;
      }
      if (v2 >= *((void *)v84 + 2))
      {
        __break(1u);
        goto LABEL_30;
      }
    }

    swift_release(v84);
  }

  else
  {
    swift_release(v152);
    return _swiftEmptyArrayStorage;
  }

  return v142;
}

        int64_t v13 = (v21 - 1) & v21;
        BOOL v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }

      unint64_t v23 = 8 * v19;
      uint64_t v24 = *(void *)(*(void *)(v5 + 48) + v23);
      uint64_t v25 = *(void *)(*(void *)(v5 + 56) + v23);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v24);
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      Swift::String v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        char v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v15 + 8 * v28);
        }

        while (v32 == -1);
        unint64_t v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v8 + 48) + v17) = v24;
      *(void *)(*(void *)(v8 + 56) + v17) = v25;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_41:
  *ipc_space_inspect_t v3 = v8;
  return result;
}

        int64_t v13 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }

      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      unint64_t v23 = *(_BYTE *)(*(void *)(v5 + 56) + v18);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v22);
      uint64_t v24 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        Swift::String v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          char v30 = *(void *)(v15 + 8 * v26);
        }

        while (v30 == -1);
        unint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v8 + 48) + 8 * v16) = v22;
      *(_BYTE *)(*(void *)(v8 + 56) + v16) = v23;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_41:
  *ipc_space_inspect_t v3 = v8;
  return result;
}

  uint64_t v25 = v77;
  uint64_t v26 = sub_100078398(v72, v14, v75, a4, v77);
  uint64_t v28 = v27[2];
  char v30 = *v27;
  uint64_t v29 = v27[1];
  v73[3] = v27[3];
  v73[2] = v28;
  v73[0] = v30;
  v73[1] = v29;
  uint64_t v31 = v27[6];
  uint64_t v33 = v27[4];
  uint64_t v32 = v27[5];
  v73[7] = v27[7];
  v73[6] = v31;
  v73[4] = v33;
  v73[5] = v32;
  char v34 = v27[10];
  uint64_t v36 = v27[8];
  uint64_t v35 = v27[9];
  v73[11] = v27[11];
  v73[10] = v34;
  v73[8] = v36;
  v73[9] = v35;
  memmove(__dst, v27, 0xC0uLL);
  sub_10002D724((uint64_t)v73);
  uint64_t result = ((uint64_t (*)(void *, void))v26)(v72, 0LL);
  if (v14 < *(void *)(v25 + 16))
  {
    ++v14;
    uint64_t v38 = __dst;
    String.init(argument:)(*(Swift::String *)(&v37 - 1));
LABEL_27:
    while (1)
    {
      sub_10005BFC4((uint64_t)__dst, (uint64_t)v72);
      sub_10005BFC4((uint64_t)v72, (uint64_t)v73);
      uint64_t v39 = *((void *)v4 + 3);
      uint64_t v40 = v39 >> 1;
      if ((uint64_t)(v39 >> 1) < v12 + 1)
      {
        uint64_t v4 = sub_100058320((char *)(v39 > 1), v12 + 1, 1, v4);
        uint64_t v40 = *((void *)v4 + 3) >> 1;
      }

      sub_10005BFC4((uint64_t)__dst, (uint64_t)v70);
      sub_10005BFC4((uint64_t)v70, (uint64_t)v71);
      if (sub_100033CB4((uint64_t)v71) != 1 && v12 < v40)
      {
        uint64_t v66 = v75;
        uint64_t v41 = v77;
        while (1)
        {
          uint64_t v42 = &v4[192 * v12 + 32];
          uint64_t v43 = v12 + 1;
          while (1)
          {
            int64_t v12 = v43;
            sub_10005BFC4((uint64_t)v70, (uint64_t)v69);
            uint64_t v44 = v69[3];
            uint64_t v46 = v69[0];
            uint64_t v45 = v69[1];
            *((_OWORD *)v42 + 2) = v69[2];
            *((_OWORD *)v42 + 3) = v44;
            *(_OWORD *)uint64_t v42 = v46;
            *((_OWORD *)v42 + 1) = v45;
            uint64_t v47 = v69[7];
            uint64_t v49 = v69[4];
            uint64_t v48 = v69[5];
            *((_OWORD *)v42 + 6) = v69[6];
            *((_OWORD *)v42 + 7) = v47;
            *((_OWORD *)v42 + 4) = v49;
            *((_OWORD *)v42 + 5) = v48;
            uint64_t v50 = v69[11];
            int v52 = v69[8];
            uint64_t v51 = v69[9];
            *((_OWORD *)v42 + 10) = v69[10];
            *((_OWORD *)v42 + 11) = v50;
            *((_OWORD *)v42 + 8) = v52;
            *((_OWORD *)v42 + 9) = v51;
            if (v14 != a4) {
              break;
            }
            sub_100033E1C(v68);
            sub_10005BFC4((uint64_t)v68, (uint64_t)__dst);
            sub_10005BFC4((uint64_t)__dst, (uint64_t)v70);
            sub_10005BFC4((uint64_t)v70, (uint64_t)v71);
            if (sub_100033CB4((uint64_t)v71) == 1)
            {
              uint64_t v14 = a4;
              *((void *)v4 + 2) = v12;
              goto LABEL_27;
            }

            v42 += 192;
            uint64_t v43 = v12 + 1;
            if (v12 >= v40)
            {
              uint64_t v14 = a4;
              *((void *)v4 + 2) = v12;
              goto LABEL_27;
            }
          }

          uint64_t v53 = sub_100078398(v67, v14, v66, a4, v41);
          int v55 = v54[3];
          unsigned __int8 v57 = *v54;
          uint64_t v56 = v54[1];
          v68[2] = v54[2];
          v68[3] = v55;
          v68[0] = v57;
          v68[1] = v56;
          uint64_t v58 = v54[7];
          uint64_t v60 = v54[4];
          uint64_t v59 = v54[5];
          v68[6] = v54[6];
          v68[7] = v58;
          v68[4] = v60;
          v68[5] = v59;
          uint64_t v61 = v54[11];
          uint64_t v63 = v54[8];
          uint64_t v62 = v54[9];
          v68[10] = v54[10];
          v68[11] = v61;
          v68[8] = v63;
          v68[9] = v62;
          memmove(__dst, v54, 0xC0uLL);
          sub_10002D724((uint64_t)v68);
          uint64_t result = ((uint64_t (*)(void *, void))v53)(v67, 0LL);
          if (v14 >= *(void *)(v41 + 16)) {
            break;
          }
          ++v14;
          uint64_t v65 = __dst;
          String.init(argument:)(*(Swift::String *)(&v64 - 1));
          sub_10005BFC4((uint64_t)__dst, (uint64_t)v70);
          sub_10005BFC4((uint64_t)v70, (uint64_t)v71);
        }

        __break(1u);
        break;
      }

    int64_t v9 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_25:
    unint64_t v21 = *(void *)(v3 + 48) + 24 * v16;
    uint64_t v22 = *(void *)v21;
    unint64_t v23 = *(void *)(v21 + 8);
    uint64_t v24 = *(unsigned __int8 *)(v21 + 16);
    Hasher.init(_seed:)(v37, *(void *)(v6 + 40));
    if (v24 >> 6)
    {
      if (v24 >> 6 == 1)
      {
        Hasher._combine(_:)(3uLL);
        Character.hash(into:)(v37, v22, v23);
        Hasher._combine(_:)(v24 & 1);
      }

      else
      {
        if (v23 | v22 || v24 != 128) {
          uint64_t v25 = 2LL;
        }
        else {
          uint64_t v25 = 0LL;
        }
        Hasher._combine(_:)(v25);
      }
    }

    else
    {
      Hasher._combine(_:)(1uLL);
      swift_bridgeObjectRetain(v23);
      String.hash(into:)(v37, v22, v23);
      Hasher._combine(_:)(v24 & 1);
      sub_10003F434(v22, v23, v24);
    }

    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1LL << *(_BYTE *)(v6 + 32);
    Swift::String v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v13 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v29 = 0;
      char v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }

        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0LL;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v10 + 8 * v28);
      }

      while (v32 == -1);
      int64_t v13 = __clz(__rbit64(~v32)) + (v28 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    uint64_t v14 = *(void *)(v6 + 48) + 24 * v13;
    *(void *)uint64_t v14 = v22;
    *(void *)(v14 + 8) = v23;
    *(_BYTE *)(v14 + 16) = v24;
    ++*(void *)(v6 + 16);
  }

  swift_release(v3);
  uint64_t v2 = v34;
  uint64_t v18 = (void *)(v3 + 56);
LABEL_45:
  uint64_t v33 = 1LL << *(_BYTE *)(v3 + 32);
  if (v33 > 63) {
    bzero(v18, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v18 = -1LL << v33;
  }
  *(void *)(v3 + 16) = 0LL;
LABEL_49:
  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v10 = (v17 - 1) & v17;
        uint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }

      BOOL v19 = *(void *)(v3 + 48) + 24 * v15;
      unint64_t v20 = *(void *)v19;
      unint64_t v21 = *(void *)(v19 + 8);
      uint64_t v22 = *(_BYTE *)(v19 + 16);
      unint64_t v23 = *(_BYTE *)(v19 + 17);
      Hasher.init(_seed:)(v36, *(void *)(v6 + 40));
      if ((v23 & 1) != 0 || (Hasher._combine(_:)(1uLL), Hasher._combine(_:)(v20), (v22 & 1) != 0))
      {
        uint64_t v24 = 0LL;
      }

      else
      {
        Hasher._combine(_:)(1uLL);
        uint64_t v24 = v21;
      }

      Hasher._combine(_:)(v24);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v26 = result & ~v25;
      Swift::String v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          char v30 = v27 == v29;
          if (v27 == v29) {
            Swift::String v27 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }

        while (v31 == -1);
        int64_t v12 = __clz(__rbit64(~v31)) + (v27 << 6);
      }

      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      int64_t v13 = *(void *)(v6 + 48) + 24 * v12;
      *(void *)int64_t v13 = v20;
      *(void *)(v13 + 8) = v21;
      *(_BYTE *)(v13 + 16) = v22;
      *(_BYTE *)(v13 + 17) = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

            v27 += 24;
            --v23;
          }

          while (v23);
        }
      }

      ++v20;
      uint64_t v11 = v68;
      char v5 = v69;
      if (v20 == v68) {
        goto LABEL_8;
      }
    }

    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }

    uint64_t v11 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (i << 6);
LABEL_25:
    uint64_t v28 = *(void *)(v5 + 48) + 24 * v23;
    uint64_t v29 = *(void *)v28;
    char v30 = *(void *)(v5 + 56) + 72 * v23;
    uint64_t v31 = *(void *)(v28 + 16);
    int v52 = i;
    uint64_t v53 = *(_OWORD *)(v28 + 8);
    if ((v51 & 1) != 0)
    {
      int v55 = *(_OWORD *)v30;
      uint64_t v32 = *(_OWORD *)(v30 + 16);
      uint64_t v33 = *(_OWORD *)(v30 + 32);
      char v34 = *(_OWORD *)(v30 + 48);
      uint64_t v59 = *(_BYTE *)(v30 + 64);
      unsigned __int8 v57 = v33;
      uint64_t v58 = v34;
      uint64_t v56 = v32;
    }

    else
    {
      sub_10005BD20(v30, (uint64_t)&v55);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v31);
    }

    Hasher.init(_seed:)(v54, *(void *)(v8 + 40));
    swift_bridgeObjectRetain(v53);
    String.hash(into:)(v54, v29, v53);
    swift_bridgeObjectRelease(v53);
    Hasher._combine(_:)(*(void *)(v31 + 16));
    uint64_t v35 = *(void *)(v31 + 16);
    if (v35)
    {
      uint64_t v36 = v5;
      swift_bridgeObjectRetain(v31);
      uint64_t v37 = (void *)(v31 + 40);
      do
      {
        uint64_t v38 = *(v37 - 1);
        uint64_t v39 = *v37;
        swift_bridgeObjectRetain(*v37);
        String.hash(into:)(v54, v38, v39);
        swift_bridgeObjectRelease(v39);
        v37 += 2;
        --v35;
      }

      while (v35);
      swift_bridgeObjectRelease(v31);
      char v5 = v36;
    }

    uint64_t result = Hasher._finalize()();
    uint64_t v40 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v41 = result & ~v40;
    uint64_t v42 = v41 >> 6;
    if (((-1LL << v41) & ~*(void *)(v12 + 8 * (v41 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v41) & ~*(void *)(v12 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0LL;
      unint64_t v16 = v53;
    }

    else
    {
      uint64_t v43 = 0;
      uint64_t v44 = (unint64_t)(63 - v40) >> 6;
      unint64_t v16 = v53;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_49;
        }

        uint64_t v45 = v42 == v44;
        if (v42 == v44) {
          uint64_t v42 = 0LL;
        }
        v43 |= v45;
        uint64_t v46 = *(void *)(v12 + 8 * v42);
      }

      while (v46 == -1);
      uint64_t v15 = __clz(__rbit64(~v46)) + (v42 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    uint64_t v17 = *(void *)(v8 + 48) + 24 * v15;
    *(void *)uint64_t v17 = v29;
    *(_OWORD *)(v17 + 8) = v16;
    uint64_t v18 = *(void *)(v8 + 56) + 72 * v15;
    *(_OWORD *)uint64_t v18 = v55;
    BOOL v19 = v56;
    unint64_t v20 = v57;
    unint64_t v21 = v58;
    *(_BYTE *)(v18 + 64) = v59;
    *(_OWORD *)(v18 + 32) = v20;
    *(_OWORD *)(v18 + 48) = v21;
    *(_OWORD *)(v18 + 16) = v19;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  ipc_space_inspect_t v3 = v48;
  uint64_t v25 = v50;
  if ((v51 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_44:
  uint64_t v47 = 1LL << *(_BYTE *)(v5 + 32);
  if (v47 >= 64) {
    bzero(v25, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v25 = -1LL << v47;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_48:
  uint64_t result = swift_release(v5);
  *ipc_space_inspect_t v3 = v8;
  return result;
}

  unint64_t v21 = v26;
  swift_release(v1);
  uint64_t result = swift_release(v21);
  uint64_t v22 = v6[3];
  if (v22 < 2) {
    return (uint64_t)v6;
  }
  unint64_t v23 = v22 >> 1;
  unint64_t v20 = __OFSUB__(v23, v7);
  uint64_t v24 = v23 - v7;
  if (!v20)
  {
    _OWORD v6[2] = v24;
    return (uint64_t)v6;
  }

LABEL_30:
  __break(1u);
  return result;
}

      uint64_t v31 = *((_DWORD *)v27 + 9);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v27);
      if ((v30 & 0x8000000000000000LL) != 0 || (uint64_t)v30 >= 1LL << *((_BYTE *)v27 + 32))
      {
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }

      if (v31 != *((_DWORD *)v27 + 9)) {
        goto LABEL_99;
      }
      unint64_t v109 = (unint64_t)v27;
      if ((result & 1) == 0)
      {
        sub_100028730();
        Swift::String v27 = (void *)v109;
      }

      uint64_t v33 = *(void *)(v27[6] + 8 * v30);
      sub_100029458(v30);
      Swift::String v27 = (void *)v109;
      char v111 = (void *)v109;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_10001FC8C(v33, (uint64_t)v113);
      uint64_t v35 = v113[0];
      char v34 = v113[1];
      uint64_t v37 = v113[2];
      uint64_t v36 = v113[3];
      uint64_t v38 = v113[4];
      uint64_t v104 = v113[6];
      unsigned __int8 v106 = v113[5];
      uint64_t v102 = v113[7];
      uint64_t v39 = v113[10];
      char v100 = v113[9];
      uint64_t v101 = v113[8];
      uint64_t v40 = v113[11];
      unint64_t v99 = v113[12];
      unint64_t v98 = v114;
      sub_10002AACC((uint64_t)v113, (uint64_t)v115, &qword_1000B9048);
      uint64_t v41 = v116;
      if (v116)
      {
        *(void *)&uint64_t v118 = v35;
        *((void *)&v118 + 1) = v34;
        uint64_t v119 = v37 & 0x101;
        unsigned __int8 v120 = BYTE2(v37) & 1;
        unsigned __int8 v121 = BYTE3(v37) & 1;
        unsigned __int8 v122 = HIDWORD(v37);
        unsigned __int8 v123 = v36 & 1;
        uint64_t v42 = (uint64x2_t)vdupq_n_s64(v36);
        uint64_t v43 = (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v42, (uint64x2_t)xmmword_100097C00),  (int32x4_t)vshlq_u64(v42, (uint64x2_t)xmmword_100097BF0));
        *(int8x8_t *)v43.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v43), (int8x8_t)0x1000100010001LL);
        uint64_t v124 = vmovn_s16(v43).u32[0];
        uint64_t v125 = BYTE5(v36) & 1;
        uint64_t v126 = v38;
        uint64_t v127 = BYTE4(v38) & 1;
        uint64_t v128 = v106;
        uint64_t v129 = v104;
        uint64_t v130 = v102;
        char v131 = v101;
        char v132 = v100;
        char v133 = v39;
        char v134 = v40;
        uint64_t v135 = v99;
        uint64_t v136 = v98 & 1;
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(v40);
        uint64_t v44 = v112;
        uint64_t v45 = swift_isUniquelyReferenced_nonNull_native(v112);
        unint64_t v109 = v44;
        sub_100025640(&v118, v33, v45);
        uint64_t v46 = v109;
        uint64_t v112 = v109;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        uint64_t v117 = v41;
        sub_10002AB10(&v117);
        uint64_t result = (uint64_t)sub_10002AB38(v113);
        uint64_t v105 = *(void *)(v41 + 16);
        if (v105)
        {
          uint64_t v47 = 0LL;
          uint64_t v103 = *(void *)(v97 + 16);
          unsigned __int8 v107 = *(void *)(v97 + 48);
          uint64_t v48 = v41 + 32;
          uint64_t v49 = *(_BYTE *)(v97 + 56);
          while (1)
          {
            if (v47 >= *(void *)(v41 + 16))
            {
              __break(1u);
              goto LABEL_97;
            }

            uint64_t v51 = *(void *)(v48 + 8 * v47);
            if (swift_reflection_metadataForObject(v103, v51) == v107) {
              int v52 = 1;
            }
            else {
              int v52 = v49;
            }
            if ((v52 & 1) == 0)
            {
              uint64_t v53 = sub_100005104(&qword_1000B8758);
              int v54 = swift_allocObject(v53, 64LL, 7LL);
              *(_OWORD *)(v54 + 16) = xmmword_100096510;
              unint64_t v109 = 0LL;
              unint64_t v110 = 0xE000000000000000LL;
              _StringGuts.grow(_:)(65LL);
              v55._char countAndFlagsBits = 0xD000000000000027LL;
              v55._object = (void *)0x800000010009C9C0LL;
              String.append(_:)(v55);
              v56._char countAndFlagsBits = 30768LL;
              v56._object = (void *)0xE200000000000000LL;
              String.append(_:)(v56);
              uint64_t v108 = v51;
              unsigned __int8 v57 = sub_1000058CC();
              v58._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)( &v108,  16LL,  0LL,  &type metadata for UInt64,  v57);
              uint64_t v59 = v41;
              object = v58._object;
              String.append(_:)(v58);
              swift_bridgeObjectRelease(object);
              v61._char countAndFlagsBits = 0xD000000000000016LL;
              v61._object = (void *)0x800000010009C9F0LL;
              String.append(_:)(v61);
              v62._char countAndFlagsBits = 30768LL;
              v62._object = (void *)0xE200000000000000LL;
              String.append(_:)(v62);
              uint64_t v108 = v107;
              v63._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)( &v108,  16LL,  0LL,  &type metadata for UInt64,  v57);
              uint64_t v64 = v63._object;
              String.append(_:)(v63);
              uint64_t v65 = v64;
              uint64_t v41 = v59;
              swift_bridgeObjectRelease(v65);
              uint64_t v66 = v109;
              uint64_t v67 = v110;
              *(void *)(v54 + 56) = &type metadata for String;
              *(void *)(v54 + 32) = v66;
              *(void *)(v54 + 40) = v67;
              print(_:separator:terminator:)(v54, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
              swift_bridgeObjectRelease(v54);
              uint64_t v46 = v112;
            }

            if (!*(void *)(v46 + 16) || (uint64_t result = sub_100023B88(v51), (v68 & 1) == 0))
            {
              uint64_t v69 = v111;
              uint64_t result = static Hasher._hash(seed:_:)(v111[5], v51);
              uint64_t v70 = -1LL << v69[32];
              uint64_t v71 = result & ~v70;
              if (((*(void *)&v69[((v71 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v71) & 1) != 0)
              {
                uint64_t v72 = *((void *)v69 + 6);
                if (*(void *)(v72 + 8 * v71) == v51) {
                  goto LABEL_40;
                }
                uint64_t v73 = ~v70;
                while (1)
                {
                  uint64_t v71 = (v71 + 1) & v73;
                  if (((*(void *)&v69[((v71 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v71) & 1) == 0) {
                    break;
                  }
                  if (*(void *)(v72 + 8 * v71) == v51) {
                    goto LABEL_40;
                  }
                }
              }

              uint64_t v50 = swift_isUniquelyReferenced_nonNull_native(v69);
              unint64_t v109 = (unint64_t)v69;
              sub_100028460(v51, v71, v50);
              char v111 = (void *)v109;
              uint64_t result = swift_bridgeObjectRelease(0x8000000000000000LL);
            }

        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        swift_bridgeObjectRelease(v16);
        __break(1u);
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100012AF4(int **a1, uint64_t a2, uint64_t a3)
{
  int v7 = *(int **)(v3 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t result = swift_release(v3);
    uint64_t v10 = &v7[v8];
    if (!a2) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t result = swift_release(v3);
    uint64_t v10 = 0LL;
    if (!a2)
    {
LABEL_12:
      a3 = 0LL;
      goto LABEL_13;
    }
  }

  if (!a3)
  {
LABEL_13:
    *a1 = v7;
    a1[1] = v10;
    return a3;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    if (v7)
    {
      uint64_t v11 = 0LL;
      if (v7 == v10)
      {
LABEL_11:
        a3 = v11;
      }

      else
      {
        while (1)
        {
          int v12 = *v7++;
          *(_DWORD *)(a2 + 4 * v11) = v12;
          if (a3 - 1 == v11) {
            break;
          }
          ++v11;
          if (v7 == v10) {
            goto LABEL_11;
          }
        }
      }

      goto LABEL_13;
    }

    goto LABEL_12;
  }

  __break(1u);
  return result;
}

uint64_t sub_100012BA8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  char v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_39:
    *char v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    _OWORD v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v27 = -1LL << *(_BYTE *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = 16 * v16;
    unint64_t v21 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    uint64_t v24 = (uint64_t *)(*(void *)(a4 + 56) + v20);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    *uint64_t v11 = v23;
    v11[1] = v22;
    v11[2] = v25;
    v11[3] = v26;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v26);
      goto LABEL_38;
    }

    v11 += 4;
    swift_bridgeObjectRetain(v22);
    uint64_t result = swift_bridgeObjectRetain(v26);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2LL;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0LL;
        int64_t v12 = v17;
      }

      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }

        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }

          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0LL;
            goto LABEL_37;
          }

          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0LL;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }

              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }

          goto LABEL_17;
        }

        unint64_t v9 = 0LL;
        int64_t v12 = v17 + 2;
      }

LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v27;
      goto LABEL_39;
    }

      if (v6 > v7)
      {
        v16 -= 648;
        if (v12 > v4) {
          continue;
        }
      }

      goto LABEL_39;
    }
  }

  if (a4 != __dst || &__dst[648 * v9] <= a4) {
    memmove(a4, __dst, 648 * v9);
  }
  int64_t v12 = &v4[648 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 648)
  {
    while (1)
    {
      if (*((_DWORD *)v4 + 10) >= *((_DWORD *)v6 + 10))
      {
        unint64_t v15 = v4 + 648;
        int64_t v14 = v4;
        uint64_t v13 = v6;
        if (v7 == v4)
        {
          v4 += 648;
          if (v7 < v15) {
            goto LABEL_16;
          }
        }

        else
        {
          v4 += 648;
        }
      }

      else
      {
        uint64_t v13 = v6 + 648;
        int64_t v14 = v6;
        if (v7 == v6 && v7 < v13) {
          goto LABEL_16;
        }
      }

      memmove(v7, v14, 0x288uLL);
LABEL_16:
      v7 += 648;
      if (v4 < v12)
      {
        uint64_t v6 = v13;
      }

      break;
    }
  }

  uint64_t v6 = v7;
LABEL_39:
  uint64_t v20 = (v12 - v4) / 648;
  if (v6 != v4 || v6 >= &v4[648 * v20]) {
    memmove(v6, v4, 648 * v20);
  }
  return 1LL;
}

      if (v6 > v7)
      {
        v17 -= 24LL;
        if (v12 > v4) {
          continue;
        }
      }

      goto LABEL_39;
    }
  }

  if (a4 != __dst || &__dst[24 * v9] <= a4) {
    memmove(a4, __dst, 24 * v9);
  }
  int64_t v12 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      if (*((void *)v6 + 1) >= *((void *)v4 + 1))
      {
        unint64_t v15 = v4 + 24;
        int64_t v14 = v4;
        uint64_t v13 = v6;
        if (v7 == v4)
        {
          v4 += 24;
          if (v7 < v15) {
            goto LABEL_16;
          }
        }

        else
        {
          v4 += 24;
        }
      }

      else
      {
        uint64_t v13 = v6 + 24;
        int64_t v14 = v6;
        if (v7 == v6 && v7 < v13) {
          goto LABEL_16;
        }
      }

      unint64_t v16 = *(_OWORD *)v14;
      *((void *)v7 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v7 = v16;
LABEL_16:
      v7 += 24;
      if (v4 < v12)
      {
        uint64_t v6 = v13;
      }

      break;
    }
  }

  uint64_t v6 = v7;
LABEL_39:
  uint64_t v22 = (unsigned __int128)((v12 - v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  uint64_t v23 = (v22 >> 2) + ((unint64_t)v22 >> 63);
  if (v6 != v4 || v6 >= &v4[24 * v23]) {
    memmove(v6, v4, 24 * v23);
  }
  return 1LL;
}

      if (v6 > v7)
      {
        v18 -= 112;
        if (v13 > v4) {
          continue;
        }
      }

      goto LABEL_39;
    }
  }

  int64_t v12 = 112 * v9;
  if (a4 != __dst || &__dst[v12] <= a4) {
    memmove(a4, __dst, v12);
  }
  uint64_t v13 = &v4[v12];
  if ((unint64_t)v6 < a3 && v8 >= 112)
  {
    while (1)
    {
      if (*((void *)v6 + 5) >= *((void *)v4 + 5))
      {
        unint64_t v16 = v4 + 112;
        unint64_t v15 = v4;
        int64_t v14 = v6;
        if (v7 == v4)
        {
          v4 += 112;
          if (v7 < v16) {
            goto LABEL_16;
          }
        }

        else
        {
          v4 += 112;
        }
      }

      else
      {
        int64_t v14 = v6 + 112;
        unint64_t v15 = v6;
        if (v7 == v6 && v7 < v14) {
          goto LABEL_16;
        }
      }

      memmove(v7, v15, 0x70uLL);
LABEL_16:
      v7 += 112;
      if (v4 < v13)
      {
        uint64_t v6 = v14;
      }

      break;
    }
  }

  uint64_t v6 = v7;
LABEL_39:
  uint64_t v22 = 112 * ((v13 - v4) / 112);
  if (v6 != v4 || v6 >= &v4[v22]) {
    memmove(v6, v4, v22);
  }
  return 1LL;
}

  swift_bridgeObjectRelease(v6);
  return countAndFlagsBits;
}

LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v36 = a2[15];
  uint64_t v37 = a1[15];
  a1[15] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = a1 + 16;
  uint64_t v39 = a2 + 16;
  uint64_t v40 = a1[17];
  uint64_t v41 = a2[17];
  if (v40)
  {
    if (v41)
    {
      a1[16] = a2[16];
      uint64_t v42 = a2[17];
      a1[17] = v42;
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRelease(v40);
      uint64_t v43 = a2[18];
      uint64_t v44 = a1[18];
      a1[18] = v43;
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRelease(v44);
      uint64_t v45 = a2[22];
      if (a1[22])
      {
        if (v45)
        {
          sub_100052ED8(a1 + 19, a2 + 19);
LABEL_32:
          uint64_t v56 = a2[23];
          unsigned __int8 v57 = a1[23];
          a1[23] = v56;
          swift_bridgeObjectRetain(v56);
          swift_bridgeObjectRelease(v57);
          *((_BYTE *)a1 + 192) = *((_BYTE *)a2 + 192);
          return a1;
        }

        sub_1000062D8(a1 + 19);
      }

      else if (v45)
      {
        a1[22] = v45;
        (**(void (***)(uint64_t, uint64_t))(v45 - 8))((uint64_t)(a1 + 19), (uint64_t)(a2 + 19));
        goto LABEL_32;
      }

      int v55 = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 19) = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(a1 + 21) = v55;
      goto LABEL_32;
    }

    sub_10003D920(a1 + 16);
    *uint64_t v38 = *v39;
    uint64_t v50 = *((_OWORD *)a2 + 10);
    uint64_t v49 = *((_OWORD *)a2 + 11);
    uint64_t v51 = *((_OWORD *)a2 + 9);
    *((_BYTE *)a1 + 192) = *((_BYTE *)a2 + 192);
    *((_OWORD *)a1 + 10) = v50;
    *((_OWORD *)a1 + 11) = v49;
    *((_OWORD *)a1 + 9) = v51;
  }

  else if (v41)
  {
    a1[16] = a2[16];
    uint64_t v46 = a2[17];
    a1[17] = v46;
    uint64_t v47 = a2[18];
    a1[18] = v47;
    uint64_t v48 = a2[22];
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    if (v48)
    {
      a1[22] = v48;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v48 - 8))((uint64_t)(a1 + 19), (uint64_t)(a2 + 19), v48);
    }

    else
    {
      uint64_t v58 = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 19) = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(a1 + 21) = v58;
    }

    uint64_t v59 = a2[23];
    a1[23] = v59;
    *((_BYTE *)a1 + 192) = *((_BYTE *)a2 + 192);
    swift_bridgeObjectRetain(v59);
  }

  else
  {
    *uint64_t v38 = *v39;
    int v52 = *((_OWORD *)a2 + 9);
    uint64_t v53 = *((_OWORD *)a2 + 10);
    int v54 = *((_OWORD *)a2 + 11);
    *((_BYTE *)a1 + 192) = *((_BYTE *)a2 + 192);
    *((_OWORD *)a1 + 10) = v53;
    *((_OWORD *)a1 + 11) = v54;
    *((_OWORD *)a1 + 9) = v52;
  }

  return a1;
}

    uint64_t v39 = 4LL;
    while (1)
    {
      uint64_t v40 = v39 - 4;
      if ((v37 & 0xC000000000000001LL) != 0)
      {
        uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)(v39 - 4, v37);
        uint64_t v41 = result;
        uint64_t v42 = v39 - 3;
        if (__OFADD__(v40, 1LL))
        {
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          return result;
        }
      }

      else
      {
        uint64_t v41 = *(void *)(v37 + 8 * v39);
        uint64_t result = swift_retain(v41);
        uint64_t v42 = v39 - 3;
        if (__OFADD__(v40, 1LL)) {
          goto LABEL_67;
        }
      }

      uint64_t v43 = (*(uint64_t (**)(void))(*(void *)(v41 + 24) + 24LL))();
      if (v43 == v36 && v44 == v35) {
        break;
      }
      uint64_t v46 = v44;
      uint64_t v47 = v36;
      uint64_t v48 = v36;
      uint64_t v49 = v35;
      uint64_t v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v48, v35, 0LL);
      swift_bridgeObjectRelease(v46);
      if ((v50 & 1) != 0)
      {
        uint64_t v60 = v37;
        uint64_t v35 = v49;
        goto LABEL_47;
      }

      swift_release(v41);
      ++v39;
      uint64_t v35 = v49;
      uint64_t v36 = v47;
      if (v42 == v38) {
        goto LABEL_30;
      }
    }

    swift_bridgeObjectRelease(v37);
    uint64_t v60 = v35;
LABEL_47:
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v35);
    uint64_t v4 = v74;
    sub_100072A00((uint64_t)v91);
    sub_10006702C((uint64_t)v91);
    swift_release(v76);
    uint64_t v3 = v75;
    *(void *)(v75 + 8) = v41;
    sub_1000062D8(v87);
LABEL_48:
    uint64_t v61 = v99;
    uint64_t result = sub_100068B8C(v4, v87);
    uint64_t v6 = v61;
  }

  while (!v61);
  return result;
}

  __break(1u);
  return result;
}

    *a5 = v23;
    a5[1] = v25;
    a5[2] = v28;
    a5[3] = v26;
    a5[4] = v27;
    return result;
  }

  int64_t v12 = result;
  if (a1 >> 14 > result >> 14)
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v13 = Substring.subscript.getter(a1);
  uint64_t v51 = v16;
  if ((v13 ^ v14) < 0x4000)
  {
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRetain(a4);
    int64_t v17 = Substring.distance(from:to:)(a1, a2, a1, a2, a3, a4);
    uint64_t result = swift_bridgeObjectRelease(a4);
    if (v17 != 1)
    {
      unint64_t v18 = static String._fromSubstring(_:)(a1, a2, a3, a4);
      uint64_t v20 = v42;
      unint64_t v21 = 0x80;
      goto LABEL_15;
    }

    if (a1 >> 14 != a2 >> 14)
    {
      swift_bridgeObjectRetain(a4);
      unint64_t v18 = Substring.subscript.getter(a1, a1, a2, a3, a4);
      uint64_t v20 = v19;
      swift_bridgeObjectRelease(a4);
      unint64_t v21 = 64;
LABEL_15:
      swift_bridgeObjectRelease(a4);
      v52._char countAndFlagsBits = v18;
      v52._object = v20;
      uint64_t v43 = sub_10006D63C(v52, v21);
      uint64_t v45 = v44;
      sub_10002DA24(v18, (uint64_t)v20, v21);
      uint64_t v46 = sub_10002EA1C();
      uint64_t v47 = swift_allocError(&type metadata for ParserError, v46, 0LL, 0LL);
      *(void *)uint64_t v48 = v43;
      *(void *)(v48 + 8) = v45;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_OWORD *)(v48 + 48) = 0u;
      *(_OWORD *)(v48 + 64) = 0u;
      *(_BYTE *)(v48 + 80) = 5;
      return swift_willThrow(v47);
    }

    goto LABEL_22;
  }

  char v30 = v13;
  uint64_t v31 = v14;
  uint64_t v50 = v15;
  uint64_t result = Substring.index(after:)(v12, a1, a2, a3, a4);
  if (a2 >> 14 >= result >> 14)
  {
    uint64_t v28 = 0x8000000000000040LL;
    uint64_t v32 = Substring.subscript.getter(result);
    char v34 = v33;
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    swift_bridgeObjectRelease(a4);
    uint64_t v26 = static String._fromSubstring(_:)(v32, v34, v36, v38);
    uint64_t v27 = v39;
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRetain(v50);
    uint64_t v40 = Substring.distance(from:to:)(v30, v31, v30, v31, v51, v50);
    swift_bridgeObjectRelease(v50);
    if (v40 == 1)
    {
      swift_bridgeObjectRetain(v50);
      uint64_t v23 = Substring.subscript.getter(v30, v30, v31, v51, v50);
      uint64_t v25 = v41;
      swift_bridgeObjectRelease(v50);
    }

    else
    {
      uint64_t v23 = static String._fromSubstring(_:)(v30, v31, v51, v50);
      uint64_t v25 = v49;
      uint64_t v28 = 0x8000000000000080LL;
    }

    uint64_t result = swift_bridgeObjectRelease(v50);
    goto LABEL_18;
  }

char *sub_100012DC8(uint64_t a1)
{
  kern_return_t v8;
  mach_error_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  char *v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  unint64_t v19;
  Swift::String v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  thread_inspect_t v30;
  unsigned int object_type[2];
  unint64_t v32;
  mach_msg_type_number_t thread_info_outCnt;
  unsigned int object_addr[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v1 = *(thread_inspect_t **)(a1 + 16);
  if (!v1) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v3 = 4 * v2;
  uint64_t v4 = (char *)_swiftEmptyArrayStorage;
  do
  {
    thread_inspect_t v7 = *v1;
    *(void *)object_addr = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    thread_info_outCnt = 6;
    uint64_t v8 = thread_info(v7, 4u, (thread_info_t)object_addr, &thread_info_outCnt);
    if (v8)
    {
      unint64_t v9 = v8;
      uint64_t v10 = sub_100005104(&qword_1000B8758);
      uint64_t v11 = swift_allocObject(v10, 64LL, 7LL);
      *(_OWORD *)(v11 + 16) = xmmword_100096510;
      *(void *)object_type = 0LL;
      uint64_t v32 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(48LL);
      swift_bridgeObjectRelease(v32);
      *(void *)object_type = 0xD000000000000023LL;
      uint64_t v32 = 0x800000010009C000LL;
      char v30 = v7;
      v12._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
      object = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(object);
      v14._char countAndFlagsBits = 8250LL;
      v14._object = (void *)0xE200000000000000LL;
      String.append(_:)(v14);
      unint64_t v15 = mach_error_string(v9);
      if (!v15) {
        __break(1u);
      }
      v16._char countAndFlagsBits = String.init(cString:)(v15);
      int64_t v17 = v16._object;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(v17);
      v18._char countAndFlagsBits = 2016421920LL;
      v18._object = (void *)0xE400000000000000LL;
      String.append(_:)(v18);
      char v30 = v9;
      int64_t v19 = sub_1000131F4();
      v20._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v30, 16LL, 0LL, &type metadata for Int32, v19);
      unint64_t v21 = v20._object;
      String.append(_:)(v20);
      swift_bridgeObjectRelease(v21);
      v22._char countAndFlagsBits = 41LL;
      v22._object = (void *)0xE100000000000000LL;
      String.append(_:)(v22);
      uint64_t v23 = *(void *)object_type;
      uint64_t v24 = v32;
      *(void *)(v11 + 56) = &type metadata for String;
      *(void *)(v11 + 32) = v23;
      *(void *)(v11 + 40) = v24;
      print(_:separator:terminator:)(v11, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
      swift_bridgeObjectRelease(v11);
    }

    else
    {
      uint64_t v5 = *(void *)object_addr;
      uint64_t v6 = v35;
      object_addr[0] = 0;
      object_type[0] = 0;
      if (!mach_port_kernel_object(mach_task_self_, v7, object_type, object_addr))
      {
        uint64_t v25 = object_addr[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0) {
          uint64_t v4 = sub_100011F14(0LL, *((void *)v4 + 2) + 1LL, 1, v4);
        }
        uint64_t v27 = *((void *)v4 + 2);
        uint64_t v26 = *((void *)v4 + 3);
        if (v27 >= v26 >> 1) {
          uint64_t v4 = sub_100011F14((char *)(v26 > 1), v27 + 1, 1, v4);
        }
        *((void *)v4 + 2) = v27 + 1;
        uint64_t v28 = &v4[24 * v27];
        *((void *)v28 + 4) = v5;
        *((void *)v28 + 5) = v6;
        *((_DWORD *)v28 + 12) = v25;
        v28[52] = 0;
      }
    }

    ++v1;
    v3 -= 4LL;
  }

  while (v3);
  return v4;
}

uint64_t sub_1000130B4(int a1, _BYTE *a2)
{
  if (!a2) {
    return 0LL;
  }
  switch(a1)
  {
    case 0:
    case 1:
      *a2 = 8;
      return 1LL;
    case 2:
      uint64_t v3 = 0xFFFFFFFFFLL;
      goto LABEL_7;
    case 3:
      *a2 = 0;
      return 1LL;
    case 4:
      uint64_t v3 = (uint64_t)&_mh_execute_header;
LABEL_7:
      *(void *)a2 = v3;
      uint64_t result = 1LL;
      break;
    default:
      return 0LL;
  }

  return result;
}

uint64_t sub_100013118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    __break(1u);
  }
  swift_retain(a1);
  if (a3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 16);
    uint64_t v9 = 0LL;
    if (qword_1000B86F8 == -1) {
      goto LABEL_4;
    }
  }

  swift_once(&qword_1000B86F8, sub_10001E2C4);
LABEL_4:
  int v7 = off_1000BA4B0(v3, a2, a3, &v9);
  swift_release(a1);
  if (v7) {
    return 0LL;
  }
  else {
    return v9;
  }
}

unint64_t sub_1000131F4()
{
  unint64_t result = qword_1000B8BF0;
  if (!qword_1000B8BF0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1000B8BF0);
  }

  return result;
}

uint64_t sub_100013238(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (result)
  {
    if (a3)
    {
      uint64_t v5 = *(void (**)(uint64_t *, uint64_t *))result;
      uint64_t v4 = *(void *)(result + 8);
      uint64_t v6 = a3;
      swift_retain(v4);
      int v7 = (uint64_t *)(a2 + 8);
      do
      {
        uint64_t v8 = *(v7 - 1);
        uint64_t v9 = *v7;
        uint64_t v10 = v8;
        v5(&v10, &v9);
        v7 += 2;
        --v6;
      }

      while (v6);
      return swift_release(v4);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000132AC(uint64_t a1, uint64_t a2)
{
  return sub_10001153C(a1, a2, v2);
}

uint64_t sub_1000132B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000132C4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000132E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000132F4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000132FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2();
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  uint64_t v23 = 30768LL;
  unint64_t v24 = 0xE200000000000000LL;
  uint64_t v22 = a1;
  unint64_t v10 = sub_1000058CC();
  v11._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v22, 16LL, 0LL, &type metadata for UInt64, v10);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._char countAndFlagsBits = 10272LL;
  v13._object = (void *)0xE200000000000000LL;
  String.append(_:)(v13);
  if (v5) {
    uint64_t v14 = v3;
  }
  else {
    uint64_t v14 = 0x6E776F6E6B6E753CLL;
  }
  if (v5) {
    unint64_t v15 = v5;
  }
  else {
    unint64_t v15 = 0xE90000000000003ELL;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease(v15);
  v17._char countAndFlagsBits = 8233LL;
  v17._object = (void *)0xE200000000000000LL;
  String.append(_:)(v17);
  if (v9) {
    uint64_t v18 = v7;
  }
  else {
    uint64_t v18 = 0x6E776F6E6B6E753CLL;
  }
  if (v9) {
    unint64_t v19 = v9;
  }
  else {
    unint64_t v19 = 0xE90000000000003ELL;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease(v19);
  return v23;
}

uint64_t sub_100013410(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  Swift::Int v4 = result + 1;
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
  }

  else
  {
    v6._char countAndFlagsBits = 32LL;
    v6._object = (void *)0xE100000000000000LL;
    Swift::String v7 = String.init(repeating:count:)(v6, v4);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    v9._char countAndFlagsBits = sub_1000132FC(a2, a3);
    unint64_t v10 = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(v10);
    return 32LL;
  }

  return result;
}

uint64_t sub_1000134B4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = String.utf8CString.getter();
  fputs((const char *)(v2 + 32), v1);
  return swift_release(v2);
}

uint64_t sub_1000134EC()
{
  uint64_t result = stderr.getter();
  qword_1000BA328 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for Std.File(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Std.File(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Std.File(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Std.File()
{
  return &type metadata for Std.File;
}

ValueMetadata *type metadata accessor for DumpCacheNodes()
{
  return &type metadata for DumpCacheNodes;
}

double sub_1000135B4()
{
  xmmword_1000BA390 = v7;
  unk_1000BA3A0 = v8;
  qword_1000BA3B0 = v9;
  xmmword_1000BA350 = v3;
  unk_1000BA360 = v4;
  xmmword_1000BA370 = v5;
  unk_1000BA380 = v6;
  double result = *(double *)&v2;
  xmmword_1000BA330 = v1;
  unk_1000BA340 = v2;
  return result;
}

uint64_t sub_100013664(uint64_t a1)
{
  uint64_t v2 = sub_100005104(&qword_1000B8758);
  uint64_t v3 = swift_allocObject(v2, 224LL, 7LL);
  *(_OWORD *)(v3 + 16) = xmmword_1000970A0;
  *(void *)(v3 + 32) = 0x73736572646441LL;
  *(void *)(v3 + 40) = 0xE700000000000000LL;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = 6775124LL;
  *(void *)(v3 + 72) = 0xE300000000000000LL;
  *(void *)(v3 + 88) = &type metadata for String;
  *(void *)(v3 + 96) = 0x656D614E20676154LL;
  *(void *)(v3 + 104) = 0xE800000000000000LL;
  *(void *)(v3 + 120) = &type metadata for String;
  *(void *)(v3 + 128) = 1702521171LL;
  *(void *)(v3 + 136) = 0xE400000000000000LL;
  *(void *)(v3 + 152) = &type metadata for String;
  *(void *)(v3 + 160) = 1952867660LL;
  *(void *)(v3 + 168) = 0xE400000000000000LL;
  *(void *)(v3 + 216) = &type metadata for String;
  *(void *)(v3 + 184) = &type metadata for String;
  *(void *)(v3 + 192) = 0x7468676952LL;
  *(void *)(v3 + 200) = 0xE500000000000000LL;
  print(_:separator:terminator:)(v3, 9LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    __break(1u);
  }
  uint64_t v5 = swift_allocObject(&unk_1000AEE98, 24LL, 7LL);
  *(void *)(v5 + 16) = _swiftEmptyArrayStorage;
  uint64_t v6 = swift_allocObject(&unk_1000AEEC0, 32LL, 7LL);
  *(void *)(v6 + 16) = sub_10000582C;
  *(void *)(v6 + 24) = v5;
  unint64_t v24 = sub_100013F30;
  uint64_t v25 = v6;
  swift_retain_n(v5, 2LL);
  uint64_t v7 = swift_reflection_iterateMetadataAllocations(v4, sub_100008C98, &v24);
  swift_release(v25);
  if (v7)
  {
    uint64_t v8 = String.init(cString:)(v7);
    uint64_t v10 = v9;
    unint64_t v11 = sub_100005888();
    uint64_t v12 = swift_allocError(&_s5ErrorVN, v11, 0LL, 0LL);
    *Swift::String v13 = v8;
    v13[1] = v10;
    swift_willThrow(v12);
    return swift_release_n(v5, 2LL);
  }

  else
  {
    swift_release(v5);
    swift_beginAccess(v5 + 16, &v24, 0LL, 0LL);
    uint64_t v15 = *(void *)(v5 + 16);
    swift_bridgeObjectRetain(v15);
    swift_release(v5);
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      swift_bridgeObjectRetain(v15);
      Swift::String v17 = (_DWORD *)(v15 + 48);
      do
      {
        unsigned int v18 = *(v17 - 4);
        uint64_t v19 = *((void *)v17 - 1);
        int v20 = *v17;
        v17 += 6;
        unsigned int v21 = v18;
        uint64_t v22 = v19;
        int v23 = v20;
        sub_100013914(&v21, a1);
        --v16;
      }

      while (v16);
      return swift_bridgeObjectRelease_n(v15, 2LL);
    }

    else
    {
      return swift_bridgeObjectRelease(v15);
    }
  }

uint64_t sub_100013914(unsigned int *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *((void *)a1 + 1);
  unint64_t v5 = a1[4];
  unint64_t v38 = 0LL;
  unint64_t v39 = 0LL;
  uint64_t v6 = *(void *)(a2 + 40);
  LODWORD(v40) = v3;
  unint64_t v41 = v4;
  int v42 = v5;
  uint64_t result = swift_reflection_metadataAllocationCacheNode(v6, &v40, &v38);
  if ((_DWORD)result)
  {
    uint64_t result = *(void *)(a2 + 40);
    if (result)
    {
      uint64_t v8 = swift_reflection_metadataAllocationTagName(result, v3);
      if (v8)
      {
        uint64_t v9 = String.init(cString:)(v8);
        unint64_t v11 = v10;
      }

      else
      {
        unint64_t v11 = (void *)0xE90000000000003ELL;
        uint64_t v9 = 0x6E776F6E6B6E753CLL;
      }

      uint64_t v12 = sub_100005104(&qword_1000B8758);
      uint64_t v13 = swift_allocObject(v12, 64LL, 7LL);
      *(_OWORD *)(v13 + 16) = xmmword_100096510;
      uint64_t v40 = 0LL;
      unint64_t v41 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v41);
      uint64_t v40 = 30768LL;
      unint64_t v41 = 0xE200000000000000LL;
      unint64_t v37 = v4;
      unint64_t v14 = sub_1000058CC();
      v15._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v37, 16LL, 0LL, &type metadata for UInt64, v14);
      object = v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(object);
      v17._char countAndFlagsBits = 9LL;
      v17._object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      LODWORD(v37) = v3;
      v18._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
      uint64_t v19 = v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v19);
      v20._char countAndFlagsBits = 9LL;
      v20._object = (void *)0xE100000000000000LL;
      String.append(_:)(v20);
      v21._char countAndFlagsBits = v9;
      v21._object = v11;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(v11);
      v22._char countAndFlagsBits = 9LL;
      v22._object = (void *)0xE100000000000000LL;
      String.append(_:)(v22);
      unint64_t v37 = v5;
      v23._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      unint64_t v24 = v23._object;
      String.append(_:)(v23);
      swift_bridgeObjectRelease(v24);
      v25._char countAndFlagsBits = 9LL;
      v25._object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      unint64_t v26 = v38;
      v27._char countAndFlagsBits = 30768LL;
      v27._object = (void *)0xE200000000000000LL;
      String.append(_:)(v27);
      unint64_t v37 = v26;
      v28._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v37, 16LL, 0LL, &type metadata for UInt64, v14);
      uint64_t v29 = v28._object;
      String.append(_:)(v28);
      swift_bridgeObjectRelease(v29);
      v30._char countAndFlagsBits = 9LL;
      v30._object = (void *)0xE100000000000000LL;
      String.append(_:)(v30);
      unint64_t v31 = v39;
      v32._char countAndFlagsBits = 30768LL;
      v32._object = (void *)0xE200000000000000LL;
      String.append(_:)(v32);
      unint64_t v37 = v31;
      v33._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v37, 16LL, 0LL, &type metadata for UInt64, v14);
      char v34 = v33._object;
      String.append(_:)(v33);
      swift_bridgeObjectRelease(v34);
      uint64_t v35 = v40;
      unint64_t v36 = v41;
      *(void *)(v13 + 56) = &type metadata for String;
      *(void *)(v13 + 32) = v35;
      *(void *)(v13 + 40) = v36;
      print(_:separator:terminator:)(v13, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
      return swift_bridgeObjectRelease(v13);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100013C18(uint64_t a1)
{
  unint64_t v2 = sub_10001431C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100013C40(uint64_t a1)
{
  unint64_t v2 = sub_10001431C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100013C68@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000B8668 != -1) {
    swift_once(&qword_1000B8668, sub_1000135B4);
  }
  return sub_100005980((uint64_t)&xmmword_1000BA330, a1);
}

uint64_t sub_100013CB8()
{
  uint64_t v0 = sub_100005104(&qword_1000B8740);
  OptionGroup.wrappedValue.getter(v0, v1, v2, (uint64_t)&v12);
  uint64_t v3 = v12;
  uint64_t v4 = v13;
  char v5 = v14;
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  int v21 = v20;
  sub_10000B4BC(v12, v13, v14, v15, v16, v17);
  sub_100003C50(v3, v4, v5);
  sub_100003C60(v6, v7, v8);
  return sub_100003C60(v9, v10, v21);
}

double sub_100013DC0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }

  return result;
}

unint64_t sub_100013E18(uint64_t a1)
{
  unint64_t result = sub_100013E3C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100013E3C()
{
  unint64_t result = qword_1000B8C78;
  if (!qword_1000B8C78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000973FC, &type metadata for DumpCacheNodes);
    atomic_store(result, (unint64_t *)&qword_1000B8C78);
  }

  return result;
}

unint64_t sub_100013E80(uint64_t a1)
{
  unint64_t result = sub_100013EA4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100013EA4()
{
  unint64_t result = qword_1000B8C80;
  if (!qword_1000B8C80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097424, &type metadata for DumpCacheNodes);
    atomic_store(result, (unint64_t *)&qword_1000B8C80);
  }

  return result;
}

uint64_t sub_100013EE8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100013F0C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100013F30(unsigned int *a1)
{
  return sub_1000050B0(a1, *(uint64_t (**)(void, void, void))(v1 + 16));
}

uint64_t sub_100013F38@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v57 = a2;
  uint64_t v3 = sub_100005104(&qword_1000B8C88);
  uint64_t v59 = *(void *)(v3 - 8);
  uint64_t v60 = v3;
  __chkstk_darwin(v3);
  __int128 v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(unsigned __int8 *)ArgumentVisibility.default.unsafeMutableAddressor();
  unint64_t v7 = sub_1000059BC();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v6,  (uint64_t)&type metadata for UniversalOptions,  v7,  (uint64_t)&v68);
  uint64_t v61 = v69;
  uint64_t v62 = v68;
  uint64_t v8 = v71;
  uint64_t v82 = v70;
  uint64_t v9 = v72;
  uint64_t v65 = v74;
  uint64_t v66 = v73;
  uint64_t v64 = v75;
  int v10 = v76;
  int v11 = v77;
  uint64_t v67 = v81;
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100006270(a1, v12);
  unint64_t v14 = sub_10001431C();
  uint64_t v58 = v5;
  char v15 = v82;
  uint64_t v16 = v13;
  uint64_t v18 = v62;
  uint64_t v17 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DumpCacheNodes.CodingKeys,  &type metadata for DumpCacheNodes.CodingKeys,  v14,  v12,  v16);
  uint64_t v19 = v61;
  if (v17)
  {
    sub_1000062D8(a1);
    sub_100003BCC(v18, v19, v15, v8, v9, v66, v65, v64, v10, v11);
    return swift_bridgeObjectRelease(v67);
  }

  else
  {
    int v54 = v11;
    int v55 = v10;
    uint64_t v56 = v9;
    uint64_t v63 = v8;
    uint64_t v20 = v61;
    uint64_t v21 = v67;
    uint64_t v22 = sub_100005104(&qword_1000B8740);
    unint64_t v23 = sub_100007B88();
    uint64_t v24 = v22;
    uint64_t v25 = v60;
    uint64_t v26 = v22;
    Swift::String v27 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v68, v24, v28, v60, v26, v23);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v25);
    uint64_t v29 = v69;
    uint64_t v46 = v68;
    char v30 = v70;
    uint64_t v51 = v71;
    uint64_t v50 = v72;
    uint64_t v49 = v73;
    uint64_t v31 = v75;
    uint64_t v47 = v74;
    int v52 = v76;
    LODWORD(v60) = v77;
    LODWORD(v59) = v78;
    LODWORD(v58) = v79;
    uint64_t v32 = v81;
    uint64_t v53 = v80;
    uint64_t v48 = v81;
    uint64_t v44 = v69;
    uint64_t v45 = v70;
    sub_100003A6C(v68, v69, v70, v71, v72, v73, v74, v75, v76, v77);
    swift_bridgeObjectRetain(v32);
    sub_100003BCC(v18, v20, v82, v63, v56, v66, v65, v64, v55, v54);
    swift_bridgeObjectRelease(v21);
    sub_1000062D8(a1);
    LOBYTE(v32) = v52;
    uint64_t v33 = v46;
    char v34 = v30;
    uint64_t v35 = v51;
    uint64_t v36 = v50;
    uint64_t v37 = v49;
    uint64_t v38 = v47;
    sub_100003BCC(v46, v29, v34, v51, v50, v49, v47, v31, v52, v60);
    uint64_t v39 = v48;
    uint64_t result = swift_bridgeObjectRelease(v48);
    unint64_t v41 = v57;
    uint64_t v42 = v44;
    *unsigned __int8 v57 = v33;
    v41[1] = v42;
    v41[2] = v45;
    v41[3] = v35;
    v41[4] = v36;
    v41[5] = v37;
    v41[6] = v38;
    v41[7] = v31;
    *((_BYTE *)v41 + 64) = v32;
    *((_BYTE *)v41 + 65) = v60;
    *((_BYTE *)v41 + 66) = v59;
    *((_BYTE *)v41 + 67) = (_BYTE)v58;
    v41[9] = v53;
    v41[10] = v39;
  }

  return result;
}

unint64_t sub_10001431C()
{
  unint64_t result = qword_1000B8C90;
  if (!qword_1000B8C90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097520, &type metadata for DumpCacheNodes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8C90);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DumpCacheNodes.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000143A0 + 4 * byte_1000973D4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000143C0 + 4 * byte_1000973D9[v4]))();
  }
}

_BYTE *sub_1000143A0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000143C0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000143C8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000143D0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000143D8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000143E0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DumpCacheNodes.CodingKeys()
{
  return &type metadata for DumpCacheNodes.CodingKeys;
}

unint64_t sub_100014400()
{
  unint64_t result = qword_1000B8C98;
  if (!qword_1000B8C98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000974F8, &type metadata for DumpCacheNodes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8C98);
  }

  return result;
}

unint64_t sub_100014448()
{
  unint64_t result = qword_1000B8CA0;
  if (!qword_1000B8CA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097468, &type metadata for DumpCacheNodes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8CA0);
  }

  return result;
}

unint64_t sub_100014490()
{
  unint64_t result = qword_1000B8CA8;
  if (!qword_1000B8CA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097490, &type metadata for DumpCacheNodes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8CA8);
  }

  return result;
}

uint64_t sub_1000144D4(int a1)
{
  uint64_t v10 = 0LL;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  memset(buffer, 0, sizeof(buffer));
  int v1 = proc_pidinfo(a1, 3, 0LL, buffer, 136);
  uint64_t result = 0LL;
  if (v1 == 136)
  {
    v4[0] = v6;
    v4[1] = v7;
    if ((_BYTE)v6)
    {
      if (BYTE1(v6))
      {
        if (BYTE2(v6))
        {
          if (BYTE3(v6))
          {
            if (BYTE4(v6))
            {
              if (BYTE5(v6))
              {
                if (BYTE6(v6))
                {
                  if (BYTE7(v6))
                  {
                    if (BYTE8(v6))
                    {
                      if (BYTE9(v6))
                      {
                        if (BYTE10(v6))
                        {
                          if (BYTE11(v6))
                          {
                            if (BYTE12(v6))
                            {
                              if (BYTE13(v6))
                              {
                                if (BYTE14(v6))
                                {
                                  if (HIBYTE(v6))
                                  {
                                    if ((_BYTE)v7)
                                    {
                                      if (BYTE1(v7))
                                      {
                                        if (BYTE2(v7))
                                        {
                                          if (BYTE3(v7))
                                          {
                                            if (BYTE4(v7))
                                            {
                                              if (BYTE5(v7))
                                              {
                                                if (BYTE6(v7))
                                                {
                                                  if (BYTE7(v7))
                                                  {
                                                    if (BYTE8(v7))
                                                    {
                                                      if (BYTE9(v7))
                                                      {
                                                        if (BYTE10(v7))
                                                        {
                                                          if (BYTE11(v7))
                                                          {
                                                            if (BYTE12(v7))
                                                            {
                                                              if (BYTE13(v7))
                                                              {
                                                                if (BYTE14(v7))
                                                                {
                                                                  if (HIBYTE(v7)) {
                                                                    uint64_t v3 = 32LL;
                                                                  }
                                                                  else {
                                                                    uint64_t v3 = 31LL;
                                                                  }
                                                                }

                                                                else
                                                                {
                                                                  uint64_t v3 = 30LL;
                                                                }
                                                              }

                                                              else
                                                              {
                                                                uint64_t v3 = 29LL;
                                                              }
                                                            }

                                                            else
                                                            {
                                                              uint64_t v3 = 28LL;
                                                            }
                                                          }

                                                          else
                                                          {
                                                            uint64_t v3 = 27LL;
                                                          }
                                                        }

                                                        else
                                                        {
                                                          uint64_t v3 = 26LL;
                                                        }
                                                      }

                                                      else
                                                      {
                                                        uint64_t v3 = 25LL;
                                                      }
                                                    }

                                                    else
                                                    {
                                                      uint64_t v3 = 24LL;
                                                    }
                                                  }

                                                  else
                                                  {
                                                    uint64_t v3 = 23LL;
                                                  }
                                                }

                                                else
                                                {
                                                  uint64_t v3 = 22LL;
                                                }
                                              }

                                              else
                                              {
                                                uint64_t v3 = 21LL;
                                              }
                                            }

                                            else
                                            {
                                              uint64_t v3 = 20LL;
                                            }
                                          }

                                          else
                                          {
                                            uint64_t v3 = 19LL;
                                          }
                                        }

                                        else
                                        {
                                          uint64_t v3 = 18LL;
                                        }
                                      }

                                      else
                                      {
                                        uint64_t v3 = 17LL;
                                      }
                                    }

                                    else
                                    {
                                      uint64_t v3 = 16LL;
                                    }
                                  }

                                  else
                                  {
                                    uint64_t v3 = 15LL;
                                  }
                                }

                                else
                                {
                                  uint64_t v3 = 14LL;
                                }
                              }

                              else
                              {
                                uint64_t v3 = 13LL;
                              }
                            }

                            else
                            {
                              uint64_t v3 = 12LL;
                            }
                          }

                          else
                          {
                            uint64_t v3 = 11LL;
                          }
                        }

                        else
                        {
                          uint64_t v3 = 10LL;
                        }
                      }

                      else
                      {
                        uint64_t v3 = 9LL;
                      }
                    }

                    else
                    {
                      uint64_t v3 = 8LL;
                    }
                  }

                  else
                  {
                    uint64_t v3 = 7LL;
                  }
                }

                else
                {
                  uint64_t v3 = 6LL;
                }
              }

              else
              {
                uint64_t v3 = 5LL;
              }
            }

            else
            {
              uint64_t v3 = 4LL;
            }
          }

          else
          {
            uint64_t v3 = 3LL;
          }
        }

        else
        {
          uint64_t v3 = 2LL;
        }
      }

      else
      {
        uint64_t v3 = 1LL;
      }
    }

    else
    {
      uint64_t v3 = 0LL;
    }

    return static String._fromUTF8Repairing(_:)(v4, v3);
  }

  return result;
}

unint64_t sub_1000148D8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (void *)static CommandLine.arguments.getter();
  __int128 v5 = v4;
  if (!v4[2]) {
    goto LABEL_8;
  }
  uint64_t v7 = v4[4];
  unint64_t v6 = v4[5];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v5);
  if (v7 == a1 && v6 == a2)
  {
    unint64_t v10 = a2;
    goto LABEL_10;
  }

  uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, a1, a2, 0LL);
  if ((v9 & 1) != 0)
  {
    unint64_t v10 = v6;
LABEL_10:
    swift_bridgeObjectRelease(v10);
    char v11 = 1;
    return v11 & 1;
  }

  v31[0] = 47LL;
  v31[1] = 0xE100000000000000LL;
  __chkstk_darwin(v9);
  v30[2] = v31;
  unint64_t v13 = sub_1000154F4(sub_1000155F8, (uint64_t)v30, v7, v6);
  if ((v14 & 1) != 0)
  {
    uint64_t v4 = (void *)v6;
LABEL_8:
    swift_bridgeObjectRelease(v4);
    char v11 = 0;
    return v11 & 1;
  }

  unint64_t v15 = sub_100014AA0(v13, v7, v6);
  unint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(v6);
  unint64_t result = Substring.index(_:offsetBy:limitedBy:)(v15, 1LL, v17, v15, v17, v19, v21);
  if ((v22 & 1) != 0) {
    unint64_t result = v17;
  }
  if (v17 >> 14 >= result >> 14)
  {
    unint64_t v23 = Substring.subscript.getter();
    unint64_t v25 = v24;
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(v21);
    char v11 = sub_10001564C(v23, v25, v27, v29, a1, a2);
    swift_bridgeObjectRelease(v29);
    return v11 & 1;
  }

  __break(1u);
  return result;
}

unint64_t sub_100014AA0(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_100014AEC(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_1000295DC((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_100014B54(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100014B54(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  Swift::Int v99 = v3;
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      unsigned __int8 v79 = (_DWORD *)*a1;
      uint64_t v80 = -1LL;
      uint64_t v81 = 1LL;
      for (i = v79; ; i += 162)
      {
        uint64_t v83 = v80;
        ArgumentParser::ArgumentHelp v84 = i;
        do
        {
          if (v84[10] >= v84[172]) {
            break;
          }
          if (!v79) {
            goto LABEL_147;
          }
          memcpy(__dst, v84 + 162, sizeof(__dst));
          memcpy(v84 + 162, v84, 0x288uLL);
          uint64_t result = (uint64_t)memcpy(v84, __dst, 0x288uLL);
          v84 -= 162;
        }

        while (!__CFADD__(v83++, 1LL));
        ++v81;
        --v80;
        if (v81 == v99) {
          return result;
        }
      }
    }

    goto LABEL_143;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_142;
  }
  uint64_t v97 = result;
  uint64_t v103 = v1;
  Swift::String v93 = a1;
  if (v3 <= 1)
  {
    __int128 v8 = _swiftEmptyArrayStorage;
    char v100 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = (char *)_swiftEmptyArrayStorage;
LABEL_108:
      uint64_t result = (uint64_t)v10;
      int v96 = v8;
      if (v11 < 2) {
        goto LABEL_97;
      }
      uint64_t v86 = *v93;
      while (1)
      {
        unint64_t v87 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_137;
        }
        if (!v86) {
          goto LABEL_151;
        }
        uint64_t v78 = result;
        uint64_t v88 = *(void *)(result + 32 + 16 * v87);
        uint64_t v89 = *(void *)(result + 32 + 16 * (v11 - 1) + 8);
        uint64_t v90 = v103;
        uint64_t result = sub_100015290( (char *)(v86 + 648 * v88),  (char *)(v86 + 648LL * *(void *)(result + 32 + 16 * (v11 - 1))),  v86 + 648 * v89,  v100);
        uint64_t v103 = v90;
        if (v90) {
          goto LABEL_96;
        }
        if (v89 < v88) {
          goto LABEL_138;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v78);
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100027214(v78);
          uint64_t v78 = result;
        }

        if (v87 >= *(void *)(v78 + 16)) {
          goto LABEL_139;
        }
        unint64_t v91 = (void *)(v78 + 32 + 16 * v87);
        *unint64_t v91 = v88;
        v91[1] = v89;
        unint64_t v92 = *(void *)(v78 + 16);
        if (v11 > v92) {
          goto LABEL_140;
        }
        memmove((void *)(v78 + 32 + 16 * (v11 - 1)), (const void *)(v78 + 32 + 16 * v11), 16 * (v92 - v11));
        uint64_t result = v78;
        *(void *)(v78 + 16) = v92 - 1;
        unint64_t v11 = v92 - 1;
        if (v92 <= 2) {
          goto LABEL_97;
        }
      }
    }

    int v96 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    type metadata accessor for kinfo_proc(0LL);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(void *)(result + 16) = v6;
    int v96 = (void *)result;
    char v100 = (char *)(result + 32);
  }

  Swift::Int v9 = 0LL;
  uint64_t v101 = *a1;
  uint64_t v94 = *a1 - 648;
  uint64_t v95 = *a1 + 1336;
  unint64_t v10 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v12 = v9++;
    if (v9 < v3)
    {
      int v13 = *(_DWORD *)(v101 + 648 * v9 + 40);
      int v14 = *(_DWORD *)(v101 + 648 * v12 + 40);
      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        unint64_t v15 = (int *)(v95 + 648 * v12);
        int v16 = v13;
        while (1)
        {
          int v17 = *v15;
          if (v14 < v13 == v16 >= *v15) {
            break;
          }
          v15 += 162;
          ++v9;
          int v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }

      if (v14 < v13)
      {
        if (v9 < v12) {
          goto LABEL_144;
        }
        if (v12 < v9)
        {
          uint64_t v18 = (char *)(v94 + 648 * v9);
          Swift::Int v19 = v9;
          Swift::Int v20 = v12;
          uint64_t v21 = (char *)(v101 + 648 * v12);
          do
          {
            if (v20 != --v19)
            {
              if (!v101) {
                goto LABEL_150;
              }
              memcpy(__dst, v21, sizeof(__dst));
              memmove(v21, v18, 0x288uLL);
              uint64_t result = (uint64_t)memcpy(v18, __dst, 0x288uLL);
            }

            ++v20;
            v18 -= 648;
            v21 += 648;
          }

          while (v20 < v19);
        }
      }
    }

    if (v9 >= v3) {
      goto LABEL_39;
    }
    if (__OFSUB__(v9, v12)) {
      goto LABEL_141;
    }
    if (v9 - v12 >= v97) {
      goto LABEL_39;
    }
    if (__OFADD__(v12, v97)) {
      goto LABEL_145;
    }
    if (v12 + v97 >= v3) {
      Swift::Int v22 = v3;
    }
    else {
      Swift::Int v22 = v12 + v97;
    }
    if (v22 < v12) {
      goto LABEL_146;
    }
    if (v9 == v22)
    {
LABEL_39:
      uint64_t v23 = v101;
      if (v9 < v12) {
        goto LABEL_136;
      }
    }

    else
    {
      unsigned __int8 v76 = (_DWORD *)(v94 + 648 * v9);
      uint64_t v23 = v101;
      Swift::Int v98 = v12;
      do
      {
        unsigned __int8 v77 = v76;
        do
        {
          if (v77[10] >= v77[172]) {
            break;
          }
          if (!v101) {
            goto LABEL_148;
          }
          memcpy(__dst, v77 + 162, sizeof(__dst));
          memcpy(v77 + 162, v77, 0x288uLL);
          uint64_t result = (uint64_t)memcpy(v77, __dst, 0x288uLL);
          ++v12;
          v77 -= 162;
        }

        while (v9 != v12);
        ++v9;
        v76 += 162;
        Swift::Int v12 = v98;
      }

      while (v9 != v22);
      Swift::Int v9 = v22;
      if (v22 < v98)
      {
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
        return result;
      }
    }

    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10002711C(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
      unint64_t v10 = (char *)result;
    }

    unint64_t v25 = *((void *)v10 + 2);
    unint64_t v24 = *((void *)v10 + 3);
    unint64_t v11 = v25 + 1;
    if (v25 >= v24 >> 1)
    {
      uint64_t result = (uint64_t)sub_10002711C((char *)(v24 > 1), v25 + 1, 1, v10);
      unint64_t v10 = (char *)result;
    }

    *((void *)v10 + 2) = v11;
    uint64_t v26 = v10 + 32;
    uint64_t v27 = &v10[16 * v25 + 32];
    *(void *)uint64_t v27 = v12;
    *((void *)v27 + 1) = v9;
    if (v25) {
      break;
    }
    unint64_t v11 = 1LL;
LABEL_15:
    Swift::Int v3 = v99;
    if (v9 >= v99)
    {
      __int128 v8 = v96;
      goto LABEL_108;
    }
  }

  while (1)
  {
    unint64_t v28 = v11 - 1;
    if (v11 >= 4)
    {
      uint64_t v33 = &v26[2 * v11];
      uint64_t v34 = *(v33 - 8);
      uint64_t v35 = *(v33 - 7);
      BOOL v39 = __OFSUB__(v35, v34);
      uint64_t v36 = v35 - v34;
      if (v39) {
        goto LABEL_125;
      }
      uint64_t v38 = *(v33 - 6);
      uint64_t v37 = *(v33 - 5);
      BOOL v39 = __OFSUB__(v37, v38);
      uint64_t v31 = v37 - v38;
      char v32 = v39;
      if (v39) {
        goto LABEL_126;
      }
      unint64_t v40 = v11 - 2;
      unint64_t v41 = &v26[2 * v11 - 4];
      uint64_t v43 = *v41;
      uint64_t v42 = v41[1];
      BOOL v39 = __OFSUB__(v42, v43);
      uint64_t v44 = v42 - v43;
      if (v39) {
        goto LABEL_127;
      }
      BOOL v39 = __OFADD__(v31, v44);
      uint64_t v45 = v31 + v44;
      if (v39) {
        goto LABEL_129;
      }
      if (v45 >= v36)
      {
        uint64_t v63 = &v26[2 * v28];
        uint64_t v65 = *v63;
        uint64_t v64 = v63[1];
        BOOL v39 = __OFSUB__(v64, v65);
        uint64_t v66 = v64 - v65;
        if (v39) {
          goto LABEL_135;
        }
        BOOL v56 = v31 < v66;
        goto LABEL_76;
      }
    }

    else
    {
      if (v11 != 3)
      {
        uint64_t v57 = *((void *)v10 + 4);
        uint64_t v58 = *((void *)v10 + 5);
        BOOL v39 = __OFSUB__(v58, v57);
        uint64_t v50 = v58 - v57;
        char v51 = v39;
        goto LABEL_70;
      }

      uint64_t v30 = *((void *)v10 + 4);
      uint64_t v29 = *((void *)v10 + 5);
      BOOL v39 = __OFSUB__(v29, v30);
      uint64_t v31 = v29 - v30;
      char v32 = v39;
    }

    if ((v32 & 1) != 0) {
      goto LABEL_128;
    }
    unint64_t v40 = v11 - 2;
    uint64_t v46 = &v26[2 * v11 - 4];
    uint64_t v48 = *v46;
    uint64_t v47 = v46[1];
    BOOL v49 = __OFSUB__(v47, v48);
    uint64_t v50 = v47 - v48;
    char v51 = v49;
    if (v49) {
      goto LABEL_130;
    }
    int v52 = &v26[2 * v28];
    uint64_t v54 = *v52;
    uint64_t v53 = v52[1];
    BOOL v39 = __OFSUB__(v53, v54);
    uint64_t v55 = v53 - v54;
    if (v39) {
      goto LABEL_132;
    }
    if (__OFADD__(v50, v55)) {
      goto LABEL_134;
    }
    if (v50 + v55 >= v31)
    {
      BOOL v56 = v31 < v55;
LABEL_76:
      if (v56) {
        unint64_t v28 = v40;
      }
      goto LABEL_78;
    }

LABEL_70:
    if ((v51 & 1) != 0) {
      goto LABEL_131;
    }
    uint64_t v59 = &v26[2 * v28];
    uint64_t v61 = *v59;
    uint64_t v60 = v59[1];
    BOOL v39 = __OFSUB__(v60, v61);
    uint64_t v62 = v60 - v61;
    if (v39) {
      goto LABEL_133;
    }
    if (v62 < v50) {
      goto LABEL_15;
    }
LABEL_78:
    unint64_t v67 = v28 - 1;
    if (v28 - 1 >= v11)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }

    uint64_t v68 = v23;
    if (!v23) {
      goto LABEL_149;
    }
    uint64_t v69 = v10;
    uint64_t v70 = &v26[2 * v67];
    uint64_t v71 = *v70;
    uint64_t v72 = &v26[2 * v28];
    uint64_t v73 = v72[1];
    uint64_t v74 = v103;
    uint64_t result = sub_100015290((char *)(v68 + 648 * *v70), (char *)(v68 + 648LL * *v72), v68 + 648 * v73, v100);
    uint64_t v103 = v74;
    if (v74) {
      break;
    }
    if (v73 < v71) {
      goto LABEL_122;
    }
    if (v28 > *((void *)v69 + 2)) {
      goto LABEL_123;
    }
    *uint64_t v70 = v71;
    v26[2 * v67 + 1] = v73;
    unint64_t v75 = *((void *)v69 + 2);
    if (v28 >= v75) {
      goto LABEL_124;
    }
    unint64_t v10 = v69;
    unint64_t v11 = v75 - 1;
    uint64_t result = (uint64_t)memmove(&v26[2 * v28], v72 + 2, 16 * (v75 - 1 - v28));
    *((void *)v69 + 2) = v75 - 1;
    uint64_t v23 = v101;
    if (v75 <= 2) {
      goto LABEL_15;
    }
  }

  uint64_t v78 = (uint64_t)v69;
LABEL_96:
  uint64_t result = v78;
LABEL_97:
  swift_bridgeObjectRelease(result);
  v96[2] = 0LL;
  return swift_bridgeObjectRelease(v96);
}

  swift_bridgeObjectRelease(v27);
  unsigned __int8 v79 = v112;
  uint64_t v80 = v112 + 64;
  uint64_t v81 = 1LL << *(_BYTE *)(v112 + 32);
  uint64_t v82 = -1LL;
  if (v81 < 64) {
    uint64_t v82 = ~(-1LL << v81);
  }
  uint64_t v83 = v82 & *(void *)(v112 + 64);
  ArgumentParser::ArgumentHelp v84 = (unint64_t)(v81 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(v112);
  uint64_t v85 = 0LL;
  while (v83)
  {
    uint64_t v86 = __clz(__rbit64(v83));
    v83 &= v83 - 1;
    unint64_t v87 = v86 | (v85 << 6);
LABEL_90:
    unint64_t v91 = *(void *)(*(void *)(v79 + 56) + 112 * v87 + 80);
    unint64_t v92 = *(void *)(v91 + 16);
    if (v92)
    {
      Swift::String v93 = *(void *)(*(void *)(v79 + 48) + 8 * v87);
      swift_bridgeObjectRetain(v91);
      for (i = 0LL; i != v92; ++i)
      {
        int v96 = sub_10001E684(&v109, *(void *)(v91 + 8 * i + 32));
        if (*(void *)(v95 + 80))
        {
          *(void *)(v95 + 96) = v93;
          *(_BYTE *)(v95 + 104) = 0;
        }

        ((void (*)(unint64_t *, void))v96)(&v109, 0LL);
      }

      uint64_t result = swift_bridgeObjectRelease(v91);
    }
  }

  uint64_t v88 = v85 + 1;
  if (__OFADD__(v85, 1LL)) {
    goto LABEL_100;
  }
  if (v88 >= v84)
  {
LABEL_95:
    swift_release(v79);
    return v112;
  }

  uint64_t v89 = *(void *)(v80 + 8 * v88);
  ++v85;
  if (v89) {
    goto LABEL_89;
  }
  uint64_t v85 = v88 + 1;
  if (v88 + 1 >= v84) {
    goto LABEL_95;
  }
  uint64_t v89 = *(void *)(v80 + 8 * v85);
  if (v89) {
    goto LABEL_89;
  }
  uint64_t v85 = v88 + 2;
  if (v88 + 2 >= v84) {
    goto LABEL_95;
  }
  uint64_t v89 = *(void *)(v80 + 8 * v85);
  if (v89)
  {
LABEL_89:
    uint64_t v83 = (v89 - 1) & v89;
    unint64_t v87 = __clz(__rbit64(v89)) + (v85 << 6);
    goto LABEL_90;
  }

  uint64_t v90 = v88 + 3;
  if (v90 >= v84) {
    goto LABEL_95;
  }
  uint64_t v89 = *(void *)(v80 + 8 * v90);
  if (v89)
  {
    uint64_t v85 = v90;
    goto LABEL_89;
  }

  while (1)
  {
    uint64_t v85 = v90 + 1;
    if (__OFADD__(v90, 1LL)) {
      break;
    }
    if (v85 >= v84) {
      goto LABEL_95;
    }
    uint64_t v89 = *(void *)(v80 + 8 * v85);
    ++v90;
    if (v89) {
      goto LABEL_89;
    }
  }

uint64_t sub_100015290(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 648;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 648;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[648 * v11] <= a4) {
      memmove(a4, __src, 648 * v11);
    }
    Swift::Int v12 = &v4[648 * v11];
    if (v7 >= v6 || v10 < 648) {
      goto LABEL_39;
    }
    int v16 = (char *)(a3 - 648);
    while (1)
    {
      int v17 = v16 + 648;
      if (*((_DWORD *)v6 - 152) >= *((_DWORD *)v12 - 152))
      {
        uint64_t v18 = v12 - 648;
        if (v17 != v12)
        {
          v12 -= 648;
          goto LABEL_36;
        }

        BOOL v19 = v16 >= v12;
        v12 -= 648;
        if (v19) {
          goto LABEL_36;
        }
      }

      else
      {
        uint64_t v18 = v6 - 648;
        if (v17 != v6)
        {
          v6 -= 648;
LABEL_36:
          memmove(v16, v18, 0x288uLL);
          goto LABEL_37;
        }

        BOOL v19 = v16 >= v6;
        v6 -= 648;
        if (v19) {
          goto LABEL_36;
        }
      }

unint64_t sub_1000154F4( uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  uint64_t v9 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v9 = 11LL;
  }
  unint64_t v10 = v9 | (v5 << 16);
  while (1)
  {
    unint64_t v10 = String.index(before:)(v10, a3, a4);
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    uint64_t v13 = v12;
    v17[0] = v11;
    v17[1] = v12;
    char v14 = a1(v17);
    if (v4) {
      break;
    }
    char v15 = v14;
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0) {
      return v10;
    }
    if (v10 < 0x4000) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v13);
  return v10;
}

uint64_t sub_1000155F8(uint64_t *a1)
{
  Swift::Int v3 = *(void **)(v1 + 16);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = v3[1];
  if (v4 == *v3 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0LL) & 1;
  }
}

uint64_t sub_10001564C( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v6 = a5 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a2 >> 16;
  if (a3 == a5 && a4 == a6 && !v7 && v8 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)(a3, a4, v7, v8) & 1;
  }
}

char *sub_1000156C0()
{
  size_t v24 = 0LL;
  uint64_t v0 = sub_100005104(&qword_1000B8C48);
  inited = (char *)swift_initStackObject(v0, v25);
  *((_OWORD *)inited + 1) = xmmword_100097570;
  *((void *)inited + 4) = 0xE00000001LL;
  *((_DWORD *)inited + 10) = 0;
  if (sysctl((int *)inited + 8, 3u, 0LL, &v24, 0LL, 0LL))
  {
    uint64_t v2 = inited;
LABEL_13:
    swift_bridgeObjectRelease(v2);
    return 0LL;
  }

  uint64_t v3 = (uint64_t)v24 / 648;
  if ((uint64_t)v24 < 648)
  {
    uint64_t v6 = (char *)_swiftEmptyArrayStorage;
  }

  else
  {
    type metadata accessor for kinfo_proc(0LL);
    uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)(v3, v4);
    uint64_t v6 = (char *)v5;
    *(void *)(v5 + 16) = v3;
    uint64_t v7 = 32LL;
    uint64_t v8 = v3;
    do
    {
      uint64_t v9 = v5 + v7;
      *(void *)(v9 + 29) = 0LL;
      *(_OWORD *)uint64_t v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      *(void *)(v9 + 40) = 0LL;
      *(_DWORD *)(v9 + 48) = 0;
      *(void *)(v9 + 136) = 0LL;
      *(_DWORD *)(v9 + 144) = 0;
      *(void *)(v9 + 152) = 0LL;
      *(_DWORD *)(v9 + 160) = 0;
      *(void *)(v9 + 200) = 0LL;
      *(_DWORD *)(v9 + 208) = 0;
      *(void *)(v9 + 416) = 0LL;
      *(_WORD *)(v9 + 424) = 0;
      *(_DWORD *)(v9 + 496) = 0;
      *(void *)(v5 + v7 + 572) = 0LL;
      *(_OWORD *)(v9 + 56) = 0uLL;
      *(_OWORD *)(v9 + 72) = 0uLL;
      *(_DWORD *)(v9 + 88) = 0;
      *(_DWORD *)(v9 + 128) = 0;
      *(_OWORD *)(v9 + 96) = 0uLL;
      *(_OWORD *)(v9 + 112) = 0uLL;
      *(void *)(v9 + 176) = 0LL;
      *(void *)(v9 + 184) = 0LL;
      *(_DWORD *)(v9 + 192) = 0;
      *(void *)(v9 + 168) = 0LL;
      *(_OWORD *)(v9 + 216) = 0uLL;
      *(_OWORD *)(v9 + 232) = 0uLL;
      *(_OWORD *)(v9 + 244) = 0uLL;
      *(_DWORD *)(v9 + 280) = 0;
      *(void *)(v9 + 264) = 0LL;
      *(void *)(v9 + 272) = 0LL;
      *(_OWORD *)(v9 + 288) = 0uLL;
      *(_OWORD *)(v9 + 304) = 0uLL;
      *(_OWORD *)(v9 + 320) = 0uLL;
      *(_OWORD *)(v9 + 336) = 0uLL;
      *(_OWORD *)(v9 + 352) = 0uLL;
      *(_OWORD *)(v9 + 368) = 0uLL;
      *(_OWORD *)(v9 + 384) = 0uLL;
      *(_OWORD *)(v5 + v7 + 396) = 0uLL;
      unint64_t v10 = (_OWORD *)(v5 + v7 + 428);
      v10[2] = 0uLL;
      v10[3] = 0uLL;
      *unint64_t v10 = 0uLL;
      v10[1] = 0uLL;
      *(void *)(v9 + 504) = 0LL;
      *(void *)(v9 + 512) = 0LL;
      *(_DWORD *)(v9 + 528) = 0;
      *(void *)(v9 + 520) = 0LL;
      *(_WORD *)(v9 + 568) = 0;
      *(_OWORD *)((char *)v10 + 124) = 0uLL;
      *(_OWORD *)((char *)v10 + 108) = 0uLL;
      *(_WORD *)(v9 + 608) = 0;
      *(void *)(v9 + 592) = 0LL;
      *(void *)(v9 + 584) = 0LL;
      *(void *)(v9 + 600) = 0LL;
      *(_OWORD *)((char *)v10 + 200) = 0uLL;
      v7 += 648LL;
      *(_OWORD *)((char *)v10 + 184) = 0uLL;
      --v8;
    }

    while (v8);
  }

  if ((swift_isUniquelyReferenced_nonNull_native(inited) & 1) == 0) {
    inited = sub_100011BF4(0LL, 3LL, 0, inited);
  }
  swift_bridgeObjectRetain(inited);
  int v11 = sysctl((int *)inited + 8, 3u, v6 + 32, &v24, 0LL, 0LL);
  swift_bridgeObjectRelease(inited);
  if (v11)
  {
    swift_bridgeObjectRelease(inited);
    uint64_t v2 = v6;
    goto LABEL_13;
  }

  if (v3 > (uint64_t)v24 / 648)
  {
    uint64_t v14 = sub_10001E654(v3 - (uint64_t)v24 / 648, (uint64_t)v6);
    swift_bridgeObjectRetain(v6);
    swift_unknownObjectRelease(v14);
  }

  uint64_t v23 = v6;
  swift_bridgeObjectRetain_n(v6, 2LL);
  sub_100014AEC(&v23);
  swift_bridgeObjectRelease(inited);
  swift_bridgeObjectRelease_n(v6, 2LL);
  char v15 = v23;
  pid_t v16 = getpid();
  uint64_t v17 = *((void *)v15 + 2);
  if (v17)
  {
    pid_t v18 = v16;
    BOOL v19 = (int *)(v15 + 72);
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
    do
    {
      int v20 = *v19;
      if (*v19 < 2) {
        break;
      }
      if (v20 != v18)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
          uint64_t v12 = sub_100011BF4(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
        }
        unint64_t v22 = *((void *)v12 + 2);
        unint64_t v21 = *((void *)v12 + 3);
        if (v22 >= v21 >> 1) {
          uint64_t v12 = sub_100011BF4((char *)(v21 > 1), v22 + 1, 1, v12);
        }
        *((void *)v12 + 2) = v22 + 1;
        *(_DWORD *)&v12[4 * v22 + 32] = v20;
      }

      v19 += 162;
      --v17;
    }

    while (v17);
  }

  else
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  swift_release(v15);
  return v12;
}

uint64_t sub_100015A78( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  if ((a13 & 1) != 0) {
    return swift_retain(a2);
  }
  char v18 = a6 & 1;
  sub_100003B00(a1, a2, a3 & 1);
  sub_100003B00(a4, a5, v18);
  sub_100003B00(a7, a8, a9 & 1);
  return sub_100003AF0(a10, a11, a12 & 1);
}

uint64_t destroy for DumpGenericMetadata(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 256));
}

uint64_t sub_100015BDC( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  if ((a13 & 1) != 0) {
    return swift_release(a2);
  }
  char v18 = a6 & 1;
  sub_100003C60(a1, a2, a3 & 1);
  sub_100003C60(a4, a5, v18);
  sub_100003C60(a7, a8, a9 & 1);
  return sub_100003C50(a10, a11, a12 & 1);
}

uint64_t initializeWithCopy for DumpGenericMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v32 = *(_BYTE *)(a2 + 64);
  char v33 = *(_BYTE *)(a2 + 65);
  sub_100003A6C(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v32, v33);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v32;
  *(_BYTE *)(a1 + 65) = v33;
  *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  LOBYTE(v9) = *(_BYTE *)(a2 + 129);
  LOBYTE(v10) = *(_BYTE *)(a2 + 128);
  swift_bridgeObjectRetain(v12);
  sub_100003B10(v13, v14, v15, v16, v17, v10, v9);
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v17;
  *(_BYTE *)(a1 + 128) = v10;
  *(_BYTE *)(a1 + 129) = v9;
  *(_WORD *)(a1 + 130) = *(_WORD *)(a2 + 130);
  uint64_t v18 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v18;
  uint64_t v30 = *(void *)(a2 + 160);
  uint64_t v31 = *(void *)(a2 + 152);
  uint64_t v19 = *(void *)(a2 + 184);
  uint64_t v28 = *(void *)(a2 + 176);
  uint64_t v29 = *(void *)(a2 + 168);
  uint64_t v20 = *(void *)(a2 + 192);
  uint64_t v21 = *(void *)(a2 + 200);
  uint64_t v22 = *(void *)(a2 + 216);
  uint64_t v23 = *(void *)(a2 + 224);
  uint64_t v24 = *(void *)(a2 + 232);
  uint64_t v27 = *(void *)(a2 + 208);
  LOBYTE(v15) = *(_BYTE *)(a2 + 240);
  LOBYTE(v16) = *(_BYTE *)(a2 + 241);
  swift_bridgeObjectRetain(v18);
  sub_100015A78(v31, v30, v29, v28, v19, v20, v21, v27, v22, v23, v24, v15, v16);
  *(void *)(a1 + 152) = v31;
  *(void *)(a1 + 160) = v30;
  *(void *)(a1 + 168) = v29;
  *(void *)(a1 + 176) = v28;
  *(void *)(a1 + 184) = v19;
  *(void *)(a1 + 192) = v20;
  *(void *)(a1 + 200) = v21;
  *(void *)(a1 + 208) = v27;
  *(void *)(a1 + 216) = v22;
  *(void *)(a1 + 224) = v23;
  *(void *)(a1 + 232) = v24;
  *(_BYTE *)(a1 + 240) = v15;
  *(_BYTE *)(a1 + 241) = v16;
  *(_WORD *)(a1 + 242) = *(_WORD *)(a2 + 242);
  uint64_t v25 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v25;
  swift_bridgeObjectRetain(v25);
  return a1;
}

uint64_t assignWithCopy for DumpGenericMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v64 = *(_BYTE *)(a2 + 64);
  char v66 = *(_BYTE *)(a2 + 65);
  sub_100003A6C(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v64, v66);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(_BYTE *)(a1 + 64);
  char v21 = *(_BYTE *)(a1 + 65);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v64;
  *(_BYTE *)(a1 + 65) = v66;
  sub_100003BCC(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v22 = *(void *)(a2 + 80);
  uint64_t v23 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *(void *)(a2 + 88);
  uint64_t v25 = *(void *)(a2 + 96);
  uint64_t v26 = *(void *)(a2 + 104);
  uint64_t v27 = *(void *)(a2 + 112);
  uint64_t v28 = *(void *)(a2 + 120);
  LOBYTE(v9) = *(_BYTE *)(a2 + 129);
  LOBYTE(v10) = *(_BYTE *)(a2 + 128);
  sub_100003B10(v24, v25, v26, v27, v28, v10, v9);
  uint64_t v29 = *(void *)(a1 + 88);
  uint64_t v30 = *(void *)(a1 + 96);
  uint64_t v31 = *(void *)(a1 + 104);
  uint64_t v32 = *(void *)(a1 + 112);
  uint64_t v33 = *(void *)(a1 + 120);
  char v34 = *(_BYTE *)(a1 + 129);
  *(void *)(a1 + 88) = v24;
  *(void *)(a1 + 96) = v25;
  *(void *)(a1 + 104) = v26;
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v28;
  char v35 = *(_BYTE *)(a1 + 128);
  *(_BYTE *)(a1 + 128) = v10;
  *(_BYTE *)(a1 + 129) = v9;
  sub_100003C70(v29, v30, v31, v32, v33, v35, v34);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v36 = *(void *)(a2 + 144);
  uint64_t v37 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  uint64_t v38 = *(void *)(a2 + 152);
  uint64_t v39 = *(void *)(a2 + 160);
  uint64_t v40 = *(void *)(a2 + 168);
  uint64_t v41 = *(void *)(a2 + 176);
  uint64_t v42 = *(void *)(a2 + 184);
  uint64_t v43 = *(void *)(a2 + 192);
  uint64_t v44 = *(void *)(a2 + 200);
  uint64_t v45 = *(void *)(a2 + 208);
  uint64_t v61 = *(void *)(a2 + 216);
  uint64_t v62 = *(void *)(a2 + 224);
  uint64_t v63 = *(void *)(a2 + 232);
  char v65 = *(_BYTE *)(a2 + 240);
  char v67 = *(_BYTE *)(a2 + 241);
  sub_100015A78(v38, v39, v40, v41, v42, v43, v44, v45, v61, v62, v63, v65, v67);
  uint64_t v46 = *(void *)(a1 + 152);
  uint64_t v47 = *(void *)(a1 + 160);
  uint64_t v48 = *(void *)(a1 + 168);
  uint64_t v49 = *(void *)(a1 + 176);
  uint64_t v50 = *(void *)(a1 + 184);
  uint64_t v51 = *(void *)(a1 + 192);
  uint64_t v52 = *(void *)(a1 + 200);
  uint64_t v53 = *(void *)(a1 + 208);
  __int128 v54 = *(_OWORD *)(a1 + 216);
  uint64_t v55 = *(void *)(a1 + 232);
  char v56 = *(_BYTE *)(a1 + 240);
  char v57 = *(_BYTE *)(a1 + 241);
  *(void *)(a1 + 152) = v38;
  *(void *)(a1 + 160) = v39;
  *(void *)(a1 + 168) = v40;
  *(void *)(a1 + 176) = v41;
  *(void *)(a1 + 184) = v42;
  *(void *)(a1 + 192) = v43;
  *(void *)(a1 + 200) = v44;
  *(void *)(a1 + 208) = v45;
  *(void *)(a1 + 216) = v61;
  *(void *)(a1 + 224) = v62;
  *(void *)(a1 + 232) = v63;
  *(_BYTE *)(a1 + 240) = v65;
  *(_BYTE *)(a1 + 241) = v67;
  sub_100015BDC(v46, v47, v48, v49, v50, v51, v52, v53, v54, *((uint64_t *)&v54 + 1), v55, v56, v57);
  *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
  *(_BYTE *)(a1 + 243) = *(_BYTE *)(a2 + 243);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  uint64_t v58 = *(void *)(a2 + 256);
  uint64_t v59 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  return a1;
}

void *initializeWithTake for DumpGenericMetadata(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for DumpGenericMetadata(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(a2 + 64);
  char v5 = *(_BYTE *)(a2 + 65);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  char v14 = *(_BYTE *)(a1 + 64);
  char v15 = *(_BYTE *)(a1 + 65);
  __int128 v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  __int128 v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 65) = v5;
  sub_100003BCC(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  uint64_t v18 = *(void *)(a2 + 80);
  uint64_t v19 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v18;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(a2 + 120);
  char v21 = *(_BYTE *)(a2 + 128);
  char v22 = *(_BYTE *)(a2 + 129);
  uint64_t v23 = *(void *)(a1 + 88);
  uint64_t v24 = *(void *)(a1 + 96);
  uint64_t v25 = *(void *)(a1 + 104);
  uint64_t v26 = *(void *)(a1 + 112);
  uint64_t v27 = *(void *)(a1 + 120);
  char v28 = *(_BYTE *)(a1 + 129);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = v20;
  char v29 = *(_BYTE *)(a1 + 128);
  *(_BYTE *)(a1 + 128) = v21;
  *(_BYTE *)(a1 + 129) = v22;
  sub_100003C70(v23, v24, v25, v26, v27, v29, v28);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  uint64_t v30 = *(void *)(a2 + 144);
  uint64_t v31 = *(void *)(a1 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v30;
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = *(void *)(a2 + 232);
  char v33 = *(_BYTE *)(a2 + 240);
  char v34 = *(_BYTE *)(a2 + 241);
  uint64_t v35 = *(void *)(a1 + 152);
  uint64_t v36 = *(void *)(a1 + 160);
  uint64_t v37 = *(void *)(a1 + 168);
  uint64_t v38 = *(void *)(a1 + 176);
  uint64_t v39 = *(void *)(a1 + 184);
  uint64_t v40 = *(void *)(a1 + 192);
  uint64_t v41 = *(void *)(a1 + 200);
  uint64_t v42 = *(void *)(a1 + 208);
  __int128 v43 = *(_OWORD *)(a1 + 216);
  uint64_t v44 = *(void *)(a1 + 232);
  char v45 = *(_BYTE *)(a1 + 240);
  char v46 = *(_BYTE *)(a1 + 241);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = v32;
  *(_BYTE *)(a1 + 240) = v33;
  *(_BYTE *)(a1 + 241) = v34;
  sub_100015BDC(v35, v36, v37, v38, v39, v40, v41, v42, v43, *((uint64_t *)&v43 + 1), v44, v45, v46);
  *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
  *(_BYTE *)(a1 + 243) = *(_BYTE *)(a2 + 243);
  uint64_t v47 = *(void *)(a2 + 256);
  uint64_t v48 = *(void *)(a1 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v47;
  swift_bridgeObjectRelease(v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DumpGenericMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 264)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DumpGenericMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 264) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 264) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DumpGenericMetadata()
{
  return &type metadata for DumpGenericMetadata;
}

void sub_100016374(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1000163C0()
{
  return Hasher._finalize()();
}

void sub_10001647C(char *a1)
{
}

void sub_100016488()
{
}

void sub_100016494()
{
  __asm { BR              X10 }

uint64_t sub_1000164D0(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xEA00000000006E6FLL);
}

void sub_100016578(uint64_t a1)
{
}

unint64_t sub_100016580@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10001BCB4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000165AC()
{
  return ((uint64_t (*)(void))((char *)sub_1000165DC + 4 * byte_10009759E[*v0]))();
}

void sub_1000165DC(void *a1@<X8>)
{
  *a1 = 0x697461636F6C6C61LL;
  a1[1] = 0xEA00000000006E6FLL;
}

void sub_1000165FC(void *a1@<X8>)
{
  *a1 = 1701667182LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_100016610(char *a1@<X8>)
{
  a1[15] = -18;
}

void sub_100016638(void *a1@<X8>)
{
  *a1 = 0x65676162726167LL;
  a1[1] = v1;
}

void sub_100016650(void *a1@<X8>)
{
  *a1 = 0x74657366666FLL;
  a1[1] = 0xE600000000000000LL;
}

void sub_100016668(void *a1@<X8>)
{
  *a1 = 0x636172746B636162LL;
  a1[1] = 0xE900000000000065LL;
}

uint64_t sub_100016688()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000166B8 + 4 * byte_1000975A5[*v0]))( 0x73736572646461LL,  0xE700000000000000LL);
}

uint64_t sub_1000166B8()
{
  return 0x697461636F6C6C61LL;
}

uint64_t sub_1000166D4()
{
  return 1701667182LL;
}

uint64_t sub_1000166E4()
{
  return 0x4F79617272417369LL;
}

uint64_t sub_100016708()
{
  return 0x65676162726167LL;
}

uint64_t sub_10001671C()
{
  return 0x74657366666FLL;
}

uint64_t sub_100016730()
{
  return 0x636172746B636162LL;
}

unint64_t sub_10001674C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10001BCB4(a1);
  *a2 = result;
  return result;
}

void sub_100016770(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10001677C(uint64_t a1)
{
  unint64_t v2 = sub_10001D388();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000167A4(uint64_t a1)
{
  unint64_t v2 = sub_10001D388();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000167CC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005104(&qword_1000B8DB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100006270(a1, v9);
  unint64_t v11 = sub_10001D388();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for Metadata.CodingKeys,  &type metadata for Metadata.CodingKeys,  v11,  v9,  v10);
  unint64_t v12 = *v3;
  LOBYTE(v25) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v25, v5);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  unint64_t v13 = v3[5];
  unint64_t v14 = v3[6];
  LOBYTE(v25) = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v25, v5);
  if (*((_BYTE *)v3 + 56) == 1)
  {
    LOBYTE(v25) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(1LL, &v25, v5);
  }

  if (*((_BYTE *)v3 + 57) == 1)
  {
    LOBYTE(v25) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(1LL, &v25, v5);
  }

  unint64_t v16 = v3[2];
  unint64_t v17 = v3[3];
  unint64_t v23 = v3[1];
  unint64_t v24 = v17;
  char v18 = *((_BYTE *)v3 + 32);
  if ((v18 & 1) != 0)
  {
LABEL_12:
    sub_10001D3CC((uint64_t)(v3 + 8), (uint64_t)v28);
    sub_10001D3CC((uint64_t)v28, (uint64_t)&v29);
    if (v30)
    {
      LOBYTE(v25) = 6;
      KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v25, v5);
    }

    if ((v18 & 1) == 0)
    {
      int v25 = v23;
      unint64_t v26 = v16;
      int v27 = v24;
      char v31 = 1;
      type metadata accessor for swift_metadata_allocation(0LL);
      uint64_t v20 = v19;
      uint64_t v21 = sub_10001D414( &qword_1000B8DC8,  (uint64_t (*)(uint64_t))type metadata accessor for swift_metadata_allocation,  (uint64_t)&protocol conformance descriptor for swift_metadata_allocation);
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v31, v5, v20, v21);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  uint64_t result = v12 - v16;
  if (v12 < v16)
  {
    __break(1u);
  }

  else if ((result & 0x8000000000000000LL) == 0)
  {
    LOBYTE(v25) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(result, &v25, v5);
    goto LABEL_12;
  }

  __break(1u);
  return result;
}

uint64_t sub_100016A5C(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v20 = a5;
  unsigned int v22 = a4;
  uint64_t v9 = sub_100005104(&qword_1000B8D68);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100006270(a1, v14);
  unint64_t v15 = sub_10001D1E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ProcessMetadata.CodingKeys,  &type metadata for ProcessMetadata.CodingKeys,  v15,  v14,  v13);
  char v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v25, v9);
  if (!v5)
  {
    uint64_t v16 = v20;
    char v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v24, v9);
    uint64_t v21 = v16;
    char v23 = 2;
    uint64_t v17 = sub_100005104(&qword_1000B8D78);
    uint64_t v18 = sub_10001D22C(&qword_1000B8D80, &qword_1000B8D78, (void (*)(void))sub_10001D290);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v23, v9, v17, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100016BEC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100005104(&qword_1000B8D90);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100006270(a1, v11);
  unint64_t v13 = sub_10001D2D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MetadataSummary.CodingKeys,  &type metadata for MetadataSummary.CodingKeys,  v13,  v11,  v12);
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v7);
  if (!v3)
  {
    uint64_t v18 = a3;
    char v19 = 1;
    uint64_t v14 = sub_100005104(&qword_1000B8DA0);
    unint64_t v15 = sub_10001D318();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v19, v7, v14, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100016D2C(void *a1)
{
  return sub_1000167CC(a1);
}

uint64_t sub_100016D6C()
{
  uint64_t v1 = 6580592LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x617461646174656DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701667182LL;
  }
}

uint64_t sub_100016DB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10001BCFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100016DDC(uint64_t a1)
{
  unint64_t v2 = sub_10001D1E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100016E04(uint64_t a1)
{
  unint64_t v2 = sub_10001D1E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100016E2C(void *a1)
{
  return sub_100016A5C(a1, *(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100016E4C()
{
  if (*v0) {
    return 0x65737365636F7270LL;
  }
  else {
    return 0x7A69536C61746F74LL;
  }
}

uint64_t sub_100016E8C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10001BE30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100016EB0(uint64_t a1)
{
  unint64_t v2 = sub_10001D2D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100016ED8(uint64_t a1)
{
  unint64_t v2 = sub_10001D2D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100016F00(void *a1)
{
  return sub_100016BEC(a1, *v1, v1[1]);
}

uint64_t sub_100016F18(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v7);
  uint64_t v10 = String.data(using:allowLossyConversion:)(v9, 0LL, a1, a2);
  unint64_t v12 = v11;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (v12 >> 60 != 15)
  {
    uint64_t v14 = *v2;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v14 writeData:isa];

    return sub_10001D374(v10, v12);
  }

  return result;
}

double sub_100016FFC()
{
  xmmword_1000BA418 = v7;
  unk_1000BA428 = v8;
  qword_1000BA438 = v9;
  xmmword_1000BA3D8 = v3;
  unk_1000BA3E8 = v4;
  xmmword_1000BA3F8 = v5;
  unk_1000BA408 = v6;
  double result = *(double *)&v2;
  xmmword_1000BA3B8 = v1;
  unk_1000BA3C8 = v2;
  return result;
}

uint64_t sub_1000170AC()
{
  uint64_t v1 = v0;
  __int128 v2 = (FILE *)stderr.getter();
  setvbuf(v2, 0LL, 2, 0LL);
  int v96 = &_swiftEmptyDictionarySingleton;
  uint64_t v88 = _swiftEmptyArrayStorage;
  __int128 v3 = *(_OWORD *)(v0 + 48);
  __int128 v73 = *(_OWORD *)(v0 + 32);
  __int128 v74 = v3;
  __int128 v75 = *(_OWORD *)(v0 + 64);
  *(void *)&__int128 v76 = *(void *)(v0 + 80);
  __int128 v4 = *(_OWORD *)(v0 + 16);
  __int128 v71 = *(_OWORD *)v0;
  __int128 v72 = v4;
  uint64_t v5 = sub_100005104(&qword_1000B8740);
  OptionGroup.wrappedValue.getter(v5, v6, v7, (uint64_t)&v78);
  unint64_t v9 = v78;
  unint64_t v8 = v79;
  char v10 = v80;
  __int128 v11 = v81;
  char v12 = v82;
  uint64_t v13 = *((void *)&v83 + 1);
  uint64_t v66 = v83;
  char v14 = v84;
  sub_10001B7B4(v1);
  sub_10000CA10(v9, v8, v10, v11, *((unint64_t *)&v11 + 1), v12, v1, (uint64_t *)&v96, (uint64_t *)&v88);
  if (v70)
  {
    sub_10001B8FC(v1);
    sub_100003C50(v9, v8, v10);
    sub_100003C60(v11, *((uint64_t *)&v11 + 1), v12);
    sub_100003C60(v66, v13, v14);
    swift_bridgeObjectRelease(v88);
    return swift_bridgeObjectRelease(v96);
  }

  else
  {
    sub_10001B8FC(v1);
    sub_100003C50(v9, v8, v10);
    sub_100003C60(v11, *((uint64_t *)&v11 + 1), v12);
    sub_100003C60(v66, v13, v14);
    __int128 v16 = *(_OWORD *)(v1 + 200);
    __int128 v17 = *(_OWORD *)(v1 + 232);
    __int128 v93 = *(_OWORD *)(v1 + 216);
    __int128 v94 = v17;
    __int128 v95 = *(_OWORD *)(v1 + 248);
    __int128 v18 = *(_OWORD *)(v1 + 168);
    __int128 v89 = *(_OWORD *)(v1 + 152);
    __int128 v90 = v18;
    __int128 v91 = *(_OWORD *)(v1 + 184);
    __int128 v92 = v16;
    __int128 v19 = *(_OWORD *)(v1 + 200);
    __int128 v20 = *(_OWORD *)(v1 + 232);
    __int128 v75 = *(_OWORD *)(v1 + 216);
    __int128 v76 = v20;
    __int128 v77 = *(_OWORD *)(v1 + 248);
    __int128 v21 = *(_OWORD *)(v1 + 168);
    __int128 v71 = *(_OWORD *)(v1 + 152);
    __int128 v72 = v21;
    __int128 v73 = *(_OWORD *)(v1 + 184);
    __int128 v74 = v19;
    uint64_t v53 = sub_100005104(&qword_1000B8CC0);
    OptionGroup.wrappedValue.getter(v53, v22, v23, (uint64_t)&v78);
    uint64_t v24 = v78;
    uint64_t v25 = v79;
    char v26 = v80;
    __int128 v27 = v81;
    char v28 = v82;
    __int128 v29 = v83;
    char v55 = v84;
    uint64_t v63 = v86;
    uint64_t v67 = v85;
    char v60 = v87;
    __int128 v71 = v81;
    LOBYTE(v72) = v82;
    uint64_t v54 = sub_100005104(&qword_1000B88E8);
    Flag.wrappedValue.getter(v54, v30, v31, (uint64_t)&v78);
    sub_100003C60(v24, v25, v26);
    sub_100003C60(v27, *((uint64_t *)&v27 + 1), v28);
    sub_100003C60(v29, *((uint64_t *)&v29 + 1), v55);
    sub_100003C50(v67, v63, v60);
    if ((v78 & 1) != 0)
    {
      __int128 v75 = v93;
      __int128 v76 = v94;
      __int128 v77 = v95;
      __int128 v72 = v90;
      __int128 v73 = v91;
      __int128 v74 = v92;
      OptionGroup.wrappedValue.getter(v53, v32, v33, (uint64_t)&v78);
      uint64_t v34 = v78;
      uint64_t v35 = v79;
      char v36 = v80;
      uint64_t v56 = *((void *)&v81 + 1);
      uint64_t v58 = v81;
      char v37 = v82;
      __int128 v38 = v83;
      char v39 = v84;
      uint64_t v64 = v86;
      uint64_t v68 = v85;
      char v61 = v87;
      __int128 v71 = v83;
      LOBYTE(v72) = v84;
      Flag.wrappedValue.getter(v54, v40, v41, (uint64_t)&v78);
      sub_100003C60(v34, v35, v36);
      sub_100003C60(v58, v56, v37);
      sub_100003C60(v38, *((uint64_t *)&v38 + 1), v39);
      sub_100003C50(v68, v64, v61);
      if (v78 == 1)
      {
        uint64_t v42 = v96;
        *((void *)&v72 + 1) = sub_100005104(&qword_1000B8CE0);
        *(void *)&__int128 v73 = sub_10001BA88();
        *(void *)&__int128 v71 = v42;
        swift_bridgeObjectRetain(v42);
        sub_100018BB4(&v71);
        sub_1000062D8(&v71);
      }

      else
      {
        uint64_t v52 = v88;
        *((void *)&v72 + 1) = sub_100005104(&qword_1000B8CC8);
        *(void *)&__int128 v73 = sub_10001D22C(&qword_1000B8CD0, &qword_1000B8CC8, (void (*)(void))sub_10001BA44);
        *(void *)&__int128 v71 = v52;
        swift_bridgeObjectRetain(v52);
        sub_100018BB4(&v71);
        sub_1000062D8(&v71);
        uint64_t v42 = v96;
      }
    }

    else
    {
      __int128 v75 = v93;
      __int128 v76 = v94;
      __int128 v77 = v95;
      __int128 v72 = v90;
      __int128 v73 = v91;
      __int128 v74 = v92;
      OptionGroup.wrappedValue.getter(v53, v32, v33, (uint64_t)&v78);
      uint64_t v43 = v78;
      uint64_t v44 = v79;
      char v45 = v80;
      uint64_t v57 = *((void *)&v81 + 1);
      uint64_t v59 = v81;
      char v46 = v82;
      __int128 v47 = v83;
      char v48 = v84;
      uint64_t v65 = v86;
      uint64_t v69 = v85;
      char v62 = v87;
      __int128 v71 = v83;
      LOBYTE(v72) = v84;
      Flag.wrappedValue.getter(v54, v49, v50, (uint64_t)&v78);
      sub_100003C60(v43, v44, v45);
      sub_100003C60(v59, v57, v46);
      sub_100003C60(v47, *((uint64_t *)&v47 + 1), v48);
      sub_100003C50(v69, v65, v62);
      uint64_t v42 = v96;
      if (v78 == 1)
      {
        uint64_t v51 = swift_bridgeObjectRetain(v96);
        sub_10001908C(v51);
        swift_bridgeObjectRelease(v42);
      }
    }

    swift_bridgeObjectRelease(v88);
    return swift_bridgeObjectRelease(v42);
  }

uint64_t sub_1000175E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v11 = *(void *)(a1 + 40);
  if (!v11) {
    __break(1u);
  }
  uint64_t v12 = swift_allocObject(&unk_1000AF100, 24LL, 7LL);
  *(void *)(v12 + 16) = _swiftEmptyArrayStorage;
  uint64_t v13 = swift_allocObject(&unk_1000AF128, 32LL, 7LL);
  *(void *)(v13 + 16) = sub_10000582C;
  *(void *)(v13 + 24) = v12;
  *(void *)&__int128 v90 = sub_100013F30;
  *((void *)&v90 + 1) = v13;
  swift_retain_n(v12, 2LL);
  uint64_t v14 = swift_reflection_iterateMetadataAllocations(v11, sub_100008C98, &v90);
  swift_release(*((void *)&v90 + 1));
  if (v14)
  {
    uint64_t v15 = String.init(cString:)(v14);
    uint64_t v17 = v16;
    unint64_t v18 = sub_100005888();
    uint64_t v19 = swift_allocError(&_s5ErrorVN, v18, 0LL, 0LL);
    *__int128 v20 = v15;
    v20[1] = v17;
    swift_willThrow(v19);
    return swift_release_n(v12, 2LL);
  }

  swift_release(v12);
  swift_beginAccess(v12 + 16, v107, 0LL, 0LL);
  uint64_t v22 = *(void *)(v12 + 16);
  swift_bridgeObjectRetain(v22);
  swift_release(v12);
  *(void *)&__int128 v90 = v22;
  swift_bridgeObjectRetain(v22);
  sub_100019FF8((uint64_t *)&v90, (uint64_t (*)(uint64_t))sub_100029604, sub_10001A6C8);
  if (v5) {
    goto LABEL_24;
  }
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = v90;
  __int128 v24 = *(_OWORD *)(a3 + 104);
  __int128 v90 = *(_OWORD *)(a3 + 88);
  __int128 v91 = v24;
  __int128 v25 = *(_OWORD *)(a3 + 136);
  __int128 v92 = *(_OWORD *)(a3 + 120);
  __int128 v93 = v25;
  uint64_t v26 = sub_100005104(&qword_1000B8748);
  OptionGroup.wrappedValue.getter(v26, v27, v28, (uint64_t)&v115);
  int v29 = sub_100008F4C();
  __int128 v119 = v115;
  char v120 = v116;
  sub_1000057D8((uint64_t)&v119);
  __int128 v121 = v117;
  char v122 = v118;
  sub_1000057D8((uint64_t)&v121);
  __int128 v72 = a5;
  if (v29 != 2)
  {
    uint64_t v31 = *(void *)(a1 + 40);
    if (v31)
    {
      uint64_t v30 = (void *)sub_100007DA4(v31);
      goto LABEL_9;
    }

    __break(1u);
LABEL_24:
    uint64_t result = swift_release(v90);
    __break(1u);
    return result;
  }

  uint64_t v30 = &_swiftEmptyDictionarySingleton;
LABEL_9:
  swift_unknownObjectRetain(a1);
  swift_retain(v23);
  sub_10001B7B4(a3);
  swift_bridgeObjectRetain(v30);
  uint64_t v32 = sub_10001B358(v23, a1, a2, v23, a3, (uint64_t)v30);
  swift_bridgeObjectRelease(v30);
  sub_10001B8FC(a3);
  swift_bridgeObjectRelease(v30);
  swift_unknownObjectRelease(a1);
  swift_release_n(v23, 2LL);
  uint64_t v33 = *((void *)v32 + 2);
  uint64_t v88 = (uint64_t)v32;
  if (v33)
  {
    swift_bridgeObjectRetain(v32);
    uint64_t v34 = v32 + 104;
    do
    {
      uint64_t v35 = *(v34 - 1);
      uint64_t v36 = *v34;
      char v37 = *((_BYTE *)v34 - 15);
      char v38 = *((_BYTE *)v34 - 16);
      uint64_t v39 = *(v34 - 4);
      uint64_t v40 = *(v34 - 3);
      char v41 = *((_BYTE *)v34 - 40);
      __int128 v90 = *(_OWORD *)(v34 - 9);
      __int128 v91 = *(_OWORD *)(v34 - 7);
      LOBYTE(v92) = v41;
      *((void *)&v92 + 1) = v39;
      *(void *)&__int128 v93 = v40;
      BYTE8(v93) = v38;
      BYTE9(v93) = v37;
      *(void *)&__int128 v94 = v35;
      *((void *)&v94 + 1) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v40);
      sub_1000181EC((uint64_t)&v90, a4);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v40);
      v34 += 10;
      --v33;
    }

    while (v33);
    swift_bridgeObjectRelease(v88);
  }

  __int128 v42 = *(_OWORD *)(a3 + 200);
  __int128 v43 = *(_OWORD *)(a3 + 232);
  __int128 v112 = *(_OWORD *)(a3 + 216);
  __int128 v113 = v43;
  __int128 v114 = *(_OWORD *)(a3 + 248);
  __int128 v44 = *(_OWORD *)(a3 + 168);
  __int128 v108 = *(_OWORD *)(a3 + 152);
  __int128 v109 = v44;
  __int128 v110 = *(_OWORD *)(a3 + 184);
  __int128 v111 = v42;
  __int128 v45 = *(_OWORD *)(a3 + 200);
  __int128 v46 = *(_OWORD *)(a3 + 232);
  __int128 v94 = *(_OWORD *)(a3 + 216);
  __int128 v95 = v46;
  __int128 v96 = *(_OWORD *)(a3 + 248);
  __int128 v47 = *(_OWORD *)(a3 + 168);
  __int128 v90 = *(_OWORD *)(a3 + 152);
  __int128 v91 = v47;
  __int128 v92 = *(_OWORD *)(a3 + 184);
  __int128 v93 = v45;
  uint64_t v71 = sub_100005104(&qword_1000B8CC0);
  OptionGroup.wrappedValue.getter(v71, v48, v49, (uint64_t)&v97);
  uint64_t v50 = v98;
  uint64_t v74 = v97;
  char v73 = v99;
  __int128 v51 = v100;
  char v52 = v101;
  uint64_t v78 = *((void *)&v102 + 1);
  uint64_t v80 = v102;
  char v76 = v103;
  uint64_t v84 = v105;
  uint64_t v86 = v104;
  char v82 = v106;
  __int128 v90 = v100;
  LOBYTE(v91) = v101;
  uint64_t v70 = sub_100005104(&qword_1000B88E8);
  Flag.wrappedValue.getter(v70, v53, v54, (uint64_t)&v97);
  sub_100003C60(v74, v50, v73);
  sub_100003C60(v51, *((uint64_t *)&v51 + 1), v52);
  sub_100003C60(v80, v78, v76);
  sub_100003C50(v86, v84, v82);
  if ((v97 & 1) != 0)
  {
    unint64_t v57 = sub_100010AF4();
    uint64_t v59 = v58;
    *((void *)&v91 + 1) = swift_getAssociatedTypeWitness(0LL, a2);
    *(_DWORD *)sub_10000B40C(&v90) = *(_DWORD *)(a1 + 20);
    swift_dynamicCast(&v97, &v90, (char *)&type metadata for Any + 8, &type metadata for Int32, 7LL);
    int v60 = v97;
    uint64_t v61 = *v72;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v72);
    *__int128 v72 = v61;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100012114(0LL, *(void *)(v61 + 16) + 1LL, 1, (char *)v61);
      uint64_t v61 = result;
      *__int128 v72 = result;
    }

    unint64_t v63 = *(void *)(v61 + 16);
    unint64_t v62 = *(void *)(v61 + 24);
    if (v63 >= v62 >> 1)
    {
      uint64_t result = (uint64_t)sub_100012114((char *)(v62 > 1), v63 + 1, 1, (char *)v61);
      uint64_t v61 = result;
      *__int128 v72 = result;
    }

    *(void *)(v61 + 16) = v63 + 1;
    unint64_t v64 = v61 + 32 * v63;
    *(void *)(v64 + 32) = v57;
    *(void *)(v64 + 40) = v59;
    *(_DWORD *)(v64 + 48) = v60;
    *(void *)(v64 + 56) = v88;
  }

  else
  {
    __int128 v94 = v112;
    __int128 v95 = v113;
    __int128 v96 = v114;
    __int128 v90 = v108;
    __int128 v91 = v109;
    __int128 v92 = v110;
    __int128 v93 = v111;
    OptionGroup.wrappedValue.getter(v71, v55, v56, (uint64_t)&v97);
    uint64_t v75 = v98;
    uint64_t v77 = v97;
    char v65 = v99;
    uint64_t v81 = *((void *)&v100 + 1);
    uint64_t v83 = v100;
    char v79 = v101;
    __int128 v66 = v102;
    char v67 = v103;
    uint64_t v89 = v104;
    __int128 v90 = v102;
    uint64_t v87 = v105;
    char v85 = v106;
    LOBYTE(v91) = v103;
    Flag.wrappedValue.getter(v70, v68, v69, (uint64_t)&v97);
    sub_100003C60(v77, v75, v65);
    sub_100003C60(v83, v81, v79);
    sub_100003C60(v66, *((uint64_t *)&v66 + 1), v67);
    sub_100003C50(v89, v87, v85);
    if ((v97 & 1) == 0) {
      sub_1000185A4(a1, a2, v88);
    }
    return swift_bridgeObjectRelease(v88);
  }

  return result;
}

unint64_t sub_100017C98@<X0>( int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  int v14 = *a1;
  uint64_t v15 = *((void *)a1 + 1);
  int v16 = a1[4];
  uint64_t v17 = *(void *)(a2 + 40);
  LODWORD(v84) = v14;
  *((void *)&v84 + 1) = v15;
  LODWORD(v85) = v16;
  unint64_t result = swift_reflection_allocationMetadataPointer(v17, &v84);
  if (!result)
  {
    *((_OWORD *)a7 + 3) = 0u;
    *((_OWORD *)a7 + 4) = 0u;
    *((_OWORD *)a7 + 1) = 0u;
    *((_OWORD *)a7 + 2) = 0u;
    *(_OWORD *)a7 = 0u;
    return result;
  }

  uint64_t v19 = result;
  uint64_t v20 = *(void *)(a4 + 16);
  if (!v20)
  {
LABEL_12:
    uint64_t v68 = 0LL;
    uint64_t v69 = 0LL;
    uint64_t v83 = 0LL;
    LOBYTE(a4) = 1;
    goto LABEL_13;
  }

  __int128 v21 = (unsigned int *)(a4 + 24 * v20 + 24);
  while (1)
  {
    unint64_t v22 = *((void *)v21 - 1);
    if (result >= v22)
    {
      uint64_t v23 = *v21;
      BOOL v24 = __CFADD__(v22, v23);
      unint64_t v25 = v22 + v23;
      if (v24)
      {
        __break(1u);
        goto LABEL_35;
      }

      if (result < v25) {
        break;
      }
    }

    v21 -= 6;
    if (!--v20) {
      goto LABEL_12;
    }
  }

  BOOL v26 = v20 < 1;
  unint64_t v27 = v20 - 1;
  if (v26)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  if (v27 >= *(void *)(a4 + 16))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  if (!v7)
  {
    LOBYTE(a4) = 0;
    uint64_t v69 = *(v21 - 4);
    uint64_t v83 = *((void *)v21 - 1);
    uint64_t v68 = *v21;
  }

LABEL_13:
  uint64_t v77 = a7;
  uint64_t v82 = a3;
  if ((a4 & 1) != 0) {
    unint64_t v76 = (unint64_t)(swift_reflection_ownsAddressStrict(*(void *)(a2 + 40), result) == 0) << 8;
  }
  else {
    unint64_t v76 = 0LL;
  }
  __int128 v28 = *(_OWORD *)(a5 + 104);
  __int128 v84 = *(_OWORD *)(a5 + 88);
  __int128 v85 = v28;
  __int128 v29 = *(_OWORD *)(a5 + 136);
  __int128 v86 = *(_OWORD *)(a5 + 120);
  __int128 v87 = v29;
  uint64_t v30 = sub_100005104(&qword_1000B8748);
  OptionGroup.wrappedValue.getter(v30, v31, v32, (uint64_t)&v102);
  a3 = sub_100008F4C();
  __int128 v106 = v102;
  char v107 = v103;
  sub_1000057D8((uint64_t)&v106);
  __int128 v108 = v104;
  char v109 = v105;
  sub_1000057D8((uint64_t)&v108);
  uint64_t v78 = a4 & 1;
  if (a3 == 2 || (a4 & 1) != 0 || !*(void *)(a6 + 16) || (unint64_t v33 = sub_100023B88(v83), (v34 & 1) == 0))
  {
    uint64_t v75 = 0LL;
    uint64_t v81 = 0LL;
  }

  else
  {
    uint64_t v35 = *(void *)(*(void *)(a6 + 56) + 8 * v33);
    uint64_t v36 = swift_allocObject(&unk_1000AF150, 32LL, 7LL);
    *(void *)(v36 + 16) = a2;
    *(void *)(v36 + 24) = v82;
    swift_unknownObjectRetain_n(a2, 2LL);
    if ((a3 & 1) != 0)
    {
      swift_bridgeObjectRetain_n(v35, 2LL);
      a3 = (uint64_t)sub_100005440(v35, sub_100005934);
      swift_bridgeObjectRelease(v35);
      *(void *)&__int128 v84 = a3;
      uint64_t v38 = sub_100005104(&qword_1000B8768);
      uint64_t v39 = sub_1000062F8(&qword_1000B8770, &qword_1000B8768, (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v40 = 10LL;
      unint64_t v41 = 0xE100000000000000LL;
    }

    else
    {
      uint64_t v37 = swift_bridgeObjectRetain(v35);
      a3 = (uint64_t)sub_100005144(v37, a2);
      *(void *)&__int128 v84 = a3;
      uint64_t v38 = sub_100005104(&qword_1000B8768);
      uint64_t v39 = sub_1000062F8(&qword_1000B8770, &qword_1000B8768, (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v40 = 2128928LL;
      unint64_t v41 = 0xE300000000000000LL;
    }

    uint64_t v75 = BidirectionalCollection<>.joined(separator:)(v40, v41, v38, v39);
    uint64_t v81 = v67;
    swift_bridgeObjectRelease(v35);
    swift_unknownObjectRelease(a2);
    swift_release(v36);
    swift_bridgeObjectRelease(a3);
  }

  uint64_t v79 = a2;
  uint64_t v80 = *(void *)(a2 + 40);
  if (v80)
  {
    __int128 v42 = *(_OWORD *)(a5 + 200);
    __int128 v43 = *(_OWORD *)(a5 + 232);
    __int128 v88 = *(_OWORD *)(a5 + 216);
    __int128 v89 = v43;
    __int128 v90 = *(_OWORD *)(a5 + 248);
    __int128 v44 = *(_OWORD *)(a5 + 168);
    __int128 v84 = *(_OWORD *)(a5 + 152);
    __int128 v85 = v44;
    __int128 v86 = *(_OWORD *)(a5 + 184);
    __int128 v87 = v42;
    uint64_t v45 = sub_100005104(&qword_1000B8CC0);
    OptionGroup.wrappedValue.getter(v45, v46, v47, (uint64_t)&v91);
    __int128 v48 = v91;
    char v49 = v92;
    uint64_t v51 = v93;
    uint64_t v50 = v94;
    char v52 = v95;
    uint64_t v53 = v96;
    uint64_t v71 = v97;
    char v70 = v98;
    uint64_t v73 = v100;
    uint64_t v74 = v99;
    char v72 = v101;
    __int128 v84 = v91;
    LOBYTE(v85) = v92;
    uint64_t v54 = sub_100005104(&qword_1000B88E8);
    Flag.wrappedValue.getter(v54, v55, v56, (uint64_t)&v91);
    sub_100003C60(v48, *((uint64_t *)&v48 + 1), v49);
    sub_100003C60(v51, v50, v52);
    sub_100003C60(v53, v71, v70);
    sub_100003C50(v74, v73, v72);
    uint64_t v57 = v91;
    uint64_t v58 = swift_reflection_typeRefForMetadata(v80, v19);
    if (v58)
    {
      uint64_t v59 = swift_reflection_copyNameForTypeRef(v80, v58, v57);
      uint64_t v60 = v79;
      uint64_t v61 = v78;
      a3 = v81;
      unint64_t v62 = 0xE90000000000003ELL;
      uint64_t v63 = 0x6E776F6E6B6E753CLL;
      if (v59)
      {
        unint64_t v64 = (void *)v59;
        uint64_t v63 = String.init(cString:)(v59);
        unint64_t v62 = v65;
        free(v64);
      }
    }

    else
    {
      uint64_t v60 = v79;
      uint64_t v61 = v78;
      a3 = v81;
      unint64_t v62 = 0xE90000000000003ELL;
      uint64_t v63 = 0x6E776F6E6B6E753CLL;
    }

    uint64_t v66 = *(void *)(v60 + 40);
    if (v66)
    {
      unint64_t result = sub_100008B54(v19, v66);
      *uint64_t v77 = v19;
      v77[1] = v69;
      v77[2] = v83;
      v77[3] = v68;
      v77[4] = v61;
      v77[5] = v63;
      v77[6] = v62;
      v77[7] = v76 | result & 1;
      v77[8] = v75;
      v77[9] = a3;
      return result;
    }
  }

  else
  {
LABEL_37:
    swift_bridgeObjectRelease(v81);
    __break(1u);
  }

  unint64_t result = swift_bridgeObjectRelease(a3);
  __break(1u);
  return result;
}

  unint64_t v18 = sub_100023C1C(a1);
  if ((v19 & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v20 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v18);
  unint64_t v22 = *v20;
  __int128 v21 = v20[1];
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v4);
LABEL_17:
  *(void *)a2 = v22;
  *(void *)(a2 + 8) = v21;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v17;
  *(_BYTE *)(a2 + 32) = HIBYTE(a1);
}

    if (v6 == v12 && v7 == v13) {
      goto LABEL_33;
    }
    __int128 v21 = i[4];
    unint64_t v22 = *((unsigned __int8 *)v3 + 40);
    uint64_t v23 = v3[4];
    BOOL v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0LL);
    unint64_t result = 0LL;
    if ((v24 & 1) == 0) {
      return result;
    }
    unint64_t v9 = v23;
    uint64_t v11 = v22;
    unint64_t v18 = v21;
    if (v10 != v17) {
      return result;
    }
    goto LABEL_34;
  }

  return 1LL;
}

  int v14 = 0LL;
  uint64_t v15 = 0LL;
  unint64_t result = 0LL;
LABEL_14:
  *(void *)a4 = v14;
  *(int64x2_t *)(a4 + 8) = v9;
  *(void *)(a4 + 24) = v15;
  *(void *)(a4 + 32) = result;
  return result;
}

        v286 = a4;
        uint64_t v79 = *((void *)&v312 + 1);
        uint64_t v80 = v313;
        uint64_t v81 = *((void *)&v311 + 1);
        v294 = *((void *)&v310 + 1);
        v291 = v311;
        uint64_t v82 = v310;
        uint64_t v83 = v312;
        __int128 v84 = v309;
        swift_bridgeObjectRetain(v307);
        v287 = v11;
        sub_100067314(v11, v296, v84, v12, v82, v294, v291, v81, v83, v79, v80);
        swift_bridgeObjectRelease(v10);
        v285 = v80;
        LOBYTE(v277) = v80;
        uint64_t v55 = v296;
        v295 = v79;
        v276 = v79;
        a4 = v286;
        v292 = (void *)v83;
        v275 = (void *)v83;
        v283 = v82;
        uint64_t v57 = v291;
        sub_10006749C(v11, v296, v84, v12, v82, v294, v291, v81, (uint64_t)v275, v276, (char)v277);
        swift_errorRelease(v302[0]);
        uint64_t v56 = v294;
        break;
      default:
        goto LABEL_13;
    }
  }

  else
  {
    swift_errorRelease(v302[0]);
    *(void *)&v314 = a1;
    swift_errorRetain(a1);
    if (swift_dynamicCast(&v320, &v314, v8, &type metadata for ParserError, 0LL))
    {
      __int128 v29 = v321;
      v286 = a4;
      uint64_t v30 = *((void *)&v321 + 1);
      uint64_t v31 = v322;
      v296 = *((void *)&v323 + 1);
      v297 = (void *)v323;
      v294 = *((void *)&v324 + 1);
      v295 = v324;
      uint64_t v32 = a3;
      unint64_t v33 = *((void *)&v325 + 1);
      v292 = (void *)v320;
      v293 = v325;
      char v34 = v326;
      uint64_t v35 = sub_100005104(&qword_1000B90C0);
      uint64_t v36 = swift_allocObject(v35, 48LL, 7LL);
      *(_OWORD *)(v36 + 16) = xmmword_100096510;
      *(void *)(v36 + 32) = sub_10004C608(a2, a3);
      *(void *)(v36 + 40) = v37;
      uint64_t v38 = sub_10005134C();
      uint64_t v39 = swift_allocError(&type metadata for CommandError, v38, 0LL, 0LL);
      uint64_t v40 = (uint64_t)v292;
      unint64_t v41 = v293;
      *(void *)__int128 v42 = v36;
      *(void *)(v42 + 8) = v40;
      __int128 v43 = v29;
      *(void *)(v42 + 16) = v29;
      *(void *)(v42 + 24) = v30;
      __int128 v44 = v30;
      v291 = v30;
      v287 = v31;
      uint64_t v46 = v296;
      uint64_t v45 = (uint64_t)v297;
      *(void *)(v42 + 32) = v31;
      *(void *)(v42 + 40) = v45;
      __int128 v48 = v294;
      uint64_t v47 = v295;
      *(void *)(v42 + 48) = v46;
      *(void *)(v42 + 56) = v47;
      *(void *)(v42 + 64) = v48;
      *(void *)(v42 + 72) = v41;
      *(void *)(v42 + 80) = v33;
      *(_BYTE *)(v42 + 88) = v34;
      char v49 = v40;
      uint64_t v50 = v43;
      sub_100067314(v40, v43, v44, v31, v45, v46, v47, v48, v41, v33, v34);
      sub_100081C34(&v307, v39, a2, v32);
      __int128 v28 = *((void *)&v307 + 1);
      uint64_t v51 = v307;
      unint64_t v25 = v308;
      char v52 = v310;
      v288 = *((void *)&v309 + 1);
      *(void *)&v289 = v309;
      unint64_t v27 = BYTE8(v310);
      swift_errorRelease(v290);
      LOBYTE(v277) = v34;
      uint64_t v11 = v51;
      sub_10006749C(v49, v50, v291, v287, (uint64_t)v297, v296, v295, v294, v293, v33, (char)v277);
      unint64_t result = swift_errorRelease(v314);
      BOOL v26 = v52;
      a4 = v286;
      goto LABEL_48;
    }

    v281 = v8;
    swift_errorRelease(v314);
    uint64_t v53 = sub_100005104(&qword_1000B90C0);
    char v10 = swift_allocObject(v53, 48LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_100096510;
    v288 = a3;
    *(void *)&v289 = a2;
    *(void *)(v10 + 32) = sub_10004C608(a2, a3);
    *(void *)(v10 + 40) = v54;
    swift_errorRetain(a1);
    uint64_t v55 = 0LL;
    v292 = 0LL;
    v293 = 0LL;
    uint64_t v12 = 0LL;
    v283 = 0LL;
    uint64_t v56 = 0LL;
    uint64_t v57 = 0LL;
    v297 = 0LL;
    v295 = 0LL;
    v285 = 13LL;
    uint64_t v11 = a1;
  }

  v284 = v12;
  v294 = v56;
  v291 = v57;
  v287 = v11;
  v296 = v55;
  __int128 v85 = swift_bridgeObjectRetain(v10);
  sub_100080428(v85, 0, (uint64_t)&v314);
  swift_bridgeObjectRelease(v10);
  __int128 v86 = sub_10007D498();
  __int128 v88 = v87;
  sub_10004DBA8((uint64_t *)&v314);
  v280 = v86;
  v305 = v86;
  v306 = v88;
  __int128 v89 = *(void *)(v10 + 16);
  v282 = v10;
  v286 = a4;
  if (v89)
  {
    v320 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v88);
    sub_10004FDF4(0LL, v89, 0);
    __int128 v90 = v10;
    __int128 v91 = (void *)v320;
    char v92 = v90 + 40;
    do
    {
      uint64_t v93 = (*(uint64_t (**)(void))(*(void *)v92 + 24LL))();
      char v95 = v94;
      v320 = (uint64_t)v91;
      uint64_t v97 = v91[2];
      uint64_t v96 = v91[3];
      if (v97 >= v96 >> 1)
      {
        sub_10004FDF4((char *)(v96 > 1), v97 + 1, 1);
        __int128 v91 = (void *)v320;
      }

      v91[2] = v97 + 1;
      char v98 = &v91[2 * v97];
      v98[4] = v93;
      v98[5] = v95;
      v92 += 16LL;
      --v89;
    }

    while (v89);
    uint64_t v99 = v282;
    swift_bridgeObjectRelease(v282);
    a4 = v286;
  }

  else
  {
    swift_bridgeObjectRetain(v88);
    uint64_t v99 = v10;
    __int128 v91 = _swiftEmptyArrayStorage;
  }

  v320 = (uint64_t)v91;
  uint64_t v100 = sub_100005104(&qword_1000B90C8);
  char v101 = sub_10005EC18();
  v279 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v100, v101);
  char v103 = v102;
  swift_bridgeObjectRelease(v91);
  swift_bridgeObjectRetain(v99);
  __int128 v104 = sub_100032880(0, v99);
  char v105 = sub_10005CF90(v104);
  char v107 = v106;
  char v109 = v108;
  __int128 v110 = v108;
  swift_bridgeObjectRelease(v99);
  swift_bridgeObjectRelease(v104);
  swift_bridgeObjectRelease(v88);
  if (v110 <= 0xFD)
  {
    __int128 v113 = HIBYTE(v88) & 0xF;
    if ((v88 & 0x2000000000000000LL) == 0) {
      __int128 v113 = v280 & 0xFFFFFFFFFFFFLL;
    }
    __int128 v112 = v291;
    if (v113)
    {
      v114._char countAndFlagsBits = 10LL;
      v114._object = (void *)0xE100000000000000LL;
      String.append(_:)(v114);
    }

    v320 = 0LL;
    *(void *)&v321 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(35LL);
    swift_bridgeObjectRelease(v321);
    v320 = 0x27206565532020LL;
    *(void *)&v321 = 0xE700000000000000LL;
    v115._char countAndFlagsBits = v279;
    v115._object = v103;
    String.append(_:)(v115);
    swift_bridgeObjectRelease(v103);
    v116._char countAndFlagsBits = 32LL;
    v116._object = (void *)0xE100000000000000LL;
    String.append(_:)(v116);
    v327._char countAndFlagsBits = v105;
    __int128 v117 = (uint64_t)v107;
    v327._object = v107;
    char v118 = sub_10006D63C(v327, v109);
    char v120 = v119;
    sub_10002DA3C(v105, v117, v109);
    v121._char countAndFlagsBits = v118;
    v121._object = v120;
    String.append(_:)(v121);
    swift_bridgeObjectRelease(v120);
    v122._char countAndFlagsBits = 0xD000000000000017LL;
    v122._object = (void *)0x800000010009DC40LL;
    String.append(_:)(v122);
    v123._char countAndFlagsBits = v320;
    char v103 = (void *)v321;
    v123._object = (void *)v321;
    String.append(_:)(v123);
    __int128 v111 = v297;
  }

  else
  {
    __int128 v111 = v297;
    __int128 v112 = v291;
  }

  uint64_t v124 = (uint64_t)v292;
  swift_bridgeObjectRelease(v103);
  uint64_t v125 = v296;
  uint64_t v126 = v287;
  uint64_t v127 = v283;
  if ((_DWORD)v285 == 14)
  {
    uint64_t v129 = sub_100005104(&qword_1000B90C0);
    uint64_t v130 = v283;
    char v131 = swift_allocObject(v129, 48LL, 7LL);
    *(_OWORD *)(v131 + 16) = xmmword_100096510;
    *(void *)(v131 + 32) = sub_10004C608(v289, v288);
    *(void *)(v131 + 40) = v132;
    sub_100067314(v126, v125, v293, v284, v130, v294, v112, (uint64_t)v111, v124, v295, 14);
    sub_100080428(v131, 0, (uint64_t)&v320);
    swift_bridgeObjectRelease(v131);
    char v133 = sub_10007B6A8(0LL, 1);
    uint64_t v135 = v134;
    sub_10004DBA8(&v320);
    *(void *)&v307 = 10LL;
    *((void *)&v307 + 1) = 0xE100000000000000LL;
    v136._char countAndFlagsBits = v133;
    v136._object = v135;
    String.append(_:)(v136);
    int v137 = v135;
    char v138 = v284;
    swift_bridgeObjectRelease(v137);
    *(void *)&v289 = *((void *)&v307 + 1);
    v281 = v307;
LABEL_34:
    unsigned __int8 v140 = v125;
    v141 = (char *)v282;
    v142 = *(void *)(v282 + 16);
    if (!v142)
    {
LABEL_132:
      swift_bridgeObjectRelease(v141);
      sub_100083CD8(v126, v140, v293, v138, v283, v294, v291, (uint64_t)v297, (uint64_t)v292, v295, v285);
      __break(1u);
      goto LABEL_133;
    }

    v143 = v282 + 16 * v142;
    v145 = *(void *)(v143 + 16);
    v144 = *(void *)(v143 + 24);
    swift_bridgeObjectRelease(v282);
    swift_bridgeObjectRelease(v306);
    v288 = sub_10004D160(v145, *(void *)(v144 + 8), 0, 0LL, 0LL, 0LL);
    v147 = v146;
    v278 = v146;
    v280 = sub_10002EA1C();
    v148 = swift_allocError(&type metadata for ParserError, v280, 0LL, 0LL);
    *(void *)v149 = v126;
    *(void *)(v149 + 8) = v140;
    v151 = v293;
    v150 = v294;
    *(void *)(v149 + 16) = v293;
    *(void *)(v149 + 24) = v138;
    v152 = v283;
    *(void *)(v149 + 32) = v283;
    *(void *)(v149 + 40) = v150;
    v153 = v150;
    v155 = v291;
    v154 = (uint64_t)v292;
    v156 = (uint64_t)v297;
    *(void *)(v149 + 48) = v291;
    *(void *)(v149 + 56) = v156;
    v157 = v295;
    *(void *)(v149 + 64) = v154;
    *(void *)(v149 + 72) = v157;
    v158 = v285;
    *(_BYTE *)(v149 + 80) = v285;
    v159 = v138;
    v160 = v153;
    sub_100067314(v126, v140, v151, v159, v152, v153, v155, v156, v154, v157, v158);
    v161 = sub_1000851F8(v148, v288, v147);
    v163 = v162;
    swift_errorRelease(v148);
    if (v163) {
      v164 = v161;
    }
    else {
      v164 = 0LL;
    }
    v282 = v164;
    v165 = 0xE000000000000000LL;
    if (v163) {
      v165 = v163;
    }
    v279 = v165;
    v166 = swift_allocError(&type metadata for ParserError, v280, 0LL, 0LL);
    v167 = v287;
    *(void *)v168 = v287;
    *(void *)(v168 + 8) = v140;
    v169 = v151;
    v293 = v151;
    v170 = v284;
    *(void *)(v168 + 16) = v151;
    *(void *)(v168 + 24) = v170;
    v171 = v152;
    *(void *)(v168 + 32) = v152;
    *(void *)(v168 + 40) = v160;
    v172 = v160;
    v173 = v155;
    *(void *)(v168 + 48) = v155;
    *(void *)(v168 + 56) = v156;
    v297 = (void *)v156;
    v174 = (uint64_t)v292;
    v175 = v295;
    *(void *)(v168 + 64) = v292;
    *(void *)(v168 + 72) = v175;
    v176 = v285;
    *(_BYTE *)(v168 + 80) = v285;
    v276 = v175;
    v177 = v175;
    v178 = v167;
    v179 = v171;
    sub_100067314(v167, v140, v169, v170, v171, v172, v173, v156, v174, v276, v176);
    v180 = v166;
    v181 = sub_100085524(v166, v288, v278);
    v183 = v182;
    swift_bridgeObjectRelease(v278);
    swift_bridgeObjectRelease(v288);
    swift_errorRelease(v180);
    if (v183) {
      v184 = v181;
    }
    else {
      v184 = 0LL;
    }
    v288 = v184;
    if (v183) {
      v185 = v183;
    }
    else {
      v185 = 0xE000000000000000LL;
    }
    v280 = v185;
    swift_errorRelease(v290);
    sub_100083CD8(v178, v296, v293, v284, v179, v294, v291, (uint64_t)v297, (uint64_t)v292, v177, v176);
    unint64_t result = sub_100083CD8(v178, v296, v293, v284, v179, v294, v291, (uint64_t)v297, (uint64_t)v292, v295, v285);
    __int128 v28 = v279;
    BOOL v26 = v280;
    unint64_t v27 = 1;
    unint64_t v25 = v281;
    uint64_t v11 = v282;
LABEL_47:
    a4 = v286;
    goto LABEL_48;
  }

  if ((_DWORD)v285 != 13)
  {
    char v139 = v306;
    v281 = v305;
    char v138 = v284;
    sub_100083CB8(v287, v296, v293, v284, v283, v294, v112, (uint64_t)v111, (uint64_t)v292, v295, v285);
    *(void *)&v289 = v139;
    swift_bridgeObjectRetain(v139);
    goto LABEL_34;
  }

  *(void *)&v307 = v287;
  uint64_t v128 = v284;
  sub_100083CB8(v287, v296, v293, v284, v283, v294, v112, (uint64_t)v111, (uint64_t)v292, v295, 0xDu);
  swift_errorRetain(v287);
  if (swift_dynamicCast(&v320, &v307, v281, &type metadata for ValidationError, 0LL))
  {
    swift_bridgeObjectRelease(v282);
    v285 = v320;
    v281 = v305;
    v282 = v321;
    *(void *)&v289 = v306;
    swift_errorRelease(v290);
    sub_100083CD8(v287, v296, v293, v284, v283, v294, v291, (uint64_t)v111, (uint64_t)v292, v295, 0xDu);
    unint64_t v25 = v281;
    sub_100083CD8(v287, v296, v293, v284, v283, v294, v291, (uint64_t)v111, (uint64_t)v292, v295, 0xDu);
    unint64_t result = swift_errorRelease(v307);
    v288 = 0LL;
    unint64_t v27 = 1;
    BOOL v26 = 0xE000000000000000LL;
    uint64_t v11 = v285;
    __int128 v28 = v282;
    goto LABEL_48;
  }

  v297 = v111;
  swift_errorRelease(v307);
  __int128 v112 = v287;
  v304 = v287;
  swift_errorRetain(v287);
  if (swift_dynamicCast(v302, &v304, v281, &type metadata for CleanExit, 0LL))
  {
    swift_bridgeObjectRelease(v306);
    v187 = v302[0];
    v188 = v302[1];
    v189 = (uint64_t)v292;
    v190 = (void *)v282;
    unsigned __int8 v140 = v296;
    if (v303)
    {
      if (v303 == 1)
      {
        swift_errorRelease(v290);
        v285 = v188;
        sub_100083CD8(v287, v296, v293, v284, v283, v294, v291, (uint64_t)v297, (uint64_t)v292, v295, 0xDu);
        swift_bridgeObjectRelease(v282);
        LOBYTE(v277) = 13;
        v275 = v292;
        v276 = v295;
        v191 = v287;
        v192 = v296;
        v193 = v293;
        v194 = v284;
        v195 = v283;
        v196 = v294;
        v197 = v291;
        v198 = (uint64_t)v297;
LABEL_128:
        sub_100083CD8(v191, v192, v193, v194, v195, v196, v197, v198, (uint64_t)v275, v276, v277);
        unint64_t result = swift_errorRelease(v304);
        unint64_t v25 = 0LL;
        v288 = 0LL;
        *(void *)&v289 = 0LL;
        BOOL v26 = 0LL;
        unint64_t v27 = 0;
        uint64_t v11 = v187;
        goto LABEL_129;
      }

      if (!v302[0])
      {
        v257 = (uint64_t)v297;
LABEL_126:
        sub_100077CF4((uint64_t)v190, (uint64_t)&v307);
        v321 = v307;
        v320 = 0LL;
        v322 = v308;
        v323 = v309;
        v324 = v310;
        v325 = v311;
        v326 = v312;
        v187 = sub_100076DD0();
        v285 = v272;
        swift_errorRelease(v290);
        v264 = v295;
        v273 = v140;
        v266 = v293;
        v267 = v284;
        v274 = v127;
        v269 = v294;
        v270 = v291;
        sub_100083CD8(v112, v273, v293, v284, v274, v294, v291, v257, v189, v295, 0xDu);
        sub_10004DC0C((uint64_t *)&v307);
        goto LABEL_127;
      }

      swift_bridgeObjectRelease(v282);
      v246 = sub_10004C608(v289, v288);
      __int128 v111 = sub_10006A41C(v246, v247);
      uint64_t v126 = v248;
      v288 = v249;
      v250 = sub_10008B57C((uint64_t)v111, v187);
      v251 = v250;
      if ((unint64_t)v250 >> 62)
      {
        if (v250 >= 0) {
          v250 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        char v138 = _CocoaArrayWrapper.endIndex.getter(v250);
        if (v138)
        {
LABEL_94:
          v285 = v126;
          v320 = (uint64_t)_swiftEmptyArrayStorage;
          v141 = sub_10004FE48(0LL, v138 & ~(v138 >> 63), 0);
          if ((v138 & 0x8000000000000000LL) == 0)
          {
            v252 = 0LL;
            v190 = (void *)v320;
            do
            {
              v253 = a4;
              if ((v251 & 0xC000000000000001LL) != 0) {
                v254 = specialized _ArrayBuffer._getElementSlowPath(_:)(v252, v251);
              }
              else {
                v254 = swift_retain(*(void *)(v251 + 8 * v252 + 32));
              }
              v289 = *(_OWORD *)(v254 + 16);
              swift_release(v254);
              v320 = (uint64_t)v190;
              v256 = v190[2];
              v255 = v190[3];
              if (v256 >= v255 >> 1)
              {
                sub_10004FE48((char *)(v255 > 1), v256 + 1, 1);
                v190 = (void *)v320;
              }

              ++v252;
              v190[2] = v256 + 1;
              *(_OWORD *)&v190[2 * v256 + 4] = v289;
              a4 = v253;
            }

            while (v138 != v252);
            swift_bridgeObjectRelease(v251);
            unsigned __int8 v140 = v296;
            __int128 v112 = v287;
            uint64_t v126 = v285;
            goto LABEL_123;
          }

          goto LABEL_131;
        }
      }

      else
      {
        char v138 = *(void *)((v250 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v138) {
          goto LABEL_94;
        }
      }

      swift_bridgeObjectRelease(v251);
      v190 = _swiftEmptyArrayStorage;
LABEL_123:
      uint64_t v127 = v283;
      if (!v190[2])
      {
        swift_bridgeObjectRelease(v190);
        v271 = sub_100005104(&qword_1000B90C0);
        v190 = (void *)swift_allocObject(v271, 48LL, 7LL);
        *((_OWORD *)v190 + 1) = xmmword_100096510;
        *((_OWORD *)v190 + 2) = *((_OWORD *)v111 + 1);
      }

      swift_release(v111);
      swift_bridgeObjectRelease(v288);
      swift_release(v126);
      v257 = (uint64_t)v297;
      v189 = (uint64_t)v292;
      goto LABEL_126;
    }

    if (!v302[0])
    {
      v257 = (uint64_t)v297;
LABEL_118:
      sub_100080428((uint64_t)v190, 0, (uint64_t)&v320);
      swift_bridgeObjectRelease(v190);
      v187 = sub_10007B6A8(0LL, 1);
      v285 = v263;
      swift_errorRelease(v290);
      v264 = v295;
      v265 = v140;
      v266 = v293;
      v267 = v284;
      v268 = v127;
      v269 = v294;
      v270 = v291;
      sub_100083CD8(v112, v265, v293, v284, v268, v294, v291, v257, v189, v295, 0xDu);
      sub_10004DBA8(&v320);
LABEL_127:
      LOBYTE(v277) = 13;
      v275 = (void *)v189;
      v276 = v264;
      v191 = v112;
      v192 = v296;
      v193 = v266;
      v194 = v267;
      v195 = v283;
      v196 = v269;
      v197 = v270;
      v198 = v257;
      goto LABEL_128;
    }

    swift_bridgeObjectRelease(v282);
    v235 = sub_10004C608(v289, v288);
    __int128 v111 = sub_10006A41C(v235, v236);
    uint64_t v126 = v237;
    v288 = v238;
    v239 = sub_10008B57C((uint64_t)v111, v187);
    v240 = v239;
    if ((unint64_t)v239 >> 62)
    {
      if (v239 >= 0) {
        v239 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      char v138 = _CocoaArrayWrapper.endIndex.getter(v239);
      if (v138) {
        goto LABEL_82;
      }
    }

    else
    {
      char v138 = *(void *)((v239 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v138)
      {
LABEL_82:
        v285 = v126;
        v320 = (uint64_t)_swiftEmptyArrayStorage;
        v141 = sub_10004FE48(0LL, v138 & ~(v138 >> 63), 0);
        if (v138 < 0)
        {
          __break(1u);
LABEL_131:
          __break(1u);
          goto LABEL_132;
        }

        v241 = 0LL;
        v190 = (void *)v320;
        do
        {
          v242 = a4;
          if ((v240 & 0xC000000000000001LL) != 0) {
            v243 = specialized _ArrayBuffer._getElementSlowPath(_:)(v241, v240);
          }
          else {
            v243 = swift_retain(*(void *)(v240 + 8 * v241 + 32));
          }
          v289 = *(_OWORD *)(v243 + 16);
          swift_release(v243);
          v320 = (uint64_t)v190;
          v245 = v190[2];
          v244 = v190[3];
          if (v245 >= v244 >> 1)
          {
            sub_10004FE48((char *)(v244 > 1), v245 + 1, 1);
            v190 = (void *)v320;
          }

          ++v241;
          v190[2] = v245 + 1;
          *(_OWORD *)&v190[2 * v245 + 4] = v289;
          a4 = v242;
        }

        while (v138 != v241);
        swift_bridgeObjectRelease(v240);
        unsigned __int8 v140 = v296;
        __int128 v112 = v287;
        uint64_t v126 = v285;
        goto LABEL_115;
      }
    }

    swift_bridgeObjectRelease(v240);
    v190 = _swiftEmptyArrayStorage;
LABEL_115:
    uint64_t v127 = v283;
    if (!v190[2])
    {
      swift_bridgeObjectRelease(v190);
      v262 = sub_100005104(&qword_1000B90C0);
      v190 = (void *)swift_allocObject(v262, 48LL, 7LL);
      *((_OWORD *)v190 + 1) = xmmword_100096510;
      *((_OWORD *)v190 + 2) = *((_OWORD *)v111 + 1);
    }

    swift_release(v111);
    swift_bridgeObjectRelease(v288);
    swift_release(v126);
    v257 = (uint64_t)v297;
    v189 = (uint64_t)v292;
    goto LABEL_118;
  }

  swift_bridgeObjectRelease(v282);
  swift_errorRelease(v304);
  v320 = v287;
  swift_errorRetain(v287);
  __int128 v111 = v292;
  unsigned __int8 v140 = v296;
  if (swift_dynamicCast(&v307, &v320, v281, &type metadata for ExitCode, 0LL))
  {
    swift_bridgeObjectRelease(v306);
    v281 = v307;
    swift_errorRelease(v290);
    sub_100083CD8(v287, v296, v293, v284, v283, v294, v291, (uint64_t)v297, (uint64_t)v292, v295, 0xDu);
    a4 = v286;
    unint64_t v25 = v281;
    sub_100083CD8(v287, v296, v293, v284, v283, v294, v291, (uint64_t)v297, (uint64_t)v292, v295, 0xDu);
    unint64_t result = swift_errorRelease(v320);
    uint64_t v11 = 0LL;
    v288 = 0LL;
    *(void *)&v289 = 0LL;
    BOOL v26 = 0LL;
    unint64_t v27 = 2;
    __int128 v28 = 0xE000000000000000LL;
    goto LABEL_48;
  }

  swift_errorRelease(v320);
  v302[0] = v287;
  swift_errorRetain(v287);
  v214 = sub_100005104(&qword_1000B9E78);
  if (swift_dynamicCast(&v320, v302, v281, v214, 0LL))
  {
    sub_100045320((__int128 *)&v320, (uint64_t)&v307);
    v215 = v309;
    sub_100006270(&v307, v309);
    dispatch thunk of LocalizedError.errorDescription.getter(v215, *((void *)&v215 + 1));
    v217 = v216;
    swift_bridgeObjectRelease(v216);
    if (v217)
    {
      v218 = v309;
      sub_100006270(&v307, v309);
      v282 = dispatch thunk of LocalizedError.errorDescription.getter(v218, *((void *)&v218 + 1));
      v285 = v219;
      if (v219)
      {
        swift_bridgeObjectRelease(v306);
        swift_errorRelease(v290);
        sub_100083CD8(v287, v296, v293, v284, v283, v294, v291, (uint64_t)v297, (uint64_t)v292, v295, 0xDu);
        sub_100083CD8(v287, v296, v293, v284, v283, v294, v291, (uint64_t)v297, (uint64_t)v292, v295, 0xDu);
        sub_1000062D8(&v307);
        unint64_t result = swift_errorRelease(v302[0]);
        v288 = 0LL;
        *(void *)&v289 = 0LL;
        BOOL v26 = 0LL;
        unint64_t v27 = 2;
        unint64_t v25 = 1LL;
        uint64_t v11 = v282;
LABEL_129:
        __int128 v28 = v285;
        a4 = v286;
        goto LABEL_48;
      }

uint64_t sub_1000181EC(uint64_t result, uint64_t *a2)
{
  if ((*(_BYTE *)(result + 32) & 1) != 0) {
    return result;
  }
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v4 = *(void *)(result + 48);
  uint64_t v6 = *(unsigned int *)(result + 24);
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(*a2 + 16);
  swift_bridgeObjectRetain(v4);
  if (!v8
    || (swift_bridgeObjectRetain(v7), sub_100023BB8(v5, v4), char v10 = v9, swift_bridgeObjectRelease(v7), (v10 & 1) == 0))
  {
    uint64_t v20 = sub_100005104(&qword_1000B8C00);
    uint64_t inited = swift_initStackObject(v20, v48);
    *(_OWORD *)(inited + 16) = xmmword_100096510;
    *(void *)(inited + 32) = sub_100010AF4();
    *(void *)(inited + 40) = v22;
    uint64_t v23 = sub_10001B504(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    uint64_t v46 = *a2;
    *a2 = 0x8000000000000000LL;
    sub_1000254CC(v6, v23, v5, v4, isUniquelyReferenced_nonNull_native);
    uint64_t v25 = *a2;
    *a2 = v46;
    swift_bridgeObjectRelease(v4);
    uint64_t v26 = v25;
    return swift_bridgeObjectRelease(v26);
  }

  unint64_t v43 = v6;
  swift_bridgeObjectRetain(v4);
  uint64_t v11 = swift_isUniquelyReferenced_nonNull_native(*a2);
  uint64_t v44 = *a2;
  uint64_t v12 = v44;
  *a2 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(v4);
  unint64_t v14 = sub_100023BB8(v5, v4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_24;
  }

  char v2 = v13;
  if (*(void *)(v12 + 24) < v17)
  {
    sub_100024120(v17, v11);
    unint64_t v18 = sub_100023BB8(v5, v4);
    if ((v2 & 1) != (v19 & 1)) {
      goto LABEL_30;
    }
    unint64_t v14 = v18;
    if ((v2 & 1) != 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  if ((v11 & 1) == 0) {
    goto LABEL_26;
  }
  if ((v13 & 1) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

LABEL_12:
  while (1)
  {
    unint64_t v27 = (uint64_t *)(*(void *)(v44 + 56) + 16 * v14);
    uint64_t v28 = *v27;
    uint64_t v47 = v27[1];
    if (!__OFADD__(v28, v43)) {
      break;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    sub_100025AD0();
    if ((v2 & 1) == 0) {
      goto LABEL_27;
    }
  }

  uint64_t v46 = v28 + v43;
  sub_10001B2B8(&v46, 1, &v44, v14, v5, v4);
  uint64_t v29 = v47;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v29);
  *a2 = v44;
  swift_bridgeObjectRelease(v4);
  unint64_t v43 = sub_100010AF4();
  uint64_t v11 = v30;
  swift_bridgeObjectRetain(v4);
  uint64_t v31 = swift_isUniquelyReferenced_nonNull_native(*a2);
  uint64_t v49 = *a2;
  uint64_t v32 = v49;
  *a2 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(v4);
  unint64_t v14 = sub_100023BB8(v5, v4);
  uint64_t v34 = *(void *)(v32 + 16);
  BOOL v35 = (v33 & 1) == 0;
  uint64_t v36 = v34 + v35;
  if (__OFADD__(v34, v35)) {
    goto LABEL_25;
  }
  char v2 = v33;
  if (*(void *)(v32 + 24) >= v36)
  {
    if ((v31 & 1) != 0)
    {
      if ((v33 & 1) == 0) {
        goto LABEL_29;
      }
LABEL_20:
      uint64_t v39 = (uint64_t *)(*(void *)(v49 + 56) + 16 * v14);
      uint64_t v41 = *v39;
      uint64_t v40 = v39[1];
      uint64_t v44 = v41;
      uint64_t v45 = v40;
      sub_100027AC8(&v46, v43, v11);
      swift_bridgeObjectRelease(v47);
      sub_10001B2B8(&v44, 1, &v49, v14, v5, v4);
      uint64_t v42 = v45;
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v42);
      *a2 = v49;
      swift_bridgeObjectRelease(v4);
      uint64_t v26 = v4;
      return swift_bridgeObjectRelease(v26);
    }

    v18[(v11 >> 6) + 8] |= 1LL << v11;
    uint64_t v20 = 8 * v11;
    *(void *)(v18[6] + v20) = v8;
    *(void *)(v18[7] + v20) = v7;
    __int128 v21 = v18[2];
    uint64_t v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    v18[2] = v23;
    char v19 = v3 - 1;
    if (v3 == 1) {
      return (void *)swift_bridgeObjectRelease(v6);
    }
    goto LABEL_16;
  }

  return result;
}

  if ((a1[18] & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      char v2 = sub_1000126B4(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
    }
    char v10 = *((void *)v2 + 2);
    char v9 = *((void *)v2 + 3);
    if (v10 >= v9 >> 1) {
      char v2 = sub_1000126B4((char *)(v9 > 1), v10 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v10 + 1;
    uint64_t v11 = &v2[16 * v10];
    strcpy(v11 + 32, "groupChildTask");
    v11[47] = -18;
    if ((a1[19] & 1) == 0)
    {
LABEL_14:
      if ((a1[24] & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_29;
    }
  }

  else if ((a1[19] & 1) == 0)
  {
    goto LABEL_14;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    char v2 = sub_1000126B4(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
  }
  char v13 = *((void *)v2 + 2);
  uint64_t v12 = *((void *)v2 + 3);
  if (v13 >= v12 >> 1) {
    char v2 = sub_1000126B4((char *)(v12 > 1), v13 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v13 + 1;
  unint64_t v14 = &v2[16 * v13];
  strcpy(v14 + 32, "asyncLetTask");
  v14[45] = 0;
  *((_WORD *)v14 + 23) = -5120;
  if ((a1[24] & 1) == 0)
  {
LABEL_15:
    if ((a1[25] & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  char v13 = sub_100005104(&qword_1000B8768);
  unint64_t v14 = sub_1000062F8(&qword_1000B8770, &qword_1000B8768, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v15 = BidirectionalCollection<>.joined(separator:)(124LL, 0xE100000000000000LL, v13, v14);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease(v6);
  if (!*(void *)(v4 + 16))
  {
LABEL_16:
    swift_bridgeObjectRelease(v4);
    v23._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    object = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(object);
    v25._char countAndFlagsBits = 41LL;
    v25._object = (void *)0xE100000000000000LL;
    String.append(_:)(v25);
    uint64_t v22 = 0x286E776F6E6B6E75LL;
    __int128 v21 = 0xE800000000000000LL;
    goto LABEL_17;
  }

LABEL_28:
    sub_100025AD0();
    if ((v2 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_20;
  }

  sub_100024120(v36, v31);
  unint64_t v37 = sub_100023BB8(v5, v4);
  if ((v2 & 1) != (v38 & 1)) {
    goto LABEL_30;
  }
  unint64_t v14 = v37;
  if ((v2 & 1) != 0) {
    goto LABEL_20;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  *(void *)&v173 = v3;
  BOOL v24 = sub_10002CCB8(v2);
  uint64_t v25 = *((void *)v5 + 2);
  uint64_t v26 = (char *)_swiftEmptyArrayStorage;
  v172 = v2;
  v169 = v4;
  v161 = v5;
  if (v25)
  {
    v166 = (uint64_t)v24;
    v176 = (char *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v5);
    sub_10004FDF4(0LL, v25, 0);
    uint64_t v26 = (char *)_swiftEmptyArrayStorage;
    unint64_t v27 = v5 + 40;
    do
    {
      uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v27 + 24LL))();
      uint64_t v30 = v29;
      v176 = v26;
      uint64_t v32 = *((void *)v26 + 2);
      uint64_t v31 = *((void *)v26 + 3);
      if (v32 >= v31 >> 1)
      {
        sub_10004FDF4((char *)(v31 > 1), v32 + 1, 1);
        uint64_t v26 = v176;
      }

      *((void *)v26 + 2) = v32 + 1;
      char v33 = &v26[16 * v32];
      *((void *)v33 + 4) = v28;
      *((void *)v33 + 5) = v30;
      v27 += 16;
      --v25;
    }

    while (v25);
    swift_bridgeObjectRelease(v5);
    char v2 = v172;
    uint64_t v4 = v169;
    BOOL v24 = (char *)v166;
  }

  v176 = v24;
  sub_100056A78(v26);
  uint64_t v34 = v176;
  BOOL v35 = sub_10004D160(*v164, *(void *)(*(void *)v165 + 8LL), 0, 0LL, 0LL, 0LL);
  unint64_t v37 = v36;
  swift_bridgeObjectRetain(v2);
  v163 = sub_10002D048(v35, v37, v2);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v2);
  v176 = (char *)v4;
  v177 = v171;
  swift_bridgeObjectRetain(v171);
  v38._char countAndFlagsBits = 0xA7B202928LL;
  v38._object = (void *)0xE500000000000000LL;
  String.append(_:)(v38);
  if (v167 == (char *)1)
  {
    v175._char countAndFlagsBits = 10LL;
    v175._object = (void *)0xE100000000000000LL;
    __chkstk_darwin(v39);
    v160 = &v175;
    uint64_t v40 = sub_100032C14( 0x7FFFFFFFFFFFFFFFLL,  0,  sub_10002DA50,  (uint64_t)v159,  0xD000000000000050LL,  0x800000010009CBD0LL);
    v41._char countAndFlagsBits = 32LL;
    v41._object = (void *)0xE100000000000000LL;
    uint64_t v42 = String.init(repeating:count:)(v41, 4LL);
    unint64_t v43 = sub_1000337AC((uint64_t)v40, v42._countAndFlagsBits, (uint64_t)v42._object);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v42._object);
    v175._char countAndFlagsBits = (uint64_t)v43;
    uint64_t v44 = sub_100005104(&qword_1000B90D8);
    uint64_t v45 = sub_1000062F8(&qword_1000B90E0, &qword_1000B90D8, (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v46 = sub_10002D69C();
    uint64_t v47 = Sequence<>.joined(separator:)(10LL, 0xE100000000000000LL, v44, v45, v46);
    uint64_t v49 = v48;
    swift_bridgeObjectRelease(v43);
    v50._char countAndFlagsBits = v47;
    v50._object = v49;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(v49);
  }

  strcpy((char *)&v175, "    opts=");
  BYTE3(v175._object) = 0;
  HIDWORD(v175._object) = -369098752;
  v174[0] = v34;
  uint64_t v51 = sub_100005104(&qword_1000B90C8);
  v166 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
  v167 = (char *)v51;
  char v52 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v51, v166);
  uint64_t v54 = v53;
  swift_bridgeObjectRelease(v34);
  v55._char countAndFlagsBits = v52;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(v54);
  v56._char countAndFlagsBits = 2594LL;
  v56._object = (void *)0xE200000000000000LL;
  String.append(_:)(v56);
  object = v175._object;
  String.append(_:)(v175);
  swift_bridgeObjectRelease(object);
  uint64_t v58 = *((void *)v163 + 2);
  if (v58)
  {
    uint64_t v59 = (void **)(v163 + 40);
    do
    {
      uint64_t v60 = (uint64_t)*(v59 - 1);
      uint64_t v61 = *v59;
      v175._char countAndFlagsBits = 0LL;
      v175._object = (void *)0xE000000000000000LL;
      swift_bridgeObjectRetain(v61);
      _StringGuts.grow(_:)(20LL);
      swift_bridgeObjectRelease(v175._object);
      v175._char countAndFlagsBits = 0xD000000000000010LL;
      v175._object = (void *)0x800000010009CAB0LL;
      v62._char countAndFlagsBits = v60;
      v62._object = v61;
      String.append(_:)(v62);
      swift_bridgeObjectRelease(v61);
      v63._char countAndFlagsBits = 2594LL;
      v63._object = (void *)0xE200000000000000LL;
      String.append(_:)(v63);
      unint64_t v64 = v175._object;
      String.append(_:)(v175);
      swift_bridgeObjectRelease(v64);
      v59 += 2;
      --v58;
    }

    while (v58);
  }

  swift_bridgeObjectRelease(v163);
  v175._char countAndFlagsBits = 0LL;
  v175._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(115LL);
  v65._char countAndFlagsBits = 0xD00000000000001ALL;
  v65._object = (void *)0x800000010009CAD0LL;
  String.append(_:)(v65);
  v66._char countAndFlagsBits = v162;
  v66._object = v168;
  String.append(_:)(v66);
  v67._char countAndFlagsBits = 0xD000000000000057LL;
  v67._object = (void *)0x800000010009CAF0LL;
  String.append(_:)(v67);
  uint64_t v68 = v175._object;
  String.append(_:)(v175);
  swift_bridgeObjectRelease(v68);
  uint64_t v69 = sub_10004D160(*v164, *(void *)(*(void *)v165 + 8LL), 0, 0LL, 0LL, 0LL);
  uint64_t v71 = v70;
  char v72 = v172;
  swift_bridgeObjectRetain(v172);
  uint64_t v73 = sub_10002D2B8(v69, v71, v72);
  swift_bridgeObjectRelease(v71);
  swift_bridgeObjectRelease(v69);
  swift_bridgeObjectRelease(v72);
  v175._char countAndFlagsBits = (uint64_t)v73;
  uint64_t v74 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v167, v166);
  unint64_t v76 = v75;
  swift_bridgeObjectRelease(v73);
  uint64_t v77 = HIBYTE(v76) & 0xF;
  if ((v76 & 0x2000000000000000LL) == 0) {
    uint64_t v77 = v74 & 0xFFFFFFFFFFFFLL;
  }
  if (v77)
  {
    v175._char countAndFlagsBits = 0LL;
    v175._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    uint64_t v78 = swift_bridgeObjectRelease(v175._object);
    strcpy((char *)&v175, "case $prev in\n");
    HIBYTE(v175._object) = -18;
    v174[0] = 10LL;
    v174[1] = 0xE100000000000000LL;
    __chkstk_darwin(v78);
    v160 = (Swift::String *)v174;
    swift_bridgeObjectRetain(v76);
    uint64_t v79 = sub_100032C14(0x7FFFFFFFFFFFFFFFLL, 0, sub_10002D680, (uint64_t)v159, v74, v76);
    v80._char countAndFlagsBits = 32LL;
    v80._object = (void *)0xE100000000000000LL;
    uint64_t v81 = String.init(repeating:count:)(v80, 4LL);
    uint64_t v82 = sub_1000337AC((uint64_t)v79, v81._countAndFlagsBits, (uint64_t)v81._object);
    swift_bridgeObjectRelease(v79);
    swift_bridgeObjectRelease(v81._object);
    v174[0] = v82;
    uint64_t v83 = sub_100005104(&qword_1000B90D8);
    __int128 v84 = sub_1000062F8(&qword_1000B90E0, &qword_1000B90D8, (uint64_t)&protocol conformance descriptor for [A]);
    __int128 v85 = sub_10002D69C();
    __int128 v86 = Sequence<>.joined(separator:)(10LL, 0xE100000000000000LL, v83, v84, v85);
    __int128 v88 = v87;
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(v82);
    v89._char countAndFlagsBits = v86;
    v89._object = v88;
    String.append(_:)(v89);
    swift_bridgeObjectRelease(v88);
    v90._char countAndFlagsBits = 0x636173650ALL;
    v90._object = (void *)0xE500000000000000LL;
    String.append(_:)(v90);
    char countAndFlagsBits = v175._countAndFlagsBits;
    char v92 = v175._object;
    v175._char countAndFlagsBits = 10LL;
    v175._object = (void *)0xE100000000000000LL;
    __chkstk_darwin(v93);
    v160 = &v175;
    swift_bridgeObjectRetain(v92);
    uint64_t v94 = sub_100032C14(0x7FFFFFFFFFFFFFFFLL, 0, sub_10002DA50, (uint64_t)v159, countAndFlagsBits, (unint64_t)v92);
    v95._char countAndFlagsBits = 32LL;
    v95._object = (void *)0xE100000000000000LL;
    uint64_t v96 = String.init(repeating:count:)(v95, 4LL);
    uint64_t v97 = sub_1000337AC((uint64_t)v94, v96._countAndFlagsBits, (uint64_t)v96._object);
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v96._object);
    v175._char countAndFlagsBits = (uint64_t)v97;
    char v98 = Sequence<>.joined(separator:)(10LL, 0xE100000000000000LL, v83, v84, v85);
    uint64_t v100 = v99;
    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(v97);
    v175._char countAndFlagsBits = v98;
    v175._object = v100;
    swift_bridgeObjectRetain(v100);
    v101._char countAndFlagsBits = 10LL;
    v101._object = (void *)0xE100000000000000LL;
    String.append(_:)(v101);
    swift_bridgeObjectRelease(v100);
    unint64_t v76 = (unint64_t)v175._object;
    String.append(_:)(v175);
  }

  __int128 v102 = v170;
  char v103 = v161;
  swift_bridgeObjectRelease(v76);
  if (*((void *)v103 + 2))
  {
    v175._char countAndFlagsBits = 0LL;
    v175._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(30LL);
    swift_bridgeObjectRelease(v175._object);
    v175._char countAndFlagsBits = 0xD000000000000016LL;
    v175._object = (void *)0x800000010009CB50LL;
    v104._char countAndFlagsBits = v162;
    char v105 = v168;
    v104._object = v168;
    String.append(_:)(v104);
    swift_bridgeObjectRelease(v105);
    v106._char countAndFlagsBits = 0xA6E69207D5DLL;
    v106._object = (void *)0xE600000000000000LL;
    String.append(_:)(v106);
    char v107 = v175._object;
    String.append(_:)(v175);
    swift_bridgeObjectRelease(v107);
    __int128 v108 = *((void *)v103 + 2);
    if (v108)
    {
      swift_bridgeObjectRetain(v103);
      char v109 = (uint64_t *)(v103 + 40);
      v168 = (void *)0x800000010009CB70LL;
      do
      {
        __int128 v111 = *(v109 - 1);
        __int128 v110 = *v109;
        v175._char countAndFlagsBits = 0LL;
        v175._object = (void *)0xE000000000000000LL;
        _StringGuts.grow(_:)(36LL);
        swift_bridgeObjectRelease(v175._object);
        v175._char countAndFlagsBits = 40LL;
        v175._object = (void *)0xE100000000000000LL;
        __int128 v112 = *(uint64_t (**)(uint64_t, uint64_t))(v110 + 24);
        v113._char countAndFlagsBits = v112(v111, v110);
        __int128 v114 = v113._object;
        String.append(_:)(v113);
        swift_bridgeObjectRelease(v114);
        v115._char countAndFlagsBits = 0x202020200A29LL;
        v115._object = (void *)0xE600000000000000LL;
        String.append(_:)(v115);
        v116._char countAndFlagsBits = v169;
        v116._object = v171;
        String.append(_:)(v116);
        v117._char countAndFlagsBits = 95LL;
        v117._object = (void *)0xE100000000000000LL;
        String.append(_:)(v117);
        v118._char countAndFlagsBits = v112(v111, v110);
        __int128 v119 = v118._object;
        String.append(_:)(v118);
        swift_bridgeObjectRelease(v119);
        v120._char countAndFlagsBits = 32LL;
        v120._object = (void *)0xE100000000000000LL;
        String.append(_:)(v120);
        v121._char countAndFlagsBits = v173;
        v121._object = v170;
        String.append(_:)(v121);
        v122._char countAndFlagsBits = 0xD000000000000013LL;
        v122._object = v168;
        String.append(_:)(v122);
        unsigned __int8 v123 = v175._countAndFlagsBits;
        uint64_t v124 = v175._object;
        v175._char countAndFlagsBits = 10LL;
        v175._object = (void *)0xE100000000000000LL;
        __chkstk_darwin(v125);
        v160 = &v175;
        swift_bridgeObjectRetain(v124);
        uint64_t v126 = sub_100032C14(0x7FFFFFFFFFFFFFFFLL, 0, sub_10002DA50, (uint64_t)v159, v123, (unint64_t)v124);
        v127._char countAndFlagsBits = 32LL;
        v127._object = (void *)0xE100000000000000LL;
        uint64_t v128 = String.init(repeating:count:)(v127, 8LL);
        uint64_t v129 = sub_1000337AC((uint64_t)v126, v128._countAndFlagsBits, (uint64_t)v128._object);
        swift_bridgeObjectRelease(v126);
        swift_bridgeObjectRelease(v128._object);
        v175._char countAndFlagsBits = (uint64_t)v129;
        uint64_t v130 = sub_100005104(&qword_1000B90D8);
        char v131 = sub_1000062F8(&qword_1000B90E0, &qword_1000B90D8, (uint64_t)&protocol conformance descriptor for [A]);
        char v132 = sub_10002D69C();
        char v133 = Sequence<>.joined(separator:)(10LL, 0xE100000000000000LL, v130, v131, v132);
        uint64_t v135 = v134;
        swift_bridgeObjectRelease(v124);
        swift_bridgeObjectRelease(v129);
        v136._char countAndFlagsBits = v133;
        v136._object = v135;
        String.append(_:)(v136);
        swift_bridgeObjectRelease(v135);
        v109 += 2;
        --v108;
      }

      while (v108);
      swift_bridgeObjectRelease(v170);
      swift_bridgeObjectRelease(v171);
      char v103 = v161;
      swift_bridgeObjectRelease(v161);
    }

    else
    {
      swift_bridgeObjectRelease(v102);
      swift_bridgeObjectRelease(v171);
    }

    v137._char countAndFlagsBits = 0x6361736520202020LL;
    v137._object = (void *)0xE90000000000000ALL;
    String.append(_:)(v137);
  }

  else
  {
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v168);
    swift_bridgeObjectRelease(v171);
  }

  char v138 = v172;
  v139._char countAndFlagsBits = 0xD000000000000034LL;
  v139._object = (void *)0x800000010009CB90LL;
  String.append(_:)(v139);
  unsigned __int8 v140 = v177;
  v171 = v176;
  v141 = *((void *)v103 + 2);
  if (v141)
  {
    v175._char countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v103);
    v170 = v140;
    swift_bridgeObjectRetain(v140);
    sub_10004FDF4(0LL, v141, 0);
    v142 = 0LL;
    v143 = (void *)v175._countAndFlagsBits;
    do
    {
      v173 = *(_OWORD *)&v103[16 * v142 + 32];
      v144 = swift_bridgeObjectRetain(v138);
      v145 = (char *)v138;
      if ((swift_isUniquelyReferenced_nonNull_native(v144) & 1) == 0) {
        v145 = sub_100057FEC(0LL, *(void *)(v138 + 16) + 1LL, 1, (char *)v138);
      }
      v147 = *((void *)v145 + 2);
      v146 = *((void *)v145 + 3);
      if (v147 >= v146 >> 1) {
        v145 = sub_100057FEC((char *)(v146 > 1), v147 + 1, 1, v145);
      }
      *((void *)v145 + 2) = v147 + 1;
      *(_OWORD *)&v145[16 * v147 + 32] = v173;
      v148 = sub_10002B550(v145);
      v150 = v149;
      swift_bridgeObjectRelease(v145);
      v175._char countAndFlagsBits = (uint64_t)v143;
      v152 = v143[2];
      v151 = v143[3];
      if (v152 >= v151 >> 1)
      {
        sub_10004FDF4((char *)(v151 > 1), v152 + 1, 1);
        v143 = (void *)v175._countAndFlagsBits;
      }

      ++v142;
      v143[2] = v152 + 1;
      v153 = &v143[2 * v152];
      v153[4] = v148;
      v153[5] = v150;
      char v138 = v172;
    }

    while (v141 != v142);
    unsigned __int8 v140 = (char *)v170;
    swift_bridgeObjectRelease(v170);
    swift_bridgeObjectRelease_n(v103, 2LL);
  }

  else
  {
    swift_bridgeObjectRelease(v103);
    v143 = _swiftEmptyArrayStorage;
  }

  v175._char countAndFlagsBits = (uint64_t)v143;
  v154 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v167, v166);
  v156 = v155;
  swift_bridgeObjectRelease(v143);
  v175._char countAndFlagsBits = (uint64_t)v171;
  v175._object = v140;
  swift_bridgeObjectRetain(v140);
  v157._char countAndFlagsBits = v154;
  v157._object = v156;
  String.append(_:)(v157);
  swift_bridgeObjectRelease(v140);
  swift_bridgeObjectRelease(v156);
  return v175._countAndFlagsBits;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      uint64_t v12 = v14;
      v18 += 24;
      ++v14;
    }

    while (v14 < v3);
    if (!v15) {
      goto LABEL_63;
    }
LABEL_45:
    unint64_t v14 = v17;
    if (v17 < v9) {
      goto LABEL_170;
    }
LABEL_46:
    if (v9 < v14)
    {
      __int128 v21 = 24 * v14;
      uint64_t v22 = 24 * v9;
      uint64_t v23 = v14;
      BOOL v24 = v9;
      do
      {
        if (v24 != --v23)
        {
          if (!v10) {
            goto LABEL_175;
          }
          uint64_t v25 = v10 + v22;
          uint64_t v26 = v10 + v21;
          unint64_t v27 = *(_BYTE *)(v10 + v22 + 16);
          uint64_t v28 = *(_BYTE *)(v10 + v22 + 17);
          uint64_t v29 = *(_OWORD *)(v10 + v22);
          uint64_t v30 = *(void *)(v10 + v21 - 8);
          *(_OWORD *)uint64_t v25 = *(_OWORD *)(v10 + v21 - 24);
          *(void *)(v25 + 16) = v30;
          *(_OWORD *)(v26 - 24) = v29;
          *(_BYTE *)(v26 - 8) = v27;
          *(_BYTE *)(v26 - 7) = v28;
        }

        ++v24;
        v21 -= 24LL;
        v22 += 24LL;
      }

      while (v24 < v23);
    }

      uint64_t v41 = __OFSUB__(v5--, 1LL);
      if (v41) {
        goto LABEL_38;
      }
      ++v20;
      uint64_t v42 = v59;
      unint64_t v43 = v60;
      uint64_t v44 = v62;
      _OWORD v8[2] = v61;
      v8[3] = v44;
      *uint64_t v8 = v42;
      v8[1] = v43;
      uint64_t v45 = v63;
      uint64_t v46 = v64;
      uint64_t v47 = v66;
      v8[6] = v65;
      v8[7] = v47;
      v8[4] = v45;
      v8[5] = v46;
      __int128 v48 = v67;
      uint64_t v49 = v68;
      uint64_t v50 = v70;
      v8[10] = v69;
      v8[11] = v50;
      v8[8] = v48;
      void v8[9] = v49;
      v8 += 12;
      uint64_t v7 = v31;
      __int128 v3 = v56;
      if (v4)
      {
        char v9 = *(void *)(v4 + 16);
        if (v20 != v9) {
          continue;
        }
      }

      goto LABEL_3;
    }
  }

    if ((v8 != v74 || v81 != v82) && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v81, v74, v82, 0LL) & 1) == 0) {
      return 0LL;
    }
    uint64_t v75 = v12;
    uint64_t v32 = v76;
    if (v76)
    {
      uint64_t v34 = v77;
      char v33 = v78;
      if (!v78
        || (v9 != v17 || v76 != v78) && (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v76, v17, v78, 0LL) & 1) == 0)
      {
        return 0LL;
      }
    }

    else
    {
      uint64_t v34 = v77;
      char v33 = v78;
      if (v78) {
        return 0LL;
      }
    }

    BOOL v35 = v75;
    if (v75)
    {
      uint64_t v36 = v73;
      if (!v34) {
        return 0LL;
      }
      unint64_t v37 = v14;
      char v38 = v13;
      if ((v10 != v67 || v75 != v34) && (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v75, v67, v34, 0LL) & 1) == 0) {
        return 0LL;
      }
    }

    else
    {
      unint64_t v37 = v14;
      char v38 = v13;
      uint64_t v36 = v73;
      if (v34) {
        return 0LL;
      }
    }

    if (v38)
    {
      uint64_t v40 = v71;
      uint64_t v39 = v72;
      uint64_t v41 = v70;
      if (!v71
        || (v66 != v69 || v38 != v71) && (_stringCompareWithSmolCheck(_:_:expecting:)(v66, v38, v69, v71, 0LL) & 1) == 0)
      {
        return 0LL;
      }
    }

    else
    {
      uint64_t v40 = v71;
      uint64_t v39 = v72;
      uint64_t v41 = v70;
      if (v71) {
        return 0LL;
      }
    }

    if (v37)
    {
      if (!v39) {
        return 0LL;
      }
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain_n(v39, 2LL);
      swift_bridgeObjectRetain_n(v37, 2LL);
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v40);
      uint64_t v42 = sub_100090860(v37, v39);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v39);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v38);
        swift_bridgeObjectRelease(v75);
        swift_bridgeObjectRelease(v76);
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(v39);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(v78);
        swift_bridgeObjectRelease(v82);
        uint64_t v61 = v79;
LABEL_82:
        swift_bridgeObjectRelease(v61);
        return 0LL;
      }

      if (!v36) {
        goto LABEL_66;
      }
    }

    else
    {
      if (v39) {
        return 0LL;
      }
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v40);
      if (!v36)
      {
LABEL_66:
        unint64_t v43 = v78;
        if (!v41)
        {
          swift_bridgeObjectRelease(v81);
          swift_bridgeObjectRelease_n(0LL, 2LL);
          swift_bridgeObjectRelease(v82);
          goto LABEL_71;
        }

        swift_bridgeObjectRelease(0LL);
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v82);
        swift_bridgeObjectRelease(v79);
        swift_bridgeObjectRelease(v78);
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v39);
        unint64_t v62 = v41;
LABEL_80:
        swift_bridgeObjectRelease(v62);
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v76);
        uint64_t v60 = v75;
LABEL_81:
        swift_bridgeObjectRelease(v60);
        swift_bridgeObjectRelease(v38);
        uint64_t v61 = v37;
        goto LABEL_82;
      }
    }

    unint64_t v43 = v78;
    if (!v41)
    {
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(0LL);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v79);
      swift_bridgeObjectRelease(v78);
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v80);
      swift_bridgeObjectRelease(v76);
      swift_bridgeObjectRelease(v75);
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v37);
      uint64_t v61 = v36;
      goto LABEL_82;
    }

    uint64_t v44 = v36[2];
    if (v44 != v41[2])
    {
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v79);
      swift_bridgeObjectRelease(v78);
      swift_bridgeObjectRelease(v77);
      swift_bridgeObjectRelease(v40);
      unint64_t v62 = v39;
      goto LABEL_80;
    }

    if (v44)
    {
      if (v36 != v41)
      {
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v36);
        uint64_t v45 = 4LL;
        while (1)
        {
          v83[0] = *(_OWORD *)&v36[v45];
          uint64_t v46 = *(_OWORD *)&v36[v45 + 2];
          uint64_t v47 = *(_OWORD *)&v36[v45 + 4];
          __int128 v48 = *(_OWORD *)&v36[v45 + 8];
          v83[3] = *(_OWORD *)&v36[v45 + 6];
          v83[4] = v48;
          v83[1] = v46;
          v83[2] = v47;
          uint64_t v49 = *(_OWORD *)&v36[v45 + 10];
          uint64_t v50 = *(_OWORD *)&v36[v45 + 12];
          uint64_t v51 = *(_OWORD *)&v36[v45 + 14];
          __int128 v84 = v36[v45 + 16];
          v83[6] = v50;
          v83[7] = v51;
          v83[5] = v49;
          v85[0] = *(_OWORD *)&v41[v45];
          char v52 = *(_OWORD *)&v41[v45 + 2];
          uint64_t v53 = *(_OWORD *)&v41[v45 + 4];
          uint64_t v54 = *(_OWORD *)&v41[v45 + 8];
          v85[3] = *(_OWORD *)&v41[v45 + 6];
          v85[4] = v54;
          v85[1] = v52;
          v85[2] = v53;
          uint64_t v55 = *(_OWORD *)&v41[v45 + 10];
          uint64_t v56 = *(_OWORD *)&v41[v45 + 12];
          uint64_t v57 = *(_OWORD *)&v41[v45 + 14];
          __int128 v86 = v41[v45 + 16];
          v85[6] = v56;
          v85[7] = v57;
          v85[5] = v55;
          sub_100091D50(v83);
          sub_100091D50(v85);
          uint64_t v58 = _s22ArgumentParserToolInfo0aD2V0V23__derived_struct_equalsySbAC_ACtFZ_0( (unsigned __int8 *)v83,  (uint64_t)v85);
          sub_100091DE0(v85);
          sub_100091DE0(v83);
          if ((v58 & 1) == 0) {
            break;
          }
          v45 += 17LL;
          if (!--v44)
          {
            swift_bridgeObjectRelease(v81);
            swift_bridgeObjectRelease(v82);
            swift_bridgeObjectRelease_n(v36, 2LL);
            swift_bridgeObjectRelease_n(v41, 2LL);
            uint64_t v32 = v76;
            uint64_t v34 = v77;
            unint64_t v43 = v78;
            uint64_t v59 = v68;
            BOOL v35 = v75;
            goto LABEL_72;
          }
        }

        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v82);
        swift_bridgeObjectRelease_n(v36, 2LL);
        swift_bridgeObjectRelease_n(v41, 2LL);
        swift_bridgeObjectRelease(v79);
        swift_bridgeObjectRelease(v78);
        swift_bridgeObjectRelease(v77);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v39);
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v76);
        uint64_t v60 = v75;
        goto LABEL_81;
      }

      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease_n(v36, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v41);
    }

    swift_bridgeObjectRelease(v82);
    uint64_t v34 = v77;
LABEL_71:
    uint64_t v59 = v68;
LABEL_72:
    __int128 v3 = v59 + 1;
    swift_bridgeObjectRelease(v79);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v80);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v37);
    unint64_t result = 1LL;
    uint64_t v4 = v64;
    uint64_t v5 = v63;
    if (v3 == v65) {
      return result;
    }
  }

  uint64_t v26 = v79 + 7;
  unint64_t v27 = v80 + 7;
  while (v25)
  {
    unint64_t result = *(v27 - 1);
    uint64_t v28 = *v27;
    uint64_t v29 = *(v26 - 1);
    uint64_t v30 = *v26;
    if (result != v29 || v28 != v30)
    {
      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v28, v29, v30, 0LL);
      if ((result & 1) == 0) {
        return 0LL;
      }
    }

    v26 += 2;
    v27 += 2;
    if (!--v25) {
      goto LABEL_28;
    }
  }

  __break(1u);
  return result;
}

void sub_1000185A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  __int128 v5 = *(_OWORD *)(v3 + 200);
  __int128 v89 = _swiftEmptyArrayStorage;
  __int128 v6 = *(_OWORD *)(v3 + 232);
  __int128 v74 = *(_OWORD *)(v3 + 216);
  __int128 v75 = v6;
  __int128 v76 = *(_OWORD *)(v3 + 248);
  __int128 v7 = *(_OWORD *)(v3 + 168);
  __int128 v70 = *(_OWORD *)(v3 + 152);
  __int128 v71 = v7;
  __int128 v72 = *(_OWORD *)(v3 + 184);
  __int128 v73 = v5;
  uint64_t v8 = sub_100005104(&qword_1000B8CC0);
  OptionGroup.wrappedValue.getter(v8, v9, v10, (uint64_t)&v77);
  uint64_t v11 = v77;
  uint64_t v12 = (uint64_t)v78;
  char v13 = v79;
  uint64_t v14 = v81;
  uint64_t v63 = v80;
  char v62 = v82;
  uint64_t v65 = v84;
  uint64_t v67 = v83;
  char v64 = v85;
  __int128 v15 = v86;
  char v16 = v87;
  __int128 v70 = v86;
  LOBYTE(v71) = v87;
  uint64_t v17 = sub_100005104(&qword_1000B8930);
  Option.wrappedValue.getter(v17, v18, v19, (uint64_t)&v77);
  sub_100003C60(v11, v12, v13);
  sub_100003C60(v63, v14, v62);
  sub_100003C60(v67, v65, v64);
  sub_100003C50(v15, *((uint64_t *)&v15 + 1), v16);
  id v20 = sub_10001B598(v77, v78);
  if (!v69)
  {
    v88[0] = v20;
    uint64_t v21 = sub_100005104(&qword_1000B8758);
    uint64_t v22 = swift_allocObject(v21, 64LL, 7LL);
    *(_OWORD *)(v22 + 16) = xmmword_100096510;
    uint64_t v77 = 0LL;
    uint64_t v78 = (void *)0xE000000000000000LL;
    swift_getObjectType(a1);
    v23._char countAndFlagsBits = sub_100010AF4();
    object = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(object);
    v25._char countAndFlagsBits = 40LL;
    v25._object = (void *)0xE100000000000000LL;
    String.append(_:)(v25);
    *((void *)&v71 + 1) = swift_getAssociatedTypeWitness(0LL, a2);
    *(_DWORD *)sub_10000B40C(&v70) = *(_DWORD *)(a1 + 20);
    _print_unlocked<A, B>(_:_:)( &v70,  &v77,  (char *)&type metadata for Any + 8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    sub_1000062D8(&v70);
    v26._char countAndFlagsBits = 670249LL;
    v26._object = (void *)0xE300000000000000LL;
    String.append(_:)(v26);
    uint64_t v27 = v77;
    uint64_t v28 = v78;
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 32) = v27;
    *(void *)(v22 + 40) = v28;
    unint64_t v29 = sub_10001BBC0();
    print<A>(_:separator:terminator:to:)( v22,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  v88,  &type metadata for Output,  v29);
    swift_bridgeObjectRelease(v22);
    uint64_t v30 = swift_allocObject(v21, 224LL, 7LL);
    *(_OWORD *)(v30 + 16) = xmmword_1000970A0;
    *(void *)(v30 + 32) = 0x73736572646441LL;
    *(void *)(v30 + 40) = 0xE700000000000000LL;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = 0x697461636F6C6C41LL;
    *(void *)(v30 + 72) = 0xEA00000000006E6FLL;
    *(void *)(v30 + 88) = &type metadata for String;
    *(void *)(v30 + 96) = 1702521171LL;
    *(void *)(v30 + 104) = 0xE400000000000000LL;
    *(void *)(v30 + 120) = &type metadata for String;
    *(void *)(v30 + 128) = 0x74657366664FLL;
    *(void *)(v30 + 136) = 0xE600000000000000LL;
    *(void *)(v30 + 152) = &type metadata for String;
    strcpy((char *)(v30 + 160), "isArrayOfClass");
    *(_BYTE *)(v30 + 175) = -18;
    *(void *)(v30 + 216) = &type metadata for String;
    *(void *)(v30 + 184) = &type metadata for String;
    *(void *)(v30 + 192) = 1701667150LL;
    *(void *)(v30 + 200) = 0xE400000000000000LL;
    print<A>(_:separator:terminator:to:)( v30,  9LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  v88,  &type metadata for Output,  v29);
    swift_bridgeObjectRelease(v30);
    uint64_t v31 = *(void *)(a3 + 16);
    if (v31)
    {
      uint64_t v32 = (void *)(swift_bridgeObjectRetain(a3) + 104);
      do
      {
        uint64_t v33 = *(v32 - 1);
        uint64_t v34 = *v32;
        char v35 = *((_BYTE *)v32 - 15);
        char v36 = *((_BYTE *)v32 - 16);
        uint64_t v37 = *(v32 - 4);
        uint64_t v38 = *(v32 - 3);
        char v39 = *((_BYTE *)v32 - 40);
        __int128 v40 = *(_OWORD *)(v32 - 7);
        __int128 v70 = *(_OWORD *)(v32 - 9);
        __int128 v71 = v40;
        LOBYTE(v72) = v39;
        *((void *)&v72 + 1) = v37;
        *(void *)&__int128 v73 = v38;
        BYTE8(v73) = v36;
        BYTE9(v73) = v35;
        *(void *)&__int128 v74 = v33;
        *((void *)&v74 + 1) = v34;
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v38);
        sub_100019620((unint64_t *)&v70, (uint64_t)v88, &v89, v4);
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(v38);
        v32 += 10;
        --v31;
      }

      while (v31);
      swift_bridgeObjectRelease(a3);
    }

    uint64_t v41 = v89;
    if (v89[2])
    {
      uint64_t v42 = swift_allocObject(v21, 64LL, 7LL);
      *(_OWORD *)(v42 + 16) = xmmword_100096510;
      *(void *)(v42 + 56) = &type metadata for String;
      *(void *)(v42 + 32) = 0xD00000000000005BLL;
      *(void *)(v42 + 40) = 0x800000010009C170LL;
      print<A>(_:separator:terminator:to:)( v42,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  v88,  &type metadata for Output,  v29);
      swift_bridgeObjectRelease(v42);
      uint64_t v43 = v41[2];
      if (v43)
      {
        swift_bridgeObjectRetain_n(v41, 2LL);
        uint64_t v66 = v41;
        unint64_t v68 = v29;
        uint64_t v44 = (void **)(v41 + 6);
        do
        {
          uint64_t v45 = (uint64_t)*(v44 - 2);
          uint64_t v46 = (uint64_t)*(v44 - 1);
          uint64_t v47 = *v44;
          v44 += 3;
          uint64_t v48 = v21;
          uint64_t v49 = swift_allocObject(v21, 64LL, 7LL);
          *(_OWORD *)(v49 + 16) = xmmword_100096510;
          *(void *)&__int128 v70 = 30768LL;
          *((void *)&v70 + 1) = 0xE200000000000000LL;
          uint64_t v77 = v45;
          unint64_t v50 = sub_1000058CC();
          swift_bridgeObjectRetain(v47);
          v51._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v77, 16LL, 0LL, &type metadata for UInt64, v50);
          char v52 = v51._object;
          String.append(_:)(v51);
          swift_bridgeObjectRelease(v52);
          v53._char countAndFlagsBits = 9LL;
          v53._object = (void *)0xE100000000000000LL;
          String.append(_:)(v53);
          v54._char countAndFlagsBits = v46;
          v54._object = v47;
          String.append(_:)(v54);
          __int128 v55 = v70;
          *(void *)(v49 + 56) = &type metadata for String;
          *(_OWORD *)(v49 + 32) = v55;
          print<A>(_:separator:terminator:to:)( v49,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  v88,  &type metadata for Output,  v68);
          swift_bridgeObjectRelease(v47);
          uint64_t v56 = v49;
          uint64_t v21 = v48;
          swift_bridgeObjectRelease(v56);
          --v43;
        }

        while (v43);
        uint64_t v41 = v66;
        swift_bridgeObjectRelease_n(v66, 2LL);
        unint64_t v29 = v68;
      }
    }

    uint64_t v57 = swift_allocObject(v21, 64LL, 7LL);
    *(_OWORD *)(v57 + 16) = xmmword_100096510;
    *(void *)(v57 + 56) = &type metadata for String;
    *(void *)(v57 + 32) = 0LL;
    *(void *)(v57 + 40) = 0xE000000000000000LL;
    print<A>(_:separator:terminator:to:)( v57,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  v88,  &type metadata for Output,  v29);
    swift_bridgeObjectRelease(v57);
    uint64_t v58 = (void *)v88[0];
    swift_bridgeObjectRelease(v41);
  }

uint64_t sub_100018BB4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v66 = type metadata accessor for String.Encoding(0LL);
  uint64_t v65 = *(void *)(v66 - 8);
  uint64_t v4 = __chkstk_darwin(v66);
  char v64 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v67 = (char *)&v55 - v6;
  uint64_t v7 = type metadata accessor for JSONEncoder.OutputFormatting(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = JSONEncoder.init()();
  uint64_t v13 = sub_100005104(&qword_1000B8CF8);
  uint64_t v14 = swift_allocObject( v13,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
        + 2LL * *(void *)(v8 + 72),
          *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_1000970B0;
  uint64_t v15 = static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  static JSONEncoder.OutputFormatting.sortedKeys.getter(v15);
  *(void *)&__int128 v68 = v14;
  uint64_t v16 = sub_10001D414( &qword_1000B8D00,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting,  (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  uint64_t v17 = sub_100005104(&qword_1000B8D08);
  uint64_t v18 = sub_1000062F8(&qword_1000B8D10, &qword_1000B8D08, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v17, v18, v7, v16);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v10);
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  uint64_t v21 = sub_100006270(a1, v19);
  uint64_t v22 = v86;
  uint64_t v23 = dispatch thunk of JSONEncoder.encode<A>(_:)(v21, v19, v20);
  if (v22) {
    return swift_release(v12);
  }
  uint64_t v26 = v23;
  unint64_t v27 = v24;
  uint64_t v63 = 0LL;
  uint64_t v86 = v12;
  uint64_t v28 = v67;
  static String.Encoding.utf8.getter(v23);
  uint64_t v61 = v26;
  unint64_t v62 = v27;
  uint64_t result = String.init(data:encoding:)(v26, v27, v28);
  uint64_t v60 = result;
  uint64_t v67 = v29;
  if (v29)
  {
    __int128 v30 = *(_OWORD *)(v2 + 200);
    __int128 v31 = *(_OWORD *)(v2 + 232);
    __int128 v72 = *(_OWORD *)(v2 + 216);
    __int128 v73 = v31;
    __int128 v74 = *(_OWORD *)(v2 + 248);
    __int128 v32 = *(_OWORD *)(v2 + 168);
    __int128 v68 = *(_OWORD *)(v2 + 152);
    __int128 v69 = v32;
    __int128 v33 = *(_OWORD *)(v2 + 184);
    __int128 v71 = v30;
    __int128 v70 = v33;
    uint64_t v34 = sub_100005104(&qword_1000B8CC0);
    OptionGroup.wrappedValue.getter(v34, v35, v36, (uint64_t)&v75);
    uint64_t v37 = v75;
    uint64_t v38 = v76;
    char v39 = v77;
    uint64_t v40 = v78;
    uint64_t v41 = v79;
    int v56 = v80;
    uint64_t v59 = v81;
    uint64_t v58 = v82;
    int v57 = v83;
    __int128 v42 = v84;
    char v43 = v85;
    __int128 v68 = v84;
    LOBYTE(v69) = v85;
    uint64_t v44 = sub_100005104(&qword_1000B8930);
    Option.wrappedValue.getter(v44, v45, v46, (uint64_t)&v75);
    sub_100003C60(v37, v38, v39);
    sub_100003C60(v40, v41, v56);
    sub_100003C60(v59, v58, v57);
    uint64_t v47 = sub_100003C50(v42, *((uint64_t *)&v42 + 1), v43);
    uint64_t v48 = v76;
    if (v76)
    {
      *(void *)&__int128 v68 = v60;
      uint64_t v49 = v67;
      *((void *)&v68 + 1) = v67;
      unint64_t v50 = v64;
      static String.Encoding.utf8.getter(v47);
      unint64_t v51 = sub_10001BB7C();
      StringProtocol.write<A>(toFile:atomically:encoding:)( &v75,  1LL,  v50,  &type metadata for String,  &type metadata for String,  v51,  v51);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v66);
      sub_10001BB38(v61, v62);
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(v48);
      return swift_release(v86);
    }

    else
    {
      uint64_t v52 = sub_100005104(&qword_1000B8758);
      uint64_t v53 = swift_allocObject(v52, 64LL, 7LL);
      *(_OWORD *)(v53 + 16) = xmmword_100096510;
      *(void *)(v53 + 56) = &type metadata for String;
      Swift::String v54 = v67;
      *(void *)(v53 + 32) = v60;
      *(void *)(v53 + 40) = v54;
      print(_:separator:terminator:)(v53, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
      sub_10001BB38(v61, v62);
      swift_bridgeObjectRelease(v53);
      return swift_release(v86);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10001908C(uint64_t a1)
{
  __int128 v2 = *(_OWORD *)(v1 + 200);
  __int128 v3 = *(_OWORD *)(v1 + 232);
  __int128 v57 = *(_OWORD *)(v1 + 216);
  __int128 v58 = v3;
  __int128 v59 = *(_OWORD *)(v1 + 248);
  __int128 v4 = *(_OWORD *)(v1 + 168);
  __int128 v53 = *(_OWORD *)(v1 + 152);
  __int128 v54 = v4;
  __int128 v55 = *(_OWORD *)(v1 + 184);
  __int128 v56 = v2;
  uint64_t v5 = sub_100005104(&qword_1000B8CC0);
  OptionGroup.wrappedValue.getter(v5, v6, v7, (uint64_t)&v60);
  uint64_t v8 = v60;
  uint64_t v9 = (uint64_t)v61;
  char v10 = v62;
  uint64_t v11 = v64;
  uint64_t v45 = v63;
  char v12 = v65;
  uint64_t v49 = v66;
  uint64_t v48 = v67;
  char v46 = v68;
  __int128 v13 = v69;
  char v14 = v70;
  __int128 v53 = v69;
  LOBYTE(v54) = v70;
  uint64_t v15 = sub_100005104(&qword_1000B8930);
  Option.wrappedValue.getter(v15, v16, v17, (uint64_t)&v60);
  sub_100003C60(v8, v9, v10);
  sub_100003C60(v45, v11, v12);
  sub_100003C60(v49, v48, v46);
  sub_100003C50(v13, *((uint64_t *)&v13 + 1), v14);
  id v18 = sub_10001B598(v60, v61);
  if (!v51)
  {
    id v71 = v18;
    uint64_t v50 = sub_100005104(&qword_1000B8758);
    uint64_t v19 = swift_allocObject(v50, 128LL, 7LL);
    *(_OWORD *)(v19 + 16) = xmmword_100097570;
    *(void *)(v19 + 32) = 1702521171LL;
    *(void *)(v19 + 40) = 0xE400000000000000LL;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = 0x7372656E774FLL;
    *(void *)(v19 + 72) = 0xE600000000000000LL;
    *(void *)(v19 + 120) = &type metadata for String;
    *(void *)(v19 + 88) = &type metadata for String;
    *(void *)(v19 + 96) = 1701667150LL;
    *(void *)(v19 + 104) = 0xE400000000000000LL;
    unint64_t v52 = sub_10001BBC0();
    print<A>(_:separator:terminator:to:)( v19,  9LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &v71,  &type metadata for Output,  v52);
    swift_bridgeObjectRelease(v19);
    uint64_t v20 = swift_bridgeObjectRetain(a1);
    uint64_t v21 = sub_1000264C0(v20);
    swift_bridgeObjectRelease(a1);
    *(void *)&__int128 v53 = v21;
    sub_100019FF8((uint64_t *)&v53, (uint64_t (*)(uint64_t))sub_1000295F0, sub_10001A070);
    uint64_t v47 = v53;
    uint64_t v22 = *(void *)(v53 + 16);
    if (v22)
    {
      uint64_t v23 = 0LL;
      uint64_t v24 = 0LL;
      Swift::String v25 = (uint64_t *)(swift_retain(v53) + 56);
      while (1)
      {
        uint64_t v28 = *(v25 - 1);
        BOOL v26 = __OFADD__(v24, v28);
        v24 += v28;
        if (v26) {
          break;
        }
        uint64_t v30 = *(v25 - 3);
        uint64_t v29 = *(v25 - 2);
        uint64_t v31 = *v25;
        BOOL v32 = v30 == 0x6E776F6E6B6E753CLL && v29 == 0xE90000000000003ELL;
        if (v32
          || (_stringCompareWithSmolCheck(_:_:expecting:)( *(v25 - 3),  *(v25 - 2),  0x6E776F6E6B6E753CLL,  0xE90000000000003ELL,  0LL) & 1) != 0)
        {
          BOOL v26 = __OFADD__(v23, v28);
          v23 += v28;
          if (v26) {
            goto LABEL_18;
          }
        }

        uint64_t v27 = swift_allocObject(v50, 128LL, 7LL);
        *(_OWORD *)(v27 + 16) = xmmword_100097570;
        *(void *)(v27 + 56) = &type metadata for Int;
        *(void *)(v27 + 32) = v28;
        *(void *)(v27 + 64) = *(void *)(v31 + 16);
        *(void *)(v27 + 120) = &type metadata for String;
        *(void *)(v27 + 88) = &type metadata for Int;
        *(void *)(v27 + 96) = v30;
        *(void *)(v27 + 104) = v29;
        swift_bridgeObjectRetain_n(v29, 2LL);
        swift_bridgeObjectRetain(v31);
        print<A>(_:separator:terminator:to:)( v27,  9LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &v71,  &type metadata for Output,  v52);
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(v29);
        swift_bridgeObjectRelease(v27);
        v25 += 4;
        if (!--v22)
        {
          swift_release_n(v47, 2LL);
          uint64_t v33 = v24 / 1024;
          goto LABEL_15;
        }
      }

      __break(1u);
LABEL_18:
      __break(1u);
      swift_release(v53);
      __break(1u);
    }

    else
    {
      swift_release(v53);
      uint64_t v23 = 0LL;
      uint64_t v33 = 0LL;
LABEL_15:
      uint64_t v34 = swift_allocObject(v50, 64LL, 7LL);
      *(_OWORD *)(v34 + 16) = xmmword_100096510;
      *(void *)&__int128 v53 = 0LL;
      *((void *)&v53 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(19LL);
      swift_bridgeObjectRelease(*((void *)&v53 + 1));
      strcpy((char *)&v53, "\nTotal size:\t");
      HIWORD(v53) = -4864;
      uint64_t v60 = v33;
      v35._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v35._object;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(object);
      v37._char countAndFlagsBits = 1114196768LL;
      v37._object = (void *)0xE400000000000000LL;
      String.append(_:)(v37);
      __int128 v38 = v53;
      *(void *)(v34 + 56) = &type metadata for String;
      *(_OWORD *)(v34 + 32) = v38;
      print<A>(_:separator:terminator:to:)( v34,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &v71,  &type metadata for Output,  v52);
      swift_bridgeObjectRelease(v34);
      uint64_t v39 = swift_allocObject(v50, 64LL, 7LL);
      *(_OWORD *)(v39 + 16) = xmmword_100096510;
      *(void *)&__int128 v53 = 0LL;
      *((void *)&v53 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(20LL);
      swift_bridgeObjectRelease(*((void *)&v53 + 1));
      strcpy((char *)&v53, "Unknown size:\t");
      HIBYTE(v53) = -18;
      uint64_t v60 = v23 / 1024;
      v40._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v41 = v40._object;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(v41);
      v42._char countAndFlagsBits = 1114196768LL;
      v42._object = (void *)0xE400000000000000LL;
      String.append(_:)(v42);
      __int128 v43 = v53;
      *(void *)(v39 + 56) = &type metadata for String;
      *(_OWORD *)(v39 + 32) = v43;
      print<A>(_:separator:terminator:to:)( v39,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &v71,  &type metadata for Output,  v52);
      swift_bridgeObjectRelease(v39);
    }
  }

uint64_t sub_100019620(unint64_t *a1, uint64_t a2, void **a3, uint64_t a4)
{
  unint64_t v5 = *a1;
  unint64_t v6 = a1[2];
  uint64_t v48 = *((unsigned int *)a1 + 6);
  uint64_t v7 = (void *)*((unsigned __int8 *)a1 + 32);
  unint64_t v55 = a1[5];
  unint64_t v66 = a1[6];
  int v51 = *((unsigned __int8 *)a1 + 57);
  char v52 = *((_BYTE *)a1 + 56);
  unint64_t v49 = a1[8];
  unint64_t v50 = a1[9];
  uint64_t v8 = (void *)sub_100005104(&qword_1000B8758);
  uint64_t v9 = swift_allocObject(v8, 64LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_100096510;
  *(void *)&__int128 v56 = 30768LL;
  *((void *)&v56 + 1) = 0xE200000000000000LL;
  *(void *)&__int128 v60 = v5;
  char v10 = (void *)sub_1000058CC();
  v11._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v60, 16LL, 0LL, &type metadata for UInt64, v10);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  __int128 v13 = v56;
  *(void *)(v9 + 56) = &type metadata for String;
  *(_OWORD *)(v9 + 32) = v13;
  unint64_t v14 = sub_10001BBC0();
  uint64_t v54 = a2;
  print<A>(_:separator:terminator:to:)( v9,  32LL,  0xE100000000000000LL,  9LL,  0xE100000000000000LL,  a2,  &type metadata for Output,  v14);
  uint64_t v15 = v9;
  char v16 = (char)v7;
  swift_bridgeObjectRelease(v15);
  if ((v7 & 1) != 0)
  {
    uint64_t v7 = v8;
    unint64_t v17 = (unint64_t)&type metadata for String;
    if (!v51)
    {
LABEL_7:
      uint64_t v23 = swift_allocObject(v7, 64LL, 7LL);
      *(_OWORD *)(v23 + 16) = xmmword_100096510;
      *(void *)(v23 + 56) = v17;
      *(void *)(v23 + 32) = 0x3F093F3F093F3F3FLL;
      unint64_t v24 = 0xEA00000000003F3FLL;
      goto LABEL_11;
    }

    uint64_t v8 = a3;
    char v10 = *a3;
    swift_bridgeObjectRetain(v66);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    *a3 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
LABEL_4:
      unint64_t v19 = v5;
      unint64_t v21 = v10[2];
      unint64_t v20 = v10[3];
      if (v21 >= v20 >> 1)
      {
        char v10 = sub_100012328((void *)(v20 > 1), v21 + 1, 1, v10);
        *uint64_t v8 = v10;
      }

      v10[2] = v21 + 1;
      uint64_t v22 = &v10[3 * v21];
      v22[4] = v19;
      v22[5] = v55;
      v22[6] = v66;
      goto LABEL_7;
    }

LABEL_23:
    char v10 = sub_100012328(0LL, v10[2] + 1LL, 1, v10);
    *uint64_t v8 = v10;
    goto LABEL_4;
  }

  unint64_t v17 = v5 - v6;
  if (v5 < v6)
  {
    __break(1u);
    goto LABEL_22;
  }

  if ((v17 & 0x8000000000000000LL) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = v8;
  uint64_t v23 = swift_allocObject(v8, 64LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_100096510;
  *(void *)&__int128 v56 = 30768LL;
  *((void *)&v56 + 1) = 0xE200000000000000LL;
  *(void *)&__int128 v60 = v6;
  v25._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v60, 16LL, 0LL, &type metadata for UInt64, v10);
  BOOL v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v26);
  v27._char countAndFlagsBits = 9LL;
  v27._object = (void *)0xE100000000000000LL;
  String.append(_:)(v27);
  *(void *)&__int128 v60 = v48;
  v28._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v29 = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v29);
  v30._char countAndFlagsBits = 9LL;
  v30._object = (void *)0xE100000000000000LL;
  String.append(_:)(v30);
  *(void *)&__int128 v60 = v17;
  v31._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  BOOL v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32);
  unint64_t v24 = 0xE200000000000000LL;
  unint64_t v17 = (unint64_t)&type metadata for String;
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 32) = 30768LL;
LABEL_11:
  *(void *)(v23 + 40) = v24;
  print<A>(_:separator:terminator:to:)( v23,  32LL,  0xE100000000000000LL,  9LL,  0xE100000000000000LL,  v54,  &type metadata for Output,  v14);
  swift_bridgeObjectRelease(v23);
  uint64_t v33 = swift_allocObject(v7, 64LL, 7LL);
  *(_OWORD *)(v33 + 16) = xmmword_100096510;
  *(void *)(v33 + 56) = &type metadata for Bool;
  *(_BYTE *)(v33 + 32) = v52;
  print<A>(_:separator:terminator:to:)( v33,  32LL,  0xE100000000000000LL,  9LL,  0xE100000000000000LL,  v54,  &type metadata for Output,  v14);
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = swift_allocObject(v7, 64LL, 7LL);
  *(_OWORD *)(v34 + 16) = xmmword_100096510;
  *(void *)(v34 + 56) = v17;
  *(void *)(v34 + 32) = v55;
  unint64_t v35 = v66;
  *(void *)(v34 + 40) = v66;
  swift_bridgeObjectRetain(v35);
  print<A>(_:separator:terminator:to:)( v34,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  v54,  &type metadata for Output,  v14);
  swift_bridgeObjectRelease(v34);
  __int128 v36 = *(_OWORD *)(a4 + 104);
  __int128 v56 = *(_OWORD *)(a4 + 88);
  __int128 v57 = v36;
  __int128 v37 = *(_OWORD *)(a4 + 136);
  __int128 v58 = *(_OWORD *)(a4 + 120);
  __int128 v59 = v37;
  uint64_t v38 = sub_100005104(&qword_1000B8748);
  OptionGroup.wrappedValue.getter(v38, v39, v40, (uint64_t)&v60);
  int v41 = sub_100008F4C();
  __int128 v64 = v60;
  char v65 = v61;
  sub_1000057D8((uint64_t)&v64);
  __int128 v56 = v62;
  LOBYTE(v57) = v63;
  uint64_t result = sub_1000057D8((uint64_t)&v56);
  if (v41 == 2) {
    char v43 = 1;
  }
  else {
    char v43 = v16;
  }
  if ((v43 & 1) == 0)
  {
    uint64_t v44 = swift_allocObject(v7, 64LL, 7LL);
    *(_OWORD *)(v44 + 16) = xmmword_100096510;
    *(void *)(v44 + 56) = v17;
    unint64_t v45 = 0xD000000000000019LL;
    if (v50) {
      unint64_t v45 = v49;
    }
    unint64_t v46 = 0x800000010009C1D0LL;
    if (v50) {
      unint64_t v46 = v50;
    }
    *(void *)(v44 + 32) = v45;
    *(void *)(v44 + 40) = v46;
    swift_bridgeObjectRetain(v50);
    print<A>(_:separator:terminator:to:)( v44,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  v54,  &type metadata for Output,  v14);
    return swift_bridgeObjectRelease(v44);
  }

  return result;
}

    uint64_t v9 = (v18 - 1) & v18;
    char v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_24:
    unint64_t v20 = *(void *)(v3 + 48) + 24 * v16;
    unint64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v23 = *(unsigned __int8 *)(v20 + 16);
    Hasher.init(_seed:)(v35, *(void *)(v6 + 40));
    if (v23 >> 6)
    {
      if (v23 >> 6 == 1)
      {
        Hasher._combine(_:)(3uLL);
        Character.hash(into:)(v35, v21, v22);
        Hasher._combine(_:)(v23 & 1);
        swift_bridgeObjectRetain(v22);
      }

      else
      {
        if (v22 | v21 || v23 != 128) {
          unint64_t v24 = 2LL;
        }
        else {
          unint64_t v24 = 0LL;
        }
        Hasher._combine(_:)(v24);
      }
    }

    else
    {
      Hasher._combine(_:)(1uLL);
      swift_bridgeObjectRetain_n(v22, 2LL);
      String.hash(into:)(v35, v21, v22);
      Hasher._combine(_:)(v23 & 1);
      sub_10003F434(v21, v22, v23);
    }

    uint64_t result = Hasher._finalize()();
    Swift::String v25 = -1LL << *(_BYTE *)(v6 + 32);
    BOOL v26 = result & ~v25;
    Swift::String v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      __int128 v13 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      Swift::String v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        Swift::String v30 = v27 == v29;
        if (v27 == v29) {
          Swift::String v27 = 0LL;
        }
        v28 |= v30;
        Swift::String v31 = *(void *)(v10 + 8 * v27);
      }

      while (v31 == -1);
      __int128 v13 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    unint64_t v14 = *(void *)(v6 + 48) + 24 * v13;
    *(void *)unint64_t v14 = v21;
    *(void *)(v14 + 8) = v22;
    *(_BYTE *)(v14 + 16) = v23;
    ++*(void *)(v6 + 16);
  }

  while (1)
  {
    char v12 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v12 >= v34) {
      goto LABEL_42;
    }
    id v18 = *(void *)(v33 + 8 * v12);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }

  Hasher._combine(_:)(0);
  unint64_t v24 = v2[10];
  if (!v24) {
    goto LABEL_24;
  }
LABEL_16:
  Hasher._combine(_:)(1u);
  Swift::String v25 = *(void *)(v24 + 16);
  Hasher._combine(_:)(v25);
  if (v25)
  {
    swift_bridgeObjectRetain(v24);
    BOOL v26 = 32LL;
    do
    {
      v33[0] = *(_OWORD *)(v24 + v26);
      Swift::String v27 = *(_OWORD *)(v24 + v26 + 16);
      Swift::String v28 = *(_OWORD *)(v24 + v26 + 32);
      uint64_t v29 = *(_OWORD *)(v24 + v26 + 64);
      v33[3] = *(_OWORD *)(v24 + v26 + 48);
      v33[4] = v29;
      v33[1] = v27;
      v33[2] = v28;
      Swift::String v30 = *(_OWORD *)(v24 + v26 + 80);
      Swift::String v31 = *(_OWORD *)(v24 + v26 + 96);
      BOOL v32 = *(_OWORD *)(v24 + v26 + 112);
      uint64_t v34 = *(void *)(v24 + v26 + 128);
      v33[6] = v31;
      v33[7] = v32;
      v33[5] = v30;
      sub_100091D50(v33);
      ArgumentInfoV0.hash(into:)(a1);
      sub_100091DE0(v33);
      v26 += 136LL;
      --v25;
    }

    while (v25);
    swift_bridgeObjectRelease(v24);
  }

uint64_t sub_100019B64()
{
  unint64_t v1 = 0xD000000000000010LL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000016LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x736E6F6974706FLL;
  }
}

uint64_t sub_100019BC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10001BF30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100019BE8(uint64_t a1)
{
  unint64_t v2 = sub_10001CC8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100019C10(uint64_t a1)
{
  unint64_t v2 = sub_10001CC8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100019C38@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000B8670 != -1) {
    swift_once(&qword_1000B8670, sub_100016FFC);
  }
  return sub_100005980((uint64_t)&xmmword_1000BA3B8, a1);
}

uint64_t sub_100019C88()
{
  return sub_1000170AC();
}

__n128 sub_100019CD0@<Q0>(uint64_t a1@<X8>)
{
  unint64_t v2 = (unsigned __int8 *)ArgumentVisibility.default.unsafeMutableAddressor();
  uint64_t v3 = *v2;
  unint64_t v4 = sub_1000059BC();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v3,  (uint64_t)&type metadata for UniversalOptions,  v4,  (uint64_t)&v39);
  __int128 v37 = v40;
  __n128 v38 = v39;
  __int128 v36 = v41;
  uint64_t v34 = *((void *)&v42 + 1);
  uint64_t v35 = v42;
  char v5 = BYTE1(v43);
  char v32 = BYTE2(v43);
  char v33 = v43;
  char v31 = BYTE3(v43);
  uint64_t v29 = v44;
  uint64_t v30 = *((void *)&v43 + 1);
  uint64_t v6 = *v2;
  unint64_t v7 = sub_100005A00();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v6,  (uint64_t)&type metadata for BacktraceOptions,  v7,  (uint64_t)&v39);
  __int128 v27 = v40;
  __n128 v28 = v39;
  uint64_t v8 = v41;
  char v9 = BYTE8(v41);
  char v10 = BYTE9(v41);
  char v11 = BYTE10(v41);
  char v12 = BYTE11(v41);
  __int128 v13 = v42;
  uint64_t v14 = *v2;
  unint64_t v15 = sub_10001BC70();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v14,  (uint64_t)&type metadata for GenericMetadataOptions,  v15,  (uint64_t)&v39);
  uint64_t v16 = v44;
  char v17 = v45;
  char v18 = v47;
  char v19 = v48;
  uint64_t v20 = v49;
  uint64_t v21 = v50;
  __n128 result = v39;
  __int128 v23 = v40;
  __int128 v24 = v41;
  __int128 v25 = v42;
  __int128 v26 = v43;
  char v52 = v10;
  char v51 = v46;
  *(__n128 *)a1 = v38;
  *(_OWORD *)(a1 + 16) = v37;
  *(_OWORD *)(a1 + 32) = v36;
  *(void *)(a1 + 48) = v35;
  *(void *)(a1 + 56) = v34;
  *(_BYTE *)(a1 + 64) = v33;
  *(_BYTE *)(a1 + 65) = v5;
  *(_BYTE *)(a1 + 66) = v32;
  *(_BYTE *)(a1 + 67) = v31;
  *(void *)(a1 + 72) = v30;
  *(void *)(a1 + 80) = v29;
  *(__n128 *)(a1 + 88) = v28;
  *(_OWORD *)(a1 + 104) = v27;
  *(void *)(a1 + 120) = v8;
  *(_BYTE *)(a1 + 128) = v9;
  *(_BYTE *)(a1 + 129) = v52;
  *(_BYTE *)(a1 + 130) = v11;
  *(_BYTE *)(a1 + 131) = v12;
  *(_OWORD *)(a1 + 136) = v13;
  *(__n128 *)(a1 + 152) = result;
  *(_OWORD *)(a1 + 168) = v23;
  *(_OWORD *)(a1 + 184) = v24;
  *(_OWORD *)(a1 + 200) = v25;
  *(_OWORD *)(a1 + 216) = v26;
  *(void *)(a1 + 232) = v16;
  *(_BYTE *)(a1 + 240) = v17;
  *(_BYTE *)(a1 + 241) = v51;
  *(_BYTE *)(a1 + 242) = v18;
  *(_BYTE *)(a1 + 243) = v19;
  *(void *)(a1 + 248) = v20;
  *(void *)(a1 + 256) = v21;
  return result;
}

void *sub_100019ED8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __n128 result = sub_10001C078(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x108uLL);
  }
  return result;
}

unint64_t sub_100019F28(uint64_t a1)
{
  unint64_t result = sub_100019F4C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100019F4C()
{
  unint64_t result = qword_1000B8CB0;
  if (!qword_1000B8CB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000975F4, &type metadata for DumpGenericMetadata);
    atomic_store(result, (unint64_t *)&qword_1000B8CB0);
  }

  return result;
}

unint64_t sub_100019F90(uint64_t a1)
{
  unint64_t result = sub_100019FB4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100019FB4()
{
  unint64_t result = qword_1000B8CB8;
  if (!qword_1000B8CB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009761C, &type metadata for DumpGenericMetadata);
    atomic_store(result, (unint64_t *)&qword_1000B8CB8);
  }

  return result;
}

uint64_t sub_100019FF8(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_10001A070(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        return sub_10001ADA4(0LL, v3, 1LL, a1);
      }
      return result;
    }

    goto LABEL_133;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_132;
  }
  uint64_t v6 = result;
  char v95 = a1;
  if (v3 <= 1)
  {
    char v9 = _swiftEmptyArrayStorage;
    char v101 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      char v12 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_98;
    }

    uint64_t v97 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = sub_100005104(&qword_1000B8D28);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(void *)(result + 16) = v7;
    uint64_t v97 = (void *)result;
    char v101 = (char *)(result + 32);
  }

  Swift::Int v10 = 0LL;
  uint64_t v11 = *a1;
  uint64_t v96 = *a1 + 88;
  char v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v98 = v6;
  Swift::Int v99 = v3;
  uint64_t v100 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unint64_t v15 = *(void *)(*(void *)(v11 + 32 * v10 + 24) + 16LL);
      unint64_t v16 = *(void *)(*(void *)(v11 + 32 * v14 + 24) + 16LL);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = v96 + 32 * v14;
        unint64_t v18 = v15;
        while (1)
        {
          unint64_t v19 = *(void *)(*(void *)v17 + 16LL);
          if (v16 < v15 == v18 >= v19) {
            break;
          }
          ++v10;
          v17 += 32LL;
          unint64_t v18 = v19;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }

      if (v16 < v15)
      {
        if (v10 < v14) {
          goto LABEL_134;
        }
        if (v14 < v10)
        {
          uint64_t v20 = 32 * v10;
          uint64_t v21 = 32 * v14;
          Swift::Int v22 = v10;
          Swift::Int v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_139;
              }
              __int128 v24 = (_OWORD *)(v11 + v21);
              uint64_t v25 = v11 + v20;
              __int128 v26 = *(_OWORD *)(v11 + v21);
              uint64_t v27 = *(void *)(v11 + v21 + 16);
              uint64_t v28 = *(void *)(v11 + v21 + 24);
              __int128 v29 = *(_OWORD *)(v11 + v20 - 16);
              *__int128 v24 = *(_OWORD *)(v11 + v20 - 32);
              v24[1] = v29;
              *(_OWORD *)(v25 - 32) = v26;
              *(void *)(v25 - 16) = v27;
              *(void *)(v25 - 8) = v28;
            }

            ++v23;
            v20 -= 32LL;
            v21 += 32LL;
          }

          while (v23 < v22);
        }
      }
    }

    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14)) {
        goto LABEL_131;
      }
      if (v10 - v14 < v6)
      {
        Swift::Int v30 = v14 + v6;
        if (__OFADD__(v14, v6)) {
          goto LABEL_135;
        }
        if (v30 >= v3) {
          Swift::Int v30 = v3;
        }
        if (v30 < v14) {
          goto LABEL_136;
        }
        if (v10 != v30)
        {
          char v31 = (void *)(v11 + 32 * v10);
          do
          {
            uint64_t v32 = *(void *)(v11 + 32 * v10 + 24);
            Swift::Int v33 = v14;
            uint64_t v34 = v31;
            do
            {
              if (*(void *)(*(v34 - 1) + 16LL) >= *(void *)(v32 + 16)) {
                break;
              }
              if (!v11) {
                goto LABEL_137;
              }
              uint64_t v35 = *v34;
              uint64_t v36 = v34[1];
              uint64_t v37 = v34[2];
              __int128 v38 = *((_OWORD *)v34 - 1);
              *(_OWORD *)uint64_t v34 = *((_OWORD *)v34 - 2);
              *((_OWORD *)v34 + 1) = v38;
              *(v34 - 3) = v36;
              *(v34 - 2) = v37;
              *(v34 - 1) = v32;
              *(v34 - 4) = v35;
              v34 -= 4;
              ++v33;
            }

            while (v10 != v33);
            ++v10;
            v31 += 4;
          }

          while (v10 != v30);
          Swift::Int v10 = v30;
        }
      }
    }

    if (v10 < v14)
    {
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }

    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v12);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10002711C(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
      char v12 = (char *)result;
    }

    unint64_t v40 = *((void *)v12 + 2);
    unint64_t v39 = *((void *)v12 + 3);
    unint64_t v13 = v40 + 1;
    uint64_t v11 = v100;
    if (v40 >= v39 >> 1)
    {
      uint64_t result = (uint64_t)sub_10002711C((char *)(v39 > 1), v40 + 1, 1, v12);
      uint64_t v11 = v100;
      char v12 = (char *)result;
    }

    *((void *)v12 + 2) = v13;
    __int128 v41 = v12 + 32;
    __int128 v42 = &v12[16 * v40 + 32];
    *(void *)__int128 v42 = v14;
    *((void *)v42 + 1) = v10;
    if (v40) {
      break;
    }
    unint64_t v13 = 1LL;
LABEL_15:
    uint64_t v6 = v98;
    Swift::Int v3 = v99;
    if (v10 >= v99)
    {
      char v9 = v97;
LABEL_98:
      uint64_t result = (uint64_t)v12;
      uint64_t v97 = v9;
      if (v13 < 2) {
        goto LABEL_95;
      }
      uint64_t v89 = *v95;
      while (1)
      {
        unint64_t v90 = v13 - 2;
        if (v13 < 2) {
          break;
        }
        if (!v89) {
          goto LABEL_140;
        }
        uint64_t v88 = result;
        uint64_t v91 = *(void *)(result + 32 + 16 * v90);
        uint64_t v92 = *(void *)(result + 32 + 16 * (v13 - 1) + 8);
        uint64_t result = sub_10001AE28( (char *)(v89 + 32 * v91),  (char *)(v89 + 32LL * *(void *)(result + 32 + 16 * (v13 - 1))),  v89 + 32 * v92,  v101);
        if (v1) {
          goto LABEL_94;
        }
        if (v92 < v91) {
          goto LABEL_128;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v88);
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100027214(v88);
          uint64_t v88 = result;
        }

        if (v90 >= *(void *)(v88 + 16)) {
          goto LABEL_129;
        }
        uint64_t v93 = (void *)(v88 + 32 + 16 * v90);
        *uint64_t v93 = v91;
        v93[1] = v92;
        unint64_t v94 = *(void *)(v88 + 16);
        if (v13 > v94) {
          goto LABEL_130;
        }
        memmove((void *)(v88 + 32 + 16 * (v13 - 1)), (const void *)(v88 + 32 + 16 * v13), 16 * (v94 - v13));
        uint64_t result = v88;
        *(void *)(v88 + 16) = v94 - 1;
        unint64_t v13 = v94 - 1;
        if (v94 <= 2) {
          goto LABEL_95;
        }
      }

LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      return result;
    }
  }

  while (1)
  {
    unint64_t v43 = v13 - 1;
    if (v13 >= 4)
    {
      char v48 = &v41[2 * v13];
      uint64_t v49 = *(v48 - 8);
      uint64_t v50 = *(v48 - 7);
      BOOL v54 = __OFSUB__(v50, v49);
      uint64_t v51 = v50 - v49;
      if (v54) {
        goto LABEL_115;
      }
      uint64_t v53 = *(v48 - 6);
      uint64_t v52 = *(v48 - 5);
      BOOL v54 = __OFSUB__(v52, v53);
      uint64_t v46 = v52 - v53;
      char v47 = v54;
      if (v54) {
        goto LABEL_116;
      }
      unint64_t v55 = v13 - 2;
      __int128 v56 = &v41[2 * v13 - 4];
      uint64_t v58 = *v56;
      uint64_t v57 = v56[1];
      BOOL v54 = __OFSUB__(v57, v58);
      uint64_t v59 = v57 - v58;
      if (v54) {
        goto LABEL_117;
      }
      BOOL v54 = __OFADD__(v46, v59);
      uint64_t v60 = v46 + v59;
      if (v54) {
        goto LABEL_119;
      }
      if (v60 >= v51)
      {
        uint64_t v78 = &v41[2 * v43];
        uint64_t v80 = *v78;
        uint64_t v79 = v78[1];
        BOOL v54 = __OFSUB__(v79, v80);
        uint64_t v81 = v79 - v80;
        if (v54) {
          goto LABEL_125;
        }
        BOOL v71 = v46 < v81;
        goto LABEL_83;
      }
    }

    else
    {
      if (v13 != 3)
      {
        uint64_t v72 = *((void *)v12 + 4);
        uint64_t v73 = *((void *)v12 + 5);
        BOOL v54 = __OFSUB__(v73, v72);
        uint64_t v65 = v73 - v72;
        char v66 = v54;
        goto LABEL_77;
      }

      uint64_t v45 = *((void *)v12 + 4);
      uint64_t v44 = *((void *)v12 + 5);
      BOOL v54 = __OFSUB__(v44, v45);
      uint64_t v46 = v44 - v45;
      char v47 = v54;
    }

    if ((v47 & 1) != 0) {
      goto LABEL_118;
    }
    unint64_t v55 = v13 - 2;
    char v61 = &v41[2 * v13 - 4];
    uint64_t v63 = *v61;
    uint64_t v62 = v61[1];
    BOOL v64 = __OFSUB__(v62, v63);
    uint64_t v65 = v62 - v63;
    char v66 = v64;
    if (v64) {
      goto LABEL_120;
    }
    uint64_t v67 = &v41[2 * v43];
    uint64_t v69 = *v67;
    uint64_t v68 = v67[1];
    BOOL v54 = __OFSUB__(v68, v69);
    uint64_t v70 = v68 - v69;
    if (v54) {
      goto LABEL_122;
    }
    if (__OFADD__(v65, v70)) {
      goto LABEL_124;
    }
    if (v65 + v70 >= v46)
    {
      BOOL v71 = v46 < v70;
LABEL_83:
      if (v71) {
        unint64_t v43 = v55;
      }
      goto LABEL_85;
    }

LABEL_77:
    if ((v66 & 1) != 0) {
      goto LABEL_121;
    }
    __int128 v74 = &v41[2 * v43];
    uint64_t v76 = *v74;
    uint64_t v75 = v74[1];
    BOOL v54 = __OFSUB__(v75, v76);
    uint64_t v77 = v75 - v76;
    if (v54) {
      goto LABEL_123;
    }
    if (v77 < v65) {
      goto LABEL_15;
    }
LABEL_85:
    unint64_t v82 = v43 - 1;
    if (v43 - 1 >= v13)
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }

    if (!v11) {
      goto LABEL_138;
    }
    unsigned __int8 v83 = &v41[2 * v82];
    uint64_t v84 = *v83;
    char v85 = &v41[2 * v43];
    uint64_t v86 = v85[1];
    uint64_t result = sub_10001AE28((char *)(v11 + 32 * *v83), (char *)(v11 + 32LL * *v85), v11 + 32 * v86, v101);
    if (v1) {
      break;
    }
    if (v86 < v84) {
      goto LABEL_112;
    }
    if (v43 > *((void *)v12 + 2)) {
      goto LABEL_113;
    }
    *unsigned __int8 v83 = v84;
    v41[2 * v82 + 1] = v86;
    unint64_t v87 = *((void *)v12 + 2);
    if (v43 >= v87) {
      goto LABEL_114;
    }
    unint64_t v13 = v87 - 1;
    uint64_t result = (uint64_t)memmove(&v41[2 * v43], v85 + 2, 16 * (v87 - 1 - v43));
    *((void *)v12 + 2) = v87 - 1;
    uint64_t v11 = v100;
    if (v87 <= 2) {
      goto LABEL_15;
    }
  }

  uint64_t v88 = (uint64_t)v12;
LABEL_94:
  uint64_t result = v88;
LABEL_95:
  swift_bridgeObjectRelease(result);
  v97[2] = 0LL;
  return swift_bridgeObjectRelease(v97);
}

    if ((v66 & 1) != 0) {
      goto LABEL_127;
    }
    __int128 v74 = &v41[2 * v43];
    uint64_t v76 = *v74;
    uint64_t v75 = v74[1];
    BOOL v54 = __OFSUB__(v75, v76);
    uint64_t v77 = v75 - v76;
    if (v54) {
      goto LABEL_129;
    }
    if (v77 < v65) {
      goto LABEL_15;
    }
LABEL_85:
    unint64_t v82 = v43 - 1;
    if (v43 - 1 >= v14)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }

    if (!v12) {
      goto LABEL_145;
    }
    unsigned __int8 v83 = v13;
    uint64_t v84 = &v41[2 * v82];
    char v85 = *v84;
    uint64_t v86 = &v41[2 * v43];
    unint64_t v87 = v86[1];
    uint64_t result = sub_10001B05C((char *)(v12 + 24 * *v84), (char *)(v12 + 24LL * *v86), v12 + 24 * v87, v111);
    if (v112) {
      break;
    }
    if (v87 < v85) {
      goto LABEL_118;
    }
    if (v43 > *((void *)v83 + 2)) {
      goto LABEL_119;
    }
    *uint64_t v84 = v85;
    v41[2 * v82 + 1] = v87;
    uint64_t v88 = *((void *)v83 + 2);
    if (v43 >= v88) {
      goto LABEL_120;
    }
    unint64_t v13 = v83;
    Swift::Int v14 = v88 - 1;
    uint64_t result = (uint64_t)memmove(&v41[2 * v43], v86 + 2, 16 * (v88 - 1 - v43));
    *((void *)v83 + 2) = v88 - 1;
    char v12 = v110;
    if (v88 <= 2) {
      goto LABEL_15;
    }
  }

  uint64_t v89 = (uint64_t)v83;
LABEL_94:
  uint64_t result = v89;
LABEL_95:
  swift_bridgeObjectRelease(result);
  v107[2] = 0LL;
  return swift_bridgeObjectRelease(v107);
}

uint64_t sub_10001A6C8(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      uint64_t v90 = 0LL;
      uint64_t v91 = *a1;
      uint64_t v92 = 1LL;
      while (1)
      {
        unint64_t v93 = *(void *)(v91 + 24 * v92 + 8);
        uint64_t v94 = v90;
        do
        {
          uint64_t v95 = v91 + v94;
          if (v93 >= *(void *)(v91 + v94 + 8)) {
            break;
          }
          if (!v91) {
            goto LABEL_143;
          }
          int v96 = *(_DWORD *)(v95 + 24);
          uint64_t v97 = (_DWORD *)(v91 + v94);
          int v98 = *(_DWORD *)(v91 + v94 + 40);
          *(_OWORD *)(v95 + 24) = *(_OWORD *)v95;
          uint64_t result = *(void *)(v95 + 16);
          *(void *)(v95 + 40) = result;
          *uint64_t v97 = v96;
          *(void *)(v95 + 8) = v93;
          v97[4] = v98;
          v94 -= 24LL;
        }

        while (v94 != -24);
        ++v92;
        v90 += 24LL;
        if (v92 == v3) {
          return result;
        }
      }
    }

    goto LABEL_139;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_138;
  }
  uint64_t v6 = result;
  uint64_t v112 = v1;
  char v105 = a1;
  if (v3 <= 1)
  {
    Swift::Int v10 = _swiftEmptyArrayStorage;
    __int128 v111 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }

    char v107 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v7 = v5 >> 1;
    type metadata accessor for swift_metadata_allocation(0LL);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(void *)(v9 + 16) = v7;
    char v107 = (void *)v9;
    __int128 v111 = (char *)(v9 + 32);
  }

  Swift::Int v11 = 0LL;
  uint64_t v12 = *a1;
  uint64_t v106 = *a1 + 56;
  unint64_t v13 = (char *)_swiftEmptyArrayStorage;
  uint64_t result = 24LL;
  uint64_t v108 = v6;
  Swift::Int v109 = v3;
  uint64_t v110 = v12;
  while (1)
  {
    Swift::Int v15 = v11++;
    if (v11 < v3)
    {
      unint64_t v16 = *(void *)(v12 + 24 * v11 + 8);
      unint64_t v17 = *(void *)(v12 + 24 * v15 + 8);
      Swift::Int v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        unint64_t v18 = (unint64_t *)(v106 + 24 * v15);
        unint64_t v19 = v16;
        while (1)
        {
          unint64_t v21 = *v18;
          v18 += 3;
          unint64_t v20 = v21;
          if (v16 < v17 == v21 >= v19) {
            break;
          }
          ++v11;
          unint64_t v19 = v20;
          if (v3 == v11)
          {
            Swift::Int v11 = v3;
            break;
          }
        }
      }

      if (v16 < v17)
      {
        if (v11 < v15) {
          goto LABEL_140;
        }
        if (v15 < v11)
        {
          uint64_t v22 = 24 * v11;
          uint64_t v23 = 24 * v15;
          Swift::Int v24 = v11;
          Swift::Int v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12) {
                goto LABEL_146;
              }
              uint64_t v26 = v12 + v23;
              uint64_t v27 = v12 + v22;
              int v28 = *(_DWORD *)(v12 + v23);
              uint64_t v29 = *(void *)(v12 + v23 + 8);
              int v30 = *(_DWORD *)(v12 + v23 + 16);
              uint64_t v31 = *(void *)(v12 + v22 - 8);
              *(_OWORD *)uint64_t v26 = *(_OWORD *)(v12 + v22 - 24);
              *(void *)(v26 + 16) = v31;
              *(_DWORD *)(v27 - 24) = v28;
              *(void *)(v27 - 16) = v29;
              *(_DWORD *)(v27 - 8) = v30;
            }

            ++v25;
            v22 -= 24LL;
            v23 += 24LL;
          }

          while (v25 < v24);
        }
      }
    }

    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15)) {
        goto LABEL_137;
      }
      if (v11 - v15 < v6)
      {
        Swift::Int v32 = v15 + v6;
        if (__OFADD__(v15, v6)) {
          goto LABEL_141;
        }
        if (v32 >= v3) {
          Swift::Int v32 = v3;
        }
        if (v32 < v15) {
          goto LABEL_142;
        }
        if (v11 != v32)
        {
          Swift::Int v33 = (_DWORD *)(v12 + 24 * v11);
          do
          {
            unint64_t v34 = *(void *)(v12 + 24 * v11 + 8);
            Swift::Int v35 = v15;
            uint64_t v36 = v33;
            do
            {
              if (v34 >= *((void *)v36 - 2)) {
                break;
              }
              if (!v12) {
                goto LABEL_144;
              }
              int v37 = *v36;
              int v38 = v36[4];
              *(_OWORD *)uint64_t v36 = *(_OWORD *)(v36 - 6);
              *((void *)v36 + 2) = *((void *)v36 - 1);
              *((void *)v36 - 2) = v34;
              *(v36 - 2) = v38;
              *(v36 - 6) = v37;
              v36 -= 6;
              ++v35;
            }

            while (v11 != v35);
            ++v11;
            v33 += 6;
          }

          while (v11 != v32);
          Swift::Int v11 = v32;
        }
      }
    }

    if (v11 < v15)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }

    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v13);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10002711C(0LL, *((void *)v13 + 2) + 1LL, 1, v13);
      unint64_t v13 = (char *)result;
    }

    unint64_t v40 = *((void *)v13 + 2);
    unint64_t v39 = *((void *)v13 + 3);
    unint64_t v14 = v40 + 1;
    uint64_t v12 = v110;
    if (v40 >= v39 >> 1)
    {
      uint64_t result = (uint64_t)sub_10002711C((char *)(v39 > 1), v40 + 1, 1, v13);
      uint64_t v12 = v110;
      unint64_t v13 = (char *)result;
    }

    *((void *)v13 + 2) = v14;
    __int128 v41 = v13 + 32;
    __int128 v42 = &v13[16 * v40 + 32];
    *(void *)__int128 v42 = v15;
    *((void *)v42 + 1) = v11;
    if (v40) {
      break;
    }
    unint64_t v14 = 1LL;
LABEL_15:
    uint64_t v6 = v108;
    Swift::Int v3 = v109;
    uint64_t result = 24LL;
    if (v11 >= v109)
    {
      Swift::Int v10 = v107;
LABEL_104:
      uint64_t result = (uint64_t)v13;
      char v107 = v10;
      if (v14 < 2) {
        goto LABEL_95;
      }
      uint64_t v99 = *v105;
      while (1)
      {
        unint64_t v100 = v14 - 2;
        if (v14 < 2) {
          break;
        }
        if (!v99) {
          goto LABEL_147;
        }
        uint64_t v89 = result;
        uint64_t v101 = *(void *)(result + 32 + 16 * v100);
        uint64_t v102 = *(void *)(result + 32 + 16 * (v14 - 1) + 8);
        uint64_t result = sub_10001B05C( (char *)(v99 + 24 * v101),  (char *)(v99 + 24LL * *(void *)(result + 32 + 16 * (v14 - 1))),  v99 + 24 * v102,  v111);
        if (v112) {
          goto LABEL_94;
        }
        if (v102 < v101) {
          goto LABEL_134;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v89);
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100027214(v89);
          uint64_t v89 = result;
        }

        if (v100 >= *(void *)(v89 + 16)) {
          goto LABEL_135;
        }
        char v103 = (void *)(v89 + 32 + 16 * v100);
        *char v103 = v101;
        v103[1] = v102;
        unint64_t v104 = *(void *)(v89 + 16);
        if (v14 > v104) {
          goto LABEL_136;
        }
        memmove((void *)(v89 + 32 + 16 * (v14 - 1)), (const void *)(v89 + 32 + 16 * v14), 16 * (v104 - v14));
        uint64_t result = v89;
        *(void *)(v89 + 16) = v104 - 1;
        unint64_t v14 = v104 - 1;
        if (v104 <= 2) {
          goto LABEL_95;
        }
      }

LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      return result;
    }
  }

  while (1)
  {
    unint64_t v43 = v14 - 1;
    if (v14 >= 4)
    {
      char v48 = &v41[2 * v14];
      uint64_t v49 = *(v48 - 8);
      uint64_t v50 = *(v48 - 7);
      BOOL v54 = __OFSUB__(v50, v49);
      uint64_t v51 = v50 - v49;
      if (v54) {
        goto LABEL_121;
      }
      uint64_t v53 = *(v48 - 6);
      uint64_t v52 = *(v48 - 5);
      BOOL v54 = __OFSUB__(v52, v53);
      uint64_t v46 = v52 - v53;
      char v47 = v54;
      if (v54) {
        goto LABEL_122;
      }
      unint64_t v55 = v14 - 2;
      __int128 v56 = &v41[2 * v14 - 4];
      uint64_t v58 = *v56;
      uint64_t v57 = v56[1];
      BOOL v54 = __OFSUB__(v57, v58);
      uint64_t v59 = v57 - v58;
      if (v54) {
        goto LABEL_123;
      }
      BOOL v54 = __OFADD__(v46, v59);
      uint64_t v60 = v46 + v59;
      if (v54) {
        goto LABEL_125;
      }
      if (v60 >= v51)
      {
        uint64_t v78 = &v41[2 * v43];
        uint64_t v80 = *v78;
        uint64_t v79 = v78[1];
        BOOL v54 = __OFSUB__(v79, v80);
        uint64_t v81 = v79 - v80;
        if (v54) {
          goto LABEL_131;
        }
        BOOL v71 = v46 < v81;
        goto LABEL_83;
      }
    }

    else
    {
      if (v14 != 3)
      {
        uint64_t v72 = *((void *)v13 + 4);
        uint64_t v73 = *((void *)v13 + 5);
        BOOL v54 = __OFSUB__(v73, v72);
        uint64_t v65 = v73 - v72;
        char v66 = v54;
        goto LABEL_77;
      }

      uint64_t v45 = *((void *)v13 + 4);
      uint64_t v44 = *((void *)v13 + 5);
      BOOL v54 = __OFSUB__(v44, v45);
      uint64_t v46 = v44 - v45;
      char v47 = v54;
    }

    if ((v47 & 1) != 0) {
      goto LABEL_124;
    }
    unint64_t v55 = v14 - 2;
    char v61 = &v41[2 * v14 - 4];
    uint64_t v63 = *v61;
    uint64_t v62 = v61[1];
    BOOL v64 = __OFSUB__(v62, v63);
    uint64_t v65 = v62 - v63;
    char v66 = v64;
    if (v64) {
      goto LABEL_126;
    }
    uint64_t v67 = &v41[2 * v43];
    uint64_t v69 = *v67;
    uint64_t v68 = v67[1];
    BOOL v54 = __OFSUB__(v68, v69);
    uint64_t v70 = v68 - v69;
    if (v54) {
      goto LABEL_128;
    }
    if (__OFADD__(v65, v70)) {
      goto LABEL_130;
    }
    if (v65 + v70 >= v46)
    {
      BOOL v71 = v46 < v70;
LABEL_83:
      if (v71) {
        unint64_t v43 = v55;
      }
      goto LABEL_85;
    }

      sub_100083CD8(v112, v140, v293, v284, v283, v294, v291, (uint64_t)v297, (uint64_t)v111, v295, 0xDu);
      __break(1u);
      JUMPOUT(0x100083A2CLL);
    }

    swift_bridgeObjectRelease(v306);
    sub_1000062D8(&v307);
    uint64_t v127 = v283;
    uint64_t v128 = v284;
  }

  else
  {
    swift_bridgeObjectRelease(v306);
  }

  swift_errorRelease(v302[0]);
  swift_getErrorValue(v287, &v301, v300);
  DynamicType = swift_getDynamicType(v300[0], v300[1], 1LL);
  v259 = sub_100083CF8();
  if (swift_dynamicCastMetatype(DynamicType, v259))
  {
    swift_getErrorValue(v287, &v299, v298);
    v260 = Error.localizedDescription.getter(v298[1], v298[2]);
  }

  else
  {
    v320 = v287;
    swift_errorRetain(v287);
    v260 = String.init<A>(describing:)(&v320, v281);
  }

  v285 = v260;
  v282 = v261;
  swift_errorRelease(v290);
  sub_100083CD8(v287, v296, v293, v128, v127, v294, v291, (uint64_t)v297, (uint64_t)v292, v295, 0xDu);
  uint64_t result = sub_100083CD8(v287, v296, v293, v128, v127, v294, v291, (uint64_t)v297, (uint64_t)v292, v295, 0xDu);
  v288 = 0LL;
  *(void *)&v289 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 2;
  Swift::Int v25 = 1LL;
  Swift::Int v11 = v285;
  a4 = v286;
  int v28 = v282;
LABEL_48:
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v28;
  v186 = v289;
  *(void *)(a4 + 16) = v25;
  *(void *)(a4 + 24) = v186;
  *(void *)(a4 + 32) = v288;
  *(void *)(a4 + 40) = v26;
  *(_BYTE *)(a4 + 48) = v27;
  return result;
}

uint64_t sub_10001ADA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 32 * a3;
LABEL_5:
    uint64_t v6 = *(void *)(v4 + 32 * a3 + 24);
    uint64_t v7 = result;
    uint64_t v8 = (void *)v5;
    while (1)
    {
      if (*(void *)(*(v8 - 1) + 16LL) >= *(void *)(v6 + 16))
      {
LABEL_4:
        ++a3;
        v5 += 32LL;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v4) {
        break;
      }
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      uint64_t v11 = v8[2];
      __int128 v12 = *((_OWORD *)v8 - 1);
      *(_OWORD *)uint64_t v8 = *((_OWORD *)v8 - 2);
      *((_OWORD *)v8 + 1) = v12;
      *(v8 - 3) = v10;
      *(v8 - 2) = v11;
      *(v8 - 1) = v6;
      *(v8 - 4) = v9;
      v8 -= 4;
      if (a3 == ++v7) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10001AE28(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 31;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 31;
  uint64_t v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != __src || &__src[32 * v13] <= a4) {
      memmove(a4, __src, 32 * v13);
    }
    unint64_t v14 = &v4[32 * v13];
    if (v7 >= v6 || v11 < 32) {
      goto LABEL_43;
    }
    unint64_t v19 = (char *)(a3 - 32);
    while (1)
    {
      unint64_t v20 = v19 + 32;
      if (*(void *)(*((void *)v6 - 1) + 16LL) >= *(void *)(*((void *)v14 - 1) + 16LL))
      {
        unint64_t v21 = v14 - 32;
        if (v20 != v14)
        {
          v14 -= 32;
          goto LABEL_40;
        }

        BOOL v22 = v19 >= v14;
        v14 -= 32;
        if (v22) {
          goto LABEL_40;
        }
      }

      else
      {
        unint64_t v21 = v6 - 32;
        if (v20 != v6)
        {
          v6 -= 32;
LABEL_40:
          __int128 v23 = *((_OWORD *)v21 + 1);
          *(_OWORD *)unint64_t v19 = *(_OWORD *)v21;
          *((_OWORD *)v19 + 1) = v23;
          goto LABEL_41;
        }

        BOOL v22 = v19 >= v6;
        v6 -= 32;
        if (v22) {
          goto LABEL_40;
        }
      }

LABEL_41:
      if (v6 > v7)
      {
        v19 -= 32;
        if (v14 > v4) {
          continue;
        }
      }

      goto LABEL_43;
    }
  }

  if (a4 != __dst || &__dst[32 * v10] <= a4) {
    memmove(a4, __dst, 32 * v10);
  }
  unint64_t v14 = &v4[32 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      if (*(void *)(*((void *)v4 + 3) + 16LL) >= *(void *)(*((void *)v6 + 3) + 16LL))
      {
        unint64_t v17 = v4 + 32;
        unint64_t v16 = v4;
        Swift::Int v15 = v6;
        if (v7 == v4)
        {
          v4 += 32;
          if (v7 < v17) {
            goto LABEL_20;
          }
        }

        else
        {
          v4 += 32;
        }
      }

      else
      {
        Swift::Int v15 = v6 + 32;
        unint64_t v16 = v6;
        if (v7 == v6 && v7 < v15) {
          goto LABEL_20;
        }
      }

      __int128 v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
      *((_OWORD *)v7 + 1) = v18;
LABEL_20:
      v7 += 32;
      if (v4 < v14)
      {
        uint64_t v6 = v15;
      }

      break;
    }
  }

  uint64_t v6 = v7;
LABEL_43:
  int64_t v24 = v14 - v4 + (v14 - v4 < 0 ? 0x1FuLL : 0);
  if (v6 != v4 || v6 >= &v4[v24 & 0xFFFFFFFFFFFFFFE0LL]) {
    memmove(v6, v4, 32 * (v24 >> 5));
  }
  return 1LL;
}

uint64_t sub_10001B05C(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 24;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[24 * v11] <= a4) {
      memmove(a4, __src, 24 * v11);
    }
    uint64_t v12 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_39;
    }
    unint64_t v17 = a3 - 24;
    while (1)
    {
      __int128 v18 = (char *)(v17 + 24);
      if (*((void *)v12 - 2) >= *((void *)v6 - 2))
      {
        unint64_t v19 = v12 - 24;
        if (v18 != v12)
        {
          v12 -= 24;
          goto LABEL_36;
        }

        BOOL v20 = v17 >= (unint64_t)v12;
        v12 -= 24;
        if (v20) {
          goto LABEL_36;
        }
      }

      else
      {
        unint64_t v19 = v6 - 24;
        if (v18 != v6)
        {
          v6 -= 24;
LABEL_36:
          __int128 v21 = *(_OWORD *)v19;
          *(void *)(v17 + 16) = *((void *)v19 + 2);
          *(_OWORD *)unint64_t v17 = v21;
          goto LABEL_37;
        }

        BOOL v20 = v17 >= (unint64_t)v6;
        v6 -= 24;
        if (v20) {
          goto LABEL_36;
        }
      }

uint64_t sub_10001B2B8(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a1[1];
  if (v8)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = (void *)*a3;
    if ((a2 & 1) != 0)
    {
      uint64_t v12 = (uint64_t *)(v11[7] + 16 * a4);
      *uint64_t v12 = v10;
      v12[1] = v8;
    }

    else
    {
      sub_1000258E0(a4, a5, a6, v10, v8, v11);
      swift_bridgeObjectRetain(a6);
    }
  }

  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(void *)(*a3 + 48) + 16 * a4, 1LL, &type metadata for String);
    sub_100025014(a4, *a3);
  }

  return swift_bridgeObjectRetain(v8);
}

char *sub_10001B358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v19 = swift_bridgeObjectRetain(a1);
  uint64_t v8 = (_DWORD *)(v19 + 48);
  int64_t v9 = (char *)_swiftEmptyArrayStorage;
  do
  {
    int v11 = *v8;
    uint64_t v12 = *((void *)v8 - 1);
    int v34 = *(v8 - 4);
    uint64_t v35 = v12;
    int v36 = v11;
    sub_100017C98(&v34, a2, a3, a4, a5, a6, (uint64_t *)v28);
    if (v6)
    {
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v19);
      return v9;
    }

    uint64_t v13 = v31;
    if (v31)
    {
      __int128 v25 = v28[1];
      __int128 v26 = v28[0];
      char v14 = v29;
      uint64_t v37 = v30;
      __int16 v15 = v32;
      __int128 v27 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
        int64_t v9 = sub_100012214(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
      }
      unint64_t v17 = *((void *)v9 + 2);
      unint64_t v16 = *((void *)v9 + 3);
      if (v17 >= v16 >> 1) {
        int64_t v9 = sub_100012214((char *)(v16 > 1), v17 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v17 + 1;
      uint64_t v10 = &v9[80 * v17];
      *((_OWORD *)v10 + 2) = v26;
      *((_OWORD *)v10 + 3) = v25;
      v10[64] = v14 & 1;
      *((void *)v10 + 9) = v37;
      *((void *)v10 + 10) = v13;
      v10[88] = v15 & 1;
      v10[89] = HIBYTE(v15) & 1;
      *((_OWORD *)v10 + 6) = v27;
    }

    v8 += 6;
    --v7;
  }

  while (v7);
  swift_bridgeObjectRelease(v19);
  return v9;
}

uint64_t sub_10001B504(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100027AC8(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

id sub_10001B598(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    id v6 = [objc_allocWithZone(NSFileManager) init];
    NSString v7 = String._bridgeToObjectiveC()();
    unsigned __int8 v8 = [v6 createFileAtPath:v7 contents:0 attributes:0];

    if ((v8 & 1) != 0)
    {
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a2);
      id v10 = [(id)objc_opt_self(NSFileHandle) fileHandleForWritingAtPath:v9];

      if (v10) {
        return v10;
      }
      __break(1u);
    }

    else
    {
      uint64_t v12 = sub_100005104(&qword_1000B8758);
      uint64_t v3 = swift_allocObject(v12, 64LL, 7LL);
      *(_OWORD *)(v3 + 16) = xmmword_100096510;
      _StringGuts.grow(_:)(24LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v15[0] = 0xD000000000000016LL;
      v15[1] = 0x800000010009C150LL;
      v13._char countAndFlagsBits = a1;
      v13._object = a2;
      String.append(_:)(v13);
      *(void *)(v3 + 56) = &type metadata for String;
      *(void *)(v3 + 32) = 0xD000000000000016LL;
      *(void *)(v3 + 40) = 0x800000010009C150LL;
      if (qword_1000B8660 == -1) {
        goto LABEL_7;
      }
    }

    swift_once(&qword_1000B8660, sub_1000134EC);
LABEL_7:
    swift_beginAccess(&qword_1000BA328, v15, 33LL, 0LL);
    unint64_t v14 = sub_10000B3C8();
    print<A>(_:separator:terminator:to:)( v3,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v14);
    swift_endAccess(v15);
    swift_bridgeObjectRelease(v3);
    exit(1);
  }

  return [(id)objc_opt_self(NSFileHandle) fileHandleWithStandardOutput];
}

uint64_t sub_10001B7B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 120);
  char v13 = *(_BYTE *)(a1 + 129);
  uint64_t v15 = *(void *)(a1 + 144);
  uint64_t v23 = *(void *)(a1 + 160);
  uint64_t v24 = *(void *)(a1 + 152);
  uint64_t v22 = *(void *)(a1 + 168);
  uint64_t v20 = *(void *)(a1 + 184);
  uint64_t v21 = *(void *)(a1 + 176);
  uint64_t v18 = *(void *)(a1 + 200);
  uint64_t v19 = *(void *)(a1 + 192);
  __int128 v14 = *(_OWORD *)(a1 + 216);
  uint64_t v12 = *(void *)(a1 + 232);
  char v8 = *(_BYTE *)(a1 + 240);
  char v9 = *(_BYTE *)(a1 + 241);
  uint64_t v16 = *(void *)(a1 + 256);
  uint64_t v17 = *(void *)(a1 + 208);
  char v10 = *(_BYTE *)(a1 + 128);
  sub_100003A6C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(_BYTE *)(a1 + 64),  *(_BYTE *)(a1 + 65));
  swift_bridgeObjectRetain(v2);
  sub_100003B10(v3, v4, v5, v6, v7, v10, v13);
  swift_bridgeObjectRetain(v15);
  sub_100015A78(v24, v23, v22, v21, v20, v19, v18, v17, v14, *((uint64_t *)&v14 + 1), v12, v8, v9);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_10001B8FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 120);
  char v13 = *(_BYTE *)(a1 + 129);
  uint64_t v15 = *(void *)(a1 + 144);
  uint64_t v23 = *(void *)(a1 + 160);
  uint64_t v24 = *(void *)(a1 + 152);
  uint64_t v22 = *(void *)(a1 + 168);
  uint64_t v20 = *(void *)(a1 + 184);
  uint64_t v21 = *(void *)(a1 + 176);
  uint64_t v18 = *(void *)(a1 + 200);
  uint64_t v19 = *(void *)(a1 + 192);
  __int128 v14 = *(_OWORD *)(a1 + 216);
  uint64_t v12 = *(void *)(a1 + 232);
  char v8 = *(_BYTE *)(a1 + 240);
  char v9 = *(_BYTE *)(a1 + 241);
  uint64_t v16 = *(void *)(a1 + 256);
  uint64_t v17 = *(void *)(a1 + 208);
  char v10 = *(_BYTE *)(a1 + 128);
  sub_100003BCC( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(_BYTE *)(a1 + 64),  *(_BYTE *)(a1 + 65));
  swift_bridgeObjectRelease(v2);
  sub_100003C70(v3, v4, v5, v6, v7, v10, v13);
  swift_bridgeObjectRelease(v15);
  sub_100015BDC(v24, v23, v22, v21, v20, v19, v18, v17, v14, *((uint64_t *)&v14 + 1), v12, v8, v9);
  swift_bridgeObjectRelease(v16);
  return a1;
}

unint64_t sub_10001BA44()
{
  unint64_t result = qword_1000B8CD8;
  if (!qword_1000B8CD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097828, &type metadata for ProcessMetadata);
    atomic_store(result, (unint64_t *)&qword_1000B8CD8);
  }

  return result;
}

unint64_t sub_10001BA88()
{
  unint64_t result = qword_1000B8CE8;
  if (!qword_1000B8CE8)
  {
    uint64_t v1 = sub_10000593C(&qword_1000B8CE0);
    sub_10001BAF4();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000B8CE8);
  }

  return result;
}

unint64_t sub_10001BAF4()
{
  unint64_t result = qword_1000B8CF0;
  if (!qword_1000B8CF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097800, &type metadata for MetadataSummary);
    atomic_store(result, (unint64_t *)&qword_1000B8CF0);
  }

  return result;
}

uint64_t sub_10001BB38(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_10001BB7C()
{
  unint64_t result = qword_1000B8D18;
  if (!qword_1000B8D18)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000B8D18);
  }

  return result;
}

unint64_t sub_10001BBC0()
{
  unint64_t result = qword_1000B8D20;
  if (!qword_1000B8D20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000977C0, &type metadata for Output);
    atomic_store(result, (unint64_t *)&qword_1000B8D20);
  }

  return result;
}

uint64_t sub_10001BC04()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10001BC28()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001BC4C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10001BC70()
{
  unint64_t result = qword_1000B8D30;
  if (!qword_1000B8D30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100096D1C, &type metadata for GenericMetadataOptions);
    atomic_store(result, (unint64_t *)&qword_1000B8D30);
  }

  return result;
}

unint64_t sub_10001BCB4(Swift::String string)
{
  object = string._object;
  v2._char countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000AD3A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10001BCFC(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 6580592 && a2 == 0xE300000000000000LL)
  {
    unint64_t v7 = 0xE300000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6580592LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x617461646174656DLL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_10001BE30(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7A69536C61746F74LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v5 = 0xE900000000000065LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7A69536C61746F74LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x65737365636F7270LL && a2 == 0xE900000000000073LL)
  {
    swift_bridgeObjectRelease(0xE900000000000073LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65737365636F7270LL, 0xE900000000000073LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10001BF30(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x800000010009BB00LL;
    if (a2 == 0x800000010009BB00LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010009BB00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x800000010009C230LL)
  {
    swift_bridgeObjectRelease(0x800000010009C230LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x800000010009C230LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void *sub_10001C078@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v78 = sub_100005104(&qword_1000B8D38);
  uint64_t v76 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v5 = (unsigned __int8 *)ArgumentVisibility.default.unsafeMutableAddressor();
  uint64_t v6 = *v5;
  unint64_t v7 = sub_1000059BC();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v6,  (uint64_t)&type metadata for UniversalOptions,  v7,  (uint64_t)&v137);
  uint64_t v110 = v137;
  uint64_t v111 = v138;
  uint64_t v112 = v139;
  uint64_t v113 = v140;
  uint64_t v114 = v141;
  uint64_t v115 = v142;
  uint64_t v116 = v143;
  uint64_t v117 = v144;
  int v176 = v145;
  int v109 = BYTE2(v145);
  int v107 = BYTE3(v145);
  uint64_t v108 = v146;
  uint64_t v118 = v147;
  LODWORD(v77) = BYTE1(v145);
  char v180 = BYTE1(v145);
  uint64_t v8 = *v5;
  unint64_t v9 = sub_100005A00();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v8,  (uint64_t)&type metadata for BacktraceOptions,  v9,  (uint64_t)&v137);
  uint64_t v97 = v137;
  uint64_t v98 = v138;
  uint64_t v99 = v139;
  uint64_t v100 = v140;
  uint64_t v101 = v141;
  int v102 = v142;
  int v10 = BYTE1(v142);
  int v106 = BYTE2(v142);
  int v104 = BYTE3(v142);
  uint64_t v105 = v143;
  uint64_t v103 = v144;
  char v179 = BYTE1(v142);
  uint64_t v11 = *v5;
  unint64_t v12 = sub_10001BC70();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v11,  (uint64_t)&type metadata for GenericMetadataOptions,  v12,  (uint64_t)&v137);
  uint64_t v89 = v137;
  uint64_t v90 = v138;
  uint64_t v91 = v139;
  uint64_t v92 = v140;
  uint64_t v93 = v141;
  uint64_t v94 = v142;
  uint64_t v95 = v143;
  uint64_t v96 = v144;
  uint64_t v87 = v146;
  uint64_t v88 = v145;
  uint64_t v86 = v147;
  int v85 = v148;
  int v13 = BYTE1(v148);
  LODWORD(v81) = BYTE2(v148);
  LODWORD(v80) = BYTE3(v148);
  uint64_t v79 = v149;
  uint64_t v82 = v150;
  unsigned __int8 v83 = a1;
  char v178 = BYTE1(v148);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100006270(a1, v14);
  unint64_t v16 = sub_10001CC8C();
  uint64_t v17 = v4;
  uint64_t v18 = v84;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DumpGenericMetadata.CodingKeys,  &type metadata for DumpGenericMetadata.CodingKeys,  v16,  v14,  v15);
  if (v18)
  {
    uint64_t v33 = v82;
    char v34 = v109;
    uint64_t v35 = v108;
    char v36 = v107;
    char v37 = v106;
    uint64_t v38 = v105;
    char v39 = v104;
    sub_1000062D8(v83);
    uint64_t v137 = v110;
    uint64_t v138 = v111;
    uint64_t v139 = v112;
    uint64_t v140 = v113;
    uint64_t v141 = v114;
    uint64_t v142 = v115;
    uint64_t v143 = v116;
    uint64_t v144 = v117;
    LOBYTE(v145) = v176;
    BYTE1(v145) = v180;
    BYTE2(v145) = v34;
    BYTE3(v145) = v36;
    uint64_t v146 = v35;
    uint64_t v147 = v118;
    uint64_t v148 = v97;
    uint64_t v149 = v98;
    uint64_t v150 = v99;
    uint64_t v151 = v100;
    uint64_t v152 = v101;
    char v153 = v102;
    char v154 = v179;
    char v155 = v37;
    char v156 = v39;
    uint64_t v157 = v38;
    uint64_t v158 = v103;
    uint64_t v159 = v89;
    uint64_t v160 = v90;
    uint64_t v161 = v91;
    uint64_t v162 = v92;
    uint64_t v163 = v93;
    uint64_t v164 = v94;
    uint64_t v165 = v95;
    uint64_t v166 = v96;
    uint64_t v167 = v88;
    uint64_t v168 = v87;
    uint64_t v169 = v86;
    char v170 = v85;
    char v171 = v178;
    char v172 = v81;
    char v173 = v80;
    uint64_t v174 = v79;
    uint64_t v175 = v33;
    return (void *)sub_10001B8FC((uint64_t)&v137);
  }

  else
  {
    char v19 = v77;
    LODWORD(v84) = v10;
    int v71 = v13;
    uint64_t v20 = sub_100005104(&qword_1000B8740);
    LOBYTE(v119[0]) = 0;
    uint64_t v21 = sub_1000062F8( (unint64_t *)&qword_1000B8798,  &qword_1000B8740,  (uint64_t)&protocol conformance descriptor for OptionGroup<A>);
    uint64_t v22 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v137, v20, v119, v78, v20, v21);
    int v23 = BYTE1(v145);
    int v109 = BYTE2(v145);
    int v107 = BYTE3(v145);
    uint64_t v108 = v146;
    uint64_t v24 = v147;
    int v25 = v145;
    uint64_t v72 = v137;
    uint64_t v73 = v138;
    uint64_t v74 = v139;
    uint64_t v70 = v140;
    uint64_t v67 = v142;
    uint64_t v68 = v141;
    uint64_t v26 = v143;
    uint64_t v66 = v144;
    sub_100003A6C(v137, v138, v139, v140, v141, v142, v143, v144, v145, SBYTE1(v145));
    uint64_t v69 = v24;
    swift_bridgeObjectRetain(v24);
    sub_100003BCC(v110, v111, v112, v113, v114, v115, v116, v117, v176, v19);
    swift_bridgeObjectRelease(v118);
    char v180 = v23;
    uint64_t v27 = sub_100005104(&qword_1000B8748);
    LOBYTE(v119[0]) = 1;
    uint64_t v28 = sub_1000062F8( &qword_1000B87A0,  &qword_1000B8748,  (uint64_t)&protocol conformance descriptor for OptionGroup<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v137, v27, v119, v78, v27, v28);
    LODWORD(v111) = v23;
    LODWORD(v113) = v25;
    uint64_t v110 = v26;
    uint64_t v29 = v72;
    LODWORD(v27) = BYTE1(v142);
    int v106 = BYTE2(v142);
    int v104 = BYTE3(v142);
    uint64_t v105 = v143;
    uint64_t v30 = v144;
    uint64_t v117 = v138;
    uint64_t v118 = v137;
    uint64_t v115 = v140;
    uint64_t v116 = v139;
    uint64_t v114 = v141;
    int v176 = v142;
    sub_100003B10(v137, v138, v139, v140, v141, v142, SBYTE1(v142));
    uint64_t v112 = v30;
    swift_bridgeObjectRetain(v30);
    sub_100003C70(v97, v98, v99, v100, v101, v102, v84);
    swift_bridgeObjectRelease(v103);
    char v179 = v27;
    uint64_t v31 = sub_100005104(&qword_1000B8CC0);
    char v177 = 2;
    uint64_t v32 = sub_1000062F8( &qword_1000B8D48,  &qword_1000B8CC0,  (uint64_t)&protocol conformance descriptor for OptionGroup<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v120, v31, &v177, v78, v31, v32);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v22, v78);
    uint64_t v63 = 0LL;
    uint64_t v78 = v122;
    uint64_t v76 = v121;
    uint64_t v77 = v123;
    uint64_t v40 = v124;
    uint64_t v41 = v125;
    uint64_t v103 = v126;
    uint64_t v42 = v127;
    uint64_t v80 = v128;
    uint64_t v81 = v129;
    uint64_t v84 = v130;
    LODWORD(v97) = v131;
    int v43 = v132;
    int v102 = v133;
    LODWORD(v101) = v134;
    uint64_t v100 = v135;
    uint64_t v44 = v136;
    uint64_t v79 = v136;
    uint64_t v45 = v120;
    uint64_t v98 = v127;
    uint64_t v99 = v120;
    uint64_t v64 = v125;
    uint64_t v65 = v124;
    sub_100015A78(v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132);
    swift_bridgeObjectRetain(v44);
    sub_100015BDC(v89, v90, v91, v92, v93, v94, v95, v96, v88, v87, v86, v85, v71);
    swift_bridgeObjectRelease(v82);
    char v46 = v43;
    int v62 = v43;
    char v178 = v43;
    v119[0] = v29;
    v119[1] = v73;
    v119[2] = v74;
    v119[3] = v70;
    v119[4] = v68;
    v119[5] = v67;
    v119[6] = v110;
    v119[7] = v66;
    LOBYTE(v119[8]) = v113;
    BYTE1(v119[8]) = v111;
    BYTE2(v119[8]) = v109;
    BYTE3(v119[8]) = v107;
    v119[9] = v108;
    v119[10] = v69;
    v119[11] = v118;
    v119[12] = v117;
    v119[13] = v116;
    v119[14] = v115;
    v119[15] = v114;
    LOBYTE(v119[16]) = v176;
    BYTE1(v119[16]) = v27;
    BYTE2(v119[16]) = v106;
    BYTE3(v119[16]) = v104;
    v119[17] = v105;
    v119[18] = v112;
    v119[19] = v45;
    uint64_t v47 = v76;
    v119[20] = v76;
    LOBYTE(v43) = v78;
    v119[21] = v78;
    LODWORD(v96) = v27;
    uint64_t v48 = v77;
    v119[22] = v77;
    v119[23] = v40;
    v119[24] = v41;
    v119[25] = v103;
    v119[26] = v42;
    LOBYTE(v44) = v80;
    uint64_t v49 = v81;
    v119[27] = v80;
    v119[28] = v81;
    uint64_t v50 = v84;
    v119[29] = v84;
    LOBYTE(v42) = v97;
    LOBYTE(v119[30]) = v97;
    BYTE1(v119[30]) = v46;
    BYTE2(v119[30]) = v102;
    BYTE3(v119[30]) = v101;
    v119[31] = v100;
    uint64_t v51 = v79;
    v119[32] = v79;
    sub_10001B7B4((uint64_t)v119);
    sub_100015BDC(v99, v47, v43, v48, v65, v64, v103, v98, v44, v49, v50, v42, v62);
    swift_bridgeObjectRelease(v51);
    sub_100003C70(v118, v117, v116, v115, v114, v176, v96);
    swift_bridgeObjectRelease(v112);
    uint64_t v53 = v72;
    uint64_t v52 = v73;
    uint64_t v54 = v74;
    uint64_t v55 = v70;
    uint64_t v57 = v67;
    uint64_t v56 = v68;
    uint64_t v58 = v110;
    uint64_t v59 = v66;
    sub_100003BCC(v72, v73, v74, v70, v68, v67, v110, v66, v113, v111);
    swift_bridgeObjectRelease(v69);
    sub_1000062D8(v83);
    uint64_t v137 = v53;
    uint64_t v138 = v52;
    uint64_t v139 = v54;
    uint64_t v140 = v55;
    uint64_t v141 = v56;
    uint64_t v142 = v57;
    uint64_t v143 = v58;
    uint64_t v144 = v59;
    LOBYTE(v145) = v113;
    BYTE1(v145) = v180;
    BYTE2(v145) = v109;
    BYTE3(v145) = v107;
    uint64_t v146 = v108;
    uint64_t v147 = v69;
    uint64_t v148 = v118;
    uint64_t v149 = v117;
    uint64_t v150 = v116;
    uint64_t v151 = v115;
    uint64_t v152 = v114;
    char v153 = v176;
    char v154 = v179;
    char v155 = v106;
    char v156 = v104;
    uint64_t v157 = v105;
    uint64_t v158 = v112;
    uint64_t v159 = v99;
    uint64_t v160 = v76;
    uint64_t v161 = v78;
    uint64_t v162 = v77;
    uint64_t v163 = v65;
    uint64_t v164 = v64;
    uint64_t v165 = v103;
    uint64_t v166 = v98;
    uint64_t v167 = v80;
    uint64_t v168 = v81;
    uint64_t v169 = v84;
    char v170 = v97;
    char v171 = v178;
    char v172 = v102;
    char v173 = v101;
    uint64_t v174 = v100;
    uint64_t v175 = v79;
    sub_10001B8FC((uint64_t)&v137);
    return memcpy(v75, v119, 0x108uLL);
  }

unint64_t sub_10001CC8C()
{
  unint64_t result = qword_1000B8D40;
  if (!qword_1000B8D40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097770, &type metadata for DumpGenericMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8D40);
  }

  return result;
}

ValueMetadata *type metadata accessor for DumpGenericMetadata.CodingKeys()
{
  return &type metadata for DumpGenericMetadata.CodingKeys;
}

uint64_t destroy for Metadata(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 72));
}

uint64_t initializeWithCopy for Metadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for Metadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for Metadata(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for Metadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  uint64_t v6 = *(void *)(a2 + 72);
  uint64_t v7 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Metadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Metadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Metadata()
{
  return &type metadata for Metadata;
}

ValueMetadata *type metadata accessor for Output()
{
  return &type metadata for Output;
}

ValueMetadata *type metadata accessor for MetadataSummary()
{
  return &type metadata for MetadataSummary;
}

uint64_t destroy for ProcessMetadata(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for ProcessMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for ProcessMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for ProcessMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProcessMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProcessMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ProcessMetadata()
{
  return &type metadata for ProcessMetadata;
}

unint64_t sub_10001D114()
{
  unint64_t result = qword_1000B8D50;
  if (!qword_1000B8D50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097748, &type metadata for DumpGenericMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8D50);
  }

  return result;
}

unint64_t sub_10001D15C()
{
  unint64_t result = qword_1000B8D58;
  if (!qword_1000B8D58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000976B8, &type metadata for DumpGenericMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8D58);
  }

  return result;
}

unint64_t sub_10001D1A4()
{
  unint64_t result = qword_1000B8D60;
  if (!qword_1000B8D60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000976E0, &type metadata for DumpGenericMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8D60);
  }

  return result;
}

unint64_t sub_10001D1E8()
{
  unint64_t result = qword_1000B8D70;
  if (!qword_1000B8D70)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097B50, &type metadata for ProcessMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8D70);
  }

  return result;
}

uint64_t sub_10001D22C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10000593C(a2);
    a3();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10001D290()
{
  unint64_t result = qword_1000B8D88;
  if (!qword_1000B8D88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097690, &type metadata for Metadata);
    atomic_store(result, (unint64_t *)&qword_1000B8D88);
  }

  return result;
}

unint64_t sub_10001D2D4()
{
  unint64_t result = qword_1000B8D98;
  if (!qword_1000B8D98)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097B00, &type metadata for MetadataSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8D98);
  }

  return result;
}

unint64_t sub_10001D318()
{
  unint64_t result = qword_1000B8DA8;
  if (!qword_1000B8DA8)
  {
    uint64_t v1 = sub_10000593C(&qword_1000B8DA0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B8DA8);
  }

  return result;
}

uint64_t sub_10001D374(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001BB38(result, a2);
  }
  return result;
}

unint64_t sub_10001D388()
{
  unint64_t result = qword_1000B8DB8;
  if (!qword_1000B8DB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097AB0, &type metadata for Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8DB8);
  }

  return result;
}

uint64_t sub_10001D3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B8DC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001D414(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ArgumentDefinition.ParsingStrategy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for Metadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10001D530 + 4 * byte_1000975B1[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10001D564 + 4 * byte_1000975AC[v4]))();
}

uint64_t sub_10001D564(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D56C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001D574LL);
  }
  return result;
}

uint64_t sub_10001D580(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001D588LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10001D58C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D594(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Metadata.CodingKeys()
{
  return &type metadata for Metadata.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for MetadataSummary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10001D5FC + 4 * byte_1000975BB[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001D630 + 4 * byte_1000975B6[v4]))();
}

uint64_t sub_10001D630(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001D640LL);
  }
  return result;
}

uint64_t sub_10001D64C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001D654LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10001D658(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D660(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetadataSummary.CodingKeys()
{
  return &type metadata for MetadataSummary.CodingKeys;
}

uint64_t _s13swift_inspect19DumpGenericMetadataV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10001D6C8 + 4 * byte_1000975C5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001D6FC + 4 * byte_1000975C0[v4]))();
}

uint64_t sub_10001D6FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D704(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001D70CLL);
  }
  return result;
}

uint64_t sub_10001D718(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001D720LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10001D724(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D72C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProcessMetadata.CodingKeys()
{
  return &type metadata for ProcessMetadata.CodingKeys;
}

unint64_t sub_10001D74C()
{
  unint64_t result = qword_1000B8DD0;
  if (!qword_1000B8DD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000978E0, &type metadata for ProcessMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8DD0);
  }

  return result;
}

unint64_t sub_10001D794()
{
  unint64_t result = qword_1000B8DD8;
  if (!qword_1000B8DD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097998, &type metadata for MetadataSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8DD8);
  }

  return result;
}

unint64_t sub_10001D7DC()
{
  unint64_t result = qword_1000B8DE0;
  if (!qword_1000B8DE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097A88, &type metadata for Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8DE0);
  }

  return result;
}

unint64_t sub_10001D824()
{
  unint64_t result = qword_1000B8DE8;
  if (!qword_1000B8DE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000979C0, &type metadata for Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8DE8);
  }

  return result;
}

unint64_t sub_10001D86C()
{
  unint64_t result = qword_1000B8DF0;
  if (!qword_1000B8DF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000979E8, &type metadata for Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8DF0);
  }

  return result;
}

unint64_t sub_10001D8B4()
{
  unint64_t result = qword_1000B8DF8;
  if (!qword_1000B8DF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097908, &type metadata for MetadataSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8DF8);
  }

  return result;
}

unint64_t sub_10001D8FC()
{
  unint64_t result = qword_1000B8E00;
  if (!qword_1000B8E00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097930, &type metadata for MetadataSummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8E00);
  }

  return result;
}

unint64_t sub_10001D944()
{
  unint64_t result = qword_1000B8E08;
  if (!qword_1000B8E08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097850, &type metadata for ProcessMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8E08);
  }

  return result;
}

unint64_t sub_10001D98C()
{
  unint64_t result = qword_1000B8E10;
  if (!qword_1000B8E10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097878, &type metadata for ProcessMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B8E10);
  }

  return result;
}

char *sub_10001D9D0(uint64_t a1)
{
  if (qword_1000B86F0 != -1) {
    swift_once(&qword_1000B86F0, sub_10001E260);
  }
  mach_error_t v2 = off_1000BA4A8(a1);
  if (!v2) {
    return (char *)(v2 == 0);
  }
  uint64_t v3 = sub_100005104(&qword_1000B8758);
  uint64_t v4 = swift_allocObject(v3, 64LL, 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_100096510;
  _StringGuts.grow(_:)(29LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  unint64_t v20 = 0xD00000000000001BLL;
  unint64_t v21 = 0x800000010009C4D0LL;
  unint64_t result = mach_error_string(v2);
  if (result)
  {
    uint64_t v6 = String.init(cString:)(result);
    int v8 = v7;
    LODWORD(v22._countAndFlagsBits) = v2;
    unint64_t v9 = sub_1000131F4();
    uint64_t v10 = String.init<A>(_:radix:uppercase:)(&v22, 16LL, 0LL, &type metadata for Int32, v9);
    unint64_t v12 = v11;
    v22._char countAndFlagsBits = v6;
    v22._object = v8;
    v13._char countAndFlagsBits = 2016421920LL;
    v13._object = (void *)0xE400000000000000LL;
    String.append(_:)(v13);
    v14._char countAndFlagsBits = v10;
    v14._object = v12;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v12);
    v15._char countAndFlagsBits = 41LL;
    v15._object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    unint64_t v17 = v20;
    unint64_t v18 = v21;
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 32) = v17;
    *(void *)(v4 + 40) = v18;
    if (qword_1000B8660 != -1) {
      swift_once(&qword_1000B8660, sub_1000134EC);
    }
    swift_beginAccess(&qword_1000BA328, &v20, 33LL, 0LL);
    unint64_t v19 = sub_10000B3C8();
    print<A>(_:separator:terminator:to:)( v4,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  &qword_1000BA328,  &type metadata for Std.File,  v19);
    swift_endAccess(&v20);
    swift_bridgeObjectRelease(v4);
    return (char *)(v2 == 0);
  }

  __break(1u);
  return result;
}

void *sub_10001DBE0(int a1)
{
  return sub_10001DC08(a1, "/System/Library/PrivateFrameworks/Symbolication.framework/Symbolication", &qword_1000B8E18);
}

void *sub_10001DBF4(int a1)
{
  return sub_10001DC08( a1,  "/System/Library/PrivateFrameworks/CoreSymbolication.framework/CoreSymbolication",  &qword_1000B8E20);
}

void *sub_10001DC08(int a1, char *__path, void *a3)
{
  unint64_t result = dlopen(__path, 1);
  if (result) {
    *a3 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001DC3C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = String.utf8CString.getter(a2, a3);
  BOOL v7 = dlsym(a1, (const char *)(v6 + 32));
  swift_release(v6);
  if (v7) {
    return (uint64_t)v7;
  }
  _StringGuts.grow(_:)(37LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v9._char countAndFlagsBits = a2;
  v9._object = a3;
  String.append(_:)(v9);
  v10._object = (void *)0x800000010009C2A0LL;
  v10._char countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v10);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000012LL,  0x800000010009C280LL,  "swift_inspect/Symbolication+Extensions.swift",  44LL,  2LL,  28LL,  0);
  __break(1u);
  return result;
}

void *sub_10001DD44()
{
  if (qword_1000B8678 != -1) {
    swift_once(&qword_1000B8678, sub_10001DBE0);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E18, 0x486D6F7246646970LL, (void *)0xEB00000000746E69LL);
  off_1000BA440 = result;
  return result;
}

void *sub_10001DDAC()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0x7361656C65525343LL, (void *)0xE900000000000065LL);
  off_1000BA448 = result;
  return result;
}

void *sub_10001DE10()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0xD00000000000001CLL, (void *)0x800000010009C540LL);
  off_1000BA450 = result;
  return result;
}

void *sub_10001DE74()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0xD00000000000002ALL, (void *)0x800000010009C510LL);
  off_1000BA458 = result;
  return result;
}

void *sub_10001DED8()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0xD000000000000025LL, (void *)0x800000010009C480LL);
  off_1000BA460 = result;
  return result;
}

void *sub_10001DF3C()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0x6C6F626D79535343LL, (void *)0xEF656D614E746547LL);
  off_1000BA468 = result;
  return result;
}

void *sub_10001DFA8()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0xD000000000000016LL, (void *)0x800000010009C380LL);
  off_1000BA470 = result;
  return result;
}

void *sub_10001E00C()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0xD000000000000010LL, (void *)0x800000010009C460LL);
  off_1000BA478 = result;
  return result;
}

void *sub_10001E070()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0xD000000000000014LL, (void *)0x800000010009C360LL);
  off_1000BA480 = result;
  return result;
}

void *sub_10001E0D4()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0xD000000000000028LL, (void *)0x800000010009C3A0LL);
  off_1000BA488 = result;
  return result;
}

void *sub_10001E138()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0xD000000000000026LL, (void *)0x800000010009C410LL);
  off_1000BA490 = result;
  return result;
}

void *sub_10001E19C()
{
  if (qword_1000B8678 != -1) {
    swift_once(&qword_1000B8678, sub_10001DBE0);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E18, 0xD00000000000001BLL, (void *)0x800000010009C440LL);
  off_1000BA498 = result;
  return result;
}

void *sub_10001E200()
{
  if (qword_1000B8680 != -1) {
    swift_once(&qword_1000B8680, sub_10001DBF4);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E20, 0x6C6C754E73495343LL, (void *)0xE800000000000000LL);
  off_1000BA4A0 = result;
  return result;
}

void *sub_10001E260()
{
  if (qword_1000B8678 != -1) {
    swift_once(&qword_1000B8678, sub_10001DBE0);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E18, 0xD000000000000012LL, (void *)0x800000010009C4F0LL);
  off_1000BA4A8 = result;
  return result;
}

void *sub_10001E2C4()
{
  if (qword_1000B8678 != -1) {
    swift_once(&qword_1000B8678, sub_10001DBE0);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E18, 0x6565705F6B736174LL, (void *)0xE90000000000006BLL);
  off_1000BA4B0 = result;
  return result;
}

void *sub_10001E328()
{
  if (qword_1000B8678 != -1) {
    swift_once(&qword_1000B8678, sub_10001DBE0);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E18, 0xD000000000000010LL, (void *)0x800000010009C4B0LL);
  off_1000BA4B8 = result;
  return result;
}

void *sub_10001E38C()
{
  if (qword_1000B8678 != -1) {
    swift_once(&qword_1000B8678, sub_10001DBE0);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E18, 0xD000000000000011LL, (void *)0x800000010009C3F0LL);
  off_1000BA4C0 = result;
  return result;
}

void *sub_10001E3F0()
{
  if (qword_1000B8678 != -1) {
    swift_once(&qword_1000B8678, sub_10001DBE0);
  }
  uint64_t result = (void *)sub_10001DC3C((void *)qword_1000B8E18, 0xD00000000000001CLL, (void *)0x800000010009C3D0LL);
  off_1000BA4C8 = result;
  return result;
}

uint64_t sub_10001E454(void *a1, void *a2, uint64_t (*a3)(void, void))
{
  return a3(*a1, *a2);
}

uint64_t sub_10001E47C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4 = v2[1];
  unint64_t v5 = *(void *)(*v2 + 16LL);
  if (v4 == v5)
  {
    sub_10002AA94((uint64_t)&v19);
    return sub_10002AACC((uint64_t)&v19, a2, &qword_1000B9020);
  }

  if (v4 >= v5)
  {
    __break(1u);
    goto LABEL_8;
  }

  BOOL v7 = (_OWORD *)(*v2 + (v4 << 7));
  __int128 v8 = v7[2];
  __int128 v9 = v7[3];
  __int128 v10 = v7[5];
  __int128 v21 = v7[4];
  __int128 v22 = v10;
  __int128 v19 = v8;
  __int128 v20 = v9;
  __int128 v11 = v7[6];
  __int128 v12 = v7[7];
  __int128 v13 = v7[8];
  *(_OWORD *)&_OWORD v25[9] = *(_OWORD *)((char *)v7 + 137);
  __int128 v24 = v12;
  *(_OWORD *)int v25 = v13;
  __int128 v23 = v11;
  v2[1] = v4 + 1;
  uint64_t v14 = v2[2];
  if (__OFADD__(v14, 1LL))
  {
LABEL_8:
    __break(1u);
    return result;
  }

  __int128 v15 = v24;
  *(_OWORD *)(a2 + 72) = v23;
  *(_OWORD *)(a2 + 88) = v15;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v25;
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v25[9];
  __int128 v16 = v20;
  *(_OWORD *)(a2 + 8) = v19;
  *(_OWORD *)(a2 + 24) = v16;
  __int128 v17 = v22;
  *(_OWORD *)(a2 + 40) = v21;
  v2[2] = v14 + 1;
  *(void *)a2 = v14;
  *(_OWORD *)(a2 + 56) = v17;
  uint64_t v18 = a2;
  String.init(argument:)(*(Swift::String *)(&a1 - 1));
  return sub_10002AA60((uint64_t)&v19);
}

uint64_t sub_10001E568(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

int8x16_t sub_10001E588(int8x16_t *a1, int8x16_t result)
{
  int64_t v3 = a1[1].i64[0];
  if (v3)
  {
    sub_1000272A0(0LL, v3, 0);
    unint64_t v4 = _swiftEmptyArrayStorage;
    unint64_t v5 = a1 + 2;
    do
    {
      int8x16_t v6 = *v5;
      __int128 v10 = v4;
      unint64_t v8 = v4[2];
      unint64_t v7 = v4[3];
      if (v8 >= v7 >> 1)
      {
        int8x16_t v9 = *v5;
        sub_1000272A0((char *)(v7 > 1), v8 + 1, 1);
        int8x16_t v6 = v9;
        unint64_t v4 = v10;
      }

      _OWORD v4[2] = v8 + 1;
      uint64_t result = vextq_s8(v6, v6, 8uLL);
      *(int8x16_t *)&v4[2 * v8 + 4] = result;
      ++v5;
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t sub_10001E654(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

void (*sub_10001E684(void *a1, uint64_t a2))(void *a1)
{
  unint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  _OWORD v4[4] = sub_100027A10(v4, a2);
  return sub_10001E6D0;
}

void sub_10001E6D0(void *a1)
{
  __int16 v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32LL))(*a1, 0LL);
  free(v1);
}

double sub_10001E700()
{
  xmmword_1000BA530 = v7;
  unk_1000BA540 = v8;
  qword_1000BA550 = v9;
  xmmword_1000BA4F0 = v3;
  unk_1000BA500 = v4;
  xmmword_1000BA510 = v5;
  unk_1000BA520 = v6;
  double result = *(double *)&v2;
  xmmword_1000BA4D0 = v1;
  unk_1000BA4E0 = v2;
  return result;
}

uint64_t sub_10001E7B0(uint64_t a1)
{
  unint64_t v2 = sub_10002B20C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001E7D8(uint64_t a1)
{
  unint64_t v2 = sub_10002B20C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001E800@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000B8718 != -1) {
    swift_once(&qword_1000B8718, sub_10001E700);
  }
  return sub_100005980((uint64_t)&xmmword_1000BA4D0, a1);
}

uint64_t sub_10001E850()
{
  uint64_t v0 = sub_100005104(&qword_1000B8740);
  OptionGroup.wrappedValue.getter(v0, v1, v2, (uint64_t)&v12);
  uint64_t v3 = v12;
  uint64_t v4 = v13;
  char v5 = v14;
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  int v21 = v20;
  sub_10000BFD8(v12, v13, v14, v15, v16, v17);
  sub_100003C50(v3, v4, v5);
  sub_100003C60(v6, v7, v8);
  return sub_100003C60(v9, v10, v21);
}

double sub_10001E958@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }

  return result;
}

void *sub_10001E9B0(uint64_t a1)
{
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  if (v2)
  {
    __int128 v5 = (void *)v1[8];
  }

  else
  {
    unsigned __int8 v20 = _swiftEmptyArrayStorage;
    int v21 = _swiftEmptyArrayStorage;
    __int128 v22 = _swiftEmptyArrayStorage;
    uint64_t v6 = v1[3];
    __chkstk_darwin(a1);
    v18[2] = v1;
    v18[3] = &v20;
    uint64_t v7 = swift_allocObject(&unk_1000AF830, 32LL, 7LL);
    *(void *)(v7 + 16) = sub_10002AC5C;
    *(void *)(v7 + 24) = v18;
    uint64_t v8 = swift_allocObject(&unk_1000AF858, 32LL, 7LL);
    *(void *)(v8 + 16) = sub_1000132C4;
    *(void *)(v8 + 24) = v7;
    v19[0] = sub_10002AC98;
    v19[1] = v8;
    uint64_t v9 = *(unsigned int *)(v6 + 16);
    uint64_t v10 = qword_1000B8710;
    swift_retain(v7);
    if (v10 != -1) {
      swift_once(&qword_1000B8710, sub_10001E3F0);
    }
    off_1000BA4C8(v9, v19, 1LL, sub_100011698);
    swift_release(v8);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 139LL, 190LL, 5LL, 0LL);
    swift_release(v7);
    if ((isEscapingClosureAtFileLocation & 1) != 0) {
      __break(1u);
    }
    __int128 v5 = v20;
    unint64_t v12 = v21;
    unint64_t v13 = v22;
    uint64_t v14 = v1[8];
    uint64_t v15 = v1[9];
    uint64_t v16 = v1[10];
    v1[8] = v20;
    void v1[9] = v12;
    v1[10] = v13;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    sub_10002ACC0(v14, v15, v16);
  }

  sub_10002ACF8(v2, v3, v4);
  return v5;
}

void *sub_10001EBB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 88);
  if (!v2)
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v4 = sub_100010B7C();
    __int128 v5 = v4;
    uint64_t v6 = *((void *)v4 + 2);
    if (v6)
    {
      uint64_t v26 = v1;
      swift_retain(v3);
      int v25 = v5;
      uint64_t v7 = (unint64_t *)(v5 + 40);
      uint64_t v8 = (char *)_swiftEmptyArrayStorage;
      do
      {
        unint64_t v10 = *v7;
        if (*v7)
        {
          unint64_t v11 = v10 + 824;
          if (v10 >= 0xFFFFFFFFFFFFFCC8LL) {
            __break(1u);
          }
          uint64_t v12 = *(v7 - 1);
          uint64_t v13 = *(unsigned int *)(v3 + 16);
          uint64_t v28 = 0LL;
          if (qword_1000B86F8 != -1) {
            swift_once(&qword_1000B86F8, sub_10001E2C4);
          }
          if (!off_1000BA4B0(v13, v11, 8LL, &v28) && v28)
          {
            uint64_t v14 = *v28;
            if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
              uint64_t v8 = sub_10001201C(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
            }
            unint64_t v16 = *((void *)v8 + 2);
            unint64_t v15 = *((void *)v8 + 3);
            if (v16 >= v15 >> 1) {
              uint64_t v8 = sub_10001201C((char *)(v15 > 1), v16 + 1, 1, v8);
            }
            *((void *)v8 + 2) = v16 + 1;
            uint64_t v9 = &v8[16 * v16];
            *((void *)v9 + 4) = v12;
            *((void *)v9 + 5) = v14;
          }
        }

        v7 += 3;
        --v6;
      }

      while (v6);
      swift_bridgeObjectRelease(v25);
      swift_release(v3);
      uint64_t v1 = v26;
      uint64_t v17 = *((void *)v8 + 2);
      if (v17) {
        goto LABEL_18;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v4);
      uint64_t v8 = (char *)_swiftEmptyArrayStorage;
      uint64_t v17 = _swiftEmptyArrayStorage[2];
      if (v17)
      {
LABEL_18:
        uint64_t v18 = v8 + 32;
        uint64_t v2 = _swiftEmptyArrayStorage;
        do
        {
          if (*((void *)v18 + 1))
          {
            __int128 v27 = *(_OWORD *)v18;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
            uint64_t v28 = v2;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100027244(0LL, v2[2] + 1LL, 1);
              uint64_t v2 = v28;
            }

            unint64_t v20 = v2[2];
            unint64_t v19 = v2[3];
            __int128 v21 = v27;
            if (v20 >= v19 >> 1)
            {
              sub_100027244((char *)(v19 > 1), v20 + 1, 1);
              __int128 v21 = v27;
              uint64_t v2 = v28;
            }

            v2[2] = v20 + 1;
            *(_OWORD *)&v2[2 * v20 + 4] = v21;
          }

          v18 += 16;
          --v17;
        }

        while (v17);
        goto LABEL_28;
      }
    }

    uint64_t v2 = _swiftEmptyArrayStorage;
LABEL_28:
    swift_bridgeObjectRelease(v8);
    uint64_t v23 = *(void *)(v1 + 88);
    *(void *)(v1 + 88) = v2;
    swift_retain(v2);
    swift_bridgeObjectRelease(v23);
    return v2;
  }

  swift_bridgeObjectRetain(v2);
  return v2;
}

uint64_t sub_10001EE58()
{
  uint64_t v1 = *(void *)(v0 + 96);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 96);
  }

  else
  {
    uint64_t v2 = sub_10001F268();
    uint64_t v3 = *(void *)(v0 + 96);
    *(void *)(v0 + 96) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v3);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_10001EEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v3 + 96) = 0LL;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(void *)(v3 + 104) = sub_100029728((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v3 + 112) = sub_1000297FC(_swiftEmptyArrayStorage);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  swift_retain(a2);
  uint64_t v6 = sub_100010C48(0xD000000000000024LL, 0x800000010009CA10LL);
  uint64_t v7 = *(unsigned int *)(a2 + 16);
  unint64_t v16 = 0LL;
  if (qword_1000B86F8 != -1) {
    swift_once(&qword_1000B86F8, sub_10001E2C4);
  }
  uint64_t v8 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, void **))off_1000BA4B0;
  if (off_1000BA4B0(v7, v6, 8LL, &v16))
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v9 = v16;
    if (v16)
    {
      char v10 = 0;
      uint64_t v9 = (void *)*v16;
      goto LABEL_8;
    }
  }

  char v10 = 1;
LABEL_8:
  *(void *)(v3 + 32) = v9;
  *(_BYTE *)(v3 + 40) = v10;
  uint64_t v11 = sub_100010C48(0xD00000000000002ALL, 0x800000010009CA40LL);
  uint64_t v12 = *(unsigned int *)(a2 + 16);
  unint64_t v16 = 0LL;
  if (v8(v12, v11, 8LL, &v16) || !v16)
  {
    swift_release(a2);
    uint64_t v13 = 0LL;
    char v14 = 1;
  }

  else
  {
    uint64_t v13 = *v16;
    swift_release(a2);
    char v14 = 0;
  }

  *(void *)(v3 + 48) = v13;
  *(_BYTE *)(v3 + 56) = v14;
  return v3;
}

uint64_t sub_10001F058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = swift_reflection_metadataForObject(*(void *)(a3 + 16), a1);
  if ((*(_BYTE *)(a3 + 40) & 1) != 0 || v7 != *(void *)(a3 + 32))
  {
    if ((*(_BYTE *)(a3 + 56) & 1) != 0 || v7 != *(void *)(a3 + 48))
    {
      uint64_t result = sub_10001FBA8(v7);
      if ((result & 1) != 0)
      {
        uint64_t v17 = a4[2];
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v17);
        a4[2] = v17;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_10001289C(0LL, *(void *)(v17 + 16) + 1LL, 1, (char *)v17);
          uint64_t v17 = result;
          a4[2] = result;
        }

        unint64_t v18 = *(void *)(v17 + 16);
        unint64_t v19 = *(void *)(v17 + 24);
        unint64_t v20 = v18 + 1;
        if (v18 >= v19 >> 1)
        {
          unint64_t v27 = v18 + 1;
          __int128 v21 = (char *)v17;
          unint64_t v22 = *(void *)(v17 + 16);
          uint64_t result = (uint64_t)sub_10001289C((char *)(v19 > 1), v18 + 1, 1, v21);
          unint64_t v18 = v22;
          unint64_t v20 = v27;
          uint64_t v17 = result;
        }

        *(void *)(v17 + 16) = v20;
        *(void *)(v17 + 8 * v18 + 32) = a1;
        a4[2] = v17;
      }
    }

    else
    {
      uint64_t v13 = *a4;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a4);
      *a4 = v13;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10001289C(0LL, *(void *)(v13 + 16) + 1LL, 1, (char *)v13);
        uint64_t v13 = result;
        *a4 = result;
      }

      unint64_t v14 = *(void *)(v13 + 16);
      unint64_t v15 = *(void *)(v13 + 24);
      unint64_t v16 = v14 + 1;
      if (v14 >= v15 >> 1)
      {
        unint64_t v29 = v14 + 1;
        int v25 = (char *)v13;
        unint64_t v26 = *(void *)(v13 + 16);
        uint64_t result = (uint64_t)sub_10001289C((char *)(v15 > 1), v14 + 1, 1, v25);
        unint64_t v14 = v26;
        unint64_t v16 = v29;
        uint64_t v13 = result;
      }

      *(void *)(v13 + 16) = v16;
      *(void *)(v13 + 8 * v14 + 32) = a1;
      *a4 = v13;
    }
  }

  else
  {
    uint64_t v8 = a4[1];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v8);
    a4[1] = v8;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10001289C(0LL, *(void *)(v8 + 16) + 1LL, 1, (char *)v8);
      uint64_t v8 = result;
      a4[1] = result;
    }

    unint64_t v10 = *(void *)(v8 + 16);
    unint64_t v11 = *(void *)(v8 + 24);
    unint64_t v12 = v10 + 1;
    if (v10 >= v11 >> 1)
    {
      unint64_t v28 = v10 + 1;
      uint64_t v23 = (char *)v8;
      unint64_t v24 = *(void *)(v8 + 16);
      uint64_t result = (uint64_t)sub_10001289C((char *)(v11 > 1), v10 + 1, 1, v23);
      unint64_t v10 = v24;
      unint64_t v12 = v28;
      uint64_t v8 = result;
    }

    *(void *)(v8 + 16) = v12;
    *(void *)(v8 + 8 * v10 + 32) = a1;
    a4[1] = v8;
  }

  return result;
}

uint64_t sub_10001F268()
{
  unint64_t v112 = sub_100029908((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v111 = &_swiftEmptySetSingleton;
  uint64_t v97 = v0;
  uint64_t v1 = sub_10001E9B0(v112);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  uint64_t v5 = v1[2];
  if (v5)
  {
    uint64_t v6 = v1 + 4;
    do
    {
      uint64_t v7 = *v6++;
      sub_100027C74((uint64_t *)&v118, v7);
      --v5;
    }

    while (v5);
  }

  swift_bridgeObjectRelease(v1);
  uint64_t v8 = sub_10001EBB8();
  uint64_t v9 = v8;
  int64_t v10 = v8[2];
  if (v10)
  {
    *(void *)&__int128 v118 = _swiftEmptyArrayStorage;
    sub_100027268(0LL, v10, 0);
    unint64_t v11 = (void *)v118;
    unint64_t v12 = *(void *)(v118 + 16);
    uint64_t v13 = 5LL;
    do
    {
      uint64_t v14 = v9[v13];
      *(void *)&__int128 v118 = v11;
      unint64_t v15 = v11[3];
      if (v12 >= v15 >> 1)
      {
        sub_100027268((char *)(v15 > 1), v12 + 1, 1);
        unint64_t v11 = (void *)v118;
      }

      v11[2] = v12 + 1;
      v11[v12 + 4] = v14;
      v13 += 2LL;
      ++v12;
      --v10;
    }

    while (v10);
    swift_bridgeObjectRelease(v9);
    uint64_t v16 = v11[2];
    if (v16) {
      goto LABEL_10;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v8);
    unint64_t v11 = _swiftEmptyArrayStorage;
    uint64_t v16 = _swiftEmptyArrayStorage[2];
    if (v16)
    {
LABEL_10:
      uint64_t v17 = v11 + 4;
      unint64_t v18 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v22 = *v17++;
        uint64_t v21 = v22;
        if (v22)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
          *(void *)&__int128 v118 = v18;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100027268(0LL, v18[2] + 1LL, 1);
            unint64_t v18 = (void *)v118;
          }

          unint64_t v20 = v18[2];
          unint64_t v19 = v18[3];
          if (v20 >= v19 >> 1)
          {
            sub_100027268((char *)(v19 > 1), v20 + 1, 1);
            unint64_t v18 = (void *)v118;
          }

          v18[2] = v20 + 1;
          v18[v20 + 4] = v21;
        }

        --v16;
      }

      while (v16);
      goto LABEL_20;
    }
  }

  unint64_t v18 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease(v11);
  uint64_t v24 = v18[2];
  if (v24)
  {
    int v25 = v18 + 4;
    do
    {
      uint64_t v26 = *v25++;
      sub_100027C74((uint64_t *)&v118, v26);
      --v24;
    }

    while (v24);
  }

  swift_release(v18);
  unint64_t v27 = v111;
  if (v111[2])
  {
    while (1)
    {
      unint64_t v28 = v27[7];
      if (v28) {
        break;
      }
      uint64_t v74 = *((unsigned __int8 *)v27 + 32);
      unsigned int v75 = v74 & 0x3F;
      unint64_t v30 = 1LL << v74;
      if (v75 < 7) {
        goto LABEL_30;
      }
      unint64_t v28 = v27[8];
      if (v28)
      {
        uint64_t v29 = 1LL;
        goto LABEL_29;
      }

      if (v75 < 8) {
        goto LABEL_30;
      }
      unint64_t v28 = v27[9];
      if (v28)
      {
        uint64_t v29 = 2LL;
        goto LABEL_29;
      }

      unint64_t v28 = v27[10];
      if (v28)
      {
        uint64_t v29 = 3LL;
        goto LABEL_29;
      }

      uint64_t v76 = 0LL;
      unint64_t v77 = (v30 + 63) >> 6;
      if (v77 <= 4) {
        unint64_t v77 = 4LL;
      }
      unint64_t v78 = v77 - 4;
      while (v78 != v76)
      {
        unint64_t v28 = v27[v76++ + 11];
        if (v28)
        {
          uint64_t v29 = v76 + 3;
          goto LABEL_29;
        }
      }

LABEL_40:
            if (++v47 == v105)
            {
              sub_10002ABC8(&v117);
              unint64_t v27 = v111;
              goto LABEL_26;
            }
          }
        }

        sub_10002ABC8(&v117);
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

            swift_bridgeObjectRelease_n(v4, 2LL);
            swift_bridgeObjectRelease(v22);
LABEL_41:
            uint64_t v34 = sub_10002EA1C();
            uint64_t v35 = swift_allocError(&type metadata for ParserError, v34, 0LL, 0LL);
            *(void *)unint64_t v36 = 3LL;
            *(_OWORD *)(v36 + 8) = 0u;
            *(_OWORD *)(v36 + 24) = 0u;
            *(_OWORD *)(v36 + 40) = 0u;
            *(_OWORD *)(v36 + 56) = 0u;
            *(void *)(v36 + 72) = 0LL;
            *(_BYTE *)(v36 + 80) = 15;
            swift_willThrow(v35);
            swift_unknownObjectRelease(v87);
            unint64_t v19 = (uint64_t)v88;
            return swift_release(v19);
          }

          if (v89 == v6) {
            goto LABEL_8;
          }
          uint64_t v3 = v87;
          if (v89 >= v6) {
            goto LABEL_77;
          }
          uint64_t v37 = (uint64_t *)(v12 + 16 * v89);
          unint64_t v12 = *v37;
          uint64_t v5 = v37[1];
          v20 += 2LL;
          uint64_t v38 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
          swift_unknownObjectRetain_n(v87, 3LL);
          swift_bridgeObjectRetain(v5);
          uint64_t v39 = (void *)swift_dynamicCastClass(v87, v38);
          uint64_t v4 = v2;
          if (!v39)
          {
            swift_unknownObjectRelease(v87);
            uint64_t v39 = _swiftEmptyArrayStorage;
          }

          uint64_t v40 = v39[2];
          swift_release(v39);
          uint64_t v14 = v85;
          if (v40 == v85 - v20)
          {
            uint64_t v41 = (void *)swift_dynamicCastClass(v87, v38);
            if (!v41)
            {
              swift_unknownObjectRelease(v87);
              uint64_t v41 = _swiftEmptyArrayStorage;
            }

            goto LABEL_51;
          }
        }

        break;
      }

      uint64_t v82 = (2 * v14) | 1;
      swift_unknownObjectRelease(v3);
      sub_10004FA6C(v3, v84, v20, v82);
      uint64_t v41 = v83;
LABEL_51:
      swift_unknownObjectRelease(v3);
      uint64x2_t v42 = sub_10004D160(a2[2], *(void *)(a2[3] + 8), 2, 0LL, 0LL, 0LL);
      unint64_t v44 = v43;
      char v45 = sub_100072C84(v12, v5, 0LL);
      unint64_t v12 = v4;
      if (v4)
      {
LABEL_78:
        swift_bridgeObjectRelease(v5);
        uint64_t result = swift_unexpectedError(v12, "ArgumentParser/CommandParser.swift", 34LL, 1LL, 331LL);
        __break(1u);
        return result;
      }

      unint64_t v46 = (void *)v45;
      char v121 = v44;
      swift_bridgeObjectRelease(v5);
      if (v46[2])
      {
        uint64_t v3 = v46[4];
        uint64_t v5 = v46[5];
        uint64_t v4 = v46[6];
        unint64_t v15 = v46[7];
        int v25 = v46[8];
        sub_10005BDF8(v3, v5, v4, v15, v25);
        swift_bridgeObjectRelease(v46);
        unint64_t v47 = (v4 >> 61) & 3;
        if (!(_DWORD)v47)
        {
          v118[0] = v3;
          v118[1] = v5;
          v118[2] = v4;
          v118[3] = v15;
          v118[4] = v25;
          uint64_t v51 = v121;
          sub_1000621A8((uint64_t)v118, v42, v121, (uint64_t)v97);
          swift_bridgeObjectRelease(v51);
          swift_bridgeObjectRelease(v42);
          sub_100066ED8(v3, v5, v4, v15, v25);
          sub_10002AACC((uint64_t)v97, (uint64_t)v98, &qword_1000B9148);
          char v52 = v87;
          uint64_t v53 = v88;
          if (sub_100033CB4((uint64_t)v98) != 1)
          {
            uint64_t v111 = v99;
            unint64_t v112 = v100;
            uint64_t v113 = v101;
            char v114 = v102;
            uint64_t v107 = v98[4];
            uint64_t v108 = v98[5];
            unint64_t v109 = v98[6];
            unint64_t v110 = v98[7];
            uint64_t v103 = v98[0];
            uint64_t v104 = v98[1];
            uint64_t v105 = v98[2];
            uint64_t v106 = v98[3];
            uint64_t v115 = v99;
            uint64_t v116 = v100;
            sub_10002D9E8(&v115, &v117);
            sub_10006BA80((uint64_t)&v115);
            sub_100033CCC((uint64_t)v97);
            sub_10002D9E8(&v117, &v119);
            if (v120 == 3)
            {
              uint64_t v54 = v119.n128_i64[1];
              Swift::String v55 = ((uint64_t (*)(void *))v119.n128_u64[0])(v41);
LABEL_70:
              uint64_t v70 = v55;
              swift_release(v41);
              v92[0] = v70;
              unint64_t v71 = sub_100005104(&qword_1000B90C8);
              uint64_t v72 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
              uint64_t v73 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v71, v72);
              unsigned int v75 = v74;
              swift_bridgeObjectRelease(v70);
              uint64_t v76 = sub_10002EA1C();
              unint64_t v77 = swift_allocError(&type metadata for ParserError, v76, 0LL, 0LL);
              *(void *)unint64_t v78 = v73;
              *(void *)(v78 + 8) = v75;
              *(_OWORD *)(v78 + 16) = 0u;
              *(_OWORD *)(v78 + 32) = 0u;
              *(_OWORD *)(v78 + 48) = 0u;
              *(_OWORD *)(v78 + 64) = 0u;
              *(_BYTE *)(v78 + 80) = 2;
              swift_willThrow(v77);
              swift_unknownObjectRelease(v52);
              swift_release(v54);
              unint64_t v19 = (uint64_t)v53;
              return swift_release(v19);
            }

            sub_10006BAB0((uint64_t)&v115);
          }

      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
  }

  return result;
}

  __break(1u);
  return result;
}

LABEL_26:
      if (!v27[2]) {
        goto LABEL_70;
      }
    }

    uint64_t v29 = 0LL;
LABEL_29:
    unint64_t v30 = __clz(__rbit64(v28)) + (v29 << 6);
    goto LABEL_30;
  }

  __break(1u);
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      int v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          unint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      unint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *unint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        unint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      unint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        int v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    int64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    int v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        unint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    unint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *unint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  unint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    unint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    unint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      int v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        unint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  unint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

      *((void *)v4 + 2) = v12;
    }
  }

  __break(1u);
  return result;
}

        unint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      unint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        int v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    unint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    unint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      int v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        unint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
    uint64_t result = swift_retain(v20);
  }

  unint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_101:
  __break(1u);
  return result;
}

  __break(1u);
}

uint64_t sub_10001FBA8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 104;
  swift_beginAccess(v1 + 104, v14, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 104);
  if (*(void *)(v5 + 16))
  {
    unint64_t v6 = sub_100023B88(a1);
    if ((v7 & 1) != 0) {
      return *(unsigned __int8 *)(*(void *)(v5 + 56) + v6);
    }
  }

  BOOL v8 = swift_reflection_metadataIsActor(*(void *)(v2 + 16), a1) != 0;
  swift_beginAccess(v4, v13, 33LL, 0LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + 104));
  uint64_t v12 = *(void *)(v2 + 104);
  *(void *)(v2 + 104) = 0x8000000000000000LL;
  sub_1000257B0(v8, a1, isUniquelyReferenced_nonNull_native);
  uint64_t v10 = *(void *)(v2 + 104);
  *(void *)(v2 + 104) = v12;
  swift_bridgeObjectRelease(v10);
  swift_endAccess(v13);
  return v8;
}

uint64_t sub_10001FC8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  uint64_t v5 = *(void *)(v2 + 16);
  swift_reflection_asyncTaskInfo(&v71, v5, a1);
  unint64_t v6 = v71;
  if (!v71)
  {
    unint64_t v18 = v72;
    uint64_t v60 = v73;
    int v58 = BYTE1(v73);
    int v59 = BYTE2(v73);
    uint64_t v63 = v74;
    uint64_t v66 = v75;
    int v61 = HIBYTE(v73);
    int v62 = v76;
    int v64 = v77;
    int v65 = v78;
    int v67 = v79;
    int v68 = v80;
    char v29 = v81;
    unsigned int v57 = v82;
    __int128 v69 = v83;
    unint64_t v22 = v84;
    uint64_t v30 = v87;
    int v31 = v88;
    int v25 = sub_100026420(v86, v85);
    uint64_t v26 = sub_100026420(v31, v30);
    uint64_t v24 = 0LL;
    uint64_t v23 = 0LL;
    if (v22)
    {
      unint64_t v32 = v22;
      do
      {
        uint64_t result = (uint64_t)swift_reflection_asyncTaskSlabAllocations(&v71, v5, v32);
        if (v71) {
          break;
        }
        BOOL v33 = __OFADD__(v23, v73);
        v23 += v73;
        if (v33)
        {
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }

        BOOL v33 = __OFADD__(v24, v74);
        v24 += v74;
        if (v33) {
          goto LABEL_38;
        }
        unint64_t v32 = v72;
      }

      while (v72);
      if ((v29 & 1) != 0)
      {
        uint64_t v34 = 0LL;
        __int128 v28 = v69;
        int v36 = v67;
        int v35 = v68;
        unsigned int v38 = v57;
        int v37 = v58;
        uint64_t result = v66;
        int v40 = v64;
        int v39 = v65;
        uint64_t v41 = v63;
        int v43 = v61;
        int v42 = v62;
        uint64_t v44 = v60;
        int v45 = v59;
        goto LABEL_15;
      }

      __int128 v28 = v69;
      int v36 = v67;
      int v35 = v68;
      uint64_t result = v66;
      int v40 = v64;
      int v39 = v65;
      uint64_t v41 = v63;
      int v43 = v61;
      int v42 = v62;
      uint64_t v44 = v60;
      int v37 = v58;
      int v45 = v59;
    }

    else
    {
      uint64_t v34 = 0LL;
      __int128 v28 = v69;
      int v36 = v67;
      int v35 = v68;
      unsigned int v38 = v57;
      int v37 = v58;
      uint64_t result = v66;
      int v40 = v64;
      int v39 = v65;
      uint64_t v41 = v63;
      int v43 = v61;
      int v42 = v62;
      uint64_t v44 = v60;
      int v45 = v59;
      if ((v29 & 1) != 0) {
        goto LABEL_15;
      }
    }

    unsigned int v38 = 0;
    uint64_t v34 = &_mh_execute_header;
LABEL_15:
    uint64_t v46 = 256LL;
    if (v37) {
      uint64_t v47 = 256LL;
    }
    else {
      uint64_t v47 = 0LL;
    }
    uint64_t v48 = v47 | v44;
    uint64_t v49 = 0x10000LL;
    if (v45) {
      uint64_t v50 = 0x10000LL;
    }
    else {
      uint64_t v50 = 0LL;
    }
    if (v43) {
      uint64_t v51 = 0x1000000LL;
    }
    else {
      uint64_t v51 = 0LL;
    }
    uint64_t v19 = v48 | v50 | v51 | (v41 << 32);
    if (!v42) {
      uint64_t v46 = 0LL;
    }
    uint64_t v52 = v46 | result;
    if (!v40) {
      uint64_t v49 = 0LL;
    }
    if (v39) {
      uint64_t v53 = 0x1000000LL;
    }
    else {
      uint64_t v53 = 0LL;
    }
    uint64_t v54 = v52 | v49 | v53;
    Swift::String v55 = &_mh_execute_header;
    if (!v36) {
      Swift::String v55 = 0LL;
    }
    uint64_t v56 = 0x10000000000LL;
    if (!v35) {
      uint64_t v56 = 0LL;
    }
    unint64_t v20 = v54 | (unint64_t)v55 | v56;
    unint64_t v21 = (unint64_t)v34 | v38;
    char v27 = 1;
    goto LABEL_36;
  }

  uint64_t v7 = sub_100005104(&qword_1000B8758);
  uint64_t v8 = swift_allocObject(v7, 64LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_100096510;
  unint64_t v71 = 0LL;
  unint64_t v72 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(40LL);
  swift_bridgeObjectRelease(v72);
  unint64_t v71 = 0xD000000000000024LL;
  unint64_t v72 = 0x800000010009C990LL;
  uint64_t v70 = v3;
  unint64_t v9 = sub_1000058CC();
  v10._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v70, 16LL, 0LL, &type metadata for UInt64, v9);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12._char countAndFlagsBits = 8250LL;
  v12._object = (void *)0xE200000000000000LL;
  String.append(_:)(v12);
  v13._char countAndFlagsBits = String.init(cString:)(v6);
  uint64_t v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  unint64_t v15 = v71;
  unint64_t v16 = v72;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 32) = v15;
  *(void *)(v8 + 40) = v16;
  print(_:separator:terminator:)(v8, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  uint64_t result = swift_bridgeObjectRelease(v8);
  uint64_t v3 = 0LL;
  unint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  unint64_t v20 = 0LL;
  unint64_t v21 = 0LL;
  unint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  int v25 = 0LL;
  uint64_t v26 = 0LL;
  char v27 = 0;
  __int128 v28 = 0uLL;
LABEL_36:
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v18;
  *(void *)(a2 + 16) = v19;
  *(void *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v21;
  *(_OWORD *)(a2 + 40) = v28;
  *(void *)(a2 + 56) = v22;
  *(void *)(a2 + 64) = v23;
  *(void *)(a2 + 72) = v24;
  *(void *)(a2 + 80) = v25;
  *(void *)(a2 + 88) = v26;
  *(void *)(a2 + 96) = 0LL;
  *(_BYTE *)(a2 + 104) = v27;
  return result;
}

void *sub_100020020()
{
  uint64_t v0 = (char *)sub_10001EE58();
  uint64_t v1 = sub_1000208F8(v0);
  uint64_t v152 = v1;
  swift_bridgeObjectRetain(v1);
  sub_1000263B8(&v152);
  swift_bridgeObjectRelease(v1);
  uint64_t v86 = *((void *)v152 + 2);
  if (v86)
  {
    unint64_t v2 = 0LL;
    unsigned int v85 = v152 + 32;
    uint64_t v142 = _swiftEmptyArrayStorage;
    unint64_t v84 = v152;
    while (1)
    {
      unint64_t v87 = v2;
      uint64_t v3 = &v85[112 * v2];
      uint64_t v4 = *(void *)v3;
      int v129 = *((_DWORD *)v3 + 2);
      int v132 = *((_DWORD *)v3 + 3);
      int v5 = *((_DWORD *)v3 + 5);
      int v135 = *((_DWORD *)v3 + 8);
      char v93 = v3[36];
      uint64_t v144 = *((void *)v3 + 6);
      uint64_t v137 = *((void *)v3 + 5);
      uint64_t v140 = *((void *)v3 + 7);
      uint64_t v97 = *((void *)v3 + 9);
      uint64_t v99 = *((void *)v3 + 8);
      uint64_t v91 = *((void *)v3 + 10);
      uint64_t v88 = *((void *)v3 + 11);
      uint64_t v95 = *((void *)v3 + 12);
      char v101 = v3[104];
      char v126 = v3[29];
      char v6 = v3[28];
      char v7 = v3[27];
      char v89 = v3[26];
      char v8 = v3[25];
      char v9 = v3[24];
      char v10 = v3[19];
      char v11 = v3[18];
      char v12 = v3[17];
      char v13 = v3[16];
      uint64_t v14 = sub_100005104(&qword_1000B8C10);
      uint64_t inited = swift_initStackObject(v14, v153);
      *(_OWORD *)(inited + 16) = xmmword_100096510;
      char v123 = (void *)(inited + 16);
      *(void *)(inited + 32) = 0LL;
      *(void *)(inited + 40) = v4;
      *(_DWORD *)(inited + 48) = v129;
      *(_DWORD *)(inited + 52) = v132;
      *(_BYTE *)(inited + 56) = v13;
      *(_BYTE *)(inited + 57) = v12;
      char v105 = v11;
      *(_BYTE *)(inited + 58) = v11;
      *(_BYTE *)(inited + 59) = v10;
      *(_DWORD *)(inited + 60) = v5;
      *(_BYTE *)(inited + 64) = v9;
      *(_BYTE *)(inited + 65) = v8;
      *(_BYTE *)(inited + 66) = v89;
      char v114 = v7;
      *(_BYTE *)(inited + 67) = v7;
      *(_BYTE *)(inited + 68) = v6;
      *(_BYTE *)(inited + 69) = v126;
      *(_DWORD *)(inited + 72) = v135;
      *(_BYTE *)(inited + 76) = v93;
      *(void *)(inited + 80) = v137;
      *(void *)(inited + 88) = v144;
      uint64_t v16 = v95;
      *(void *)(inited + 96) = v140;
      *(void *)(inited + 104) = v99;
      *(void *)(inited + 112) = v97;
      *(void *)(inited + 120) = v91;
      *(void *)(inited + 128) = v88;
      *(void *)(inited + 136) = v95;
      uint64_t v143 = (void *)inited;
      *(_BYTE *)(inited + 144) = v101;
      swift_bridgeObjectRetain_n(v91, 2LL);
      swift_bridgeObjectRetain_n(v88, 2LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v142) & 1) == 0) {
        uint64_t v142 = sub_100012594(0LL, v142[2] + 1LL, 1, v142);
      }
      unint64_t v18 = v142[2];
      unint64_t v17 = v142[3];
      if (v18 >= v17 >> 1) {
        uint64_t v142 = sub_100012594((void *)(v17 > 1), v18 + 1, 1, v142);
      }
      v142[2] = v18 + 1;
      uint64_t v19 = &v142[16 * v18];
      v19[4] = 0LL;
      *((_BYTE *)v19 + 40) = 1;
      int v20 = *(_DWORD *)((char *)&v152 + 3);
      *(_DWORD *)((char *)v19 + 41) = (_DWORD)v152;
      *((_DWORD *)v19 + 11) = v20;
      v19[6] = v4;
      *((_DWORD *)v19 + 14) = v129;
      *((_DWORD *)v19 + 15) = v132;
      *((_BYTE *)v19 + 64) = v13;
      *((_BYTE *)v19 + 65) = v12;
      *((_BYTE *)v19 + 66) = v105;
      *((_BYTE *)v19 + 67) = v10;
      *((_DWORD *)v19 + 17) = v5;
      *((_BYTE *)v19 + 72) = v9;
      *((_BYTE *)v19 + 73) = v8;
      *((_BYTE *)v19 + 74) = v89;
      *((_BYTE *)v19 + 75) = v114;
      *((_BYTE *)v19 + 76) = v6;
      *((_BYTE *)v19 + 77) = v126;
      *((_DWORD *)v19 + 20) = v135;
      *((_BYTE *)v19 + 84) = v93;
      *((_BYTE *)v19 + 87) = v151;
      *(_WORD *)((char *)v19 + 85) = v150;
      v19[11] = v137;
      v19[12] = v144;
      v19[13] = v140;
      v19[14] = v99;
      v19[15] = v97;
      v19[16] = v91;
      v19[17] = v88;
      v19[18] = v95;
      *((_BYTE *)v19 + 152) = v101;
      unint64_t v21 = v123;
      unint64_t v22 = *v123;
      if (*v123)
      {
        uint64_t v23 = v143;
        while (1)
        {
          uint64_t v143 = v23;
          uint64_t v145 = v23 + 4;
          while (1)
          {
            uint64_t v24 = 15 * (v22 - 1);
            uint64_t v25 = v145[v24];
            uint64_t v26 = v145[v24 + 1];
            uint64_t v27 = v145[v24 + 2];
            char v28 = v145[v24 + 3];
            char v29 = BYTE1(v145[v24 + 3]);
            char v30 = BYTE2(v145[v24 + 3]);
            char v31 = BYTE3(v145[v24 + 3]);
            int v32 = HIDWORD(v145[v24 + 3]);
            char v33 = v145[v24 + 4];
            uint64_t v16 = BYTE1(v145[v24 + 4]);
            char v34 = BYTE2(v145[v24 + 4]);
            char v35 = BYTE3(v145[v24 + 4]);
            char v36 = BYTE4(v145[v24 + 4]);
            char v37 = BYTE5(v145[v24 + 4]);
            int v38 = v145[v24 + 5];
            char v39 = BYTE4(v145[v24 + 5]);
            __int128 v40 = *(_OWORD *)&v145[v24 + 6];
            __int128 v41 = *(_OWORD *)&v145[v24 + 8];
            uint64_t v43 = v145[v24 + 10];
            uint64_t v42 = v145[v24 + 11];
            uint64_t v45 = v145[v24 + 12];
            uint64_t v44 = v145[v24 + 13];
            char v46 = v145[v24 + 14];
            *unint64_t v21 = v22 - 1;
            if (v25 < *(void *)(v42 + 16)) {
              break;
            }
            uint64_t v47 = v21;
            swift_bridgeObjectRelease(v42);
            swift_bridgeObjectRelease(v45);
            unint64_t v21 = v47;
            unint64_t v22 = *v47;
            if (!*v47) {
              goto LABEL_24;
            }
          }

          char v110 = v39;
          int v112 = v38;
          char v115 = v37;
          char v117 = v36;
          char v119 = v35;
          int v121 = v32;
          char v124 = v31;
          uint64_t v127 = v26;
          __int128 v130 = v41;
          __int128 v133 = v40;
          uint64_t v104 = *(void *)(v42 + 16);
          unint64_t v146 = v25;
          unint64_t v106 = v143[3];
          uint64_t v108 = v43;
          unint64_t v138 = v22;
          uint64_t v141 = v42;
          swift_bridgeObjectRetain(v42);
          uint64_t v136 = v45;
          swift_bridgeObjectRetain(v45);
          unint64_t v48 = v138;
          if (v138 > v106 >> 1)
          {
            char v81 = sub_100012460((void *)(v106 > 1), v138, 1, v143);
            unint64_t v48 = v138;
            uint64_t v143 = v81;
          }

          v143[2] = v48;
          uint64_t v49 = &v143[v24];
          v49[4] = v146 + 1;
          v49[5] = v127;
          v49[6] = v27;
          *((_BYTE *)v49 + 56) = v28;
          *((_BYTE *)v49 + 57) = v29;
          *((_BYTE *)v49 + 58) = v30;
          *((_BYTE *)v49 + 59) = v124;
          *((_DWORD *)v49 + 15) = v121;
          *((_BYTE *)v49 + 64) = v33;
          *((_BYTE *)v49 + 65) = v16;
          *((_BYTE *)v49 + 66) = v34;
          *((_BYTE *)v49 + 67) = v119;
          *((_BYTE *)v49 + 68) = v117;
          *((_BYTE *)v49 + 69) = v115;
          *((_DWORD *)v49 + 18) = v112;
          *((_BYTE *)v49 + 76) = v110;
          *((_OWORD *)v49 + 5) = v133;
          *((_OWORD *)v49 + 6) = v130;
          v49[14] = v108;
          v49[15] = v141;
          v49[16] = v45;
          v49[17] = v44;
          *((_BYTE *)v49 + 144) = v46;
          if ((v146 & 0x8000000000000000LL) != 0) {
            break;
          }
          if (v146 >= *(void *)(v141 + 16)) {
            goto LABEL_31;
          }
          uint64_t v50 = *(void *)(v141 + 8 * v146 + 32);
          uint64_t v16 = sub_10001EE58();
          if (!*(void *)(v16 + 16)) {
            goto LABEL_32;
          }
          unint64_t v51 = sub_100023B88(v50);
          if ((v52 & 1) == 0) {
            goto LABEL_32;
          }
          uint64_t v53 = *(void *)(v16 + 56) + 112 * v51;
          uint64_t v54 = *(void *)v53;
          int v55 = *(_DWORD *)(v53 + 12);
          char v94 = *(_BYTE *)(v53 + 16);
          int v96 = *(_DWORD *)(v53 + 8);
          char v90 = *(_BYTE *)(v53 + 18);
          char v92 = *(_BYTE *)(v53 + 17);
          char v134 = *(_BYTE *)(v53 + 19);
          int v131 = *(_DWORD *)(v53 + 20);
          char v128 = *(_BYTE *)(v53 + 24);
          char v122 = *(_BYTE *)(v53 + 26);
          char v125 = *(_BYTE *)(v53 + 25);
          char v118 = *(_BYTE *)(v53 + 28);
          char v120 = *(_BYTE *)(v53 + 27);
          int v113 = *(_DWORD *)(v53 + 32);
          char v116 = *(_BYTE *)(v53 + 29);
          char v111 = *(_BYTE *)(v53 + 36);
          uint64_t v107 = *(void *)(v53 + 48);
          uint64_t v109 = *(void *)(v53 + 40);
          uint64_t v102 = *(void *)(v53 + 64);
          uint64_t v103 = *(void *)(v53 + 56);
          uint64_t v56 = *(void *)(v53 + 80);
          uint64_t v57 = *(void *)(v53 + 88);
          uint64_t v98 = *(void *)(v53 + 96);
          uint64_t v100 = *(void *)(v53 + 72);
          char v139 = *(_BYTE *)(v53 + 104);
          swift_bridgeObjectRetain(v56);
          swift_bridgeObjectRetain(v57);
          swift_bridgeObjectRelease(v16);
          uint64_t v23 = v143;
          uint64_t v58 = v143[2];
          swift_bridgeObjectRelease(v141);
          swift_bridgeObjectRelease(v136);
          unint64_t v59 = v142[2];
          unint64_t v60 = v142[3];
          swift_bridgeObjectRetain(v56);
          swift_bridgeObjectRetain(v57);
          if (v59 >= v60 >> 1) {
            uint64_t v142 = sub_100012594((void *)(v60 > 1), v59 + 1, 1, v142);
          }
          v142[2] = v59 + 1;
          char v61 = v111;
          int v62 = &v142[16 * v59];
          v62[4] = v58;
          *((_BYTE *)v62 + 40) = v146 == v104 - 1;
          *(_DWORD *)((char *)v62 + 41) = *(_DWORD *)v149;
          *((_DWORD *)v62 + 11) = *(_DWORD *)&v149[3];
          v62[6] = v54;
          *((_DWORD *)v62 + 14) = v96;
          *((_DWORD *)v62 + 15) = v55;
          *((_BYTE *)v62 + 64) = v94;
          *((_BYTE *)v62 + 65) = v92;
          *((_BYTE *)v62 + 66) = v90;
          char v63 = v134;
          *((_BYTE *)v62 + 67) = v134;
          int v64 = v131;
          *((_DWORD *)v62 + 17) = v131;
          char v65 = v128;
          *((_BYTE *)v62 + 72) = v128;
          char v67 = v122;
          char v66 = v125;
          *((_BYTE *)v62 + 73) = v125;
          *((_BYTE *)v62 + 74) = v122;
          char v69 = v118;
          char v68 = v120;
          *((_BYTE *)v62 + 75) = v120;
          *((_BYTE *)v62 + 76) = v118;
          int v71 = v113;
          char v70 = v116;
          *((_BYTE *)v62 + 77) = v116;
          *((_DWORD *)v62 + 20) = v113;
          *((_BYTE *)v62 + 84) = v111;
          *((_BYTE *)v62 + 87) = v148;
          *(_WORD *)((char *)v62 + 85) = v147;
          uint64_t v73 = v107;
          uint64_t v72 = v109;
          v62[11] = v109;
          v62[12] = v107;
          uint64_t v75 = v102;
          uint64_t v74 = v103;
          v62[13] = v103;
          v62[14] = v102;
          uint64_t v77 = v98;
          uint64_t v76 = v100;
          v62[15] = v100;
          v62[16] = v56;
          v62[17] = v57;
          v62[18] = v98;
          *((_BYTE *)v62 + 152) = v139;
          unint64_t v79 = v143[2];
          unint64_t v78 = v143[3];
          if (v79 >= v78 >> 1)
          {
            unsigned int v82 = sub_100012460((void *)(v78 > 1), v79 + 1, 1, v143);
            uint64_t v77 = v98;
            uint64_t v76 = v100;
            uint64_t v75 = v102;
            uint64_t v74 = v103;
            uint64_t v73 = v107;
            uint64_t v72 = v109;
            char v61 = v111;
            int v71 = v113;
            char v69 = v118;
            char v68 = v120;
            char v67 = v122;
            char v66 = v125;
            char v65 = v128;
            int v64 = v131;
            char v63 = v134;
            uint64_t v23 = v82;
            char v70 = v116;
          }

          v23[2] = v79 + 1;
          unint64_t v21 = v23 + 2;
          unsigned __int8 v80 = &v23[15 * v79];
          v80[4] = 0LL;
          v80[5] = v54;
          *((_DWORD *)v80 + 12) = v96;
          *((_DWORD *)v80 + 13) = v55;
          *((_BYTE *)v80 + 56) = v94;
          *((_BYTE *)v80 + 57) = v92;
          *((_BYTE *)v80 + 58) = v90;
          *((_BYTE *)v80 + 59) = v63;
          *((_DWORD *)v80 + 15) = v64;
          *((_BYTE *)v80 + 64) = v65;
          *((_BYTE *)v80 + 65) = v66;
          *((_BYTE *)v80 + 66) = v67;
          *((_BYTE *)v80 + 67) = v68;
          *((_BYTE *)v80 + 68) = v69;
          *((_BYTE *)v80 + 69) = v70;
          *((_DWORD *)v80 + 18) = v71;
          unint64_t v22 = v79 + 1;
          *((_BYTE *)v80 + 76) = v61;
          v80[10] = v72;
          v80[11] = v73;
          v80[12] = v74;
          v80[13] = v75;
          v80[14] = v76;
          v80[15] = v56;
          v80[16] = v57;
          v80[17] = v77;
          *((_BYTE *)v80 + 144) = v139;
        }

char *sub_1000208F8(char *result)
{
  uint64_t v1 = result;
  int64_t v2 = 0LL;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1LL << result[32];
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *((void *)result + 8);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v8 | (v2 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v2 << 6))
  {
    uint64_t v10 = *((void *)v1 + 7) + 112 * i;
    if (*(_BYTE *)(v10 + 104) == 1)
    {
      uint64_t v38 = *(void *)v10;
      uint64_t v14 = *(void *)(v10 + 8);
      char v36 = *(_BYTE *)(v10 + 17);
      char v37 = *(_BYTE *)(v10 + 16);
      char v34 = *(_BYTE *)(v10 + 19);
      char v35 = *(_BYTE *)(v10 + 18);
      char v32 = *(_BYTE *)(v10 + 24);
      int v33 = *(_DWORD *)(v10 + 20);
      char v30 = *(_BYTE *)(v10 + 26);
      char v31 = *(_BYTE *)(v10 + 25);
      char v28 = *(_BYTE *)(v10 + 28);
      char v29 = *(_BYTE *)(v10 + 27);
      int v26 = *(_DWORD *)(v10 + 32);
      char v27 = *(_BYTE *)(v10 + 29);
      char v25 = *(_BYTE *)(v10 + 36);
      uint64_t v23 = *(void *)(v10 + 48);
      uint64_t v24 = *(void *)(v10 + 40);
      uint64_t v21 = *(void *)(v10 + 64);
      uint64_t v22 = *(void *)(v10 + 56);
      uint64_t v15 = *(void *)(v10 + 88);
      uint64_t v19 = *(void *)(v10 + 96);
      uint64_t v20 = *(void *)(v10 + 72);
      uint64_t v39 = *(void *)(v10 + 80);
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v15);
      uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1) {
        uint64_t result = sub_100027284((char *)(v16 > 1), v17 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v17 + 1;
      unint64_t v18 = &_swiftEmptyArrayStorage[14 * v17];
      void v18[4] = v38;
      v18[5] = v14;
      *((_BYTE *)v18 + 48) = v37;
      *((_BYTE *)v18 + 49) = v36;
      *((_BYTE *)v18 + 50) = v35;
      *((_BYTE *)v18 + 51) = v34;
      *((_DWORD *)v18 + 13) = v33;
      *((_BYTE *)v18 + 56) = v32;
      *((_BYTE *)v18 + 57) = v31;
      *((_BYTE *)v18 + 58) = v30;
      *((_BYTE *)v18 + 59) = v29;
      *((_BYTE *)v18 + 60) = v28;
      *((_BYTE *)v18 + 61) = v27;
      *((_DWORD *)v18 + 16) = v26;
      *((_BYTE *)v18 + 68) = v25;
      v18[9] = v24;
      v18[10] = v23;
      v18[11] = v22;
      v18[12] = v21;
      v18[13] = v20;
      v18[14] = v39;
      v18[15] = v15;
      v18[16] = v19;
      *((_BYTE *)v18 + 136) = 1;
      if (v6) {
        goto LABEL_4;
      }
    }

    else if (v6)
    {
      goto LABEL_4;
    }

LABEL_7:
    int64_t v11 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v11 >= v7) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)&v3[8 * v11];
    ++v2;
    if (!v12)
    {
      int64_t v2 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_29;
      }
      unint64_t v12 = *(void *)&v3[8 * v2];
      if (!v12)
      {
        int64_t v2 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)&v3[8 * v2];
        if (!v12)
        {
          int64_t v2 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_29;
          }
          unint64_t v12 = *(void *)&v3[8 * v2];
          if (!v12) {
            break;
          }
        }
      }
    }

  int64_t v13 = a3(v8, v9, a2);
  if (!v3) {
    return v13 & 0x1FF;
  }
  return v14;
}

    int64_t v11 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v11;
    goto LABEL_8;
  }

  if (!v10)
  {
    sub_1000062D8(a1 + 4);
    goto LABEL_7;
  }

  sub_100052ED8(a1 + 4, a2 + 4);
LABEL_8:
  unint64_t v12 = a2[8];
  int64_t v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  sub_1000528A8(a1 + 10, a2 + 10);
  return a1;
}

  if (a4)
  {
    swift_bridgeObjectRetain(a4);
    uint64_t v21 = swift_bridgeObjectRetain(a5);
    uint64_t v22 = (char *)a5;
    if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
      uint64_t v22 = sub_100057AB8(0LL, *(void *)(a5 + 16) + 1LL, 1, (char *)a5);
    }
    uint64_t v24 = *((void *)v22 + 2);
    uint64_t v23 = *((void *)v22 + 3);
    if (v24 >= v23 >> 1) {
      uint64_t v22 = sub_100057AB8((char *)(v23 > 1), v24 + 1, 1, v22);
    }
    *((void *)v22 + 2) = v24 + 1;
    char v25 = &v22[16 * v24];
    *((void *)v25 + 4) = a3;
    *((void *)v25 + 5) = a4;
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a4);
  }

  return a1;
}

    char v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v9;
    goto LABEL_8;
  }

  if (!v8)
  {
    sub_1000062D8((void *)(a1 + 24));
    goto LABEL_7;
  }

  sub_100052ED8((void *)(a1 + 24), (void *)(a2 + 24));
LABEL_8:
  uint64_t v10 = *(void *)(a2 + 56);
  int64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  unint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

  while (1)
  {
    unint64_t v17 = *(void *)(a1 + 16);
    if (v6 == v17) {
      break;
    }
    if (v6 >= v17) {
      goto LABEL_36;
    }
    uint64_t v19 = *(v16 - 1);
    unint64_t v18 = *v16;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v18);
    uint64_t result = sub_10004E8C8(v4, v14);
    ++v6;
    v16 += 2;
    uint64_t v14 = v18;
    uint64_t v4 = v19;
    if (v19) {
      goto LABEL_6;
    }
  }

  uint64_t v3 = v14;
  int64_t v7 = v11;
  uint64_t v5 = v57;
LABEL_32:
  swift_bridgeObjectRelease(a1);
  uint64_t result = sub_10004E8C8(v4, v3);
  unint64_t v51 = v7[3];
  if (v51 < 2) {
    return (uint64_t)v7;
  }
  char v52 = v51 >> 1;
  __int128 v41 = __OFSUB__(v52, v5);
  uint64_t v53 = v52 - v5;
  if (!v41)
  {
    uint64_t v7[2] = v53;
    return (uint64_t)v7;
  }

LABEL_22:
    unint64_t v6 = (v12 - 1) & v12;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_29:
    swift_release(v1);
    return (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v12 = *(void *)&v3[8 * v13];
  if (v12)
  {
    int64_t v2 = v13;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v2 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)&v3[8 * v2];
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  char v25 = *(void *)(v23 + 16);
  int v26 = __OFADD__(v25, 1LL);
  char v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

    unint64_t v6 = (v11 - 1) & v11;
    char v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    uint64_t result = sub_10005954C( (uint64_t)v13,  *(void *)(*(void *)(v1 + 48) + 24 * v9),  *(void *)(*(void *)(v1 + 48) + 24 * v9 + 8),  *(unsigned __int8 *)(*(void *)(v1 + 48) + 24 * v9 + 16) | (*(unsigned __int8 *)(*(void *)(v1 + 48)
                                                                                               + 24 * v9
                                                                                               + 17) << 8));
  }

  unint64_t v12 = v10 + 4;
  if (v12 >= v7) {
    return swift_release(v1);
  }
  int64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v2 = v12;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      return swift_release(v1);
    }
    int64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }

    int64_t v11 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_23:
    uint64_t v23 = *(void *)(v5 + 48) + 24 * v18;
    char v25 = *(void *)v23;
    uint64_t v24 = *(void *)(v23 + 8);
    int v26 = *(unsigned __int8 *)(v23 + 16);
    __int128 v40 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
    if ((a2 & 1) == 0) {
      sub_100030508(v25, v24, v26);
    }
    Hasher.init(_seed:)(v41, *(void *)(v8 + 40));
    if (v26 >> 6)
    {
      if (v26 >> 6 == 1)
      {
        Hasher._combine(_:)(1uLL);
        Character.hash(into:)(v41, v25, v24);
        LOBYTE(a2) = v37;
        Hasher._combine(_:)(v26 & 1);
        goto LABEL_31;
      }

      char v27 = 2LL;
    }

    else
    {
      char v27 = 0LL;
    }

    Hasher._combine(_:)(v27);
    String.hash(into:)(v41, v25, v24);
LABEL_31:
    uint64_t result = Hasher._finalize()();
    char v28 = -1LL << *(_BYTE *)(v8 + 32);
    char v29 = result & ~v28;
    char v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v31 = 0;
      char v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_48;
        }

        int v33 = v30 == v32;
        if (v30 == v32) {
          char v30 = 0LL;
        }
        v31 |= v33;
        char v34 = *(void *)(v12 + 8 * v30);
      }

      while (v34 == -1);
      uint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    unint64_t v16 = *(void *)(v8 + 48) + 24 * v15;
    *(void *)unint64_t v16 = v25;
    *(void *)(v16 + 8) = v24;
    *(_BYTE *)(v16 + 16) = v26;
    *(void *)(*(void *)(v8 + 56) + 8 * v15) = v40;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v20 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_47;
  }
LABEL_43:
  char v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v20, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v20 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_47:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  unint64_t v17 = v2[9];
  if (v17)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    unint64_t v18 = *(void *)(v17 + 16);
    Hasher._combine(_:)(v18);
    if (v18)
    {
      swift_bridgeObjectRetain(v17);
      uint64_t v19 = 32LL;
      do
      {
        uint64_t v20 = *(_OWORD *)(v17 + v19 + 16);
        v35[0] = *(_OWORD *)(v17 + v19);
        v35[1] = v20;
        uint64_t v21 = *(_OWORD *)(v17 + v19 + 32);
        uint64_t v22 = *(_OWORD *)(v17 + v19 + 48);
        uint64_t v23 = *(_OWORD *)(v17 + v19 + 64);
        char v36 = *(void *)(v17 + v19 + 80);
        v35[3] = v22;
        v35[4] = v23;
        v35[2] = v21;
        sub_100091CCC((uint64_t *)v35);
        CommandInfoV0.hash(into:)(a1);
        sub_10004DC0C((uint64_t *)v35);
        v19 += 88LL;
        --v18;
      }

      while (v18);
      swift_bridgeObjectRelease(v17);
    }

    uint64_t v24 = v2[10];
    if (v24) {
      goto LABEL_16;
    }
LABEL_24:
    Hasher._combine(_:)(0);
    return;
  }

LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100020C24@<X0>( const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = String.utf8CString.getter(a2, a3);
  int64_t v13 = strstr(a1, (const char *)(v12 + 32));
  swift_release(v12);
  if (v13)
  {
    uint64_t v14 = String.utf8CString.getter(a2, a3);
    size_t v15 = strlen((const char *)(v14 + 32));
    swift_release(v14);
    uint64_t result = String.init(cString:)(&v13[v15]);
    a4 = result;
    a5 = v17;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRetain(a5);
  }

  *a6 = a4;
  a6[1] = a5;
  return result;
}

void *sub_100020CE4( void *(*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0 || !(a4 & 0x2000000000000000LL | a3 & 0x1000000000000000LL))
  {
    uint64_t result = _StringGuts._slowWithCString<A>(_:)(&v9, a1, a2);
    if (!v4) {
      return (void *)v9;
    }
  }

  else if ((a4 & 0x2000000000000000LL) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t result = a1(&v8, v10);
    if (!v4) {
      return (void *)v8;
    }
  }

  else
  {
    if ((a3 & 0x1000000000000000LL) != 0) {
      uint64_t v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v6 = _StringObject.sharedUTF8.getter(a3, a4);
    }
    uint64_t result = a1(v10, (void *)v6);
    if (!v4) {
      return (void *)v10[0];
    }
  }

  return result;
}

void *sub_100020DBC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v3 + 48);
  uint64_t v5 = *(void *)(v3 + 56);
  if (qword_1000B86D0 != -1) {
    swift_once(&qword_1000B86D0, sub_10001E0D4);
  }
  uint64_t v6 = off_1000BA488(v4, v5, a1, 0x8000000000000000LL);
  uint64_t v8 = v7;
  if (qword_1000B86B8 != -1) {
    swift_once(&qword_1000B86B8, sub_10001DFA8);
  }
  uint64_t v9 = off_1000BA470(v6, v8);
  uint64_t v11 = v10;
  if (qword_1000B86C8 != -1) {
    swift_once(&qword_1000B86C8, sub_10001E070);
  }
  uint64_t v12 = off_1000BA480(v9, v11);
  if (v12)
  {
    String.init(cString:)(v12);
    uint64_t v14 = v13;
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  if (qword_1000B86B0 != -1) {
    swift_once(&qword_1000B86B0, sub_10001DF3C);
  }
  uint64_t v15 = off_1000BA468(v6, v8);
  if (v15)
  {
    uint64_t v16 = String.init(cString:)(v15);
    uint64_t v18 = v17;
    uint64_t v19 = swift_bridgeObjectRelease(v14);
    __chkstk_darwin(v19);
    v26[2] = 0xD00000000000001DLL;
    v26[3] = 0x800000010009C970LL;
    v26[4] = v16;
    v26[5] = v18;
    uint64_t v20 = sub_100020CE4((void *(*)(uint64_t *__return_ptr, void *))sub_10002AAB0, (uint64_t)v26, v16, v18);
    swift_bridgeObjectRelease(v18);
  }

  else
  {
    swift_bridgeObjectRelease(v14);
    uint64_t v28 = 7876668LL;
    unint64_t v29 = 0xE300000000000000LL;
    uint64_t v27 = a1;
    unint64_t v21 = sub_1000058CC();
    v22._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v27, 16LL, 0LL, &type metadata for UInt64, v21);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    v24._char countAndFlagsBits = 62LL;
    v24._object = (void *)0xE100000000000000LL;
    String.append(_:)(v24);
    return (void *)v28;
  }

  return v20;
}

uint64_t sub_100021004()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100005104(&qword_1000B8758);
  uint64_t v3 = swift_allocObject(v2, 64LL, 7LL);
  *(_OWORD *)(v3 + 16) = xmmword_100096510;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 32) = 0x534B534154LL;
  *(void *)(v3 + 40) = 0xE500000000000000LL;
  print(_:separator:terminator:)(v3, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = sub_10001EE58();
  char v5 = sub_100022248(v4);
  swift_bridgeObjectRelease(v4);
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = swift_allocObject(v2, 64LL, 7LL);
    *(_OWORD *)(v6 + 16) = xmmword_100096510;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 32) = 0xD000000000000072LL;
    *(void *)(v6 + 40) = 0x800000010009C8D0LL;
    print(_:separator:terminator:)(v6, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    swift_bridgeObjectRelease(v6);
  }

  uint64_t v7 = (int8x16_t *)sub_10001EBB8();
  sub_10001E588(v7, v8);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease(v7);
  uint64_t v11 = v10[2];
  if (v11)
  {
    sub_100005104(&qword_1000B9018);
    uint64_t v12 = (void *)static _DictionaryStorage.allocate(capacity:)(v11);
  }

  else
  {
    uint64_t v12 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v171 = v2;
  uint64_t v203 = (uint64_t)v12;
  sub_100029B20(v10, 1, &v203);
  swift_bridgeObjectRelease(v10);
  uint64_t v13 = v203;
  v185 = (char *)_swiftEmptyArrayStorage;
  v233 = (char *)_swiftEmptyArrayStorage;
  uint64_t v14 = sub_100020020();
  uint64_t v231 = 0LL;
  uint64_t v232 = 0LL;
  v230 = v14;
  uint64_t v169 = v14;
  swift_bridgeObjectRetain(v14);
  sub_10001E47C(v15, (uint64_t)&v200);
  sub_10002AACC((uint64_t)&v200, (uint64_t)v202, &qword_1000B9020);
  sub_10002AACC((uint64_t)v202, (uint64_t)&v203, &qword_1000B9020);
  if (sub_10002A97C((uint64_t)&v203) == 1)
  {
LABEL_7:
    swift_release(v13);
    swift_bridgeObjectRelease(v169);
    swift_bridgeObjectRelease(v230);
    swift_bridgeObjectRelease(v185);
    uint64_t v16 = swift_allocObject(v171, 64LL, 7LL);
    *(_OWORD *)(v16 + 16) = xmmword_100096510;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 32) = 0LL;
    *(void *)(v16 + 40) = 0xE000000000000000LL;
    print(_:separator:terminator:)(v16, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    return swift_bridgeObjectRelease(v16);
  }

  else
  {
    v185 = (char *)_swiftEmptyArrayStorage;
    uint64_t v183 = v13;
    uint64_t v184 = v1;
    while (1)
    {
      uint64_t v19 = v203;
      uint64_t v20 = v204;
      int v21 = v205;
      int v22 = v208;
      uint64_t v23 = v222;
      uint64_t v24 = v226;
      uint64_t v25 = v227;
      uint64_t v190 = v206;
      uint64_t v234 = v206;
      int v235 = v207;
      int v236 = v208;
      char v237 = v209;
      char v238 = v210;
      char v239 = v211;
      char v240 = v212;
      int v241 = v213;
      char v242 = v214;
      char v243 = v215;
      char v244 = v216;
      char v245 = v217;
      char v246 = v218;
      char v247 = v219;
      mach_port_name_t name = v220;
      mach_port_name_t v248 = v220;
      char v249 = v221;
      __int128 v251 = v223;
      uint64_t v181 = (uint64_t)v222;
      v250 = v222;
      uint64_t v252 = v224;
      uint64_t v253 = v225;
      uint64_t v254 = v226;
      uint64_t v255 = v227;
      uint64_t v256 = v228;
      char v257 = v229;
      int64_t v26 = *((void *)v185 + 2);
      uint64_t v188 = v223;
      int v178 = v213;
      char v179 = v229;
      char v180 = v221;
      uint64_t v172 = v228;
      uint64_t v175 = v224;
      uint64_t v176 = v225;
      sub_100029D48(v204, v26);
      uint64_t v23 = v233;
      if ((swift_isUniquelyReferenced_nonNull_native(v233) & 1) == 0) {
        uint64_t v23 = sub_1000127B4(0LL, *((void *)v23 + 2) + 1LL, 1, v23);
      }
      unint64_t v28 = *((void *)v23 + 2);
      unint64_t v27 = *((void *)v23 + 3);
      if (v28 >= v27 >> 1) {
        uint64_t v23 = sub_1000127B4((char *)(v27 > 1), v28 + 1, 1, v23);
      }
      *((void *)v23 + 2) = v28 + 1;
      v23[v28 + 32] = v21;
      v233 = v23;
      unint64_t v29 = v19 - 1;
      uint64_t v170 = v19;
      uint64_t v177 = v24;
      if (v19 < 1)
      {
        uint64_t v30 = -1LL;
      }

      else
      {
        if (v29 >= v169[2]) {
          goto LABEL_83;
        }
        uint64_t v30 = v169[16 * v29 + 4];
      }

      uint64_t v194 = v30;
      uint64_t v31 = swift_allocObject(&unk_1000AF7E0, 32LL, 7LL);
      *(void *)(v31 + 16) = 0LL;
      uint64_t v32 = v31 + 16;
      uint64_t v186 = v31;
      *(void *)(v31 + 24) = 0xE000000000000000LL;
      swift_beginAccess(v31 + 16, &v200, 33LL, 0LL);
      swift_bridgeObjectRetain(v23);
      uint64_t v33 = 0LL;
      unint64_t v34 = v28 + 1;
      do
      {
        if (v23[v33++ + 32]) {
          uint64_t v36 = 0x2020202020LL;
        }
        else {
          uint64_t v36 = 0x207C202020LL;
        }
        unint64_t v37 = 0xE500000000000000LL;
        String.append(_:)(*(Swift::String *)&v36);
      }

      while (v34 != v33);
      swift_endAccess(&v200);
      v185 = v23;
      swift_bridgeObjectRelease(v23);
      swift_beginAccess(v32, &v200, 33LL, 0LL);
      v38._char countAndFlagsBits = 2105376LL;
      v38._object = (void *)0xE300000000000000LL;
      String.append(_:)(v38);
      swift_endAccess(&v200);
      uint64_t v39 = *(void *)(v186 + 16);
      unint64_t v40 = *(void *)(v186 + 24);
      swift_bridgeObjectRetain(v40);
      uint64_t v193 = v39;
      uint64_t v41 = sub_100029E48(5LL, v39, v40);
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      swift_bridgeObjectRelease(v40);
      uint64_t v48 = 2960736LL;
      if (!v21) {
        uint64_t v48 = 2960683LL;
      }
      if (v20) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 2105376LL;
      }
      uint64_t v200 = v49;
      v201 = (void *)0xE300000000000000LL;
      swift_bridgeObjectRetain(0xE300000000000000LL);
      uint64_t v198 = static String._fromSubstring(_:)(v41, v43, v45, v47);
      uint64_t v199 = v50;
      String.append<A>(contentsOf:)(&v200, &type metadata for String, &protocol witness table for String);
      uint64_t v51 = Substring.init(_:)(v198, v199);
      uint64_t v53 = v52;
      uint64_t v55 = v54;
      uint64_t v57 = v56;
      swift_bridgeObjectRelease(v47);
      uint64_t v58 = static String._fromSubstring(_:)(v51, v53, v55, v57);
      uint64_t v196 = v59;
      swift_bridgeObjectRelease(v57);
      if (v194 < (uint64_t)v20)
      {
        uint64_t v60 = swift_allocObject(v171, 64LL, 7LL);
        *(_OWORD *)(v60 + 16) = xmmword_100096510;
        *(void *)(v60 + 56) = &type metadata for String;
        *(void *)(v60 + 32) = v193;
        *(void *)(v60 + 40) = v40;
        swift_bridgeObjectRetain(v40);
        print(_:separator:terminator:)(v60, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
        swift_bridgeObjectRelease(v60);
      }

      uint64_t v61 = swift_allocObject(&unk_1000AF808, 17LL, 7LL);
      *(_BYTE *)(v61 + 16) = 1;
      v192 = (_BYTE *)(v61 + 16);
      uint64_t v62 = *(void *)(v184 + 24);
      uint64_t v63 = *(void *)(v62 + 48);
      uint64_t v64 = *(void *)(v62 + 56);
      if (qword_1000B86D0 != -1) {
        swift_once(&qword_1000B86D0, sub_10001E0D4);
      }
      uint64_t v195 = v58;
      uint64_t v174 = v188;
      uint64_t v65 = off_1000BA488(v63, v64, v188, 0x8000000000000000LL);
      uint64_t v67 = v66;
      if (qword_1000B86B8 != -1) {
        swift_once(&qword_1000B86B8, sub_10001DFA8);
      }
      uint64_t v68 = off_1000BA470(v65, v67);
      uint64_t v70 = v69;
      if (qword_1000B86C8 != -1) {
        swift_once(&qword_1000B86C8, sub_10001E070);
      }
      uint64_t v71 = off_1000BA480(v68, v70);
      if (v71)
      {
        uint64_t v72 = String.init(cString:)(v71);
        unint64_t v74 = v73;
      }

      else
      {
        uint64_t v72 = 0LL;
        unint64_t v74 = 0LL;
      }

      if (qword_1000B86B0 != -1) {
        swift_once(&qword_1000B86B0, sub_10001DF3C);
      }
      uint64_t v189 = v61;
      uint64_t v75 = off_1000BA468(v65, v67);
      if (v75)
      {
        String.init(cString:)(v75);
        swift_bridgeObjectRelease(v76);
      }

      if (v74) {
        uint64_t v77 = v72;
      }
      else {
        uint64_t v77 = 0x6E776F6E6B6E753CLL;
      }
      if (v74) {
        unint64_t v78 = v74;
      }
      else {
        unint64_t v78 = 0xE90000000000003ELL;
      }
      v173._char countAndFlagsBits = v77;
      v173._object = (void *)v78;
      swift_retain(v184);
      uint64_t v79 = swift_bridgeObjectRetain(v25);
      v187 = sub_100029ED0(v79);
      swift_release(v184);
      swift_bridgeObjectRelease(v25);
      uint64_t v80 = sub_100029FB4(&v234);
      unsigned int v82 = v81;
      uint64_t v200 = 0LL;
      v201 = (void *)0xE000000000000000LL;
      _StringGuts.grow(_:)(63LL);
      v83._char countAndFlagsBits = 0x206B736154LL;
      v83._object = (void *)0xE500000000000000LL;
      String.append(_:)(v83);
      v84._char countAndFlagsBits = 30768LL;
      v84._object = (void *)0xE200000000000000LL;
      String.append(_:)(v84);
      uint64_t v198 = v181;
      unint64_t v85 = sub_1000058CC();
      v86._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v198, 16LL, 0LL, &type metadata for UInt64, v85);
      object = v86._object;
      String.append(_:)(v86);
      swift_bridgeObjectRelease(object);
      v88._char countAndFlagsBits = 0x7367616C66202D20LL;
      v88._object = (void *)0xE90000000000003DLL;
      String.append(_:)(v88);
      v89._char countAndFlagsBits = v80;
      v89._object = v82;
      String.append(_:)(v89);
      swift_bridgeObjectRelease(v82);
      v90._char countAndFlagsBits = 0xD000000000000011LL;
      v90._object = (void *)0x800000010009C7F0LL;
      String.append(_:)(v90);
      v91._char countAndFlagsBits = 30768LL;
      v91._object = (void *)0xE200000000000000LL;
      String.append(_:)(v91);
      LODWORD(v198) = v22;
      unint64_t v92 = sub_10002A938();
      v93._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v198, 16LL, 0LL, &type metadata for UInt32, v92);
      char v94 = v93._object;
      String.append(_:)(v93);
      swift_bridgeObjectRelease(v94);
      v95._char countAndFlagsBits = 0x6F69725078616D20LL;
      v95._object = (void *)0xED00003D79746972LL;
      String.append(_:)(v95);
      v96._char countAndFlagsBits = 30768LL;
      v96._object = (void *)0xE200000000000000LL;
      String.append(_:)(v96);
      LODWORD(v198) = v178;
      v97._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v198, 16LL, 0LL, &type metadata for UInt32, v92);
      uint64_t v98 = v97._object;
      String.append(_:)(v97);
      swift_bridgeObjectRelease(v98);
      v99._char countAndFlagsBits = 0x7373657264646120LL;
      v99._object = (void *)0xE90000000000003DLL;
      String.append(_:)(v99);
      v100._char countAndFlagsBits = 30768LL;
      v100._object = (void *)0xE200000000000000LL;
      String.append(_:)(v100);
      uint64_t v198 = v190;
      v101._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v198, 16LL, 0LL, &type metadata for UInt64, v85);
      uint64_t v102 = v101._object;
      String.append(_:)(v101);
      swift_bridgeObjectRelease(v102);
      uint64_t v103 = v201;
      sub_10002236C(v200, v201, v61, v195, v196, v186);
      swift_bridgeObjectRelease(v103);
      if (*(void *)(v183 + 16))
      {
        unint64_t v104 = sub_100023B88(v190);
        if ((v105 & 1) != 0)
        {
          uint64_t v106 = *(void *)(*(void *)(v183 + 56) + 8 * v104);
          uint64_t v200 = 0LL;
          v201 = (void *)0xE000000000000000LL;
          _StringGuts.grow(_:)(25LL);
          swift_bridgeObjectRelease(v201);
          uint64_t v200 = 0xD000000000000019LL;
          v201 = (void *)0x800000010009C8B0LL;
          uint64_t v198 = v106;
          v107._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v198, 16LL, 0LL, &type metadata for UInt64, v85);
          uint64_t v108 = v107._object;
          String.append(_:)(v107);
          swift_bridgeObjectRelease(v108);
          uint64_t v109 = v201;
          sub_10002236C(v200, v201, v61, v195, v196, v186);
          swift_bridgeObjectRelease(v109);
        }
      }

      if ((v179 & 1) == 0)
      {
        uint64_t v200 = 0x203A746E65726170LL;
        v201 = (void *)0xEA00000000007830LL;
        uint64_t v198 = v172;
        v110._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v198, 16LL, 0LL, &type metadata for UInt64, v85);
        char v111 = v110._object;
        String.append(_:)(v110);
        swift_bridgeObjectRelease(v111);
        int v112 = v201;
        sub_10002236C(v200, v201, v61, v195, v196, v186);
        swift_bridgeObjectRelease(v112);
      }

      v191 = (void *)v40;
      char v113 = v180;
      if (!name) {
        char v113 = 1;
      }
      if ((v113 & 1) == 0)
      {
        uint64_t v114 = sub_100011B0C(name);
        if ((v115 & 1) == 0)
        {
          uint64_t v116 = v114;
          uint64_t v200 = 0LL;
          v201 = (void *)0xE000000000000000LL;
          _StringGuts.grow(_:)(32LL);
          swift_bridgeObjectRelease(v201);
          uint64_t v200 = 0xD00000000000001ALL;
          v201 = (void *)0x800000010009C890LL;
          LODWORD(v198) = name;
          v117._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v198, 16LL, 0LL, &type metadata for UInt32, v92);
          char v118 = v117._object;
          String.append(_:)(v117);
          swift_bridgeObjectRelease(v118);
          v119._char countAndFlagsBits = 1029990688LL;
          v119._object = (void *)0xE400000000000000LL;
          String.append(_:)(v119);
          v120._char countAndFlagsBits = 30768LL;
          v120._object = (void *)0xE200000000000000LL;
          String.append(_:)(v120);
          uint64_t v198 = v116;
          v121._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v198, 16LL, 0LL, &type metadata for UInt64, v85);
          char v122 = v121._object;
          String.append(_:)(v121);
          swift_bridgeObjectRelease(v122);
          char v123 = v201;
          sub_10002236C(v200, v201, v61, v195, v196, v186);
          swift_bridgeObjectRelease(v123);
        }
      }

      uint64_t v23 = (char *)v187[2];
      if (v23)
      {
        uint64_t v124 = v187[4];
        char v125 = (void *)v187[5];
        uint64_t v200 = 0LL;
        v201 = (void *)0xE000000000000000LL;
        swift_bridgeObjectRetain(v125);
        _StringGuts.grow(_:)(19LL);
        swift_bridgeObjectRelease(v201);
        uint64_t v200 = 0xD000000000000011LL;
        v201 = (void *)0x800000010009C810LL;
        v126._char countAndFlagsBits = v124;
        v126._object = v125;
        String.append(_:)(v126);
        swift_bridgeObjectRelease(v125);
        uint64_t v127 = v201;
        sub_10002236C(v200, v201, v61, v195, v196, v186);
        swift_bridgeObjectRelease(v127);
        int v129 = v23 - 1;
        BOOL v128 = v23 == (char *)1;
        uint64_t v130 = v171;
        if (!v128)
        {
          swift_beginAccess(v192, v197, 1LL, 0LL);
          int v131 = (void **)(v187 + 7);
          do
          {
            uint64_t v132 = (uint64_t)*(v131 - 1);
            __int128 v133 = *v131;
            uint64_t v200 = 0LL;
            v201 = (void *)0xE000000000000000LL;
            swift_bridgeObjectRetain(v133);
            _StringGuts.grow(_:)(19LL);
            swift_bridgeObjectRelease(v201);
            uint64_t v200 = 0xD000000000000011LL;
            v201 = (void *)0x800000010009C830LL;
            v134._char countAndFlagsBits = v132;
            v134._object = v133;
            String.append(_:)(v134);
            swift_bridgeObjectRelease(v133);
            uint64_t v135 = v200;
            uint64_t v136 = v201;
            uint64_t v137 = v130;
            uint64_t v138 = swift_allocObject(v130, 64LL, 7LL);
            *(_OWORD *)(v138 + 16) = xmmword_100096510;
            if (*v192) {
              char v139 = (void *)v196;
            }
            else {
              char v139 = v191;
            }
            if (*v192) {
              uint64_t v140 = v195;
            }
            else {
              uint64_t v140 = v193;
            }
            uint64_t v141 = swift_bridgeObjectRetain(v139);
            uint64_t v200 = v140;
            v201 = v139;
            swift_bridgeObjectRetain(v141);
            v142._char countAndFlagsBits = v135;
            v142._object = v136;
            String.append(_:)(v142);
            swift_bridgeObjectRelease(v139);
            uint64_t v143 = v200;
            uint64_t v144 = v201;
            *(void *)(v138 + 56) = &type metadata for String;
            *(void *)(v138 + 32) = v143;
            *(void *)(v138 + 40) = v144;
            print(_:separator:terminator:)(v138, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
            uint64_t v145 = v138;
            uint64_t v130 = v137;
            swift_bridgeObjectRelease(v145);
            _BYTE *v192 = 0;
            swift_bridgeObjectRelease(v136);
            v131 += 2;
            --v129;
          }

          while (v129);
        }
      }

      swift_bridgeObjectRelease(v187);
      uint64_t v200 = 0LL;
      v201 = (void *)0xE000000000000000LL;
      _StringGuts.grow(_:)(25LL);
      swift_bridgeObjectRelease(v201);
      uint64_t v200 = 0xD000000000000011LL;
      v201 = (void *)0x800000010009C850LL;
      v146._char countAndFlagsBits = (uint64_t)sub_100020DBC(v174);
      __int16 v147 = v146._object;
      String.append(_:)(v146);
      swift_bridgeObjectRelease(v147);
      v148._char countAndFlagsBits = 544106784LL;
      v148._object = (void *)0xE400000000000000LL;
      String.append(_:)(v148);
      String.append(_:)(v173);
      swift_bridgeObjectRelease(v173._object);
      uint64_t v149 = v201;
      uint64_t v150 = v196;
      sub_10002236C(v200, v201, v61, v195, v196, v186);
      swift_bridgeObjectRelease(v149);
      uint64_t v200 = 0LL;
      v201 = (void *)0xE000000000000000LL;
      _StringGuts.grow(_:)(37LL);
      swift_bridgeObjectRelease(v201);
      uint64_t v200 = 0xD000000000000010LL;
      v201 = (void *)0x800000010009C870LL;
      uint64_t v198 = v175;
      v151._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v152 = v151._object;
      String.append(_:)(v151);
      swift_bridgeObjectRelease(v152);
      v153._char countAndFlagsBits = 0x6920736574796220LL;
      v153._object = (void *)0xEA0000000000206ELL;
      String.append(_:)(v153);
      uint64_t v198 = v176;
      v154._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      char v155 = v154._object;
      String.append(_:)(v154);
      swift_bridgeObjectRelease(v155);
      v156._char countAndFlagsBits = 0x736B6E75686320LL;
      v156._object = (void *)0xE700000000000000LL;
      String.append(_:)(v156);
      uint64_t v157 = v201;
      sub_10002236C(v200, v201, v61, v195, v196, v186);
      swift_bridgeObjectRelease(v157);
      uint64_t v158 = *(void *)(v177 + 16);
      if (v158)
      {
        if (v158 == 1) {
          uint64_t v159 = 0LL;
        }
        else {
          uint64_t v159 = 115LL;
        }
        if (v158 == 1) {
          uint64_t v160 = (void *)0xE000000000000000LL;
        }
        else {
          uint64_t v160 = (void *)0xE100000000000000LL;
        }
        uint64_t v200 = 0LL;
        v201 = (void *)0xE000000000000000LL;
        _StringGuts.grow(_:)(17LL);
        swift_bridgeObjectRelease(v201);
        uint64_t v200 = 8234LL;
        v201 = (void *)0xE200000000000000LL;
        uint64_t v198 = v158;
        v161._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
        uint64_t v162 = v161._object;
        String.append(_:)(v161);
        swift_bridgeObjectRelease(v162);
        v163._char countAndFlagsBits = 0x7420646C69686320LL;
        v163._object = (void *)0xEB000000006B7361LL;
        String.append(_:)(v163);
        v164._char countAndFlagsBits = v159;
        v164._object = v160;
        String.append(_:)(v164);
        uint64_t v165 = v160;
        uint64_t v150 = v196;
        swift_bridgeObjectRelease(v165);
        uint64_t v166 = v201;
        sub_10002236C(v200, v201, v189, v195, v196, v186);
        swift_bridgeObjectRelease(v166);
      }

      swift_bridgeObjectRelease(v150);
      swift_bridgeObjectRetain(v177);
      sub_10002A9C8(v202);
      uint64_t v167 = *(void *)(v177 + 16);
      swift_bridgeObjectRelease(v177);
      uint64_t v13 = v183;
      if (!v167 && v170 < v169[2] - 1LL)
      {
        uint64_t v168 = swift_allocObject(v171, 64LL, 7LL);
        *(_OWORD *)(v168 + 16) = xmmword_100096510;
        *(void *)(v168 + 56) = &type metadata for String;
        *(void *)(v168 + 32) = v193;
        *(void *)(v168 + 40) = v191;
        swift_bridgeObjectRetain(v191);
        print(_:separator:terminator:)(v168, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
        swift_bridgeObjectRelease(v168);
      }

      swift_release(v189);
      swift_release(v186);
      sub_10001E47C(v18, (uint64_t)&v200);
      sub_10002AACC((uint64_t)&v200, (uint64_t)v202, &qword_1000B9020);
      sub_10002AACC((uint64_t)v202, (uint64_t)&v203, &qword_1000B9020);
    }

    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    uint64_t result = swift_release(v23);
    __break(1u);
  }

  return result;
}

uint64_t sub_100022248(uint64_t result)
{
  int64_t v1 = 0LL;
  uint64_t v2 = result + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(result + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  while (v5)
  {
    unint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v8 = v7 | (v1 << 6);
LABEL_5:
    if ((*(_BYTE *)(*(void *)(result + 56) + 112 * v8 + 27) & 1) == 0) {
      return 1LL;
    }
  }

  int64_t v9 = v1 + 1;
  if (__OFADD__(v1, 1LL))
  {
    __break(1u);
    goto LABEL_26;
  }

  if (v9 >= v6) {
    return 0LL;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v9);
  ++v1;
  if (v10) {
    goto LABEL_22;
  }
  int64_t v1 = v9 + 1;
  if (v9 + 1 >= v6) {
    return 0LL;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v1);
  if (v10) {
    goto LABEL_22;
  }
  int64_t v1 = v9 + 2;
  if (v9 + 2 >= v6) {
    return 0LL;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v1);
  if (v10) {
    goto LABEL_22;
  }
  int64_t v1 = v9 + 3;
  if (v9 + 3 >= v6) {
    return 0LL;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v1);
  if (v10)
  {
LABEL_22:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v1 << 6);
    goto LABEL_5;
  }

  int64_t v11 = v9 + 4;
  if (v11 >= v6) {
    return 0LL;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v11);
  if (v10)
  {
    int64_t v1 = v11;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v1 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v1 >= v6) {
      return 0LL;
    }
    unint64_t v10 = *(void *)(v2 + 8 * v1);
    ++v11;
    if (v10) {
      goto LABEL_22;
    }
  }

uint64_t sub_10002236C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (_BYTE *)(a3 + 16);
  uint64_t v13 = sub_100005104(&qword_1000B8758);
  uint64_t v14 = swift_allocObject(v13, 64LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_100096510;
  swift_beginAccess(v12, v20, 0LL, 0LL);
  if ((*(_BYTE *)(a3 + 16) & 1) == 0)
  {
    swift_beginAccess(a6 + 16, v19, 0LL, 0LL);
    a4 = *(void *)(a6 + 16);
    a5 = *(void *)(a6 + 24);
  }

  uint64_t v15 = swift_bridgeObjectRetain(a5);
  v18[0] = a4;
  v18[1] = a5;
  swift_bridgeObjectRetain(v15);
  v16._char countAndFlagsBits = a1;
  v16._object = a2;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(a5);
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 32) = a4;
  *(void *)(v14 + 40) = a5;
  print(_:separator:terminator:)(v14, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  swift_bridgeObjectRelease(v14);
  uint64_t result = swift_beginAccess(v12, v18, 1LL, 0LL);
  *uint64_t v12 = 0;
  return result;
}

uint64_t sub_100022490()
{
  uint64_t v1 = sub_100005104(&qword_1000B8758);
  uint64_t v2 = swift_allocObject(v1, 64LL, 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_100096510;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 32) = 0x53524F544341LL;
  *(void *)(v2 + 40) = 0xE600000000000000LL;
  print(_:separator:terminator:)(v2, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  uint64_t v3 = swift_bridgeObjectRelease(v2);
  uint64_t v4 = sub_10001E9B0(v3);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  uint64_t v137 = *(void *)(v8 + 16);
  if (!v137) {
    return swift_bridgeObjectRelease(v8);
  }
  uint64_t v139 = *(void *)(v0 + 16);
  uint64_t v136 = v8 + 32;
  int64_t v9 = (uint64_t *)(v0 + 112);
  swift_beginAccess(v0 + 112, v148, 0LL, 0LL);
  unint64_t v10 = 0LL;
  uint64_t v138 = v1;
  Swift::String v134 = (uint64_t *)(v0 + 112);
  uint64_t v135 = v8;
  while (v10 < *(void *)(v8 + 16))
  {
    uint64_t v17 = *(void *)(v136 + 8 * v10);
    uint64_t v18 = v139;
    uint64_t v19 = swift_reflection_metadataForObject(v139, v17);
    uint64_t v20 = v19;
    uint64_t v21 = *v9;
    if (*(void *)(*v9 + 16))
    {
      unint64_t v22 = sub_100023B88(v19);
      if ((v23 & 1) != 0)
      {
        uint64_t v24 = (uint64_t *)(*(void *)(v21 + 56) + 16 * v22);
        uint64_t v26 = *v24;
        uint64_t v25 = (void *)v24[1];
        swift_bridgeObjectRetain(v25);
        goto LABEL_29;
      }
    }

    uint64_t v27 = swift_reflection_typeRefForMetadata(v139, v20);
    if (v27 && (uint64_t v28 = swift_reflection_copyNameForTypeRef(v139, v27, 0LL)) != 0)
    {
      unint64_t v29 = (void *)v28;
      uint64_t v26 = String.init(cString:)(v28);
      uint64_t v25 = v30;
      free(v29);
    }

    else
    {
      uint64_t v26 = 0LL;
      uint64_t v25 = 0LL;
    }

    swift_beginAccess(v9, &v143, 33LL, 0LL);
    swift_bridgeObjectRetain(v25);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v142._char countAndFlagsBits = *v9;
    char countAndFlagsBits = (void *)v142._countAndFlagsBits;
    *int64_t v9 = 0x8000000000000000LL;
    unint64_t v34 = sub_100023B88(v20);
    uint64_t v35 = countAndFlagsBits[2];
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      goto LABEL_67;
    }
    char v38 = v33;
    if (countAndFlagsBits[3] >= v37)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v1 = v138;
        if ((v33 & 1) == 0) {
          goto LABEL_26;
        }
      }

      else
      {
        sub_100026084();
        char countAndFlagsBits = (void *)v142._countAndFlagsBits;
        uint64_t v1 = v138;
        if ((v38 & 1) == 0) {
          goto LABEL_26;
        }
      }
    }

    else
    {
      sub_100024AC8(v37, isUniquelyReferenced_nonNull_native);
      char countAndFlagsBits = (void *)v142._countAndFlagsBits;
      unint64_t v39 = sub_100023B88(v20);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_69;
      }
      unint64_t v34 = v39;
      uint64_t v1 = v138;
      if ((v38 & 1) == 0)
      {
LABEL_26:
        countAndFlagsBits[(v34 >> 6) + 8] |= 1LL << v34;
        *(void *)(countAndFlagsBits[6] + 8 * v34) = v20;
        uint64_t v42 = (uint64_t *)(countAndFlagsBits[7] + 16 * v34);
        *uint64_t v42 = v26;
        v42[1] = (uint64_t)v25;
        uint64_t v43 = countAndFlagsBits[2];
        BOOL v44 = __OFADD__(v43, 1LL);
        uint64_t v45 = v43 + 1;
        if (v44) {
          goto LABEL_68;
        }
        countAndFlagsBits[2] = v45;
        goto LABEL_28;
      }
    }

    uint64_t v41 = (uint64_t *)(countAndFlagsBits[7] + 16 * v34);
    swift_bridgeObjectRelease(v41[1]);
    *uint64_t v41 = v26;
    v41[1] = (uint64_t)v25;
LABEL_28:
    uint64_t v46 = *v9;
    *int64_t v9 = (uint64_t)countAndFlagsBits;
    swift_bridgeObjectRelease(v46);
    swift_endAccess(&v143);
    uint64_t v18 = v139;
LABEL_29:
    if (v25) {
      uint64_t v47 = v25;
    }
    else {
      uint64_t v47 = (void *)0x800000010009C6F0LL;
    }
    swift_reflection_actorInfo(&v143, v18, v17);
    unint64_t v48 = v143;
    if (v143)
    {
      swift_bridgeObjectRelease(v47);
      uint64_t v11 = swift_allocObject(v1, 64LL, 7LL);
      *(_OWORD *)(v11 + 16) = xmmword_100096510;
      uint64_t v12 = String.init(utf8String:)(v48);
      *(void *)(v11 + 56) = &type metadata for String;
      uint64_t v14 = 0x6E776F6E6B6E753CLL;
      if (v13) {
        uint64_t v14 = v12;
      }
      unint64_t v15 = 0xEF3E726F72726520LL;
      if (v13) {
        unint64_t v15 = v13;
      }
      *(void *)(v11 + 32) = v14;
      *(void *)(v11 + 40) = v15;
      uint64_t v16 = v11;
    }

    else
    {
      mach_port_name_t v130 = HIDWORD(v146);
      uint64_t v131 = v146;
      if (v25) {
        uint64_t v49 = v26;
      }
      else {
        uint64_t v49 = 0xD000000000000014LL;
      }
      if (BYTE1(v144)) {
        int v50 = 256;
      }
      else {
        int v50 = 0;
      }
      int v51 = v50 | v144;
      if (BYTE2(v144)) {
        int v52 = 0x10000;
      }
      else {
        int v52 = 0;
      }
      uint64_t v132 = v145;
      unsigned int v133 = v133 & 0xFFFFFF00 | v146;
      sub_10002A660(v51 | v52 | (BYTE3(v144) << 24), (uint64_t)&v143);
      uint64_t v54 = v143;
      uint64_t v53 = (void *)v144;
      uint64_t v55 = v145;
      uint64_t v56 = v146;
      char v129 = v147;
      uint64_t v57 = swift_allocObject(v138, 64LL, 7LL);
      *(_OWORD *)(v57 + 16) = xmmword_100096510;
      unint64_t v143 = 0LL;
      unint64_t v144 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease(v144);
      unint64_t v143 = 2016419872LL;
      unint64_t v144 = 0xE400000000000000LL;
      v142._char countAndFlagsBits = v17;
      unint64_t v140 = sub_1000058CC();
      v58._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v142, 16LL, 0LL, &type metadata for UInt64, v140);
      object = v58._object;
      String.append(_:)(v58);
      swift_bridgeObjectRelease(object);
      v60._char countAndFlagsBits = 32LL;
      v60._object = (void *)0xE100000000000000LL;
      String.append(_:)(v60);
      v61._char countAndFlagsBits = v49;
      uint64_t v1 = v138;
      v61._object = v47;
      String.append(_:)(v61);
      swift_bridgeObjectRelease(v47);
      v62._char countAndFlagsBits = 0x3D657461747320LL;
      v62._object = (void *)0xE700000000000000LL;
      String.append(_:)(v62);
      v63._char countAndFlagsBits = v54;
      v63._object = v53;
      String.append(_:)(v63);
      v64._char countAndFlagsBits = 0x3D7367616C6620LL;
      v64._object = (void *)0xE700000000000000LL;
      String.append(_:)(v64);
      v65._char countAndFlagsBits = v55;
      v65._object = v56;
      String.append(_:)(v65);
      v66._char countAndFlagsBits = 0x6F69725078616D20LL;
      v66._object = (void *)0xED00003D79746972LL;
      String.append(_:)(v66);
      v67._char countAndFlagsBits = 30768LL;
      v67._object = (void *)0xE200000000000000LL;
      String.append(_:)(v67);
      LOBYTE(v142._countAndFlagsBits) = v129;
      unint64_t v68 = sub_10002A8F4();
      v69._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v142, 16LL, 0LL, &type metadata for UInt8, v68);
      uint64_t v70 = v69._object;
      String.append(_:)(v69);
      swift_bridgeObjectRelease(v70);
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease(v56);
      unint64_t v71 = v143;
      unint64_t v72 = v144;
      *(void *)(v57 + 56) = &type metadata for String;
      *(void *)(v57 + 32) = v71;
      *(void *)(v57 + 40) = v72;
      print(_:separator:terminator:)(v57, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
      swift_bridgeObjectRelease(v57);
      if (v131 && v130)
      {
        uint64_t v73 = sub_100011B0C(v130);
        if ((v74 & 1) != 0)
        {
          uint64_t v76 = swift_allocObject(v138, 64LL, 7LL);
          *(_OWORD *)(v76 + 16) = xmmword_100096510;
          unint64_t v143 = 0LL;
          unint64_t v144 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(50LL);
          swift_bridgeObjectRelease(v144);
          unint64_t v143 = 0xD00000000000001ELL;
          unint64_t v144 = 0x800000010009C770LL;
          LODWORD(v142._countAndFlagsBits) = v130;
          unint64_t v84 = sub_10002A938();
          v85._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v142, 16LL, 0LL, &type metadata for UInt32, v84);
          Swift::String v86 = v85._object;
          String.append(_:)(v85);
          swift_bridgeObjectRelease(v86);
          v87._char countAndFlagsBits = 0xD000000000000014LL;
          v87._object = (void *)0x800000010009C790LL;
          String.append(_:)(v87);
        }

        else
        {
          uint64_t v75 = v73;
          uint64_t v76 = swift_allocObject(v138, 64LL, 7LL);
          *(_OWORD *)(v76 + 16) = xmmword_100096510;
          unint64_t v143 = 0LL;
          unint64_t v144 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(36LL);
          swift_bridgeObjectRelease(v144);
          unint64_t v143 = 0xD00000000000001ELL;
          unint64_t v144 = 0x800000010009C770LL;
          LODWORD(v142._countAndFlagsBits) = v130;
          unint64_t v77 = sub_10002A938();
          v78._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v142, 16LL, 0LL, &type metadata for UInt32, v77);
          uint64_t v79 = v78._object;
          String.append(_:)(v78);
          swift_bridgeObjectRelease(v79);
          v80._char countAndFlagsBits = 1029990688LL;
          v80._object = (void *)0xE400000000000000LL;
          String.append(_:)(v80);
          v81._char countAndFlagsBits = 30768LL;
          v81._object = (void *)0xE200000000000000LL;
          String.append(_:)(v81);
          v142._char countAndFlagsBits = v75;
          v82._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v142, 16LL, 0LL, &type metadata for UInt64, v140);
          Swift::String v83 = v82._object;
          String.append(_:)(v82);
          swift_bridgeObjectRelease(v83);
        }

        unint64_t v89 = v143;
        unint64_t v88 = v144;
        *(void *)(v76 + 56) = &type metadata for String;
        *(void *)(v76 + 32) = v89;
        *(void *)(v76 + 40) = v88;
        print(_:separator:terminator:)(v76, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
        swift_bridgeObjectRelease(v76);
      }

      uint64_t v90 = swift_allocObject(v138, 64LL, 7LL);
      uint64_t v91 = v90;
      if (v132)
      {
        *(_OWORD *)(v90 + 16) = xmmword_100096510;
        unint64_t v143 = 0LL;
        unint64_t v144 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(17LL);
        swift_bridgeObjectRelease(v144);
        unint64_t v143 = 0x20626F6A20202020LL;
        unint64_t v144 = 0xEF203A6575657571LL;
        v92._char countAndFlagsBits = sub_100023064(v132);
        Swift::String v93 = v92._object;
        String.append(_:)(v92);
        swift_bridgeObjectRelease(v93);
        unint64_t v94 = v143;
        unint64_t v95 = v144;
        *(void *)(v91 + 56) = &type metadata for String;
        *(void *)(v91 + 32) = v94;
        *(void *)(v91 + 40) = v95;
        print(_:separator:terminator:)(v91, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
        swift_bridgeObjectRelease(v91);
        uint64_t v96 = v139;
        uint64_t Job = swift_reflection_nextJob(v139, v132);
        if (Job)
        {
          uint64_t v98 = Job;
          BOOL v99 = 0;
          for (uint64_t i = 1LL; ; ++i)
          {
            uint64_t v101 = swift_allocObject(v1, 64LL, 7LL);
            *(_OWORD *)(v101 + 16) = xmmword_100096510;
            unint64_t v143 = 0LL;
            unint64_t v144 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(17LL);
            swift_bridgeObjectRelease(v144);
            unint64_t v143 = 0x2020202020202020LL;
            unint64_t v144 = 0xEF20202020202020LL;
            uint64_t v102 = sub_10001EE58();
            if (*(void *)(v102 + 16) && (unint64_t v103 = sub_100023B88(v98), (v104 & 1) != 0))
            {
              char v105 = (void *)(*(void *)(v102 + 56) + 112 * v103);
              uint64_t v107 = v105[5];
              uint64_t v106 = v105[6];
              uint64_t v108 = v105[10];
              uint64_t v109 = v105[11];
              swift_bridgeObjectRetain(v108);
              swift_bridgeObjectRetain(v109);
              swift_bridgeObjectRelease(v102);
              uint64_t v141 = v107;
              v142._char countAndFlagsBits = 0x7830206B736154LL;
              v142._object = (void *)0xE700000000000000LL;
              v110._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)( &v141,  16LL,  0LL,  &type metadata for UInt64,  v140);
              char v111 = v110._object;
              String.append(_:)(v110);
              swift_bridgeObjectRelease(v111);
              v112._char countAndFlagsBits = 32LL;
              v112._object = (void *)0xE100000000000000LL;
              String.append(_:)(v112);
              char v113 = sub_100020DBC(v106);
              char v115 = v114;
              uint64_t v116 = v108;
              uint64_t v96 = v139;
              swift_bridgeObjectRelease(v116);
              swift_bridgeObjectRelease(v109);
              v117._char countAndFlagsBits = (uint64_t)v113;
              v117._object = v115;
              String.append(_:)(v117);
              char v118 = v115;
              uint64_t v1 = v138;
              swift_bridgeObjectRelease(v118);
            }

            else
            {
              swift_bridgeObjectRelease(v102);
              v142._char countAndFlagsBits = 0LL;
              v142._object = (void *)0xE000000000000000LL;
              _StringGuts.grow(_:)(17LL);
              swift_bridgeObjectRelease(v142._object);
              v142._char countAndFlagsBits = 0xD000000000000010LL;
              v142._object = (void *)0x800000010009C710LL;
              uint64_t v141 = v98;
              v119._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)( &v141,  16LL,  0LL,  &type metadata for UInt64,  v140);
              Swift::String v120 = v119._object;
              String.append(_:)(v119);
              swift_bridgeObjectRelease(v120);
              v121._char countAndFlagsBits = 62LL;
              v121._object = (void *)0xE100000000000000LL;
              String.append(_:)(v121);
            }

            char v122 = v142._object;
            String.append(_:)(v142);
            swift_bridgeObjectRelease(v122);
            unint64_t v123 = v143;
            unint64_t v124 = v144;
            *(void *)(v101 + 56) = &type metadata for String;
            *(void *)(v101 + 32) = v123;
            *(void *)(v101 + 40) = v124;
            print(_:separator:terminator:)(v101, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
            swift_bridgeObjectRelease(v101);
            if (v99)
            {
              uint64_t v91 = swift_allocObject(v1, 64LL, 7LL);
              unint64_t v127 = 0x800000010009C730LL;
              unint64_t v126 = 0xD00000000000001ELL;
              goto LABEL_61;
            }

            if (__OFADD__(i, 1LL)) {
              break;
            }
            uint64_t v125 = swift_reflection_nextJob(v96, v98);
            if (!v125) {
              goto LABEL_62;
            }
            uint64_t v98 = v125;
            BOOL v99 = i == 999;
          }

          __break(1u);
          break;
        }
      }

      else
      {
        unint64_t v126 = 0xD000000000000012LL;
        unint64_t v127 = 0x800000010009C750LL;
LABEL_61:
        *(_OWORD *)(v91 + 16) = xmmword_100096510;
        *(void *)(v91 + 56) = &type metadata for String;
        *(void *)(v91 + 32) = v126;
        *(void *)(v91 + 40) = v127;
        print(_:separator:terminator:)(v91, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
        swift_bridgeObjectRelease(v91);
      }

LABEL_62:
      uint64_t v16 = swift_allocObject(v1, 64LL, 7LL);
      uint64_t v11 = v16;
      *(_OWORD *)(v16 + 16) = xmmword_100096510;
      *(void *)(v16 + 56) = &type metadata for String;
      *(void *)(v16 + 32) = 0LL;
      *(void *)(v16 + 40) = 0xE000000000000000LL;
    }

    print(_:separator:terminator:)(v16, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    swift_bridgeObjectRelease(v11);
    ++v10;
    int64_t v9 = v134;
    uint64_t v8 = v135;
    if (v10 == v137) {
      return swift_bridgeObjectRelease(v135);
    }
  }

  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

unint64_t sub_100023064(uint64_t a1)
{
  uint64_t v2 = sub_10001EE58();
  if (*(void *)(v2 + 16) && (unint64_t v3 = sub_100023B88(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = (void *)(*(void *)(v2 + 56) + 112 * v3);
    uint64_t v7 = v5[5];
    uint64_t v6 = v5[6];
    uint64_t v9 = v5[10];
    uint64_t v8 = v5[11];
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRelease(v2);
    unint64_t v24 = 0x7830206B736154LL;
    unint64_t v25 = 0xE700000000000000LL;
    uint64_t v23 = v7;
    unint64_t v10 = sub_1000058CC();
    v11._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v23, 16LL, 0LL, &type metadata for UInt64, v10);
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._char countAndFlagsBits = 32LL;
    v13._object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    uint64_t v14 = sub_100020DBC(v6);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v8);
    v17._char countAndFlagsBits = (uint64_t)v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v16);
  }

  else
  {
    swift_bridgeObjectRelease(v2);
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v24 = 0xD000000000000010LL;
    unint64_t v25 = 0x800000010009C710LL;
    uint64_t v23 = a1;
    unint64_t v18 = sub_1000058CC();
    v19._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v23, 16LL, 0LL, &type metadata for UInt64, v18);
    uint64_t v20 = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v20);
    v21._char countAndFlagsBits = 62LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
  }

  return v24;
}

uint64_t sub_100023214()
{
  uint64_t v0 = sub_100005104(&qword_1000B8758);
  uint64_t v1 = swift_allocObject(v0, 64LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_100096510;
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 32) = 0x53444145524854LL;
  *(void *)(v1 + 40) = 0xE700000000000000LL;
  print(_:separator:terminator:)(v1, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  swift_bridgeObjectRelease(v1);
  uint64_t v2 = sub_10001EBB8();
  uint64_t v3 = v2[2];
  swift_bridgeObjectRelease(v2);
  if (!v3)
  {
    uint64_t v33 = swift_allocObject(v0, 64LL, 7LL);
    *(_OWORD *)(v33 + 16) = xmmword_100096510;
    *(void *)(v33 + 56) = &type metadata for String;
    *(void *)(v33 + 32) = 0xD00000000000001ELL;
    *(void *)(v33 + 40) = 0x800000010009C6D0LL;
    print(_:separator:terminator:)(v33, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    char v4 = (void *)v33;
    return swift_bridgeObjectRelease(v4);
  }

  char v4 = sub_10001EBB8();
  uint64_t v5 = v4[2];
  if (!v5) {
    return swift_bridgeObjectRelease(v4);
  }
  uint64_t v6 = v4 + 5;
  uint64_t v35 = v4;
  do
  {
    uint64_t v36 = v5;
    uint64_t v22 = *(v6 - 1);
    uint64_t v21 = *v6;
    uint64_t v23 = sub_10001EE58();
    if (*(void *)(v23 + 16) && (unint64_t v24 = sub_100023B88(v21), (v25 & 1) != 0))
    {
      uint64_t v26 = (void *)(*(void *)(v23 + 56) + 112 * v24);
      uint64_t v27 = v26[5];
      uint64_t v28 = v26[10];
      uint64_t v29 = v26[11];
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRelease(v23);
      uint64_t v37 = v27;
      unint64_t v38 = 30768LL;
      unint64_t v39 = 0xE200000000000000LL;
      unint64_t v30 = sub_1000058CC();
      v31._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v37, 16LL, 0LL, &type metadata for UInt64, v30);
      object = v31._object;
      String.append(_:)(v31);
      swift_bridgeObjectRelease(object);
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(v29);
      uint64_t v11 = v38;
      uint64_t v12 = (void *)v39;
    }

    else
    {
      swift_bridgeObjectRelease(v23);
      unint64_t v38 = 0LL;
      unint64_t v39 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v39);
      unint64_t v38 = 0xD000000000000010LL;
      unint64_t v39 = 0x800000010009C6B0LL;
      uint64_t v37 = v21;
      unint64_t v7 = sub_1000058CC();
      v8._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v37, 16LL, 0LL, &type metadata for UInt64, v7);
      uint64_t v9 = v8._object;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(v9);
      v10._char countAndFlagsBits = 62LL;
      v10._object = (void *)0xE100000000000000LL;
      String.append(_:)(v10);
      uint64_t v11 = v38;
      uint64_t v12 = (void *)v39;
    }

    v6 += 2;
    uint64_t v13 = swift_allocObject(v0, 64LL, 7LL);
    *(_OWORD *)(v13 + 16) = xmmword_100096510;
    unint64_t v38 = 0LL;
    unint64_t v39 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(30LL);
    swift_bridgeObjectRelease(v39);
    uint64_t v37 = v22;
    unint64_t v38 = 0x6461657268542020LL;
    unint64_t v39 = 0xEB00000000783020LL;
    unint64_t v14 = sub_1000058CC();
    v15._char countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v37, 16LL, 0LL, &type metadata for UInt64, v14);
    uint64_t v16 = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v16);
    v17._char countAndFlagsBits = 0xD000000000000011LL;
    v17._object = (void *)0x800000010009C690LL;
    String.append(_:)(v17);
    v18._char countAndFlagsBits = v11;
    v18._object = v12;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v12);
    unint64_t v19 = v38;
    unint64_t v20 = v39;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 32) = v19;
    *(void *)(v13 + 40) = v20;
    print(_:separator:terminator:)(v13, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    swift_bridgeObjectRelease(v13);
    uint64_t v5 = v36 - 1;
  }

  while (v36 != 1);
  return swift_bridgeObjectRelease(v35);
}

uint64_t sub_1000235BC()
{
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

uint64_t type metadata accessor for ConcurrencyDumper()
{
  return objc_opt_self(&OBJC_CLASS____TtC13swift_inspectP33_31DA31BAE2EEE32C2751846C4175259517ConcurrencyDumper);
}

uint64_t destroy for ConcurrencyDumper.TaskInfo(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 88));
}

uint64_t initializeWithCopy for ConcurrencyDumper.TaskInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for ConcurrencyDumper.TaskInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  int v4 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 80);
  uint64_t v6 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 88);
  uint64_t v8 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v9;
  return a1;
}

__n128 initializeWithTake for ConcurrencyDumper.TaskInfo(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ConcurrencyDumper.TaskInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(*(void *)(a1 + 80));
  uint64_t v4 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConcurrencyDumper.TaskInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConcurrencyDumper.TaskInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 105) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ConcurrencyDumper.TaskInfo()
{
  return &type metadata for ConcurrencyDumper.TaskInfo;
}

uint64_t destroy for ConcurrencyDumper.HeapInfo(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s13swift_inspect17ConcurrencyDumperC8HeapInfoVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for ConcurrencyDumper.HeapInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *assignWithTake for ConcurrencyDumper.HeapInfo(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SplitArguments(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SplitArguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ConcurrencyDumper.HeapInfo()
{
  return &type metadata for ConcurrencyDumper.HeapInfo;
}

unint64_t sub_100023B88(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_100023C50(a1, v3);
}

unint64_t sub_100023BB8(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100023CEC(a1, a2, v5);
}

unint64_t sub_100023C1C(unsigned __int8 a1)
{
  uint64_t v3 = static Hasher._hash(seed:bytes:count:)(*(void *)(v1 + 40), a1, 1LL);
  return sub_100023DCC(a1, v3);
}

unint64_t sub_100023C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_100023CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    Swift::String v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_100023DCC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

uint64_t sub_100023E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005104(&qword_1000B9070);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    Swift::String v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = -1LL << v11;
    uint64_t v34 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v22 >= v35) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v34 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v35);
                }
                else {
                  *Swift::String v10 = v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_44;
                }
                if (v9 >= v35) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

Swift::Int sub_100024120(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005104(&qword_1000B9080);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  char v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    char v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

uint64_t sub_100024444(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005104(&qword_1000B9058);
  char v42 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    char v40 = (uint64_t *)(v5 + 64);
    uint64_t v41 = v5;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = -1LL << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v37 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v38 = v3;
    int64_t v39 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }

      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        uint64_t result = (uint64_t)v40;
        if (v21 >= v39) {
          goto LABEL_36;
        }
        unint64_t v22 = v40[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_36;
          }
          unint64_t v22 = v40[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_36:
              if ((v42 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v38;
                goto LABEL_43;
              }

              if (v37 >= 64) {
                bzero(v40, 8 * v39);
              }
              else {
                *char v40 = v36;
              }
              uint64_t v3 = v38;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v39) {
                  goto LABEL_36;
                }
                unint64_t v22 = v40[v9];
                ++v23;
                if (v22) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v23;
          }
        }

uint64_t sub_100024824(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005104(&qword_1000B9018);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v36 = a2;
    uint64_t v35 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = -1LL << v11;
    uint64_t v34 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v20 >= v14) {
          goto LABEL_34;
        }
        unint64_t v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v14) {
            goto LABEL_34;
          }
          unint64_t v21 = v10[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v35;
                goto LABEL_41;
              }

              if (v34 >= 64) {
                bzero((void *)(v5 + 64), 8 * v14);
              }
              else {
                *uint64_t v10 = v33;
              }
              uint64_t v3 = v35;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v14) {
                  goto LABEL_34;
                }
                unint64_t v21 = v10[v9];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v22;
          }
        }

uint64_t sub_100024AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005104(&qword_1000B9000);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v30 = -1LL << v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    uint64_t v31 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v32 = v3;
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v22 >= v14) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v14) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v32;
                goto LABEL_43;
              }

              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v14);
              }
              else {
                *uint64_t v10 = v30;
              }
              uint64_t v3 = v32;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v14) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

uint64_t sub_100024D78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005104(&qword_1000B9040);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v34 = a2;
    __int128 v33 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v31 = -1LL << v11;
    uint64_t v32 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }

      else
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v19 >= v14) {
          goto LABEL_34;
        }
        unint64_t v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          int64_t v9 = v19 + 1;
          if (v19 + 1 >= v14) {
            goto LABEL_34;
          }
          unint64_t v20 = v10[v9];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v33;
                goto LABEL_41;
              }

              if (v32 >= 64) {
                bzero((void *)(v5 + 64), 8 * v14);
              }
              else {
                *uint64_t v10 = v31;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v14) {
                  goto LABEL_34;
                }
                unint64_t v20 = v10[v9];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v21;
          }
        }

unint64_t sub_100025014(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        int64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          int64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *unint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  uint64_t v7 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (char *)swift_arrayInitWithCopy(&v3[16 * v7 + 32], v6 + 32, v2, &type metadata for String);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (char *)swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  unint64_t v8 = *((void *)v3 + 2);
  int64_t v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *((void *)v3 + 2) = v10;
    goto LABEL_14;
  }

  uint64_t v7 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (char *)swift_arrayInitWithCopy(&v3[64 * v7 + 32], v6 + 32, v2, &type metadata for SplitArguments.Element);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (char *)swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  unint64_t v8 = *((void *)v3 + 2);
  int64_t v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *((void *)v3 + 2) = v10;
    goto LABEL_14;
  }

  uint64_t v7 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (char *)swift_arrayInitWithCopy(&v3[56 * v7 + 32], v6 + 32, v2, &type metadata for DecodedArguments);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (char *)swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  unint64_t v8 = *((void *)v3 + 2);
  int64_t v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *((void *)v3 + 2) = v10;
    goto LABEL_14;
  }

  uint64_t v7 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (char *)swift_arrayInitWithCopy(&v3[24 * v7 + 32], v6 + 32, v2, &type metadata for Name);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (char *)swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  unint64_t v8 = *((void *)v3 + 2);
  int64_t v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *((void *)v3 + 2) = v10;
    goto LABEL_14;
  }

  uint64_t v7 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (char *)swift_arrayInitWithCopy(&v3[48 * v7 + 32], v6 + 32, v2, &type metadata for HelpGenerator.Section);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (char *)swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  unint64_t v8 = *((void *)v3 + 2);
  int64_t v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *((void *)v3 + 2) = v10;
    goto LABEL_14;
  }

  uint64_t v7 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (char *)swift_arrayInitWithCopy(&v3[32 * v7 + 32], v6 + 32, v2, &type metadata for Substring);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (char *)swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  unint64_t v8 = *((void *)v3 + 2);
  int64_t v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *((void *)v3 + 2) = v10;
    goto LABEL_14;
  }

  uint64_t v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v8 = (uint64_t)&v3[5 * v7 + 4];
  int64_t v9 = sub_100005104(&qword_1000B98A8);
  uint64_t result = (void *)swift_arrayInitWithCopy(v8, v6 + 4, v2, v9);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v10 = v3[2];
  uint64_t v11 = __OFADD__(v10, v2);
  Swift::Int v12 = v10 + v2;
  if (!v11)
  {
    v3[2] = v12;
    goto LABEL_14;
  }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    BOOL v29 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1LL << v3) - 1;
  }

  else
  {
    BOOL v29 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1LL << result) - 1;
  }

  *BOOL v29 = v31 & v30;
  uint64_t v32 = *(void *)(v2 + 16);
  __int128 v33 = __OFSUB__(v32, 1LL);
  char v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = v34;
    ++*(_DWORD *)(v2 + 36);
  }

  return result;
}

        if (v6 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }

      if (v18 != 2)
      {
        int64_t v19 = 6LL;
        while (1)
        {
          unint64_t v20 = v19 - 3;
          if (__OFADD__(v19 - 4, 1LL)) {
            break;
          }
          if (a4[v19] == v16) {
            goto LABEL_5;
          }
          ++v19;
          if (v20 == v18) {
            goto LABEL_25;
          }
        }

        __break(1u);
LABEL_32:
        __break(1u);
        return result;
      }

unint64_t sub_1000251E8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), *v10);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t result = v15 + 112 * v3;
            unint64_t v16 = (const void *)(v15 + 112 * v6);
            if (112 * v3 < (uint64_t)(112 * v6)
              || result >= (unint64_t)v16 + 112
              || (v17 = v3 == v6, int64_t v3 = v6, !v17))
            {
              uint64_t result = (unint64_t)memmove((void *)result, v16, 0x70uLL);
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1LL << result) - 1;
  }

  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_100025394(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100023B88(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100025930();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease(*(void *)(v17 + 8 * v10));
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }

LABEL_11:
    v16[(v10 >> 6) + 8] |= 1LL << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }

    goto LABEL_14;
  }

  sub_100023E6C(result, a3 & 1);
  uint64_t result = sub_100023B88(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v25 = a3;
    v25[1] = a4;
    unint64_t v26 = (void *)(v20[7] + 16 * v14);
    *unint64_t v26 = a1;
    v26[1] = a2;
    char v27 = v20[2];
    unint64_t v28 = __OFADD__(v27, 1LL);
    BOOL v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }

    goto LABEL_14;
  }

  sub_100024120(v17, a5 & 1);
  uint64_t v23 = sub_100023BB8(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    char v14 = v23;
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    *(void *)(v16[6] + 8 * v10) = a2;
    *(_BYTE *)(v16[7] + v10) = a1 & 1;
    char v18 = v16[2];
    uint64_t v19 = __OFADD__(v18, 1LL);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }

    goto LABEL_14;
  }

  sub_100024D78(result, a3 & 1);
  uint64_t result = sub_100023B88(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

      unint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

    v16[(v11 >> 6) + 8] |= 1LL << v11;
    uint64_t v19 = v16[6] + 24 * v11;
    *(void *)uint64_t v19 = v7;
    *(void *)(v19 + 8) = v6;
    *(_BYTE *)(v19 + 16) = v8;
    *(void *)(v16[7] + 8 * v11) = v42;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    v16[2] = v22;
    goto LABEL_13;
  }

  return result;
}

LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        if (v7 == 1)
        {
          uint64_t v35 = 0LL;
          char v36 = 0xE000000000000000LL;
          v21._char countAndFlagsBits = 45LL;
          v21._object = (void *)0xE100000000000000LL;
          String.append(_:)(v21);
          Character.write<A>(to:)( &v35,  v32._countAndFlagsBits,  v32._object,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          goto LABEL_19;
        }

        uint64_t v35 = 45LL;
        char v18 = 0xE100000000000000LL;
LABEL_18:
        char v36 = v18;
        String.append(_:)(v32);
LABEL_19:
        uint64_t v22 = v36;
        sub_1000872F4(v35, v36, v16, v17);
        BOOL v24 = v23;
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v22);
        if (v24 < a5) {
          break;
        }
        uint64_t result = sub_10002DA24(v13, (uint64_t)v12, v14);
        ++v6;
        if (v31 + v6 == 1) {
          return (uint64_t)v30;
        }
      }

      char v9 = v30;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v30);
      uint64_t v37 = v30;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10004FED4(0LL, v30[2] + 1LL, 1);
        char v9 = v37;
      }

      unint64_t v26 = v9[2];
      uint64_t v25 = v9[3];
      if (v26 >= v25 >> 1)
      {
        uint64_t result = (uint64_t)sub_10004FED4((char *)(v25 > 1), v26 + 1, 1);
        char v9 = v37;
      }

      void v9[2] = v26 + 1;
      char v27 = &v9[3 * v26];
      v27[4] = v13;
      v27[5] = v12;
      *((_BYTE *)v27 + 48) = v14;
      uint64_t v8 = v28;
      uint64_t v5 = v29;
      if (!(v31 + v6)) {
        return (uint64_t)v9;
      }
    }
  }

  return (uint64_t)_swiftEmptyArrayStorage;
}

  if (v5 == v3 && v6 == v2)
  {
    uint64_t v8 = 1;
    uint64_t v2 = v6;
  }

  else
  {
    uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

uint64_t sub_1000254CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100023BB8(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100025AD0();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      BOOL v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease(v21[1]);
      *BOOL v21 = a1;
      v21[1] = a2;
      return result;
    }

uint64_t sub_100025640(__int128 *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100023B88(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100025C88();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      return sub_10002ABF0((uint64_t)a1, v16[7] + 112 * v10);
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1LL << v10;
    *(void *)(v16[6] + 8 * v10) = a2;
    char v18 = (_OWORD *)(v16[7] + 112 * v10);
    __int128 v19 = *a1;
    __int128 v20 = a1[2];
    v18[1] = a1[1];
    v18[2] = v20;
    *char v18 = v19;
    __int128 v21 = a1[3];
    __int128 v22 = a1[4];
    __int128 v23 = a1[5];
    *(_OWORD *)((char *)v18 + 89) = *(__int128 *)((char *)a1 + 89);
    void v18[4] = v22;
    v18[5] = v23;
    void v18[3] = v21;
    uint64_t v24 = v16[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (!v25)
    {
      v16[2] = v26;
      return result;
    }

    goto LABEL_14;
  }

  sub_100024444(result, a3 & 1);
  uint64_t result = sub_100023B88(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      return sub_10002ABF0((uint64_t)a1, v16[7] + 112 * v10);
    }
    goto LABEL_11;
  }

uint64_t sub_1000257B0(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100023B88(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10002622C();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v16[7] + v10) = a1 & 1;
      return result;
    }

unint64_t sub_1000258E0( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  unint64_t v6 = (void *)(a6[6] + 16 * result);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

void *sub_100025930()
{
  uint64_t v1 = v0;
  sub_100005104(&qword_1000B9070);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain(v17);
  }

  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    __int128 v21 = *v20;
    __int128 v22 = v20[1];
    __int128 v23 = (void *)(*(void *)(v4 + 48) + v16);
    *__int128 v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_bridgeObjectRetain(v22);
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v11 = (v43 - 1) & v43;
    unint64_t v14 = __clz(__rbit64(v43)) + (v8 << 6);
LABEL_12:
    unint64_t v15 = 8 * v14;
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v14);
    uint64_t v17 = 112 * v14;
    int64_t v18 = *(void *)(v1 + 56) + v17;
    unint64_t v19 = *(void *)v18;
    int64_t v20 = *(_BYTE *)(v18 + 16);
    __int128 v21 = *(_BYTE *)(v18 + 17);
    __int128 v22 = *(_BYTE *)(v18 + 18);
    __int128 v23 = *(_BYTE *)(v18 + 19);
    uint64_t v24 = *(_DWORD *)(v18 + 20);
    BOOL v25 = *(_BYTE *)(v18 + 24);
    uint64_t v26 = *(_BYTE *)(v18 + 25);
    uint64_t v27 = *(_BYTE *)(v18 + 26);
    BOOL v28 = *(_BYTE *)(v18 + 27);
    uint64_t v29 = *(_BYTE *)(v18 + 28);
    uint64_t v30 = *(_BYTE *)(v18 + 29);
    uint64_t v31 = *(_DWORD *)(v18 + 32);
    uint64_t v32 = *(_BYTE *)(v18 + 36);
    char v34 = *(void *)(v18 + 72);
    __int128 v33 = *(void *)(v18 + 80);
    uint64_t v35 = *(void *)(v18 + 88);
    char v36 = *(void *)(v18 + 96);
    uint64_t v37 = *(_BYTE *)(v18 + 104);
    uint64_t v38 = *(void *)(v18 + 8);
    int64_t v39 = *(_OWORD *)(v18 + 40);
    char v40 = *(_OWORD *)(v18 + 56);
    *(void *)(*(void *)(v3 + 48) + v15) = v16;
    uint64_t v41 = *(void *)(v3 + 56) + v17;
    *(void *)uint64_t v41 = v19;
    *(void *)(v41 + 8) = v38;
    *(_BYTE *)(v41 + 16) = v20;
    *(_BYTE *)(v41 + 17) = v21;
    *(_BYTE *)(v41 + 18) = v22;
    *(_BYTE *)(v41 + 19) = v23;
    *(_DWORD *)(v41 + 20) = v24;
    *(_BYTE *)(v41 + 24) = v25;
    *(_BYTE *)(v41 + 25) = v26;
    *(_BYTE *)(v41 + 26) = v27;
    *(_BYTE *)(v41 + 27) = v28;
    *(_BYTE *)(v41 + 28) = v29;
    *(_BYTE *)(v41 + 29) = v30;
    *(_DWORD *)(v41 + 32) = v31;
    *(_BYTE *)(v41 + 36) = v32;
    *(_OWORD *)(v41 + 40) = v39;
    *(_OWORD *)(v41 + 56) = v40;
    *(void *)(v41 + 72) = v34;
    *(void *)(v41 + 80) = v33;
    *(void *)(v41 + 88) = v35;
    *(void *)(v41 + 96) = v36;
    *(_BYTE *)(v41 + 104) = v37;
    swift_bridgeObjectRetain(v33);
    uint64_t result = (void *)swift_bridgeObjectRetain(v35);
  }

  uint64_t v44 = v42 + 2;
  if (v44 >= v12) {
    goto LABEL_26;
  }
  char v43 = *(void *)(v46 + 8 * v44);
  if (v43)
  {
    uint64_t v8 = v44;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v8 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    char v43 = *(void *)(v46 + 8 * v8);
    ++v44;
    if (v43) {
      goto LABEL_25;
    }
  }

    __int128 v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }

  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 16 * v15;
    unint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain(*((void *)&v19 + 1));
  }

  __int128 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  __int128 v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int128 v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    int64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    *(_BYTE *)(*(void *)(v4 + 56) + v15) = v16;
  }

  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

  unint64_t v19 = *v5;
  *(void *)(*v5 + 8 * (a4 >> 6) + 56) |= 1LL << a4;
  int64_t v20 = *(void *)(v19 + 48) + 24 * a4;
  *(void *)int64_t v20 = v9;
  *(void *)(v20 + 8) = a2;
  *(_BYTE *)(v20 + 16) = v7;
  *(_BYTE *)(v20 + 17) = HIBYTE(a3) & 1;
  __int128 v21 = *(void *)(v19 + 16);
  __int128 v22 = __OFADD__(v21, 1LL);
  __int128 v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v23;
  }
  return result;
}

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    int64_t v18 = *(void *)v17;
    unint64_t v19 = *(void *)(v17 + 8);
    int64_t v20 = *(void *)(v4 + 48) + v16;
    __int128 v21 = *(_BYTE *)(v17 + 16);
    *(void *)int64_t v20 = *(void *)v17;
    *(void *)(v20 + 8) = v19;
    *(_BYTE *)(v20 + 16) = v21;
    uint64_t result = (void *)sub_10003F6B0(v18, v19, v21);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  __int128 v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int128 v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v24 = __clz(__rbit64(v22));
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = v24 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    int64_t v18 = *(_BYTE *)(v17 + 16);
    unint64_t v19 = *(_BYTE *)(v17 + 17);
    int64_t v20 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)int64_t v20 = *(_OWORD *)v17;
    *(_BYTE *)(v20 + 16) = v18;
    *(_BYTE *)(v20 + 17) = v19;
  }

  __int128 v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  __int128 v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int128 v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    int64_t v18 = *(void *)v17;
    unint64_t v19 = 72 * v15;
    BOOL v28 = *(_OWORD *)(v17 + 8);
    sub_10005BD20(*(void *)(v2 + 56) + 72 * v15, (uint64_t)v29);
    int64_t v20 = *(void *)(v4 + 48) + v16;
    *(void *)int64_t v20 = v18;
    *(_OWORD *)(v20 + 8) = v28;
    __int128 v21 = *(void *)(v4 + 56) + v19;
    *(_OWORD *)__int128 v21 = v29[0];
    __int128 v22 = v29[1];
    __int128 v23 = v29[2];
    uint64_t v24 = v29[3];
    *(_BYTE *)(v21 + 64) = v30;
    *(_OWORD *)(v21 + 32) = v23;
    *(_OWORD *)(v21 + 48) = v24;
    *(_OWORD *)(v21 + 16) = v22;
    swift_bridgeObjectRetain(v28);
    uint64_t result = (void *)swift_bridgeObjectRetain(*((void *)&v28 + 1));
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    __int128 v21 = (void *)(*(void *)(v4 + 48) + v16);
    *__int128 v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_bridgeObjectRetain(v20);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  __int128 v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int128 v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    swift_retain(v17);
    uint64_t result = (void *)swift_retain(v18);
  }

  __int128 v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

      uint64_t v31 = v8[6];
      uint64_t v32 = v8[4];
      sub_10005BDF8(v9, v10, v11, v12, v13);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_10004FE80(0LL, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      uint64_t v4 = v29;
      a2 = v30;
      __int128 v22 = _swiftEmptyArrayStorage[2];
      __int128 v21 = _swiftEmptyArrayStorage[3];
      __int128 v23 = v22 + 1;
      uint64_t result = v28;
      uint64_t v24 = v32;
      if (v22 >= v21 >> 1)
      {
        uint64_t v26 = v22 + 1;
        uint64_t v27 = _swiftEmptyArrayStorage[2];
        sub_10004FE80((char *)(v21 > 1), v22 + 1, 1);
        __int128 v23 = v26;
        __int128 v22 = v27;
        uint64_t v24 = v32;
        uint64_t result = v28;
        uint64_t v4 = v29;
        a2 = v30;
      }

      _swiftEmptyArrayStorage[2] = v23;
      BOOL v25 = &_swiftEmptyArrayStorage[8 * v22];
      v25[4] = v9;
      v25[5] = v10;
      v25[6] = v11;
      v25[7] = v12;
      v25[8] = v24;
      _OWORD v25[9] = v16;
      v25[10] = v31;
      *((_BYTE *)v25 + 88) = v17;
    }

    while (v6 != v4);
  }

  return _swiftEmptyArrayStorage;
}

      *(void *)&v8[8 * v14] = v16 | v15;
      *(void *)(v17 + 8 * v13) = v11;
      unint64_t v19 = v4[2];
      uint64_t v10 = __OFADD__(v19, 1LL);
      int64_t v20 = v19 + 1;
      if (v10) {
        goto LABEL_40;
      }
      _OWORD v4[2] = v20;
      if (v9 == v5) {
        return (Swift::Int)v4;
      }
    }
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_100025AD0()
{
  uint64_t v1 = v0;
  sub_100005104(&qword_1000B9080);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_100025C88()
{
  uint64_t v45 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v1 + 16);
  if (!v4)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v1);
    *uint64_t v45 = v3;
    return result;
  }

  uint64_t result = (void *)(v2 + 64);
  unint64_t v6 = (unint64_t)((1LL << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
  {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
    uint64_t v4 = *(void *)(v1 + 16);
  }

  uint64_t v46 = v1 + 64;
  int64_t v8 = 0LL;
  *(void *)(v3 + 16) = v4;
  uint64_t v9 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }

    int64_t v42 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v42 >= v12) {
      goto LABEL_26;
    }
    unint64_t v43 = *(void *)(v46 + 8 * v42);
    ++v8;
    if (!v43)
    {
      int64_t v8 = v42 + 1;
      if (v42 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v43 = *(void *)(v46 + 8 * v8);
      if (!v43) {
        break;
      }
    }

void *sub_100025EF8()
{
  uint64_t v1 = v0;
  sub_100005104(&qword_1000B9018);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

void *sub_100026084()
{
  uint64_t v1 = v0;
  sub_100005104(&qword_1000B9000);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_10002622C()
{
  uint64_t v1 = v0;
  sub_100005104(&qword_1000B9040);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

uint64_t sub_1000263B8(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_100029618((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_1000265A4(v5);
  *a1 = v2;
  return result;
}

void *sub_100026420(const void *a1, uint64_t a2)
{
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  if (a2 <= 0)
  {
    size_t v5 = 8 * a2;
    uint64_t v6 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v4 = sub_100005104(&qword_1000B8C38);
    size_t v5 = 8 * a2;
    uint64_t v6 = (void *)swift_allocObject(v4, 8 * a2 + 32, 7LL);
    int64_t v7 = j__malloc_size(v6);
    uint64_t v8 = v7 - 32;
    if (v7 < 32) {
      uint64_t v8 = v7 - 25;
    }
    _OWORD v6[2] = a2;
    v6[3] = 2 * (v8 >> 3);
  }

  memcpy(v6 + 4, a1, v5);
  return v6;
}

void *sub_1000264C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100005104(&qword_1000B9078);
  uint64_t v4 = (void *)swift_allocObject(v3, 32 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 1;
  }
  _OWORD v4[2] = v1;
  v4[3] = 2 * (v6 >> 5);
  uint64_t v7 = sub_100012BA8((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10002AE10(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_1000265A4(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v107 = (__int128 *)*a1;
      uint64_t v108 = -1LL;
      uint64_t v109 = 1LL;
      Swift::String v110 = (__int128 *)*a1;
      do
      {
        uint64_t v111 = v108;
        Swift::String v112 = v110;
        do
        {
          unint64_t v113 = *((void *)v112 + 19);
          if (v113 >= *((void *)v112 + 5)) {
            break;
          }
          if (!v107) {
            goto LABEL_142;
          }
          uint64_t v114 = v112 + 7;
          uint64_t v115 = *((void *)v112 + 14);
          char v116 = *((_BYTE *)v112 + 128);
          char v117 = *((_BYTE *)v112 + 129);
          uint64_t result = *((unsigned __int8 *)v112 + 130);
          char v118 = *((_BYTE *)v112 + 131);
          int v119 = *((_DWORD *)v112 + 33);
          char v120 = *((_BYTE *)v112 + 136);
          char v121 = *((_BYTE *)v112 + 137);
          char v122 = *((_BYTE *)v112 + 138);
          char v123 = *((_BYTE *)v112 + 139);
          char v124 = *((_BYTE *)v112 + 140);
          char v125 = *((_BYTE *)v112 + 141);
          int v126 = *((_DWORD *)v112 + 36);
          char v127 = *((_BYTE *)v112 + 148);
          __int128 v129 = v112[11];
          __int128 v128 = v112[12];
          uint64_t v130 = *((void *)v112 + 15);
          __int128 v131 = v112[10];
          __int128 v132 = v112[5];
          v112[11] = v112[4];
          v112[12] = v132;
          __int128 v133 = *v112;
          __int128 v134 = v112[1];
          *((void *)v112 + 1) = v130;
          __int128 v136 = v112[2];
          __int128 v135 = v112[3];
          v112[3] = v131;
          v112[4] = v129;
          uint64_t v137 = *((void *)v112 + 26);
          char v138 = *((_BYTE *)v112 + 216);
          v112[5] = v128;
          __int128 v139 = v112[6];
          *(void *)Swift::String v112 = v115;
          *((_BYTE *)v112 + 16) = v116;
          *((_BYTE *)v112 + 17) = v117;
          *((_BYTE *)v112 + 18) = result;
          *((_BYTE *)v112 + 19) = v118;
          *((_DWORD *)v112 + 5) = v119;
          *((_BYTE *)v112 + 24) = v120;
          *((_BYTE *)v112 + 25) = v121;
          *((_BYTE *)v112 + 26) = v122;
          *((_BYTE *)v112 + 27) = v123;
          *((_BYTE *)v112 + 28) = v124;
          *((_BYTE *)v112 + 29) = v125;
          *((_DWORD *)v112 + 8) = v126;
          *((_BYTE *)v112 + 36) = v127;
          *((void *)v112 + 5) = v113;
          *((void *)v112 + 12) = v137;
          *((_BYTE *)v112 + 104) = v138;
          v112 -= 7;
          v114[6] = v139;
          *uint64_t v114 = v133;
          v114[1] = v134;
          v114[2] = v136;
          v114[3] = v135;
        }

        while (!__CFADD__(v111++, 1LL));
        ++v109;
        v110 += 7;
        --v108;
      }

      while (v109 != v3);
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_137;
  }
  uint64_t v155 = result;
  uint64_t v177 = v1;
  Swift::String v151 = a1;
  if (v3 > 1)
  {
    uint64_t v6 = v5 >> 1;
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)( v5 >> 1,  &type metadata for ConcurrencyDumper.TaskInfo);
    *(void *)(result + 16) = v6;
    Swift::String v154 = (void *)result;
    uint64_t v175 = (char *)(result + 32);
LABEL_13:
    Swift::Int v8 = 0LL;
    uint64_t v9 = *a1;
    uint64_t v152 = *a1 + 152;
    uint64_t v153 = *a1 + 40;
    uint64_t v150 = *a1 - 112;
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v156 = v3;
    uint64_t v176 = *a1;
    while (1)
    {
      Swift::Int v12 = v8++;
      if (v8 < v3)
      {
        unint64_t v13 = *(void *)(v153 + 112 * v8);
        unint64_t v14 = *(void *)(v153 + 112 * v12);
        Swift::Int v8 = v12 + 2;
        if (v12 + 2 < v3)
        {
          unint64_t v15 = (unint64_t *)(v152 + 112 * v12);
          char v16 = v15;
          while (1)
          {
            unint64_t v17 = v16[14];
            v16 += 14;
            if (v13 < v14 == v17 >= *v15) {
              break;
            }
            ++v8;
            unint64_t v15 = v16;
            if (v3 == v8)
            {
              Swift::Int v8 = v3;
              break;
            }
          }
        }

        if (v13 < v14)
        {
          if (v8 < v12) {
            goto LABEL_139;
          }
          if (v12 < v8)
          {
            uint64_t v149 = v10;
            uint64_t v18 = 112 * v8;
            Swift::Int v19 = v8;
            Swift::Int v20 = v12;
            uint64_t v21 = 112 * v12;
            do
            {
              if (v20 != --v19)
              {
                if (!v9) {
                  goto LABEL_145;
                }
                uint64_t v22 = *(void *)(v9 + v21);
                uint64_t v23 = v9 + v18;
                char v24 = *(_BYTE *)(v9 + v21 + 16);
                char v170 = *(_BYTE *)(v9 + v21 + 18);
                char v171 = *(_BYTE *)(v9 + v21 + 17);
                char v169 = *(_BYTE *)(v9 + v21 + 19);
                char v167 = *(_BYTE *)(v9 + v21 + 24);
                int v168 = *(_DWORD *)(v9 + v21 + 20);
                char v165 = *(_BYTE *)(v9 + v21 + 26);
                char v166 = *(_BYTE *)(v9 + v21 + 25);
                char v163 = *(_BYTE *)(v9 + v21 + 28);
                char v164 = *(_BYTE *)(v9 + v21 + 27);
                int v161 = *(_DWORD *)(v9 + v21 + 32);
                char v162 = *(_BYTE *)(v9 + v21 + 29);
                char v160 = *(_BYTE *)(v9 + v21 + 36);
                uint64_t v172 = *(void *)(v9 + v21 + 72);
                uint64_t v174 = *(void *)(v9 + v21 + 96);
                char v173 = *(_BYTE *)(v9 + v21 + 104);
                uint64_t v25 = *(void *)(v9 + v21 + 8);
                __int128 v158 = *(_OWORD *)(v9 + v21 + 40);
                __int128 v159 = *(_OWORD *)(v9 + v21 + 80);
                __int128 v157 = *(_OWORD *)(v9 + v21 + 56);
                uint64_t result = (uint64_t)memmove((void *)(v9 + v21), (const void *)(v9 + v18 - 112), 0x70uLL);
                uint64_t v9 = v176;
                *(void *)(v23 - 112) = v22;
                *(void *)(v23 - 104) = v25;
                *(_BYTE *)(v23 - 96) = v24;
                *(_BYTE *)(v23 - 95) = v171;
                *(_BYTE *)(v23 - 94) = v170;
                *(_BYTE *)(v23 - 93) = v169;
                *(_DWORD *)(v23 - 92) = v168;
                *(_BYTE *)(v23 - 88) = v167;
                *(_BYTE *)(v23 - 87) = v166;
                *(_BYTE *)(v23 - 86) = v165;
                *(_BYTE *)(v23 - 85) = v164;
                *(_BYTE *)(v23 - 84) = v163;
                *(_BYTE *)(v23 - 83) = v162;
                *(_DWORD *)(v23 - 80) = v161;
                *(_BYTE *)(v23 - 76) = v160;
                *(_OWORD *)(v23 - 72) = v158;
                *(_OWORD *)(v23 - 56) = v157;
                *(void *)(v23 - 40) = v172;
                *(_OWORD *)(v23 - 32) = v159;
                *(void *)(v23 - 16) = v174;
                *(_BYTE *)(v23 - 8) = v173;
              }

              ++v20;
              v18 -= 112LL;
              v21 += 112LL;
            }

            while (v20 < v19);
            Swift::Int v3 = v156;
            uint64_t v10 = v149;
          }
        }
      }

      if (v8 < v3)
      {
        if (__OFSUB__(v8, v12)) {
          goto LABEL_136;
        }
        if (v8 - v12 < v155)
        {
          Swift::Int v26 = v12 + v155;
          if (__OFADD__(v12, v155)) {
            goto LABEL_140;
          }
          if (v26 >= v3) {
            Swift::Int v26 = v3;
          }
          if (v26 < v12)
          {
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
            return result;
          }

          if (v8 != v26)
          {
            uint64_t v27 = v150 + 112 * v8;
            do
            {
              Swift::Int v28 = v12;
              uint64_t v29 = v27;
              do
              {
                unint64_t v30 = *(void *)(v29 + 152);
                if (v30 >= *(void *)(v29 + 40)) {
                  break;
                }
                if (!v9) {
                  goto LABEL_143;
                }
                int v31 = (_OWORD *)(v29 + 112);
                uint64_t v32 = *(void *)(v29 + 112);
                char v33 = *(_BYTE *)(v29 + 128);
                char v34 = *(_BYTE *)(v29 + 129);
                char v35 = *(_BYTE *)(v29 + 130);
                char v36 = *(_BYTE *)(v29 + 131);
                uint64_t result = *(unsigned int *)(v29 + 132);
                char v37 = *(_BYTE *)(v29 + 136);
                char v38 = *(_BYTE *)(v29 + 137);
                char v39 = *(_BYTE *)(v29 + 138);
                char v40 = *(_BYTE *)(v29 + 139);
                char v41 = *(_BYTE *)(v29 + 140);
                char v42 = *(_BYTE *)(v29 + 141);
                int v43 = *(_DWORD *)(v29 + 144);
                char v44 = *(_BYTE *)(v29 + 148);
                __int128 v46 = *(_OWORD *)(v29 + 176);
                __int128 v45 = *(_OWORD *)(v29 + 192);
                uint64_t v47 = *(void *)(v29 + 120);
                __int128 v48 = *(_OWORD *)(v29 + 160);
                __int128 v49 = *(_OWORD *)(v29 + 80);
                *(_OWORD *)(v29 + 176) = *(_OWORD *)(v29 + 64);
                *(_OWORD *)(v29 + 192) = v49;
                __int128 v50 = *(_OWORD *)v29;
                __int128 v51 = *(_OWORD *)(v29 + 16);
                *(void *)(v29 + 8) = v47;
                __int128 v53 = *(_OWORD *)(v29 + 32);
                __int128 v52 = *(_OWORD *)(v29 + 48);
                *(_OWORD *)(v29 + 48) = v48;
                *(_OWORD *)(v29 + 64) = v46;
                uint64_t v54 = *(void *)(v29 + 208);
                char v55 = *(_BYTE *)(v29 + 216);
                *(_OWORD *)(v29 + 80) = v45;
                __int128 v56 = *(_OWORD *)(v29 + 96);
                *(void *)uint64_t v29 = v32;
                *(_BYTE *)(v29 + 16) = v33;
                *(_BYTE *)(v29 + 17) = v34;
                *(_BYTE *)(v29 + 18) = v35;
                *(_BYTE *)(v29 + 19) = v36;
                *(_DWORD *)(v29 + 20) = result;
                *(_BYTE *)(v29 + 24) = v37;
                *(_BYTE *)(v29 + 25) = v38;
                *(_BYTE *)(v29 + 26) = v39;
                *(_BYTE *)(v29 + 27) = v40;
                *(_BYTE *)(v29 + 28) = v41;
                *(_BYTE *)(v29 + 29) = v42;
                *(_DWORD *)(v29 + 32) = v43;
                *(_BYTE *)(v29 + 36) = v44;
                *(void *)(v29 + 40) = v30;
                *(void *)(v29 + 96) = v54;
                *(_BYTE *)(v29 + 104) = v55;
                v29 -= 112LL;
                v31[6] = v56;
                *int v31 = v50;
                v31[1] = v51;
                ++v28;
                void v31[2] = v53;
                v31[3] = v52;
              }

              while (v8 != v28);
              ++v8;
              v27 += 112LL;
            }

            while (v8 != v26);
            Swift::Int v8 = v26;
          }
        }
      }

      if (v8 < v12) {
        goto LABEL_132;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v10);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10002711C(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
        uint64_t v10 = (char *)result;
      }

      unint64_t v58 = *((void *)v10 + 2);
      unint64_t v57 = *((void *)v10 + 3);
      unint64_t v11 = v58 + 1;
      uint64_t v9 = v176;
      if (v58 >= v57 >> 1)
      {
        uint64_t result = (uint64_t)sub_10002711C((char *)(v57 > 1), v58 + 1, 1, v10);
        uint64_t v9 = v176;
        uint64_t v10 = (char *)result;
      }

      *((void *)v10 + 2) = v11;
      uint64_t v59 = v10 + 32;
      Swift::String v60 = &v10[16 * v58 + 32];
      *(void *)Swift::String v60 = v12;
      *((void *)v60 + 1) = v8;
      if (v58)
      {
        while (1)
        {
          unint64_t v61 = v11 - 1;
          if (v11 >= 4)
          {
            Swift::String v66 = &v59[2 * v11];
            uint64_t v67 = *(v66 - 8);
            uint64_t v68 = *(v66 - 7);
            BOOL v72 = __OFSUB__(v68, v67);
            uint64_t v69 = v68 - v67;
            if (v72) {
              goto LABEL_121;
            }
            uint64_t v71 = *(v66 - 6);
            uint64_t v70 = *(v66 - 5);
            BOOL v72 = __OFSUB__(v70, v71);
            uint64_t v64 = v70 - v71;
            char v65 = v72;
            if (v72) {
              goto LABEL_122;
            }
            unint64_t v73 = v11 - 2;
            char v74 = &v59[2 * v11 - 4];
            uint64_t v76 = *v74;
            uint64_t v75 = v74[1];
            BOOL v72 = __OFSUB__(v75, v76);
            uint64_t v77 = v75 - v76;
            if (v72) {
              goto LABEL_123;
            }
            BOOL v72 = __OFADD__(v64, v77);
            uint64_t v78 = v64 + v77;
            if (v72) {
              goto LABEL_125;
            }
            if (v78 >= v69)
            {
              uint64_t v96 = &v59[2 * v61];
              uint64_t v98 = *v96;
              uint64_t v97 = v96[1];
              BOOL v72 = __OFSUB__(v97, v98);
              uint64_t v99 = v97 - v98;
              if (v72) {
                goto LABEL_131;
              }
              BOOL v89 = v64 < v99;
              goto LABEL_84;
            }
          }

          else
          {
            if (v11 != 3)
            {
              uint64_t v90 = *((void *)v10 + 4);
              uint64_t v91 = *((void *)v10 + 5);
              BOOL v72 = __OFSUB__(v91, v90);
              uint64_t v83 = v91 - v90;
              char v84 = v72;
              goto LABEL_78;
            }

            uint64_t v63 = *((void *)v10 + 4);
            uint64_t v62 = *((void *)v10 + 5);
            BOOL v72 = __OFSUB__(v62, v63);
            uint64_t v64 = v62 - v63;
            char v65 = v72;
          }

          if ((v65 & 1) != 0) {
            goto LABEL_124;
          }
          unint64_t v73 = v11 - 2;
          uint64_t v79 = &v59[2 * v11 - 4];
          uint64_t v81 = *v79;
          uint64_t v80 = v79[1];
          BOOL v82 = __OFSUB__(v80, v81);
          uint64_t v83 = v80 - v81;
          char v84 = v82;
          if (v82) {
            goto LABEL_126;
          }
          Swift::String v85 = &v59[2 * v61];
          uint64_t v87 = *v85;
          uint64_t v86 = v85[1];
          BOOL v72 = __OFSUB__(v86, v87);
          uint64_t v88 = v86 - v87;
          if (v72) {
            goto LABEL_128;
          }
          if (__OFADD__(v83, v88)) {
            goto LABEL_130;
          }
          if (v83 + v88 >= v64)
          {
            BOOL v89 = v64 < v88;
LABEL_84:
            if (v89) {
              unint64_t v61 = v73;
            }
            goto LABEL_86;
          }

LABEL_78:
          if ((v84 & 1) != 0) {
            goto LABEL_127;
          }
          Swift::String v92 = &v59[2 * v61];
          uint64_t v94 = *v92;
          uint64_t v93 = v92[1];
          BOOL v72 = __OFSUB__(v93, v94);
          uint64_t v95 = v93 - v94;
          if (v72) {
            goto LABEL_129;
          }
          if (v95 < v83) {
            goto LABEL_15;
          }
LABEL_86:
          uint64_t v100 = (uint64_t)v10;
          unint64_t v101 = v61 - 1;
          if (v61 - 1 >= v11)
          {
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
            goto LABEL_141;
          }

          if (!v176) {
            goto LABEL_144;
          }
          uint64_t v102 = &v59[2 * v101];
          uint64_t v103 = *v102;
          char v104 = &v59[2 * v61];
          uint64_t v105 = v104[1];
          uint64_t result = sub_100026ED4((char *)(v176 + 112 * *v102), (char *)(v176 + 112LL * *v104), v176 + 112 * v105, v175);
          if (v177) {
            goto LABEL_113;
          }
          if (v105 < v103) {
            goto LABEL_118;
          }
          if (v61 > *(void *)(v100 + 16)) {
            goto LABEL_119;
          }
          *uint64_t v102 = v103;
          v59[2 * v101 + 1] = v105;
          unint64_t v106 = *(void *)(v100 + 16);
          if (v61 >= v106) {
            goto LABEL_120;
          }
          uint64_t v10 = (char *)v100;
          unint64_t v11 = v106 - 1;
          uint64_t result = (uint64_t)memmove(&v59[2 * v61], v104 + 2, 16 * (v106 - 1 - v61));
          *(void *)(v100 + 16) = v106 - 1;
          uint64_t v9 = v176;
          if (v106 <= 2) {
            goto LABEL_15;
          }
        }
      }

      unint64_t v11 = 1LL;
LABEL_15:
      Swift::Int v3 = v156;
      if (v8 >= v156)
      {
        uint64_t v7 = v154;
        goto LABEL_103;
      }
    }
  }

  uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v175 = (char *)&_swiftEmptyArrayStorage[4];
  if (v3 == 1)
  {
    Swift::String v154 = _swiftEmptyArrayStorage;
    goto LABEL_13;
  }

  unint64_t v11 = _swiftEmptyArrayStorage[2];
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
  Swift::String v154 = v7;
  if (v11 < 2)
  {
LABEL_114:
    Swift::String v148 = v10;
  }

  else
  {
    uint64_t v141 = *v151;
    if (!*v151) {
      goto LABEL_146;
    }
    while (1)
    {
      Swift::String v142 = v10;
      unint64_t v143 = v11 - 2;
      uint64_t v100 = (uint64_t)v142;
      v142 += 32;
      uint64_t v144 = *(void *)&v142[16 * v11 - 32];
      uint64_t v145 = *(void *)&v142[16 * v11 - 8];
      uint64_t result = sub_100026ED4( (char *)(v141 + 112 * v144),  (char *)(v141 + 112LL * *(void *)&v142[16 * v11 - 16]),  v141 + 112 * v145,  v175);
      if (v177) {
        break;
      }
      if (v145 < v144) {
        goto LABEL_133;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v100);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100027214(v100);
        uint64_t v100 = result;
      }

      if (v143 >= *(void *)(v100 + 16)) {
        goto LABEL_134;
      }
      Swift::String v146 = (void *)(v100 + 32 + 16 * v143);
      *Swift::String v146 = v144;
      v146[1] = v145;
      unint64_t v147 = *(void *)(v100 + 16);
      if (v11 > v147) {
        goto LABEL_135;
      }
      uint64_t v10 = (char *)v100;
      memmove((void *)(v100 + 32 + 16 * (v11 - 1)), (const void *)(v100 + 32 + 16 * v11), 16 * (v147 - v11));
      *(void *)(v100 + 16) = v147 - 1;
      unint64_t v11 = v147 - 1;
      if (v147 <= 2) {
        goto LABEL_114;
      }
    }

LABEL_113:
    Swift::String v148 = (char *)v100;
  }

  swift_bridgeObjectRelease(v148);
  v154[2] = 0LL;
  return swift_bridgeObjectRelease(v154);
}

            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
            goto LABEL_121;
          }

          goto LABEL_57;
        }
      }

uint64_t sub_100026ED4(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 112;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 112;
  if (v9 >= v11)
  {
    uint64_t v17 = 112 * v11;
    if (a4 != __src || &__src[v17] <= a4) {
      memmove(a4, __src, 112 * v11);
    }
    unint64_t v13 = &v4[v17];
    if (v7 >= v6 || v10 < 112) {
      goto LABEL_39;
    }
    uint64_t v18 = (char *)(a3 - 112);
    while (1)
    {
      Swift::Int v19 = v18 + 112;
      if (*((void *)v13 - 9) >= *((void *)v6 - 9))
      {
        Swift::Int v20 = v13 - 112;
        if (v19 != v13)
        {
          v13 -= 112;
          goto LABEL_36;
        }

        BOOL v21 = v18 >= v13;
        v13 -= 112;
        if (v21) {
          goto LABEL_36;
        }
      }

      else
      {
        Swift::Int v20 = v6 - 112;
        if (v19 != v6)
        {
          v6 -= 112;
LABEL_36:
          memmove(v18, v20, 0x70uLL);
          goto LABEL_37;
        }

        BOOL v21 = v18 >= v6;
        v6 -= 112;
        if (v21) {
          goto LABEL_36;
        }
      }

char *sub_10002711C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9030);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100027214(uint64_t a1)
{
  return sub_10002711C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_100027228(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000273D8(a1, a2, a3, *v3);
  *Swift::Int v3 = result;
  return result;
}

char *sub_100027244(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10002791C(a1, a2, a3, *v3, &qword_1000B8C30);
  *Swift::Int v3 = result;
  return result;
}

char *sub_100027268(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10002770C(a1, a2, a3, *v3);
  *Swift::Int v3 = result;
  return result;
}

char *sub_100027284(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100027804(a1, a2, a3, *v3);
  *Swift::Int v3 = result;
  return result;
}

char *sub_1000272A0(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10002791C(a1, a2, a3, *v3, &qword_1000B9028);
  *Swift::Int v3 = result;
  return result;
}

char *sub_1000272C4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C40);
    uint64_t v11 = (char *)swift_allocObject(v10, 648 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 648);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[648 * v8]) {
      memmove(v13, v14, 648 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 648 * v8);
  }

  swift_release(a4);
  return v11;
}

char *sub_1000273D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C00);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }

  swift_release(a4);
  return v11;
}

void *sub_1000274D8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9078);
    uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v15 = sub_100005104(&qword_1000B8D28);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }

  swift_release(a4);
  return v11;
}

char *sub_1000275F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C50);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 24 * v8);
  }

  swift_release(a4);
  return v11;
}

char *sub_10002770C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B8C38);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v8);
  }

  swift_release(a4);
  return v11;
}

char *sub_100027804(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9038);
    uint64_t v11 = (char *)swift_allocObject(v10, 112 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 112);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[112 * v8]) {
      memmove(v13, v14, 112 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for ConcurrencyDumper.TaskInfo);
  }

  swift_release(a4);
  return v11;
}

char *sub_10002791C(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100005104(a5);
    size_t v12 = (char *)swift_allocObject(v11, 16 * v10 + 32, 7LL);
    int64_t v13 = j__malloc_size(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 17;
    }
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * (v14 >> 4);
  }

  else
  {
    size_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v15 = v12 + 32;
  char v16 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v9]) {
      memmove(v15, v16, 16 * v9);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v15, v16, 16 * v9);
  }

  swift_release(a4);
  return v12;
}

void (*sub_100027A10(void *a1, uint64_t a2))(uint64_t a1)
{
  char v5 = malloc(0x50uLL);
  *a1 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v5[8] = sub_10002942C(v5);
  v5[9] = sub_100028DD0(v5 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_100027A8C;
}

void sub_100027A8C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 72LL))(*(void *)a1 + 32LL, 0LL);
  v2(v1, 0LL);
  free(v1);
}

uint64_t sub_100027AC8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    size_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      Swift::Int v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *Swift::Int v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1000282C8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *Swift::Int v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_100027C74(uint64_t *a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), a2);
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *Swift::Int v3 = 0x8000000000000000LL;
    sub_100028460(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = *v3;
    *Swift::Int v3 = v15;
    swift_bridgeObjectRelease(v14);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_100027D6C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005104(&qword_1000B9088);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    char v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

uint64_t sub_100028048(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005104(&qword_1000B9050);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v8 = (uint64_t *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v28 = -1LL << v9;
    BOOL v29 = v2;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64) {
                  bzero((void *)(v3 + 56), 8 * v12);
                }
                else {
                  *uint64_t v8 = v28;
                }
                uint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

uint64_t sub_1000282C8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100027D6C(v11);
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_100028580();
      goto LABEL_22;
    }

    sub_1000288C4(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    unint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_100028460(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100028048(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100028730();
      goto LABEL_14;
    }

    sub_100028B70(v8);
  }

  uint64_t v9 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)(*(void *)(*v3 + 40), v5);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

      unint64_t v7 = v5;
      return v7 << 16;
    }

    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9) {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }

  return result;
}

  uint64_t v14 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v5;
  BOOL v15 = *(void *)(v14 + 16);
  uint64_t v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

void *sub_100028580()
{
  uint64_t v1 = v0;
  sub_100005104(&qword_1000B9088);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

      swift_bridgeObjectRelease(v106);
      a6 = v104;
      a5 = v103;
      goto LABEL_46;
    }

    sub_100045320(v117, (uint64_t)v119);
    BOOL v29 = v120;
    uint64_t v30 = v121;
    sub_100006270(v119, v120);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v29, v30);
    if ((_BYTE)v105)
    {
    }

    else if (((6u >> (v31 & 7)) & 1) != 0)
    {
LABEL_10:
      swift_bridgeObjectRelease(v27);
      sub_1000062D8(v119);
      char isUniquelyReferenced_nonNull_native = sub_10004E740((uint64_t)&v124, &qword_1000B95E8);
LABEL_51:
      uint64_t v23 = v108;
      char v24 = v107;
      goto LABEL_4;
    }

    char v74 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000LL) == 0) {
      char v74 = v26 & 0xFFFFFFFFFFFFLL;
    }
    if (v74)
    {
      swift_bridgeObjectRetain(v27);
      sub_10004E77C(v112, a5, a6);
      uint64_t v75 = String.subscript.getter(15LL, v26, v27);
      uint64_t v77 = v76;
      swift_bridgeObjectRelease(v27);
      if (v75 == 95 && v77 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease(0xE100000000000000LL);
LABEL_37:
        uint64_t v79 = sub_100033710(1uLL, v26, v27);
        uint64_t v81 = v80;
        uint64_t v83 = v82;
        Swift::String v85 = v84;
        swift_bridgeObjectRelease(v27);
        BOOL v26 = static String._fromSubstring(_:)(v79, v81, v83, v85);
        uint64_t v27 = v86;
        swift_bridgeObjectRelease(v85);
        goto LABEL_38;
      }

      uint64_t v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v77, 95LL, 0xE100000000000000LL, 0LL);
      swift_bridgeObjectRelease(v77);
      if ((v78 & 1) != 0) {
        goto LABEL_37;
      }
    }

    else
    {
      sub_10004E77C(v112, a5, a6);
    }

    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)swift_retain(v17);
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

  uint64_t v31 = sub_10002EA1C();
  swift_allocError(&type metadata for ParserError, v31, 0LL, 0LL);
  *(void *)uint64_t v32 = a1;
  *(void *)(v32 + 8) = a2;
  *(_OWORD *)(v32 + 16) = 0u;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_BYTE *)(v32 + 80) = 5;
  char v33 = swift_bridgeObjectRetain(a2);
  swift_willThrow(v33);
  return v3;
}

      if (v11 == 1)
      {
        v46._object = 0LL;
        uint64_t v47 = 0xE000000000000000LL;
        v32._char countAndFlagsBits = 45LL;
        v32._object = (void *)0xE100000000000000LL;
        String.append(_:)(v32);
        Character.write<A>(to:)( &v46._object,  v46._countAndFlagsBits,  v48,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        goto LABEL_31;
      }

      v46._object = (void *)45;
      uint64_t v30 = 0xE100000000000000LL;
LABEL_30:
      uint64_t v47 = v30;
      v33._char countAndFlagsBits = v46._countAndFlagsBits;
      v33._object = v48;
      String.append(_:)(v33);
LABEL_31:
      char v34 = v47;
      sub_1000872F4((uint64_t)v46._object, v47, (uint64_t)v28, v29);
      char v36 = v35;
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v34);
      if (v26 < v36) {
        break;
      }
      uint64_t result = sub_10002DA24(countAndFlagsBits, (uint64_t)v7, v45);
      ++v13;
      v15 += 24;
      if (v41 + v13 == 1)
      {
        char countAndFlagsBits = v44._countAndFlagsBits;
        uint64_t v6 = v39;
        goto LABEL_37;
      }
    }

    uint64_t result = sub_10002DA24(v44._countAndFlagsBits, (uint64_t)v44._object, v40);
    uint64_t v6 = v39;
    unint64_t v12 = v37;
    uint64_t v4 = v38;
    int64_t v9 = v45;
    if (v41 + v13) {
      continue;
    }
    break;
  }

  int v43 = a17;
  swift_bridgeObjectRetain(v27);
  char v37 = a10;
  if (!a20) {
    goto LABEL_33;
  }
LABEL_30:
  char v38 = HIBYTE(a20) & 0xF;
  if ((a20 & 0x2000000000000000LL) == 0) {
    char v38 = v35 & 0xFFFFFFFFFFFFLL;
  }
  if (!v38)
  {
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(a20);
    char v35 = 0LL;
    char v33 = 0LL;
    goto LABEL_35;
  }

void *sub_100028730()
{
  uint64_t v1 = v0;
  sub_100005104(&qword_1000B9050);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_1000288C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005104(&qword_1000B9088);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_100028B70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005104(&qword_1000B9050);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

void (*sub_100028DD0(void *a1, uint64_t a2, char a3))(uint64_t **a1, char a2)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x98uLL);
  *a1 = v8;
  v8[14] = a2;
  v8[15] = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_100023B88(a2);
  *((_BYTE *)v8 + 105) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }

  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[16] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*v4 + 56) + 112 * v11;
        uint64_t v18 = *(void *)(v17 + 40);
        __int128 v19 = *(_OWORD *)(v17 + 48);
        __int128 v20 = *(_OWORD *)(v17 + 64);
        __int128 v21 = *(_OWORD *)(v17 + 80);
        uint64_t v22 = *(void *)(v17 + 96);
        char v23 = *(_BYTE *)(v17 + 104);
        uint64_t v24 = 256LL;
        if (*(_BYTE *)(v17 + 17)) {
          uint64_t v25 = 256LL;
        }
        else {
          uint64_t v25 = 0LL;
        }
        uint64_t v26 = v25 | *(unsigned __int8 *)(v17 + 16);
        uint64_t v27 = 0x10000LL;
        if (*(_BYTE *)(v17 + 18)) {
          uint64_t v28 = 0x10000LL;
        }
        else {
          uint64_t v28 = 0LL;
        }
        uint64_t v29 = 0x1000000LL;
        if (*(_BYTE *)(v17 + 19)) {
          uint64_t v30 = 0x1000000LL;
        }
        else {
          uint64_t v30 = 0LL;
        }
        unint64_t v31 = v26 | v28 | v30 | ((unint64_t)*(unsigned int *)(v17 + 20) << 32);
        if (!*(_BYTE *)(v17 + 25)) {
          uint64_t v24 = 0LL;
        }
        uint64_t v32 = v24 | *(unsigned __int8 *)(v17 + 24);
        if (!*(_BYTE *)(v17 + 26)) {
          uint64_t v27 = 0LL;
        }
        if (!*(_BYTE *)(v17 + 27)) {
          uint64_t v29 = 0LL;
        }
        uint64_t v33 = v32 | v27 | v29;
        char v34 = &_mh_execute_header;
        if (*(_BYTE *)(v17 + 28)) {
          char v35 = &_mh_execute_header;
        }
        else {
          char v35 = 0LL;
        }
        uint64_t v36 = 0x10000000000LL;
        if (!*(_BYTE *)(v17 + 29)) {
          uint64_t v36 = 0LL;
        }
        unint64_t v37 = v33 | (unint64_t)v35 | v36;
        if (!*(_BYTE *)(v17 + 36)) {
          char v34 = 0LL;
        }
        unint64_t v38 = (unint64_t)v34 | *(unsigned int *)(v17 + 32);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v17;
        _OWORD v8[2] = v31;
        v8[3] = v37;
        v8[4] = v38;
        v8[5] = v18;
        goto LABEL_34;
      }

void sub_100028FF0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1];
  unint64_t v5 = (*a1)[2];
  unint64_t v6 = (*a1)[3];
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (*a1)[5];
  uint64_t v9 = (*a1)[6];
  uint64_t v10 = (*a1)[7];
  uint64_t v11 = (*a1)[8];
  uint64_t v12 = (*a1)[9];
  uint64_t v13 = (*a1)[10];
  uint64_t v14 = (*a1)[11];
  char v15 = *((_BYTE *)*a1 + 104);
  char v16 = *((_BYTE *)*a1 + 105);
  if ((a2 & 1) == 0)
  {
    if (v13)
    {
      uint64_t v62 = (*a1)[12];
      uint64_t v58 = (*a1)[11];
      uint64_t v60 = (*a1)[9];
      uint64_t v64 = (*a1)[10];
      uint64_t v17 = (*a1)[8];
      uint64_t v18 = (*a1)[7];
      uint64_t v19 = (*a1)[6];
      uint64_t v12 = HIDWORD(v4);
      unint64_t v20 = HIDWORD(v5);
      char v21 = v5 & 1;
      unsigned int v22 = (v5 >> 8) & 1;
      unsigned int v23 = WORD1(v5) & 1;
      LODWORD(v14) = BYTE3(v5) & 1;
      char v24 = v6 & 1;
      LODWORD(v13) = (v6 >> 8) & 1;
      unsigned int v25 = WORD1(v6) & 1;
      *((_BYTE *)v2 + 140) = BYTE4(v7) & 1;
      unsigned int v26 = BYTE3(v6) & 1;
      uint64_t v27 = HIDWORD(v6) & 1;
      *((_BYTE *)v2 + 144) = v15 & 1;
      unint64_t v28 = v2[16];
      uint64_t v29 = *(void **)v2[15];
      uint64_t v30 = (v6 >> 40) & 1;
      if ((v16 & 1) != 0)
      {
        uint64_t v31 = v29[7] + 112 * v28;
        *(void *)uint64_t v31 = v3;
        uint64_t v32 = (char *)v2 + 140;
        uint64_t v33 = v2 + 18;
        goto LABEL_8;
      }

      goto LABEL_14;
    }

uint64_t (*sub_10002942C(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_10002944C;
}

uint64_t sub_10002944C(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

unint64_t sub_100029458(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(v3);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)(*(void *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            char v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *char v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }

        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1LL);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

char *sub_1000295DC(uint64_t a1)
{
  return sub_1000272C4(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1000295F0(void *a1)
{
  return sub_1000274D8(0LL, a1[2], 0, a1);
}

char *sub_100029604(uint64_t a1)
{
  return sub_1000275F8(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_100029618(uint64_t a1)
{
  return sub_100027804(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_10002962C(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100005104(&qword_1000B9070);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_100023B88(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v4);
    return (unint64_t)v3;
  }

  uint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1LL);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_bridgeObjectRetain(v4);
    unint64_t result = sub_100023B88(v5);
    uint64_t v8 = v13;
    uint64_t v4 = v14;
    if ((v15 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_100029728(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100005104(&qword_1000B9040);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (uint64_t i = (_BYTE *)(a1 + 40); ; i += 16)
    {
      uint64_t v5 = *((void *)i - 1);
      char v6 = *i;
      unint64_t result = sub_100023B88(v5);
      if ((v8 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(_BYTE *)(v3[7] + result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1LL);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  return result;
}

unint64_t sub_1000297FC(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100005104(&qword_1000B9000);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_100023B88(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v6);
    return (unint64_t)v3;
  }

  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v3[6] + 8 * result) = v4;
    BOOL v10 = (void *)(v3[7] + 16 * result);
    *BOOL v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain(v6);
    unint64_t result = sub_100023B88(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if ((v16 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_100029908(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100005104(&qword_1000B9058);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (uint64_t i = (_BYTE *)(a1 + 144); ; i += 120)
    {
      uint64_t v20 = v1;
      uint64_t v5 = *((void *)i - 14);
      uint64_t v6 = *((void *)i - 13);
      uint64_t v7 = *((void *)i - 12);
      char v8 = *(i - 88);
      char v9 = *(i - 87);
      char v10 = *(i - 86);
      char v11 = *(i - 85);
      char v34 = *(i - 80);
      int v35 = *((_DWORD *)i - 21);
      char v32 = *(i - 78);
      char v33 = *(i - 79);
      char v30 = *(i - 76);
      char v31 = *(i - 77);
      int v28 = *((_DWORD *)i - 18);
      char v29 = *(i - 75);
      char v27 = *(i - 68);
      uint64_t v25 = *((void *)i - 7);
      uint64_t v26 = *((void *)i - 8);
      uint64_t v23 = *((void *)i - 5);
      uint64_t v24 = *((void *)i - 6);
      uint64_t v12 = *((void *)i - 3);
      uint64_t v36 = *((void *)i - 4);
      uint64_t v13 = *((void *)i - 2);
      uint64_t v22 = *((void *)i - 1);
      char v21 = *i;
      unint64_t result = sub_100023B88(v5);
      if ((v15 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(void *)(v3[6] + 8 * result) = v5;
      uint64_t v16 = v3[7] + 112 * result;
      *(void *)uint64_t v16 = v6;
      *(_BYTE *)(v16 + 16) = v8;
      *(_BYTE *)(v16 + 17) = v9;
      *(_BYTE *)(v16 + 18) = v10;
      *(_BYTE *)(v16 + 19) = v11;
      *(_DWORD *)(v16 + 20) = v35;
      *(_BYTE *)(v16 + 24) = v34;
      *(_BYTE *)(v16 + 25) = v33;
      *(_BYTE *)(v16 + 26) = v32;
      *(_BYTE *)(v16 + 27) = v31;
      *(_BYTE *)(v16 + 28) = v30;
      *(_BYTE *)(v16 + 29) = v29;
      *(_DWORD *)(v16 + 32) = v28;
      *(_BYTE *)(v16 + 36) = v27;
      *(void *)(v16 + 40) = v26;
      *(void *)(v16 + 48) = v25;
      *(void *)(v16 + 56) = v24;
      *(void *)(v16 + 64) = v23;
      *(void *)(v16 + 88) = v13;
      *(void *)(v16 + 96) = v22;
      *(_BYTE *)(v16 + 104) = v21;
      *(void *)(v16 + 72) = v36;
      *(void *)(v16 + 80) = v12;
      *(void *)(v16 + 8) = v7;
      uint64_t v17 = v3[2];
      BOOL v18 = __OFADD__(v17, 1LL);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v3[2] = v19;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      uint64_t v1 = v20 - 1;
      if (v20 == 1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  return result;
}

void *sub_100029B20(void *result, char a2, void *a3)
{
  uint64_t v3 = result[2];
  if (v3)
  {
    uint64_t v6 = result;
    uint64_t v8 = result[4];
    uint64_t v7 = result[5];
    char v9 = (void *)*a3;
    swift_bridgeObjectRetain(result);
    unint64_t v11 = sub_100023B88(v8);
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    char v15 = v10;
    if (v9[3] < v14)
    {
      sub_100024824(v14, a2 & 1);
      unint64_t v16 = sub_100023B88(v8);
      if ((v15 & 1) != (v17 & 1))
      {
LABEL_27:
        unint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
        __break(1u);
        return result;
      }

      unint64_t v11 = v16;
      BOOL v18 = (void *)*a3;
      if ((v15 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      *(void *)(v18[7] + 8 * v11) = v7;
      uint64_t v19 = v3 - 1;
      if (v3 == 1) {
        return (void *)swift_bridgeObjectRelease(v6);
      }
LABEL_16:
      for (uint64_t i = v6 + 7; ; i += 2)
      {
        uint64_t v26 = *(i - 1);
        uint64_t v25 = *i;
        char v27 = (void *)*a3;
        unint64_t v28 = sub_100023B88(v26);
        uint64_t v30 = v27[2];
        BOOL v31 = (v29 & 1) == 0;
        BOOL v22 = __OFADD__(v30, v31);
        uint64_t v32 = v30 + v31;
        if (v22) {
          break;
        }
        char v33 = v29;
        if (v27[3] < v32)
        {
          sub_100024824(v32, 1LL);
          unint64_t v28 = sub_100023B88(v26);
          if ((v33 & 1) != (v34 & 1)) {
            goto LABEL_27;
          }
        }

        int v35 = (void *)*a3;
        if ((v33 & 1) != 0)
        {
          *(void *)(v35[7] + 8 * v28) = v25;
        }

        else
        {
          v35[(v28 >> 6) + 8] |= 1LL << v28;
          uint64_t v36 = 8 * v28;
          *(void *)(v35[6] + v36) = v26;
          *(void *)(v35[7] + v36) = v25;
          uint64_t v37 = v35[2];
          BOOL v22 = __OFADD__(v37, 1LL);
          uint64_t v38 = v37 + 1;
          if (v22) {
            goto LABEL_26;
          }
          v35[2] = v38;
        }

        if (!--v19) {
          return (void *)swift_bridgeObjectRelease(v6);
        }
      }

      goto LABEL_25;
    }

    if ((a2 & 1) != 0)
    {
      BOOL v18 = (void *)*a3;
      if ((v10 & 1) != 0) {
        goto LABEL_9;
      }
    }

    else
    {
      sub_100025EF8();
      BOOL v18 = (void *)*a3;
      if ((v15 & 1) != 0) {
        goto LABEL_9;
      }
    }

char *sub_100029D48(char *result, int64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v6 = result;
  int64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = &result[-a2];
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }

  else
  {
    if (v5 <= v9) {
      int64_t v10 = (int64_t)&v8[v5];
    }
    else {
      int64_t v10 = v5;
    }
    unint64_t result = sub_1000127B4(result, v10, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }

  uint64_t v11 = *((void *)v4 + 2);
  size_t v12 = v11 - a2;
  if (__OFSUB__(v11, a2)) {
    goto LABEL_26;
  }
  unint64_t result = &v6[(void)(v4 + 32)];
  BOOL v13 = &v4[a2 + 32];
  uint64_t v14 = *((void *)v4 + 2);
  BOOL v15 = __OFADD__(v14, v8);
  unint64_t v16 = &v8[v14];
  if (!v15)
  {
    *((void *)v4 + 2) = v16;
LABEL_20:
    *int64_t v2 = v4;
    return result;
  }

uint64_t sub_100029E48(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v5 = a2;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    uint64_t v7 = String.index(_:offsetBy:limitedBy:)(v6 | (v5 << 16), -result, 15LL, a2, a3);
    if ((v8 & 1) != 0) {
      uint64_t v9 = 15LL;
    }
    else {
      uint64_t v9 = v7;
    }
    return String.subscript.getter(15LL, v9, a2, a3);
  }

  return result;
}

void *sub_100029ED0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100027228(0LL, v1, 0);
    uint64_t v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t v5 = sub_100020DBC(v4);
      uint64_t v7 = v6;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_100027228((char *)(v8 > 1), v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      int64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v5;
      v10[5] = v7;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_100029FB4(_BYTE *a1)
{
  if ((a1[16] & 1) == 0)
  {
    int64_t v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1[17] & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }

  int64_t v2 = sub_1000126B4(0LL, 1LL, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    int64_t v2 = sub_1000126B4((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  uint64_t v5 = &v2[16 * v4];
  *((void *)v5 + 4) = 0x736154646C696863LL;
  *((void *)v5 + 5) = 0xE90000000000006BLL;
  if ((a1[17] & 1) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      int64_t v2 = sub_1000126B4(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
    }
    unint64_t v7 = *((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 3);
    if (v7 >= v6 >> 1) {
      int64_t v2 = sub_1000126B4((char *)(v6 > 1), v7 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v7 + 1;
    unint64_t v8 = &v2[16 * v7];
    *((void *)v8 + 4) = 0x657275747566LL;
    *((void *)v8 + 5) = 0xE600000000000000LL;
  }

LABEL_29:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    int64_t v2 = sub_1000126B4(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
  }
  unint64_t v16 = *((void *)v2 + 2);
  unint64_t v15 = *((void *)v2 + 3);
  if (v16 >= v15 >> 1) {
    int64_t v2 = sub_1000126B4((char *)(v15 > 1), v16 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v16 + 1;
  char v17 = &v2[16 * v16];
  *((void *)v17 + 4) = 0x656C6C65636E6163LL;
  *((void *)v17 + 5) = 0xE900000000000064LL;
  if ((a1[25] & 1) == 0)
  {
LABEL_16:
    if ((a1[26] & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

    unint64_t v13 = (v13 + 1) & v15;
    if (((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
      goto LABEL_47;
    }
  }

  if (!v41) {
    goto LABEL_29;
  }
  swift_bridgeObjectRelease(v37);
  uint64_t v32 = 1LL;
LABEL_49:
  uint64_t v30 = 0LL;
  uint64_t v31 = 0x80;
LABEL_50:
  sub_10003F434(v32, v30, v31);
  char v33 = *(void *)(*v38 + 48LL) + 24 * v13;
  char v34 = *(void *)v33;
  int v35 = *(void *)(v33 + 8);
  *(void *)a1 = *(void *)v33;
  *(void *)(a1 + 8) = v35;
  uint64_t v36 = *(_BYTE *)(v33 + 16);
  *(_BYTE *)(a1 + 16) = v36;
  sub_10003F6B0(v34, v35, v36);
  return 0LL;
}

          __break(1u);
LABEL_30:
          unint64_t result = (char *)swift_bridgeObjectRelease(v11);
          __break(1u);
          return result;
        }
      }

      else if (v27 == v6)
      {
        goto LABEL_17;
      }

      ++v6;
      v7 += 2;
      int64_t v2 = 0LL;
      if (v5 == v6)
      {
        __break(1u);
        goto LABEL_29;
      }
    }
  }

  return v4;
}

    *(void *)&v8[8 * v29] = v31 | v30;
    *(void *)(v32 + 8 * v28) = v26;
    unint64_t v24 = v4[2];
    unint64_t v10 = __OFADD__(v24, 1LL);
    unint64_t v25 = v24 + 1;
    if (v10) {
      goto LABEL_42;
    }
    _OWORD v4[2] = v25;
    unint64_t result = swift_retain(v26);
    goto LABEL_31;
  }

  unint64_t v9 = 0LL;
  while (1)
  {
    unint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
    unint64_t v10 = __OFADD__(v9++, 1LL);
    if (v10) {
      break;
    }
    uint64_t v11 = result;
    Hasher.init(_seed:)(v34, v4[5]);
    Hasher._combine(_:)(v11);
    unint64_t result = Hasher._finalize()();
    unint64_t v12 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v13 = result & ~v12;
    uint64_t v14 = v13 >> 6;
    unint64_t v15 = *(void *)&v8[8 * (v13 >> 6)];
    unint64_t v16 = 1LL << v13;
    char v17 = v4[6];
    if (((1LL << v13) & v15) == 0) {
      goto LABEL_25;
    }
    if (*(void *)(v17 + 8 * v13) == v11)
    {
LABEL_17:
      swift_unknownObjectRelease(v11);
      if (v9 == v5) {
        return (Swift::Int)v4;
      }
    }

    else
    {
      unint64_t v18 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v18;
        uint64_t v14 = v13 >> 6;
        unint64_t v15 = *(void *)&v8[8 * (v13 >> 6)];
        unint64_t v16 = 1LL << v13;
        if ((v15 & (1LL << v13)) == 0) {
          break;
        }
        if (*(void *)(v17 + 8 * v13) == v11) {
          goto LABEL_17;
        }
      }

LABEL_34:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    int64_t v2 = sub_1000126B4(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
  }
  unint64_t v19 = *((void *)v2 + 2);
  unint64_t v18 = *((void *)v2 + 3);
  if (v19 >= v18 >> 1) {
    int64_t v2 = sub_1000126B4((char *)(v18 > 1), v19 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v19 + 1;
  uint64_t v20 = &v2[16 * v19];
  *((void *)v20 + 4) = 0xD000000000000012LL;
  *((void *)v20 + 5) = 0x800000010009C950LL;
  if ((a1[26] & 1) == 0)
  {
LABEL_17:
    if ((a1[27] & 1) == 0) {
      goto LABEL_50;
    }
    goto LABEL_44;
  }

    if (++v47 == v45)
    {
      swift_bridgeObjectRelease(v162);
      swift_bridgeObjectRelease(v46);
      goto LABEL_99;
    }

    if (v47 >= *(void *)(v46 + 16)) {
      goto LABEL_211;
    }
  }

  char v160 = v47;
  if (BYTE8(v202) == 1)
  {
    unint64_t v4 = *((void *)&v201 + 1);
    uint64_t v58 = v202;
    int v168 = BYTE8(v192);
    sub_10002D724((uint64_t)&v192);
    char v210 = v4;
    v182 = v58;
    sub_10002D860(v4, v58);
    while (1)
    {
      sub_100065564(v179 == 4, &v188, (uint64_t)v204);
      sub_10002AACC((uint64_t)v204, (uint64_t)v205, &qword_1000B9BC0);
      if ((v206 & 0x7FFFFFFFFFFFFF3ELL) == 0x7FFFFFF3ELL) {
        break;
      }
      unint64_t v6 = v207;
      unint64_t v10 = v208;
      unint64_t v59 = v209;
      char isUniquelyReferenced_nonNull_native = sub_100067098((uint64_t)v204);
      if ((v6 & 0x8000000000000000LL) != 0)
      {
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }

      if (v6 >= *(void *)(a3 + 16)) {
        goto LABEL_209;
      }
      unint64_t v8 = v59 & 1;
      uint64_t v60 = (uint64_t *)(a3 + 32 + 16 * v6);
      __int128 v61 = *v60;
      uint64_t v62 = v60[1];
      __int128 v63 = sub_100005104(&qword_1000B96E8);
      unint64_t v9 = swift_allocObject(v63, 56LL, 7LL);
      *(_OWORD *)(v9 + 16) = xmmword_100096510;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v10;
      uint64_t v64 = v10;
      *(_WORD *)(v9 + 48) = v8;
      swift_bridgeObjectRetain(v62);
      unint64_t v10 = sub_10006D354(v9);
      swift_setDeallocating(v9);
      swift_deallocClassInstance(v9, 32LL, 7LL);
      ((void (*)(unint64_t, void, void, uint64_t, uint64_t, uint64_t, void *))v210)( v10,  0LL,  0LL,  254LL,  v61,  v62,  a4);
      if (v177)
      {
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v62);
        sub_10002D9E0(v210, v182);
        sub_10002D8A4((uint64_t)&v192);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v162);
        uint64_t v87 = v165;
        goto LABEL_205;
      }

      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v62);
      if (*(void *)(v7 + 16))
      {
        Hasher.init(_seed:)(v186, *(void *)(v7 + 40));
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v6);
        if ((_DWORD)v8)
        {
          uint64_t v65 = 0LL;
        }

        else
        {
          Hasher._combine(_:)(1uLL);
          uint64_t v65 = v64;
        }

        Hasher._combine(_:)(v65);
        unint64_t v4 = (uint64_t)v186;
        uint64_t v66 = Hasher._finalize()();
        uint64_t v67 = -1LL << *(_BYTE *)(v7 + 32);
        uint64_t v68 = v66 & ~v67;
        if (((*(void *)(v7 + 56 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v68) & 1) != 0)
        {
          uint64_t v69 = ~v67;
          do
          {
            uint64_t v70 = *(void *)(v7 + 48) + 24 * v68;
            if ((*(_BYTE *)(v70 + 17) & 1) == 0 && *(void *)v70 == v6)
            {
              if ((*(_BYTE *)(v70 + 16) & 1) != 0)
              {
                if ((_DWORD)v8) {
                  goto LABEL_40;
                }
              }

              else if (!(_DWORD)v8 && *(void *)(v70 + 8) == v64)
              {
                goto LABEL_40;
              }
            }

            uint64_t v68 = (v68 + 1) & v69;
          }

          while (((*(void *)(v7 + 56 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v68) & 1) != 0);
        }
      }

      Hasher.init(_seed:)(v186, *(void *)(v7 + 40));
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v6);
      if ((_DWORD)v8)
      {
        uint64_t v71 = 0LL;
      }

      else
      {
        Hasher._combine(_:)(1uLL);
        uint64_t v71 = v64;
      }

      Hasher._combine(_:)(v71);
      unint64_t v4 = (uint64_t)v186;
      BOOL v72 = Hasher._finalize()();
      unint64_t v73 = -1LL << *(_BYTE *)(v7 + 32);
      unint64_t v9 = v72 & ~v73;
      if (((*(void *)(v7 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
      {
        char v74 = ~v73;
        do
        {
          uint64_t v75 = *(void *)(v7 + 48) + 24 * v9;
          if ((*(_BYTE *)(v75 + 17) & 1) == 0 && *(void *)v75 == v6)
          {
            if ((*(_BYTE *)(v75 + 16) & 1) != 0)
            {
              if ((_DWORD)v8) {
                goto LABEL_40;
              }
            }

            else if (!(_DWORD)v8 && *(void *)(v75 + 8) == v64)
            {
              goto LABEL_40;
            }
          }

          unint64_t v9 = (v9 + 1) & v74;
        }

        while (((*(void *)(v7 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0);
      }

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
      v187[0] = v7;
      uint64_t v76 = *(void *)(v7 + 16);
      if (*(void *)(v7 + 24) <= v76)
      {
        uint64_t v77 = v76 + 1;
        if ((_DWORD)isUniquelyReferenced_nonNull_native) {
          sub_100059EC8(v77);
        }
        else {
          sub_10005B338(v77);
        }
        unint64_t v7 = v187[0];
        Hasher.init(_seed:)(v186, *(void *)(v187[0] + 40LL));
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v6);
        if ((_DWORD)v8)
        {
          uint64_t v78 = 0LL;
        }

        else
        {
          Hasher._combine(_:)(1uLL);
          uint64_t v78 = v64;
        }

        Hasher._combine(_:)(v78);
        unint64_t v4 = (uint64_t)v186;
        char isUniquelyReferenced_nonNull_native = Hasher._finalize()();
        uint64_t v79 = -1LL << *(_BYTE *)(v7 + 32);
        unint64_t v9 = isUniquelyReferenced_nonNull_native & ~v79;
        if (((*(void *)(v7 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
        {
          uint64_t v80 = ~v79;
          do
          {
            uint64_t v81 = *(void *)(v7 + 48) + 24 * v9;
            if ((*(_BYTE *)(v81 + 17) & 1) == 0 && *(void *)v81 == v6)
            {
              if ((*(_BYTE *)(v81 + 16) & 1) != 0)
              {
                if ((_DWORD)v8) {
                  goto LABEL_229;
                }
              }

              else if (!(_DWORD)v8 && *(void *)(v81 + 8) == v64)
              {
                goto LABEL_229;
              }
            }

            unint64_t v9 = (v9 + 1) & v80;
          }

          while (((*(void *)(v7 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0);
        }
      }

      else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v4 = (uint64_t)v187;
        char isUniquelyReferenced_nonNull_native = (uint64_t)sub_10005ACA8();
        unint64_t v7 = v187[0];
      }

      *(void *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v9;
      BOOL v82 = *(void *)(v7 + 48) + 24 * v9;
      *(void *)BOOL v82 = v6;
      *(void *)(v82 + 8) = v64;
      *(_BYTE *)(v82 + 16) = v8;
      *(_BYTE *)(v82 + 17) = 0;
      uint64_t v83 = *(void *)(v7 + 16);
      char v84 = __OFADD__(v83, 1LL);
      Swift::String v85 = v83 + 1;
      if (v84) {
        goto LABEL_210;
      }
      *(void *)(v7 + 16) = v85;
      swift_bridgeObjectRelease(0x8000000000000000LL);
LABEL_40:
      if ((v168 & 2) == 0)
      {
        sub_10002D9E0(v210, v182);
        char isUniquelyReferenced_nonNull_native = sub_10002D8A4((uint64_t)&v192);
        uint64_t v45 = v163;
        BOOL v46 = v165;
        uint64_t v44 = v158;
        uint64_t v47 = v160;
        goto LABEL_34;
      }
    }

    swift_bridgeObjectRelease(v162);
    swift_bridgeObjectRelease(v165);
    sub_10002D9E0(v210, v182);
    sub_10002D8A4((uint64_t)&v192);
LABEL_99:
    unint64_t v4 = v167;
LABEL_100:
    uint64_t v88 = *(void *)(v4 + 16);
    BOOL v89 = *(void *)(v88 + 16);
    if (v89)
    {
      uint64_t v90 = *(_OWORD *)(v88 + 176);
      uint64_t v200 = *(_OWORD *)(v88 + 160);
      v201 = v90;
      uint64_t v91 = *(_OWORD *)(v88 + 208);
      v202 = *(_OWORD *)(v88 + 192);
      uint64_t v203 = v91;
      Swift::String v92 = *(_OWORD *)(v88 + 112);
      uint64_t v196 = *(_OWORD *)(v88 + 96);
      v197 = v92;
      uint64_t v93 = *(_OWORD *)(v88 + 144);
      uint64_t v198 = *(_OWORD *)(v88 + 128);
      uint64_t v199 = v93;
      uint64_t v94 = *(_OWORD *)(v88 + 48);
      v192 = *(_OWORD *)(v88 + 32);
      uint64_t v193 = v94;
      uint64_t v95 = *(_OWORD *)(v88 + 80);
      uint64_t v194 = *(_OWORD *)(v88 + 64);
      uint64_t v195 = v95;
      for (j = (__int128 *)(v88 + 224); ; j += 12)
      {
        --v89;
        if (!(void)v192 && (BYTE8(v192) & 2) != 0 && BYTE1(v201) == 6) {
          break;
        }
        if (!v89) {
          goto LABEL_204;
        }
        uint64_t v97 = *j;
        uint64_t v98 = j[1];
        uint64_t v99 = j[3];
        uint64_t v194 = j[2];
        uint64_t v195 = v99;
        v192 = v97;
        uint64_t v193 = v98;
        uint64_t v100 = j[4];
        unint64_t v101 = j[5];
        uint64_t v102 = j[7];
        uint64_t v198 = j[6];
        uint64_t v199 = v102;
        uint64_t v196 = v100;
        v197 = v101;
        uint64_t v103 = j[8];
        char v104 = j[9];
        uint64_t v105 = j[11];
        v202 = j[10];
        uint64_t v203 = v105;
        uint64_t v200 = v103;
        v201 = v104;
      }

      if (BYTE8(v202) == 1)
      {
        unint64_t v9 = *((void *)&v201 + 1);
        unint64_t v4 = v202;
        swift_beginAccess(&v188, v187, 1LL, 0LL);
        unint64_t v8 = v188;
        uint64_t v11 = v189;
        unint64_t v6 = v190;
        unint64_t v10 = v191;
        if ((v191 & 1) == 0)
        {
          sub_10002D724((uint64_t)&v192);
          sub_10002D860(v9, v4);
          swift_unknownObjectRetain(v8);
          goto LABEL_110;
        }

  Hasher._combine(_:)(0);
  uint64_t v20 = *((void *)v2 + 11);
  if (v20)
  {
LABEL_24:
    unint64_t v21 = *((void *)v2 + 10);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v20);
    String.hash(into:)(a1, v21, v20);
    swift_bridgeObjectRelease(v20);
    unint64_t v22 = *((void *)v2 + 12);
    if (v22) {
      goto LABEL_25;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    uint64_t v27 = *((void *)v2 + 14);
    if (v27) {
      goto LABEL_30;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    unint64_t v29 = *((void *)v2 + 16);
    if (v29) {
      goto LABEL_31;
    }
    goto LABEL_38;
  }

LABEL_39:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    int64_t v2 = sub_1000126B4(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
  }
  unint64_t v22 = *((void *)v2 + 2);
  unint64_t v21 = *((void *)v2 + 3);
  if (v22 >= v21 >> 1) {
    int64_t v2 = sub_1000126B4((char *)(v21 > 1), v22 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v22 + 1;
  uint64_t v23 = &v2[16 * v22];
  *((void *)v23 + 4) = 0x6574616C61637365LL;
  *((void *)v23 + 5) = 0xE900000000000064LL;
  if ((a1[27] & 1) != 0)
  {
LABEL_44:
    if ((a1[28] & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
        int64_t v2 = sub_1000126B4(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
      }
      unint64_t v25 = *((void *)v2 + 2);
      unint64_t v24 = *((void *)v2 + 3);
      if (v25 >= v24 >> 1) {
        int64_t v2 = sub_1000126B4((char *)(v24 > 1), v25 + 1, 1, v2);
      }
      *((void *)v2 + 2) = v25 + 1;
      uint64_t v26 = &v2[16 * v25];
      *((void *)v26 + 4) = 0x676E696E6E7572LL;
      *((void *)v26 + 5) = 0xE700000000000000LL;
    }
  }

LABEL_50:
  if ((a1[29] & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      int64_t v2 = sub_1000126B4(0LL, *((void *)v2 + 2) + 1LL, 1, v2);
    }
    unint64_t v29 = *((void *)v2 + 2);
    unint64_t v28 = *((void *)v2 + 3);
    if (v29 >= v28 >> 1) {
      int64_t v2 = sub_1000126B4((char *)(v28 > 1), v29 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v29 + 1;
    uint64_t v30 = &v2[16 * v29];
    *((void *)v30 + 4) = 0x6465756575716E65LL;
    *((void *)v30 + 5) = 0xE800000000000000LL;
    goto LABEL_58;
  }

  if (*((void *)v2 + 2))
  {
LABEL_58:
    uint64_t v31 = sub_100005104(&qword_1000B8768);
    uint64_t v32 = sub_1000062F8(&qword_1000B8770, &qword_1000B8768, (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v27 = BidirectionalCollection<>.joined(separator:)(124LL, 0xE100000000000000LL, v31, v32);
    swift_bridgeObjectRelease(v2);
    return v27;
  }

  swift_bridgeObjectRelease(v2);
  return 48LL;
}

unint64_t sub_10002A554(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100005104(&qword_1000B9010);
  unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  unsigned __int8 v4 = *(_BYTE *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t result = sub_100023C1C(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }

  unint64_t v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_BYTE *)(v3[6] + result) = v4;
    unint64_t v10 = (void *)(v3[7] + 16 * result);
    *unint64_t v10 = v6;
    v10[1] = v5;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    unsigned __int8 v4 = *((_BYTE *)v9 - 16);
    uint64_t v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain(v5);
    unint64_t result = sub_100023C1C(v4);
    unint64_t v9 = v14;
    uint64_t v5 = v15;
    if ((v16 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

void sub_10002A660(int a1@<W1>, uint64_t a2@<X8>)
{
  unint64_t v4 = sub_10002A554((uint64_t)&off_1000AD2A0);
  uint64_t v5 = sub_100005104(&qword_1000B9008);
  swift_arrayDestroy(&unk_1000AD2C0, 5LL, v5);
  if ((a1 & 0x10000) != 0)
  {
    uint64_t v6 = sub_1000126B4(0LL, 1LL, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v11 = *((void *)v6 + 2);
    unint64_t v10 = *((void *)v6 + 3);
    if (v11 >= v10 >> 1) {
      uint64_t v6 = sub_1000126B4((char *)(v10 > 1), v11 + 1, 1, v6);
    }
    *((void *)v6 + 2) = v11 + 1;
    BOOL v12 = &v6[16 * v11];
    *((void *)v12 + 4) = 0xD000000000000011LL;
    *((void *)v12 + 5) = 0x800000010009C7D0LL;
    if ((a1 & 0x100) != 0) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v6 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 0x100) != 0)
    {
LABEL_3:
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
        uint64_t v6 = sub_1000126B4(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
      }
      unint64_t v8 = *((void *)v6 + 2);
      unint64_t v7 = *((void *)v6 + 3);
      if (v8 >= v7 >> 1) {
        uint64_t v6 = sub_1000126B4((char *)(v7 > 1), v8 + 1, 1, v6);
      }
      *((void *)v6 + 2) = v8 + 1;
      unint64_t v9 = &v6[16 * v8];
      *((void *)v9 + 4) = 0xD000000000000011LL;
      *((void *)v9 + 5) = 0x800000010009C7B0LL;
      goto LABEL_12;
    }
  }

  if (!*((void *)v6 + 2))
  {
    swift_bridgeObjectRelease(v6);
    unint64_t v17 = 0xE100000000000000LL;
    uint64_t v15 = 48LL;
    if (!*(void *)(v4 + 16)) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }

unint64_t sub_10002A8F4()
{
  unint64_t result = qword_1000B8FF0;
  if (!qword_1000B8FF0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1000B8FF0);
  }

  return result;
}

unint64_t sub_10002A938()
{
  unint64_t result = qword_1000B8FF8;
  if (!qword_1000B8FF8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1000B8FF8);
  }

  return result;
}

uint64_t sub_10002A97C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 104);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_10002A994()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002A9B8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t *sub_10002A9C8(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10002AA28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = a14;
  if (a14)
  {
    swift_bridgeObjectRelease(a14);
    return swift_bridgeObjectRelease(a15);
  }

  return result;
}

uint64_t sub_10002AA60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  swift_bridgeObjectRetain(*(void *)(a1 + 96));
  swift_bridgeObjectRetain(v2);
  return a1;
}

double sub_10002AA94(uint64_t a1)
{
  *(_BYTE *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_10002AAB0@<X0>(const char *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100020C24(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_10002AACC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005104(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

void *sub_10002AB10(void *a1)
{
  return a1;
}

uint64_t *sub_10002AB38(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10002AB90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result = a11;
  if (a11)
  {
    swift_bridgeObjectRelease(a11);
    return swift_bridgeObjectRelease(a12);
  }

  return result;
}

void *sub_10002ABC8(void *a1)
{
  return a1;
}

uint64_t sub_10002ABF0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10002AC24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result = a11;
  if (a11)
  {
    swift_bridgeObjectRetain(a11);
    return swift_bridgeObjectRetain(a12);
  }

  return result;
}

uint64_t sub_10002AC5C(uint64_t a1, uint64_t a2)
{
  return sub_10001F058(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24));
}

uint64_t sub_10002AC64()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002AC74()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002AC98(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_10002ACC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }

  return result;
}

uint64_t sub_10002ACF8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

ValueMetadata *type metadata accessor for DumpConcurrency()
{
  return &type metadata for DumpConcurrency;
}

unint64_t sub_10002AD40(uint64_t a1)
{
  unint64_t result = sub_10002AD64();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002AD64()
{
  unint64_t result = qword_1000B9060;
  if (!qword_1000B9060)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097CB4, &type metadata for DumpConcurrency);
    atomic_store(result, (unint64_t *)&qword_1000B9060);
  }

  return result;
}

unint64_t sub_10002ADA8(uint64_t a1)
{
  unint64_t result = sub_10002ADCC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002ADCC()
{
  unint64_t result = qword_1000B9068;
  if (!qword_1000B9068)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097CDC, &type metadata for DumpConcurrency);
    atomic_store(result, (unint64_t *)&qword_1000B9068);
  }

  return result;
}

uint64_t sub_10002AE10(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10002AE18@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v3 = sub_100005104(&qword_1000B9090);
  uint64_t v55 = *(void *)(v3 - 8);
  uint64_t v56 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(unsigned __int8 *)ArgumentVisibility.default.unsafeMutableAddressor();
  unint64_t v7 = sub_1000059BC();
  OptionGroup.init(title:visibility:)( 0LL,  0xE000000000000000LL,  v6,  (uint64_t)&type metadata for UniversalOptions,  v7,  (uint64_t)&v64);
  uint64_t v57 = v64;
  uint64_t v8 = v66;
  uint64_t v78 = v65;
  uint64_t v62 = v68;
  uint64_t v63 = v67;
  uint64_t v60 = v70;
  uint64_t v61 = v69;
  uint64_t v59 = v71;
  int v9 = v72;
  int v10 = v73;
  uint64_t v11 = v77;
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100006270(a1, v12);
  unint64_t v14 = sub_10002B20C();
  uint64_t v54 = v5;
  uint64_t v15 = v78;
  uint64_t v16 = v58;
  uint64_t v17 = v12;
  uint64_t v18 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DumpConcurrency.CodingKeys,  &type metadata for DumpConcurrency.CodingKeys,  v14,  v17,  v13);
  uint64_t v19 = v57;
  if (v16)
  {
    sub_1000062D8(a1);
    sub_100003BCC(v19, v15, v8, v18, v62, v61, v60, v59, v9, v10);
    return swift_bridgeObjectRelease(v11);
  }

  else
  {
    int v50 = v10;
    int v51 = v9;
    uint64_t v52 = a1;
    uint64_t v58 = v8;
    uint64_t v20 = v57;
    uint64_t v21 = v11;
    uint64_t v22 = sub_100005104(&qword_1000B8740);
    uint64_t v23 = sub_1000062F8( (unint64_t *)&qword_1000B8798,  &qword_1000B8740,  (uint64_t)&protocol conformance descriptor for OptionGroup<A>);
    uint64_t v24 = v56;
    Swift::String v25 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, v22, v26, v56, v22, v23);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v25, v24);
    uint64_t v27 = v64;
    uint64_t v28 = v65;
    LOBYTE(v24) = v66;
    uint64_t v29 = v67;
    uint64_t v48 = v68;
    uint64_t v47 = v69;
    uint64_t v45 = v70;
    uint64_t v44 = v71;
    int v49 = v72;
    char v30 = v73;
    LODWORD(v56) = v74;
    LODWORD(v55) = v75;
    uint64_t v31 = v77;
    uint64_t v54 = v76;
    uint64_t v46 = v77;
    int v43 = v73;
    uint64_t v41 = v64;
    uint64_t v42 = v66;
    sub_100003A6C(v64, v65, v66, v67, v68, v69, v70, v71, v72, v73);
    swift_bridgeObjectRetain(v31);
    sub_100003BCC(v20, v78, v58, v63, v62, v61, v60, v59, v51, v50);
    swift_bridgeObjectRelease(v21);
    sub_1000062D8(v52);
    LOBYTE(v31) = v49;
    uint64_t v32 = v27;
    char v33 = v24;
    uint64_t v34 = v48;
    uint64_t v35 = v47;
    uint64_t v36 = v45;
    uint64_t v37 = v44;
    sub_100003BCC(v32, v28, v33, v29, v48, v47, v45, v44, v49, v30);
    uint64_t v38 = v46;
    uint64_t result = swift_bridgeObjectRelease(v46);
    uint64_t v40 = v53;
    *uint64_t v53 = v41;
    v40[1] = v28;
    v40[2] = v42;
    v40[3] = v29;
    v40[4] = v34;
    v40[5] = v35;
    v40[6] = v36;
    v40[7] = v37;
    *((_BYTE *)v40 + 64) = v31;
    *((_BYTE *)v40 + 65) = v43;
    *((_BYTE *)v40 + 66) = v56;
    *((_BYTE *)v40 + 67) = v55;
    v40[9] = (uint64_t)v54;
    v40[10] = v38;
  }

  return result;
}

unint64_t sub_10002B20C()
{
  unint64_t result = qword_1000B9098;
  if (!qword_1000B9098)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097DD8, &type metadata for DumpConcurrency.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B9098);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DumpConcurrency.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10002B290 + 4 * byte_100097C10[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10002B2B0 + 4 * byte_100097C15[v4]))();
  }
}

_BYTE *sub_10002B290(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10002B2B0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10002B2B8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10002B2C0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10002B2C8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10002B2D0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DumpConcurrency.CodingKeys()
{
  return &type metadata for DumpConcurrency.CodingKeys;
}

unint64_t sub_10002B2F0()
{
  unint64_t result = qword_1000B90A0;
  if (!qword_1000B90A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097DB0, &type metadata for DumpConcurrency.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B90A0);
  }

  return result;
}

unint64_t sub_10002B338()
{
  unint64_t result = qword_1000B90A8;
  if (!qword_1000B90A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097D20, &type metadata for DumpConcurrency.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B90A8);
  }

  return result;
}

unint64_t sub_10002B380()
{
  unint64_t result = qword_1000B90B0;
  if (!qword_1000B90B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100097D48, &type metadata for DumpConcurrency.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B90B0);
  }

  return result;
}

uint64_t sub_10002B3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B90C0);
  uint64_t inited = swift_initStackObject(v4, v21);
  *(_OWORD *)(inited + 16) = xmmword_100096510;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  uint64_t v6 = sub_10003058C(inited);
  uint64_t v8 = v7;
  swift_setDeallocating(inited);
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  strcpy((char *)v20, "#!/bin/bash\n\n");
  HIWORD(v20[1]) = -4864;
  uint64_t v9 = swift_allocObject(v4, 48LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_100096510;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  uint64_t v10 = sub_10002B550(v9);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease(v9);
  v13._char countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14._char countAndFlagsBits = 0x656C706D6F630A0ALL;
  v14._object = (void *)0xEE0020462D206574LL;
  String.append(_:)(v14);
  v15._char countAndFlagsBits = v6;
  v15._object = v8;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v8);
  v16._char countAndFlagsBits = 32LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  v17._char countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  return v20[0];
}

uint64_t sub_10002B550(uint64_t a1)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(void *__return_ptr);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  char *v40;
  Swift::String v41;
  Swift::String v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  void *object;
  uint64_t v58;
  void **v59;
  uint64_t v60;
  void *v61;
  Swift::String v62;
  Swift::String v63;
  void *v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  Swift::String v80;
  Swift::String v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t countAndFlagsBits;
  void *v92;
  uint64_t v93;
  char *v94;
  Swift::String v95;
  Swift::String v96;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  Swift::String v101;
  void *v102;
  char *v103;
  Swift::String v104;
  void *v105;
  Swift::String v106;
  void *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t);
  Swift::String v113;
  void *v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  void *v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  char *v126;
  Swift::String v127;
  Swift::String v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  Swift::String v136;
  Swift::String v137;
  uint64_t v138;
  Swift::String v139;
  char *v140;
  int64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  void *v155;
  void *v156;
  Swift::String v157;
  _BYTE v159[16];
  Swift::String *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  void *v168;
  uint64_t v169;
  void *v170;
  char *v171;
  uint64_t v172;
  __int128 v173;
  void v174[2];
  Swift::String v175;
  char *v176;
  char *v177;
  void v178[13];
  uint64_t v179;
  void v180[12];
  char v181;
  uint64_t v182;
  uint64_t v5 = *(char **)(a1 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_64;
  }

  uint64_t v2 = a1;
  uint64_t v6 = a1 + 16LL * (void)v5;
  uint64_t v7 = *(void *)(v6 + 24);
  char v165 = v6 + 24;
  uint64_t v8 = *(void *)(v6 + 16);
  char v164 = (uint64_t *)(v6 + 16);
  uint64_t v4 = sub_10003058C(a1);
  unint64_t v10 = 0xE100000000000000LL;
  uint64_t v11 = 49LL;
  else {
    uint64_t v3 = 0x29312B3124282824LL;
  }
  else {
    unint64_t v12 = 0xE900000000000029LL;
  }
  char v170 = (void *)v12;
  char v171 = v9;
  char v162 = v11;
  Swift::String v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 16);
  char v167 = v5;
  int v168 = (void *)v10;
  v13(v178, v8, v7);
  Swift::String v14 = v179;
  v182 = v179;
  swift_bridgeObjectRetain(v179);
  sub_10002CC24(v178);
  Swift::String v15 = *(void *)(v14 + 16);
  if (v15)
  {
    Swift::String v16 = (__int128 *)(v14 + 32);
    uint64_t v5 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v19 = *(void (**)(void *__return_ptr))(*((void *)v16 + 1) + 16LL);
      char v173 = *v16;
      v19(v180);
      sub_10002CC24(v180);
      if ((v181 & 1) != 0)
      {
        uint64_t v176 = v5;
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        {
          sub_10004FE48(0LL, *((void *)v5 + 2) + 1LL, 1);
          uint64_t v5 = v176;
        }

        uint64_t v18 = *((void *)v5 + 2);
        Swift::String v17 = *((void *)v5 + 3);
        if (v18 >= v17 >> 1)
        {
          sub_10004FE48((char *)(v17 > 1), v18 + 1, 1);
          uint64_t v5 = v176;
        }

        *((void *)v5 + 2) = v18 + 1;
        *(_OWORD *)&v5[16 * v18 + 32] = v173;
      }

      ++v16;
      --v15;
    }

    while (v15);
  }

  else
  {
    uint64_t v5 = (char *)_swiftEmptyArrayStorage;
  }

  sub_10002ABC8(&v182);
  if (v167 == (char *)1)
  {
    uint64_t v1 = *((void *)v5 + 2);
    if (v1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) != 0)
      {
LABEL_25:
        uint64_t v21 = *((void *)v5 + 2);
        uint64_t v20 = *((void *)v5 + 3);
        if (v21 >= v20 >> 1) {
          uint64_t v5 = sub_100057FEC((char *)(v20 > 1), v21 + 1, 1, v5);
        }
        uint64_t v22 = sub_10002D6E0();
        *((void *)v5 + 2) = v21 + 1;
        uint64_t v23 = &v5[16 * v21];
        *((void *)v23 + 4) = &type metadata for HelpCommand;
        *((void *)v23 + 5) = v22;
        goto LABEL_28;
      }

LABEL_64:
      uint64_t v5 = sub_100057FEC(0LL, v1 + 1, 1, v5);
      goto LABEL_25;
    }
  }

    if (v13 >= v4) {
      goto LABEL_96;
    }
    if (__OFSUB__(v13, v12)) {
      goto LABEL_177;
    }
    if (v13 - v12 >= v138)
    {
LABEL_95:
      unint64_t v12 = v145;
      goto LABEL_96;
    }

    unint64_t v12 = v145;
    uint64_t v56 = v145 + v138;
    if (__OFADD__(v145, v138)) {
      goto LABEL_181;
    }
    if (v56 >= v4) {
      uint64_t v56 = v4;
    }
    if (v56 >= v145)
    {
      if (v13 != v56)
      {
        Swift::String v142 = v2;
        unint64_t v143 = v56;
        unint64_t v140 = v8;
        uint64_t v57 = v10 + 24 * v13;
        while (1)
        {
          uint64_t v150 = v13;
          uint64_t v58 = v145;
          Swift::String v146 = v57;
          uint64_t v59 = v57;
          while (1)
          {
            uint64_t v60 = *(void *)v57;
            uint64_t v61 = *(void *)(v57 + 8);
            uint64_t v62 = *(unsigned __int8 *)(v57 + 16);
            uint64_t v64 = *(void *)(v59 - 24);
            v59 -= 24LL;
            uint64_t v63 = v64;
            uint64_t v65 = *(void **)(v57 - 16);
            uint64_t v66 = *(unsigned __int8 *)(v57 - 8);
            __int128 v157 = *(void *)v57;
            Swift::String v154 = (void *)v61;
            uint64_t v152 = v64;
            if (v66 >> 6)
            {
              if (v66 >> 6 == 1)
              {
                uint64_t v155 = 0LL;
                Swift::Int v156 = 0xE000000000000000LL;
                sub_100030508(v60, v61, v62);
                sub_100030508(v63, (uint64_t)v65, v66);
                v67._char countAndFlagsBits = 45LL;
                v67._object = (void *)0xE100000000000000LL;
                String.append(_:)(v67);
                Character.write<A>(to:)( &v155,  v63,  v65,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
                goto LABEL_82;
              }

              uint64_t v155 = 45LL;
              uint64_t v68 = 0xE100000000000000LL;
            }

            else
            {
              uint64_t v155 = 11565LL;
              uint64_t v68 = 0xE200000000000000LL;
            }

            Swift::Int v156 = v68;
            sub_100030508(v60, v61, v62);
            sub_100030508(v63, (uint64_t)v65, v66);
            v69._char countAndFlagsBits = v63;
            v69._object = v65;
            String.append(_:)(v69);
LABEL_82:
            uint64_t v70 = v155;
            uint64_t v71 = v156;
            if (!(v62 >> 6))
            {
              uint64_t v155 = 11565LL;
              unsigned __int8 v73 = 0xE200000000000000LL;
LABEL_87:
              Swift::Int v156 = v73;
              v74._char countAndFlagsBits = v157;
              v74._object = v154;
              String.append(_:)(v74);
              goto LABEL_88;
            }

            if (v62 >> 6 != 1)
            {
              uint64_t v155 = 45LL;
              unsigned __int8 v73 = 0xE100000000000000LL;
              goto LABEL_87;
            }

            uint64_t v155 = 0LL;
            Swift::Int v156 = 0xE000000000000000LL;
            v72._char countAndFlagsBits = 45LL;
            v72._object = (void *)0xE100000000000000LL;
            String.append(_:)(v72);
            Character.write<A>(to:)( &v155,  v157,  v154,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
LABEL_88:
            unsigned __int8 v75 = v156;
            if (v70 == v155 && v71 == v156) {
              break;
            }
            uint64_t v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, v155, v156, 1LL);
            swift_bridgeObjectRelease(v71);
            swift_bridgeObjectRelease(v75);
            sub_10002DA24(v152, (uint64_t)v65, v66);
            unint64_t result = sub_10002DA24(v157, (uint64_t)v154, v62);
            if ((v76 & 1) == 0) {
              goto LABEL_74;
            }
            if (!v148) {
              goto LABEL_183;
            }
            uint64_t v77 = *(_BYTE *)(v57 + 16);
            uint64_t v78 = *(_OWORD *)v57;
            *(_OWORD *)uint64_t v57 = *(_OWORD *)v59;
            *(void *)(v57 + 16) = *(void *)(v59 + 16);
            *(_OWORD *)(v57 - 24) = v78;
            *(_BYTE *)(v57 - 8) = v77;
            ++v58;
            uint64_t v57 = v59;
            if (v150 == v58) {
              goto LABEL_74;
            }
          }

          swift_bridgeObjectRelease_n(v71, 2LL);
          sub_10002DA24(v152, (uint64_t)v65, v66);
          unint64_t result = sub_10002DA24(v157, (uint64_t)v154, v62);
LABEL_74:
          Swift::String v13 = v150 + 1;
          uint64_t v57 = v146 + 24;
          if (v150 + 1 == v143)
          {
            uint64_t v2 = v142;
            Swift::String v13 = v143;
            uint64_t v8 = v140;
            unint64_t v10 = v148;
            goto LABEL_95;
          }
        }
      }

void *sub_10002C488()
{
  if (*(_BYTE *)(v0 + 104)) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (*(void *)v0 >= 2uLL) {
    uint64_t v2 = (void *)swift_bridgeObjectRetain(*(void *)v0);
  }
  int64_t v3 = v2[2];
  if (v3)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_10004FDF4(0LL, v3, 0);
    uint64_t v1 = _swiftEmptyArrayStorage;
    uint64_t v4 = (unsigned __int8 *)(v2 + 6);
    while (1)
    {
      uint64_t v6 = *((void *)v4 - 2);
      uint64_t v5 = (void *)*((void *)v4 - 1);
      unsigned int v7 = *v4;
      if (!(v7 >> 6)) {
        break;
      }
      if (v7 >> 6 != 1)
      {
        uint64_t v17 = 45LL;
        unint64_t v9 = 0xE100000000000000LL;
        goto LABEL_12;
      }

      uint64_t v17 = 0LL;
      unint64_t v18 = 0xE000000000000000LL;
      swift_bridgeObjectRetain(v5);
      v8._char countAndFlagsBits = 45LL;
      v8._object = (void *)0xE100000000000000LL;
      String.append(_:)(v8);
      Character.write<A>(to:)( &v17,  v6,  v5,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
LABEL_13:
      sub_10002DA24(v6, (uint64_t)v5, v7);
      uint64_t v11 = v17;
      unint64_t v12 = v18;
      uint64_t v19 = v1;
      unint64_t v14 = v1[2];
      unint64_t v13 = v1[3];
      if (v14 >= v13 >> 1)
      {
        sub_10004FDF4((char *)(v13 > 1), v14 + 1, 1);
        uint64_t v1 = v19;
      }

      v4 += 24;
      v1[2] = v14 + 1;
      Swift::String v15 = &v1[2 * v14];
      v15[4] = v11;
      v15[5] = v12;
      if (!--v3)
      {
        swift_bridgeObjectRelease(v2);
        return v1;
      }
    }

    uint64_t v17 = 11565LL;
    unint64_t v9 = 0xE200000000000000LL;
LABEL_12:
    unint64_t v18 = v9;
    swift_bridgeObjectRetain(v5);
    v10._char countAndFlagsBits = v6;
    v10._object = v5;
    String.append(_:)(v10);
    goto LABEL_13;
  }

  swift_bridgeObjectRelease(v2);
  return _swiftEmptyArrayStorage;
}

void *sub_10002C640@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (!*result) {
    __asm { BR              X10 }
  }

  *a2 = 0LL;
  a2[1] = 0LL;
  return result;
}

void sub_10002C6C8()
{
  uint64_t v1 = sub_100005104(&qword_1000B90C8);
  uint64_t v2 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
  void *v0 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v1, v2);
  v0[1] = v3;
  JUMPOUT(0x10002C674LL);
}

void sub_10002C718(uint64_t a1, uint64_t a2)
{
  v3._char countAndFlagsBits = 41LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  *uint64_t v2 = 10276LL;
  v2[1] = 0xE200000000000000LL;
  JUMPOUT(0x10002C674LL);
}

void sub_10002C9AC()
{
  __n128 v1 = v0[8];
  unsigned __int8 v2 = v0[9].n128_u8[0];
  sub_10002D9E8(&v1, &v3);
  sub_10002D9E8(&v3, &v4);
  __asm { BR              X10 }

uint64_t sub_10002CA2C()
{
  uint64_t v7 = v0 - 11;
  uint64_t v1 = sub_100005104(&qword_1000B90C8);
  uint64_t v2 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
  v3._char countAndFlagsBits = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v1, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._char countAndFlagsBits = 0x632422202D2D2022LL;
  v5._object = (void *)0xEE00292029227275LL;
  String.append(_:)(v5);
  return v7;
}

uint64_t variable initialization expression of OptionGroup.title()
{
  return 0LL;
}

uint64_t variable initialization expression of ArgumentInfoV0.valueName()
{
  return 0LL;
}

void *sub_10002CC24(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[16];
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return a1;
}

char *sub_10002CCB8(uint64_t a1)
{
  uint64_t v1 = sub_10003076C(0, a1);
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  uint64_t v5 = v1[2];
  if (v5)
  {
    uint64_t v6 = v1 + 4;
    swift_bridgeObjectRetain(v1);
    uint64_t v51 = v4;
    unint64_t result = (char *)swift_bridgeObjectRetain(v4);
    uint64_t v8 = 0LL;
    __int128 v9 = v3[11];
    __int128 v67 = v3[10];
    __int128 v68 = v9;
    __int128 v10 = v3[13];
    __int128 v69 = v3[12];
    __int128 v70 = v10;
    __int128 v11 = v3[7];
    __int128 v63 = v3[6];
    __int128 v64 = v11;
    __int128 v12 = v3[9];
    __int128 v65 = v3[8];
    __int128 v66 = v12;
    __int128 v13 = v3[3];
    __int128 v59 = v3[2];
    __int128 v60 = v13;
    __int128 v14 = v3[5];
    uint64_t v52 = v3;
    __int128 v61 = v3[4];
    __int128 v62 = v14;
    Swift::String v15 = _swiftEmptyArrayStorage;
    Swift::String v16 = (char *)_swiftEmptyArrayStorage;
    uint64_t v53 = v5;
    uint64_t v54 = v3 + 2;
    uint64_t v17 = _swiftEmptyArrayStorage;
    if (BYTE8(v65)) {
      goto LABEL_19;
    }
LABEL_3:
    else {
      unint64_t v18 = v15;
    }
    uint64_t v19 = v15;
    int64_t v20 = v18[2];
    if (v20)
    {
      sub_10002D810(v59);
      sub_10002D724((uint64_t)&v59);
      uint64_t v58 = v19;
      sub_10004FDF4(0LL, v20, 0);
      uint64_t v17 = v58;
      uint64_t v55 = v18;
      uint64_t v21 = (unsigned __int8 *)(v18 + 6);
      while (1)
      {
        uint64_t v22 = *((void *)v21 - 2);
        uint64_t v23 = (void *)*((void *)v21 - 1);
        unsigned int v24 = *v21;
        if (!(v24 >> 6)) {
          break;
        }
        if (v24 >> 6 != 1)
        {
          uint64_t v56 = 45LL;
          unint64_t v26 = 0xE100000000000000LL;
          goto LABEL_13;
        }

        uint64_t v56 = 0LL;
        unint64_t v57 = 0xE000000000000000LL;
        swift_bridgeObjectRetain(v23);
        v25._char countAndFlagsBits = 45LL;
        v25._object = (void *)0xE100000000000000LL;
        String.append(_:)(v25);
        Character.write<A>(to:)( &v56,  v22,  v23,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
LABEL_14:
        sub_10002DA24(v22, (uint64_t)v23, v24);
        uint64_t v28 = v56;
        unint64_t v29 = v57;
        uint64_t v58 = v17;
        unint64_t v31 = v17[2];
        unint64_t v30 = v17[3];
        if (v31 >= v30 >> 1)
        {
          sub_10004FDF4((char *)(v30 > 1), v31 + 1, 1);
          uint64_t v17 = v58;
        }

        v21 += 24;
        void v17[2] = v31 + 1;
        uint64_t v32 = &v17[2 * v31];
        v32[4] = v28;
        v32[5] = v29;
        if (!--v20)
        {
          swift_bridgeObjectRelease(v55);
          unint64_t result = (char *)sub_10002D8A4((uint64_t)&v59);
          uint64_t v5 = v53;
          uint64_t v6 = v54;
          Swift::String v15 = _swiftEmptyArrayStorage;
          goto LABEL_19;
        }
      }

      uint64_t v56 = 11565LL;
      unint64_t v26 = 0xE200000000000000LL;
LABEL_13:
      unint64_t v57 = v26;
      swift_bridgeObjectRetain(v23);
      v27._char countAndFlagsBits = v22;
      v27._object = v23;
      String.append(_:)(v27);
      goto LABEL_14;
    }

    sub_10002D810(v59);
    unint64_t result = (char *)swift_bridgeObjectRelease(v18);
    uint64_t v17 = v19;
    uint64_t v6 = v54;
    Swift::String v15 = v19;
    while (1)
    {
LABEL_19:
      uint64_t v33 = v17[2];
      int64_t v34 = *((void *)v16 + 2);
      int64_t v35 = v34 + v33;
      if (__OFADD__(v34, v33))
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }

      unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(v16);
      if ((_DWORD)result && v35 <= *((void *)v16 + 3) >> 1)
      {
        if (v17[2]) {
          goto LABEL_23;
        }
      }

      else
      {
        if (v34 <= v35) {
          int64_t v40 = v34 + v33;
        }
        else {
          int64_t v40 = v34;
        }
        unint64_t result = sub_100057AB8(result, v40, 1, v16);
        Swift::String v16 = result;
        if (v17[2])
        {
LABEL_23:
          uint64_t v36 = *((void *)v16 + 2);
          if ((*((void *)v16 + 3) >> 1) - v36 < v33) {
            goto LABEL_40;
          }
          unint64_t result = (char *)swift_arrayInitWithCopy(&v16[16 * v36 + 32], v17 + 4, v33, &type metadata for String);
          if (v33)
          {
            uint64_t v37 = *((void *)v16 + 2);
            BOOL v38 = __OFADD__(v37, v33);
            uint64_t v39 = v37 + v33;
            if (v38) {
              goto LABEL_41;
            }
            *((void *)v16 + 2) = v39;
          }

          goto LABEL_32;
        }
      }

      if (v33) {
        goto LABEL_39;
      }
LABEL_32:
      ++v8;
      unint64_t result = (char *)swift_bridgeObjectRelease(v17);
      if (v8 == v5)
      {
        swift_bridgeObjectRelease_n(v51, 2LL);
        swift_bridgeObjectRelease_n(v52, 2LL);
        return v16;
      }

      uint64_t v41 = (__int128 *)&v6[24 * v8];
      __int128 v42 = *v41;
      __int128 v43 = v41[1];
      __int128 v44 = v41[3];
      __int128 v61 = v41[2];
      __int128 v62 = v44;
      __int128 v59 = v42;
      __int128 v60 = v43;
      __int128 v45 = v41[4];
      __int128 v46 = v41[5];
      __int128 v47 = v41[6];
      __int128 v66 = v41[7];
      __int128 v64 = v46;
      __int128 v65 = v47;
      __int128 v63 = v45;
      __int128 v48 = v41[8];
      __int128 v49 = v41[9];
      __int128 v50 = v41[11];
      __int128 v69 = v41[10];
      __int128 v70 = v50;
      __int128 v67 = v48;
      __int128 v68 = v49;
      uint64_t v17 = v15;
      if (!BYTE8(v47)) {
        goto LABEL_3;
      }
    }
  }

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return (char *)_swiftEmptyArrayStorage;
}

char *sub_10002D048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  __int128 v8 = *(_OWORD *)(a1 + 176);
  __int128 v51 = *(_OWORD *)(a1 + 160);
  __int128 v52 = v8;
  __int128 v9 = *(_OWORD *)(a1 + 208);
  __int128 v53 = *(_OWORD *)(a1 + 192);
  __int128 v54 = v9;
  __int128 v10 = *(_OWORD *)(a1 + 112);
  __int128 v47 = *(_OWORD *)(a1 + 96);
  __int128 v48 = v10;
  __int128 v11 = *(_OWORD *)(a1 + 144);
  __int128 v49 = *(_OWORD *)(a1 + 128);
  __int128 v50 = v11;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  __int128 v43 = *(_OWORD *)(a1 + 32);
  __int128 v44 = v12;
  __int128 v13 = *(_OWORD *)(a1 + 80);
  __int128 v45 = *(_OWORD *)(a1 + 64);
  __int128 v46 = v13;
  __int128 v39 = v51;
  __int128 v40 = v52;
  __int128 v41 = v53;
  __int128 v42 = v54;
  __int128 v35 = v47;
  __int128 v36 = v48;
  __int128 v37 = v49;
  __int128 v38 = v50;
  __int128 v31 = v43;
  __int128 v32 = v44;
  __int128 v33 = v45;
  __int128 v34 = v13;
  sub_10002D724((uint64_t)&v43);
  sub_10002C640(&v31, &v29);
  if (v3)
  {
    __int128 v14 = (char *)_swiftEmptyArrayStorage;
    sub_10002D8A4((uint64_t)&v43);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v28 = a2;
    __int128 v14 = (char *)_swiftEmptyArrayStorage;
    uint64_t v15 = 224LL;
    uint64_t v55 = a3;
    while (1)
    {
      sub_10002D8A4((uint64_t)&v43);
      uint64_t v16 = v30;
      if (v30)
      {
        uint64_t v17 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
          __int128 v14 = sub_100057AB8(0LL, *((void *)v14 + 2) + 1LL, 1, v14);
        }
        unint64_t v19 = *((void *)v14 + 2);
        unint64_t v18 = *((void *)v14 + 3);
        if (v19 >= v18 >> 1) {
          __int128 v14 = sub_100057AB8((char *)(v18 > 1), v19 + 1, 1, v14);
        }
        *((void *)v14 + 2) = v19 + 1;
        int64_t v20 = &v14[16 * v19];
        *((void *)v20 + 4) = v17;
        *((void *)v20 + 5) = v16;
      }

      if (!--v4) {
        break;
      }
      __int128 v21 = *(_OWORD *)(a1 + v15 + 144);
      __int128 v51 = *(_OWORD *)(a1 + v15 + 128);
      __int128 v52 = v21;
      __int128 v22 = *(_OWORD *)(a1 + v15 + 176);
      __int128 v53 = *(_OWORD *)(a1 + v15 + 160);
      __int128 v54 = v22;
      __int128 v23 = *(_OWORD *)(a1 + v15 + 80);
      __int128 v47 = *(_OWORD *)(a1 + v15 + 64);
      __int128 v48 = v23;
      __int128 v24 = *(_OWORD *)(a1 + v15 + 112);
      __int128 v49 = *(_OWORD *)(a1 + v15 + 96);
      __int128 v50 = v24;
      __int128 v25 = *(_OWORD *)(a1 + v15 + 16);
      __int128 v43 = *(_OWORD *)(a1 + v15);
      __int128 v44 = v25;
      __int128 v26 = *(_OWORD *)(a1 + v15 + 48);
      __int128 v45 = *(_OWORD *)(a1 + v15 + 32);
      __int128 v46 = v26;
      __int128 v39 = v51;
      __int128 v40 = v52;
      __int128 v41 = v53;
      __int128 v42 = v54;
      __int128 v35 = v47;
      __int128 v36 = v48;
      __int128 v37 = v49;
      __int128 v38 = v50;
      __int128 v31 = v43;
      __int128 v32 = v44;
      __int128 v33 = v45;
      __int128 v34 = v26;
      sub_10002D724((uint64_t)&v43);
      sub_10002C640(&v31, &v29);
      v15 += 192LL;
    }

    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(a1);
  }

  return v14;
}

char *sub_10002D2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v55 = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v7 = a1;
  __int128 v8 = (__n128 *)((char *)v61 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t v52 = a2;
  swift_bridgeObjectRetain(a2);
  __int128 v9 = (char *)_swiftEmptyArrayStorage;
  uint64_t v10 = 32LL;
  __int128 v53 = (__n128 *)((char *)v61 + 8);
  uint64_t v54 = v7;
  do
  {
    __int128 v11 = *(_OWORD *)(v7 + v10 + 144);
    v60[8] = *(_OWORD *)(v7 + v10 + 128);
    v61[0] = v11;
    __int128 v12 = *(_OWORD *)(v7 + v10 + 176);
    v61[1] = *(_OWORD *)(v7 + v10 + 160);
    v61[2] = v12;
    __int128 v13 = *(_OWORD *)(v7 + v10 + 80);
    v60[4] = *(_OWORD *)(v7 + v10 + 64);
    v60[5] = v13;
    __int128 v14 = *(_OWORD *)(v7 + v10 + 112);
    v60[6] = *(_OWORD *)(v7 + v10 + 96);
    v60[7] = v14;
    __int128 v15 = *(_OWORD *)(v7 + v10 + 16);
    v60[0] = *(_OWORD *)(v7 + v10);
    v60[1] = v15;
    __int128 v16 = *(_OWORD *)(v7 + v10 + 48);
    v60[2] = *(_OWORD *)(v7 + v10 + 32);
    v60[3] = v16;
    sub_10002D724((uint64_t)v60);
    uint64_t v17 = sub_10002C488();
    uint64_t v18 = v17[2];
    swift_bridgeObjectRelease(v17);
    if (v18 && (sub_10002D868(v8, &v62), sub_10002D868(&v62, &v63), (v64 & 1) != 0))
    {
      uint64_t v58 = 0LL;
      unint64_t v59 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(20LL);
      uint64_t v56 = v9;
      unint64_t v19 = v59;
      int64_t v20 = sub_10002C488();
      uint64_t v58 = v20;
      uint64_t v21 = sub_100005104(&qword_1000B90C8);
      uint64_t v22 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v23 = BidirectionalCollection<>.joined(separator:)(124LL, 0xE100000000000000LL, v21, v22);
      unint64_t v25 = v24;
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v20);
      uint64_t v58 = (void *)v23;
      unint64_t v59 = v25;
      v26._char countAndFlagsBits = 2601LL;
      v26._object = (void *)0xE200000000000000LL;
      String.append(_:)(v26);
      sub_10002C9AC();
      uint64_t v28 = v27;
      unint64_t v30 = v29;
      v57[0] = 10LL;
      v57[1] = 0xE100000000000000LL;
      __chkstk_darwin(v27);
      v51[2] = v57;
      swift_bridgeObjectRetain(v31);
      __int128 v32 = sub_100032C14(0x7FFFFFFFFFFFFFFFLL, 0, sub_10002DA50, (uint64_t)v51, v28, v30);
      v33._char countAndFlagsBits = 32LL;
      v33._object = (void *)0xE100000000000000LL;
      Swift::String v34 = String.init(repeating:count:)(v33, 4LL);
      __int128 v35 = sub_1000337AC((uint64_t)v32, v34._countAndFlagsBits, (uint64_t)v34._object);
      uint64_t v65 = v4;
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v34._object);
      v57[0] = v35;
      uint64_t v36 = sub_100005104(&qword_1000B90D8);
      uint64_t v37 = sub_1000062F8(&qword_1000B90E0, &qword_1000B90D8, (uint64_t)&protocol conformance descriptor for [A]);
      unint64_t v38 = sub_10002D69C();
      uint64_t v39 = Sequence<>.joined(separator:)(10LL, 0xE100000000000000LL, v36, v37, v38);
      __int128 v41 = v40;
      unint64_t v42 = v30;
      __int128 v9 = v56;
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v35);
      v43._char countAndFlagsBits = v39;
      v43._object = v41;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(v41);
      v44._char countAndFlagsBits = 0x746572202020200ALL;
      v44._object = (void *)0xEE003B3B0A6E7275LL;
      String.append(_:)(v44);
      sub_10002D8A4((uint64_t)v60);
      __int128 v45 = v58;
      unint64_t v46 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
        __int128 v9 = sub_100057AB8(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
      }
      unint64_t v48 = *((void *)v9 + 2);
      unint64_t v47 = *((void *)v9 + 3);
      if (v48 >= v47 >> 1) {
        __int128 v9 = sub_100057AB8((char *)(v47 > 1), v48 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v48 + 1;
      __int128 v49 = &v9[16 * v48];
      *((void *)v49 + 4) = v45;
      *((void *)v49 + 5) = v46;
      __int128 v8 = v53;
      uint64_t v7 = v54;
      uint64_t v4 = v65;
    }

    else
    {
      sub_10002D8A4((uint64_t)v60);
    }

    v10 += 192LL;
    --v5;
  }

  while (v5);
  swift_bridgeObjectRelease(v52);
  swift_bridgeObjectRelease(v7);
  return v9;
}

uint64_t sub_10002D680(uint64_t *a1)
{
  return sub_1000336BC(a1, *(void **)(v1 + 16)) & 1;
}

unint64_t sub_10002D69C()
{
  unint64_t result = qword_1000B90E8;
  if (!qword_1000B90E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1000B90E8);
  }

  return result;
}

unint64_t sub_10002D6E0()
{
  unint64_t result = qword_1000B90F0;
  if (!qword_1000B90F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009AB10, &type metadata for HelpCommand);
    atomic_store(result, (unint64_t *)&qword_1000B90F0);
  }

  return result;
}

uint64_t sub_10002D724(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v12 = *(void *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 136);
  uint64_t v13 = *(void *)(a1 + 160);
  uint64_t v14 = *(void *)(a1 + 152);
  uint64_t v15 = *(void *)(a1 + 184);
  char v10 = *(_BYTE *)(a1 + 144);
  sub_10002D810(*(void *)a1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  sub_10002D820(v12, v9, v10);
  sub_10002D860(v14, v13);
  swift_retain(v15);
  return a1;
}

unint64_t sub_10002D810(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t sub_10002D820(uint64_t result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
      unint64_t result = swift_bridgeObjectRetain(result);
      break;
    case 2:
      unint64_t result = swift_bridgeObjectRetain(a2);
      break;
    case 3:
      unint64_t result = swift_retain(a2);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10002D860(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

__n128 *sub_10002D868(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_10002D8A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 136);
  uint64_t v13 = *(void *)(a1 + 160);
  uint64_t v14 = *(void *)(a1 + 152);
  uint64_t v15 = *(void *)(a1 + 184);
  char v10 = *(_BYTE *)(a1 + 144);
  sub_10002D990(*(void *)a1);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v12);
  sub_10002D9A0(v8, v9, v10);
  sub_10002D9E0(v14, v13);
  swift_release(v15);
  return a1;
}

unint64_t sub_10002D990(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_10002D9A0(uint64_t result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
      unint64_t result = swift_bridgeObjectRelease(result);
      break;
    case 2:
      unint64_t result = swift_bridgeObjectRelease(a2);
      break;
    case 3:
      unint64_t result = swift_release(a2);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10002D9E0(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

__n128 *sub_10002D9E8(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_10002DA24(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xBFu) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_10002DA3C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFDu) {
    return sub_10002DA24(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_10002DA50(uint64_t *a1)
{
  return sub_10002D680(a1) & 1;
}

void *sub_10002DA68(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10004FDF4(0LL, v1, 0);
    uint64_t v3 = (void *)(a1 + 56);
    do
    {
      uint64_t v4 = *(v3 - 3);
      uint64_t v5 = *(v3 - 2);
      uint64_t v6 = *(v3 - 1);
      uint64_t v7 = *v3;
      swift_bridgeObjectRetain(*v3);
      uint64_t v8 = static String._fromSubstring(_:)(v4, v5, v6, v7);
      uint64_t v10 = v9;
      swift_bridgeObjectRelease(v7);
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_10004FDF4((char *)(v11 > 1), v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      v3 += 4;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

char *sub_10002DB64(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = v3 != 0;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v6 = v3 - v4;
  if (v3 == v4)
  {
LABEL_9:
    v35[0] = v5;
    uint64_t v16 = sub_100005104(&qword_1000B90C8);
    uint64_t v17 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v18 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v16, v17);
    int64_t v20 = v19;
    swift_bridgeObjectRelease(v5);
    uint64_t v21 = (void *)*v2;
    if (*v2 >= 2uLL) {
      swift_bridgeObjectRetain(*v2);
    }
    else {
      uint64_t v21 = _swiftEmptyArrayStorage;
    }
    uint64_t v22 = sub_10005CF90((uint64_t)v21);
    unint64_t v24 = v23;
    unsigned __int8 v26 = v25;
    unsigned int v27 = v25;
    swift_bridgeObjectRelease(v21);
    if (v27 <= 0xFD)
    {
      v36._char countAndFlagsBits = v22;
      v36._object = v24;
      uint64_t v30 = sub_10006D63C(v36, v26);
      unint64_t v29 = v31;
      sub_10002DA3C(v22, (uint64_t)v24, v26);
    }

    else
    {
      uint64_t v28 = (void *)v2[4];
      if (v28[2])
      {
        uint64_t v30 = v28[4];
        unint64_t v29 = (void *)v28[5];
        swift_bridgeObjectRetain(v29);
      }

      else
      {
        unint64_t v29 = (void *)0xE300000000000000LL;
        uint64_t v30 = 2960685LL;
      }
    }

    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    strcpy((char *)v35, "---completion ");
    HIBYTE(v35[1]) = -18;
    v32._char countAndFlagsBits = v18;
    v32._object = v20;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v20);
    v33._char countAndFlagsBits = 539831584LL;
    v33._object = (void *)0xE400000000000000LL;
    String.append(_:)(v33);
    v34._char countAndFlagsBits = v30;
    v34._object = v29;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v29);
    return (char *)v35[0];
  }

  else
  {
    v35[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a1);
    uint64_t result = sub_10004FDF4(0LL, v6 & ~(v6 >> 63), 0);
    if ((v6 & 0x8000000000000000LL) == 0)
    {
      uint64_t v5 = (void *)v35[0];
      uint64_t v9 = a1 + 16 * v4 + 40;
      while (v4 < v3)
      {
        uint64_t result = (char *)(*(uint64_t (**)(void))(*(void *)v9 + 24LL))();
        uint64_t v10 = result;
        uint64_t v12 = v11;
        v35[0] = v5;
        unint64_t v14 = v5[2];
        unint64_t v13 = v5[3];
        if (v14 >= v13 >> 1)
        {
          uint64_t result = sub_10004FDF4((char *)(v13 > 1), v14 + 1, 1);
          uint64_t v5 = (void *)v35[0];
        }

        uint64_t v5[2] = v14 + 1;
        uint64_t v15 = &v5[2 * v14];
        v15[4] = v10;
        v15[5] = v12;
        ++v4;
        v9 += 16LL;
        if (v3 == v4)
        {
          swift_bridgeObjectRelease(a1);
          uint64_t v2 = v1;
          goto LABEL_9;
        }
      }

      __break(1u);
    }

    __break(1u);
  }

  return result;
}

uint64_t ValidationError.message.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t CommandConfiguration.commandName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

Swift::String_optional (__swiftcall *ToolInfoHeader.serializationVersion.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t static CompletionShell.zsh.getter()
{
  return 6845306LL;
}

uint64_t static CompletionShell.bash.getter()
{
  return 1752392034LL;
}

uint64_t static CompletionShell.fish.getter()
{
  if ((_stringCompareWithSmolCheck(_:_:expecting:)( 6845306LL,  0xE300000000000000LL,  1752394086LL,  0xE400000000000000LL,  0LL) & 1) == 0) {
    _stringCompareWithSmolCheck(_:_:expecting:)( 1752392034LL,  0xE400000000000000LL,  1752394086LL,  0xE400000000000000LL,  0LL);
  }
  return 1752394086LL;
}

uint64_t static CompletionShell.autodetected()()
{
  uint64_t v0 = sub_10008AF50();
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v0;
  uint64_t v3 = v1;
  uint64_t v4 = 6845306LL;
  if (v0 != 6845306 || v1 != 0xE300000000000000LL)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(6845306LL, 0xE300000000000000LL, v0, v1, 0LL) & 1) != 0) {
      return v2;
    }
    uint64_t v4 = 1752392034LL;
    if (v2 != 1752392034 || v3 != 0xE400000000000000LL)
    {
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(1752392034LL, 0xE400000000000000LL, v2, v3, 0LL);
      BOOL v7 = v2 == 1752394086 && v3 == 0xE400000000000000LL;
      if ((v5 & 1) != 0
        || v7
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1752394086LL, 0xE400000000000000LL, v2, v3, 0LL) & 1) != 0)
      {
        return v2;
      }

      swift_bridgeObjectRelease(v3);
      return 0LL;
    }
  }

  return v4;
}

_UNKNOWN **static CompletionShell.allCases.getter()
{
  return &off_1000AFC50;
}

uint64_t sub_10002E038@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = _s14ArgumentParser15CompletionShellV8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10002E064@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

Swift::Int sub_10002E070()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_10002E0C8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10002E10C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_10002E160(void *a1@<X8>)
{
  *a1 = &off_1000AFC50;
}

uint64_t sub_10002E170(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 == *a2 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL);
  }
}

uint64_t sub_10002E1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v6 = a1 == 6845306 && a2 == 0xE300000000000000LL;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(6845306LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0) {
    return sub_1000309EC(a3, a4);
  }
  _stringCompareWithSmolCheck(_:_:expecting:)(6845306LL, 0xE300000000000000LL, 1752392034LL, 0xE400000000000000LL, 0LL);
  if (a1 == 1752392034 && a2 == 0xE400000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1752392034LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    return sub_10002B3C4(a3, a4);
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)( 6845306LL,  0xE300000000000000LL,  1752394086LL,  0xE400000000000000LL,  0LL) & 1) == 0) {
    _stringCompareWithSmolCheck(_:_:expecting:)( 1752392034LL,  0xE400000000000000LL,  1752394086LL,  0xE400000000000000LL,  0LL);
  }
  if (a1 == 1752394086 && a2 == 0xE400000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1752394086LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    return sub_10002EA60(a3, a4);
  }

  uint64_t v12 = 0LL;
  unint64_t v13 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  v10._object = (void *)0x800000010009CD90LL;
  v10._char countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v10);
  v11[0] = a1;
  v11[1] = a2;
  _print_unlocked<A, B>(_:_:)( v11,  &v12,  &type metadata for CompletionShell,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v12,  v13,  "ArgumentParser/CompletionsGenerator.swift",  41LL,  2LL,  80LL,  0);
  __break(1u);
  return result;
}

void *sub_10002E3C8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v24);
  sub_10002E758((uint64_t)&v25, (uint64_t)v26);
  sub_10002E7A0((uint64_t)v26);
  sub_10002CC24(v24);
  sub_10002E758((uint64_t)v26, (uint64_t)&v27);
  if (*((void *)&v27 + 1))
  {
    uint64_t v4 = sub_100005104(&qword_1000B9118);
    uint64_t v5 = swift_allocObject(v4, 48LL, 7LL);
    __int128 v6 = v27;
    *(_OWORD *)(v5 + 16) = xmmword_100096510;
    *(_OWORD *)(v5 + 32) = v6;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    unint64_t v9 = v8;
    uint64_t v22 = 32LL;
    unint64_t v23 = 0xE100000000000000LL;
    __chkstk_darwin(v7);
    uint64_t v21 = &v22;
    swift_bridgeObjectRetain(v10);
    uint64_t v11 = sub_100032C14(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002DA50, (uint64_t)v20, v7, v9);
    swift_bridgeObjectRelease(v9);
    uint64_t v12 = (char *)sub_10002DA68((uint64_t)v11);
    swift_bridgeObjectRelease(v11);
    uint64_t v22 = v5;
    sub_100056A78(v12);
    return (void *)v22;
  }

  else
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    unint64_t v16 = v15;
    uint64_t v22 = 32LL;
    unint64_t v23 = 0xE100000000000000LL;
    __chkstk_darwin(v14);
    uint64_t v21 = &v22;
    swift_bridgeObjectRetain(v17);
    uint64_t v18 = sub_100032C14(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002D680, (uint64_t)v20, v14, v16);
    swift_bridgeObjectRelease(v16);
    unint64_t v13 = sub_10002DA68((uint64_t)v18);
    swift_bridgeObjectRelease(v18);
  }

  return v13;
}

uint64_t _s14ArgumentParser15CompletionShellV8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  if (a1 == 6845306 && a2 == 0xE300000000000000LL) {
    return 6845306LL;
  }
  uint64_t v4 = a1;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6845306LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) == 0)
  {
    if (v4 == 1752392034 && a2 == 0xE400000000000000LL)
    {
      return 1752392034LL;
    }

    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1752392034LL, 0xE400000000000000LL, v4, a2, 0LL);
      BOOL v8 = v4 == 1752394086 && a2 == 0xE400000000000000LL;
      if ((v6 & 1) == 0
        && !v8
        && (_stringCompareWithSmolCheck(_:_:expecting:)(1752394086LL, 0xE400000000000000LL, v4, a2, 0LL) & 1) == 0)
      {
        swift_bridgeObjectRelease(a2);
        return 0LL;
      }
    }
  }

  return v4;
}

unint64_t sub_10002E6CC()
{
  unint64_t result = qword_1000B90F8;
  if (!qword_1000B90F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for CompletionShell,  &type metadata for CompletionShell);
    atomic_store(result, (unint64_t *)&qword_1000B90F8);
  }

  return result;
}

uint64_t sub_10002E710()
{
  return sub_1000062F8(&qword_1000B9100, &qword_1000B9108, (uint64_t)&protocol conformance descriptor for [A]);
}

__n128 initializeWithTake for ArgumentSet(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for CompletionShell()
{
  return &type metadata for CompletionShell;
}

uint64_t sub_10002E758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B9110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E7A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002E7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4)
  {
    uint64_t v7 = sub_10008AF50();
    if (v8)
    {
      uint64_t v4 = v7;
      uint64_t v9 = v8;
      if (v7 == 6845306 && v8 == 0xE300000000000000LL) {
        return 6845306LL;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(6845306LL, 0xE300000000000000LL, v7, v8, 0LL) & 1) != 0) {
        return v4;
      }
      if (v4 == 1752392034 && v9 == 0xE400000000000000LL) {
        return 1752392034LL;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(1752392034LL, 0xE400000000000000LL, v4, v9, 0LL) & 1) != 0) {
        return v4;
      }
      if (v4 == 1752394086 && v9 == 0xE400000000000000LL) {
        return 1752394086LL;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(1752394086LL, 0xE400000000000000LL, v4, v9, 0LL) & 1) != 0) {
        return v4;
      }
      swift_bridgeObjectRelease(v9);
    }

    unint64_t v14 = sub_10002EA1C();
    uint64_t v11 = swift_allocError(&type metadata for ParserError, v14, 0LL, 0LL);
    __int128 v13 = 0uLL;
    *(_OWORD *)uint64_t v12 = 0u;
    goto LABEL_28;
  }

  uint64_t v4 = 6845306LL;
  if (a3 != 6845306 || a4 != 0xE300000000000000LL)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(6845306LL, 0xE300000000000000LL, a3, a4, 0LL) & 1) != 0) {
      return a3;
    }
    uint64_t v4 = 1752392034LL;
    if (a3 != 1752392034 || a4 != 0xE400000000000000LL)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(1752392034LL, 0xE400000000000000LL, a3, a4, 0LL) & 1) != 0) {
        return a3;
      }
      uint64_t v4 = 1752394086LL;
      if (a3 != 1752394086 || a4 != 0xE400000000000000LL)
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(1752394086LL, 0xE400000000000000LL, a3, a4, 0LL) & 1) != 0) {
          return a3;
        }
        unint64_t v10 = sub_10002EA1C();
        uint64_t v11 = swift_allocError(&type metadata for ParserError, v10, 0LL, 0LL);
        *(void *)uint64_t v12 = a3;
        *(void *)(v12 + 8) = a4;
        __int128 v13 = 0uLL;
LABEL_28:
        *(_OWORD *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 32) = v13;
        *(_OWORD *)(v12 + 48) = v13;
        *(_OWORD *)(v12 + 64) = v13;
        *(_BYTE *)(v12 + 80) = 3;
        swift_willThrow(v11);
      }
    }
  }

  return v4;
}

unint64_t sub_10002EA1C()
{
  unint64_t result = qword_1000B9120;
  if (!qword_1000B9120)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009A614, &type metadata for ParserError);
    atomic_store(result, (unint64_t *)&qword_1000B9120);
  }

  return result;
}

uint64_t sub_10002EA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 24))();
  char v6 = v5;
  uint64_t v7 = sub_100005104(&qword_1000B9118);
  uint64_t v8 = swift_allocObject(v7, 64LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1000970B0;
  *(void *)(v8 + 32) = sub_1000301C0(v4, v6);
  *(void *)(v8 + 40) = v9;
  *(void *)(v8 + 48) = sub_1000302DC(v4, v6);
  *(void *)(v8 + 56) = v10;
  uint64_t v11 = swift_allocObject(v7, 48LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_100096510;
  *(void *)(v11 + 32) = v4;
  *(void *)(v11 + 40) = v6;
  uint64_t v12 = sub_100005104(&qword_1000B90C0);
  uint64_t inited = swift_initStackObject(v12, v26);
  *(_OWORD *)(inited + 16) = xmmword_100096510;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  uint64_t v14 = sub_10002EC40((void *)v11, inited);
  swift_setDeallocating(inited);
  swift_bridgeObjectRelease(v11);
  uint64_t v15 = sub_100005104(&qword_1000B90C8);
  uint64_t v16 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v17 = BidirectionalCollection<>.joined(separator:)(2570LL, 0xE200000000000000LL, v15, v16);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRetain(v19);
  v20._char countAndFlagsBits = 2570LL;
  v20._object = (void *)0xE200000000000000LL;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  uint64_t v21 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v15, v16);
  unint64_t v23 = v22;
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRetain(v19);
  v24._char countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v23);
  return v17;
}

uint64_t sub_10002EC40(void *a1, uint64_t a2)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *countAndFlagsBits;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  Swift::String v24;
  void *object;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  Swift::String v36;
  void *v37;
  int64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  void *v52;
  Swift::String v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void *v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  char v96[48];
  void *v97;
  Swift::String v98;
  void v99[13];
  uint64_t v100;
  void v101[12];
  char v102;
  uint64_t v103;
  uint64_t v8 = *(void *)(a2 + 16);
  if (!v8) {
    goto LABEL_59;
  }
  if (!a1[2]) {
    goto LABEL_60;
  }
  char v6 = (char *)a2;
  uint64_t v9 = a2 + 16 * v8;
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v9 + 24);
  uint64_t v7 = a1[4];
  uint64_t v3 = (void *)a1[5];
  Swift::String v92 = a1;
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain(v3);
  v12(v99, v10, v11);
  __int128 v13 = v100;
  uint64_t v103 = v100;
  swift_bridgeObjectRetain(v100);
  sub_10002CC24(v99);
  uint64_t v14 = *(void *)(v13 + 16);
  char countAndFlagsBits = (char *)_swiftEmptyArrayStorage;
  if (v14)
  {
    uint64_t v16 = (__int128 *)(v13 + 32);
    do
    {
      uint64_t v93 = *v16;
      (*(void (**)(void *__return_ptr))(*((void *)v16 + 1) + 16LL))(v101);
      sub_10002CC24(v101);
      if ((v102 & 1) != 0)
      {
        v98._char countAndFlagsBits = (uint64_t)countAndFlagsBits;
        if ((swift_isUniquelyReferenced_nonNull_native(countAndFlagsBits) & 1) == 0)
        {
          sub_10004FE48(0LL, *((void *)countAndFlagsBits + 2) + 1LL, 1);
          char countAndFlagsBits = (char *)v98._countAndFlagsBits;
        }

        uint64_t v18 = *((void *)countAndFlagsBits + 2);
        uint64_t v17 = *((void *)countAndFlagsBits + 3);
        if (v18 >= v17 >> 1)
        {
          sub_10004FE48((char *)(v17 > 1), v18 + 1, 1);
          char countAndFlagsBits = (char *)v98._countAndFlagsBits;
        }

        *((void *)countAndFlagsBits + 2) = v18 + 1;
        *(_OWORD *)&countAndFlagsBits[16 * v18 + 32] = v93;
      }

      ++v16;
      --v14;
    }

    while (v14);
  }

  sub_10002ABC8(&v103);
  if (v8 != 1)
  {
    uint64_t v19 = countAndFlagsBits;
    uint64_t v4 = v92;
    goto LABEL_19;
  }

  int64_t v2 = *((void *)countAndFlagsBits + 2);
  uint64_t v19 = countAndFlagsBits;
  uint64_t v4 = v92;
  if (!v2) {
    goto LABEL_19;
  }
  uint64_t inited = v19;
  if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0) {
    goto LABEL_61;
  }
  while (1)
  {
    uint64_t v21 = *((void *)inited + 2);
    Swift::String v20 = *((void *)inited + 3);
    if (v21 >= v20 >> 1) {
      uint64_t inited = sub_100057FEC((char *)(v20 > 1), v21 + 1, 1, inited);
    }
    uint64_t v22 = sub_10002D6E0();
    uint64_t v19 = inited;
    *((void *)inited + 2) = v21 + 1;
    unint64_t v23 = &inited[16 * v21];
    *((void *)v23 + 4) = &type metadata for HelpCommand;
    *((void *)v23 + 5) = v22;
LABEL_19:
    strcpy((char *)&v98, "_swift_");
    v98._object = (void *)0xE700000000000000LL;
    v24._char countAndFlagsBits = v7;
    v24._object = v3;
    String.append(_:)(v24);
    object = v98._object;
    swift_bridgeObjectRetain(v98._object);
    v26._char countAndFlagsBits = 0x635F676E6973755FLL;
    v26._object = (void *)0xEE00646E616D6D6FLL;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(object);
    __int128 v27 = v98._countAndFlagsBits;
    uint64_t v28 = v98._object;
    unint64_t v29 = swift_allocObject(&unk_1000AFFF0, 32LL, 7LL);
    v98._char countAndFlagsBits = 0LL;
    v98._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease(v98._object);
    strcpy((char *)&v98, "complete -c ");
    BYTE5(v98._object) = 0;
    HIWORD(v98._object) = -5120;
    v30._char countAndFlagsBits = v7;
    v30._object = v3;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v3);
    v31._char countAndFlagsBits = 0x27206E2D20LL;
    v31._object = (void *)0xE500000000000000LL;
    String.append(_:)(v31);
    v32._char countAndFlagsBits = v27;
    v32._object = v28;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v28);
    v33._char countAndFlagsBits = 8736LL;
    v33._object = (void *)0xE200000000000000LL;
    String.append(_:)(v33);
    uint64_t v97 = v4;
    uint64_t v94 = sub_100005104(&qword_1000B90C8);
    uint64_t v90 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
    v34._char countAndFlagsBits = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v94, v90);
    __int128 v35 = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v35);
    v36._char countAndFlagsBits = 34LL;
    v36._object = (void *)0xE100000000000000LL;
    String.append(_:)(v36);
    uint64_t v37 = v98._object;
    *(void *)(v29 + 16) = v98._countAndFlagsBits;
    BOOL v89 = v29;
    *(void *)(v29 + 24) = v37;
    unint64_t v38 = *((void *)v19 + 2);
    uint64_t v91 = v19;
    if (v38)
    {
      v98._char countAndFlagsBits = 8736LL;
      v98._object = (void *)0xE200000000000000LL;
      uint64_t v97 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v19);
      sub_10004FDF4(0LL, v38, 0);
      uint64_t v39 = v97;
      __int128 v40 = v19 + 40;
      do
      {
        __int128 v41 = (*(uint64_t (**)(void))(*(void *)v40 + 24LL))();
        Swift::String v43 = v42;
        uint64_t v97 = v39;
        __int128 v45 = v39[2];
        Swift::String v44 = v39[3];
        if (v45 >= v44 >> 1)
        {
          sub_10004FDF4((char *)(v44 > 1), v45 + 1, 1);
          uint64_t v39 = v97;
        }

        v39[2] = v45 + 1;
        unint64_t v46 = &v39[2 * v45];
        v46[4] = v41;
        v46[5] = v43;
        v40 += 16;
        --v38;
      }

      while (v38);
      swift_bridgeObjectRelease(v19);
      uint64_t v97 = v39;
      unint64_t v47 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v94, v90);
      __int128 v49 = v48;
      swift_release(v39);
      v50._char countAndFlagsBits = v47;
      v50._object = v49;
      String.append(_:)(v50);
      swift_bridgeObjectRelease(v49);
      v51._char countAndFlagsBits = 34LL;
      v51._object = (void *)0xE100000000000000LL;
      String.append(_:)(v51);
      uint64_t v52 = v98._object;
      String.append(_:)(v98);
      swift_bridgeObjectRelease(v52);
      uint64_t v4 = v92;
    }

    v53._char countAndFlagsBits = 39LL;
    v53._object = (void *)0xE100000000000000LL;
    String.append(_:)(v53);
    uint64_t v54 = swift_bridgeObjectRetain(v19);
    uint64_t v88 = (char *)sub_10002FCAC(v54, v89);
    swift_bridgeObjectRelease(v19);
    uint64_t v55 = sub_10003076C(0, (uint64_t)v6);
    unint64_t v57 = v56;
    swift_bridgeObjectRetain(v4);
    uint64_t v58 = sub_10003005C((uint64_t)v55, v57);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v4);
    unint64_t v59 = v58[2];
    if (v59)
    {
      v98._char countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      sub_10004FDF4(0LL, v59, 0);
      __int128 v60 = 0LL;
      __int128 v61 = (void *)v98._countAndFlagsBits;
      do
      {
        __n128 v62 = (void *)v58[v60 + 4];
        uint64_t v97 = v62;
        swift_bridgeObjectRetain(v62);
        __n128 v63 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v94, v90);
        uint64_t v65 = v64;
        swift_bridgeObjectRelease(v62);
        v98._char countAndFlagsBits = (uint64_t)v61;
        __int128 v67 = v61[2];
        __int128 v66 = v61[3];
        if (v67 >= v66 >> 1)
        {
          sub_10004FDF4((char *)(v66 > 1), v67 + 1, 1);
          __int128 v61 = (void *)v98._countAndFlagsBits;
        }

        ++v60;
        v61[2] = v67 + 1;
        __int128 v68 = &v61[2 * v67];
        v68[4] = v63;
        v68[5] = v65;
      }

      while (v59 != v60);
      swift_bridgeObjectRelease(v58);
    }

    else
    {
      swift_bridgeObjectRelease(v58);
      __int128 v61 = _swiftEmptyArrayStorage;
    }

    __int128 v69 = (char *)sub_10002FF2C((uint64_t)v61, v89);
    swift_bridgeObjectRelease(v61);
    int64_t v2 = (int64_t)v91;
    uint64_t v3 = (void *)*((void *)v91 + 2);
    if (!v3) {
      break;
    }
    uint64_t v87 = v69;
    swift_bridgeObjectRetain_n(v91, 2LL);
    __int128 v70 = 0LL;
    char v6 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v95 = *(_OWORD *)(v2 + 16 * v70 + 32);
      uint64_t v71 = (*(uint64_t (**)(void))(*(void *)(v2 + 16 * v70 + 40) + 24LL))();
      unsigned __int8 v73 = v72;
      unsigned __int8 v74 = (char *)v92;
      swift_bridgeObjectRetain(v92);
      swift_bridgeObjectRetain(v73);
      if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0) {
        unsigned __int8 v74 = sub_100057AB8(0LL, v92[2] + 1LL, 1, (char *)v92);
      }
      uint64_t v76 = *((void *)v74 + 2);
      unsigned __int8 v75 = *((void *)v74 + 3);
      if (v76 >= v75 >> 1) {
        unsigned __int8 v74 = sub_100057AB8((char *)(v75 > 1), v76 + 1, 1, v74);
      }
      *((void *)v74 + 2) = v76 + 1;
      uint64_t v77 = &v74[16 * v76];
      *((void *)v77 + 4) = v71;
      *((void *)v77 + 5) = v73;
      swift_bridgeObjectRelease(v73);
      uint64_t v78 = sub_100005104(&qword_1000B90C0);
      uint64_t inited = (char *)swift_initStackObject(v78, v96);
      *((_OWORD *)inited + 1) = xmmword_100096510;
      *((_OWORD *)inited + 2) = v95;
      uint64_t v79 = sub_10002EC40(v74, inited);
      swift_setDeallocating(inited);
      swift_bridgeObjectRelease(v74);
      uint64_t v7 = *(void *)(v79 + 16);
      int64_t v2 = *((void *)v6 + 2);
      uint64_t v4 = (void *)(v2 + v7);
      if (__OFADD__(v2, v7)) {
        break;
      }
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v6);
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || (uint64_t)v4 > *((void *)v6 + 3) >> 1)
      {
        else {
          uint64_t v81 = v2;
        }
        char v6 = sub_100057AB8(isUniquelyReferenced_nonNull_native, v81, 1, v6);
      }

      int64_t v2 = (int64_t)v91;
      if (*(void *)(v79 + 16))
      {
        BOOL v82 = *((void *)v6 + 2);
        if ((*((void *)v6 + 3) >> 1) - v82 < v7) {
          goto LABEL_57;
        }
        swift_arrayInitWithCopy(&v6[16 * v82 + 32], v79 + 32, v7, &type metadata for String);
        if (v7)
        {
          uint64_t v83 = *((void *)v6 + 2);
          char v84 = __OFADD__(v83, v7);
          Swift::String v85 = v83 + v7;
          if (v84) {
            goto LABEL_58;
          }
          *((void *)v6 + 2) = v85;
        }
      }

      else if (v7)
      {
        __break(1u);
        break;
      }

      swift_bridgeObjectRelease(v79);
      if (v3 == (void *)++v70)
      {
        swift_bridgeObjectRelease_n(v91, 2LL);
        __int128 v69 = v87;
        goto LABEL_54;
      }
    }

    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    uint64_t inited = sub_100057FEC(0LL, v2 + 1, 1, inited);
  }

  char v6 = (char *)_swiftEmptyArrayStorage;
LABEL_54:
  swift_bridgeObjectRelease(v2);
  v98._char countAndFlagsBits = (uint64_t)v6;
  sub_100056A78(v69);
  sub_100056A78(v88);
  swift_release(v89);
  return v98._countAndFlagsBits;
}

char *sub_10002F4BC()
{
  if (*(_BYTE *)(v0 + 104)) {
    return 0LL;
  }
  uint64_t v3 = v0;
  unint64_t v4 = *(void *)(v0 + 56);
  unint64_t v5 = *(void *)(v3 + 64);
  char v6 = *(void **)v3;
  if (*(void *)v3 > 1uLL)
  {
    if (v6[2])
    {
      swift_bridgeObjectRetain(*(void *)v3);
      int64_t v8 = v6[2];
      if (v8) {
        goto LABEL_7;
      }
      goto LABEL_20;
    }

    return 0LL;
  }

  char v6 = _swiftEmptyArrayStorage;
  uint64_t v7 = _swiftEmptyArrayStorage[2];
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  if (!v7) {
    return 0LL;
  }
  int64_t v8 = _swiftEmptyArrayStorage[2];
  if (v8)
  {
LABEL_7:
    unint64_t v31 = v5;
    uint64_t v32 = v3;
    v41.n128_u64[0] = (unint64_t)_swiftEmptyArrayStorage;
    sub_10004FDF4(0LL, v8, 0);
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v10 = (unsigned __int8 *)(v6 + 6);
    while (1)
    {
      uint64_t v11 = *((void *)v10 - 2);
      uint64_t v12 = (void *)*((void *)v10 - 1);
      unsigned int v13 = *v10;
      if (!(v13 >> 6)) {
        break;
      }
      if (v13 >> 6 != 1)
      {
        uint64_t v33 = 2125613LL;
        goto LABEL_13;
      }

      uint64_t v33 = 0LL;
      unint64_t v34 = 0xE000000000000000LL;
      swift_bridgeObjectRetain(v12);
      v14._char countAndFlagsBits = 2126637LL;
      v14._object = (void *)0xE300000000000000LL;
      String.append(_:)(v14);
      Character.write<A>(to:)( &v33,  v11,  v12,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
LABEL_14:
      sub_10002DA24(v11, (uint64_t)v12, v13);
      uint64_t v16 = v33;
      unint64_t v17 = v34;
      v41.n128_u64[0] = (unint64_t)v9;
      unint64_t v19 = *((void *)v9 + 2);
      unint64_t v18 = *((void *)v9 + 3);
      if (v19 >= v18 >> 1)
      {
        sub_10004FDF4((char *)(v18 > 1), v19 + 1, 1);
        uint64_t v9 = (char *)v41.n128_u64[0];
      }

      v10 += 24;
      *((void *)v9 + 2) = v19 + 1;
      Swift::String v20 = &v9[16 * v19];
      *((void *)v20 + 4) = v16;
      *((void *)v20 + 5) = v17;
      if (!--v8)
      {
        swift_bridgeObjectRelease(v6);
        uint64_t v3 = v32;
        unint64_t v5 = v31;
        goto LABEL_21;
      }
    }

    uint64_t v33 = 2124845LL;
LABEL_13:
    unint64_t v34 = 0xE300000000000000LL;
    sub_100030508(v11, (uint64_t)v12, v13);
    v15._char countAndFlagsBits = v11;
    v15._object = v12;
    String.append(_:)(v15);
    goto LABEL_14;
  }

LABEL_20:
  swift_bridgeObjectRelease(v6);
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
LABEL_21:
  uint64_t v21 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    uint64_t v33 = 656434221LL;
    unint64_t v34 = 0xE400000000000000LL;
    v41.n128_u64[0] = v4;
    v41.n128_u64[1] = v5;
    v39.n128_u64[0] = 39LL;
    v39.n128_u64[1] = 0xE100000000000000LL;
    v38.n128_u64[0] = 10076LL;
    v38.n128_u64[1] = 0xE200000000000000LL;
    unint64_t v22 = sub_100030520();
    v23._char countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v39,  &v38,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v22,  v22,  v22);
    object = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(object);
    v25._char countAndFlagsBits = 39LL;
    v25._object = (void *)0xE100000000000000LL;
    String.append(_:)(v25);
    uint64_t v27 = v33;
    unint64_t v26 = v34;
    swift_bridgeObjectRetain(v34);
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
      uint64_t v9 = sub_100057AB8(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
    }
    unint64_t v29 = *((void *)v9 + 2);
    unint64_t v28 = *((void *)v9 + 3);
    if (v29 >= v28 >> 1) {
      uint64_t v9 = sub_100057AB8((char *)(v28 > 1), v29 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v29 + 1;
    uint64_t v30 = &v9[16 * v29];
    *((void *)v30 + 4) = v27;
    *((void *)v30 + 5) = v26;
    swift_bridgeObjectRelease(v26);
  }

  sub_10002D868((__n128 *)(v3 + 152), &v38);
  sub_10002D868(&v38, &v39);
  if ((v40 & 1) != 0)
  {
    __n128 v35 = *(__n128 *)(v3 + 128);
    char v36 = *(_BYTE *)(v3 + 144);
    sub_10002D9E8(&v35, &v37);
    sub_10002D9E8(&v37, &v41);
    __asm { BR              X10 }
  }

  return v9;
}

void *sub_10002FCAC(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v32 = _swiftEmptyArrayStorage;
    sub_10004FDF4(0LL, v2, 0);
    uint64_t v3 = _swiftEmptyArrayStorage;
    swift_beginAccess(a2 + 16, v28, 0LL, 0LL);
    char v6 = (void *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      (*(void (**)(void *__return_ptr, uint64_t, void))(*v6 + 16LL))(v29, v7, *v6);
      Swift::String v31 = v30;
      swift_bridgeObjectRetain(v30._object);
      sub_10002CC24(v29);
      Swift::String v27 = v31;
      v26[0] = 39LL;
      v26[1] = 0xE100000000000000LL;
      v25[0] = 10076LL;
      v25[1] = 0xE200000000000000LL;
      unint64_t v9 = sub_100030520();
      uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v26,  v25,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v9,  v9,  v9);
      uint64_t v12 = v11;
      sub_100030564((uint64_t)&v31);
      v27._char countAndFlagsBits = 0LL;
      v27._object = (void *)0xE000000000000000LL;
      _StringGuts.grow(_:)(18LL);
      swift_bridgeObjectRelease(v27._object);
      v27._char countAndFlagsBits = 0x2720612D20662DLL;
      v27._object = (void *)0xE700000000000000LL;
      v13._char countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
      object = v13._object;
      String.append(_:)(v13);
      swift_bridgeObjectRelease(object);
      v15._char countAndFlagsBits = 0x2720642D2027LL;
      v15._object = (void *)0xE600000000000000LL;
      String.append(_:)(v15);
      v16._char countAndFlagsBits = v10;
      v16._object = v12;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(v12);
      v17._char countAndFlagsBits = 39LL;
      v17._object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
      Swift::String v18 = v27;
      unint64_t v19 = *(void **)(a2 + 24);
      v27._char countAndFlagsBits = *(void *)(a2 + 16);
      v27._object = v19;
      swift_bridgeObjectRetain(v19);
      v20._char countAndFlagsBits = 32LL;
      v20._object = (void *)0xE100000000000000LL;
      String.append(_:)(v20);
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v18._object);
      Swift::String v21 = v27;
      uint64_t v32 = v3;
      unint64_t v23 = v3[2];
      unint64_t v22 = v3[3];
      if (v23 >= v22 >> 1)
      {
        sub_10004FDF4((char *)(v22 > 1), v23 + 1, 1);
        uint64_t v3 = v32;
      }

      v3[2] = v23 + 1;
      *(Swift::String *)&v3[2 * v23 + 4] = v21;
      v6 += 2;
      --v2;
    }

    while (v2);
  }

  return v3;
}

void *sub_10002FF2C(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    Swift::String v18 = _swiftEmptyArrayStorage;
    sub_10004FDF4(0LL, v2, 0);
    uint64_t v3 = _swiftEmptyArrayStorage;
    swift_beginAccess(a2 + 16, v17, 0LL, 0LL);
    char v6 = (void *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = (void *)*v6;
      uint64_t v9 = *(void *)(a2 + 24);
      uint64_t v16 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain(*v6);
      swift_bridgeObjectRetain(v9);
      v10._char countAndFlagsBits = 32LL;
      v10._object = (void *)0xE100000000000000LL;
      String.append(_:)(v10);
      v11._char countAndFlagsBits = v7;
      v11._object = v8;
      String.append(_:)(v11);
      swift_bridgeObjectRelease(v8);
      Swift::String v18 = v3;
      unint64_t v13 = v3[2];
      unint64_t v12 = v3[3];
      if (v13 >= v12 >> 1)
      {
        sub_10004FDF4((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v3 = v18;
      }

      v6 += 2;
      v3[2] = v13 + 1;
      Swift::String v14 = &v3[2 * v13];
      _OWORD v14[4] = v16;
      v14[5] = v9;
      --v2;
    }

    while (v2);
  }

  return v3;
}

void *sub_10003005C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  unint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v6 = 32LL;
  do
  {
    __int128 v7 = *(_OWORD *)(a1 + v6 + 144);
    v17[8] = *(_OWORD *)(a1 + v6 + 128);
    v17[9] = v7;
    __int128 v8 = *(_OWORD *)(a1 + v6 + 176);
    v17[10] = *(_OWORD *)(a1 + v6 + 160);
    v17[11] = v8;
    __int128 v9 = *(_OWORD *)(a1 + v6 + 80);
    v17[4] = *(_OWORD *)(a1 + v6 + 64);
    v17[5] = v9;
    __int128 v10 = *(_OWORD *)(a1 + v6 + 112);
    v17[6] = *(_OWORD *)(a1 + v6 + 96);
    v17[7] = v10;
    __int128 v11 = *(_OWORD *)(a1 + v6 + 16);
    v17[0] = *(_OWORD *)(a1 + v6);
    v17[1] = v11;
    __int128 v12 = *(_OWORD *)(a1 + v6 + 48);
    void v17[2] = *(_OWORD *)(a1 + v6 + 32);
    v17[3] = v12;
    sub_10002D724((uint64_t)v17);
    unint64_t v13 = sub_10002F4BC();
    sub_10002D8A4((uint64_t)v17);
    if (v13)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
        unint64_t v5 = sub_1000580E4(0LL, v5[2] + 1LL, 1, v5);
      }
      unint64_t v15 = v5[2];
      unint64_t v14 = v5[3];
      if (v15 >= v14 >> 1) {
        unint64_t v5 = sub_1000580E4((void *)(v14 > 1), v15 + 1, 1, v5);
      }
      uint64_t v5[2] = v15 + 1;
      v5[v15 + 4] = v13;
    }

    v6 += 192LL;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  return v5;
}

uint64_t sub_1000301C0(uint64_t a1, void *a2)
{
  v4._object = (void *)0x800000010009D190LL;
  v4._char countAndFlagsBits = 0xD00000000000004ELL;
  String.append(_:)(v4);
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v5._char countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._char countAndFlagsBits = 0x636F72706572705FLL;
  v6._object = (void *)0xED0000726F737365LL;
  String.append(_:)(v6);
  v7._char countAndFlagsBits = 0x5F74666977735FLL;
  v7._object = (void *)0xE700000000000000LL;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  v8._char countAndFlagsBits = 0xD0000000000000C7LL;
  v8._object = (void *)0x800000010009D1E0LL;
  String.append(_:)(v8);
  return 0LL;
}

uint64_t sub_1000302DC(uint64_t a1, void *a2)
{
  v4._char countAndFlagsBits = 0x635F676E6973755FLL;
  v4._object = (void *)0xEE00646E616D6D6FLL;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v5._char countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._char countAndFlagsBits = 0x636F72706572705FLL;
  v6._object = (void *)0xED0000726F737365LL;
  String.append(_:)(v6);
  _StringGuts.grow(_:)(813LL);
  v7._char countAndFlagsBits = 0x6E6F6974636E7566LL;
  v7._object = (void *)0xE900000000000020LL;
  String.append(_:)(v7);
  v8._char countAndFlagsBits = 0x5F74666977735FLL;
  v8._object = (void *)0xE700000000000000LL;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  v9._object = (void *)0x800000010009CE50LL;
  v9._char countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v9);
  v10._char countAndFlagsBits = 0x5F74666977735FLL;
  v10._object = (void *)0xE700000000000000LL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  v11._char countAndFlagsBits = 0xD000000000000040LL;
  v11._object = (void *)0x800000010009CE70LL;
  String.append(_:)(v11);
  v12._char countAndFlagsBits = 32LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  v13._char countAndFlagsBits = 0xD000000000000032LL;
  v13._object = (void *)0x800000010009CEC0LL;
  String.append(_:)(v13);
  v14._char countAndFlagsBits = 32LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  v15._char countAndFlagsBits = 0xD00000000000028DLL;
  v15._object = (void *)0x800000010009CF00LL;
  String.append(_:)(v15);
  return 0LL;
}

uint64_t sub_1000304E4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100030508(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xBFu) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

unint64_t sub_100030520()
{
  unint64_t result = qword_1000B9128;
  if (!qword_1000B9128)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000B9128);
  }

  return result;
}

uint64_t sub_100030564(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003058C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1)
  {
    Swift::String v4 = (char *)_swiftEmptyArrayStorage;
LABEL_20:
    Swift::String v15 = sub_100030C30(v4);
    swift_bridgeObjectRelease(v4);
    uint64_t v16 = sub_100005104(&qword_1000B90C8);
    uint64_t v17 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v18 = BidirectionalCollection<>.joined(separator:)(95LL, 0xE100000000000000LL, v16, v17);
    Swift::String v20 = v19;
    swift_bridgeObjectRelease(v15);
    v21._char countAndFlagsBits = v18;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v20);
    return 95LL;
  }

  uint64_t v3 = (uint64_t *)(swift_bridgeObjectRetain(a1) + 40);
  Swift::String v4 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t result = (uint64_t)sub_10002E3C8(*(v3 - 1), *v3);
    uint64_t v6 = *(void *)(result + 16);
    int64_t v7 = *((void *)v4 + 2);
    int64_t v8 = v7 + v6;
    if (__OFADD__(v7, v6)) {
      break;
    }
    uint64_t v9 = result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v4);
    if ((_DWORD)result && v8 <= *((void *)v4 + 3) >> 1)
    {
      if (*(void *)(v9 + 16)) {
        goto LABEL_14;
      }
    }

    else
    {
      if (v7 <= v8) {
        int64_t v10 = v7 + v6;
      }
      else {
        int64_t v10 = v7;
      }
      uint64_t result = (uint64_t)sub_100057AB8((char *)result, v10, 1, v4);
      Swift::String v4 = (char *)result;
      if (*(void *)(v9 + 16))
      {
LABEL_14:
        uint64_t v11 = *((void *)v4 + 2);
        if ((*((void *)v4 + 3) >> 1) - v11 < v6) {
          goto LABEL_23;
        }
        uint64_t result = swift_arrayInitWithCopy(&v4[16 * v11 + 32], v9 + 32, v6, &type metadata for String);
        if (v6)
        {
          uint64_t v12 = *((void *)v4 + 2);
          BOOL v13 = __OFADD__(v12, v6);
          uint64_t v14 = v12 + v6;
          if (v13) {
            goto LABEL_24;
          }
          *((void *)v4 + 2) = v14;
        }

        goto LABEL_4;
      }
    }

    if (v6) {
      goto LABEL_22;
    }
LABEL_4:
    swift_bridgeObjectRelease(v9);
    v3 += 2;
    if (!--v1)
    {
      swift_bridgeObjectRelease(a1);
      goto LABEL_20;
    }
  }

  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

void *sub_10003076C(int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v22 = sub_10004D160( *(void *)(a2 + 16 * v2 + 16),  *(void *)(*(void *)(a2 + 16 * v2 + 24) + 8LL),  a1,  0LL,  0LL,  0LL);
    uint64_t v23 = v4;
    sub_100032A2C(a2, (uint64_t)v24);
    sub_10002AACC((uint64_t)v24, (uint64_t)v21, &qword_1000B9148);
    sub_10002AACC((uint64_t)v24, (uint64_t)v35, &qword_1000B9148);
    if (sub_100033CB4((uint64_t)v35) != 1)
    {
      sub_10002AACC((uint64_t)v21, (uint64_t)&v36, &qword_1000B9148);
      v53[8] = v44;
      v53[9] = v45;
      v53[10] = v46;
      v53[11] = v47;
      v53[4] = v40;
      v53[5] = v41;
      v53[6] = v42;
      v53[7] = v43;
      v53[0] = v36;
      v53[1] = v37;
      v53[2] = v38;
      v53[3] = v39;
      sub_100060FF8((uint64_t)v53);
      sub_100033CCC((uint64_t)v24);
    }

    uint64_t v5 = sub_100032880(0, a2);
    uint64_t v6 = v5;
    if (*(void *)(v5 + 16))
    {
      v48[0] = 0xD000000000000016LL;
      v48[1] = 0x800000010009D570LL;
      __int128 v49 = xmmword_100097E30;
      uint64_t v51 = 0LL;
      uint64_t v50 = 0LL;
      char v52 = 0;
      sub_10005EC6C( (uint64_t)_swiftEmptyArrayStorage,  1LL,  (uint64_t)v48,  0LL,  0LL,  0LL,  0xE000000000000000LL,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&v25,  0);
      *(void *)uint64_t v9 = v6;
      *(_OWORD *)&v9[8] = v25;
      *(void *)&v9[24] = v26;
      __int128 v10 = v27;
      LOBYTE(v11) = v28;
      *((void *)&v11 + 1) = v29;
      __int128 v12 = v30;
      __int128 v13 = v31;
      *(void *)&__int128 v14 = v32;
      BYTE8(v14) = v33;
      __int128 v15 = v34;
      __int128 v16 = 0uLL;
      LOWORD(v17) = 4;
      *((void *)&v17 + 1) = String.init(argument:);
      *(void *)&__int128 v18 = 0LL;
      BYTE8(v18) = 0;
      unint64_t v19 = String.init(argument:);
      uint64_t v20 = 0LL;
      __int128 v38 = v27;
      __int128 v39 = v11;
      __int128 v36 = *(_OWORD *)v9;
      __int128 v37 = *(_OWORD *)&v9[16];
      __int128 v43 = v34;
      __int128 v41 = v31;
      __int128 v42 = v14;
      __int128 v40 = v30;
      __int128 v47 = (unint64_t)String.init(argument:);
      __int128 v46 = v18;
      __int128 v45 = v17;
      __int128 v44 = 0uLL;
      sub_100060FF8((uint64_t)&v36);
      sub_10002D8A4((uint64_t)v9);
    }

    else
    {
      swift_bridgeObjectRelease(v5);
    }

    return (void *)v22;
  }

  else
  {
    int64_t v7 = _swiftEmptyArrayStorage;
    sub_100079598((uint64_t)_swiftEmptyArrayStorage);
  }

  return v7;
}

uint64_t sub_1000309EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B90C0);
  uint64_t inited = swift_initStackObject(v4, v35);
  *(_OWORD *)(inited + 16) = xmmword_100096510;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  uint64_t v6 = sub_10003058C(inited);
  int64_t v8 = v7;
  swift_setDeallocating(inited);
  uint64_t v33 = 0LL;
  unint64_t v34 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(195LL);
  v9._char countAndFlagsBits = 0x666564706D6F6323LL;
  v9._object = (void *)0xE900000000000020LL;
  String.append(_:)(v9);
  __int128 v10 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  v11._char countAndFlagsBits = v10(a1, a2);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._object = (void *)0x800000010009D2B0LL;
  v13._char countAndFlagsBits = 0xD000000000000027LL;
  String.append(_:)(v13);
  uint64_t v14 = v10(a1, a2);
  uint64_t v16 = v15;
  v32[2] = v14;
  v32[3] = v15;
  v32[0] = 45LL;
  v32[1] = 0xE100000000000000LL;
  v31[0] = 95LL;
  v31[1] = 0xE100000000000000LL;
  unint64_t v17 = sub_100030520();
  uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v32,  v31,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v17,  v17,  v17);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease(v16);
  v21._char countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22._char countAndFlagsBits = 0xD00000000000002CLL;
  v22._object = (void *)0x800000010009D2E0LL;
  String.append(_:)(v22);
  uint64_t v23 = swift_allocObject(v4, 48LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_100096510;
  *(void *)(v23 + 32) = a1;
  *(void *)(v23 + 40) = a2;
  uint64_t v24 = sub_100030D74(v23);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease(v23);
  v27._char countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v26);
  v28._char countAndFlagsBits = 0xD00000000000005FLL;
  v28._object = (void *)0x800000010009D310LL;
  String.append(_:)(v28);
  v29._char countAndFlagsBits = v6;
  v29._object = v8;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v8);
  return v33;
}

char *sub_100030C30(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v4 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v5 = sub_100005104(&qword_1000B9118);
  uint64_t v6 = (char *)swift_allocObject(v5, 48LL, 7LL);
  *((_OWORD *)v6 + 1) = xmmword_100096510;
  *((void *)v6 + 4) = v4;
  *((void *)v6 + 5) = v3;
  swift_bridgeObjectRetain(v3);
  uint64_t v7 = v1 - 1;
  if (v1 != 1)
  {
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(a1);
    int64_t v8 = a1 + 7;
    do
    {
      uint64_t v11 = *(v8 - 1);
      uint64_t v12 = *v8;
      unint64_t v13 = *((void *)v6 + 2);
      if (!v13
        || ((v14 = &v6[16 * v13], uint64_t v15 = *((void *)v14 + 2), v16 = *((void *)v14 + 3), v15 == v11)
          ? (BOOL v17 = v16 == v12)
          : (BOOL v17 = 0),
            !v17 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *(v8 - 1), *v8, 0LL) & 1) == 0))
      {
        unint64_t v9 = *((void *)v6 + 3);
        swift_bridgeObjectRetain(v12);
        if (v13 >= v9 >> 1) {
          uint64_t v6 = sub_100057AB8((char *)(v9 > 1), v13 + 1, 1, v6);
        }
        *((void *)v6 + 2) = v13 + 1;
        __int128 v10 = &v6[16 * v13];
        *((void *)v10 + 4) = v11;
        *((void *)v10 + 5) = v12;
      }

      v8 += 2;
      --v7;
    }

    while (v7);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v3);
  }

  return v6;
}

uint64_t sub_100030D74(uint64_t a1)
{
  void (*v21)(void *__return_ptr);
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  int64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  void *v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  Swift::String v63;
  Swift::String v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  Swift::String v80;
  Swift::String v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  uint64_t v92;
  Swift::String v93;
  unint64_t v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  Swift::String v113;
  _BYTE v115[16];
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  void v129[13];
  uint64_t v130;
  void v131[12];
  char v132;
  uint64_t v133;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    __break(1u);
LABEL_45:
    uint64_t v5 = sub_100057AB8(0LL, *((void *)v5 + 2) + 1LL, 1, v5);
    goto LABEL_13;
  }

  uint64_t v8 = a1 + 16 * v6;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(void *)(v8 + 24);
  uint64_t v11 = sub_10003058C(a1);
  char v120 = v12;
  char v121 = v11;
  char v122 = a1;
  unint64_t v13 = sub_10003076C(0, a1);
  uint64_t v15 = v14;
  swift_bridgeObjectRetain(a1);
  uint64_t v1 = 0LL;
  uint64_t v5 = sub_100033AB8((uint64_t)v13, v15);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v122);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 16))(v129, v9, v10);
  uint64_t v16 = v130;
  __int128 v133 = v130;
  swift_bridgeObjectRetain(v130);
  sub_10002CC24(v129);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v3 = (char *)_swiftEmptyArrayStorage;
  if (v17)
  {
    uint64_t v18 = (__int128 *)(v16 + 32);
    do
    {
      Swift::String v21 = *(void (**)(void *__return_ptr))(*((void *)v18 + 1) + 16LL);
      char v124 = *v18;
      v21(v131);
      sub_10002CC24(v131);
      if ((v132 & 1) != 0)
      {
        int v126 = (uint64_t)v3;
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        {
          sub_10004FE48(0LL, *((void *)v3 + 2) + 1LL, 1);
          uint64_t v3 = (char *)v126;
        }

        unint64_t v20 = *((void *)v3 + 2);
        unint64_t v19 = *((void *)v3 + 3);
        if (v20 >= v19 >> 1)
        {
          sub_10004FE48((char *)(v19 > 1), v20 + 1, 1);
          uint64_t v3 = (char *)v126;
        }

        *((void *)v3 + 2) = v20 + 1;
        *(_OWORD *)&v3[16 * v20 + 32] = v124;
      }

      ++v18;
      --v17;
    }

    while (v17);
  }

  unint64_t v2 = 0xD000000000000011LL;
  sub_10002ABC8(&v133);
  if (!*((void *)v3 + 2))
  {
    char v123 = 0LL;
    *(void *)&char v124 = 0xE000000000000000LL;
    unint64_t v34 = v3;
    __int128 v36 = (void *)v120;
    __n128 v35 = v121;
    goto LABEL_31;
  }

  uint64_t v4 = v121;
  if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
    goto LABEL_45;
  }
LABEL_13:
  uint64_t v23 = *((void *)v5 + 2);
  Swift::String v22 = *((void *)v5 + 3);
  uint64_t v24 = v22 >> 1;
  __int128 v25 = v23 + 1;
  if (v22 >> 1 <= v23)
  {
    uint64_t v5 = sub_100057AB8((char *)(v22 > 1), v23 + 1, 1, v5);
    Swift::String v22 = *((void *)v5 + 3);
    uint64_t v24 = v22 >> 1;
  }

  *((void *)v5 + 2) = v25;
  uint64_t v26 = &v5[16 * v23];
  *((void *)v26 + 4) = v2;
  *((void *)v26 + 5) = 0x800000010009D370LL;
  Swift::String v27 = v23 + 2;
  if (v24 < v27) {
    uint64_t v5 = sub_100057AB8((char *)(v22 > 1), v27, 1, v5);
  }
  *((void *)v5 + 2) = v27;
  Swift::String v28 = &v5[16 * v25];
  *((void *)v28 + 4) = 0x203A3A2A292D2827LL;
  *((void *)v28 + 5) = 0xEF276772613E2D3ALL;
  int v119 = v5;
  if (v6 == 1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
      uint64_t v3 = sub_100057FEC(0LL, *((void *)v3 + 2) + 1LL, 1, v3);
    }
    __int128 v30 = *((void *)v3 + 2);
    Swift::String v29 = *((void *)v3 + 3);
    __int128 v31 = v30 + 1;
    if (v30 >= v29 >> 1) {
      uint64_t v3 = sub_100057FEC((char *)(v29 > 1), v30 + 1, 1, v3);
    }
    uint64_t v32 = sub_10002D6E0();
    *((void *)v3 + 2) = v31;
    uint64_t v33 = &v3[16 * v30];
    *((void *)v33 + 4) = &type metadata for HelpCommand;
    *((void *)v33 + 5) = v32;
    goto LABEL_25;
  }

  __int128 v31 = *((void *)v3 + 2);
  if (v31)
  {
LABEL_25:
    __int128 v128 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v3);
    sub_10004FDF4(0LL, v31, 0);
    __int128 v37 = 0LL;
    __int128 v38 = _swiftEmptyArrayStorage;
    __int128 v39 = (void *)v120;
    char v123 = (uint64_t)v3;
    do
    {
      char v125 = *(_OWORD *)&v3[16 * v37 + 32];
      sub_100031810((uint64_t *)&v125, &v126);
      __int128 v41 = v126;
      __int128 v40 = v127;
      __int128 v128 = v38;
      __int128 v43 = v38[2];
      __int128 v42 = v38[3];
      if (v43 >= v42 >> 1)
      {
        sub_10004FDF4((char *)(v42 > 1), v43 + 1, 1);
        __int128 v39 = (void *)v120;
        __int128 v38 = v128;
      }

      ++v37;
      v38[2] = v43 + 1;
      __int128 v44 = &v38[2 * v43];
      v44[4] = v41;
      v44[5] = v40;
      uint64_t v3 = (char *)v123;
    }

    while (v31 != v37);
    swift_bridgeObjectRelease(v123);
    uint64_t v4 = v121;
    goto LABEL_30;
  }

  __int128 v38 = _swiftEmptyArrayStorage;
  __int128 v39 = (void *)v120;
LABEL_30:
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v39);
  __int128 v45 = sub_1000339A8((uint64_t)v3, v4, v39);
  *(void *)&char v124 = v1;
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v39);
  int v126 = 0LL;
  char v127 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(214LL);
  v46._char countAndFlagsBits = 0xD00000000000004DLL;
  v46._object = (void *)0x800000010009D390LL;
  String.append(_:)(v46);
  *(void *)&char v125 = v38;
  __int128 v47 = sub_100005104(&qword_1000B90C8);
  unint64_t v48 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
  __int128 v49 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v47, v48);
  uint64_t v51 = v50;
  swift_bridgeObjectRelease(v38);
  v52._char countAndFlagsBits = v49;
  v52._object = v51;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(v51);
  v53._char countAndFlagsBits = 0xD000000000000067LL;
  v53._object = (void *)0x800000010009D3E0LL;
  String.append(_:)(v53);
  *(void *)&char v125 = v45;
  uint64_t v54 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v47, v48);
  uint64_t v56 = v55;
  swift_bridgeObjectRelease(v45);
  v57._char countAndFlagsBits = v54;
  v57._object = v56;
  String.append(_:)(v57);
  swift_bridgeObjectRelease(v56);
  v58._char countAndFlagsBits = 0xD00000000000001ELL;
  v58._object = (void *)0x800000010009D450LL;
  String.append(_:)(v58);
  unint64_t v59 = v126;
  __int128 v60 = v127;
  int v126 = 10LL;
  char v127 = 0xE100000000000000LL;
  __chkstk_darwin(v61);
  char v116 = &v126;
  swift_bridgeObjectRetain(v60);
  __n128 v62 = sub_100032C14(0x7FFFFFFFFFFFFFFFLL, 0, sub_100033C24, (uint64_t)v115, v59, v60);
  v63._char countAndFlagsBits = 32LL;
  v63._object = (void *)0xE100000000000000LL;
  char v64 = String.init(repeating:count:)(v63, 4LL);
  uint64_t v65 = sub_1000337AC((uint64_t)v62, v64._countAndFlagsBits, (uint64_t)v64._object);
  swift_bridgeObjectRelease(v62);
  swift_bridgeObjectRelease(v64._object);
  int v126 = (uint64_t)v65;
  __int128 v66 = sub_100005104(&qword_1000B90D8);
  __int128 v67 = sub_1000062F8(&qword_1000B90E0, &qword_1000B90D8, (uint64_t)&protocol conformance descriptor for [A]);
  __int128 v68 = sub_10002D69C();
  __int128 v69 = v66;
  __int128 v36 = (void *)v120;
  __n128 v35 = v121;
  char v123 = Sequence<>.joined(separator:)(10LL, 0xE100000000000000LL, v69, v67, v68);
  *(void *)&char v124 = v70;
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v65);
  uint64_t v5 = v119;
  unint64_t v34 = v3;
LABEL_31:
  int v126 = 0LL;
  char v127 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(127LL);
  v71._char countAndFlagsBits = v35;
  v71._object = v36;
  String.append(_:)(v71);
  swift_bridgeObjectRelease(v36);
  v72._char countAndFlagsBits = 0xD000000000000035LL;
  v72._object = (void *)0x800000010009D470LL;
  String.append(_:)(v72);
  *(void *)&char v125 = v5;
  swift_bridgeObjectRetain(v5);
  unsigned __int8 v73 = sub_100005104(&qword_1000B90C8);
  char v120 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
  char v121 = v73;
  unsigned __int8 v74 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v73, v120);
  unsigned __int8 v75 = v5;
  uint64_t v77 = v76;
  uint64_t v78 = swift_bridgeObjectRelease(v75);
  *(void *)&char v125 = 10LL;
  *((void *)&v125 + 1) = 0xE100000000000000LL;
  __chkstk_darwin(v78);
  char v116 = (uint64_t *)&v125;
  swift_bridgeObjectRetain(v77);
  uint64_t v79 = sub_100032C14(0x7FFFFFFFFFFFFFFFLL, 0, sub_100033C24, (uint64_t)v115, v74, v77);
  v80._char countAndFlagsBits = 32LL;
  v80._object = (void *)0xE100000000000000LL;
  uint64_t v81 = String.init(repeating:count:)(v80, 8LL);
  BOOL v82 = sub_1000337AC((uint64_t)v79, v81._countAndFlagsBits, (uint64_t)v81._object);
  swift_bridgeObjectRelease(v79);
  swift_bridgeObjectRelease(v81._object);
  *(void *)&char v125 = v82;
  uint64_t v83 = sub_100005104(&qword_1000B90D8);
  char v84 = sub_1000062F8(&qword_1000B90E0, &qword_1000B90D8, (uint64_t)&protocol conformance descriptor for [A]);
  Swift::String v85 = sub_10002D69C();
  uint64_t v86 = Sequence<>.joined(separator:)(10LL, 0xE100000000000000LL, v83, v84, v85);
  uint64_t v88 = v87;
  swift_bridgeObjectRelease(v77);
  swift_bridgeObjectRelease(v82);
  v89._char countAndFlagsBits = v86;
  v89._object = v88;
  String.append(_:)(v89);
  swift_bridgeObjectRelease(v88);
  v90._char countAndFlagsBits = 0xD000000000000031LL;
  v90._object = (void *)0x800000010009D4B0LL;
  String.append(_:)(v90);
  v91._char countAndFlagsBits = v123;
  Swift::String v92 = v124;
  v91._object = (void *)v124;
  String.append(_:)(v91);
  swift_bridgeObjectRelease(v92);
  v93._char countAndFlagsBits = 0xD000000000000013LL;
  v93._object = (void *)0x800000010009D4F0LL;
  String.append(_:)(v93);
  uint64_t v95 = v126;
  uint64_t v94 = v127;
  uint64_t v96 = *((void *)v34 + 2);
  if (v96)
  {
    char v117 = v126;
    char v118 = v127;
    int v119 = v75;
    int v126 = (uint64_t)_swiftEmptyArrayStorage;
    char v123 = (uint64_t)v34;
    swift_bridgeObjectRetain(v34);
    sub_10004FDF4(0LL, v96, 0);
    uint64_t v97 = 0LL;
    uint64_t v98 = (void *)v126;
    uint64_t v99 = v122;
    do
    {
      char v124 = *(_OWORD *)(v123 + 16 * v97 + 32);
      uint64_t v100 = swift_bridgeObjectRetain(v99);
      unint64_t v101 = (char *)v99;
      if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0) {
        unint64_t v101 = sub_100057FEC(0LL, *(void *)(v99 + 16) + 1LL, 1, (char *)v99);
      }
      uint64_t v103 = *((void *)v101 + 2);
      uint64_t v102 = *((void *)v101 + 3);
      if (v103 >= v102 >> 1) {
        unint64_t v101 = sub_100057FEC((char *)(v102 > 1), v103 + 1, 1, v101);
      }
      *((void *)v101 + 2) = v103 + 1;
      *(_OWORD *)&v101[16 * v103 + 32] = v124;
      char v104 = sub_100030D74(v101);
      unint64_t v106 = v105;
      swift_bridgeObjectRelease(v101);
      int v126 = (uint64_t)v98;
      uint64_t v108 = v98[2];
      uint64_t v107 = v98[3];
      if (v108 >= v107 >> 1)
      {
        sub_10004FDF4((char *)(v107 > 1), v108 + 1, 1);
        uint64_t v98 = (void *)v126;
      }

      ++v97;
      v98[2] = v108 + 1;
      uint64_t v109 = &v98[2 * v108];
      v109[4] = v104;
      v109[5] = v106;
    }

    while (v96 != v97);
    swift_bridgeObjectRelease(v119);
    swift_bridgeObjectRelease_n(v123, 2LL);
    uint64_t v95 = v117;
    uint64_t v94 = v118;
  }

  else
  {
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v34);
    uint64_t v98 = _swiftEmptyArrayStorage;
  }

  int v126 = (uint64_t)v98;
  Swift::String v110 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v121, v120);
  Swift::String v112 = v111;
  swift_bridgeObjectRelease(v98);
  int v126 = v95;
  char v127 = v94;
  swift_bridgeObjectRetain(v94);
  v113._char countAndFlagsBits = v110;
  v113._object = v112;
  String.append(_:)(v113);
  swift_bridgeObjectRelease(v94);
  swift_bridgeObjectRelease(v112);
  return v126;
}

uint64_t sub_100031810@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v37 = 39LL;
  unint64_t v38 = 0xE100000000000000LL;
  v5._char countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._char countAndFlagsBits = 58LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 16))(v39, v3, v4);
  __int128 v41 = v40;
  swift_bridgeObjectRetain(*((void *)&v40 + 1));
  sub_10002CC24(v39);
  __int128 v36 = v41;
  uint64_t v34 = 39LL;
  unint64_t v35 = 0xE100000000000000LL;
  uint64_t v32 = 0x2722272227LL;
  unint64_t v33 = 0xE500000000000000LL;
  unint64_t v8 = sub_100030520();
  uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v34,  &v32,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v8,  v8,  v8);
  uint64_t v11 = v10;
  *(void *)&__int128 v36 = v9;
  *((void *)&v36 + 1) = v10;
  uint64_t v34 = 0x5D5D5C5B5C5C5C5BLL;
  unint64_t v35 = 0xE800000000000000LL;
  uint64_t v32 = 807689308LL;
  unint64_t v33 = 0xE400000000000000LL;
  uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v34,  &v32,  1024LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v8,  v8,  v8);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease(v11);
  sub_100030564((uint64_t)&v41);
  v15._char countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16._char countAndFlagsBits = 39LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  uint64_t v17 = v37;
  unint64_t v18 = v38;
  uint64_t v37 = 10LL;
  unint64_t v38 = 0xE100000000000000LL;
  __int128 v31 = &v37;
  swift_bridgeObjectRetain(v18);
  unint64_t v19 = sub_100032C14(0x7FFFFFFFFFFFFFFFLL, 0, sub_100033C24, (uint64_t)v30, v17, v18);
  v20._char countAndFlagsBits = 32LL;
  v20._object = (void *)0xE100000000000000LL;
  Swift::String v21 = String.init(repeating:count:)(v20, 12LL);
  Swift::String v22 = sub_1000337AC((uint64_t)v19, v21._countAndFlagsBits, (uint64_t)v21._object);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v21._object);
  uint64_t v37 = (uint64_t)v22;
  uint64_t v23 = sub_100005104(&qword_1000B90D8);
  uint64_t v24 = sub_1000062F8(&qword_1000B90E0, &qword_1000B90D8, (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v25 = sub_10002D69C();
  uint64_t v26 = Sequence<>.joined(separator:)(10LL, 0xE100000000000000LL, v23, v24, v25);
  uint64_t v28 = v27;
  swift_bridgeObjectRelease(v18);
  uint64_t result = swift_bridgeObjectRelease(v22);
  *a2 = v26;
  a2[1] = v28;
  return result;
}

uint64_t sub_100031AD4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v31 = 40LL;
  unint64_t v32 = 0xE100000000000000LL;
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 24);
  v9._char countAndFlagsBits = v8(v6, v7);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._char countAndFlagsBits = 0x202020200A29LL;
  v11._object = (void *)0xE600000000000000LL;
  String.append(_:)(v11);
  v12._char countAndFlagsBits = a2;
  v12._object = a3;
  String.append(_:)(v12);
  v13._char countAndFlagsBits = 95LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  v14._char countAndFlagsBits = v8(v6, v7);
  Swift::String v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._char countAndFlagsBits = 0x3B3B202020200ALL;
  v16._object = (void *)0xE700000000000000LL;
  String.append(_:)(v16);
  uint64_t v31 = 10LL;
  unint64_t v32 = 0xE100000000000000LL;
  __int128 v30 = &v31;
  swift_bridgeObjectRetain(0xE100000000000000LL);
  uint64_t v17 = sub_100032C14(0x7FFFFFFFFFFFFFFFLL, 0, sub_100033C24, (uint64_t)v29, 40LL, 0xE100000000000000LL);
  v18._char countAndFlagsBits = 32LL;
  v18._object = (void *)0xE100000000000000LL;
  Swift::String v19 = String.init(repeating:count:)(v18, 12LL);
  Swift::String v20 = sub_1000337AC((uint64_t)v17, v19._countAndFlagsBits, (uint64_t)v19._object);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v19._object);
  uint64_t v31 = (uint64_t)v20;
  uint64_t v21 = sub_100005104(&qword_1000B90D8);
  uint64_t v22 = sub_1000062F8(&qword_1000B90E0, &qword_1000B90D8, (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v23 = sub_10002D69C();
  uint64_t v24 = Sequence<>.joined(separator:)(10LL, 0xE100000000000000LL, v21, v22, v23);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease(0xE100000000000000LL);
  uint64_t result = swift_bridgeObjectRelease(v20);
  *a4 = v24;
  a4[1] = v26;
  return result;
}

uint64_t sub_100031CF8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  unint64_t v2 = *(void *)(v0 + 64);
  Swift::String v3 = *(Swift::String *)(v0 + 88);
  *(_OWORD *)&v80[3] = *(_OWORD *)(v0 + 72);
  Swift::String v81 = v3;
  if (*(_BYTE *)(v0 + 104)) {
    return 0LL;
  }
  Swift::String v5 = (void *)v0;
  sub_10002D868((__n128 *)(v0 + 152), (__n128 *)v80);
  sub_10002D868((__n128 *)v80, &v83);
  if (v84 == 1)
  {
    uint64_t v78 = 58LL;
    unint64_t v79 = 0xE100000000000000LL;
    Swift::String v82 = v81;
    uint64_t v6 = v81._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      Swift::String v77 = v81;
      swift_bridgeObjectRetain(v81._object);
    }

    else
    {
      swift_bridgeObjectRetain(v81._object);
      sub_10005D218((void *)v0, (unint64_t *)&v77);
      sub_100030564((uint64_t)&v82);
    }

    object = v77._object;
    String.append(_:)(v77);
    swift_bridgeObjectRelease(object);
    v10._char countAndFlagsBits = 58LL;
    v10._object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
    sub_10003230C();
    Swift::String v12 = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(v12);
    uint64_t v7 = v78;
    unint64_t v8 = (void *)v79;
  }

  else
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = (void *)0xE000000000000000LL;
  }

  Swift::String v13 = *(void **)v0;
  if (*v5 >= 2uLL) {
    Swift::String v14 = (void *)swift_bridgeObjectRetain(*v5);
  }
  else {
    Swift::String v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v15 = v14[2];
  uint64_t result = swift_bridgeObjectRelease(v14);
  if (!v15)
  {
    Swift::String v16 = (void *)0xE000000000000000LL;
LABEL_47:
    uint64_t v78 = 39LL;
    unint64_t v79 = 0xE100000000000000LL;
    v64._char countAndFlagsBits = v15;
    v64._object = v16;
    String.append(_:)(v64);
    swift_bridgeObjectRelease(v16);
    v65._char countAndFlagsBits = v7;
    v65._object = v8;
    String.append(_:)(v65);
    swift_bridgeObjectRelease(v8);
    v66._char countAndFlagsBits = 39LL;
    v66._object = (void *)0xE100000000000000LL;
    String.append(_:)(v66);
    return v78;
  }

  if (v15 != 1)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    if ((unint64_t)v13 >= 2)
    {
      swift_bridgeObjectRetain(v13);
      uint64_t v17 = v13;
    }

    uint64_t v70 = v1;
    int64_t v18 = v17[2];
    if (!v18)
    {
      swift_bridgeObjectRelease(v17);
      char countAndFlagsBits = _swiftEmptyArrayStorage;
LABEL_40:
      uint64_t v78 = 40LL;
      unint64_t v79 = 0xE100000000000000LL;
      v77._char countAndFlagsBits = (uint64_t)countAndFlagsBits;
      uint64_t v41 = sub_100005104(&qword_1000B90C8);
      uint64_t v42 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
      v43._char countAndFlagsBits = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v41, v42);
      __int128 v44 = v43._object;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(v44);
      v45._char countAndFlagsBits = 8070953LL;
      v45._object = (void *)0xE300000000000000LL;
      String.append(_:)(v45);
      v77._char countAndFlagsBits = (uint64_t)countAndFlagsBits;
      uint64_t v46 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v41, v42);
      unint64_t v48 = v47;
      swift_bridgeObjectRelease(countAndFlagsBits);
      v49._char countAndFlagsBits = v46;
      v49._object = v48;
      String.append(_:)(v49);
      swift_bridgeObjectRelease(v48);
      v50._char countAndFlagsBits = 10109LL;
      v50._object = (void *)0xE200000000000000LL;
      String.append(_:)(v50);
      uint64_t v51 = HIBYTE(v2) & 0xF;
      if ((v2 & 0x2000000000000000LL) == 0) {
        uint64_t v51 = v70 & 0xFFFFFFFFFFFFLL;
      }
      if (v51)
      {
        v77._char countAndFlagsBits = 91LL;
        v77._object = (void *)0xE100000000000000LL;
        uint64_t v75 = v70;
        unint64_t v76 = v2;
        uint64_t v73 = 39LL;
        unint64_t v74 = 0xE100000000000000LL;
        goto LABEL_44;
      }

LABEL_45:
      uint64_t v61 = 0LL;
      __n128 v62 = (void *)0xE000000000000000LL;
      goto LABEL_46;
    }

    uint64_t v68 = v7;
    __int128 v69 = v8;
    v77._char countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_10004FDF4(0LL, v18, 0);
    char countAndFlagsBits = (void *)v77._countAndFlagsBits;
    __int128 v67 = v17;
    Swift::String v20 = (unsigned __int8 *)(v17 + 6);
    while (1)
    {
      uint64_t v21 = *((void *)v20 - 2);
      uint64_t v22 = (void *)*((void *)v20 - 1);
      unsigned int v23 = *v20;
      if (!(v23 >> 6)) {
        break;
      }
      if (v23 >> 6 != 1)
      {
        uint64_t v78 = 45LL;
        unint64_t v25 = 0xE100000000000000LL;
        goto LABEL_28;
      }

      uint64_t v78 = 0LL;
      unint64_t v79 = 0xE000000000000000LL;
      swift_bridgeObjectRetain(v22);
      v24._char countAndFlagsBits = 45LL;
      v24._object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      Character.write<A>(to:)( &v78,  v21,  v22,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
LABEL_29:
      sub_10002DA24(v21, (uint64_t)v22, v23);
      uint64_t v27 = v78;
      unint64_t v28 = v79;
      v77._char countAndFlagsBits = (uint64_t)countAndFlagsBits;
      unint64_t v30 = countAndFlagsBits[2];
      unint64_t v29 = countAndFlagsBits[3];
      if (v30 >= v29 >> 1)
      {
        sub_10004FDF4((char *)(v29 > 1), v30 + 1, 1);
        char countAndFlagsBits = (void *)v77._countAndFlagsBits;
      }

      v20 += 24;
      countAndFlagsBits[2] = v30 + 1;
      uint64_t v31 = &countAndFlagsBits[2 * v30];
      v31[4] = v27;
      v31[5] = v28;
      if (!--v18)
      {
        swift_bridgeObjectRelease(v67);
        uint64_t v7 = v68;
        unint64_t v8 = v69;
        goto LABEL_40;
      }
    }

    uint64_t v78 = 11565LL;
    unint64_t v25 = 0xE200000000000000LL;
LABEL_28:
    unint64_t v79 = v25;
    swift_bridgeObjectRetain(v22);
    v26._char countAndFlagsBits = v21;
    v26._object = v22;
    String.append(_:)(v26);
    goto LABEL_29;
  }

  uint64_t v78 = 0LL;
  unint64_t v79 = 0xE000000000000000LL;
  else {
    Swift::String v13 = _swiftEmptyArrayStorage;
  }
  if (v13[2])
  {
    uint64_t v32 = v1;
    uint64_t v33 = v13[4];
    uint64_t v34 = (void *)v13[5];
    unsigned __int8 v35 = *((_BYTE *)v13 + 48);
    sub_100030508(v33, (uint64_t)v34, v35);
    swift_bridgeObjectRelease(v13);
    v85._char countAndFlagsBits = v33;
    v85._object = v34;
    uint64_t v36 = sub_10006D63C(v85, v35);
    unint64_t v38 = v37;
    sub_10002DA24(v33, (uint64_t)v34, v35);
    v39._char countAndFlagsBits = v36;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease(v38);
    uint64_t v40 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000LL) == 0) {
      uint64_t v40 = v32 & 0xFFFFFFFFFFFFLL;
    }
    if (v40)
    {
      v77._char countAndFlagsBits = 91LL;
      v77._object = (void *)0xE100000000000000LL;
      uint64_t v75 = v32;
      unint64_t v76 = v2;
      uint64_t v73 = 39LL;
      unint64_t v74 = 0xE100000000000000LL;
LABEL_44:
      uint64_t v71 = 0x2722272227LL;
      unint64_t v72 = 0xE500000000000000LL;
      unint64_t v52 = sub_100030520();
      uint64_t v53 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v73,  &v71,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v52,  v52,  v52);
      unint64_t v55 = v54;
      uint64_t v75 = v53;
      unint64_t v76 = v54;
      uint64_t v73 = 0x5D5D5C5B5C5C5C5BLL;
      unint64_t v74 = 0xE800000000000000LL;
      uint64_t v71 = 807689308LL;
      unint64_t v72 = 0xE400000000000000LL;
      uint64_t v56 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v73,  &v71,  1024LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v52,  v52,  v52);
      uint64_t v58 = v57;
      swift_bridgeObjectRelease(v55);
      v59._char countAndFlagsBits = v56;
      v59._object = v58;
      String.append(_:)(v59);
      swift_bridgeObjectRelease(v58);
      v60._char countAndFlagsBits = 93LL;
      v60._object = (void *)0xE100000000000000LL;
      String.append(_:)(v60);
      __n128 v62 = v77._object;
      uint64_t v61 = v77._countAndFlagsBits;
LABEL_46:
      __n128 v63 = v62;
      String.append(_:)(*(Swift::String *)&v61);
      swift_bridgeObjectRelease(v62);
      uint64_t v15 = v78;
      Swift::String v16 = (void *)v79;
      goto LABEL_47;
    }

    goto LABEL_45;
  }

  __break(1u);
  return result;
}

      ++v35;
      Swift::String v11 = v68;
      Swift::String v5 = v69;
      if (v35 == v68)
      {
        uint64_t result = swift_bridgeObjectRelease(v67);
        uint64_t v56 = (void *)(v63 + (v69 << 6) + 48);
        unint64_t v57 = v69;
        while (v57 < v68)
        {
          if ((*v56 & 0x60000000000000C0LL) == 0)
          {
            if ((uint64_t v58 = *(v56 - 2), v59 = *(v56 - 1), v58 == 0xD000000000000016LL) && v59 == 0x800000010009DA70LL
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)( v58,  v59,  0xD000000000000016LL,  0x800000010009DA70LL,  0LL),  (result & 1) != 0))
            {
              Swift::String v60 = sub_10006B05C(a4, a5);
              uint64_t v61 = sub_10005134C();
              uint64_t v33 = swift_allocError(&type metadata for CommandError, v61, 0LL, 0LL);
              *(void *)unint64_t v55 = v60;
              *(void *)(v55 + 8) = 1LL;
              *(_OWORD *)(v55 + 16) = 0u;
              *(_OWORD *)(v55 + 32) = 0u;
              *(_OWORD *)(v55 + 48) = 0u;
              *(_OWORD *)(v55 + 64) = 0u;
              *(void *)(v55 + 80) = 0LL;
LABEL_92:
              *(_BYTE *)(v55 + 88) = 15;
              return swift_willThrow(v33);
            }
          }

          ++v57;
          v56 += 8;
          if (v68 == v57) {
            goto LABEL_10;
          }
        }

        goto LABEL_95;
      }
    }

    Swift::String v39 = *v36;
    uint64_t v40 = v36[1];
    uint64_t v41 = v37 & 0xC0;
    uint64_t v42 = v62;
    while (1)
    {
      uint64_t result = *((void *)v42 - 2);
      Swift::String v43 = *((void *)v42 - 1);
      __int128 v44 = *v42;
      if (v44 >> 6)
      {
        if (v44 >> 6 == 1)
        {
          if (v41 == 64)
          {
            if (result == v39 && v43 == v40)
            {
            }

            else
            {
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v43, v39, v40, 0LL);
            }
          }

          goto LABEL_51;
        }

        if (v41 != 128) {
          goto LABEL_51;
        }
      }

      else if (v37 >= 0x40u)
      {
        goto LABEL_51;
      }

      uint64_t v46 = result == v39 && v43 == v40;
      if (v46 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v43, v39, v40, 0LL), (result & 1) != 0))
      {
LABEL_70:
        swift_bridgeObjectRelease(v67);
        __int128 v47 = sub_10006B8B4();
        uint64_t v33 = swift_allocError(&type metadata for HelpRequested, v47, 0LL, 0LL);
        *unint64_t v48 = 1;
        return swift_willThrow(v33);
      }

        __break(1u);
LABEL_46:
        __break(1u);
        return result;
      }

      if (v9 < v5) {
        goto LABEL_41;
      }
      if (*(_BYTE *)(v4 + (v9 << 6) + 88) == 1)
      {
        uint64_t result = sub_100074524(v9++);
        uint64_t v4 = *v3;
        Swift::String v5 = v3[1];
      }

      if (v5 < 0) {
        goto LABEL_42;
      }
      Swift::String v14 = *(void *)(v4 + 16);
      if (v9 < v5)
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }

      if (v9 == v14) {
        return result;
      }
      int64_t v18 = (_BYTE *)(v4 + (v9 << 6) + 88);
      while (v9 < v14)
      {
        if (*((void *)v18 - 2) == v8 && (*v18 & 1) == 0 && *((void *)v18 - 1) == a2) {
          return sub_100074524(v9);
        }
        ++v9;
        v18 += 64;
        if (v14 == v9) {
          return result;
        }
      }

void sub_10003230C()
{
  __n128 v1 = v0[8];
  unsigned __int8 v2 = v0[9].n128_u8[0];
  sub_10002D9E8(&v1, &v3);
  sub_10002D9E8(&v3, &v4);
  __asm { BR              X10 }

uint64_t sub_10003237C()
{
  uint64_t v0 = sub_100005104(&qword_1000B90C8);
  uint64_t v1 = sub_1000062F8( (unint64_t *)&qword_1000B90D0,  &qword_1000B90C8,  (uint64_t)&protocol conformance descriptor for [A]);
  v2._char countAndFlagsBits = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v0, v1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRetain(0xE100000000000000LL);
  v4._char countAndFlagsBits = 41LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return 40LL;
}

uint64_t sub_100032880(char a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v5 = a2 + 16 * v3 + 24;
  while (1)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v5 + 16LL))(v9);
    sub_10002CC24(v9);
    sub_10002AACC((uint64_t)&v10, (uint64_t)v14, &qword_1000B9150);
    uint64_t result = sub_10002AACC((uint64_t)v14, (uint64_t)&v15, &qword_1000B9150);
    if (v15) {
      break;
    }
    v5 -= 16LL;
    if (!--v3) {
      goto LABEL_11;
    }
  }

  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_14;
  }

  if ((unint64_t)(v3 - 1) >= *(void *)(a2 + 16))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (!*(void *)(v5 - 8))
  {
LABEL_11:
    v11[0] = &_swiftEmptySetSingleton;
    uint64_t v8 = sub_10003F288((uint64_t)&off_1000AFC00);
    swift_bridgeObjectRelease(v11[0]);
    swift_arrayDestroy(&unk_1000AFC20, 2LL, &type metadata for NameSpecification.Element);
    uint64_t v7 = sub_10007D834(a1, v8);
    swift_bridgeObjectRelease(v8);
    return (uint64_t)v7;
  }

  (*(void (**)(void *__return_ptr))(*(void *)v5 + 16LL))(v11);
  sub_10002AACC((uint64_t)&v12, (uint64_t)&v13, &qword_1000B9150);
  sub_10002AB10(&v13);
  sub_10002CC24(v11);
  uint64_t result = sub_10002AACC((uint64_t)&v13, (uint64_t)&v16, &qword_1000B9150);
  if (v16)
  {
    uint64_t v7 = sub_10007D834(a1, v16);
    sub_10002ABC8(&v13);
    return (uint64_t)v7;
  }

uint64_t sub_100032A2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = swift_bridgeObjectRetain(a1) + 40;
    while (1)
    {
      (*(void (**)(void *__return_ptr))(*(void *)v5 + 16LL))(v30);
      __int128 v43 = v31;
      __int128 v6 = v31;
      swift_bridgeObjectRetain(*((void *)&v31 + 1));
      sub_10002CC24(v30);
      sub_100030564((uint64_t)&v43);
      uint64_t v7 = HIBYTE(*((void *)&v6 + 1)) & 0xFLL;
      if ((*((void *)&v6 + 1) & 0x2000000000000000LL) == 0) {
        uint64_t v7 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (v7) {
        break;
      }
      v5 += 16LL;
      if (!--v3)
      {
        swift_bridgeObjectRelease(a1);
        goto LABEL_8;
      }
    }

    swift_bridgeObjectRelease(a1);
    v44[0] = 0xD000000000000011LL;
    v44[1] = 0x800000010009D590LL;
    __int128 v45 = xmmword_100097E30;
    uint64_t v47 = 0LL;
    uint64_t v46 = 0LL;
    char v48 = 0;
    sub_10005EC6C( (uint64_t)_swiftEmptyArrayStorage,  1LL,  (uint64_t)v44,  0LL,  0LL,  0LL,  0xE000000000000000LL,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&v32,  0);
    uint64_t v10 = &off_1000AFBC8;
    __int128 v11 = v32;
    uint64_t v12 = v33;
    __int128 v13 = v34;
    char v14 = v35;
    __int128 v15 = v36;
    __int128 v16 = v37;
    uint64_t v17 = v38;
    uint64_t v18 = v39;
    char v19 = v40;
    uint64_t v20 = v41;
    uint64_t v21 = v42;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    __int16 v24 = 4;
    unint64_t v25 = sub_100081990;
    uint64_t v26 = 0LL;
    char v27 = 0;
    unint64_t v28 = String.init(argument:);
    uint64_t v29 = 0LL;
    v8._char countAndFlagsBits = (uint64_t)&v10;
    String.init(argument:)(v8);
  }

  else
  {
LABEL_8:
    sub_100033E1C(&v10);
  }

  sub_10002AACC((uint64_t)&v10, (uint64_t)v49, &qword_1000B9148);
  return sub_10002AACC((uint64_t)v49, a2, &qword_1000B9148);
}

char *sub_100032C14( uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v52[3] = a4;
  if (a1 < 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  uint64_t v11 = a5;
  uint64_t v14 = swift_allocObject(&unk_1000B0018, 24LL, 7LL);
  *(void *)(v14 + 16) = _swiftEmptyArrayStorage;
  uint64_t v49 = swift_allocObject(&unk_1000B0040, 24LL, 7LL);
  *(void *)(v49 + 16) = 15LL;
  uint64_t v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v16 = HIBYTE(a6) & 0xF) : (uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v33 = 7LL;
    if (((a6 >> 60) & ((v11 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v33 = 11LL;
    }
    sub_100033444(v33 | (v15 << 16), v49, a2 & 1, v14, v11, a6);
    swift_bridgeObjectRelease(a6);
    uint64_t v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain(v10);
    swift_release(v14);
    uint64_t v34 = v49;
    goto LABEL_40;
  }

  uint64_t v44 = a1;
  uint64_t v45 = v14;
  uint64_t v17 = 7LL;
  if (((a6 >> 60) & ((v11 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v17 = 11LL;
  }
  uint64_t v43 = v17 | (v16 << 16);
  unint64_t v50 = 4 * v16;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  unint64_t v9 = 15LL;
  unint64_t v8 = 15LL;
  unint64_t v18 = 15LL;
  while (1)
  {
    uint64_t v19 = String.subscript.getter(v9, v11, a6);
    uint64_t v21 = v20;
    v52[0] = v19;
    v52[1] = v20;
    uint64_t v22 = a3(v52);
    if (v7)
    {
      swift_release(v45);
      swift_release(v49);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(a6);
      return v10;
    }

    uint64_t v6 = v22;
    swift_bridgeObjectRelease(v21);
    if ((v6 & 1) != 0) {
      break;
    }
    unint64_t v9 = String.index(after:)(v9, v11, a6);
LABEL_11:
    if (v50 == v9 >> 14) {
      goto LABEL_31;
    }
  }

  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v9 = String.index(after:)(v9, v11, a6);
    *(void *)(v49 + 16) = v9;
    unint64_t v8 = v9;
    unint64_t v18 = v9;
    goto LABEL_11;
  }

  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_43;
  }

  uint64_t v23 = String.subscript.getter(v8, v9, v11, a6);
  uint64_t v46 = v24;
  uint64_t v47 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
    uint64_t v10 = sub_100057EEC(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
  }
  unint64_t v30 = *((void *)v10 + 2);
  unint64_t v29 = *((void *)v10 + 3);
  uint64_t v6 = v30 + 1;
  if (v30 >= v29 >> 1) {
    uint64_t v10 = sub_100057EEC((char *)(v29 > 1), v30 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v6;
  __int128 v31 = &v10[32 * v30];
  *((void *)v31 + 4) = v47;
  *((void *)v31 + 5) = v26;
  *((void *)v31 + 6) = v28;
  *((void *)v31 + 7) = v46;
  *(void *)(v45 + 16) = v10;
  uint64_t v32 = String.index(after:)(v9, v11, a6);
  unint64_t v9 = v32;
  *(void *)(v49 + 16) = v32;
  if (*((void *)v10 + 2) != v44)
  {
    unint64_t v8 = v32;
    unint64_t v18 = v32;
    goto LABEL_11;
  }

  unint64_t v18 = v32;
  unint64_t v8 = v32;
LABEL_31:
  if (v50 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    uint64_t v35 = v45;
    goto LABEL_39;
  }

  if (v50 >= v18 >> 14)
  {
    uint64_t v6 = String.subscript.getter(v18, v43, v11, a6);
    unint64_t v8 = v36;
    unint64_t v9 = v37;
    uint64_t v11 = v38;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_36;
  }

LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t v10 = sub_100057EEC(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
LABEL_36:
  unint64_t v40 = *((void *)v10 + 2);
  unint64_t v39 = *((void *)v10 + 3);
  if (v40 >= v39 >> 1) {
    uint64_t v10 = sub_100057EEC((char *)(v39 > 1), v40 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v40 + 1;
  uint64_t v41 = &v10[32 * v40];
  *((void *)v41 + 4) = v6;
  *((void *)v41 + 5) = v8;
  *((void *)v41 + 6) = v9;
  *((void *)v41 + 7) = v11;
  uint64_t v35 = v45;
  *(void *)(v45 + 16) = v10;
LABEL_39:
  swift_bridgeObjectRetain(v10);
  swift_release(v35);
  uint64_t v34 = v49;
LABEL_40:
  swift_release(v34);
  return v10;
}

    if (*(_OWORD *)&v15 == __PAIR128__(v20, v21)) {
      goto LABEL_18;
    }
    uint64_t v27 = v15.u64[1];
    uint64_t v26 = v15.i64[0];
    uint64_t v24 = v21;
    uint64_t v25 = v20;
    goto LABEL_46;
  }

  if ((_DWORD)v3 != 1)
  {
    sub_100066F84(a2, (uint64_t)&v44);
    if ((v45 & 0x6000000000000000LL) == 0x4000000000000000LL && v45 == 0x4000000000000000LL)
    {
      uint64_t v12 = vorrq_s8(v46, v44);
      __int128 v13 = vextq_s8(v12, v12, 8uLL);
    }

    goto LABEL_47;
  }

  v42 &= 0x9FFFFFFFFFFFFFFFLL;
  Swift::String v4 = v41[0];
  uint64_t v5 = v41[1];
  sub_100066F84(a2, (uint64_t)&v44);
  if ((v45 & 0x6000000000000000LL) != 0x2000000000000000LL) {
    goto LABEL_47;
  }
  v45 &= 0x9FFFFFFFFFFFFFFFLL;
  if (__PAIR128__(v5, v4) == *(_OWORD *)&v44)
  {
LABEL_18:
    uint64_t v6 = 1;
    return v6 & 1;
  }

  uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v44.i64[0], v44.i64[1], 0LL);
  return v6 & 1;
}

      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(0xE100000000000000LL);
      goto LABEL_78;
    }

    swift_bridgeObjectRelease(v37);
    uint64_t v7 = v51;
    unint64_t v9 = v4;
LABEL_54:
    uint64_t v56 = a3;
    unint64_t v55 = a4;
    if (v9 > v7 >> 14) {
      goto LABEL_140;
    }
    uint64_t v175 = v7;
    uint64_t v75 = String.subscript.getter(v5, v7, a3, a4);
    Swift::String v77 = v75;
    unint64_t v79 = v78;
    Swift::String v81 = v80;
    uint64_t v5 = v76;
    uint64_t v181 = v76;
    uint64_t v183 = v78 >> 14;
    if (v78 >> 14 == v75 >> 14)
    {
      uint64_t v6 = Substring.subscript.getter(v75);
      uint64_t v17 = v16;
      uint64_t v19 = v18;
      uint64_t v21 = v20;
      uint64_t v22 = sub_100057EEC(0LL, 1LL, 1, (char *)_swiftEmptyArrayStorage);
      uint64_t v24 = *((void *)v22 + 2);
      uint64_t v23 = *((void *)v22 + 3);
      uint64_t v7 = v24 + 1;
      if (v24 >= v23 >> 1) {
        uint64_t v22 = sub_100057EEC((char *)(v23 > 1), v24 + 1, 1, v22);
      }
      *((void *)v22 + 2) = v7;
      uint64_t v25 = &v22[32 * v24];
      *((void *)v25 + 4) = v6;
      uint64_t v26 = v25 + 32;
      goto LABEL_11;
    }

    swift_bridgeObjectRetain(v76);
    Swift::String v82 = v77;
    unint64_t v8 = v77;
    uint64_t v7 = v77;
    uint64_t v186 = (char *)_swiftEmptyArrayStorage;
    __n128 v83 = v81;
    do
    {
      char v84 = Substring.subscript.getter(v82, v77, v79, v83, v5);
      Swift::String v4 = v85;
      if (v84 == 10 && v85 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease(0xE100000000000000LL);
      }

      else
      {
        uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v84, v85, 10LL, 0xE100000000000000LL, 0LL);
        swift_bridgeObjectRelease(v4);
        if ((v6 & 1) == 0)
        {
          Swift::String v82 = Substring.index(after:)(v82, v77, v79, v83, v5);
          continue;
        }
      }

      if (v82 >> 14 < (unint64_t)v8 >> 14)
      {
        __break(1u);
        goto LABEL_137;
      }

      uint64_t v86 = v83;
      uint64_t v87 = Substring.subscript.getter(v8);
      BOOL v89 = v88;
      uint64_t v6 = (unint64_t)v90;
      Swift::String v92 = v91;
      if ((swift_isUniquelyReferenced_nonNull_native(v186) & 1) != 0) {
        uint64_t v93 = v186;
      }
      else {
        uint64_t v93 = sub_100057EEC(0LL, *((void *)v186 + 2) + 1LL, 1, v186);
      }
      uint64_t v95 = *((void *)v93 + 2);
      uint64_t v94 = *((void *)v93 + 3);
      Swift::String v4 = v95 + 1;
      if (v95 >= v94 >> 1) {
        uint64_t v93 = sub_100057EEC((char *)(v94 > 1), v95 + 1, 1, v93);
      }
      *((void *)v93 + 2) = v4;
      uint64_t v186 = v93;
      uint64_t v96 = &v93[32 * v95];
      *((void *)v96 + 4) = v87;
      *((void *)v96 + 5) = v89;
      *((void *)v96 + 6) = v6;
      *((void *)v96 + 7) = v92;
      __n128 v83 = v86;
      uint64_t v5 = v181;
      Swift::String v82 = Substring.index(after:)(v82, v77, v79, v86, v181);
      unint64_t v8 = v82;
      uint64_t v7 = v82;
    }

    while (v183 != v82 >> 14);
    if (v183 < v7 >> 14) {
      goto LABEL_141;
    }
    uint64_t v7 = Substring.subscript.getter(v7);
    uint64_t v97 = v5;
    uint64_t v17 = v98;
    uint64_t v19 = v99;
    uint64_t v21 = v100;
    swift_bridgeObjectRelease(v97);
    if ((swift_isUniquelyReferenced_nonNull_native(v186) & 1) != 0)
    {
      uint64_t v56 = a3;
      unint64_t v55 = a4;
      uint64_t v22 = v186;
    }

    else
    {
      uint64_t v22 = sub_100057EEC(0LL, *((void *)v186 + 2) + 1LL, 1, v186);
      uint64_t v56 = a3;
      unint64_t v55 = a4;
    }

    uint64_t v6 = *((void *)v22 + 2);
    unint64_t v101 = *((void *)v22 + 3);
    if (v6 >= v101 >> 1) {
      uint64_t v22 = sub_100057EEC((char *)(v101 > 1), v6 + 1, 1, v22);
    }
    *((void *)v22 + 2) = v6 + 1;
    uint64_t v102 = &v22[32 * v6];
    *((void *)v102 + 4) = v7;
    uint64_t v26 = v102 + 32;
LABEL_11:
    Swift::String v4 = (unint64_t)v22;
    v26[1] = v17;
    void v26[2] = v19;
    v26[3] = v21;
    swift_bridgeObjectRelease(v181);
    sub_100057328((char *)v4);
    uint64_t v27 = v175;
LABEL_12:
    uint64_t v5 = String.index(after:)(v27, v56, v55);
    unint64_t v9 = v5 >> 14;
    unint64_t v8 = v173;
    if (v178 >= v5 >> 14)
    {
      uint64_t v12 = String.subscript.getter(v5, v177, v56, v55);
      continue;
    }

    break;
  }

  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  unint64_t v8 = (uint64_t)sub_100057EEC(0LL, *(void *)(v8 + 16) + 1LL, 1, (char *)v8);
LABEL_126:
  __int128 v136 = *(void *)(v8 + 16);
  __int128 v135 = *(void *)(v8 + 24);
  uint64_t v137 = v136 + 1;
  if (v136 >= v135 >> 1) {
    unint64_t v8 = (uint64_t)sub_100057EEC((char *)(v135 > 1), v136 + 1, 1, (char *)v8);
  }
  *(void *)(v8 + 16) = v137;
  char v138 = (void *)(v8 + 32 * v136);
  v138[4] = v4;
  v138[5] = v5;
  v138 += 4;
  v138[2] = v6;
  v138[3] = v7;
  uint64_t v193 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v8);
  sub_10004FE2C(0LL, v136 + 1, 0);
  __int128 v139 = _swiftEmptyArrayStorage;
  v182 = v8;
  unint64_t v140 = (void *)(v8 + 56);
  do
  {
    uint64_t v141 = *(v140 - 3);
    Swift::String v142 = *(v140 - 2);
    unint64_t v143 = *(v140 - 1);
    uint64_t v144 = *v140;
    swift_bridgeObjectRetain(*v140);
    if ((v142 ^ v141) >= 0x4000)
    {
      v145._char countAndFlagsBits = 32LL;
      v145._object = (void *)0xE100000000000000LL;
      Swift::String v146 = String.init(repeating:count:)(v145, a2);
      Substring.distance(from:to:)(v141, v142, v141, v142, v143, v144);
      String.count.getter(v146._countAndFlagsBits, v146._object);
      uint64_t v188 = v146;
      swift_bridgeObjectRetain(v146._object);
      v191 = static String._fromSubstring(_:)(15LL, 7LL, 0LL, 0xE000000000000000LL);
      v192 = v147;
      String.append<A>(contentsOf:)(&v188, &type metadata for String, &protocol witness table for String);
      Swift::String v148 = Substring.init(_:)(v191, v192);
      uint64_t v184 = v149;
      v187 = v139;
      uint64_t v150 = v137;
      uint64_t v152 = v151;
      Swift::String v154 = v153;
      swift_bridgeObjectRelease(v146._object);
      v188._char countAndFlagsBits = v141;
      v188._object = (void *)v142;
      uint64_t v189 = v143;
      uint64_t v190 = v144;
      swift_bridgeObjectRetain(v144);
      uint64_t v155 = v152;
      uint64_t v137 = v150;
      Swift::Int v156 = static String._fromSubstring(_:)(v148, v184, v155, v154);
      __int128 v158 = v157;
      swift_bridgeObjectRelease(v154);
      v191 = v156;
      v192 = v158;
      __int128 v139 = v187;
      __int128 v159 = sub_100033C3C();
      String.append<A>(contentsOf:)(&v188, &type metadata for Substring, v159);
      uint64_t v141 = Substring.init(_:)(v191, v192);
      Swift::String v142 = v160;
      unint64_t v143 = v161;
      char v163 = v162;
      swift_bridgeObjectRelease(v146._object);
      swift_bridgeObjectRelease_n(v144, 2LL);
      uint64_t v144 = v163;
    }

    uint64_t v193 = v139;
    char v165 = v139[2];
    char v164 = v139[3];
    if (v165 >= v164 >> 1)
    {
      sub_10004FE2C((char *)(v164 > 1), v165 + 1, 1);
      __int128 v139 = v193;
    }

    v139[2] = v165 + 1;
    char v166 = &v139[4 * v165];
    v166[4] = v141;
    v166[5] = v142;
    v166[6] = v143;
    v166[7] = v144;
    v140 += 4;
    --v137;
  }

  while (v137);
  swift_bridgeObjectRelease_n(v182, 2LL);
  v188._char countAndFlagsBits = (uint64_t)v139;
  char v167 = v139;
  int v168 = sub_100005104(&qword_1000B90D8);
  char v169 = sub_1000062F8(&qword_1000B90E0, &qword_1000B90D8, (uint64_t)&protocol conformance descriptor for [A]);
  char v170 = sub_10002D69C();
  uint64_t v130 = Sequence<>.joined(separator:)(10LL, 0xE100000000000000LL, v168, v169, v170);
  swift_bridgeObjectRelease(v167);
  return v130;
}

unint64_t sub_10003302C( uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  v50[3] = a4;
  if (a1 < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v12 = a7;
  unint64_t v13 = a6;
  unint64_t v10 = a5;
  uint64_t v16 = swift_allocObject(&unk_1000B0068, 24LL, 7LL);
  *(void *)(v16 + 16) = _swiftEmptyArrayStorage;
  uint64_t v47 = swift_allocObject(&unk_1000B0040, 24LL, 7LL);
  *(void *)(v47 + 16) = v10;
  if (!a1 || (unint64_t v48 = v13 >> 14, v13 >> 14 == v10 >> 14))
  {
    sub_100033550(v13, v47, a2 & 1, v16);
    swift_bridgeObjectRelease(a8);
    unint64_t v13 = *(void *)(v16 + 16);
    swift_bridgeObjectRetain(v13);
    swift_release(v16);
    uint64_t v17 = v47;
    goto LABEL_5;
  }

  uint64_t v38 = a1;
  uint64_t v39 = v16;
  uint64_t v46 = (char *)_swiftEmptyArrayStorage;
  unint64_t v19 = v10;
  unint64_t v11 = v10;
  unint64_t v43 = v10;
  while (1)
  {
    uint64_t v20 = Substring.subscript.getter(v19, v10, v13, v12, a8);
    uint64_t v22 = v21;
    v50[0] = v20;
    v50[1] = v21;
    uint64_t v23 = a3(v50);
    if (v9)
    {
      swift_release(v39);
      swift_release(v47);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(a8);
      return v13;
    }

    unint64_t v8 = v23;
    swift_bridgeObjectRelease(v22);
    if ((v8 & 1) != 0) {
      break;
    }
    unint64_t v19 = Substring.index(after:)(v19, v10, v13, v12, a8);
LABEL_9:
    if (v48 == v19 >> 14) {
      goto LABEL_24;
    }
  }

  if (v11 >> 14 == v19 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v19 = Substring.index(after:)(v19, v10, v13, v12, a8);
    *(void *)(v47 + 16) = v19;
    unint64_t v11 = v19;
    unint64_t v43 = v19;
    goto LABEL_9;
  }

  if (v19 >> 14 < v11 >> 14)
  {
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v24 = Substring.subscript.getter(v11);
  uint64_t v42 = v25;
  uint64_t v44 = v24;
  uint64_t v40 = v27;
  uint64_t v41 = v26;
  if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0) {
    uint64_t v46 = sub_100057EEC(0LL, *((void *)v46 + 2) + 1LL, 1, v46);
  }
  unint64_t v8 = *((void *)v46 + 2);
  unint64_t v28 = *((void *)v46 + 3);
  if (v8 >= v28 >> 1) {
    uint64_t v46 = sub_100057EEC((char *)(v28 > 1), v8 + 1, 1, v46);
  }
  *((void *)v46 + 2) = v8 + 1;
  unint64_t v29 = &v46[32 * v8];
  *((void *)v29 + 4) = v44;
  *((void *)v29 + 5) = v42;
  *((void *)v29 + 6) = v41;
  *((void *)v29 + 7) = v40;
  *(void *)(v39 + 16) = v46;
  uint64_t v30 = Substring.index(after:)(v19, v10, v13, v12, a8);
  unint64_t v19 = v30;
  *(void *)(v47 + 16) = v30;
  if (*((void *)v46 + 2) != v38)
  {
    unint64_t v11 = v30;
    unint64_t v43 = v30;
    goto LABEL_9;
  }

  unint64_t v43 = v30;
  unint64_t v11 = v30;
LABEL_24:
  if (v48 == v11 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a8);
    uint64_t v31 = v39;
    unint64_t v13 = (unint64_t)v46;
    goto LABEL_32;
  }

  if (v48 >= v43 >> 14)
  {
    unint64_t v8 = Substring.subscript.getter(v43);
    unint64_t v10 = v32;
    unint64_t v11 = v33;
    uint64_t v12 = v34;
    swift_bridgeObjectRelease(a8);
    unint64_t v13 = (unint64_t)v46;
    if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_29;
  }

LABEL_35:
  __break(1u);
LABEL_36:
  unint64_t v13 = (unint64_t)sub_100057EEC(0LL, *(void *)(v13 + 16) + 1LL, 1, (char *)v13);
LABEL_29:
  unint64_t v36 = *(void *)(v13 + 16);
  unint64_t v35 = *(void *)(v13 + 24);
  if (v36 >= v35 >> 1) {
    unint64_t v13 = (unint64_t)sub_100057EEC((char *)(v35 > 1), v36 + 1, 1, (char *)v13);
  }
  *(void *)(v13 + 16) = v36 + 1;
  unint64_t v37 = (void *)(v13 + 32 * v36);
  v37[4] = v8;
  v37[5] = v10;
  v37[6] = v11;
  v37[7] = v12;
  uint64_t v31 = v39;
  *(void *)(v39 + 16) = v13;
LABEL_32:
  swift_bridgeObjectRetain(v13);
  swift_release(v31);
  uint64_t v17 = v47;
LABEL_5:
  swift_release(v17);
  return v13;
}

      a4 = (a4 + 1) & v18;
    }

    while (((*(void *)(v17 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0);
  }

  Hasher._combine(_:)(0);
  uint64_t v22 = *((void *)v2 + 12);
  if (!v22) {
    goto LABEL_36;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  uint64_t v23 = *(void *)(v22 + 16);
  Hasher._combine(_:)(v23);
  if (v23)
  {
    swift_bridgeObjectRetain(v22);
    uint64_t v24 = (void *)(v22 + 40);
    do
    {
      uint64_t v25 = *(v24 - 1);
      uint64_t v26 = *v24;
      swift_bridgeObjectRetain(*v24);
      String.hash(into:)(a1, v25, v26);
      swift_bridgeObjectRelease(v26);
      v24 += 2;
      --v23;
    }

    while (v23);
    swift_bridgeObjectRelease(v22);
  }

  uint64_t v27 = *((void *)v2 + 14);
  if (!v27) {
    goto LABEL_37;
  }
LABEL_30:
  unint64_t v28 = *((void *)v2 + 13);
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v27);
  String.hash(into:)(a1, v28, v27);
  swift_bridgeObjectRelease(v27);
  unint64_t v29 = *((void *)v2 + 16);
  if (v29)
  {
LABEL_31:
    uint64_t v30 = *((void *)v2 + 15);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v29);
    String.hash(into:)(a1, v30, v29);
    swift_bridgeObjectRelease(v29);
    return;
  }

uint64_t sub_100033444( unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = *(void *)(a2 + 16);
  int v14 = (v13 >> 14 == a1 >> 14) & a3;
  if (v14 == 1) {
    return v14 ^ 1u;
  }
  if (a1 >> 14 < v13 >> 14)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = a4;
  uint64_t v7 = String.subscript.getter(v13, a1, a5, a6);
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  uint64_t v10 = v17;
  unint64_t v11 = *(char **)(v6 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  *(void *)(v6 + 16) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    unint64_t v11 = sub_100057EEC(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    *(void *)(v6 + 16) = v11;
  }

  unint64_t v20 = *((void *)v11 + 2);
  unint64_t v19 = *((void *)v11 + 3);
  if (v20 >= v19 >> 1)
  {
    unint64_t v11 = sub_100057EEC((char *)(v19 > 1), v20 + 1, 1, v11);
    *(void *)(v6 + 16) = v11;
  }

  *((void *)v11 + 2) = v20 + 1;
  uint64_t v21 = &v11[32 * v20];
  *((void *)v21 + 4) = v7;
  *((void *)v21 + 5) = v8;
  *((void *)v21 + 6) = v9;
  *((void *)v21 + 7) = v10;
  return v14 ^ 1u;
}

uint64_t sub_100033550(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v11 = *(void *)(a2 + 16);
  int v12 = (v11 >> 14 == a1 >> 14) & a3;
  if (v12 == 1) {
    return v12 ^ 1u;
  }
  if (a1 >> 14 < v11 >> 14)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = a4;
  uint64_t v5 = Substring.subscript.getter(v11);
  uint64_t v6 = v13;
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  uint64_t v9 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(void *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    uint64_t v9 = sub_100057EEC(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
    *(void *)(v4 + 16) = v9;
  }

  unint64_t v18 = *((void *)v9 + 2);
  unint64_t v17 = *((void *)v9 + 3);
  if (v18 >= v17 >> 1)
  {
    uint64_t v9 = sub_100057EEC((char *)(v17 > 1), v18 + 1, 1, v9);
    *(void *)(v4 + 16) = v9;
  }

  *((void *)v9 + 2) = v18 + 1;
  unint64_t v19 = &v9[32 * v18];
  *((void *)v19 + 4) = v5;
  *((void *)v19 + 5) = v6;
  *((void *)v19 + 6) = v7;
  *((void *)v19 + 7) = v8;
  return v12 ^ 1u;
}

void *sub_100033664( void *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return 0LL;
  }
  uint64_t v7 = a3;
  uint64_t result = a1(&v6, &v7);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_1000336BC(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 == *a2 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL) & 1;
  }
}

unint64_t sub_100033710(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v5 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    unint64_t v7 = v6 | (v5 << 16);
    uint64_t result = String.index(_:offsetBy:limitedBy:)(15LL, result, v7, a2, a3);
    if ((v8 & 1) != 0) {
      uint64_t result = v7;
    }
    if (4 * v5 >= result >> 14) {
      return String.subscript.getter(result, v7, a2, a3);
    }
  }

  __break(1u);
  return result;
}

void *sub_1000337AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v40 = _swiftEmptyArrayStorage;
    sub_10004FE2C(0LL, v3, 0);
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v6 = (void *)(a1 + 56);
    do
    {
      uint64_t v7 = *(v6 - 3);
      uint64_t v8 = *(v6 - 2);
      uint64_t v10 = *(v6 - 1);
      uint64_t v9 = *v6;
      swift_bridgeObjectRetain(*v6);
      if ((v8 ^ (unint64_t)v7) >= 0x4000)
      {
        Substring.distance(from:to:)(v7, v8, v7, v8, v10, v9);
        unint64_t v33 = v4;
        String.count.getter(a2, a3);
        uint64_t v34 = a2;
        uint64_t v35 = a3;
        swift_bridgeObjectRetain(a3);
        uint64_t v38 = static String._fromSubstring(_:)(15LL, 7LL, 0LL, 0xE000000000000000LL);
        uint64_t v39 = v11;
        String.append<A>(contentsOf:)(&v34, &type metadata for String, &protocol witness table for String);
        uint64_t v12 = Substring.init(_:)(v38, v39);
        uint64_t v31 = v14;
        uint64_t v32 = v13;
        uint64_t v16 = v15;
        swift_bridgeObjectRelease(a3);
        uint64_t v34 = v7;
        uint64_t v35 = v8;
        uint64_t v36 = v10;
        uint64_t v37 = v9;
        swift_bridgeObjectRetain(v9);
        uint64_t v17 = static String._fromSubstring(_:)(v12, v32, v31, v16);
        uint64_t v19 = v18;
        swift_bridgeObjectRelease(v16);
        uint64_t v38 = v17;
        uint64_t v39 = v19;
        unint64_t v20 = sub_100033C3C();
        String.append<A>(contentsOf:)(&v34, &type metadata for Substring, v20);
        uint64_t v7 = Substring.init(_:)(v38, v39);
        uint64_t v8 = v21;
        uint64_t v10 = v22;
        uint64_t v24 = v23;
        swift_bridgeObjectRelease_n(v9, 2LL);
        uint64_t v9 = v24;
        uint64_t v4 = v33;
      }

      uint64_t v40 = v4;
      unint64_t v26 = v4[2];
      unint64_t v25 = v4[3];
      if (v26 >= v25 >> 1)
      {
        sub_10004FE2C((char *)(v25 > 1), v26 + 1, 1);
        uint64_t v4 = v40;
      }

      _OWORD v4[2] = v26 + 1;
      uint64_t v27 = &v4[4 * v26];
      v27[4] = v7;
      v27[5] = v8;
      v27[6] = v10;
      v27[7] = v9;
      v6 += 4;
      --v3;
    }

    while (v3);
  }

  return v4;
}

void *sub_1000339A8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_10004FDF4(0LL, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = (__int128 *)(a1 + 32); ; ++i)
    {
      __int128 v17 = *i;
      sub_100031AD4((uint64_t *)&v17, a2, a3, v18);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      uint64_t v10 = v18[0];
      uint64_t v11 = v18[1];
      uint64_t v19 = v6;
      unint64_t v13 = v6[2];
      unint64_t v12 = v6[3];
      if (v13 >= v12 >> 1)
      {
        sub_10004FDF4((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v6 = v19;
      }

      _OWORD v6[2] = v13 + 1;
      uint64_t v14 = &v6[2 * v13];
      _OWORD v14[4] = v10;
      v14[5] = v11;
      if (!--v5) {
        return v6;
      }
    }

    swift_release(v6);
  }

  return v6;
}

char *sub_100033AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v20 = a2;
  swift_bridgeObjectRetain(a2);
  int64_t v5 = (char *)_swiftEmptyArrayStorage;
  uint64_t v6 = 32LL;
  do
  {
    __int128 v8 = *(_OWORD *)(a1 + v6 + 144);
    v21[8] = *(_OWORD *)(a1 + v6 + 128);
    v21[9] = v8;
    __int128 v9 = *(_OWORD *)(a1 + v6 + 176);
    v21[10] = *(_OWORD *)(a1 + v6 + 160);
    v21[11] = v9;
    __int128 v10 = *(_OWORD *)(a1 + v6 + 80);
    v21[4] = *(_OWORD *)(a1 + v6 + 64);
    v21[5] = v10;
    __int128 v11 = *(_OWORD *)(a1 + v6 + 112);
    v21[6] = *(_OWORD *)(a1 + v6 + 96);
    v21[7] = v11;
    __int128 v12 = *(_OWORD *)(a1 + v6 + 16);
    v21[0] = *(_OWORD *)(a1 + v6);
    v21[1] = v12;
    __int128 v13 = *(_OWORD *)(a1 + v6 + 48);
    v21[2] = *(_OWORD *)(a1 + v6 + 32);
    v21[3] = v13;
    sub_10002D724((uint64_t)v21);
    uint64_t v14 = sub_100031CF8();
    uint64_t v16 = v15;
    sub_10002D8A4((uint64_t)v21);
    if (v16)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
        int64_t v5 = sub_100057AB8(0LL, *((void *)v5 + 2) + 1LL, 1, v5);
      }
      unint64_t v18 = *((void *)v5 + 2);
      unint64_t v17 = *((void *)v5 + 3);
      if (v18 >= v17 >> 1) {
        int64_t v5 = sub_100057AB8((char *)(v17 > 1), v18 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v18 + 1;
      uint64_t v7 = &v5[16 * v18];
      *((void *)v7 + 4) = v14;
      *((void *)v7 + 5) = v16;
    }

    v6 += 192LL;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(a1);
  return v5;
}

uint64_t sub_100033C24(uint64_t *a1)
{
  return sub_1000155F8(a1) & 1;
}

unint64_t sub_100033C3C()
{
  unint64_t result = qword_1000B9140;
  if (!qword_1000B9140)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1000B9140);
  }

  return result;
}

uint64_t sub_100033C80()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100033CA4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100033CB4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_100033CCC(uint64_t a1)
{
  return a1;
}

unint64_t sub_100033D34( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  if (a5)
  {
    sub_10002D990(result);
    swift_bridgeObjectRelease(a16);
    swift_bridgeObjectRelease(a13);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a4);
    sub_10002D9A0(a17, a18, a19);
    sub_10002D9E0(a20, a21);
    return swift_release(a24);
  }

  return result;
}

double sub_100033E1C(_OWORD *a1)
{
  double result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100033E40@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = type metadata accessor for Parsed(0LL, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a5, a1, v7);
}

uint64_t Argument.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = type metadata accessor for Argument(0LL, a2, a3, a4);
  sub_100033F10((uint64_t)a1, (uint64_t)v10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100098020, v7);
  sub_10006EB30(v10, v7, WitnessTable, a5);
  return sub_1000062D8(a1);
}

uint64_t type metadata accessor for Argument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037B54(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Argument);
}

uint64_t sub_100033F10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void Argument.init()()
{
}

uint64_t Argument.wrappedValue.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = type metadata accessor for Parsed(0LL, v7, a2, a3);
  __chkstk_darwin(v8);
  __int128 v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, v5, v8);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x1000000000000246LL,  0x800000010009D5D0LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  77LL,  0);
  __break(1u);
  return result;
}

uint64_t Option.wrappedValue.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Parsed(0LL, v6, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v4, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v4, a1, v6);
  return swift_storeEnumTagMultiPayload(v4, v7, 0LL);
}

void (*Argument.wrappedValue.modify( void *a1, uint64_t a2))(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  _OWORD v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  Argument.wrappedValue.getter(a2, v10, v11, (uint64_t)v9);
  return sub_1000341A8;
}

void sub_1000341A8(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[4];
  uint64_t v6 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    uint64_t v7 = v4[2];
    uint64_t v8 = v4[3];
    uint64_t v9 = *v4;
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[4], v6, v7);
    Option.wrappedValue.setter((uint64_t)v5, v9, v10, v11);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }

  else
  {
    Option.wrappedValue.setter((*a1)[5], *v4, a3, a4);
  }

  free(v6);
  free(v5);
  free(v4);
}

uint64_t sub_100034240@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Argument.init(from:)(a1, *(void *)(a2 + 16), a3, a4, a5);
}

uint64_t sub_100034258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = type metadata accessor for Parsed(0LL, *(void *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v4, v6);
}

uint64_t sub_100034294@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100033E40(a1, *(void *)(a2 + 16), a3, a4, a5);
}

unint64_t Argument.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v12 = type metadata accessor for Parsed(0LL, v3, v10, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v18 - v14, v2, v12);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return 0xD000000000000016LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v15, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v16 = String.init<A>(describing:)(v7, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  return v16;
}

uint64_t static ArgumentArrayParsingStrategy.allUnrecognized.getter()
{
  return 6LL;
}

uint64_t static ArgumentArrayParsingStrategy.postTerminator.getter()
{
  return 5LL;
}

uint64_t static ArrayParsingStrategy.remaining.getter()
{
  return 4LL;
}

void ArrayParsingStrategy.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static ArrayParsingStrategy.__derived_struct_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int FlagExclusivity.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t Argument<A>.init(wrappedValue:help:completion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v28 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v25 = a1;
  uint64_t v29 = a8;
  uint64_t v11 = type metadata accessor for Parsed(0LL, a6, a3, a4);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v24 - v13);
  uint64_t v15 = *(void *)(a6 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (v16 + 81) & ~v16;
  unint64_t v18 = (*(void *)(v15 + 64) + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_1000B0090, v18 + 17, v16 | 7);
  *(void *)(v19 + 16) = a6;
  *(void *)(v19 + 24) = a7;
  sub_1000367F0(a2, v19 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v19 + v17, v25, a6);
  unint64_t v20 = v19 + v18;
  uint64_t v21 = v27;
  *(void *)unint64_t v20 = v26;
  *(void *)(v20 + 8) = v21;
  *(_BYTE *)(v20 + 16) = v28;
  sub_10006F11C((uint64_t)sub_100036838, v19, a6, v22, v14);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v12 + 32))(v29, v14, v11);
}

uint64_t sub_1000345C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  int v42 = a8;
  uint64_t v41 = a7;
  uint64_t v40 = a4;
  uint64_t v43 = a1;
  uint64_t v13 = type metadata accessor for Optional(0LL, a9);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v19 = type metadata accessor for Bare(0LL, a9, v17, v18);
  uint64_t v20 = *(void *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v16, a5, a9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v16, 0LL, 1LL, a9);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  uint64_t v21 = v40;
  sub_100037ACC(v40);
  uint64_t v22 = v41;
  unsigned __int8 v23 = v42;
  sub_100037B40(a6, v41, v42);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000999FC, v19);
  double v25 = sub_10005F3F0(v43, a2, a3, 0LL, (uint64_t)v21, 0, (uint64_t)v16, v44, a6, v22, v23, v19, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v14 + 8))(v16, v13, v25);
  uint64_t v26 = sub_100005104(&qword_1000B9230);
  uint64_t v27 = (_OWORD *)swift_allocObject(v26, 224LL, 7LL);
  __int128 v28 = v44[8];
  __int128 v29 = v44[10];
  __int128 v30 = v44[11];
  v27[11] = v44[9];
  v27[12] = v29;
  v27[13] = v30;
  __int128 v31 = v44[4];
  __int128 v32 = v44[6];
  __int128 v33 = v44[7];
  v27[7] = v44[5];
  v27[8] = v32;
  v27[9] = v33;
  v27[10] = v28;
  __int128 v34 = v44[0];
  __int128 v35 = v44[1];
  v27[1] = xmmword_100096510;
  v27[2] = v34;
  __int128 v36 = v44[2];
  __int128 v37 = v44[3];
  v27[3] = v35;
  v27[4] = v36;
  v27[5] = v37;
  v27[6] = v31;
  return sub_100079288((uint64_t)v27);
}

uint64_t Argument<A>.init(help:completion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v9 = a4;
  uint64_t v21 = a7;
  uint64_t v13 = type metadata accessor for Parsed(0LL, a5, a3, a4);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v20 - v15);
  uint64_t v17 = swift_allocObject(&unk_1000B00B8, 105LL, 7LL);
  *(void *)(v17 + 16) = a5;
  *(void *)(v17 + 24) = a6;
  sub_1000367F0(a1, v17 + 32);
  *(void *)(v17 + 88) = a2;
  *(void *)(v17 + 96) = a3;
  *(_BYTE *)(v17 + 104) = v9;
  sub_10006F11C((uint64_t)sub_100036894, v17, a5, v18, v16);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v14 + 32))(v21, v16, v13);
}

uint64_t sub_1000348C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v38 = a4;
  uint64_t v39 = a1;
  uint64_t v14 = type metadata accessor for Optional(0LL, a8);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v20 = type metadata accessor for Bare(0LL, a8, v18, v19);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 56LL))(v17, 1LL, 1LL, a8);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  uint64_t v21 = v38;
  sub_100037ACC(v38);
  sub_100037B40(a5, a6, a7);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000999FC, v20);
  double v23 = sub_10005F3F0(v39, a2, a3, 0LL, (uint64_t)v21, 0, (uint64_t)v17, v40, a5, a6, a7, v20, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v15 + 8))(v17, v14, v23);
  uint64_t v24 = sub_100005104(&qword_1000B9230);
  double v25 = (_OWORD *)swift_allocObject(v24, 224LL, 7LL);
  __int128 v26 = v40[8];
  __int128 v27 = v40[10];
  __int128 v28 = v40[11];
  v25[11] = v40[9];
  v25[12] = v27;
  v25[13] = v28;
  __int128 v29 = v40[4];
  __int128 v30 = v40[6];
  __int128 v31 = v40[7];
  v25[7] = v40[5];
  v25[8] = v30;
  _OWORD v25[9] = v31;
  v25[10] = v26;
  __int128 v32 = v40[0];
  __int128 v33 = v40[1];
  v25[1] = xmmword_100096510;
  void v25[2] = v32;
  __int128 v34 = v40[2];
  __int128 v35 = v40[3];
  v25[3] = v33;
  v25[4] = v34;
  v25[5] = v35;
  v25[6] = v29;
  return sub_100079288((uint64_t)v25);
}

uint64_t Argument.init(wrappedValue:help:completion:transform:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v28 = a7;
  uint64_t v29 = a3;
  int v31 = a5;
  uint64_t v30 = a4;
  uint64_t v27 = a1;
  uint64_t v32 = a9;
  uint64_t v12 = type metadata accessor for Parsed(0LL, a8, a3, a4);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v27 - v14);
  uint64_t v16 = *(void *)(a8 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (v17 + 96) & ~v17;
  unint64_t v19 = (*(void *)(v16 + 64) + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = (char *)swift_allocObject(&unk_1000B00E0, v19 + 17, v17 | 7);
  *((void *)v20 + 2) = a8;
  sub_1000367F0(a2, (uint64_t)(v20 + 24));
  uint64_t v21 = v27;
  uint64_t v22 = v28;
  *((void *)v20 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = a6;
  *((void *)v20 + 11) = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v20[v18], v21, a8);
  double v23 = &v20[v19];
  uint64_t v24 = v30;
  *(void *)double v23 = v29;
  *((void *)v23 + 1) = v24;
  v23[16] = v31;
  sub_10006F11C((uint64_t)sub_100036968, (uint64_t)v20, a8, v25, v15);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v13 + 32))(v32, v15, v12);
}

uint64_t sub_100034BD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v42 = a8;
  uint64_t v41 = a6;
  uint64_t v45 = a5;
  uint64_t v40 = a4;
  uint64_t v44 = a1;
  uint64_t v43 = type metadata accessor for Optional(0LL, a11);
  uint64_t v14 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v19 = type metadata accessor for Bare(0LL, a11, v17, v18);
  uint64_t v20 = *(void *)(a11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v16, a7, a11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v16, 0LL, 1LL, a11);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  uint64_t v21 = v40;
  sub_100037ACC(v40);
  uint64_t v22 = v41;
  swift_retain(v41);
  uint64_t v23 = v42;
  sub_100037B40(v42, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099A24, v19);
  double v25 = sub_10005F6B8(v44, a2, a3, 0LL, (uint64_t)v21, 0, v45, v46, v22, (uint64_t)v16, v23, a9, a10, v19, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v14 + 8))(v16, v43, v25);
  uint64_t v26 = sub_100005104(&qword_1000B9230);
  uint64_t v27 = (_OWORD *)swift_allocObject(v26, 224LL, 7LL);
  __int128 v28 = v46[8];
  __int128 v29 = v46[10];
  __int128 v30 = v46[11];
  v27[11] = v46[9];
  v27[12] = v29;
  v27[13] = v30;
  __int128 v31 = v46[4];
  __int128 v32 = v46[6];
  __int128 v33 = v46[7];
  v27[7] = v46[5];
  v27[8] = v32;
  v27[9] = v33;
  v27[10] = v28;
  __int128 v34 = v46[0];
  __int128 v35 = v46[1];
  v27[1] = xmmword_100096510;
  v27[2] = v34;
  __int128 v36 = v46[2];
  __int128 v37 = v46[3];
  v27[3] = v35;
  v27[4] = v36;
  v27[5] = v37;
  v27[6] = v31;
  return sub_100079288((uint64_t)v27);
}

uint64_t Argument.init(help:completion:transform:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  HIDWORD(v21) = a4;
  uint64_t v22 = a8;
  uint64_t v14 = type metadata accessor for Parsed(0LL, a7, a3, a4);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v21 - v16);
  uint64_t v18 = swift_allocObject(&unk_1000B0108, 113LL, 7LL);
  *(void *)(v18 + 16) = a7;
  sub_1000367F0(a1, v18 + 24);
  *(void *)(v18 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = a5;
  *(void *)(v18 + 88) = a6;
  *(void *)(v18 + 96) = a2;
  *(void *)(v18 + 104) = a3;
  *(_BYTE *)(v18 + 112) = BYTE4(v21);
  sub_10006F11C((uint64_t)sub_1000369D0, v18, a7, v19, v17);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v15 + 32))(v22, v17, v14);
}

uint64_t sub_100034EF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v41 = a8;
  uint64_t v40 = a7;
  uint64_t v44 = a5;
  uint64_t v39 = a4;
  uint64_t v43 = a1;
  uint64_t v42 = type metadata accessor for Optional(0LL, a10);
  uint64_t v13 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v15 = (char *)&v38 - v14;
  uint64_t v18 = type metadata accessor for Bare(0LL, a10, v16, v17);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56LL))(v15, 1LL, 1LL, a10);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  uint64_t v19 = v39;
  sub_100037ACC(v39);
  uint64_t v20 = a6;
  swift_retain(a6);
  uint64_t v21 = v40;
  uint64_t v22 = v41;
  sub_100037B40(v40, v41, a9);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099A24, v18);
  double v24 = sub_10005F6B8(v43, a2, a3, 0LL, (uint64_t)v19, 0, v44, v45, v20, (uint64_t)v15, v21, v22, a9, v18, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v13 + 8))(v15, v42, v24);
  uint64_t v25 = sub_100005104(&qword_1000B9230);
  uint64_t v26 = (_OWORD *)swift_allocObject(v25, 224LL, 7LL);
  __int128 v27 = v45[8];
  __int128 v28 = v45[10];
  __int128 v29 = v45[11];
  v26[11] = v45[9];
  v26[12] = v28;
  v26[13] = v29;
  __int128 v30 = v45[4];
  __int128 v31 = v45[6];
  __int128 v32 = v45[7];
  void v26[7] = v45[5];
  v26[8] = v31;
  void v26[9] = v32;
  v26[10] = v27;
  __int128 v33 = v45[0];
  __int128 v34 = v45[1];
  v26[1] = xmmword_100096510;
  void v26[2] = v33;
  __int128 v35 = v45[2];
  __int128 v36 = v45[3];
  v26[3] = v34;
  v26[4] = v35;
  v26[5] = v36;
  v26[6] = v30;
  return sub_100079288((uint64_t)v26);
}

uint64_t Argument.init<A>(wrappedValue:help:completion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  HIDWORD(v22) = a4;
  uint64_t v23 = a7;
  uint64_t v12 = type metadata accessor for Optional(255LL, a5);
  uint64_t v15 = type metadata accessor for Parsed(0LL, v12, v13, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v22 - v17);
  uint64_t v19 = swift_allocObject(&unk_1000B0130, 105LL, 7LL);
  *(void *)(v19 + 16) = a5;
  *(void *)(v19 + 24) = a6;
  sub_1000367F0(a1, v19 + 32);
  *(void *)(v19 + 88) = a2;
  *(void *)(v19 + 96) = a3;
  *(_BYTE *)(v19 + 104) = BYTE4(v22);
  sub_10006F11C((uint64_t)sub_100036A0C, v19, v12, v20, v18);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v16 + 32))(v23, v18, v15);
}

uint64_t Argument.init<A>(wrappedValue:help:completion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v27 = a7;
  uint64_t v28 = a1;
  int v31 = a5;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v32 = a8;
  uint64_t v10 = type metadata accessor for Optional(255LL, a6);
  uint64_t v13 = type metadata accessor for Parsed(0LL, v10, v11, v12);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v27 - v15);
  uint64_t v17 = *(void *)(v10 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v18 + 81) & ~v18;
  unint64_t v20 = (*(void *)(v17 + 64) + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_1000B0158, v20 + 17, v18 | 7);
  uint64_t v22 = v27;
  *(void *)(v21 + 16) = a6;
  *(void *)(v21 + 24) = v22;
  sub_1000367F0(a2, v21 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v21 + v19, v28, v10);
  unint64_t v23 = v21 + v20;
  uint64_t v24 = v30;
  *(void *)unint64_t v23 = v29;
  *(void *)(v23 + 8) = v24;
  *(_BYTE *)(v23 + 16) = v31;
  sub_10006F11C((uint64_t)sub_100036B08, v21, v10, v25, v16);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v14 + 32))(v32, v16, v13);
}

uint64_t sub_100035354( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v17 = type metadata accessor for Optional(0LL, a9);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_100037ACC(a4);
  sub_100037B40(a6, a7, a8);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099870, v17);
  sub_10005F3F0(a1, a2, a3, 0LL, (uint64_t)a4, 0, a5, v32, a6, a7, a8, v17, WitnessTable);
  uint64_t v19 = sub_100005104(&qword_1000B9230);
  unint64_t v20 = (_OWORD *)swift_allocObject(v19, 224LL, 7LL);
  __int128 v21 = v32[8];
  __int128 v22 = v32[10];
  __int128 v23 = v32[11];
  v20[11] = v32[9];
  v20[12] = v22;
  v20[13] = v23;
  __int128 v24 = v32[4];
  __int128 v25 = v32[6];
  __int128 v26 = v32[7];
  v20[7] = v32[5];
  v20[8] = v25;
  v20[9] = v26;
  v20[10] = v21;
  __int128 v27 = v32[0];
  __int128 v28 = v32[1];
  v20[1] = xmmword_100096510;
  void v20[2] = v27;
  __int128 v29 = v32[2];
  __int128 v30 = v32[3];
  v20[3] = v28;
  v20[4] = v29;
  v20[5] = v30;
  v20[6] = v24;
  return sub_100079288((uint64_t)v20);
}

uint64_t Argument.init<A>(help:completion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  HIDWORD(v22) = a4;
  uint64_t v23 = a7;
  uint64_t v12 = type metadata accessor for Optional(255LL, a5);
  uint64_t v15 = type metadata accessor for Parsed(0LL, v12, v13, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v22 - v17);
  uint64_t v19 = swift_allocObject(&unk_1000B0180, 105LL, 7LL);
  *(void *)(v19 + 16) = a5;
  *(void *)(v19 + 24) = a6;
  sub_1000367F0(a1, v19 + 32);
  *(void *)(v19 + 88) = a2;
  *(void *)(v19 + 96) = a3;
  *(_BYTE *)(v19 + 104) = BYTE4(v22);
  sub_10006F11C((uint64_t)sub_100036A0C, v19, v12, v20, v18);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v16 + 32))(v23, v18, v15);
}

uint64_t sub_100035590( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v34 = a1;
  uint64_t v15 = type metadata accessor for Optional(0LL, a8);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v34 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 56LL))( (char *)&v34 - v17,  1LL,  1LL,  a8);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_100037ACC(a4);
  sub_100037B40(a5, a6, a7);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099870, v15);
  double v20 = sub_10005F3F0(v34, a2, a3, 0LL, (uint64_t)a4, 0, (uint64_t)v18, v35, a5, a6, a7, v15, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v16 + 8))(v18, v15, v20);
  uint64_t v21 = sub_100005104(&qword_1000B9230);
  uint64_t v22 = (_OWORD *)swift_allocObject(v21, 224LL, 7LL);
  __int128 v23 = v35[8];
  __int128 v24 = v35[10];
  __int128 v25 = v35[11];
  v22[11] = v35[9];
  v22[12] = v24;
  v22[13] = v25;
  __int128 v26 = v35[4];
  __int128 v27 = v35[6];
  __int128 v28 = v35[7];
  v22[7] = v35[5];
  v22[8] = v27;
  v22[9] = v28;
  v22[10] = v23;
  __int128 v29 = v35[0];
  __int128 v30 = v35[1];
  v22[1] = xmmword_100096510;
  v22[2] = v29;
  __int128 v31 = v35[2];
  __int128 v32 = v35[3];
  v22[3] = v30;
  v22[4] = v31;
  v22[5] = v32;
  v22[6] = v26;
  return sub_100079288((uint64_t)v22);
}

uint64_t Argument.init<A>(wrappedValue:help:completion:transform:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v25 = a6;
  int v26 = a4;
  uint64_t v27 = a8;
  uint64_t v13 = type metadata accessor for Optional(255LL, a7);
  uint64_t v16 = type metadata accessor for Parsed(0LL, v13, v14, v15);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v24 - v18);
  uint64_t v20 = swift_allocObject(&unk_1000B01A8, 113LL, 7LL);
  *(void *)(v20 + 16) = a7;
  sub_1000367F0(a1, v20 + 24);
  uint64_t v21 = v25;
  *(void *)(v20 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = a5;
  *(void *)(v20 + 88) = v21;
  *(void *)(v20 + 96) = a2;
  *(void *)(v20 + 104) = a3;
  *(_BYTE *)(v20 + 112) = v26;
  sub_10006F11C((uint64_t)sub_100036BA4, v20, v13, v22, v19);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v17 + 32))(v27, v19, v16);
}

uint64_t Argument.init<A>(wrappedValue:help:completion:transform:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v32 = a7;
  uint64_t v33 = a3;
  uint64_t v30 = a6;
  uint64_t v31 = a1;
  int v35 = a5;
  uint64_t v34 = a4;
  uint64_t v36 = a9;
  uint64_t v11 = type metadata accessor for Optional(255LL, a8);
  uint64_t v14 = type metadata accessor for Parsed(0LL, v11, v12, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v29 - v16);
  uint64_t v18 = *(void *)(v11 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (v19 + 96) & ~v19;
  unint64_t v21 = (*(void *)(v18 + 64) + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = (char *)swift_allocObject(&unk_1000B01D0, v21 + 17, v19 | 7);
  *((void *)v22 + 2) = a8;
  sub_1000367F0(a2, (uint64_t)(v22 + 24));
  uint64_t v23 = v31;
  uint64_t v24 = v32;
  *((void *)v22 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = v30;
  *((void *)v22 + 11) = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(&v22[v20], v23, v11);
  uint64_t v25 = &v22[v21];
  uint64_t v26 = v34;
  *(void *)uint64_t v25 = v33;
  *((void *)v25 + 1) = v26;
  v25[16] = v35;
  sub_10006F11C((uint64_t)sub_100036CB0, (uint64_t)v22, v11, v27, v17);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v15 + 32))(v36, v17, v14);
}

uint64_t sub_1000359A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v18 = type metadata accessor for Optional(0LL, a11);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_100037ACC(a4);
  swift_retain(a6);
  sub_100037B40(a8, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099854, v18);
  sub_10005F6B8(a1, a2, a3, 0LL, (uint64_t)a4, 0, a5, v34, a6, a7, a8, a9, a10, v18, WitnessTable);
  uint64_t v20 = sub_100005104(&qword_1000B9230);
  unint64_t v21 = (_OWORD *)swift_allocObject(v20, 224LL, 7LL);
  __int128 v22 = v34[8];
  __int128 v23 = v34[10];
  __int128 v24 = v34[11];
  v21[11] = v34[9];
  v21[12] = v23;
  _OWORD v21[13] = v24;
  __int128 v25 = v34[4];
  __int128 v26 = v34[6];
  __int128 v27 = v34[7];
  v21[7] = v34[5];
  v21[8] = v26;
  v21[9] = v27;
  v21[10] = v22;
  __int128 v28 = v34[0];
  __int128 v29 = v34[1];
  v21[1] = xmmword_100096510;
  v21[2] = v28;
  __int128 v30 = v34[2];
  __int128 v31 = v34[3];
  v21[3] = v29;
  v21[4] = v30;
  v21[5] = v31;
  v21[6] = v25;
  return sub_100079288((uint64_t)v21);
}

uint64_t Argument.init<A>(help:completion:transform:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v25 = a6;
  int v26 = a4;
  uint64_t v27 = a8;
  uint64_t v13 = type metadata accessor for Optional(255LL, a7);
  uint64_t v16 = type metadata accessor for Parsed(0LL, v13, v14, v15);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v24 - v18);
  uint64_t v20 = swift_allocObject(&unk_1000B01F8, 113LL, 7LL);
  *(void *)(v20 + 16) = a7;
  sub_1000367F0(a1, v20 + 24);
  uint64_t v21 = v25;
  *(void *)(v20 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = a5;
  *(void *)(v20 + 88) = v21;
  *(void *)(v20 + 96) = a2;
  *(void *)(v20 + 104) = a3;
  *(_BYTE *)(v20 + 112) = v26;
  sub_10006F11C((uint64_t)sub_100036BA4, v20, v13, v22, v19);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v17 + 32))(v27, v19, v16);
}

uint64_t sub_100035C14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v36 = a8;
  uint64_t v38 = a5;
  uint64_t v37 = a1;
  uint64_t v15 = type metadata accessor for Optional(0LL, a10);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v36 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56LL))( (char *)&v36 - v17,  1LL,  1LL,  a10);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  uint64_t v19 = (uint64_t)a4;
  sub_100037ACC(a4);
  swift_retain(a6);
  uint64_t v20 = v36;
  sub_100037B40(a7, v36, a9);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099854, v15);
  double v22 = sub_10005F6B8(v37, a2, a3, 0LL, v19, 0, v38, v39, a6, (uint64_t)v18, a7, v20, a9, v15, WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v16 + 8))(v18, v15, v22);
  uint64_t v23 = sub_100005104(&qword_1000B9230);
  uint64_t v24 = (_OWORD *)swift_allocObject(v23, 224LL, 7LL);
  __int128 v25 = v39[8];
  __int128 v26 = v39[10];
  __int128 v27 = v39[11];
  v24[11] = v39[9];
  v24[12] = v26;
  v24[13] = v27;
  __int128 v28 = v39[4];
  __int128 v29 = v39[6];
  __int128 v30 = v39[7];
  v24[7] = v39[5];
  v24[8] = v29;
  void v24[9] = v30;
  v24[10] = v25;
  __int128 v31 = v39[0];
  __int128 v32 = v39[1];
  v24[1] = xmmword_100096510;
  void v24[2] = v31;
  __int128 v33 = v39[2];
  __int128 v34 = v39[3];
  v24[3] = v32;
  v24[4] = v33;
  v24[5] = v34;
  v24[6] = v28;
  return sub_100079288((uint64_t)v24);
}

uint64_t Argument.init<A>(wrappedValue:parsing:help:completion:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject(&unk_1000B0220, 113LL, 7LL);
  *(void *)(v16 + 16) = a7;
  *(void *)(v16 + 24) = a8;
  sub_1000367F0(a3, v16 + 32);
  *(_BYTE *)(v16 + 81) = a2;
  *(void *)(v16 + 88) = a1;
  *(void *)(v16 + 96) = a4;
  *(void *)(v16 + 104) = a5;
  *(_BYTE *)(v16 + 112) = a6;
  uint64_t v17 = type metadata accessor for Array(0LL, a7);
  sub_10006F11C((uint64_t)sub_100036DA8, v16, v17, v18, &v25);
  __int128 v23 = v25;
  char v24 = v26;
  uint64_t v21 = type metadata accessor for Parsed(0LL, v17, v19, v20);
  (*(void (**)(uint64_t *, __int128 *, uint64_t))(*(void *)(v21 - 8) + 32LL))(&v27, &v23, v21);
  return v27;
}

uint64_t sub_100035EF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v17 = type metadata accessor for Array(0LL, a10);
  uint64_t v33 = a6;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_100037ACC(a4);
  sub_100037B40(a7, a8, a9);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000998B4, v17);
  sub_10005F3F0(a1, a2, a3, 0LL, (uint64_t)a4, a5, (uint64_t)&v33, v34, a7, a8, a9, v17, WitnessTable);
  uint64_t v19 = sub_100005104(&qword_1000B9230);
  uint64_t v20 = (_OWORD *)swift_allocObject(v19, 224LL, 7LL);
  __int128 v21 = v34[8];
  __int128 v22 = v34[10];
  __int128 v23 = v34[11];
  v20[11] = v34[9];
  v20[12] = v22;
  v20[13] = v23;
  __int128 v24 = v34[4];
  __int128 v25 = v34[6];
  __int128 v26 = v34[7];
  v20[7] = v34[5];
  v20[8] = v25;
  v20[9] = v26;
  v20[10] = v21;
  __int128 v27 = v34[0];
  __int128 v28 = v34[1];
  v20[1] = xmmword_100096510;
  void v20[2] = v27;
  __int128 v29 = v34[2];
  __int128 v30 = v34[3];
  v20[3] = v28;
  v20[4] = v29;
  v20[5] = v30;
  v20[6] = v24;
  return sub_100079288((uint64_t)v20);
}

uint64_t Argument.init<A>(parsing:help:completion:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject(&unk_1000B0248, 105LL, 7LL);
  *(void *)(v14 + 16) = a6;
  *(void *)(v14 + 24) = a7;
  sub_1000367F0(a2, v14 + 32);
  *(_BYTE *)(v14 + 81) = a1;
  *(void *)(v14 + 88) = a3;
  *(void *)(v14 + 96) = a4;
  *(_BYTE *)(v14 + 104) = a5;
  uint64_t v15 = type metadata accessor for Array(0LL, a6);
  sub_10006F11C((uint64_t)sub_100036E34, v14, v15, v16, &v23);
  __int128 v21 = v23;
  char v22 = v24;
  uint64_t v19 = type metadata accessor for Parsed(0LL, v15, v17, v18);
  (*(void (**)(uint64_t *, __int128 *, uint64_t))(*(void *)(v19 - 8) + 32LL))(&v25, &v21, v19);
  return v25;
}

uint64_t sub_100036134( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v17 = type metadata accessor for Array(0LL, a9);
  uint64_t v32 = 0LL;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_100037ACC(a4);
  sub_100037B40(a6, a7, a8);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000998B4, v17);
  sub_10005F3F0(a1, a2, a3, 0LL, (uint64_t)a4, a5, (uint64_t)&v32, v33, a6, a7, a8, v17, WitnessTable);
  uint64_t v19 = sub_100005104(&qword_1000B9230);
  uint64_t v20 = (_OWORD *)swift_allocObject(v19, 224LL, 7LL);
  __int128 v21 = v33[8];
  __int128 v22 = v33[10];
  __int128 v23 = v33[11];
  v20[11] = v33[9];
  v20[12] = v22;
  v20[13] = v23;
  __int128 v24 = v33[4];
  __int128 v25 = v33[6];
  __int128 v26 = v33[7];
  v20[7] = v33[5];
  v20[8] = v25;
  v20[9] = v26;
  v20[10] = v21;
  __int128 v27 = v33[0];
  __int128 v28 = v33[1];
  v20[1] = xmmword_100096510;
  void v20[2] = v27;
  __int128 v29 = v33[2];
  __int128 v30 = v33[3];
  v20[3] = v28;
  v20[4] = v29;
  v20[5] = v30;
  v20[6] = v24;
  return sub_100079288((uint64_t)v20);
}

uint64_t Argument.init<A>(wrappedValue:parsing:help:completion:transform:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject(&unk_1000B0270, 121LL, 7LL);
  *(void *)(v17 + 16) = a9;
  sub_1000367F0(a3, v17 + 24);
  *(_BYTE *)(v17 + 73) = a2;
  *(void *)(v17 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = a7;
  *(void *)(v17 + 88) = a8;
  *(void *)(v17 + 96) = a1;
  *(void *)(v17 + 104) = a4;
  *(void *)(v17 + 112) = a5;
  *(_BYTE *)(v17 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = a6;
  uint64_t v18 = type metadata accessor for Array(0LL, a9);
  sub_10006F11C((uint64_t)sub_100036EC4, v17, v18, v19, &v26);
  __int128 v24 = v26;
  char v25 = v27;
  uint64_t v22 = type metadata accessor for Parsed(0LL, v18, v20, v21);
  (*(void (**)(uint64_t *, __int128 *, uint64_t))(*(void *)(v22 - 8) + 32LL))(&v28, &v24, v22);
  return v28;
}

uint64_t sub_100036388( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v18 = type metadata accessor for Array(0LL, a12);
  uint64_t v35 = a8;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_100037ACC(a4);
  swift_retain(a7);
  sub_100037B40(a9, a10, a11);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099898, v18);
  sub_10005F6B8(a1, a2, a3, 0LL, (uint64_t)a4, a5, a6, v36, a7, (uint64_t)&v35, a9, a10, a11, v18, WitnessTable);
  uint64_t v20 = sub_100005104(&qword_1000B9230);
  uint64_t v21 = (_OWORD *)swift_allocObject(v20, 224LL, 7LL);
  __int128 v22 = v36[8];
  __int128 v23 = v36[10];
  __int128 v24 = v36[11];
  v21[11] = v36[9];
  v21[12] = v23;
  _OWORD v21[13] = v24;
  __int128 v25 = v36[4];
  __int128 v26 = v36[6];
  __int128 v27 = v36[7];
  v21[7] = v36[5];
  v21[8] = v26;
  v21[9] = v27;
  v21[10] = v22;
  __int128 v28 = v36[0];
  __int128 v29 = v36[1];
  v21[1] = xmmword_100096510;
  v21[2] = v28;
  __int128 v30 = v36[2];
  __int128 v31 = v36[3];
  v21[3] = v29;
  v21[4] = v30;
  v21[5] = v31;
  v21[6] = v25;
  return sub_100079288((uint64_t)v21);
}

uint64_t Argument.init<A>(parsing:help:completion:transform:)( char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject(&unk_1000B0298, 113LL, 7LL);
  *(void *)(v16 + 16) = a8;
  sub_1000367F0(a2, v16 + 24);
  *(_BYTE *)(v16 + 73) = a1;
  *(void *)(v16 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = a6;
  *(void *)(v16 + 88) = a7;
  *(void *)(v16 + 96) = a3;
  *(void *)(v16 + 104) = a4;
  *(_BYTE *)(v16 + 112) = a5;
  uint64_t v17 = type metadata accessor for Array(0LL, a8);
  sub_10006F11C((uint64_t)sub_100036F60, v16, v17, v18, &v25);
  __int128 v23 = v25;
  char v24 = v26;
  uint64_t v21 = type metadata accessor for Parsed(0LL, v17, v19, v20);
  (*(void (**)(uint64_t *, __int128 *, uint64_t))(*(void *)(v21 - 8) + 32LL))(&v27, &v23, v21);
  return v27;
}

uint64_t sub_1000365F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v17 = type metadata accessor for Array(0LL, a11);
  uint64_t v34 = 0LL;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_100037ACC(a4);
  swift_retain(a7);
  sub_100037B40(a8, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099898, v17);
  sub_10005F6B8(a1, a2, a3, 0LL, (uint64_t)a4, a5, a6, v35, a7, (uint64_t)&v34, a8, a9, a10, v17, WitnessTable);
  uint64_t v19 = sub_100005104(&qword_1000B9230);
  uint64_t v20 = (_OWORD *)swift_allocObject(v19, 224LL, 7LL);
  __int128 v21 = v35[8];
  __int128 v22 = v35[10];
  __int128 v23 = v35[11];
  v20[11] = v35[9];
  v20[12] = v22;
  v20[13] = v23;
  __int128 v24 = v35[4];
  __int128 v25 = v35[6];
  __int128 v26 = v35[7];
  v20[7] = v35[5];
  v20[8] = v25;
  v20[9] = v26;
  v20[10] = v21;
  __int128 v27 = v35[0];
  __int128 v28 = v35[1];
  v20[1] = xmmword_100096510;
  void v20[2] = v27;
  __int128 v29 = v35[2];
  __int128 v30 = v35[3];
  v20[3] = v28;
  v20[4] = v29;
  v20[5] = v30;
  v20[6] = v24;
  return sub_100079288((uint64_t)v20);
}

uint64_t sub_100036754()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 81) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = *((void *)v0 + 5);
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(*((void *)v0 + 7));
    swift_bridgeObjectRelease(*((void *)v0 + 9));
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  int v7 = v0[v5 + 16];
  if (v7 != 255) {
    sub_10002D9A0(*(void *)&v0[v5], *(void *)&v0[v5 + 8], v7);
  }
  return swift_deallocObject(v0, v5 + 17, v3 | 7);
}

uint64_t sub_1000367F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B9158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(v3 + 16) - 8LL);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 81LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v3 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1000345C8( a1,  a2,  a3,  (uint64_t *)(v3 + 32),  v3 + v5,  *(void *)v6,  *(void *)(v6 + 8),  *(unsigned __int8 *)(v6 + 16),  *(void *)(v3 + 16));
}

uint64_t sub_100036894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000348C0( a1,  a2,  a3,  (uint64_t *)(v3 + 32),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(_BYTE *)(v3 + 104),  *(void *)(v3 + 16));
}

uint64_t sub_1000368C4()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 96) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = *((void *)v0 + 4);
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(*((void *)v0 + 6));
    swift_bridgeObjectRelease(*((void *)v0 + 8));
  }

  swift_release(*((void *)v0 + 11));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  int v7 = v0[v5 + 16];
  if (v7 != 255) {
    sub_10002D9A0(*(void *)&v0[v5], *(void *)&v0[v5 + 8], v7);
  }
  return swift_deallocObject(v0, v5 + 17, v3 | 7);
}

uint64_t sub_100036968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3[2] - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 96LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (char *)v3 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_100034BD4( a1,  a2,  a3,  v3 + 3,  v3[10],  v3[11],  (uint64_t)v3 + v5,  *(void *)v6,  *((void *)v6 + 1),  v6[16],  v3[2]);
}

uint64_t sub_1000369D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100034EF8( a1,  a2,  a3,  (uint64_t *)(v3 + 24),  *(void *)(v3 + 80),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(void *)(v3 + 104),  *(_BYTE *)(v3 + 112),  *(void *)(v3 + 16));
}

uint64_t sub_100036A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100035590( a1,  a2,  a3,  (uint64_t *)(v3 + 32),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(_BYTE *)(v3 + 104),  *(void *)(v3 + 16));
}

uint64_t sub_100036A40()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(type metadata accessor for Optional(0LL, v1) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 81) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64) + v4 + 7;
  uint64_t v6 = v0[5];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v0[7]);
    swift_bridgeObjectRelease(v0[9]);
  }

  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = (char *)v0 + v4;
  uint64_t v9 = *(void *)(v1 - 8);
  int v10 = *((unsigned __int8 *)v0 + v7 + 16);
  if (v10 != 255) {
    sub_10002D9A0(*(void *)((char *)v0 + v7), *(void *)((char *)v0 + v7 + 8), v10);
  }
  return swift_deallocObject(v0, v7 + 17, v3 | 7);
}

uint64_t sub_100036B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(type metadata accessor for Optional(0LL, v7) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 81LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v3 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_100035354( a1,  a2,  a3,  (uint64_t *)(v3 + 32),  v3 + v9,  *(void *)v10,  *(void *)(v10 + 8),  *(_BYTE *)(v10 + 16),  v7);
}

uint64_t sub_100036BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100035C14( a1,  a2,  a3,  (uint64_t *)(v3 + 24),  *(void *)(v3 + 80),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(void *)(v3 + 104),  *(_BYTE *)(v3 + 112),  *(void *)(v3 + 16));
}

uint64_t sub_100036BE0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(type metadata accessor for Optional(0LL, v1) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 96) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64) + v4 + 7;
  uint64_t v6 = v0[4];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v0[6]);
    swift_bridgeObjectRelease(v0[8]);
  }

  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(v0[11]);
  uint64_t v8 = (char *)v0 + v4;
  uint64_t v9 = *(void *)(v1 - 8);
  int v10 = *((unsigned __int8 *)v0 + v7 + 16);
  if (v10 != 255) {
    sub_10002D9A0(*(void *)((char *)v0 + v7), *(void *)((char *)v0 + v7 + 8), v10);
  }
  return swift_deallocObject(v0, v7 + 17, v3 | 7);
}

uint64_t sub_100036CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3[2];
  uint64_t v8 = *(void *)(type metadata accessor for Optional(0LL, v7) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 96LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  int v10 = (char *)v3 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1000359A8( a1,  a2,  a3,  v3 + 3,  v3[10],  v3[11],  (uint64_t)v3 + v9,  *(void *)v10,  *((void *)v10 + 1),  v10[16],  v7);
}

uint64_t sub_100036D54()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
  }

  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  int v2 = *(unsigned __int8 *)(v0 + 112);
  if (v2 != 255) {
    sub_10002D9A0(*(void *)(v0 + 96), *(void *)(v0 + 104), v2);
  }
  return swift_deallocObject(v0, 113LL, 7LL);
}

uint64_t sub_100036DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100035EF4( a1,  a2,  a3,  (uint64_t *)(v3 + 32),  *(unsigned __int8 *)(v3 + 81),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(void *)(v3 + 104),  *(_BYTE *)(v3 + 112),  *(void *)(v3 + 16));
}

uint64_t sub_100036DE8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
  }

  int v2 = *(unsigned __int8 *)(v0 + 104);
  if (v2 != 255) {
    sub_10002D9A0(*(void *)(v0 + 88), *(void *)(v0 + 96), v2);
  }
  return swift_deallocObject(v0, 105LL, 7LL);
}

uint64_t sub_100036E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100036134( a1,  a2,  a3,  (uint64_t *)(v3 + 32),  *(unsigned __int8 *)(v3 + 81),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(_BYTE *)(v3 + 104),  *(void *)(v3 + 16));
}

uint64_t sub_100036E68()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 48));
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
  }

  swift_release(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  int v2 = *(unsigned __int8 *)(v0 + 120);
  if (v2 != 255) {
    sub_10002D9A0(*(void *)(v0 + 104), *(void *)(v0 + 112), v2);
  }
  return swift_deallocObject(v0, 121LL, 7LL);
}

uint64_t sub_100036EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100036388( a1,  a2,  a3,  (uint64_t *)(v3 + 24),  *(_BYTE *)(v3 + 73),  *(void *)(v3 + 80),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(void *)(v3 + 104),  *(void *)(v3 + 112),  *(_BYTE *)(v3 + 120),  *(void *)(v3 + 16));
}

uint64_t sub_100036F0C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 48));
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
  }

  swift_release(*(void *)(v0 + 88));
  int v2 = *(unsigned __int8 *)(v0 + 112);
  if (v2 != 255) {
    sub_10002D9A0(*(void *)(v0 + 96), *(void *)(v0 + 104), v2);
  }
  return swift_deallocObject(v0, 113LL, 7LL);
}

uint64_t sub_100036F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000365F0( a1,  a2,  a3,  (uint64_t *)(v3 + 24),  *(_BYTE *)(v3 + 73),  *(void *)(v3 + 80),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(void *)(v3 + 104),  *(_BYTE *)(v3 + 112),  *(void *)(v3 + 16));
}

uint64_t sub_100036FA0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Argument<A>, a2);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100036FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(a3 - 8);
}

uint64_t sub_100036FD4(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_100098020, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100037004()
{
  unint64_t result = qword_1000B91A8[0];
  if (!qword_1000B91A8[0])
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ArgumentArrayParsingStrategy,  &type metadata for ArgumentArrayParsingStrategy);
    atomic_store(result, qword_1000B91A8);
  }

  return result;
}

uint64_t sub_100037048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t sub_100037050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Parsed(319LL, *(void *)(a1 + 16), a3, a4);
  if (v6 <= 0x3F)
  {
    uint64_t v7 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 1LL, &v7, a1 + 24);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000370BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }

  else
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      else {
        uint64_t v10 = 4LL;
      }
      __asm { BR              X13 }
    }

    if (v9 != 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
      return v3;
    }

    uint64_t v8 = a2[1];
    *uint64_t v3 = *a2;
    v3[1] = v8;
    *((_BYTE *)v3 + v5) = 1;
  }

  swift_retain(v8);
  return v3;
}

uint64_t sub_1000371D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= 0x10) {
    unint64_t v3 = 16LL;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1) {
      return swift_release(*(void *)(a1 + 8));
    }
    else {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }

  else
  {
    else {
      uint64_t v5 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_100037218 + 4 * byte_100097FB9[v5]))();
  }

void *sub_100037270(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain(v8);
    char v9 = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v9 = 0;
  }

  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

void *sub_100037348(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release(a1[1]);
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain(v12);
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }

  return a1;
}

_OWORD *sub_1000374D8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    *a1 = *a2;
    char v8 = 1;
  }

  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    char v8 = 0;
  }

  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

uint64_t sub_1000375AC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release(*(void *)(a1 + 8));
    }
    else {
      (*(void (**)(uint64_t, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *(_OWORD *)a1 = *a2;
      char v12 = 1;
    }

    else
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v12 = 0;
    }

    *(_BYTE *)(a1 + v7) = v12;
  }

  return a1;
}

uint64_t sub_100037738(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 16LL;
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) > 0x10uLL) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_1000377FC + 4 * byte_100097FDC[(v4 - 1)]))();
}

void sub_100037848(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (v5 <= 0x10) {
    unint64_t v5 = 16LL;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v7 = 0;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = &dword_100000004;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = &_mh_execute_header.magic + 1;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }

      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }

  __asm { BR              X10 }

_BYTE *initializeBufferWithCopyOfBuffer for ArgumentVisibility.Representation(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for ArgumentArrayParsingStrategy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100037A4C + 4 * byte_100097FEF[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100037A80 + 4 * byte_100097FEA[v4]))();
}

uint64_t sub_100037A80(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100037A88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100037A90LL);
  }
  return result;
}

uint64_t sub_100037A9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100037AA4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100037AA8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100037AB0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArgumentArrayParsingStrategy()
{
  return &type metadata for ArgumentArrayParsingStrategy;
}

uint64_t *sub_100037ACC(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100037B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }

  return result;
}

uint64_t sub_100037B40(uint64_t result, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_10002D820(result, a2, a3);
  }
  return result;
}

uint64_t sub_100037B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t CommandConfiguration._superCommandName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t CommandConfiguration._superCommandName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

Swift::String_optional (__swiftcall *CommandConfiguration._superCommandName.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t CommandConfiguration.abstract.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t CommandConfiguration.abstract.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = a2;
  return result;
}

Swift::String_optional (__swiftcall *ArgumentInfoV0.names.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t ArgumentHelp.visibility.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ArgumentHelp.visibility.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 48) = result;
  return result;
}

Swift::String_optional (__swiftcall *CommandConfiguration.usage.modify())(Swift::String argument)
{
  return String.init(argument:);
}

BOOL ArgumentHelp.shouldDisplay.getter()
{
  return *(_BYTE *)(v0 + 48) == 0;
}

uint64_t ArgumentHelp.shouldDisplay.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 48) = result ^ 1;
  return result;
}

_BYTE *(*ArgumentHelp.shouldDisplay.modify(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 48) == 0;
  return sub_100037CC0;
}

_BYTE *sub_100037CC0(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 48LL) = (result[8] & 1) == 0;
  return result;
}

void __swiftcall ArgumentHelp.init(_:discussion:valueName:shouldDisplay:)( ArgumentParser::ArgumentHelp *__return_ptr retstr, Swift::String _, Swift::String discussion, Swift::String_optional valueName, Swift::Bool shouldDisplay)
{
  retstr->Swift::String abstract = _;
  retstr->discussion = discussion;
  retstr->valueName = valueName;
  retstr->visibility.base = !shouldDisplay;
}

void __swiftcall ArgumentHelp.init(_:discussion:valueName:visibility:)( ArgumentParser::ArgumentHelp *__return_ptr retstr, Swift::String _, Swift::String discussion, Swift::String_optional valueName, ArgumentParser::ArgumentVisibility visibility)
{
  retstr->Swift::String abstract = _;
  retstr->discussion = discussion;
  retstr->valueName = valueName;
  retstr->visibility = visibility;
}

void static ArgumentHelp.hidden.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = 0LL;
  *(_BYTE *)(a1 + 48) = 1;
}

void static ArgumentHelp.private.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = 0LL;
  *(_BYTE *)(a1 + 48) = 2;
}

void __swiftcall ArgumentHelp.init(stringLiteral:)( ArgumentParser::ArgumentHelp *__return_ptr retstr, Swift::String stringLiteral)
{
  retstr->Swift::String abstract = stringLiteral;
  retstr->discussion._char countAndFlagsBits = 0LL;
  retstr->discussion._object = (void *)0xE000000000000000LL;
  retstr->valueName.value._char countAndFlagsBits = 0LL;
  retstr->valueName.value._object = 0LL;
  retstr->visibility.base = ArgumentParser_ArgumentVisibility_Representation_default;
}

unint64_t sub_100037D58()
{
  unint64_t result = qword_1000B9238;
  if (!qword_1000B9238)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ArgumentHelp, &type metadata for ArgumentHelp);
    atomic_store(result, (unint64_t *)&qword_1000B9238);
  }

  return result;
}

void *sub_100037D9C()
{
  return &protocol witness table for DefaultStringInterpolation;
}

uint64_t sub_100037DA8(void *a1, uint64_t a2, uint64_t a3)
{
  return ExpressibleByStringInterpolation<>.init(stringInterpolation:)(*a1, a1[1], a2, a3);
}

unint64_t sub_100037DC0()
{
  unint64_t result = qword_1000B9240;
  if (!qword_1000B9240)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ArgumentHelp, &type metadata for ArgumentHelp);
    atomic_store(result, (unint64_t *)&qword_1000B9240);
  }

  return result;
}

void *sub_100037E04()
{
  return &protocol witness table for String;
}

void *sub_100037E10@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[1];
  *(void *)a2 = *result;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0xE000000000000000LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = 0LL;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

unint64_t sub_100037E30()
{
  unint64_t result = qword_1000B9248;
  if (!qword_1000B9248)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ArgumentHelp, &type metadata for ArgumentHelp);
    atomic_store(result, (unint64_t *)&qword_1000B9248);
  }

  return result;
}

void *sub_100037E74()
{
  return &protocol witness table for String;
}

void *sub_100037E80()
{
  return &protocol witness table for String;
}

uint64_t destroy for ArgumentHelp(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for ArgumentHelp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for ArgumentHelp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for ArgumentHelp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ArgumentHelp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentHelp(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentHelp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Argument.swift",  29LL,  2LL,  67LL, 0) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 49) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ArgumentHelp()
{
  return &type metadata for ArgumentHelp;
}

void *ArgumentVisibility.default.unsafeMutableAddressor()
{
  return &static ArgumentVisibility.default;
}

void *ArgumentVisibility.hidden.unsafeMutableAddressor()
{
  return &static ArgumentVisibility.hidden;
}

void *ArgumentVisibility.private.unsafeMutableAddressor()
{
  return &static ArgumentVisibility.private;
}

unint64_t sub_1000380F8()
{
  unint64_t result = qword_1000B9250;
  if (!qword_1000B9250)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ArgumentVisibility,  &type metadata for ArgumentVisibility);
    atomic_store(result, (unint64_t *)&qword_1000B9250);
  }

  return result;
}

ValueMetadata *type metadata accessor for ArgumentVisibility()
{
  return &type metadata for ArgumentVisibility;
}

uint64_t _s14ArgumentParser18ArgumentVisibilityV14RepresentationOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10003819C + 4 * byte_100098275[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000381D0 + 4 * asc_100098270[v4]))();
}

uint64_t sub_1000381D0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000381D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000381E0LL);
  }
  return result;
}

uint64_t sub_1000381EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000381F4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000381F8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100038200(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArgumentVisibility.Representation()
{
  return &type metadata for ArgumentVisibility.Representation;
}

unint64_t sub_100038220()
{
  unint64_t result = qword_1000B9258;
  if (!qword_1000B9258)
  {
    unint64_t result = swift_getWitnessTable(&unk_100098364, &type metadata for ArgumentVisibility.Representation);
    atomic_store(result, (unint64_t *)&qword_1000B9258);
  }

  return result;
}

uint64_t static CompletionKind.default.getter()
{
  return 0LL;
}

uint64_t static CompletionKind.list(_:)(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t static CompletionKind.file(extensions:)(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t static CompletionKind.directory.getter()
{
  return 1LL;
}

uint64_t static CompletionKind.shellCommand(_:)(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t static CompletionKind.custom(_:)(uint64_t a1, uint64_t a2)
{
  return a1;
}

__n128 initializeWithTake for Name(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for CompletionKind()
{
  return &type metadata for CompletionKind;
}

uint64_t destroy for CompletionKind.Kind(uint64_t a1)
{
  return sub_10002D9A0(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s14ArgumentParser14CompletionKindV4KindOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10002D820(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s14ArgumentParser14CompletionKindV4KindOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10002D820(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10002D9A0(v6, v7, v8);
  return a1;
}

uint64_t _s14ArgumentParser14CompletionKindV4KindOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10002D9A0(v4, v5, v6);
  return a1;
}

uint64_t _s14ArgumentParser14CompletionKindV4KindOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s14ArgumentParser14CompletionKindV4KindOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000384D8(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_1000384F0(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)__n128 result = a2 - 4;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 4;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompletionKind.Kind()
{
  return &type metadata for CompletionKind.Kind;
}

uint64_t ExitCode.rawValue.setter(uint64_t result)
{
  *__int16 v1 = result;
  return result;
}

void *ExitCode.success.unsafeMutableAddressor()
{
  return &static ExitCode.success;
}

void *ExitCode.failure.unsafeMutableAddressor()
{
  return &static ExitCode.failure;
}

void *ExitCode.validationFailure.unsafeMutableAddressor()
{
  return &static ExitCode.validationFailure;
}

uint64_t static ExitCode.validationFailure.getter()
{
  return 64LL;
}

BOOL ExitCode.isSuccess.getter(int a1)
{
  return a1 == 0;
}

uint64_t sub_10003855C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100038A78();
  unint64_t v5 = sub_100038ABC();
  return Error<>._code.getter(a1, a2, v4, v5);
}

_DWORD *sub_1000385A0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

Swift::Int sub_1000385B0()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000385F4()
{
}

Swift::Int sub_10003861C(uint64_t a1)
{
  Swift::UInt32 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

  ;
}

uint64_t static CleanExit.message(_:)(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t static CleanExit.helpRequest(_:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  unsigned int v3 = sub_100006270(a1, v1);
  return sub_1000387A0((uint64_t)v3, v1, v2);
}

uint64_t CleanExit.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return 0x706C65682D2DLL;
  }
  if (a3 != 1) {
    return 0xD000000000000018LL;
  }
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t sub_100038734()
{
  if (!*((_BYTE *)v0 + 16)) {
    return 0x706C65682D2DLL;
  }
  if (*((_BYTE *)v0 + 16) != 1) {
    return 0xD000000000000018LL;
  }
  uint64_t v2 = v0;
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v2[1]);
  return v1;
}

uint64_t sub_1000387A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  unint64_t v5 = sub_10000B40C(v10);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v5, a1, a2);
  uint64_t v6 = v11;
  uint64_t v7 = sub_100006270(v10, v11);
  uint64_t DynamicType = swift_getDynamicType(v7, v6, 1LL);
  sub_1000062D8(v10);
  return DynamicType;
}

unint64_t sub_100038824()
{
  unint64_t result = qword_1000B9260;
  if (!qword_1000B9260)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ExitCode, &type metadata for ExitCode);
    atomic_store(result, (unint64_t *)&qword_1000B9260);
  }

  return result;
}

ValueMetadata *type metadata accessor for ValidationError()
{
  return &type metadata for ValidationError;
}

ValueMetadata *type metadata accessor for ExitCode()
{
  return &type metadata for ExitCode;
}

uint64_t sub_10003888C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000388A4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for CleanExit()
{
  return &type metadata for CleanExit;
}

uint64_t destroy for CleanExit.Representation(uint64_t a1)
{
  return sub_1000388A4(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s14ArgumentParser9CleanExitV14RepresentationOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10003888C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s14ArgumentParser9CleanExitV14RepresentationOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10003888C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000388A4(v6, v7, v8);
  return a1;
}

uint64_t _s14ArgumentParser9CleanExitV14RepresentationOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000388A4(v4, v5, v6);
  return a1;
}

uint64_t _s14ArgumentParser9CleanExitV14RepresentationOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s14ArgumentParser9CleanExitV14RepresentationOwst_0( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100038A58(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100038A60(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CleanExit.Representation()
{
  return &type metadata for CleanExit.Representation;
}

unint64_t sub_100038A78()
{
  unint64_t result = qword_1000B9268;
  if (!qword_1000B9268)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ExitCode, &type metadata for ExitCode);
    atomic_store(result, (unint64_t *)&qword_1000B9268);
  }

  return result;
}

unint64_t sub_100038ABC()
{
  unint64_t result = qword_1000B9270;
  if (!qword_1000B9270)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1000B9270);
  }

  return result;
}

uint64_t sub_100038B04@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v27 = a2;
  __int128 v28 = a1;
  uint64_t v29 = a6;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v10);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56LL))( v29,  1LL,  1LL,  a4);
  }
  uint64_t v25 = a3;
  uint64_t v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  }
  return result;
}

uint64_t Flag.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = type metadata accessor for Flag(0LL, a2, a3, a4);
  sub_100033F10((uint64_t)a1, (uint64_t)v10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100098634, v7);
  sub_10006EB30(v10, v7, WitnessTable, a5);
  return sub_1000062D8(a1);
}

uint64_t type metadata accessor for Flag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037B54(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Flag);
}

void Flag.init()()
{
}

uint64_t Flag.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = type metadata accessor for Parsed(0LL, v7, a2, a3);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, v5, v8);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x1000000000000246LL,  0x800000010009D5D0LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  103LL,  0);
  __break(1u);
  return result;
}

void (*Flag.wrappedValue.modify( void *a1, uint64_t a2))(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  _OWORD v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  Flag.wrappedValue.getter(a2, v10, v11, (uint64_t)v9);
  return sub_1000341A8;
}

uint64_t sub_100038F14@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Flag.init(from:)(a1, *(void *)(a2 + 16), a3, a4, a5);
}

unint64_t Flag.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v12 = type metadata accessor for Parsed(0LL, v3, v10, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v18 - v14, v2, v12);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return 0xD000000000000012LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v15, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v16 = String.init<A>(describing:)(v7, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  return v16;
}

void FlagInversion.hash(into:)(uint64_t a1, char a2)
{
}

BOOL static FlagInversion.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

Swift::Int FlagInversion.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t (*Flag<A>.init(name:inversion:exclusivity:help:)( uint64_t a1, char a2, char a3, uint64_t a4))(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v7 = a2 & 1;
  uint64_t v8 = swift_allocObject(&unk_1000B09E0, 81LL, 7LL);
  *(void *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 24) = v7;
  *(_BYTE *)(v8 + 25) = a3;
  sub_1000367F0(a4, v8 + 32);
  return sub_100039598;
}

uint64_t sub_100039184( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t *a7)
{
  if ((a5 & 1) != 0)
  {
    uint64_t v44 = sub_10003E944(0x656C62616E65LL, 0xE600000000000000LL, 1, a4, a1, a2, a3);
    uint64_t v14 = 0x656C6261736964LL;
    uint64_t v15 = 0xE700000000000000LL;
  }

  else
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    uint64_t v13 = swift_bridgeObjectRetain(a4);
    uint64_t v44 = sub_10007F258(v13, a1, a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
    uint64_t v14 = 28526LL;
    uint64_t v15 = 0xE200000000000000LL;
  }

  uint64_t v43 = sub_10003E944(v14, v15, 0, a4, a1, a2, a3);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_100037ACC(a7);
  sub_10005EC6C((uint64_t)_swiftEmptyArrayStorage, 1LL, (uint64_t)a7, 0LL, 0LL, a1, a2, a3, (uint64_t)&v45, 1);
  __int128 v34 = v45;
  uint64_t v33 = v46;
  char v42 = v48;
  __int128 v40 = v50;
  __int128 v41 = v49;
  uint64_t v38 = v52;
  uint64_t v39 = v51;
  char v37 = v53;
  uint64_t v35 = v55;
  uint64_t v36 = v54;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_100037ACC(a7);
  sub_10005EC6C((uint64_t)_swiftEmptyArrayStorage, 1LL, (uint64_t)a7, 0LL, 0LL, a1, a2, a3, (uint64_t)&v56, 0);
  uint64_t v16 = v57;
  char v17 = v59;
  __int128 v25 = v56;
  __int128 v26 = v60;
  __int128 v32 = v61;
  uint64_t v30 = v63;
  uint64_t v31 = v62;
  char v29 = v64;
  uint64_t v27 = v66;
  uint64_t v28 = v65;
  uint64_t v18 = swift_allocObject(&unk_1000B0E00, 17LL, 7LL);
  *(_BYTE *)(v18 + 16) = 0;
  uint64_t v19 = swift_allocObject(&unk_1000B0F40, 49LL, 7LL);
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = a1;
  *(void *)(v19 + 32) = a2;
  *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = a3;
  *(_BYTE *)(v19 + 48) = a6;
  uint64_t v20 = swift_allocObject(&unk_1000B0F68, 48LL, 7LL);
  *(_BYTE *)(v20 + 16) = 2;
  *(void *)(v20 + 24) = a1;
  *(void *)(v20 + 32) = a2;
  *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = a3;
  uint64_t v21 = swift_allocObject(&unk_1000B0F90, 49LL, 7LL);
  *(void *)(v21 + 16) = v18;
  *(void *)(v21 + 24) = a1;
  *(void *)(v21 + 32) = a2;
  *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = a3;
  *(_BYTE *)(v21 + 48) = a6;
  uint64_t v22 = sub_100005104(&qword_1000B9230);
  uint64_t v23 = swift_allocObject(v22, 416LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_1000970B0;
  *(void *)(v23 + 32) = v44;
  *(_OWORD *)(v23 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v34;
  *(void *)(v23 + 56) = v33;
  *(_OWORD *)(v23 + 64) = v47;
  *(_BYTE *)(v23 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v42;
  *(_OWORD *)(v23 + 88) = v41;
  *(_OWORD *)(v23 + 104) = v40;
  *(void *)(v23 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v39;
  *(void *)(v23 + 128) = v38;
  *(_BYTE *)(v23 + 136) = v37;
  *(void *)(v23 + 144) = v36;
  *(void *)(v23 + 152) = v35;
  *(void *)(v23 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = 0LL;
  *(void *)(v23 + 168) = 0LL;
  *(_WORD *)(v23 + 176) = 4;
  *(void *)(v23 + 184) = sub_10003DE40;
  *(void *)(v23 + 192) = v19;
  *(_BYTE *)(v23 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = 0;
  *(void *)(v23 + 208) = sub_10003DE1C;
  *(void *)(v23 + 216) = v20;
  *(void *)(v23 + 224) = v43;
  *(_OWORD *)(v23 + 232) = v25;
  *(void *)(v23 + 248) = v16;
  *(_OWORD *)(v23 + 256) = v58;
  *(_BYTE *)(v23 + 272) = v17;
  *(_OWORD *)(v23 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v26;
  *(_OWORD *)(v23 + 296) = v32;
  *(void *)(v23 + 312) = v31;
  *(void *)(v23 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v30;
  *(_BYTE *)(v23 + 328) = v29;
  *(void *)(v23 + 336) = v28;
  *(void *)(v23 + 344) = v27;
  *(void *)(v23 + 352) = 0LL;
  *(void *)(v23 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = 0LL;
  *(_WORD *)(v23 + 368) = 4;
  *(void *)(v23 + 376) = sub_10003DEC4;
  *(void *)(v23 + 384) = v21;
  *(_BYTE *)(v23 + 392) = 0;
  *(void *)(v23 + 40_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = String.init(argument:);
  *(void *)(v23 + 408) = 0LL;
  swift_bridgeObjectRetain_n(a2, 3LL);
  swift_bridgeObjectRetain_n(a3, 3LL);
  swift_retain(v18);
  return sub_100079288(v23);
}

uint64_t sub_100039598(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100039184(a1, a2, a3, *(void *)(v3 + 16), *(_BYTE *)(v3 + 24), *(_BYTE *)(v3 + 25), (uint64_t *)(v3 + 32));
}

uint64_t (*Flag<A>.init(wrappedValue:name:inversion:exclusivity:help:)( uint64_t a1, char a2, char a3, uint64_t a4))(uint64_t, unint64_t, uint64_t)
{
  char v7 = a2 & 1;
  uint64_t v8 = swift_allocObject(&unk_1000B0A08, 81LL, 7LL);
  *(void *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 24) = v7;
  *(_BYTE *)(v8 + 25) = a3;
  sub_1000367F0(a4, v8 + 32);
  return sub_10003DF14;
}

uint64_t sub_100039628(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  BOOL v12 = a5 != 2;
  if ((a5 & 1) != 0) {
    uint64_t v13 = 1702195828LL;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if ((a5 & 1) != 0) {
    uint64_t v14 = 0xE400000000000000LL;
  }
  else {
    uint64_t v14 = 0LL;
  }
  sub_100037ACC(a6);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10005EC6C((uint64_t)_swiftEmptyArrayStorage, v12, (uint64_t)a6, v13, v14, a1, a2, a3, (uint64_t)&v32, 0);
  __int128 v25 = v32;
  uint64_t v15 = v33;
  char v31 = v35;
  __int128 v29 = v37;
  __int128 v30 = v36;
  uint64_t v16 = v38;
  uint64_t v17 = v39;
  char v28 = v40;
  uint64_t v26 = v42;
  uint64_t v27 = v41;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  uint64_t v18 = swift_bridgeObjectRetain(a4);
  uint64_t v19 = sub_10007F258(v18, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  uint64_t v20 = (void *)swift_allocObject(&unk_1000B0EF0, 40LL, 7LL);
  void v20[2] = a1;
  v20[3] = a2;
  v20[4] = a3;
  uint64_t v21 = swift_allocObject(&unk_1000B0F18, 48LL, 7LL);
  *(_BYTE *)(v21 + 16) = a5;
  *(void *)(v21 + 24) = a1;
  *(void *)(v21 + 32) = a2;
  *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = a3;
  uint64_t v22 = sub_100005104(&qword_1000B9230);
  uint64_t v23 = swift_allocObject(v22, 224LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_100096510;
  *(void *)(v23 + 32) = v19;
  *(_OWORD *)(v23 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v25;
  *(void *)(v23 + 56) = v15;
  *(_OWORD *)(v23 + 64) = v34;
  *(_BYTE *)(v23 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v31;
  *(_OWORD *)(v23 + 88) = v30;
  *(_OWORD *)(v23 + 104) = v29;
  *(void *)(v23 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v16;
  *(void *)(v23 + 128) = v17;
  *(_BYTE *)(v23 + 136) = v28;
  *(void *)(v23 + 144) = v27;
  *(void *)(v23 + 152) = v26;
  *(void *)(v23 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = 0LL;
  *(void *)(v23 + 168) = 0LL;
  *(_WORD *)(v23 + 176) = 4;
  *(void *)(v23 + 184) = sub_10003DDFC;
  *(void *)(v23 + 192) = v20;
  *(_BYTE *)(v23 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = 0;
  *(void *)(v23 + 208) = sub_10003DE1C;
  *(void *)(v23 + 216) = v21;
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  return sub_100079288(v23);
}

uint64_t (*Flag<A>.init(wrappedValue:name:help:)( char a1, uint64_t a2, uint64_t a3))(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject(&unk_1000B0A30, 81LL, 7LL);
  *(void *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 24) = a1;
  sub_1000367F0(a3, v6 + 32);
  return sub_1000398D4;
}

uint64_t sub_1000398D4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100039628(a1, a2, a3, *(void *)(v3 + 16), *(_BYTE *)(v3 + 24), (uint64_t *)(v3 + 32));
}

uint64_t (*Flag<A>.init(wrappedValue:name:inversion:exclusivity:help:)( char a1, uint64_t a2, char a3, char a4, uint64_t a5))()
{
  char v9 = a3 & 1;
  uint64_t v10 = swift_allocObject(&unk_1000B0A58, 81LL, 7LL);
  *(void *)(v10 + 16) = a2;
  *(_BYTE *)(v10 + 24) = a1;
  *(_BYTE *)(v10 + 25) = v9;
  *(_BYTE *)(v10 + 26) = a4;
  sub_1000367F0(a5, v10 + 32);
  return sub_100039968;
}

uint64_t (*Flag<A>.init(name:inversion:exclusivity:help:)( uint64_t a1, char a2, char a3, uint64_t a4))()
{
  char v7 = a2 & 1;
  uint64_t v8 = swift_allocObject(&unk_1000B0A80, 81LL, 7LL);
  *(void *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 24) = 2;
  *(_BYTE *)(v8 + 25) = v7;
  *(_BYTE *)(v8 + 26) = a3;
  sub_1000367F0(a4, v8 + 32);
  return sub_100039968;
}

uint64_t sub_1000399F0()
{
  uint64_t v1 = v0[5];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[7]);
    swift_bridgeObjectRelease(v0[9]);
  }

  return swift_deallocObject(v0, 81LL, 7LL);
}

uint64_t sub_100039A30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1000667C8( a1,  a2,  a3,  *(void *)(v3 + 16),  *(_BYTE *)(v3 + 24),  *(_BYTE *)(v3 + 24) == 2,  *(_BYTE *)(v3 + 25),  *(_BYTE *)(v3 + 26),  (uint64_t *)(v3 + 32));
}

uint64_t (*Flag<A>.init(name:help:)( uint64_t a1, uint64_t a2))(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = swift_allocObject(&unk_1000B0AA8, 73LL, 7LL);
  *(void *)(v4 + 16) = a1;
  sub_1000367F0(a2, v4 + 24);
  return sub_100039D18;
}

uint64_t sub_100039ACC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __int128 v21 = v27;
  uint64_t v10 = v28;
  char v26 = v30;
  __int128 v24 = v32;
  __int128 v25 = v31;
  uint64_t v11 = v33;
  uint64_t v12 = v34;
  char v13 = v35;
  uint64_t v22 = v37;
  uint64_t v23 = v36;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  uint64_t v14 = swift_bridgeObjectRetain(a4);
  uint64_t v15 = sub_10007F258(v14, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  uint64_t v16 = (void *)swift_allocObject(&unk_1000B0EA0, 40LL, 7LL);
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  uint64_t v17 = (void *)swift_allocObject(&unk_1000B0EC8, 40LL, 7LL);
  void v17[2] = a1;
  v17[3] = a2;
  v17[4] = a3;
  char v38 = 0;
  uint64_t v18 = sub_100005104(&qword_1000B9230);
  uint64_t v19 = swift_allocObject(v18, 224LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_100096510;
  *(void *)(v19 + 32) = v15;
  *(_OWORD *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v21;
  *(void *)(v19 + 56) = v10;
  *(_OWORD *)(v19 + 64) = v29;
  *(_BYTE *)(v19 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v26;
  *(_OWORD *)(v19 + 88) = v25;
  *(_OWORD *)(v19 + 104) = v24;
  *(void *)(v19 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v11;
  *(void *)(v19 + 128) = v12;
  *(_BYTE *)(v19 + 136) = v13;
  *(void *)(v19 + 144) = v23;
  *(void *)(v19 + 152) = v22;
  *(void *)(v19 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = 0LL;
  *(void *)(v19 + 168) = 0LL;
  *(_WORD *)(v19 + 176) = 4;
  *(void *)(v19 + 184) = sub_10003DD90;
  *(void *)(v19 + 192) = v16;
  *(_BYTE *)(v19 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v38;
  *(void *)(v19 + 208) = sub_10003DDB0;
  *(void *)(v19 + 216) = v17;
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  return sub_100079288(v19);
}

uint64_t sub_100039CD8()
{
  uint64_t v1 = v0[4];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[6]);
    swift_bridgeObjectRelease(v0[8]);
  }

  return swift_deallocObject(v0, 73LL, 7LL);
}

uint64_t sub_100039D18(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100039ACC(a1, a2, a3, *(void *)(v3 + 16), (uint64_t *)(v3 + 24));
}

uint64_t sub_100039D24@<X0>( uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v21 = a3;
  int v22 = a2;
  uint64_t v23 = a6;
  uint64_t v8 = type metadata accessor for Parsed(0LL, a4, a3, a4);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v20 - v10);
  uint64_t v12 = type metadata accessor for Optional(0LL, a4);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  unint64_t v16 = (*(void *)(v13 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v17 = swift_allocObject(&unk_1000B0E50, v16 + 50, v14 | 7);
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v17 + v15, v20, v12);
  sub_1000367F0(v21, v17 + v16);
  *(_BYTE *)(v17 + v16 + 49) = v22;
  sub_10006F11C((uint64_t)sub_10003DAC0, v17, a4, v18, v11);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v9 + 32))(v23, v11, v8);
}

uint64_t sub_100039E54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  int v60 = a6;
  uint64_t v62 = a4;
  uint64_t v58 = a5;
  sub_1000367F0(a5, (uint64_t)v73);
  uint64_t v13 = *(void *)(a8 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, v13);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v13,  a7,  AssociatedTypeWitness,  &protocol requirements base descriptor for CaseIterable,  &associated conformance descriptor for CaseIterable.CaseIterable.AllCases: Collection);
  uint64_t v51 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v59 = type metadata accessor for EnumeratedSequence(0LL, AssociatedTypeWitness);
  uint64_t v56 = *(void *)(v59 - 8);
  uint64_t v15 = __chkstk_darwin(v59);
  char v53 = (char *)&v47 - v16;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v47 - v18;
  uint64_t v52 = swift_allocObject(&unk_1000B0E00, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 0;
  uint64_t v67 = a7;
  uint64_t v68 = a8;
  uint64_t v54 = a1;
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  uint64_t v55 = a2;
  uint64_t v57 = a3;
  uint64_t v71 = a3;
  type metadata accessor for Optional(0LL, a7);
  sub_100038B04( (void (*)(char *, char *))sub_10003DB44,  (uint64_t)v66,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for String,  v20,  (uint64_t)v72);
  uint64_t v49 = v72[0];
  uint64_t v50 = v72[1];
  dispatch thunk of static CaseIterable.allCases.getter(a7, v13);
  uint64_t v64 = a7;
  uint64_t v65 = a8;
  uint64_t v61 = a8;
  uint64_t v21 = (char *)sub_100005104(&qword_1000B9158);
  uint64_t v23 = sub_100045CE8( (void (*)(char *, char *))sub_10003D358,  (uint64_t)v63,  AssociatedTypeWitness,  v21,  (uint64_t)&type metadata for Never,  AssociatedConformanceWitness,  (uint64_t)&protocol witness table for Never,  v22);
  __int128 v24 = *(void (**)(char *, uint64_t))(v17 + 8);
  v24(v19, AssociatedTypeWitness);
  uint64_t v25 = *(void *)(v23 + 16);
  if (v25)
  {
    char v26 = (uint64_t *)(v23 + 40);
    uint64_t v27 = v25 - 1;
    do
    {
      uint64_t v28 = *v26;
      v26 += 7;
      BOOL v29 = v28 != 0;
      if (v28) {
        BOOL v30 = 1;
      }
      else {
        BOOL v30 = v27 == 0;
      }
      --v27;
    }

    while (!v30);
  }

  else
  {
    BOOL v29 = 0;
  }

  dispatch thunk of static CaseIterable.allCases.getter(a7, v13);
  __int128 v31 = v53;
  Sequence.enumerated()(AssociatedTypeWitness, v51);
  uint64_t v32 = ((uint64_t (*)(char *, uint64_t))v24)(v19, AssociatedTypeWitness);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v34 = v61;
  *(&v47 - 14) = a7;
  *(&v47 - 13) = v34;
  uint64_t v35 = v55;
  *(&v47 - 12) = v54;
  *(&v47 - 11) = v35;
  *(&v47 - 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v57;
  *(&v47 - 9) = v23;
  *(&v47 - 8) = v58;
  *((_BYTE *)&v47 - 56) = v29;
  uint64_t v36 = v49;
  *(&v47 - 6) = v62;
  *(&v47 - 5) = v36;
  uint64_t v37 = v50;
  uint64_t v38 = v52;
  *(&v47 - 4) = v50;
  *(&v47 - 3) = v38;
  *((_BYTE *)&v47 - 16) = v60;
  __chkstk_darwin(v33);
  *(&v47 - 4) = a7;
  *(&v47 - 3) = v39;
  *(&v47 - 2) = (uint64_t)sub_10003DBBC;
  *(&v47 - 1) = v40;
  uint64_t v41 = v59;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v59);
  uint64_t v44 = sub_10003AE90( (void (*)(char *, char *))sub_10003D3A8,  (uint64_t)(&v47 - 6),  v41,  (uint64_t)&type metadata for ArgumentDefinition,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v43);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v41);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v37);
  uint64_t v45 = sub_100079288(v44);
  swift_release(v38);
  return v45;
}

uint64_t sub_10003A280@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, a1, v17);
  uint64_t v18 = String.init<A>(describing:)(v15, a5);
  unint64_t v20 = v19;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  uint64_t v21 = sub_10006C86C(v18, v20, a2, a3, a4);
  unint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 24))(a1, a5, a6);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v25);
  uint64_t v27 = sub_10007F258(v26, v21, v23);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease_n(v25, 2LL);
  swift_bridgeObjectRelease_n(v23, 2LL);
  if (*((void *)v27 + 2))
  {
    uint64_t v28 = *((void *)v27 + 4);
    BOOL v29 = (void *)*((void *)v27 + 5);
    unsigned __int8 v30 = v27[48];
    sub_100030508(v28, (uint64_t)v29, v30);
    swift_bridgeObjectRelease(v27);
    v36._char countAndFlagsBits = v28;
    v36._object = v29;
    uint64_t v31 = sub_10006D63C(v36, v30);
    uint64_t v33 = v32;
    uint64_t result = sub_10002DA24(v28, (uint64_t)v29, v30);
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease(v27);
    uint64_t v31 = 0LL;
    uint64_t v33 = 0LL;
  }

  *a7 = v31;
  a7[1] = v33;
  return result;
}

uint64_t sub_10003A434@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, int a8@<W7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16)
{
  int v147 = a8;
  uint64_t v142 = a6;
  __int128 v135 = a9;
  uint64_t v130 = a7;
  sub_1000367F0((uint64_t)a7, (uint64_t)v151);
  uint64_t v127 = v151[1];
  uint64_t v128 = v151[0];
  uint64_t v121 = v151[3];
  uint64_t v122 = v151[2];
  uint64_t v119 = v151[5];
  uint64_t v120 = v151[4];
  LODWORD(v118) = v152;
  uint64_t v21 = type metadata accessor for Optional(255LL, a15);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v21, v21, 0LL, 0LL);
  uint64_t v117 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v22 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v124 = v21;
  char v125 = (char *)&v113 - v23;
  uint64_t v133 = *(void *)(v21 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  char v116 = (char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  __int128 v139 = (char *)&v113 - v27;
  __chkstk_darwin(v26);
  uint64_t v134 = v28;
  BOOL v29 = (char *)&v113 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  uint64_t v143 = v30;
  uint64_t v144 = v31;
  v31(v29, a2, a15);
  uint64_t v137 = v29;
  uint64_t v32 = String.init<A>(describing:)(v29, a15);
  unint64_t v34 = v33;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a5);
  uint64_t v148 = a3;
  uint64_t v136 = a5;
  uint64_t v35 = (uint64_t *)sub_10006C86C(v32, v34, a3, a4, a5);
  unint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a16 + 24);
  uint64_t v145 = a2;
  uint64_t v141 = a15;
  uint64_t v138 = a16;
  uint64_t result = v40(a2, a15, a16);
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v142 + 16) > a1)
  {
    uint64_t v131 = v39;
    unint64_t v132 = v37;
    uint64_t v129 = result;
    uint64_t v146 = a4;
    uint64_t v42 = a12;
    uint64_t v140 = a11;
    uint64_t v43 = v142 + 56 * a1;
    uint64_t v45 = *(void *)(v43 + 32);
    uint64_t v44 = *(void *)(v43 + 40);
    uint64_t v47 = *(void *)(v43 + 48);
    uint64_t v46 = *(void *)(v43 + 56);
    uint64_t v49 = *(void *)(v43 + 64);
    uint64_t v48 = *(void *)(v43 + 72);
    uint64_t v50 = v45;
    uint64_t v51 = v44;
    uint64_t v52 = v47;
    int v53 = *(unsigned __int8 *)(v43 + 80);
    uint64_t v54 = v46;
    uint64_t v55 = v49;
    uint64_t v56 = v48;
    char v57 = v53;
    if (!v44)
    {
      int v58 = v53;
      uint64_t v59 = v46;
      uint64_t v123 = a12;
      sub_100037ACC(v130);
      uint64_t v52 = v122;
      uint64_t v42 = v123;
      uint64_t v46 = v59;
      int v53 = v58;
      uint64_t v51 = v127;
      uint64_t v50 = v128;
      uint64_t v55 = v120;
      uint64_t v54 = v121;
      uint64_t v56 = v119;
      char v57 = v118;
    }

    uint64_t v130 = v35;
    LODWORD(v127) = a14;
    uint64_t v128 = a13;
    uint64_t v60 = a10;
    v153[0] = v50;
    v153[1] = v51;
    v153[2] = v52;
    v153[3] = v54;
    v153[4] = v55;
    v153[5] = v56;
    char v154 = v57;
    uint64_t v61 = v141;
    uint64_t v62 = v139;
    uint64_t v142 = a10;
    if ((v147 & 1) != 0)
    {
      uint64_t v115 = v45;
      uint64_t v118 = v47;
      uint64_t v119 = v46;
      LODWORD(v12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v53;
      uint64_t v121 = v49;
      uint64_t v122 = v48;
      uint64_t v123 = v42;
      v144(v139, v145, v141);
      uint64_t v63 = v62;
      uint64_t v64 = v143;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v62, 0LL, 1LL, v61);
      uint64_t v65 = v125;
      uint64_t v66 = &v125[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v133 + 16);
      uint64_t v68 = v124;
      v67(v125, v63, v124);
      uint64_t v114 = v66;
      v67(v66, (char *)a10, v68);
      uint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
      if (v69(v65, 1LL, v61) == 1)
      {
        sub_100037B04(v115, v44, v118, v119, v121, v122);
        uint64_t v70 = *(void (**)(char *, uint64_t))(v133 + 8);
        v70(v63, v68);
        int v71 = v69(v114, 1LL, v61);
        uint64_t v72 = v143;
        if (v71 == 1)
        {
          v70(v65, v68);
          uint64_t v73 = v146;
          uint64_t v60 = v142;
LABEL_14:
          uint64_t v42 = v123;
          swift_bridgeObjectRetain(v123);
          goto LABEL_16;
        }
      }

      else
      {
        unint64_t v74 = v116;
        v67(v116, v65, v68);
        uint64_t v75 = v114;
        if (v69(v114, 1LL, v61) != 1)
        {
          uint64_t v76 = v68;
          uint64_t v77 = v143;
          uint64_t v78 = v137;
          (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v137, v75, v61);
          sub_100037B04(v115, v44, v118, v119, v121, v122);
          char v79 = dispatch thunk of static Equatable.== infix(_:_:)(v74, v78, v141, *(void *)(v138 + 16));
          uint64_t v61 = v141;
          uint64_t v80 = v69;
          Swift::String v81 = v74;
          char v82 = v79;
          __n128 v83 = *(void (**)(char *, uint64_t))(v77 + 8);
          v83(v78, v141);
          char v84 = *(void (**)(char *, uint64_t))(v133 + 8);
          v84(v139, v76);
          Swift::String v85 = v81;
          uint64_t v69 = v80;
          v83(v85, v61);
          v84(v125, v76);
          uint64_t v72 = v77;
          uint64_t v73 = v146;
          uint64_t v60 = v142;
          if ((v82 & 1) == 0)
          {
            uint64_t v140 = 0LL;
            uint64_t v42 = 0LL;
            goto LABEL_16;
          }

          goto LABEL_14;
        }

        sub_100037B04(v115, v44, v118, v119, v121, v122);
        (*(void (**)(char *, uint64_t))(v133 + 8))(v139, v68);
        uint64_t v72 = v143;
        (*(void (**)(char *, uint64_t))(v143 + 8))(v74, v61);
      }

      (*(void (**)(char *, uint64_t))(v117 + 8))(v65, TupleTypeMetadata2);
      uint64_t v140 = 0LL;
      uint64_t v42 = 0LL;
      uint64_t v73 = v146;
      uint64_t v60 = v142;
    }

    else
    {
      sub_100037B04(v45, v44, v47, v46, v49, v48);
      uint64_t v72 = v143;
      uint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v143 + 48);
      swift_bridgeObjectRetain(v42);
      uint64_t v73 = v146;
    }

LABEL_16:
    BOOL v86 = v69((char *)v60, 1LL, v61) != 1;
    swift_bridgeObjectRetain(v73);
    uint64_t v87 = v73;
    uint64_t v88 = v136;
    swift_bridgeObjectRetain(v136);
    uint64_t v89 = v148;
    sub_10005EC6C( (uint64_t)_swiftEmptyArrayStorage,  v86,  (uint64_t)v153,  v140,  v42,  v148,  v87,  v88,  (uint64_t)v149,  (v147 & 1) == 0);
    uint64_t v90 = v137;
    v144(v137, v145, v61);
    uint64_t v91 = *(unsigned __int8 *)(v72 + 80);
    uint64_t v92 = (v91 + 64) & ~v91;
    uint64_t v93 = v72;
    uint64_t v94 = v92 + v134;
    uint64_t v95 = (char *)swift_allocObject(&unk_1000B0E78, v92 + v134 + 1, v91 | 7);
    uint64_t v96 = v138;
    *((void *)v95 + 2) = v61;
    *((void *)v95 + 3) = v96;
    uint64_t v97 = v128;
    *((void *)v95 + 4) = v128;
    *((void *)v95 + 5) = v89;
    uint64_t v98 = v146;
    *((void *)v95 + 6) = v146;
    *((void *)v95 + 7) = v88;
    (*(void (**)(char *, char *, uint64_t))(v93 + 32))(&v95[v92], v90, v61);
    v95[v94] = v127;
    swift_bridgeObjectRetain(v98);
    swift_bridgeObjectRetain(v88);
    swift_retain(v97);
    uint64_t v112 = v61;
    uint64_t v99 = v129;
    uint64_t v101 = v131;
    unint64_t v100 = v132;
    sub_10003AB68( v129,  v148,  v98,  v88,  (uint64_t)v130,  v132,  v131,  v149,  (uint64_t)v150,  0,  v142,  (uint64_t)sub_10003D9F8,  (uint64_t)v95,  0,  v112);
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v101);
    swift_bridgeObjectRelease(v100);
    sub_10003D698(v149);
    uint64_t result = swift_release(v95);
    __int128 v102 = v150[9];
    __int128 v103 = v150[10];
    __int128 v104 = v150[7];
    uint64_t v105 = v135;
    v135[8] = v150[8];
    v105[9] = v102;
    __int128 v106 = v150[11];
    v105[10] = v103;
    v105[11] = v106;
    __int128 v107 = v150[5];
    __int128 v108 = v150[6];
    __int128 v109 = v150[3];
    v105[4] = v150[4];
    v105[5] = v107;
    v105[6] = v108;
    v105[7] = v104;
    __int128 v110 = v150[1];
    __int128 v111 = v150[2];
    *uint64_t v105 = v150[0];
    v105[1] = v110;
    v105[2] = v111;
    v105[3] = v109;
    return result;
  }

  __break(1u);
  return result;
}

  uint64_t result = swift_bridgeObjectRelease(v4);
  __break(1u);
  return result;
}

    uint64_t v17 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
LABEL_17:
    *(void *)a4 = v17;
    *(int64x2_t *)(a4 + 8) = v9;
    *(void *)(a4 + 24) = v15;
    *(void *)(a4 + 32) = v16;
    return result;
  }

      if (v11 == 1)
      {
        v46._object = 0LL;
        uint64_t v47 = 0xE000000000000000LL;
        v22._char countAndFlagsBits = 45LL;
        v22._object = (void *)0xE100000000000000LL;
        String.append(_:)(v22);
        Character.write<A>(to:)( &v46._object,  v46._countAndFlagsBits,  v48,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        goto LABEL_20;
      }

      v46._object = (void *)45;
      unint64_t v19 = 0xE100000000000000LL;
LABEL_19:
      uint64_t v47 = v19;
      v23._char countAndFlagsBits = v46._countAndFlagsBits;
      v23._object = v48;
      String.append(_:)(v23);
LABEL_20:
      uint64_t v24 = v47;
      sub_1000872F4((uint64_t)v46._object, v47, (uint64_t)object, v18);
      uint64_t v26 = v25;
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v24);
      if (v42)
      {
        if (v42 == 1)
        {
          v46._object = 0LL;
          uint64_t v47 = 0xE000000000000000LL;
          v27._char countAndFlagsBits = 45LL;
          v27._object = (void *)0xE100000000000000LL;
          String.append(_:)(v27);
          Character.write<A>(to:)( &v46._object,  v44._countAndFlagsBits,  v44._object,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
          uint64_t v28 = v46._object;
          BOOL v29 = v47;
          if (!v11) {
            goto LABEL_23;
          }
          goto LABEL_27;
        }

        v46._object = (void *)45;
        uint64_t v31 = 0xE100000000000000LL;
      }

      else
      {
        v46._object = (void *)11565;
        uint64_t v31 = 0xE200000000000000LL;
      }

      uint64_t v47 = v31;
      String.append(_:)(v44);
      uint64_t v28 = v46._object;
      BOOL v29 = v47;
      if (!v11)
      {
LABEL_23:
        v46._object = (void *)11565;
        uint64_t v30 = 0xE200000000000000LL;
        goto LABEL_30;
      }

double sub_10003AB68@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15)
{
  uint64_t v52 = a4;
  uint64_t v50 = a3;
  uint64_t v49 = a2;
  int v64 = a10;
  uint64_t v53 = a13;
  int v48 = a14;
  uint64_t v51 = a12;
  uint64_t v44 = a11;
  uint64_t v46 = a15;
  __int128 v56 = *a8;
  uint64_t v55 = *((void *)a8 + 2);
  char v21 = *((_BYTE *)a8 + 40);
  __int128 v22 = a8[3];
  __int128 v60 = a8[4];
  __int128 v61 = v22;
  uint64_t v23 = *((void *)a8 + 10);
  uint64_t v58 = *((void *)a8 + 11);
  uint64_t v59 = v23;
  int v57 = *((unsigned __int8 *)a8 + 96);
  int v54 = v21 & 1;
  uint64_t v24 = *((void *)a8 + 14);
  uint64_t v62 = *((void *)a8 + 13);
  uint64_t v63 = v24;
  uint64_t v25 = type metadata accessor for Optional(0LL, a15);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(void *)(v26 + 64);
  __chkstk_darwin(v25);
  BOOL v29 = (char *)&v43 - v28;
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a7);
  uint64_t v30 = swift_bridgeObjectRetain(a1);
  __int128 v47 = *(__int128 *)((char *)a8 + 24);
  uint64_t v45 = sub_10007F258(v30, a5, a6);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(a7);
  swift_bridgeObjectRelease(a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v44, v25);
  uint64_t v31 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v32 = (v31 + 24) & ~v31;
  unint64_t v33 = (v27 + v32 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v34 = swift_allocObject(&unk_1000B0DD8, v33 + 24, v31 | 7);
  *(void *)(v34 + 16) = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v34 + v32, v29, v25);
  uint64_t v35 = (void *)(v34 + v33);
  uint64_t v36 = v50;
  *uint64_t v35 = v49;
  v35[1] = v36;
  uint64_t v37 = v52;
  void v35[2] = v52;
  char v66 = v48 & 1;
  sub_10003D854(a8);
  uint64_t v38 = v51;
  uint64_t v39 = v53;
  sub_10002D860(v51, v53);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  *(void *)a9 = v45;
  *(_OWORD *)(a9 + 8) = v56;
  *(void *)(a9 + 24) = v55;
  *(_OWORD *)(a9 + 32) = v47;
  *(_BYTE *)(a9 + 48) = v54;
  *(_DWORD *)(a9 + 49) = *(_DWORD *)v70;
  *(_DWORD *)(a9 + 52) = *(_DWORD *)&v70[3];
  *(_OWORD *)(a9 + 56) = v61;
  double result = *(double *)&v60;
  *(_OWORD *)(a9 + 72) = v60;
  uint64_t v41 = v58;
  *(void *)(a9 + 88) = v59;
  *(void *)(a9 + 96) = v41;
  *(_BYTE *)(a9 + 104) = v57;
  *(_DWORD *)(a9 + 108) = *(_DWORD *)&v69[3];
  *(_DWORD *)(a9 + 105) = *(_DWORD *)v69;
  uint64_t v42 = v63;
  *(void *)(a9 + 112) = v62;
  *(void *)(a9 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v42;
  *(void *)(a9 + 128) = 0LL;
  *(void *)(a9 + 136) = 0LL;
  *(_BYTE *)(a9 + 144) = 4;
  *(_BYTE *)(a9 + 145) = v64;
  *(_DWORD *)(a9 + 146) = v67;
  *(_WORD *)(a9 + 15_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v68;
  *(void *)(a9 + 152) = v38;
  *(void *)(a9 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v39;
  *(_BYTE *)(a9 + 168) = v66;
  *(_DWORD *)(a9 + 169) = *(_DWORD *)v65;
  *(_DWORD *)(a9 + 172) = *(_DWORD *)&v65[3];
  *(void *)(a9 + 176) = sub_10003D7D4;
  *(void *)(a9 + 184) = v34;
  return result;
}

uint64_t sub_10003AE90( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v50 = a8;
  uint64_t v51 = a5;
  uint64_t v9 = v8;
  uint64_t v63 = a4;
  int v64 = a1;
  uint64_t v65 = a2;
  uint64_t v49 = *(void *)(a5 - 8);
  uint64_t v11 = __chkstk_darwin(a1);
  uint64_t v62 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  __int128 v61 = (char *)&v46 - v13;
  uint64_t v55 = v14;
  uint64_t v16 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v14);
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  int v48 = (char *)&v46 - v19;
  uint64_t v20 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v52 = *(void *)(v20 - 8);
  uint64_t v53 = v20;
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v59 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v46 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  __int128 v47 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v46 - v29;
  uint64_t v58 = *((void *)v16 - 1);
  __chkstk_darwin(v28);
  int v57 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = swift_getAssociatedTypeWitness(0LL, a6);
  uint64_t v54 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  __int128 v56 = (char *)&v46 - v32;
  unint64_t v33 = v16;
  Swift::Int v34 = dispatch thunk of Sequence.underestimatedCount.getter(v16, a6);
  uint64_t v35 = v63;
  uint64_t v67 = ContiguousArray.init()(v63);
  uint64_t v63 = type metadata accessor for ContiguousArray(0LL, v35);
  ContiguousArray.reserveCapacity(_:)(v34);
  (*(void (**)(char *, void, void *))(v58 + 16))(v57, v60, v16);
  uint64_t v36 = v56;
  __int128 v60 = v33;
  uint64_t v37 = v33;
  uint64_t v38 = v55;
  uint64_t result = dispatch thunk of Sequence.makeIterator()(v37);
  if (v34 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }

  if (v34)
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v38,  v60,  v66,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v25, 1LL, AssociatedTypeWitness);
      if ((_DWORD)result == 1) {
        goto LABEL_18;
      }
      v64(v25, v62);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
        swift_release(v67);
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v62, v51);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      }

      uint64_t v9 = 0LL;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v30, v63);
      if (!--v34)
      {
        uint64_t v41 = v59;
        uint64_t v42 = v66;
        goto LABEL_9;
      }
    }
  }

  uint64_t v42 = v66;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v38,  v60,  v66,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v41 = v59;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()(v42, AssociatedConformanceWitness);
  uint64_t v62 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v41, 1LL, AssociatedTypeWitness) == 1)
  {
    uint64_t v43 = v59;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v43, v53);
    return v67;
  }

  else
  {
    __int128 v60 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v44 = v47;
    uint64_t v45 = v48;
    uint64_t v43 = v59;
    while (1)
    {
      v60(v45, v43, AssociatedTypeWitness);
      v64(v45, v61);
      if (v9) {
        break;
      }
      uint64_t v9 = 0LL;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v44, v63);
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    swift_release(v67);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v61, v51);
  }

uint64_t Flag<A>.init(wrappedValue:exclusivity:help:)@<X0>( uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Optional(0LL, a4);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v17 - v13, a1, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0LL, 1LL, a4);
  sub_100039D24((uint64_t)v14, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, a4);
}

uint64_t Flag<A>.init(exclusivity:help:)@<X0>( int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional(0LL, a3);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56LL))( (char *)&v14 - v11,  1LL,  1LL,  a3);
  return sub_100039D24((uint64_t)v12, a1, a2, a3, a4, a5);
}

uint64_t Flag.init<A>(exclusivity:help:)@<X0>( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional(255LL, a3);
  uint64_t v13 = type metadata accessor for Parsed(0LL, v10, v11, v12);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v20 - v15);
  uint64_t v17 = swift_allocObject(&unk_1000B0AD0, 82LL, 7LL);
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  sub_1000367F0(a2, v17 + 32);
  *(_BYTE *)(v17 + 81) = a1;
  sub_10006F11C((uint64_t)sub_10003B960, v17, v10, v18, v16);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v14 + 32))(a5, v16, v13);
}

uint64_t sub_10003B614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  int v49 = a5;
  uint64_t v48 = a4;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v44 = a1;
  uint64_t v9 = *(void *)(a7 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, v9);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  a6,  AssociatedTypeWitness,  &protocol requirements base descriptor for CaseIterable,  &associated conformance descriptor for CaseIterable.CaseIterable.AllCases: Collection);
  uint64_t v42 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v50 = type metadata accessor for EnumeratedSequence(0LL, AssociatedTypeWitness);
  uint64_t v47 = *(void *)(v50 - 8);
  uint64_t v12 = __chkstk_darwin(v50);
  uint64_t v14 = (char *)&v42 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v43 = swift_allocObject(&unk_1000B0E00, 17LL, 7LL);
  *(_BYTE *)(v43 + 16) = 0;
  dispatch thunk of static CaseIterable.allCases.getter(a6, v9);
  uint64_t v53 = a6;
  uint64_t v54 = a7;
  uint64_t v51 = a7;
  uint64_t v18 = (char *)sub_100005104(&qword_1000B9158);
  uint64_t v20 = sub_100045CE8( (void (*)(char *, char *))sub_10003D358,  (uint64_t)v52,  AssociatedTypeWitness,  v18,  (uint64_t)&type metadata for Never,  AssociatedConformanceWitness,  (uint64_t)&protocol witness table for Never,  v19);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v15 + 8);
  v21(v17, AssociatedTypeWitness);
  uint64_t v22 = *(void *)(v20 + 16);
  if (v22)
  {
    uint64_t v23 = (uint64_t *)(v20 + 40);
    uint64_t v24 = v22 - 1;
    do
    {
      uint64_t v25 = *v23;
      v23 += 7;
      BOOL v26 = v25 != 0;
      if (v25) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v24 == 0;
      }
      --v24;
    }

    while (!v27);
  }

  else
  {
    BOOL v26 = 0;
  }

  dispatch thunk of static CaseIterable.allCases.getter(a6, v9);
  Sequence.enumerated()(AssociatedTypeWitness, v42);
  uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v21)(v17, AssociatedTypeWitness);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v30 = v51;
  *(&v42 - 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = a6;
  *(&v42 - 9) = v30;
  uint64_t v31 = v45;
  *(&v42 - 8) = v44;
  *(&v42 - 7) = v31;
  *(&v42 - 6) = v46;
  *((_BYTE *)&v42 - 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v26;
  uint64_t v32 = v48;
  *(&v42 - 4) = v20;
  *(&v42 - 3) = v32;
  uint64_t v33 = v43;
  *(&v42 - 2) = v43;
  *((_BYTE *)&v42 - 8) = v49;
  __chkstk_darwin(v29);
  *(&v42 - 4) = a6;
  *(&v42 - 3) = v34;
  *(&v42 - 2) = (uint64_t)sub_10003D9B0;
  *(&v42 - 1) = v35;
  uint64_t v36 = v50;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v50);
  uint64_t v39 = sub_10003AE90( (void (*)(char *, char *))sub_10003D3A8,  (uint64_t)(&v42 - 6),  v36,  (uint64_t)&type metadata for ArgumentDefinition,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v38);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v14, v36);
  swift_bridgeObjectRelease(v20);
  uint64_t v40 = sub_100079288(v39);
  swift_release(v33);
  return v40;
}

uint64_t sub_10003B928()
{
  uint64_t v1 = v0[5];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[7]);
    swift_bridgeObjectRelease(v0[9]);
  }

  return swift_deallocObject(v0, 82LL, 7LL);
}

uint64_t sub_10003B960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003B614(a1, a2, a3, v3 + 32, *(unsigned __int8 *)(v3 + 81), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_10003B970@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v70 = a7;
  unint64_t v71 = a1;
  int v91 = a6;
  char v82 = a9;
  sub_1000367F0((uint64_t)a8, (uint64_t)v99);
  uint64_t v92 = v99[2];
  uint64_t v93 = v99[0];
  uint64_t v94 = v99[3];
  uint64_t v72 = v99[1];
  uint64_t v73 = v99[4];
  uint64_t v74 = v99[5];
  int v75 = v100;
  uint64_t v18 = type metadata accessor for Optional(0LL, a12);
  uint64_t v89 = *(void *)(v18 - 8);
  uint64_t v90 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v95 = (uint64_t)&v69 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v83 = v23;
  uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v79 = v21;
  v78(v22, a2, a12);
  uint64_t v80 = v22;
  uint64_t v24 = String.init<A>(describing:)(v22, a12);
  unint64_t v26 = v25;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a5);
  uint64_t v96 = a3;
  uint64_t v76 = a4;
  uint64_t v77 = a5;
  uint64_t v84 = sub_10006C86C(v24, v26, a3, a4, a5);
  unint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a13 + 24);
  uint64_t v87 = a2;
  uint64_t v88 = a13;
  char v32 = v91;
  uint64_t result = v31(a2, a12, a13);
  uint64_t v85 = v30;
  unint64_t v86 = v28;
  uint64_t v81 = result;
  if ((v32 & 1) == 0) {
    goto LABEL_6;
  }
  if ((v71 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v70 + 16) > v71)
  {
    uint64_t v34 = v70 + 56 * v71;
    uint64_t v35 = *(void *)(v34 + 40);
    if (v35)
    {
      uint64_t v36 = (uint64_t *)(v34 + 32);
      char v37 = *((_BYTE *)v36 + 48);
      uint64_t v39 = v36[4];
      uint64_t v38 = v36[5];
      uint64_t v40 = v36[2];
      uint64_t v41 = v36[3];
      uint64_t v42 = *v36;
      uint64_t v92 = v40;
      uint64_t v93 = v42;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v35);
      uint64_t v94 = v41;
      swift_bridgeObjectRetain(v41);
LABEL_7:
      int v75 = a11;
      uint64_t v74 = a10;
      v101[0] = v93;
      v101[1] = v35;
      v101[2] = v92;
      v101[3] = v94;
      v101[4] = v39;
      v101[5] = v38;
      char v102 = v37;
      uint64_t v43 = v76;
      swift_bridgeObjectRetain(v76);
      uint64_t v44 = v77;
      swift_bridgeObjectRetain(v77);
      sub_10005EC6C( (uint64_t)_swiftEmptyArrayStorage,  1LL,  (uint64_t)v101,  0LL,  0LL,  v96,  v43,  v44,  (uint64_t)v97,  (v32 & 1) == 0);
      uint64_t v45 = v83;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v95, 1LL, 1LL, a12);
      uint64_t v46 = v80;
      v78(v80, v87, a12);
      uint64_t v47 = *(unsigned __int8 *)(v45 + 80);
      uint64_t v48 = (v47 + 64) & ~v47;
      uint64_t v49 = v48 + v79;
      uint64_t v50 = (char *)swift_allocObject(&unk_1000B0E28, v48 + v79 + 1, v47 | 7);
      uint64_t v51 = v88;
      *((void *)v50 + 2) = a12;
      *((void *)v50 + 3) = v51;
      uint64_t v52 = v74;
      uint64_t v53 = v96;
      *((void *)v50 + 4) = v74;
      *((void *)v50 + 5) = v53;
      *((void *)v50 + 6) = v43;
      *((void *)v50 + 7) = v44;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v50[v48], v46, a12);
      v50[v49] = v75;
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v44);
      swift_retain(v52);
      uint64_t v54 = v95;
      uint64_t v55 = v81;
      uint64_t v56 = v43;
      uint64_t v57 = v85;
      unint64_t v58 = v86;
      sub_10003AB68( v81,  v96,  v56,  v44,  v84,  v86,  v85,  v97,  (uint64_t)v98,  0,  v95,  (uint64_t)sub_10003D9F8,  (uint64_t)v50,  0,  a12);
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v57);
      swift_bridgeObjectRelease(v58);
      swift_release(v50);
      sub_10003D698(v97);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8))(v54, v90);
      __int128 v59 = v98[9];
      __int128 v60 = v98[10];
      __int128 v61 = v98[7];
      uint64_t v62 = v82;
      v82[8] = v98[8];
      v62[9] = v59;
      __int128 v63 = v98[11];
      v62[10] = v60;
      v62[11] = v63;
      __int128 v64 = v98[5];
      __int128 v65 = v98[6];
      __int128 v66 = v98[3];
      v62[4] = v98[4];
      v62[5] = v64;
      v62[6] = v65;
      v62[7] = v61;
      __int128 v67 = v98[1];
      __int128 v68 = v98[2];
      *uint64_t v62 = v98[0];
      v62[1] = v67;
      v62[2] = v68;
      v62[3] = v66;
      return result;
    }

LABEL_6:
    sub_100037ACC(a8);
    char v37 = v75;
    uint64_t v39 = v73;
    uint64_t v38 = v74;
    uint64_t v35 = v72;
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

    sub_100037ACC(a8);
    uint64_t v34 = v63;
    uint64_t v39 = v61;
    uint64_t v35 = v62;
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

      v11 += 24;
      if (!--v7)
      {
        swift_bridgeObjectRelease_n(v62, 2LL);
        return v12;
      }
    }
  }

  return (char *)_swiftEmptyArrayStorage;
}

  sub_10002D724((uint64_t)&v33);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  _BYTE v32[8] = v41;
  v32[9] = v42;
  v32[10] = v43;
  v32[11] = v44;
  void v32[4] = v37;
  v32[5] = v38;
  v32[6] = v39;
  v32[7] = v40;
  v32[0] = v33;
  v32[1] = v34;
  v32[2] = v35;
  v32[3] = v36;
  v29._char countAndFlagsBits = (uint64_t)v32;
  String.init(argument:)(v29);
  uint64_t v30 = v32;
LABEL_9:
  sub_10002AACC((uint64_t)v30, a6, &qword_1000B9148);
  swift_bridgeObjectRelease(a5);
  return swift_bridgeObjectRelease(a4);
}

  sub_10002D724((uint64_t)&v33);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  _BYTE v32[8] = v41;
  v32[9] = v42;
  v32[10] = v43;
  v32[11] = v44;
  void v32[4] = v37;
  v32[5] = v38;
  v32[6] = v39;
  v32[7] = v40;
  v32[0] = v33;
  v32[1] = v34;
  v32[2] = v35;
  v32[3] = v36;
  v29._char countAndFlagsBits = (uint64_t)v32;
  String.init(argument:)(v29);
  uint64_t v30 = v32;
LABEL_9:
  sub_10005BFC4((uint64_t)v30, a6);
  swift_bridgeObjectRelease(a5);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_10003BD90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = (_BYTE *)(a6 + 16);
  swift_beginAccess(a6 + 16, v23, 0LL, 0LL);
  uint64_t v17 = v24;
  uint64_t result = sub_100060778(a7, a8, a9, a10, a1, a5, *(_BYTE *)(a6 + 16), a11, a12, *(void *)(a13 + 16));
  if (!v17)
  {
    char v19 = result;
    uint64_t result = swift_beginAccess(v16, v22, 1LL, 0LL);
    *uint64_t v16 = v19 & 1;
  }

  return result;
}

uint64_t sub_10003BE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_1000B0D88, 96LL, 7LL);
  _OWORD v8[2] = a3;
  v8[3] = a4;
  sub_1000367F0(a2, (uint64_t)(v8 + 4));
  v8[11] = a1;
  uint64_t v9 = type metadata accessor for Array(0LL, a3);
  sub_10006F11C((uint64_t)sub_10003D348, (uint64_t)v8, v9, v10, &v17);
  __int128 v15 = v17;
  char v16 = v18;
  uint64_t v13 = type metadata accessor for Parsed(0LL, v9, v11, v12);
  (*(void (**)(uint64_t *, __int128 *, uint64_t))(*(void *)(v13 - 8) + 32LL))(&v19, &v15, v13);
  return v19;
}

uint64_t sub_10003BF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v42 = a1;
  uint64_t v9 = *(void *)(a7 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, v9);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  a6,  AssociatedTypeWitness,  &protocol requirements base descriptor for CaseIterable,  &associated conformance descriptor for CaseIterable.CaseIterable.AllCases: Collection);
  uint64_t v41 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v48 = type metadata accessor for EnumeratedSequence(0LL, AssociatedTypeWitness);
  uint64_t v45 = *(void *)(v48 - 8);
  uint64_t v12 = __chkstk_darwin(v48);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v12);
  __int128 v17 = (char *)&v40 - v16;
  dispatch thunk of static CaseIterable.allCases.getter(a6, v9);
  uint64_t v51 = a6;
  uint64_t v52 = a7;
  uint64_t v49 = a7;
  char v18 = (char *)sub_100005104(&qword_1000B9158);
  uint64_t v20 = sub_100045CE8( (void (*)(char *, char *))sub_10003D358,  (uint64_t)v50,  AssociatedTypeWitness,  v18,  (uint64_t)&type metadata for Never,  AssociatedConformanceWitness,  (uint64_t)&protocol witness table for Never,  v19);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v15 + 8);
  v21(v17, AssociatedTypeWitness);
  uint64_t v22 = *(void *)(v20 + 16);
  if (v22)
  {
    uint64_t v23 = (uint64_t *)(v20 + 40);
    uint64_t v24 = v22 - 1;
    do
    {
      uint64_t v25 = *v23;
      v23 += 7;
      BOOL v26 = v25 != 0;
      if (v25) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v24 == 0;
      }
      --v24;
    }

    while (!v27);
  }

  else
  {
    BOOL v26 = 0;
  }

  dispatch thunk of static CaseIterable.allCases.getter(a6, v9);
  Sequence.enumerated()(AssociatedTypeWitness, v41);
  uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v21)(v17, AssociatedTypeWitness);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v30 = v49;
  *(&v40 - 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = a6;
  *(&v40 - 9) = v30;
  uint64_t v31 = v43;
  *(&v40 - 8) = v42;
  *(&v40 - 7) = v31;
  *(&v40 - 6) = v44;
  *((_BYTE *)&v40 - 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = v26;
  uint64_t v32 = v46;
  *(&v40 - 4) = v20;
  *(&v40 - 3) = v32;
  *(&v40 - 2) = v47;
  __chkstk_darwin(v29);
  *(&v40 - 4) = a6;
  *(&v40 - 3) = v33;
  *(&v40 - 2) = (uint64_t)sub_10003D36C;
  *(&v40 - 1) = v34;
  uint64_t v35 = v48;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v48);
  uint64_t v38 = sub_10003AE90( (void (*)(char *, char *))sub_10003D3A8,  (uint64_t)(&v40 - 6),  v35,  (uint64_t)&type metadata for ArgumentDefinition,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v37);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v35);
  swift_bridgeObjectRelease(v20);
  return sub_100079288(v38);
}

uint64_t sub_10003C204@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v59 = a7;
  unint64_t v60 = a1;
  int v78 = a6;
  uint64_t v79 = a3;
  uint64_t v17 = sub_1000367F0((uint64_t)a8, (uint64_t)v83);
  uint64_t v74 = v83[2];
  uint64_t v75 = v83[0];
  uint64_t v76 = v83[3];
  uint64_t v77 = v83[4];
  uint64_t v61 = v83[1];
  uint64_t v62 = v83[5];
  int v63 = v84;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = v20;
  __int128 v65 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v66 = v18;
  v65(v19, a2, a11);
  __int128 v64 = v19;
  uint64_t v21 = String.init<A>(describing:)(v19, a11);
  unint64_t v23 = v22;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a5);
  uint64_t v24 = sub_10006C86C(v21, v23, v79, a4, a5);
  uint64_t v70 = a2;
  uint64_t v71 = v24;
  unint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a12 + 24);
  uint64_t v69 = a12;
  uint64_t result = v29(a2, a11, a12);
  uint64_t v72 = v28;
  unint64_t v73 = v26;
  uint64_t v67 = result;
  if ((v78 & 1) == 0) {
    goto LABEL_6;
  }
  if ((v60 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v59 + 16) > v60)
  {
    uint64_t v31 = v59 + 56 * v60;
    uint64_t v32 = *(void *)(v31 + 40);
    if (v32)
    {
      uint64_t v33 = (uint64_t *)(v31 + 32);
      char v34 = *((_BYTE *)v33 + 48);
      uint64_t v35 = v33[5];
      uint64_t v77 = v33[4];
      uint64_t v36 = v33[2];
      uint64_t v37 = v33[3];
      uint64_t v38 = *v33;
      uint64_t v74 = v36;
      uint64_t v75 = v38;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v32);
      uint64_t v76 = v37;
      swift_bridgeObjectRetain(v37);
      uint64_t v39 = v32;
LABEL_7:
      v85[0] = v75;
      v85[1] = v39;
      v85[2] = v74;
      v85[3] = v76;
      v85[4] = v77;
      v85[5] = v35;
      char v86 = v34;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a5);
      uint64_t v40 = v79;
      sub_10005EC6C( (uint64_t)_swiftEmptyArrayStorage,  1LL,  (uint64_t)v85,  0LL,  0LL,  v79,  a4,  a5,  (uint64_t)v81,  (v78 & 1) == 0);
      uint64_t v80 = a10;
      uint64_t v41 = v64;
      v65(v64, v70, a11);
      uint64_t v42 = v68;
      uint64_t v43 = *(unsigned __int8 *)(v68 + 80);
      uint64_t v44 = (v43 + 56) & ~v43;
      uint64_t v45 = (char *)swift_allocObject(&unk_1000B0DB0, v44 + v66, v43 | 7);
      uint64_t v46 = v69;
      *((void *)v45 + 2) = a11;
      *((void *)v45 + 3) = v46;
      *((void *)v45 + 4) = v40;
      *((void *)v45 + 5) = a4;
      *((void *)v45 + 6) = a5;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v45[v44], v41, a11);
      uint64_t v47 = type metadata accessor for Array(0LL, a11);
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a5);
      uint64_t v58 = v47;
      uint64_t v48 = v67;
      uint64_t v49 = a5;
      uint64_t v50 = v72;
      unint64_t v51 = v73;
      sub_10003AB68( v67,  v40,  a4,  v49,  v71,  v73,  v72,  v81,  (uint64_t)v82,  0,  (uint64_t)&v80,  (uint64_t)sub_10003D5D4,  (uint64_t)v45,  0,  v58);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRelease(v51);
      sub_10003D698(v81);
      uint64_t result = swift_release(v45);
      __int128 v52 = v82[9];
      a9[8] = v82[8];
      a9[9] = v52;
      __int128 v53 = v82[11];
      a9[10] = v82[10];
      a9[11] = v53;
      __int128 v54 = v82[5];
      a9[4] = v82[4];
      a9[5] = v54;
      __int128 v55 = v82[7];
      a9[6] = v82[6];
      a9[7] = v55;
      __int128 v56 = v82[1];
      *a9 = v82[0];
      a9[1] = v56;
      __int128 v57 = v82[3];
      a9[2] = v82[2];
      a9[3] = v57;
      return result;
    }

uint64_t sub_10003C5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v6 + 16))(v5);
  uint64_t v7 = type metadata accessor for Array(0LL, a3);
  return Array.append(_:)(v5, v7);
}

uint64_t Flag.init<A>(wrappedValue:help:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003BE60(a1, a2, a3, a4);
}

uint64_t Flag.init<A>(help:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003BE60(0LL, a1, a2, a3);
}

uint64_t sub_10003C698(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Flag<A>, a2);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10003C6C4(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_100098634, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003C6F4()
{
  unint64_t result = qword_1000B92C0;
  if (!qword_1000B92C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for FlagInversion, &type metadata for FlagInversion);
    atomic_store(result, (unint64_t *)&qword_1000B92C0);
  }

  return result;
}

unint64_t sub_10003C73C()
{
  unint64_t result = qword_1000B92C8[0];
  if (!qword_1000B92C8[0])
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for FlagExclusivity,  &type metadata for FlagExclusivity);
    atomic_store(result, qword_1000B92C8);
  }

  return result;
}

uint64_t *sub_10003C780(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }

  else
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      else {
        uint64_t v10 = 4LL;
      }
      __asm { BR              X13 }
    }

    if (v9 != 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
      return v3;
    }

    uint64_t v8 = a2[1];
    *uint64_t v3 = *a2;
    v3[1] = v8;
    *((_BYTE *)v3 + v5) = 1;
  }

  swift_retain(v8);
  return v3;
}

uint64_t sub_10003C894(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= 0x10) {
    unint64_t v3 = 16LL;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1) {
      return swift_release(*(void *)(a1 + 8));
    }
    else {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }

  else
  {
    else {
      uint64_t v5 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_10003C8DC + 4 * byte_1000985C5[v5]))();
  }

void *sub_10003C934(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain(v8);
    char v9 = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v9 = 0;
  }

  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

void *sub_10003CA0C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release(a1[1]);
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain(v12);
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }

  return a1;
}

_OWORD *sub_10003CB9C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    *a1 = *a2;
    char v8 = 1;
  }

  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    char v8 = 0;
  }

  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

uint64_t sub_10003CC70(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release(*(void *)(a1 + 8));
    }
    else {
      (*(void (**)(uint64_t, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *(_OWORD *)a1 = *a2;
      char v12 = 1;
    }

    else
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v12 = 0;
    }

    *(_BYTE *)(a1 + v7) = v12;
  }

  return a1;
}

uint64_t sub_10003CDFC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 16LL;
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) > 0x10uLL) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_10003CEC0 + 4 * byte_1000985E8[(v4 - 1)]))();
}

void sub_10003CF0C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (v5 <= 0x10) {
    unint64_t v5 = 16LL;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v7 = 0;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = &dword_100000004;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = &_mh_execute_header.magic + 1;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }

      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }

  __asm { BR              X10 }

ValueMetadata *type metadata accessor for FlagInversion()
{
  return &type metadata for FlagInversion;
}

ValueMetadata *type metadata accessor for FlagExclusivity()
{
  return &type metadata for FlagExclusivity;
}

uint64_t _s14ArgumentParser15FlagExclusivityV14RepresentationOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10003D12C + 4 * byte_1000985FB[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10003D160 + 4 * byte_1000985F6[v4]))();
}

uint64_t sub_10003D160(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D168(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003D170LL);
  }
  return result;
}

uint64_t sub_10003D17C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003D184LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10003D188(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D190(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlagExclusivity.Representation()
{
  return &type metadata for FlagExclusivity.Representation;
}

uint64_t _s14ArgumentParser13FlagInversionV14RepresentationOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10003D1F8 + 4 * byte_100098605[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003D22C + 4 * byte_100098600[v4]))();
}

uint64_t sub_10003D22C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D234(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003D23CLL);
  }
  return result;
}

uint64_t sub_10003D248(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003D250LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10003D254(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D25C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlagInversion.Representation()
{
  return &type metadata for FlagInversion.Representation;
}

unint64_t sub_10003D27C()
{
  unint64_t result = qword_1000B9350;
  if (!qword_1000B9350)
  {
    unint64_t result = swift_getWitnessTable(&unk_100098818, &type metadata for FlagInversion.Representation);
    atomic_store(result, (unint64_t *)&qword_1000B9350);
  }

  return result;
}

unint64_t sub_10003D2C4()
{
  unint64_t result = qword_1000B9358;
  if (!qword_1000B9358)
  {
    unint64_t result = swift_getWitnessTable(&unk_100098880, &type metadata for FlagExclusivity.Representation);
    atomic_store(result, (unint64_t *)&qword_1000B9358);
  }

  return result;
}

uint64_t sub_10003D308()
{
  uint64_t v1 = v0[5];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[7]);
    swift_bridgeObjectRelease(v0[9]);
  }

  swift_bridgeObjectRelease(v0[11]);
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_10003D348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003BF30(a1, a2, a3, (uint64_t)(v3 + 4), v3[11], v3[2], v3[3]);
}

uint64_t sub_10003D358@<X0>(uint64_t a1@<X8>)
{
  return sub_10003DB68(a1);
}

uint64_t sub_10003D36C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_10003C204( a1,  a2,  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  *(unsigned __int8 *)(v3 + 56),  *(void *)(v3 + 64),  *(uint64_t **)(v3 + 72),  a3,  *(void *)(v3 + 80),  *(void *)(v3 + 16),  *(void *)(v3 + 24));
}

double sub_10003D3A8@<D0>(char *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10003DC08(a1, a2);
}

uint64_t sub_10003D3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a4;
  uint64_t v23 = a6;
  uint64_t v24 = a2;
  uint64_t v11 = type metadata accessor for Optional(0LL, a7);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(a7 - 8);
  __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, v11);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, a7);
  v28[3] = a7;
  uint64_t v20 = sub_10000B40C(v28);
  (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v20, v18, a7);
  sub_10003D8D8((uint64_t)v28, (uint64_t)v26);
  uint64_t v21 = v23;
  v25[0] = v22;
  v25[1] = a5;
  void v25[2] = v23;
  v26[4] = a1;
  char v27 = 1;
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(a1);
  sub_10007029C(v25);
  sub_10003D920(v25);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a7);
  return sub_10003D954((uint64_t)v28);
}

uint64_t sub_10003D560()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease(*((void *)v0 + 5));
  swift_bridgeObjectRelease(*((void *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003D5D4(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v5 = (void *)v1[6];
  __int128 v11 = *((_OWORD *)v1 + 1);
  uint64_t v6 = v1[2];
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL);
  unsigned int v8 = (char *)v1 + ((v7 + 56) & ~v7);
  uint64_t v9 = Array.init()(v11);
  __int128 v13 = v11;
  uint64_t v14 = v8;
  sub_10006FB28(v3, v4, v5, a1, v9, (void (*)(uint64_t *))sub_10003D994, (uint64_t)v12, v6);
  return swift_bridgeObjectRelease(v9);
}

void *sub_10003D698(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[11];
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10003D71C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional(0LL, v1) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(v1 - 8);
  unint64_t v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = v7 + 24;
  uint64_t v9 = v3 | 7;
  uint64_t v10 = v0 + v7;
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  swift_bridgeObjectRelease(*(void *)(v10 + 16));
  return swift_deallocObject(v0, v8, v9);
}

uint64_t sub_10003D7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(type metadata accessor for Optional(0LL, v5) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (uint64_t *)(v2 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_10003D3BC(a1, a2, v2 + v7, *v8, v8[1], v8[2], v5);
}

void *sub_10003D854(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[14];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_10003D8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B9360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_10003D920(void *a1)
{
  return a1;
}

uint64_t sub_10003D954(uint64_t a1)
{
  uint64_t v2 = sub_100005104(&qword_1000B9360);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10003D994(uint64_t a1)
{
  return sub_10003C5DC(a1, *(void *)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t sub_10003D9A0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10003D9B0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_10003B970( a1,  a2,  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  *(unsigned __int8 *)(v3 + 56),  *(void *)(v3 + 64),  *(uint64_t **)(v3 + 72),  a3,  *(void *)(v3 + 80),  *(_BYTE *)(v3 + 88),  *(void *)(v3 + 16),  *(void *)(v3 + 24));
}

uint64_t sub_10003D9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_10003DD38(a1, a2, a3, a4, a5);
}

uint64_t sub_10003DA0C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional(0LL, v1) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = v0 + v4;
  uint64_t v7 = *(void *)(v1 - 8);
  uint64_t v8 = v0 + v5;
  uint64_t v9 = *(void *)(v0 + v5 + 8);
  if (v9)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(*(void *)(v8 + 24));
    swift_bridgeObjectRelease(*(void *)(v8 + 40));
  }

  return swift_deallocObject(v0, v5 + 50, v3 | 7);
}

uint64_t sub_10003DAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v9 = *(void *)(type metadata accessor for Optional(0LL, v7) - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v3 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_100039E54(a1, a2, a3, v3 + v10, v11, *(unsigned __int8 *)(v11 + 49), v7, v8);
}

uint64_t sub_10003DB44@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10003A280(a1, v2[4], v2[5], v2[6], v2[2], v2[3], a2);
}

uint64_t sub_10003DB68@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)(v1 + 24) + 32LL))(v4);
  return sub_1000367F0((uint64_t)v4, a1);
}

uint64_t sub_10003DBBC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_10003A434( a1,  a2,  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  *(void *)(v3 + 56),  *(uint64_t **)(v3 + 64),  *(unsigned __int8 *)(v3 + 72),  a3,  *(void *)(v3 + 80),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(void *)(v3 + 104),  *(_BYTE *)(v3 + 112),  *(void *)(v3 + 16),  *(void *)(v3 + 24));
}

double sub_10003DC08@<D0>(char *a1@<X0>, _OWORD *a2@<X8>)
{
  void (*v5)(_OWORD *__return_ptr, uint64_t, char *);
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v5 = *(void (**)(_OWORD *__return_ptr, uint64_t, char *))(v2 + 32);
  uint64_t v6 = *(void *)a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2( 0LL,  &type metadata for Int,  *(void *)(v2 + 16),  "offset element ",  0LL);
  v5(v15, v6, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
  uint64_t v8 = v23;
  a2[8] = v22;
  a2[9] = v8;
  uint64_t v9 = v25;
  a2[10] = v24;
  a2[11] = v9;
  unint64_t v10 = v19;
  a2[4] = v18;
  a2[5] = v10;
  uint64_t v11 = v21;
  a2[6] = v20;
  a2[7] = v11;
  uint64_t v12 = v15[1];
  *a2 = v15[0];
  a2[1] = v12;
  unint64_t result = *(double *)&v16;
  uint64_t v14 = v17;
  a2[2] = v16;
  a2[3] = v14;
  return result;
}

uint64_t sub_10003DCB8()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release(*((void *)v0 + 4));
  swift_bridgeObjectRelease(*((void *)v0 + 6));
  swift_bridgeObjectRelease(*((void *)v0 + 7));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10003DD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(*(void *)(v5 + 16) - 8LL);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return sub_10003BD90( a1,  a2,  a3,  a4,  a5,  *(void *)(v5 + 32),  *(void *)(v5 + 40),  *(void *)(v5 + 48),  *(void **)(v5 + 56),  v5 + v7,  *(_BYTE *)(v5 + v7 + *(void *)(v6 + 64)),  *(void *)(v5 + 16),  *(void *)(v5 + 24));
}

uint64_t sub_10003DD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100061DF4(a1, a2, a3, a4, a5, *(void *)(v5 + 16), *(void *)(v5 + 24), *(void **)(v5 + 32));
}

uint64_t sub_10003DDB0(uint64_t a1, uint64_t a2)
{
  return sub_100061FF0(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_10003DDD0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10003DDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100061B24(a1, a2, a3, a4, a5, v5[2], v5[3], v5[4]);
}

uint64_t sub_10003DE1C(uint64_t a1, uint64_t a2)
{
  return sub_100061BE8(a1, a2, *(_BYTE *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10003DE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10003DEE0( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, char))sub_100061BFC);
}

uint64_t sub_10003DE60()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10003DE90()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_10003DEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10003DEE0( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, char))sub_100061CF8);
}

uint64_t sub_10003DEE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, char))
{
  char v8 = *(_BYTE *)(v6 + 48);
  return a6( a1,  a2,  a3,  a4,  a5,  *(void *)(v6 + 16),  *(void *)(v6 + 24),  *(void *)(v6 + 32),  *(void *)(v6 + 40),  v8);
}

uint64_t static NameSpecification.long.getter()
{
  uint64_t v0 = sub_10003F288((uint64_t)&off_1000AFCA0);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  swift_arrayDestroy(&unk_1000AFCC0, 1LL, &type metadata for NameSpecification.Element);
  return v0;
}

void sub_10003DF8C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (!(a4 >> 6))
  {
    Swift::UInt8 v7 = a4 & 1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, a2, a3);
    goto LABEL_5;
  }

  if (a4 >> 6 == 1)
  {
    Swift::UInt8 v7 = a4 & 1;
    Hasher._combine(_:)(3uLL);
    Character.hash(into:)(a1, a2, a3);
LABEL_5:
    Hasher._combine(_:)(v7);
    return;
  }

  if (a3 | a2 || a4 != 128) {
    Swift::UInt v8 = 2LL;
  }
  else {
    Swift::UInt v8 = 0LL;
  }
  Hasher._combine(_:)(v8);
}

Swift::Int sub_10003E034(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (!(a3 >> 6))
  {
    Swift::UInt8 v6 = a3 & 1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v9, a1, a2);
    goto LABEL_5;
  }

  if (a3 >> 6 == 1)
  {
    Swift::UInt8 v6 = a3 & 1;
    Hasher._combine(_:)(3uLL);
    Character.hash(into:)(v9, a1, a2);
LABEL_5:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }

  if (a2 | a1 || a3 != 128) {
    Swift::UInt v7 = 2LL;
  }
  else {
    Swift::UInt v7 = 0LL;
  }
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

Swift::Int sub_10003E10C()
{
  return sub_10003E034(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void sub_10003E118(uint64_t a1)
{
}

Swift::Int sub_10003E124(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  unsigned int v4 = *((unsigned __int8 *)v1 + 16);
  Hasher.init(_seed:)(v8, a1);
  if (!(v4 >> 6))
  {
    Swift::UInt8 v5 = v4 & 1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v8, v2, v3);
    goto LABEL_5;
  }

  if (v4 >> 6 == 1)
  {
    Swift::UInt8 v5 = v4 & 1;
    Hasher._combine(_:)(3uLL);
    Character.hash(into:)(v8, v2, v3);
LABEL_5:
    Hasher._combine(_:)(v5);
    return Hasher._finalize()();
  }

  if (v3 | v2 || v4 != 128) {
    Swift::UInt v6 = 2LL;
  }
  else {
    Swift::UInt v6 = 0LL;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t sub_10003E1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003E5A0( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_10003F444);
}

uint64_t static NameSpecification.Element.long.getter()
{
  return 0LL;
}

uint64_t static NameSpecification.Element.customLong(_:withSingleDash:)(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t static NameSpecification.Element.short.getter()
{
  return 1LL;
}

uint64_t static NameSpecification.Element.customShort(_:allowingJoined:)(uint64_t a1, uint64_t a2)
{
  return a1;
}

void NameSpecification.Element.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 >> 6)
  {
    if (a4 >> 6 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Character.hash(into:)(a1, a2, a3);
      Hasher._combine(_:)(a4 & 1);
    }

    else
    {
      if (a3 | a2 || a4 != 128) {
        Swift::UInt v8 = 2LL;
      }
      else {
        Swift::UInt v8 = 0LL;
      }
      Hasher._combine(_:)(v8);
    }
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain(a3);
    String.hash(into:)(a1, a2, a3);
    Hasher._combine(_:)(a4 & 1);
    sub_10003F434(a2, a3, a4);
  }

Swift::Int NameSpecification.Element.hashValue.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >> 6)
  {
    if (a3 >> 6 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Character.hash(into:)(v8, a1, a2);
      Hasher._combine(_:)(a3 & 1);
    }

    else
    {
      if (a2 | a1 || a3 != 128) {
        Swift::UInt v6 = 2LL;
      }
      else {
        Swift::UInt v6 = 0LL;
      }
      Hasher._combine(_:)(v6);
    }
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v8, a1, a2);
    Hasher._combine(_:)(a3 & 1);
    sub_10003F434(a1, a2, a3);
  }

  return Hasher._finalize()();
}

Swift::Int sub_10003E484()
{
  return NameSpecification.Element.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void sub_10003E490(uint64_t a1)
{
}

Swift::Int sub_10003E49C(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(v1 + 16);
  Hasher.init(_seed:)(v7, a1);
  if (v4 >> 6)
  {
    if (v4 >> 6 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Character.hash(into:)(v7, v2, v3);
      Hasher._combine(_:)(v4 & 1);
    }

    else
    {
      if (v3 | v2 || v4 != 128) {
        Swift::UInt v5 = 2LL;
      }
      else {
        Swift::UInt v5 = 0LL;
      }
      Hasher._combine(_:)(v5);
    }
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(v7, v2, v3);
    Hasher._combine(_:)(v4 & 1);
    sub_10003F434(v2, v3, v4);
  }

  return Hasher._finalize()();
}

uint64_t sub_10003E594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003E5A0( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))_s14ArgumentParser17NameSpecificationV7ElementV23__derived_struct_equalsySbAE_AEtFZ_0);
}

uint64_t sub_10003E5A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned __int8 *)(a2 + 16));
}

uint64_t NameSpecification.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003F610();
  uint64_t v7 = sub_10008B078(a2, a3, v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  return v7;
}

uint64_t NameSpecification.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = sub_10003F288(a1);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  return v2;
}

uint64_t sub_10003E67C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10003F288(a1);
  swift_bridgeObjectRelease(a1);
  uint64_t result = swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  *a2 = v4;
  return result;
}

uint64_t static NameSpecification.customLong(_:withSingleDash:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100005104(&qword_1000B9370);
  uint64_t inited = swift_initStackObject(v6, v10);
  *(void *)(inited + 32) = a1;
  *(_OWORD *)(inited + 16) = xmmword_100096510;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = a2;
  *(_BYTE *)(inited + 48) = a3;
  swift_bridgeObjectRetain(a2);
  uint64_t v8 = sub_10003F288(inited);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1LL, &type metadata for NameSpecification.Element);
  return v8;
}

uint64_t static NameSpecification.short.getter()
{
  uint64_t v0 = sub_10003F288((uint64_t)&off_1000AFCD8);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  swift_arrayDestroy(&unk_1000AFCF8, 1LL, &type metadata for NameSpecification.Element);
  return v0;
}

uint64_t static NameSpecification.customShort(_:allowingJoined:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100005104(&qword_1000B9370);
  uint64_t inited = swift_initStackObject(v6, v10);
  *(_OWORD *)(inited + 16) = xmmword_100096510;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Flag.swift",  25LL,  2LL,  93LL, 0) = a2;
  *(_BYTE *)(inited + 48) = a3 | 0x40;
  swift_bridgeObjectRetain(a2);
  uint64_t v8 = sub_10003F288(inited);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1LL, &type metadata for NameSpecification.Element);
  return v8;
}

uint64_t static NameSpecification.shortAndLong.getter()
{
  uint64_t v0 = sub_10003F288((uint64_t)&off_1000AFD10);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  swift_arrayDestroy(&unk_1000AFD30, 2LL, &type metadata for NameSpecification.Element);
  return v0;
}

char *sub_10003E944( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a4 + 16);
  if (v7)
  {
    uint64_t v10 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v10 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v63 = v10;
    swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v62 = a4;
    uint64_t v11 = (unsigned __int8 *)(a4 + 48);
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      unint64_t v15 = *((void *)v11 - 2);
      unint64_t v14 = *((void *)v11 - 1);
      unsigned int v16 = *v11;
      unsigned int v17 = v16 >> 6;
      if (!(v16 >> 6))
      {
        swift_bridgeObjectRetain(*((void *)v11 - 1));
        unint64_t v19 = sub_10003EF9C(a1, a2, v15, v14);
        unint64_t v21 = v20;
        sub_10003F434(v15, v14, v16);
        char v18 = (_BYTE)v16 << 7;
        unint64_t v15 = v19;
        unint64_t v14 = v21;
        goto LABEL_35;
      }

      if (v17 == 1)
      {
        if ((a3 & 1) != 0) {
          goto LABEL_10;
        }
      }

      else
      {
        if (!(v14 | v15) && v16 == 128)
        {
          if (v63)
          {
            swift_bridgeObjectRetain(a6);
            String.subscript.getter(15LL, a5, a6);
            uint64_t v23 = v22;
            swift_bridgeObjectRetain(a2);
            Swift::String v24 = Character.uppercased()();
            swift_bridgeObjectRelease(v23);
            String.append(_:)(v24);
            swift_bridgeObjectRelease(v24._object);
            swift_bridgeObjectRetain(a6);
            unint64_t v25 = sub_100033710(1uLL, a5, a6);
            uint64_t v27 = v26;
            uint64_t v29 = v28;
            uint64_t v31 = v30;
            swift_bridgeObjectRelease(a6);
            v32._char countAndFlagsBits = static String._fromSubstring(_:)(v25, v27, v29, v31);
            object = v32._object;
            String.append(_:)(v32);
            swift_bridgeObjectRelease(a6);
            swift_bridgeObjectRelease(v31);
            swift_bridgeObjectRelease(object);
            uint64_t v35 = a1;
            unint64_t v34 = a2;
          }

          else
          {
            unint64_t v34 = a2;
            swift_bridgeObjectRetain(a2);
            uint64_t v35 = a1;
          }

          if ((v34 & 0x2000000000000000LL) != 0) {
            uint64_t v37 = HIBYTE(v34) & 0xF;
          }
          else {
            uint64_t v37 = v35 & 0xFFFFFFFFFFFFLL;
          }
          swift_bridgeObjectRetain(a6);
          swift_bridgeObjectRetain(a7);
          if (v37)
          {
            swift_bridgeObjectRetain(v34);
            uint64_t v38 = String.subscript.getter(15LL, v35, v34);
            uint64_t v40 = v39;
            swift_bridgeObjectRelease(v34);
            if (v38 == 95 && v40 == 0xE100000000000000LL)
            {
              swift_bridgeObjectRelease(0xE100000000000000LL);
              goto LABEL_29;
            }

            char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, 95LL, 0xE100000000000000LL, 0LL);
            swift_bridgeObjectRelease(v40);
            if ((v41 & 1) != 0)
            {
LABEL_29:
              unint64_t v42 = sub_100033710(1uLL, v35, v34);
              uint64_t v44 = v43;
              uint64_t v46 = v45;
              uint64_t v48 = v47;
              swift_bridgeObjectRelease(v34);
              uint64_t v35 = static String._fromSubstring(_:)(v42, v44, v46, v48);
              unint64_t v34 = v49;
              swift_bridgeObjectRelease(v48);
            }
          }

          swift_bridgeObjectRetain(a6);
          uint64_t v50 = (char *)a7;
          uint64_t v51 = swift_bridgeObjectRetain(a7);
          if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0) {
            uint64_t v50 = sub_100057AB8(0LL, *(void *)(a7 + 16) + 1LL, 1, (char *)a7);
          }
          unint64_t v53 = *((void *)v50 + 2);
          unint64_t v52 = *((void *)v50 + 3);
          if (v53 >= v52 >> 1) {
            uint64_t v50 = sub_100057AB8((char *)(v52 > 1), v53 + 1, 1, v50);
          }
          *((void *)v50 + 2) = v53 + 1;
          __int128 v54 = &v50[16 * v53];
          *((void *)v54 + 4) = a5;
          *((void *)v54 + 5) = a6;
          swift_bridgeObjectRelease(a7);
          swift_bridgeObjectRelease(a6);
          swift_bridgeObjectRetain(v34);
          unint64_t v15 = sub_10004E9B4(45LL, 0xE100000000000000LL, v35, v34);
          unint64_t v14 = v55;
          swift_bridgeObjectRelease(v50);
          swift_bridgeObjectRelease_n(v34, 2LL);
          char v18 = 0;
LABEL_35:
          if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
            uint64_t v12 = sub_100057BB8(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
          }
          unint64_t v57 = *((void *)v12 + 2);
          unint64_t v56 = *((void *)v12 + 3);
          if (v57 >= v56 >> 1) {
            uint64_t v12 = sub_100057BB8((char *)(v56 > 1), v57 + 1, 1, v12);
          }
          *((void *)v12 + 2) = v57 + 1;
          __int128 v13 = &v12[24 * v57];
          *((void *)v13 + 4) = v15;
          *((void *)v13 + 5) = v14;
          v13[48] = v18;
          goto LABEL_6;
        }

        if ((a3 & 1) != 0)
        {
          if (v17 == 2)
          {
            if (!v63)
            {
              _StringGuts.grow(_:)(54LL);
              v59._char countAndFlagsBits = 0x272079654BLL;
              v59._object = (void *)0xE500000000000000LL;
              String.append(_:)(v59);
              swift_bridgeObjectRetain(a6);
              v60._char countAndFlagsBits = a5;
              v60._object = (void *)a6;
              String.append(_:)(v60);
              swift_bridgeObjectRelease(a6);
              v61._object = (void *)0x800000010009D8E0LL;
              v61._char countAndFlagsBits = 0xD00000000000002FLL;
              String.append(_:)(v61);
              uint64_t result = (char *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/NameSpecification.swift",  38LL,  2LL,  141LL,  0);
              __break(1u);
              return result;
            }

            swift_bridgeObjectRetain(a6);
            unint64_t v15 = String.subscript.getter(15LL, a5, a6);
            unint64_t v14 = v36;
            swift_bridgeObjectRelease(a6);
            char v18 = 64;
          }

          else
          {
LABEL_10:
            char v18 = v16 & 1 | 0x40;
            swift_bridgeObjectRetain(*((void *)v11 - 1));
          }

          goto LABEL_35;
        }
      }

uint64_t sub_10003EE78(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    String.subscript.getter(15LL, a3, a4);
    uint64_t v10 = v9;
    uint64_t v22 = a1;
    swift_bridgeObjectRetain(a2);
    Swift::String v11 = Character.uppercased()();
    swift_bridgeObjectRelease(v10);
    String.append(_:)(v11);
    swift_bridgeObjectRelease(v11._object);
    swift_bridgeObjectRetain(a4);
    unint64_t v12 = sub_100033710(1uLL, a3, a4);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    swift_bridgeObjectRelease(a4);
    v19._char countAndFlagsBits = static String._fromSubstring(_:)(v12, v14, v16, v18);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(object);
    return v22;
  }

  else
  {
    swift_bridgeObjectRetain(a2);
  }

  return a1;
}

unint64_t sub_10003EF9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Unicode.Scalar.Properties(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::String v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = a3;
  unint64_t v40 = a4;
  uint64_t v35 = 45LL;
  unint64_t v36 = 0xE100000000000000LL;
  unint64_t v12 = sub_100030520();
  if ((StringProtocol.contains<A>(_:)(&v35, &type metadata for String, &type metadata for String, v12, v12) & 1) != 0)
  {
    uint64_t v35 = a1;
    unint64_t v36 = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v13 = 45LL;
LABEL_5:
    unint64_t v14 = 0xE100000000000000LL;
    String.append(_:)(*(Swift::String *)&v13);
    uint64_t v15 = a3;
    unint64_t v16 = a4;
LABEL_26:
    String.append(_:)(*(Swift::String *)&v15);
    return v35;
  }

  uint64_t v35 = 95LL;
  unint64_t v36 = 0xE100000000000000LL;
  if ((StringProtocol.contains<A>(_:)(&v35, &type metadata for String, &type metadata for String, v12, v12) & 1) != 0)
  {
    uint64_t v35 = a1;
    unint64_t v36 = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v13 = 95LL;
    goto LABEL_5;
  }

  uint64_t v17 = sub_10005141C(a3, a4);
  if (!v18 || (v19 = v18, char v20 = Character.isLowercase.getter(v17), swift_bridgeObjectRelease(v19), (v20 & 1) == 0))
  {
LABEL_25:
    uint64_t v35 = a1;
    unint64_t v36 = a2;
    swift_bridgeObjectRetain(a2);
    v33._unint64_t countAndFlagsBits = 45LL;
    v33._object = (void *)0xE100000000000000LL;
    String.append(_:)(v33);
    uint64_t v15 = v39;
    unint64_t v16 = v40;
    goto LABEL_26;
  }

  uint64_t v21 = HIBYTE(a4) & 0xF;
  uint64_t v35 = a3;
  unint64_t v36 = a4;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v37 = 0LL;
  uint64_t v38 = v21;
  swift_bridgeObjectRetain_n(a4, 2LL);
  Swift::String_optional v22 = String.Iterator.next()();
  if (!v22.value._object)
  {
LABEL_24:
    unint64_t v32 = v36;
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(v32);
    goto LABEL_25;
  }

  unint64_t countAndFlagsBits = v22.value._countAndFlagsBits;
  object = v22.value._object;
  while (1)
  {
    if ((Character._isSingleScalar.getter(countAndFlagsBits, object) & 1) == 0) {
      goto LABEL_15;
    }
    unint64_t result = sub_100050EA8(countAndFlagsBits, (unint64_t)object);
    if ((result & 0x100000000LL) != 0) {
      break;
    }
    uint64_t v26 = Unicode.Scalar.properties.getter(result);
    char v27 = Unicode.Scalar.Properties.isUppercase.getter(v26);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v27 & 1) != 0) {
      goto LABEL_28;
    }
LABEL_15:
    if ((Character._isUppercased.getter(countAndFlagsBits, object) & 1) != 0)
    {
      if ((Character._isSingleScalar.getter(countAndFlagsBits, object) & 1) != 0)
      {
        unint64_t result = sub_100050EA8(countAndFlagsBits, (unint64_t)object);
        if ((result & 0x100000000LL) != 0) {
          goto LABEL_31;
        }
        uint64_t v28 = Unicode.Scalar.properties.getter(result);
        char v29 = Unicode.Scalar.Properties.isCased.getter(v28);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        if ((v29 & 1) != 0) {
          goto LABEL_28;
        }
      }

      if ((Character._isUppercased.getter(countAndFlagsBits, object) & 1) == 0)
      {
LABEL_28:
        swift_bridgeObjectRelease(object);
LABEL_29:
        unint64_t v34 = v36;
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(v34);
        return sub_10003EE78(a1, a2, v39, v40);
      }

      char v30 = Character._isLowercased.getter(countAndFlagsBits, object);
      swift_bridgeObjectRelease(object);
      if ((v30 & 1) == 0) {
        goto LABEL_29;
      }
    }

    else
    {
      swift_bridgeObjectRelease(object);
    }

    Swift::String_optional v31 = String.Iterator.next()();
    unint64_t countAndFlagsBits = v31.value._countAndFlagsBits;
    object = v31.value._object;
    if (!v31.value._object) {
      goto LABEL_24;
    }
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10003F288(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v2 = 0LL;
  uint64_t v3 = result + 48;
  uint64_t v4 = -(uint64_t)v1;
  Swift::UInt v5 = _swiftEmptyArrayStorage;
  uint64_t v16 = result + 48;
  unint64_t v17 = *(void *)(result + 16);
  do
  {
    uint64_t v18 = v5;
    if (v2 <= v1) {
      unint64_t v6 = v1;
    }
    else {
      unint64_t v6 = v2;
    }
    uint64_t v7 = -(uint64_t)v6;
    for (uint64_t i = (char *)(v3 + 24 * v2++); ; i += 24)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }

      uint64_t v9 = *((void *)i - 2);
      uint64_t v10 = *((void *)i - 1);
      int v11 = *i;
      sub_10003F6B0(v9, v10, *i);
      sub_10003F6B0(v9, v10, v11);
      char v12 = sub_100059220((uint64_t)v19, v9, v10, v11);
      sub_10003F434(v19[0], v19[1], v20);
      if ((v12 & 1) != 0) {
        break;
      }
      unint64_t result = sub_10003F434(v9, v10, v11);
      ++v2;
      if (v4 + v2 == 1) {
        return (uint64_t)v18;
      }
    }

    Swift::UInt v5 = v18;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native(v18);
    uint64_t v21 = v18;
    if ((result & 1) == 0)
    {
      unint64_t result = (uint64_t)sub_10004FDC8(0LL, v18[2] + 1LL, 1);
      Swift::UInt v5 = v21;
    }

    unint64_t v14 = v5[2];
    unint64_t v13 = v5[3];
    if (v14 >= v13 >> 1)
    {
      unint64_t result = (uint64_t)sub_10004FDC8((char *)(v13 > 1), v14 + 1, 1);
      Swift::UInt v5 = v21;
    }

    uint64_t v5[2] = v14 + 1;
    uint64_t v15 = &v5[3 * v14];
    v15[4] = v9;
    v15[5] = v10;
    *((_BYTE *)v15 + 48) = v11;
    uint64_t v3 = v16;
    unint64_t v1 = v17;
  }

  while (v4 + v2);
  return (uint64_t)v5;
}

uint64_t sub_10003F434(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0x80) == 0) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_10003F444( uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (!(a3 >> 6))
  {
    if (a6 >= 0x40u)
    {
LABEL_21:
      char v9 = 0;
      return v9 & 1;
    }

    goto LABEL_6;
  }

  if (a3 >> 6 == 1)
  {
    if ((a6 & 0xC0) != 0x40) {
      goto LABEL_21;
    }
LABEL_6:
    if (a1 == a4 && a2 == a5
      || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL), v9 = 0, (v8 & 1) != 0))
    {
      char v9 = ((a3 & 1) == 0) ^ a6;
    }

    return v9 & 1;
  }

  if (a2 | a1 || a3 != 128)
  {
    if ((a6 & 0xC0) != 0x80 || a4 != 1 || a5 || a6 != 128) {
      goto LABEL_21;
    }
  }

  else if ((a6 & 0xC0) != 0x80 || a5 | a4 || a6 != 128)
  {
    goto LABEL_21;
  }

  char v9 = 1;
  return v9 & 1;
}

BOOL _s14ArgumentParser17NameSpecificationV7ElementV23__derived_struct_equalsySbAE_AEtFZ_0( uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  int v6 = a3;
  int v7 = a6;
  if (a3 >> 6)
  {
    if (a3 >> 6 != 1)
    {
      if (a2 | a1 || a3 != 128)
      {
        if ((a6 & 0xC0) != 0x80 || a4 != 1 || a5) {
          return 0LL;
        }
      }

      else if ((a6 & 0xC0) != 0x80 || a5 | a4)
      {
        return 0LL;
      }

      return a6 == 128;
    }

    if ((a6 & 0xC0) != 0x40) {
      return 0LL;
    }
    if (a1 == a4 && a2 == a5) {
      return (a3 & 1) == (a6 & 1);
    }
  }

  else
  {
    if (a6 >= 0x40u) {
      return 0LL;
    }
    if (a1 == a4 && a2 == a5) {
      return ((v6 ^ v7) & 1) == 0;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL) & 1) != 0) {
    return ((v6 ^ v7) & 1) == 0;
  }
  return 0LL;
}

unint64_t sub_10003F610()
{
  unint64_t result = qword_1000B9368;
  if (!qword_1000B9368)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NameSpecification.Element,  &type metadata for NameSpecification.Element);
    atomic_store(result, (unint64_t *)&qword_1000B9368);
  }

  return result;
}

unint64_t sub_10003F658()
{
  unint64_t result = qword_1000B9378;
  if (!qword_1000B9378)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NameSpecification.Element,  &type metadata for NameSpecification.Element);
    atomic_store(result, (unint64_t *)&qword_1000B9378);
  }

  return result;
}

ValueMetadata *type metadata accessor for NameSpecification()
{
  return &type metadata for NameSpecification;
}

uint64_t sub_10003F6B0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0x80) == 0) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for NameSpecification.Element()
{
  return &type metadata for NameSpecification.Element;
}

uint64_t destroy for NameSpecification.Element.Representation(uint64_t a1)
{
  return sub_10003F434(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s14ArgumentParser17NameSpecificationV7ElementV14RepresentationOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10003F6B0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s14ArgumentParser17NameSpecificationV7ElementV14RepresentationOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10003F6B0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10003F434(v6, v7, v8);
  return a1;
}

uint64_t _s14ArgumentParser17NameSpecificationV7ElementV14RepresentationOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10003F434(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Name(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Name(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 126;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }

  return result;
}

uint64_t sub_10003F878(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10003F898(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_10003F8A8(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | ((_BYTE)a2 << 6);
  }

  else
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    *(_BYTE *)(result + 16) = 0x80;
  }

  return result;
}

ValueMetadata *type metadata accessor for NameSpecification.Element.Representation()
{
  return &type metadata for NameSpecification.Element.Representation;
}

unint64_t sub_10003F8E8()
{
  unint64_t result = qword_1000B9380;
  if (!qword_1000B9380)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009898C, &type metadata for NameSpecification.Element.Representation);
    atomic_store(result, (unint64_t *)&qword_1000B9380);
  }

  return result;
}

uint64_t Option.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = type metadata accessor for Option(0LL, a2, a3, a4);
  sub_100033F10((uint64_t)a1, (uint64_t)v10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100098A70, v7);
  sub_10006EB30(v10, v7, WitnessTable, a5);
  return sub_1000062D8(a1);
}

uint64_t type metadata accessor for Option(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037B54(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Option);
}

void Option.init()()
{
}

uint64_t Option.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = type metadata accessor for Parsed(0LL, v7, a2, a3);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, v5, v8);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x1000000000000246LL,  0x800000010009D5D0LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  82LL,  0);
  __break(1u);
  return result;
}

void (*Option.wrappedValue.modify( void *a1, uint64_t a2))(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  _OWORD v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  Option.wrappedValue.getter(a2, v10, v11, (uint64_t)v9);
  return sub_1000341A8;
}

uint64_t sub_10003FBA8@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Option.init(from:)(a1, *(void *)(a2 + 16), a3, a4, a5);
}

unint64_t Option.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v12 = type metadata accessor for Parsed(0LL, v3, v10, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v18 - v14, v2, v12);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return 0xD000000000000014LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v15, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v16 = String.init<A>(describing:)(v7, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  return v16;
}

uint64_t static ArrayParsingStrategy.upToNextOption.getter()
{
  return 3LL;
}

uint64_t Option<A>.init(wrappedValue:name:parsing:help:completion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v31 = a7;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v26 = a4;
  int v27 = a3;
  uint64_t v28 = a1;
  uint64_t v32 = a9;
  uint64_t v12 = type metadata accessor for Parsed(0LL, a8, a3, a4);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v25 - v14);
  uint64_t v16 = *(void *)(a8 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (v17 + 90) & ~v17;
  unint64_t v19 = (*(void *)(v16 + 64) + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_1000B11B0, v19 + 17, v17 | 7);
  *(void *)(v20 + 16) = a8;
  *(void *)(v20 + 24) = a10;
  *(void *)(v20 + 32) = a2;
  sub_1000367F0(v26, v20 + 40);
  *(_BYTE *)(v20 + 89) = v27;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v20 + v18, v28, a8);
  unint64_t v21 = v20 + v19;
  uint64_t v22 = v30;
  *(void *)unint64_t v21 = v29;
  *(void *)(v21 + 8) = v22;
  *(_BYTE *)(v21 + 16) = v31;
  sub_10006F11C((uint64_t)sub_100042654, v20, a8, v23, v15);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v13 + 32))(v32, v15, v12);
}

uint64_t sub_10003FE7C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v44 = a8;
  uint64_t v42 = a7;
  int v46 = a6;
  uint64_t v43 = a5;
  uint64_t v41 = a1;
  uint64_t v45 = type metadata accessor for Optional(0LL, a11);
  uint64_t v15 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v17 = (char *)&v41 - v16;
  uint64_t v20 = type metadata accessor for Bare(0LL, a11, v18, v19);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v21 = swift_bridgeObjectRetain(a4);
  uint64_t v22 = sub_10007F258(v21, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  uint64_t v23 = *(void *)(a11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v17, v42, a11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v17, 0LL, 1LL, a11);
  Swift::String v24 = v43;
  sub_100037ACC(v43);
  uint64_t v25 = v44;
  sub_100037B40(v44, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000999FC, v20);
  double v27 = sub_10005F3F0( v41,  a2,  a3,  (unint64_t)v22,  (uint64_t)v24,  v46,  (uint64_t)v17,  v47,  v25,  a9,  a10,  v20,  WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v15 + 8))(v17, v45, v27);
  uint64_t v28 = sub_100005104(&qword_1000B9230);
  uint64_t v29 = (_OWORD *)swift_allocObject(v28, 224LL, 7LL);
  __int128 v30 = v47[8];
  __int128 v31 = v47[10];
  __int128 v32 = v47[11];
  v29[11] = v47[9];
  v29[12] = v31;
  v29[13] = v32;
  __int128 v33 = v47[4];
  __int128 v34 = v47[6];
  __int128 v35 = v47[7];
  v29[7] = v47[5];
  v29[8] = v34;
  v29[9] = v35;
  v29[10] = v30;
  __int128 v36 = v47[0];
  __int128 v37 = v47[1];
  v29[1] = xmmword_100096510;
  v29[2] = v36;
  __int128 v38 = v47[2];
  __int128 v39 = v47[3];
  v29[3] = v37;
  void v29[4] = v38;
  v29[5] = v39;
  v29[6] = v33;
  return sub_100079288((uint64_t)v29);
}

uint64_t Option<A>.init(wrappedValue:name:parsing:completion:help:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v22 = a7;
  int v23 = a6;
  uint64_t v17 = *(void *)(a8 - 8);
  __chkstk_darwin(a1);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v20);
  Option<A>.init(wrappedValue:name:parsing:help:completion:)((uint64_t)v19, a2, a3, v22, a4, a5, v23, a8, a9, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a8);
}

uint64_t Option<A>.init(name:parsing:help:completion:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v25 = a6;
  uint64_t v24 = a5;
  uint64_t v26 = a9;
  uint64_t v15 = type metadata accessor for Parsed(0LL, a7, a3, a4);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v23 - v17);
  uint64_t v19 = swift_allocObject(&unk_1000B11D8, 113LL, 7LL);
  *(void *)(v19 + 16) = a7;
  *(void *)(v19 + 24) = a8;
  *(void *)(v19 + 32) = a1;
  sub_1000367F0(a3, v19 + 40);
  *(_BYTE *)(v19 + 89) = a2;
  uint64_t v20 = v24;
  *(void *)(v19 + 96) = a4;
  *(void *)(v19 + 104) = v20;
  *(_BYTE *)(v19 + 112) = v25;
  sub_10006F11C((uint64_t)sub_1000426C0, v19, a7, v21, v18);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v16 + 32))(v26, v18, v15);
}

uint64_t sub_1000402C4( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v41 = a7;
  int v44 = a6;
  unint64_t v40 = a5;
  uint64_t v43 = type metadata accessor for Optional(0LL, a10);
  uint64_t v42 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v19 = type metadata accessor for Bare(0LL, a10, v17, v18);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v20 = swift_bridgeObjectRetain(a4);
  uint64_t v21 = sub_10007F258(v20, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56LL))(v16, 1LL, 1LL, a10);
  uint64_t v22 = v40;
  sub_100037ACC(v40);
  uint64_t v23 = v41;
  sub_100037B40(v41, a8, a9);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000999FC, v19);
  double v25 = sub_10005F3F0( a1,  a2,  a3,  (unint64_t)v21,  (uint64_t)v22,  v44,  (uint64_t)v16,  v45,  v23,  a8,  a9,  v19,  WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v42 + 8))(v16, v43, v25);
  uint64_t v26 = sub_100005104(&qword_1000B9230);
  double v27 = (_OWORD *)swift_allocObject(v26, 224LL, 7LL);
  __int128 v28 = v45[8];
  __int128 v29 = v45[10];
  __int128 v30 = v45[11];
  v27[11] = v45[9];
  v27[12] = v29;
  v27[13] = v30;
  __int128 v31 = v45[4];
  __int128 v32 = v45[6];
  __int128 v33 = v45[7];
  v27[7] = v45[5];
  v27[8] = v32;
  v27[9] = v33;
  v27[10] = v28;
  __int128 v34 = v45[0];
  __int128 v35 = v45[1];
  v27[1] = xmmword_100096510;
  v27[2] = v34;
  __int128 v36 = v45[2];
  __int128 v37 = v45[3];
  v27[3] = v35;
  v27[4] = v36;
  v27[5] = v37;
  v27[6] = v31;
  return sub_100079288((uint64_t)v27);
}

uint64_t Option.init(wrappedValue:name:parsing:help:completion:transform:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v31 = a8;
  uint64_t v32 = a5;
  int v34 = a7;
  uint64_t v33 = a6;
  int v29 = a3;
  uint64_t v30 = a1;
  uint64_t v35 = a9;
  uint64_t v28 = a10;
  uint64_t v13 = type metadata accessor for Parsed(0LL, a11, a3, a4);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v28 - v15);
  uint64_t v17 = *(void *)(a11 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v18 + 104) & ~v18;
  unint64_t v20 = (*(void *)(v17 + 64) + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_1000B1200, v20 + 17, v18 | 7);
  *(void *)(v21 + 16) = a11;
  *(void *)(v21 + 24) = a2;
  sub_1000367F0(a4, v21 + 32);
  *(_BYTE *)(v21 + 81) = v29;
  uint64_t v22 = v30;
  uint64_t v23 = v28;
  *(void *)(v21 + 88) = v31;
  *(void *)(v21 + 96) = v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v21 + v19, v22, a11);
  unint64_t v24 = v21 + v20;
  uint64_t v25 = v33;
  *(void *)unint64_t v24 = v32;
  *(void *)(v24 + 8) = v25;
  *(_BYTE *)(v24 + 16) = v34;
  sub_10006F11C((uint64_t)sub_100042774, v21, a11, v26, v16);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v14 + 32))(v35, v16, v13);
}

uint64_t sub_100040650( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v46 = a8;
  uint64_t v50 = a7;
  int v49 = a6;
  uint64_t v45 = a5;
  uint64_t v43 = a1;
  uint64_t v44 = a11;
  uint64_t v48 = type metadata accessor for Optional(0LL, a13);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v21 = type metadata accessor for Bare(0LL, a13, v19, v20);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v22 = swift_bridgeObjectRetain(a4);
  uint64_t v23 = sub_10007F258(v22, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  uint64_t v24 = *(void *)(a13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v18, a9, a13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v18, 0LL, 1LL, a13);
  uint64_t v25 = v45;
  sub_100037ACC(v45);
  uint64_t v26 = v46;
  swift_retain(v46);
  uint64_t v27 = v44;
  sub_100037B40(a10, v44, a12);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099A24, v21);
  double v29 = sub_10005F6B8( v43,  a2,  a3,  (unint64_t)v23,  (uint64_t)v25,  v49,  v50,  v51,  v26,  (uint64_t)v18,  a10,  v27,  a12,  v21,  WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v47 + 8))(v18, v48, v29);
  uint64_t v30 = sub_100005104(&qword_1000B9230);
  uint64_t v31 = (_OWORD *)swift_allocObject(v30, 224LL, 7LL);
  __int128 v32 = v51[8];
  __int128 v33 = v51[10];
  __int128 v34 = v51[11];
  v31[11] = v51[9];
  v31[12] = v33;
  v31[13] = v34;
  __int128 v35 = v51[4];
  __int128 v36 = v51[6];
  __int128 v37 = v51[7];
  v31[7] = v51[5];
  v31[8] = v36;
  v31[9] = v37;
  v31[10] = v32;
  __int128 v38 = v51[0];
  __int128 v39 = v51[1];
  v31[1] = xmmword_100096510;
  void v31[2] = v38;
  __int128 v40 = v51[2];
  __int128 v41 = v51[3];
  v31[3] = v39;
  v31[4] = v40;
  v31[5] = v41;
  v31[6] = v35;
  return sub_100079288((uint64_t)v31);
}

uint64_t Option.init(name:parsing:help:completion:transform:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v24 = a5;
  uint64_t v25 = a8;
  int v26 = a6;
  uint64_t v27 = a9;
  uint64_t v15 = type metadata accessor for Parsed(0LL, a10, a3, a4);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v24 - v17);
  uint64_t v19 = swift_allocObject(&unk_1000B1228, 121LL, 7LL);
  *(void *)(v19 + 16) = a10;
  *(void *)(v19 + 24) = a1;
  sub_1000367F0(a3, v19 + 32);
  *(_BYTE *)(v19 + 81) = a2;
  uint64_t v20 = v25;
  *(void *)(v19 + 88) = a7;
  *(void *)(v19 + 96) = v20;
  uint64_t v21 = v24;
  *(void *)(v19 + 104) = a4;
  *(void *)(v19 + 112) = v21;
  *(_BYTE *)(v19 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v26;
  sub_10006F11C((uint64_t)sub_1000427E4, v19, a10, v22, v18);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v16 + 32))(v27, v18, v15);
}

uint64_t sub_1000409E0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v43 = a8;
  uint64_t v47 = a7;
  int v46 = a6;
  uint64_t v42 = a5;
  uint64_t v41 = a1;
  uint64_t v45 = type metadata accessor for Optional(0LL, a12);
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v20 = type metadata accessor for Bare(0LL, a12, v18, v19);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v21 = swift_bridgeObjectRetain(a4);
  uint64_t v22 = sub_10007F258(v21, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a12 - 8) + 56LL))(v17, 1LL, 1LL, a12);
  uint64_t v23 = v42;
  sub_100037ACC(v42);
  uint64_t v24 = v43;
  swift_retain(v43);
  sub_100037B40(a9, a10, a11);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099A24, v20);
  double v26 = sub_10005F6B8( v41,  a2,  a3,  (unint64_t)v22,  (uint64_t)v23,  v46,  v47,  v48,  v24,  (uint64_t)v17,  a9,  a10,  a11,  v20,  WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v44 + 8))(v17, v45, v26);
  uint64_t v27 = sub_100005104(&qword_1000B9230);
  uint64_t v28 = (_OWORD *)swift_allocObject(v27, 224LL, 7LL);
  __int128 v29 = v48[8];
  __int128 v30 = v48[10];
  __int128 v31 = v48[11];
  v28[11] = v48[9];
  v28[12] = v30;
  v28[13] = v31;
  __int128 v32 = v48[4];
  __int128 v33 = v48[6];
  __int128 v34 = v48[7];
  v28[7] = v48[5];
  v28[8] = v33;
  void v28[9] = v34;
  v28[10] = v29;
  __int128 v35 = v48[0];
  __int128 v36 = v48[1];
  v28[1] = xmmword_100096510;
  _OWORD v28[2] = v35;
  __int128 v37 = v48[2];
  __int128 v38 = v48[3];
  v28[3] = v36;
  void v28[4] = v37;
  v28[5] = v38;
  v28[6] = v32;
  return sub_100079288((uint64_t)v28);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v27 = a6;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v28 = a9;
  uint64_t v14 = type metadata accessor for Optional(255LL, a7);
  uint64_t v17 = type metadata accessor for Parsed(0LL, v14, v15, v16);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v25 - v19);
  uint64_t v21 = swift_allocObject(&unk_1000B1250, 113LL, 7LL);
  *(void *)(v21 + 16) = a7;
  *(void *)(v21 + 24) = a8;
  *(void *)(v21 + 32) = a1;
  sub_1000367F0(a3, v21 + 40);
  *(_BYTE *)(v21 + 89) = a2;
  uint64_t v22 = v26;
  *(void *)(v21 + 96) = v25;
  *(void *)(v21 + 104) = v22;
  *(_BYTE *)(v21 + 112) = v27;
  sub_10006F11C((uint64_t)sub_1000427F4, v21, v14, v23, v20);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v18 + 32))(v28, v20, v17);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v33 = a7;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v27 = a2;
  uint64_t v28 = a4;
  int v29 = a3;
  uint64_t v30 = a1;
  uint64_t v34 = a9;
  uint64_t v11 = type metadata accessor for Optional(255LL, a8);
  uint64_t v14 = type metadata accessor for Parsed(0LL, v11, v12, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v27 - v16);
  uint64_t v18 = *(void *)(v11 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (v19 + 90) & ~v19;
  unint64_t v21 = (*(void *)(v18 + 64) + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_1000B1278, v21 + 17, v19 | 7);
  *(void *)(v22 + 16) = a8;
  *(void *)(v22 + 24) = a10;
  *(void *)(v22 + 32) = v27;
  sub_1000367F0(v28, v22 + 40);
  *(_BYTE *)(v22 + 89) = v29;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v22 + v20, v30, v11);
  unint64_t v23 = v22 + v21;
  uint64_t v24 = v32;
  *(void *)unint64_t v23 = v31;
  *(void *)(v23 + 8) = v24;
  *(_BYTE *)(v23 + 16) = v33;
  sub_10006F11C((uint64_t)sub_100042904, v22, v11, v25, v17);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v15 + 32))(v34, v17, v14);
}

uint64_t sub_100040EAC( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v17 = type metadata accessor for Optional(0LL, a11);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v18 = swift_bridgeObjectRetain(a4);
  uint64_t v19 = sub_10007F258(v18, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  sub_100037ACC(a5);
  sub_100037B40(a8, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099870, v17);
  sub_10005F3F0(a1, a2, a3, (unint64_t)v19, (uint64_t)a5, a6, a7, v36, a8, a9, a10, v17, WitnessTable);
  uint64_t v21 = sub_100005104(&qword_1000B9230);
  uint64_t v22 = (_OWORD *)swift_allocObject(v21, 224LL, 7LL);
  __int128 v23 = v36[8];
  __int128 v24 = v36[10];
  __int128 v25 = v36[11];
  v22[11] = v36[9];
  v22[12] = v24;
  v22[13] = v25;
  __int128 v26 = v36[4];
  __int128 v27 = v36[6];
  __int128 v28 = v36[7];
  v22[7] = v36[5];
  v22[8] = v27;
  v22[9] = v28;
  v22[10] = v23;
  __int128 v29 = v36[0];
  __int128 v30 = v36[1];
  v22[1] = xmmword_100096510;
  v22[2] = v29;
  __int128 v31 = v36[2];
  __int128 v32 = v36[3];
  v22[3] = v30;
  v22[4] = v31;
  v22[5] = v32;
  v22[6] = v26;
  return sub_100079288((uint64_t)v22);
}

uint64_t Option.init<A>(name:parsing:help:completion:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v27 = a6;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v28 = a9;
  uint64_t v14 = type metadata accessor for Optional(255LL, a7);
  uint64_t v17 = type metadata accessor for Parsed(0LL, v14, v15, v16);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v25 - v19);
  uint64_t v21 = swift_allocObject(&unk_1000B12A0, 113LL, 7LL);
  *(void *)(v21 + 16) = a7;
  *(void *)(v21 + 24) = a8;
  *(void *)(v21 + 32) = a1;
  sub_1000367F0(a3, v21 + 40);
  *(_BYTE *)(v21 + 89) = a2;
  uint64_t v22 = v26;
  *(void *)(v21 + 96) = v25;
  *(void *)(v21 + 104) = v22;
  *(_BYTE *)(v21 + 112) = v27;
  sub_10006F11C((uint64_t)sub_1000427F4, v21, v14, v23, v20);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v18 + 32))(v28, v20, v17);
}

uint64_t sub_10004115C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v40 = a7;
  int v41 = a6;
  __int128 v39 = a5;
  uint64_t v38 = a1;
  uint64_t v15 = type metadata accessor for Optional(0LL, a10);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v38 - v17;
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v19 = swift_bridgeObjectRetain(a4);
  uint64_t v20 = sub_10007F258(v19, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56LL))(v18, 1LL, 1LL, a10);
  uint64_t v21 = v39;
  sub_100037ACC(v39);
  uint64_t v22 = v40;
  sub_100037B40(v40, a8, a9);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099870, v15);
  double v24 = sub_10005F3F0( v38,  a2,  a3,  (unint64_t)v20,  (uint64_t)v21,  v41,  (uint64_t)v18,  v42,  v22,  a8,  a9,  v15,  WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v16 + 8))(v18, v15, v24);
  uint64_t v25 = sub_100005104(&qword_1000B9230);
  uint64_t v26 = (_OWORD *)swift_allocObject(v25, 224LL, 7LL);
  __int128 v27 = v42[8];
  __int128 v28 = v42[10];
  __int128 v29 = v42[11];
  v26[11] = v42[9];
  v26[12] = v28;
  v26[13] = v29;
  __int128 v30 = v42[4];
  __int128 v31 = v42[6];
  __int128 v32 = v42[7];
  void v26[7] = v42[5];
  v26[8] = v31;
  void v26[9] = v32;
  v26[10] = v27;
  __int128 v33 = v42[0];
  __int128 v34 = v42[1];
  v26[1] = xmmword_100096510;
  void v26[2] = v33;
  __int128 v35 = v42[2];
  __int128 v36 = v42[3];
  v26[3] = v34;
  v26[4] = v35;
  void v26[5] = v36;
  v26[6] = v30;
  return sub_100079288((uint64_t)v26);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:transform:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  uint64_t v27 = a7;
  int v30 = a6;
  uint64_t v31 = a9;
  uint64_t v14 = type metadata accessor for Optional(255LL, a10);
  uint64_t v17 = type metadata accessor for Parsed(0LL, v14, v15, v16);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v26 - v19);
  uint64_t v21 = swift_allocObject(&unk_1000B12C8, 121LL, 7LL);
  *(void *)(v21 + 16) = a10;
  *(void *)(v21 + 24) = a1;
  sub_1000367F0(a3, v21 + 32);
  *(_BYTE *)(v21 + 81) = a2;
  uint64_t v22 = v29;
  *(void *)(v21 + 88) = v27;
  *(void *)(v21 + 96) = v22;
  uint64_t v23 = v28;
  *(void *)(v21 + 104) = a4;
  *(void *)(v21 + 112) = v23;
  *(_BYTE *)(v21 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v30;
  sub_10006F11C((uint64_t)sub_1000429B0, v21, v14, v24, v20);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v18 + 32))(v31, v20, v17);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:transform:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v35 = a8;
  uint64_t v36 = a5;
  int v38 = a7;
  uint64_t v37 = a6;
  int v33 = a3;
  uint64_t v34 = a1;
  uint64_t v39 = a9;
  uint64_t v31 = a4;
  uint64_t v32 = a10;
  uint64_t v12 = type metadata accessor for Optional(255LL, a11);
  uint64_t v15 = type metadata accessor for Parsed(0LL, v12, v13, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v30 - v17);
  uint64_t v19 = *(void *)(v12 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (v20 + 104) & ~v20;
  unint64_t v22 = (*(void *)(v19 + 64) + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = swift_allocObject(&unk_1000B12F0, v22 + 17, v20 | 7);
  *(void *)(v23 + 16) = a11;
  *(void *)(v23 + 24) = a2;
  sub_1000367F0(v31, v23 + 32);
  *(_BYTE *)(v23 + 81) = v33;
  uint64_t v24 = v34;
  uint64_t v25 = v32;
  *(void *)(v23 + 88) = v35;
  *(void *)(v23 + 96) = v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v23 + v21, v24, v12);
  unint64_t v26 = v23 + v22;
  uint64_t v27 = v37;
  *(void *)unint64_t v26 = v36;
  *(void *)(v26 + 8) = v27;
  *(_BYTE *)(v26 + 16) = v38;
  sub_10006F11C((uint64_t)sub_100042ACC, v23, v12, v28, v18);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v16 + 32))(v39, v18, v15);
}

uint64_t sub_1000415F8( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v18 = type metadata accessor for Optional(0LL, a13);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v19 = swift_bridgeObjectRetain(a4);
  uint64_t v20 = sub_10007F258(v19, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  sub_100037ACC(a5);
  swift_retain(a8);
  sub_100037B40(a10, a11, a12);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099854, v18);
  sub_10005F6B8(a1, a2, a3, (unint64_t)v20, (uint64_t)a5, a6, a7, v38, a8, a9, a10, a11, a12, v18, WitnessTable);
  uint64_t v22 = sub_100005104(&qword_1000B9230);
  uint64_t v23 = (_OWORD *)swift_allocObject(v22, 224LL, 7LL);
  __int128 v24 = v38[8];
  __int128 v25 = v38[10];
  __int128 v26 = v38[11];
  v23[11] = v38[9];
  v23[12] = v25;
  v23[13] = v26;
  __int128 v27 = v38[4];
  __int128 v28 = v38[6];
  __int128 v29 = v38[7];
  v23[7] = v38[5];
  v23[8] = v28;
  v23[9] = v29;
  v23[10] = v24;
  __int128 v30 = v38[0];
  __int128 v31 = v38[1];
  v23[1] = xmmword_100096510;
  v23[2] = v30;
  __int128 v32 = v38[2];
  __int128 v33 = v38[3];
  v23[3] = v31;
  v23[4] = v32;
  v23[5] = v33;
  v23[6] = v27;
  return sub_100079288((uint64_t)v23);
}

uint64_t Option.init<A>(name:parsing:help:completion:transform:)@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  uint64_t v27 = a7;
  int v30 = a6;
  uint64_t v31 = a9;
  uint64_t v14 = type metadata accessor for Optional(255LL, a10);
  uint64_t v17 = type metadata accessor for Parsed(0LL, v14, v15, v16);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v26 - v19);
  uint64_t v21 = swift_allocObject(&unk_1000B1318, 121LL, 7LL);
  *(void *)(v21 + 16) = a10;
  *(void *)(v21 + 24) = a1;
  sub_1000367F0(a3, v21 + 32);
  *(_BYTE *)(v21 + 81) = a2;
  uint64_t v22 = v29;
  *(void *)(v21 + 88) = v27;
  *(void *)(v21 + 96) = v22;
  uint64_t v23 = v28;
  *(void *)(v21 + 104) = a4;
  *(void *)(v21 + 112) = v23;
  *(_BYTE *)(v21 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v30;
  sub_10006F11C((uint64_t)sub_1000429B0, v21, v14, v24, v20);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v18 + 32))(v31, v20, v17);
}

uint64_t sub_1000418C4( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v44 = a8;
  uint64_t v46 = a7;
  int v45 = a6;
  uint64_t v43 = a5;
  uint64_t v41 = a1;
  uint64_t v42 = a9;
  uint64_t v16 = type metadata accessor for Optional(0LL, a12);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v39 - v18;
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v20 = swift_bridgeObjectRetain(a4);
  uint64_t v40 = sub_10007F258(v20, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a12 - 8) + 56LL))(v19, 1LL, 1LL, a12);
  uint64_t v21 = v43;
  sub_100037ACC(v43);
  uint64_t v22 = v44;
  swift_retain(v44);
  uint64_t v23 = v42;
  sub_100037B40(v42, a10, a11);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099854, v16);
  double v25 = sub_10005F6B8( v41,  a2,  a3,  (unint64_t)v40,  (uint64_t)v21,  v45,  v46,  v47,  v22,  (uint64_t)v19,  v23,  a10,  a11,  v16,  WitnessTable);
  (*(void (**)(char *, uint64_t, double))(v17 + 8))(v19, v16, v25);
  uint64_t v26 = sub_100005104(&qword_1000B9230);
  uint64_t v27 = (_OWORD *)swift_allocObject(v26, 224LL, 7LL);
  __int128 v28 = v47[8];
  __int128 v29 = v47[10];
  __int128 v30 = v47[11];
  v27[11] = v47[9];
  v27[12] = v29;
  v27[13] = v30;
  __int128 v31 = v47[4];
  __int128 v32 = v47[6];
  __int128 v33 = v47[7];
  v27[7] = v47[5];
  v27[8] = v32;
  v27[9] = v33;
  v27[10] = v28;
  __int128 v34 = v47[0];
  __int128 v35 = v47[1];
  v27[1] = xmmword_100096510;
  v27[2] = v34;
  __int128 v36 = v47[2];
  __int128 v37 = v47[3];
  v27[3] = v35;
  v27[4] = v36;
  v27[5] = v37;
  v27[6] = v31;
  return sub_100079288((uint64_t)v27);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject(&unk_1000B1340, 121LL, 7LL);
  *(void *)(v17 + 16) = a8;
  *(void *)(v17 + 24) = a9;
  *(void *)(v17 + 32) = a2;
  sub_1000367F0(a4, v17 + 40);
  *(_BYTE *)(v17 + 89) = a3;
  *(void *)(v17 + 96) = a1;
  *(void *)(v17 + 104) = a5;
  *(void *)(v17 + 112) = a6;
  *(_BYTE *)(v17 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a7;
  uint64_t v18 = type metadata accessor for Array(0LL, a8);
  sub_10006F11C((uint64_t)sub_100042BD8, v17, v18, v19, &v26);
  __int128 v24 = v26;
  char v25 = v27;
  uint64_t v22 = type metadata accessor for Parsed(0LL, v18, v20, v21);
  (*(void (**)(uint64_t *, __int128 *, uint64_t))(*(void *)(v22 - 8) + 32LL))(&v28, &v24, v22);
  return v28;
}

uint64_t sub_100041C18( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v17 = type metadata accessor for Array(0LL, a11);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v18 = swift_bridgeObjectRetain(a4);
  uint64_t v19 = sub_10007F258(v18, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  uint64_t v36 = a7;
  sub_100037ACC(a5);
  sub_100037B40(a8, a9, a10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000998B4, v17);
  sub_10005F3F0(a1, a2, a3, (unint64_t)v19, (uint64_t)a5, a6, (uint64_t)&v36, v37, a8, a9, a10, v17, WitnessTable);
  uint64_t v21 = sub_100005104(&qword_1000B9230);
  uint64_t v22 = (_OWORD *)swift_allocObject(v21, 224LL, 7LL);
  __int128 v23 = v37[8];
  __int128 v24 = v37[10];
  __int128 v25 = v37[11];
  v22[11] = v37[9];
  v22[12] = v24;
  v22[13] = v25;
  __int128 v26 = v37[4];
  __int128 v27 = v37[6];
  __int128 v28 = v37[7];
  v22[7] = v37[5];
  v22[8] = v27;
  v22[9] = v28;
  v22[10] = v23;
  __int128 v29 = v37[0];
  __int128 v30 = v37[1];
  v22[1] = xmmword_100096510;
  v22[2] = v29;
  __int128 v31 = v37[2];
  __int128 v32 = v37[3];
  v22[3] = v30;
  v22[4] = v31;
  v22[5] = v32;
  v22[6] = v26;
  return sub_100079288((uint64_t)v22);
}

uint64_t Option.init<A>(name:parsing:help:completion:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject(&unk_1000B1368, 113LL, 7LL);
  *(void *)(v16 + 16) = a7;
  *(void *)(v16 + 24) = a8;
  *(void *)(v16 + 32) = a1;
  sub_1000367F0(a3, v16 + 40);
  *(_BYTE *)(v16 + 89) = a2;
  *(void *)(v16 + 96) = a4;
  *(void *)(v16 + 104) = a5;
  *(_BYTE *)(v16 + 112) = a6;
  uint64_t v17 = type metadata accessor for Array(0LL, a7);
  sub_10006F11C((uint64_t)sub_100042C74, v16, v17, v18, &v25);
  __int128 v23 = v25;
  char v24 = v26;
  uint64_t v21 = type metadata accessor for Parsed(0LL, v17, v19, v20);
  (*(void (**)(uint64_t *, __int128 *, uint64_t))(*(void *)(v21 - 8) + 32LL))(&v27, &v23, v21);
  return v27;
}

uint64_t sub_100041EB0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v17 = type metadata accessor for Array(0LL, a10);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v18 = swift_bridgeObjectRetain(a4);
  uint64_t v19 = sub_10007F258(v18, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  uint64_t v35 = 0LL;
  sub_100037ACC(a5);
  sub_100037B40(a7, a8, a9);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000998B4, v17);
  sub_10005F3F0(a1, a2, a3, (unint64_t)v19, (uint64_t)a5, a6, (uint64_t)&v35, v36, a7, a8, a9, v17, WitnessTable);
  uint64_t v21 = sub_100005104(&qword_1000B9230);
  uint64_t v22 = (_OWORD *)swift_allocObject(v21, 224LL, 7LL);
  __int128 v23 = v36[8];
  __int128 v24 = v36[10];
  __int128 v25 = v36[11];
  v22[11] = v36[9];
  v22[12] = v24;
  v22[13] = v25;
  __int128 v26 = v36[4];
  __int128 v27 = v36[6];
  __int128 v28 = v36[7];
  v22[7] = v36[5];
  v22[8] = v27;
  v22[9] = v28;
  v22[10] = v23;
  __int128 v29 = v36[0];
  __int128 v30 = v36[1];
  v22[1] = xmmword_100096510;
  v22[2] = v29;
  __int128 v31 = v36[2];
  __int128 v32 = v36[3];
  v22[3] = v30;
  v22[4] = v31;
  v22[5] = v32;
  v22[6] = v26;
  return sub_100079288((uint64_t)v22);
}

uint64_t Option.init<A>(wrappedValue:name:parsing:help:completion:transform:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = swift_allocObject(&unk_1000B1390, 129LL, 7LL);
  *(void *)(v17 + 16) = a10;
  *(void *)(v17 + 24) = a2;
  sub_1000367F0(a4, v17 + 32);
  *(_BYTE *)(v17 + 81) = a3;
  *(void *)(v17 + 88) = a8;
  *(void *)(v17 + 96) = a9;
  *(void *)(v17 + 104) = a1;
  *(void *)(v17 + 112) = a5;
  *(void *)(v17 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a6;
  *(_BYTE *)(v17 + 128) = a7;
  uint64_t v18 = type metadata accessor for Array(0LL, a10);
  sub_10006F11C((uint64_t)sub_100042D24, v17, v18, v19, &v27);
  __int128 v25 = v27;
  char v26 = v28;
  uint64_t v22 = type metadata accessor for Parsed(0LL, v18, v20, v21);
  (*(void (**)(uint64_t *, __int128 *, uint64_t))(*(void *)(v22 - 8) + 32LL))(&v29, &v25, v22);
  return v29;
}

uint64_t sub_10004214C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v17 = type metadata accessor for Array(0LL, a13);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v18 = swift_bridgeObjectRetain(a4);
  uint64_t v19 = sub_10007F258(v18, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  uint64_t v38 = a9;
  sub_100037ACC(a5);
  swift_retain(a8);
  sub_100037B40(a10, a11, a12);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099898, v17);
  sub_10005F6B8( a1,  a2,  a3,  (unint64_t)v19,  (uint64_t)a5,  a6,  a7,  v39,  a8,  (uint64_t)&v38,  a10,  a11,  a12,  v17,  WitnessTable);
  uint64_t v21 = sub_100005104(&qword_1000B9230);
  uint64_t v22 = (_OWORD *)swift_allocObject(v21, 224LL, 7LL);
  __int128 v23 = v39[8];
  __int128 v24 = v39[10];
  __int128 v25 = v39[11];
  v22[11] = v39[9];
  v22[12] = v24;
  v22[13] = v25;
  __int128 v26 = v39[4];
  __int128 v27 = v39[6];
  __int128 v28 = v39[7];
  v22[7] = v39[5];
  v22[8] = v27;
  v22[9] = v28;
  v22[10] = v23;
  __int128 v29 = v39[0];
  __int128 v30 = v39[1];
  v22[1] = xmmword_100096510;
  v22[2] = v29;
  __int128 v31 = v39[2];
  __int128 v32 = v39[3];
  v22[3] = v30;
  v22[4] = v31;
  v22[5] = v32;
  v22[6] = v26;
  return sub_100079288((uint64_t)v22);
}

uint64_t Option.init<A>(name:parsing:help:completion:transform:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = swift_allocObject(&unk_1000B13B8, 121LL, 7LL);
  *(void *)(v17 + 16) = a9;
  *(void *)(v17 + 24) = a1;
  sub_1000367F0(a3, v17 + 32);
  *(_BYTE *)(v17 + 81) = a2;
  *(void *)(v17 + 88) = a7;
  *(void *)(v17 + 96) = a8;
  *(void *)(v17 + 104) = a4;
  *(void *)(v17 + 112) = a5;
  *(_BYTE *)(v17 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a6;
  uint64_t v18 = type metadata accessor for Array(0LL, a9);
  sub_10006F11C((uint64_t)sub_100042DCC, v17, v18, v19, &v26);
  __int128 v24 = v26;
  char v25 = v27;
  uint64_t v22 = type metadata accessor for Parsed(0LL, v18, v20, v21);
  (*(void (**)(uint64_t *, __int128 *, uint64_t))(*(void *)(v22 - 8) + 32LL))(&v28, &v24, v22);
  return v28;
}

uint64_t sub_100042400( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v17 = type metadata accessor for Array(0LL, a12);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v18 = swift_bridgeObjectRetain(a4);
  uint64_t v19 = sub_10007F258(v18, a1, a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  uint64_t v37 = 0LL;
  sub_100037ACC(a5);
  swift_retain(a8);
  sub_100037B40(a9, a10, a11);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099898, v17);
  sub_10005F6B8( a1,  a2,  a3,  (unint64_t)v19,  (uint64_t)a5,  a6,  a7,  v38,  a8,  (uint64_t)&v37,  a9,  a10,  a11,  v17,  WitnessTable);
  uint64_t v21 = sub_100005104(&qword_1000B9230);
  uint64_t v22 = (_OWORD *)swift_allocObject(v21, 224LL, 7LL);
  __int128 v23 = v38[8];
  __int128 v24 = v38[10];
  __int128 v25 = v38[11];
  v22[11] = v38[9];
  v22[12] = v24;
  v22[13] = v25;
  __int128 v26 = v38[4];
  __int128 v27 = v38[6];
  __int128 v28 = v38[7];
  v22[7] = v38[5];
  v22[8] = v27;
  v22[9] = v28;
  v22[10] = v23;
  __int128 v29 = v38[0];
  __int128 v30 = v38[1];
  v22[1] = xmmword_100096510;
  v22[2] = v29;
  __int128 v31 = v38[2];
  __int128 v32 = v38[3];
  v22[3] = v30;
  v22[4] = v31;
  v22[5] = v32;
  v22[6] = v26;
  return sub_100079288((uint64_t)v22);
}

uint64_t sub_1000425B0()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 90) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*((void *)v0 + 4));
  uint64_t v6 = *((void *)v0 + 6);
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(*((void *)v0 + 8));
    swift_bridgeObjectRelease(*((void *)v0 + 10));
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  int v7 = v0[v5 + 16];
  if (v7 != 255) {
    sub_10002D9A0(*(void *)&v0[v5], *(void *)&v0[v5 + 8], v7);
  }
  return swift_deallocObject(v0, v5 + 17, v3 | 7);
}

uint64_t sub_100042654(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(v3 + 16) - 8LL);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 90LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v3 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_10003FE7C( a1,  a2,  a3,  *(void *)(v3 + 32),  (uint64_t *)(v3 + 40),  *(unsigned __int8 *)(v3 + 89),  v3 + v5,  *(void *)v6,  *(void *)(v6 + 8),  *(_BYTE *)(v6 + 16),  *(void *)(v3 + 16));
}

uint64_t sub_1000426C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100042C80( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, char, void, void))sub_1000402C4);
}

uint64_t sub_1000426CC()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 104) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*((void *)v0 + 3));
  uint64_t v6 = *((void *)v0 + 5);
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(*((void *)v0 + 7));
    swift_bridgeObjectRelease(*((void *)v0 + 9));
  }

  swift_release(*((void *)v0 + 12));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  int v7 = v0[v5 + 16];
  if (v7 != 255) {
    sub_10002D9A0(*(void *)&v0[v5], *(void *)&v0[v5 + 8], v7);
  }
  return swift_deallocObject(v0, v5 + 17, v3 | 7);
}

uint64_t sub_100042774(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(v3 + 16) - 8LL);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 104LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v3 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_100040650( a1,  a2,  a3,  *(void *)(v3 + 24),  (uint64_t *)(v3 + 32),  *(unsigned __int8 *)(v3 + 81),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  v3 + v5,  *(void *)v6,  *(void *)(v6 + 8),  *(_BYTE *)(v6 + 16),  *(void *)(v3 + 16));
}

uint64_t sub_1000427E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100042DD8( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, void, void, char, void))sub_1000409E0);
}

uint64_t sub_1000427F8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10004115C( a1,  a2,  a3,  *(void *)(v3 + 32),  (uint64_t *)(v3 + 40),  *(unsigned __int8 *)(v3 + 89),  *(void *)(v3 + 96),  *(void *)(v3 + 104),  *(_BYTE *)(v3 + 112),  *(void *)(v3 + 16));
}

uint64_t sub_100042834()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(type metadata accessor for Optional(0LL, v1) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 90) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64) + v4 + 7;
  swift_bridgeObjectRelease(v0[4]);
  uint64_t v6 = v0[6];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v0[8]);
    swift_bridgeObjectRelease(v0[10]);
  }

  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = (char *)v0 + v4;
  uint64_t v9 = *(void *)(v1 - 8);
  int v10 = *((unsigned __int8 *)v0 + v7 + 16);
  if (v10 != 255) {
    sub_10002D9A0(*(void *)((char *)v0 + v7), *(void *)((char *)v0 + v7 + 8), v10);
  }
  return swift_deallocObject(v0, v7 + 17, v3 | 7);
}

uint64_t sub_100042904(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(type metadata accessor for Optional(0LL, v7) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 90LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v3 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_100040EAC( a1,  a2,  a3,  *(void *)(v3 + 32),  (uint64_t *)(v3 + 40),  *(unsigned __int8 *)(v3 + 89),  v3 + v9,  *(void *)v10,  *(void *)(v10 + 8),  *(_BYTE *)(v10 + 16),  v7);
}

uint64_t sub_1000429B4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1000418C4( a1,  a2,  a3,  *(void *)(v3 + 24),  (uint64_t *)(v3 + 32),  *(unsigned __int8 *)(v3 + 81),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(void *)(v3 + 104),  *(void *)(v3 + 112),  *(_BYTE *)(v3 + 120),  *(void *)(v3 + 16));
}

uint64_t sub_1000429F4()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(type metadata accessor for Optional(0LL, v1) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 104) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64) + v4 + 7;
  swift_bridgeObjectRelease(v0[3]);
  uint64_t v6 = v0[5];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v0[7]);
    swift_bridgeObjectRelease(v0[9]);
  }

  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(v0[12]);
  uint64_t v8 = (char *)v0 + v4;
  uint64_t v9 = *(void *)(v1 - 8);
  int v10 = *((unsigned __int8 *)v0 + v7 + 16);
  if (v10 != 255) {
    sub_10002D9A0(*(void *)((char *)v0 + v7), *(void *)((char *)v0 + v7 + 8), v10);
  }
  return swift_deallocObject(v0, v7 + 17, v3 | 7);
}

uint64_t sub_100042ACC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(type metadata accessor for Optional(0LL, v7) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 104LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1000415F8( a1,  a2,  a3,  *(void *)(v3 + 24),  (uint64_t *)(v3 + 32),  *(_BYTE *)(v3 + 81),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  v3 + v9,  *(void *)(v3 + v10),  *(void *)(v3 + v10 + 8),  *(_BYTE *)(v3 + v10 + 16),  v7);
}

uint64_t sub_100042B7C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    swift_bridgeObjectRelease(*(void *)(v0 + 80));
  }

  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  int v2 = *(unsigned __int8 *)(v0 + 120);
  if (v2 != 255) {
    sub_10002D9A0(*(void *)(v0 + 104), *(void *)(v0 + 112), v2);
  }
  return swift_deallocObject(v0, 121LL, 7LL);
}

uint64_t sub_100042BD8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100041C18( a1,  a2,  a3,  *(void *)(v3 + 32),  (uint64_t *)(v3 + 40),  *(unsigned __int8 *)(v3 + 89),  *(void *)(v3 + 96),  *(void *)(v3 + 104),  *(void *)(v3 + 112),  *(_BYTE *)(v3 + 120),  *(void *)(v3 + 16));
}

uint64_t sub_100042C20()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    swift_bridgeObjectRelease(*(void *)(v0 + 80));
  }

  int v2 = *(unsigned __int8 *)(v0 + 112);
  if (v2 != 255) {
    sub_10002D9A0(*(void *)(v0 + 96), *(void *)(v0 + 104), v2);
  }
  return swift_deallocObject(v0, 113LL, 7LL);
}

uint64_t sub_100042C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100042C80( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, char, void, void))sub_100041EB0);
}

uint64_t sub_100042C80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, char, void, void))
{
  char v6 = *(_BYTE *)(v4 + 112);
  return a4( a1,  a2,  a3,  *(void *)(v4 + 32),  v4 + 40,  *(unsigned __int8 *)(v4 + 89),  *(void *)(v4 + 96),  *(void *)(v4 + 104),  v6,  *(void *)(v4 + 16),  *(void *)(v4 + 24));
}

uint64_t sub_100042CC0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
  }

  swift_release(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 104));
  int v2 = *(unsigned __int8 *)(v0 + 128);
  if (v2 != 255) {
    sub_10002D9A0(*(void *)(v0 + 112), *(void *)(v0 + 120), v2);
  }
  return swift_deallocObject(v0, 129LL, 7LL);
}

uint64_t sub_100042D24(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10004214C( a1,  a2,  a3,  *(void *)(v3 + 24),  (uint64_t *)(v3 + 32),  *(_BYTE *)(v3 + 81),  *(void *)(v3 + 88),  *(void *)(v3 + 96),  *(void *)(v3 + 104),  *(void *)(v3 + 112),  *(void *)(v3 + 120),  *(_BYTE *)(v3 + 128),  *(void *)(v3 + 16));
}

uint64_t sub_100042D70()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 56));
    swift_bridgeObjectRelease(*(void *)(v0 + 72));
  }

  swift_release(*(void *)(v0 + 96));
  int v2 = *(unsigned __int8 *)(v0 + 120);
  if (v2 != 255) {
    sub_10002D9A0(*(void *)(v0 + 104), *(void *)(v0 + 112), v2);
  }
  return swift_deallocObject(v0, 121LL, 7LL);
}

uint64_t sub_100042DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100042DD8( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, void, void, char, void))sub_100042400);
}

uint64_t sub_100042DD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, void, void, char, void))
{
  char v6 = *(_BYTE *)(v4 + 120);
  return a4( a1,  a2,  a3,  *(void *)(v4 + 24),  v4 + 32,  *(unsigned __int8 *)(v4 + 81),  *(void *)(v4 + 88),  *(void *)(v4 + 96),  *(void *)(v4 + 104),  *(void *)(v4 + 112),  v6,  *(void *)(v4 + 16));
}

uint64_t sub_100042E1C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Option<A>, a2);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100042E48(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_100098A70, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100042E78()
{
  unint64_t result = qword_1000B93D0;
  if (!qword_1000B93D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SingleValueParsingStrategy,  &type metadata for SingleValueParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_1000B93D0);
  }

  return result;
}

unint64_t sub_100042EC0()
{
  unint64_t result = qword_1000B93D8[0];
  if (!qword_1000B93D8[0])
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ArrayParsingStrategy,  &type metadata for ArrayParsingStrategy);
    atomic_store(result, qword_1000B93D8);
  }

  return result;
}

uint64_t *sub_100042F04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }

  else
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      else {
        uint64_t v10 = 4LL;
      }
      __asm { BR              X13 }
    }

    if (v9 != 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
      return v3;
    }

    uint64_t v8 = a2[1];
    *uint64_t v3 = *a2;
    v3[1] = v8;
    *((_BYTE *)v3 + v5) = 1;
  }

  swift_retain(v8);
  return v3;
}

uint64_t sub_100043018(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= 0x10) {
    unint64_t v3 = 16LL;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1) {
      return swift_release(*(void *)(a1 + 8));
    }
    else {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }

  else
  {
    else {
      uint64_t v5 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_100043060 + 4 * byte_100098A09[v5]))();
  }

void *sub_1000430B8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain(v8);
    char v9 = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v9 = 0;
  }

  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

void *sub_100043190(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release(a1[1]);
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain(v12);
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }

  return a1;
}

_OWORD *sub_100043320(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    *a1 = *a2;
    char v8 = 1;
  }

  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    char v8 = 0;
  }

  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

uint64_t sub_1000433F4(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release(*(void *)(a1 + 8));
    }
    else {
      (*(void (**)(uint64_t, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *(_OWORD *)a1 = *a2;
      char v12 = 1;
    }

    else
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v12 = 0;
    }

    *(_BYTE *)(a1 + v7) = v12;
  }

  return a1;
}

uint64_t sub_100043580(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 16LL;
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) > 0x10uLL) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_100043644 + 4 * byte_100098A2C[(v4 - 1)]))();
}

void sub_100043690(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (v5 <= 0x10) {
    unint64_t v5 = 16LL;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v7 = 0;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = &dword_100000004;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = &_mh_execute_header.magic + 1;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }

      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }

  __asm { BR              X10 }

ValueMetadata *type metadata accessor for SingleValueParsingStrategy()
{
  return &type metadata for SingleValueParsingStrategy;
}

uint64_t _s14ArgumentParser26SingleValueParsingStrategyVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10004389C + 4 * byte_100098A3F[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000438D0 + 4 * byte_100098A3A[v4]))();
}

uint64_t sub_1000438D0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000438D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000438E0LL);
  }
  return result;
}

uint64_t sub_1000438EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000438F4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1000438F8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100043900(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArrayParsingStrategy()
{
  return &type metadata for ArrayParsingStrategy;
}

uint64_t OptionGroup.title.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 44));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t OptionGroup.title.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v6 = (void *)(v3 + *(int *)(a3 + 44));
  uint64_t result = swift_bridgeObjectRelease(v6[1]);
  *size_t v6 = a1;
  v6[1] = a2;
  return result;
}

Swift::String_optional (__swiftcall *OptionGroup.title.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t sub_1000439A8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v8 = (int *)type metadata accessor for OptionGroup(0LL, a2, a3, a4);
  *(_BYTE *)(a5 + v8[10]) = 0;
  unsigned int v9 = (void *)(a5 + v8[11]);
  *unsigned int v9 = 0LL;
  v9[1] = 0xE000000000000000LL;
  uint64_t v12 = type metadata accessor for Parsed(0LL, a2, v10, v11);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(a5, a1, v12);
  *(_BYTE *)(a5 + v8[9]) = 0;
  return result;
}

uint64_t OptionGroup.init(from:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v70 = a5;
  uint64_t v50 = a3;
  uint64_t v51 = type metadata accessor for OptionGroup(0LL, a2, a3, a4);
  uint64_t v47 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v48 = (uint64_t)&v43 - v9;
  uint64_t v43 = type metadata accessor for Parsed(0LL, a2, v10, v11);
  __chkstk_darwin(v43);
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t v14 = type metadata accessor for Optional(0LL, a2);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v49 = *(void *)(a2 - 8);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v46 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v45 = (uint64_t)&v43 - v22;
  __chkstk_darwin(v21);
  __int128 v24 = (char *)&v43 - v23;
  unint64_t v52 = (void *)a1;
  sub_100033F10(a1, (uint64_t)v61);
  uint64_t v44 = sub_100005104(&qword_1000B9460);
  if ((swift_dynamicCast(&v53, v61, v44, &type metadata for SingleValueDecoder, 6LL) & 1) != 0)
  {
    __int128 v66 = v57;
    __int128 v67 = v58;
    __int128 v68 = v59;
    char v69 = v60;
    __int128 v62 = v53;
    __int128 v63 = v54;
    __int128 v64 = v55;
    __int128 v65 = v56;
    sub_1000514EC(a2, a2, (uint64_t)v18);
    if (!v5)
    {
      uint64_t v38 = v49;
      (*(void (**)(char *, void, uint64_t, unint64_t))(v49 + 56))(v18, 0LL, 1LL, a2);
      (*(void (**)(char *, char *, unint64_t))(v38 + 32))(v24, v18, a2);
      (*(void (**)(char *, char *, unint64_t))(v38 + 16))(v13, v24, a2);
      swift_storeEnumTagMultiPayload(v13, v43, 0LL);
      unint64_t v28 = v50;
      sub_1000439A8((uint64_t)v13, a2, v50, v39, v70);
      (*(void (**)(char *, unint64_t))(v38 + 8))(v24, a2);
      sub_10004408C(&v62);
      uint64_t v26 = v51;
      __int128 v25 = v52;
      uint64_t v33 = (uint64_t)v46;
LABEL_10:
      OptionGroup.wrappedValue.getter(v26, v36, v37, v33);
      (*(void (**)(unint64_t, unint64_t))(v28 + 24))(a2, v28);
      Option.wrappedValue.setter(v33, v26, v40, v41);
      return sub_1000062D8(v25);
    }

    swift_errorRelease(v5);
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v49 + 56))(v18, 1LL, 1LL, a2);
    sub_10004408C(&v62);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    uint64_t v6 = 0LL;
  }

  else
  {
    char v60 = 0;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    __int128 v53 = 0u;
    sub_100043F48((uint64_t)&v53);
  }

  __int128 v25 = v52;
  sub_100033F10((uint64_t)v52, (uint64_t)&v62);
  uint64_t v26 = v51;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100098C84, v51);
  unint64_t v28 = v50;
  uint64_t v29 = v48;
  sub_10006F20C(&v62, v26, WitnessTable, *(void *)(v50 + 8), v48);
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v70, v29, v26);
    sub_100033F10((uint64_t)v25, (uint64_t)v61);
    char v30 = swift_dynamicCast(&v53, v61, v44, &type metadata for SingleValueDecoder, 6LL);
    uint64_t v33 = (uint64_t)v46;
    if ((v30 & 1) != 0)
    {
      __int128 v66 = v57;
      __int128 v67 = v58;
      __int128 v68 = v59;
      char v69 = v60;
      __int128 v62 = v53;
      __int128 v63 = v54;
      __int128 v64 = v55;
      __int128 v65 = v56;
      uint64_t v34 = v45;
      OptionGroup.wrappedValue.getter(v26, v31, v32, v45);
      __n128 v35 = sub_1000516B8(v34, a2, a2, v28);
      (*(void (**)(uint64_t, unint64_t, __n128))(v49 + 8))(v34, a2, v35);
      sub_10004408C(&v62);
    }

    else
    {
      char v60 = 0;
      __int128 v58 = 0u;
      __int128 v59 = 0u;
      __int128 v56 = 0u;
      __int128 v57 = 0u;
      __int128 v54 = 0u;
      __int128 v55 = 0u;
      __int128 v53 = 0u;
      sub_100043F48((uint64_t)&v53);
    }

    goto LABEL_10;
  }

  return sub_1000062D8(v25);
}

uint64_t type metadata accessor for OptionGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037B54(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionGroup);
}

uint64_t sub_100043F48(uint64_t a1)
{
  uint64_t v2 = sub_100005104(&qword_1000B9468);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t OptionGroup.wrappedValue.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = type metadata accessor for Parsed(0LL, v7, a2, a3);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, v5, v8);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x1000000000000246LL,  0x800000010009D5D0LL,  "ArgumentParser/OptionGroup.swift",  32LL,  2LL,  98LL,  0);
  __break(1u);
  return result;
}

void *sub_10004408C(void *a1)
{
  return a1;
}

uint64_t OptionGroup.init(title:visibility:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8 = a3;
  uint64_t v12 = type metadata accessor for Parsed(0LL, a4, a3, a4);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v23 - v13);
  uint64_t v15 = (void *)swift_allocObject(&unk_1000B15C0, 48LL, 7LL);
  v15[2] = a4;
  void v15[3] = a5;
  v15[4] = a1;
  v15[5] = a2;
  sub_10006F11C((uint64_t)sub_1000442DC, (uint64_t)v15, a4, v16, v14);
  sub_1000439A8((uint64_t)v14, a4, a5, v17, a6);
  uint64_t v19 = type metadata accessor for OptionGroup(0LL, a4, a5, v18);
  *(_BYTE *)(a6 + *(int *)(v19 + 36)) = v8;
  uint64_t v20 = (void *)(a6 + *(int *)(v19 + 44));
  uint64_t v21 = v20[1];
  swift_bridgeObjectRetain(a2);
  uint64_t result = swift_bridgeObjectRelease(v21);
  *uint64_t v20 = a1;
  v20[1] = a2;
  return result;
}

char *sub_1000441C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = sub_10004D160(a6, a7, 2, a1, a2, a3);
  if (!*(void *)(v14 + 16)) {
    return (char *)v14;
  }
  uint64_t v15 = 0LL;
  unint64_t v16 = 0LL;
  while (1)
  {
    uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(v14);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10005B884(v14);
      uint64_t v14 = (uint64_t)result;
    }

    if (v16 >= *(void *)(v14 + 16)) {
      break;
    }
    uint64_t v18 = v14 + v15;
    uint64_t v19 = *(void *)(v14 + v15 + 152);
    *(void *)(v18 + 144) = a4;
    *(void *)(v18 + 152) = a5;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRelease(v19);
    ++v16;
    v15 += 192LL;
    if (v16 >= *(void *)(v14 + 16)) {
      return (char *)v14;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000442B8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

char *sub_1000442DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000441C0(a1, a2, a3, v3[4], v3[5], v3[2], v3[3]);
}

void (*OptionGroup.wrappedValue.modify( void *a1, uint64_t a2))(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  _OWORD v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  OptionGroup.wrappedValue.getter(a2, v10, v11, (uint64_t)v9);
  return sub_1000341A8;
}

uint64_t sub_10004436C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return OptionGroup.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3, a4);
}

uint64_t sub_100044388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1000439A8(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3, a4);
}

uint64_t sub_100044394(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

unint64_t OptionGroup.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v12 = type metadata accessor for Parsed(0LL, v3, v10, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v18 - v14, v2, v12);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return 0xD000000000000019LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v15, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v16 = String.init<A>(describing:)(v7, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  return v16;
}

uint64_t OptionGroup.init(_hiddenFromHelp:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return OptionGroup.init(title:visibility:)(0LL, 0xE000000000000000LL, 1LL, a1, a2, a3);
}

uint64_t OptionGroup.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OptionGroup.init(title:visibility:)(0LL, 0xE000000000000000LL, 0LL, a1, a2, a3);
}

uint64_t OptionGroup.init(visibility:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return OptionGroup.init(title:visibility:)(0LL, 0xE000000000000000LL, a1, a2, a3, a4);
}

uint64_t sub_100044550(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OptionGroup<A>, a2);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10004457C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t sub_100044584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Parsed(319LL, *(void *)(a1 + 16), a3, a4);
  if (v6 <= 0x3F)
  {
    v7[0] = *(void *)(result - 8) + 64LL;
    v7[1] = &unk_100098CF8;
    uint64_t v7[2] = &unk_100098D10;
    void v7[3] = &unk_100098D28;
    swift_initStructMetadata(a1, 0LL, 4LL, v7, a1 + 32);
    return 0LL;
  }

  return result;
}

void *sub_10004460C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v6 = 16LL;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 10) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }

  else
  {
    unsigned int v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X13 }
    }

    uint64_t v12 = v6 + 1;
    if (v10 == 1)
    {
      uint64_t v13 = a2[1];
      *uint64_t v4 = *a2;
      v4[1] = v13;
      swift_retain(v13);
      char v14 = 1;
    }

    else
    {
      (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
      char v14 = 0;
    }

    *((_BYTE *)v4 + v6) = v14;
    uint64_t v15 = (char *)v4 + v12;
    *uint64_t v15 = *((_BYTE *)a2 + v12);
    v15[1] = *((_BYTE *)a2 + v12 + 1);
    uint64_t v16 = (void *)(((unint64_t)v4 + v12 + 9) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v17 = (void *)(((unint64_t)a2 + v12 + 9) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v16 = *v17;
    uint64_t v18 = v17[1];
    v16[1] = v18;
    swift_bridgeObjectRetain(v18);
  }

  return v4;
}

uint64_t sub_10004477C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  if (*(void *)(v3 + 64) <= 0x10uLL) {
    uint64_t v4 = 16LL;
  }
  else {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + v4);
  if (v5 >= 2)
  {
    else {
      uint64_t v6 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v5 == 1) {
    swift_release(*(void *)(a1 + 8));
  }
  else {
    (*(void (**)(uint64_t))(v3 + 8))(a1);
  }
  return swift_bridgeObjectRelease(*(void *)(((a1 + v4 + 10) & 0xFFFFFFFFFFFFF8LL) + 8));
}

void *sub_100044850(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v6 = 16LL;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  unsigned int v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2)
  {
    else {
      uint64_t v8 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v7 == 1)
  {
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    swift_retain(v9);
    char v10 = 1;
  }

  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    char v10 = 0;
  }

  *((_BYTE *)a1 + v6) = v10;
  uint64_t v11 = (char *)a1 + v6 + 1;
  uint64_t v12 = (char *)a2 + v6 + 1;
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  uint64_t v13 = (void *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  char v14 = (void *)((unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

void *sub_100044978(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x10uLL) {
    uint64_t v7 = 16LL;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  if (a1 != a2)
  {
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release(a1[1]);
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain(v12);
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }

  uint64_t v13 = (char *)a1 + v7 + 1;
  char v14 = (char *)a2 + v7 + 1;
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  uint64_t v15 = (void *)((unint64_t)(v13 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = (void *)((unint64_t)(v14 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

_OWORD *sub_100044B54(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v6 = 16LL;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  unsigned int v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2)
  {
    else {
      uint64_t v8 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v7 == 1)
  {
    *a1 = *a2;
    char v9 = 1;
  }

  else
  {
    (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(a1, a2);
    char v9 = 0;
  }

  *((_BYTE *)a1 + v6) = v9;
  unsigned int v10 = (char *)a1 + v6 + 1;
  uint64_t v11 = (char *)a2 + v6 + 1;
  *unsigned int v10 = *v11;
  v10[1] = v11[1];
  *(_OWORD *)((unint64_t)(v10 + 9) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_100044C6C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x10uLL) {
    uint64_t v7 = 16LL;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  if ((_OWORD *)a1 != a2)
  {
    unsigned int v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release(*(void *)(a1 + 8));
    }
    else {
      (*(void (**)(uint64_t, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *(_OWORD *)a1 = *a2;
      char v12 = 1;
    }

    else
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v12 = 0;
    }

    *(_BYTE *)(a1 + v7) = v12;
  }

  uint64_t v13 = (_BYTE *)(v7 + 1 + a1);
  char v14 = (char *)a2 + v7 + 1;
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  uint64_t v15 = (void *)((unint64_t)(v13 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = (void *)((unint64_t)(v14 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v15 = *v16;
  uint64_t v17 = v15[1];
  v15[1] = v16[1];
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_100044E3C(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  if (v3 <= 0x10) {
    unint64_t v3 = 16LL;
  }
  if (!a2) {
    return 0LL;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  unint64_t v6 = ((v3 + 10) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  uint64_t v7 = v6 & 0xFFFFFFF8;
  unsigned int v8 = a2 - 2147483646;
  if ((v6 & 0xFFFFFFF8) != 0) {
    unsigned int v8 = 2;
  }
  if (v8 >= 0x10000) {
    int v9 = 4;
  }
  else {
    int v9 = 2;
  }
  if (v8 < 0x100) {
    int v10 = 1;
  }
  else {
    int v10 = v9;
  }
  if (v10 == 4)
  {
    int v11 = *(_DWORD *)((char *)a1 + v6);
    if (!v11) {
      goto LABEL_5;
    }
  }

  else if (v10 == 2)
  {
    int v11 = *(unsigned __int16 *)((char *)a1 + v6);
    if (!v11) {
      goto LABEL_5;
    }
  }

  else
  {
    int v11 = *((unsigned __int8 *)a1 + v6);
    if (!v11)
    {
LABEL_5:
      unint64_t v4 = *(void *)((((unint64_t)a1 + v3 + 10) & 0xFFFFFFFFFFFFF8LL) + 8);
      if (v4 >= 0xFFFFFFFF) {
        LODWORD(v4) = -1;
      }
      return (v4 + 1);
    }
  }

  int v12 = v11 - 1;
  if (v7)
  {
    int v12 = 0;
    LODWORD(v7) = *a1;
  }

  return (v7 | v12) ^ 0x80000000;
}

void sub_100044F10(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (v5 <= 0x10) {
    unint64_t v5 = 16LL;
  }
  if (a3 < 0)
  {
    unsigned int v7 = a3 - 2147483646;
    if ((((_DWORD)v5 + 10) & 0xFFFFFFF8) != 0xFFFFFFF0) {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v6 = 1;
    }
    else {
      int v6 = v8;
    }
    if ((a2 & 0x80000000) == 0) {
LABEL_5:
    }
      __asm { BR              X11 }
  }

  else
  {
    int v6 = 0;
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }

  if ((((_DWORD)v5 + 10) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v9 = a2 ^ 0x80000000;
    bzero(a1, ((v5 + 10) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v9;
  }

  __asm { BR              X10 }

void sub_10004502C(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (!a2) {
    JUMPOUT(0x100045018LL);
  }
  JUMPOUT(0x100045004LL);
}

void sub_100045038()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100045018LL);
}

void sub_100045040()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100045018LL);
}

uint64_t static AsyncParsableCommand.main()(uint64_t a1, uint64_t a2)
{
  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  return swift_task_switch(sub_100045068, 0LL, 0LL);
}

uint64_t sub_100045068()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 184) + 8LL);
  *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v1;
  static ParsableCommand.parseAsRoot(_:)(0LL, v1, v0 + 16);
  sub_100033F10(v0 + 16, v0 + 96);
  uint64_t v2 = sub_100005104(&qword_1000B9528);
  uint64_t v3 = sub_100005104(&qword_1000B9530);
  if (swift_dynamicCast(v0 + 136, v0 + 96, v2, v3, 6LL))
  {
    sub_100045320((__int128 *)(v0 + 136), v0 + 56);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(v0 + 88);
    sub_1000099D4(v0 + 56, v4);
    int v6 = *(int **)(v5 + 16);
    int v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    unsigned int v7 = (void *)swift_task_alloc(v6[1]);
    *(void *)(v0 + 208) = v7;
    *unsigned int v7 = v0;
    v7[1] = sub_1000451F4;
    return v11(v4, v5);
  }

  else
  {
    *(void *)(v0 + 168) = 0LL;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    sub_1000452E0(v0 + 136);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v10 = *(void *)(v0 + 48);
    sub_1000099D4(v0 + 16, v9);
    (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
    sub_1000062D8((void *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000451F4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 216LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100045294;
  }
  else {
    uint64_t v3 = sub_100045258;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100045258()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100045294()
{
  uint64_t v1 = v0[27];
  sub_1000062D8(v0 + 2);
  static ParsableArguments.exit(withError:)(v1, v0[22], *(void *)(v0[25] + 8LL));
}

uint64_t sub_1000452E0(uint64_t a1)
{
  uint64_t v2 = sub_100005104(&qword_1000B9538);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100045320(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t static AsyncMainProtocol.main()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 176) = a1;
  *(void *)(v2 + 184) = a2;
  return swift_task_switch(sub_100045350, 0LL, 0LL);
}

uint64_t sub_100045350()
{
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v1);
  *(void *)(v0 + 192) = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v1,  v2,  AssociatedTypeWitness,  &protocol requirements base descriptor for AsyncMainProtocol,  &associated conformance descriptor for AsyncMainProtocol.AsyncMainProtocol.Command: ParsableCommand);
  *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = AssociatedConformanceWitness;
  static ParsableCommand.parseAsRoot(_:)(0LL, AssociatedConformanceWitness, v0 + 16);
  sub_100033F10(v0 + 16, v0 + 96);
  uint64_t v5 = sub_100005104(&qword_1000B9528);
  uint64_t v6 = sub_100005104(&qword_1000B9530);
  if (swift_dynamicCast(v0 + 136, v0 + 96, v5, v6, 6LL))
  {
    sub_100045320((__int128 *)(v0 + 136), v0 + 56);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);
    sub_1000099D4(v0 + 56, v7);
    uint64_t v9 = *(int **)(v8 + 16);
    char v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)v9 + *v9);
    uint64_t v10 = (void *)swift_task_alloc(v9[1]);
    *(void *)(v0 + 208) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100045520;
    return v14(v7, v8);
  }

  else
  {
    *(void *)(v0 + 168) = 0LL;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    sub_1000452E0(v0 + 136);
    uint64_t v12 = *(void *)(v0 + 40);
    uint64_t v13 = *(void *)(v0 + 48);
    sub_1000099D4(v0 + 16, v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
    sub_1000062D8((void *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100045520()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 216LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    __int128 v3 = sub_100045584;
  }
  else {
    __int128 v3 = sub_100045258;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

void sub_100045584()
{
}

uint64_t CommandConfiguration.usage.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t CommandConfiguration.usage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 56));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t ArgumentInfoV0.valueName.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain(*(void *)(v0 + 72));
  return v1;
}

uint64_t ArgumentInfoV0.valueName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 72));
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 7sub_1000062D8(v0 + 2) = a2;
  return result;
}

Swift::String_optional (__swiftcall *ArgumentInfoV0.valueName.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t ArgumentInfoV0.defaultValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain(*(void *)(v0 + 88));
  return v1;
}

uint64_t ArgumentInfoV0.defaultValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 88));
  *(void *)(v2 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

Swift::String_optional (__swiftcall *ArgumentInfoV0.defaultValue.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t CommandConfiguration.shouldDisplay.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t CommandConfiguration.shouldDisplay.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 96) = result;
  return result;
}

Swift::String_optional (__swiftcall *ArgumentInfoV0.allValues.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t CommandConfiguration.subcommands.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 104));
}

uint64_t CommandConfiguration.subcommands.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 104));
  *(void *)(v1 + 104) = a1;
  return result;
}

Swift::String_optional (__swiftcall *ArgumentInfoV0.abstract.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t CommandConfiguration.defaultSubcommand.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t CommandConfiguration.defaultSubcommand.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 11sub_1000062D8(v0 + 2) = result;
  *(void *)(v2 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a2;
  return result;
}

Swift::String_optional (__swiftcall *CommandConfiguration.defaultSubcommand.modify())(Swift::String argument)
{
  return String.init(argument:);
}

uint64_t CommandConfiguration.helpNames.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 128));
}

uint64_t CommandConfiguration.helpNames.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 128));
  *(void *)(v1 + 128) = a1;
  return result;
}

Swift::String_optional (__swiftcall *CommandConfiguration.helpNames.modify())(Swift::String argument)
{
  return String.init(argument:);
}

__n128 CommandConfiguration.init(commandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, __n128 a13, uint64_t a14, uint64_t a15)
{
  __n128 result = a13;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = 0LL;
  *(void *)(a9 + 24) = 0LL;
  *(void *)(a9 + 3sub_1000062D8(v0 + 2) = a3;
  *(void *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a4;
  *(void *)(a9 + 48) = a5;
  *(void *)(a9 + 56) = a6;
  *(void *)(a9 + 64) = a7;
  *(void *)(a9 + 7sub_1000062D8(v0 + 2) = a8;
  *(void *)(a9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a10;
  *(void *)(a9 + 88) = a11;
  *(_BYTE *)(a9 + 96) = a12;
  *(__n128 *)(a9 + 104) = a13;
  *(void *)(a9 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a14;
  *(void *)(a9 + 128) = a15;
  return result;
}

__n128 CommandConfiguration.init(commandName:_superCommandName:abstract:usage:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, uint64_t a12, char a13, __n128 a14, uint64_t a15, uint64_t a16)
{
  __n128 result = a14;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 3sub_1000062D8(v0 + 2) = a5;
  *(void *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(void *)(a9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a11;
  *(void *)(a9 + 88) = a12;
  *(_BYTE *)(a9 + 96) = a13;
  *(__n128 *)(a9 + 104) = a14;
  *(void *)(a9 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a15;
  *(void *)(a9 + 128) = a16;
  return result;
}

__n128 CommandConfiguration.init(commandName:abstract:discussion:version:shouldDisplay:subcommands:defaultSubcommand:helpNames:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, __n128 a11, uint64_t a12, uint64_t a13)
{
  __n128 result = a11;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = 0LL;
  *(void *)(a9 + 24) = 0LL;
  *(void *)(a9 + 3sub_1000062D8(v0 + 2) = a3;
  *(void *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a4;
  *(_OWORD *)(a9 + 48) = xmmword_100097E30;
  *(void *)(a9 + 64) = a5;
  *(void *)(a9 + 7sub_1000062D8(v0 + 2) = a6;
  *(void *)(a9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a7;
  *(void *)(a9 + 88) = a8;
  *(_BYTE *)(a9 + 96) = a10;
  *(__n128 *)(a9 + 104) = a11;
  *(void *)(a9 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = a12;
  *(void *)(a9 + 128) = a13;
  return result;
}

uint64_t destroy for CommandConfiguration(void *a1)
{
  return swift_bridgeObjectRelease(a1[16]);
}

uint64_t initializeWithCopy for CommandConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_1000062D8(v0 + 2) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 11sub_1000062D8(v0 + 2) = *(_OWORD *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for CommandConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_1000062D8(v0 + 2) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_OWORD *)(a1 + 11sub_1000062D8(v0 + 2) = *(_OWORD *)(a2 + 112);
  uint64_t v18 = *(void *)(a1 + 128);
  uint64_t v19 = *(void *)(a2 + 128);
  *(void *)(a1 + 128) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  return a1;
}

__n128 initializeWithTake for CommandConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 3sub_1000062D8(v0 + 2) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 11sub_1000062D8(v0 + 2) = v7;
  *(__n128 *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = result;
  return result;
}

uint64_t assignWithTake for CommandConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_1000062D8(v0 + 2) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v16 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease(v16);
  *(_OWORD *)(a1 + 11sub_1000062D8(v0 + 2) = *(_OWORD *)(a2 + 112);
  uint64_t v17 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_1000062D8(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_1000062D8(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 136) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CommandConfiguration()
{
  return &type metadata for CommandConfiguration;
}

uint64_t static EnumerableFlag.name(for:)()
{
  uint64_t v0 = sub_10003F288((uint64_t)&off_1000AFDD0);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  swift_arrayDestroy(&unk_1000AFDF0, 1LL, &type metadata for NameSpecification.Element);
  return v0;
}

double static EnumerableFlag.help(for:)@<D0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 3sub_1000062D8(v0 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_100045CE8( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a5;
  uint64_t v33 = a8;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v31 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v40 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, *(void *)(v12 + 8));
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v36 = (char *)&v29 - v16;
  uint64_t v41 = a4;
  __chkstk_darwin(v15);
  __n128 v35 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = swift_getAssociatedTypeWitness(0LL, a6);
  uint64_t v34 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v29 - v19;
  uint64_t v21 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v21) {
    return static Array._allocateUninitialized(_:)(0LL, v41);
  }
  Swift::Int v22 = v21;
  uint64_t v30 = v18;
  uint64_t v23 = v41;
  uint64_t v44 = ContiguousArray.init()(v41);
  uint64_t v37 = type metadata accessor for ContiguousArray(0LL, v23);
  ContiguousArray.reserveCapacity(_:)(v22);
  uint64_t v41 = v20;
  uint64_t result = dispatch thunk of Collection.startIndex.getter(a3);
  if (v22 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v26 = v35;
    __int128 v25 = v36;
    while (1)
    {
      __int128 v27 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v43, v41, a3, a6);
      (*(void (**)(char *))(v14 + 16))(v25);
      v27(v43, 0LL);
      uint64_t v28 = v42;
      v38(v25, v40);
      if (v28) {
        break;
      }
      uint64_t v42 = 0LL;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v26, v37);
      dispatch thunk of Collection.formIndex(after:)(v41, a3, a6);
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
        return v44;
      }
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
    swift_release(v44);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v33, v40, v32);
  }

  return result;
}

uint64_t ExpressibleByArgument.defaultValueDescription.getter(uint64_t a1)
{
  return 0LL;
}

void *static ExpressibleByArgument.allValueStrings.getter()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t static ExpressibleByArgument<>.allValueStrings.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a3);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = &v14[-v8];
  dispatch thunk of static CaseIterable.allCases.getter(a1, a3);
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a1,  AssociatedTypeWitness,  &protocol requirements base descriptor for CaseIterable,  &associated conformance descriptor for CaseIterable.CaseIterable.AllCases: Collection);
  uint64_t v12 = sub_100045CE8( (void (*)(char *, char *))sub_1000461AC,  (uint64_t)v14,  AssociatedTypeWitness,  (char *)&type metadata for String,  (uint64_t)&type metadata for Never,  AssociatedConformanceWitness,  (uint64_t)&protocol witness table for Never,  v11);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return v12;
}

uint64_t sub_100046128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t result = String.init<A>(describing:)(v6, a2);
  *a3 = result;
  a3[1] = v9;
  return result;
}

uint64_t sub_1000461AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100046128(a1, *(void *)(v2 + 16), a2);
}

uint64_t static ExpressibleByArgument<>.defaultCompletionKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t static ExpressibleByArgument<>.allValueStrings.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a3);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v13 = &v19[-v12];
  dispatch thunk of static CaseIterable.allCases.getter(a1, a3);
  v25[0] = a1;
  v25[1] = a2;
  void v25[2] = a3;
  uint64_t v25[3] = a4;
  v25[4] = a5;
  uint64_t KeyPath = swift_getKeyPath(&unk_100098E00, v25);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = KeyPath;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a1,  AssociatedTypeWitness,  &protocol requirements base descriptor for CaseIterable,  &associated conformance descriptor for CaseIterable.CaseIterable.AllCases: Collection);
  uint64_t v17 = sub_100045CE8( (void (*)(char *, char *))sub_10004640C,  (uint64_t)v19,  AssociatedTypeWitness,  (char *)&type metadata for String,  (uint64_t)&type metadata for Never,  AssociatedConformanceWitness,  (uint64_t)&protocol witness table for Never,  v16);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  swift_release(KeyPath);
  return v17;
}

uint64_t sub_100046340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of RawRepresentable.rawValue.getter(*(void *)(a3 + a2 - 40), *(void *)(a3 + a2 - 16));
}

uint64_t sub_100046370()
{
  return 40LL;
}

__n128 sub_10004637C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 3sub_1000062D8(v0 + 2) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_100046390@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + a1 - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, *(void *)(a2 + a1 - 16));
  uint64_t result = v5(AssociatedTypeWitness, v4);
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_1000463EC()
{
  return 40LL;
}

__n128 sub_1000463F8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 3sub_1000062D8(v0 + 2) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_10004640C(uint64_t a1)
{
  return swift_getAtKeyPath(a1, *(void *)(v1 + 48));
}

uint64_t ExpressibleByArgument<>.defaultValueDescription.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a3);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v13 - v9;
  dispatch thunk of RawRepresentable.rawValue.getter(a1, a3);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(AssociatedTypeWitness, a4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return v11;
}

uint64_t sub_100046504@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_10004650C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  v6[0] = 0LL;
  v6[1] = 0xE000000000000000LL;
  v5[0] = v2;
  v5[1] = v3;
  _print_unlocked<A, B>(_:_:)( v5,  v6,  a1,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v6[0];
}

uint64_t RawRepresentable<>.init(argument:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v35 = a6;
  uint64_t v10 = type metadata accessor for Optional(0LL, a3);
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  __chkstk_darwin(v10);
  uint64_t v33 = (char *)&v29 - v11;
  uint64_t v32 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, a4);
  uint64_t v13 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v19 = __chkstk_darwin(v15);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v29 - v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(a1, v34, AssociatedTypeWitness, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    uint64_t v24 = *(void *)(a3 - 8);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v17, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, AssociatedTypeWitness);
    __int128 v25 = v33;
    dispatch thunk of RawRepresentable.init(rawValue:)(v21, a3, v32);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, AssociatedTypeWitness);
    uint64_t v24 = *(void *)(a3 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v25, 1LL, a3))
    {
      uint64_t v27 = v35;
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35, v25, a3);
      uint64_t v26 = 0LL;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v27, v26, 1LL, a3);
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v31);
  }

  uint64_t v26 = 1LL;
  uint64_t v27 = v35;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v27, v26, 1LL, a3);
}

uint64_t LosslessStringConvertible<>.init(argument:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional(0LL, a3);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - v12;
  dispatch thunk of LosslessStringConvertible.init(_:)(a1, a2, a3, a4);
  uint64_t v14 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1LL, a3))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v15 = 1LL;
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a5, v13, a3);
    uint64_t v15 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a5, v15, 1LL, a3);
}

uint64_t sub_1000468A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10004BC3C( a1,  a2,  (uint64_t (*)(void))sub_100048E00,  (uint64_t (*)(void *, uint64_t, uint64_t))sub_10004936C);
  *(void *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_1000468E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10004BD00( a1,  a2,  (uint64_t (*)(void))sub_10004754C,  (uint64_t (*)(void *, uint64_t, uint64_t))sub_100047B10);
  *a3 = result;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_100046920@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10004BDA8( a1,  a2,  (uint64_t (*)(void))sub_100047DC4,  (uint64_t (*)(void *, uint64_t, uint64_t))sub_100048388);
  *(_WORD *)a3 = result;
  *(_BYTE *)(a3 + sub_1000062D8(v0 + 2) = BYTE2(result) & 1;
  return result;
}

unint64_t sub_100046960@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_10004BE54( a1,  a2,  (uint64_t (*)(void))sub_10004863C,  (uint64_t (*)(void *, uint64_t, uint64_t))sub_100048B80);
  *(_DWORD *)a3 = result;
  *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1000469A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10004BC3C( a1,  a2,  (uint64_t (*)(void))sub_10004B250,  (uint64_t (*)(void *, uint64_t, uint64_t))sub_10004B848);
  *(void *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_1000469DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10004BD00( a1,  a2,  (uint64_t (*)(void))sub_1000495E8,  (uint64_t (*)(void *, uint64_t, uint64_t))sub_100049CE8);
  *a3 = result;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_100046A18(uint64_t a1)
{
  char v2 = *v1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  char v4 = v2;
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  a1,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t sub_100046A64@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10004BDA8( a1,  a2,  (uint64_t (*)(void))sub_100049F90,  (uint64_t (*)(void *, uint64_t, uint64_t))sub_10004A688);
  *(_WORD *)a3 = result;
  *(_BYTE *)(a3 + sub_1000062D8(v0 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_100046AA0(uint64_t a1)
{
  __int16 v2 = *v1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  __int16 v4 = v2;
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  a1,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

unint64_t sub_100046AEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_10004BE54( a1,  a2,  (uint64_t (*)(void))sub_10004A930,  (uint64_t (*)(void *, uint64_t, uint64_t))sub_10004AFD0);
  *(_DWORD *)a3 = result;
  *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_100046B28(uint64_t a1)
{
  int v2 = *v1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  int v4 = v2;
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  a1,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t sub_100046B74(uint64_t a1)
{
  uint64_t v2 = *v1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  uint64_t v4 = v2;
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  a1,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

unint64_t sub_100046BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_100046E08(a1, a2);
  *(_DWORD *)a3 = result;
  *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_100046BEC(uint64_t a1)
{
  int v2 = *v1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  int v4 = v2;
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  a1,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t sub_100046C38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_100046CD4(a1, a2);
  *(void *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_100046C64(uint64_t a1)
{
  uint64_t v2 = *v1;
  v5[0] = 0LL;
  v5[1] = 0xE000000000000000LL;
  uint64_t v4 = v2;
  _print_unlocked<A, B>(_:_:)( &v4,  v5,  a1,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  return v5[0];
}

uint64_t sub_100046CB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10004BAC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100046CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0LL;
  uint64_t v7[2] = &v9;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(v8, sub_10004BB94, v7);
    swift_bridgeObjectRelease(a2);
    int v4 = LOBYTE(v8[0]);
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v8[0] = a1;
      v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      int v4 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
        && (char v5 = (_BYTE *)_swift_stdlib_strtod_clocale(v8, &v9, a1)) != 0LL
        && *v5 == 0;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0) {
        uint64_t v3 = (_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v3 = (_BYTE *)_StringObject.sharedUTF8.getter(a1, a2);
      }
      sub_10004BB94(v3, (BOOL *)v8);
      int v4 = LOBYTE(v8[0]);
    }

    swift_bridgeObjectRelease(a2);
  }

  if (v4) {
    return v9;
  }
  else {
    return 0LL;
  }
}

unint64_t sub_100046E08(uint64_t a1, uint64_t a2)
{
  unsigned int v10 = 0;
  _OWORD v8[2] = &v10;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(v9, sub_10004BBB0, v8);
    swift_bridgeObjectRelease(a2);
    int v4 = LOBYTE(v9[0]);
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v9[0] = a1;
      v9[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      int v4 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
        && (char v5 = (_BYTE *)_swift_stdlib_strtof_clocale(v9, &v10, a1)) != 0LL
        && *v5 == 0;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0) {
        uint64_t v3 = (_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v3 = (_BYTE *)_StringObject.sharedUTF8.getter(a1, a2);
      }
      sub_10004BBB0(v3, (BOOL *)v9);
      int v4 = LOBYTE(v9[0]);
    }

    swift_bridgeObjectRelease(a2);
  }

  uint64_t v6 = v10;
  LOBYTE(v9[0]) = v4 ^ 1;
  if (!v4) {
    uint64_t v6 = 0LL;
  }
  return v6 | ((unint64_t)(v4 ^ 1u) << 32);
}

uint64_t sub_100046F48(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  unint64_t v6 = v5;
  uint64_t v9 = sub_100046FC4(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100046FC4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_100047108(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_1000471F4(v12, 0LL);
      unint64_t v5 = sub_100047258((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_100047108( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_10008AED8(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_10008AED8(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

void *sub_1000471F4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100005104(&qword_1000B9548);
  unint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  void v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

unint64_t sub_100047258( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  if (!a2)
  {
    uint64_t v13 = 0LL;
    unint64_t v15 = a4;
LABEL_34:
    *(void *)uint64_t result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = a6;
    *(void *)(result + 24) = a7;
    *(void *)(result + 3sub_1000062D8(v0 + 2) = v15;
    return v13;
  }

  if (!a3)
  {
    unint64_t v15 = a4;
    uint64_t v13 = 0LL;
    goto LABEL_34;
  }

  uint64_t v10 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 1;
  }
  uint64_t v11 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v27 = v11;
  if (a3 < 0) {
    goto LABEL_37;
  }
  unint64_t v23 = result;
  unint64_t v24 = a5;
  uint64_t v13 = 0LL;
  unint64_t v14 = a5 >> 14;
  unint64_t v15 = a4;
  uint64_t v16 = 4LL << v10;
  unint64_t v17 = a4 >> 14;
  uint64_t v25 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v26 = a7 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v22 = a4;
  unint64_t v28 = a4 >> 14;
  while (1)
  {
    unint64_t v18 = v15 >> 14;
    if (v15 >> 14 == v14) {
      goto LABEL_33;
    }
    unint64_t v19 = v15 & 0xC;
    unint64_t v20 = v15;
    if (v19 == v16) {
      break;
    }
    if (v18 < v17) {
      goto LABEL_35;
    }
LABEL_14:
    if (v18 >= v14) {
      goto LABEL_35;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)(v20, a6, a7);
      unint64_t v17 = v28;
      char v21 = result;
      if (v19 != v16) {
        goto LABEL_22;
      }
    }

    else if ((a7 & 0x2000000000000000LL) != 0)
    {
      v29[0] = a6;
      v29[1] = v26;
      char v21 = *((_BYTE *)v29 + (v20 >> 16));
      if (v19 != v16) {
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t result = v25;
      if ((a6 & 0x1000000000000000LL) == 0)
      {
        uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        unint64_t v17 = v28;
      }

      char v21 = *(_BYTE *)(result + (v20 >> 16));
      if (v19 != v16)
      {
LABEL_22:
        if ((a7 & 0x1000000000000000LL) != 0) {
          goto LABEL_23;
        }
        goto LABEL_9;
      }
    }

    uint64_t result = sub_10008AED8(v15, a6, a7);
    unint64_t v17 = v28;
    unint64_t v15 = result;
    if ((a7 & 0x1000000000000000LL) != 0)
    {
LABEL_23:
      if (v27 <= v15 >> 16) {
        goto LABEL_36;
      }
      uint64_t result = String.UTF8View._foreignIndex(after:)(v15, a6, a7);
      unint64_t v17 = v28;
      unint64_t v15 = result;
      goto LABEL_10;
    }

uint64_t sub_100047484(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    v13[0] = v5;
    v13[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = v13;
    return a3(v7, v8, a2);
  }

  uint64_t v5 = sub_100046F48(*a1, v6);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease(v6);
  *a1 = v5;
  a1[1] = v11;
  unint64_t v6 = v11;
  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000LL) != 0)
  {
    unint64_t v7 = (void *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v7 = (void *)_StringObject.sharedUTF8.getter(v5, v6);
  }

  return a3(v7, v8, a2);
}

uint64_t sub_10004754C(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned __int8 v16 = 0;
    unsigned __int8 v66 = 0;
    goto LABEL_145;
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }

          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            LOBYTE(v1sub_1000062D8(v0 + 2) = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned __int8 v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }

                else
                {
                  char v37 = -55;
                }
              }

              else
              {
                char v37 = -48;
              }

              int v38 = (char)v12 * (char)a3;
              char v39 = v38;
              int v12 = (char)v38 + (char)(v36 + v37);
              ++v35;
              --v31;
            }

            while (v31);
LABEL_76:
            unsigned __int8 v16 = v12;
            unsigned __int8 v66 = 0;
            goto LABEL_145;
          }

          goto LABEL_99;
        }

LABEL_143:
        unsigned __int8 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }

        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          LOBYTE(v43) = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }

              else
              {
                char v45 = -55;
              }
            }

            else
            {
              char v45 = -48;
            }

            int v46 = (char)v43 * (char)a3;
            char v47 = v46;
            int v43 = (char)v46 + (char)(v44 + v45);
            ++result;
            --v6;
          }

          while (v6);
          unsigned __int8 v16 = v43;
          unsigned __int8 v66 = 0;
          goto LABEL_145;
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }

        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOBYTE(v1sub_1000062D8(v0 + 2) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }

              else
              {
                char v15 = -55;
              }
            }

            else
            {
              char v15 = -48;
            }

            int v18 = (char)v12 * (char)a3;
            char v19 = v18;
            int v12 = (char)v18 - (char)(v14 + v15);
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

        unsigned __int8 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }

        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          LOWORD(v43) = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }

              else
              {
                char v45 = -55;
              }
            }

            else
            {
              char v45 = -48;
            }

            int v46 = (__int16)v43 * (__int16)a3;
            char v47 = v46;
            int v43 = (__int16)v46 + (v44 + v45);
            ++result;
            --v6;
          }

          while (v6);
          unsigned __int8 v16 = v43;
          unsigned __int8 v66 = 0;
          goto LABEL_145;
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }

        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOWORD(v1sub_1000062D8(v0 + 2) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }

              else
              {
                char v15 = -55;
              }
            }

            else
            {
              char v15 = -48;
            }

            int v18 = (__int16)v12 * (__int16)a3;
            char v19 = v18;
            int v12 = (__int16)v18 - (v14 + v15);
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

        unsigned __int8 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }

        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          int v43 = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }

              else
              {
                char v45 = -55;
              }
            }

            else
            {
              char v45 = -48;
            }

            int v46 = v43 * (uint64_t)(int)a3;
            char v47 = v44 + v45;
            int v43 = v46 + v47;
            if (__OFADD__((_DWORD)v46, v47)) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }

          while (v6);
          unsigned __int8 v16 = v46 + v47;
          unsigned __int8 v66 = 0;
          return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }

        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          int v12 = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }

              else
              {
                char v15 = -55;
              }
            }

            else
            {
              char v15 = -48;
            }

            int v18 = (int)v12 * (uint64_t)(int)a3;
            char v19 = v14 + v15;
            int v12 = v18 - v19;
            if (__OFSUB__((_DWORD)v18, v19)) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

        unsigned __int8 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v34 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v35 = a3 + 55;
        }

        else
        {
          unsigned __int8 v34 = 97;
          uint64_t v35 = 65;
        }

        if (a3 <= 10) {
          unsigned int v36 = a3 + 48;
        }
        else {
          unsigned int v36 = 58;
        }
        if (result)
        {
          LOBYTE(v3sub_1000062D8(v0 + 7) = 0;
          do
          {
            int v38 = *(unsigned __int8 *)result;
            if (v38 < 0x30 || v38 >= v36)
            {
              if (v38 < 0x41 || v38 >= v35)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v38 < 0x61 || v38 >= v34) {
                  goto LABEL_144;
                }
                char v39 = -87;
              }

              else
              {
                char v39 = -55;
              }
            }

            else
            {
              char v39 = -48;
            }

            char v37 = (v37 * a3) + (v38 + v39);
            if (((v37 >> 8) & 1) != 0) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }

          while (v6);
          unsigned __int8 v16 = v37;
          char v54 = 0;
          goto LABEL_145;
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }

        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOBYTE(v1sub_1000062D8(v0 + 2) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }

              else
              {
                char v15 = -55;
              }
            }

            else
            {
              char v15 = -48;
            }

            int v12 = (v12 * a3) - (v14 + v15);
            if ((v12 & 0xFFFFFF00) != 0) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

        unsigned __int8 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v34 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v35 = a3 + 55;
        }

        else
        {
          unsigned __int8 v34 = 97;
          uint64_t v35 = 65;
        }

        if (a3 <= 10) {
          unsigned int v36 = a3 + 48;
        }
        else {
          unsigned int v36 = 58;
        }
        if (result)
        {
          LOWORD(v3sub_1000062D8(v0 + 7) = 0;
          do
          {
            int v38 = *(unsigned __int8 *)result;
            if (v38 < 0x30 || v38 >= v36)
            {
              if (v38 < 0x41 || v38 >= v35)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v38 < 0x61 || v38 >= v34) {
                  goto LABEL_144;
                }
                char v39 = -87;
              }

              else
              {
                char v39 = -55;
              }
            }

            else
            {
              char v39 = -48;
            }

            unsigned __int8 v40 = (unsigned __int16)v37 * (unsigned __int16)a3;
            if ((v40 & 0xFFFF0000) != 0) {
              goto LABEL_143;
            }
            char v37 = (unsigned __int16)(v37 * a3) + (v38 + v39);
            if ((v37 & 0x10000) != 0) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }

          while (v6);
          unsigned __int8 v16 = v40 + (v38 + v39);
          int v55 = 0;
          goto LABEL_145;
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }

        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOWORD(v1sub_1000062D8(v0 + 2) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }

              else
              {
                char v15 = -55;
              }
            }

            else
            {
              char v15 = -48;
            }

            int v12 = (unsigned __int16)(v12 * a3) - (v14 + v15);
            if ((v12 & 0xFFFF0000) != 0) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

        unsigned __int8 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }

        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          int v43 = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }

              else
              {
                char v45 = -55;
              }
            }

            else
            {
              char v45 = -48;
            }

            int v46 = v43 * (unint64_t)a3;
            if ((v46 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_143;
            }
            char v47 = v44 + v45;
            int v43 = v46 + v47;
            if (__CFADD__((_DWORD)v46, v47)) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }

          while (v6);
          unsigned __int8 v16 = v46 + v47;
          unsigned __int8 v66 = 0;
          return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }

        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          int v12 = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }

              else
              {
                char v15 = -55;
              }
            }

            else
            {
              char v15 = -48;
            }

            int v18 = v12 * (unint64_t)a3;
            if ((v18 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_143;
            }
            char v19 = v14 + v15;
            int v12 = v18 - v19;
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

LABEL_99:
        unsigned __int8 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
LABEL_145:
        LOBYTE(v65[0]) = (a2 & 0x1000000000000000LL) != 0;
        return v16 | (v66 << 8) | (LOBYTE(v65[0]) << 16);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        LOBYTE(v2sub_1000062D8(v0 + 2) = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }

        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        char v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }

            else
            {
              char v62 = -55;
            }
          }

          else
          {
            char v62 = -48;
          }

          int v63 = (char)v22 * (char)a3;
          char v64 = v63;
          int v22 = (char)v63 + (char)(v61 + v62);
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        LOBYTE(v2sub_1000062D8(v0 + 2) = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }

        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        uint64_t v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          int v29 = (char)v22 * (char)a3;
          char v30 = v29;
          int v22 = (char)v29 - (char)(v27 + v28);
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      LOBYTE(v2sub_1000062D8(v0 + 2) = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }

      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }

      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      unint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned __int8 v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }

          else
          {
            char v54 = -55;
          }
        }

        else
        {
          char v54 = -48;
        }

        int v55 = (char)v22 * (char)a3;
        char v56 = v55;
        int v22 = (char)v55 + (char)(v53 + v54);
        ++v52;
        --v48;
      }

      while (v48);
LABEL_142:
      unsigned __int8 v16 = v22;
      unsigned __int8 v66 = 0;
      goto LABEL_145;
    }

    goto LABEL_143;
  }

        unsigned __int8 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
LABEL_145:
        LOBYTE(v65[0]) = (a2 & 0x1000000000000000LL) != 0;
        return v16 | (v66 << 16) | (LOBYTE(v65[0]) << 24);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        LOWORD(v2sub_1000062D8(v0 + 2) = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }

        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        char v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }

            else
            {
              char v62 = -55;
            }
          }

          else
          {
            char v62 = -48;
          }

          int v63 = (__int16)v22 * (__int16)a3;
          char v64 = v63;
          int v22 = (__int16)v63 + (v61 + v62);
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        LOWORD(v2sub_1000062D8(v0 + 2) = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }

        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        uint64_t v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          int v29 = (__int16)v22 * (__int16)a3;
          char v30 = v29;
          int v22 = (__int16)v29 - (v27 + v28);
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      LOWORD(v2sub_1000062D8(v0 + 2) = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }

      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }

      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      unint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned __int8 v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }

          else
          {
            char v54 = -55;
          }
        }

        else
        {
          char v54 = -48;
        }

        int v55 = (__int16)v22 * (__int16)a3;
        char v56 = v55;
        int v22 = (__int16)v55 + (v53 + v54);
        ++v52;
        --v48;
      }

      while (v48);
LABEL_142:
      unsigned __int8 v16 = v22;
      unsigned __int8 v66 = 0;
      goto LABEL_145;
    }

    goto LABEL_143;
  }

        unsigned __int8 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
        return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        int v22 = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }

        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        char v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }

            else
            {
              char v62 = -55;
            }
          }

          else
          {
            char v62 = -48;
          }

          int v63 = (int)v22 * (uint64_t)(int)a3;
          char v64 = v61 + v62;
          int v22 = v63 + v64;
          if (__OFADD__((_DWORD)v63, v64)) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        int v22 = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }

        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        uint64_t v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          int v29 = (int)v22 * (uint64_t)(int)a3;
          char v30 = v27 + v28;
          int v22 = v29 - v30;
          if (__OFSUB__((_DWORD)v29, v30)) {
            goto LABEL_143;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      int v22 = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }

      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }

      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      unint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned __int8 v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }

          else
          {
            char v54 = -55;
          }
        }

        else
        {
          char v54 = -48;
        }

        int v55 = (int)v22 * (uint64_t)(int)a3;
        char v56 = v53 + v54;
        int v22 = v55 + v56;
        if (__OFADD__((_DWORD)v55, v56)) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }

      while (v48);
LABEL_142:
      unsigned __int8 v16 = v22;
      unsigned __int8 v66 = 0;
      return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
    }

    goto LABEL_143;
  }

        unsigned __int8 v16 = 0;
        char v17 = 0;
LABEL_144:
        char v54 = v17;
LABEL_145:
        LOBYTE(v53[0]) = (a2 & 0x1000000000000000LL) != 0;
        return v16 | (v54 << 8) | (LOBYTE(v53[0]) << 16);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  int v18 = HIBYTE(a2) & 0xF;
  v53[0] = result;
  v53[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v18)
      {
        LOBYTE(v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0;
        char v47 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v48 = a3 + 55;
        }

        else
        {
          char v47 = 97;
          uint64_t v48 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v49 = a3 + 48;
        }
        else {
          unsigned __int8 v49 = 58;
        }
        unsigned __int8 v50 = (unsigned __int8 *)v53;
        while (1)
        {
          unsigned __int8 v51 = *v50;
          if (v51 < 0x30 || v51 >= v49)
          {
            if (v51 < 0x41 || v51 >= v48)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v51 < 0x61 || v51 >= v47) {
                goto LABEL_144;
              }
              unint64_t v52 = -87;
            }

            else
            {
              unint64_t v52 = -55;
            }
          }

          else
          {
            unint64_t v52 = -48;
          }

          uint64_t v20 = (v20 * a3) + (v51 + v52);
          if (((v20 >> 8) & 1) != 0) {
            goto LABEL_143;
          }
          ++v50;
          if (!--v18) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v18)
    {
      char v19 = v18 - 1;
      if (v19)
      {
        LOBYTE(v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0;
        uint64_t v21 = a3 + 87;
        if (a3 > 10)
        {
          int v22 = a3 + 55;
        }

        else
        {
          uint64_t v21 = 97;
          int v22 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        unsigned __int8 v24 = (unsigned __int8 *)v53 + 1;
        while (1)
        {
          unsigned __int8 v25 = *v24;
          if (v25 < 0x30 || v25 >= v23)
          {
            if (v25 < 0x41 || v25 >= v22)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v25 < 0x61 || v25 >= v21) {
                goto LABEL_144;
              }
              uint64_t v26 = -87;
            }

            else
            {
              uint64_t v26 = -55;
            }
          }

          else
          {
            uint64_t v26 = -48;
          }

          uint64_t v20 = (v20 * a3) - (v25 + v26);
          if ((v20 & 0xFFFFFF00) != 0) {
            goto LABEL_143;
          }
          ++v24;
          if (!--v19) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v18)
  {
    unsigned __int8 v40 = v18 - 1;
    if (v40)
    {
      LOBYTE(v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0;
      unsigned __int8 v41 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v42 = a3 + 55;
      }

      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v42 = 65;
      }

      if (a3 <= 10) {
        int v43 = a3 + 48;
      }
      else {
        int v43 = 58;
      }
      unsigned int v44 = (unsigned __int8 *)v53 + 1;
      do
      {
        char v45 = *v44;
        if (v45 < 0x30 || v45 >= v43)
        {
          if (v45 < 0x41 || v45 >= v42)
          {
            unsigned __int8 v16 = 0;
            char v17 = 1;
            if (v45 < 0x61 || v45 >= v41) {
              goto LABEL_144;
            }
            int v46 = -87;
          }

          else
          {
            int v46 = -55;
          }
        }

        else
        {
          int v46 = -48;
        }

        uint64_t v20 = (v20 * a3) + (v45 + v46);
        if (((v20 >> 8) & 1) != 0) {
          goto LABEL_143;
        }
        ++v44;
        --v40;
      }

      while (v40);
LABEL_142:
      unsigned __int8 v16 = v20;
      char v54 = 0;
      goto LABEL_145;
    }

    goto LABEL_143;
  }

        unsigned __int8 v16 = 0;
        char v17 = 0;
LABEL_144:
        int v55 = v17;
LABEL_145:
        LOBYTE(v54[0]) = (a2 & 0x1000000000000000LL) != 0;
        return v16 | (v55 << 16) | (LOBYTE(v54[0]) << 24);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  int v18 = HIBYTE(a2) & 0xF;
  v54[0] = result;
  v54[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v18)
      {
        LOWORD(v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0;
        uint64_t v48 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v49 = a3 + 55;
        }

        else
        {
          uint64_t v48 = 97;
          unsigned __int8 v49 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v50 = a3 + 48;
        }
        else {
          unsigned __int8 v50 = 58;
        }
        unsigned __int8 v51 = (unsigned __int8 *)v54;
        while (1)
        {
          unint64_t v52 = *v51;
          if (v52 < 0x30 || v52 >= v50)
          {
            if (v52 < 0x41 || v52 >= v49)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v52 < 0x61 || v52 >= v48) {
                goto LABEL_144;
              }
              unsigned int v53 = -87;
            }

            else
            {
              unsigned int v53 = -55;
            }
          }

          else
          {
            unsigned int v53 = -48;
          }

          uint64_t v20 = (unsigned __int16)(v20 * a3) + (v52 + v53);
          if ((v20 & 0x10000) != 0) {
            goto LABEL_143;
          }
          ++v51;
          if (!--v18) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v18)
    {
      char v19 = v18 - 1;
      if (v19)
      {
        LOWORD(v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0;
        uint64_t v21 = a3 + 87;
        if (a3 > 10)
        {
          int v22 = a3 + 55;
        }

        else
        {
          uint64_t v21 = 97;
          int v22 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        unsigned __int8 v24 = (unsigned __int8 *)v54 + 1;
        while (1)
        {
          unsigned __int8 v25 = *v24;
          if (v25 < 0x30 || v25 >= v23)
          {
            if (v25 < 0x41 || v25 >= v22)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v25 < 0x61 || v25 >= v21) {
                goto LABEL_144;
              }
              uint64_t v26 = -87;
            }

            else
            {
              uint64_t v26 = -55;
            }
          }

          else
          {
            uint64_t v26 = -48;
          }

          uint64_t v20 = (unsigned __int16)(v20 * a3) - (v25 + v26);
          if ((v20 & 0xFFFF0000) != 0) {
            goto LABEL_143;
          }
          ++v24;
          if (!--v19) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v18)
  {
    unsigned __int8 v41 = v18 - 1;
    if (v41)
    {
      LOWORD(v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0;
      unsigned __int8 v42 = a3 + 87;
      if (a3 > 10)
      {
        int v43 = a3 + 55;
      }

      else
      {
        unsigned __int8 v42 = 97;
        int v43 = 65;
      }

      if (a3 <= 10) {
        unsigned int v44 = a3 + 48;
      }
      else {
        unsigned int v44 = 58;
      }
      char v45 = (unsigned __int8 *)v54 + 1;
      do
      {
        int v46 = *v45;
        if (v46 < 0x30 || v46 >= v44)
        {
          if (v46 < 0x41 || v46 >= v43)
          {
            unsigned __int8 v16 = 0;
            char v17 = 1;
            if (v46 < 0x61 || v46 >= v42) {
              goto LABEL_144;
            }
            char v47 = -87;
          }

          else
          {
            char v47 = -55;
          }
        }

        else
        {
          char v47 = -48;
        }

        uint64_t v20 = (unsigned __int16)(v20 * a3) + (v46 + v47);
        if ((v20 & 0x10000) != 0) {
          goto LABEL_143;
        }
        ++v45;
        --v41;
      }

      while (v41);
LABEL_142:
      unsigned __int8 v16 = v20;
      int v55 = 0;
      goto LABEL_145;
    }

    goto LABEL_143;
  }

        unsigned __int8 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
        return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        int v22 = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }

        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        char v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }

            else
            {
              char v62 = -55;
            }
          }

          else
          {
            char v62 = -48;
          }

          int v63 = v22 * (unint64_t)a3;
          if ((v63 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_143;
          }
          char v64 = v61 + v62;
          int v22 = v63 + v64;
          if (__CFADD__((_DWORD)v63, v64)) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        int v22 = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }

        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        uint64_t v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          int v29 = v22 * (unint64_t)a3;
          if ((v29 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_143;
          }
          char v30 = v27 + v28;
          int v22 = v29 - v30;
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      int v22 = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }

      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }

      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      unint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned __int8 v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }

          else
          {
            char v54 = -55;
          }
        }

        else
        {
          char v54 = -48;
        }

        int v55 = v22 * (unint64_t)a3;
        if ((v55 & 0xFFFFFFFF00000000LL) != 0) {
          goto LABEL_143;
        }
        char v56 = v53 + v54;
        int v22 = v55 + v56;
        if (__CFADD__((_DWORD)v55, v56)) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }

      while (v48);
LABEL_142:
      unsigned __int8 v16 = v22;
      unsigned __int8 v66 = 0;
      return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
    }

    goto LABEL_143;
  }

LABEL_151:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

unsigned __int8 *sub_100047B10(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            int v23 = (char)v8 * (char)a3;
            char v24 = v23;
            int v8 = (char)v23 + (char)(v21 + v22);
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          LOBYTE(v28) = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v30 = -87;
              }

              else
              {
                char v30 = -55;
              }
            }

            else
            {
              char v30 = -48;
            }

            int v31 = (char)v28 * (char)a3;
            char v32 = v31;
            int v28 = (char)v31 + (char)(v29 + v30);
            ++result;
            --a2;
          }

          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            int v14 = (char)v8 * (char)a3;
            char v15 = v14;
            int v8 = (char)v14 - (char)(v10 + v11);
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          LOWORD(v28) = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v30 = -87;
              }

              else
              {
                char v30 = -55;
              }
            }

            else
            {
              char v30 = -48;
            }

            int v31 = (__int16)v28 * (__int16)a3;
            char v32 = v31;
            int v28 = (__int16)v31 + (v29 + v30);
            ++result;
            --a2;
          }

          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            int v14 = (__int16)v8 * (__int16)a3;
            char v15 = v14;
            int v8 = (__int16)v14 - (v10 + v11);
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }

              else
              {
                char v30 = -55;
              }
            }

            else
            {
              char v30 = -48;
            }

            int v31 = (int)v28 * (uint64_t)(int)a3;
            char v32 = v29 + v30;
            int v28 = v31 + v32;
            if (__OFADD__((_DWORD)v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          int v8 = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            int v14 = (int)v8 * (uint64_t)(int)a3;
            char v15 = v10 + v11;
            int v8 = v14 - v15;
            if (__OFSUB__((_DWORD)v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned int v21 = a3 + 87;
        if (a3 > 10)
        {
          char v22 = a3 + 55;
        }

        else
        {
          unsigned int v21 = 97;
          char v22 = 65;
        }

        if (a3 <= 10) {
          int v23 = a3 + 48;
        }
        else {
          int v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            unsigned __int8 v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                unsigned __int8 v26 = -87;
              }

              else
              {
                unsigned __int8 v26 = -55;
              }
            }

            else
            {
              unsigned __int8 v26 = -48;
            }

            char v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned int v21 = a3 + 87;
        if (a3 > 10)
        {
          char v22 = a3 + 55;
        }

        else
        {
          unsigned int v21 = 97;
          char v22 = 65;
        }

        if (a3 <= 10) {
          int v23 = a3 + 48;
        }
        else {
          int v23 = 58;
        }
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            unsigned __int8 v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                unsigned __int8 v26 = -87;
              }

              else
              {
                unsigned __int8 v26 = -55;
              }
            }

            else
            {
              unsigned __int8 v26 = -48;
            }

            char v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            int v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }

              else
              {
                char v30 = -55;
              }
            }

            else
            {
              char v30 = -48;
            }

            int v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            char v32 = v29 + v30;
            int v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          int v8 = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            int v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            char v15 = v10 + v11;
            int v8 = v14 - v15;
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100047DC4(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned __int16 v16 = 0;
    unsigned __int8 v66 = 0;
    goto LABEL_145;
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }

          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            LOWORD(v1sub_1000062D8(v0 + 2) = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned __int16 v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }

                else
                {
                  char v37 = -55;
                }
              }

              else
              {
                char v37 = -48;
              }

              int v38 = (__int16)v12 * (__int16)a3;
              __int16 v39 = v38;
              int v12 = (__int16)v38 + (v36 + v37);
              ++v35;
              --v31;
            }

            while (v31);
LABEL_76:
            unsigned __int16 v16 = v12;
            unsigned __int8 v66 = 0;
            goto LABEL_145;
          }

          goto LABEL_99;
        }

unsigned __int8 *sub_100048388(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            int v23 = (__int16)v8 * (__int16)a3;
            __int16 v24 = v23;
            int v8 = (__int16)v23 + (v21 + v22);
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

uint64_t sub_10004863C(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned int v16 = 0;
    unsigned __int8 v66 = 0;
    return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }

          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            unsigned int v12 = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned int v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }

                else
                {
                  char v37 = -55;
                }
              }

              else
              {
                char v37 = -48;
              }

              uint64_t v38 = (int)v12 * (uint64_t)(int)a3;
              unsigned __int8 v39 = v36 + v37;
              unsigned int v12 = v38 + v39;
              if (__OFADD__((_DWORD)v38, v39)) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }

            while (v31);
LABEL_76:
            unsigned int v16 = v12;
            unsigned __int8 v66 = 0;
            return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
          }

          goto LABEL_99;
        }

unsigned __int8 *sub_100048B80(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__((_DWORD)v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

uint64_t sub_100048E00(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = 0LL;
    char v65 = 0;
    goto LABEL_128;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      unsigned __int8 v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter(result, a2);
      unsigned __int8 v5 = (unsigned __int8 *)result;
    }

    int v7 = *v5;
    if (v7 == 43)
    {
      if (v6 < 1)
      {
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }

      uint64_t v30 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v31 = a3 + 55;
        unsigned __int8 v32 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v33 = 58;
        }

        else
        {
          unsigned __int8 v32 = 97;
          unsigned __int8 v31 = 65;
          unsigned __int8 v33 = a3 + 48;
        }

        if (v5)
        {
          uint64_t v12 = 0LL;
          unsigned __int8 v34 = v5 + 1;
          do
          {
            unsigned int v35 = *v34;
            if (v35 < 0x30 || v35 >= v33)
            {
              if (v35 < 0x41 || v35 >= v31)
              {
                uint64_t result = 0LL;
                char v16 = 1;
                if (v35 < 0x61 || v35 >= v32) {
                  goto LABEL_88;
                }
                char v36 = -87;
              }

              else
              {
                char v36 = -55;
              }
            }

            else
            {
              char v36 = -48;
            }

            uint64_t v37 = v12 * a3;
            unsigned __int8 v38 = v35 + v36;
            uint64_t v12 = v37 + v38;
            if (__OFADD__(v37, v38)) {
              goto LABEL_129;
            }
            ++v34;
            --v30;
          }

          while (v30);
LABEL_67:
          uint64_t result = v12;
          char v65 = 0;
          goto LABEL_128;
        }

        goto LABEL_87;
      }
    }

    else
    {
      if (v7 == 45)
      {
        if (v6 >= 1)
        {
          uint64_t v8 = v6 - 1;
          if (v6 != 1)
          {
            unsigned __int8 v9 = a3 + 55;
            unsigned __int8 v10 = a3 + 87;
            if (a3 > 10)
            {
              unsigned __int8 v11 = 58;
            }

            else
            {
              unsigned __int8 v10 = 97;
              unsigned __int8 v9 = 65;
              unsigned __int8 v11 = a3 + 48;
            }

            if (v5)
            {
              uint64_t v12 = 0LL;
              unsigned __int8 v13 = v5 + 1;
              while (1)
              {
                unsigned int v14 = *v13;
                if (v14 < 0x30 || v14 >= v11)
                {
                  if (v14 < 0x41 || v14 >= v9)
                  {
                    uint64_t result = 0LL;
                    char v16 = 1;
                    if (v14 < 0x61 || v14 >= v10) {
                      goto LABEL_88;
                    }
                    char v15 = -87;
                  }

                  else
                  {
                    char v15 = -55;
                  }
                }

                else
                {
                  char v15 = -48;
                }

                uint64_t v17 = v12 * a3;
                unsigned __int8 v18 = v14 + v15;
                uint64_t v12 = v17 - v18;
                if (__OFSUB__(v17, v18)) {
                  goto LABEL_129;
                }
                ++v13;
                if (!--v8) {
                  goto LABEL_67;
                }
              }
            }

LABEL_87:
            uint64_t result = 0LL;
            char v16 = 0;
LABEL_88:
            char v65 = v16;
            goto LABEL_128;
          }

          goto LABEL_129;
        }

        __break(1u);
        goto LABEL_133;
      }

      if (v6)
      {
        unsigned __int8 v39 = a3 + 55;
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = 58;
        }

        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v39 = 65;
          unsigned __int8 v41 = a3 + 48;
        }

        if (!v5) {
          goto LABEL_87;
        }
        uint64_t v42 = 0LL;
        do
        {
          unsigned int v43 = *v5;
          if (v43 < 0x30 || v43 >= v41)
          {
            if (v43 < 0x41 || v43 >= v39)
            {
              uint64_t result = 0LL;
              char v16 = 1;
              if (v43 < 0x61 || v43 >= v40) {
                goto LABEL_88;
              }
              char v44 = -87;
            }

            else
            {
              char v44 = -55;
            }
          }

          else
          {
            char v44 = -48;
          }

          uint64_t v45 = v42 * a3;
          unsigned __int8 v46 = v43 + v44;
          uint64_t v42 = v45 + v46;
          if (__OFADD__(v45, v46)) {
            goto LABEL_129;
          }
          ++v5;
          --v6;
        }

        while (v6);
        uint64_t result = v45 + v46;
        char v65 = 0;
LABEL_128:
        LOBYTE(v64[0]) = (a2 & 0x1000000000000000LL) != 0;
        return result;
      }
    }

LABEL_129:
    uint64_t result = 0LL;
    char v65 = 1;
    goto LABEL_128;
  }

  uint64_t v19 = HIBYTE(a2) & 0xF;
  v64[0] = result;
  v64[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result == 45)
    {
      if (!v19)
      {
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }

      uint64_t v20 = v19 - 1;
      if (v20)
      {
        uint64_t v21 = 0LL;
        unsigned __int8 v22 = a3 + 55;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = 58;
        }

        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v22 = 65;
          unsigned __int8 v24 = a3 + 48;
        }

        unsigned __int8 v25 = (unsigned __int8 *)v64 + 1;
        while (1)
        {
          unsigned int v26 = *v25;
          if (v26 < 0x30 || v26 >= v24)
          {
            if (v26 < 0x41 || v26 >= v22)
            {
              uint64_t result = 0LL;
              if (v26 < 0x61 || v26 >= v23) {
                goto LABEL_127;
              }
              char v27 = -87;
            }

            else
            {
              char v27 = -55;
            }
          }

          else
          {
            char v27 = -48;
          }

          uint64_t v28 = v21 * a3;
          unsigned __int8 v29 = v26 + v27;
          uint64_t v21 = v28 - v29;
          if (__OFSUB__(v28, v29)) {
            break;
          }
          ++v25;
          if (!--v20) {
            goto LABEL_125;
          }
        }
      }
    }

    else if (v19)
    {
      uint64_t v21 = 0LL;
      unsigned __int8 v56 = a3 + 55;
      unsigned __int8 v57 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v58 = 58;
      }

      else
      {
        unsigned __int8 v57 = 97;
        unsigned __int8 v56 = 65;
        unsigned __int8 v58 = a3 + 48;
      }

      unsigned __int8 v59 = (unsigned __int8 *)v64;
      while (1)
      {
        unsigned int v60 = *v59;
        if (v60 < 0x30 || v60 >= v58)
        {
          if (v60 < 0x41 || v60 >= v56)
          {
            uint64_t result = 0LL;
            if (v60 < 0x61 || v60 >= v57) {
              goto LABEL_127;
            }
            char v61 = -87;
          }

          else
          {
            char v61 = -55;
          }
        }

        else
        {
          char v61 = -48;
        }

        uint64_t v62 = v21 * a3;
        unsigned __int8 v63 = v60 + v61;
        uint64_t v21 = v62 + v63;
        if (__OFADD__(v62, v63)) {
          break;
        }
        ++v59;
        if (!--v19) {
          goto LABEL_125;
        }
      }
    }

LABEL_126:
    uint64_t result = 0LL;
LABEL_127:
    char v65 = 1;
    goto LABEL_128;
  }

  if (v19)
  {
    uint64_t v47 = v19 - 1;
    if (v47)
    {
      uint64_t v21 = 0LL;
      unsigned __int8 v48 = a3 + 55;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = 58;
      }

      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v48 = 65;
        unsigned __int8 v50 = a3 + 48;
      }

      unsigned __int8 v51 = (unsigned __int8 *)v64 + 1;
      do
      {
        unsigned int v52 = *v51;
        if (v52 < 0x30 || v52 >= v50)
        {
          if (v52 < 0x41 || v52 >= v48)
          {
            uint64_t result = 0LL;
            if (v52 < 0x61 || v52 >= v49) {
              goto LABEL_127;
            }
            char v53 = -87;
          }

          else
          {
            char v53 = -55;
          }
        }

        else
        {
          char v53 = -48;
        }

        uint64_t v54 = v21 * a3;
        unsigned __int8 v55 = v52 + v53;
        uint64_t v21 = v54 + v55;
        if (__OFADD__(v54, v55)) {
          goto LABEL_126;
        }
        ++v51;
        --v47;
      }

      while (v47);
LABEL_125:
      uint64_t result = v21;
      char v65 = 0;
      goto LABEL_128;
    }

    goto LABEL_126;
  }

LABEL_135:
  __break(1u);
  return result;
}

unsigned __int8 *sub_10004936C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0LL;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v14 = v9 * a3;
              uint64_t v9 = v14 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }

      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }

      if (result)
      {
        uint64_t v26 = 0LL;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0LL;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          uint64_t v29 = v26 * a3;
          uint64_t v26 = v29 + (v27 + v28);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }

  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0LL;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }

      else
      {
        char v21 = -55;
      }
    }

    else
    {
      char v21 = -48;
    }

    uint64_t v22 = v9 * a3;
    uint64_t v9 = v22 + (v20 + v21);
    ++v19;
    --v15;
  }

  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1000495E8(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned __int8 v16 = 0;
    unsigned __int8 v54 = 0;
    goto LABEL_145;
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v27 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v28 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v29 = a3 + 55;
          }

          else
          {
            unsigned __int8 v28 = 97;
            unsigned __int8 v29 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v30 = a3 + 48;
          }
          else {
            unsigned __int8 v30 = 58;
          }
          if (result)
          {
            LOBYTE(v1sub_1000062D8(v0 + 2) = 0;
            unsigned __int8 v31 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v32 = *v31;
              if (v32 < 0x30 || v32 >= v30)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  unsigned __int8 v16 = 0;
                  char v17 = 1;
                  if (v32 < 0x61 || v32 >= v28) {
                    goto LABEL_144;
                  }
                  char v33 = -87;
                }

                else
                {
                  char v33 = -55;
                }
              }

              else
              {
                char v33 = -48;
              }

              unsigned int v12 = (v12 * a3) + (v32 + v33);
              if (((v12 >> 8) & 1) != 0) {
                goto LABEL_143;
              }
              ++v31;
              --v27;
            }

            while (v27);
LABEL_76:
            unsigned __int8 v16 = v12;
            unsigned __int8 v54 = 0;
            goto LABEL_145;
          }

          goto LABEL_99;
        }

uint64_t sub_100049B94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v8 = String.init<A>(_:)( &v8,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v9 = v6;
  LOWORD(a4) = sub_100049C18(&v8, a3, a4);
  swift_bridgeObjectRelease(v9);
  return (unsigned __int16)a4 & 0x1FF;
}

uint64_t sub_100049C18(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  if ((v7 & 0x1000000000000000LL) == 0)
  {
    if ((v7 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v9 = HIBYTE(v7) & 0xF;
    v16[0] = v6;
    v16[1] = v7 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v8 = v16;
    goto LABEL_7;
  }

  uint64_t v6 = sub_100046F48(*a1, v7);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease(v7);
  *a1 = v6;
  a1[1] = v12;
  unint64_t v7 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = (void *)_StringObject.sharedUTF8.getter(v6, v7);
  }

unsigned __int8 *sub_100049CE8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }

        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }

              else
              {
                char v20 = -55;
              }
            }

            else
            {
              char v20 = -48;
            }

            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }

          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

uint64_t sub_100049F90(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned __int16 v16 = 0;
    unsigned __int8 v55 = 0;
    goto LABEL_145;
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v27 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v28 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v29 = a3 + 55;
          }

          else
          {
            unsigned __int8 v28 = 97;
            unsigned __int8 v29 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v30 = a3 + 48;
          }
          else {
            unsigned __int8 v30 = 58;
          }
          if (result)
          {
            LOWORD(v1sub_1000062D8(v0 + 2) = 0;
            unsigned __int8 v31 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v32 = *v31;
              if (v32 < 0x30 || v32 >= v30)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  unsigned __int16 v16 = 0;
                  char v17 = 1;
                  if (v32 < 0x61 || v32 >= v28) {
                    goto LABEL_144;
                  }
                  char v33 = -87;
                }

                else
                {
                  char v33 = -55;
                }
              }

              else
              {
                char v33 = -48;
              }

              int v12 = (unsigned __int16)(v12 * a3) + (v32 + v33);
              if ((v12 & 0x10000) != 0) {
                goto LABEL_143;
              }
              ++v31;
              --v27;
            }

            while (v27);
LABEL_76:
            unsigned __int16 v16 = v12;
            unsigned __int8 v55 = 0;
            goto LABEL_145;
          }

          goto LABEL_99;
        }

uint64_t sub_10004A53C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v8 = String.init<A>(_:)( &v8,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v9 = v6;
  LODWORD(a4) = sub_10004A5C0(&v8, a3, a4);
  swift_bridgeObjectRelease(v9);
  return a4 & 0x1FFFF;
}

uint64_t sub_10004A5C0(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v6 = sub_100046F48(*a1, v7);
    unint64_t v12 = v11;
    swift_bridgeObjectRelease(v7);
    *a1 = v6;
    a1[1] = v12;
    unint64_t v7 = v12;
    if ((v12 & 0x2000000000000000LL) == 0)
    {
LABEL_3:
      if ((v6 & 0x1000000000000000LL) != 0)
      {
        uint64_t v8 = (void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v8 = (void *)_StringObject.sharedUTF8.getter(v6, v7);
      }

      goto LABEL_7;
    }
  }

  else if ((v7 & 0x2000000000000000LL) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v9 = HIBYTE(v7) & 0xF;
  v14[0] = v6;
  v14[1] = v7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v8 = v14;
LABEL_7:
  uint64_t result = a3(v8, v9, a2);
  if (!v3) {
    return result & 0x1FFFF;
  }
  return result;
}

unsigned __int8 *sub_10004A688(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }

        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v20 = -87;
              }

              else
              {
                char v20 = -55;
              }
            }

            else
            {
              char v20 = -48;
            }

            int v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }

          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

uint64_t sub_10004A930(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned int v16 = 0;
    unsigned __int8 v66 = 0;
    return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      uint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }

          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            unsigned int v12 = 0;
            unsigned __int8 v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned int v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }

                else
                {
                  char v37 = -55;
                }
              }

              else
              {
                char v37 = -48;
              }

              unint64_t v38 = v12 * (unint64_t)a3;
              if ((v38 & 0xFFFFFFFF00000000LL) != 0) {
                goto LABEL_143;
              }
              unsigned __int8 v39 = v36 + v37;
              unsigned int v12 = v38 + v39;
              if (__CFADD__((_DWORD)v38, v39)) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }

            while (v31);
LABEL_76:
            unsigned int v16 = v12;
            unsigned __int8 v66 = 0;
            return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
          }

          goto LABEL_99;
        }

uint64_t sub_10004AE74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v9 = String.init<A>(_:)( &v9,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v10 = v6;
  unint64_t v7 = sub_10004AF00(&v9, a3, a4);
  swift_bridgeObjectRelease(v10);
  return v7 | ((HIDWORD(v7) & 1) << 32);
}

unint64_t sub_10004AF00( uint64_t *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v6 = sub_100046F48(*a1, v7);
    unint64_t v12 = v11;
    swift_bridgeObjectRelease(v7);
    *a1 = v6;
    a1[1] = v12;
    unint64_t v7 = v12;
    if ((v12 & 0x2000000000000000LL) == 0)
    {
LABEL_3:
      if ((v6 & 0x1000000000000000LL) != 0)
      {
        uint64_t v8 = (void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v8 = (void *)_StringObject.sharedUTF8.getter(v6, v7);
      }

      goto LABEL_7;
    }
  }

  else if ((v7 & 0x2000000000000000LL) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v9 = HIBYTE(v7) & 0xF;
  v14[0] = v6;
  v14[1] = v7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v8 = v14;
LABEL_7:
  unint64_t result = a3(v8, v9, a2);
  if (!v3) {
    return result | ((HIDWORD(result) & 1) << 32);
  }
  return result;
}

unsigned __int8 *sub_10004AFD0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

uint64_t sub_10004B250(uint64_t result, unint64_t a2, int64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t result = 0LL;
    char v66 = 0;
    goto LABEL_130;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      unsigned __int8 v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter(result, a2);
      unsigned __int8 v5 = (unsigned __int8 *)result;
    }

    int v7 = *v5;
    if (v7 == 43)
    {
      if (v6 < 1)
      {
LABEL_136:
        __break(1u);
        goto LABEL_137;
      }

      uint64_t v31 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v32 = a3 + 55;
        unsigned __int8 v33 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v34 = 58;
        }

        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
          unsigned __int8 v34 = a3 + 48;
        }

        if (v5)
        {
          unint64_t v12 = 0LL;
          unsigned __int8 v35 = v5 + 1;
          do
          {
            unsigned int v36 = *v35;
            if (v36 < 0x30 || v36 >= v34)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                unint64_t result = 0LL;
                char v16 = 1;
                if (v36 < 0x61 || v36 >= v33) {
                  goto LABEL_90;
                }
                char v37 = -87;
              }

              else
              {
                char v37 = -55;
              }
            }

            else
            {
              char v37 = -48;
            }

            if (!is_mul_ok(v12, a3)) {
              goto LABEL_131;
            }
            unint64_t v38 = v12 * a3;
            unsigned __int8 v39 = v36 + v37;
            BOOL v19 = __CFADD__(v38, v39);
            unint64_t v12 = v38 + v39;
            if (v19) {
              goto LABEL_131;
            }
            ++v35;
            --v31;
          }

          while (v31);
LABEL_69:
          unint64_t result = v12;
          char v66 = 0;
          goto LABEL_130;
        }

        goto LABEL_89;
      }
    }

    else
    {
      if (v7 == 45)
      {
        if (v6 >= 1)
        {
          uint64_t v8 = v6 - 1;
          if (v6 != 1)
          {
            unsigned __int8 v9 = a3 + 55;
            unsigned __int8 v10 = a3 + 87;
            if (a3 > 10)
            {
              unsigned __int8 v11 = 58;
            }

            else
            {
              unsigned __int8 v10 = 97;
              unsigned __int8 v9 = 65;
              unsigned __int8 v11 = a3 + 48;
            }

            if (v5)
            {
              unint64_t v12 = 0LL;
              unsigned __int8 v13 = v5 + 1;
              while (1)
              {
                unsigned int v14 = *v13;
                if (v14 < 0x30 || v14 >= v11)
                {
                  if (v14 < 0x41 || v14 >= v9)
                  {
                    unint64_t result = 0LL;
                    char v16 = 1;
                    if (v14 < 0x61 || v14 >= v10) {
                      goto LABEL_90;
                    }
                    char v15 = -87;
                  }

                  else
                  {
                    char v15 = -55;
                  }
                }

                else
                {
                  char v15 = -48;
                }

                if (!is_mul_ok(v12, a3)) {
                  goto LABEL_131;
                }
                unint64_t v17 = v12 * a3;
                unsigned __int8 v18 = v14 + v15;
                BOOL v19 = v17 >= v18;
                unint64_t v12 = v17 - v18;
                if (!v19) {
                  goto LABEL_131;
                }
                ++v13;
                if (!--v8) {
                  goto LABEL_69;
                }
              }
            }

LABEL_89:
            unint64_t result = 0LL;
            char v16 = 0;
LABEL_90:
            char v66 = v16;
            goto LABEL_130;
          }

          goto LABEL_131;
        }

        __break(1u);
        goto LABEL_135;
      }

      if (v6)
      {
        unsigned __int8 v40 = a3 + 55;
        unsigned __int8 v41 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v42 = 58;
        }

        else
        {
          unsigned __int8 v41 = 97;
          unsigned __int8 v40 = 65;
          unsigned __int8 v42 = a3 + 48;
        }

        if (!v5) {
          goto LABEL_89;
        }
        unint64_t v43 = 0LL;
        do
        {
          unsigned int v44 = *v5;
          if (v44 < 0x30 || v44 >= v42)
          {
            if (v44 < 0x41 || v44 >= v40)
            {
              unint64_t result = 0LL;
              char v16 = 1;
              if (v44 < 0x61 || v44 >= v41) {
                goto LABEL_90;
              }
              char v45 = -87;
            }

            else
            {
              char v45 = -55;
            }
          }

          else
          {
            char v45 = -48;
          }

          if (!is_mul_ok(v43, a3)) {
            goto LABEL_131;
          }
          unint64_t v46 = v43 * a3;
          unsigned __int8 v47 = v44 + v45;
          BOOL v19 = __CFADD__(v46, v47);
          unint64_t v43 = v46 + v47;
          if (v19) {
            goto LABEL_131;
          }
          ++v5;
          --v6;
        }

        while (v6);
        unint64_t result = v43;
        char v66 = 0;
LABEL_130:
        LOBYTE(v65[0]) = (a2 & 0x1000000000000000LL) != 0;
        return result;
      }
    }

LABEL_131:
    unint64_t result = 0LL;
    char v66 = 1;
    goto LABEL_130;
  }

  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result == 45)
    {
      if (!v20)
      {
LABEL_135:
        __break(1u);
        goto LABEL_136;
      }

      uint64_t v21 = v20 - 1;
      if (v21)
      {
        unint64_t v22 = 0LL;
        unsigned __int8 v23 = a3 + 55;
        unsigned __int8 v24 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v25 = 58;
        }

        else
        {
          unsigned __int8 v24 = 97;
          unsigned __int8 v23 = 65;
          unsigned __int8 v25 = a3 + 48;
        }

        unsigned __int8 v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v23)
            {
              unint64_t result = 0LL;
              if (v27 < 0x61 || v27 >= v24) {
                goto LABEL_129;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          if (!is_mul_ok(v22, a3)) {
            break;
          }
          unint64_t v29 = v22 * a3;
          unsigned __int8 v30 = v27 + v28;
          BOOL v19 = v29 >= v30;
          unint64_t v22 = v29 - v30;
          if (!v19) {
            break;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_127;
          }
        }
      }
    }

    else if (v20)
    {
      unint64_t v22 = 0LL;
      unsigned __int8 v57 = a3 + 55;
      unsigned __int8 v58 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v59 = 58;
      }

      else
      {
        unsigned __int8 v58 = 97;
        unsigned __int8 v57 = 65;
        unsigned __int8 v59 = a3 + 48;
      }

      unsigned int v60 = (unsigned __int8 *)v65;
      while (1)
      {
        unsigned int v61 = *v60;
        if (v61 < 0x30 || v61 >= v59)
        {
          if (v61 < 0x41 || v61 >= v57)
          {
            unint64_t result = 0LL;
            if (v61 < 0x61 || v61 >= v58) {
              goto LABEL_129;
            }
            char v62 = -87;
          }

          else
          {
            char v62 = -55;
          }
        }

        else
        {
          char v62 = -48;
        }

        if (!is_mul_ok(v22, a3)) {
          break;
        }
        unint64_t v63 = v22 * a3;
        unsigned __int8 v64 = v61 + v62;
        BOOL v19 = __CFADD__(v63, v64);
        unint64_t v22 = v63 + v64;
        if (v19) {
          break;
        }
        ++v60;
        if (!--v20) {
          goto LABEL_127;
        }
      }
    }

LABEL_128:
    unint64_t result = 0LL;
LABEL_129:
    char v66 = 1;
    goto LABEL_130;
  }

  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      unint64_t v22 = 0LL;
      unsigned __int8 v49 = a3 + 55;
      unsigned __int8 v50 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v51 = 58;
      }

      else
      {
        unsigned __int8 v50 = 97;
        unsigned __int8 v49 = 65;
        unsigned __int8 v51 = a3 + 48;
      }

      unsigned int v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v49)
          {
            unint64_t result = 0LL;
            if (v53 < 0x61 || v53 >= v50) {
              goto LABEL_129;
            }
            char v54 = -87;
          }

          else
          {
            char v54 = -55;
          }
        }

        else
        {
          char v54 = -48;
        }

        if (!is_mul_ok(v22, a3)) {
          goto LABEL_128;
        }
        unint64_t v55 = v22 * a3;
        unsigned __int8 v56 = v53 + v54;
        BOOL v19 = __CFADD__(v55, v56);
        unint64_t v22 = v55 + v56;
        if (v19) {
          goto LABEL_128;
        }
        ++v52;
        --v48;
      }

      while (v48);
LABEL_127:
      unint64_t result = v22;
      char v66 = 0;
      goto LABEL_130;
    }

    goto LABEL_128;
  }

LABEL_137:
  __break(1u);
  return result;
}

uint64_t sub_10004B7BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v9 = String.init<A>(_:)( &v9,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v10 = v6;
  uint64_t v7 = sub_100047484(&v9, a3, a4);
  swift_bridgeObjectRelease(v10);
  return v7;
}

unsigned __int8 *sub_10004B848(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0LL;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_67;
    }

    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }

      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }

      if (result)
      {
        unint64_t v29 = 0LL;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0LL;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }

            else
            {
              char v31 = -55;
            }
          }

          else
          {
            char v31 = -48;
          }

          if (!is_mul_ok(v29, a3)) {
            return 0LL;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v29;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }

  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }

  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  uint64_t v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0LL;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }

      else
      {
        char v23 = -55;
      }
    }

    else
    {
      char v23 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0LL;
    }
    ++v21;
    --v17;
  }

  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10004BAC4(uint64_t a1, unint64_t a2)
{
  if (a1 == 1702195828 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 1702195828LL, 0xE400000000000000LL, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 1LL;
  }

  if (a1 == 0x65736C6166LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 0LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x65736C6166LL, 0xE500000000000000LL, 0LL);
    swift_bridgeObjectRelease(a2);
    uint64_t result = 0LL;
    if ((v7 & 1) == 0) {
      return 2LL;
    }
  }

  return result;
}

_BYTE *sub_10004BB94@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_10004BBCC(a1, (uint64_t (*)(void))&__swift_stdlib_strtod_clocale, a2);
}

_BYTE *sub_10004BBB0@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_10004BBCC(a1, (uint64_t (*)(void))&__swift_stdlib_strtof_clocale, a2);
}

_BYTE *sub_10004BBCC@<X0>(_BYTE *result@<X0>, uint64_t (*a2)(void)@<X1>, BOOL *a3@<X8>)
{
  unsigned int v4 = *result;
  BOOL v5 = v4 > 0x20;
  uint64_t v6 = (1LL << v4) & 0x100003E01LL;
  BOOL v7 = v5 || v6 == 0;
  v8 = v7 && (uint64_t result = (_BYTE *)a2()) != 0LL && *result == 0;
  *a3 = v8;
  return result;
}

uint64_t sub_10004BC3C( uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v8 = a3();
    if ((v9 & 0x100) != 0)
    {
      uint64_t v10 = sub_10004B7BC(a1, a2, 10LL, a4);
      char v14 = v13;
      swift_bridgeObjectRelease(a2);
      int v12 = v14 & 1;
    }

    else
    {
      uint64_t v10 = v8;
      char v11 = v9;
      swift_bridgeObjectRelease(a2);
      int v12 = v11 & 1;
    }

    if (v12) {
      return 0LL;
    }
    else {
      return v10;
    }
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

uint64_t sub_10004BD00( uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    unsigned int v8 = a3();
    if ((v8 & 0x10000) != 0) {
      unsigned int v8 = sub_100049B94(a1, a2, 10LL, a4);
    }
    unsigned int v9 = v8;
    swift_bridgeObjectRelease(a2);
    int v10 = (v9 >> 8) & 1;
    if (v10) {
      unsigned __int8 v11 = 0;
    }
    else {
      unsigned __int8 v11 = v9;
    }
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    unsigned __int8 v11 = 0;
    int v10 = 1;
  }

  return v11 | (v10 << 8);
}

uint64_t sub_10004BDA8( uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    int v8 = a3();
    if ((v8 & 0x1000000) != 0) {
      int v8 = sub_10004A53C(a1, a2, 10LL, a4);
    }
    swift_bridgeObjectRelease(a2);
    unsigned int v9 = (v8 & 0x10000u) >> 16;
    if ((v8 & 0x10000) != 0) {
      int v10 = 0;
    }
    else {
      int v10 = (unsigned __int16)v8;
    }
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    int v10 = 0;
    LOBYTE(v9) = 1;
  }

  return v10 & 0xFFFEFFFF | ((v9 & 1) << 16);
}

unint64_t sub_10004BE54( uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v8 = a3();
    if ((v8 & 0x10000000000LL) != 0) {
      uint64_t v8 = sub_10004AE74(a1, a2, 10LL, a4);
    }
    swift_bridgeObjectRelease(a2);
    unint64_t v9 = (v8 & (unint64_t)&_mh_execute_header) >> 32;
    uint64_t v10 = v8;
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    uint64_t v10 = 0LL;
    LOBYTE(v9) = 1;
  }

  return v10 | ((v9 & 1) << 32);
}

void static ParsableArguments.exit(withError:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = v3;
    uint64_t v6 = a1;
    swift_errorRetain(a1);
    sub_100081C34(v6, v4, a3, (uint64_t)v18);
    uint64_t v7 = sub_100083A6C(v4, a3);
    uint64_t v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000LL) == 0) {
      uint64_t v9 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (v9)
    {
      uint64_t v10 = v7;
      unint64_t v11 = v8;
      sub_10004CAE0((uint64_t)v18, (uint64_t)v22);
      int v12 = v22[48];
      uint64_t v13 = sub_100005104(&qword_1000B9550);
      uint64_t v14 = swift_allocObject(v13, 64LL, 7LL);
      uint64_t v15 = v14;
      *(_OWORD *)(v14 + 16) = xmmword_100096510;
      *(void *)(v14 + 56) = &type metadata for String;
      *(void *)(v14 + 3sub_1000062D8(v0 + 2) = v10;
      *(void *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v11;
      if (!v12)
      {
        print(_:separator:terminator:)(v14, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
        swift_bridgeObjectRelease(v15);
        exit(0);
      }

      unint64_t v16 = sub_10004CB1C();
      print<A>(_:separator:terminator:to:)( v15,  32LL,  0xE100000000000000LL,  10LL,  0xE100000000000000LL,  v17,  &type metadata for Platform.StandardError,  v16);
      swift_bridgeObjectRelease(v15);
    }

    sub_10004CAE0((uint64_t)v18, (uint64_t)v19);
    LODWORD(a1) = v21;
    if (v21)
    {
      if (v21 == 1) {
        exit(64);
      }
      LODWORD(a1) = v20;
    }
  }

  exit(a1);
}

unint64_t sub_10004C04C(uint64_t a1)
{
  uint64_t v2 = sub_100005104(&qword_1000B95E0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v30[0] = a1;
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a1);
  uint64_t v6 = String.init<A>(describing:)(v30, MetatypeMetadata);
  unint64_t v8 = v7;
  unint64_t v9 = sub_10004E9B4(95LL, 0xE100000000000000LL, v6, v7);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease(v8);
  v30[0] = v9;
  v30[1] = v11;
  uint64_t v28 = 0x736E6F6974706F5FLL;
  unint64_t v29 = 0xE800000000000000LL;
  uint64_t v12 = type metadata accessor for Locale(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
  unint64_t v13 = sub_100030520();
  uint64_t v14 = StringProtocol.range<A>(of:options:range:locale:)( &v28,  0LL,  0LL,  0LL,  1LL,  v4,  &type metadata for String,  &type metadata for String,  v13,  v13);
  unint64_t v16 = v15;
  char v18 = v17;
  sub_10004E740((uint64_t)v4, &qword_1000B95E0);
  swift_bridgeObjectRelease(v29);
  if ((v18 & 1) == 0)
  {
    uint64_t v19 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v16 >> 14 == 4 * v19)
    {
      uint64_t v20 = String.subscript.getter(15LL, v14, v9, v11);
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      uint64_t v26 = v25;
      swift_bridgeObjectRelease(v11);
      unint64_t v9 = static String._fromSubstring(_:)(v20, v22, v24, v26);
      swift_bridgeObjectRelease(v26);
    }
  }

  return v9;
}

uint64_t sub_10004C214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = type metadata accessor for OptionGroup(0LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  return OptionGroup.wrappedValue.getter(v4, v5, v6, a3);
}

uint64_t sub_10004C240(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_10004C2C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10004C240(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10004C2F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static ExitCode.failure.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004C320(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099150, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10004C354(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099150, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_10004C388@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v31 = a5;
  uint64_t v32 = type metadata accessor for OptionGroup(0LL, a2, a3, a4);
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unsigned __int8 v33 = (uint64_t *)((char *)&v29 - v8);
  uint64_t v10 = type metadata accessor for _WrappedParsableCommand.CodingKeys(255LL, a2, a3, v9);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100099150, v10);
  uint64_t v34 = type metadata accessor for KeyedDecodingContainer(0LL, v10, WitnessTable);
  uint64_t v12 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v37 = type metadata accessor for _WrappedParsableCommand(0LL, a2, a3, v15);
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  char v17 = (char *)&v29 - v16;
  OptionGroup.init(title:visibility:)(0LL, 0xE000000000000000LL, 0LL, a2, a3, (uint64_t)&v29 - v16);
  uint64_t v19 = a1[3];
  uint64_t v18 = a1[4];
  sub_100006270(a1, v19);
  uint64_t v20 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v10, v10, WitnessTable, v19, v18);
  if (v20)
  {
    sub_1000062D8(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v37);
  }

  else
  {
    uint64_t v22 = v30;
    uint64_t v21 = v31;
    uint64_t v23 = v32;
    uint64_t v24 = swift_getWitnessTable(&protocol conformance descriptor for OptionGroup<A>, v32);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v23, v25, v34, v23, v24);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v34);
    (*(void (**)(char *, void *, uint64_t))(v22 + 40))(v17, v33, v23);
    uint64_t v26 = v35;
    uint64_t v27 = v37;
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v21, v17, v37);
    sub_1000062D8(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v17, v27);
  }

unint64_t sub_10004C5D8(uint64_t a1)
{
  return sub_10004C04C(*(void *)(a1 + 16));
}

uint64_t sub_10004C5E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OptionGroup.init()(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t sub_10004C5EC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_10004C388(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3, a4);
}

uint64_t sub_10004C608(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (!swift_conformsToProtocol2(v3, &protocol descriptor for ParsableCommand)) {
    uint64_t v3 = 0LL;
  }
  if (!v3)
  {
    uint64_t v3 = type metadata accessor for _WrappedParsableCommand(0LL, a1, a2, v6);
    swift_getWitnessTable(&unk_10009905C, v3);
  }

  return v3;
}

uint64_t static ParsableArguments.parse(_:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v55 = (char *)a4;
  uint64_t v56 = *(void *)(a2 - 8);
  unsigned __int8 v57 = a1;
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v53 - v9;
  uint64_t v14 = type metadata accessor for _WrappedParsableCommand(0LL, v11, v12, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v53 - v19;
  sub_10004C608(a2, a3);
  uint64_t v21 = v66;
  uint64_t result = static ParsableCommand.parseAsRoot(_:)(v57, v22, (uint64_t)v65);
  if (!v21)
  {
    char v66 = v20;
    unsigned __int8 v57 = 0LL;
    char v54 = v18;
    uint64_t v24 = a3;
    uint64_t v25 = v56;
    uint64_t v26 = sub_100005104(&qword_1000B9528);
    if (swift_dynamicCast(v58, v65, v26, &type metadata for HelpCommand, 0LL))
    {
      uint64_t v27 = v58[0];
      uint64_t v28 = v58[1];
      char v29 = v59;
      uint64_t v30 = v60;
      uint64_t v31 = v61;
      char v32 = v62;
      uint64_t v33 = v63;
      uint64_t v34 = v64;
      unint64_t v35 = sub_10002EA1C();
      uint64_t v36 = swift_allocError(&type metadata for ParserError, v35, 0LL, 0LL);
      *(void *)uint64_t v37 = v34;
      *(_OWORD *)(v37 + 8) = 0u;
      *(_OWORD *)(v37 + 24) = 0u;
      *(_OWORD *)(v37 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0u;
      *(_OWORD *)(v37 + 56) = 0u;
      *(_OWORD *)(v37 + 65) = 0u;
      swift_willThrow(v36);
      sub_10004CB6C(v27, v28, v29);
      sub_100003C60(v30, v31, v32);
      swift_bridgeObjectRelease(v33);
    }

    else
    {
      unint64_t v38 = v66;
      if (swift_dynamicCast(v66, v65, v26, v14, 0LL))
      {
        unsigned __int8 v39 = v54;
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v54, v38, v14);
        uint64_t v41 = type metadata accessor for OptionGroup(0LL, *(void *)(v14 + 16), *(void *)(v14 + 24), v40);
        OptionGroup.wrappedValue.getter(v41, v42, v43, (uint64_t)v55);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v39, v14);
      }

      else
      {
        unsigned int v44 = v10;
        if (swift_dynamicCast(v10, v65, v26, a2, 0LL))
        {
          char v45 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
          v45(v8, v44, a2);
          unint64_t v46 = v57;
          (*(void (**)(uint64_t, uint64_t))(v24 + 24))(a2, v24);
          if (v46)
          {
            unint64_t v47 = sub_10002EA1C();
            uint64_t v48 = swift_allocError(&type metadata for ParserError, v47, 0LL, 0LL);
            *(void *)uint64_t v49 = v46;
            *(_OWORD *)(v49 + 8) = 0u;
            *(_OWORD *)(v49 + 24) = 0u;
            *(_OWORD *)(v49 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0u;
            *(_OWORD *)(v49 + 56) = 0u;
            *(void *)(v49 + 7sub_1000062D8(v0 + 2) = 0LL;
            *(_BYTE *)(v49 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 13;
            swift_willThrow(v48);
            (*(void (**)(char *, uint64_t))(v25 + 8))(v8, a2);
          }

          else
          {
            v45(v55, v8, a2);
          }
        }

        else
        {
          unint64_t v50 = sub_10002EA1C();
          uint64_t v51 = swift_allocError(&type metadata for ParserError, v50, 0LL, 0LL);
          *(void *)uint64_t v52 = 3LL;
          *(_OWORD *)(v52 + 8) = 0u;
          *(_OWORD *)(v52 + 24) = 0u;
          *(_OWORD *)(v52 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0u;
          *(_OWORD *)(v52 + 56) = 0u;
          *(void *)(v52 + 7sub_1000062D8(v0 + 2) = 0LL;
          *(_BYTE *)(v52 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 15;
          swift_willThrow(v51);
        }
      }
    }

    return sub_1000062D8(v65);
  }

  return result;
}

uint64_t static ParsableArguments.message(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v9[0];
  swift_bridgeObjectRetain(v9[1]);
  sub_10004CB7C((uint64_t)v8);
  return v6;
}

uint64_t static ParsableArguments.fullMessage(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_errorRetain(a1);
  sub_100081C34(a1, v4, a3, (uint64_t)v9);
  uint64_t v7 = sub_100083A6C(v4, a3);
  sub_10004CB7C((uint64_t)v9);
  return v7;
}

uint64_t sub_10004CAE0(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_10004CB1C()
{
  unint64_t result = qword_1000B9558[0];
  if (!qword_1000B9558[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10009ADF0, &type metadata for Platform.StandardError);
    atomic_store(result, qword_1000B9558);
  }

  return result;
}

uint64_t type metadata accessor for _WrappedParsableCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037B54(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _WrappedParsableCommand);
}

uint64_t sub_10004CB6C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_release(a2);
  }
  else {
    return swift_bridgeObjectRelease(a1);
  }
}

uint64_t sub_10004CB7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004CBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (!a7 || a7 == 2) {
    return swift_bridgeObjectRelease(a2);
  }
  if (a7 == 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }

  return result;
}

uint64_t static ParsableArguments.helpMessage(columns:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return static ParsableArguments.helpMessage(includeHidden:columns:)(0, a1, a2 & 1, a3, a4);
}

uint64_t static ParsableArguments.helpMessage(includeHidden:columns:)( char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  char v9 = a3 & 1;
  uint64_t v10 = sub_100005104(&qword_1000B90C0);
  uint64_t v11 = swift_allocObject(v10, 48LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_100096510;
  *(void *)(v11 + 3sub_1000062D8(v0 + 2) = sub_10004C608(a4, a5);
  *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v12;
  sub_100080428(v11, a1 & 1, (uint64_t)v15);
  swift_bridgeObjectRelease(v11);
  uint64_t v13 = sub_10007B6A8(a2, v9);
  sub_10004DBA8(v15);
  return v13;
}

uint64_t static ParsableArguments._dumpHelp()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B90C0);
  uint64_t v5 = swift_allocObject(v4, 48LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_100096510;
  *(void *)(v5 + 3sub_1000062D8(v0 + 2) = sub_10004C608(a1, a2);
  *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v6;
  sub_100077CF4(v5, (uint64_t)&v9);
  uint64_t v15 = 0LL;
  __int128 v16 = v9;
  uint64_t v17 = v10;
  __int128 v18 = v11;
  __int128 v19 = v12;
  __int128 v20 = v13;
  __int128 v21 = v14;
  uint64_t v7 = sub_100076DD0();
  sub_10004DC0C((uint64_t *)&v9);
  return v7;
}

uint64_t static ParsableArguments.exitCode(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v11;
  if (v11)
  {
    if (v11 == 1) {
      uint64_t v6 = 64LL;
    }
    else {
      uint64_t v6 = v10;
    }
  }

  sub_10004CB7C((uint64_t)v8);
  return v6;
}

uint64_t static ParsableArguments.completionScript(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10004C608(a3, a4);
  uint64_t v8 = v7;
  swift_bridgeObjectRetain(a2);
  uint64_t v9 = sub_10002E1A0(a1, a2, v6, v8);
  swift_bridgeObjectRelease(a2);
  return v9;
}

uint64_t static ParsableArguments.parseOrExit(_:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ParsableArguments.parse(_:)(a1, a2, a3, a4);
}

uint64_t sub_10004CEE4(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2 = result;
  unint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v44 = result + 32;
  uint64_t v7 = result + 56;
  uint64_t v43 = _swiftEmptyArrayStorage;
  unint64_t v8 = 2LL - a2;
  unint64_t v42 = v8;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = *(void *)(v5 + 16);
      if (v3 != v9) {
        goto LABEL_13;
      }
    }

    unint64_t v10 = *(void *)(v2 + 16);
    if (v6 == v10) {
      goto LABEL_21;
    }
    if (v6 >= v10) {
      break;
    }
    uint64_t v11 = 16 * v6;
    __int128 v12 = (uint64_t *)(v44 + 16 * v6);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    swift_bridgeObjectRetain(*v12);
    swift_bridgeObjectRetain(v13);
    uint64_t result = sub_10004E8C8(v5, v4);
    ++v6;
    uint64_t v15 = (uint64_t *)(v7 + v11);
    uint64_t v5 = v14;
    if (!v14) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v9 = *(void *)(v5 + 16);
    if (!v9)
    {
LABEL_8:
      while (1)
      {
        unint64_t v16 = *(void *)(v2 + 16);
        if (v6 == v16) {
          break;
        }
        if (v6 >= v16) {
          goto LABEL_22;
        }
        uint64_t v18 = *(v15 - 1);
        uint64_t v17 = *v15;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v17);
        uint64_t result = sub_10004E8C8(v5, v13);
        ++v6;
        v15 += 2;
        uint64_t v13 = v17;
        uint64_t v5 = v18;
        if (v18) {
          goto LABEL_7;
        }
      }

      uint64_t v4 = v13;
LABEL_21:
      swift_bridgeObjectRelease(v2);
      sub_10004E8C8(v5, v4);
      return (uint64_t)v43;
    }

    unint64_t v3 = 0LL;
    uint64_t v4 = v13;
    unint64_t v8 = v42;
LABEL_13:
    if (v3 >= v9) {
      goto LABEL_23;
    }
    __int128 v19 = (_OWORD *)(v5 + 192 * v3);
    __int128 v20 = v19[2];
    __int128 v21 = v19[3];
    __int128 v22 = v19[5];
    __int128 v47 = v19[4];
    __int128 v48 = v22;
    __int128 v45 = v20;
    __int128 v46 = v21;
    __int128 v23 = v19[6];
    __int128 v24 = v19[7];
    __int128 v25 = v19[9];
    __int128 v51 = v19[8];
    __int128 v52 = v25;
    __int128 v49 = v23;
    __int128 v50 = v24;
    __int128 v26 = v19[10];
    __int128 v27 = v19[11];
    __int128 v28 = v19[13];
    __int128 v55 = v19[12];
    __int128 v56 = v28;
    __int128 v53 = v26;
    __int128 v54 = v27;
    ++v3;
    if (2 - (unint64_t)BYTE8(v51) >= v8)
    {
      sub_10002D724((uint64_t)&v45);
      char v29 = v43;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v43);
      unsigned __int8 v57 = v43;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10004FE10(0LL, v43[2] + 1LL, 1);
        char v29 = v57;
      }

      unint64_t v31 = v29[2];
      unint64_t v30 = v29[3];
      if (v31 >= v30 >> 1)
      {
        uint64_t result = (uint64_t)sub_10004FE10((char *)(v30 > 1), v31 + 1, 1);
        char v29 = v57;
      }

      void v29[2] = v31 + 1;
      uint64_t v43 = v29;
      char v32 = &v29[24 * v31];
      __int128 v33 = v45;
      __int128 v34 = v46;
      __int128 v35 = v48;
      void v32[4] = v47;
      v32[5] = v35;
      v32[2] = v33;
      v32[3] = v34;
      __int128 v36 = v49;
      __int128 v37 = v50;
      __int128 v38 = v52;
      _BYTE v32[8] = v51;
      v32[9] = v38;
      v32[6] = v36;
      v32[7] = v37;
      __int128 v39 = v53;
      __int128 v40 = v54;
      __int128 v41 = v56;
      _OWORD v32[12] = v55;
      v32[13] = v41;
      v32[10] = v39;
      v32[11] = v40;
      unint64_t v8 = v42;
    }
  }

uint64_t sub_10004D160(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v112 = a4;
  int v105 = a3;
  uint64_t v111 = 0LL;
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  *((void *)&v127 + 1) = a1;
  *(void *)&__int128 v128 = a2;
  sub_10000B40C(&v126);
  v14(a1, a2);
  uint64_t v15 = *((void *)&v127 + 1);
  unint64_t v16 = sub_100006270(&v126, *((uint64_t *)&v127 + 1));
  *((void *)&v125[0] + 1) = v15;
  uint64_t v17 = sub_10000B40C(&v124);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v17, v16, v15);
  Mirror.init(reflecting:)(&v124);
  uint64_t v18 = sub_1000062D8(&v126);
  uint64_t v19 = Mirror.children.getter(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v20 = swift_retain(v19);
  uint64_t v21 = dispatch thunk of _AnySequenceBox._makeIterator()(v20);
  uint64_t v102 = v19;
  uint64_t v22 = swift_release(v19);
  uint64_t v113 = v21;
  dispatch thunk of _AnyIteratorBoxBase.next()(&v126, v22);
  if (*((void *)&v128 + 1))
  {
    __int128 v23 = &v123;
    __int128 v24 = v125;
    __int128 v110 = (char *)&type metadata for Any + 8;
    __int128 v109 = xmmword_100096510;
    uint64_t v114 = (char *)_swiftEmptyArrayStorage;
    uint64_t v104 = a6;
    uint64_t v103 = a5;
    __int128 v108 = &v123;
    __int128 v107 = v125;
    while (1)
    {
      __int128 v124 = v126;
      v125[0] = v127;
      v125[1] = v128;
      unint64_t v27 = *((void *)&v126 + 1);
      uint64_t v26 = v126;
      __int128 v122 = v126;
      sub_10004E704((uint64_t)v24, (uint64_t)v23);
      if (v27) {
        break;
      }
      sub_1000062D8(v23);
      uint64_t isUniquelyReferenced_nonNull_native = sub_10004E740((uint64_t)&v124, &qword_1000B95E8);
LABEL_4:
      dispatch thunk of _AnyIteratorBoxBase.next()(&v126, isUniquelyReferenced_nonNull_native);
      if (!*((void *)&v128 + 1)) {
        goto LABEL_53;
      }
    }

    swift_bridgeObjectRetain(v27);
    sub_1000062D8(v23);
    __int128 v122 = v124;
    sub_10004E704((uint64_t)v24, (uint64_t)v23);
    uint64_t v28 = sub_100005104(&qword_1000B95F0);
    if ((swift_dynamicCast(v117, v23, v110, v28, 6LL) & 1) == 0)
    {
      uint64_t v118 = 0LL;
      memset(v117, 0, sizeof(v117));
      sub_10004E740((uint64_t)v117, &qword_1000B95F8);
      sub_10004E704((uint64_t)v24, (uint64_t)&v122);
      uint64_t v32 = sub_100005104(&qword_1000B9360);
      swift_dynamicCast(v119, &v122, (char *)&type metadata for Any + 8, v32, 7LL);
      uint64_t v33 = v120;
      sub_10004E740((uint64_t)v119, &qword_1000B9360);
      if (v33)
      {
        sub_10004E704((uint64_t)v24, (uint64_t)&v122);
      }

      else
      {
        __int128 v122 = 0u;
        __int128 v123 = 0u;
      }

      uint64_t v34 = v112;
      sub_10004E77C(v112, a5, a6);
      uint64_t v35 = sub_10006C86C(v26, v27, v34, a5, a6);
      uint64_t v37 = v36;
      uint64_t v39 = v38;
      sub_10003D8D8((uint64_t)&v122, (uint64_t)v119);
      BOOL v40 = v120 != 0;
      uint64_t v41 = sub_100005104(&qword_1000B9600);
      uint64_t v42 = swift_allocObject(v41, 56LL, 7LL);
      *(_OWORD *)(v42 + 16) = v109;
      *(void *)(v42 + 3sub_1000062D8(v0 + 2) = v35;
      *(void *)(v42 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v37;
      *(void *)(v42 + 48) = v39;
      uint64_t v43 = (void *)swift_allocObject(&unk_1000B1A30, 56LL, 7LL);
      v43[2] = sub_10005D90C;
      v43[3] = 0LL;
      v43[4] = v35;
      v43[5] = v37;
      v43[6] = v39;
      sub_10003D8D8((uint64_t)v119, (uint64_t)v117);
      uint64_t v44 = (void *)swift_allocObject(&unk_1000B1A58, 80LL, 7LL);
      void v44[2] = 1LL;
      sub_10004E85C((uint64_t)v117, (uint64_t)(v44 + 3));
      v44[7] = v35;
      v44[8] = v37;
      void v44[9] = v39;
      char v116 = 1;
      swift_bridgeObjectRetain_n(v37, 2LL);
      swift_bridgeObjectRetain_n(v39, 2LL);
      sub_10004E740((uint64_t)v119, &qword_1000B9360);
      sub_10004E740((uint64_t)&v122, &qword_1000B9360);
      uint64_t v45 = sub_100005104(&qword_1000B9230);
      uint64_t v46 = swift_allocObject(v45, 224LL, 7LL);
      *(_OWORD *)(v46 + 16) = v109;
      *(void *)(v46 + 3sub_1000062D8(v0 + 2) = 1LL;
      *(void *)(v46 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v40;
      *(void *)(v46 + 48) = 0LL;
      *(void *)(v46 + 56) = 0LL;
      *(void *)(v46 + 64) = v42;
      *(void *)(v46 + 7sub_1000062D8(v0 + 2) = _swiftEmptyArrayStorage;
      *(_BYTE *)(v46 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0;
      *(void *)(v46 + 88) = 0LL;
      *(void *)(v46 + 96) = 0xE000000000000000LL;
      *(void *)(v46 + 104) = 0LL;
      *(void *)(v46 + 11sub_1000062D8(v0 + 2) = 0xE000000000000000LL;
      *(void *)(v46 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0LL;
      *(void *)(v46 + 128) = 0xE000000000000000LL;
      *(_BYTE *)(v46 + 136) = 2;
      *(void *)(v46 + 144) = 0LL;
      *(void *)(v46 + 15sub_1000062D8(v0 + 2) = 0xE000000000000000LL;
      *(void *)(v46 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0LL;
      *(void *)(v46 + 168) = 0LL;
      *(_WORD *)(v46 + 176) = 4;
      *(void *)(v46 + 184) = sub_10004E7E0;
      *(void *)(v46 + 19sub_1000062D8(v0 + 2) = v43;
      *(_BYTE *)(v46 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v116;
      *(void *)(v46 + 208) = sub_10004E8A4;
      *(void *)(v46 + 216) = v44;
      unint64_t v47 = sub_100079598((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(v47);
      uint64_t v48 = swift_bridgeObjectRetain(v46);
      uint64_t v49 = v111;
      uint64_t v50 = sub_100078CA4(v48);
      uint64_t v111 = v49;
      swift_bridgeObjectRelease(v46);
      uint64_t v51 = *(void *)(v50 + 16);
      uint64_t v106 = v50;
      if (v51)
      {
        sub_100005104(qword_1000B9608);
        __int128 v52 = (void *)static _DictionaryStorage.allocate(capacity:)(v51);
        uint64_t v53 = *(void *)(v50 + 16);
        *(void *)&v117[0] = v52;
        uint64_t v115 = v53;
        if (v53)
        {
          uint64_t v54 = 0LL;
          __int128 v55 = (void *)(v50 + 56);
          while (1)
          {
            uint64_t v58 = v54 + 1;
            if (__OFADD__(v54, 1LL)) {
              break;
            }
            uint64_t v60 = *(v55 - 3);
            uint64_t v59 = *(v55 - 2);
            int v61 = *((unsigned __int8 *)v55 - 8);
            uint64_t v62 = *v55;
            sub_100030508(v60, v59, *((_BYTE *)v55 - 8));
            unint64_t v63 = sub_100058B9C(v60, v59, v61);
            uint64_t v65 = v52[2];
            BOOL v66 = (v64 & 1) == 0;
            BOOL v67 = __OFADD__(v65, v66);
            uint64_t v68 = v65 + v66;
            if (v67) {
              goto LABEL_55;
            }
            char v69 = v64;
            if (v52[3] < v68)
            {
              sub_100070B58(v68, 1LL);
              __int128 v52 = *(void **)&v117[0];
              unint64_t v63 = sub_100058B9C(v60, v59, v61);
              if ((v69 & 1) != (v70 & 1)) {
                goto LABEL_57;
              }
            }

            if ((v69 & 1) != 0)
            {
              uint64_t v56 = 8 * v63;
              uint64_t v57 = *(void *)(v52[7] + 8 * v63);
              sub_10002DA24(v60, v59, v61);
              *(void *)(v52[7] + v56) = v57;
            }

            else
            {
              v52[(v63 >> 6) + 8] |= 1LL << v63;
              uint64_t v71 = v52[6] + 24 * v63;
              *(void *)uint64_t v71 = v60;
              *(void *)(v71 + 8) = v59;
              *(_BYTE *)(v71 + 16) = v61;
              *(void *)(v52[7] + 8 * v63) = v62;
              uint64_t v72 = v52[2];
              BOOL v67 = __OFADD__(v72, 1LL);
              uint64_t v73 = v72 + 1;
              if (v67) {
                goto LABEL_56;
              }
              v52[2] = v73;
            }

            v55 += 4;
            ++v54;
            if (v58 == v115) {
              goto LABEL_27;
            }
          }

          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Name);
          __break(1u);
          return result;
        }
      }

      else
      {
        __int128 v52 = &_swiftEmptyDictionarySingleton;
      }

LABEL_38:
    if (a5)
    {
      swift_bridgeObjectRetain(a5);
      uint64_t v87 = swift_bridgeObjectRetain(a6);
      uint64_t v88 = (char *)a6;
      if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) == 0) {
        uint64_t v88 = sub_100057AB8(0LL, *(void *)(a6 + 16) + 1LL, 1, (char *)a6);
      }
      unint64_t v90 = *((void *)v88 + 2);
      unint64_t v89 = *((void *)v88 + 3);
      if (v90 >= v89 >> 1) {
        uint64_t v88 = sub_100057AB8((char *)(v89 > 1), v90 + 1, 1, v88);
      }
      *((void *)v88 + sub_1000062D8(v0 + 2) = v90 + 1;
      int v91 = &v88[16 * v90];
      *((void *)v91 + 4) = v112;
      *((void *)v91 + 5) = a5;
      swift_bridgeObjectRelease(a6);
      swift_bridgeObjectRelease(a5);
    }

    else
    {
      uint64_t v88 = (char *)_swiftEmptyArrayStorage;
    }

    uint64_t v92 = v120;
    uint64_t v93 = v121;
    sub_100006270(v119, v120);
    uint64_t v46 = (*(uint64_t (**)(uint64_t, unint64_t, char *, uint64_t, uint64_t))(v93 + 8))( v26,  v27,  v88,  v92,  v93);
    __int128 v52 = v94;
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(v27);
    sub_1000062D8(v119);
LABEL_46:
    sub_10004E740((uint64_t)&v124, &qword_1000B95E8);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v114);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_100057DEC(0LL, *((void *)v114 + 2) + 1LL, 1, v114);
      uint64_t v114 = (char *)isUniquelyReferenced_nonNull_native;
    }

    unint64_t v96 = *((void *)v114 + 2);
    unint64_t v95 = *((void *)v114 + 3);
    if (v96 >= v95 >> 1)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_100057DEC((char *)(v95 > 1), v96 + 1, 1, v114);
      uint64_t v114 = (char *)isUniquelyReferenced_nonNull_native;
    }

    uint64_t v97 = v114;
    *((void *)v114 + sub_1000062D8(v0 + 2) = v96 + 1;
    uint64_t v98 = &v97[16 * v96];
    *((void *)v98 + 4) = v46;
    *((void *)v98 + 5) = v52;
    goto LABEL_51;
  }

  uint64_t v114 = (char *)_swiftEmptyArrayStorage;
LABEL_53:
  swift_release(v102);
  swift_release(v113);
  sub_10004E6D4(v112, a5, a6);
  uint64_t v99 = sub_10004CEE4((uint64_t)v114, v105);
  return sub_100079288(v99);
}

  __break(1u);
  return result;
}

          uint64_t v20 = 1;
          return v20 & 1;
        }

  Hasher._combine(_:)(0);
}

uint64_t *sub_10004DBA8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t *sub_10004DC0C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[10];
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_10004DC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_10004DC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for OptionGroup(319LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a4);
  if (v6 <= 0x3F)
  {
    uint64_t v7 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 1LL, &v7, a1 + 32);
    return 0LL;
  }

  return result;
}

void *sub_10004DD04(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v6 = 16LL;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 10) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }

  else
  {
    unsigned int v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X13 }
    }

    uint64_t v12 = v6 + 1;
    if (v10 == 1)
    {
      uint64_t v13 = a2[1];
      *uint64_t v4 = *a2;
      v4[1] = v13;
      swift_retain(v13);
      char v14 = 1;
    }

    else
    {
      (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
      char v14 = 0;
    }

    *((_BYTE *)v4 + v6) = v14;
    uint64_t v15 = (char *)v4 + v12;
    *uint64_t v15 = *((_BYTE *)a2 + v12);
    v15[1] = *((_BYTE *)a2 + v12 + 1);
    unint64_t v16 = (void *)(((unint64_t)v4 + v12 + 9) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v17 = (void *)(((unint64_t)a2 + v12 + 9) & 0xFFFFFFFFFFFFFFF8LL);
    *unint64_t v16 = *v17;
    uint64_t v18 = v17[1];
    v16[1] = v18;
    swift_bridgeObjectRetain(v18);
  }

  return v4;
}

uint64_t sub_10004DE74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  if (*(void *)(v3 + 64) <= 0x10uLL) {
    uint64_t v4 = 16LL;
  }
  else {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + v4);
  if (v5 >= 2)
  {
    else {
      uint64_t v6 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v5 == 1) {
    swift_release(*(void *)(a1 + 8));
  }
  else {
    (*(void (**)(uint64_t))(v3 + 8))(a1);
  }
  return swift_bridgeObjectRelease(*(void *)(((a1 + v4 + 10) & 0xFFFFFFFFFFFFF8LL) + 8));
}

void *sub_10004DF48(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v6 = 16LL;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  unsigned int v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2)
  {
    else {
      uint64_t v8 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v7 == 1)
  {
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    swift_retain(v9);
    char v10 = 1;
  }

  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    char v10 = 0;
  }

  *((_BYTE *)a1 + v6) = v10;
  uint64_t v11 = (char *)a1 + v6 + 1;
  uint64_t v12 = (char *)a2 + v6 + 1;
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  uint64_t v13 = (void *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  char v14 = (void *)((unint64_t)(v12 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

void *sub_10004E070(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x10uLL) {
    uint64_t v7 = 16LL;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  if (a1 != a2)
  {
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release(a1[1]);
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + vsub_1000062D8(v0 + 7) = 1;
      swift_retain(v12);
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + vsub_1000062D8(v0 + 7) = 0;
    }
  }

  uint64_t v13 = (char *)a1 + v7 + 1;
  char v14 = (char *)a2 + v7 + 1;
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  uint64_t v15 = (void *)((unint64_t)(v13 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v16 = (void *)((unint64_t)(v14 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

_OWORD *sub_10004E24C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v6 = 16LL;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  unsigned int v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2)
  {
    else {
      uint64_t v8 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v7 == 1)
  {
    *a1 = *a2;
    char v9 = 1;
  }

  else
  {
    (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(a1, a2);
    char v9 = 0;
  }

  *((_BYTE *)a1 + v6) = v9;
  unsigned int v10 = (char *)a1 + v6 + 1;
  uint64_t v11 = (char *)a2 + v6 + 1;
  *unsigned int v10 = *v11;
  v10[1] = v11[1];
  *(_OWORD *)((unint64_t)(v10 + 9) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_10004E364(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x10uLL) {
    uint64_t v7 = 16LL;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  if ((_OWORD *)a1 != a2)
  {
    unsigned int v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release(*(void *)(a1 + 8));
    }
    else {
      (*(void (**)(uint64_t, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *(_OWORD *)a1 = *a2;
      char v12 = 1;
    }

    else
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v12 = 0;
    }

    *(_BYTE *)(a1 + vsub_1000062D8(v0 + 7) = v12;
  }

  uint64_t v13 = (_BYTE *)(v7 + 1 + a1);
  char v14 = (char *)a2 + v7 + 1;
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  uint64_t v15 = (void *)((unint64_t)(v13 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v16 = (void *)((unint64_t)(v14 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v15 = *v16;
  uint64_t v17 = v15[1];
  v15[1] = v16[1];
  swift_bridgeObjectRelease(v17);
  return a1;
}

void sub_10004E534(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (v5 <= 0x10) {
    unint64_t v5 = 16LL;
  }
  if (a3 < 0)
  {
    unsigned int v7 = a3 - 2147483646;
    if ((((_DWORD)v5 + 10) & 0xFFFFFFF8) != 0xFFFFFFF0) {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v6 = 1;
    }
    else {
      int v6 = v8;
    }
    if ((a2 & 0x80000000) == 0) {
LABEL_5:
    }
      __asm { BR              X11 }
  }

  else
  {
    int v6 = 0;
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }

  if ((((_DWORD)v5 + 10) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v9 = a2 ^ 0x80000000;
    bzero(a1, ((v5 + 10) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v9;
  }

  __asm { BR              X10 }

void sub_10004E650(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (!a2) {
    JUMPOUT(0x10004E63CLL);
  }
  JUMPOUT(0x10004E628LL);
}

void sub_10004E65C()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x10004E63CLL);
}

void sub_10004E664()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x10004E63CLL);
}

uint64_t sub_10004E670(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_100099018, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004E69C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_100099040, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for _WrappedParsableCommand.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037B54(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _WrappedParsableCommand.CodingKeys);
}

uint64_t sub_10004E6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }

  return result;
}

uint64_t sub_10004E704(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10004E740(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100005104(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10004E77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

uint64_t sub_10004E7AC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void *sub_10004E7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100079D00( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(void *(**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16),  *(void *)(v7 + 24),  *(void *)(v7 + 32),  *(void *)(v7 + 40),  *(void *)(v7 + 48));
}

uint64_t sub_10004E810()
{
  unint64_t v1 = v0[2];
  if (v1 >= 2) {
    swift_bridgeObjectRelease(v1);
  }
  if (v0[6]) {
    sub_1000062D8(v0 + 3);
  }
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_10004E85C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B9360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E8A4(uint64_t a1, uint64_t a2)
{
  return sub_10007A04C(a1, a2, v2[2], (uint64_t)(v2 + 3), v2[7], v2[8], v2[9]);
}

uint64_t sub_10004E8C8(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }

  return result;
}

uint64_t sub_10004E8F8(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10004E938 + 4 * byte_100098F96[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10004E958 + 4 * byte_100098F9B[v4]))();
  }
}

_BYTE *sub_10004E938(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10004E958(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10004E960(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10004E968(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10004E970(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10004E978(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_10004E984(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100099128, a1);
}

uint64_t sub_10004E994(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100099098, a1);
}

uint64_t sub_10004E9A4(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000990C0, a1);
}

unint64_t sub_10004E9B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v45 = a2;
  uint64_t v46 = a1;
  uint64_t v6 = type metadata accessor for Unicode.Scalar.Properties(0LL);
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin(v6);
  int v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9) {
    return 0LL;
  }
  uint64_t v51 = 0LL;
  unint64_t v52 = 0xE000000000000000LL;
  unint64_t v49 = 4 * v9;
  swift_bridgeObjectRetain(a4);
  char v10 = 1;
  unint64_t v11 = 15LL;
  while (1)
  {
    unint64_t v14 = v11;
    swift_bridgeObjectRetain(a4);
    unint64_t v11 = String.index(after:)(v11, a3, a4);
    swift_bridgeObjectRelease(a4);
    unint64_t v15 = String.index(after:)(v14, a3, a4);
    unint64_t v16 = String.subscript.getter(v14, a3, a4);
    unint64_t v18 = v17;
    if ((((uint64_t (*)(void))Character._isSingleScalar.getter)() & 1) == 0)
    {
LABEL_12:
      if ((Character._isUppercased.getter(v16, v18) & 1) == 0) {
        goto LABEL_19;
      }
      if ((Character._isSingleScalar.getter(v16, v18) & 1) == 0) {
        goto LABEL_17;
      }
      unint64_t result = sub_100050EA8(v16, v18);
      if ((result & 0x100000000LL) != 0) {
        goto LABEL_56;
      }
      uint64_t v22 = Unicode.Scalar.properties.getter();
      char v23 = Unicode.Scalar.Properties.isCased.getter(v22);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v48);
      if ((v23 & 1) == 0)
      {
LABEL_17:
        if ((Character._isUppercased.getter(v16, v18) & 1) != 0 && (Character._isLowercased.getter(v16, v18) & 1) != 0)
        {
LABEL_19:
          if (v16 == v46 && v18 == v45) {
            char v10 = 0;
          }
          else {
            char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v46, v45, 0LL) ^ 1;
          }
          goto LABEL_8;
        }
      }

      goto LABEL_21;
    }

    unint64_t result = sub_100050EA8(v16, v18);
    if ((result & 0x100000000LL) != 0) {
      break;
    }
    uint64_t v20 = Unicode.Scalar.properties.getter();
    char v21 = Unicode.Scalar.Properties.isUppercase.getter(v20);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v48);
    if ((v21 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    if ((v10 & 1) != 0)
    {
      uint64_t v24 = v51 & 0xFFFFFFFFFFFFLL;
      if ((v52 & 0x2000000000000000LL) != 0) {
        uint64_t v24 = HIBYTE(v52) & 0xF;
      }
      if (v24)
      {
        v50._unint64_t countAndFlagsBits = 0LL;
        v50._object = (void *)0xE000000000000000LL;
        Character.write<A>(to:)( &v50,  v46,  v45,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        object = v50._object;
        String.append(_:)(v50);
        swift_bridgeObjectRelease(object);
      }
    }

    if (v49 <= v15 >> 14) {
      goto LABEL_7;
    }
    swift_bridgeObjectRetain(a4);
    unint64_t v26 = String.subscript.getter(v15, a3, a4);
    unint64_t v28 = v27;
    if ((Character._isSingleScalar.getter(v26, v27) & 1) != 0)
    {
      unint64_t result = sub_100050EA8(v26, v28);
      if ((result & 0x100000000LL) != 0) {
        goto LABEL_55;
      }
      uint64_t v29 = Unicode.Scalar.properties.getter();
      char v30 = Unicode.Scalar.Properties.isUppercase.getter(v29);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v48);
      if ((v30 & 1) != 0) {
        goto LABEL_37;
      }
    }

    if ((Character._isUppercased.getter(v26, v28) & 1) == 0)
    {
      swift_bridgeObjectRelease(a4);
      unint64_t v12 = v28;
LABEL_6:
      swift_bridgeObjectRelease(v12);
LABEL_7:
      char v10 = 0;
      goto LABEL_8;
    }

    if ((Character._isSingleScalar.getter(v26, v28) & 1) != 0)
    {
      unint64_t result = sub_100050EA8(v26, v28);
      if ((result & 0x100000000LL) != 0) {
        goto LABEL_58;
      }
      uint64_t v31 = Unicode.Scalar.properties.getter();
      char v32 = Unicode.Scalar.Properties.isCased.getter(v31);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v48);
      if ((v32 & 1) != 0) {
        goto LABEL_37;
      }
    }

    if ((Character._isUppercased.getter(v26, v28) & 1) == 0)
    {
LABEL_37:
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(v28);
    }

    else
    {
      char v33 = Character._isLowercased.getter(v26, v28);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(v28);
      if ((v33 & 1) != 0) {
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRetain(a4);
    unint64_t v34 = String.index(after:)(v15, a3, a4);
    swift_bridgeObjectRelease(a4);
    if (v49 <= v34 >> 14) {
      goto LABEL_7;
    }
    swift_bridgeObjectRetain(a4);
    uint64_t v35 = String.index(after:)(v15, a3, a4);
    unint64_t v36 = String.subscript.getter(v35, a3, a4);
    unint64_t v38 = v37;
    if ((Character._isSingleScalar.getter(v36, v37) & 1) != 0)
    {
      unint64_t result = sub_100050EA8(v36, v38);
      if ((result & 0x100000000LL) != 0) {
        goto LABEL_57;
      }
      uint64_t v39 = Unicode.Scalar.properties.getter();
      char v40 = Unicode.Scalar.Properties.isLowercase.getter(v39);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v48);
      if ((v40 & 1) != 0)
      {
LABEL_49:
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(v38);
        char v10 = 1;
        goto LABEL_8;
      }
    }

    if ((Character._isLowercased.getter(v36, v38) & 1) == 0)
    {
      swift_bridgeObjectRelease(a4);
      unint64_t v12 = v38;
      goto LABEL_6;
    }

    if ((Character._isSingleScalar.getter(v36, v38) & 1) != 0)
    {
      unint64_t result = sub_100050EA8(v36, v38);
      if ((result & 0x100000000LL) != 0) {
        goto LABEL_59;
      }
      uint64_t v41 = Unicode.Scalar.properties.getter();
      char v42 = Unicode.Scalar.Properties.isCased.getter(v41);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v48);
      if ((v42 & 1) != 0) {
        goto LABEL_49;
      }
    }

    if ((Character._isUppercased.getter(v36, v38) & 1) == 0) {
      goto LABEL_49;
    }
    char v43 = Character._isLowercased.getter(v36, v38);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(v38);
    char v10 = v43 ^ 1;
LABEL_8:
    Swift::String v13 = Character.lowercased()();
    swift_bridgeObjectRelease(v18);
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v13._object);
    if (v49 == v11 >> 14)
    {
      swift_bridgeObjectRelease(a4);
      return v51;
    }
  }

  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t static ParsableCommand.parseAsRoot(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v54 = sub_10006A41C(v4, a2);
  uint64_t v55 = v7;
  uint64_t v56 = v8;
  if (a1)
  {
    uint64_t v9 = a1;
  }

  else
  {
    uint64_t v10 = static CommandLine.arguments.getter();
    uint64_t v11 = *(void *)(v10 + 16);
    uint64_t v12 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v13 = swift_unknownObjectRetain_n(v10, 2LL);
    unint64_t v14 = (void *)swift_dynamicCastClass(v13, v12);
    if (!v14)
    {
      swift_bridgeObjectRelease(v10);
      unint64_t v14 = _swiftEmptyArrayStorage;
    }

    uint64_t v15 = v14[2];
    swift_release(v14);
    if (v15 == v11 - (v11 != 0))
    {
      uint64_t v9 = (void *)swift_dynamicCastClass(v10, v12);
      swift_bridgeObjectRelease(v10);
      if (!v9)
      {
        swift_bridgeObjectRelease(v10);
        uint64_t v9 = _swiftEmptyArrayStorage;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v10);
      sub_10004FA6C(v10, v10 + 32, v11 != 0, (2 * v11) | 1);
      uint64_t v9 = v26;
      swift_bridgeObjectRelease(v10);
    }
  }

  swift_bridgeObjectRetain(a1);
  sub_100067D6C((uint64_t)v9, (uint64_t)&v42);
  swift_bridgeObjectRelease(v9);
  if ((v53 & 1) != 0)
  {
    __int128 v16 = v42;
    uint64_t v17 = v43;
    uint64_t v18 = v44;
    uint64_t v19 = v45;
    uint64_t v20 = v46;
    uint64_t v21 = v47;
    uint64_t v57 = v48;
    uint64_t v29 = v50;
    uint64_t v30 = v49;
    uint64_t v28 = v51;
    char v27 = v52;
    __int128 v31 = v42;
    uint64_t v32 = v43;
    uint64_t v33 = v44;
    uint64_t v34 = v45;
    uint64_t v35 = v46;
    uint64_t v36 = v47;
    uint64_t v37 = v48;
    uint64_t v38 = v49;
    uint64_t v39 = v50;
    uint64_t v40 = v51;
    char v41 = v52;
    unint64_t v22 = sub_10005134C();
    swift_willThrowTypedImpl(&v31, &type metadata for CommandError, v22);
    swift_allocError(&type metadata for CommandError, v22, 0LL, 0LL);
    *(_OWORD *)uint64_t v23 = v16;
    *(void *)(v23 + 16) = v17;
    *(void *)(v23 + 24) = v18;
    *(void *)(v23 + 3sub_1000062D8(v0 + 2) = v19;
    *(void *)(v23 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v20;
    uint64_t v24 = v57;
    *(void *)(v23 + 48) = v21;
    *(void *)(v23 + 56) = v24;
    *(void *)(v23 + 64) = v30;
    *(void *)(v23 + 7sub_1000062D8(v0 + 2) = v29;
    *(void *)(v23 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v28;
    *(_BYTE *)(v23 + 88) = v27;
  }

  else
  {
    sub_100045320(&v42, a3);
  }

  swift_release(v54);
  swift_release(v55);
  return swift_bridgeObjectRelease(v56);
}

double sub_10004F124@<D0>(uint64_t a1@<X8>)
{
  return static ParsableCommand.configuration.getter(a1);
}

double static ParsableCommand.configuration.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = 0LL;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0xE000000000000000LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 7sub_1000062D8(v0 + 2) = 0xE000000000000000LL;
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0LL;
  *(void *)(a1 + 88) = 0xE000000000000000LL;
  *(_BYTE *)(a1 + 96) = 1;
  *(void *)(a1 + 104) = &_swiftEmptyArrayStorage;
  *(void *)(a1 + 11sub_1000062D8(v0 + 2) = 0LL;
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ParsableCommand.run()()
{
  uint64_t v3 = sub_1000387A0(v2, v0, v1);
  uint64_t v5 = v4;
  char v7 = v6;
  unint64_t v8 = sub_100051390();
  uint64_t v9 = swift_allocError(&type metadata for CleanExit, v8, 0LL, 0LL);
  *(void *)uint64_t v10 = v3;
  *(void *)(v10 + 8) = v5;
  *(_BYTE *)(v10 + 16) = v7;
  swift_willThrow(v9);
}

unint64_t static ParsableCommand._commandName.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t *__return_ptr))(a2 + 16))(&v11);
  unint64_t v3 = v11;
  uint64_t v4 = v12;
  swift_bridgeObjectRetain(v12);
  sub_10002CC24(&v11);
  if (!v4)
  {
    uint64_t v10 = a1;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a1);
    uint64_t v6 = String.init<A>(describing:)(&v10, MetatypeMetadata);
    unint64_t v8 = v7;
    unint64_t v3 = sub_10004E9B4(45LL, 0xE100000000000000LL, v6, v7);
    swift_bridgeObjectRelease(v8);
  }

  return v3;
}

char *static ParsableCommand.helpMessage(for:columns:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return static ParsableCommand.helpMessage(for:includeHidden:columns:)(a1, a2, 0, a3, a4 & 1, a6, a6);
}

char *static ParsableCommand.helpMessage(for:includeHidden:columns:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_10006A41C(v7, a7);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = sub_10008B57C((uint64_t)v12, a1);
  uint64_t v18 = v17;
  if (!((unint64_t)v17 >> 62))
  {
    uint64_t v19 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v19) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease(v18);
    uint64_t v23 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2]) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  if (v17 >= 0) {
    v17 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v17);
  if (!v19) {
    goto LABEL_17;
  }
LABEL_3:
  v32[0] = (uint64_t)_swiftEmptyArrayStorage;
  double result = sub_10004FE48(0LL, v19 & ~(v19 >> 63), 0);
  if ((v19 & 0x8000000000000000LL) == 0)
  {
    uint64_t v29 = v16;
    uint64_t v30 = v14;
    char v21 = a3;
    uint64_t v22 = 0LL;
    uint64_t v23 = (void *)v32[0];
    do
    {
      if ((v18 & 0xC000000000000001LL) != 0) {
        uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v18);
      }
      else {
        uint64_t v24 = swift_retain(*(void *)(v18 + 8 * v22 + 32));
      }
      __int128 v31 = *(_OWORD *)(v24 + 16);
      swift_release(v24);
      v32[0] = (uint64_t)v23;
      unint64_t v26 = v23[2];
      unint64_t v25 = v23[3];
      if (v26 >= v25 >> 1)
      {
        sub_10004FE48((char *)(v25 > 1), v26 + 1, 1);
        uint64_t v23 = (void *)v32[0];
      }

      ++v22;
      v23[2] = v26 + 1;
      *(_OWORD *)&v23[2 * v26 + 4] = v31;
    }

    while (v19 != v22);
    swift_bridgeObjectRelease(v18);
    a3 = v21;
    uint64_t v16 = v29;
    uint64_t v14 = v30;
    if (v23[2]) {
      goto LABEL_13;
    }
LABEL_12:
    swift_bridgeObjectRelease(v23);
    uint64_t v27 = sub_100005104(&qword_1000B90C0);
    uint64_t v23 = (void *)swift_allocObject(v27, 48LL, 7LL);
    *((_OWORD *)v23 + 1) = xmmword_100096510;
    *((_OWORD *)v23 + sub_1000062D8(v0 + 2) = *((_OWORD *)v12 + 1);
LABEL_13:
    swift_release(v12);
    swift_bridgeObjectRelease(v16);
    swift_release(v14);
    sub_100080428((uint64_t)v23, a3 & 1, (uint64_t)v32);
    swift_bridgeObjectRelease(v23);
    uint64_t v28 = sub_10007B6A8(a4, a5 & 1);
    sub_10004DBA8(v32);
    return (char *)v28;
  }

  __break(1u);
  return result;
}

uint64_t static ParsableCommand.main(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  sub_1000099D4((uint64_t)v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  return sub_1000062D8(v6);
}

uint64_t static ParsableCommand.main()(uint64_t a1, uint64_t a2)
{
  return static ParsableCommand.main(_:)(0LL, a1, a2);
}

uint64_t sub_10004F578(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10004D160(v2, *(void *)(a2 + 8), 2, 0LL, 0LL, 0LL);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v3 + 16);
  if (v6)
  {
    uint64_t v7 = v6 - 1;
    uint64_t v8 = (_BYTE *)(v3 + 177);
    do
    {
      uint64_t v9 = v7;
      if (*v8 == 4) {
        uint64_t v10 = (*(void *)(v8 - 145) == 0LL) & (*(v8 - 137) >> 1);
      }
      else {
        uint64_t v10 = 0LL;
      }
      if ((v10 & 1) != 0) {
        break;
      }
      --v7;
      v8 += 192;
    }

    while (v9);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return v10;
}

uint64_t sub_10004F60C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10004D160(v2, *(void *)(a2 + 8), 2, 0LL, 0LL, 0LL);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v3 + 16);
  if (v6)
  {
    uint64_t v7 = v6 - 1;
    uint64_t v8 = (_BYTE *)(v3 + 177);
    do
    {
      uint64_t v9 = v7;
      if (*v8 == 6) {
        uint64_t v10 = (*(void *)(v8 - 145) == 0LL) & (*(v8 - 137) >> 1);
      }
      else {
        uint64_t v10 = 0LL;
      }
      if ((v10 & 1) != 0) {
        break;
      }
      --v7;
      v8 += 192;
    }

    while (v9);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return v10;
}

uint64_t sub_10004F6A0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v5);
  sub_10002CC24(v5);
  sub_1000513D4((uint64_t)&v6, (uint64_t)v7);
  uint64_t v2 = sub_1000513D4((uint64_t)v7, (uint64_t)v8);
  if (v8[0]) {
    char v3 = sub_10004F578(v2, v8[1]);
  }
  else {
    char v3 = 0;
  }
  return v3 & 1;
}

unint64_t sub_10004F710(uint64_t a1, uint64_t a2)
{
  return sub_10004F744(a1, a2, &qword_1000B9728);
}

uint64_t sub_10004F71C(uint64_t a1, uint64_t a2)
{
  return sub_10004F810(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_100003AF0);
}

unint64_t sub_10004F738(uint64_t a1, uint64_t a2)
{
  return sub_10004F744(a1, a2, &qword_1000B9730);
}

unint64_t sub_10004F744(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = 0LL;
  unint64_t v14 = 0xE000000000000000LL;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  unint64_t v18 = 0xE000000000000000LL;
  uint64_t v19 = 0LL;
  unint64_t v20 = 0xE000000000000000LL;
  char v21 = 1;
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  sub_10002CC24(v12);
  uint64_t v11 = v3;
  uint64_t v5 = sub_100005104(a3);
  uint64_t v6 = String.init<A>(describing:)(&v11, v5);
  unint64_t v8 = v7;
  unint64_t v9 = sub_10004E9B4(45LL, 0xE100000000000000LL, v6, v7);
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t sub_10004F7F4(uint64_t a1, uint64_t a2)
{
  return sub_10004F810(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_100003B00);
}

uint64_t sub_10004F810(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v8 = *((unsigned __int8 *)v3 + 16);
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  v16[0] = v6;
  v16[1] = v7;
  char v17 = v8;
  unint64_t v9 = sub_100006270(v16, a1);
  uint64_t DynamicType = swift_getDynamicType(v9, a1, 1LL);
  uint64_t v11 = v19;
  a3(v6, v7, v8);
  sub_1000062D8(v16);
  unint64_t v12 = sub_100051390();
  uint64_t v13 = swift_allocError(&type metadata for CleanExit, v12, 0LL, 0LL);
  *(void *)uint64_t v14 = DynamicType;
  *(void *)(v14 + 8) = v11;
  *(_BYTE *)(v14 + 16) = 0;
  return swift_willThrow(v13);
}

unint64_t sub_10004F8C8()
{
  if (qword_1000B90B8 != -1) {
    swift_once(&qword_1000B90B8, sub_10007A248);
  }
  uint64_t v1 = *((void *)&xmmword_1000BA560 + 1);
  if (*((void *)&xmmword_1000BA560 + 1))
  {
    unint64_t v2 = xmmword_1000BA560;
  }

  else
  {
    uint64_t v8 = v0;
    uint64_t v3 = sub_100005104(&qword_1000B96A0);
    uint64_t v4 = String.init<A>(describing:)(&v8, v3);
    unint64_t v6 = v5;
    unint64_t v2 = sub_10004E9B4(45LL, 0xE100000000000000LL, v4, v5);
    swift_bridgeObjectRelease(v6);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

void *sub_10004F988(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = sub_100005104(&qword_1000B9230);
  uint64_t v6 = swift_allocObject(v5, (192 * v2) | 0x20, 7LL);
  size_t v7 = j__malloc_size((const void *)v6);
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = 2 * ((uint64_t)(v7 - 32) / 192);
  uint64_t v8 = sub_100061630(v11, (char *)(v6 + 32), v2, a1, a2);
  uint64_t v9 = v11[0];
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v11[1]);
  if (v8 != (void *)v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return (void *)v6;
}

void sub_10004FA6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }

  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        swift_arrayInitWithCopy(v9 + 4, a2 + 16 * a3, v5, &type metadata for String);
        return;
      }
    }

    else
    {
      uint64_t v8 = sub_100005104(&qword_1000B9118);
      uint64_t v9 = (void *)swift_allocObject(v8, 16 * v5 + 32, 7LL);
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      void v9[2] = v5;
      void v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }

    __break(1u);
    goto LABEL_11;
  }

void sub_10004FB38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }

  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        swift_arrayInitWithCopy(v9 + 4, a2 + (a3 << 6), v5, &type metadata for SplitArguments.Element);
        return;
      }
    }

    else
    {
      uint64_t v8 = sub_100005104(&qword_1000B9700);
      uint64_t v9 = (void *)swift_allocObject(v8, (v5 << 6) | 0x20, 7LL);
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 + 31;
      }
      void v9[2] = v5;
      void v9[3] = 2 * (v11 >> 6);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }

    __break(1u);
    goto LABEL_11;
  }

void *sub_10004FC04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100005104(&qword_1000B96E8);
  unint64_t v4 = (void *)swift_allocObject(v3, 24 * v1 + 32, 7LL);
  size_t v5 = j__malloc_size(v4);
  _OWORD v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  uint64_t v6 = sub_10005119C(&v9, (uint64_t)(v4 + 4), v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10002AE10(v7);
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_10004FCF8(void *result, uint64_t a2)
{
  uint64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v3 = v2 + 1;
  if (__OFADD__(v2, 1LL))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v2 == -1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = (uint64_t)result;
  if (v3 <= 0)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = sub_100005104(&qword_1000B96E0);
    uint64_t v7 = (void *)swift_allocObject(v6, 8 * v3 + 32, 7LL);
    int64_t v8 = j__malloc_size(v7);
    uint64_t v9 = v8 - 32;
    if (v8 < 32) {
      uint64_t v9 = v8 - 25;
    }
    uint64_t v7[2] = v3;
    void v7[3] = 2 * (v9 >> 3);
  }

  double result = (void *)sub_100061748((uint64_t)&v10, (uint64_t)(v7 + 4), v3, v5, a2);
  if (result == (void *)v3) {
    return v7;
  }
LABEL_14:
  __break(1u);
  return result;
}

char *sub_10004FDC8(char *a1, int64_t a2, char a3)
{
  double result = sub_10004FF84(a1, a2, a3, *v3, &qword_1000B9370, (uint64_t)&type metadata for NameSpecification.Element);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FDF4(char *a1, int64_t a2, char a3)
{
  double result = sub_10005009C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FE10(char *a1, int64_t a2, char a3)
{
  double result = sub_10005019C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FE2C(char *a1, int64_t a2, char a3)
{
  double result = sub_1000502B4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FE48(char *a1, int64_t a2, char a3)
{
  double result = sub_1000503B4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_10004FE64(void *a1, int64_t a2, char a3)
{
  double result = sub_1000504AC(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FE80(char *a1, int64_t a2, char a3)
{
  double result = sub_1000505E4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FE9C(char *a1, int64_t a2, char a3)
{
  double result = sub_1000506E4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_10004FEB8(void *a1, int64_t a2, char a3)
{
  double result = sub_100050800(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FED4(char *a1, int64_t a2, char a3)
{
  double result = sub_10004FF84(a1, a2, a3, *v3, &qword_1000B96C0, (uint64_t)&type metadata for Name);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FF00(char *a1, int64_t a2, char a3)
{
  double result = sub_100050938(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FF1C(char *a1, int64_t a2, char a3)
{
  double result = sub_100050A4C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_10004FF38(void *a1, int64_t a2, char a3)
{
  double result = sub_100050C70(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FF54(char *a1, int64_t a2, char a3)
{
  double result = sub_100050D90(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_10004FF70(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10004FF84(a1, a2, a3, a4, &qword_1000B96C0, (uint64_t)&type metadata for Name);
}

char *sub_10004FF84(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t a6)
{
  char v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *((void *)a4 + 3);
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = *((void *)a4 + 2);
  if (v10 <= v11) {
    uint64_t v12 = *((void *)a4 + 2);
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_100005104(a5);
    uint64_t v14 = (char *)swift_allocObject(v13, 24 * v12 + 32, 7LL);
    size_t v15 = j__malloc_size(v14);
    *((void *)v14 + sub_1000062D8(v0 + 2) = v11;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 24);
  }

  else
  {
    uint64_t v14 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v16 = v14 + 32;
  char v17 = a4 + 32;
  if ((v8 & 1) != 0)
  {
    if (v14 != a4 || v16 >= &v17[24 * v11]) {
      memmove(v16, v17, 24 * v11);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v16, v17, v11, a6);
  }

  swift_release(a4);
  return v14;
}

char *sub_10005009C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9118);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }

  swift_release(a4);
  return v11;
}

char *sub_10005019C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9230);
    uint64_t v11 = (char *)swift_allocObject(v10, (192 * v9) | 0x20, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 192);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[192 * v8]) {
      memmove(v13, v14, 192 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for ArgumentDefinition);
  }

  swift_release(a4);
  return v11;
}

char *sub_1000502B4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96B8);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for Substring);
  }

  swift_release(a4);
  return v11;
}

char *sub_1000503B4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B90C0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_release(a4);
  return v11;
}

void *sub_1000504AC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9710);
    uint64_t v11 = (void *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    void v11[2] = v8;
    void v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[6 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v14 = sub_100005104(&qword_1000B9718);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }

  swift_release(a4);
  return v11;
}

char *sub_1000505E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9700);
    uint64_t v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 6);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[64 * v8]) {
      memmove(v14, v15, v8 << 6);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for SplitArguments.Element);
  }

  swift_release(a4);
  return v11;
}

char *sub_1000506E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9708);
    uint64_t v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8]) {
      memmove(v13, v14, 56 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for DecodedArguments);
  }

  swift_release(a4);
  return v11;
}

void *sub_100050800(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96F0);
    uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    void v11[2] = v8;
    void v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v14 = sub_100005104(&qword_1000B96F8);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }

  swift_release(a4);
  return v11;
}

char *sub_100050938(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96D8);
    uint64_t v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8]) {
      memmove(v13, v14, 48 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for HelpGenerator.Section);
  }

  swift_release(a4);
  return v11;
}

char *sub_100050A4C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96D0);
    uint64_t v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[88 * v8]) {
      memmove(v13, v14, 88 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for CommandInfoV0);
  }

  swift_release(a4);
  return v11;
}

char *sub_100050B68(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96E8);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 24 * v8;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v15);
  }

  swift_release(a4);
  return v11;
}

void *sub_100050C70(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96A8);
    uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    void v11[2] = v8;
    void v11[3] = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v15 = sub_100005104(&qword_1000B96B0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }

  swift_release(a4);
  return v11;
}

char *sub_100050D90(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96C8);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for ArgumentInfoV0.NameInfoV0);
  }

  swift_release(a4);
  return v11;
}

unint64_t sub_100050EA8(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    unint64_t v7 = sub_100050F84(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unsigned int v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v7 & 0xFFFFFFFFFFFF0000LL, a1, a2);
    }

    else
    {
      unint64_t v8 = v7 >> 16;
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        v14[0] = a1;
        v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v9 = v14;
        uint64_t v10 = v2;
      }

      else
      {
        if ((a1 & 0x1000000000000000LL) != 0)
        {
          uint64_t v9 = (void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }

        else
        {
          uint64_t v9 = (void *)_StringObject.sharedUTF8.getter(a1, a2);
          uint64_t v3 = v13;
        }

        uint64_t v10 = v3;
      }

      unsigned int v11 = _decodeScalar(_:startingAt:)(v9, v10, v8);
    }
  }

  else
  {
    unsigned int v11 = 0;
  }

  LOBYTE(v14[0]) = v4 == 0;
  return v11 | ((unint64_t)(v4 == 0) << 32);
}

unint64_t sub_100050F84(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4LL << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    double result = sub_100051020(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_10005108C(result, a2, a3) & 0xFFFFFFFFFFFFFFF3LL | 1;
    }
  }

  return result;
}

unint64_t sub_100051020(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4LL << v5) {
    double result = sub_10008AED8(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_10005108C(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000LL;
  }

  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000LL) == 0)
    {
      void v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000LL) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }

          while (v11 == 128);
          return v7 << 16;
        }

        goto LABEL_14;
      }

      if ((a2 & 0x1000000000000000LL) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }

      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter(a2, a3);
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }

      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }

        while (v8 == 128);
        return v7 << 16;
      }

void *sub_10005119C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *double result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 24 * v12;
    char v14 = *(_BYTE *)(v13 + 16);
    char v15 = *(_BYTE *)(v13 + 17);
    *(_OWORD *)a2 = *(_OWORD *)v13;
    *(_BYTE *)(a2 + 16) = v14;
    *(_BYTE *)(a2 + 1sub_1000062D8(v0 + 7) = v15;
    a2 += 24LL;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v16 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v16);
  if (v17) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v16 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v16;
    goto LABEL_34;
  }

  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17)
  {
LABEL_15:
    int64_t v16 = v8;
LABEL_19:
    unint64_t v19 = __clz(__rbit64(v17));
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v12 = v19 + (v16 << 6);
    int64_t v8 = v16;
    goto LABEL_8;
  }

  int64_t v18 = v16 + 2;
  if (v16 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17)
  {
LABEL_18:
    int64_t v16 = v18;
    goto LABEL_19;
  }

  int64_t v8 = v16 + 3;
  if (v16 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v16 + 2;
    goto LABEL_34;
  }

  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v16 + 4;
  if (v16 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v16 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v17 = *(void *)(v4 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }

unint64_t sub_10005134C()
{
  unint64_t result = qword_1000B9690;
  if (!qword_1000B9690)
  {
    unint64_t result = swift_getWitnessTable(&unk_100099EC4, &type metadata for CommandError);
    atomic_store(result, (unint64_t *)&qword_1000B9690);
  }

  return result;
}

unint64_t sub_100051390()
{
  unint64_t result = qword_1000B9698;
  if (!qword_1000B9698)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CleanExit, &type metadata for CleanExit);
    atomic_store(result, (unint64_t *)&qword_1000B9698);
  }

  return result;
}

uint64_t sub_1000513D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B9720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005141C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter(15LL, a1, a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10005145C(uint64_t a1)
{
  uint64_t result = sub_10005BAE4(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32)) {
    return 0LL;
  }
  else {
    return sub_10005BB84(result, v3, 0LL, a1);
  }
}

uint64_t sub_1000514EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    unint64_t v11 = (_OWORD *)(v7 + 32);
    swift_bridgeObjectRetain_n(*(void *)(v6 + 72), 2LL);
    while (1)
    {
      sub_10005C00C(v11, v17);
      if (v4)
      {
        sub_10005C058((uint64_t)v17);
        uint64_t result = swift_bridgeObjectRelease(v7);
        __break(1u);
        return result;
      }

      if (*(void *)&v17[0] == a1) {
        break;
      }
      sub_10005C058((uint64_t)v17);
      unint64_t v11 = (_OWORD *)((char *)v11 + 56);
      if (!--v8)
      {
        swift_bridgeObjectRelease(v7);
        goto LABEL_8;
      }
    }

    swift_bridgeObjectRelease(v7);
    __int128 v19 = v17[0];
    __int128 v20 = v17[1];
    __int128 v21 = v17[2];
    uint64_t v22 = v18;
    swift_bridgeObjectRelease(v7);
    if (!(void)v19) {
      goto LABEL_9;
    }
    __int128 v23 = v19;
    v24[0] = v20;
    v24[1] = v21;
    uint64_t v25 = v22;
    sub_100045320(v24, (uint64_t)&v19);
    uint64_t v16 = sub_100005104(&qword_1000B9920);
    return swift_dynamicCast(a3, &v19, v16, a2, 7LL);
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v6 + 72));
LABEL_8:
    uint64_t v22 = 0LL;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v19 = 0u;
    swift_bridgeObjectRelease(v7);
LABEL_9:
    sub_10004E740((uint64_t)&v19, &qword_1000B9918);
    unint64_t v12 = sub_10002EA1C();
    uint64_t v13 = swift_allocError(&type metadata for ParserError, v12, 0LL, 0LL);
    *(void *)uint64_t v14 = 3LL;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(void *)(v14 + 7sub_1000062D8(v0 + 2) = 0LL;
    *(_BYTE *)(v14 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = 15;
    return swift_willThrow(v13);
  }

__n128 sub_1000516B8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = *(void *)(v4 + 8);
  *((void *)&v21 + 1) = a3;
  unint64_t v22 = a4;
  int64_t v10 = sub_10000B40C(&v20);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(v10, a1, a3);
  v19.n128_u64[0] = a2;
  v19.n128_u64[1] = a4;
  unint64_t v11 = *(char **)(v9 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  *(void *)(v9 + 7sub_1000062D8(v0 + 2) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v11 = sub_100058204(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    *(void *)(v9 + 7sub_1000062D8(v0 + 2) = v11;
  }

  unint64_t v14 = *((void *)v11 + 2);
  unint64_t v13 = *((void *)v11 + 3);
  if (v14 >= v13 >> 1)
  {
    unint64_t v11 = sub_100058204((char *)(v13 > 1), v14 + 1, 1, v11);
    *(void *)(v9 + 7sub_1000062D8(v0 + 2) = v11;
  }

  *((void *)v11 + sub_1000062D8(v0 + 2) = v14 + 1;
  char v15 = &v11[56 * v14];
  __n128 result = v19;
  __int128 v17 = v20;
  __int128 v18 = v21;
  *((void *)v15 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v22;
  *((_OWORD *)v15 + 3) = v17;
  *((_OWORD *)v15 + 4) = v18;
  *((__n128 *)v15 + sub_1000062D8(v0 + 2) = v19;
  return result;
}

uint64_t sub_1000517B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ParsedArgumentsContainer(0LL, a2, a3, a4);
  uint64_t v7 = *(void *)(v4 + 80);
  uint64_t v8 = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v4;
  uint64_t v11 = v8;
  swift_retain(v4);
  swift_bridgeObjectRetain(v7);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10009937C, v6);
  return KeyedDecodingContainer.init<A>(_:)(&v11, a2, v6, WitnessTable);
}

uint64_t sub_10005184C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_allocObject(v3, 32LL, 7LL);
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a1;
  return result;
}

void *sub_100051888()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[11]);
  return v0;
}

uint64_t sub_1000518F4()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

uint64_t type metadata accessor for ArgumentDecoder()
{
  return objc_opt_self(&OBJC_CLASS____TtC14ArgumentParser15ArgumentDecoder);
}

uint64_t sub_100051938(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 96);
}

uint64_t sub_100051988()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 80LL));
}

uint64_t sub_100051994()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 88LL));
}

uint64_t sub_1000519A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000517B8(a1, a2, a3, a4);
}

uint64_t sub_1000519C0()
{
  unint64_t v0 = sub_100056930();
  uint64_t v1 = swift_allocError(&type metadata for ArgumentDecoder.Error, v0, 0LL, 0LL);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  return swift_willThrow(v1);
}

uint64_t sub_100051A0C()
{
  unint64_t v0 = sub_100056930();
  uint64_t v1 = swift_allocError(&type metadata for ArgumentDecoder.Error, v0, 0LL, 0LL);
  *uint64_t v2 = 1LL;
  v2[1] = 0LL;
  void v2[2] = 0LL;
  v2[3] = 0LL;
  return swift_willThrow(v1);
}

double sub_100051A5C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v4 + 16);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    unint64_t v11 = sub_100058C68(a1, a2, a3);
    if ((v12 & 1) != 0)
    {
      sub_10005BD20(*(void *)(v7 + 56) + 72 * v11, (uint64_t)&v17);
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(a2);
      if (*((void *)&v17 + 1))
      {
        __int128 v22 = v17;
        __int128 v23 = v18;
        __int128 v24 = v19;
        uint64_t v13 = *((void *)&v20 + 1);
        uint64_t v25 = v20;
        char v14 = v21;
        swift_beginAccess(v5 + 56, &v17, 33LL, 0LL);
        swift_bridgeObjectRetain_n(v13, 2LL);
        sub_10005750C(v13);
        swift_endAccess(&v17);
        swift_bridgeObjectRelease(v13);
        __int128 v15 = v23;
        *(_OWORD *)a4 = v22;
        *(_OWORD *)(a4 + 16) = v15;
        double result = *(double *)&v24;
        *(_OWORD *)(a4 + 3sub_1000062D8(v0 + 2) = v24;
        *(void *)(a4 + 48) = v25;
        *(void *)(a4 + 56) = v13;
        *(_BYTE *)(a4 + 64) = v14;
        return result;
      }
    }

    else
    {
      char v21 = 0;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(a2);
    }
  }

  else
  {
    char v21 = 0;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
  }

  sub_10004E740((uint64_t)&v17, &qword_1000B9888);
  *(_BYTE *)(a4 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a4 + 3sub_1000062D8(v0 + 2) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

uint64_t sub_100051BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(void *)(v3 + 24) = a1;
  return v3;
}

uint64_t sub_100051BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 80LL);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = v2[2];
  (*(void (**)(char *))(v9 + 16))(v7);
  uint64_t v10 = *(void *)(v4 + 88);
  swift_bridgeObjectRetain(v8);
  uint64_t v11 = sub_10006C6A0((uint64_t)v7, v8, v5, v10);
  uint64_t v13 = v12;
  __int128 v15 = v14;
  sub_100051A5C(v11, v12, v14, a2);
  swift_bridgeObjectRelease(v15);
  return swift_bridgeObjectRelease(v13);
}

BOOL sub_100051C94(uint64_t a1)
{
  BOOL v1 = v4 != 0;
  sub_10004E740((uint64_t)v3, &qword_1000B9888);
  return v1;
}

uint64_t sub_100051CDC(uint64_t a1)
{
  if (!v3[1])
  {
    sub_10004E740((uint64_t)v3, &qword_1000B9888);
    __int128 v5 = 0u;
    __int128 v6 = 0u;
    goto LABEL_5;
  }

  sub_10005BCDC((uint64_t)&v4, (uint64_t)&v5, &qword_1000B9360);
  sub_10003D920(v3);
  if (!*((void *)&v6 + 1))
  {
LABEL_5:
    uint64_t v1 = 1LL;
    goto LABEL_6;
  }

  uint64_t v1 = 0LL;
LABEL_6:
  sub_10004E740((uint64_t)&v5, &qword_1000B9360);
  return v1;
}

uint64_t sub_100051D7C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v65 = a4;
  uint64_t v66 = a5;
  uint64_t v9 = *v5;
  uint64_t v10 = *(void *)(*v5 + 80);
  uint64_t v61 = *(void *)(v10 - 8);
  __chkstk_darwin(a1);
  uint64_t v62 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional(0LL, v12);
  uint64_t v57 = *(void *)(v13 - 8);
  uint64_t v58 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v59 = (char *)&v56 - v15;
  uint64_t v16 = *(void *)(a3 - 8);
  __chkstk_darwin(v14);
  __int128 v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = a2;
  uint64_t v19 = a2;
  __int128 v20 = v5;
  sub_100051BD4(v19, (uint64_t)v80);
  sub_10005BCDC((uint64_t)v80, (uint64_t)&v74, &qword_1000B9888);
  uint64_t v67 = v6;
  uint64_t v81 = a3;
  if (!v75)
  {
    uint64_t v30 = &qword_1000B9888;
    __int128 v31 = (uint64_t *)&v74;
LABEL_10:
    sub_10004E740((uint64_t)v31, v30);
LABEL_12:
    uint64_t v60 = v20;
    uint64_t v33 = v20[2];
    uint64_t v32 = v20[3];
    uint64_t v34 = v10;
    uint64_t v35 = *(char **)(v32 + 88);
    uint64_t v58 = v32;
    uint64_t v59 = v35;
    uint64_t v36 = sub_100005104(&qword_1000B9890);
    uint64_t inited = swift_initStackObject(v36, &v73);
    *(_OWORD *)(inited + 16) = xmmword_100096510;
    *(void *)(inited + 56) = v34;
    uint64_t v38 = *(void *)(v9 + 88);
    *(void *)(inited + 64) = v38;
    uint64_t v39 = (char *)sub_10000B40C((void *)(inited + 32));
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
    uint64_t v41 = v63;
    v40(v39, v63, v34);
    uint64_t v74 = (char *)v33;
    swift_bridgeObjectRetain(v35);
    swift_retain(v32);
    swift_bridgeObjectRetain(v33);
    sub_100057410((void *)inited);
    uint64_t v61 = (uint64_t)v74;
    uint64_t v42 = (uint64_t)v62;
    v40(v62, v41, v34);
    swift_bridgeObjectRetain(v33);
    uint64_t v43 = sub_10006C6A0(v42, v33, v34, v38);
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    sub_100051BD4(v41, (uint64_t)&v78);
    uint64_t v74 = v59;
    uint64_t v75 = v58;
    uint64_t v76 = v61;
    v77[0] = v43;
    v77[1] = v45;
    v77[2] = v47;
    uint64_t v71 = &type metadata for SingleValueDecoder;
    unint64_t v72 = sub_10005BBF4();
    *(void *)&__int128 v70 = swift_allocObject(&unk_1000B1D70, 129LL, 7LL);
    sub_10005BCA8((uint64_t *)&v74, v70 + 16);
    dispatch thunk of Decodable.init(from:)(&v70, v81, v65);
    sub_10004408C(&v74);
    return sub_10004E740((uint64_t)v80, &qword_1000B9888);
  }

  uint64_t v21 = v79;
  swift_bridgeObjectRetain(v79);
  sub_10003D920(&v74);
  if (*(void *)(v21 + 16) != 1LL)
  {
    swift_bridgeObjectRelease(v21);
    goto LABEL_12;
  }

  sub_10005145C(v21);
  int v23 = v22;
  swift_bridgeObjectRelease(v21);
  if ((v23 & 0x10000) != 0 || (v23 & 0x100) == 0) {
    goto LABEL_12;
  }
  sub_10005BCDC((uint64_t)v80, (uint64_t)&v74, &qword_1000B9888);
  if (!v75)
  {
    sub_10004E740((uint64_t)&v74, &qword_1000B9888);
    __int128 v68 = 0u;
    __int128 v69 = 0u;
    goto LABEL_15;
  }

  sub_10005BCDC((uint64_t)v77, (uint64_t)&v68, &qword_1000B9360);
  sub_10003D920(&v74);
  if (!*((void *)&v69 + 1))
  {
LABEL_15:
    uint64_t v30 = &qword_1000B9360;
    __int128 v31 = (uint64_t *)&v68;
    goto LABEL_10;
  }

  sub_10005BD5C(&v68, &v70);
  sub_10004E704((uint64_t)&v70, (uint64_t)&v74);
  __int128 v24 = v59;
  uint64_t v25 = v81;
  int v26 = swift_dynamicCast(v59, &v74, (char *)&type metadata for Any + 8, v81, 6LL);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v26)
  {
    v27(v24, 0LL, 1LL, v25);
    sub_1000062D8(&v70);
    sub_10004E740((uint64_t)v80, &qword_1000B9888);
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v28(v18, v24, v25);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v66, v18, v25);
  }

  v27(v24, 1LL, 1LL, v25);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v24, v58);
  unint64_t v48 = sub_10005BD6C();
  uint64_t v49 = swift_allocError(&type metadata for InternalParseError, v48, 0LL, 0LL);
  uint64_t v51 = v50;
  sub_10004E704((uint64_t)&v70, v50);
  sub_10005BCDC((uint64_t)v80, (uint64_t)&v74, &qword_1000B9888);
  uint64_t v52 = v75;
  if (v75)
  {
    uint64_t v53 = (uint64_t)v74;
    uint64_t v54 = v76;
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v54);
    uint64_t v55 = sub_10003D920(&v74);
    *(void *)(v51 + 3sub_1000062D8(v0 + 2) = v53;
    *(void *)(v51 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v52;
    *(void *)(v51 + 48) = v54;
    *(_BYTE *)(v51 + 56) = 0;
    swift_willThrow(v55);
    sub_1000062D8(&v70);
    return sub_10004E740((uint64_t)v80, &qword_1000B9888);
  }

  uint64_t result = swift_errorRelease(v49);
  __break(1u);
  return result;
}

uint64_t sub_100052234@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v10 = *v4;
  uint64_t v11 = *(void *)(*v4 + 80LL);
  *(void *)&__int128 v52 = *(void *)(v11 - 8);
  __chkstk_darwin(a1);
  *(void *)&__int128 v53 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v54 = v13;
  sub_100051BD4(v13, (uint64_t)v66);
  sub_10005BCDC((uint64_t)v66, (uint64_t)&v55, &qword_1000B9888);
  if (*((void *)&v55 + 1))
  {
    __int128 v63 = *(_OWORD *)&v56[16];
    __int128 v64 = *(_OWORD *)&v56[32];
    char v65 = v56[48];
    __int128 v61 = v55;
    __int128 v62 = *(_OWORD *)v56;
    if (*(void *)(*(void *)&v56[40] + 16LL) == 1LL)
    {
      sub_10005145C(*(uint64_t *)&v56[40]);
      if ((v14 & 0x10100) == 0x100)
      {
        sub_10004E740((uint64_t)v66, &qword_1000B9888);
        sub_10005BCDC((uint64_t)&v62 + 8, (uint64_t)&v55, &qword_1000B9360);
        sub_10003D920(&v61);
        uint64_t v15 = sub_100005104(&qword_1000B9360);
        int v16 = swift_dynamicCast(a4, &v55, v15, a2, 6LL);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( a4,  v16 ^ 1u,  1LL,  a2);
      }
    }

    uint64_t v47 = a1;
    uint64_t v48 = a3;
    uint64_t v49 = a4;
    uint64_t v50 = a2;
    uint64_t v51 = v5;
    sub_10003D920(&v61);
  }

  else
  {
    uint64_t v47 = a1;
    uint64_t v48 = a3;
    uint64_t v49 = a4;
    uint64_t v50 = a2;
    uint64_t v51 = v5;
    sub_10004E740((uint64_t)&v55, &qword_1000B9888);
  }

  uint64_t v18 = v52;
  uint64_t v19 = v4[2];
  uint64_t v20 = v4[3];
  *(void *)&__int128 v52 = *(void *)(v20 + 88);
  uint64_t v21 = v52;
  uint64_t v22 = sub_100005104(&qword_1000B9890);
  uint64_t inited = swift_initStackObject(v22, &v60);
  *(_OWORD *)(inited + 16) = xmmword_100096510;
  *(void *)(inited + 56) = v11;
  uint64_t v24 = *(void *)(v10 + 88);
  *(void *)(inited + 64) = v24;
  uint64_t v25 = sub_10000B40C((void *)(inited + 32));
  int v26 = *(void (**)(void *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v27 = v54;
  v26(v25, v54, v11);
  *(void *)&__int128 v55 = v19;
  swift_bridgeObjectRetain(v21);
  swift_retain(v20);
  swift_bridgeObjectRetain(v19);
  sub_100057410((void *)inited);
  uint64_t v67 = v55;
  uint64_t v28 = v53;
  v26((void *)v53, v27, v11);
  swift_bridgeObjectRetain(v19);
  uint64_t v29 = sub_10006C6A0(v28, v19, v11, v24);
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  sub_10005BCDC((uint64_t)v66, (uint64_t)&v64, &qword_1000B9888);
  *(void *)&__int128 v61 = v52;
  *((void *)&v61 + 1) = v20;
  *(void *)&__int128 v62 = v67;
  *((void *)&v62 + 1) = v29;
  *(void *)&__int128 v63 = v31;
  *((void *)&v63 + 1) = v33;
  *(void *)&v56[8] = &type metadata for SingleValueDecoder;
  *(void *)&v56[16] = sub_10005BBF4();
  *(void *)&__int128 v55 = swift_allocObject(&unk_1000B1D70, 129LL, 7LL);
  sub_10005BCA8((uint64_t *)&v61, v55 + 16);
  uint64_t v35 = v49;
  uint64_t v34 = v50;
  uint64_t v36 = v51;
  dispatch thunk of Decodable.init(from:)(&v55, v50, v48);
  if (v36)
  {
    uint64_t v59 = v36;
    swift_errorRetain(v36);
    uint64_t v37 = sub_100005104(&qword_1000B98A0);
    if (swift_dynamicCast(&v55, &v59, v37, &type metadata for ParserError, 0LL))
    {
      swift_errorRelease(v36);
      uint64_t v39 = *((void *)&v55 + 1);
      uint64_t v38 = *(void *)v56;
      char v40 = v58;
      if (v58 == 11)
      {
        swift_bridgeObjectRelease(*((void *)&v55 + 1));
        swift_bridgeObjectRelease(v38);
        sub_10004408C(&v61);
        sub_10004E740((uint64_t)v66, &qword_1000B9888);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v35, 1LL, 1LL, v34);
        return swift_errorRelease(v59);
      }

      uint64_t v41 = v57;
      __int128 v53 = *(_OWORD *)&v56[24];
      __int128 v54 = *(_OWORD *)&v56[40];
      __int128 v52 = *(_OWORD *)&v56[8];
      uint64_t v42 = v55;
      unint64_t v43 = sub_10002EA1C();
      uint64_t v44 = swift_allocError(&type metadata for ParserError, v43, 0LL, 0LL);
      *(void *)uint64_t v45 = v42;
      *(void *)(v45 + 8) = v39;
      *(void *)(v45 + 16) = v38;
      *(_OWORD *)(v45 + 24) = v52;
      *(_OWORD *)(v45 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v53;
      *(_OWORD *)(v45 + 56) = v54;
      *(void *)(v45 + 7sub_1000062D8(v0 + 2) = v41;
      *(_BYTE *)(v45 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0x616C696176616E75LL,  0xEB00000000656C62LL,  "ArgumentParser/Option.swift",  27LL,  2LL,  72LL, 0) = v40;
      swift_willThrow(v44);
    }

    sub_10004408C(&v61);
    sub_10004E740((uint64_t)v66, &qword_1000B9888);
    return swift_errorRelease(v59);
  }

  else
  {
    sub_10004408C(&v61);
    sub_10004E740((uint64_t)v66, &qword_1000B9888);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))( v35,  0LL,  1LL,  v34);
  }

void sub_1000526A0()
{
}

void sub_1000526E8()
{
}

void sub_100052730()
{
}

void sub_100052778()
{
}

uint64_t sub_1000527C0()
{
  return v0;
}

uint64_t sub_1000527E4()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for ParsedArgumentsContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037B54(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParsedArgumentsContainer);
}

uint64_t destroy for DecodedArguments(uint64_t a1)
{
  return sub_1000062D8((void *)(a1 + 16));
}

_OWORD *initializeWithCopy for DecodedArguments(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  __int128 v3 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

uint64_t assignWithCopy for DecodedArguments(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000528A8((void *)(a1 + 16), (void *)(a2 + 16));
  return a1;
}

void *sub_1000528A8(void *result, void *a2)
{
  if (result != a2)
  {
    __int128 v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        *__int128 v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *__int128 v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *__int128 v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

__n128 initializeWithTake for DecodedArguments(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 3sub_1000062D8(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DecodedArguments(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000062D8((void *)(a1 + 16));
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3sub_1000062D8(v0 + 2) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DecodedArguments(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DecodedArguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DecodedArguments()
{
  return &type metadata for DecodedArguments;
}

uint64_t destroy for SingleValueDecoder(void *a1)
{
  uint64_t result = a1[7];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[8]);
    if (a1[12]) {
      sub_1000062D8(a1 + 9);
    }
    return swift_bridgeObjectRelease(a1[13]);
  }

  return result;
}

uint64_t initializeWithCopy for SingleValueDecoder(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = v8;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v9;
  uint64_t v10 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  if (v10)
  {
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[8];
    *(void *)(a1 + 64) = v11;
    uint64_t v12 = a2[12];
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      *(void *)(a1 + 96) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8))(a1 + 72, (uint64_t)(a2 + 9), v12);
    }

    else
    {
      __int128 v15 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 7sub_1000062D8(v0 + 2) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = v15;
    }

    uint64_t v16 = a2[13];
    *(void *)(a1 + 104) = v16;
    *(_BYTE *)(a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    swift_bridgeObjectRetain(v16);
  }

  else
  {
    __int128 v13 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v13;
    *(_BYTE *)(a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    __int128 v14 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = v14;
  }

  return a1;
}

uint64_t *assignWithCopy for SingleValueDecoder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[3] = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[5];
  uint64_t v13 = a1[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  __int128 v14 = a1 + 6;
  __int128 v15 = a2 + 6;
  uint64_t v16 = a1[7];
  uint64_t v17 = a2[7];
  if (v16)
  {
    if (v17)
    {
      a1[6] = a2[6];
      uint64_t v18 = a2[7];
      a1[7] = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v16);
      uint64_t v19 = a2[8];
      uint64_t v20 = a1[8];
      a1[8] = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v20);
      uint64_t v21 = a2[12];
      if (a1[12])
      {
        if (v21)
        {
          sub_100052ED8(a1 + 9, a2 + 9);
LABEL_15:
          uint64_t v32 = a2[13];
          uint64_t v33 = a1[13];
          a1[13] = v32;
          swift_bridgeObjectRetain(v32);
          swift_bridgeObjectRelease(v33);
          *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
          return a1;
        }

        sub_1000062D8(a1 + 9);
      }

      else if (v21)
      {
        a1[12] = v21;
        (**(void (***)(uint64_t, uint64_t))(v21 - 8))((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
        goto LABEL_15;
      }

      __int128 v31 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 11) = v31;
      goto LABEL_15;
    }

    sub_10003D920(a1 + 6);
    *__int128 v14 = *v15;
    __int128 v26 = *((_OWORD *)a2 + 5);
    __int128 v25 = *((_OWORD *)a2 + 6);
    __int128 v27 = *((_OWORD *)a2 + 4);
    *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    *((_OWORD *)a1 + 5) = v26;
    *((_OWORD *)a1 + 6) = v25;
    *((_OWORD *)a1 + 4) = v27;
  }

  else if (v17)
  {
    a1[6] = a2[6];
    uint64_t v22 = a2[7];
    a1[7] = v22;
    uint64_t v23 = a2[8];
    a1[8] = v23;
    uint64_t v24 = a2[12];
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    if (v24)
    {
      a1[12] = v24;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v24 - 8))((uint64_t)(a1 + 9), (uint64_t)(a2 + 9), v24);
    }

    else
    {
      __int128 v34 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 11) = v34;
    }

    uint64_t v35 = a2[13];
    a1[13] = v35;
    *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    swift_bridgeObjectRetain(v35);
  }

  else
  {
    *__int128 v14 = *v15;
    __int128 v28 = *((_OWORD *)a2 + 4);
    __int128 v29 = *((_OWORD *)a2 + 5);
    __int128 v30 = *((_OWORD *)a2 + 6);
    *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    *((_OWORD *)a1 + 5) = v29;
    *((_OWORD *)a1 + 6) = v30;
    *((_OWORD *)a1 + 4) = v28;
  }

  return a1;
}

void *sub_100052ED8(void *result, void *a2)
{
  if (result != a2)
  {
    __int128 v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        *__int128 v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *__int128 v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *__int128 v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

__n128 initializeWithTake for SingleValueDecoder(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 3sub_1000062D8(v0 + 2) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(_BYTE *)(a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t *assignWithTake for SingleValueDecoder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_release(v5);
  uint64_t v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[7];
  if (!v10) {
    goto LABEL_7;
  }
  uint64_t v11 = a2[7];
  if (!v11)
  {
    sub_10003D920(a1 + 6);
LABEL_7:
    __int128 v15 = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 6) = v15;
    *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    __int128 v16 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v16;
    return a1;
  }

  a1[6] = a2[6];
  a1[7] = v11;
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = a1[8];
  a1[8] = a2[8];
  swift_bridgeObjectRelease(v12);
  if (a1[12]) {
    sub_1000062D8(a1 + 9);
  }
  __int128 v13 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 11) = v13;
  uint64_t v14 = a1[13];
  a1[13] = a2[13];
  swift_bridgeObjectRelease(v14);
  *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleValueDecoder(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleValueDecoder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_1000062D8(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 11sub_1000062D8(v0 + 2) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 113) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SingleValueDecoder()
{
  return &type metadata for SingleValueDecoder;
}

uint64_t sub_100053228()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 16LL));
}

void sub_100053234()
{
}

BOOL sub_100053240(uint64_t a1)
{
  return sub_100051C94(a1);
}

uint64_t sub_100053264(uint64_t a1)
{
  return sub_100051CDC(a1) & 1;
}

uint64_t sub_100053288(uint64_t a1)
{
  if (!v1) {
    char v2 = v4;
  }
  return v2 & 1;
}

uint64_t sub_1000532D4(uint64_t a1)
{
  uint64_t result = sub_100051D7C( (uint64_t)&type metadata for String,  a1,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  (uint64_t)&v3);
  if (!v1) {
    return v3;
  }
  return result;
}

double sub_100053324(uint64_t a1)
{
  if (!v1) {
    return v3;
  }
  return result;
}

float sub_10005336C(uint64_t a1)
{
  if (!v1) {
    return v3;
  }
  return result;
}

uint64_t sub_1000533B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000535F0(a1, a2, a3, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
}

uint64_t sub_1000533D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000534C4(a1, a2, a3, (uint64_t)&type metadata for Int8, (uint64_t)&protocol witness table for Int8);
}

uint64_t sub_1000533FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053528(a1, a2, a3, (uint64_t)&type metadata for Int16, (uint64_t)&protocol witness table for Int16);
}

uint64_t sub_100053420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005358C(a1, a2, a3, (uint64_t)&type metadata for Int32, (uint64_t)&protocol witness table for Int32);
}

uint64_t sub_100053444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000535F0(a1, a2, a3, (uint64_t)&type metadata for Int64, (uint64_t)&protocol witness table for Int64);
}

uint64_t sub_100053468()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t sub_10005347C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000535F0(a1, a2, a3, (uint64_t)&type metadata for UInt, (uint64_t)&protocol witness table for UInt);
}

uint64_t sub_1000534A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000534C4(a1, a2, a3, (uint64_t)&type metadata for UInt8, (uint64_t)&protocol witness table for UInt8);
}

uint64_t sub_1000534C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_100051D7C(a4, a1, a4, a5, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_100053504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053528(a1, a2, a3, (uint64_t)&type metadata for UInt16, (uint64_t)&protocol witness table for UInt16);
}

uint64_t sub_100053528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_100051D7C(a4, a1, a4, a5, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_100053568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005358C(a1, a2, a3, (uint64_t)&type metadata for UInt32, (uint64_t)&protocol witness table for UInt32);
}

uint64_t sub_10005358C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_100051D7C(a4, a1, a4, a5, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_1000535CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000535F0(a1, a2, a3, (uint64_t)&type metadata for UInt64, (uint64_t)&protocol witness table for UInt64);
}

uint64_t sub_1000535F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_100051D7C(a4, a1, a4, a5, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_100053630()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t sub_100053644@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100051D7C(a1, a2, a3, a4, a5);
}

uint64_t sub_100053664()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t sub_100053678()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t sub_10005368C()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000536AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005383C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000536C8()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000536E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000537B4(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_100053704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000537F8(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_100053720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005383C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005373C()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005375C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000538A8(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_100053778()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100053798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000537B4(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000537B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_1000537DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000537F8(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000537F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_100053820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005383C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_10005383C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_10005386C()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10005388C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000538A8(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000538A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_1000538CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_100052234(a1, a2, a3, a4);
}

void sub_1000538EC()
{
}

void sub_1000538F8()
{
}

void sub_100053904()
{
}

void sub_100053910()
{
}

uint64_t sub_10005391C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ParsedArgumentsContainer(0LL, a2, a3, a4);
  uint64_t v8 = *(void *)(v4 + 8);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v9 = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(v9 + 16) = v7;
  *(void *)(v9 + 24) = v8;
  uint64_t v12 = v9;
  swift_retain(v8);
  swift_bridgeObjectRetain(v7);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10009937C, v6);
  return KeyedDecodingContainer.init<A>(_:)(&v12, a2, v6, WitnessTable);
}

void sub_1000539B8(uint64_t *a1@<X8>)
{
  if (*((void *)&v30 + 1))
  {
    v36[1] = v32;
    v36[2] = v33;
    char v37 = v34;
    __int128 v35 = v30;
    v36[0] = v31;
    sub_10005BCDC((uint64_t)v36 + 8, (uint64_t)&v30, &qword_1000B9360);
    if (*((void *)&v31 + 1))
    {
      uint64_t v3 = sub_100005104(&qword_1000B98C8);
      if ((swift_dynamicCast(&v27, &v30, (char *)&type metadata for Any + 8, v3, 6LL) & 1) != 0)
      {
        unint64_t v4 = v27;
        uint64_t v5 = *(void *)(v1 + 16);
        sub_10005BD20((uint64_t)&v35, (uint64_t)&v30);
        uint64_t v28 = sub_100005104(&qword_1000B98D0);
        __int128 v29 = &off_1000B1FD0;
        __int128 v27 = v4;
        swift_bridgeObjectRetain(v5);
        sub_10003D920(&v35);
        a1[3] = (uint64_t)&type metadata for SingleValueDecoder.UnkeyedContainer;
        a1[4] = sub_10005BF2C();
        uint64_t v6 = swift_allocObject(&unk_1000B1DC0, 136LL, 7LL);
        *a1 = v6;
        *(void *)(v6 + 16) = v5;
        __int128 v7 = v30;
        *(_OWORD *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v31;
        __int128 v8 = v33;
        *(_OWORD *)(v6 + 56) = v32;
        *(_OWORD *)(v6 + 7sub_1000062D8(v0 + 2) = v8;
        *(_BYTE *)(v6 + 88) = v34;
        *(_OWORD *)(v6 + 24) = v7;
        sub_100045320(&v27, v6 + 96);
        return;
      }
    }

    else
    {
      sub_10004E740((uint64_t)&v30, &qword_1000B9360);
    }

    unint64_t v24 = sub_10002EA1C();
    uint64_t v25 = swift_allocError(&type metadata for ParserError, v24, 0LL, 0LL);
    *(void *)uint64_t v26 = 3LL;
    *(_OWORD *)(v26 + 8) = 0u;
    *(_OWORD *)(v26 + 24) = 0u;
    *(_OWORD *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(void *)(v26 + 7sub_1000062D8(v0 + 2) = 0LL;
    *(_BYTE *)(v26 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 15;
    swift_willThrow(v25);
    sub_10003D920(&v35);
  }

  else
  {
    sub_10004E740((uint64_t)&v30, &qword_1000B9888);
    *(void *)&__int128 v27 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain(v27);
    sub_100053CB8((uint64_t)&v30);
    if (*((void *)&v31 + 1))
    {
      sub_100045320(&v30, (uint64_t)&v35);
      sub_100033F10((uint64_t)&v35, (uint64_t)&v30);
      uint64_t v9 = v27;
      uint64_t v10 = *((void *)&v31 + 1);
      uint64_t v11 = v32;
      uint64_t v12 = sub_1000099D4((uint64_t)&v30, *((uint64_t *)&v31 + 1));
      __chkstk_darwin(v12);
      uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v15 + 16))(v14);
      uint64_t v16 = sub_10006C6A0((uint64_t)v14, v9, v10, v11);
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      sub_1000062D8(&v30);
      unint64_t v21 = sub_10002EA1C();
      uint64_t v22 = swift_allocError(&type metadata for ParserError, v21, 0LL, 0LL);
      *(void *)uint64_t v23 = v16;
      *(void *)(v23 + 8) = v18;
      *(void *)(v23 + 16) = v20;
      *(_OWORD *)(v23 + 24) = 0u;
      *(_OWORD *)(v23 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
      *(_OWORD *)(v23 + 56) = 0u;
      *(void *)(v23 + 7sub_1000062D8(v0 + 2) = 0LL;
      *(_BYTE *)(v23 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 11;
      swift_willThrow(v22);
      sub_1000062D8(&v35);
    }

    else
    {
      __break(1u);
    }
  }

void sub_100053CB8(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)*v1;
  if (*(void *)(*v1 + 16LL))
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) != 0)
    {
      uint64_t v4 = v3[2];
      if (v4)
      {
LABEL_4:
        uint64_t v5 = v4 - 1;
        sub_100045320((__int128 *)&v3[5 * v4 - 1], (uint64_t)v6);
        v3[2] = v5;
        *uint64_t v1 = v3;
        sub_100045320(v6, (uint64_t)v7);
        sub_100045320(v7, a1);
        return;
      }
    }

    else
    {
      uint64_t v3 = sub_10005B928(v3);
      uint64_t v4 = v3[2];
      if (v4) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  else
  {
    *(void *)(a1 + 3sub_1000062D8(v0 + 2) = 0LL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

void sub_100053D64()
{
  if (*((void *)&v24 + 1))
  {
    v30[1] = v26;
    void v30[2] = v27;
    char v31 = v28;
    __int128 v29 = v24;
    v30[0] = v25;
    sub_10005BCDC((uint64_t)v30 + 8, (uint64_t)&v24, &qword_1000B9360);
    uint64_t v1 = sub_100005104(&qword_1000B9360);
    if ((swift_dynamicCast(&v32, &v24, v1, &type metadata for Bool, 6LL) & 1) == 0)
    {
      unint64_t v17 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v17, 0LL, 0LL);
      uint64_t v19 = v18;
      sub_10005BCDC((uint64_t)v30 + 8, v18, &qword_1000B9360);
      uint64_t v20 = *((void *)&v29 + 1);
      uint64_t v21 = *(void *)&v30[0];
      *(void *)(v19 + 3sub_1000062D8(v0 + 2) = v29;
      *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v20;
      *(void *)(v19 + 48) = v21;
      *(_BYTE *)(v19 + 56) = 0;
      swift_bridgeObjectRetain(v20);
      uint64_t v22 = swift_bridgeObjectRetain(v21);
      swift_willThrow(v22);
    }

    sub_10003D920(&v29);
  }

  else
  {
    sub_10004E740((uint64_t)&v24, &qword_1000B9888);
    uint64_t v32 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain(v32);
    sub_100053CB8((uint64_t)&v24);
    if (*((void *)&v25 + 1))
    {
      sub_100045320(&v24, (uint64_t)&v29);
      sub_100033F10((uint64_t)&v29, (uint64_t)&v24);
      uint64_t v2 = v32;
      uint64_t v3 = *((void *)&v25 + 1);
      uint64_t v4 = v26;
      uint64_t v5 = sub_1000099D4((uint64_t)&v24, *((uint64_t *)&v25 + 1));
      __chkstk_darwin(v5);
      __int128 v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v8 + 16))(v7);
      uint64_t v9 = sub_10006C6A0((uint64_t)v7, v2, v3, v4);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      sub_1000062D8(&v24);
      unint64_t v14 = sub_10002EA1C();
      uint64_t v15 = swift_allocError(&type metadata for ParserError, v14, 0LL, 0LL);
      *(void *)uint64_t v16 = v9;
      *(void *)(v16 + 8) = v11;
      *(void *)(v16 + 16) = v13;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(void *)(v16 + 7sub_1000062D8(v0 + 2) = 0LL;
      *(_BYTE *)(v16 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 11;
      swift_willThrow(v15);
      sub_1000062D8(&v29);
    }

    else
    {
      __break(1u);
    }
  }

void sub_100053FC4()
{
  if (*((void *)&v25 + 1))
  {
    v31[1] = v27;
    void v31[2] = v28;
    char v32 = v29;
    __int128 v30 = v25;
    v31[0] = v26;
    sub_10005BCDC((uint64_t)v31 + 8, (uint64_t)&v25, &qword_1000B9360);
    uint64_t v1 = sub_100005104(&qword_1000B9360);
    if ((swift_dynamicCast(&v24, &v25, v1, &type metadata for String, 6LL) & 1) == 0)
    {
      unint64_t v17 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v17, 0LL, 0LL);
      uint64_t v19 = v18;
      sub_10005BCDC((uint64_t)v31 + 8, v18, &qword_1000B9360);
      uint64_t v20 = *((void *)&v30 + 1);
      uint64_t v21 = *(void *)&v31[0];
      *(void *)(v19 + 3sub_1000062D8(v0 + 2) = v30;
      *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v20;
      *(void *)(v19 + 48) = v21;
      *(_BYTE *)(v19 + 56) = 0;
      swift_bridgeObjectRetain(v20);
      uint64_t v22 = swift_bridgeObjectRetain(v21);
      swift_willThrow(v22);
    }

    sub_10003D920(&v30);
  }

  else
  {
    sub_10004E740((uint64_t)&v25, &qword_1000B9888);
    uint64_t v24 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain(v24);
    sub_100053CB8((uint64_t)&v25);
    if (*((void *)&v26 + 1))
    {
      sub_100045320(&v25, (uint64_t)&v30);
      sub_100033F10((uint64_t)&v30, (uint64_t)&v25);
      uint64_t v2 = v24;
      uint64_t v3 = *((void *)&v26 + 1);
      uint64_t v4 = v27;
      uint64_t v5 = sub_1000099D4((uint64_t)&v25, *((uint64_t *)&v26 + 1));
      __chkstk_darwin(v5);
      __int128 v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v8 + 16))(v7);
      uint64_t v9 = sub_10006C6A0((uint64_t)v7, v2, v3, v4);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      sub_1000062D8(&v25);
      unint64_t v14 = sub_10002EA1C();
      uint64_t v15 = swift_allocError(&type metadata for ParserError, v14, 0LL, 0LL);
      *(void *)uint64_t v16 = v9;
      *(void *)(v16 + 8) = v11;
      *(void *)(v16 + 16) = v13;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(void *)(v16 + 7sub_1000062D8(v0 + 2) = 0LL;
      *(_BYTE *)(v16 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 11;
      swift_willThrow(v15);
      sub_1000062D8(&v30);
    }

    else
    {
      __break(1u);
    }
  }

void sub_10005421C()
{
  if (*((void *)&v26 + 1))
  {
    v32[1] = v28;
    v32[2] = v29;
    char v33 = v30;
    __int128 v31 = v26;
    v32[0] = v27;
    sub_10005BCDC((uint64_t)v32 + 8, (uint64_t)&v26, &qword_1000B9360);
    uint64_t v1 = sub_100005104(&qword_1000B9360);
    if ((swift_dynamicCast(&v24, &v26, v1, &type metadata for Double, 6LL) & 1) != 0)
    {
      char v25 = 0;
    }

    else
    {
      unint64_t v17 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v17, 0LL, 0LL);
      uint64_t v19 = v18;
      sub_10005BCDC((uint64_t)v32 + 8, v18, &qword_1000B9360);
      uint64_t v20 = *((void *)&v31 + 1);
      uint64_t v21 = *(void *)&v32[0];
      *(void *)(v19 + 3sub_1000062D8(v0 + 2) = v31;
      *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v20;
      *(void *)(v19 + 48) = v21;
      *(_BYTE *)(v19 + 56) = 0;
      swift_bridgeObjectRetain(v20);
      uint64_t v22 = swift_bridgeObjectRetain(v21);
      swift_willThrow(v22);
    }

    sub_10003D920(&v31);
  }

  else
  {
    sub_10004E740((uint64_t)&v26, &qword_1000B9888);
    uint64_t v24 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain(v24);
    sub_100053CB8((uint64_t)&v26);
    if (*((void *)&v27 + 1))
    {
      sub_100045320(&v26, (uint64_t)&v31);
      sub_100033F10((uint64_t)&v31, (uint64_t)&v26);
      uint64_t v2 = v24;
      uint64_t v3 = *((void *)&v27 + 1);
      uint64_t v4 = v28;
      uint64_t v5 = sub_1000099D4((uint64_t)&v26, *((uint64_t *)&v27 + 1));
      __chkstk_darwin(v5);
      __int128 v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v8 + 16))(v7);
      uint64_t v9 = sub_10006C6A0((uint64_t)v7, v2, v3, v4);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      sub_1000062D8(&v26);
      unint64_t v14 = sub_10002EA1C();
      uint64_t v15 = swift_allocError(&type metadata for ParserError, v14, 0LL, 0LL);
      *(void *)uint64_t v16 = v9;
      *(void *)(v16 + 8) = v11;
      *(void *)(v16 + 16) = v13;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(void *)(v16 + 7sub_1000062D8(v0 + 2) = 0LL;
      *(_BYTE *)(v16 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 11;
      swift_willThrow(v15);
      sub_1000062D8(&v31);
    }

    else
    {
      __break(1u);
    }
  }

void sub_100054478()
{
  if (*((void *)&v24 + 1))
  {
    v30[1] = v26;
    void v30[2] = v27;
    char v31 = v28;
    __int128 v29 = v24;
    v30[0] = v25;
    sub_10005BCDC((uint64_t)v30 + 8, (uint64_t)&v24, &qword_1000B9360);
    uint64_t v1 = sub_100005104(&qword_1000B9360);
    if ((swift_dynamicCast(&v32, &v24, v1, &type metadata for Float, 6LL) & 1) != 0)
    {
      BYTE4(v3sub_1000062D8(v0 + 2) = 0;
    }

    else
    {
      unint64_t v17 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v17, 0LL, 0LL);
      uint64_t v19 = v18;
      sub_10005BCDC((uint64_t)v30 + 8, v18, &qword_1000B9360);
      uint64_t v20 = *((void *)&v29 + 1);
      uint64_t v21 = *(void *)&v30[0];
      *(void *)(v19 + 3sub_1000062D8(v0 + 2) = v29;
      *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v20;
      *(void *)(v19 + 48) = v21;
      *(_BYTE *)(v19 + 56) = 0;
      swift_bridgeObjectRetain(v20);
      uint64_t v22 = swift_bridgeObjectRetain(v21);
      swift_willThrow(v22);
    }

    sub_10003D920(&v29);
  }

  else
  {
    sub_10004E740((uint64_t)&v24, &qword_1000B9888);
    uint64_t v32 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain(v32);
    sub_100053CB8((uint64_t)&v24);
    if (*((void *)&v25 + 1))
    {
      sub_100045320(&v24, (uint64_t)&v29);
      sub_100033F10((uint64_t)&v29, (uint64_t)&v24);
      uint64_t v2 = v32;
      uint64_t v3 = *((void *)&v25 + 1);
      uint64_t v4 = v26;
      uint64_t v5 = sub_1000099D4((uint64_t)&v24, *((uint64_t *)&v25 + 1));
      __chkstk_darwin(v5);
      __int128 v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v8 + 16))(v7);
      uint64_t v9 = sub_10006C6A0((uint64_t)v7, v2, v3, v4);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      sub_1000062D8(&v24);
      unint64_t v14 = sub_10002EA1C();
      uint64_t v15 = swift_allocError(&type metadata for ParserError, v14, 0LL, 0LL);
      *(void *)uint64_t v16 = v9;
      *(void *)(v16 + 8) = v11;
      *(void *)(v16 + 16) = v13;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(void *)(v16 + 7sub_1000062D8(v0 + 2) = 0LL;
      *(_BYTE *)(v16 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 11;
      swift_willThrow(v15);
      sub_1000062D8(&v29);
    }

    else
    {
      __break(1u);
    }
  }

void sub_1000546D4(uint64_t a1)
{
  if (*((void *)&v28 + 1))
  {
    v34[1] = v30;
    v34[2] = v31;
    char v35 = v32;
    __int128 v33 = v28;
    v34[0] = v29;
    sub_10005BCDC((uint64_t)v34 + 8, (uint64_t)&v28, &qword_1000B9360);
    uint64_t v3 = sub_100005104(&qword_1000B9360);
    if ((swift_dynamicCast(&v26, &v28, v3, a1, 6LL) & 1) != 0)
    {
      char v27 = 0;
    }

    else
    {
      unint64_t v19 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v19, 0LL, 0LL);
      uint64_t v21 = v20;
      sub_10005BCDC((uint64_t)v34 + 8, v20, &qword_1000B9360);
      uint64_t v22 = *((void *)&v33 + 1);
      uint64_t v23 = *(void *)&v34[0];
      *(void *)(v21 + 3sub_1000062D8(v0 + 2) = v33;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v22;
      *(void *)(v21 + 48) = v23;
      *(_BYTE *)(v21 + 56) = 0;
      swift_bridgeObjectRetain(v22);
      uint64_t v24 = swift_bridgeObjectRetain(v23);
      swift_willThrow(v24);
    }

    sub_10003D920(&v33);
  }

  else
  {
    sub_10004E740((uint64_t)&v28, &qword_1000B9888);
    uint64_t v26 = *(void *)(v1 + 120);
    swift_bridgeObjectRetain(v26);
    sub_100053CB8((uint64_t)&v28);
    if (*((void *)&v29 + 1))
    {
      sub_100045320(&v28, (uint64_t)&v33);
      sub_100033F10((uint64_t)&v33, (uint64_t)&v28);
      uint64_t v4 = v26;
      uint64_t v5 = *((void *)&v29 + 1);
      uint64_t v6 = v30;
      uint64_t v7 = sub_1000099D4((uint64_t)&v28, *((uint64_t *)&v29 + 1));
      __chkstk_darwin(v7);
      uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v10 + 16))(v9);
      uint64_t v11 = sub_10006C6A0((uint64_t)v9, v4, v5, v6);
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      sub_1000062D8(&v28);
      unint64_t v16 = sub_10002EA1C();
      uint64_t v17 = swift_allocError(&type metadata for ParserError, v16, 0LL, 0LL);
      *(void *)uint64_t v18 = v11;
      *(void *)(v18 + 8) = v13;
      *(void *)(v18 + 16) = v15;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
      *(_OWORD *)(v18 + 56) = 0u;
      *(void *)(v18 + 7sub_1000062D8(v0 + 2) = 0LL;
      *(_BYTE *)(v18 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 11;
      swift_willThrow(v17);
      sub_1000062D8(&v33);
    }

    else
    {
      __break(1u);
    }
  }

void sub_100054930(uint64_t a1)
{
  if (*((void *)&v26 + 1))
  {
    v32[1] = v28;
    v32[2] = v29;
    char v33 = v30;
    __int128 v31 = v26;
    v32[0] = v27;
    sub_10005BCDC((uint64_t)v32 + 8, (uint64_t)&v26, &qword_1000B9360);
    uint64_t v3 = sub_100005104(&qword_1000B9360);
    if ((swift_dynamicCast(&v34, &v26, v3, a1, 6LL) & 1) != 0)
    {
      BYTE1(v34) = 0;
    }

    else
    {
      unint64_t v19 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v19, 0LL, 0LL);
      uint64_t v21 = v20;
      sub_10005BCDC((uint64_t)v32 + 8, v20, &qword_1000B9360);
      uint64_t v22 = *((void *)&v31 + 1);
      uint64_t v23 = *(void *)&v32[0];
      *(void *)(v21 + 3sub_1000062D8(v0 + 2) = v31;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v22;
      *(void *)(v21 + 48) = v23;
      *(_BYTE *)(v21 + 56) = 0;
      swift_bridgeObjectRetain(v22);
      uint64_t v24 = swift_bridgeObjectRetain(v23);
      swift_willThrow(v24);
    }

    sub_10003D920(&v31);
  }

  else
  {
    sub_10004E740((uint64_t)&v26, &qword_1000B9888);
    uint64_t v34 = *(void *)(v1 + 120);
    swift_bridgeObjectRetain(v34);
    sub_100053CB8((uint64_t)&v26);
    if (*((void *)&v27 + 1))
    {
      sub_100045320(&v26, (uint64_t)&v31);
      sub_100033F10((uint64_t)&v31, (uint64_t)&v26);
      uint64_t v4 = v34;
      uint64_t v5 = *((void *)&v27 + 1);
      uint64_t v6 = v28;
      uint64_t v7 = sub_1000099D4((uint64_t)&v26, *((uint64_t *)&v27 + 1));
      __chkstk_darwin(v7);
      uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v10 + 16))(v9);
      uint64_t v11 = sub_10006C6A0((uint64_t)v9, v4, v5, v6);
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      sub_1000062D8(&v26);
      unint64_t v16 = sub_10002EA1C();
      uint64_t v17 = swift_allocError(&type metadata for ParserError, v16, 0LL, 0LL);
      *(void *)uint64_t v18 = v11;
      *(void *)(v18 + 8) = v13;
      *(void *)(v18 + 16) = v15;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
      *(_OWORD *)(v18 + 56) = 0u;
      *(void *)(v18 + 7sub_1000062D8(v0 + 2) = 0LL;
      *(_BYTE *)(v18 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 11;
      swift_willThrow(v17);
      sub_1000062D8(&v31);
    }

    else
    {
      __break(1u);
    }
  }

void sub_100054B8C(uint64_t a1)
{
  if (*((void *)&v26 + 1))
  {
    v32[1] = v28;
    v32[2] = v29;
    char v33 = v30;
    __int128 v31 = v26;
    v32[0] = v27;
    sub_10005BCDC((uint64_t)v32 + 8, (uint64_t)&v26, &qword_1000B9360);
    uint64_t v3 = sub_100005104(&qword_1000B9360);
    if ((swift_dynamicCast(&v34, &v26, v3, a1, 6LL) & 1) != 0)
    {
      BYTE2(v34) = 0;
    }

    else
    {
      unint64_t v19 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v19, 0LL, 0LL);
      uint64_t v21 = v20;
      sub_10005BCDC((uint64_t)v32 + 8, v20, &qword_1000B9360);
      uint64_t v22 = *((void *)&v31 + 1);
      uint64_t v23 = *(void *)&v32[0];
      *(void *)(v21 + 3sub_1000062D8(v0 + 2) = v31;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v22;
      *(void *)(v21 + 48) = v23;
      *(_BYTE *)(v21 + 56) = 0;
      swift_bridgeObjectRetain(v22);
      uint64_t v24 = swift_bridgeObjectRetain(v23);
      swift_willThrow(v24);
    }

    sub_10003D920(&v31);
  }

  else
  {
    sub_10004E740((uint64_t)&v26, &qword_1000B9888);
    uint64_t v34 = *(void *)(v1 + 120);
    swift_bridgeObjectRetain(v34);
    sub_100053CB8((uint64_t)&v26);
    if (*((void *)&v27 + 1))
    {
      sub_100045320(&v26, (uint64_t)&v31);
      sub_100033F10((uint64_t)&v31, (uint64_t)&v26);
      uint64_t v4 = v34;
      uint64_t v5 = *((void *)&v27 + 1);
      uint64_t v6 = v28;
      uint64_t v7 = sub_1000099D4((uint64_t)&v26, *((uint64_t *)&v27 + 1));
      __chkstk_darwin(v7);
      uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v10 + 16))(v9);
      uint64_t v11 = sub_10006C6A0((uint64_t)v9, v4, v5, v6);
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      sub_1000062D8(&v26);
      unint64_t v16 = sub_10002EA1C();
      uint64_t v17 = swift_allocError(&type metadata for ParserError, v16, 0LL, 0LL);
      *(void *)uint64_t v18 = v11;
      *(void *)(v18 + 8) = v13;
      *(void *)(v18 + 16) = v15;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
      *(_OWORD *)(v18 + 56) = 0u;
      *(void *)(v18 + 7sub_1000062D8(v0 + 2) = 0LL;
      *(_BYTE *)(v18 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 11;
      swift_willThrow(v17);
      sub_1000062D8(&v31);
    }

    else
    {
      __break(1u);
    }
  }

void sub_100054DE8(uint64_t a1)
{
  if (*((void *)&v26 + 1))
  {
    v32[1] = v28;
    v32[2] = v29;
    char v33 = v30;
    __int128 v31 = v26;
    v32[0] = v27;
    sub_10005BCDC((uint64_t)v32 + 8, (uint64_t)&v26, &qword_1000B9360);
    uint64_t v3 = sub_100005104(&qword_1000B9360);
    if ((swift_dynamicCast(&v34, &v26, v3, a1, 6LL) & 1) != 0)
    {
      BYTE4(v34) = 0;
    }

    else
    {
      unint64_t v19 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v19, 0LL, 0LL);
      uint64_t v21 = v20;
      sub_10005BCDC((uint64_t)v32 + 8, v20, &qword_1000B9360);
      uint64_t v22 = *((void *)&v31 + 1);
      uint64_t v23 = *(void *)&v32[0];
      *(void *)(v21 + 3sub_1000062D8(v0 + 2) = v31;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v22;
      *(void *)(v21 + 48) = v23;
      *(_BYTE *)(v21 + 56) = 0;
      swift_bridgeObjectRetain(v22);
      uint64_t v24 = swift_bridgeObjectRetain(v23);
      swift_willThrow(v24);
    }

    sub_10003D920(&v31);
  }

  else
  {
    sub_10004E740((uint64_t)&v26, &qword_1000B9888);
    uint64_t v34 = *(void *)(v1 + 120);
    swift_bridgeObjectRetain(v34);
    sub_100053CB8((uint64_t)&v26);
    if (*((void *)&v27 + 1))
    {
      sub_100045320(&v26, (uint64_t)&v31);
      sub_100033F10((uint64_t)&v31, (uint64_t)&v26);
      uint64_t v4 = v34;
      uint64_t v5 = *((void *)&v27 + 1);
      uint64_t v6 = v28;
      uint64_t v7 = sub_1000099D4((uint64_t)&v26, *((uint64_t *)&v27 + 1));
      __chkstk_darwin(v7);
      uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v10 + 16))(v9);
      uint64_t v11 = sub_10006C6A0((uint64_t)v9, v4, v5, v6);
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      sub_1000062D8(&v26);
      unint64_t v16 = sub_10002EA1C();
      uint64_t v17 = swift_allocError(&type metadata for ParserError, v16, 0LL, 0LL);
      *(void *)uint64_t v18 = v11;
      *(void *)(v18 + 8) = v13;
      *(void *)(v18 + 16) = v15;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
      *(_OWORD *)(v18 + 56) = 0u;
      *(void *)(v18 + 7sub_1000062D8(v0 + 2) = 0LL;
      *(_BYTE *)(v18 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 11;
      swift_willThrow(v17);
      sub_1000062D8(&v31);
    }

    else
    {
      __break(1u);
    }
  }

void sub_100055044(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Optional(0LL, a1);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - v7;
  sub_10005BCDC(v2 + 128, (uint64_t)&v35, &qword_1000B9888);
  if (*((void *)&v35 + 1))
  {
    v41[1] = v37;
    v41[2] = v38;
    char v42 = v39;
    __int128 v40 = v35;
    v41[0] = v36;
    sub_10005BCDC((uint64_t)v41 + 8, (uint64_t)&v35, &qword_1000B9360);
    uint64_t v9 = sub_100005104(&qword_1000B9360);
    char v10 = swift_dynamicCast(v8, &v35, v9, a1, 6LL);
    uint64_t v11 = *(void *)(a1 - 8);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    if ((v10 & 1) != 0)
    {
      v12(v8, 0LL, 1LL, a1);
      sub_10003D920(&v40);
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v8, a1);
    }

    else
    {
      v12(v8, 1LL, 1LL, a1);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      unint64_t v28 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v28, 0LL, 0LL);
      uint64_t v30 = v29;
      sub_10005BCDC((uint64_t)v41 + 8, v29, &qword_1000B9360);
      uint64_t v31 = *((void *)&v40 + 1);
      uint64_t v32 = *(void *)&v41[0];
      *(void *)(v30 + 3sub_1000062D8(v0 + 2) = v40;
      *(void *)(v30 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v31;
      *(void *)(v30 + 48) = v32;
      *(_BYTE *)(v30 + 56) = 0;
      swift_bridgeObjectRetain(v31);
      uint64_t v33 = swift_bridgeObjectRetain(v32);
      swift_willThrow(v33);
      sub_10003D920(&v40);
    }
  }

  else
  {
    sub_10004E740((uint64_t)&v35, &qword_1000B9888);
    uint64_t v34 = *(void *)(v2 + 120);
    swift_bridgeObjectRetain(v34);
    sub_100053CB8((uint64_t)&v35);
    if (*((void *)&v36 + 1))
    {
      sub_100045320(&v35, (uint64_t)&v40);
      sub_100033F10((uint64_t)&v40, (uint64_t)&v35);
      uint64_t v13 = v34;
      uint64_t v14 = *((void *)&v36 + 1);
      uint64_t v15 = v37;
      uint64_t v16 = sub_1000099D4((uint64_t)&v35, *((uint64_t *)&v36 + 1));
      __chkstk_darwin(v16);
      uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v19 + 16))(v18);
      uint64_t v20 = sub_10006C6A0((uint64_t)v18, v13, v14, v15);
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      sub_1000062D8(&v35);
      unint64_t v25 = sub_10002EA1C();
      uint64_t v26 = swift_allocError(&type metadata for ParserError, v25, 0LL, 0LL);
      *(void *)uint64_t v27 = v20;
      *(void *)(v27 + 8) = v22;
      *(void *)(v27 + 16) = v24;
      *(_OWORD *)(v27 + 24) = 0u;
      *(_OWORD *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 0u;
      *(_OWORD *)(v27 + 56) = 0u;
      *(void *)(v27 + 7sub_1000062D8(v0 + 2) = 0LL;
      *(_BYTE *)(v27 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = 11;
      swift_willThrow(v26);
      sub_1000062D8(&v40);
    }

    else
    {
      __break(1u);
    }
  }

uint64_t sub_10005532C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 120));
}

BOOL sub_100055334()
{
  BOOL v1 = v4 == 0;
  sub_10004E740((uint64_t)v3, &qword_1000B9888);
  return v1;
}

uint64_t sub_100055388()
{
  return v0 & 1;
}

void sub_1000553A0()
{
}

void sub_1000553B4()
{
}

void sub_1000553C8()
{
}

void sub_1000553DC()
{
}

void sub_1000553F8()
{
}

void sub_100055414()
{
}

void sub_100055430()
{
}

void sub_10005544C()
{
}

uint64_t sub_100055468()
{
  return SingleValueDecodingContainer.decode(_:)();
}

void sub_10005547C()
{
}

void sub_100055498()
{
}

void sub_1000554B4()
{
}

void sub_1000554D0()
{
}

void sub_1000554EC()
{
}

uint64_t sub_100055508()
{
  return SingleValueDecodingContainer.decode(_:)();
}

void sub_10005551C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t sub_100055530()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_1000099D4((uint64_t)(v0 + 10), v2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v12, v2, v3);
  if (v13)
  {
    sub_10005BD5C(&v12, v14);
    sub_10004E704((uint64_t)v14, (uint64_t)&v12);
    if ((swift_dynamicCast(&v15, &v12, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) != 0)
    {
      sub_1000062D8(v14);
      char v4 = v15 & 1;
    }

    else
    {
      unint64_t v5 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v5, 0LL, 0LL);
      uint64_t v7 = v6;
      sub_10004E704((uint64_t)v14, v6);
      uint64_t v8 = v1[2];
      uint64_t v9 = v1[3];
      *(void *)(v7 + 3sub_1000062D8(v0 + 2) = v1[1];
      *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v8;
      *(void *)(v7 + 48) = v9;
      *(_BYTE *)(v7 + 56) = 0;
      swift_bridgeObjectRetain(v8);
      uint64_t v10 = swift_bridgeObjectRetain(v9);
      swift_willThrow(v10);
      sub_1000062D8(v14);
    }

    return v4 & 1;
  }

  else
  {
    sub_10004E740((uint64_t)&v12, &qword_1000B9360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  232LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_10005569C()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_1000099D4((uint64_t)(v0 + 10), v2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v12, v2, v3);
  if (v13)
  {
    sub_10005BD5C(&v12, v14);
    sub_10004E704((uint64_t)v14, (uint64_t)&v12);
    if ((swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      sub_1000062D8(v14);
      return v11;
    }

    else
    {
      unint64_t v5 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v5, 0LL, 0LL);
      uint64_t v7 = v6;
      sub_10004E704((uint64_t)v14, v6);
      uint64_t v8 = v1[2];
      uint64_t v9 = v1[3];
      *(void *)(v7 + 3sub_1000062D8(v0 + 2) = v1[1];
      *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v8;
      *(void *)(v7 + 48) = v9;
      *(_BYTE *)(v7 + 56) = 0;
      swift_bridgeObjectRetain(v8);
      uint64_t v10 = swift_bridgeObjectRetain(v9);
      swift_willThrow(v10);
      return sub_1000062D8(v14);
    }
  }

  else
  {
    sub_10004E740((uint64_t)&v12, &qword_1000B9360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  232LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100055800()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_1000099D4((uint64_t)(v0 + 10), v2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v13, v2, v3);
  if (v14)
  {
    sub_10005BD5C(&v13, v15);
    sub_10004E704((uint64_t)v15, (uint64_t)&v13);
    if ((swift_dynamicCast(&v11, &v13, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) != 0)
    {
      char v12 = 0;
    }

    else
    {
      unint64_t v5 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v5, 0LL, 0LL);
      uint64_t v7 = v6;
      sub_10004E704((uint64_t)v15, v6);
      uint64_t v8 = v1[2];
      uint64_t v9 = v1[3];
      *(void *)(v7 + 3sub_1000062D8(v0 + 2) = v1[1];
      *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v8;
      *(void *)(v7 + 48) = v9;
      *(_BYTE *)(v7 + 56) = 0;
      swift_bridgeObjectRetain(v8);
      uint64_t v10 = swift_bridgeObjectRetain(v9);
      swift_willThrow(v10);
    }

    return sub_1000062D8(v15);
  }

  else
  {
    sub_10004E740((uint64_t)&v13, &qword_1000B9360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  232LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100055968()
{
  BOOL v1 = v0;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  sub_1000099D4((uint64_t)(v0 + 10), v2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 32))(&v11, v2, v3);
  if (v12)
  {
    sub_10005BD5C(&v11, v13);
    sub_10004E704((uint64_t)v13, (uint64_t)&v11);
    if ((swift_dynamicCast(&v14, &v11, (char *)&type metadata for Any + 8, &type metadata for Float, 6LL) & 1) != 0)
    {
      char v15 = 0;
    }

    else
    {
      unint64_t v5 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v5, 0LL, 0LL);
      uint64_t v7 = v6;
      sub_10004E704((uint64_t)v13, v6);
      uint64_t v8 = v1[2];
      uint64_t v9 = v1[3];
      *(void *)(v7 + 3sub_1000062D8(v0 + 2) = v1[1];
      *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v8;
      *(void *)(v7 + 48) = v9;
      *(_BYTE *)(v7 + 56) = 0;
      swift_bridgeObjectRetain(v8);
      uint64_t v10 = swift_bridgeObjectRetain(v9);
      swift_willThrow(v10);
    }

    return sub_1000062D8(v13);
  }

  else
  {
    sub_10004E740((uint64_t)&v11, &qword_1000B9360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  232LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100055AD0(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = v1[13];
  uint64_t v5 = v1[14];
  sub_1000099D4((uint64_t)(v1 + 10), v4);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 32))(&v15, v4, v5);
  if (v16)
  {
    sub_10005BD5C(&v15, v17);
    sub_10004E704((uint64_t)v17, (uint64_t)&v15);
    if ((swift_dynamicCast(&v13, &v15, (char *)&type metadata for Any + 8, a1, 6LL) & 1) != 0)
    {
      char v14 = 0;
      sub_1000062D8(v17);
      return v13;
    }

    else
    {
      unint64_t v7 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v7, 0LL, 0LL);
      uint64_t v9 = v8;
      sub_10004E704((uint64_t)v17, v8);
      uint64_t v10 = v3[2];
      uint64_t v11 = v3[3];
      *(void *)(v9 + 3sub_1000062D8(v0 + 2) = v3[1];
      *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v10;
      *(void *)(v9 + 48) = v11;
      *(_BYTE *)(v9 + 56) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = swift_bridgeObjectRetain(v11);
      swift_willThrow(v12);
      return sub_1000062D8(v17);
    }
  }

  else
  {
    sub_10004E740((uint64_t)&v15, &qword_1000B9360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  232LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100055C38(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = v1[13];
  uint64_t v5 = v1[14];
  sub_1000099D4((uint64_t)(v1 + 10), v4);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 32))(&v14, v4, v5);
  if (v15)
  {
    sub_10005BD5C(&v14, v16);
    sub_10004E704((uint64_t)v16, (uint64_t)&v14);
    if ((swift_dynamicCast(v13, &v14, (char *)&type metadata for Any + 8, a1, 6LL) & 1) != 0)
    {
      v13[1] = 0;
      sub_1000062D8(v16);
      return v13[0];
    }

    else
    {
      unint64_t v7 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v7, 0LL, 0LL);
      uint64_t v9 = v8;
      sub_10004E704((uint64_t)v16, v8);
      uint64_t v10 = v3[2];
      uint64_t v11 = v3[3];
      *(void *)(v9 + 3sub_1000062D8(v0 + 2) = v3[1];
      *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v10;
      *(void *)(v9 + 48) = v11;
      *(_BYTE *)(v9 + 56) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = swift_bridgeObjectRetain(v11);
      swift_willThrow(v12);
      return sub_1000062D8(v16);
    }
  }

  else
  {
    sub_10004E740((uint64_t)&v14, &qword_1000B9360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  232LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100055DA0(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = v1[13];
  uint64_t v5 = v1[14];
  sub_1000099D4((uint64_t)(v1 + 10), v4);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 32))(&v15, v4, v5);
  if (v16)
  {
    sub_10005BD5C(&v15, v17);
    sub_10004E704((uint64_t)v17, (uint64_t)&v15);
    if ((swift_dynamicCast(&v13, &v15, (char *)&type metadata for Any + 8, a1, 6LL) & 1) != 0)
    {
      char v14 = 0;
      sub_1000062D8(v17);
      return v13;
    }

    else
    {
      unint64_t v7 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v7, 0LL, 0LL);
      uint64_t v9 = v8;
      sub_10004E704((uint64_t)v17, v8);
      uint64_t v10 = v3[2];
      uint64_t v11 = v3[3];
      *(void *)(v9 + 3sub_1000062D8(v0 + 2) = v3[1];
      *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v10;
      *(void *)(v9 + 48) = v11;
      *(_BYTE *)(v9 + 56) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = swift_bridgeObjectRetain(v11);
      swift_willThrow(v12);
      return sub_1000062D8(v17);
    }
  }

  else
  {
    sub_10004E740((uint64_t)&v15, &qword_1000B9360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  232LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100055F08(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = v1[13];
  uint64_t v5 = v1[14];
  sub_1000099D4((uint64_t)(v1 + 10), v4);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 32))(&v15, v4, v5);
  if (v16)
  {
    sub_10005BD5C(&v15, v17);
    sub_10004E704((uint64_t)v17, (uint64_t)&v15);
    if ((swift_dynamicCast(&v13, &v15, (char *)&type metadata for Any + 8, a1, 6LL) & 1) != 0)
    {
      char v14 = 0;
      sub_1000062D8(v17);
      return v13;
    }

    else
    {
      unint64_t v7 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v7, 0LL, 0LL);
      uint64_t v9 = v8;
      sub_10004E704((uint64_t)v17, v8);
      uint64_t v10 = v3[2];
      uint64_t v11 = v3[3];
      *(void *)(v9 + 3sub_1000062D8(v0 + 2) = v3[1];
      *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v10;
      *(void *)(v9 + 48) = v11;
      *(_BYTE *)(v9 + 56) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = swift_bridgeObjectRetain(v11);
      swift_willThrow(v12);
      return sub_1000062D8(v17);
    }
  }

  else
  {
    sub_10004E740((uint64_t)&v15, &qword_1000B9360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  232LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_100056070@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v24 = a2;
  uint64_t v5 = type metadata accessor for Optional(0LL, a1);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = v2[13];
  uint64_t v10 = v2[14];
  sub_1000099D4((uint64_t)(v2 + 10), v9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 32))(&v21, v9, v10);
  if (v22)
  {
    sub_10005BD5C(&v21, v23);
    sub_10004E704((uint64_t)v23, (uint64_t)&v21);
    char v11 = swift_dynamicCast(v8, &v21, (char *)&type metadata for Any + 8, a1, 6LL);
    uint64_t v12 = *(void *)(a1 - 8);
    unsigned int v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    if ((v11 & 1) != 0)
    {
      v13(v8, 0LL, 1LL, a1);
      sub_1000062D8(v23);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v24, v8, a1);
    }

    else
    {
      v13(v8, 1LL, 1LL, a1);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      unint64_t v15 = sub_10005BD6C();
      swift_allocError(&type metadata for InternalParseError, v15, 0LL, 0LL);
      uint64_t v17 = v16;
      sub_10004E704((uint64_t)v23, v16);
      uint64_t v18 = v3[2];
      uint64_t v19 = v3[3];
      *(void *)(v17 + 3sub_1000062D8(v0 + 2) = v3[1];
      *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  147LL, 0) = v18;
      *(void *)(v17 + 48) = v19;
      *(_BYTE *)(v17 + 56) = 0;
      swift_bridgeObjectRetain(v18);
      uint64_t v20 = swift_bridgeObjectRetain(v19);
      swift_willThrow(v20);
      return sub_1000062D8(v23);
    }
  }

  else
  {
    sub_10004E740((uint64_t)&v21, &qword_1000B9360);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  232LL,  0);
    __break(1u);
  }

  return result;
}

void sub_100056274()
{
}

uint64_t CommandInfoV0.superCommands.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_1000562C4()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  sub_100006270(v0 + 10, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_10005630C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  sub_100006270(v0 + 10, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2) & 1;
}

uint64_t sub_100056354()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  sub_100006270(v0 + 10, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t sub_100056398()
{
  return sub_100055530() & 1;
}

uint64_t sub_1000563B0()
{
  return sub_10005569C();
}

uint64_t sub_1000563C4()
{
  return sub_100055800();
}

uint64_t sub_1000563D8()
{
  return sub_100055968();
}

uint64_t sub_1000563EC()
{
  return sub_100055AD0((uint64_t)&type metadata for Int);
}

uint64_t sub_100056408()
{
  return sub_100055C38((uint64_t)&type metadata for Int8);
}

uint64_t sub_100056424()
{
  return sub_100055DA0((uint64_t)&type metadata for Int16);
}

uint64_t sub_100056440()
{
  return sub_100055F08((uint64_t)&type metadata for Int32);
}

uint64_t sub_10005645C()
{
  return sub_100055AD0((uint64_t)&type metadata for Int64);
}

uint64_t sub_100056478()
{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t sub_10005648C()
{
  return sub_100055AD0((uint64_t)&type metadata for UInt);
}

uint64_t sub_1000564A8()
{
  return sub_100055C38((uint64_t)&type metadata for UInt8);
}

uint64_t sub_1000564C4()
{
  return sub_100055DA0((uint64_t)&type metadata for UInt16);
}

uint64_t sub_1000564E0()
{
  return sub_100055F08((uint64_t)&type metadata for UInt32);
}

uint64_t sub_1000564FC()
{
  return sub_100055AD0((uint64_t)&type metadata for UInt64);
}

uint64_t sub_100056518()
{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t sub_10005652C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100056070(a1, a2);
}

uint64_t sub_100056540()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t sub_100056554()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t sub_100056568()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100056588(uint64_t a1, uint64_t a2)
{
  return sub_100056718(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000565A4()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000565C4(uint64_t a1, uint64_t a2)
{
  return sub_100056690(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000565E0(uint64_t a1, uint64_t a2)
{
  return sub_1000566D4(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000565FC(uint64_t a1, uint64_t a2)
{
  return sub_100056718(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_100056618()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100056638(uint64_t a1, uint64_t a2)
{
  return sub_100056784(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_100056654()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100056674(uint64_t a1, uint64_t a2)
{
  return sub_100056690(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_100056690(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_1000566B8(uint64_t a1, uint64_t a2)
{
  return sub_1000566D4(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000566D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_1000566FC(uint64_t a1, uint64_t a2)
{
  return sub_100056718(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_100056718(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_100056748()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100056768(uint64_t a1, uint64_t a2)
{
  return sub_100056784(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_100056784(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_1000567A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(a1, a4, a2, a5, a3);
}

void sub_1000567D0()
{
}

void sub_1000567DC()
{
}

void sub_100056824()
{
}

uint64_t sub_10005686C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_100056874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005391C(a1, a2, a3, a4);
}

void sub_100056888(uint64_t *a1@<X8>)
{
}

uint64_t sub_10005689C@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for SingleValueDecoder.SingleValueContainer;
  a1[4] = sub_10005BE44();
  uint64_t v3 = swift_allocObject(&unk_1000B1D98, 209LL, 7LL);
  *a1 = v3;
  sub_10005BCA8(v1, v3 + 16);
  uint64_t v4 = v1[2];
  sub_10005BCDC((uint64_t)(v1 + 6), v3 + 144, &qword_1000B9888);
  *(void *)(v3 + 136) = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_100056928(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

unint64_t sub_100056930()
{
  unint64_t result = qword_1000B9880;
  if (!qword_1000B9880)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000997F4, &type metadata for ArgumentDecoder.Error);
    atomic_store(result, (unint64_t *)&qword_1000B9880);
  }

  return result;
}

uint64_t sub_100056974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array.count.getter(a1, a3);
}

BOOL sub_100056990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array.endIndex.getter(a1, a3) <= a2;
}

double sub_1000569BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v4 >= Array.endIndex.getter(*v2, v6))
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  else
  {
    *(void *)(a2 + 24) = v6;
    sub_10000B40C((void *)a2);
    Array.subscript.getter(v4, v5, v6);
    v2[1] = v4 + 1;
  }

  return result;
}

uint64_t sub_100056A38(uint64_t a1, uint64_t a2)
{
  return sub_100056974(*v2, a2, *(void *)(a1 + 16));
}

BOOL sub_100056A5C(uint64_t a1)
{
  return sub_100056990(*v1, v1[1], *(void *)(a1 + 16));
}

uint64_t sub_100056A6C()
{
  return *(void *)(v0 + 8);
}

char *sub_100056A78(char *result)
{
  uint64_t v2 = *((void *)result + 2);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  double result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*((void *)v6 + 2)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  double result = sub_100057AB8(result, v11, 1, v3);
  uint64_t v3 = result;
  if (!*((void *)v6 + 2))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

char *sub_100056B60(char *result)
{
  uint64_t v2 = *((void *)result + 2);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  double result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*((void *)v6 + 2)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  double result = sub_100058438(result, v11, 1, v3);
  uint64_t v3 = result;
  if (!*((void *)v6 + 2))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

char *sub_100056C48(char *result)
{
  uint64_t v2 = *((void *)result + 2);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  double result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*((void *)v6 + 2)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  double result = sub_100058204(result, v11, 1, v3);
  uint64_t v3 = result;
  if (!*((void *)v6 + 2))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

char *sub_100056D34(char *result)
{
  uint64_t v2 = *((void *)result + 2);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  double result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*((void *)v6 + 2)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  double result = sub_100057BB8(result, v11, 1, v3);
  uint64_t v3 = result;
  if (!*((void *)v6 + 2))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

char *sub_100056E20(char *result)
{
  uint64_t v2 = *((void *)result + 2);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  double result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*((void *)v6 + 2)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  double result = sub_100058630(result, v11, 1, v3);
  uint64_t v3 = result;
  if (!*((void *)v6 + 2))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

uint64_t sub_100056F0C(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void *)(a3 + 16);
  if (v6 < a1 || v6 < a2)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  int64_t v10 = a2 - a1;
  int64_t v4 = *v5;
  int64_t v11 = *((void *)*v5 + 2);
  int64_t v12 = v11 + a2 - a1;
  if (__OFADD__(v11, a2 - a1)) {
    goto LABEL_19;
  }
  unint64_t v14 = a3;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v5);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (int64_t v16 = *((void *)v4 + 3) >> 1, v16 < v12))
  {
    if (v11 <= v12) {
      int64_t v17 = v12;
    }
    else {
      int64_t v17 = v11;
    }
    int64_t v4 = sub_100058320(isUniquelyReferenced_nonNull_native, v17, 1, v4);
    int64_t v16 = *((void *)v4 + 3) >> 1;
  }

  uint64_t v18 = *((void *)v4 + 2);
  uint64_t v19 = (uint64_t *)(v16 - v18);
  uint64_t v20 = sub_10005B950(&v75, &v4[192 * v18 + 32], v16 - v18, a1, a2, v14, a4);
  if ((uint64_t)v20 >= 1)
  {
    uint64_t v21 = *((void *)v4 + 2);
    BOOL v22 = __OFADD__(v21, v20);
    uint64_t v23 = (char *)v20 + v21;
    if (v22)
    {
      __break(1u);
      goto LABEL_24;
    }

    *((void *)v4 + sub_1000062D8(v0 + 2) = v23;
  }

  if (v20 != v19)
  {
LABEL_18:
    swift_bridgeObjectRelease(v77);
    uint64_t result = swift_bridgeObjectRelease(v78);
    *int64_t v5 = v4;
    return result;
  }

LABEL_21:
  int64_t v12 = *((void *)v4 + 2);
  unint64_t v14 = v79;
  a4 = v76;
  if (v79 == v76)
  {
    sub_100033E1C(v73);
    sub_10005BFC4((uint64_t)v73, (uint64_t)__dst);
    goto LABEL_27;
  }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

    __int128 v44 = v4;
    __int128 v28 = v4[2];
    uint64_t v27 = v4[3];
    if (v28 >= v27 >> 1)
    {
      sub_10004FDF4((char *)(v27 > 1), v28 + 1, 1);
      int64_t v4 = v44;
    }

    ++v3;
    _OWORD v4[2] = v28 + 1;
    __int128 v29 = &v4[2 * v28];
    void v29[4] = v14;
    v29[5] = v13;
  }

  while (v3 != v1);
  return v4;
}

    unint64_t v14 = v9 + 2;
    if (v9 + 2 >= v3) {
      goto LABEL_46;
    }
    unint64_t v15 = 1;
LABEL_23:
    if (v3 <= v14 + 1) {
      int64_t v17 = v14 + 1;
    }
    else {
      int64_t v17 = v3;
    }
    uint64_t v18 = (_BYTE *)(v10 + 17 + 24 * v14);
    do
    {
      if ((*v18 & 1) == 0)
      {
        uint64_t v19 = v10 + 24 * v12;
        if ((*(_BYTE *)(v19 + 17) & 1) != 0 || (uint64_t v20 = *(void *)(v18 - 17), v20 < *(void *)v19))
        {
LABEL_32:
          if ((v15 & 1) == 0) {
            goto LABEL_52;
          }
          goto LABEL_28;
        }

        if (v20 == *(void *)v19)
        {
          if ((*(v18 - 1) & 1) != 0)
          {
            if ((*(_BYTE *)(v19 + 16) & 1) == 0) {
              goto LABEL_32;
            }
          }

          else if ((*(_BYTE *)(v19 + 16) & 1) == 0 && *(void *)(v18 - 9) < *(void *)(v19 + 8))
          {
            if (!v15) {
              goto LABEL_52;
            }
            goto LABEL_28;
          }
        }
      }

      if ((v15 & 1) != 0)
      {
        int64_t v17 = v14;
        goto LABEL_45;
      }

    if (v4 <= v8 >> 16) {
      goto LABEL_28;
    }
    uint64_t result = String.UTF8View._foreignIndex(after:)(v8, a1, a2);
    uint64_t v8 = result;
LABEL_9:
    BOOL v9 = (FILE *)stderr.getter(result, v5);
    putc(v13, v9);
    if (4 * v4 == v8 >> 14) {
      return swift_bridgeObjectRelease(a2);
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

char *sub_100057328(char *result)
{
  uint64_t v2 = *((void *)result + 2);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unint64_t v6 = result;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*((void *)v6 + 2)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = sub_100057EEC(result, v11, 1, v3);
  uint64_t v3 = result;
  if (!*((void *)v6 + 2))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

void *sub_100057410(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v13 = v4 + v2;
  }
  else {
    int64_t v13 = v4;
  }
  uint64_t result = sub_100058970(result, v13, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

uint64_t sub_10005750C(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0LL;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }

    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v10 >= v7) {
      return swift_release(v1);
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        return swift_release(v1);
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          return swift_release(v1);
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            return swift_release(v1);
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }

uint64_t sub_100057670(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  BOOL v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0LL), uint64_t result = 0LL, (v10 & 1) != 0))
  {
    uint64_t v12 = v2 - 1;
    if (!v12) {
      return 1LL;
    }
    int64_t v13 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      uint64_t v15 = *(i - 1);
      uint64_t v16 = *i;
      uint64_t v17 = *(v13 - 1);
      uint64_t v18 = *v13;
      BOOL v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) == 0) {
        break;
      }
      v13 += 2;
      if (!--v12) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100057734(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 48);
    for (uint64_t i = (uint64_t *)(a2 + 48); ; i += 8)
    {
      uint64_t v6 = *(v3 - 2);
      uint64_t v7 = *(v3 - 1);
      unint64_t v8 = *v3;
      uint64_t v10 = v3[3];
      uint64_t v9 = v3[4];
      int v11 = *((unsigned __int8 *)v3 + 40);
      uint64_t v12 = *(i - 2);
      uint64_t v13 = *(i - 1);
      uint64_t v15 = *i;
      uint64_t v14 = i[1];
      uint64_t v16 = i[2];
      uint64_t v17 = i[3];
      uint64_t v18 = i[4];
      uint64_t v19 = ((unint64_t)*v3 >> 61) & 3;
      char v20 = *((_BYTE *)i + 40);
      if ((_DWORD)v19)
      {
        if ((_DWORD)v19 != 1)
        {
          uint64_t result = 0LL;
          if ((v15 & 0x6000000000000000LL) != 0x4000000000000000LL
            || v15 != 0x4000000000000000LL
            || v13 | v12 | v14 | v16)
          {
            return result;
          }

          uint64_t v27 = v3[4];
          int v28 = *((unsigned __int8 *)v3 + 40);
          uint64_t v29 = i[4];
          sub_10005BDF8(0LL, 0LL, 0x4000000000000000uLL, 0LL, i[2]);
          uint64_t v18 = v29;
          int v11 = v28;
          uint64_t v9 = v27;
LABEL_33:
          if (v10 != v17) {
            return 0LL;
          }
          goto LABEL_34;
        }

        if ((v15 & 0x6000000000000000LL) != 0x2000000000000000LL) {
          return 0LL;
        }
        goto LABEL_13;
      }

      if ((v15 & 0x6000000000000000LL) != 0) {
        return 0LL;
      }
      if ((v8 & 0x8000000000000000LL) != 0)
      {
        if ((v15 & 0x8000000000000000LL) == 0) {
          return 0LL;
        }
        uint64_t v30 = v3[1];
        uint64_t v31 = v3[2];
        uint64_t v50 = i[4];
        if (v8 >> 6)
        {
          int v32 = v15 & 0xC0;
          if (v8 >> 6 == 1)
          {
            if (v32 != 64) {
              return 0LL;
            }
            if (v6 == v12 && v7 == v13)
            {
            }

            else
            {
              uint64_t v47 = v3[2];
              uint64_t v49 = v3[4];
              uint64_t v44 = v3[1];
              int v45 = *((unsigned __int8 *)v3 + 40);
              char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0LL);
              uint64_t result = 0LL;
              if ((v40 & 1) == 0) {
                return result;
              }
              uint64_t v9 = v49;
              uint64_t v18 = v50;
              int v11 = v45;
              uint64_t v30 = v44;
              uint64_t v31 = v47;
            }

LABEL_61:
            if (v30 == v14 && v31 == v16) {
              goto LABEL_33;
            }
            int v41 = v11;
            uint64_t v42 = v9;
            char v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v14, v16, 0LL);
            uint64_t result = 0LL;
            if ((v43 & 1) == 0) {
              return result;
            }
            BOOL v39 = v10 == v17;
            uint64_t v9 = v42;
            int v11 = v41;
            goto LABEL_65;
          }

          if (v32 != 128) {
            return 0LL;
          }
        }

        else if (*i >= 0x40u)
        {
          return 0LL;
        }

        if (v6 != v12 || v7 != v13)
        {
          uint64_t v46 = v3[2];
          uint64_t v48 = v3[4];
          int v33 = *((unsigned __int8 *)v3 + 40);
          uint64_t v34 = v3[1];
          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0LL);
          uint64_t v31 = v46;
          uint64_t v9 = v48;
          uint64_t v30 = v34;
          uint64_t v18 = v50;
          int v11 = v33;
          if ((v35 & 1) == 0) {
            return 0LL;
          }
        }

        goto LABEL_61;
      }

      if (v15 < 0) {
        return 0LL;
      }
      int v26 = v15 & 0xC0;
      if (v8 >> 6 != 1)
      {
        if (v26 != 128) {
          return 0LL;
        }
        goto LABEL_13;
      }

      if (v26 != 64) {
        return 0LL;
      }
      if (v6 != v12 || v7 != v13)
      {
        uint64_t v50 = i[4];
        int v36 = *((unsigned __int8 *)v3 + 40);
        uint64_t v37 = v3[4];
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0LL);
        uint64_t result = 0LL;
        BOOL v39 = v10 == v17;
        uint64_t v9 = v37;
        int v11 = v36;
LABEL_65:
        uint64_t v18 = v50;
        if (!v39) {
          return result;
        }
        goto LABEL_34;
      }

      uint64_t result = 0LL;
LABEL_34:
      if (v11)
      {
        if ((v20 & 1) == 0) {
          return 0LL;
        }
      }

      else
      {
        if (v9 == v18) {
          char v5 = v20;
        }
        else {
          char v5 = 1;
        }
        if ((v5 & 1) != 0) {
          return 0LL;
        }
      }

      v3 += 8;
      if (!--v2) {
        return 1LL;
      }
    }

unint64_t sub_100057A90(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100057AB0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

char *sub_100057AB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9118);
    int v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100057BB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96C0);
    int v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for Name);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100057CCC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96A8);
    int v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    void v11[2] = v8;
    void v11[3] = 2 * (v13 >> 5);
  }

  else
  {
    int v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v15 = sub_100005104(&qword_1000B96B0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100057DEC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B98F0);
    int v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for ArgumentSet);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100057EEC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96B8);
    int v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for Substring);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100057FEC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B90C0);
    int v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_1000580E4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B98F8);
    int v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    void v11[2] = v8;
    void v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    int v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v15 = sub_100005104(&qword_1000B90C8);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100058204(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9708);
    int v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8]) {
      memmove(v13, v14, 56 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for DecodedArguments);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100058320(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9230);
    int v11 = (char *)swift_allocObject(v10, (192 * v9) | 0x20, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 192);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[192 * v8]) {
      memmove(v13, v14, 192 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for ArgumentDefinition);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100058438(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9700);
    int v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 6);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[64 * v8]) {
      memmove(v14, v15, v8 << 6);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for SplitArguments.Element);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100058538(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9910);
    int v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100058630(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96D8);
    int v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8]) {
      memmove(v13, v14, 48 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for HelpGenerator.Section);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100058744(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9908);
    int v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8]) {
      memmove(v13, v14, 48 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for HelpGenerator.Section.Element);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005885C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9900);
    int v11 = (char *)swift_allocObject(v10, 136 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 136);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[136 * v8]) {
      memmove(v13, v14, 136 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for ArgumentInfoV0);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100058970(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B9890);
    int v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    void v11[2] = v8;
    void v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    int v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v14 = sub_100005104(&qword_1000B98A8);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100058AA4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005104(&qword_1000B96E0);
    int v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + sub_1000062D8(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + sub_1000062D8(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_100058B9C(uint64_t a1, uint64_t a2, int a3)
{
  if (!(a3 >> 6))
  {
    Swift::UInt v7 = 0LL;
LABEL_6:
    Hasher._combine(_:)(v7);
    String.hash(into:)(v10, a1, a2);
    goto LABEL_7;
  }

  if (a3 >> 6 != 1)
  {
    Swift::UInt v7 = 2LL;
    goto LABEL_6;
  }

  Hasher._combine(_:)(1uLL);
  Character.hash(into:)(v10, a1, a2);
  Hasher._combine(_:)(a3 & 1);
LABEL_7:
  Swift::Int v8 = Hasher._finalize()();
  return sub_100058D88(a1, a2, a3, v8);
}

unint64_t sub_100058C68(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::Int v7 = Hasher._finalize()();
  return sub_100058EC4(a1, a2, a3, v7);
}

unint64_t sub_100058CE0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, &protocol witness table for CodingUserInfoKey);
  return sub_10005905C(a1, v6);
}

unint64_t sub_100058D30(Swift::UInt a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_100059184(a1, v3);
}

unint64_t sub_100058D88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if (((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    unsigned __int8 v13 = a3 & 0xC0;
    do
    {
      uint64_t v14 = (uint64_t *)(v12 + 24 * v7);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      unsigned int v17 = *((unsigned __int8 *)v14 + 16);
      if (v17 >> 6)
      {
        if (v17 >> 6 == 1)
        {
          if (v13 == 64)
          {
            BOOL v18 = v15 == a1 && v16 == a2;
            if ((v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a1, a2, 0LL) & 1) != 0)
              && ((a3 ^ v17) & 1) == 0)
            {
              return v7;
            }
          }

          goto LABEL_4;
        }

        if (v13 != 128) {
          goto LABEL_4;
        }
      }

      else if (a3 >= 0x40u)
      {
        goto LABEL_4;
      }

      BOOL v19 = v15 == a1 && v16 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a1, a2, 0LL) & 1) != 0) {
        return v7;
      }
LABEL_4:
      unint64_t v7 = (v7 + 1) & v11;
    }

    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0);
  }

  return v7;
}

unint64_t sub_100058EC4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if (((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    uint64_t v37 = a3 + 9;
    do
    {
      unsigned __int8 v13 = (void *)(v12 + 24 * v7);
      uint64_t v14 = v13[1];
      uint64_t v15 = (void *)v13[2];
      BOOL v16 = *v13 == a1 && v14 == a2;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, a1, a2, 0LL) & 1) != 0)
      {
        uint64_t v17 = v15[2];
        if (v17 == a3[2])
        {
          if (!v17 || v15 == a3) {
            return v7;
          }
          uint64_t v18 = v15[4];
          uint64_t v19 = v15[5];
          uint64_t v20 = a3[4];
          uint64_t v21 = a3[5];
          BOOL v22 = v18 == v20 && v19 == v21;
          if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v20, v21, 0LL) & 1) != 0)
          {
            if (v17 == 1) {
              return v7;
            }
            uint64_t v23 = v15[6];
            uint64_t v24 = v15[7];
            uint64_t v25 = a3[6];
            uint64_t v26 = a3[7];
            BOOL v27 = v23 == v25 && v24 == v26;
            if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 0LL) & 1) != 0)
            {
              uint64_t v28 = v17 - 2;
              if (!v28) {
                return v7;
              }
              uint64_t v29 = v15 + 9;
              for (uint64_t i = v37; ; i += 2)
              {
                uint64_t v31 = *(v29 - 1);
                uint64_t v32 = *v29;
                uint64_t v33 = *(i - 1);
                uint64_t v34 = *i;
                BOOL v35 = v31 == v33 && v32 == v34;
                if (!v35 && (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v33, v34, 0LL) & 1) == 0) {
                  break;
                }
                v29 += 2;
                if (!--v28) {
                  return v7;
                }
              }
            }
          }
        }
      }

      unint64_t v7 = (v7 + 1) & v11;
    }

    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0);
  }

  return v7;
}

unint64_t sub_10005905C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v17 = a1;
  uint64_t v5 = type metadata accessor for CodingUserInfoKey(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::Int v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    unsigned __int8 v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)( v8,  v17,  v5,  &protocol witness table for CodingUserInfoKey);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_100059184(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

uint64_t sub_100059220(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *v4;
  Hasher.init(_seed:)(v42, *(void *)(*v4 + 40));
  int v9 = a4 >> 6;
  if (a4 >> 6)
  {
    if (v9 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Character.hash(into:)(v42, a2, a3);
      Hasher._combine(_:)(a4 & 1);
    }

    else
    {
      else {
        Swift::UInt v10 = 0LL;
      }
      Hasher._combine(_:)(v10);
    }

    swift_bridgeObjectRetain(v8);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain(v8);
    sub_10003F6B0(a2, a3, a4);
    String.hash(into:)(v42, a2, a3);
    Hasher._combine(_:)(a4 & 1);
    sub_10003F434(a2, a3, a4);
  }

  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v14 = v8 + 56;
  uint64_t v37 = v8;
  if (((*(void *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
  {
LABEL_47:
    swift_bridgeObjectRelease(v37);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
    v42[0] = *v38;
    *char v38 = 0x8000000000000000LL;
    sub_10003F6B0(a2, a3, a4);
    sub_10005A500(a2, a3, a4, v13, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = *v38;
    *char v38 = v42[0];
    swift_bridgeObjectRelease(v28);
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    uint64_t result = 1LL;
    *(_BYTE *)(a1 + 16) = a4;
    return result;
  }

  uint64_t v15 = ~v12;
  uint64_t v16 = *(void *)(v8 + 48);
  BOOL v18 = a2 == 1 && a3 == 0;
  if (a4 == 128)
  {
    BOOL v19 = (a3 | a2) != 0;
  }

  else
  {
    BOOL v18 = 0;
    BOOL v19 = 1;
  }

  BOOL v20 = v9 == 2 && v18;
  char v21 = v9 != 2 || v19;
  char v40 = v21;
  BOOL v41 = v20;
  while (1)
  {
    BOOL v22 = (uint64_t *)(v16 + 24 * v13);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unsigned int v25 = *((unsigned __int8 *)v22 + 16);
    if (!(v25 >> 6))
    {
LABEL_35:
      BOOL v26 = v23 == a2 && v24 == a3;
      if ((v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, a2, a3, 0LL) & 1) != 0)
        && ((a4 ^ v25) & 1) == 0)
      {
        swift_bridgeObjectRelease(v37);
        uint64_t v32 = a2;
        uint64_t v30 = a3;
        char v31 = a4;
        goto LABEL_50;
      }

      goto LABEL_29;
    }

    if (v25 >> 6 == 1)
    {
      if (v9 != 1) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }

    if (v24 | v23 || v25 != 128) {
      break;
    }
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRelease(v37);
      uint64_t v32 = 0LL;
      goto LABEL_49;
    }

uint64_t sub_10005954C(uint64_t a1, Swift::UInt a2, Swift::UInt a3, unsigned int a4)
{
  uint64_t v5 = v4;
  unsigned int v6 = a4;
  unsigned int v10 = a4 >> 8;
  uint64_t v11 = *v5;
  Hasher.init(_seed:)(v23, *(void *)(*v5 + 40LL));
  if ((v10 & 1) != 0 || (Hasher._combine(_:)(1uLL), Hasher._combine(_:)(a2), (v6 & 1) != 0))
  {
    Swift::UInt v12 = 0LL;
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v12 = a3;
  }

  Hasher._combine(_:)(v12);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v11 + 32);
  unint64_t v15 = v13 & ~v14;
  if (((*(void *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0)
  {
LABEL_18:
    int v20 = (v6 >> 8) & 1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v23[0] = *v5;
    *uint64_t v5 = 0x8000000000000000LL;
    sub_10005A7D4(a2, a3, v6 & 0x1FF, v15, isUniquelyReferenced_nonNull_native);
    uint64_t v22 = *v5;
    *uint64_t v5 = v23[0];
    swift_bridgeObjectRelease(v22);
    uint64_t result = 1LL;
    goto LABEL_19;
  }

  uint64_t v16 = ~v14;
  while (1)
  {
    uint64_t v17 = *(void *)(v11 + 48) + 24 * v15;
    if ((*(_BYTE *)(v17 + 17) & 1) != 0)
    {
      if ((v6 & 0x100) != 0) {
        goto LABEL_17;
      }
      goto LABEL_8;
    }

    if ((v6 & 0x100) != 0 || *(void *)v17 != a2) {
      goto LABEL_8;
    }
    if ((*(_BYTE *)(v17 + 16) & 1) == 0) {
      break;
    }
    if ((v6 & 1) != 0) {
      goto LABEL_17;
    }
LABEL_8:
    unint64_t v15 = (v15 + 1) & v16;
    if (((*(void *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
      goto LABEL_18;
    }
  }

  if ((v6 & 1) != 0 || *(void *)(v17 + 8) != a3) {
    goto LABEL_8;
  }
LABEL_17:
  uint64_t result = 0LL;
  uint64_t v19 = *(void *)(*v5 + 48LL) + 24 * v15;
  a2 = *(void *)v19;
  a3 = *(void *)(v19 + 8);
  LOBYTE(v6) = *(_BYTE *)(v19 + 16);
  LOBYTE(v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  248LL, 0) = *(_BYTE *)(v19 + 17);
LABEL_19:
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 1sub_1000062D8(v0 + 7) = v20;
  return result;
}

uint64_t sub_100059704(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_retain(a2);
    swift_bridgeObjectRetain(v6);
    uint64_t v8 = __CocoaSet.member(for:)(a2, v7);
    swift_release(a2);
    if (v8)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      uint64_t v25 = v8;
      swift_unknownObjectRetain(v8);
      uint64_t v9 = sub_100005104(&qword_1000B98E0);
      swift_dynamicCast(v24, &v25, (char *)&type metadata for Swift.AnyObject + 8, v9, 7LL);
      *a1 = v24[0];
      swift_unknownObjectRelease(v8);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v20 = sub_100059948(v7, result + 1);
    v24[0] = v20;
    unint64_t v21 = *(void *)(v20 + 16);
    if (*(void *)(v20 + 24) <= v21)
    {
      uint64_t v23 = v21 + 1;
      swift_retain(a2);
      sub_10005A1B8(v23);
      uint64_t v22 = v24[0];
    }

    else
    {
      uint64_t v22 = v20;
      swift_retain(a2);
    }

    sub_10005A460(a2, v22);
    uint64_t v19 = *v3;
    *uint64_t v3 = v22;
  }

  else
  {
    Hasher.init(_seed:)(v24, *(void *)(v6 + 40));
    Hasher._combine(_:)(a2);
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
    {
      uint64_t v14 = *(void *)(v6 + 48);
      if (*(void *)(v14 + 8 * v13) == a2)
      {
LABEL_12:
        swift_release(a2);
        Swift::UInt v16 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
        *a1 = v16;
        swift_retain(v16);
        return 0LL;
      }

      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
          break;
        }
        if (*(void *)(v14 + 8 * v13) == a2) {
          goto LABEL_12;
        }
      }
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v24[0] = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    uint64_t v18 = swift_retain(a2);
    sub_10005A9B0(v18, v13, isUniquelyReferenced_nonNull_native);
    uint64_t v19 = *v2;
    *uint64_t v2 = v24[0];
  }

  swift_bridgeObjectRelease(v19);
  *a1 = a2;
  return 1LL;
}

Swift::Int sub_100059948(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100005104(&qword_1000B98E8);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v22 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    for (uint64_t i = __CocoaSet.Iterator.next()(); i; uint64_t i = __CocoaSet.Iterator.next()())
    {
      v20[0] = i;
      uint64_t v14 = sub_100005104(&qword_1000B98E0);
      swift_dynamicCast(&v21, v20, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
      unint64_t v15 = *(void *)(v4 + 16);
      if (*(void *)(v4 + 24) <= v15)
      {
        sub_10005A1B8(v15 + 1);
        uint64_t v4 = v22;
      }

      Swift::UInt v7 = v21;
      Hasher.init(_seed:)(v20, *(void *)(v4 + 40));
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = v4 + 56;
      uint64_t v10 = -1LL << *(_BYTE *)(v4 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      if (((-1LL << v11) & ~*(void *)(v4 + 56 + 8 * (v11 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1LL << v11) & ~*(void *)(v4 + 56 + 8 * (v11 >> 6)))) | v11 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v16 = 0;
        unint64_t v17 = (unint64_t)(63 - v10) >> 6;
        do
        {
          if (++v12 == v17 && (v16 & 1) != 0)
          {
            __break(1u);
            return result;
          }

          BOOL v18 = v12 == v17;
          if (v12 == v17) {
            unint64_t v12 = 0LL;
          }
          v16 |= v18;
          uint64_t v19 = *(void *)(v9 + 8 * v12);
        }

        while (v19 == -1);
        unint64_t v13 = __clz(__rbit64(~v19)) + (v12 << 6);
      }

      *(void *)(v9 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v7;
      ++*(void *)(v4 + 16);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

Swift::Int sub_100059B40(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005104(qword_1000B9928);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16)) {
    goto LABEL_49;
  }
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v36 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v16 = v15 | (v12 << 6);
      goto LABEL_25;
    }

    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }

    if (v17 >= v35) {
      break;
    }
    BOOL v18 = (void *)(v3 + 56);
    unint64_t v19 = *(void *)(v36 + 8 * v17);
    ++v12;
    if (!v19)
    {
      int64_t v12 = v17 + 1;
      if (v17 + 1 >= v35) {
        goto LABEL_43;
      }
      unint64_t v19 = *(void *)(v36 + 8 * v12);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v35)
        {
LABEL_43:
          swift_release(v3);
          uint64_t v2 = v34;
          goto LABEL_45;
        }

        unint64_t v19 = *(void *)(v36 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v12 = v20 + 1;
            if (__OFADD__(v20, 1LL)) {
              goto LABEL_51;
            }
            if (v12 >= v35) {
              goto LABEL_43;
            }
            unint64_t v19 = *(void *)(v36 + 8 * v12);
            ++v20;
            if (v19) {
              goto LABEL_24;
            }
          }
        }

        int64_t v12 = v20;
      }
    }

Swift::Int sub_100059EC8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005104(&qword_1000B98B0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    int64_t v35 = (void *)(v3 + 56);
    uint64_t v8 = 1LL << *(_BYTE *)(v3 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    uint64_t v33 = v2;
    int64_t v34 = (unint64_t)(v8 + 63) >> 6;
    Swift::Int v11 = result + 56;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v7 << 6);
      }

      else
      {
        int64_t v16 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        Swift::Int result = v3 + 56;
        if (v16 >= v34) {
          goto LABEL_38;
        }
        unint64_t v17 = v35[v16];
        ++v7;
        if (!v17)
        {
          int64_t v7 = v16 + 1;
          if (v16 + 1 >= v34) {
            goto LABEL_38;
          }
          unint64_t v17 = v35[v7];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v34)
            {
LABEL_38:
              uint64_t v32 = 1LL << *(_BYTE *)(v3 + 32);
              if (v32 > 63) {
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *int64_t v35 = -1LL << v32;
              }
              uint64_t v2 = v33;
              *(void *)(v3 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v35[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v7 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_44;
                }
                if (v7 >= v34) {
                  goto LABEL_38;
                }
                unint64_t v17 = v35[v7];
                ++v18;
                if (v17) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v7 = v18;
          }
        }

Swift::Int sub_10005A1B8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005104(&qword_1000B98E8);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    unint64_t v29 = v2;
    int64_t v7 = 0LL;
    uint64_t v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v28;
                }
                uint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

unint64_t sub_10005A460(Swift::UInt a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_10005A500(uint64_t result, uint64_t a2, int a3, unint64_t a4, char a5)
{
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0) {
    goto LABEL_53;
  }
  uint64_t v12 = v10 + 1;
  if ((a5 & 1) != 0)
  {
    sub_100059B40(v12);
  }

  else
  {
    if (v11 > v10)
    {
      unint64_t result = (uint64_t)sub_10005AB00();
      goto LABEL_53;
    }

    sub_10005AFEC(v12);
  }

  uint64_t v13 = *v5;
  Hasher.init(_seed:)(v37, *(void *)(*v5 + 40));
  int v14 = a3 >> 6;
  if (a3 >> 6)
  {
    if (v14 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Character.hash(into:)(v37, v9, a2);
      Hasher._combine(_:)(a3 & 1);
    }

    else
    {
      else {
        Swift::UInt v15 = 0LL;
      }
      Hasher._combine(_:)(v15);
    }
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v37, v9, a2);
    Hasher._combine(_:)(a3 & 1);
    sub_10003F434(v9, a2, a3);
  }

  unint64_t result = Hasher._finalize()();
  uint64_t v16 = -1LL << *(_BYTE *)(v13 + 32);
  a4 = result & ~v16;
  uint64_t v17 = v13 + 56;
  if (((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0)
  {
    uint64_t v18 = ~v16;
    uint64_t v19 = *(void *)(v13 + 48);
    BOOL v21 = v9 == 1 && a2 == 0;
    if (a3 == 128)
    {
      BOOL v22 = (a2 | v9) != 0;
    }

    else
    {
      BOOL v21 = 0;
      BOOL v22 = 1;
    }

    BOOL v23 = v14 == 2 && v21;
    char v24 = v14 != 2 || v22;
    char v34 = v24;
    BOOL v35 = v23;
    do
    {
      uint64_t v25 = v19 + 24 * a4;
      unint64_t result = *(void *)v25;
      uint64_t v26 = *(void *)(v25 + 8);
      unsigned int v27 = *(unsigned __int8 *)(v25 + 16);
      if (v27 >> 6)
      {
        if (v27 >> 6 != 1)
        {
          if (v26 | result || v27 != 128)
          {
            if (v35) {
              goto LABEL_52;
            }
          }

          else if ((v34 & 1) == 0)
          {
            goto LABEL_52;
          }

          goto LABEL_35;
        }

        if (v14 != 1) {
          goto LABEL_35;
        }
      }

      else if (a3 >= 0x40u)
      {
        goto LABEL_35;
      }

      BOOL v28 = result == v9 && v26 == a2;
      if (v28 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v26, v9, a2, 0LL), (result & 1) != 0))
      {
        if (((a3 ^ v27) & 1) == 0)
        {
LABEL_52:
          unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NameSpecification.Element);
          __break(1u);
          break;
        }
      }

LABEL_53:
  uint64_t v29 = *v36;
  *(void *)(*v36 + 8 * (a4 >> 6) + 56) |= 1LL << a4;
  uint64_t v30 = *(void *)(v29 + 48) + 24 * a4;
  *(void *)uint64_t v30 = v9;
  *(void *)(v30 + 8) = a2;
  *(_BYTE *)(v30 + 16) = a3;
  uint64_t v31 = *(void *)(v29 + 16);
  BOOL v32 = __OFADD__(v31, 1LL);
  uint64_t v33 = v31 + 1;
  if (v32) {
    __break(1u);
  }
  else {
    *(void *)(v29 + 16) = v33;
  }
  return result;
}

      a1 = v93;
      uint64_t v5 = v97;
      uint64_t v26 = v7 + 1;
      goto LABEL_54;
    }

uint64_t sub_10005A7D4(uint64_t result, Swift::UInt a2, __int16 a3, unint64_t a4, char a5)
{
  char v7 = a3;
  Swift::UInt v9 = result;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_25;
  }
  uint64_t v13 = v11 + 1;
  if ((a5 & 1) != 0)
  {
    sub_100059EC8(v13);
  }

  else
  {
    if (v12 > v11)
    {
      unint64_t result = (uint64_t)sub_10005ACA8();
      goto LABEL_25;
    }

    sub_10005B338(v13);
  }

  uint64_t v14 = *v5;
  Hasher.init(_seed:)(v24, *(void *)(*v5 + 40));
  if ((a3 & 0x100) != 0 || (Hasher._combine(_:)(1uLL), Hasher._combine(_:)(v9), (a3 & 1) != 0))
  {
    Swift::UInt v15 = 0LL;
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v15 = a2;
  }

  Hasher._combine(_:)(v15);
  unint64_t result = Hasher._finalize()();
  uint64_t v16 = -1LL << *(_BYTE *)(v14 + 32);
  a4 = result & ~v16;
  if (((*(void *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    do
    {
      uint64_t v18 = *(void *)(v14 + 48) + 24 * a4;
      if ((*(_BYTE *)(v18 + 17) & 1) != 0)
      {
        if ((a3 & 0x100) != 0) {
          goto LABEL_24;
        }
      }

      else if ((a3 & 0x100) == 0 && *(void *)v18 == v9)
      {
        if ((*(_BYTE *)(v18 + 16) & 1) != 0)
        {
          if ((a3 & 1) != 0) {
            goto LABEL_24;
          }
        }

        else if ((a3 & 1) == 0 && *(void *)(v18 + 8) == a2)
        {
LABEL_24:
          unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for InputOrigin.Element);
          __break(1u);
          break;
        }
      }

      a4 = (a4 + 1) & v17;
    }

    while (((*(void *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0);
  }

uint64_t sub_10005A9B0(uint64_t result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10005A1B8(v8);
  }

  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_10005AE44();
      goto LABEL_14;
    }

    sub_10005B604(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v18, *(void *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  unint64_t result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t v13 = sub_100005104(&qword_1000B98E0);
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

void *sub_10005AB00()
{
  uint64_t v1 = v0;
  sub_100005104(qword_1000B9928);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_10005ACA8()
{
  uint64_t v1 = v0;
  sub_100005104(&qword_1000B98B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void *sub_10005AE44()
{
  uint64_t v1 = v0;
  sub_100005104(&qword_1000B98E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_10005AFEC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005104(qword_1000B9928);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_44:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  BOOL v32 = v2;
  uint64_t v33 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v34 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  Swift::Int result = swift_retain_n(v3, 2LL);
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v16 = v15 | (v12 << 6);
      goto LABEL_24;
    }

    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v17 >= v34) {
      goto LABEL_42;
    }
    unint64_t v18 = *(void *)(v33 + 8 * v17);
    ++v12;
    if (!v18)
    {
      int64_t v12 = v17 + 1;
      if (v17 + 1 >= v34) {
        goto LABEL_42;
      }
      unint64_t v18 = *(void *)(v33 + 8 * v12);
      if (!v18)
      {
        int64_t v19 = v17 + 2;
        if (v19 >= v34)
        {
LABEL_42:
          Swift::Int result = swift_release_n(v3, 3LL);
          uint64_t v2 = v32;
          goto LABEL_44;
        }

        unint64_t v18 = *(void *)(v33 + 8 * v19);
        int64_t v12 = v19;
        if (!v18) {
          break;
        }
      }
    }

LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_10005B338(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005104(&qword_1000B98B0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_40:
    *uint64_t v2 = v6;
    return result;
  }

  int64_t v7 = 0LL;
  BOOL v32 = v2;
  Swift::Int v33 = v3 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(v3 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  Swift::Int v11 = result + 56;
  while (v10)
  {
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v15 = v14 | (v7 << 6);
LABEL_25:
    uint64_t v19 = *(void *)(v3 + 48) + 24 * v15;
    Swift::UInt v20 = *(void *)v19;
    Swift::UInt v21 = *(void *)(v19 + 8);
    char v22 = *(_BYTE *)(v19 + 16);
    char v23 = *(_BYTE *)(v19 + 17);
    Hasher.init(_seed:)(v35, *(void *)(v6 + 40));
    if ((v23 & 1) != 0 || (Hasher._combine(_:)(1uLL), Hasher._combine(_:)(v20), (v22 & 1) != 0))
    {
      Swift::UInt v24 = 0LL;
    }

    else
    {
      Hasher._combine(_:)(1uLL);
      Swift::UInt v24 = v21;
    }

    Hasher._combine(_:)(v24);
    Swift::Int result = Hasher._finalize()();
    uint64_t v25 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }

      while (v31 == -1);
      unint64_t v12 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    uint64_t v13 = *(void *)(v6 + 48) + 24 * v12;
    *(void *)uint64_t v13 = v20;
    *(void *)(v13 + 8) = v21;
    *(_BYTE *)(v13 + 16) = v22;
    *(_BYTE *)(v13 + 1sub_1000062D8(v0 + 7) = v23;
    ++*(void *)(v6 + 16);
  }

  int64_t v16 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  if (v16 >= v34) {
    goto LABEL_38;
  }
  unint64_t v17 = *(void *)(v33 + 8 * v16);
  ++v7;
  if (v17) {
    goto LABEL_24;
  }
  int64_t v7 = v16 + 1;
  if (v16 + 1 >= v34) {
    goto LABEL_38;
  }
  unint64_t v17 = *(void *)(v33 + 8 * v7);
  if (v17)
  {
LABEL_24:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_25;
  }

  int64_t v18 = v16 + 2;
  if (v18 >= v34)
  {
LABEL_38:
    Swift::Int result = swift_release(v3);
    uint64_t v2 = v32;
    goto LABEL_40;
  }

  unint64_t v17 = *(void *)(v33 + 8 * v18);
  if (v17)
  {
    int64_t v7 = v18;
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v7 >= v34) {
      goto LABEL_38;
    }
    unint64_t v17 = *(void *)(v33 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_24;
    }
  }

LABEL_42:
  __break(1u);
  return result;
}

Swift::Int sub_10005B604(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005104(&qword_1000B98E8);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  char v28 = v2;
  int64_t v7 = 0LL;
  Swift::Int v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

char *sub_10005B884(uint64_t a1)
{
  return sub_100058320(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_10005B898(uint64_t a1)
{
  return sub_100058438(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_10005B8AC(uint64_t a1)
{
  return sub_100058204(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10005B8C0(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

void *sub_10005B928(void *a1)
{
  return sub_100058970(0LL, a1[2], 0, a1);
}

char *sub_10005B93C(uint64_t a1)
{
  return sub_100058AA4(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t *sub_10005B950( uint64_t *result, char *__dst, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v11 = result;
  if (!__dst) {
    goto LABEL_5;
  }
  if (!a3)
  {
    uint64_t v7 = a4;
    Swift::Int result = 0LL;
    goto LABEL_21;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    if (a5 == a4)
    {
LABEL_5:
      Swift::Int result = 0LL;
      uint64_t v7 = a4;
LABEL_21:
      *unint64_t v11 = a4;
      v11[1] = a5;
      void v11[2] = a6;
      void v11[3] = a7;
      v11[4] = v7;
      return result;
    }

    uint64_t v25 = a7;
    uint64_t v24 = a5 - a4;
    if (a5 <= a4)
    {
LABEL_18:
      __break(1u);
LABEL_19:
      sub_10002D724((uint64_t)result);
      a7 = v25;
      Swift::Int result = (uint64_t *)a3;
      goto LABEL_21;
    }

    int64_t v12 = __dst;
    uint64_t v13 = 0LL;
    uint64_t v14 = *(void *)(a6 + 16);
    if (v14 <= a4) {
      uint64_t v14 = a4;
    }
    uint64_t v27 = v14 - a4;
    uint64_t v15 = a3 - 1;
    unint64_t v16 = (_OWORD *)(a6 + 192 * a4 + 32);
    uint64_t v17 = a4 - a5 + 1;
    while ((a4 & 0x8000000000000000LL) == 0)
    {
      __int128 v18 = v16[9];
      v28[8] = v16[8];
      void v28[9] = v18;
      __int128 v19 = v16[11];
      v28[10] = v16[10];
      v28[11] = v19;
      __int128 v20 = v16[5];
      void v28[4] = v16[4];
      v28[5] = v20;
      __int128 v21 = v16[7];
      v28[6] = v16[6];
      v28[7] = v21;
      __int128 v22 = v16[1];
      v28[0] = *v16;
      v28[1] = v22;
      __int128 v23 = v16[3];
      _OWORD v28[2] = v16[2];
      v28[3] = v23;
      if (v27 == v13) {
        goto LABEL_24;
      }
      uint64_t v7 = a4 + v13 + 1;
      memmove(v12, v16, 0xC0uLL);
      Swift::Int result = (uint64_t *)v28;
      if (v15 == v13) {
        goto LABEL_19;
      }
      if (!(v17 + v13))
      {
        sub_10002D724((uint64_t)v28);
        uint64_t v7 = a5;
        Swift::Int result = (uint64_t *)v24;
        a7 = v25;
        goto LABEL_21;
      }

      Swift::Int result = (uint64_t *)sub_10002D724((uint64_t)v28);
      if (v7 >= a4)
      {
        v12 += 192;
        ++v13;
        v16 += 12;
        if (v7 < a5) {
          continue;
        }
      }

      goto LABEL_18;
    }

    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10005BAE4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_10005BB84(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1LL << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 24 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_10005BBF4()
{
  unint64_t result = qword_1000B9898;
  if (!qword_1000B9898)
  {
    unint64_t result = swift_getWitnessTable(&unk_100099334, &type metadata for SingleValueDecoder);
    atomic_store(result, (unint64_t *)&qword_1000B9898);
  }

  return result;
}

uint64_t sub_10005BC38()
{
  uint64_t v1 = v0[9];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[10]);
    if (v0[14]) {
      sub_1000062D8(v0 + 11);
    }
    swift_bridgeObjectRelease(v0[15]);
  }

  return swift_deallocObject(v0, 129LL, 7LL);
}

uint64_t sub_10005BCA8(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10005BCDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005104(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005BD20(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_10005BD5C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10005BD6C()
{
  unint64_t result = qword_1000B98B8;
  if (!qword_1000B98B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009A674, &type metadata for InternalParseError);
    atomic_store(result, (unint64_t *)&qword_1000B98B8);
  }

  return result;
}

void sub_10005BDB0()
{
}

uint64_t sub_10005BDF8(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (a3 >> 61) & 3;
  if ((_DWORD)v5 == 1) {
    return swift_bridgeObjectRetain(a2);
  }
  if (!(_DWORD)v5) {
    return sub_10005BE18(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t sub_10005BE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 0x8000000000000000LL) == 0) {
    return sub_100030508(a1, a2, a3);
  }
  sub_100030508(a1, a2, a3);
  return swift_bridgeObjectRetain(a5);
}

unint64_t sub_10005BE44()
{
  unint64_t result = qword_1000B98C0;
  if (!qword_1000B98C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009973C, &type metadata for SingleValueDecoder.SingleValueContainer);
    atomic_store(result, (unint64_t *)&qword_1000B98C0);
  }

  return result;
}

uint64_t sub_10005BE88()
{
  uint64_t v1 = v0[9];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[10]);
    if (v0[14]) {
      sub_1000062D8(v0 + 11);
    }
    swift_bridgeObjectRelease(v0[15]);
  }

  swift_bridgeObjectRelease(v0[17]);
  uint64_t v2 = v0[19];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v0[20]);
    if (v0[24]) {
      sub_1000062D8(v0 + 21);
    }
    swift_bridgeObjectRelease(v0[25]);
  }

  return swift_deallocObject(v0, 209LL, 7LL);
}

unint64_t sub_10005BF2C()
{
  unint64_t result = qword_1000B98D8;
  if (!qword_1000B98D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000995BC, &type metadata for SingleValueDecoder.UnkeyedContainer);
    atomic_store(result, (unint64_t *)&qword_1000B98D8);
  }

  return result;
}

uint64_t sub_10005BF70()
{
  if (v0[9]) {
    sub_1000062D8(v0 + 6);
  }
  swift_bridgeObjectRelease(v0[10]);
  sub_1000062D8(v0 + 12);
  return swift_deallocObject(v0, 136LL, 7LL);
}

uint64_t sub_10005BFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005104(&qword_1000B9148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_10005C00C(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  __int128 v3 = *(_OWORD *)((char *)a1 + 40);
  *(_OWORD *)((char *)a2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 1), (uint64_t)(a1 + 1));
  return a2;
}

uint64_t sub_10005C058(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SingleValueDecoder.UnkeyedContainer(void *a1)
{
  if (a1[7]) {
    sub_1000062D8(a1 + 4);
  }
  swift_bridgeObjectRelease(a1[8]);
  return sub_1000062D8(a1 + 10);
}

uint64_t initializeWithCopy for SingleValueDecoder.UnkeyedContainer(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  unint64_t v8 = a2 + 4;
  uint64_t v9 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v9)
  {
    *(void *)(a1 + 56) = v9;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v9 - 8))(a1 + 32, v8, v9);
  }

  else
  {
    __int128 v10 = v8[1];
    *(_OWORD *)(a1 + 3sub_1000062D8(v0 + 2) = *v8;
    *(_OWORD *)(a1 + 48) = v10;
  }

  uint64_t v11 = a2[8];
  *(void *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 7sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 72);
  int64_t v12 = a2 + 10;
  __int128 v13 = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(a1 + 104) = v13;
  uint64_t v14 = v13;
  uint64_t v15 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v13 - 8);
  swift_bridgeObjectRetain(v11);
  v15(a1 + 80, v12, v14);
  return a1;
}

uint64_t *assignWithCopy for SingleValueDecoder.UnkeyedContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  if (!a1[7])
  {
    if (v10)
    {
      a1[7] = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
      goto LABEL_8;
    }

__n128 initializeWithTake for ArgumentDefinition.Help(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 3sub_1000062D8(v0 + 2) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(void *)(a1 + 11sub_1000062D8(v0 + 2) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t *assignWithTake for SingleValueDecoder.UnkeyedContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v7);
  if (a1[7]) {
    sub_1000062D8(a1 + 4);
  }
  __int128 v8 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + sub_1000062D8(v0 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v8;
  uint64_t v9 = a1[8];
  a1[8] = a2[8];
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 7sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 72);
  sub_1000062D8(a1 + 10);
  __int128 v10 = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 6) = v10;
  a1[14] = a2[14];
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleValueDecoder.UnkeyedContainer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleValueDecoder.UnkeyedContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_1000062D8(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SingleValueDecoder.UnkeyedContainer()
{
  return &type metadata for SingleValueDecoder.UnkeyedContainer;
}

uint64_t *sub_10005C434(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_10005C460(void *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *sub_10005C468(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *sub_10005C4B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentSet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentSet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for ArrayWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037B54(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArrayWrapper);
}

uint64_t destroy for SingleValueDecoder.SingleValueContainer(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[8]);
    if (a1[12]) {
      sub_1000062D8(a1 + 9);
    }
    swift_bridgeObjectRelease(a1[13]);
  }

  swift_bridgeObjectRelease(a1[15]);
  uint64_t result = a1[17];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[18]);
    if (a1[22]) {
      sub_1000062D8(a1 + 19);
    }
    return swift_bridgeObjectRelease(a1[23]);
  }

  return result;
}

uint64_t initializeWithCopy for SingleValueDecoder.SingleValueContainer(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = v8;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v9;
  uint64_t v10 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  if (v10)
  {
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = a2[8];
    *(void *)(a1 + 64) = v11;
    uint64_t v12 = a2[12];
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
      *(void *)(a1 + 96) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8))(a1 + 72, (uint64_t)(a2 + 9), v12);
    }

    else
    {
      __int128 v15 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 7sub_1000062D8(v0 + 2) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = v15;
    }

    uint64_t v16 = a2[13];
    *(void *)(a1 + 104) = v16;
    *(_BYTE *)(a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    swift_bridgeObjectRetain(v16);
  }

  else
  {
    __int128 v13 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v13;
    *(_BYTE *)(a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    __int128 v14 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = v14;
  }

  uint64_t v17 = a2[15];
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v17;
  uint64_t v18 = a2[17];
  swift_bridgeObjectRetain(v17);
  if (v18)
  {
    *(void *)(a1 + 128) = a2[16];
    *(void *)(a1 + 136) = v18;
    uint64_t v19 = a2[18];
    *(void *)(a1 + 144) = v19;
    uint64_t v20 = a2[22];
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    if (v20)
    {
      *(void *)(a1 + 176) = v20;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v20 - 8))(a1 + 152, (uint64_t)(a2 + 19), v20);
    }

    else
    {
      __int128 v23 = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 15sub_1000062D8(v0 + 2) = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(a1 + 168) = v23;
    }

    uint64_t v24 = a2[23];
    *(void *)(a1 + 184) = v24;
    *(_BYTE *)(a1 + 19sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 192);
    swift_bridgeObjectRetain(v24);
  }

  else
  {
    __int128 v21 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v21;
    *(_BYTE *)(a1 + 19sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 192);
    __int128 v22 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v22;
  }

  return a1;
}

uint64_t *assignWithCopy for SingleValueDecoder.SingleValueContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[3] = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[5];
  uint64_t v13 = a1[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  __int128 v14 = a1 + 6;
  __int128 v15 = a2 + 6;
  uint64_t v16 = a1[7];
  uint64_t v17 = a2[7];
  if (v16)
  {
    if (!v17)
    {
      sub_10003D920(a1 + 6);
      *__int128 v14 = *v15;
      __int128 v26 = *((_OWORD *)a2 + 5);
      __int128 v25 = *((_OWORD *)a2 + 6);
      __int128 v27 = *((_OWORD *)a2 + 4);
      *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
      *((_OWORD *)a1 + 5) = v26;
      *((_OWORD *)a1 + 6) = v25;
      *((_OWORD *)a1 + 4) = v27;
      goto LABEL_18;
    }

    a1[6] = a2[6];
    uint64_t v18 = a2[7];
    a1[7] = v18;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRelease(v16);
    uint64_t v19 = a2[8];
    uint64_t v20 = a1[8];
    a1[8] = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease(v20);
    uint64_t v21 = a2[12];
    if (a1[12])
    {
      if (v21)
      {
        sub_100052ED8(a1 + 9, a2 + 9);
LABEL_15:
        uint64_t v32 = a2[13];
        uint64_t v33 = a1[13];
        a1[13] = v32;
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRelease(v33);
        *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
        goto LABEL_18;
      }

      sub_1000062D8(a1 + 9);
    }

    else if (v21)
    {
      a1[12] = v21;
      (**(void (***)(uint64_t, uint64_t))(v21 - 8))((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
      goto LABEL_15;
    }

    __int128 v31 = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 11) = v31;
    goto LABEL_15;
  }

  if (v17)
  {
    a1[6] = a2[6];
    uint64_t v22 = a2[7];
    a1[7] = v22;
    uint64_t v23 = a2[8];
    a1[8] = v23;
    uint64_t v24 = a2[12];
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    if (v24)
    {
      a1[12] = v24;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v24 - 8))((uint64_t)(a1 + 9), (uint64_t)(a2 + 9), v24);
    }

    else
    {
      __int128 v34 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 11) = v34;
    }

    uint64_t v35 = a2[13];
    a1[13] = v35;
    *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    swift_bridgeObjectRetain(v35);
  }

  else
  {
    *__int128 v14 = *v15;
    __int128 v28 = *((_OWORD *)a2 + 4);
    __int128 v29 = *((_OWORD *)a2 + 5);
    __int128 v30 = *((_OWORD *)a2 + 6);
    *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    *((_OWORD *)a1 + 5) = v29;
    *((_OWORD *)a1 + 6) = v30;
    *((_OWORD *)a1 + 4) = v28;
  }

__n128 initializeWithTake for SingleValueDecoder.SingleValueContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 3sub_1000062D8(v0 + 2) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 11sub_1000062D8(v0 + 2) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v9 = *(_OWORD *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 19sub_1000062D8(v0 + 2) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t *assignWithTake for SingleValueDecoder.SingleValueContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_release(v5);
  uint64_t v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[7];
  if (!v10) {
    goto LABEL_7;
  }
  uint64_t v11 = a2[7];
  if (!v11)
  {
    sub_10003D920(a1 + 6);
LABEL_7:
    __int128 v15 = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 6) = v15;
    *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
    __int128 v16 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v16;
    goto LABEL_8;
  }

  a1[6] = a2[6];
  a1[7] = v11;
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = a1[8];
  a1[8] = a2[8];
  swift_bridgeObjectRelease(v12);
  if (a1[12]) {
    sub_1000062D8(a1 + 9);
  }
  __int128 v13 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 11) = v13;
  uint64_t v14 = a1[13];
  a1[13] = a2[13];
  swift_bridgeObjectRelease(v14);
  *((_BYTE *)a1 + 11sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 112);
LABEL_8:
  uint64_t v17 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a1[17];
  if (!v18)
  {
LABEL_14:
    __int128 v23 = *((_OWORD *)a2 + 11);
    *((_OWORD *)a1 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *((_OWORD *)a2 + 10);
    *((_OWORD *)a1 + 11) = v23;
    *((_BYTE *)a1 + 19sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 192);
    __int128 v24 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v24;
    return a1;
  }

  uint64_t v19 = a2[17];
  if (!v19)
  {
    sub_10003D920(a1 + 16);
    goto LABEL_14;
  }

  a1[16] = a2[16];
  a1[17] = v19;
  swift_bridgeObjectRelease(v18);
  uint64_t v20 = a1[18];
  a1[18] = a2[18];
  swift_bridgeObjectRelease(v20);
  if (a1[22]) {
    sub_1000062D8(a1 + 19);
  }
  __int128 v21 = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(a1 + 19) = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(a1 + 21) = v21;
  uint64_t v22 = a1[23];
  a1[23] = a2[23];
  swift_bridgeObjectRelease(v22);
  *((_BYTE *)a1 + 19sub_1000062D8(v0 + 2) = *((_BYTE *)a2 + 192);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleValueDecoder.SingleValueContainer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 193)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleValueDecoder.SingleValueContainer( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0LL;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_1000062D8(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_1000062D8(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 19sub_1000062D8(v0 + 2) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 193) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 193) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SingleValueDecoder.SingleValueContainer()
{
  return &type metadata for SingleValueDecoder.SingleValueContainer;
}

__n128 initializeWithCopy for ArgumentDecoder.Error(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ArgumentDecoder.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ArgumentDecoder.Error( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 3sub_1000062D8(v0 + 2) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 3sub_1000062D8(v0 + 2) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 2;
    }
  }

  return result;
}

uint64_t sub_10005CF3C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_10005CF54(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[2] = 0LL;
    result[3] = 0LL;
    result[1] = 0LL;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ArgumentDecoder.Error()
{
  return &type metadata for ArgumentDecoder.Error;
}

uint64_t sub_10005CF90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = (unsigned __int8 *)(a1 + 48);
  while (1)
  {
    unsigned __int8 v3 = *v2;
    if ((*v2 & 0xC0) != 0x40) {
      break;
    }
    v2 += 24;
    if (!--v1)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      unsigned __int8 v3 = *(_BYTE *)(a1 + 48);
      goto LABEL_8;
    }
  }

  uint64_t v4 = *((void *)v2 - 2);
  uint64_t v5 = *((void *)v2 - 1);
LABEL_8:
  sub_100030508(v4, v5, v3);
  return v4;
}

void *sub_10005D014@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10005D020(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *sub_10005D028@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_10005D03C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_10005D050@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10005D064(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_10005D094@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10005D0C0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_10005D0E4(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_10005D0F8(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_10005D10C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_10005D120@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10005D134(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_10005D148(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_10005D15C(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL sub_10005D170()
{
  return *v0 == 0LL;
}

uint64_t sub_10005D180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_10005D198(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_10005D1AC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10005D1BC(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_10005D1C8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10005D1DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1000602F4(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10005D218@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = (void *)*a1;
  if (*a1 >= 2uLL)
  {
    swift_bridgeObjectRetain(*a1);
    uint64_t v5 = v4[2];
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v4 + 4;
      while (*((unsigned __int8 *)v6 + 16) >> 6 == 1)
      {
        v6 += 3;
        if (!--v5)
        {
          unint64_t v7 = v4[4];
          uint64_t v8 = v4[5];
          sub_100030508(v7, v8, *((_BYTE *)v4 + 48));
          goto LABEL_11;
        }
      }

      unint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      swift_bridgeObjectRetain(v8);
LABEL_11:
      uint64_t v14 = v4;
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v5 = _swiftEmptyArrayStorage[2];
    if (v5) {
      goto LABEL_3;
    }
  }

  uint64_t result = swift_bridgeObjectRelease(v4);
  uint64_t v10 = (void *)a1[4];
  if (!v10[2])
  {
    uint64_t v8 = 0xE500000000000000LL;
    unint64_t v7 = 0x65756C6176LL;
    goto LABEL_13;
  }

  uint64_t v11 = v10[4];
  unint64_t v12 = v10[5];
  swift_bridgeObjectRetain(v12);
  unint64_t v7 = sub_10004E9B4(45LL, 0xE100000000000000LL, v11, v12);
  uint64_t v8 = v13;
  uint64_t v14 = (void *)v12;
LABEL_12:
  uint64_t result = swift_bridgeObjectRelease(v14);
LABEL_13:
  *a2 = v7;
  a2[1] = v8;
  return result;
}

unint64_t sub_10005D31C()
{
  uint64_t v1 = v63;
  if (!v63)
  {
    v53.n128_u64[0] = 60LL;
    v53.n128_u64[1] = 0xE100000000000000LL;
    Swift::String v3 = *(Swift::String *)(v0 + 88);
    __int128 v58 = *(_OWORD *)(v0 + 72);
    Swift::String v59 = v3;
    __int128 v60 = *(_OWORD *)(v0 + 104);
    uint64_t v61 = *(void *)(v0 + 120);
    __int128 v4 = *(_OWORD *)(v0 + 24);
    __int128 v54 = *(_OWORD *)(v0 + 8);
    __int128 v55 = v4;
    __int128 v5 = *(_OWORD *)(v0 + 56);
    __int128 v56 = *(_OWORD *)(v0 + 40);
    __int128 v57 = v5;
    Swift::String v64 = v59;
    uint64_t v6 = v59._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      Swift::String v52 = v59;
      swift_bridgeObjectRetain(v59._object);
    }

    else
    {
      swift_bridgeObjectRetain(v59._object);
      sub_10005D218((void *)v0, (unint64_t *)&v52);
      sub_100030564((uint64_t)&v64);
    }

    object = v52._object;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(object);
    v42._unint64_t countAndFlagsBits = 62LL;
    v42._object = (void *)0xE100000000000000LL;
    String.append(_:)(v42);
    return v53.n128_u64[0];
  }

  if (v63 == 1) {
    return 0LL;
  }
  sub_10002D868((__n128 *)(v0 + 152), &v53);
  sub_10002D868(&v53, (__n128 *)&v64);
  int64_t v7 = *(void *)(v1 + 16);
  if ((v65 & 1) == 0)
  {
    unint64_t countAndFlagsBits = _swiftEmptyArrayStorage;
    if (!v7)
    {
LABEL_37:
      *(void *)&__int128 v54 = countAndFlagsBits;
      uint64_t v39 = sub_100005104(&qword_1000B90C8);
      unint64_t v40 = sub_10005EC18();
      uint64_t v2 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v39, v40);
      swift_bridgeObjectRelease(countAndFlagsBits);
      return v2;
    }

    v52._unint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_10004FDF4(0LL, v7, 0);
    unint64_t countAndFlagsBits = _swiftEmptyArrayStorage;
    uint64_t v20 = (unsigned __int8 *)(v1 + 48);
    while (1)
    {
      uint64_t v22 = *((void *)v20 - 2);
      __int128 v21 = (void *)*((void *)v20 - 1);
      unsigned int v23 = *v20;
      if (!(v23 >> 6)) {
        break;
      }
      if (v23 >> 6 != 1)
      {
        *(void *)&__int128 v54 = 45LL;
        unint64_t v25 = 0xE100000000000000LL;
        goto LABEL_28;
      }

      *(void *)&__int128 v54 = 0LL;
      *((void *)&v54 + 1) = 0xE000000000000000LL;
      swift_bridgeObjectRetain(v21);
      v24._unint64_t countAndFlagsBits = 45LL;
      v24._object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      Character.write<A>(to:)( &v54,  v22,  v21,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
LABEL_29:
      sub_10002DA24(v22, (uint64_t)v21, v23);
      __int128 v27 = v54;
      v52._unint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
      unint64_t v29 = countAndFlagsBits[2];
      unint64_t v28 = countAndFlagsBits[3];
      if (v29 >= v28 >> 1)
      {
        sub_10004FDF4((char *)(v28 > 1), v29 + 1, 1);
        unint64_t countAndFlagsBits = (void *)v52._countAndFlagsBits;
      }

      v20 += 24;
      countAndFlagsBits[2] = v29 + 1;
      *(_OWORD *)&countAndFlagsBits[2 * v29 + 4] = v27;
      if (!--v7) {
        goto LABEL_37;
      }
    }

    *(void *)&__int128 v54 = 11565LL;
    unint64_t v25 = 0xE200000000000000LL;
LABEL_28:
    *((void *)&v54 + 1) = v25;
    swift_bridgeObjectRetain(v21);
    v26._unint64_t countAndFlagsBits = v22;
    v26._object = v21;
    String.append(_:)(v26);
    goto LABEL_29;
  }

  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v52._unint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_10004FDF4(0LL, v7, 0);
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v9 = (unsigned __int8 *)(v1 + 48);
    while (1)
    {
      uint64_t v11 = *((void *)v9 - 2);
      uint64_t v10 = (void *)*((void *)v9 - 1);
      unsigned int v12 = *v9;
      if (!(v12 >> 6)) {
        break;
      }
      if (v12 >> 6 != 1)
      {
        *(void *)&__int128 v54 = 45LL;
        unint64_t v14 = 0xE100000000000000LL;
        goto LABEL_16;
      }

      *(void *)&__int128 v54 = 0LL;
      *((void *)&v54 + 1) = 0xE000000000000000LL;
      swift_bridgeObjectRetain(v10);
      v13._unint64_t countAndFlagsBits = 45LL;
      v13._object = (void *)0xE100000000000000LL;
      String.append(_:)(v13);
      Character.write<A>(to:)( &v54,  v11,  v10,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
LABEL_17:
      sub_10002DA24(v11, (uint64_t)v10, v12);
      __int128 v16 = v54;
      v52._unint64_t countAndFlagsBits = (uint64_t)v8;
      unint64_t v18 = v8[2];
      unint64_t v17 = v8[3];
      if (v18 >= v17 >> 1)
      {
        sub_10004FDF4((char *)(v17 > 1), v18 + 1, 1);
        uint64_t v8 = (void *)v52._countAndFlagsBits;
      }

      v9 += 24;
      void v8[2] = v18 + 1;
      *(_OWORD *)&v8[2 * v18 + 4] = v16;
      if (!--v7) {
        goto LABEL_33;
      }
    }

    *(void *)&__int128 v54 = 11565LL;
    unint64_t v14 = 0xE200000000000000LL;
LABEL_16:
    *((void *)&v54 + 1) = v14;
    swift_bridgeObjectRetain(v10);
    v15._unint64_t countAndFlagsBits = v11;
    v15._object = v10;
    String.append(_:)(v15);
    goto LABEL_17;
  }

unint64_t sub_10005D840()
{
  return sub_10005D31C();
}

BOOL sub_10005D898()
{
  if (*v0 < 2uLL)
  {
    uint64_t v1 = (char *)_swiftEmptyArrayStorage;
    uint64_t v2 = _swiftEmptyArrayStorage[2];
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    BOOL v6 = 0LL;
    goto LABEL_12;
  }

  uint64_t v1 = (char *)swift_bridgeObjectRetain(*v0);
  uint64_t v2 = *((void *)v1 + 2);
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  Swift::String v3 = (unsigned __int8 *)(v1 + 48);
  uint64_t v4 = v2 - 1;
  do
  {
    int v5 = *v3;
    v3 += 24;
    BOOL v6 = (v5 & 0xFFFFFFC1) == 65;
  }

  while ((v5 & 0xFFFFFFC1) != 0x41 && v4-- != 0);
LABEL_12:
  swift_bridgeObjectRelease(v1);
  return v6;
}

uint64_t sub_10005D90C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = a7;
  unint64_t v16 = sub_10002EA1C();
  swift_allocError(&type metadata for ParserError, v16, 0LL, 0LL);
  *(void *)uint64_t v17 = a4;
  *(void *)(v17 + 8) = a5;
  *(void *)(v17 + 16) = a6;
  *(void *)(v17 + 24) = v15;
  *(void *)(v17 + 3sub_1000062D8(v0 + 2) = a8;
  *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = a9;
  *(void *)(v17 + 48) = a1;
  *(void *)(v17 + 56) = a2;
  *(void *)(v17 + 64) = a3;
  *(void *)(v17 + 7sub_1000062D8(v0 + 2) = 0LL;
  *(_BYTE *)(v17 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 12;
  swift_bridgeObjectRetain(a4);
  sub_10005EF34(a5, a6, a7);
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a2);
  uint64_t v18 = swift_bridgeObjectRetain(a3);
  return swift_willThrow(v18);
}

uint64_t sub_10005D9F0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v40 = a3;
  uint64_t v39 = a2;
  uint64_t v33 = a9;
  uint64_t v34 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, *(void *)(a12 + 8));
  uint64_t v14 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a12,  a11,  AssociatedTypeWitness,  &unk_10009F1E4,  &unk_10009F1F4);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  swift_bridgeObjectRetain(a10);
  v19(a8, a10, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  unsigned __int8 v21 = v38;
  uint64_t v22 = v38;
  unint64_t v23 = sub_10002EA1C();
  swift_allocError(&type metadata for ParserError, v23, 0LL, 0LL);
  uint64_t v25 = v35;
  uint64_t v24 = v36;
  *(void *)uint64_t v26 = v35;
  *(void *)(v26 + 8) = v24;
  uint64_t v27 = v37;
  *(void *)(v26 + 16) = v37;
  *(void *)(v26 + 24) = v22;
  *(void *)(v26 + 3sub_1000062D8(v0 + 2) = a8;
  *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = a10;
  uint64_t v28 = v39;
  *(void *)(v26 + 48) = v34;
  *(void *)(v26 + 56) = v28;
  uint64_t v29 = v40;
  *(void *)(v26 + 64) = v40;
  *(void *)(v26 + 7sub_1000062D8(v0 + 2) = 0LL;
  *(_BYTE *)(v26 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 12;
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(v25);
  sub_10005EF34(v24, v27, v21);
  swift_bridgeObjectRetain(v28);
  uint64_t v30 = swift_bridgeObjectRetain(v29);
  return swift_willThrow(v30);
}

uint64_t sub_10005DBD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t))
{
  uint64_t result = a10(a8, a9);
  if (v10)
  {
    unint64_t v19 = sub_10002EA1C();
    swift_allocError(&type metadata for ParserError, v19, 0LL, 0LL);
    *(void *)uint64_t v20 = a4;
    *(void *)(v20 + 8) = a5;
    *(void *)(v20 + 16) = a6;
    *(void *)(v20 + 24) = a7;
    *(void *)(v20 + 3sub_1000062D8(v0 + 2) = a8;
    *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = a9;
    *(void *)(v20 + 48) = a1;
    *(void *)(v20 + 56) = a2;
    *(void *)(v20 + 64) = a3;
    *(void *)(v20 + 7sub_1000062D8(v0 + 2) = v10;
    *(_BYTE *)(v20 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 12;
    swift_bridgeObjectRetain(a4);
    sub_10005EF34(a5, a6, a7);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a2);
    uint64_t v21 = swift_bridgeObjectRetain(a3);
    return swift_willThrow(v21);
  }

  return result;
}

uint64_t sub_10005DCDC( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v28 = a5;
  uint64_t v30 = a8;
  uint64_t v25 = a7;
  uint64_t v26 = a3;
  unsigned int v27 = a4;
  uint64_t v24 = a14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a14);
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v19 = (char *)&v22 - v18;
  uint64_t v20 = v29;
  uint64_t result = v30(a10, a11, a12, a1, a2, v26, v27, v28, a6);
  if (!v20)
  {
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 32))( v25,  v19,  a10,  a11,  a12,  a1,  a13);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v19, v23);
  }

  return result;
}

uint64_t sub_10005DE08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a5;
  uint64_t v24 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, a9);
  uint64_t v15 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v22 - v17;
  if (a3 == 1) {
    a1 = sub_10006D354((uint64_t)&off_1000AFEB0);
  }
  else {
    swift_bridgeObjectRetain(a1);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a4, v15);
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    __int128 v28 = 0u;
    __int128 v29 = 0u;
  }

  else
  {
    *((void *)&v29 + 1) = AssociatedTypeWitness;
    uint64_t v20 = sub_10000B40C(&v28);
    (*(void (**)(void *, char *, uint64_t))(v19 + 32))(v20, v18, AssociatedTypeWitness);
  }

  sub_10003D8D8((uint64_t)&v28, (uint64_t)v26);
  v25[0] = v23;
  v25[1] = a6;
  void v25[2] = a7;
  v26[4] = a1;
  char v27 = 1;
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a1);
  sub_10007029C(v25);
  sub_10003D920(v25);
  swift_bridgeObjectRelease(a1);
  return sub_10004E740((uint64_t)&v28, &qword_1000B9360);
}

uint64_t sub_10005DFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10005DFFC(a1, a2, a3, a4, a5, a6, *(void *)(a7 + 16));
}

uint64_t sub_10005DFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005E0D0(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t sub_10005DFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v18[3] = a7;
  Swift::String v13 = sub_10000B40C(v18);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16LL))(v13, a2, a7);
  sub_10003D8D8((uint64_t)v18, (uint64_t)v16);
  v15[0] = a3;
  v15[1] = a4;
  _OWORD v15[2] = a5;
  v16[4] = a6;
  char v17 = 1;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  sub_10007029C(v15);
  sub_10003D920(v15);
  return sub_10004E740((uint64_t)v18, &qword_1000B9360);
}

uint64_t sub_10005E0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional(0LL, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  __chkstk_darwin(v8);
  Swift::String v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, a2);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
  }

  return v14;
}

uint64_t sub_10005E204(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_100099854, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10005E230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = Array.init()(a7);
  _OWORD v15[2] = a7;
  uint64_t v15[3] = a2;
  sub_10006FB28(a3, a4, a5, a6, v13, (void (*)(uint64_t *))sub_10005EC64, (uint64_t)v15, a7);
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_10005E2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  return sub_10005E230(a1, a2, a3, a4, a5, a6, *(void *)(a7 + 16));
}

uint64_t sub_10005E2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    *(void *)&__int128 v21 = a1;
    uint64_t v6 = type metadata accessor for Array(0LL, a2);
    swift_bridgeObjectRetain(a1);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
    if ((Collection.isEmpty.getter(v6, WitnessTable) & 1) == 0)
    {
      *(void *)&__int128 v21 = a1;
      uint64_t v9 = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
      Sequence.lazy.getter(&v18, v6, v9);
      swift_bridgeObjectRelease(a1);
      uint64_t v20 = v18;
      uint64_t v10 = swift_allocObject(&unk_1000B24E8, 32LL, 7LL);
      *(void *)(v10 + 16) = a2;
      *(void *)(v10 + 24) = a3;
      uint64_t v11 = type metadata accessor for LazySequence(0LL, v6, v9);
      uint64_t v12 = swift_getWitnessTable(&protocol conformance descriptor for LazySequence<A>, v11);
      LazySequenceProtocol.map<A>(_:)(&v21, sub_10005EF00, v10, v11, &type metadata for String, v12);
      swift_release(v10);
      swift_bridgeObjectRelease(v20);
      uint64_t v13 = v22;
      uint64_t v17 = v21;
      __int128 v18 = v21;
      uint64_t v19 = v22;
      uint64_t v14 = type metadata accessor for LazyMapSequence(0LL, v6, &type metadata for String, v9);
      swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
      uint64_t v15 = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v14);
      uint64_t v8 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v14, v15);
      swift_release(v13);
      swift_bridgeObjectRelease(v17);
      return v8;
    }

    swift_bridgeObjectRelease(a1);
  }

  return 0LL;
}

uint64_t sub_10005E4A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10005E2D0(*a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t sub_10005E4B8(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_100099898, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for ArgumentDefinition(uint64_t a1)
{
  unint64_t v2 = *(void *)a1;
  if (v2 >= 2) {
    swift_bridgeObjectRelease(v2);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  swift_bridgeObjectRelease(*(void *)(a1 + 64));
  swift_bridgeObjectRelease(*(void *)(a1 + 80));
  swift_bridgeObjectRelease(*(void *)(a1 + 96));
  swift_bridgeObjectRelease(*(void *)(a1 + 120));
  sub_10002D9A0(*(void *)(a1 + 128), *(void *)(a1 + 136), *(_BYTE *)(a1 + 144));
  sub_10002D9E0(*(void *)(a1 + 152), *(void *)(a1 + 160));
  return swift_release(*(void *)(a1 + 184));
}

uint64_t initializeWithCopy for ArgumentDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if (*(void *)a2 >= 2uLL) {
    uint64_t v4 = swift_bridgeObjectRetain(v4);
  }
  *(void *)a1 = v4;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 7sub_1000062D8(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v9;
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 11sub_1000062D8(v0 + 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  uint64_t v13 = *(void *)(a2 + 136);
  char v18 = *(_BYTE *)(a2 + 144);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  sub_10002D820(v12, v13, v18);
  *(void *)(a1 + 128) = v12;
  *(void *)(a1 + 136) = v13;
  *(_BYTE *)(a1 + 144) = v18;
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  uint64_t v14 = *(void *)(a2 + 152);
  uint64_t v15 = *(void *)(a2 + 160);
  LOBYTE(v8) = *(_BYTE *)(a2 + 168);
  sub_10002D860(v14, v15);
  *(void *)(a1 + 15sub_1000062D8(v0 + 2) = v14;
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v15;
  *(_BYTE *)(a1 + 168) = v8;
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v16;
  swift_retain(v16);
  return a1;
}

uint64_t assignWithCopy for ArgumentDefinition(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)a2;
  if (v4 >= 2)
  {
    if (v5 >= 2)
    {
      *(void *)a1 = v5;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRelease(v4);
    }

    else
    {
      sub_10004E740(a1, &qword_1000B9A40);
      *(void *)a1 = *(void *)a2;
    }
  }

  else
  {
    *(void *)a1 = v5;
    if (v5 >= 2) {
      swift_bridgeObjectRetain(v5);
    }
  }

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 7sub_1000062D8(v0 + 2) = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a1 + 80);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 11sub_1000062D8(v0 + 2) = *(void *)(a2 + 112);
  uint64_t v18 = *(void *)(a2 + 120);
  uint64_t v19 = *(void *)(a1 + 120);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  char v22 = *(_BYTE *)(a2 + 144);
  sub_10002D820(v20, v21, v22);
  uint64_t v23 = *(void *)(a1 + 128);
  uint64_t v24 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  char v25 = *(_BYTE *)(a1 + 144);
  *(_BYTE *)(a1 + 144) = v22;
  sub_10002D9A0(v23, v24, v25);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  uint64_t v26 = *(void *)(a2 + 152);
  uint64_t v27 = *(void *)(a2 + 160);
  char v28 = *(_BYTE *)(a2 + 168);
  sub_10002D860(v26, v27);
  uint64_t v29 = *(void *)(a1 + 152);
  uint64_t v30 = *(void *)(a1 + 160);
  *(void *)(a1 + 15sub_1000062D8(v0 + 2) = v26;
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v27;
  *(_BYTE *)(a1 + 168) = v28;
  sub_10002D9E0(v29, v30);
  uint64_t v32 = *(void *)(a2 + 176);
  uint64_t v31 = *(void *)(a2 + 184);
  uint64_t v33 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = v32;
  *(void *)(a1 + 184) = v31;
  swift_retain(v31);
  swift_release(v33);
  return a1;
}

__n128 initializeWithTake for ArgumentDefinition(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 3sub_1000062D8(v0 + 2) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 11sub_1000062D8(v0 + 2) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v6;
  __n128 result = (__n128)a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[11];
  *(_OWORD *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for ArgumentDefinition(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)a2;
  if (v4 >= 2)
  {
    if (v5 >= 2)
    {
      *(void *)a1 = v5;
      swift_bridgeObjectRelease(v4);
      goto LABEL_6;
    }

    sub_10004E740(a1, &qword_1000B9A40);
  }

  *(void *)a1 = v5;
LABEL_6:
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = *(void *)(a1 + 80);
  *(void *)(a1 + 7sub_1000062D8(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  uint64_t v15 = *(void *)(a2 + 120);
  uint64_t v16 = *(void *)(a1 + 120);
  *(void *)(a1 + 11sub_1000062D8(v0 + 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v15;
  swift_bridgeObjectRelease(v16);
  char v17 = *(_BYTE *)(a2 + 144);
  uint64_t v18 = *(void *)(a1 + 128);
  uint64_t v19 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  char v20 = *(_BYTE *)(a1 + 144);
  *(_BYTE *)(a1 + 144) = v17;
  sub_10002D9A0(v18, v19, v20);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  char v21 = *(_BYTE *)(a2 + 168);
  uint64_t v22 = *(void *)(a1 + 152);
  uint64_t v23 = *(void *)(a1 + 160);
  *(_OWORD *)(a1 + 15sub_1000062D8(v0 + 2) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = v21;
  sub_10002D9E0(v22, v23);
  uint64_t v24 = *(void *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_release(v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentDefinition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_1000062D8(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0LL;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_1000062D8(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_1000062D8(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 19sub_1000062D8(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 3sub_1000062D8(v0 + 2) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 19sub_1000062D8(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ArgumentDefinition()
{
  return &type metadata for ArgumentDefinition;
}

uint64_t storeEnumTagSinglePayload for ArgumentDefinition.ParsingStrategy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10005EB14 + 4 * byte_10009984D[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10005EB48 + 4 * byte_100099848[v4]))();
}

uint64_t sub_10005EB48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005EB50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10005EB58LL);
  }
  return result;
}

uint64_t sub_10005EB64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005EB6CLL);
  }
  *(_BYTE *)__n128 result = a2 + 6;
  return result;
}

uint64_t sub_10005EB70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005EB78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArgumentDefinition.ParsingStrategy()
{
  return &type metadata for ArgumentDefinition.ParsingStrategy;
}

unint64_t sub_10005EB98()
{
  unint64_t result = qword_1000B9A48;
  if (!qword_1000B9A48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000999D4, &type metadata for ArgumentDefinition.ParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_1000B9A48);
  }

  return result;
}

uint64_t sub_10005EBDC(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&unk_100099A24, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_10005EC08(void *a1, void *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t sub_10005EC18()
{
  unint64_t result = qword_1000B90D0;
  if (!qword_1000B90D0)
  {
    uint64_t v1 = sub_10000593C(&qword_1000B90C8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000B90D0);
  }

  return result;
}

uint64_t sub_10005EC64(uint64_t a1)
{
  return sub_10003C5DC(a1, *(void *)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_10005EC6C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v16 = v32;
  uint64_t v28 = v33;
  unint64_t v17 = v34;
  *(void *)&void v29[4] = v35;
  unint64_t v18 = v36;
  v29[0] = v37;
  uint64_t v19 = sub_100005104(&qword_1000B9600);
  uint64_t v20 = swift_allocObject(v19, 56LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_100096510;
  *(void *)(v20 + 3sub_1000062D8(v0 + 2) = a6;
  *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = a7;
  *(void *)(v20 + 48) = a8;
  sub_1000367F0(a3, (uint64_t)&v43);
  unint64_t v21 = v44;
  if (v44)
  {
    uint64_t v22 = v43;
    if (v18)
    {
      swift_bridgeObjectRetain(a5);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain_n(v21, 2LL);
      swift_bridgeObjectRetain_n(v17, 2LL);
      swift_bridgeObjectRetain_n(v18, 2LL);
      unint64_t v23 = v18;
      unint64_t v24 = v17;
      goto LABEL_8;
    }

    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v17);
    unint64_t v24 = v17;
  }

  else
  {
    uint64_t v28 = 0LL;
    uint64_t v22 = 0LL;
    unint64_t v24 = 0xE000000000000000LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(0LL);
  sub_1000367F0(a3, (uint64_t)v38);
  uint64_t v16 = v39;
  if (!v39)
  {
    v29[0] = 0;
    *(void *)&void v29[4] = 0LL;
    unint64_t v23 = 0xE000000000000000LL;
    goto LABEL_10;
  }

  *(_DWORD *)&v29[8] = 0;
  unint64_t v17 = v40;
  unint64_t v18 = v41;
  unint64_t v23 = 0xE000000000000000LL;
  *(void *)uint64_t v29 = v42;
LABEL_8:
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v16);
LABEL_10:
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease_n(a1, 2LL);
  swift_bridgeObjectRelease_n(a5, 2LL);
  swift_bridgeObjectRelease_n(v20, 2LL);
  swift_bridgeObjectRelease_n(v21, 2LL);
  uint64_t result = swift_bridgeObjectRelease_n(v24, 2LL);
  *(void *)a9 = a2;
  *(void *)(a9 + 8) = a4;
  *(void *)(a9 + 16) = a5;
  *(void *)(a9 + 24) = v20;
  *(void *)(a9 + 3sub_1000062D8(v0 + 2) = a1;
  *(_BYTE *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = a10 & 1;
  *(void *)(a9 + 48) = v22;
  *(void *)(a9 + 56) = v21;
  *(void *)(a9 + 64) = v28;
  *(void *)(a9 + 7sub_1000062D8(v0 + 2) = v24;
  *(void *)(a9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *(void *)&v29[4];
  *(void *)(a9 + 88) = v23;
  *(_BYTE *)(a9 + 96) = v29[0];
  *(void *)(a9 + 104) = 0LL;
  *(void *)(a9 + 11sub_1000062D8(v0 + 2) = 0xE000000000000000LL;
  return result;
}

uint64_t sub_10005EEF0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10005EF00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 24) + 16LL))(*(void *)(v1 + 16));
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005EF34(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFDu) {
    return sub_100030508(a1, a2, a3);
  }
  return a1;
}

double sub_10005EF48@<D0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, uint64_t a18)
{
  *(void *)&__int128 v68 = a7;
  *(void *)&__int128 v67 = a6;
  uint64_t v66 = a5;
  unint64_t v75 = a4;
  uint64_t v77 = a1;
  int v76 = a10;
  *(void *)&__int128 v74 = a12;
  uint64_t v73 = a11;
  uint64_t v72 = a15;
  int v70 = a16;
  uint64_t v65 = a9;
  uint64_t v71 = a14;
  uint64_t v57 = a13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, a18);
  uint64_t v69 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v22 = *(void *)(v69 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  __chkstk_darwin(v69);
  __int128 v58 = (char *)&v54 - v24;
  char v25 = *(uint64_t (**)(uint64_t, uint64_t))(a18 + 24);
  uint64_t v55 = a18;
  uint64_t v26 = v25(a17, a18);
  uint64_t v27 = v26 | ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48LL))( a13,  1LL,  AssociatedTypeWitness) != 1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  uint64_t v28 = v27;
  uint64_t v29 = v77;
  uint64_t v30 = a2;
  uint64_t v31 = a2;
  uint64_t v56 = a2;
  uint64_t v32 = a3;
  sub_10005EC6C(v66, v28, v67, v68, v65, v77, v30, a3, (uint64_t)&v84, 0);
  __int128 v60 = v84;
  uint64_t v59 = v85;
  int v61 = v87;
  __int128 v68 = v88;
  __int128 v67 = v89;
  uint64_t v66 = v90;
  uint64_t v65 = v91;
  int v64 = v92;
  uint64_t v33 = v71;
  if (v70 == 255) {
    uint64_t v33 = 0LL;
  }
  uint64_t v71 = v33;
  uint64_t v34 = v72;
  if (v70 == 255) {
    uint64_t v34 = 0LL;
  }
  uint64_t v72 = v34;
  if (v70 == 255) {
    int v35 = 4;
  }
  else {
    int v35 = v70;
  }
  int v70 = v35;
  uint64_t v62 = v93;
  uint64_t v63 = v94;
  unint64_t v36 = (void *)swift_allocObject(&unk_1000B2538, 72LL, 7LL);
  v36[2] = a17;
  _OWORD v36[3] = a18;
  uint64_t v37 = v74;
  v36[4] = v73;
  v36[5] = v37;
  v36[6] = v29;
  v36[7] = v31;
  v36[8] = a3;
  uint64_t v38 = v22;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  __int128 v74 = v86;
  unint64_t v40 = v58;
  uint64_t v41 = v69;
  v39(v58, v57, v69);
  uint64_t v42 = *(unsigned __int8 *)(v38 + 80);
  uint64_t v43 = (v42 + 40) & ~v42;
  unint64_t v44 = (v23 + v43 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v45 = (char *)swift_allocObject(&unk_1000B2560, v44 + 24, v42 | 7);
  uint64_t v46 = v55;
  *((void *)v45 + sub_1000062D8(v0 + 2) = a17;
  *((void *)v45 + 3) = v46;
  unint64_t v47 = v75;
  *((void *)v45 + 4) = v75;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v45[v43], v40, v41);
  uint64_t v48 = &v45[v44];
  uint64_t v49 = v56;
  *(void *)uint64_t v48 = v77;
  *((void *)v48 + 1) = v49;
  *((void *)v48 + sub_1000062D8(v0 + 2) = v32;
  char v79 = 1;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v32);
  sub_10002D810(v47);
  *(void *)a8 = v47;
  *(_OWORD *)(a8 + 8) = v60;
  *(void *)(a8 + 24) = v59;
  *(_OWORD *)(a8 + 3sub_1000062D8(v0 + 2) = v74;
  *(_BYTE *)(a8 + 48) = v61;
  *(_DWORD *)(a8 + 49) = *(_DWORD *)v83;
  *(_DWORD *)(a8 + 5sub_1000062D8(v0 + 2) = *(_DWORD *)&v83[3];
  *(_OWORD *)(a8 + 56) = v68;
  double result = *(double *)&v67;
  *(_OWORD *)(a8 + 7sub_1000062D8(v0 + 2) = v67;
  uint64_t v51 = v65;
  *(void *)(a8 + 88) = v66;
  *(void *)(a8 + 96) = v51;
  *(_BYTE *)(a8 + 104) = v64;
  *(_DWORD *)(a8 + 108) = *(_DWORD *)&v82[3];
  *(_DWORD *)(a8 + 105) = *(_DWORD *)v82;
  uint64_t v52 = v63;
  *(void *)(a8 + 11sub_1000062D8(v0 + 2) = v62;
  *(void *)(a8 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v52;
  uint64_t v53 = v72;
  *(void *)(a8 + 128) = v71;
  *(void *)(a8 + 136) = v53;
  *(_BYTE *)(a8 + 144) = v70;
  *(_BYTE *)(a8 + 145) = v76;
  *(_DWORD *)(a8 + 146) = v80;
  *(_WORD *)(a8 + 15_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v81;
  *(void *)(a8 + 15sub_1000062D8(v0 + 2) = sub_10005F878;
  *(void *)(a8 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = v36;
  *(_BYTE *)(a8 + 168) = v79;
  *(_DWORD *)(a8 + 169) = *(_DWORD *)v78;
  *(_DWORD *)(a8 + 17sub_1000062D8(v0 + 2) = *(_DWORD *)&v78[3];
  *(void *)(a8 + 176) = sub_10005F990;
  *(void *)(a8 + 184) = v45;
  return result;
}

double sub_10005F3F0@<D0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X7>, _OWORD *a8@<X8>, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  int v45 = a6;
  uint64_t v47 = a5;
  unint64_t v46 = a4;
  uint64_t v44 = a3;
  uint64_t v43 = a2;
  uint64_t v42 = a1;
  int v40 = a11;
  uint64_t v15 = *(void *)(a13 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, v15);
  uint64_t v37 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v41 = v15;
  uint64_t v20 = swift_getAssociatedTypeWitness(0LL, v15);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a13, a12, v20, &unk_10009F1E4, &unk_10009F1F4);
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))( v20,  AssociatedConformanceWitness);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a13 + 24))(a7, a12, a13);
  uint64_t v38 = v23;
  uint64_t v24 = swift_allocObject(&unk_1000B2588, 32LL, 7LL);
  *(void *)(v24 + 16) = a12;
  *(void *)(v24 + 24) = a13;
  uint64_t v25 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a7, v37);
  unsigned __int8 v26 = v40;
  if (v40 == 255) {
    a9 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( v20,  AssociatedConformanceWitness);
  }
  else {
    uint64_t v28 = a10;
  }
  double v29 = sub_10005EF48( v42,  v43,  v44,  v46,  v39,  v47,  v22,  (uint64_t)v48,  v38,  v45,  (uint64_t)sub_10005FA58,  v24,  (uint64_t)v19,  a9,  v28,  v26,  a12,  v41);
  (*(void (**)(char *, uint64_t, double))(v17 + 8))(v19, v25, v29);
  __int128 v30 = v56;
  a8[8] = v55;
  a8[9] = v30;
  __int128 v31 = v58;
  a8[10] = v57;
  a8[11] = v31;
  __int128 v32 = v52;
  a8[4] = v51;
  a8[5] = v32;
  __int128 v33 = v54;
  a8[6] = v53;
  a8[7] = v33;
  __int128 v34 = v48[1];
  *a8 = v48[0];
  a8[1] = v34;
  double result = *(double *)&v49;
  __int128 v36 = v50;
  a8[2] = v49;
  a8[3] = v36;
  return result;
}

double sub_10005F6B8@<D0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unsigned __int8 a6@<W6>, uint64_t a7@<X7>, _OWORD *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20 = (void *)swift_allocObject(&unk_1000B2510, 48LL, 7LL);
  void v20[2] = a14;
  v20[3] = a15;
  v20[4] = a7;
  v20[5] = a9;
  sub_10005EF48( a1,  a2,  a3,  a4,  (uint64_t)_swiftEmptyArrayStorage,  a5,  0LL,  (uint64_t)v31,  0LL,  a6,  (uint64_t)sub_10005F810,  (uint64_t)v20,  a10,  a11,  a12,  a13,  a14,  a15);
  __int128 v21 = v39;
  a8[8] = v38;
  a8[9] = v21;
  __int128 v22 = v41;
  a8[10] = v40;
  a8[11] = v22;
  __int128 v23 = v35;
  a8[4] = v34;
  a8[5] = v23;
  __int128 v24 = v37;
  a8[6] = v36;
  a8[7] = v24;
  __int128 v25 = v31[1];
  *a8 = v31[0];
  a8[1] = v25;
  double result = *(double *)&v32;
  __int128 v27 = v33;
  a8[2] = v32;
  a8[3] = v27;
  return result;
}

uint64_t sub_10005F7EC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10005F810( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9)
{
  return sub_10005DBD4(a1, a2, a3, a4, a5, a6, a7, a8, a9, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 32));
}

uint64_t sub_10005F844()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10005F878( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10005DCDC( a1,  a2,  a3,  a4,  a5,  a6,  a7,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v7 + 32),  *(void *)(v7 + 40),  *(void *)(v7 + 48),  *(void *)(v7 + 56),  *(void *)(v7 + 64),  *(void *)(v7 + 16),  *(void *)(v7 + 24));
}

uint64_t sub_10005F8AC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, *(void *)(v0 + 24));
  uint64_t v2 = *(void *)(type metadata accessor for Optional(0LL, AssociatedTypeWitness) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  unint64_t v6 = *(void *)(v0 + 32);
  if (v6 >= 2) {
    swift_bridgeObjectRelease(v6);
  }
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v8 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = v8 + 24;
  uint64_t v10 = v3 | 7;
  uint64_t v11 = v0 + v8;
  swift_bridgeObjectRelease(*(void *)(v0 + v8 + 8));
  swift_bridgeObjectRelease(*(void *)(v11 + 16));
  return swift_deallocObject(v0, v9, v10);
}

uint64_t sub_10005F990(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, v6);
  uint64_t v8 = *(void *)(type metadata accessor for Optional(0LL, AssociatedTypeWitness) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (void *)((char *)v2 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_10005DE08(a1, a2, v2[4], (uint64_t)v2 + v9, *v10, v10[1], v10[2], v5, v6);
}

uint64_t sub_10005FA48()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10005FA58@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  return sub_10005D9F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, *(void *)(v10 + 16), *(void *)(v10 + 24));
}

uint64_t sub_10005FA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8LL);
}

uint64_t type metadata accessor for Bare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037B54(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Bare);
}

uint64_t destroy for ArgumentDefinition.Update(uint64_t *a1)
{
  return sub_10002D9E0(*a1, a1[1]);
}

uint64_t _s14ArgumentParser18ArgumentDefinitionV6UpdateOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10002D860(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ArgumentDefinition.Update(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10002D860(*(void *)a2, v4);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10002D9E0(v6, v7);
  return a1;
}

uint64_t assignWithTake for ArgumentDefinition.Update(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10002D9E0(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentDefinition.Update(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentDefinition.Update( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)double result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1sub_1000062D8(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1sub_1000062D8(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10005FC18(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ArgumentDefinition.Update()
{
  return &type metadata for ArgumentDefinition.Update;
}

uint64_t destroy for ArgumentDefinition.Help(void *a1)
{
  return swift_bridgeObjectRelease(a1[14]);
}

uint64_t initializeWithCopy for ArgumentDefinition.Help(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = v5;
  *(_BYTE *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *(_BYTE *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_1000062D8(v0 + 2) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11sub_1000062D8(v0 + 2) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for ArgumentDefinition.Help(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_1000062D8(v0 + 2) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a1 + 112);
  *(void *)(a1 + 11sub_1000062D8(v0 + 2) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t assignWithTake for ArgumentDefinition.Help(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_1000062D8(v0 + 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *(_BYTE *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_1000062D8(v0 + 2) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a1 + 88);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 112);
  uint64_t v13 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11sub_1000062D8(v0 + 2) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentDefinition.Help(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_1000062D8(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArgumentDefinition.Help(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_1000062D8(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ArgumentDefinition.Help()
{
  return &type metadata for ArgumentDefinition.Help;
}

uint64_t *initializeBufferWithCopyOfBuffer for ArgumentDefinition.Kind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

unint64_t destroy for ArgumentDefinition.Kind(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

unint64_t *assignWithCopy for ArgumentDefinition.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain(v4);
    }
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
    *a1 = *a2;
  }

  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(v3);
  }

  return a1;
}

void *initializeWithTake for ArgumentDefinition.Kind(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for ArgumentDefinition.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArgumentDefinition.Kind(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ArgumentDefinition.Kind( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

void *sub_100060194(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ArgumentDefinition.Kind()
{
  return &type metadata for ArgumentDefinition.Kind;
}

ValueMetadata *type metadata accessor for ArgumentDefinition.Help.Options()
{
  return &type metadata for ArgumentDefinition.Help.Options;
}

unint64_t sub_1000601D8()
{
  unint64_t result = qword_1000B9B18;
  if (!qword_1000B9B18)
  {
    unint64_t result = swift_getWitnessTable(&unk_100099ACC, &type metadata for ArgumentDefinition.Help.Options);
    atomic_store(result, (unint64_t *)&qword_1000B9B18);
  }

  return result;
}

unint64_t sub_100060220()
{
  unint64_t result = qword_1000B9B20;
  if (!qword_1000B9B20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100099A9C, &type metadata for ArgumentDefinition.Help.Options);
    atomic_store(result, (unint64_t *)&qword_1000B9B20);
  }

  return result;
}

unint64_t sub_100060268()
{
  unint64_t result = qword_1000B9B28;
  if (!qword_1000B9B28)
  {
    unint64_t result = swift_getWitnessTable(&unk_100099AF4, &type metadata for ArgumentDefinition.Help.Options);
    atomic_store(result, (unint64_t *)&qword_1000B9B28);
  }

  return result;
}

unint64_t sub_1000602B0()
{
  unint64_t result = qword_1000B9B30;
  if (!qword_1000B9B30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100099B2C, &type metadata for ArgumentDefinition.Help.Options);
    atomic_store(result, (unint64_t *)&qword_1000B9B30);
  }

  return result;
}

uint64_t sub_1000602F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  unsigned int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_100060340()
{
  return sub_1000062F8( &qword_1000B9B38,  &qword_1000B9B40,  (uint64_t)&protocol conformance descriptor for IndexingIterator<A>);
}

uint64_t sub_10006036C( uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, __int128 *a6, char a7, char a8)
{
  if ((a7 & 1) == 0)
  {
LABEL_6:
    *((void *)&v35 + 1) = &type metadata for Bool;
    LOBYTE(v34) = a4 & 1;
    sub_10003D8D8((uint64_t)&v34, (uint64_t)&v40 + 8);
    *(void *)&__int128 v39 = a1;
    *((void *)&v39 + 1) = a2;
    *(void *)&__int128 v40 = a3;
    *((void *)&v42 + 1) = a5;
    char v43 = 1;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    sub_10007029C((uint64_t *)&v39);
    sub_10003D920(&v39);
    uint64_t v15 = &qword_1000B9360;
LABEL_7:
    uint64_t v16 = &v34;
    goto LABEL_8;
  }

  if (a8)
  {
    if (a8 == 1)
    {
      __int128 v14 = a6[1];
      __int128 v44 = *a6;
      __int128 v45 = v14;
      uint64_t v46 = *((void *)a6 + 4);
      sub_10006FD1C(a1, a2, a3, (uint64_t)&v34);
      if (*((void *)&v34 + 1))
      {
        __int128 v40 = v35;
        __int128 v41 = v36;
        __int128 v42 = v37;
        char v43 = v38;
        __int128 v39 = v34;
      }

      else
      {
        BYTE8(v4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = a4 & 1;
        *(void *)&__int128 v39 = a1;
        *((void *)&v39 + 1) = a2;
        *(void *)&__int128 v40 = a3;
        *(void *)&__int128 v42 = &type metadata for Bool;
        *((void *)&v42 + 1) = &_swiftEmptySetSingleton;
        char v43 = 1;
        swift_bridgeObjectRetain(a2);
        swift_bridgeObjectRetain(a3);
        sub_10004E740((uint64_t)&v34, &qword_1000B9888);
      }

      sub_10003D8D8((uint64_t)&v40 + 8, (uint64_t)v32);
      uint64_t v27 = sub_100005104(&qword_1000B9360);
      int v28 = swift_dynamicCast(&v31, v32, v27, &type metadata for Bool, 6LL);
      char v29 = v31;
      if (v31 == 2) {
        char v29 = a4;
      }
      if (!v28) {
        char v29 = a4;
      }
      __int128 v33 = &type metadata for Bool;
      v32[0] = v29 & 1;
      sub_1000671BC((uint64_t)v32, (uint64_t)&v40 + 8);
      uint64_t v30 = swift_bridgeObjectRetain(a5);
      sub_10005750C(v30);
      sub_10007029C((uint64_t *)&v39);
      goto LABEL_23;
    }

    goto LABEL_6;
  }

  uint64_t v18 = *(void *)a6;
  if (!*(void *)(*(void *)a6 + 16LL))
  {
    char v38 = 0;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    goto LABEL_26;
  }

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  unint64_t v19 = sub_100058C68(a1, a2, a3);
  if ((v20 & 1) == 0)
  {
    char v38 = 0;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a2);
    goto LABEL_26;
  }

  sub_10005BD20(*(void *)(v18 + 56) + 72 * v19, (uint64_t)&v34);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  if (!*((void *)&v34 + 1))
  {
LABEL_26:
    uint64_t v15 = &qword_1000B9888;
    goto LABEL_7;
  }

  __int128 v40 = v35;
  __int128 v41 = v36;
  __int128 v42 = v37;
  char v43 = v38;
  __int128 v39 = v34;
  sub_10003D8D8((uint64_t)&v40 + 8, (uint64_t)&v34);
  uint64_t v21 = sub_100005104(&qword_1000B9360);
  if (!swift_dynamicCast(v32, &v34, v21, &type metadata for Bool, 6LL)
    || v32[0] == 2
    || ((v32[0] ^ a4) & 1) != 0)
  {
    uint64_t v22 = *((void *)&v42 + 1);
    uint64_t v23 = *((void *)a6 + 1);
    unint64_t v24 = sub_10002EA1C();
    swift_allocError(&type metadata for ParserError, v24, 0LL, 0LL);
    *(void *)uint64_t v25 = v22;
    *(void *)(v25 + 8) = a5;
    *(void *)(v25 + 16) = v23;
    *(_OWORD *)(v25 + 24) = 0u;
    *(_OWORD *)(v25 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 0u;
    *(_OWORD *)(v25 + 56) = 0u;
    *(void *)(v25 + 7sub_1000062D8(v0 + 2) = 0LL;
    *(_BYTE *)(v25 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 10;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(v22);
    uint64_t v26 = swift_bridgeObjectRetain(v23);
    swift_willThrow(v26);
LABEL_23:
    sub_10003D920(&v39);
    return 1LL;
  }

  __int128 v33 = &type metadata for Bool;
  v32[0] = a4 & 1;
  sub_10003D8D8((uint64_t)v32, (uint64_t)&v35 + 8);
  *(void *)&__int128 v34 = a1;
  *((void *)&v34 + 1) = a2;
  *(void *)&__int128 v35 = a3;
  *((void *)&v37 + 1) = a5;
  char v38 = 1;
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10007029C((uint64_t *)&v34);
  sub_10003D920(&v34);
  sub_10003D920(&v39);
  uint64_t v15 = &qword_1000B9360;
  uint64_t v16 = (__int128 *)v32;
LABEL_8:
  sub_10004E740((uint64_t)v16, v15);
  return 1LL;
}

uint64_t sub_100060778( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, char a7, int a8, uint64_t a9, uint64_t a10)
{
  LODWORD(v86) = a8;
  uint64_t v98 = a6;
  uint64_t v87 = a1;
  uint64_t v15 = *(void **)(a9 - 8);
  __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Optional(255LL, a9);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v18, v18, 0LL, 0LL);
  uint64_t v20 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v21 = *(void *)(v18 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v24 = __chkstk_darwin(v23);
  if ((a7 & 1) == 0) {
    goto LABEL_5;
  }
  __int128 v84 = v17;
  uint64_t v85 = a3;
  if (!(_BYTE)v86)
  {
    uint64_t v35 = *v98;
    if (*(void *)(*v98 + 16LL))
    {
      uint64_t v77 = a10;
      __int16 v81 = v25;
      uint64_t v86 = v21;
      uint64_t v78 = v29;
      uint64_t v79 = v28;
      uint64_t v80 = v24;
      uint64_t v83 = (char *)&v73 - v26;
      uint64_t v82 = v27;
      swift_bridgeObjectRetain(a2);
      __int128 v36 = v85;
      swift_bridgeObjectRetain(v85);
      unint64_t v37 = sub_100058C68(v87, a2, v36);
      if ((v38 & 1) != 0)
      {
        sub_10005BD20(*(void *)(v35 + 56) + 72 * v37, (uint64_t)&v89);
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(a2);
        if (*((void *)&v89 + 1))
        {
          v95[1] = v91;
          __int128 v96 = v92;
          char v97 = v93;
          __int128 v94 = v89;
          v95[0] = v90;
          sub_10003D8D8((uint64_t)v95 + 8, (uint64_t)&v89);
          uint64_t v39 = sub_100005104(&qword_1000B9360);
          __int128 v40 = v83;
          int v41 = swift_dynamicCast(v83, &v89, v39, a9, 6LL);
          __int128 v42 = (void (*)(char *, void, uint64_t, uint64_t))v15[7];
          v42(v40, v41 ^ 1u, 1LL, a9);
          char v43 = (void (*)(void *, uint64_t, uint64_t))v15[2];
          __int128 v44 = v81;
          uint64_t v73 = a4;
          __int128 v74 = v43;
          v43(v81, a4, a9);
          v42(v44, 0LL, 1LL, a9);
          uint64_t v45 = v82;
          uint64_t v46 = v82 + *(int *)(v80 + 48);
          uint64_t v47 = *(void (**)(uint64_t, char *, uint64_t))(v86 + 16);
          v47(v82, v83, v18);
          uint64_t v76 = v46;
          uint64_t v48 = v46;
          __int128 v49 = v44;
          __int128 v50 = v44;
          __int128 v51 = (void (*)(uint64_t, uint64_t, uint64_t))v47;
          v47(v48, v50, v18);
          unint64_t v75 = v15;
          __int128 v52 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v15[6];
          if (v52(v45, 1LL, a9) == 1)
          {
            __int128 v53 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
            v53((uint64_t)v49, v18);
            BOOL v54 = v52(v76, 1LL, a9) == 1;
            uint64_t v55 = v82;
            if (!v54) {
              goto LABEL_21;
            }
            uint64_t v56 = a9;
            v53(v82, v18);
            v53((uint64_t)v83, v18);
          }

          else
          {
            __int128 v57 = v78;
            v51((uint64_t)v78, v82, v18);
            uint64_t v58 = v76;
            unsigned int v59 = v52(v76, 1LL, a9);
            __int128 v60 = v75;
            uint64_t v56 = a9;
            if (v59 == 1)
            {
              __int128 v53 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
              v53((uint64_t)v81, v18);
              ((void (*)(char *, uint64_t))v60[1])(v57, a9);
              uint64_t v55 = v82;
LABEL_21:
              (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v55, v80);
              v53((uint64_t)v83, v18);
LABEL_24:
              uint64_t v68 = *((void *)&v96 + 1);
              uint64_t v69 = v98[1];
              unint64_t v70 = sub_10002EA1C();
              swift_allocError(&type metadata for ParserError, v70, 0LL, 0LL);
              *(void *)uint64_t v71 = v68;
              *(void *)(v71 + 8) = a5;
              *(void *)(v71 + 16) = v69;
              *(_OWORD *)(v71 + 24) = 0u;
              *(_OWORD *)(v71 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 0u;
              *(_OWORD *)(v71 + 56) = 0u;
              *(void *)(v71 + 7sub_1000062D8(v0 + 2) = 0LL;
              *(_BYTE *)(v71 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ArgumentParser/ArgumentDecoder.swift",  36LL,  2LL,  89LL, 0) = 10;
              swift_bridgeObjectRetain(v68);
              swift_bridgeObjectRetain(a5);
              uint64_t v72 = swift_bridgeObjectRetain(v69);
              swift_willThrow(v72);
              sub_10003D920(&v94);
              return 1LL;
            }

            int v61 = v84;
            ((void (*)(char *, uint64_t, uint64_t))v75[4])(v84, v58, a9);
            uint64_t v62 = v57;
            char v63 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v61, a9, v77);
            int v64 = (void (*)(char *, uint64_t))v60[1];
            v64(v61, a9);
            uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
            v65((uint64_t)v81, v18);
            v64(v62, a9);
            v65(v82, v18);
            v65((uint64_t)v83, v18);
            if ((v63 & 1) == 0) {
              goto LABEL_24;
            }
          }

          v88[3] = v56;
          uint64_t v66 = sub_10000B40C(v88);
          v74(v66, v73, v56);
          sub_10003D8D8((uint64_t)v88, (uint64_t)&v90 + 8);
          *(void *)&__int128 v89 = v87;
          *((void *)&v89 + 1) = a2;
          __int128 v67 = v85;
          *(void *)&__int128 v90 = v85;
          *((void *)&v92 + 1) = a5;
          char v93 = 1;
          swift_bridgeObjectRetain(a2);
          swift_bridgeObjectRetain(v67);
          swift_bridgeObjectRetain(a5);
          sub_10007029C((uint64_t *)&v89);
          sub_10003D920(&v89);
          sub_10003D920(&v94);
          __int128 v32 = &qword_1000B9360;
          __int128 v33 = (__int128 *)v88;
          goto LABEL_7;
        }
      }

      else
      {
        char v93 = 0;
        __int128 v91 = 0u;
        __int128 v92 = 0u;
        __int128 v89 = 0u;
        __int128 v90 = 0u;
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(a2);
      }
    }

    else
    {
      char v93 = 0;
      __int128 v91 = 0u;
      __int128 v92 = 0u;
      __int128 v89 = 0u;
      __int128 v90 = 0u;
    }

    __int128 v32 = &qword_1000B9888;
    goto LABEL_6;
  }

  a3 = v85;
  if (v86 != 1)
  {
LABEL_5:
    *((void *)&v90 + 1) = a9;
    char v31 = sub_10000B40C(&v89);
    ((void (*)(void *, uint64_t, uint64_t))v15[2])(v31, a4, a9);
    sub_10003D8D8((uint64_t)&v89, (uint64_t)v95 + 8);
    *(void *)&__int128 v94 = v87;
    *((void *)&v94 + 1) = a2;
    *(void *)&v95[0] = a3;
    *((void *)&v96 + 1) = a5;
    char v97 = 1;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    sub_10007029C((uint64_t *)&v94);
    sub_10003D920(&v94);
    __int128 v32 = &qword_1000B9360;
LABEL_6:
    __int128 v33 = &v89;
LABEL_7:
    sub_10004E740((uint64_t)v33, v32);
    return 1LL;
  }

  __chkstk_darwin(v24);
  *(&v73 - sub_1000062D8(v0 + 2) = a9;
  *(&v73 - 1) = v30;
  sub_10006FEDC(v87, a2, a3, a5, a4, (void (*)(char *))String.init(argument:), (uint64_t)(&v73 - 4), a9);
  return 1LL;
}

void *sub_100060EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  swift_bridgeObjectRetain(a2);
  Swift::String_optional v4 = String.Iterator.next()();
  uint64_t result = (void *)v4.value._countAndFlagsBits;
  if (v4.value._object)
  {
    uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
    object = v4.value._object;
    uint64_t v7 = 0LL;
    while (!__OFADD__(v7, 1LL))
    {
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_10004FE64((void *)(v8 > 1), v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v10 = &_swiftEmptyArrayStorage[6 * v9];
      v10[4] = v7;
      void v10[5] = countAndFlagsBits;
      v10[6] = object;
      v10[7] = 64LL;
      v10[8] = 0LL;
      void v10[9] = 0LL;
      Swift::String_optional v11 = String.Iterator.next()();
      uint64_t result = (void *)v11.value._countAndFlagsBits;
      uint64_t countAndFlagsBits = v11.value._countAndFlagsBits;
      object = v11.value._object;
      ++v7;
      if (!v11.value._object) {
        goto LABEL_7;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_7:
    swift_bridgeObjectRelease(v12);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_100060FF8(uint64_t a1)
{
  unsigned int v2 = v1;
  uint64_t v3 = a1;
  Swift::String_optional v4 = *v2;
  uint64_t v41 = *((void *)*v2 + 2);
  sub_10002D724(a1);
  if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0) {
LABEL_31:
  }
    Swift::String_optional v4 = sub_100058320(0LL, v41 + 1, 1, v4);
  unint64_t v6 = *((void *)v4 + 2);
  unint64_t v5 = *((void *)v4 + 3);
  if (v6 >= v5 >> 1) {
    Swift::String_optional v4 = sub_100058320((char *)(v5 > 1), v6 + 1, 1, v4);
  }
  *((void *)v4 + sub_1000062D8(v0 + 2) = v6 + 1;
  uint64_t v7 = &v4[192 * v6];
  __int128 v8 = *(_OWORD *)v3;
  __int128 v9 = *(_OWORD *)(v3 + 16);
  __int128 v10 = *(_OWORD *)(v3 + 48);
  *((_OWORD *)v7 + 4) = *(_OWORD *)(v3 + 32);
  *((_OWORD *)v7 + 5) = v10;
  *((_OWORD *)v7 + sub_1000062D8(v0 + 2) = v8;
  *((_OWORD *)v7 + 3) = v9;
  __int128 v11 = *(_OWORD *)(v3 + 64);
  __int128 v12 = *(_OWORD *)(v3 + 80);
  __int128 v13 = *(_OWORD *)(v3 + 112);
  *((_OWORD *)v7 + 8) = *(_OWORD *)(v3 + 96);
  *((_OWORD *)v7 + 9) = v13;
  *((_OWORD *)v7 + 6) = v11;
  *((_OWORD *)v7 + sub_1000062D8(v0 + 7) = v12;
  __int128 v14 = *(_OWORD *)(v3 + 128);
  __int128 v15 = *(_OWORD *)(v3 + 144);
  __int128 v16 = *(_OWORD *)(v3 + 176);
  *((_OWORD *)v7 + 1sub_1000062D8(v0 + 2) = *(_OWORD *)(v3 + 160);
  *((_OWORD *)v7 + 13) = v16;
  *((_OWORD *)v7 + 1sub_10004FE64(0LL, 0LL, 0) = v14;
  *((_OWORD *)v7 + 11) = v15;
  *unsigned int v2 = v4;
  if (*(void *)v3 >= 2uLL) {
    uint64_t v17 = (void *)swift_bridgeObjectRetain(*(void *)v3);
  }
  else {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  uint64_t v39 = v17;
  Swift::String_optional v4 = (char *)v17[2];
  if (!v4) {
    return swift_bridgeObjectRelease(v39);
  }
  uint64_t v18 = (unsigned __int8 *)(v17 + 6);
  __int128 v40 = v2;
  while (1)
  {
    uint64_t v20 = *((void *)v18 - 2);
    uint64_t v21 = *((void *)v18 - 1);
    unsigned __int8 v22 = *v18;
    if ((*v18 & 0xC0) == 0x40) {
      int v23 = 64;
    }
    else {
      int v23 = *v18;
    }
    uint64_t v24 = *((void *)v2[1] + 2);
    sub_100030508(*((void *)v18 - 2), *((void *)v18 - 1), *v18);
    if (v24)
    {
      sub_100058B9C(v20, v21, v23);
      if ((v25 & 1) != 0) {
        goto LABEL_11;
      }
    }

    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2[1]);
    uint64_t v3 = (uint64_t)v2[1];
    v2[1] = (char *)0x8000000000000000LL;
    unint64_t v28 = sub_100058B9C(v20, v21, v23);
    uint64_t v29 = *(void *)(v3 + 16);
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }

    unsigned int v2 = v27;
    if (*(void *)(v3 + 24) < v31) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
    }

    else
    {
      sub_10007044C();
      if ((v2 & 1) == 0)
      {
LABEL_24:
        *(void *)(v3 + 8 * (v28 >> 6) + 64) |= 1LL << v28;
        uint64_t v34 = *(void *)(v3 + 48) + 24 * v28;
        *(void *)uint64_t v34 = v20;
        *(void *)(v34 + 8) = v21;
        *(_BYTE *)(v34 + 16) = v23;
        *(void *)(*(void *)(v3 + 56) + 8 * v28) = v41;
        uint64_t v35 = *(void *)(v3 + 16);
        BOOL v36 = __OFADD__(v35, 1LL);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_30;
        }
        *(void *)(v3 + 16) = v37;
        sub_100030508(v20, v21, v23);
        goto LABEL_10;
      }
    }

uint64_t sub_1000612D0()
{
  return sub_100066D4C(*v0);
}

void *sub_1000612E4@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result - 1LL;
  if (__OFSUB__(*result, 1LL))
  {
    __break(1u);
  }

  else if (v3 < *(void *)(*(void *)v2 + 16LL))
  {
    *a2 = v3;
    return result;
  }

  __break(1u);
  return result;
}

unint64_t *sub_100061310(unint64_t *result)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1LL))
  {
    __break(1u);
  }

  else if (v2 < *(void *)(*(void *)v1 + 16LL))
  {
    *uint64_t result = v2;
    return result;
  }

  __break(1u);
  return result;
}

void sub_10006133C(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16LL);
}

void (*sub_10006134C(void (**a1)(void **a1), unint64_t *a2))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x180uLL);
  *a1 = result;
  unint64_t v6 = *a2;
  if ((*a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v6 < *(void *)(*(void *)v2 + 16LL))
  {
    uint64_t v7 = (_OWORD *)(*(void *)v2 + 192 * v6);
    __int128 v8 = v7[2];
    __int128 v9 = v7[3];
    __int128 v10 = v7[5];
    *((_OWORD *)result + sub_1000062D8(v0 + 2) = v7[4];
    *((_OWORD *)result + 3) = v10;
    *(_OWORD *)uint64_t result = v8;
    *((_OWORD *)result + 1) = v9;
    __int128 v11 = v7[6];
    __int128 v12 = v7[7];
    __int128 v13 = v7[9];
    *((_OWORD *)result + 6) = v7[8];
    *((_OWORD *)result + sub_1000062D8(v0 + 7) = v13;
    *((_OWORD *)result + 4) = v11;
    *((_OWORD *)result + 5) = v12;
    __int128 v14 = v7[10];
    __int128 v15 = v7[11];
    __int128 v16 = v7[13];
    *((_OWORD *)result + 1sub_10004FE64(0LL, 0LL, 0) = v7[12];
    *((_OWORD *)result + 11) = v16;
    *((_OWORD *)result + 8) = v14;
    *((_OWORD *)result + 9) = v15;
    __int128 v17 = *((_OWORD *)result + 3);
    *((_OWORD *)result + 14) = *((_OWORD *)result + 2);
    *((_OWORD *)result + 15) = v17;
    __int128 v18 = *((_OWORD *)result + 1);
    *((_OWORD *)result + 1sub_1000062D8(v0 + 2) = *(_OWORD *)result;
    *((_OWORD *)result + 13) = v18;
    __int128 v19 = *((_OWORD *)result + 7);
    *((_OWORD *)result + 18) = *((_OWORD *)result + 6);
    *((_OWORD *)result + 19) = v19;
    __int128 v20 = *((_OWORD *)result + 5);
    *((_OWORD *)result + 16) = *((_OWORD *)result + 4);
    *((_OWORD *)result + 1sub_1000062D8(v0 + 7) = v20;
    __int128 v21 = *((_OWORD *)result + 11);
    *((_OWORD *)result + 2sub_1000062D8(v0 + 2) = *((_OWORD *)result + 10);
    *((_OWORD *)result + 23) = v21;
    __int128 v22 = *((_OWORD *)result + 9);
    *((_OWORD *)result + 2sub_10004FE64(0LL, 0LL, 0) = *((_OWORD *)result + 8);
    *((_OWORD *)result + 21) = v22;
    return sub_100061414;
  }

  __break(1u);
  return result;
}

void sub_100061414(void **a1)
{
}

uint64_t *sub_10006141C@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (v4 = result[1], uint64_t result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = v2[1];
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v5;
    swift_bridgeObjectRetain(result);
    return (uint64_t *)swift_bridgeObjectRetain(v5);
  }

  return result;
}

void sub_100061468(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16LL);
  *a1 = 0LL;
  a1[1] = v2;
}

BOOL sub_100061478()
{
  return *(void *)(*(void *)v0 + 16LL) == 0LL;
}

void sub_10006148C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 256;
}

void *sub_10006149C@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }

  else if (v4 <= *(void *)(*(void *)v3 + 16LL))
  {
    *a3 = v4;
    return result;
  }

  __break(1u);
  return result;
}

unint64_t sub_1000614C8@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = sub_100066C54(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *sub_100061500(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)v2 + 16LL);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

uint64_t *sub_100061528(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_100061544(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_100061560(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *sub_10006157C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result >= *(void *)(*(void *)v2 + 16LL)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1LL;
  }
  return result;
}

void *sub_1000615A0(void *result)
{
  if (*result >= *(void *)(*(void *)v1 + 16LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 sub_1000615C4@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0LL;
  return result;
}

uint64_t sub_1000615D4()
{
  return *(void *)(*(void *)v0 + 16LL);
}

void *sub_1000615E0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = sub_10004F988(v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  return v3;
}

void *sub_100061628(void *a1, char *a2, uint64_t a3)
{
  return sub_100061630(a1, a2, a3, *v3, v3[1]);
}

void *sub_100061630(void *result, char *__dst, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7 = result;
  if (!__dst)
  {
LABEL_11:
    uint64_t v8 = 0LL;
    goto LABEL_15;
  }

  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_15:
    *char v7 = a4;
    v7[1] = a5;
    __int128 v7[2] = v8;
    return (void *)v8;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v9 = *(void *)(a4 + 16);
    if (v9)
    {
      __int128 v10 = __dst;
      __int128 v11 = (_OWORD *)(a4 + 32);
      unint64_t v12 = 1LL;
      while (1)
      {
        __int128 v13 = v11[9];
        v20[8] = v11[8];
        void v20[9] = v13;
        __int128 v14 = v11[11];
        v20[10] = v11[10];
        v20[11] = v14;
        __int128 v15 = v11[5];
        v20[4] = v11[4];
        v20[5] = v15;
        __int128 v16 = v11[7];
        v20[6] = v11[6];
        v20[7] = v16;
        __int128 v17 = v11[1];
        v20[0] = *v11;
        v20[1] = v17;
        __int128 v18 = v11[3];
        void v20[2] = v11[2];
        v20[3] = v18;
        memmove(v10, v11, 0xC0uLL);
        if (v8 == v12)
        {
          sub_10002D724((uint64_t)v20);
          goto LABEL_15;
        }

        if (v9 == v12) {
          break;
        }
        v10 += 192;
        sub_10002D724((uint64_t)v20);
        v11 += 12;
        if (v12++ >= *(void *)(a4 + 16))
        {
          __break(1u);
          goto LABEL_11;
        }
      }

      sub_10002D724((uint64_t)v20);
    }

    uint64_t v8 = v9;
    goto LABEL_15;
  }

  __break(1u);
  return result;
}

uint64_t sub_100061748(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    BOOL v7 = 0;
    a3 = 0LL;
    goto LABEL_14;
  }

  if (!a3)
  {
    BOOL v7 = 0;
LABEL_14:
    uint64_t v8 = a4;
LABEL_15:
    *(void *)__n128 result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = v8;
    *(_BYTE *)(result + 24) = v7;
    return a3;
  }

  if (a3 < 0) {
    goto LABEL_17;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = a4;
  while (1)
  {
    BOOL v7 = v6 == a5;
    if (v6 != a5) {
      break;
    }
    uint64_t v8 = 0LL;
LABEL_8:
    *(void *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5) {
      goto LABEL_15;
    }
    ++v5;
    BOOL v9 = v6 == a5;
    uint64_t v6 = v8;
    if (v9)
    {
      BOOL v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }

  uint64_t v8 = v6 + 1;
  if (!__OFADD__(v6, 1LL)) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1000617D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

unint64_t sub_1000617F8()
{
  unint64_t result = qword_1000B9B48;
  if (!qword_1000B9B48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100099C34, &type metadata for ArgumentSet);
    atomic_store(result, (unint64_t *)&qword_1000B9B48);
  }

  return result;
}

void *sub_10006183C()
{
  return &protocol witness table for Int;
}

uint64_t sub_100061848()
{
  return sub_1000619E0(&qword_1000B9B50, (uint64_t)&protocol conformance descriptor for <> Range<A>);
}

unint64_t sub_10006186C()
{
  unint64_t result = qword_1000B9B60;
  if (!qword_1000B9B60)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000B9B60);
  }

  return result;
}

uint64_t sub_1000618B0()
{
  return sub_1000062F8(&qword_1000B9B68, &qword_1000B9B70, (uint64_t)&protocol conformance descriptor for Slice<A>);
}

unint64_t sub_1000618E0()
{
  unint64_t result = qword_1000B9B78;
  if (!qword_1000B9B78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100099C9C, &type metadata for ArgumentSet);
    atomic_store(result, (unint64_t *)&qword_1000B9B78);
  }

  return result;
}

uint64_t sub_100061924()
{
  return sub_1000619E0(&qword_1000B9B80, (uint64_t)&protocol conformance descriptor for <> Range<A>);
}

uint64_t sub_100061948()
{
  return sub_100061A78( &qword_1000B9B88,  (void (*)(void))sub_100061974,  (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

unint64_t sub_100061974()
{
  unint64_t result = qword_1000B9B90;
  if (!qword_1000B9B90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100099D7C, &type metadata for ArgumentSet);
    atomic_store(result, (unint64_t *)&qword_1000B9B90);
  }

  return result;
}

uint64_t sub_1000619BC()
{
  return sub_1000619E0(&qword_1000B9B98, (uint64_t)&protocol conformance descriptor for <> Range<A>);
}

uint64_t sub_1000619E0(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_10000593C(&qword_1000B9B58);
    sub_10006186C();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100061A4C()
{
  return sub_100061A78( &qword_1000B9BA0,  (void (*)(void))sub_100061AE0,  (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

uint64_t sub_100061A78(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_10000593C(&qword_1000B9B70);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100061AE0()
{
  unint64_t result = qword_1000B9BA8;
  if (!qword_1000B9BA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100099DDC, &type metadata for ArgumentSet);
    atomic_store(result, (unint64_t *)&qword_1000B9BA8);
  }

  return result;
}

uint64_t sub_100061B24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v17 = &type metadata for Bool;
  v16[0] = 1;
  sub_10003D8D8((uint64_t)v16, (uint64_t)v14);
  v13[0] = a6;
  v13[1] = a7;
  _BYTE v13[2] = a8;
  _OWORD v14[4] = a1;
  char v15 = 1;
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a8);
  swift_bridgeObjectRetain(a1);
  sub_10007029C(v13);
  sub_10003D920(v13);
  return sub_10004E740((uint64_t)v16, &qword_1000B9360);
}

uint64_t sub_100061BE8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100061C30(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100061BFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10)
{
  return sub_100061D28(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 1u);
}

uint64_t sub_100061C30(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 != 2)
  {
    uint64_t v9 = result;
    __int128 v14 = &type metadata for Bool;
    v13[0] = a3 & 1;
    sub_10003D8D8((uint64_t)v13, (uint64_t)v11);
    v10[0] = a4;
    v10[1] = a5;
    void v10[2] = a6;
    v11[4] = v9;
    char v12 = 1;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(v9);
    sub_10007029C(v10);
    sub_10003D920(v10);
    return sub_10004E740((uint64_t)v13, &qword_1000B9360);
  }

  return result;
}

uint64_t sub_100061CF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10)
{
  return sub_100061D28(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

uint64_t sub_100061D28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, unsigned __int8 a11)
{
  __int128 v16 = (_BYTE *)(a6 + 16);
  swift_beginAccess(a6 + 16, v21, 0LL, 0LL);
  uint64_t v17 = v22;
  uint64_t result = sub_10006036C(a7, a8, a9, a11, a1, a5, *(_BYTE *)(a6 + 16), a10);
  if (!v17)
  {
    char v19 = result;
    uint64_t result = swift_beginAccess(v16, &v20, 1LL, 0LL);
    *__int128 v16 = v19 & 1;
  }

  return result;
}

uint64_t sub_100061DF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  __int128 v12 = *(_OWORD *)(a5 + 16);
  __int128 v24[2] = *(_OWORD *)a5;
  v24[3] = v12;
  uint64_t v25 = *(void *)(a5 + 32);
  sub_10006FD1C(a6, a7, a8, (uint64_t)&v17);
  if (!v18)
  {
    sub_10004E740((uint64_t)&v17, &qword_1000B9888);
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    goto LABEL_7;
  }

  sub_10003D8D8((uint64_t)v20, (uint64_t)&v22);
  sub_10003D920(&v17);
  if (!*((void *)&v23 + 1))
  {
LABEL_7:
    sub_10004E740((uint64_t)&v22, &qword_1000B9360);
LABEL_9:
    unint64_t v14 = sub_10002EA1C();
    uint64_t v15 = swift_allocError(&type metadata for ParserError, v14, 0LL, 0LL);
    *(void *)uint64_t v16 = 3LL;
    *(_OWORD *)(v16 + 8) = 0u;
    *(_OWORD *)(v16 + 24) = 0u;
    *(_OWORD *)(v16 + 4sub_10004FE64(0LL, 0LL, 0) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(void *)(v16 + 7sub_1000062D8(v0 + 2) = 0LL;
    *(_BYTE *)(v16 + 8sub_10004FE64(0LL, 0LL, 0) = 15;
    return swift_willThrow(v15);
  }

  sub_10005BD5C(&v22, v24);
  sub_10004E704((uint64_t)v24, (uint64_t)&v17);
  uint64_t result = swift_dynamicCast(&v22, &v17, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL);
  if ((result & 1) == 0)
  {
    sub_1000062D8(v24);
    goto LABEL_9;
  }

  if (__OFADD__((void)v22, 1LL))
  {
    __break(1u);
  }

  else
  {
    *((void *)&v23 + 1) = &type metadata for Int;
    *(void *)&__int128 v22 = v22 + 1;
    sub_10003D8D8((uint64_t)&v22, (uint64_t)v20);
    uint64_t v17 = a6;
    uint64_t v18 = a7;
    char v19 = a8;
    v20[4] = a1;
    char v21 = 1;
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a1);
    sub_10007029C(&v17);
    sub_10003D920(&v17);
    sub_1000062D8(v24);
    return sub_10004E740((uint64_t)&v22, &qword_1000B9360);
  }

  return result;
}