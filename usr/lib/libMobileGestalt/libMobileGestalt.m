CFStringRef sub_1807428C0()
{
  const void *v0;
  const void *v1;
  CFStringRef v2;
  __int128 v4;
  int v5;
  __int128 v6;
  int v7;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;
  __int128 v16;
  int v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  v20 = *MEMORY[0x1895F89C0];
  v19 = 1425254930;
  v18 = xmmword_18079D9E4;
  v17 = 1899561076;
  v16 = xmmword_18079D9F8;
  v15 = -584398440;
  v14 = xmmword_18079DA0C;
  v13 = -879476163;
  v12 = xmmword_18079DA20;
  v11 = -435113336;
  v10 = xmmword_18079DA34;
  v9 = -1997581659;
  v8 = xmmword_18079DA48;
  v7 = 1839812531;
  v6 = xmmword_18079DA5C;
  v5 = -1441055153;
  v4 = xmmword_18079D9D0;
  v0 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
  if (!v0) {
    return @"A";
  }
  v1 = v0;
  if (CFEqual(@"A2737", v0) || !CFEqual(@"A2843", v1)) {
    v2 = @"A";
  }
  else {
    v2 = @"B";
  }
  CFRelease(v1);
  return v2;
}

void *MGSetLogHandler(void *result)
{
  off_18C534130 = result;
  return result;
}

const void *sub_180742ACC(const char *a1)
{
  return sub_180742AD4(a1, 1);
}

const void *sub_180742AD4(const char *a1, int a2)
{
  uint64_t v92 = *MEMORY[0x1895F89C0];
  CFErrorRef error = 0LL;
  int v4 = open(a1, 0);
  if (v4 != -1)
  {
    int v5 = v4;
    if (fstat(v4, &v91) == -1)
    {
      if (!a2) {
        goto LABEL_38;
      }
      v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      if (v31) {
        v30 = v31 + 1;
      }
      v32 = __error();
      strerror(*v32);
      _MGLog((uint64_t)v30, 82LL, (uint64_t)@"Could not fstat %s: %s", v33, v34, v35, v36, v37, (char)a1);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_38;
      }
      v38 = __error();
      v39 = strerror(*v38);
      *(_DWORD *)buf = 136315394;
      CFErrorRef v88 = (CFErrorRef)a1;
      __int16 v89 = 2080;
      v90 = v39;
      v40 = (os_log_s *)MEMORY[0x1895F8DA0];
      v41 = "Could not fstat %s: %s";
      uint32_t v42 = 22;
    }

    else
    {
      off_t st_size = v91.st_size;
      v7 = (UInt8 *)malloc(v91.st_size);
      if (v7)
      {
        v8 = v7;
        if (read(v5, v7, st_size) == st_size)
        {
          v9 = (const __CFAllocator *)*MEMORY[0x189604DB0];
          v10 = CFDataCreateWithBytesNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  v8,  st_size,  (CFAllocatorRef)*MEMORY[0x189604DC8]);
          if (v10)
          {
            v11 = v10;
            CFPropertyListRef v12 = CFPropertyListCreateWithData(v9, v10, 0LL, 0LL, &error);
            if (v12)
            {
              v13 = v12;
              CFTypeID v14 = CFGetTypeID(v12);
              CFTypeID TypeID = CFDictionaryGetTypeID();
              BOOL v16 = v14 == TypeID;
              if (v14 == TypeID) {
                v17 = 0LL;
              }
              else {
                v17 = v13;
              }
              if (v14 == TypeID) {
                v18 = v13;
              }
              else {
                v18 = 0LL;
              }
              if (v16 || a2 == 0)
              {
                v13 = v17;
                goto LABEL_68;
              }

              v78 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
              if (v78) {
                v84 = v78 + 1;
              }
              else {
                v84 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
              }
              _MGLog( (uint64_t)v84,  126LL,  (uint64_t)@"File contents are not a CFDictionary",  v79,  v80,  v81,  v82,  v83,  v85);
              if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "File contents are not a CFDictionary",  buf,  2u);
              }
            }

            else
            {
              if (a2)
              {
                v71 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
                v77 = v71 ? v71 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
                _MGLog( (uint64_t)v77,  119LL,  (uint64_t)@"Could not create dictionary from file contents: %@",  v72,  v73,  v74,  v75,  v76,  (char)error);
                if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  CFErrorRef v88 = error;
                  _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not create dictionary from file contents: %@",  buf,  0xCu);
                }
              }

              v13 = 0LL;
            }

            v18 = 0LL;
LABEL_68:
            close(v5);
            CFRelease(v11);
            if (v13) {
              CFRelease(v13);
            }
            goto LABEL_40;
          }

          if (!a2) {
            goto LABEL_39;
          }
          v64 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
          v70 = v64 ? v64 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
          _MGLog( (uint64_t)v70,  107LL,  (uint64_t)@"Could not create CFData with file data",  v65,  v66,  v67,  v68,  v69,  v85);
          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_39;
          }
          *(_WORD *)buf = 0;
          v61 = (os_log_s *)MEMORY[0x1895F8DA0];
          v62 = "Could not create CFData with file data";
          uint32_t v63 = 2;
        }

        else
        {
          if (!a2) {
            goto LABEL_39;
          }
          v51 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
          v52 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
          if (v52) {
            v51 = v52 + 1;
          }
          v53 = __error();
          strerror(*v53);
          _MGLog((uint64_t)v51, 99LL, (uint64_t)@"Could not read %s: %s", v54, v55, v56, v57, v58, (char)a1);
          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_39;
          }
          v59 = __error();
          v60 = strerror(*v59);
          *(_DWORD *)buf = 136315394;
          CFErrorRef v88 = (CFErrorRef)a1;
          __int16 v89 = 2080;
          v90 = v60;
          v61 = (os_log_s *)MEMORY[0x1895F8DA0];
          v62 = "Could not read %s: %s";
          uint32_t v63 = 22;
        }

        _os_log_impl(&dword_180741000, v61, OS_LOG_TYPE_DEFAULT, v62, buf, v63);
LABEL_39:
        close(v5);
        v18 = 0LL;
        goto LABEL_40;
      }

      if (!a2
        || ((v43 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47)) != 0LL
          ? (v49 = v43 + 1)
          : (v49 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c"),
            _MGLog( (uint64_t)v49,  92LL,  (uint64_t)@"Could not malloc buffer for file data",  v44,  v45,  v46,  v47,  v48,  v85),  !os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)))
      {
LABEL_38:
        v8 = 0LL;
        goto LABEL_39;
      }

      *(_WORD *)buf = 0;
      v40 = (os_log_s *)MEMORY[0x1895F8DA0];
      v41 = "Could not malloc buffer for file data";
      uint32_t v42 = 2;
    }

    _os_log_impl(&dword_180741000, v40, OS_LOG_TYPE_DEFAULT, v41, buf, v42);
    goto LABEL_38;
  }

  if (!a2)
  {
    v8 = 0LL;
    v18 = 0LL;
    goto LABEL_42;
  }

  v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
  v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
  if (v21) {
    v20 = v21 + 1;
  }
  v22 = __error();
  strerror(*v22);
  _MGLog((uint64_t)v20, 74LL, (uint64_t)@"Could not open %s: %s", v23, v24, v25, v26, v27, (char)a1);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    v28 = __error();
    v29 = strerror(*v28);
    v91.st_dev = 136315394;
    *(void *)&v91.st_mode = a1;
    WORD2(v91.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&v91.st_ino + 6) = (__darwin_ino64_t)v29;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not open %s: %s",  (uint8_t *)&v91,  0x16u);
  }

  v18 = 0LL;
  v8 = 0LL;
LABEL_40:
  if (error)
  {
    CFRelease(error);
    CFErrorRef error = 0LL;
  }

LABEL_42:
  free(v8);
  return v18;
}

    sub_18078164C(a1, v10, "Data[%llu] (%@)", v33, v34, v35, v36, v37, Length);
LABEL_43:
    if (v12 && Length)
    {
      uint64_t v69 = sub_180743DB0((CFDataRef)a2);
      if (v69)
      {
        uint64_t v75 = v69;
        sub_18078164C(a1, v10, " (%@)", v70, v71, v72, v73, v74, (char)v69);
        CFRelease(v75);
      }
    }

    CFRelease(Mutable);
    return;
  }

  uint32_t v42 = CFGetTypeID(a2);
  if (v42 == CFDictionaryGetTypeID())
  {
    v97 = v12;
    Count = CFDictionaryGetCount((CFDictionaryRef)a2);
    v49 = Count;
    if (v11) {
      sub_18078164C(a1, v10, "Dictionary[%lld]", v44, v45, v46, v47, v48, Count);
    }
    v50 = (const void **)calloc(v49, 8uLL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v50, 0LL);
    qsort_b(v50, v49, 8uLL, &unk_1896FA160);
    if (v49 >= 1)
    {
      uint64_t v56 = 0LL;
      uint64_t v57 = (a3 + 1);
      v95 = a3 % 6 + 31;
      do
      {
        uint64_t v58 = v49;
        sub_18078164C(a1, v10, "\n", v51, v52, v53, v54, v55, v94);
        if ((_DWORD)v57)
        {
          v64 = v57;
          do
          {
            --v64;
            fwrite("   ", 3uLL, 1uLL, a1);
          }

          while (v64);
        }

        if (v97) {
          sub_18078164C(a1, v10, "\x1B[%dm%@\x1B[0m => ", v59, v60, v61, v62, v63, v95);
        }
        else {
          sub_18078164C(a1, v10, "%@ => ", v59, v60, v61, v62, v63, (char)v50[v56]);
        }
        v49 = v58;
        Value = CFDictionaryGetValue((CFDictionaryRef)a2, v50[v56]);
        sub_180781674(a1, Value, v57, a4);
        ++v56;
      }

      while (v56 != v58);
    }

    free(v50);
  }

  else
  {
    uint64_t v76 = CFGetTypeID(a2);
    if (v76 != CFArrayGetTypeID())
    {
LABEL_10:
      sub_18078164C(a1, v10, "%@", v17, v18, v19, v20, v21, (char)a2);
      return;
    }

    v98 = v12;
    v77 = CFArrayGetCount((CFArrayRef)a2);
    uint64_t v83 = v77;
    if (v11) {
      sub_18078164C(a1, v10, "Array[%lld]", v78, v79, v80, v81, v82, v77);
    }
    if (v83 >= 1)
    {
      v84 = 0LL;
      char v85 = (a3 + 1);
      v86 = a3 % 6 + 31;
      do
      {
        sub_18078164C(a1, v10, "\n", v78, v79, v80, v81, v82, v94);
        if ((_DWORD)v85)
        {
          uint64_t v92 = v85;
          do
          {
            --v92;
            fwrite("   ", 3uLL, 1uLL, a1);
          }

          while (v92);
        }

        if (v98) {
          sub_18078164C(a1, v10, "\x1B[%dm[%lld]\x1B[0m: ", v87, v88, v89, v90, v91, v86);
        }
        else {
          sub_18078164C(a1, v10, "[%lld]: ", v87, v88, v89, v90, v91, v84);
        }
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v84);
        sub_180781674(a1, ValueAtIndex, v85, a4);
        ++v84;
      }

      while (v84 != v83);
    }
  }

              int v4 = 0xFFFFFFFFLL;
              if (!a2) {
                return v4;
              }
LABEL_47:
              v19 = 0x800000000000LL;
LABEL_36:
              *(void *)a2 |= v19;
              return v4;
            }

            v17 = sub_18078A30C(&v27[1], v27[0], (uint64_t)v22);
            if ((_DWORD)v17)
            {
              int v4 = v17;
              sub_180784620(3LL, "%s: failed to parse certificate property");
              goto LABEL_57;
            }

            sub_180789D1C((unint64_t *)v21, v27[0], &v21[1]);
            int v4 = v18;
            if (*((void *)&v23 + 1) <= 4uLL && ((1LL << SBYTE8(v23)) & 0x16) != 0)
            {
              if ((_DWORD)v18)
              {
                sub_180784620(3LL, "%s: failed to find property in the manifest");
                goto LABEL_57;
              }

              if (v27[2] != *((void *)&v21[1] + 1))
              {
                sub_180784620(3LL, "%s: manifest or object property length does not match");
                goto LABEL_42;
              }

              if (memcmp((const void *)v27[1], *(const void **)&v21[1], v27[2]))
              {
                sub_180784620(3LL, "%s: DERMemcmp failed.");
                goto LABEL_42;
              }
            }

            else
            {
              if (*((void *)&v23 + 1) == 0xA000000000000000LL)
              {
                if ((_DWORD)v18 == 1)
                {
                  sub_180784620( 7LL,  "%s: manifest or object missing required property '%c%c%c%c'",  "_AMFDRDecodeEvaluateCertificateProperties",  SBYTE3(v27[0]),  SBYTE2(v27[0]),  SBYTE1(v27[0]),  SLOBYTE(v27[0]));
                  int v4 = 0LL;
                  *(void *)a2 |= 0x200000000000uLL;
                }

                goto LABEL_28;
              }

              if (*((void *)&v23 + 1) != 0xA000000000000001LL) {
                goto LABEL_44;
              }
              if ((_DWORD)v18 != 1)
              {
                sub_180784620(3LL, "%s: validation failed for property 0x%llX - tag present");
                goto LABEL_45;
              }
            }

            int v4 = 0LL;
LABEL_28:
            --v15;
            if ((_DWORD)v4)
            {
              sub_180784620(3LL, "%s: validation failed for property 0x%llX");
              goto LABEL_57;
            }
          }
        }

        int v4 = (uint64_t)v14;
        sub_180784620(3LL, "%s: failed to certificate dictionary");
      }

void _MGLog( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v9 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  v10 = CFStringCreateWithFormat( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  @"libMobileGestalt %s:%d: %@",  a1,  a2,  a3);
  v11 = CFStringCreateWithFormatAndArguments(v9, 0LL, v10, &a9);
  CFIndex Length = CFStringGetLength(v11);
  CFIndex v13 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  CFTypeID v14 = (char *)calloc(1uLL, v13);
  if (v14)
  {
    if (CFStringGetCString(v11, v14, v13, 0x8000100u) == 1 && off_18C534130 != 0LL) {
      off_18C534130(v14);
    }
  }

  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  free(v14);
}

const void *sub_18074313C(const void *a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  int v4 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
  if (v4)
  {
    int v5 = v4;
    Value = CFDictionaryGetValue(v4, a1);
    v7 = Value;
    if (Value)
    {
      CFRetain(Value);
    }

    else if (a2)
    {
      v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      if (v15) {
        v21 = v15 + 1;
      }
      else {
        v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      }
      _MGLog( (uint64_t)v21,  297LL,  (uint64_t)@"Could not lookup %@ from system version dictionary",  v16,  v17,  v18,  v19,  v20,  (char)a1);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v25 = a1;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not lookup %@ from system version dictionary",  buf,  0xCu);
      }
    }

    CFRelease(v5);
  }

  else
  {
    if (a2)
    {
      v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      CFTypeID v14 = v8 ? v8 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      _MGLog( (uint64_t)v14,  302LL,  (uint64_t)@"Could not load the system version dictionary",  v9,  v10,  v11,  v12,  v13,  v23);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not load the system version dictionary",  buf,  2u);
      }
    }

    return 0LL;
  }

  return v7;
}

const void *sub_1807432C4(const __CFDictionary *a1, const void *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    Value = CFDictionaryGetValue(a1, a2);
    v7 = Value;
    if (Value)
    {
      CFRetain(Value);
    }

    else if (a3)
    {
      v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      if (v15) {
        v21 = v15 + 1;
      }
      else {
        v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      }
      _MGLog( (uint64_t)v21,  319LL,  (uint64_t)@"Could not lookup %@ from dictionary",  v16,  v17,  v18,  v19,  v20,  (char)a2);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v25 = a2;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not lookup %@ from dictionary",  buf,  0xCu);
      }
    }

    CFRelease(a1);
  }

  else
  {
    if (a3)
    {
      v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      CFTypeID v14 = v8 ? v8 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      _MGLog((uint64_t)v14, 324LL, (uint64_t)@"No dictionary provided", v9, v10, v11, v12, v13, v23);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "No dictionary provided", buf, 2u);
      }
    }

    return 0LL;
  }

  return v7;
}

uint64_t sub_180743444()
{
  if (qword_18C451F48 != -1) {
    dispatch_once(&qword_18C451F48, &unk_1896A03A8);
  }
  return dword_18C451EC8;
}

void sub_180743484()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  v0 = (const char *)sub_180746268();
  v1 = v0;
  if (!v0)
  {
LABEL_14:
    if (dword_18C451EC8 != -1) {
      return;
    }
    v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v3) {
      uint64_t v9 = v3 + 1;
    }
    else {
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    }
    _MGLog((uint64_t)v9, 394LL, (uint64_t)@"Did not recognize DeviceClass: %s", v4, v5, v6, v7, v8, (char)v1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v11 = v1;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Did not recognize DeviceClass: %s",  buf,  0xCu);
    }

LABEL_20:
    int v2 = 4;
    goto LABEL_24;
  }

  if (!strncmp(v0, "iPhone", 6uLL))
  {
    int v2 = 1;
    goto LABEL_24;
  }

  if (!strncmp(v1, "iPod", 4uLL))
  {
    int v2 = 2;
    goto LABEL_24;
  }

  if (!strncmp(v1, "iPad", 4uLL))
  {
    int v2 = 3;
    goto LABEL_24;
  }

  if (!strncmp(v1, "AppleTV", 7uLL)) {
    goto LABEL_20;
  }
  int v2 = 5;
  if (strncmp(v1, "iFPGA", 5uLL))
  {
    if (!strncmp(v1, "Watch", 5uLL))
    {
      int v2 = 6;
      goto LABEL_24;
    }

    if (!strncmp(v1, "AudioAccessory", 0xEuLL))
    {
      int v2 = 7;
      goto LABEL_24;
    }

    if (!strncmp(v1, "iBridge", 7uLL))
    {
      int v2 = 8;
      goto LABEL_24;
    }

    if (!strncmp(v1, "AppleDisplay", 0xCuLL))
    {
      int v2 = 10;
      goto LABEL_24;
    }

    if (!strncmp(v1, "RealityDevice", 0xDuLL))
    {
      int v2 = 11;
      goto LABEL_24;
    }

    if (!strncmp(v1, "ComputeModule", 0xDuLL))
    {
      int v2 = 12;
      goto LABEL_24;
    }

    if (!strncmp(v1, "Mac", 3uLL))
    {
      int v2 = 9;
      goto LABEL_24;
    }

    goto LABEL_14;
  }

  if ((sub_18076AA6C(v22, &v78, 1LL, &v81, a2, 0LL) & 1) != 0)
  {
    char v23 = v81;
  }

  else
  {
    uint32_t v63 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v63) {
      uint64_t v69 = v63 + 1;
    }
    else {
      uint64_t v69 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v69, 1845LL, (uint64_t)@"failed to decode APTicket", v64, v65, v66, v67, v68, v77);
    char v23 = 0LL;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__s = 0;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "failed to decode APTicket", __s, 2u);
      char v23 = 0LL;
    }
  }

  CFRelease(v22);
  return v23;
}

      CFRelease(v13);
      uint64_t v13 = (const __CFData *)Mutable;
      goto LABEL_21;
    }

    uint64_t v27 = CFStringGetTypeID();
    if (v27 != CFGetTypeID(v13))
    {
      v28 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
      if (v28) {
        uint64_t v34 = v28 + 1;
      }
      else {
        uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
      }
      _MGLog((uint64_t)v34, 337LL, (uint64_t)@"Unsupported type.", v29, v30, v31, v32, v33, v36);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Unsupported type.", buf, 2u);
      }

      Mutable = 0LL;
      goto LABEL_20;
    }
  }

  else
  {
    uint64_t v20 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    }
    _MGLog((uint64_t)v26, 321LL, (uint64_t)@"Failed to retrieve data %@:%@", v21, v22, v23, v24, v25, (char)v10);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v38 = v10;
      v39 = 2112;
      v40 = v11;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to retrieve data %@:%@",  buf,  0x16u);
    }

    uint64_t v13 = 0LL;
  }

      CFRelease(v13);
      uint64_t v13 = (const __CFData *)Mutable;
      goto LABEL_21;
    }

    uint64_t v27 = CFStringGetTypeID();
    if (v27 != CFGetTypeID(v13))
    {
      v28 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
      if (v28) {
        uint64_t v34 = v28 + 1;
      }
      else {
        uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
      }
      _MGLog((uint64_t)v34, 374LL, (uint64_t)@"Unsupported type.", v29, v30, v31, v32, v33, v36);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Unsupported type.", buf, 2u);
      }

      Mutable = 0LL;
      goto LABEL_20;
    }
  }

  else
  {
    uint64_t v20 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    }
    _MGLog((uint64_t)v26, 358LL, (uint64_t)@"Failed to retrieve data %@:%@", v21, v22, v23, v24, v25, (char)v10);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v38 = v10;
      v39 = 2112;
      v40 = v11;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to retrieve data %@:%@",  buf,  0x16u);
    }

    uint64_t v13 = 0LL;
  }

  if (!v16[0] || !v16[1])
  {
    uint64_t v7 = *(void *)a1 | 0x200000LL;
LABEL_38:
    *(void *)a1 = v7;
    return v2;
  }

  uint64_t v12 = 0u;
  uint64_t v13 = 0u;
  if (sub_180782498(v16, 2u, (uint64_t)&unk_1807A3180, (unint64_t)&v12, 0x20uLL, 0LL))
  {
    sub_180784620(3LL, "%s: malformed FDR Combined Format (trustObject)");
LABEL_36:
    uint64_t v8 = 0x20000LL;
    int v2 = 0x20000LL;
LABEL_37:
    uint64_t v7 = *(void *)a1 | v8;
    goto LABEL_38;
  }

  if (!(void)v12 || *((void *)&v12 + 1) != 4LL)
  {
    sub_180784620(3LL, "%s: malformed FDR Combined Format (trustObject), invalid tag length");
    goto LABEL_36;
  }

  if (*(_DWORD *)v12 != *(_DWORD *)"secb")
  {
    sub_180784620( 3LL,  "%s: malformed FDR Combined Format (trustObject), expected tag %c%c%c%c found tag %c%c%c%c",  "_AMFDRDecodeCombined",  aSecb[0],  aSecb[1]);
    goto LABEL_36;
  }

  uint64_t v10 = v13;
  *(_OWORD *)(a1 + 1944) = v13;
  uint64_t v8 = 0x200000LL;
  if (!(void)v10 || !*((void *)&v10 + 1)) {
    goto LABEL_37;
  }
  return v2;
}

LABEL_24:
  dword_18C451EC8 = v2;
}

    if ((v4 & 1) == 0)
    {
      sub_180784620(5LL, "%s: found data in multi combined format", "_AMFDRDecodeFindDataFromMultiCombined");
      uint64_t v6 = *((void *)&v13 + 1);
      uint64_t v7 = v13;
LABEL_29:
      uint64_t v10 = 0LL;
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v6;
      return v10;
    }

    if ((v5 & 1) != 0) {
      break;
    }
    uint64_t v9 = v14[1];
    *(void *)(a1 + 104) = v14[0];
    *(void *)(a1 + 112) = v9;
    sub_180784620(5LL, "%s: found data in multi combined format", "_AMFDRDecodeFindDataFromMultiCombined");
    uint64_t v6 = *((void *)&v13 + 1);
    uint64_t v7 = v13;
    uint64_t v5 = 1;
  }

  sub_180784620( 3LL,  "%s: found multiple entries that match, uniqueID is required in this case",  "_AMFDRDecodeFindDataFromMultiCombined");
  *(void *)a1 |= 0x4000uLL;
LABEL_36:
  sub_180784620(3LL, "%s: cannot find data in multi combined format", "_AMFDRDecodeFindDataFromMultiCombined");
  return 512LL;
}

CFStringRef sub_1807436EC()
{
  v0 = (const __CFData *)sub_180765DB4("IODeviceTree:/arm-io", @"soc-generation", 0);
  v1 = v0;
  if (v0)
  {
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) >= 1)
    {
      BytePtr = (const char *)CFDataGetBytePtr(v1);
      CFStringRef v4 = CFStringCreateWithCString(0LL, BytePtr, 0x8000100u);
LABEL_11:
      CFRelease(v1);
      return v4;
    }
  }

  uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
  if (v5) {
    uint64_t v11 = v5 + 1;
  }
  else {
    uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
  }
  _MGLog( (uint64_t)v11,  414LL,  (uint64_t)@"Failed to copyDeviceTreeProperty(IODeviceTree:/arm-io soc-generation)",  v6,  v7,  v8,  v9,  v10,  v13[0]);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to copyDeviceTreeProperty(IODeviceTree:/arm-io soc-generation)",  v13,  2u);
  }

  CFStringRef v4 = 0LL;
  CFStringRef result = 0LL;
  if (v1) {
    goto LABEL_11;
  }
  return result;
}

BOOL sub_1807437FC(BOOL a1, int a2)
{
  BOOL v2 = a1;
  if (a1)
  {
    CFStringRef v4 = (const __CFString *)MGCopyAnswer((const char **)@"5pYKlGnYYBzGvAlIU8RjEQ");
    if (v4)
    {
      uint64_t v5 = v4;
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID())
      {
        if (a2) {
          BOOL v2 = sub_1807438A0(v5, (const void *)v2, a2);
        }
        else {
          BOOL v2 = CFEqual((CFTypeRef)v2, v5) != 0;
        }
      }

      else
      {
        BOOL v2 = 0LL;
      }

      CFRelease(v5);
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

BOOL sub_1807438A0(const __CFString *a1, const void *a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      if (CFStringGetLength(a1))
      {
        if (CFStringGetCharacterAtIndex(a1, 0LL) == a3)
        {
          uint64_t v7 = sub_180744760(a1);
          if (v7)
          {
            uint64_t v8 = v7;
            CC_LONG v9 = snprintf(__str, 0x5EuLL, "%s%s", "MGCopyAnswer", v7);
            if ((v9 & 0x80000000) != 0)
            {
              if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)cStr = 136315138;
                v15 = v8;
                _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Obfuscation error for %s",  (uint8_t *)cStr,  0xCu);
              }
            }

            else
            {
              CC_MD5(__str, v9, md);
              if (!CNEncode())
              {
                char v16 = 0;
                CFStringRef v10 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
                if (v10)
                {
                  CFStringRef v11 = v10;
                  BOOL v12 = CFEqual(a2, v10) != 0;
                  CFRelease(v11);
LABEL_15:
                  free(v8);
                  return v12;
                }
              }
            }

            BOOL v12 = 0LL;
            goto LABEL_15;
          }
        }
      }
    }
  }

  return 0LL;
}

BOOL sub_180743A48(BOOL a1)
{
  BOOL v2 = sub_1807436EC();
  if (!v2) {
    return 0LL;
  }
  v3 = v2;
  if (a1) {
    a1 = CFStringCompare(v2, (CFStringRef)a1, 1uLL) == kCFCompareEqualTo;
  }
  CFRelease(v3);
  return a1;
}

uint64_t sub_180743AA0(const __CFString *a1)
{
  v5.length = CFStringGetLength(a1) - 1;
  v5.location = 1LL;
  BOOL v2 = CFStringCreateWithSubstring(0LL, a1, v5);
  uint64_t IntValue = CFStringGetIntValue(v2);
  if (v2) {
    CFRelease(v2);
  }
  return IntValue;
}

BOOL sub_180743AF0(BOOL a1)
{
  BOOL v1 = a1;
  if (a1)
  {
    BOOL v2 = sub_1807436EC();
    if (v2)
    {
      v3 = v2;
      unsigned __int8 CharacterAtIndex = CFStringGetCharacterAtIndex(v2, 0LL);
      if (CFStringGetCharacterAtIndex((CFStringRef)v1, 0LL) != CharacterAtIndex)
      {
        BOOL v1 = 0LL;
      }

      else
      {
        int v5 = sub_180743AA0(v3);
        BOOL v1 = v5 >= (int)sub_180743AA0((const __CFString *)v1);
      }

      CFRelease(v3);
    }

    else
    {
      return 0LL;
    }
  }

  return v1;
}

BOOL sub_180743B80()
{
  return _CFMZEnabled() != 0;
}

uint64_t sub_180743B9C()
{
  return 0LL;
}

BOOL sub_180743BA4( BOOL stringToFind, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (stringToFind)
  {
    CC_LONG v9 = (const __CFString *)stringToFind;
    uint64_t v13 = (CFStringRef *)&a9;
    do
    {
      CFIndex location = CFStringFind(theString, v9, 0LL).location;
      BOOL v11 = location == -1;
      stringToFind = location != -1;
      if (!v11) {
        break;
      }
      BOOL v12 = v13++;
      theString = *v12;
    }

    while (*v12);
  }

  return stringToFind;
}

uint64_t sub_180743C04()
{
  if (qword_18C451F28 != -1) {
    dispatch_once(&qword_18C451F28, &unk_1896A03E8);
  }
  return dword_18C451EC0;
}

uint64_t sub_180743C44()
{
  uint64_t result = sub_180765E6C("IODeviceTree:/product", @"udid-version", 0, 0xFFFFFFFFLL, 1);
  dword_18C451EC0 = result;
  return result;
}

void sub_180743C7C(const __CFArray *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t Count = CFArrayGetCount(a1);
    int v5 = (const void **)malloc(8 * Count);
    v8.CFIndex location = 0LL;
    v8.length = Count;
    CFArrayGetValues(a1, v8, v5);
    if (Count >= 1)
    {
      CFTypeID v6 = v5;
      do
      {
        uint64_t v7 = (uint64_t)*v6++;
        (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v7);
        --Count;
      }

      while (Count);
    }

    free(v5);
  }
}

void sub_180743CFC(const __CFDictionary *a1, uint64_t a2)
{
  if (a1)
  {
    CFIndex Count = CFDictionaryGetCount(a1);
    int v5 = (const void **)malloc(8 * Count);
    CFDictionaryGetKeysAndValues(a1, v5, 0LL);
    CFIndex v6 = Count - 1;
    if (Count >= 1)
    {
      uint64_t v7 = v5;
      do
      {
        char v11 = 0;
        CFRange v8 = *v7++;
        Value = CFDictionaryGetValue(a1, v8);
        (*(void (**)(uint64_t, const void *, const void *, char *))(a2 + 16))(a2, v8, Value, &v11);
        if (v11) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v6 == 0;
        }
        --v6;
      }

      while (!v10);
    }

    free(v5);
  }

CFDataRef sub_180743DB0(CFDataRef theData)
{
  BOOL v1 = theData;
  if (theData)
  {
    uint64_t Length = CFDataGetLength(theData);
    BytePtr = CFDataGetBytePtr(v1);
    if (Length < 2) {
      return 0LL;
    }
    CFStringRef v4 = (const char *)BytePtr;
    uint64_t v5 = 0LL;
    while (!BytePtr[Length - 1 + v5])
    {
      --v5;
      if (!(Length + v5)) {
        return 0LL;
      }
    }

    uint64_t v6 = Length + v5;
    if (!(Length + v5)) {
      return 0LL;
    }
    if (v6 >= 1)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = MEMORY[0x1895F8770];
      do
      {
        uint64_t v9 = v4[v7];
        if (!(v4[v7] < 0 ? __maskrune(v9, 0x40000uLL) : *(_DWORD *)(v8 + 4 * v9 + 60) & 0x40000)) {
          return 0LL;
        }
      }

      while (v6 != ++v7);
    }

    if (v5)
    {
      CFStringRef v11 = CFStringCreateWithCString(0LL, v4, 0x8000100u);
      CFStringRef v12 = v11;
      if (v5 == -1) {
        CFStringRef v13 = CFStringCreateWithFormat(0LL, 0LL, @"%@\\0", v11);
      }
      else {
        CFStringRef v13 = CFStringCreateWithFormat(0LL, 0LL, @"%@ (%llux\\0)", v11, -v5);
      }
    }

    else
    {
      CFStringRef v12 = CFStringCreateWithBytes(0LL, (const UInt8 *)v4, Length, 0x8000100u, 0);
      CFStringRef v13 = CFStringCreateWithFormat(0LL, 0LL, @"%@", v12);
    }

    BOOL v1 = (const __CFData *)v13;
    CFRelease(v12);
  }

  return v1;
}

uint64_t sub_180743F0C(char *a1, const void *a2, _BYTE *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (a3) {
    *a3 = 0;
  }
  if (!access(a1, 4))
  {
    uint64_t v7 = (const __CFDictionary *)sub_180742AD4(a1, 1);
    if (v7)
    {
      uint64_t v8 = v7;
      Value = CFDictionaryGetValue(v7, a2);
      uint64_t v6 = (uint64_t)Value;
      if (Value)
      {
        CFTypeID v10 = CFGetTypeID(Value);
        if (v10 == CFBooleanGetTypeID())
        {
          BOOL v11 = CFBooleanGetValue((CFBooleanRef)v6) == 0;
        }

        else
        {
          if (v10 != CFNumberGetTypeID())
          {
            CFStringRef v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
            if (v12) {
              uint64_t v18 = v12 + 1;
            }
            else {
              uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
            }
            _MGLog((uint64_t)v18, 739LL, (uint64_t)@"illegal type for %@ in %s", v13, v14, v15, v16, v17, (char)a2);
            uint64_t v6 = 0LL;
            if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
            {
              int valuePtr = 138412546;
              v21 = a2;
              __int16 v22 = 2080;
              char v23 = a1;
              _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "illegal type for %@ in %s",  (uint8_t *)&valuePtr,  0x16u);
              uint64_t v6 = 0LL;
            }

            goto LABEL_21;
          }

          int valuePtr = 0;
          CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &valuePtr);
          BOOL v11 = valuePtr == 0;
        }

        uint64_t v6 = !v11;
        if (a3) {
          *a3 = 1;
        }
      }

LABEL_21:
      CFRelease(v8);
      return v6;
    }
  }

  return 0LL;
}

        CFRelease(v0);
        return Mutable;
      }

      uint64_t v15 = CFStringGetTypeID();
      if (v15 != CFGetTypeID(v0))
      {
        uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v16) {
          __int16 v22 = v16 + 1;
        }
        else {
          __int16 v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v22, 5975LL, (uint64_t)@"Unsupported type.", v17, v18, v19, v20, v21, v24);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v25 = 0;
          _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Unsupported type.", v25, 2u);
        }

        Mutable = 0LL;
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v8) {
        uint64_t v14 = v8 + 1;
      }
      else {
        uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v14,  5961LL,  (uint64_t)@"Failed to retrieve data AppleBCMWLANBusInterfacePCIe:wifi-module-sn",  v9,  v10,  v11,  v12,  v13,  v24);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to retrieve data AppleBCMWLANBusInterfacePCIe:wifi-module-sn",  buf,  2u);
      }

      return 0LL;
    }
  }

  return (__CFString *)v0;
}

  return (__CFString *)v13;
}

  return (__CFString *)v13;
}

      if (a4) {
        uint64_t v16 = v7;
      }
      else {
        uint64_t v16 = (const __CFURL *)v8;
      }
      CFStringRef v4 = 0LL;
      *a3 = CFRetain(v16);
      goto LABEL_25;
    }

    uint64_t v9 = 0LL;
LABEL_38:
    CFStringRef v4 = 2LL;
LABEL_25:
    if (v7) {
      CFRelease(v7);
    }
    if (v11) {
      goto LABEL_28;
    }
LABEL_29:
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v8) {
      CFRelease(v8);
    }
  }

  return v4;
}

BOOL sub_1807440B8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (!a4) {
    sub_1807995FC();
  }
  *a4 = 0;
  uint64_t v5 = (const __CFBoolean *)_CFPreferencesCopyValueWithContainer();
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 == CFBooleanGetTypeID())
  {
    *a4 = 1;
    BOOL v8 = CFBooleanGetValue(v6) != 0;
  }

  else
  {
    BOOL v8 = 0LL;
  }

  CFRelease(v6);
  return v8;
}

BOOL sub_180744160(uint64_t a1, uint64_t a2, BOOL *a3)
{
  __int16 v11 = 0;
  if (!a3) {
    sub_180799624();
  }
  CFStringRef v6 = CFStringCreateWithFormat(0LL, 0LL, @"com.apple.carrier_%d", a2);
  BOOL v7 = sub_1807440B8((uint64_t)@"/var/mobile/Library/Carrier Bundles", (uint64_t)v6, a1, (_BYTE *)&v11 + 1);
  if (v6) {
    CFRelease(v6);
  }
  if (v7)
  {
    BOOL v8 = 1LL;
  }

  else
  {
    CFStringRef v9 = CFStringCreateWithFormat(0LL, 0LL, @"com.apple.country.carrier_%d", a2);
    BOOL v8 = sub_1807440B8((uint64_t)@"/var/mobile/Library/CountryBundles/", (uint64_t)v9, a1, &v11);
    if (v9) {
      CFRelease(v9);
    }
  }

  *a3 = (HIBYTE(v11) | v11) != 0;
  return v8;
}

BOOL sub_180744258(uint64_t a1, BOOL *a2)
{
  __int16 v7 = 0;
  if (!a2) {
    sub_18079964C();
  }
  BOOL v4 = 1LL;
  if (sub_180744160(a1, 1LL, (BOOL *)&v7 + 1))
  {
    BOOL v5 = 0;
  }

  else
  {
    BOOL v4 = sub_180744160(a1, 2LL, (BOOL *)&v7);
    BOOL v5 = (_BYTE)v7 != 0;
  }

  if (HIBYTE(v7)) {
    BOOL v5 = 1;
  }
  *a2 = v5;
  return v4;
}

BOOL sub_1807442E4(const __CFString *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 0LL;
  }
  BOOL v1 = a1;
  if (CFEqual(a1, @"<GERMANY>"))
  {
    if (qword_18C451F48 != -1) {
      dispatch_once(&qword_18C451F48, &unk_1896A03A8);
    }
    BOOL v2 = @"D";
    switch(dword_18C451EC8)
    {
      case 1:
        BOOL v1 = @"DN";
        BOOL v3 = 1;
        int v4 = 1;
        BOOL v5 = @"ZD";
        break;
      case 3:
      case 2:
        int v4 = 0;
        BOOL v5 = 0LL;
        BOOL v3 = dword_18C451EC8 == 2;
        if (dword_18C451EC8 != 2) {
          BOOL v2 = 0LL;
        }
        BOOL v1 = @"FD";
        break;
      case 6:
        int v4 = 0;
        BOOL v5 = 0LL;
        BOOL v1 = @"FD";
        BOOL v3 = 1;
        break;
      default:
        __int16 v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
        if (v22) {
          v28 = v22 + 1;
        }
        else {
          v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
        }
        _MGLog( (uint64_t)v28,  856LL,  (uint64_t)@"Unsupported device type for Germany Region Code check",  v23,  v24,  v25,  v26,  v27,  v29);
        BOOL v9 = 0LL;
        if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
          return v9;
        }
        *(_WORD *)buf = 0;
        uint64_t v18 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v19 = "Unsupported device type for Germany Region Code check";
        uint32_t v20 = 2;
        goto LABEL_27;
    }
  }

  else
  {
    BOOL v3 = 0;
    BOOL v2 = 0LL;
    int v4 = 0;
    BOOL v5 = 0LL;
  }

  CFStringRef v6 = MGCopyAnswer((const char **)@"h63QSdBCiT/z0WU6rdQv6Q");
  if (!v6)
  {
    __int16 v11 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v11) {
      uint64_t v17 = v11 + 1;
    }
    else {
      uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    }
    _MGLog( (uint64_t)v17,  872LL,  (uint64_t)@"Could not get region code; assuming device is not in region %@",
      v12,
      v13,
      v14,
      v15,
      v16,
      (char)v1);
    BOOL v9 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v9;
    }
    *(_DWORD *)buf = 138412290;
    v31 = v1;
    uint64_t v18 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v19 = "Could not get region code; assuming device is not in region %@";
    uint32_t v20 = 12;
LABEL_27:
    _os_log_impl(&dword_180741000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v20);
    return 0LL;
  }

  __int16 v7 = v6;
  int v8 = CFEqual(v1, v6);
  BOOL v9 = v8 != 0;
  if (v8) {
    int v10 = 0;
  }
  else {
    int v10 = v4;
  }
  if (v10 == 1) {
    BOOL v9 = CFEqual(v5, v7) != 0;
  }
  if (v3 && !v9) {
    BOOL v9 = CFEqual(v2, v7) != 0;
  }
  CFRelease(v7);
  return v9;
}

CFPropertyListRef sub_1807445A0(CFStringRef prefsID, const __CFString *a2)
{
  BOOL v3 = SCPreferencesCreate(0LL, @"MobileGestalt", prefsID);
  if (!v3) {
    return 0LL;
  }
  int v4 = v3;
  CFPropertyListRef Value = SCPreferencesGetValue(v3, a2);
  CFPropertyListRef v6 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v4);
  return v6;
}

const char *sub_180744604(int a1, void *buffer, int buffersize)
{
  if (proc_pidinfo(a1, 11, 1uLL, buffer, buffersize)) {
    return "unknown pid";
  }
  BOOL v5 = rindex((const char *)buffer, 47);
  if (v5) {
    return v5 + 1;
  }
  else {
    return (const char *)buffer;
  }
}

uint64_t sub_180744658()
{
  kern_return_t v1;
  mach_error_t v2;
  const char *v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[2];
  uint8_t buf[4];
  char *v16;
  uint64_t v17;
  uint64_t v17 = *MEMORY[0x1895F89C0];
  *(void *)host_info_out = 0LL;
  host_info_outCnt = 2;
  host_t v0 = MEMORY[0x186E02414]();
  BOOL v1 = host_info(v0, 12, host_info_out, &host_info_outCnt);
  if (v1)
  {
    BOOL v2 = v1;
    BOOL v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    int v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v4) {
      BOOL v3 = v4 + 1;
    }
    BOOL v5 = mach_error_string(v2);
    _MGLog((uint64_t)v3, 908LL, (uint64_t)@"host_info failed: %s", v6, v7, v8, v9, v10, v5);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v11 = mach_error_string(v2);
      *(_DWORD *)buf = 136315138;
      uint64_t v16 = v11;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "host_info failed: %s", buf, 0xCu);
    }
  }

  return *(void *)host_info_out;
}

char *sub_180744760(const __CFString *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 0LL;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  int v4 = (char *)malloc(v3);
  if (!v4)
  {
    uint64_t v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v13) {
      uint64_t v19 = v13 + 1;
    }
    else {
      uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    }
    _MGLog((uint64_t)v19, 920LL, (uint64_t)@"failed to allocate string buffer", v14, v15, v16, v17, v18, v21);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "failed to allocate string buffer",  buf,  2u);
    }

    return 0LL;
  }

  BOOL v5 = v4;
  if (!CFStringGetCString(a1, v4, v3, 0x8000100u))
  {
    CFPropertyListRef v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v6) {
      uint64_t v12 = v6 + 1;
    }
    else {
      uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    }
    _MGLog((uint64_t)v12, 924LL, (uint64_t)@"CFStringGetCString failed for '%@'", v7, v8, v9, v10, v11, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = a1;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "CFStringGetCString failed for '%@'",  buf,  0xCu);
    }

    free(v5);
    return 0LL;
  }

  return v5;
}

BOOL sub_1807448F8(BOOL result, const void *a2, int a3)
{
  if (result)
  {
    BOOL v5 = (const __CFArray *)result;
    CFTypeID v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFArrayGetTypeID() && (Count = CFArrayGetCount(v5), CFIndex v8 = Count - 1, Count >= 1))
    {
      CFIndex v9 = 0LL;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v9);
        uint64_t result = sub_1807438A0(ValueAtIndex, a2, a3);
        if (result) {
          break;
        }
      }

      while (v8 != v9++);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

CFTypeRef sub_18074498C(io_registry_entry_t a1, CFTypeRef cf, const void *a3, int a4)
{
  if (!cf) {
    return 0LL;
  }
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 != CFArrayGetTypeID()) {
    return 0LL;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0LL;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v11);
    if (sub_1807438A0(ValueAtIndex, a3, a4)) {
      break;
    }
    if (v10 == ++v11) {
      return 0LL;
    }
  }

  return IORegistryEntryCreateCFProperty(a1, ValueAtIndex, 0LL, 0);
}

BOOL sub_180744A58(const char *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  BOOL v2 = NXGetArchInfoFromName(a1);
  if (v2)
  {
    CFIndex v3 = v2;
    uint64_t v4 = sub_180744658();
    *(void *)&fat_archs.cputype = *(void *)&v3->cputype;
    *(void *)&fat_archs.offset = 0LL;
    fat_archs.align = 0;
    return NXFindBestFatArch(v4, SHIDWORD(v4), &fat_archs, 1u) != 0LL;
  }

  else
  {
    CFTypeID v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v6) {
      uint64_t v12 = v6 + 1;
    }
    else {
      uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    }
    _MGLog((uint64_t)v12, 1011LL, (uint64_t)@"arch %s unknown", v7, v8, v9, v10, v11, (char)a1);
    BOOL v13 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
    BOOL result = 0LL;
    if (v13)
    {
      fat_archs.cputype = 136315138;
      *(void *)&fat_archs.cpusubtype = a1;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "arch %s unknown",  (uint8_t *)&fat_archs,  0xCu);
      return 0LL;
    }
  }

  return result;
}

BOOL sub_180744B6C(const __CFString *a1)
{
  BOOL v2 = (const __CFString *)MGGetStringAnswer((const char **)@"k7QIBwZJJOVw+Sej/8h8VA");
  if (!v2) {
    return 0LL;
  }
  CFIndex v3 = v2;
  BOOL v4 = CFStringCompare(v2, a1, 0LL) == kCFCompareEqualTo;
  CFRelease(v3);
  return v4;
}

BOOL sub_180744BC4(const char *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  int v2 = access(a1, 0);
  if (v2 && *__error() != 2)
  {
    CFIndex v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    BOOL v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v4) {
      CFIndex v3 = v4 + 1;
    }
    __error();
    _MGLog((uint64_t)v3, 1043LL, (uint64_t)@"access(2) %s: %{errno}d", v5, v6, v7, v8, v9, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *__error();
      *(_DWORD *)buf = 136315394;
      BOOL v13 = a1;
      __int16 v14 = 1024;
      int v15 = v10;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "access(2) %s: %{errno}d", buf, 0x12u);
    }
  }

  return v2 == 0;
}

CFStringRef sub_180744CE0(int a1)
{
  else {
    BOOL v1 = off_1896A0408[a1 - 1];
  }
  CFRetain(v1);
  return v1;
}

CFStringRef sub_180744D28(int a1)
{
  BOOL v1 = @"MGS_SIM_NULL_STATUS";
  if (a1 == 2) {
    BOOL v1 = @"MGS_SIM_TRAY_STATUS";
  }
  if (a1 == 1) {
    int v2 = @"MGS_SIM_STATUS";
  }
  else {
    int v2 = v1;
  }
  CFRetain(v2);
  return v2;
}

uint64_t sub_180744D74()
{
  return MGGetSInt64Answer((const char **)@"DeviceMemorySize", 0LL);
}

CFDataRef sub_180744D84()
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  int v0 = sub_180765E6C("IODeviceTree:/chosen", @"display-scale", 0, 0LL, 1);
  int v1 = sub_180765E6C("IODeviceTree:/chosen", @"display-rotation", 0, 0xFFFFFFFFLL, 1);
  if (v1 == -1) {
    float v2 = -1.0;
  }
  else {
    float v2 = (double)((360 - v1) % 360) * 0.0174532925;
  }
  if (sub_180743444() != 4 && sub_180743444() != 8 && sub_180743444() != 10)
  {
    *(void *)bytes = 0LL;
    uint64_t v14 = 0LL;
    int MainDisplay = IOMobileFramebufferGetMainDisplay();
    if (MainDisplay)
    {
      int v4 = MainDisplay;
      uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
      if (v5) {
        uint64_t v11 = v5 + 1;
      }
      else {
        uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
      }
      _MGLog( (uint64_t)v11,  64LL,  (uint64_t)@"IOMobileFramebufferGetMainDisplay failed: %d\n",  v6,  v7,  v8,  v9,  v10,  v4);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v18 = v4;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "IOMobileFramebufferGetMainDisplay failed: %d\n",  buf,  8u);
      }
    }
  }

  memset(bytes, 255, sizeof(bytes));
  LODWORD(v14) = -1;
  *((float *)&v14 + 1) = (float)v0;
  float v15 = v2;
  int v16 = -1;
  return CFDataCreate(0LL, bytes, 24LL);
}

CFNumberRef sub_1807450C4(unsigned int a1)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 4)
  {
    if (a1 > 6) {
      goto LABEL_6;
    }
    if (((1 << a1) & 6) != 0)
    {
      int v36 = -1;
      *(_DWORD *)buf = -1;
      uint64_t v23 = (unsigned int (*)(uint8_t *, int *))*((void *)off_18C533F28 + 34);
      if (!v23) {
        uint64_t v23 = (unsigned int (*)(uint8_t *, int *))sub_180746538(34LL, 2LL);
      }
      if (!v23(buf, &v36)) {
        return 0LL;
      }
      if (a1 == 1) {
        uint64_t v24 = buf;
      }
      else {
        uint64_t v24 = (uint8_t *)&v36;
      }
      return CFNumberCreate(0LL, kCFNumberSInt32Type, v24);
    }

    if (((1 << a1) & 0x30) == 0)
    {
      if (((1 << a1) & 0x48) != 0) {
        return 0LL;
      }
LABEL_6:
      float v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
      if (v2) {
        uint64_t v8 = v2 + 1;
      }
      else {
        uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
      }
      _MGLog((uint64_t)v8, 229LL, (uint64_t)@"request for unknown screen param %d", v3, v4, v5, v6, v7, a1);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT)) {
        sub_180799674(a1);
      }
      return 0LL;
    }
  }

  uint64_t v9 = (const __CFData *)MGCopyAnswer((const char **)@"oBbtJ8x+s1q0OkaiocPuog");
  uint64_t v10 = v9;
  if (v9)
  {
    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 == CFDataGetTypeID() && CFDataGetLength(v10) == 24)
    {
      BytePtr = CFDataGetBytePtr(v10);
      BOOL v13 = BytePtr;
      switch(a1)
      {
        case 1u:
          int v14 = *(_DWORD *)BytePtr;
          goto LABEL_44;
        case 2u:
          BOOL v13 = BytePtr + 4;
          int v14 = *((_DWORD *)BytePtr + 1);
          goto LABEL_44;
        case 3u:
          BOOL v13 = BytePtr + 8;
          int v14 = *((_DWORD *)BytePtr + 2);
          goto LABEL_44;
        case 4u:
          BOOL v13 = BytePtr + 12;
          float v33 = *((float *)BytePtr + 3);
          goto LABEL_41;
        case 5u:
          BOOL v13 = BytePtr + 16;
          float v33 = *((float *)BytePtr + 4);
LABEL_41:
          if (v33 == -1.0) {
            goto LABEL_47;
          }
          CFNumberType v34 = kCFNumberFloatType;
          goto LABEL_46;
        case 6u:
          BOOL v13 = BytePtr + 20;
          int v14 = *((_DWORD *)BytePtr + 5);
LABEL_44:
          if (v14 == -1) {
            goto LABEL_47;
          }
          CFNumberType v34 = kCFNumberSInt32Type;
LABEL_46:
          CFNumberRef v22 = CFNumberCreate(0LL, v34, v13);
          break;
        default:
          uint64_t v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
          if (v26) {
            uint64_t v32 = v26 + 1;
          }
          else {
            uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
          }
          _MGLog( (uint64_t)v32,  258LL,  (uint64_t)@"request for unknown screen param %d",  v27,  v28,  v29,  v30,  v31,  a1);
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            unsigned int v38 = a1;
            _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "request for unknown screen param %d",  buf,  8u);
          }

LABEL_47:
          CFNumberRef v22 = 0LL;
          break;
      }

  if ((_DWORD)result) {
    goto LABEL_46;
  }
  return result;
}

    uint64_t v7 = v25;
  }

  int v14 = 0LL;
  while (*(_DWORD *)(*(void *)(a1 + 344) + 4 * v14) != v10)
  {
LABEL_46:
    if (++v14 >= v13) {
      goto LABEL_47;
    }
  }

  float v15 = *(void *)(a1 + 360);
  if (!v15 || (uint64_t v16 = *(void *)(a1 + 368)) == 0)
  {
    sub_180784620(3LL, "%s: No SCDG in manifest, subCC digest missing");
    goto LABEL_54;
  }

  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  if (!sub_180787338(v15, v16, v10, &v18) && v19 && v18)
  {
    BOOL v13 = *(unsigned int *)(a1 + 352);
    goto LABEL_46;
  }

  sub_180784620(3LL, "%s: cannot find subCC digest for %u");
LABEL_54:
  uint64_t v17 = *(void *)a1 | 0x1000000000000000LL;
LABEL_55:
  *(void *)a1 = v17;
LABEL_56:
  if (v25) {
    free(v25);
  }
  return *(void *)a1;
}

LABEL_22:
      CFRelease(v10);
      return v22;
    }
  }

  float v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
  if (v15) {
    char v21 = v15 + 1;
  }
  else {
    char v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
  }
  _MGLog((uint64_t)v21, 236LL, (uint64_t)@"failed to get static screen info", v16, v17, v18, v19, v20, v35);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "failed to get static screen info",  buf,  2u);
  }

  CFNumberRef v22 = 0LL;
  if (v10) {
    goto LABEL_22;
  }
  return v22;
}

    CFDictionarySetValue(Mutable, @"SwBHValid", *v12);
    uint64_t v27 = (const __CFString *)MGCopyAnswer((const char **)@"h63QSdBCiT/z0WU6rdQv6Q");
    int v14 = v27;
    if (!v27 || !CFStringGetCString(v27, buffer, 50LL, 0x8000100u))
    {
      v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
      if (v41) {
        uint64_t v47 = v41 + 1;
      }
      else {
        uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
      }
      _MGLog((uint64_t)v47, 127LL, (uint64_t)@"Could not convert region code\n", v42, v43, v44, v45, v46, v84);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not convert region code\n",  buf,  2u);
      }

      float v15 = 0LL;
      goto LABEL_40;
    }

    uint64_t v28 = strlen(buffer);
    buffer[v28] = 9;
    uint64_t v29 = v28 + 1;
    buffer[v28 + 1] = 0;
    uint64_t v30 = sub_180743444() - 1;
    if (v30 < 0xB && ((0x477u >> v30) & 1) != 0)
    {
      __strcat_chk();
      v52 = fopen(v1, "r");
      if (v52)
      {
        float v15 = v52;
        while (1)
        {
          if (feof(v15)) {
            goto LABEL_33;
          }
          if (!fgets(v1, 1024, v15)) {
            break;
          }
          if (!strncmp(v1, buffer, v29))
          {
            char v85 = 0;
            if (sscanf(v1, "%*s\t0x%x", &v85) == 1)
            {
              uint64_t v19 = v85;
              goto LABEL_33;
            }

            uint64_t v76 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
            if (v76) {
              uint64_t v82 = v76 + 1;
            }
            else {
              uint64_t v82 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
            }
            _MGLog((uint64_t)v82, 184LL, (uint64_t)@"Error parsing line: '%s'\n", v77, v78, v79, v80, v81, (char)v1);
            uint64_t v83 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
            uint64_t v12 = (const void **)MEMORY[0x189604DE0];
            if (v83)
            {
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = v1;
              uint64_t v74 = (os_log_s *)MEMORY[0x1895F8DA0];
              uint64_t v75 = "Error parsing line: '%s'\n";
              goto LABEL_80;
            }

            goto LABEL_40;
          }
        }

        uint32_t v63 = feof(v15);
        uint64_t v12 = (const void **)MEMORY[0x189604DE0];
        if (!v63)
        {
          v64 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
          if (v64) {
            int v0 = v64 + 1;
          }
          uint64_t v65 = __error();
          uint64_t v66 = strerror(*v65);
          _MGLog((uint64_t)v0, 176LL, (uint64_t)@"Error reading file: %s\n", v67, v68, v69, v70, v71, v66);
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v72 = __error();
            uint64_t v73 = strerror(*v72);
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v73;
            uint64_t v74 = (os_log_s *)MEMORY[0x1895F8DA0];
            uint64_t v75 = "Error reading file: %s\n";
LABEL_80:
            _os_log_impl(&dword_180741000, v74, OS_LOG_TYPE_DEFAULT, v75, buf, 0xCu);
            goto LABEL_40;
          }
        }

        goto LABEL_40;
      }

      v53 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
      if (v53) {
        uint64_t v54 = v53 + 1;
      }
      else {
        uint64_t v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
      }
      uint64_t v55 = __error();
      strerror(*v55);
      _MGLog((uint64_t)v54, 169LL, (uint64_t)@"Could not open %s: %s\n", v56, v57, v58, v59, v60, (char)v1);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      v61 = __error();
      v62 = strerror(*v61);
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v1;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v62;
      unsigned int v38 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v39 = "Could not open %s: %s\n";
      v40 = 22;
    }

    else
    {
      uint64_t v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
      if (v31) {
        uint64_t v37 = v31 + 1;
      }
      else {
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
      }
      _MGLog((uint64_t)v37, 162LL, (uint64_t)@"device class not supported", v32, v33, v34, v35, v36, v84);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
LABEL_32:
        float v15 = 0LL;
LABEL_33:
        uint64_t v12 = (const void **)MEMORY[0x189604DE0];
        goto LABEL_40;
      }

      *(_WORD *)buf = 0;
      unsigned int v38 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v39 = "device class not supported";
      v40 = 2;
    }

    _os_log_impl(&dword_180741000, v38, OS_LOG_TYPE_DEFAULT, v39, buf, v40);
    goto LABEL_32;
  }

  uint64_t v19 = *(_DWORD *)CFDataGetBytePtr(v13);
  if ((v19 & 1) == 0) {
    goto LABEL_22;
  }
  CFDictionarySetValue(Mutable, @"SwBHValid", (const void *)*MEMORY[0x189604DE8]);
  float v15 = 0LL;
  int v14 = 0LL;
LABEL_40:
  if ((v19 & 1) != 0)
  {
    *(void *)&uint8_t buf[4] = 0LL;
    *(_DWORD *)&buf[12] = 0;
    *(_DWORD *)buf = v19;
    uint64_t v48 = CFDataCreate(v9, buf, 16LL);
    CFDictionarySetValue(Mutable, @"SoftwareBehavior", v48);
    CFRelease(v48);
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = sub_1807460EC;
    CFErrorRef v88 = &unk_1896A0508;
    __int16 v89 = Mutable;
    v90 = v19;
    v49 = off_1896A0530;
    v50 = -10LL;
    uint64_t v16 = (const void **)MEMORY[0x189604DE8];
    do
    {
      (*(void (**)(_BYTE *, void, void, __CFString *))&buf[16])( buf,  (v50 + 11),  *(v49 - 1),  *v49);
      v49 += 2;
    }

    while (!__CFADD__(v50++, 1LL));
  }

  else
  {
    uint64_t v16 = (const void **)MEMORY[0x189604DE0];
  }

  uint64_t v27 = *MEMORY[0x1896086A8];
  uint64_t v28 = IOServiceMatching("AppleHDQGasGaugeControl");
  MatchingService = IOServiceGetMatchingService(v27, v28);
  if (MatchingService)
  {
    IOObjectRelease(MatchingService);
    return 1LL;
  }

  uint64_t v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v31) {
    uint64_t v37 = v31 + 1;
  }
  else {
    uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog( (uint64_t)v37,  2999LL,  (uint64_t)@"No service matching AppleHDQGasGaugeControl",  v32,  v33,  v34,  v35,  v36,  v40);
  unsigned int v38 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
  BOOL result = 0LL;
  if (v38)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "No service matching AppleHDQGasGaugeControl",  buf,  2u);
    return 0LL;
  }

  return result;
}

    uint64_t v3 = 0LL;
    goto LABEL_23;
  }

  uint64_t v9 = (const __CFNumber *)v8;
  CFStringGetTypeID();
  uint64_t v3 = v9;
LABEL_8:
  uint64_t v10 = CFStringCompare((CFStringRef)v3, @"true", 0LL);
  CFTypeID v11 = (const __CFNumber **)MEMORY[0x189604DE8];
  if (v10 && CFStringCompare((CFStringRef)v3, @"1", 0LL)) {
    CFTypeID v11 = (const __CFNumber **)MEMORY[0x189604DE0];
  }
  uint64_t v3 = *v11;
  CFRelease(v1);
  if (v9)
  {
    uint64_t v12 = v9;
LABEL_24:
    CFRelease(v12);
  }

  return v3;
}

    CFRelease(v1);
    return 0LL;
  }

  uint64_t v6 = v5;
  if (!strcmp(v5, "AT"))
  {
    uint64_t v10 = 1LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = v7;
      if (v7 == 30) {
        break;
      }
      uint64_t v9 = strcmp(v6, off_1896F9888[v7 + 1]);
      uint64_t v7 = v8 + 1;
    }

    while (v9);
    uint64_t v10 = v8 < 0x1E;
  }

  CFRelease(v1);
  free(v6);
  return v10;
}

  BOOL v13 = *(unsigned int **)(a1 + 88);
  if (!v13) {
    goto LABEL_25;
  }
  if ((unint64_t)(*(void *)(a1 + 96) - 3LL) >= 2)
  {
    sub_180784620(3LL, "%s: Invalid data class length", v6);
LABEL_35:
    BOOL result = *(void *)a1 | 0x100000004000C00LL;
LABEL_36:
    *(void *)a1 = result;
    return result;
  }

  int v14 = sub_1807827D4(v13);
  if (v14 != v30)
  {
    sub_180784620(3LL, "%s: Payload type mismatch", v15);
    goto LABEL_35;
  }

uint64_t sub_1807453EC()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int MainDisplay = IOMobileFramebufferGetMainDisplay();
  if (MainDisplay)
  {
    int v1 = MainDisplay;
    float v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
    if (v2) {
      uint64_t v8 = v2 + 1;
    }
    else {
      uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
    }
    _MGLog((uint64_t)v8, 278LL, (uint64_t)@"IOMobileFramebufferGetMainDisplay failed: %d\n", v3, v4, v5, v6, v7, v1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v11 = v1;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "IOMobileFramebufferGetMainDisplay failed: %d\n",  buf,  8u);
    }
  }

  return 0LL;
}

const UInt8 *sub_1807455B0()
{
  if (qword_18C451F70 != -1) {
    dispatch_once(&qword_18C451F70, &unk_1896A0468);
  }
  BOOL result = (const UInt8 *)qword_18C451F78;
  if (qword_18C451F78) {
    return CFDataGetBytePtr((CFDataRef)qword_18C451F78);
  }
  return result;
}

uint64_t sub_1807455FC()
{
  if (qword_18C451F70 != -1) {
    dispatch_once(&qword_18C451F70, &unk_1896A0468);
  }
  return qword_18C451F78;
}

void sub_18074563C()
{
  int v0 = (const __CFData *)sub_180765DB4("IODeviceTree:/product", @"product-id", 0);
  qword_18C451F78 = (uint64_t)v0;
  if (!v0 || (v1 = v0, CFTypeID v2 = CFGetTypeID(v0), v2 != CFDataGetTypeID()) || CFDataGetLength(v1) != 20)
  {
    uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/device_map.c", 47);
    if (v3) {
      uint64_t v9 = v3 + 1;
    }
    else {
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/device_map.c";
    }
    _MGLog((uint64_t)v9, 58LL, (uint64_t)@"invalid product id '%@'", v4, v5, v6, v7, v8, qword_18C451F78);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT)) {
      sub_1807996F0();
    }
    if (qword_18C451F78) {
      CFRelease((CFTypeRef)qword_18C451F78);
    }
    qword_18C451F78 = 0LL;
  }

BOOL sub_180745710()
{
  if (qword_18C451F40 != -1) {
    dispatch_once(&qword_18C451F40, &unk_1896A04A8);
  }
  return dword_18C451EC4 != -1 && BYTE4(qword_18079DAC0[4 * dword_18C451EC4 + 2]) != 0;
}

uint64_t MGGetProductType()
{
  if (qword_18C451F40 != -1) {
    dispatch_once(&qword_18C451F40, &unk_1896A04A8);
  }
  if (dword_18C451EC4 == -1) {
    return -1LL;
  }
  else {
    return qword_18079DAC0[4 * dword_18C451EC4 + 3];
  }
}

const UInt8 *sub_1807457D8()
{
  BOOL result = sub_1807455B0();
  if (result)
  {
    uint64_t v1 = 0LL;
    for (i = qword_18079DAC0; ; i += 4)
    {
      BOOL v3 = *(void *)result == *i && *((void *)result + 1) == i[1];
      if (++v1 == 463) {
        return result;
      }
    }

    dword_18C451EC4 = v1;
  }

  return result;
}

uint64_t sub_180745838()
{
  if (qword_18C451F18 != -1) {
    dispatch_once(&qword_18C451F18, &unk_1896A04E8);
  }
  uint64_t v0 = qword_18C451F10;
  if (qword_18C451F10) {
    CFRetain((CFTypeRef)qword_18C451F10);
  }
  return v0;
}

void sub_180745890()
{
  uint64_t v97 = *MEMORY[0x1895F89C0];
  __int16 v96 = 0;
  __int128 v95 = 0u;
  __int128 v94 = 0u;
  *(_OWORD *)buffer = 0u;
  memcpy(__dst, "/Library/RegionFeatures/RegionFeatures_", sizeof(__dst));
  memcpy(v91, "/System/Library/RegionFeatures/RegionFeatures_", sizeof(v91));
  memset(&v86, 0, sizeof(v86));
  uint64_t v0 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
  if (stat("/Library/RegionFeatures", &v86) || (v86.st_mode & 0xF000) != 0x4000)
  {
    CFTypeID v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
    if (v2) {
      uint64_t v8 = v2 + 1;
    }
    else {
      uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
    }
    _MGLog( (uint64_t)v8,  96LL,  (uint64_t)@"RegionFeatures directory not found, using legacy path",  v3,  v4,  v5,  v6,  v7,  v84);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "RegionFeatures directory not found, using legacy path",  buf,  2u);
    }

    uint64_t v1 = v91;
  }

  else
  {
    uint64_t v1 = __dst;
  }

  uint64_t v9 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  int v11 = sub_180743444();
  uint64_t v12 = (const void **)MEMORY[0x189604DE0];
  if (v11 == 4)
  {
    BOOL v13 = 0LL;
    int v14 = 0LL;
    float v15 = 0LL;
    uint64_t v16 = (const void **)MEMORY[0x189604DE0];
    goto LABEL_45;
  }

  uint64_t v17 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen", @"software-behavior", 0);
  BOOL v13 = v17;
  if (!v17 || (CFTypeID v18 = CFGetTypeID(v17), v18 != CFDataGetTypeID()) || CFDataGetLength(v13) <= 3)
  {
    uint64_t v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
    }
    _MGLog( (uint64_t)v26,  113LL,  (uint64_t)@"Could not get software behavior data from the registry\n",  v21,  v22,  v23,  v24,  v25,  v84);
    int v19 = 0;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not get software behavior data from the registry\n",  buf,  2u);
      int v19 = 0;
    }

LABEL_45:
  CFDictionarySetValue(Mutable, @"RegionalBehaviorValid", *v16);
  if (sub_1807442E4(@"CH")) {
    CFDictionarySetValue(Mutable, @"RegionalBehaviorGB18030", (const void *)*MEMORY[0x189604DE8]);
  }
  if (sub_1807442E4(@"KH")) {
    CFDictionarySetValue(Mutable, @"RegionalBehaviorNoPasscodeLocationTiles", (const void *)*MEMORY[0x189604DE8]);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    fclose(v15);
  }
  qword_18C451F10 = (uint64_t)Mutable;
}

const void *sub_180746040()
{
  uint64_t v0 = (const __CFDictionary *)sub_180745838();
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFPropertyListRef Value = CFDictionaryGetValue(v0, @"SoftwareBehavior");
  uint64_t v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v1);
  return v3;
}

BOOL sub_180746094(uint64_t a1, const void *a2)
{
  uint64_t v3 = (const __CFDictionary *)sub_180745838();
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  BOOL v5 = CFDictionaryGetValue(v3, a2) == (const void *)*MEMORY[0x189604DE8];
  CFRelease(v4);
  return v5;
}

void sub_1807460EC(uint64_t a1, char a2, int a3, void *key)
{
  if (((*(_DWORD *)(a1 + 40) >> a2) & 1) != 0) {
    uint64_t v4 = (const void **)MEMORY[0x189604DE8];
  }
  else {
    uint64_t v4 = (const void **)MEMORY[0x189604DE0];
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), key, *v4);
}

uint64_t sub_180746120()
{
  if (qword_18C534148 != -1) {
    dispatch_once(&qword_18C534148, &unk_1896A0648);
  }
  return qword_18C534150;
}

char *sub_180746160()
{
  BOOL result = sub_180746184("hw.target");
  qword_18C534150 = (uint64_t)result;
  return result;
}

char *sub_180746184(const char *a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  *(_OWORD *)__s1 = 0u;
  __int128 v7 = 0u;
  size_t v3 = 128LL;
  if (sysctlbyname(a1, __s1, &v3, 0LL, 0LL) != -1) {
    return strdup(__s1);
  }
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    BOOL v5 = a1;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Could not lookup %s", buf, 0xCu);
  }

  return 0LL;
}

uint64_t sub_180746268()
{
  if (qword_18C451F50 != -1) {
    dispatch_once(&qword_18C451F50, &unk_1896A0688);
  }
  return qword_18C451F58;
}

char *sub_1807462A8()
{
  BOOL result = sub_180746184("hw.product");
  qword_18C451F58 = (uint64_t)result;
  return result;
}

uint64_t sub_1807462CC()
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  size_t v3 = 8LL;
  uint64_t v4 = 0LL;
  if (sysctlbyname("hw.memsize_physical", &v4, &v3, 0LL, 0LL) != -1) {
    return v4;
  }
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v1 = __error();
    CFTypeID v2 = strerror(*v1);
    *(_DWORD *)buf = 136315138;
    uint64_t v6 = v2;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "sysctlbyname: %s", buf, 0xCu);
  }

  return 0LL;
}

uint64_t sub_1807463A0()
{
  if (qword_18C451F20 != -1) {
    dispatch_once(&qword_18C451F20, &unk_1896A06C8);
  }
  return byte_18C534158;
}

uint64_t sub_1807463E0()
{
  int v2 = 0;
  size_t v1 = 4LL;
  uint64_t result = sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0LL, 0LL);
  if (!(_DWORD)result) {
    byte_18C534158 = v2 != 0;
  }
  return result;
}

BOOL sub_180746438()
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  int v5 = 255;
  size_t v4 = 4LL;
  if (sysctlbyname("kern.exclaves_status", &v5, &v4, 0LL, 0LL) != -1) {
    return v5 == 1;
  }
  BOOL v1 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
  BOOL result = 0LL;
  if (v1)
  {
    int v2 = __error();
    size_t v3 = strerror(*v2);
    *(_DWORD *)buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "sysctlbyname(kern.exclaves_status): %s",  buf,  0xCu);
    return 0LL;
  }

  return result;
}

void *sub_180746524(_DWORD *a1)
{
  *a1 = 2275;
  return &unk_1896A0858;
}

uint64_t sub_180746538(uint64_t a1, uint64_t a2)
{
  if (qword_18C451F88 != -1) {
    dispatch_once(&qword_18C451F88, &unk_1896A0748);
  }
  if (byte_18C451F80 == 1) {
    return (*((uint64_t (**)(uint64_t, uint64_t))off_18C533F28 + 41))(a1, a2);
  }
  pthread_mutex_lock(&stru_18C451ED0);
  int v5 = (uint64_t (*)())&unk_18C534160;
  if ((_DWORD)a2 != 1) {
    int v5 = 0LL;
  }
  if ((_DWORD)a2 == 2) {
    uint64_t v6 = sub_180746810;
  }
  else {
    uint64_t v6 = v5;
  }
  *((void *)off_18C533F28 + (int)a1) = v6;
  pthread_mutex_unlock(&stru_18C451ED0);
  return (uint64_t)v6;
}

void sub_180746604()
{
  if (getenv("DISABLE_GESTALT_DLOPEN"))
  {
    uint64_t v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v0) {
      uint64_t v6 = v0 + 1;
    }
    else {
      uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v6, 202LL, (uint64_t)@"disabling external functions", v1, v2, v3, v4, v5, v17[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "disabling external functions", buf, 2u);
    }
  }

  else
  {
    uint64_t v7 = dlopen("/usr/lib/libMobileGestaltExtensions.dylib", 1);
    if (v7)
    {
      uint64_t v8 = (void (*)(void *, uint64_t (*)(int), pthread_mutex_t *))dlsym(v7, "_MGSSetLazyFuncs");
      if (v8)
      {
        v8(off_18C533F28, sub_1807467C0, &stru_18C451ED0);
        __int128 v9 = &byte_18C451F80;
        goto LABEL_17;
      }
    }
  }

  if ((byte_18C451F80 & 1) != 0) {
    return;
  }
  __int128 v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v10) {
    uint64_t v16 = v10 + 1;
  }
  else {
    uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v16, 215LL, (uint64_t)@"couldn't load support library", v11, v12, v13, v14, v15, v17[0]);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "couldn't load support library", v17, 2u);
  }

  __int128 v9 = &byte_18C534128;
LABEL_17:
  char *v9 = 1;
}

const char *sub_180746774(char *__s1)
{
  uint64_t v1 = __s1;
  if (__s1)
  {
    if (strcmp(__s1, "/"))
    {
      uint64_t v2 = rindex(v1, 47);
      if (v2) {
        return v2 + 1;
      }
    }
  }

  return v1;
}

uint64_t sub_1807467C0(int a1)
{
  if (qword_18C452098 != -1) {
    dispatch_once(&qword_18C452098, &unk_1896F9AF0);
  }
  return pthread_setspecific(qword_18C452090, (const void *)a1);
}

uint64_t sub_180746810()
{
  uint64_t v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v0) {
    uint64_t v6 = v0 + 1;
  }
  else {
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v6, 185LL, (uint64_t)@"called dummy function!", v1, v2, v3, v4, v5, v8[0]);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "called dummy function!", v8, 2u);
  }

  return 0LL;
}

const char **sub_1807468A0(const char **result, int a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  __int16 v34 = 0;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  *(_OWORD *)buffer = 0u;
  __int128 v31 = 0u;
  if (!CFStringGetCString((CFStringRef)result, buffer, 66LL, 0x8000100u))
  {
    if (!a2) {
      return 0LL;
    }
    uint64_t v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    uint64_t v12 = v6 ? v6 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog( (uint64_t)v12,  252LL,  (uint64_t)@"string %@ is too long to be a valid gestalt question",  v7,  v8,  v9,  v10,  v11,  (char)v3);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return 0LL;
    }
    *(_DWORD *)__str = 138412290;
    uint64_t v36 = v3;
    uint64_t v13 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v14 = "string %@ is too long to be a valid gestalt question";
LABEL_29:
    _os_log_impl(&dword_180741000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)__str, 0xCu);
    return 0LL;
  }

  int v4 = strlen(buffer);
  BOOL result = sub_180746B84((unsigned __int8 *)buffer, v4);
  if (result) {
    return result;
  }
  CC_LONG v5 = snprintf(__str, 0x5EuLL, "%s%s", "MGCopyAnswer", buffer);
  if ((v5 & 0x80000000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)md = 136315138;
      unsigned int v38 = buffer;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Obfuscation error for %s", md, 0xCu);
    }
  }

  else
  {
    CC_MD5(__str, v5, md);
    if (!CNEncode())
    {
      v29[22] = 0;
      BOOL result = sub_180746B84(v29, 22);
      goto LABEL_22;
    }
  }

  if ((a2 & 1) == 0) {
    return 0LL;
  }
  uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v15) {
    uint64_t v21 = v15 + 1;
  }
  else {
    uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v21, 265LL, (uint64_t)@"failed to transform %@", v16, v17, v18, v19, v20, (char)v3);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__str = 138412290;
    uint64_t v36 = v3;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "failed to transform %@",  (uint8_t *)__str,  0xCu);
  }

  BOOL result = 0LL;
LABEL_22:
  if (!result && a2)
  {
    uint64_t v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v22) {
      int v28 = v22 + 1;
    }
    else {
      int v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v28,  270LL,  (uint64_t)@"string %@ is not a valid gestalt question",  v23,  v24,  v25,  v26,  v27,  (char)v3);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return 0LL;
    }
    *(_DWORD *)__str = 138412290;
    uint64_t v36 = v3;
    uint64_t v13 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v14 = "string %@ is not a valid gestalt question";
    goto LABEL_29;
  }

  return result;
}

const char **sub_180746B84(unsigned __int8 *a1, int a2)
{
  if (a2 != 22) {
    return 0LL;
  }
  int v3 = word_1807A2930[a1[11] + 4];
  unsigned int v5 = a1[1];
  int v4 = (const char *)(a1 + 1);
  uint64_t v6 = *a1;
  unsigned int v7 = v3 + word_1807A2930[v5 + 1] + word_1807A2930[v6] + 22;
  if (v7 > 0x8E2) {
    return 0LL;
  }
  uint64_t v8 = (const char **)((char *)&unk_1896A0858 + 160 * v7);
  uint64_t v9 = *v8;
  return v8;
}

const char **sub_180746C1C(const char **a1)
{
  return sub_1807468A0(a1, 1);
}

void _MGSetServer()
{
  byte_18C534128 = 1;
}

const void *_MGServerCopyAnswerWithError(uint64_t a1, const char **a2, unsigned int *a3, CFTypeRef *a4)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  CFTypeRef cf = 0LL;
  if ((byte_18C534128 & 1) == 0)
  {
    uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v15) {
      uint64_t v21 = v15 + 1;
    }
    else {
      uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v21,  355LL,  (uint64_t)@"_MGServerCopyAnswer(%@) called outside of server",  v16,  v17,  v18,  v19,  v20,  (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 138412290;
    CFTypeRef v56 = a2;
    uint64_t v22 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v23 = "_MGServerCopyAnswer(%@) called outside of server";
    uint32_t v24 = 12;
    goto LABEL_31;
  }

  uint64_t v8 = (uint64_t (*)(uint64_t))*((void *)off_18C533F28 + 35);
  if (!v8) {
    uint64_t v8 = (uint64_t (*)(uint64_t))sub_180746538(35LL, 2LL);
  }
  uint64_t v9 = v8(a1);
  uint64_t v10 = (uint64_t *)sub_1807468A0(a2, 1);
  if (v10)
  {
    uint64_t v11 = v10;
    if ((sub_180747004(v10, v9, (uint64_t)&cf) & 1) != 0)
    {
      uint64_t v12 = (uint64_t (*)(uint64_t, CFTypeRef *))v11[3];
      if (!v12 || (v12(a1, &cf) & 1) != 0)
      {
        uint64_t v13 = sub_18074776C(a2, 0LL);
        unsigned int v14 = sub_180763EDC();
        goto LABEL_33;
      }

      uint64_t v39 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v39) {
        uint64_t v45 = v39 + 1;
      }
      else {
        uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v45,  375LL,  (uint64_t)@"server_access_check denied access to question %@ for pid %d",  v40,  v41,  v42,  v43,  v44,  (char)a2);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 138412546;
      CFTypeRef v56 = a2;
      __int16 v57 = 1024;
      int v58 = v9;
      uint64_t v22 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v23 = "server_access_check denied access to question %@ for pid %d";
    }

    else
    {
      __int128 v32 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v32) {
        unsigned int v38 = v32 + 1;
      }
      else {
        unsigned int v38 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v38,  368LL,  (uint64_t)@"server asked to answer non-server question %@ for pid %d",  v33,  v34,  v35,  v36,  v37,  (char)a2);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 138412546;
      CFTypeRef v56 = a2;
      __int16 v57 = 1024;
      int v58 = v9;
      uint64_t v22 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v23 = "server asked to answer non-server question %@ for pid %d";
    }

    uint32_t v24 = 18;
LABEL_31:
    _os_log_impl(&dword_180741000, v22, OS_LOG_TYPE_DEFAULT, v23, buf, v24);
LABEL_32:
    uint64_t v13 = 0LL;
    unsigned int v14 = 9;
    goto LABEL_33;
  }

  uint64_t v25 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v25) {
    __int128 v31 = v25 + 1;
  }
  else {
    __int128 v31 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog( (uint64_t)v31,  363LL,  (uint64_t)@"server asked to answer unknown question %@ for pid %d",  v26,  v27,  v28,  v29,  v30,  (char)a2);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    CFTypeRef v56 = a2;
    __int16 v57 = 1024;
    int v58 = v9;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "server asked to answer unknown question %@ for pid %d",  buf,  0x12u);
  }

  uint64_t v13 = 0LL;
  unsigned int v14 = 5;
LABEL_33:
  if (a4)
  {
    *a4 = cf;
  }

  else if (cf)
  {
    uint64_t v46 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v46) {
      v52 = v46 + 1;
    }
    else {
      v52 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v52, 389LL, (uint64_t)@"%@", v47, v48, v49, v50, v51, (char)cf);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFTypeRef v56 = cf;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    CFRelease(cf);
  }

  if (a3) {
    *a3 = v14;
  }
  return v13;
}

uint64_t sub_180747004(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if ((byte_18C534128 & 1) != 0) {
    goto LABEL_15;
  }
  if (a1[18])
  {
    getpid();
    if (sandbox_check())
    {
      if (qword_18C451F68 != -1) {
        dispatch_once(&qword_18C451F68, &unk_1896A0788);
      }
      uint64_t v6 = (os_log_s *)qword_18C451F60;
      if (!os_log_type_enabled((os_log_t)qword_18C451F60, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      uint64_t v7 = *a1;
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = v7;
      uint64_t v8 = "elided IOKit fast path for key: %s";
      goto LABEL_14;
    }

    if (qword_18C451F68 != -1) {
      dispatch_once(&qword_18C451F68, &unk_1896A0788);
    }
    uint64_t v12 = (os_log_s *)qword_18C451F60;
    BOOL v13 = os_log_type_enabled((os_log_t)qword_18C451F60, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v13)
    {
      uint64_t v14 = *a1;
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = v14;
      uint64_t v15 = "taking IOKit fast path for key: %s";
LABEL_27:
      _os_log_impl(&dword_180741000, v12, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
      return 0LL;
    }
  }

  else
  {
    if ((a1[19] & 0x20) == 0)
    {
LABEL_15:
      if ((a1[19] & 2) != 0) {
        return 1LL;
      }
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))a1[2];
      if (v10) {
        return v10(a2, a3);
      }
      return 0LL;
    }

    getpid();
    if (sandbox_check())
    {
      if (qword_18C451F68 != -1) {
        dispatch_once(&qword_18C451F68, &unk_1896A0788);
      }
      uint64_t v6 = (os_log_s *)qword_18C451F60;
      if (!os_log_type_enabled((os_log_t)qword_18C451F60, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      uint64_t v9 = *a1;
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = v9;
      uint64_t v8 = "elided platform fast path for key: %s";
LABEL_14:
      _os_log_impl(&dword_180741000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0xCu);
      goto LABEL_15;
    }

    if (qword_18C451F68 != -1) {
      dispatch_once(&qword_18C451F68, &unk_1896A0788);
    }
    uint64_t v12 = (os_log_s *)qword_18C451F60;
    BOOL v16 = os_log_type_enabled((os_log_t)qword_18C451F60, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v16)
    {
      uint64_t v17 = *a1;
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = v17;
      uint64_t v15 = "taking platform fast path for key: %s";
      goto LABEL_27;
    }
  }

  return result;
}

const void *MGCopyAnswerWithError(const char **a1, uint64_t a2, _DWORD *a3)
{
  int v4 = sub_18074776C(a1, 0LL);
  if (a3) {
    *a3 = sub_180763EDC();
  }
  return v4;
}

uint64_t _MGGetFastPathLog()
{
  if (qword_18C451F68 != -1) {
    dispatch_once(&qword_18C451F68, &unk_1896A0788);
  }
  return qword_18C451F60;
}

os_log_t sub_180747310()
{
  os_log_t result = os_log_create("com.apple.MobileGestalt", "fast-path");
  qword_18C451F60 = (uint64_t)result;
  return result;
}

const char **_MGServerQuestionIsPlatform(const char **a1)
{
  os_log_t result = sub_1807468A0(a1, 1);
  if (result) {
    return (const char **)(((_BYTE)result[19] & 0x20) == 0);
  }
  return result;
}

uint64_t _MGWriteCacheOnHelper()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 44);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_180746538(44LL, 2LL);
  }
  return v0();
}

uint64_t _MGWriteRebuildCacheSentinel()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 48);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_180746538(48LL, 2LL);
  }
  return v0();
}

BOOL MGIsQuestionValid(const char **a1)
{
  return sub_1807468A0(a1, 0) != 0LL;
}

uint64_t MGSetAnswer(const char **a1, const void *a2)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  if (a1 && a2)
  {
    int v4 = sub_1807468A0(a1, 1);
    if (v4 && ((_BYTE)v4[19] & 4) != 0)
    {
      unsigned int v5 = SCPreferencesCreate( (CFAllocatorRef)*MEMORY[0x189604DB0],  @"com.apple.mobilegestalt.plist",  @"com.apple.mobilegestalt.plist");
      if (v5)
      {
        uint64_t v6 = v5;
        if (SCPreferencesLock(v5, 1u))
        {
          if (SCPreferencesSetValue(v6, (CFStringRef)a1, a2))
          {
            if (SCPreferencesCommitChanges(v6))
            {
              if (SCPreferencesApplyChanges(v6))
              {
                SCPreferencesUnlock(v6);
                uint64_t v7 = 0LL;
LABEL_11:
                CFRelease(v6);
                return v7;
              }

              uint64_t v47 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
              _MGLog( (uint64_t)v47,  897LL,  (uint64_t)@"Could not apply changes to SCPreferences",  v48,  v49,  v50,  v51,  v52,  v53);
              if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                uint64_t v33 = (os_log_s *)MEMORY[0x1895F8DA0];
                uint64_t v34 = "Could not apply changes to SCPreferences";
                goto LABEL_29;
              }

LABEL_30:
              uint64_t v7 = 2LL;
              goto LABEL_11;
            }

            uint64_t v41 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
            _MGLog( (uint64_t)v41,  896LL,  (uint64_t)@"Could not commit changes to SCPreferences",  v42,  v43,  v44,  v45,  v46,  v53);
            if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_30;
            }
            *(_WORD *)buf = 0;
            uint64_t v33 = (os_log_s *)MEMORY[0x1895F8DA0];
            uint64_t v34 = "Could not commit changes to SCPreferences";
          }

          else
          {
            uint64_t v35 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
            _MGLog( (uint64_t)v35,  895LL,  (uint64_t)@"Could not write value to SCPreferences",  v36,  v37,  v38,  v39,  v40,  v53);
            if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_30;
            }
            *(_WORD *)buf = 0;
            uint64_t v33 = (os_log_s *)MEMORY[0x1895F8DA0];
            uint64_t v34 = "Could not write value to SCPreferences";
          }
        }

        else
        {
          uint64_t v27 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
          _MGLog( (uint64_t)v27,  894LL,  (uint64_t)@"Could not acquire SCPreferences lock",  v28,  v29,  v30,  v31,  v32,  v53);
          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
          *(_WORD *)buf = 0;
          uint64_t v33 = (os_log_s *)MEMORY[0x1895F8DA0];
          uint64_t v34 = "Could not acquire SCPreferences lock";
        }

LABEL_29:
        uint64_t v7 = 2LL;
        _os_log_impl(&dword_180741000, v33, OS_LOG_TYPE_DEFAULT, v34, buf, 2u);
        goto LABEL_11;
      }

      uint64_t v21 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
      _MGLog( (uint64_t)v21,  891LL,  (uint64_t)@"Could not create SCPreferences session",  v22,  v23,  v24,  v25,  v26,  v53);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v7 = 2LL;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not create SCPreferences session",  buf,  2u);
        return v7;
      }
    }

    else
    {
      uint64_t v15 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
      _MGLog((uint64_t)v15, 887LL, (uint64_t)@"Key %@ is not settable", v16, v17, v18, v19, v20, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v55 = a1;
        _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Key %@ is not settable", buf, 0xCu);
      }
    }

    return 2LL;
  }

  uint64_t v9 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  _MGLog((uint64_t)v9, 886LL, (uint64_t)@"Question and answer must both be non-null", v10, v11, v12, v13, v14, v53);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Question and answer must both be non-null",  buf,  2u);
  }

  return 3LL;
}

  os_log_t result = sub_1807634C0(v7, v8, v9, v10, v11, v12, v13, v14, v16);
  if (result) {
    return result;
  }
LABEL_30:
  uint64_t v71 = 0LL;
  uint64_t v72 = 0;
  uint64_t v28 = (const __CFData *)sub_180766414("IODeviceTree:/product", @"rear-cam-offset-from-center", 0);
  if (v28)
  {
    uint64_t v29 = v28;
    if (CFDataGetLength(v28) == 20)
    {
      CFDataGetBytePtr(v29);
      CFDataGetLength(v29);
      __memcpy_chk();
    }

    else
    {
      CFIndex Length = CFDataGetLength(v29);
      uint64_t v38 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      uint64_t v39 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v39) {
        uint64_t v38 = v39 + 1;
      }
      if (Length == 16)
      {
        _MGLog((uint64_t)v38, 7750LL, (uint64_t)@"Taking legacy CameraOffset_2D path", v40, v41, v42, v43, v44, v70);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Taking legacy CameraOffset_2D path",  buf,  2u);
        }

        *(void *)buf = 0LL;
        *(void *)&buf[8] = 0LL;
        CFDataGetBytePtr(v29);
        CFDataGetLength(v29);
        __memcpy_chk();
        uint64_t v71 = *(void *)buf;
        uint64_t v72 = *(_DWORD *)&buf[8];
      }

      else
      {
        CFDataGetLength(v29);
        _MGLog( (uint64_t)v38,  7760LL,  (uint64_t)@"Property copyDeviceTreeProperty(IODeviceTree:/product %@) had an unexpected size of %zu instead of %zu or %zu.",  v45,  v46,  v47,  v48,  v49,  (char)@"rear-cam-offset-from-center");
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v50 = CFDataGetLength(v29);
          *(_DWORD *)buf = 138413058;
          *(void *)&uint8_t buf[4] = @"rear-cam-offset-from-center";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v50;
          v154 = 2048;
          v155 = 20LL;
          v156 = 2048;
          v157 = 16LL;
          _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Property copyDeviceTreeProperty(IODeviceTree:/product %@) had an unexpected size of %zu instead of %zu or %zu.",  buf,  0x2Au);
        }
      }
    }

    CFRelease(v29);
    if (v72)
    {
      uint64_t v59 = v71;
      else {
        uint64_t v60 = -(int)v71;
      }
      if (v71 >= 0) {
        v61 = HIDWORD(v71);
      }
      else {
        v61 = -HIDWORD(v71);
      }
      if (v60 <= v61) {
        uint64_t v59 = HIDWORD(v71);
      }
      v62 = (double)v59 / (double)v72;
      return sub_1807634C0(v51, v52, v53, v54, v55, v56, v57, v58, COERCE__INT64(v62));
    }
  }

  else
  {
    uint64_t v30 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v30) {
      uint64_t v36 = v30 + 1;
    }
    else {
      uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v36,  7741LL,  (uint64_t)@"Failed to copyDeviceTreeProperty(IODeviceTree:/product %@)",  v31,  v32,  v33,  v34,  v35,  (char)@"rear-cam-offset-from-center");
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = @"rear-cam-offset-from-center";
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to copyDeviceTreeProperty(IODeviceTree:/product %@)",  buf,  0xCu);
    }
  }

  int v63 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v63) {
    uint64_t v69 = v63 + 1;
  }
  else {
    uint64_t v69 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog( (uint64_t)v69,  7793LL,  (uint64_t)@"Unexpected camera_offset scale, malformed data provided",  v64,  v65,  v66,  v67,  v68,  v70);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Unexpected camera_offset scale, malformed data provided",  buf,  2u);
  }

  return 0LL;
}

  if (connection[0]) {
    IOServiceClose(connection[0]);
  }
  if (connection[1]) {
    IOObjectRelease(connection[1]);
  }
  return Mutable;
}

const void *MGCopyAnswer(const char **a1)
{
  return sub_18074776C(a1, 0LL);
}

const void *sub_18074776C(const char **a1, int *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  sub_1807467C0(0);
  if (!sub_1807468A0(a1, 1))
  {
    sub_1807467C0(5);
    uint64_t v8 = 0LL;
    int v6 = 0;
    goto LABEL_14;
  }

  int v4 = sub_1807468A0(a1, 1);
  if (!v4)
  {
    int v6 = 0;
LABEL_7:
    if (qword_18C534140 != -1) {
      dispatch_once(&qword_18C534140, &unk_1896F9B30);
    }
    if (!CFSetContainsValue((CFSetRef)qword_18C534138, a1)) {
      goto LABEL_13;
    }
    uint64_t v8 = sub_180764C54(a1);
LABEL_12:
    CFRelease(v8);
    sub_1807467C0(7);
LABEL_13:
    uint64_t v8 = 0LL;
    goto LABEL_14;
  }

  uint64_t v5 = (uint64_t)v4;
  int v6 = *((_DWORD *)v4 + 39);
  uint64_t v7 = sub_1807801E0((uint64_t)v4);
  if (v7)
  {
    uint64_t v8 = v7;
    goto LABEL_14;
  }

  if (!*(void *)(v5 + 8)) {
    goto LABEL_7;
  }
  if ((byte_18C534128 & 1) == 0)
  {
    uint64_t v10 = getpid();
    if (sub_180747004((uint64_t *)v5, v10, 0LL))
    {
      if (qword_18C451F38 != -1) {
        dispatch_once(&qword_18C451F38, &unk_1896F9B70);
      }
      if ((byte_18C534128 & 1) == 0)
      {
        sub_1807467C0(0);
        uint64_t v12 = (uint64_t (*)(const char **))*((void *)off_18C533F28 + 29);
        if (!v12) {
          uint64_t v12 = (uint64_t (*)(const char **))sub_180746538(29LL, 2LL);
        }
        uint64_t v8 = (const void *)v12(a1);
        if (v8 && (sub_180763940((uint64_t)a1, v8, v6) & 1) == 0)
        {
          CFRelease(v8);
          sub_1807467C0(7);
          uint64_t v8 = 0LL;
        }

        if (sub_180763EDC() == 9)
        {
          uint64_t v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          uint64_t v19 = v13 ? v13 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          _MGLog( (uint64_t)v19,  774LL,  (uint64_t)@"no access to %@ (see <rdar://problem/11744455>)",  v14,  v15,  v16,  v17,  v18,  (char)a1);
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = a1;
            _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "no access to %@ (see <rdar://problem/11744455>)",  buf,  0xCu);
          }
        }

LABEL_46:
        if (!v8) {
          goto LABEL_14;
        }
        goto LABEL_47;
      }
    }
  }

  if ((*(_BYTE *)(v5 + 152) & 1) != 0)
  {
    switch(v6)
    {
      case 5:
        *(_DWORD *)buf = (*(uint64_t (**)(void))(v5 + 8))();
        CFNumberType v11 = kCFNumberSInt32Type;
        break;
      case 6:
        *(void *)buf = (*(uint64_t (**)(void))(v5 + 8))();
        CFNumberType v11 = kCFNumberSInt64Type;
        break;
      case 7:
        *(_DWORD *)buf = (*(float (**)(void))(v5 + 8))();
        CFNumberType v11 = kCFNumberFloat32Type;
        break;
      case 11:
        int v20 = (*(uint64_t (**)(void))(v5 + 8))();
        uint64_t v21 = (const void **)MEMORY[0x189604DE8];
        if (!v20) {
          uint64_t v21 = (const void **)MEMORY[0x189604DE0];
        }
        uint64_t v8 = *v21;
        goto LABEL_46;
      default:
        uint64_t v22 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
        _MGLog((uint64_t)v22, 809LL, (uint64_t)@"can't convert type %d for %@", v23, v24, v25, v26, v27, v6);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v6;
          *(_WORD *)&buf[8] = 2112;
          *(void *)&buf[10] = a1;
          _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "can't convert type %d for %@",  buf,  0x12u);
        }

        goto LABEL_13;
    }

    uint64_t v8 = CFNumberCreate(0LL, v11, buf);
    goto LABEL_46;
  }

  uint64_t v8 = (const void *)(*(uint64_t (**)(void))(v5 + 8))();
  if (!v8) {
    goto LABEL_14;
  }
LABEL_47:
LABEL_14:
  if (a2) {
    *a2 = v6;
  }
  return v8;
}

    os_log_t result = 3LL;
    goto LABEL_20;
  }

  if (!*(void *)(a8 + 336))
  {
    sub_180784620(3LL, "%s: missing IM4C leaf public key OID");
    goto LABEL_19;
  }

  uint64_t v18 = 0LL;
  int v20 = *(_OWORD *)(a8 + 328);
  while (!sub_180782788((uint64_t)&v20, (*(void **)((char *)&off_18C533F30 + v18))[2]))
  {
    v18 += 8LL;
    if (v18 == 24) {
      goto LABEL_36;
    }
  }

  uint64_t v19 = *(uint64_t *)((char *)&off_18C533F30 + v18);
  uint64_t v17 = *(_DWORD *)(v19 + 8);
  if (!v17)
  {
LABEL_36:
    sub_180784620(3LL, "%s: invalid digest length");
    goto LABEL_19;
  }

const void *_MGCopyAnswerWithMode(const char **a1, int a2)
{
  int v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  if (!Mutable)
  {
    CFNumberType v11 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v11, 925LL, (uint64_t)@"failed to create options", v12, v13, v14, v15, v16, v23[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "failed to create options", buf, 2u);
    }

    return 0LL;
  }

  CFMutableDictionaryRef v6 = Mutable;
  int valuePtr = a2;
  CFNumberRef v7 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
  if (!v7)
  {
    uint64_t v17 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v17, 929LL, (uint64_t)@"failed to create CFNumber for mode", v18, v19, v20, v21, v22, v23[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "failed to create CFNumber for mode",  v23,  2u);
    }

    CFRelease(v6);
    return 0LL;
  }

  CFNumberRef v8 = v7;
  CFDictionarySetValue(v6, @"QueryMode", v7);
  uint64_t v9 = sub_18074776C(a1, 0LL);
  CFRelease(v6);
  CFRelease(v8);
  return v9;
}

__CFDictionary *MGCopyMultipleAnswers(const __CFArray *a1, const __CFDictionary *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, i);
      if (a2) {
        CFDictionaryGetValue(a2, ValueAtIndex);
      }
      CFNumberRef v8 = sub_18074776C((const char **)ValueAtIndex, 0LL);
      if (v8)
      {
        uint64_t v9 = v8;
        CFDictionaryAddValue(Mutable, ValueAtIndex, v8);
        CFRelease(v9);
      }
    }
  }

  return Mutable;
}

BOOL MGGetBoolAnswer(const char **a1)
{
  int v5 = 0;
  uint64_t v2 = sub_18074776C(a1, &v5);
  if (!v2) {
    return 0LL;
  }
  BOOL v3 = v2 == (const void *)*MEMORY[0x189604DE8];
  CFRelease(v2);
  return v3;
}

uint64_t MGGetSInt32Answer(const char **a1, unsigned int a2)
{
  unsigned int v4 = a2;
  if (sub_180747E9C(a1, 5, 5, kCFNumberSInt32Type, &v4)) {
    return v4;
  }
  else {
    return a2;
  }
}

BOOL sub_180747E9C(const char **a1, int a2, int a3, CFNumberType a4, void *a5)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  int v24 = 0;
  uint64_t v10 = (const __CFNumber *)sub_18074776C(a1, &v24);
  if (v24 != a2 && v24 != a3)
  {
    uint64_t v14 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    uint64_t v15 = qword_1896A07A8[a2];
    uint64_t v16 = qword_1896A07A8[a3];
    _MGLog( (uint64_t)v14,  992LL,  (uint64_t)@"%@ does not return %s or %s, actually returns %s",  v17,  v18,  v19,  v20,  v21,  (char)a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = qword_1896A07A8[v24];
      *(_DWORD *)buf = 138413058;
      uint64_t v26 = a1;
      __int16 v27 = 2080;
      uint64_t v28 = v15;
      __int16 v29 = 2080;
      uint64_t v30 = v16;
      __int16 v31 = 2080;
      uint64_t v32 = v23;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%@ does not return %s or %s, actually returns %s",  buf,  0x2Au);
    }

    abort();
  }

  uint64_t v12 = v10;
  if (v10)
  {
    if (!CFNumberGetValue(v10, a4, a5)) {
      sub_18079983C(a2, (uint64_t)a1, (uint64_t)v12);
    }
    CFRelease(v12);
  }

  return v12 != 0LL;
}

uint64_t MGGetSInt64Answer(const char **a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (sub_180747E9C(a1, 5, 6, kCFNumberSInt64Type, &v4)) {
    return v4;
  }
  else {
    return a2;
  }
}

BOOL MGGetFloat32Answer(const char **a1, float a2)
{
  float v3 = a2;
  return sub_180747E9C(a1, 7, 7, kCFNumberFloat32Type, &v3);
}

const void *MGGetStringAnswer(const char **a1)
{
  int v5 = 0;
  uint64_t v1 = sub_18074776C(a1, &v5);
  uint64_t v2 = v1;
  if (v1)
  {
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 != CFStringGetTypeID())
    {
      CFRelease(v2);
      return 0LL;
    }
  }

  return v2;
}

const UInt8 *MGIsDeviceOfType(const UInt8 *result)
{
  if (result)
  {
    uint64_t v1 = result;
    os_log_t result = sub_1807455B0();
    if (result) {
      return (const UInt8 *)(*(void *)v1 == *(void *)result
    }
                          && *((void *)v1 + 1) == *((void *)result + 1)
                          && *((_DWORD *)v1 + 4) == (unint64_t)*((unsigned int *)result + 4));
  }

  return result;
}

uint64_t MGIsDeviceOneOfType( const UInt8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v12 = (const UInt8 **)&a9;
  do
  {
    uint64_t v10 = v12++;
    BOOL v9 = *v10 != 0LL;
  }

  while (*v10 && !MGIsDeviceOfType(*v10));
  return v9;
}

uint64_t MGRegisterForBulkUpdates(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1895F89C0];
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v8 = 0LL;
    CFMutableDictionaryRef Mutable = 0LL;
    uint64_t v10 = (const CFArrayCallBacks *)MEMORY[0x189605228];
    do
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, v8);
      if (!sub_1807468A0((const char **)ValueAtIndex, 1))
      {
        if (!Mutable) {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, v10);
        }
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }

      ++v8;
    }

    while (Count != v8);
    if (Mutable)
    {
      uint64_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v12) {
        uint64_t v18 = v12 + 1;
      }
      else {
        uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v18,  1127LL,  (uint64_t)@"no registration performed because invalid questions were passed in: %@",  v13,  v14,  v15,  v16,  v17,  (char)Mutable);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v68 = Mutable;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "no registration performed because invalid questions were passed in: %@",  buf,  0xCu);
      }

      CFRelease(Mutable);
      return -1LL;
    }
  }

  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))*((void *)off_18C533F28 + 33);
  if (!v19) {
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))sub_180746538(33LL, 2LL);
  }
  uint64_t v20 = v19(a3, a4);
  if (!v20)
  {
    uint64_t v50 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v50) {
      uint64_t v56 = v50 + 1;
    }
    else {
      uint64_t v56 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v56, 1134LL, (uint64_t)@"failed to create notification object", v51, v52, v53, v54, v55, v66);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "failed to create notification object",  buf,  2u);
    }

    return -1LL;
  }

  uint64_t v21 = v20;
  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      uint64_t v23 = (const char **)CFArrayGetValueAtIndex(a1, i);
      int v24 = sub_1807468A0(v23, 1);
      if (*((_DWORD *)v24 + 8))
      {
        uint64_t v25 = 0LL;
        uint64_t v26 = v24 + 9;
        while (1)
        {
          __int16 v27 = (char *)v26 + 4 * v25;
          uint64_t v28 = *((unsigned int *)v27 - 10);
          if ((_DWORD)v28)
          {
            __int16 v29 = (uint64_t (*)(uint64_t, uint64_t, const char *, const char **))*((void *)off_18C533F28 + 46);
            if (!v29)
            {
              __int16 v29 = (uint64_t (*)(uint64_t, uint64_t, const char *, const char **))sub_180746538(46LL, 2LL);
              uint64_t v28 = *((unsigned int *)v27 - 10);
            }

            if ((v29(v21, v28, v26[v25], v23) & 1) == 0) {
              break;
            }
          }

          if (++v25 == 9) {
            goto LABEL_37;
          }
        }

        __int16 v57 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v57) {
          int v63 = v57 + 1;
        }
        else {
          int v63 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog( (uint64_t)v63,  1153LL,  (uint64_t)@"notification registration for %@ failed",  v58,  v59,  v60,  v61,  v62,  (char)v23);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v68 = v23;
          uint64_t v48 = (os_log_s *)MEMORY[0x1895F8DA0];
          uint64_t v49 = "notification registration for %@ failed";
LABEL_56:
          _os_log_impl(&dword_180741000, v48, OS_LOG_TYPE_DEFAULT, v49, buf, 0xCu);
        }

        goto LABEL_57;
      }

      char v30 = *((_BYTE *)v24 + 152);
      __int16 v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v31) {
        uint64_t v37 = v31 + 1;
      }
      else {
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      if ((v30 & 8) != 0)
      {
        _MGLog( (uint64_t)v37,  1144LL,  (uint64_t)@"%@ is static and will never generate a notification",  v32,  v33,  v34,  v35,  v36,  (char)v23);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v68 = v23;
          uint64_t v38 = (os_log_s *)MEMORY[0x1895F8DA0];
          uint64_t v39 = "%@ is static and will never generate a notification";
          goto LABEL_36;
        }
      }

      else
      {
        _MGLog( (uint64_t)v37,  1146LL,  (uint64_t)@"%@ cannot generate notifications yet",  v32,  v33,  v34,  v35,  v36,  (char)v23);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v68 = v23;
          uint64_t v38 = (os_log_s *)MEMORY[0x1895F8DA0];
          uint64_t v39 = "%@ cannot generate notifications yet";
LABEL_36:
          _os_log_impl(&dword_180741000, v38, OS_LOG_TYPE_DEFAULT, v39, buf, 0xCu);
        }
      }

LABEL_37:
      ;
    }
  }

  uint64_t v40 = (uint64_t (*)(uint64_t))*((void *)off_18C533F28 + 49);
  if (!v40) {
    uint64_t v40 = (uint64_t (*)(uint64_t))sub_180746538(49LL, 2LL);
  }
  if ((v40(v21) & 1) == 0)
  {
    uint64_t v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v41) {
      uint64_t v47 = v41 + 1;
    }
    else {
      uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v47, 1163LL, (uint64_t)@"can't start notifications for %@", v42, v43, v44, v45, v46, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v68 = a1;
      uint64_t v48 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v49 = "can't start notifications for %@";
      goto LABEL_56;
    }

    uint64_t v15 = 1LL;
    while (v15 != 48)
    {
      uint64_t v16 = *(_DWORD *)&aMnrsBlmcamwcam[4 * v15++];
      if (v16 == a1)
      {
        break;
      }
    }

    uint64_t v35 = ((__int16)a1 >> 8);
    uint64_t v36 = (char)a1;
    uint64_t v33 = (a1 >> 24);
    uint64_t v34 = (a1 << 8 >> 24);
    uint64_t v17 = "%s: Unsupported tag found in manifest '%c%c%c%c'";
LABEL_42:
    uint64_t v18 = 7LL;
LABEL_51:
    sub_180784620(v18, v17, "_AMFDRDecodeVerifyDataCallback", v33, v34, v35, v36);
    return 0LL;
  }

  if (a1 == 1717660003)
  {
    LOBYTE(__s1) = 0;
    if (!sub_18078AB90((uint64_t)a2, 1717660003LL, (BOOL *)&__s1))
    {
      CFMutableDictionaryRef v6 = 0LL;
      *(_BYTE *)(a4 + 2004) = (_BYTE)__s1;
      return v6;
    }

    CFMutableDictionaryRef v6 = 3LL;
    sub_180784620(3LL, "%s: Img4DecodeGetPropertyData(kFDRTag_faic) failed.", "_AMFDRDecodeVerifyDataCallback");
    uint64_t v10 = *(void *)a4 | 0x400000000LL;
LABEL_100:
    *(void *)a4 = v10;
    return v6;
  }

  if (a1 != 1768846196)
  {
    if (a1 == 1886546276)
    {
      int v5 = sub_18078AC10(a2, 1886546276LL, &v39, &v40);
      if ((_DWORD)v5)
      {
        CFMutableDictionaryRef v6 = v5;
        sub_180784620(3LL, "%s: Img4DecodeGetPropertyData(kFDRTag_prid) failed.");
LABEL_36:
        uint64_t v10 = *(void *)a4 | 0x2000LL;
        goto LABEL_100;
      }

      uint64_t v19 = v39;
      uint64_t v20 = v40;
      *(void *)(a4 + 200) = v39;
      *(void *)(a4 + 208) = v20;
      if (!*(void *)(a4 + 1944) || !*(void *)(a4 + 1952))
      {
        sub_180784620(4LL, "%s: Skipping revocation check (trustobject unset)", "_AMFDRDecodeVerifyDataCallback");
        CFMutableDictionaryRef v6 = 0LL;
        uint64_t v10 = *(void *)a4 | 0x200000LL;
        goto LABEL_100;
      }

      uint64_t v21 = sub_180784B78(a4 + 1768, (uint64_t)v19, v20);
      if (v21)
      {
        uint64_t v22 = v21;
        CFMutableDictionaryRef v6 = 3LL;
        sub_180784620( 3LL,  "%s: AMFDRDecodeCheckProducerIDRevocation failed with error 0x%016llX",  "_AMFDRDecodeVerifyDataCallback",  v21);
        uint64_t v10 = *(void *)a4 | v22;
        goto LABEL_100;
      }

      return 0LL;
    }

    goto LABEL_37;
  }

  uint64_t v12 = sub_18078AC10(a2, 1768846196LL, &v39, &v40);
  if ((_DWORD)v12)
  {
    CFMutableDictionaryRef v6 = v12;
    sub_180784620(3LL, "%s: Img4DecodeGetPropertyData(kFDRTag_inst) failed.", "_AMFDRDecodeVerifyDataCallback");
LABEL_30:
    uint64_t v10 = *(void *)a4 | 0x4000LL;
    goto LABEL_100;
  }

  if (a3 == 1)
  {
    char v30 = *(void **)(a4 + 104);
    if (v30)
    {
      __int16 v31 = *(void *)(a4 + 112);
      if (v31)
      {
        sub_180784620(3LL, "%s: kFDRTag_inst property != fdrDecode->uniqueID");
        goto LABEL_91;
      }
    }

    if ((*(_BYTE *)(a4 + 2017) & 0x20) == 0)
    {
      sub_180784620(3LL, "%s: no uniqueID is specified, cannot verify kFDRTag_inst property");
LABEL_91:
      CFMutableDictionaryRef v6 = 0LL;
      goto LABEL_30;
    }

    uint64_t v17 = "%s: no uniqueID is specified, but this is allowed, skip comparing kFDRTag_inst object property";
LABEL_103:
    uint64_t v18 = 3LL;
    goto LABEL_51;
  }

  if (a3) {
    return 0LL;
  }
  CFMutableDictionaryRef v6 = 0LL;
  if ((sub_180787168( v39,  v40,  *(void **)(a4 + 136),  *(void *)(a4 + 144),  *(const void **)(a4 + 168),  *(void *)(a4 + 176),  0,  (void *)a4) & 1) == 0)
  {
    sub_180784620(3LL, "%s: kFDRTag_inst property != fdrDecode->manifestUniqueID", "_AMFDRDecodeVerifyDataCallback");
    CFMutableDictionaryRef v6 = 0LL;
    uint64_t v10 = *(void *)a4 | 0x40000000LL;
    goto LABEL_100;
  }

  return v6;
}

LABEL_57:
    v64 = (void (*)(uint64_t))*((void *)off_18C533F28 + 28);
    if (!v64) {
      v64 = (void (*)(uint64_t))sub_180746538(28LL, 2LL);
    }
    v64(v21);
    return -1LL;
  }

  return v21;
}

      if (!a2) {
        return v4;
      }
      goto LABEL_47;
    }
  }

  if (v11 != 1)
  {
    sub_180784620(3LL, "%s: Outer DER did not terminate properly.");
    goto LABEL_42;
  }

  if (!v8)
  {
    sub_180784620(3LL, "%s: End of Outer Sequence found, before any valid DER.");
    goto LABEL_42;
  }

  return 0LL;
}

uint64_t MGRegisterForUpdates(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  v5[2] = sub_1807486C0;
  v5[3] = &unk_1896A0838;
  v5[4] = a4;
  return MGRegisterForBulkUpdates(a1, a2, a3, (uint64_t)v5);
}

void sub_1807486C0(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = sub_18074871C;
  v3[3] = &unk_1896A0810;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = a3;
  sub_180743C7C(a2, (uint64_t)v3);
}

uint64_t sub_18074871C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  *(void *)(a1 + 40));
}

uint64_t MGCancelNotifications(uint64_t result)
{
  if ((unint64_t)(result + 1) >= 2)
  {
    uint64_t v1 = result;
    uint64_t v2 = (uint64_t (*)(uint64_t))*((void *)off_18C533F28 + 28);
    if (!v2) {
      uint64_t v2 = (uint64_t (*)(uint64_t))sub_180746538(28LL, 2LL);
    }
    return v2(v1);
  }

  return result;
}

CFNumberRef sub_18074877C(const __CFString *a1, const char **a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  CFNumberRef result = sub_180766200("IODeviceTree:/product", a1, 0);
  if (!result)
  {
    int v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v5) {
      CFNumberType v11 = v5 + 1;
    }
    else {
      CFNumberType v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v11,  6227LL,  (uint64_t)@"No %@ size defined. Assuming display size",  v6,  v7,  v8,  v9,  v10,  (char)a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v13 = a1;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "No %@ size defined. Assuming display size",  buf,  0xCu);
    }

    return (CFNumberRef)sub_18074776C(a2, 0LL);
  }

  return result;
}

CFStringRef sub_180748878()
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v0 = (const __CFData *)sub_18074776C((const char **)@"PxEDp0oOasJ92F/V7YBa8A", 0LL);
  unsigned int v1 = sub_180763EDC();
  if (v0) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    if (CFDataGetLength(v0) > 16)
    {
      BytePtr = CFDataGetBytePtr(v0);
      CFStringRef v11 = CFStringCreateWithBytes(0LL, BytePtr, 17LL, 0x600u, 0);
      uint64_t v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v21) {
        __int16 v27 = v21 + 1;
      }
      else {
        __int16 v27 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v27,  8465LL,  (uint64_t)@"Copy ScreenSerialNumber: cfScreenSN %@",  v22,  v23,  v24,  v25,  v26,  (char)v11);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        CFIndex v30 = (CFIndex)v11;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Copy ScreenSerialNumber: cfScreenSN %@",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      uint64_t v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v13) {
        uint64_t v12 = v13 + 1;
      }
      char Length = CFDataGetLength(v0);
      _MGLog( (uint64_t)v12,  8461LL,  (uint64_t)@"RawPanelSerialNumber Invalid Length: %ld",  v15,  v16,  v17,  v18,  v19,  Length);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        CFIndex v30 = CFDataGetLength(v0);
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "RawPanelSerialNumber Invalid Length: %ld",  buf,  0xCu);
      }

      sub_1807467C0(7);
      CFStringRef v11 = 0LL;
    }

    goto LABEL_23;
  }

  unsigned int v3 = v1;
  uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v4) {
    uint64_t v10 = v4 + 1;
  }
  else {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog( (uint64_t)v10,  8468LL,  (uint64_t)@"Failed Copy ScreenSerialNumber: cfScreenSN %@, error %d",  v5,  v6,  v7,  v8,  v9,  0);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    CFIndex v30 = 0LL;
    __int16 v31 = 1024;
    unsigned int v32 = v3;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed Copy ScreenSerialNumber: cfScreenSN %@, error %d",  buf,  0x12u);
  }

  CFStringRef v11 = 0LL;
  if (v0) {
LABEL_23:
  }
    CFRelease(v0);
  return v11;
}

BOOL sub_180748AE4()
{
  return sub_1807661A8("IODeviceTree:/product", @"ch7KBY7aSsznfICVzjFldw", 101);
}

CFNumberRef sub_180748AFC()
{
  return sub_1807450C4(6u);
}

CFTypeRef sub_180748B04()
{
  return sub_180760A48(@"BackCameraModuleSerialNumString");
}

BOOL sub_180748B10(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"nWFV2qG2TjSuH7vZFCdi4w", a2);
}

BOOL sub_180748B34(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"nWFV2qG2TjSuH7vZFCdi4w", 82, a2);
}

uint64_t sub_180748B48()
{
  if (sub_180743A48((BOOL)@"M9")
    || sub_180743A48((BOOL)@"M10")
    || sub_180743A48((BOOL)@"H9")
    || sub_180743A48((BOOL)@"H10"))
  {
    return 0LL;
  }

  if (sub_180743A48((BOOL)@"H11") || sub_180743A48((BOOL)@"H12")) {
    return 1LL;
  }
  if (sub_180743AF0((BOOL)@"H13")) {
    return 2LL;
  }
  return 0LL;
}

BOOL sub_180748BE0()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"vTKPWiAZkQifTv/4/uOnQQ", 102);
}

BOOL sub_180748BF8()
{
  return sub_1807661A8("IODeviceTree:/buttons", @"Ov9G2lRzQYbUyBYJ0KCMhA", 102);
}

uint64_t sub_180748C10()
{
  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1) {
    return sub_180743444() == 3;
  }
  return result;
}

BOOL sub_180748C38()
{
  return sub_1807661A8("IODeviceTree:/product/maps", @"1z6Kk4xUAVLdaBPGugsDSA", 110);
}

const void *sub_180748C50()
{
  return sub_180766414("IODeviceTree:/product/audio", @"EuGnCiDhD1LBnMc96k/GQQ", 115);
}

uint64_t sub_180748C68()
{
  return 1LL;
}

uint64_t sub_180748C70()
{
  if (!sub_180743A48((BOOL)@"H9"))
  {
    unsigned int v1 = MGGetStringAnswer((const char **)@"5pYKlGnYYBzGvAlIU8RjEQ");
    if (v1)
    {
      BOOL v2 = v1;
      BOOL v0 = CFEqual(v1, @"s8001") != 0;
      CFRelease(v2);
      return v0;
    }

    return 0LL;
  }

  return 1LL;
}

CFNumberRef sub_180748CF8()
{
  int valuePtr = 0;
  BOOL v0 = sub_180766200("IODeviceTree:/buttons", @"home-button-type", 0);
  if (v0)
  {
    unsigned int v1 = v0;
    if (!CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr)) {
      int valuePtr = 0;
    }
    CFRelease(v1);
  }

  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt32Type, &valuePtr);
}

uint64_t sub_180748D70()
{
  int v1 = 0;
  LODWORD(result) = sub_180747E9C((const char **)@"eW5H/Gwg0uqbMqFot70pYg", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 1) {
    return result;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_180748DB4()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 7
    || sub_180743444() == 4
    || sub_180743444() == 3
    || sub_180743444() == 2
    || sub_180743444() == 1
    || sub_180743444() == 11
    || sub_180743444() == 8)
  {
    uint64_t v7 = MEMORY[0x189604DE0];
  }

  else
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -526227167;
    __int128 v10 = xmmword_1807A255C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x189604DE0];
    if (!v9) {
      uint64_t v7 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v7;
}

BOOL sub_180748EBC()
{
  return sub_1807661DC("IODeviceTree:/chosen", @"E3qwwdwgUSy6FV6VC+Uf3A", 114);
}

uint64_t sub_180748ED4()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 7
    || sub_180743444() == 4
    || sub_180743444() == 3
    || sub_180743444() == 2
    || sub_180743444() == 1
    || sub_180743444() == 11
    || sub_180743444() == 8)
  {
    uint64_t v7 = MEMORY[0x189604DE0];
  }

  else
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -526227167;
    __int128 v10 = xmmword_1807A255C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x189604DE0];
    if (!v9) {
      uint64_t v7 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v7;
}

BOOL sub_180748FDC()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"ItOvlwIhFj2aCXL4wk3ijg", 102);
}

BOOL sub_180748FF4()
{
  return sub_1807661A8("IODeviceTree:/product", @"2ViNo1fbaEkg2vdTmCiW7g", 112);
}

uint64_t sub_18074900C()
{
  int v0 = sub_180765E6C("IODeviceTree:/product", @"multiuser-sessions", 0, 0LL, 1);
  uint64_t v1 = MEMORY[0x189604DE0];
  if (v0) {
    uint64_t v1 = MEMORY[0x189604DE8];
  }
  return *(void *)v1;
}

BOOL sub_180749058()
{
  return sub_180743444() == 3 && sub_1807651CC(1, "AWCSMahiDeviceInfo");
}

CFNumberRef sub_18074908C()
{
  return sub_180766200("IODeviceTree:/product/camera", @"IUvPFaILUl3l0684dR0AlA", 102);
}

CFTypeRef sub_1807490A4()
{
  return sub_180765200(1, "rose", @"ChipID");
}

BOOL sub_1807490BC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"nhGhVMyvrWYe9U2ltAUImg", a2);
}

BOOL sub_1807490E0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"nhGhVMyvrWYe9U2ltAUImg", 65, a2);
}

BOOL sub_1807490F4()
{
  return !sub_1807661A8("IODeviceTree:/product", @"oTuH4/axV9s11/jKxB2z2A", 117);
}

CFNumberRef sub_180749120()
{
  BOOL v2 = 0;
  if (sub_18076B664(@"edmd", &v2))
  {
    int v3 = 1;
    p_int valuePtr = &v3;
    return CFNumberCreate(0LL, kCFNumberSInt32Type, p_valuePtr);
  }

  if (v2)
  {
    int valuePtr = 0;
    p_int valuePtr = &valuePtr;
    return CFNumberCreate(0LL, kCFNumberSInt32Type, p_valuePtr);
  }

  return 0LL;
}

uint64_t sub_180749184()
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  CFTypeRef v0 = sub_180765200(0, "IOPMPowerSource", @"BatteryInstalled");
  if (v0)
  {
    uint64_t v1 = v0;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      if (CFBooleanGetValue((CFBooleanRef)v1))
      {
        CFRelease(v1);
        return 1LL;
      }

      uint64_t v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v20) {
        uint64_t v26 = v20 + 1;
      }
      else {
        uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v26, 2982LL, (uint64_t)@"BatteryInstalledKey: false", v21, v22, v23, v24, v25, v39);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      *(_WORD *)buf = 0;
      uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v18 = "BatteryInstalledKey: false";
      uint32_t v19 = 2;
    }

    else
    {
      __int128 v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v10) {
        uint64_t v16 = v10 + 1;
      }
      else {
        uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v16,  2985LL,  (uint64_t)@"Unsupported type %@ from copyIORegistryServiceProperty BatteryInstalledKey",  v11,  v12,  v13,  v14,  v15,  (char)v1);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v42 = v1;
      uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v18 = "Unsupported type %@ from copyIORegistryServiceProperty BatteryInstalledKey";
      uint32_t v19 = 12;
    }

    _os_log_impl(&dword_180741000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v19);
LABEL_21:
    CFRelease(v1);
    goto LABEL_22;
  }

  int v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v3) {
    int v9 = v3 + 1;
  }
  else {
    int v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog( (uint64_t)v9,  2989LL,  (uint64_t)@"No PowerSource service property BatteryInstalledKey",  v4,  v5,  v6,  v7,  v8,  v39);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "No PowerSource service property BatteryInstalledKey",  buf,  2u);
  }

BOOL sub_18074942C()
{
  return *MEMORY[0x189604DE8] != 0LL;
}

__CFArray *sub_180749444()
{
  return sub_1807669EC(@"decoding");
}

CFStringRef sub_180749450()
{
  CFTypeRef v0 = (const __CFData *)sub_18074776C((const char **)@"eZS2J+wspyGxqNYZeZ/sbA", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_18074956C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"gI6iODv8MZuiP0IA+efJCw", a2);
}

BOOL sub_180749590(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"gI6iODv8MZuiP0IA+efJCw", 87, a2);
}

CFStringRef sub_1807495A4()
{
  CFStringRef result = SCDynamicStoreCopyComputerName(0LL, 0LL);
  if (!result)
  {
    uint64_t v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1) {
      uint64_t v7 = v1 + 1;
    }
    else {
      uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v7,  5689LL,  (uint64_t)@"Failed to get Computer Name, returning device name",  v2,  v3,  v4,  v5,  v6,  v8[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v8 = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to get Computer Name, returning device name",  v8,  2u);
    }

    return (CFStringRef)sub_18074776C((const char **)@"vme9Buk6XiWFCXoHApxNFA", 0LL);
  }

  return result;
}

CFNumberRef sub_180749650()
{
  return sub_180766200("IODeviceTree:/product/audio", @"7pq6UGJM2TaOP2brCspvyA", 97);
}

BOOL sub_180749668()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"PxLTGkQx9GkeYcJKOaZguA", 118);
}

CFNumberRef sub_180749680()
{
  return sub_180766200("IODeviceTree:/product/audio", @"jkRyJt34tZOjsO1YhVc0mw", 115);
}

CFNumberRef sub_180749698()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int valuePtr = 1;
  int v3 = 1839812531;
  __int128 v2 = xmmword_1807A1E90;
  return CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
}

BOOL sub_180749760()
{
  return sub_1807661A8("IODeviceTree:/product", @"MWpHV1VYKXmaKqhgbmTWCg", 112);
}

BOOL sub_180749778()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"KLB4sM/KC38QT+dTuDC/aA", 114);
}

const void *sub_180749790()
{
  return sub_180764340((unint64_t)@"ChipSerialNo", 0LL);
}

BOOL sub_1807497A0(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"Nmhz54v5ZLqj2I4NPFIFqQ", a2);
}

BOOL sub_1807497C4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"Nmhz54v5ZLqj2I4NPFIFqQ", 66, a2);
}

BOOL sub_1807497D8()
{
  return !sub_1807661A8("IODeviceTree:/product", @"MvBKQ+GSnR3DjkovgNL+3w", 97);
}

BOOL sub_180749804()
{
  return sub_1807661A8("IODeviceTree:/product", @"JljZ8PqQJB8QlFC2NsgOPw", 101);
}

CFStringRef sub_18074981C()
{
  else {
    return sub_1807519C4();
  }
}

CFTypeRef sub_180749848()
{
  int v12 = -1;
  BOOL v0 = sub_180747E9C((const char **)@"XQBHOWjPt2P+uNqlLm1P7A", 5, 5, kCFNumberSInt32Type, &v12);
  CFTypeRef result = 0LL;
  if (v0 && v12 >= 2)
  {
    uint64_t v2 = *((void *)off_18C533F28 + 10);
    if (!v2) {
      uint64_t v2 = sub_180746538(10LL, 2LL);
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFTypeRef result = sub_1807642E0((uint64_t)"_CTServerConnectionCopyFirmwareSecurityInfo", v2, TypeID);
    if (!result)
    {
      uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4) {
        __int128 v10 = v4 + 1;
      }
      else {
        __int128 v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v10,  4883LL,  (uint64_t)@"_CTServerConnectionCopyFirmwareSecurityInfo returned NULL",  v5,  v6,  v7,  v8,  v9,  v11[0]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "_CTServerConnectionCopyFirmwareSecurityInfo returned NULL",  v11,  2u);
      }

      return 0LL;
    }
  }

  return result;
}

CFStringRef sub_180749960()
{
  uint64_t v0 = sub_180769530(0x434C4347u);
  if ((_DWORD)v0) {
    return CFStringCreateWithFormat(0LL, 0LL, @"%d", v0);
  }
  unsigned int v2 = sub_180760F30();
  if (v2 <= 8) {
    return *(&off_1896F9680 + 2 * v2);
  }
  else {
    return @"unknown";
  }
}

BOOL sub_1807499F0()
{
  if (sub_180743444() != 1) {
    return (unint64_t)sub_180744D74() >> 33
  }
        && (sub_180743AF0((BOOL)@"H14") || sub_1807437FC((BOOL)@"t8103", 0));
  return sub_180743AF0((BOOL)@"H16") && (unint64_t)sub_180744D74() >> 33;
}

uint64_t sub_180749A68()
{
  BOOL v0 = sub_1807661A8("IODeviceTree:/product", @"assistant", 0);
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

BOOL sub_180749AAC()
{
}

uint64_t sub_180749AE0()
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (statfs("/private/var", &v15) != -1) {
    return LOBYTE(v15.f_flags) >> 7;
  }
  uint64_t v1 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  unsigned int v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2) {
    uint64_t v1 = v2 + 1;
  }
  int v3 = __error();
  strerror(*v3);
  _MGLog((uint64_t)v1, 3737LL, (uint64_t)@"Could not statfs %s: %s", v4, v5, v6, v7, v8, (char)"/private/var");
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = __error();
    __int128 v10 = strerror(*v9);
    *(_DWORD *)buf = 136315394;
    int v12 = "/private/var";
    __int16 v13 = 2080;
    uint64_t v14 = v10;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Could not statfs %s: %s", buf, 0x16u);
  }

  sub_1807467C0(6);
  return 0LL;
}

uint64_t sub_180749C0C()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v11 = -1092155788;
  __int128 v10 = xmmword_1807A1D28;
  int v9 = 763775061;
  __int128 v8 = xmmword_1807A1D3C;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8);
}

const void *sub_180749F18()
{
  return sub_18074776C((const char **)@"oOV1jhJbdV3AddkcCg0AEA", 0LL);
}

uint64_t sub_180749F28()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 32);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_180746538(32LL, 2LL);
  }
  return v0();
}

BOOL sub_180749F54(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"frZQaeyWLUvLjeuEK43hmg", a2);
}

BOOL sub_180749F78(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"frZQaeyWLUvLjeuEK43hmg", 73, a2);
}

uint64_t sub_180749F8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int v14 = 1244490093;
  __int128 v13 = xmmword_1807A1E68;
  int v12 = 1377801277;
  __int128 v11 = xmmword_1807A1E7C;
  int v8 = MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11);
  uint64_t v9 = MEMORY[0x189604DE8];
  if (!v8) {
    uint64_t v9 = MEMORY[0x189604DE0];
  }
  return *(void *)v9;
}

uint64_t sub_18074A034()
{
  uint64_t v0 = (const void *)sub_18076E620( (uint64_t)"IODeviceTree:/arm-io",  (uint64_t)@"multi-touch",  0LL,  (uint64_t)@"force-supported",  0LL);
  if (!v0) {
    return *MEMORY[0x189604DE0];
  }
  uint64_t v1 = *MEMORY[0x189604DE8];
  CFRelease(v0);
  return v1;
}

__CFString *sub_18074A098()
{
  uint64_t v0 = (const __CFData *)sub_18076E6A4( (uint64_t)"IODeviceTree:",  (uint64_t)@"wlan",  0LL,  (uint64_t)@"wifi-module-sn",  0LL);
  if (!v0)
  {
    uint64_t v1 = (const __CFData *)sub_180765200(1, "AppleBCMWLANBusInterfacePCIe", @"wifi-module-sn");
    if (v1)
    {
      uint64_t v0 = v1;
      CFTypeID TypeID = CFDataGetTypeID();
      if (TypeID == CFGetTypeID(v0))
      {
        CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL);
        BytePtr = CFDataGetBytePtr(v0);
        CFIndex Length = CFDataGetLength(v0);
        if (Length >= 1)
        {
          CFIndex v6 = Length;
          do
          {
            unsigned int v7 = *BytePtr++;
            CFStringAppendFormat(Mutable, 0LL, @"%02X", v7);
            --v6;
          }

          while (v6);
        }

BOOL sub_18074A29C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"XrPbSCNx9X7Lyw9oGPgMDQ", a2);
}

BOOL sub_18074A2C0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"XrPbSCNx9X7Lyw9oGPgMDQ", 87, a2);
}

BOOL sub_18074A2D4()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 1);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_180746538(1LL, 2LL);
  }
  uint64_t v1 = (const __CFArray *)v0();
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  uint64_t v4 = (const void **)*((void *)off_18C533F28 + 70);
  if (!v4) {
    uint64_t v4 = (const void **)sub_180746538(70LL, 1LL);
  }
  v7.CFIndex location = 0LL;
  v7.length = Count;
  BOOL v5 = CFArrayContainsValue(v2, v7, *v4) != 0;
  CFRelease(v2);
  return v5;
}

uint64_t sub_18074A36C()
{
  uint64_t v0 = *MEMORY[0x189604DE0];
  uint64_t v1 = sub_180759E78();
  if (v1)
  {
    uint64_t v2 = v1;
    if (!CFEqual(v1, @"AppleTV")
      && !CFEqual(v2, @"Watch")
      && (sub_180743A48((BOOL)@"H8") || sub_180743A48((BOOL)@"H9")
                                             || sub_180743A48((BOOL)@"H10")))
    {
      uint64_t v0 = *MEMORY[0x189604DE8];
    }

    CFRelease(v2);
  }

  return v0;
}

CFNumberRef sub_18074A408()
{
  return sub_180766200("IODeviceTree:/product/camera", @"lvmEUCUwik8sO0yGU1rBOA", 114);
}

CFNumberRef sub_18074A420()
{
  return sub_180766200("IODeviceTree:/product/camera", @"smT9LjRW3acTT7WTS/XqyQ", 102);
}

uint64_t sub_18074A438()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 45);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_180746538(45LL, 2LL);
  }
  return v0();
}

CFDataRef sub_18074A464()
{
  else {
    return 0LL;
  }
}

CFStringRef sub_18074A4A0()
{
  return sub_1807665C0("IODeviceTree:/product", @"5iilxso47rYJZGnXklkYYg", 102);
}

BOOL sub_18074A4B8()
{
  return !sub_1807661A8("IODeviceTree:/product", @"TucF/tpjeAln1I0f3g0K3w", 100);
}

uint64_t sub_18074A4E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  int v55 = 28030256;
  __int128 v54 = xmmword_1807A2138;
  int v53 = 1214363620;
  __int128 v52 = xmmword_1807A214C;
  int v51 = 886875686;
  __int128 v50 = xmmword_1807A264C;
  int v49 = -489993439;
  __int128 v48 = xmmword_1807A2638;
  int v47 = -1403227947;
  __int128 v46 = xmmword_1807A25E8;
  int v45 = 729118884;
  __int128 v44 = xmmword_1807A25FC;
  int v43 = 1046806126;
  __int128 v42 = xmmword_1807A2610;
  int v41 = -188760945;
  __int128 v40 = xmmword_1807A2624;
  int v39 = -798153473;
  __int128 v38 = xmmword_1807A1FA8;
  int v37 = -776721724;
  __int128 v36 = xmmword_1807A1FBC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v38, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v36)
    || (int v35 = -38605833,
        __int128 v34 = xmmword_1807A20E8,
        int v33 = -894965712,
        __int128 v32 = xmmword_1807A20FC,
        MGIsDeviceOneOfType((const UInt8 *)&v34, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v32)))
  {
LABEL_5:
    uint64_t v29 = MEMORY[0x189604DE0];
  }

  else
  {
    int v31 = sub_180743444();
    uint64_t v29 = MEMORY[0x189604DE0];
    if (v31 == 1) {
      uint64_t v29 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v29;
}

BOOL sub_18074A75C()
{
  return sub_1807661DC("IODeviceTree:/chosen", @"GnhnHyRVCC8LUClgElhKXA", 101);
}

CFNumberRef sub_18074A774()
{
  int valuePtr = 1050253722;
  return CFNumberCreate(0LL, kCFNumberFloat32Type, &valuePtr);
}

const void *sub_18074A7BC()
{
  return sub_180764340((unint64_t)@"ChipID", 0LL);
}

BOOL sub_18074A7CC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"eNgz35a7iZnVeEMwsBQZew", a2);
}

BOOL sub_18074A7F0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"eNgz35a7iZnVeEMwsBQZew", 66, a2);
}

BOOL sub_18074A804()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"P+UqVuzQzn3nwHSiSeDmyw", 108);
}

const void *sub_18074A81C()
{
  return sub_18074776C((const char **)@"E9a3UzlfYjWEB9viQCHNAA", 0LL);
}

CFTypeRef sub_18074A82C()
{
  uint64_t v0 = *((void *)off_18C533F28 + 12);
  if (!v0) {
    uint64_t v0 = sub_180746538(12LL, 2LL);
  }
  CFTypeID TypeID = CFStringGetTypeID();
  return sub_1807642E0((uint64_t)"_CTServerConnectionCopyFirmwareVersion", v0, TypeID);
}

BOOL sub_18074A878()
{
  return sub_1807661A8("IODeviceTree:/product/audio", @"i6wlxJoKNXBiVXJHJ1EHBg", 115);
}

BOOL sub_18074A890()
{
  return sub_1807661A8("IODeviceTree:/product", @"VrWzQGQK9Fbp/RqeQ08VzA", 99);
}

uint64_t sub_18074A8A8()
{
  return 0LL;
}

BOOL sub_18074A8B0()
{
  return sub_1807661A8("IODeviceTree:/product", @"P1uSdgM/fIttMsA/+q6k4w", 119);
}

BOOL sub_18074A8C8()
{
  return sub_1807661A8("IODeviceTree:/product", @"Wft7kODl9Y2uX/sb47GoEA", 115);
}

uint64_t sub_18074A8E0()
{
  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1) {
    return sub_180743444() == 3;
  }
  return result;
}

const void *sub_18074A908()
{
  uint64_t v0 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
  return sub_1807432C4(v0, @"ProductBuildVersion", 1);
}

BOOL sub_18074A928()
{
  return sub_1807661DC("IODeviceTree:/product", @"fucd7llSuoCNHrrvLS1QQg", 119);
}

CFTypeRef sub_18074A940()
{
  return sub_1807615E4(@"SavageUID");
}

BOOL sub_18074A94C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"FNvQ6lBvJIUcYBzQ8ggOUQ", a2);
}

BOOL sub_18074A970(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"FNvQ6lBvJIUcYBzQ8ggOUQ", 83, a2);
}

__CFArray *sub_18074A984()
{
  uint64_t v0 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
  switch(sub_180743444())
  {
    case 1u:
    case 2u:
      int v2 = 1;
      goto LABEL_13;
    case 3u:
    case 9u:
      *(_DWORD *)uint64_t v15 = 1;
      CFNumberRef v3 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v3);
      CFRelease(v3);
      int v2 = 2;
      goto LABEL_13;
    case 4u:
      int v2 = 3;
      goto LABEL_13;
    case 6u:
      int v2 = 4;
      goto LABEL_13;
    case 7u:
      int v2 = 5;
      goto LABEL_13;
    case 0xBu:
      *(_DWORD *)uint64_t v15 = 1;
      CFNumberRef v11 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v11);
      CFRelease(v11);
      *(_DWORD *)uint64_t v15 = 2;
      CFNumberRef v12 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v12);
      CFRelease(v12);
      int v2 = 7;
LABEL_13:
      *(_DWORD *)uint64_t v15 = v2;
      CFNumberRef v13 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v13);
      break;
    default:
      uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4) {
        uint64_t v10 = v4 + 1;
      }
      else {
        uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v10, 3080LL, (uint64_t)@"Could not determine DTProductType", v5, v6, v7, v8, v9, v15[0]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not determine DTProductType",  v15,  2u);
      }

      break;
  }

  return Mutable;
}

uint64_t sub_18074AB54()
{
  return sub_18076E59C( (uint64_t)"IODeviceTree:/arm-io",  (uint64_t)@"4k6Wv56SWfITjzet+hIHMQ",  109LL,  (uint64_t)@"8kcKPCGGyCpf66MMl5TVkA",  109LL);
}

uint64_t sub_18074AB78()
{
  return 0LL;
}

BOOL sub_18074AB80(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"Fhqq6Bhy/XnCEBRAe3TI+g", a2);
}

BOOL sub_18074ABA4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"Fhqq6Bhy/XnCEBRAe3TI+g", 83, a2);
}

BOOL sub_18074ABB8()
{
  return sub_1807661DC("IODeviceTree:/product", @"Zg7DduDoSCy6vY6mhy3n2w", 105);
}

CFDataRef sub_18074ABD0()
{
  uint64_t v158 = *MEMORY[0x1895F89C0];
  *(void *)md = 0LL;
  uint64_t v156 = 0LL;
  int v157 = 0;
  uint64_t valuePtr = 0LL;
  uint64_t v152 = 0LL;
  if (sub_1807463A0())
  {
    uint64_t v0 = (const __CFData *)sub_18074776C((const char **)@"sjGZBQzow3yV/IOa0wCeoQ", 0LL);
    if (v0)
    {
      CFDataRef v1 = v0;
      int v2 = 0LL;
      CFNumberRef v3 = 0LL;
LABEL_23:
      CFNumberRef v12 = 0LL;
      uint64_t v7 = 0LL;
LABEL_24:
      uint64_t v9 = &stru_1896FD058;
      uint64_t v15 = &stru_1896FD058;
LABEL_124:
      CFRelease(v15);
LABEL_125:
      if (!v9) {
        goto LABEL_127;
      }
      goto LABEL_126;
    }
  }

  int v4 = sub_180743C04();
  if (v4 > 0)
  {
    unsigned int v5 = v4;
    uint64_t v6 = (const __CFNumber *)sub_18074776C((const char **)@"TF31PAB6aO8KAbPyNKSxKA", 0LL);
    if (!v6)
    {
      uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v16) {
        uint64_t v22 = v16 + 1;
      }
      else {
        uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v22, 3329LL, (uint64_t)@"Could not get unique chip ID", v17, v18, v19, v20, v21, v149);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not get unique chip ID",  buf,  2u);
      }

      int v2 = 0LL;
      CFNumberRef v3 = 0LL;
      CFDataRef v1 = 0LL;
      goto LABEL_23;
    }

    uint64_t v7 = v6;
    if (!CFNumberGetValue(v6, kCFNumberSInt64Type, &valuePtr))
    {
      __int128 v34 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v34) {
        __int128 v40 = v34 + 1;
      }
      else {
        __int128 v40 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v40, 3333LL, (uint64_t)@"Could not extract ECID as integer", v35, v36, v37, v38, v39, v149);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not extract ECID as integer",  buf,  2u);
      }

      int v2 = 0LL;
      CFNumberRef v3 = 0LL;
      CFDataRef v1 = 0LL;
      CFNumberRef v12 = 0LL;
      goto LABEL_24;
    }

    char v149 = valuePtr;
    CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, @"%qi");
    if (!v8)
    {
      __int128 v48 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v48) {
        __int128 v54 = v48 + 1;
      }
      else {
        __int128 v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v54, 3339LL, (uint64_t)@"CFStringCreateWithFormat failed", v49, v50, v51, v52, v53, v149);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "CFStringCreateWithFormat failed",  buf,  2u);
      }

      int v2 = 0LL;
      CFNumberRef v3 = 0LL;
      CFDataRef v1 = 0LL;
      CFNumberRef v12 = 0LL;
      uint64_t v9 = 0LL;
      goto LABEL_91;
    }

    uint64_t v9 = v8;
    if (v5 == 2)
    {
      uint64_t v10 = (const __CFNumber *)sub_18074776C((const char **)@"566JrJVMlDfnslGpwUzNlQ", 0LL);
      if (v10)
      {
        int v2 = v10;
        if (!CFNumberGetValue(v10, kCFNumberSInt64Type, &v152))
        {
          v109 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          if (v109) {
            v115 = v109 + 1;
          }
          else {
            v115 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          }
          _MGLog( (uint64_t)v115,  3350LL,  (uint64_t)@"Could not extract ECID as integer",  v110,  v111,  v112,  v113,  v114,  v149);
          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_90;
          }
          *(_WORD *)buf = 0;
          v116 = (os_log_s *)MEMORY[0x1895F8DA0];
          v117 = "Could not extract ECID as integer";
          goto LABEL_113;
        }

        char v150 = v152;
        CFNumberRef v11 = CFStringCreateWithFormat(0LL, 0LL, @"%08llX-%016llX");
        if (v11)
        {
          CFNumberRef v12 = v11;
          CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0LL, v11, 0x8000100u, 0xFFu);
          if (ExternalRepresentation)
          {
            CFDataRef v1 = ExternalRepresentation;
            CFNumberRef v3 = 0LL;
          }

          else
          {
            v142 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
            if (v142) {
              v148 = v142 + 1;
            }
            else {
              v148 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
            }
            _MGLog( (uint64_t)v148,  3425LL,  (uint64_t)@"CFStringCreateExternalRepresentation failed",  v143,  v144,  v145,  v146,  v147,  v150);
            if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "CFStringCreateExternalRepresentation failed",  buf,  2u);
            }

            CFNumberRef v3 = 0LL;
            CFDataRef v1 = 0LL;
          }

          goto LABEL_91;
        }

        v127 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v127) {
          v133 = v127 + 1;
        }
        else {
          v133 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v133, 3420LL, (uint64_t)@"Could not create CFString", v128, v129, v130, v131, v132, v150);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v116 = (os_log_s *)MEMORY[0x1895F8DA0];
          v117 = "Could not create CFString";
LABEL_113:
          _os_log_impl(&dword_180741000, v116, OS_LOG_TYPE_DEFAULT, v117, buf, 2u);
        }

LABEL_90:
        CFNumberRef v3 = 0LL;
        CFDataRef v1 = 0LL;
        CFNumberRef v12 = 0LL;
LABEL_91:
        uint64_t v15 = &stru_1896FD058;
        goto LABEL_124;
      }

      __int128 v95 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v95) {
        v101 = v95 + 1;
      }
      else {
        v101 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v101, 3346LL, (uint64_t)@"Could not get ChipID", v96, v97, v98, v99, v100, v149);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
LABEL_89:
        int v2 = 0LL;
        goto LABEL_90;
      }

      *(_WORD *)buf = 0;
      uint64_t v69 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v70 = "Could not get ChipID";
      uint32_t v71 = 2;
LABEL_88:
      _os_log_impl(&dword_180741000, v69, OS_LOG_TYPE_DEFAULT, v70, buf, v71);
      goto LABEL_89;
    }

    if (v5 >= 3)
    {
      uint64_t v62 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v62) {
        uint64_t v68 = v62 + 1;
      }
      else {
        uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v68, 3354LL, (uint64_t)@"Unsupported UDID version %d", v63, v64, v65, v66, v67, v5);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 67109120;
      unsigned int v154 = v5;
      uint64_t v69 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v70 = "Unsupported UDID version %d";
      uint32_t v71 = 8;
      goto LABEL_88;
    }

    uint64_t v15 = &stru_1896FD058;
LABEL_26:
    uint64_t v23 = sub_18074776C((const char **)@"VasUgeSzVyHdB27g2XpN0g", 0LL);
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = sub_18074776C((const char **)@"gI6iODv8MZuiP0IA+efJCw", 0LL);
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = sub_18074776C((const char **)@"k5lVWbXuiZHLA17KGiVUAA", 0LL);
        if (v27)
        {
          uint64_t v28 = CFStringCreateWithFormat(0LL, 0LL, @"%@%@%@%@%@");
          if (v28)
          {
            CFNumberRef v12 = v28;
            CFIndex Length = CFStringGetLength(v28);
            CFIndex v30 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
            int v31 = (char *)calloc(1uLL, v30);
            if (!v31)
            {
              v102 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
              if (v102) {
                v108 = v102 + 1;
              }
              else {
                v108 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
              }
              _MGLog((uint64_t)v108, 3402LL, (uint64_t)@"calloc failed", v103, v104, v105, v106, v107, (char)v24);
              if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "calloc failed", buf, 2u);
              }

              CFNumberRef v3 = 0LL;
              goto LABEL_120;
            }

            CFNumberRef v3 = v31;
            if (CFStringGetCString(v12, v31, v30, 0x8000100u))
            {
              CC_LONG v32 = strlen(v3);
              CC_SHA1(v3, v32, md);
              CFDataRef v33 = CFDataCreate(0LL, md, 20LL);
              if (v33)
              {
                CFDataRef v1 = v33;
                goto LABEL_121;
              }

              v134 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
              if (v134) {
                v140 = v134 + 1;
              }
              else {
                v140 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
              }
              _MGLog( (uint64_t)v140,  3413LL,  (uint64_t)@"CFDataCreate failed",  v135,  v136,  v137,  v138,  v139,  (char)v24);
              if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_120;
              }
              *(_WORD *)buf = 0;
              v125 = (os_log_s *)MEMORY[0x1895F8DA0];
              v126 = "CFDataCreate failed";
            }

            else
            {
              v118 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
              if (v118) {
                v124 = v118 + 1;
              }
              else {
                v124 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
              }
              _MGLog( (uint64_t)v124,  3406LL,  (uint64_t)@"couldn't extract string to hash",  v119,  v120,  v121,  v122,  v123,  (char)v24);
              if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_120;
              }
              *(_WORD *)buf = 0;
              v125 = (os_log_s *)MEMORY[0x1895F8DA0];
              v126 = "couldn't extract string to hash";
            }

            _os_log_impl(&dword_180741000, v125, OS_LOG_TYPE_DEFAULT, v126, buf, 2u);
LABEL_120:
            CFDataRef v1 = 0LL;
LABEL_121:
            CFRelease(v24);
            CFRelease(v26);
            if (v27) {
              CFRelease(v27);
            }
LABEL_123:
            int v2 = 0LL;
            if (!v15) {
              goto LABEL_125;
            }
            goto LABEL_124;
          }

          CFErrorRef v88 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          if (v88) {
            __int128 v94 = v88 + 1;
          }
          else {
            __int128 v94 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          }
          _MGLog( (uint64_t)v94,  3395LL,  (uint64_t)@"Could not create a mutable CFString",  v89,  v90,  v91,  v92,  v93,  (char)v24);
          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
          {
LABEL_82:
            CFNumberRef v3 = 0LL;
            CFDataRef v1 = 0LL;
            CFNumberRef v12 = 0LL;
            goto LABEL_121;
          }

          *(_WORD *)buf = 0;
          stat v86 = (os_log_s *)MEMORY[0x1895F8DA0];
          v87 = "Could not create a mutable CFString";
        }

        else
        {
          uint64_t v79 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          if (v79) {
            int v85 = v79 + 1;
          }
          else {
            int v85 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          }
          _MGLog((uint64_t)v85, 3382LL, (uint64_t)@"Could not get bluetooth address", v80, v81, v82, v83, v84, v149);
          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_82;
          }
          *(_WORD *)buf = 0;
          stat v86 = (os_log_s *)MEMORY[0x1895F8DA0];
          v87 = "Could not get bluetooth address";
        }

        _os_log_impl(&dword_180741000, v86, OS_LOG_TYPE_DEFAULT, v87, buf, 2u);
        goto LABEL_82;
      }

      int v55 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v55) {
        uint64_t v61 = v55 + 1;
      }
      else {
        uint64_t v61 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v61, 3372LL, (uint64_t)@"Could not get wifi address", v56, v57, v58, v59, v60, v149);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Could not get wifi address", buf, 2u);
      }

      CFRelease(v24);
    }

    else
    {
      int v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v41) {
        int v47 = v41 + 1;
      }
      else {
        int v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v47, 3363LL, (uint64_t)@"Could not get serial number", v42, v43, v44, v45, v46, v149);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Could not get serial number", buf, 2u);
      }
    }

    CFNumberRef v12 = 0LL;
    CFDataRef v1 = 0LL;
    CFNumberRef v3 = 0LL;
    goto LABEL_123;
  }

  if (!MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg"))
  {
    uint64_t v7 = 0LL;
    uint64_t v15 = &stru_1896FD058;
    uint64_t v9 = &stru_1896FD058;
    goto LABEL_26;
  }

  uint64_t v14 = (const __CFString *)sub_18074776C((const char **)@"QZgogo2DypSAZfkRW4dP/A", 0LL);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v7 = 0LL;
    uint64_t v9 = &stru_1896FD058;
    goto LABEL_26;
  }

  uint64_t v72 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v72) {
    uint64_t v78 = v72 + 1;
  }
  else {
    uint64_t v78 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v78, 3321LL, (uint64_t)@"Could not get IMEI", v73, v74, v75, v76, v77, v149);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Could not get IMEI", buf, 2u);
  }

  uint64_t v7 = 0LL;
  CFNumberRef v12 = 0LL;
  CFDataRef v1 = 0LL;
  CFNumberRef v3 = 0LL;
  int v2 = 0LL;
  uint64_t v9 = &stru_1896FD058;
LABEL_126:
  CFRelease(v9);
LABEL_127:
  if (v7) {
    CFRelease(v7);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    free(v3);
  }
  return v1;
}

BOOL sub_18074B684(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"nFRqKto/RuQAV1P+0/qkBA", a2);
}

BOOL sub_18074B6A8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"nFRqKto/RuQAV1P+0/qkBA", 85, a2);
}

uint64_t sub_18074B6BC()
{
  BOOL v0 = sub_1807661A8("IODeviceTree:/product", @"display-mirroring", 0);
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

CFStringRef sub_18074B700()
{
  return sub_1807665C0("IODeviceTree:/product", @"BGIXXp6VsbLlQg+8+0sBAA", 99);
}

CFNumberRef sub_18074B718()
{
  return sub_180766200("IODeviceTree:/product", @"UYZtXbMcIyMRZQ9pjDxRvA", 117);
}

uint64_t sub_18074B730()
{
  uint64_t v4 = 0LL;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2000000000LL;
  uint64_t v7 = 0LL;
  BOOL v0 = IOBSDNameMatching(*MEMORY[0x1896086A8], 0, "disk0");
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = sub_180761644;
  v3[3] = &unk_1896F9730;
  v3[4] = &v4;
  sub_180764FD0(v0, (uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

CFStringRef sub_18074B7D4()
{
  return sub_1807665C0("IODeviceTree:/product", @"Qt+S0J/SXrcfymyfJWvCCQ", 114);
}

BOOL sub_18074B7EC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"O8mk69g6k/CbfeET9LtqQA", a2);
}

BOOL sub_18074B810(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"O8mk69g6k/CbfeET9LtqQA", 82, a2);
}

BOOL sub_18074B824()
{
  return sub_1807661DC("IODeviceTree:/product", @"ZrKzmIA8JSV7qJtGrX3yIw", 101);
}

uint64_t sub_18074B83C()
{
  return sub_18076E49C( (uint64_t)"IODeviceTree:",  (uint64_t)@"RaX3KBmG7H9fUOEtLK/I6w",  115LL,  (uint64_t)@"edlvEg0UXOGErRDpk7O5Fg",  99LL);
}

BOOL sub_18074B860()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"IMlsLCL69XUZau9QyPnxeQ", 114);
}

float sub_18074B878()
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  BOOL v0 = (const __CFData *)sub_180766414("IODeviceTree:/product", @"display-corner-radius", 0);
  if (v0)
  {
    uint64_t v1 = v0;
    if (CFDataGetLength(v0) == 8)
    {
      BytePtr = (unsigned int *)CFDataGetBytePtr(v1);
      unsigned int v3 = BytePtr[1];
      if (v3) {
        float v4 = (float)*BytePtr / (float)v3;
      }
      else {
        float v4 = 0.0;
      }
    }

    else
    {
      CFNumberRef v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      CFNumberRef v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v13) {
        CFNumberRef v12 = v13 + 1;
      }
      char Length = CFDataGetLength(v1);
      _MGLog( (uint64_t)v12,  7951LL,  (uint64_t)@"Property copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius) had an unexpected size of %zu instead of %zu.",  v15,  v16,  v17,  v18,  v19,  Length);
      float v4 = 0.0;
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        CFIndex v23 = CFDataGetLength(v1);
        __int16 v24 = 2048;
        uint64_t v25 = 8LL;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Property copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius) had an unexpected size of %zu instead of %zu.",  buf,  0x16u);
      }
    }

    CFRelease(v1);
  }

  else
  {
    unsigned int v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v5) {
      CFNumberRef v11 = v5 + 1;
    }
    else {
      CFNumberRef v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v11,  7942LL,  (uint64_t)@"Failed to copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius)",  v6,  v7,  v8,  v9,  v10,  v21);
    float v4 = 0.0;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius)",  buf,  2u);
    }
  }

  return v4;
}

BOOL sub_18074BA4C()
{
  return sub_1807661A8("IODeviceTree:/product", @"lUryPpLkvlffpEKiNnEchA", 115);
}

BOOL sub_18074BA64()
{
  return sub_1807661A8("IODeviceTree:/product", @"n/G0fQIQiom+pb4tHA4Mmw", 100);
}

BOOL sub_18074BA7C()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"yPSUYPhrVLHnvX0TUugiwg", 114);
}

uint64_t sub_18074BA94()
{
  return (unsigned __int16)sub_180766640(1, "sgx", @"opengl-standard", 768LL) << 8;
}

BOOL sub_18074BAC4()
{
  return sub_1807661A8("IODeviceTree:/product/maps", @"LXP9TbNYtZrIKOktGXez2Q", 51);
}

uint64_t sub_18074BADC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int v14 = -38605833;
  __int128 v13 = xmmword_1807A20E8;
  int v12 = -894965712;
  __int128 v11 = xmmword_1807A20FC;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11) & 1) != 0
    || sub_180743444() == 4
    || sub_180743444() == 6
    || sub_180743444() == 3)
  {
    uint64_t v8 = MEMORY[0x189604DE0];
  }

  else
  {
    int v10 = sub_180743444();
    uint64_t v8 = MEMORY[0x189604DE0];
  }

  return *(void *)v8;
}

uint64_t sub_18074BBD0()
{
  return 1LL;
}

BOOL sub_18074BBD8()
{
  return sub_1807661DC("IODeviceTree:/product", @"MlDJggkQz38CLQh3AVv7VQ", 115);
}

BOOL sub_18074BBF0()
{
  return sub_180746094((uint64_t)@"EUVolumeLimit", @"RegionalBehaviorEUVolumeLimit");
}

CFStringRef sub_18074BC04()
{
  uint64_t result = (const __CFString *)sub_18074313C(@"ReleaseType", 0);
  if (!result)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_18074BC44()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/arm-io", (uint64_t)@"4k6Wv56SWfITjzet+hIHMQ", 109LL);
}

BOOL sub_18074BC5C()
{
  return sub_1807661A8("IODeviceTree:/product", @"l1MfXa14uBR9cvO8D9wc9w", 117);
}

BOOL sub_18074BC74()
{
  BOOL result = MGGetBoolAnswer((const char **)@"yRZv0s7Dpj8ZBk0S+0+nMA");
  if (result) {
    return sub_1807442E4(@"CH");
  }
  return result;
}

const void *sub_18074BCA4()
{
  int v0 = sub_180765E6C("IODeviceTree:/arm-io/disp0", @"supports-apt", 0, 0xFFFFFFFFLL, 0);
  if ((v0 & 0x80000000) == 0)
  {
    uint64_t v1 = MEMORY[0x189604DE8];
    if (!v0) {
      uint64_t v1 = MEMORY[0x189604DE0];
    }
    return *(const void **)v1;
  }

  CFTypeRef v2 = sub_180765200(0, "AppleCLCD", @"APTDevice");
  if (!v2)
  {
LABEL_8:
    uint64_t v1 = MEMORY[0x189604DE0];
    return *(const void **)v1;
  }

  unsigned int v3 = v2;
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID != CFGetTypeID(v3))
  {
    CFRelease(v3);
    goto LABEL_8;
  }

  return v3;
}

CFStringRef sub_18074BD4C()
{
  unsigned int v3 = 0;
  unsigned int v2 = sub_1807616AC();
  if (v2 <= 8) {
    return *(&off_1896F9680 + 2 * v2);
  }
  else {
    return @"unknown";
  }
}

CFNumberRef sub_18074BDF8()
{
  return sub_180766200("IODeviceTree:/product/facetime", @"S5Bf9bF00BTHrySCydAkdg", 98);
}

const void *sub_18074BE10()
{
  else {
    return (const void *)sub_18076E620( (uint64_t)"IODeviceTree:",  (uint64_t)@"gps",  0LL,  (uint64_t)@"function-gps_time-mark",  0LL);
  }
}

CFStringRef sub_18074BE6C()
{
  int v0 = (const __CFData *)sub_18074776C((const char **)@"nFRqKto/RuQAV1P+0/qkBA", 0LL);
  return sub_1807617A4(v0);
}

BOOL sub_18074BE8C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"re6Zb+zwFKJNlkQTUeT+/w", a2);
}

BOOL sub_18074BEB0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"re6Zb+zwFKJNlkQTUeT+/w", 85, a2);
}

BOOL sub_18074BEC4()
{
  return sub_1807661A8("IODeviceTree:/product", @"b/KizANb5o/dWqSP2GC23g", 112);
}

BOOL sub_18074BEDC()
{
  return sub_1807661DC("IODeviceTree:/product/haptics", @"XKpK5v7PGzbe7igjloNBpQ", 99);
}

CFDataRef sub_18074BEF4()
{
  if (!MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ")
    && (int v0 = (const __CFData *)sub_1807654D8("fillmore")) != 0LL
    || (int v0 = sub_18074C33C()) != 0LL)
  {
    if (CFDataGetLength(v0) == 6)
    {
      char v14 = 0;
      *(_WORD *)buffer = 0;
      *(_WORD *)bytes = -257;
      CFMutableStringRef Mutable = CFDataCreateMutable(0LL, 0LL);
      v15.CFIndex location = 0LL;
      v15.length = 3LL;
      CFDataGetBytes(v0, v15, buffer);
      CFDataAppendBytes(Mutable, buffer, 3LL);
      char v14 = 0;
      *(_WORD *)buffer = 0;
      CFDataAppendBytes(Mutable, bytes, 2LL);
      v16.CFIndex location = 3LL;
      v16.length = 3LL;
      CFDataGetBytes(v0, v16, buffer);
      CFDataAppendBytes(Mutable, buffer, 3LL);
      CFDataRef Copy = CFDataCreateCopy(0LL, Mutable);
      CFRelease(v0);
      if (Mutable) {
        CFRelease(Mutable);
      }
      return Copy;
    }

    else if (CFDataGetLength(v0) != 8)
    {
      unsigned int v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      float v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4) {
        unsigned int v3 = v4 + 1;
      }
      char Length = CFDataGetLength(v0);
      _MGLog((uint64_t)v3, 1596LL, (uint64_t)@"TMAC address has unexpected length %zu", v6, v7, v8, v9, v10, Length);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT)) {
        sub_1807998F4(v0);
      }
    }
  }

  return v0;
}

BOOL sub_18074C078(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"yF2IQrYS4yyREV4ZkbLysw", a2);
}

BOOL sub_18074C09C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"yF2IQrYS4yyREV4ZkbLysw", 84, a2);
}

BOOL sub_18074C0B0()
{
  return sub_180743444() != 7 && sub_180743444() != 11;
}

BOOL sub_18074C0E0()
{
  return sub_180746094((uint64_t)@"VolumeLimit", @"RegionalBehaviorVolumeLimit");
}

CFStringRef sub_18074C0F4()
{
  return sub_180766600(1, "baseband", @"baseband-board-snum");
}

BOOL sub_18074C10C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"ToJGxfcjkIerYyeL2e8c4A", a2);
}

BOOL sub_18074C130(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"ToJGxfcjkIerYyeL2e8c4A", 66, a2);
}

const void *sub_18074C144()
{
  int v0 = (const __CFDictionary *)sub_18074776C((const char **)@"qOwiNS0eFEq9oi3MNsgxWg", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFPropertyListRef Value = CFDictionaryGetValue(v0, @"Nonce");
  unsigned int v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v1);
  return v3;
}

BOOL sub_18074C1A4()
{
  return sub_180743444() != 4;
}

uint64_t sub_18074C1C0()
{
  return *MEMORY[0x189604DE0];
}

uint64_t sub_18074C1D0()
{
  unint64_t v0 = sub_180744D74();
  uint64_t v1 = MEMORY[0x189604DE8];
  if (v0 <= 0x40000000) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

CFNumberRef sub_18074C204()
{
  return sub_180766200("IODeviceTree:/chosen", @"QD3Nde07fjdK0R0KTbczEA", 98);
}

CFStringRef sub_18074C21C()
{
  unint64_t v0 = sub_18074ABD0();
  return sub_1807617A4(v0);
}

BOOL sub_18074C230(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"RNcdWbM8+dO5tx82A+YCcQ", a2);
}

BOOL sub_18074C254(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"RNcdWbM8+dO5tx82A+YCcQ", 80, a2);
}

BOOL sub_18074C268()
{
  return sub_180743444() != 4;
}

CFTypeRef sub_18074C284()
{
  uint64_t v0 = *((void *)off_18C533F28 + 7);
  if (!v0) {
    uint64_t v0 = sub_180746538(7LL, 2LL);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  return sub_1807642E0((uint64_t)"_CTServerConnectionCopyFirmwareManifestData", v0, TypeID);
}

BOOL sub_18074C2D0()
{
  float v3 = 0.0;
  BOOL v0 = sub_180747E9C((const char **)@"main-screen-scale", 7, 7, kCFNumberFloat32Type, &v3);
  float v1 = v3;
  if (!v0) {
    float v1 = 0.0;
  }
  return v1 > 1.0;
}

BOOL sub_18074C324()
{
  return sub_1807661DC("IODeviceTree:/product/camera", @"DCy89X5oErFAps95GX38mQ", 108);
}

CFDataRef sub_18074C33C()
{
  BOOL v0 = (const __CFData *)sub_18076E620( (uint64_t)"IODeviceTree",  (uint64_t)@"fillmore",  0LL,  (uint64_t)@"local-mac-address",  0LL);
  if (v0
    || (BOOL v0 = (const __CFData *)sub_18076E620( (uint64_t)"IODeviceTree",  (uint64_t)@"wlan",  0LL,  (uint64_t)@"local-mac-address",  0LL)) != 0LL)
  {
    CFIndex Length = CFDataGetLength(v0);
    CFRelease(v0);
  }

  else
  {
    CFIndex Length = 8LL;
  }

  return sub_1807692E0(0x544D6163u, Length);
}

BOOL sub_18074C3D4(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"lU5WxNTusw4lrrBSEBiZeQ", a2);
}

BOOL sub_18074C3F8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"lU5WxNTusw4lrrBSEBiZeQ", 84, a2);
}

CFNumberRef sub_18074C40C()
{
  return sub_180766200("IODeviceTree:/product/camera", @"lY6RKv6ri6kfBeJCWilmmQ", 102);
}

CFDataRef sub_18074C424()
{
  return sub_180766E84("AppleSEPManager", 0x2Au, 0LL, 0, 0x8000uLL);
}

BOOL sub_18074C440(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"r5pA2qLgR86BQKwgMjPWzg", a2);
}

BOOL sub_18074C464(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"r5pA2qLgR86BQKwgMjPWzg", 76, a2);
}

BOOL sub_18074C478()
{
  return sub_1807661A8("IODeviceTree:/product", @"9Bp5z20HsA1f7dqvelXKXA", 115);
}

BOOL sub_18074C490()
{
  BOOL result = sub_180743AF0((BOOL)@"H15");
  if (result) {
    return !sub_1807437FC((BOOL)@"t8120", 0);
  }
  return result;
}

uint64_t sub_18074C4C4()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  int v5 = 1244490093;
  __int128 v4 = xmmword_1807A1E68;
  if ((MGIsDeviceOfType((const UInt8 *)&v4) & 1) != 0
    || (v3 = 1377801277, __int128 v2 = xmmword_1807A1E7C, MGIsDeviceOfType((const UInt8 *)&v2)))
  {
    uint64_t v0 = MEMORY[0x189604DE0];
  }

  else
  {
    uint64_t v0 = MEMORY[0x189604DE8];
  }

  return *(void *)v0;
}

uint64_t sub_18074C570()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743A48((BOOL)@"H6")
    || sub_180743444() == 4
    || sub_180743444() == 6
    || sub_180743444() == 2
    || sub_180743444() == 7
    || sub_180743A48((BOOL)@"H8")
    || sub_180743A48((BOOL)@"H7")
    || sub_180743A48((BOOL)@"H9"))
  {
    uint64_t v7 = MEMORY[0x189604DE0];
  }

  else
  {
    int v13 = 414393924;
    __int128 v12 = xmmword_1807A26B0;
    int v11 = 897736383;
    __int128 v10 = xmmword_1807A26C4;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x189604DE0];
    if (!v9) {
      uint64_t v7 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v7;
}

CFTypeRef sub_18074C694()
{
  CFTypeRef v0 = sub_180765200(1, "als", @"prox-calibration");
  if (!v0)
  {
LABEL_4:
    CFTypeRef v1 = sub_180765200(1, "multi-touch", @"prox-calibration");
    if (!v1) {
      return sub_180765200(1, "prox", @"prox-calibration");
    }
    goto LABEL_5;
  }

  CFTypeRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID())
  {
    CFRelease(v1);
    goto LABEL_4;
  }

LABEL_5:
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 == CFDataGetTypeID()) {
    return v1;
  }
  CFRelease(v1);
  return sub_180765200(1, "prox", @"prox-calibration");
}

BOOL sub_18074C74C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"6UUmcaeT7rJoyUVmoPJd4A", a2);
}

BOOL sub_18074C770(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"6UUmcaeT7rJoyUVmoPJd4A", 80, a2);
}

CFStringRef sub_18074C784()
{
  return sub_1807665C0("IODeviceTree:/product", @"MfLtAGqrSIJgBHzuir/DoA", 99);
}

BOOL sub_18074C79C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"OWi11Urd09rDmPVy1z5dOQ", a2);
}

BOOL sub_18074C7C0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"OWi11Urd09rDmPVy1z5dOQ", 67, a2);
}

CFNumberRef sub_18074C7D4()
{
  return sub_180766200("IODeviceTree:/product/camera", @"oxH8p7+EaUzhkc2edrXsQQ", 97);
}

uint64_t sub_18074C7EC()
{
  return sub_180769530(0x434C4347u);
}

BOOL sub_18074C7F8()
{
  return sub_180746094((uint64_t)@"NoVOIP", @"RegionalBehaviorNoVOIP");
}

const void *sub_18074C810()
{
  return sub_18074776C((const char **)@"9s45ldrCC1WF+7b6C4H2BA", 0LL);
}

CFStringRef sub_18074C820()
{
  CFTypeRef v0 = sub_1807428C0();
  CFTypeRef v1 = v0;
  if (v0) {
    CFRetain(v0);
  }
  return v1;
}

BOOL sub_18074C850()
{
  return sub_1807661DC("IODeviceTree:/chosen", @"nudr7/i2XcxAX6widrWShg", 99);
}

uint64_t sub_18074C868()
{
  if (sub_180743444() == 6 || sub_180743A48((BOOL)@"H4"))
  {
    uint64_t v0 = MEMORY[0x189604DE0];
  }

  else
  {
    BOOL v1 = sub_180743A48((BOOL)@"H5");
    uint64_t v0 = MEMORY[0x189604DE0];
    if (!v1) {
      uint64_t v0 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v0;
}

CFTypeRef sub_18074C8C8()
{
  uint64_t v0 = *((void *)off_18C533F28 + 8);
  if (!v0) {
    uint64_t v0 = sub_180746538(8LL, 2LL);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  return sub_1807642E0((uint64_t)"_CTServerConnectionCopyFirmwareManifestStatus", v0, TypeID);
}

BOOL sub_18074C914()
{
  return sub_1807661DC("IODeviceTree:/product", @"LDmYwbIay7HexqftCTLDNg", 114);
}

const void *sub_18074C92C()
{
  uint64_t v0 = (const __CFDictionary *)sub_18076E7AC( 0LL,  (uint64_t)@"AppleLisaHIDEventDriver",  0LL,  (uint64_t)@"HIDEventServiceProperties",  0LL);
  if (v0)
  {
    BOOL v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFDictionaryGetTypeID())
    {
      CFPropertyListRef Value = CFDictionaryGetValue(v1, @"RotateToWakeSupported");
      uint64_t v4 = Value;
      if (!Value)
      {
LABEL_7:
        CFRelease(v1);
        goto LABEL_9;
      }

      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFBooleanGetTypeID())
      {
        CFRetain(v4);
        goto LABEL_7;
      }
    }

    uint64_t v4 = 0LL;
    goto LABEL_7;
  }

  uint64_t v4 = 0LL;
LABEL_9:
  if (v4) {
    return v4;
  }
  else {
    return (const void *)*MEMORY[0x189604DE0];
  }
}

BOOL sub_18074C9EC()
{
  return sub_1807661A8("IODeviceTree:/product", @"RyXm3yMC4ejlFvwlEI509w", 104);
}

uint64_t sub_18074CA04()
{
  uint64_t v0 = *MEMORY[0x189604DE0];
  if (sub_180743444() == 3
    && !sub_180743A48((BOOL)@"H4")
    && !sub_180743A48((BOOL)@"H5")
    && !sub_180743A48((BOOL)@"H6")
    && sub_180761A30() > 0x773593FFFLL)
  {
    return *MEMORY[0x189604DE8];
  }

  return v0;
}

BOOL sub_18074CA8C()
{
  return sub_180743444() == 3
      && (unint64_t)sub_180744D74() >> 31 >= 3
      && sub_180743AF0((BOOL)@"H13");
}

BOOL sub_18074CACC()
{
  return sub_1807661DC("IODeviceTree:/product", @"fxnMXVRwuznDzWhoDCxb2A", 111);
}

CFNumberRef sub_18074CAE4()
{
  return sub_180766200("IODeviceTree:/product", @"7qHcAWI5X9b1SiyYIg/Byw", 117);
}

CFNumberRef sub_18074CAFC()
{
  if (!sub_180743A48((BOOL)@"H6")
    && !sub_180743A48((BOOL)@"H8")
    && !sub_180743A48((BOOL)@"H5")
    && !sub_180743A48((BOOL)@"H7")
    && !sub_180743A48((BOOL)@"H9")
    && sub_180743444() != 4
    && sub_180743444() != 6)
  {
    sub_180743A48((BOOL)@"H4");
  }

  int valuePtr = 1065353216;
  return CFNumberCreate(0LL, kCFNumberFloatType, &valuePtr);
}

uint64_t sub_18074CBA0()
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 1 || sub_180743444() == 2 || sub_180743444() == 3)
  {
    int v41 = -350584140;
    __int128 v40 = xmmword_1807A2660;
    int v39 = 368778837;
    __int128 v38 = xmmword_1807A2688;
    int v37 = -1418383976;
    __int128 v36 = xmmword_1807A2674;
    int v35 = -1213485500;
    __int128 v34 = xmmword_1807A269C;
    if (MGIsDeviceOneOfType((const UInt8 *)&v40, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v38)
      || (int v33 = 897736383,
          __int128 v32 = xmmword_1807A26C4,
          int v31 = -453987047,
          __int128 v30 = xmmword_1807A26EC,
          int v29 = 450980336,
          __int128 v28 = xmmword_1807A2714,
          MGIsDeviceOneOfType((const UInt8 *)&v32, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v30)))
    {
      uint64_t v21 = MEMORY[0x189604DE8];
    }

    else
    {
      int v27 = 414393924;
      __int128 v26 = xmmword_1807A26B0;
      int v25 = -996295886;
      __int128 v24 = xmmword_1807A26D8;
      int v22 = MGIsDeviceOneOfType((const UInt8 *)&v26, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v24);
      uint64_t v21 = MEMORY[0x189604DE8];
      if (!v22) {
        uint64_t v21 = MEMORY[0x189604DE0];
      }
    }
  }

  else
  {
    uint64_t v21 = MEMORY[0x189604DE0];
  }

  return *(void *)v21;
}

BOOL sub_18074CDB0()
{
  return sub_180743444() == 1;
}

const void *sub_18074CDCC()
{
  return sub_18074776C((const char **)@"ZgIjA7Nwd2jSo13lhDO1Iw", 0LL);
}

uint64_t sub_18074CDDC()
{
  else {
    BOOL v0 = sub_180743444() == 11;
  }
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

CFNumberRef sub_18074CE54()
{
  if (sub_1807437FC((BOOL)@"r/++Z94rbTcHrTtZ/rCU4w", 115)) {
    goto LABEL_2;
  }
  if (sub_180743A48((BOOL)@"M10"))
  {
LABEL_4:
    int v0 = 42;
    goto LABEL_8;
  }

  if (sub_180743A48((BOOL)@"H9") || sub_180743A48((BOOL)@"H10")) {
    goto LABEL_7;
  }
  if (sub_180743A48((BOOL)@"H1")) {
    goto LABEL_18;
  }
  if (sub_180743A48((BOOL)@"M8")) {
    goto LABEL_4;
  }
  if (sub_180743A48((BOOL)@"H2")) {
    goto LABEL_18;
  }
  if (sub_180743A48((BOOL)@"M9")) {
    goto LABEL_4;
  }
  if (sub_180743A48((BOOL)@"H3")) {
    goto LABEL_18;
  }
  if (sub_1807437FC((BOOL)@"aIJva0DAnD6KdrSpPF11xQ", 115))
  {
LABEL_2:
    int v0 = 50;
    goto LABEL_8;
  }

  if (sub_180743A48((BOOL)@"H4")) {
    goto LABEL_18;
  }
  if (sub_180743A48((BOOL)@"H11")) {
    goto LABEL_7;
  }
  if (sub_180743A48((BOOL)@"H5"))
  {
LABEL_18:
    int v0 = 41;
    goto LABEL_8;
  }

  if (sub_1807437FC((BOOL)@"3Hj0jFscGt094g65Fag7eQ", 116)) {
    goto LABEL_7;
  }
  if (sub_180743A48((BOOL)@"H6")) {
    goto LABEL_4;
  }
  if (sub_1807437FC((BOOL)@"NKo9tzEYqtHAfQYMFsc66Q", 115))
  {
LABEL_7:
    int v0 = 51;
    goto LABEL_8;
  }

  if (sub_1807437FC((BOOL)@"zDBaE8nqtDP8hY4pOa6iMw", 116)) {
    int v0 = 50;
  }
  else {
    int v0 = 52;
  }
LABEL_8:
  int valuePtr = v0;
  return CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
}

uint64_t sub_18074CFD0()
{
  if (sub_180743A48((BOOL)@"H6")
    || sub_180743A48((BOOL)@"H8")
    || sub_180743444() == 6
    || sub_180743444() == 7
    || sub_180743A48((BOOL)@"H5")
    || sub_180743A48((BOOL)@"H7"))
  {
    uint64_t v0 = MEMORY[0x189604DE0];
  }

  else
  {
    BOOL v2 = sub_180743A48((BOOL)@"H4");
    uint64_t v0 = MEMORY[0x189604DE0];
    if (!v2) {
      uint64_t v0 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v0;
}

CFNumberRef sub_18074D06C()
{
  return sub_180766200("IODeviceTree:/product/camera", @"Q4b8YIwPgnznT5hs4qXjaA", 114);
}

BOOL sub_18074D084()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"YcNAX0Gc6KejQPKSrA9kvg", 102);
}

uint64_t sub_18074D09C()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/", (uint64_t)@"v7h4TrJdmukTl8gpzVl3DQ", 103LL);
}

uint64_t sub_18074D0B4()
{
  if (sub_180743444() != 11)
  {
    uint64_t result = sub_180743444();
    if ((_DWORD)result == 1) {
      return result;
    }
  }

  return 1LL;
}

uint64_t sub_18074D108()
{
  return sub_18076E9DC((uint64_t)@"wlan.nan.enabled");
}

uint64_t sub_18074D114()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/", (uint64_t)@"RaX3KBmG7H9fUOEtLK/I6w", 115LL);
}

CFNumberRef sub_18074D12C()
{
  return sub_180766200("IODeviceTree:/chosen", @"M+eWZ6Zk/aJIsnIrv4zdAg", 117);
}

BOOL sub_18074D144(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"TF31PAB6aO8KAbPyNKSxKA", a2);
}

BOOL sub_18074D168(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"TF31PAB6aO8KAbPyNKSxKA", 85, a2);
}

BOOL sub_18074D17C()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"lICl1+LV8GYEzQPilmyIXg", 114);
}

const void *sub_18074D194()
{
  return sub_180766414("IODeviceTree:/product", @"2aIAScwtFNCz+Y7WesMOCA", 109);
}

BOOL sub_18074D1AC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"TqrlqJOZiAuRx8Qu3SVr+Q", a2);
}

BOOL sub_18074D1D0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"TqrlqJOZiAuRx8Qu3SVr+Q", 83, a2);
}

uint64_t sub_18074D1E4()
{
  return 0LL;
}

BOOL sub_18074D1EC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"niQFEBBY7JaauAIosAyQQg", a2);
}

BOOL sub_18074D210(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"niQFEBBY7JaauAIosAyQQg", 77, a2);
}

CFStringRef sub_18074D224()
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v0 = (const __CFNumber *)sub_18074776C((const char **)@"eNgz35a7iZnVeEMwsBQZew", 0LL);
  uint64_t v1 = v0;
  unsigned int valuePtr = 0;
  if (v0)
  {
    CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr);
    uint64_t v2 = valuePtr;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  uint64_t v3 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  uint64_t v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, @"%X", v2);
  uint64_t v5 = (const __CFData *)sub_18074776C((const char **)@"Nmhz54v5ZLqj2I4NPFIFqQ", 0LL);
  CFMutableStringRef Mutable = CFStringCreateMutable(v3, 0LL);
  if (v5)
  {
    BytePtr = CFDataGetBytePtr(v5);
    CFIndex Length = CFDataGetLength(v5);
    if (Length >= 1)
    {
      CFIndex v9 = Length;
      do
      {
        unsigned int v10 = *BytePtr++;
        CFStringAppendFormat(Mutable, 0LL, @"%02X", v10);
        --v9;
      }

      while (v9);
    }
  }

  MEMORY[0x1895F8858]();
  v16[0] = 0x3030303030303030LL;
  CFIndex v11 = CFStringGetLength(Mutable);
  CFIndex v12 = CFStringGetLength(v4);
  if (v1 && v5)
  {
    CFStringRef v13 = CFStringCreateWithFormat( v3,  0LL,  @"%*.*s%@-%*.*s%@",  (8 - v12) & ~((8 - v12) >> 63),  (8 - v12) & ~((8 - v12) >> 63),  v16,  v4,  (8 - v11) & ~((8 - v11) >> 63),  (8 - v11) & ~((8 - v11) >> 63),  v16,  Mutable);
  }

  else
  {
    CFStringRef v13 = 0LL;
    CFStringRef v14 = 0LL;
    if (!v1) {
      goto LABEL_13;
    }
  }

  CFRelease(v1);
  CFStringRef v14 = v13;
LABEL_13:
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v14;
}

BOOL sub_18074D430(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"vIccod02kDxScKF5s2h6OA", a2);
}

BOOL sub_18074D454(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"vIccod02kDxScKF5s2h6OA", 66, a2);
}

BOOL sub_18074D468()
{
  return sub_180743A48((BOOL)@"H8");
}

CFTypeRef sub_18074D4B0()
{
  return sub_1807645D4(1LL, 1, 1LL);
}

BOOL sub_18074D4C0(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"lHMDJnC58naUz2rOCJyVIw", a2);
}

BOOL sub_18074D4E4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"lHMDJnC58naUz2rOCJyVIw", 73, a2);
}

uint64_t sub_18074D4F8()
{
  int v0 = sub_180743444();
  uint64_t v1 = MEMORY[0x189604DE8];
  if (v0 != 1) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

void *sub_18074D528()
{
  int v0 = sub_18074776C((const char **)@"qNNddlUK+B/YlooNoymwgA", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  uint64_t v2 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
  uint64_t v3 = sub_1807432C4(v2, @"ProductVersionExtra", 1);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, @"%@ %@", v1, v3);
    CFRelease(v1);
    uint64_t v1 = v4;
  }

  else
  {
    uint64_t v5 = (void *)CFRetain(v1);
  }

  CFRelease(v1);
  return v5;
}

CFTypeRef sub_18074D5D8()
{
  return sub_1807645D4(5LL, 1, 0LL);
}

BOOL sub_18074D5E8(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"heP+NTlvkhJ2zzWIUznawA", a2);
}

BOOL sub_18074D60C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"heP+NTlvkhJ2zzWIUznawA", 77, a2);
}

CFStringRef sub_18074D620()
{
  return sub_1807665C0("IODeviceTree:/chosen", @"MQoTKg93BM8ZhBaB3WUPdw", 102);
}

BOOL sub_18074D638()
{
  return sub_180746094((uint64_t)@"Valid", @"RegionalBehaviorValid");
}

__CFDictionary *sub_18074D64C()
{
  if (sub_180743B80()) {
    return 0LL;
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 6LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  for (uint64_t i = 0LL; i != 6; ++i)
  {
    uint64_t v2 = (const char **)off_1896F9750[i];
    uint64_t v3 = sub_18074776C(v2, 0LL);
    if (v3)
    {
      uint64_t v4 = v3;
      CFDictionarySetValue(Mutable, v2, v3);
      CFRelease(v4);
    }
  }

  if (!CFDictionaryGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0LL;
  }

  return Mutable;
}

BOOL sub_18074D700()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"twWCmmM9I0dxwv7Zs9v48Q", 97);
}

BOOL sub_18074D718()
{
  return sub_1807661DC("IODeviceTree:/product", @"AOIh1l3cIyDXlP4KB/084A", 105);
}

CFNumberRef sub_18074D730()
{
  int valuePtr = 0;
  int v0 = (const __CFBoolean *)sub_18076E7AC( 0LL,  (uint64_t)@"AppleSPUHIDDriver",  0LL,  (uint64_t)@"SupportHDRCompass",  0LL);
  if (v0)
  {
    uint64_t v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue(v1);
      int valuePtr = 2 * (Value != 0);
      CFRelease(v1);
      if (Value) {
        return CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
      }
    }

    else
    {
      CFRelease(v1);
    }
  }

  return CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
}

BOOL sub_18074D7EC()
{
  return sub_1807661DC("IODeviceTree:/product/camera", @"bmYssgjtQNKMy3Zhf8N+2w", 115);
}

BOOL sub_18074D808()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"NsUsZwajdZDN+suOIwkPvg", 115);
}

uint64_t sub_18074D820()
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 4)
  {
    int v22 = 1839812531;
    __int128 v21 = xmmword_1807A1E90;
    int v20 = -435113336;
    __int128 v19 = xmmword_1807A1EA4;
  }

  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1)
  {
    if (sub_180743444() == 3)
    {
      int v18 = 401945557;
      __int128 v17 = xmmword_1807A27DC;
      int v16 = 317289457;
      __int128 v15 = xmmword_1807A27C8;
      return MGIsDeviceOneOfType((const UInt8 *)&v17, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v15) ^ 1;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

const void *sub_18074DA48()
{
  return sub_180766414("IODeviceTree:/product/audio", @"4eFYRO4KDf8py/Zf3iHWZw", 115);
}

BOOL sub_18074DA60()
{
  return sub_180743AF0((BOOL)@"H13");
}

CFTypeRef sub_18074DA6C()
{
  return sub_180764B1C(0LL);
}

BOOL sub_18074DA74(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"H5TSt7Pu4zNCD5RvHuk5CQ", a2);
}

BOOL sub_18074DA98(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"H5TSt7Pu4zNCD5RvHuk5CQ", 80, a2);
}

CFTypeRef sub_18074DAAC()
{
  return sub_1807645D4(6LL, 1, 0LL);
}

BOOL sub_18074DABC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"RXyKSjeF239SL2vOcru01A", a2);
}

BOOL sub_18074DAE0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"RXyKSjeF239SL2vOcru01A", 77, a2);
}

uint64_t sub_18074DAF4()
{
  return 0LL;
}

BOOL sub_18074DAFC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"juE6wCsjVG4bfAhgHcUVcQ", a2);
}

BOOL sub_18074DB20(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"juE6wCsjVG4bfAhgHcUVcQ", 77, a2);
}

const void *sub_18074DB34()
{
  return sub_180766414("IODeviceTree:/arm-io/marconi-wifi", @"PNIwPfoxY6URyv3kSma5Aw", 119);
}

uint64_t sub_18074DB4C()
{
  return sub_18076E59C( (uint64_t)"IODeviceTree:/",  (uint64_t)@"OmiBcaNEpjOcuQrO5/Yrbw",  100LL,  (uint64_t)@"us1armjE6TKGvh2WIrNgEQ",  97LL);
}

CFStringRef sub_18074DB70()
{
  return sub_1807665C0("IODeviceTree:/", @"NsIeRLGugrogpTZiayi1VA", 99);
}

uint64_t sub_18074DB88()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 4
    || sub_180743444() == 2
    || sub_180743444() == 3
    || sub_180743444() == 1
    || sub_180743444() == 7
    || sub_180743444() == 11)
  {
    uint64_t v7 = MEMORY[0x189604DE0];
  }

  else
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -414334491;
    __int128 v10 = xmmword_1807A2548;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x189604DE0];
    if (!v9) {
      uint64_t v7 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v7;
}

BOOL sub_18074DD14()
{
  return sub_180743444() != 4;
}

BOOL sub_18074DD30()
{
  uint64_t v0 = sub_18074BC04();
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  BOOL v2 = CFEqual(v0, @"Restore") != 0;
  CFRelease(v1);
  return v2;
}

CFNumberRef sub_18074DD7C()
{
  int valuePtr = 0;
  uint64_t result = sub_180766200("IODeviceTree:/options", @"emu", 0);
  if (result)
  {
    uint64_t v1 = result;
    CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
    CFRelease(v1);
    return (const __CFNumber *)(valuePtr != 0);
  }

  return result;
}

const void *sub_18074DDE0()
{
  return sub_18074313C(@"SystemImageID", 1);
}

CFNumberRef sub_18074DDF0()
{
  return sub_180766200("IODeviceTree:/chosen", @"b5K3g59Aj+Cc982n9FQv8A", 100);
}

BOOL sub_18074DE08()
{
  return sub_180743444() != 7;
}

BOOL sub_18074DE24()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"ZT0Z0SqGF/esuJWDmk8mGw", 115);
}

uint64_t sub_18074DE3C()
{
  uint64_t v0 = sub_180766200("IODeviceTree:/buttons", @"home-button-type", 0);
  if (v0)
  {
    uint64_t v1 = v0;
    if (CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr)) {
      BOOL v2 = valuePtr == 1;
    }
    else {
      BOOL v2 = 0;
    }
    char v3 = v2;
    CFRelease(v1);
    uint64_t v4 = MEMORY[0x189604DE8];
    if ((v3 & 1) == 0) {
      uint64_t v4 = MEMORY[0x189604DE0];
    }
  }

  else
  {
    uint64_t v4 = MEMORY[0x189604DE0];
  }

  return *(void *)v4;
}

CFNumberRef sub_18074DEC8()
{
  return sub_1807450C4(1u);
}

BOOL sub_18074DED0()
{
  return sub_1807661A8("IODeviceTree:/product", @"v1/EHDarbU55OfoXm2EiGA", 115);
}

CFNumberRef sub_18074DEE8()
{
  int v9 = 0;
  int valuePtr = -1;
  uint64_t v0 = (const __CFData *)sub_180766414("IODeviceTree:/chosen", @"marketing-software-behavior", 0);
  if (!v0) {
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt32Type, &v9);
  }
  uint64_t v1 = v0;
  BytePtr = CFDataGetBytePtr(v0);
  if (BytePtr && (v3 = BytePtr, CFTypeID v4 = CFGetTypeID(v1), v4 == CFDataGetTypeID()) && CFDataGetLength(v1) >= 4)
  {
    int v5 = v3[2];
    int valuePtr = v5;
    uint64_t v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt32Type, &valuePtr);
    if (v7) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  }

  CFNumberRef v7 = CFNumberCreate(v6, kCFNumberSInt32Type, &v9);
LABEL_11:
  CFRelease(v1);
  return v7;
}

CFDataRef sub_18074DFF4()
{
  return sub_180766C14("AppleSEPManager", 0xFu, 0LL, 0LL, 0x14uLL);
}

CFStringRef sub_18074E010()
{
  uint64_t v0 = (const __CFData *)sub_18074776C((const char **)@"X7SF9XDG+CBhoPIXA1YlCg", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    CFNumberRef v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_18074E12C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"0rbLl0hXmTehfEduXfeJYQ", a2);
}

BOOL sub_18074E150(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"0rbLl0hXmTehfEduXfeJYQ", 84, a2);
}

uint64_t sub_18074E164()
{
  BOOL v0 = sub_1807661A8("IODeviceTree:/product", @"disable-globe-map", 0);
  else {
    uint64_t v2 = MEMORY[0x189604DE8];
  }
  return *(void *)v2;
}

BOOL sub_18074E1C4()
{
  return sub_180743444() == 7;
}

BOOL sub_18074E1E0()
{
  return sub_1807661A8("IODeviceTree:/product", @"3hD7TZt4FFvCgra7E8PkWw", 99);
}

uint64_t sub_18074E1F8()
{
  int v1 = 0;
  LODWORD(result) = sub_180747E9C((const char **)@"gme55xrmjlSlBkahnZq36A", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0) {
    return result;
  }
  else {
    return 0LL;
  }
}

CFNumberRef sub_18074E23C()
{
  return sub_180766200("IODeviceTree:/product/camera", @"iifCuJmggYlB4hLzc0Zoiw", 114);
}

CFNumberRef sub_18074E254()
{
  mach_port_t v0 = *MEMORY[0x1896086A8];
  int v1 = IOServiceMatching("IOPlatformExpertDevice");
  io_service_t MatchingService = IOServiceGetMatchingService(v0, v1);
  if (!MatchingService) {
    return 0LL;
  }
  char v3 = (const __CFData *)IORegistryEntrySearchCFProperty( MatchingService,  "IODeviceTree",  @"ane-type",  (CFAllocatorRef)*MEMORY[0x189604DB0],  1u);
  if (!v3) {
    return 0LL;
  }
  CFTypeID v4 = v3;
  BytePtr = CFDataGetBytePtr(v3);
  CFNumberRef v6 = CFNumberCreate(0LL, kCFNumberSInt32Type, BytePtr);
  CFRelease(v4);
  return v6;
}

CFStringRef sub_18074E2EC()
{
  else {
    return 0LL;
  }
}

CFNumberRef sub_18074E33C()
{
  return sub_180766200("IODeviceTree:/chosen", @"F6wqOqCR9tpYWyB1taxxnw", 98);
}

CFNumberRef sub_18074E354()
{
  return sub_180766200("IODeviceTree:/product/facetime", @"yeaE9+OrN2WJlWkDroMtZg", 98);
}

uint64_t sub_18074E36C()
{
  return sub_18076E49C( (uint64_t)"IODeviceTree:",  (uint64_t)@"RaX3KBmG7H9fUOEtLK/I6w",  115LL,  (uint64_t)@"hLzlRnTuKAcQLWtNwCFSfg",  110LL);
}

BOOL sub_18074E390()
{
  return sub_1807661A8("IODeviceTree:/product", @"ESA7FmyB3KbJFNBAsBejcg", 117);
}

uint64_t sub_18074E3A8()
{
  mach_port_t v0 = sub_1807665C0("IODeviceTree:/", @"model-config", 0);
  uint64_t v1 = *MEMORY[0x189604DE0];
  if (v0)
  {
    uint64_t v2 = v0;
    if (CFStringFind(v0, @"NED=1", 0LL).location != -1) {
      uint64_t v1 = *MEMORY[0x189604DE8];
    }
    CFRelease(v2);
  }

  return v1;
}

BOOL sub_18074E41C()
{
  return sub_1807661DC("IODeviceTree:/arm-io/isp", @"X9NA3D+PguwY0i0Uffl07Q", 99);
}

uint64_t sub_18074E434()
{
  mach_port_t v0 = sub_18074BC04();
  if (!v0) {
    return 1LL;
  }
  uint64_t v1 = v0;
  BOOL v2 = !CFEqual(v0, @"NonUI")
    && !CFEqual(v1, @"VendorNonUI")
    && !CFEqual(v1, @"Darwin")
    && !CFEqual(v1, @"Darwin Internal")
    && CFStringHasPrefix(v1, @"Darwin") == 0;
  CFRelease(v1);
  return v2;
}

uint64_t sub_18074E4D8()
{
  return 0LL;
}

const void *sub_18074E4E0()
{
  return sub_18074776C((const char **)@"s8TgWYc7BjtSNbtuycqauw", 0LL);
}

uint64_t sub_18074E4F0()
{
  return 1LL;
}

uint64_t sub_18074E4F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v10 = -1431778695;
  __int128 v9 = xmmword_1807A22F0;
  else {
    return sub_18075ECCC();
  }
}

uint64_t sub_18074E57C()
{
  uint64_t v124 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 1 && MGGetBoolAnswer((const char **)@"BWoQXWXYITrPRpFyc9xTLw"))
  {
    uint64_t v7 = MEMORY[0x189604DE8];
  }

  else
  {
    int v123 = -1022451852;
    __int128 v122 = xmmword_1807A2868;
    int v121 = 1729782187;
    __int128 v120 = xmmword_1807A287C;
    int v119 = -1527788847;
    __int128 v118 = xmmword_1807A2804;
    int v117 = 1532898719;
    __int128 v116 = xmmword_1807A27F0;
    int v115 = -1579092758;
    __int128 v114 = xmmword_1807A2048;
    int v113 = 1430379884;
    __int128 v112 = xmmword_1807A205C;
    int v111 = 1032708406;
    __int128 v110 = xmmword_1807A2160;
    int v109 = 729903963;
    __int128 v108 = xmmword_1807A2174;
    int v107 = 1275676051;
    __int128 v106 = xmmword_1807A2854;
    int v105 = 1908474541;
    __int128 v104 = xmmword_1807A2840;
    int v103 = 1789837692;
    __int128 v102 = xmmword_1807A1FF8;
    int v101 = 48355600;
    __int128 v100 = xmmword_1807A200C;
    int v99 = -1239654590;
    __int128 v98 = xmmword_1807A2020;
    int v97 = -679691073;
    __int128 v96 = xmmword_1807A2034;
    int v95 = -926344036;
    __int128 v94 = xmmword_1807A2070;
    int v93 = -954998212;
    __int128 v92 = xmmword_1807A2084;
    int v91 = 436612651;
    __int128 v90 = xmmword_1807A2098;
    int v89 = 1602014129;
    __int128 v88 = xmmword_1807A20AC;
    int v87 = 317289457;
    __int128 v86 = xmmword_1807A27C8;
    int v85 = -199226823;
    __int128 v84 = xmmword_1807A278C;
    int v83 = 1412427398;
    __int128 v82 = xmmword_1807A27A0;
    int v81 = 996646949;
    __int128 v80 = xmmword_1807A282C;
    int v79 = -563086000;
    __int128 v78 = xmmword_1807A2818;
    int v77 = -810116762;
    __int128 v76 = xmmword_1807A20C0;
    int v75 = 401945557;
    __int128 v74 = xmmword_1807A27DC;
    int v73 = -1283070668;
    __int128 v72 = xmmword_1807A2778;
    int v71 = 160260070;
    __int128 v70 = xmmword_1807A27B4;
    if (MGIsDeviceOneOfType((const UInt8 *)&v76, v50, v51, v52, v53, v54, v55, v56, (uint64_t)&v74))
    {
LABEL_13:
      uint64_t v7 = MEMORY[0x189604DE0];
    }

    else
    {
      int v69 = -1195351767;
      __int128 v68 = xmmword_1807A20D4;
      int v67 = -1639077591;
      __int128 v66 = xmmword_1807A1FD0;
      int v65 = MGIsDeviceOneOfType((const UInt8 *)&v68, v57, v58, v59, v60, v61, v62, v63, (uint64_t)&v66);
      uint64_t v7 = MEMORY[0x189604DE0];
      if (!v65) {
        uint64_t v7 = MEMORY[0x189604DE8];
      }
    }
  }

  return *(void *)v7;
}

CFDataRef sub_18074EA68()
{
  if (sub_180761D30(@"ringer-button-location", 0, v1)) {
    return CFDataCreate(0LL, (const UInt8 *)v1, 32LL);
  }
  else {
    return 0LL;
  }
}

BOOL sub_18074EAB0()
{
  return sub_1807661A8("IODeviceTree:/product", @"eKgHzGQ9HnWdPKX7W16OAg", 117);
}

BOOL sub_18074EAC8()
{
  return sub_1807661A8("IODeviceTree:/arm-io/isp", @"+fgL2ovGydvB5CWd1JI1qg", 104);
}

BOOL sub_18074EAE0()
{
  return sub_180743444() == 3;
}

CFTypeRef sub_18074EAFC()
{
  else {
    return 0LL;
  }
}

BOOL sub_18074EB34(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"sjGZBQzow3yV/IOa0wCeoQ", a2);
}

BOOL sub_18074EB58(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"sjGZBQzow3yV/IOa0wCeoQ", 86, a2);
}

uint64_t sub_18074EB6C()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t result = sub_180743AF0((BOOL)@"M11");
  if ((_DWORD)result)
  {
    int v11 = 1530338216;
    __int128 v10 = xmmword_1807A2584;
    int v9 = 406601745;
    __int128 v8 = xmmword_1807A2598;
    return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
  }

  return result;
}

BOOL sub_18074EC68(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"X7SF9XDG+CBhoPIXA1YlCg", a2);
}

BOOL sub_18074EC8C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"X7SF9XDG+CBhoPIXA1YlCg", 84, a2);
}

uint64_t sub_18074ECA0()
{
  return sub_1807620F4("CIO");
}

uint64_t sub_18074ECAC()
{
  BOOL v0 = sub_1807661A8("IODeviceTree:/product/camera", @"post-effects", 0);
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

const void *sub_18074ECF0()
{
  return sub_180766414("IODeviceTree:/product/audio", @"I6rd1SCXpRqBMDTPBbcWzA", 109);
}

CFArrayRef sub_18074ED08()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  v1[0] = xmmword_1896F97A8;
  v1[1] = *(_OWORD *)off_1896F97B8;
  uint64_t v2 = @"KP";
  return CFArrayCreate(0LL, (const void **)v1, 5LL, 0LL);
}

CFTypeRef sub_18074ED78()
{
  int v12 = -1;
  BOOL v0 = sub_180747E9C((const char **)@"XQBHOWjPt2P+uNqlLm1P7A", 5, 5, kCFNumberSInt32Type, &v12);
  CFTypeRef result = 0LL;
  if (v0 && v12 >= 2)
  {
    uint64_t v2 = *((void *)off_18C533F28 + 16);
    if (!v2) {
      uint64_t v2 = sub_180746538(16LL, 2LL);
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFTypeRef result = sub_1807642E0((uint64_t)"_CTServerConnectionCopyPostponementStatus", v2, TypeID);
    if (!result)
    {
      uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4) {
        __int128 v10 = v4 + 1;
      }
      else {
        __int128 v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v10,  4869LL,  (uint64_t)@"_CTServerConnectionCopyPostponementStatus returned NULL",  v5,  v6,  v7,  v8,  v9,  v11[0]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v11 = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "_CTServerConnectionCopyPostponementStatus returned NULL",  v11,  2u);
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t sub_18074EE90()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 4
    || sub_180743444() == 1
    || sub_180743444() == 3
    || sub_180743444() == 2
    || sub_180743444() == 7
    || sub_180743444() == 11)
  {
    uint64_t v7 = MEMORY[0x189604DE0];
  }

  else
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -526227167;
    __int128 v10 = xmmword_1807A255C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x189604DE0];
    if (!v9) {
      uint64_t v7 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v7;
}

float sub_18074F020()
{
  else {
    return 0.0;
  }
}

BOOL sub_18074F05C()
{
  return sub_180746094((uint64_t)@"NTSC", @"RegionalBehaviorNTSC");
}

BOOL sub_18074F070()
{
  return sub_1807661A8("IODeviceTree:/product/maps", @"v/BP9Nx/zfo9bKi9JR2p+g", 51);
}

CFStringRef sub_18074F088()
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (sub_180743B80()) {
    return @"iPad";
  }
  uint64_t v1 = SCPreferencesCreate(0LL, @"MobileGestalt", 0LL);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  if (SCPreferencesLock(v1, 1u))
  {
    CFStringRef v0 = SCDynamicStoreCopyComputerName(0LL, 0LL);
    SCPreferencesUnlock(v2);
  }

  else
  {
    uint64_t v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v4) {
      uint64_t v3 = v4 + 1;
    }
    int v5 = SCError();
    char v6 = SCErrorString(v5);
    _MGLog((uint64_t)v3, 4686LL, (uint64_t)@"SCPreferencesLock: %s", v7, v8, v9, v10, v11, v6);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      int v12 = SCError();
      *(_DWORD *)buf = 136315138;
      uint64_t v15 = SCErrorString(v12);
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "SCPreferencesLock: %s", buf, 0xCu);
    }

    CFStringRef v0 = SCDynamicStoreCopyComputerName(0LL, 0LL);
  }

  CFRelease(v2);
  return v0;
}

BOOL sub_18074F1E4(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"9/J7LY7zuYSGW1BcSTRpOw", a2);
}

BOOL sub_18074F208(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"9/J7LY7zuYSGW1BcSTRpOw", 83, a2);
}

BOOL sub_18074F21C()
{
  return sub_1807661A8("IODeviceTree:/buttons", @"Ah5yfSlY2yycIQb92HbmrA", 102);
}

CFDataRef sub_18074F234()
{
  return sub_180766C14("AppleMobileApNonce", 0xC8u, 0LL, 0LL, 0x20uLL);
}

const void *sub_18074F250()
{
  CFStringRef v0 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
  return sub_1807432C4(v0, @"ProductVersionExtra", 1);
}

CFNumberRef sub_18074F270()
{
  return sub_180766200("IODeviceTree:/baseband", @"5dyhCh3dm1vSOaNK+US1Qw", 101);
}

BOOL sub_18074F288(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"qWG594bTi87edQCSYxlLeA", a2);
}

BOOL sub_18074F2AC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"qWG594bTi87edQCSYxlLeA", 69, a2);
}

BOOL sub_18074F2C0()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"voS/bmBAz0Y1eNLoN8x9/Q", 112);
}

BOOL sub_18074F2D8()
{
  return sub_180746094((uint64_t)@"ShutterClick", @"RegionalBehaviorShutterClick");
}

CFNumberRef sub_18074F2EC()
{
  return sub_180766200("IODeviceTree:/product", @"6Y9R9JVBWd2wTX5ZdDGsWA", 97);
}

uint64_t sub_18074F304()
{
  BOOL v0 = sub_1807661A8("IODeviceTree:/product/camera", @"flash", 0);
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

uint64_t sub_18074F348()
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 1 || sub_180743444() == 2 || sub_180743444() == 3)
  {
    int v70 = -489993439;
    __int128 v69 = xmmword_1807A2638;
    int v68 = 886875686;
    __int128 v67 = xmmword_1807A264C;
    int v66 = 28030256;
    __int128 v65 = xmmword_1807A2138;
    int v64 = 1214363620;
    __int128 v63 = xmmword_1807A214C;
    int v62 = -798153473;
    __int128 v61 = xmmword_1807A1FA8;
    int v60 = -776721724;
    __int128 v59 = xmmword_1807A1FBC;
    int v58 = 729118884;
    __int128 v57 = xmmword_1807A25FC;
    int v56 = -1403227947;
    __int128 v55 = xmmword_1807A25E8;
    int v54 = 1046806126;
    __int128 v53 = xmmword_1807A2610;
    int v52 = -188760945;
    __int128 v51 = xmmword_1807A2624;
    int v50 = -350584140;
    __int128 v49 = xmmword_1807A2660;
    int v48 = 368778837;
    __int128 v47 = xmmword_1807A2688;
    int v46 = -1418383976;
    __int128 v45 = xmmword_1807A2674;
    int v44 = -1213485500;
    __int128 v43 = xmmword_1807A269C;
    if (MGIsDeviceOneOfType((const UInt8 *)&v49, v21, v22, v23, v24, v25, v26, v27, (uint64_t)&v47))
    {
LABEL_8:
      uint64_t v35 = MEMORY[0x189604DE0];
    }

    else
    {
      int v42 = -38605833;
      __int128 v41 = xmmword_1807A20E8;
      int v40 = -894965712;
      __int128 v39 = xmmword_1807A20FC;
      int v38 = MGIsDeviceOneOfType((const UInt8 *)&v41, v28, v29, v30, v31, v32, v33, v34, (uint64_t)&v39);
      uint64_t v35 = MEMORY[0x189604DE0];
      if (!v38) {
        uint64_t v35 = MEMORY[0x189604DE8];
      }
    }
  }

  else
  {
    int v37 = sub_180743444();
    uint64_t v35 = MEMORY[0x189604DE8];
    if (v37 != 6) {
      uint64_t v35 = MEMORY[0x189604DE0];
    }
  }

  return *(void *)v35;
}

CFTypeRef sub_18074F68C()
{
  return sub_180764878(2LL, 0, 1LL);
}

BOOL sub_18074F69C()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"SKBEzVsOS9Wr/WlkVtlUMQ", 102);
}

CFNumberRef sub_18074F6B4()
{
  return sub_180766200("IODeviceTree:/product/facetime", @"+U0jSj4F2EfE+Vqj22IavA", 116);
}

CFTypeRef sub_18074F6CC()
{
  return sub_180760A48(@"FrontCameraModuleSerialNumString");
}

BOOL sub_18074F6D8(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"qlcdNkarcGLcbW3HvBhwaA", a2);
}

BOOL sub_18074F6FC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"qlcdNkarcGLcbW3HvBhwaA", 70, a2);
}

uint64_t sub_18074F710()
{
  return 1LL;
}

CFTypeRef sub_18074F718()
{
  return sub_1807645D4(3LL, 0, 2LL);
}

BOOL sub_18074F728(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"xOEH0P1H/1jmYe2t54+5cQ", a2);
}

BOOL sub_18074F74C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"xOEH0P1H/1jmYe2t54+5cQ", 77, a2);
}

CFNumberRef sub_18074F760()
{
  CFNumberRef result = (CFNumberRef)sub_18076E59C( (uint64_t)"IODeviceTree:/arm-io",  (uint64_t)@"mesa",  0LL,  (uint64_t)@"mesaType",  0LL);
  if (!result)
  {
    if (MGGetBoolAnswer((const char **)@"HV7WDiidgMf7lwAu++Lk5w"))
    {
      int valuePtr = 0;
      return CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt32Type, &valuePtr);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL sub_18074F7D4()
{
  return sub_180743444() == 1;
}

BOOL sub_18074F7F0()
{
  return !sub_1807661A8("IODeviceTree:/product/maps", @"2lNKobEIQqX50ohy1JBqCA", 110);
}

CFTypeRef sub_18074F81C()
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  return sub_180763F28((uint64_t)"copyWifiCallingSecondaryDeviceCapability", (uint64_t)&unk_1896F97F0, TypeID);
}

BOOL sub_18074F844()
{
  return sub_1807661DC("IODeviceTree:/chosen", @"grEfqkFsEkgnJH1nl9sodw", 101);
}

CFTypeRef sub_18074F85C()
{
  return sub_180765200(1, "wlan", @"wifi-antenna-sku-info");
}

uint64_t sub_18074F874()
{
  int v3 = -1;
  BOOL v0 = sub_180747E9C((const char **)@"eJGhnVvylF3dMOHBKJzeiw", 5, 5, kCFNumberSInt32Type, &v3);
  if (v0 && v3 > 0) {
    uint64_t v1 = MEMORY[0x189604DE8];
  }
  else {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

const void *sub_18074F8D8()
{
  return sub_18074776C((const char **)@"A62OafQ85EJAiiqKn4agtg", 0LL);
}

BOOL sub_18074F8E8()
{
  return sub_1807661A8("IODeviceTree:/buttons", @"MzxVeXMzucmEMx2lw8Pg1Q", 111);
}

BOOL sub_18074F900()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"JQr1mcESYcN648vrcZPJEA", 102);
}

BOOL sub_18074F918()
{
  return sub_180743444() != 4;
}

BOOL sub_18074F934()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"sBBgbCSIQcUOXwgaDW/Xew", 97);
}

CFStringRef sub_18074F94C()
{
  BOOL v0 = (const __CFData *)sub_18074776C((const char **)@"jSDzacs4RYWnWxn142UBLQ", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_18074FA68(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"k5lVWbXuiZHLA17KGiVUAA", a2);
}

BOOL sub_18074FA8C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"k5lVWbXuiZHLA17KGiVUAA", 66, a2);
}

BOOL sub_18074FAA0()
{
  return sub_180744A58("armv7s");
}

BOOL sub_18074FAAC()
{
  return sub_1807661A8("IODeviceTree:/arm-io/isp", @"aHrkhDFY/f2ophZ5/MqX0w", 102);
}

CFDataRef sub_18074FAC4()
{
  CFDataRef result = (CFDataRef)sub_180766414("IODeviceTree:/chosen", @"mac-address-bluetooth0", 0);
  if (!result)
  {
    CFDataRef result = (CFDataRef)sub_1807654D8("bluetooth");
    if (!result) {
      return sub_1807697E8(0x424D6163u);
    }
  }

  return result;
}

BOOL sub_18074FB20(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"jSDzacs4RYWnWxn142UBLQ", a2);
}

BOOL sub_18074FB44(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"jSDzacs4RYWnWxn142UBLQ", 66, a2);
}

uint64_t sub_18074FB58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  int v37 = -526227167;
  __int128 v36 = xmmword_1807A255C;
  int v35 = -1509831889;
  __int128 v34 = xmmword_1807A2570;
  if (MGIsDeviceOneOfType((const UInt8 *)&v36, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v34)
    || (int v33 = 289690957,
        __int128 v32 = xmmword_1807A2188,
        int v31 = 586720268,
        __int128 v30 = xmmword_1807A219C,
        MGIsDeviceOneOfType((const UInt8 *)&v32, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v30)))
  {
    uint64_t v15 = MEMORY[0x189604DE0];
  }

  else if (sub_180743444() == 6)
  {
    int v29 = 368885834;
    __int128 v28 = xmmword_1807A2534;
    int v27 = -414334491;
    __int128 v26 = xmmword_1807A2548;
    int v24 = MGIsDeviceOneOfType((const UInt8 *)&v28, v17, v18, v19, v20, v21, v22, v23, (uint64_t)&v26);
    uint64_t v15 = MEMORY[0x189604DE0];
    if (!v24) {
      uint64_t v15 = MEMORY[0x189604DE8];
    }
  }

  else
  {
    int v25 = sub_180743444();
    uint64_t v15 = MEMORY[0x189604DE8];
    if (v25 == 7) {
      uint64_t v15 = MEMORY[0x189604DE0];
    }
  }

  return *(void *)v15;
}

uint64_t sub_18074FCD0()
{
  int v0 = sub_1807463A0();
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

CFTypeRef sub_18074FD00()
{
  return sub_180765200(1, "AppleOceanComputeMCU", @"Carrier Slot");
}

CFNumberRef sub_18074FD18()
{
  return sub_180766200("IODeviceTree:/product/camera", @"vmZuX/fdqt3gKhonHYLyUw", 97);
}

uint64_t sub_18074FD30()
{
  return sub_180769530(0x43474D74u);
}

BOOL sub_18074FD3C()
{
  return sub_1807661A8("IODeviceTree:/product/haptics", @"OtnrTIhWBtyPo45BcApMTw", 115);
}

const void *sub_18074FD54()
{
  return sub_18074776C((const char **)@"V2Ykm/0M3CA6nyNhwNInsg", 0LL);
}

uint64_t sub_18074FD64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int v14 = -337121064;
  __int128 v13 = xmmword_1807A2700;
  int v12 = 450980336;
  __int128 v11 = xmmword_1807A2714;
  int v8 = MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11);
  uint64_t v9 = MEMORY[0x189604DE8];
  if (!v8) {
    uint64_t v9 = MEMORY[0x189604DE0];
  }
  return *(void *)v9;
}

CFStringRef sub_18074FE0C()
{
  return sub_1807665C0("IODeviceTree:/chosen", @"cganRwxlDnONJx4WeDI0kQ", 102);
}

BOOL sub_18074FE24()
{
  return sub_1807661A8("IODeviceTree:/arm-io/aop", @"hh/NoWpEoq1VF4lGDdPUpw", 114);
}

uint64_t sub_18074FE3C()
{
  else {
    uint64_t v0 = MEMORY[0x189604DE0];
  }
  return *(void *)v0;
}

CFNumberRef sub_18074FE84()
{
  uint64_t v8 = 0x1A80000000LL;
  uint64_t valuePtr = 0x400000000LL;
  uint64_t v7 = 0xC00000000LL;
  uint64_t v0 = sub_180761A30();
  uint64_t v1 = v0;
  if (v0 < 0x2540BE4001LL)
  {
    if (v0 < 0xEE6B28001LL)
    {
      CFTypeID v2 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      if (v1 < 0x773594001LL) {
        p_uint64_t valuePtr = &valuePtr;
      }
      else {
        p_uint64_t valuePtr = &v7;
      }
    }

    else
    {
      CFTypeID v2 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      p_uint64_t valuePtr = &v8;
    }
  }

  else
  {
    uint64_t v5 = v0 - 0x380000000LL;
    CFTypeID v2 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    p_uint64_t valuePtr = &v5;
  }

  return CFNumberCreate(v2, kCFNumberSInt64Type, p_valuePtr);
}

BOOL sub_18074FF50()
{
  return sub_180743444() != 4;
}

BOOL sub_18074FF70(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"67x5O+zO+JwnGgmKlq+qdA", a2);
}

BOOL sub_18074FF94(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"67x5O+zO+JwnGgmKlq+qdA", 68, a2);
}

CFTypeRef sub_18074FFA8()
{
  return sub_1807615E4(@"SavageSNUM");
}

BOOL sub_18074FFB4(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"LE2kQ7U1iM32AmlhYvlagg", a2);
}

BOOL sub_18074FFD8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"LE2kQ7U1iM32AmlhYvlagg", 83, a2);
}

uint64_t sub_18074FFEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  int v29 = -38605833;
  __int128 v28 = xmmword_1807A20E8;
  int v27 = -894965712;
  __int128 v26 = xmmword_1807A20FC;
  int v25 = -2101636455;
  __int128 v24 = xmmword_1807A2110;
  int v23 = -1955568593;
  __int128 v22 = xmmword_1807A2124;
  if (MGIsDeviceOneOfType((const UInt8 *)&v28, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v26)
    || sub_180743444() == 6)
  {
    uint64_t v15 = MEMORY[0x189604DE0];
  }

  else
  {
    int v21 = -926344036;
    __int128 v20 = xmmword_1807A2070;
    int v19 = -954998212;
    __int128 v18 = xmmword_1807A2084;
    int v16 = MGIsDeviceOneOfType((const UInt8 *)&v20, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v18);
    uint64_t v15 = MEMORY[0x189604DE0];
    if (!v16) {
      uint64_t v15 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v15;
}

uint64_t sub_180750168()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v11 = -2085056298;
  __int128 v10 = xmmword_1807A1F44;
  int v9 = 1860682089;
  __int128 v8 = xmmword_1807A1F30;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8) ^ 1;
}

BOOL sub_180750368()
{
  CFPropertyListRef v0 = sub_1807445A0(@"com.apple.radios.plist", @"AirplaneMode");
  CFPropertyListRef v1 = v0;
  CFPropertyListRef v2 = (CFPropertyListRef)*MEMORY[0x189604DE8];
  if (v0) {
    CFRelease(v0);
  }
  return v1 == v2;
}

CFNumberRef sub_1807503B8()
{
  return sub_180766200("IODeviceTree:/chosen", @"xXBT4e92qXwQo3SYmACj3w", 100);
}

BOOL sub_1807503D0(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"Z/TJS0IaLyq10dcSvUTGPg", a2);
}

BOOL sub_1807503F4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"Z/TJS0IaLyq10dcSvUTGPg", 68, a2);
}

CFNumberRef sub_180750408()
{
  return sub_1807450C4(3u);
}

BOOL sub_180750410()
{
  return sub_1807661A8("IODeviceTree:/chosen", @"U1fcnNYCEu9uH1bg3/6PKQ", 105);
}

uint64_t sub_180750428( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  int v36 = -414334491;
  __int128 v35 = xmmword_1807A2548;
  int v34 = -1509831889;
  __int128 v33 = xmmword_1807A2570;
  if (MGIsDeviceOneOfType((const UInt8 *)&v35, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v33)
    || (int v32 = 289690957,
        __int128 v31 = xmmword_1807A2188,
        int v30 = 586720268,
        __int128 v29 = xmmword_1807A219C,
        MGIsDeviceOneOfType((const UInt8 *)&v31, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v29))
    || sub_180743444() != 6)
  {
    uint64_t v23 = MEMORY[0x189604DE0];
  }

  else
  {
    int v28 = 368885834;
    __int128 v27 = xmmword_1807A2534;
    int v26 = -526227167;
    __int128 v25 = xmmword_1807A255C;
    int v22 = MGIsDeviceOneOfType((const UInt8 *)&v27, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v25);
    uint64_t v23 = MEMORY[0x189604DE0];
    if (!v22) {
      uint64_t v23 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v23;
}

uint64_t sub_180750580()
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 4)
  {
    int v16 = 1839812531;
    __int128 v15 = xmmword_1807A1E90;
    if ((MGIsDeviceOfType((const UInt8 *)&v15) & 1) == 0)
    {
      int v14 = -435113336;
      __int128 v13 = xmmword_1807A1EA4;
      else {
        return 5LL;
      }
    }

    return 1LL;
  }

  if (sub_180743444() == 6)
  {
    if (!sub_180743AF0((BOOL)@"M9")) {
      return 1LL;
    }
    uint64_t v0 = 2LL;
    if (!sub_180743A48((BOOL)@"M9"))
    {
      if (sub_180743A48((BOOL)@"M10")) {
        return 2LL;
      }
      else {
        return 3LL;
      }
    }
  }

  else
  {
    int v12 = 317289457;
    __int128 v11 = xmmword_1807A27C8;
    int v10 = 401945557;
    __int128 v9 = xmmword_1807A27DC;
    else {
      return 4LL;
    }
  }

  return v0;
}

const void *sub_1807507C0()
{
  return sub_18074313C(@"BuildID", 1);
}

uint64_t sub_1807507D0()
{
  return 0LL;
}

BOOL sub_1807507EC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"U/nyu97+Q5SFY9yJKJTuSA", a2);
}

BOOL sub_180750810(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"U/nyu97+Q5SFY9yJKJTuSA", 84, a2);
}

BOOL sub_180750824()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"DIXX7JMbm7glu49f+xi4zQ", 108);
}

BOOL sub_18075083C()
{
  return sub_1807661DC("IODeviceTree:/product/camera", @"gk8sn5Vi0s088gEvssfbOg", 102);
}

BOOL sub_180750858(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"0D3qCmmfJ/i1mpmjOsV7EA", a2);
}

BOOL sub_18075087C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"0D3qCmmfJ/i1mpmjOsV7EA", 83, a2);
}

BOOL sub_180750890()
{
  return sub_180743444() != 4;
}

BOOL sub_1807508AC()
{
  return !sub_1807442E4(@"TU");
}

const void *sub_1807508CC()
{
  return sub_18074776C((const char **)@"LBJfwOEzExRxzlAnSuI7eg", 0LL);
}

BOOL sub_1807508DC()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"ieuwDGiHrHoYRjSl6gT+1A", 115);
}

BOOL sub_1807508F4()
{
  return sub_180746094((uint64_t)@"ChinaBrick", @"RegionalBehaviorChinaBrick");
}

CFNumberRef sub_180750908()
{
  return sub_180766200("IODeviceTree:/product/camera", @"qAAQUPLjf+Hl4UM3WY2qgw", 102);
}

CFStringRef sub_180750920()
{
  return sub_1807665C0("IODeviceTree:/product", @"vq2wpvLzyYLEApQs9cs52A", 112);
}

BOOL sub_180750938(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"YVNo6vlMjhgQ9yGYV8gatw", a2);
}

BOOL sub_18075095C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"YVNo6vlMjhgQ9yGYV8gatw", 80, a2);
}

uint64_t sub_180750970()
{
  CFTypeRef v0 = IOPSCopyPowerSourcesInfo();
  if (!v0)
  {
    int v68 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v68, 3643LL, (uint64_t)@"Could not get power source info", v69, v70, v71, v72, v73, v80[0]);
    uint64_t v43 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v43;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Could not get power source info", buf, 2u);
    return 0LL;
  }

  uint64_t v1 = v0;
  uint64_t v2 = IOPSCopyPowerSourcesList(v0);
  if (!v2)
  {
    __int128 v74 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v74, 3646LL, (uint64_t)@"Could not get list of power sources", v75, v76, v77, v78, v79, v80[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not get list of power sources",  buf,  2u);
    }

    CFRelease(v1);
    return 0LL;
  }

  uint64_t v3 = v2;
  if (CFArrayGetCount(v2) < 1)
  {
LABEL_55:
    uint64_t v43 = 0LL;
    goto LABEL_56;
  }

  CFIndex v4 = 0LL;
  uint64_t v5 = (os_log_s *)MEMORY[0x1895F8DA0];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v3, v4);
    uint64_t v7 = IOPSGetPowerSourceDescription(v1, ValueAtIndex);
    if (!v7)
    {
      __int128 v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v13) {
        uint64_t v19 = v13 + 1;
      }
      else {
        uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v19,  3656LL,  (uint64_t)@"Could not get dictionary for power source",  v14,  v15,  v16,  v17,  v18,  v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_36;
      }
      *(_WORD *)__int128 v80 = 0;
      uint64_t v20 = v5;
      uint64_t v21 = "Could not get dictionary for power source";
LABEL_35:
      _os_log_impl(&dword_180741000, v20, OS_LOG_TYPE_DEFAULT, v21, v80, 2u);
      goto LABEL_36;
    }

    uint64_t v8 = v7;
    int Value = CFDictionaryGetValue(v7, @"Power Source State");
    if (!Value)
    {
      int v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v22) {
        int v28 = v22 + 1;
      }
      else {
        int v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v28,  3663LL,  (uint64_t)@"No kIOPSPowerSourceStateKey in power source dictionary",  v23,  v24,  v25,  v26,  v27,  v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_36;
      }
      *(_WORD *)__int128 v80 = 0;
      uint64_t v20 = v5;
      uint64_t v21 = "No kIOPSPowerSourceStateKey in power source dictionary";
      goto LABEL_35;
    }

    if (CFEqual(Value, @"AC Power")) {
      goto LABEL_38;
    }
    int v10 = (const __CFNumber *)CFDictionaryGetValue(v8, @"Current Capacity");
    if (!v10)
    {
      __int128 v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v29) {
        __int128 v35 = v29 + 1;
      }
      else {
        __int128 v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v35,  3678LL,  (uint64_t)@"No kIOPSCurrentCapacityKey in power source dictionary",  v30,  v31,  v32,  v33,  v34,  v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_36;
      }
      *(_WORD *)__int128 v80 = 0;
      uint64_t v20 = v5;
      uint64_t v21 = "No kIOPSCurrentCapacityKey in power source dictionary";
      goto LABEL_35;
    }

    if (!CFNumberGetValue(v10, kCFNumberFloatType, &valuePtr))
    {
      int v44 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v44) {
        int v50 = v44 + 1;
      }
      else {
        int v50 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v50,  3683LL,  (uint64_t)@"Could not convert CFNumber to float",  v45,  v46,  v47,  v48,  v49,  v80[0]);
      uint64_t v43 = 0LL;
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      *(_WORD *)__int128 v80 = 0;
      __int128 v51 = (os_log_s *)MEMORY[0x1895F8DA0];
      int v52 = "Could not convert CFNumber to float";
LABEL_54:
      _os_log_impl(&dword_180741000, v51, OS_LOG_TYPE_DEFAULT, v52, v80, 2u);
      goto LABEL_55;
    }

    __int128 v11 = (const __CFNumber *)CFDictionaryGetValue(v8, @"Max Capacity");
    if (!v11)
    {
      int v36 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v36) {
        int v42 = v36 + 1;
      }
      else {
        int v42 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v42,  3690LL,  (uint64_t)@"No kIOPSMaxCapacityKey in power source dictionary",  v37,  v38,  v39,  v40,  v41,  v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_36;
      }
      *(_WORD *)__int128 v80 = 0;
      uint64_t v20 = v5;
      uint64_t v21 = "No kIOPSMaxCapacityKey in power source dictionary";
      goto LABEL_35;
    }

    if (!CFNumberGetValue(v11, kCFNumberFloatType, buf))
    {
      __int128 v53 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v53) {
        __int128 v59 = v53 + 1;
      }
      else {
        __int128 v59 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v59,  3695LL,  (uint64_t)@"Could not convert CFNumber to float",  v54,  v55,  v56,  v57,  v58,  v80[0]);
      uint64_t v43 = 0LL;
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      *(_WORD *)__int128 v80 = 0;
      __int128 v51 = (os_log_s *)MEMORY[0x1895F8DA0];
      int v52 = "Could not convert CFNumber to float";
      goto LABEL_54;
    }

    float v12 = sub_18075CEE0() + -0.05;
    if ((float)(valuePtr / *(float *)buf) >= v12)
    {
LABEL_38:
      uint64_t v43 = 1LL;
      goto LABEL_56;
    }

LABEL_36:
    if (CFArrayGetCount(v3) <= ++v4) {
      goto LABEL_55;
    }
  }

  int v60 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v60) {
    int v66 = v60 + 1;
  }
  else {
    int v66 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v66, 3699LL, (uint64_t)@"Battery max capacity is reported as 0", v61, v62, v63, v64, v65, v80[0]);
  uint64_t v43 = 0LL;
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v80 = 0;
    __int128 v51 = (os_log_s *)MEMORY[0x1895F8DA0];
    int v52 = "Battery max capacity is reported as 0";
    goto LABEL_54;
  }

      *(void *)(a1 + 16) = v14;
      return v12;
    case 2:
      __int128 v13 = *a5 - 8;
      float v12 = 4294967125LL;
      goto LABEL_19;
  }

  if (a3 != 3) {
    return 4294967289LL;
  }
  __int128 v13 = *a5 - 4;
  float v12 = 4294967135LL;
LABEL_19:
  if (v13 >= 0xFFFFFFFE) {
    goto LABEL_20;
  }
  return v12;
}

LABEL_56:
  CFRelease(v1);
  CFRelease(v3);
  return v43;
}

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C534180);
  return Copy;
}

BOOL sub_180750E40()
{
  if (sub_1807463A0())
  {
    CFDataRef v0 = sub_18075A1A8();
    if (v0)
    {
      uint64_t v1 = v0;
      CFTypeID v2 = CFGetTypeID(v0);
      if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) >= 6)
      {
        BytePtr = CFDataGetBytePtr(v1);
        if (*BytePtr)
        {
          BOOL v4 = 1LL;
        }

        else
        {
          unint64_t v14 = 0LL;
          do
          {
            unint64_t v15 = v14;
            if (v14 == 5) {
              break;
            }
            ++v14;
          }

          while (!BytePtr[v15 + 1]);
          BOOL v4 = v15 < 5;
        }
      }

      else
      {
        BOOL v4 = 0LL;
      }

      CFRelease(v1);
      return v4;
    }

    return 0LL;
  }

  uint64_t v5 = (uint64_t (*)())*((void *)off_18C533F28 + 97);
  if (!v5) {
    uint64_t v5 = (uint64_t (*)())sub_180746538(97LL, 2LL);
  }
  if (v5 == sub_180746810)
  {
    mach_port_t v8 = *MEMORY[0x1896086A8];
    __int128 v9 = IOServiceMatching("IOPlatformExpertDevice");
    io_service_t MatchingService = IOServiceGetMatchingService(v8, v9);
    if (MatchingService)
    {
      io_object_t v11 = MatchingService;
      BOOL v4 = 1LL;
      float v12 = (const __CFData *)IORegistryEntrySearchCFProperty( MatchingService,  "IODeviceTree",  @"no-sdio-devices",  (CFAllocatorRef)*MEMORY[0x189604DB0],  1u);
      if (v12)
      {
        __int128 v13 = v12;
        *(_DWORD *)buffer = 0;
        v17.CFIndex location = 0LL;
        v17.length = 4LL;
        CFDataGetBytes(v12, v17, buffer);
        BOOL v4 = *(_DWORD *)buffer == 0;
        CFRelease(v13);
      }

      IOObjectRelease(v11);
    }

    else
    {
      return 1LL;
    }
  }

  else
  {
    uint64_t v6 = (unsigned int (*)(void))*((void *)off_18C533F28 + 97);
    if (!v6) {
      uint64_t v6 = (unsigned int (*)(void))sub_180746538(97LL, 2LL);
    }
    return v6() != 0;
  }

  return v4;
}

BOOL sub_180750FF8()
{
  return sub_180743444() != 7;
}

CFTypeRef sub_180751014()
{
  return sub_1807645D4(1LL, 1, 0LL);
}

BOOL sub_180751024(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"j4dedPnpeXouudM1+j3dsQ", a2);
}

BOOL sub_180751048(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"j4dedPnpeXouudM1+j3dsQ", 73, a2);
}

CFTypeRef sub_18075105C()
{
  return sub_180765200(0, "AppleEmbeddedNVMeController", @"Serial Number");
}

BOOL sub_180751074(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"PcQWbThCb7iLEW+EoqZdEQ", a2);
}

BOOL sub_180751098(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"PcQWbThCb7iLEW+EoqZdEQ", 78, a2);
}

BOOL sub_1807510AC()
{
  return !MGGetBoolAnswer((const char **)@"s+gaKNe68Gs3PfqKrZhi1w");
}

BOOL sub_1807510CC()
{
  return sub_180744B6C(@"arm64e");
}

BOOL sub_1807510D8()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"LWxSM4CmFZMwzYclSh43gg", 114);
}

const void *sub_1807510F0()
{
  return sub_180766414("IODeviceTree:/arm-io/disp0", @"t56wS9db+T2F2bxBpYSX8Q", 101);
}

BOOL sub_180751108(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"yPqGUljqvtItkM6XMCZaQw", a2);
}

BOOL sub_18075112C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"yPqGUljqvtItkM6XMCZaQw", 68, a2);
}

uint64_t sub_180751140()
{
  if (sub_180743444() == 3 || sub_180743444() == 4)
  {
    uint64_t v0 = MEMORY[0x189604DE0];
  }

  else
  {
    int v2 = sub_180743444();
    uint64_t v3 = MEMORY[0x189604DE0];
    uint64_t v0 = MEMORY[0x189604DE0];
    if (v2 != 2)
    {
      int v4 = sub_180743444();
      uint64_t v0 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v0;
}

uint64_t sub_1807511B8()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v11 = -338255497;
  __int128 v10 = xmmword_1807A1EB8;
  int v9 = 152704997;
  __int128 v8 = xmmword_1807A1ECC;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8) ^ 1;
}

BOOL sub_1807512A0()
{
  uint64_t v0 = sub_18074BC04();
  BOOL v7 = sub_180743BA4((BOOL)v0, @"Internal", v1, v2, v3, v4, v5, v6, (uint64_t)@"Lite Internal");
  if (v0) {
    CFRelease(v0);
  }
  return v7;
}

CFNumberRef sub_180751300()
{
  return sub_180766200("IODeviceTree:/baseband", @"50/CmBTX6jhkb8Z61hzwhQ", 99);
}

CFDataRef sub_180751318()
{
  return sub_180766E84("AppleSEPManager", 0x2Bu, 0LL, 0, 0x8000uLL);
}

BOOL sub_180751334(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"HMpTbnbcAb+mQDi8O71h6Q", a2);
}

BOOL sub_180751358(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"HMpTbnbcAb+mQDi8O71h6Q", 76, a2);
}

uint64_t sub_18075136C()
{
  uint64_t v0 = *MEMORY[0x189604DE0];
  uint64_t v1 = (const __CFData *)sub_180766414("IODeviceTree:/buttons", @"button-names", 0);
  if (v1)
  {
    uint64_t v2 = v1;
    int64_t Length = CFDataGetLength(v1);
    BytePtr = CFDataGetBytePtr(v2);
    if (Length >= 1)
    {
      uint64_t v5 = (const char *)BytePtr;
      uint64_t v6 = &BytePtr[Length];
      while (strncmp(v5, "app", Length))
      {
        size_t v7 = strnlen(v5, Length);
        v5 += v7 + 1;
        Length -= v7 + 1;
      }

      uint64_t v0 = *MEMORY[0x189604DE8];
    }

LABEL_8:
    CFRelease(v2);
  }

  return v0;
}

  if (v2) {
    CFRelease(v2);
  }
  return v6;
}

  int v11 = CFRetain(v9);
  if (v6) {
LABEL_24:
  }
    CFRelease(v6);
LABEL_25:
  if (v9) {
    CFRelease(v9);
  }
  return v11;
}

  int v11 = CFRetain(v9);
  if (v6) {
LABEL_24:
  }
    CFRelease(v6);
LABEL_25:
  if (v9) {
    CFRelease(v9);
  }
  return v11;
}

BOOL sub_180751438()
{
  int v0 = sub_180743444();
  int v2 = sub_180743444();
  BOOL result = 1LL;
  if (v2 != 1 && v0 != 3) {
    return sub_180743444() == 2
  }
        || sub_180743444() == 6
        || sub_180743444() == 11;
  return result;
}

BOOL sub_1807514B0()
{
  int valuePtr = 69;
  int v0 = (uint64_t (*)(void, void))*((void *)off_18C533F28 + 100);
  if (!v0) {
    int v0 = (uint64_t (*)(void, void))sub_180746538(100LL, 2LL);
  }
  uint64_t v1 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  uint64_t v2 = v0(*MEMORY[0x189604DB0], 0LL);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = (const void *)v2;
  uint64_t v4 = (uint64_t (*)(const void *))*((void *)off_18C533F28 + 99);
  if (!v4) {
    uint64_t v4 = (uint64_t (*)(const void *))sub_180746538(99LL, 2LL);
  }
  uint64_t v5 = (const __CFArray *)v4(v3);
  if (!v5)
  {
    CFRelease(v3);
    return 0LL;
  }

  uint64_t v6 = v5;
  if (!CFArrayGetCount(v5))
  {
    __int128 v10 = 0LL;
LABEL_18:
    CFNumberRef v11 = 0LL;
    goto LABEL_19;
  }

  size_t v7 = (uint64_t (*)(const void *, void))*((void *)off_18C533F28 + 98);
  if (!v7) {
    size_t v7 = (uint64_t (*)(const void *, void))sub_180746538(98LL, 2LL);
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v6, 0LL);
  int v9 = (void *)*((void *)off_18C533F28 + 103);
  if (!v9) {
    int v9 = (void *)sub_180746538(103LL, 1LL);
  }
  __int128 v10 = (const __CFArray *)v7(ValueAtIndex, *v9);
  if (!v10) {
    goto LABEL_18;
  }
  CFNumberRef v11 = CFNumberCreate(v1, kCFNumberSInt32Type, &valuePtr);
  if (!v11)
  {
LABEL_19:
    BOOL v12 = 0LL;
    goto LABEL_20;
  }

  v15.length = CFArrayGetCount(v10);
  v15.CFIndex location = 0LL;
  BOOL v12 = CFArrayContainsValue(v10, v15, v11) != 0;
LABEL_20:
  CFRelease(v3);
  CFRelease(v6);
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v12;
}

CFMutableArrayRef sub_18075163C()
{
  CFMutableArrayRef result = CFArrayCreateMutable(0LL, 0LL, 0LL);
  if (result)
  {
    uint64_t v1 = result;
    if (sub_1807661A8("IODeviceTree:/product", @"nfc-express", 0)) {
      CFArrayAppendValue(v1, @"nfc-express");
    }
    if (sub_1807661A8("IODeviceTree:/product", @"alisha", 0)) {
      CFArrayAppendValue(v1, @"alisha");
    }
    if (sub_1807661A8("IODeviceTree:/product", @"find-my", 0)) {
      CFArrayAppendValue(v1, @"find-my");
    }
    CFArrayRef Copy = CFArrayCreateCopy(0LL, v1);
    CFRelease(v1);
    return Copy;
  }

  return result;
}

uint64_t sub_18075170C()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t result = MGGetBoolAnswer((const char **)@"8S7ydMJ4DlCUF38/hI/fJA");
  if ((_DWORD)result)
  {
    int v11 = -232427879;
    __int128 v10 = xmmword_1807A2764;
    int v9 = -427474227;
    __int128 v8 = xmmword_1807A273C;
    return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
  }

  return result;
}

BOOL sub_1807518FC()
{
  return sub_1807661DC("IODeviceTree:/product", @"KN7t4gQkyj5X66dBpmh9HQ", 108);
}

BOOL sub_180751914()
{
  int v0 = sub_18074BC04();
  BOOL v7 = sub_180743BA4((BOOL)v0, @"Desense", v1, v2, v3, v4, v5, v6, 0LL);
  if (v0) {
    CFRelease(v0);
  }
  return v7;
}

const void *sub_180751960()
{
  return sub_180766414("IODeviceTree:/chosen", @"kQ8nm82jb5iTBUwT2M3aIQ", 109);
}

BOOL sub_180751978(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"5MXFoiW2zgxfIbaaTb/wvA", a2);
}

BOOL sub_18075199C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"5MXFoiW2zgxfIbaaTb/wvA", 83, a2);
}

BOOL sub_1807519B0()
{
  return sub_180746094((uint64_t)@"GB18030", @"RegionalBehaviorGB18030");
}

CFStringRef sub_1807519C4()
{
  unsigned int v0 = sub_180743444() - 1;
  if (v0 > 0xA) {
    return @"Unknown";
  }
  else {
    return off_1896F9BD0[v0];
  }
}

const void *sub_1807519FC()
{
  return sub_18074776C((const char **)@"8S7ydMJ4DlCUF38/hI/fJA", 0LL);
}

CFNumberRef sub_180751A0C()
{
  int valuePtr = 0;
  CFNumberRef result = sub_180766200("IODeviceTree:/product/camera", @"front-max-burst-length", 0);
  if (!result)
  {
    if (MGGetBoolAnswer((const char **)@"plaYa8bKJaAF5Erc5nvZ+g")
      || MGGetBoolAnswer((const char **)@"Ty5/C8UDfdjcdR853kulmA"))
    {
      int valuePtr = 999;
    }

    return CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  }

  return result;
}

uint64_t sub_180751A7C()
{
  uint64_t v139 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 1)
  {
    int v138 = -232427879;
    __int128 v137 = xmmword_1807A2764;
    int v136 = -427474227;
    __int128 v135 = xmmword_1807A273C;
    int v134 = 1477534141;
    __int128 v133 = xmmword_1807A2750;
    int v132 = -1843102369;
    __int128 v131 = xmmword_1807A2728;
    int v130 = -820493242;
    __int128 v129 = xmmword_1807A2200;
    int v128 = -61007701;
    __int128 v127 = xmmword_1807A2214;
    int v126 = -235416490;
    __int128 v125 = xmmword_1807A2228;
    int v124 = -121925081;
    __int128 v123 = xmmword_1807A223C;
    int v122 = 1071957977;
    __int128 v121 = xmmword_1807A2250;
    int v120 = 438437663;
    __int128 v119 = xmmword_1807A2264;
    int v118 = -382792827;
    __int128 v117 = xmmword_1807A2278;
    int v116 = 1575123478;
    __int128 v115 = xmmword_1807A228C;
    int v114 = 123138233;
    __int128 v113 = xmmword_1807A22A0;
    int v112 = 681511593;
    __int128 v111 = xmmword_1807A22B4;
    int v110 = 713503427;
    __int128 v109 = xmmword_1807A22C8;
    int v108 = -1632750650;
    __int128 v107 = xmmword_1807A22DC;
    int v106 = -1431778695;
    __int128 v105 = xmmword_1807A22F0;
    BOOL v7 = &v135;
    __int128 v8 = &v137;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }

  if (sub_180743444() == 3)
  {
    int v104 = -1022451852;
    __int128 v103 = xmmword_1807A2868;
    int v102 = 1729782187;
    __int128 v101 = xmmword_1807A287C;
    int v100 = 996646949;
    __int128 v99 = xmmword_1807A282C;
    int v98 = -563086000;
    __int128 v97 = xmmword_1807A2818;
    int v96 = 317289457;
    __int128 v95 = xmmword_1807A27C8;
    int v94 = 401945557;
    __int128 v93 = xmmword_1807A27DC;
    int v92 = -1157300313;
    __int128 v91 = xmmword_1807A2304;
    int v90 = -2132668294;
    __int128 v89 = xmmword_1807A2318;
    int v88 = 2030516999;
    __int128 v87 = xmmword_1807A2890;
    int v86 = -1276010597;
    __int128 v85 = xmmword_1807A28A4;
    int v84 = -762483149;
    __int128 v83 = xmmword_1807A28B8;
    int v82 = -1926937532;
    __int128 v81 = xmmword_1807A28CC;
    int v80 = -1902732724;
    __int128 v79 = xmmword_1807A28E0;
    int v78 = -342357580;
    __int128 v77 = xmmword_1807A28F4;
    int v76 = 300442574;
    __int128 v75 = xmmword_1807A2908;
    int v74 = -1294188889;
    __int128 v73 = xmmword_1807A291C;
    int v72 = 1126727276;
    __int128 v71 = xmmword_1807A232C;
    int v70 = 300130091;
    __int128 v69 = xmmword_1807A2340;
    int v68 = 343814884;
    __int128 v67 = xmmword_1807A2354;
    int v66 = -1675932945;
    __int128 v65 = xmmword_1807A2368;
    int v64 = 1278131292;
    __int128 v63 = xmmword_1807A237C;
    int v62 = -1841712216;
    __int128 v61 = xmmword_1807A2390;
    int v60 = 659506830;
    __int128 v59 = xmmword_1807A23A4;
    int v58 = 213746202;
    __int128 v57 = xmmword_1807A23B8;
    int v56 = 372777383;
    __int128 v55 = xmmword_1807A23CC;
    int v54 = -858079590;
    __int128 v53 = xmmword_1807A23E0;
    int v52 = -212523443;
    __int128 v51 = xmmword_1807A23F4;
    int v50 = 646100384;
    __int128 v49 = xmmword_1807A2408;
    int v48 = 345196535;
    __int128 v47 = xmmword_1807A241C;
    int v46 = 440949464;
    __int128 v45 = xmmword_1807A2430;
    int v44 = -545612308;
    __int128 v43 = xmmword_1807A2444;
    int v42 = 1178062702;
    __int128 v41 = xmmword_1807A2458;
    int v40 = -695298128;
    __int128 v39 = xmmword_1807A246C;
    int v38 = 804488105;
    __int128 v37 = xmmword_1807A2480;
    int v36 = 1614584579;
    __int128 v35 = xmmword_1807A2494;
    int v34 = 324288768;
    __int128 v33 = xmmword_1807A24A8;
    int v32 = 460218192;
    __int128 v31 = xmmword_1807A24BC;
    int v30 = 2144905009;
    __int128 v29 = xmmword_1807A24D0;
    int v28 = 127894440;
    __int128 v27 = xmmword_1807A24E4;
    int v26 = 1070997468;
    __int128 v25 = xmmword_1807A24F8;
    int v24 = 688565114;
    __int128 v23 = xmmword_1807A250C;
    int v22 = -493418906;
    __int128 v21 = xmmword_1807A2520;
    BOOL v7 = &v101;
    __int128 v8 = &v103;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }

  uint64_t result = 0;
  if (sub_180743444() == 6 && sub_180743AF0((BOOL)@"M11"))
  {
    int v20 = 1530338216;
    __int128 v19 = xmmword_1807A2584;
    int v18 = 406601745;
    __int128 v17 = xmmword_1807A2598;
  }

  return result;
}

CFStringRef sub_18075237C()
{
  uint64_t v0 = (const __CFData *)sub_18074776C((const char **)@"aOq/O8u9f/bpWUnKco+xgA", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    BOOL v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_180752498(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"VG9TCKNqNLCHk0J6zTkuVQ", a2);
}

BOOL sub_1807524BC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"VG9TCKNqNLCHk0J6zTkuVQ", 69, a2);
}

BOOL sub_1807524D0()
{
  return sub_1807661A8("IODeviceTree:/product", @"0vvGMT0ltmG03nFfaXxoHg", 115);
}

const char *sub_1807524E8()
{
  uint64_t result = (const char *)sub_180746120();
  if (result) {
    return (const char *)CFStringCreateWithCString(0LL, result, 0x8000100u);
  }
  return result;
}

CFStringRef sub_180752518()
{
  return sub_1807665C0("IODeviceTree:/product", @"pdFo85PUvIiT4FjAT6Amcw", 98);
}

BOOL sub_180752530()
{
  return sub_1807661A8("IODeviceTree:/product/audio", @"supports-spatial-facetime", 0);
}

uint64_t sub_180752548()
{
  int v1 = 0;
  LODWORD(result) = sub_180747E9C((const char **)@"eW5H/Gwg0uqbMqFot70pYg", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0) {
    return result;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18075258C()
{
  uint64_t v196 = *MEMORY[0x1895F89C0];
  int v195 = 1789837692;
  __int128 v194 = xmmword_1807A1FF8;
  int v193 = -1239654590;
  __int128 v192 = xmmword_1807A2020;
  int v191 = -1579092758;
  __int128 v190 = xmmword_1807A2048;
  int v189 = 48355600;
  __int128 v188 = xmmword_1807A200C;
  int v187 = -679691073;
  __int128 v186 = xmmword_1807A2034;
  int v185 = 1430379884;
  __int128 v184 = xmmword_1807A205C;
  int v183 = -1527788847;
  __int128 v182 = xmmword_1807A2804;
  int v181 = 1532898719;
  __int128 v180 = xmmword_1807A27F0;
  int v179 = 1275676051;
  __int128 v178 = xmmword_1807A2854;
  int v177 = 1908474541;
  __int128 v176 = xmmword_1807A2840;
  int v175 = 1711910369;
  __int128 v174 = xmmword_1807A21D8;
  int v173 = -1282800328;
  __int128 v172 = xmmword_1807A21EC;
  int v171 = -2092955395;
  __int128 v170 = xmmword_1807A21B0;
  int v169 = 674998600;
  __int128 v168 = xmmword_1807A21C4;
  int v167 = -414334491;
  __int128 v166 = xmmword_1807A2548;
  int v165 = -1509831889;
  __int128 v164 = xmmword_1807A2570;
  int v163 = 289690957;
  __int128 v162 = xmmword_1807A2188;
  int v161 = 586720268;
  __int128 v160 = xmmword_1807A219C;
  int v159 = 470738981;
  __int128 v158 = xmmword_1807A1F08;
  int v157 = 710807826;
  __int128 v156 = xmmword_1807A1F1C;
  int v155 = 1860682089;
  __int128 v154 = xmmword_1807A1F30;
  int v153 = -2085056298;
  __int128 v152 = xmmword_1807A1F44;
  int v151 = -1403227947;
  __int128 v150 = xmmword_1807A25E8;
  int v149 = 729118884;
  __int128 v148 = xmmword_1807A25FC;
  int v147 = 1046806126;
  __int128 v146 = xmmword_1807A2610;
  int v145 = -188760945;
  __int128 v144 = xmmword_1807A2624;
  int v143 = -1639077591;
  __int128 v142 = xmmword_1807A1FD0;
  int v141 = 338555555;
  __int128 v140 = xmmword_1807A1FE4;
  int v139 = 1032708406;
  __int128 v138 = xmmword_1807A2160;
  int v137 = 729903963;
  __int128 v136 = xmmword_1807A2174;
  int v135 = 28030256;
  __int128 v134 = xmmword_1807A2138;
  int v133 = 1214363620;
  __int128 v132 = xmmword_1807A214C;
  int v131 = -798153473;
  __int128 v130 = xmmword_1807A1FA8;
  int v129 = -776721724;
  __int128 v128 = xmmword_1807A1FBC;
  int v127 = -489993439;
  __int128 v126 = xmmword_1807A2638;
  int v125 = 886875686;
  __int128 v124 = xmmword_1807A264C;
  int v123 = -350584140;
  __int128 v122 = xmmword_1807A2660;
  int v121 = 368778837;
  __int128 v120 = xmmword_1807A2688;
  int v119 = -1418383976;
  __int128 v118 = xmmword_1807A2674;
  int v117 = -1213485500;
  __int128 v116 = xmmword_1807A269C;
  int v115 = -199226823;
  __int128 v114 = xmmword_1807A278C;
  int v113 = 1412427398;
  __int128 v112 = xmmword_1807A27A0;
  int v111 = -1283070668;
  __int128 v110 = xmmword_1807A2778;
  int v109 = 160260070;
  __int128 v108 = xmmword_1807A27B4;
  int v107 = 317289457;
  __int128 v106 = xmmword_1807A27C8;
  int v105 = 401945557;
  __int128 v104 = xmmword_1807A27DC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v106, v70, v71, v72, v73, v74, v75, v76, (uint64_t)&v104)
    || (int v103 = 1602014129,
        __int128 v102 = xmmword_1807A20AC,
        int v101 = -810116762,
        __int128 v100 = xmmword_1807A20C0,
        int v99 = -1195351767,
        __int128 v98 = xmmword_1807A20D4,
        MGIsDeviceOneOfType((const UInt8 *)&v102, v77, v78, v79, v80, v81, v82, v83, (uint64_t)&v100)))
  {
LABEL_16:
    uint64_t v91 = MEMORY[0x189604DE0];
  }

  else
  {
    int v97 = -1022451852;
    __int128 v96 = xmmword_1807A2868;
    int v95 = 1729782187;
    __int128 v94 = xmmword_1807A287C;
    int v93 = MGIsDeviceOneOfType((const UInt8 *)&v96, v84, v85, v86, v87, v88, v89, v90, (uint64_t)&v94);
    uint64_t v91 = MEMORY[0x189604DE0];
    if (!v93) {
      uint64_t v91 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v91;
}

uint64_t sub_180752D94()
{
  return 1LL;
}

const void *sub_180752D9C()
{
  return sub_18074776C((const char **)@"ZApuwHXWV8RCz0iVzMnqLw", 0LL);
}

CFTypeRef sub_180752DAC()
{
  return sub_180765200(1, "AppleOceanComputeMCU", @"Carrier ID");
}

const void *sub_180752DC4()
{
  return sub_18074776C((const char **)@"AJFQheZDyUbvI6RmBMT9Cg", 0LL);
}

BOOL sub_180752DD4()
{
  return sub_1807661A8("IODeviceTree:/product", @"H4f1y1sEDUUUROeb4FZJ4A", 110);
}

BOOL sub_180752DEC()
{
  return *MEMORY[0x189604DE8] != 0LL;
}

CFTypeRef sub_180752E04()
{
  return sub_180765200(0, "IOPMPowerSource", @"IsCharging");
}

uint64_t sub_180752E1C()
{
  return 1LL;
}

uint64_t sub_180752E24()
{
  return 0LL;
}

BOOL sub_180752E2C()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"R1AF5xVFhlNjSbjBZJqQeA", 114);
}

uint64_t sub_180752E48()
{
  int v1 = 0;
  LODWORD(result) = sub_180747E9C((const char **)@"ND6ZSbBBgMgwtMfh+OL5Wg", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 1) {
    return result;
  }
  else {
    return 0LL;
  }
}

const void *sub_180752E8C()
{
  CFTypeRef v0 = sub_180767260();
  int v1 = v0;
  if (v0 && (CFTypeID v2 = CFGetTypeID(v0), v2 == CFDataGetTypeID()) && CFDataGetLength((CFDataRef)v1) > 23)
  {
    if (*(_DWORD *)CFDataGetBytePtr((CFDataRef)v1) != 1396926055)
    {
      uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v3) {
        uint64_t v9 = v3 + 1;
      }
      else {
        uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v9, 4557LL, (uint64_t)@"syscfg data appears to be uninitialized", v4, v5, v6, v7, v8, v18[0]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "syscfg data appears to be uninitialized",  v18,  2u);
      }

LABEL_16:
      CFRelease(v1);
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v10) {
      uint64_t v16 = v10 + 1;
    }
    else {
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v16, 4550LL, (uint64_t)@"invalid syscfg data", v11, v12, v13, v14, v15, v18[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "invalid syscfg data", buf, 2u);
    }

    if (v1) {
      goto LABEL_16;
    }
  }

  return v1;
}

  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a1 + 280);
  if (sub_18078A174((void *)(a1 + 280), a1 + 632))
  {
    sub_180784620(3LL, "%s: FDR failed to decode manifestOverride", v6);
    goto LABEL_18;
  }

  CFTypeID v2 = *(void *)(a1 + 2016);
  if ((v2 & 0x1000) != 0) {
    goto LABEL_21;
  }
LABEL_12:
  if ((v2 & 0x80) == 0)
  {
    if (sub_18078A794(a1 + 400, &v30))
    {
      sub_180784620(3LL, "%s: FDR failed to get payload type", v6);
      goto LABEL_18;
    }

    if (*(void *)(a1 + 528) != 3LL)
    {
      sub_180784620(3LL, "%s: Payload version is wrong size. got %zu expected %d");
      goto LABEL_50;
    }

    uint64_t v23 = *(unsigned __int16 **)(a1 + 520);
    uint64_t v24 = *v23;
    uint64_t v25 = *((unsigned __int8 *)v23 + 2);
    if (v24 != 11825 || v25 != 48)
    {
      sub_180784620(3LL, "%s: Payload version mismatch");
LABEL_50:
      uint64_t v9 = *(void *)a1;
      uint64_t v10 = 0x8005001C00LL;
      goto LABEL_19;
    }
  }

BOOL sub_180752FEC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"0Y4fmR6ZHZPxDZFfPtBnRQ", a2);
}

BOOL sub_180753010(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"0Y4fmR6ZHZPxDZFfPtBnRQ", 83, a2);
}

CFStringRef sub_180753024()
{
  CFTypeRef v0 = (const __CFData *)sub_18074776C((const char **)@"nFRqKto/RuQAV1P+0/qkBA", 0LL);
  return sub_1807617A4(v0);
}

BOOL sub_180753044(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"0KHhsv2F/BGA9AppFljmKg", a2);
}

BOOL sub_180753068(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"0KHhsv2F/BGA9AppFljmKg", 65, a2);
}

BOOL sub_18075307C()
{
  return sub_1807661A8("IODeviceTree:/product", @"kT9JwUR2xPCTHTdgvG3UdA", 116);
}

CFNumberRef sub_180753094()
{
  return sub_180766200("IODeviceTree:/product", @"e9aZViEIJ/riA4pRfg1ihg", 100);
}

BOOL sub_1807530AC()
{
  return sub_1807661DC("IODeviceTree:/product", @"LL1FDn5UwIi7sIDnL19gxA", 98);
}

BOOL sub_1807530C4()
{
  return sub_180746094((uint64_t)@"GoogleMail", @"RegionalBehaviorGoogleMail");
}

CFStringRef sub_1807530D8()
{
  return sub_1807665C0("IODeviceTree:/product", @"gJ3kBkjdqJ04oSsOmC97aw", 112);
}

CFTypeRef sub_1807530F4()
{
  uint64_t v0 = *((void *)off_18C533F28 + 15);
  if (!v0) {
    uint64_t v0 = sub_180746538(15LL, 2LL);
  }
  CFTypeID TypeID = CFStringGetTypeID();
  return sub_1807642E0((uint64_t)"_CTServerConnectionCopyMobileSubscriberNetworkCode", v0, TypeID);
}

uint64_t sub_180753140()
{
  uint64_t v0 = MEMORY[0x189604DE0];
  int v4 = -1;
  BOOL v1 = sub_180747E9C((const char **)@"+97cHA72jHlHqQnIkgGBYg", 5, 5, kCFNumberSInt32Type, &v4);
  if (v1 && v4 == 2) {
    uint64_t v2 = MEMORY[0x189604DE8];
  }
  else {
    uint64_t v2 = v0;
  }
  return *(void *)v2;
}

uint64_t sub_1807531AC()
{
  BOOL v0 = sub_180743AF0((BOOL)@"H6");
  uint64_t v1 = MEMORY[0x189604DE8];
  return *(void *)v1;
}

const void *sub_1807531F4()
{
  return sub_180766414("IODeviceTree:/chosen", @"MXZ7vg7hul895QdsLUBJFA", 98);
}

BOOL sub_18075320C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"Qq9/Mya05P4ToEr1pMpGGg", a2);
}

BOOL sub_180753230(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"Qq9/Mya05P4ToEr1pMpGGg", 66, a2);
}

uint64_t sub_180753244()
{
  int v4 = -1;
  BOOL v0 = sub_180747E9C((const char **)@"UDftNoVOBIs9cSeia57q1A", 5, 5, kCFNumberSInt32Type, &v4);
  int v1 = v4;
  if (!v0) {
    int v1 = -1;
  }
  if (v1) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = 1;
  }
  if (v1 == -1) {
    return 0LL;
  }
  else {
    return v2;
  }
}

CFTypeRef sub_1807532A0()
{
  return sub_1807615E4(@"JasperSNUM");
}

BOOL sub_1807532AC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"dJvRNnysMoubdy0ZCK2aRQ", a2);
}

BOOL sub_1807532D0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"dJvRNnysMoubdy0ZCK2aRQ", 74, a2);
}

BOOL sub_1807532E4()
{
  BOOL v0 = (unsigned int (*)(void))*((void *)off_18C533F28 + 95);
  if (!v0) {
    BOOL v0 = (unsigned int (*)(void))sub_180746538(95LL, 2LL);
  }
  return v0(0LL) != 3;
}

CFTypeRef sub_180753324()
{
  return sub_180765200(0, "IOPMPowerSource", @"FullyCharged");
}

BOOL sub_18075333C()
{
  return (sub_180743444() == 3 || sub_180743444() == 1 || sub_180743444() == 2)
      && !sub_180743A48((BOOL)@"H5")
      && !sub_180743A48((BOOL)@"H4");
}

CFNumberRef sub_18075339C()
{
  int valuePtr = 1080033280;
  return CFNumberCreate(0LL, kCFNumberFloat32Type, &valuePtr);
}

BOOL sub_1807533EC()
{
  return sub_180743444() != 8
      && sub_180743444() != 6
      && sub_180743444() != 7
      && !sub_180743A48((BOOL)@"H4")
      && !sub_180743A48((BOOL)@"H5")
      && !sub_180743A48((BOOL)@"H6")
      && !sub_180743A48((BOOL)@"H7");
}

uint64_t sub_18075346C()
{
  return 1LL;
}

uint64_t sub_180753474()
{
  return 0LL;
}

CFStringRef sub_18075347C()
{
  int v0 = sub_180743444() - 1;
  uint64_t result = @"iPhone";
  switch(v0)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = @"iPod";
      break;
    case 2:
      uint64_t result = @"iPad";
      break;
    case 3:
      uint64_t result = (const __CFString *)sub_18074776C((const char **)@"+VIu65zA5EW4ztayJXvOUg", 0LL);
      break;
    case 5:
      uint64_t result = @"Watch";
      break;
    case 6:
      uint64_t result = @"HomePod";
      break;
    case 7:
      uint64_t result = @"Bridge";
      break;
    case 8:
      uint64_t result = @"Mac";
      break;
    case 10:
      uint64_t result = @"Vision";
      break;
    default:
      uint64_t result = @"Unknown";
      break;
  }

  return result;
}

CFDataRef sub_18075352C()
{
  CFDataRef result = (CFDataRef)sub_180765200(1, "aqc-a", @"extlom-mac-address");
  if (!result) {
    return sub_1807697E8(0x454D6132u);
  }
  return result;
}

BOOL sub_180753578(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"5Y72WwdS5NYHdc00gEZ/DQ", a2);
}

BOOL sub_18075359C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"5Y72WwdS5NYHdc00gEZ/DQ", 69, a2);
}

CFNumberRef sub_1807535B0()
{
  return sub_180766200("IODeviceTree:/product/camera", @"Q2y7EshBFzIifIPKAPVBBA", 99);
}

BOOL sub_1807535C8()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"bG+mTz0gYzxMfCms9/WzlQ", 114);
}

const void *sub_1807535E0()
{
  return sub_180766414("IODeviceTree:/chosen", @"5/NbwB1egBxY8gECPU4nPA", 104);
}

BOOL sub_1807535F8()
{
  return sub_18076E21C((uint64_t)@"dcp", 0LL);
}

CFTypeRef sub_180753608()
{
  return sub_1807645D4(7LL, 1, 2LL);
}

BOOL sub_180753618(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"zPHFWx4ZItDiTXNT2onrWQ", a2);
}

BOOL sub_18075363C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"zPHFWx4ZItDiTXNT2onrWQ", 77, a2);
}

BOOL sub_180753650()
{
  return sub_180743444() == 10;
}

CFDataRef sub_18075366C()
{
  else {
    return 0LL;
  }
}

CFNumberRef sub_1807536B4()
{
  return sub_180766200("IODeviceTree:/product", @"7zSkleuS91WkyAuEEH7p2g", 115);
}

uint64_t sub_1807536CC()
{
  int v1 = 0;
  LODWORD(result) = sub_180747E9C((const char **)@"eW5H/Gwg0uqbMqFot70pYg", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0) {
    return result;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_180753710()
{
  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1) {
    return sub_180743444() == 2;
  }
  return result;
}

uint64_t sub_180753738()
{
  BOOL v0 = sub_1807661DC("IODeviceTree:/product", @"disable-chamois", 0);
  int v1 = sub_180743444();
  uint64_t v2 = MEMORY[0x189604DE0];
  if (v1 == 3 && !v0)
  {
    if ((sub_1807463A0() & 1) != 0
      || (unint64_t)sub_180744D74() >> 33
      && (sub_180743AF0((BOOL)@"H14") || sub_1807437FC((BOOL)@"t8103", 0)))
    {
      uint64_t v2 = MEMORY[0x189604DE8];
    }

    else
    {
      uint64_t v2 = MEMORY[0x189604DE0];
    }
  }

  return *(void *)v2;
}

BOOL sub_1807537D4()
{
  return sub_1807661A8("IODeviceTree:/product", @"4vrSNeBZwJrQrZOQJG0uwQ", 115);
}

uint64_t sub_1807537EC()
{
  BOOL v0 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen", @"housing-color", 0);
  uint64_t v1 = sub_180769670(v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t sub_180753838()
{
  BOOL v0 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen", @"cover-glass-material", 0);
  uint64_t v1 = sub_180769670(v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

CFTypeRef sub_180753884()
{
  return sub_180764878(1LL, 0, 0LL);
}

CFNumberRef sub_180753894()
{
  BOOL v0 = (const __CFData *)sub_18074776C((const char **)@"91LyMcx4z1w3SGVeqteMnA", 0LL);
  uint64_t v1 = v0;
  if (v0)
  {
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) > 11)
    {
      BytePtr = CFDataGetBytePtr(v1);
      CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberSInt32Type, BytePtr + 4);
LABEL_11:
      CFRelease(v1);
      return v4;
    }
  }

  uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5) {
    uint64_t v11 = v5 + 1;
  }
  else {
    uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v11, 5039LL, (uint64_t)@"failed to fetch region sku", v6, v7, v8, v9, v10, v13[0]);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "failed to fetch region sku", v13, 2u);
  }

  CFNumberRef v4 = 0LL;
  CFNumberRef result = 0LL;
  if (v1) {
    goto LABEL_11;
  }
  return result;
}

BOOL sub_180753998()
{
  return sub_180743444() == 6 && sub_180743AF0((BOOL)@"M11");
}

BOOL sub_1807539C8()
{
  return sub_180743444() != 4;
}

BOOL sub_1807539E4()
{
  return sub_1807661DC("IODeviceTree:/product", @"RIJvT6s+kyJKsCvHFbcwwA", 104);
}

uint64_t sub_1807539FC()
{
  return sub_18076E49C( (uint64_t)"IODeviceTree:/arm-io",  (uint64_t)@"y66yh6E28lG6AIdLLwEvSQ",  100LL,  (uint64_t)@"yhZxZlqgBWwf4bN9t6fFyA",  97LL);
}

CFTypeRef sub_180753A20()
{
  return sub_180765388(0, "AppleBatteryAuth", @"IDSN");
}

BOOL sub_180753A38(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"OyENNqRhuo8+RHkpbr/82A", a2);
}

BOOL sub_180753A5C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"OyENNqRhuo8+RHkpbr/82A", 82, a2);
}

uint64_t sub_180753A70()
{
  int v0 = stat("/AppleInternal/Library/PreferenceBundles/Internal Settings.bundle", &v3);
  LOBYTE(v3.st_dev) = 0;
  uint64_t result = sub_180743F0C( "/var/mobile/Library/Preferences/com.apple.springboard.plist",  @"SBAllowSensitiveUI",  &v3);
  if (!LOBYTE(v3.st_dev))
  {
    BOOL v2 = v0 == 0;
    LODWORD(result) = sub_180743F0C( "/System/Library/CoreServices/SBTeaLeafOverrides.plist",  @"SBAllowSensitiveUI",  &v3);
    if (LOBYTE(v3.st_dev)) {
      return result;
    }
    else {
      return v2;
    }
  }

  return result;
}

BOOL sub_180753AF4()
{
  return !stat("/System/Library/CoreServices/SpringBoard.app", &v1) || *__error() != 2;
}

uint64_t sub_180753B3C()
{
  return 0LL;
}

uint64_t sub_180753B44()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/arm-io", (uint64_t)@"znvmheFkjr6hiqIK9TrCVw", 112LL);
}

uint64_t sub_180753B5C()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/arm-io", (uint64_t)@"lNtvJFI6kdcchIbskQDzaA", 98LL);
}

CFTypeRef sub_180753B74()
{
  uint64_t v0 = *((void *)off_18C533F28 + 13);
  if (!v0) {
    uint64_t v0 = sub_180746538(13LL, 2LL);
  }
  CFTypeID TypeID = CFStringGetTypeID();
  return sub_1807642E0((uint64_t)"_CTServerConnectionCopyLastKnownMobileSubscriberCountryCode", v0, TypeID);
}

uint64_t sub_180753BC0()
{
  return 0LL;
}

BOOL sub_180753BC8()
{
  return !sub_1807661A8("IODeviceTree:/product", @"D3LeXyjrxDFYSi6pWFEL4A", 117);
}

BOOL sub_180753BF4()
{
  return !MGGetBoolAnswer((const char **)@"yRZv0s7Dpj8ZBk0S+0+nMA") || !sub_1807442E4(@"CH");
}

CFDataRef sub_180753C2C()
{
  else {
    return 0LL;
  }
}

CFDataRef sub_180753C74()
{
  else {
    return 0LL;
  }
}

BOOL sub_180753CBC()
{
  return sub_1807661A8("IODeviceTree:/product", @"h9v96tCehBWUil/aJ7UrcA", 117);
}

uint64_t sub_180753CD4()
{
  if (sub_180743444() == 3)
  {
    BOOL v0 = sub_1807437FC((BOOL)@"t8027", 0);
    uint64_t v1 = MEMORY[0x189604DE8];
    if (!v0) {
      uint64_t v1 = MEMORY[0x189604DE0];
    }
  }

  else
  {
    uint64_t v1 = MEMORY[0x189604DE0];
  }

  return *(void *)v1;
}

BOOL sub_180753D28()
{
  return sub_180743444() != 6
      && sub_180743444() != 8
      && sub_180743444() != 7
      && !sub_180743A48((BOOL)@"H1")
      && !sub_180743A48((BOOL)@"H2")
      && !sub_180743A48((BOOL)@"H3")
      && !sub_180743A48((BOOL)@"H4")
      && !sub_180743A48((BOOL)@"H5")
      && !sub_180743A48((BOOL)@"H6")
      && !sub_180743A48((BOOL)@"H7")
      && !sub_180743A48((BOOL)@"H8");
}

uint64_t sub_180753DE4()
{
  else {
    return sub_18076E49C( (uint64_t)"IODeviceTree:/arm-io",  (uint64_t)@"disp0",  0LL,  (uint64_t)@"always-on-device",  0LL);
  }
}

CFNumberRef sub_180753E30()
{
  return sub_180766200("IODeviceTree:/product/camera", @"Sr1Bmb3uoIfgKyaZguG0Gw", 102);
}

uint64_t sub_180753E48()
{
  BOOL v0 = sub_1807661A8("IODeviceTree:/product", @"dictation", 0);
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

const void *sub_180753E8C()
{
  return sub_180766414("IODeviceTree:/product", @"lOIgg/0YE73mNKAiUbUiWQ", 114);
}

BOOL sub_180753EA4(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"PxEDp0oOasJ92F/V7YBa8A", a2);
}

BOOL sub_180753EC8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"PxEDp0oOasJ92F/V7YBa8A", 82, a2);
}

uint64_t sub_180753EDC()
{
  return 0LL;
}

CFDataRef sub_180753EE4()
{
  CFDataRef result = (CFDataRef)sub_180766414("IODeviceTree:/arm-io/isp", @"pearl-calibration-data", 0);
  if (!result) {
    return sub_1807692D8(0x5072434Cu);
  }
  return result;
}

uint64_t sub_180753F30()
{
  int v0 = sub_180743444();
  uint64_t v1 = MEMORY[0x189604DE8];
  uint64_t v2 = MEMORY[0x189604DE8];
  if (v0 != 3)
  {
    if (sub_180743444() == 6)
    {
      uint64_t v2 = MEMORY[0x189604DE0];
    }

    else
    {
      int v3 = sub_180743444();
      uint64_t v2 = MEMORY[0x189604DE0];
    }
  }

  return *(void *)v2;
}

BOOL sub_180753F9C()
{
  return sub_1807661A8("IODeviceTree:/product", @"g1gP4TOlkv84ezeaZrUgFg", 116);
}

uint64_t sub_180753FB4()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 4
    || sub_180743444() == 2
    || sub_180743444() == 3
    || sub_180743444() == 1
    || sub_180743444() == 7
    || sub_180743444() == 11)
  {
    uint64_t v7 = MEMORY[0x189604DE0];
  }

  else
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -414334491;
    __int128 v10 = xmmword_1807A2548;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x189604DE8];
    if (!v9) {
      uint64_t v7 = MEMORY[0x189604DE0];
    }
  }

  return *(void *)v7;
}

BOOL sub_1807540F4()
{
  return sub_1807661DC("IODeviceTree:/product/camera", @"gukw/2mRLE2GyqXJFEu7ng", 114);
}

const void *sub_18075410C()
{
  return sub_18074776C((const char **)@"lwHRTZNO5Jq87pVlzdNGIA", 0LL);
}

BOOL sub_18075411C()
{
  return sub_18076E0EC((uint64_t)@"avd", @"ads-present");
}

uint64_t sub_180754130()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/", (uint64_t)@"brr2lQq9584zVkiuALaADA", 115LL);
}

BOOL sub_180754148()
{
  return sub_180744A58("arm64");
}

CFTypeRef sub_180754154()
{
  return sub_1807645D4(2LL, 1, 1LL);
}

BOOL sub_180754164(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"xRyzf9zFE/ycr/wJPweZvQ", a2);
}

BOOL sub_180754188(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"xRyzf9zFE/ycr/wJPweZvQ", 73, a2);
}

BOOL sub_18075419C()
{
  return sub_1807661A8("IODeviceTree:/product", @"dUipfYkyvM80t4IkmMBVgQ", 119);
}

CFNumberRef sub_1807541B4()
{
  return sub_1807450C4(2u);
}

uint64_t sub_1807541BC()
{
  int v0 = sub_180743444();
  if (v0 == 2)
  {
    uint64_t v3 = @"iPod";
  }

  else
  {
    if (v0 == 4)
    {
      uint64_t v1 = (uint64_t (*)(const char *, const __CFString *, const __CFString *, void))*((void *)off_18C533F28
                                                                                                 + 31);
      if (!v1) {
        uint64_t v1 = (uint64_t (*)(const char *, const __CFString *, const __CFString *, void))sub_180746538( 31LL,  2LL);
      }
      return v1("/Applications/PineBoard.app", @"DeviceName", @"Apple TV", 0LL);
    }

    uint64_t v3 = sub_1807519C4();
  }

  uint64_t v4 = (uint64_t (*)(const char *, const __CFString *, void, const __CFString *))*((void *)off_18C533F28
                                                                                             + 31);
  if (!v4) {
    uint64_t v4 = (uint64_t (*)(const char *, const __CFString *, void, const __CFString *))sub_180746538(31LL, 2LL);
  }
  uint64_t v5 = v4("/System/Library/CoreServices/SpringBoard.app", v3, 0LL, @"SpringBoard");
  if (v5)
  {
    uint64_t v6 = v5;
    CFRelease(v3);
    return v6;
  }

  return (uint64_t)v3;
}

const void *sub_180754298()
{
  return sub_180766414("IODeviceTree:/product", @"is3zjHrEdiF6J/boqghy9A", 109);
}

BOOL sub_1807542B0(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"8QNz35Yxm0KqxP1JiE0HIw", a2);
}

BOOL sub_1807542D4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"8QNz35Yxm0KqxP1JiE0HIw", 80, a2);
}

__CFDictionary *sub_1807542E8()
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  if (statfs("/", &v53) == -1)
  {
    uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v3) {
      uint64_t v2 = v3 + 1;
    }
    uint64_t v4 = __error();
    strerror(*v4);
    _MGLog((uint64_t)v2, 4120LL, (uint64_t)@"statfs(%s): %s", v5, v6, v7, v8, v9, (char)"/");
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return 0LL;
    }
    __int128 v10 = __error();
    int v11 = strerror(*v10);
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "/";
    __int16 v51 = 2080;
    uint64_t v52 = v11;
    __int128 v12 = (os_log_s *)MEMORY[0x1895F8DA0];
    goto LABEL_21;
  }

  uint64_t v0 = sub_1807623F8((const char *)&v53);
  uint64_t v1 = v0 + v53.f_bavail * v53.f_bsize;
  bzero(&v53, 0x878uLL);
  if (statfs("/mnt4", &v53) == -1)
  {
    int v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    uint64_t v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v14) {
      int v13 = v14 + 1;
    }
    uint64_t v15 = __error();
    strerror(*v15);
    _MGLog((uint64_t)v13, 4133LL, (uint64_t)@"statfs(%s): %s", v16, v17, v18, v19, v20, (char)"/mnt4");
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = __error();
      uint64_t v22 = strerror(*v21);
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "/mnt4";
      __int16 v51 = 2080;
      uint64_t v52 = v22;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "statfs(%s): %s", buf, 0x16u);
    }
  }

  else
  {
    v1 += sub_1807623F8((const char *)&v53);
  }

  bzero(&v53, 0x878uLL);
  if (statfs("/private/var", &v53) == -1)
  {
    uint64_t v39 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    uint64_t v40 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v40) {
      uint64_t v39 = v40 + 1;
    }
    uint64_t v41 = __error();
    strerror(*v41);
    _MGLog((uint64_t)v39, 4143LL, (uint64_t)@"statfs(%s): %s", v42, v43, v44, v45, v46, (char)"/private/var");
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return 0LL;
    }
    uint64_t v47 = __error();
    uint64_t v48 = strerror(*v47);
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "/private/var";
    __int16 v51 = 2080;
    uint64_t v52 = v48;
    __int128 v12 = (os_log_s *)MEMORY[0x1895F8DA0];
LABEL_21:
    _os_log_impl(&dword_180741000, v12, OS_LOG_TYPE_DEFAULT, "statfs(%s): %s", buf, 0x16u);
    return 0LL;
  }

  uint64_t v23 = v53.f_blocks * v53.f_bsize - v0;
  uint64_t v24 = v23 - sub_1807623F8((const char *)&v53);
  uint64_t v25 = sub_180761A30();
  uint64_t v26 = v53.f_bavail * v53.f_bsize;
  BOOL v27 = v26 >= 0xC800000;
  uint64_t v28 = v26 - 209715200;
  if (v27) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0LL;
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  *(void *)buf = v0;
  CFNumberRef v31 = CFNumberCreate(0LL, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"TotalSystemCapacity", v31);
  CFRelease(v31);
  *(void *)buf = 0LL;
  CFNumberRef v32 = CFNumberCreate(0LL, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"TotalSystemAvailable", v32);
  CFRelease(v32);
  *(void *)buf = v23;
  CFNumberRef v33 = CFNumberCreate(0LL, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"TotalDataCapacity", v33);
  CFRelease(v33);
  *(void *)buf = v24;
  CFNumberRef v34 = CFNumberCreate(0LL, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"TotalDataAvailable", v34);
  CFRelease(v34);
  *(void *)buf = v25;
  CFNumberRef v35 = CFNumberCreate(0LL, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"TotalDiskCapacity", v35);
  CFRelease(v35);
  *(void *)buf = 209715200LL;
  CFNumberRef v36 = CFNumberCreate(0LL, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"AmountDataReserved", v36);
  CFRelease(v36);
  *(void *)buf = v29;
  CFNumberRef v37 = CFNumberCreate(0LL, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"AmountDataAvailable", v37);
  CFRelease(v37);
  *(void *)buf = v1;
  CFNumberRef v38 = CFNumberCreate(0LL, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"AmountRestoreAvailable", v38);
  CFRelease(v38);
  return Mutable;
}

CFTypeRef sub_1807547D0()
{
  return sub_180760A48(@"FrontIRCameraModuleSerialNumString");
}

BOOL sub_1807547DC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"2kuITg6XPwXl8zbpx+hoCw", a2);
}

BOOL sub_180754800(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"2kuITg6XPwXl8zbpx+hoCw", 70, a2);
}

CFNumberRef sub_180754814()
{
  return sub_180766200("IODeviceTree:/product", @"W7MyZ3Yxoy1qD6FrI0mLUQ", 82);
}

CFNumberRef sub_18075482C()
{
  int v4 = 1;
  uint64_t v0 = sub_180766200("IODeviceTree:/product", @"activation-protocol-version", 0);
  if (v0)
  {
    uint64_t v1 = v0;
    int valuePtr = 1;
    if (CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr) && valuePtr == 2) {
      int v4 = 2;
    }
    CFRelease(v1);
  }

  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt32Type, &v4);
}

uint64_t sub_1807548B8()
{
  return 1LL;
}

CFDataRef sub_1807548C0()
{
  else {
    return 0LL;
  }
}

uint64_t sub_1807548FC()
{
  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1) {
    return sub_180743444() == 6 && MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg");
  }
  return result;
}

CFStringRef sub_180754938()
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  CFIndex numBytes = 128LL;
  *(void *)connect = 0LL;
  if ((sub_180764D40("AppleBiometricServices", &connect[1], connect) & 1) == 0)
  {
    int v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v13) {
      uint64_t v19 = v13 + 1;
    }
    else {
      uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v19,  5340LL,  (uint64_t)@"failed to connect to service %s",  v14,  v15,  v16,  v17,  v18,  (char)"AppleBiometricServices");
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v52 = "AppleBiometricServices";
    int v11 = (os_log_s *)MEMORY[0x1895F8DA0];
    __int128 v12 = "failed to connect to service %s";
    goto LABEL_12;
  }

  int v46 = 0;
  size_t v45 = 4LL;
  mach_error_t v0 = sub_18076255C(connect[0], 27, &v46, &v45);
  if (v0)
  {
    mach_error_t v1 = v0;
    uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v3) {
      uint64_t v2 = v3 + 1;
    }
    char v4 = mach_error_string(v1);
    _MGLog((uint64_t)v2, 5350LL, (uint64_t)@"Failed to query Mesa provisioning state: %s", v5, v6, v7, v8, v9, v4);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    __int128 v10 = mach_error_string(v1);
    *(_DWORD *)buf = 136315138;
    uint64_t v52 = v10;
    int v11 = (os_log_s *)MEMORY[0x1895F8DA0];
    __int128 v12 = "Failed to query Mesa provisioning state: %s";
    goto LABEL_12;
  }

  if (!v46)
  {
    mach_error_t v34 = sub_18076255C(connect[0], 1, 0LL, 0LL);
    if (v34)
    {
      mach_error_t v35 = v34;
      CFNumberRef v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      CFNumberRef v37 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v37) {
        CFNumberRef v36 = v37 + 1;
      }
      char v38 = mach_error_string(v35);
      _MGLog((uint64_t)v36, 5357LL, (uint64_t)@"Failed to reset sensor: %s", v39, v40, v41, v42, v43, v38);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      uint64_t v44 = mach_error_string(v35);
      *(_DWORD *)buf = 136315138;
      uint64_t v52 = v44;
      int v11 = (os_log_s *)MEMORY[0x1895F8DA0];
      __int128 v12 = "Failed to reset sensor: %s";
LABEL_12:
      uint64_t v20 = buf;
LABEL_13:
      _os_log_impl(&dword_180741000, v11, OS_LOG_TYPE_DEFAULT, v12, v20, 0xCu);
LABEL_14:
      CFStringRef v21 = 0LL;
      goto LABEL_15;
    }
  }

  mach_error_t v23 = sub_18076255C(connect[0], 54, buf, (size_t *)&numBytes);
  if (v23)
  {
    mach_error_t v24 = v23;
    uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    uint64_t v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v26) {
      uint64_t v25 = v26 + 1;
    }
    char v27 = mach_error_string(v24);
    _MGLog( (uint64_t)v25,  5364LL,  (uint64_t)@"Failed to query Mesa module serial number: %s",  v28,  v29,  v30,  v31,  v32,  v27);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    CFNumberRef v33 = mach_error_string(v24);
    int v49 = 136315138;
    uint64_t v50 = v33;
    int v11 = (os_log_s *)MEMORY[0x1895F8DA0];
    __int128 v12 = "Failed to query Mesa module serial number: %s";
    uint64_t v20 = (uint8_t *)&v49;
    goto LABEL_13;
  }

  CFStringRef v21 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x189604DB0], buf, numBytes, 0x8000100u, 0);
LABEL_15:
  if (connect[0]) {
    IOServiceClose(connect[0]);
  }
  if (connect[1]) {
    IOObjectRelease(connect[1]);
  }
  return v21;
}

BOOL sub_180754C68(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"jWdMTTxiAZc+KNO6Bz2jNg", a2);
}

BOOL sub_180754C8C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"jWdMTTxiAZc+KNO6Bz2jNg", 77, a2);
}

uint64_t sub_180754CA0()
{
  int v0 = sub_180762680(3);
  return v0 | sub_180762680(6);
}

uint64_t sub_180754CD0()
{
  return 0LL;
}

uint64_t sub_180754CD8()
{
  return sub_18076E59C( (uint64_t)"IODeviceTree:",  (uint64_t)@"NkQOJZ1xdFk5SV55PFKlIg",  119LL,  (uint64_t)@"/cMWdoU/88pcjJ1egxmIYw",  119LL);
}

CFStringRef sub_180754CFC()
{
  unsigned int v0 = sub_180765E6C("IODeviceTree:/product", @"itunes-min-ver", 0, 0xFFFFFFFFLL, 1);
  if (v0 != -1) {
    return CFStringCreateWithFormat(0LL, 0LL, @"%d.%d.%d", HIWORD(v0), BYTE1(v0), v0);
  }
  uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v8, 4281LL, (uint64_t)@"couldn't get itunes-min-ver\n", v3, v4, v5, v6, v7, v9);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "couldn't get itunes-min-ver\n", buf, 2u);
  }

  return 0LL;
}

CFNumberRef sub_180754DE0()
{
  return sub_180766200("IODeviceTree:/chosen", @"HhLXszMhK6bb9TP4sqVQWQ", 101);
}

BOOL sub_180754DF8()
{
  return sub_1807661A8("IODeviceTree:/product/audio", @"cq/jTAQ8zJab+ibcGUzJew", 109);
}

uint64_t sub_180754E10()
{
  return 0LL;
}

BOOL sub_180754E18()
{
  BOOL result = sub_1807512A0();
  if (result) {
    return !sub_18075BE24();
  }
  return result;
}

BOOL sub_180754E38()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"R1tbjTooZCgq2KmzlTaX+g", 102);
}

uint64_t sub_180754E50()
{
  if (os_variant_is_darwinos()
    && (sub_18075BE24() || sub_1807661DC("IODeviceTree:/product", @"analytics-opt-in", 0)))
  {
    uint64_t v0 = MEMORY[0x189604DE8];
  }

  else
  {
    uint64_t v0 = MEMORY[0x189604DE0];
  }

  return *(void *)v0;
}

BOOL sub_180754EAC()
{
  return sub_1807661DC("IODeviceTree:/product/camera", @"AzZxA+yTHLc+/XimTirrVw", 112);
}

uint64_t sub_180754EC4()
{
  BOOL v0 = sub_1807661A8("IODeviceTree:/product", @"location-reminders", 0);
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

uint64_t sub_180754F08()
{
  return sub_180765E6C("IODeviceTree:/product/camera", @"video-cap", 0, 0LL, 1);
}

uint64_t sub_180754F28()
{
  BOOL v0 = sub_18076E394((uint64_t)@"rose", 0LL);
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

CFTypeRef sub_180754F64()
{
  return sub_1807615E4(@"SavageChipID");
}

BOOL sub_180754F70(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"m9OWD0Y4Br0TZHUl6rGcOg", a2);
}

BOOL sub_180754F94(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"m9OWD0Y4Br0TZHUl6rGcOg", 83, a2);
}

CFNumberRef sub_180754FA8()
{
  return sub_1807450C4(4u);
}

CFDataRef sub_180754FB0()
{
  return sub_180766C14("AppleMobileApNonce", 0xCAu, 0LL, 0LL, 8uLL);
}

BOOL sub_180754FCC()
{
  return sub_1807661A8("IODeviceTree:/arm-io/isp", @"IFHQSJ65DoElWQl/+eCfNQ", 102);
}

BOOL sub_180754FE4()
{
  return sub_1807661A8("IODeviceTree:/product", @"RN4AimpWqqD2JZCB67qtvQ", 99);
}

BOOL sub_180754FFC()
{
  return stat("/AppleInternal/Library/PreferenceBundles/Internal Settings.bundle", &v1) == 0;
}

uint64_t sub_18075502C()
{
  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1) {
    return sub_180743444() == 2;
  }
  return result;
}

uint64_t sub_180755054()
{
  return 0LL;
}

CFStringRef sub_18075505C()
{
  return sub_1807665C0("IODeviceTree:/chosen", @"3sF/uRq+X+mZ2zGHSJOwpw", 99);
}

BOOL sub_180755074()
{
  return sub_1807661DC("IODeviceTree:/product", @"6PkKE66MnKm0yiOIQLknEg", 97);
}

BOOL sub_18075508C()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"+xJ6RaQ6PDSsLjib8r5fgg", 112);
}

BOOL sub_1807550A4()
{
  return sub_1807661A8("IODeviceTree:/arm-io/sep", @"jw9WzWmThYzveJbsV+GZMA", 115);
}

uint64_t sub_1807550BC()
{
  uint64_t result = sub_18076E620((uint64_t)"IODeviceTree", (uint64_t)@"ipd", 0LL, (uint64_t)@"kblang-calibration", 0LL);
  if (!result) {
    return sub_18076E620( (uint64_t)"IODeviceTree",  (uint64_t)@"keyboard",  0LL,  (uint64_t)@"kblang-calibration",  0LL);
  }
  return result;
}

CFNumberRef sub_18075511C()
{
  return sub_1807627D4(1);
}

BOOL sub_180755124()
{
  return sub_1807661A8("IODeviceTree:/product", @"u3c0R+31Df4SUTHrICQkTg", 104);
}

uint64_t sub_18075513C()
{
  return *MEMORY[0x189604DE0];
}

CFStringRef sub_18075514C()
{
  return sub_180766600(0, "IOPlatformExpertDevice", @"platform-name");
}

BOOL sub_180755164()
{
  return sub_180743444() == 3;
}

CFStringRef sub_180755180()
{
  if (!MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg"))
  {
    uint64_t v4 = @"NoTelephonyCapabilty";
    goto LABEL_12;
  }

  BOOL v0 = sub_18074776C((const char **)@"vaiFeAcMTIDXMSxTr8JwCw", 0LL);
  if (v0)
  {
    stat v1 = v0;
    uint64_t v2 = (CFTypeRef *)*((void *)off_18C533F28 + 68);
    if (!v2) {
      uint64_t v2 = (CFTypeRef *)sub_180746538(68LL, 1LL);
    }
    if (CFEqual(v1, *v2)) {
      goto LABEL_9;
    }
    uint64_t v3 = (CFTypeRef *)*((void *)off_18C533F28 + 65);
    if (!v3) {
      uint64_t v3 = (CFTypeRef *)sub_180746538(65LL, 1LL);
    }
    if (CFEqual(v1, *v3))
    {
LABEL_9:
      uint64_t v4 = @"BBInfoAvailable";
LABEL_10:
      CFRelease(v1);
      goto LABEL_12;
    }

    uint64_t v6 = (CFTypeRef *)*((void *)off_18C533F28 + 67);
    if (!v6) {
      uint64_t v6 = (CFTypeRef *)sub_180746538(67LL, 1LL);
    }
    if (CFEqual(v1, *v6))
    {
LABEL_16:
      uint64_t v4 = @"BBNotReady";
      goto LABEL_10;
    }

    uint64_t v7 = (CFTypeRef *)*((void *)off_18C533F28 + 66);
    if (!v7) {
      uint64_t v7 = (CFTypeRef *)sub_180746538(66LL, 1LL);
    }
    if (!CFEqual(v1, *v7))
    {
      uint64_t v8 = (CFTypeRef *)*((void *)off_18C533F28 + 69);
      if (!v8) {
        uint64_t v8 = (CFTypeRef *)sub_180746538(69LL, 1LL);
      }
      if (CFEqual(v1, *v8))
      {
        uint64_t v4 = @"BBRejectedTicket";
        goto LABEL_10;
      }

      char v9 = (CFTypeRef *)*((void *)off_18C533F28 + 74);
      if (!v9) {
        char v9 = (CFTypeRef *)sub_180746538(74LL, 1LL);
      }
      if (CFEqual(v1, *v9)) {
        goto LABEL_9;
      }
      __int128 v10 = (CFTypeRef *)*((void *)off_18C533F28 + 73);
      if (!v10) {
        __int128 v10 = (CFTypeRef *)sub_180746538(73LL, 1LL);
      }
      if (CFEqual(v1, *v10)) {
        goto LABEL_16;
      }
      int v11 = (CFTypeRef *)*((void *)off_18C533F28 + 71);
      if (!v11) {
        int v11 = (CFTypeRef *)sub_180746538(71LL, 1LL);
      }
      if (!CFEqual(v1, *v11))
      {
        __int128 v12 = (CFTypeRef *)*((void *)off_18C533F28 + 72);
        if (!v12) {
          __int128 v12 = (CFTypeRef *)sub_180746538(72LL, 1LL);
        }
        if (CFEqual(v1, *v12)) {
          uint64_t v4 = @"SIMNotInserted";
        }
        else {
          uint64_t v4 = @"Other-CheckLogs";
        }
        goto LABEL_10;
      }
    }

    uint64_t v4 = @"BBError";
    goto LABEL_10;
  }

  int v13 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  _MGLog( (uint64_t)v13,  4902LL,  (uint64_t)@"No status in postponement info for copyBasebandStatusKey",  v14,  v15,  v16,  v17,  v18,  v19[0]);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "No status in postponement info for copyBasebandStatusKey",  v19,  2u);
  }

  uint64_t v4 = @"BBNotAnswering";
LABEL_12:
  CFRetain(v4);
  return v4;
}

__CFArray *sub_180755400()
{
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
  if (Mutable)
  {
    stat v1 = sub_18075BDA8();
    uint64_t v2 = sub_1807665C0("IODeviceTree:/product", @"compatible-app-variant", 0);
    CFStringRef v3 = sub_1807665C0("IODeviceTree:/product", @"compatible-device-fallback", 0);
    if (v2 && CFStringCompare(v2, @"0", 0LL))
    {
      uint64_t v4 = v2;
      if (v1)
      {
        CFArrayAppendValue(Mutable, v1);
        uint64_t v4 = v2;
      }
    }

    else
    {
      uint64_t v4 = v1;
      if (!v1) {
        goto LABEL_13;
      }
    }

    CFArrayAppendValue(Mutable, v4);
LABEL_13:
    if (v3 && CFStringCompare(v3, @"0", 0LL)) {
      CFArrayAppendValue(Mutable, v3);
    }
    if (v1) {
      CFRelease(v1);
    }
    if (v2) {
      CFRelease(v2);
    }
    if (v3) {
      CFRelease(v3);
    }
    return Mutable;
  }

  uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5) {
    int v11 = v5 + 1;
  }
  else {
    int v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v11, 5704LL, (uint64_t)@"Failed to create array", v6, v7, v8, v9, v10, v13[0]);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v13 = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Failed to create array", v13, 2u);
  }

  return Mutable;
}

BOOL sub_180755594()
{
  return sub_1807661A8("IODeviceTree:/product", @"a13V9f9x26JcQCfczZAVAw", 117);
}

CFNumberRef sub_1807555AC()
{
  return sub_180766200("IODeviceTree:/product/camera", @"Q/BI7GKNZY13TpxbqA8nhQ", 114);
}

BOOL sub_1807555C4()
{
  return sub_1807661A8("IODeviceTree:/product", @"X9cK3qXzcFCrVpE258P2lQ", 104);
}

BOOL sub_1807555DC()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"aCuWsar9Ayou7Vfkh7fdLw", 102);
}

uint64_t sub_1807555F4()
{
  BOOL v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 26);
  if (!v0) {
    BOOL v0 = (uint64_t (*)(void))sub_180746538(26LL, 2LL);
  }
  return v0();
}

BOOL sub_180755620(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"MWduuAGptrl7qIzWqBmOqQ", a2);
}

BOOL sub_180755644(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"MWduuAGptrl7qIzWqBmOqQ", 65, a2);
}

CFStringRef sub_180755658()
{
  return sub_1807665C0("IODeviceTree:/", @"Fam17Ufz3CiHdZPcma0AeQ", 114);
}

BOOL sub_180755670()
{
  return !MGGetBoolAnswer((const char **)@"yRZv0s7Dpj8ZBk0S+0+nMA") || !sub_1807442E4(@"CH");
}

const void *sub_1807556A8()
{
  return sub_18074313C((const void *)*MEMORY[0x189604B60], 1);
}

BOOL sub_1807556BC()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"mm4/5+X4Z+eStXyipfwWVQ", 114);
}

BOOL sub_1807556D4()
{
  if (sub_180743AF0((BOOL)@"M9")) {
    return 1LL;
  }
  return sub_180743AF0((BOOL)@"H10");
}

BOOL sub_18075571C()
{
  return sub_1807661A8("IODeviceTree:/arm-io/mtp", @"hh/NoWpEoq1VF4lGDdPUpw", 114);
}

CFNumberRef sub_180755734()
{
  return sub_180766200("IODeviceTree:/product/facetime", @"K0tZN4PayAx7RgB0M+oohw", 98);
}

uint64_t sub_18075574C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int v14 = -38605833;
  __int128 v13 = xmmword_1807A20E8;
  int v12 = -894965712;
  __int128 v11 = xmmword_1807A20FC;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11) & 1) != 0
    || sub_180743444() == 6
    || sub_180743444() == 4)
  {
    uint64_t v8 = MEMORY[0x189604DE0];
  }

  else
  {
    int v10 = sub_180743444();
    uint64_t v8 = MEMORY[0x189604DE0];
  }

  return *(void *)v8;
}

BOOL sub_180755900()
{
  return sub_1807661DC("IODeviceTree:/product", @"KFwMMyiMoa8pLgGLwo78Vw", 104);
}

BOOL sub_18075591C()
{
  return sub_1807661A8("IODeviceTree:/product", @"SMgTCc2v9AU2ziIHRX8qww", 104);
}

BOOL sub_180755934()
{
  return sub_1807661A8("IODeviceTree:/arm-io/sep", @"aNZeCyuWxI6SE/KwZ129wA", 110);
}

CFDataRef sub_18075594C()
{
  else {
    return (CFDataRef)sub_180766414("IODeviceTree:/product", @"mac-address-bluetooth1", 0);
  }
}

BOOL sub_180755990(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"HzddeW2/HtdBNAc5tsFtDg", a2);
}

BOOL sub_1807559B4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"HzddeW2/HtdBNAc5tsFtDg", 83, a2);
}

BOOL sub_1807559C8()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"CUMH6bG4DFnu7ZREp5YkUQ", 106);
}

BOOL sub_1807559E0()
{
  BOOL result = MGGetBoolAnswer((const char **)@"nv4RoLkNoPT0/rsO8Yaiew");
  if (result) {
    return !MGGetBoolAnswer((const char **)@"2pxKjejpRGpWvUE+3yp5mQ");
  }
  return result;
}

BOOL sub_180755A10()
{
  return sub_1807661A8("IODeviceTree:/baseband", @"BYYil6kIk8Hm5lRuA1k8Tw", 112);
}

uint64_t sub_180755A28()
{
  return 1LL;
}

BOOL sub_180755A30()
{
  return sub_180746094((uint64_t)@"NoWiFi", @"RegionalBehaviorNoWiFi");
}

BOOL sub_180755A44()
{
  return sub_1807661DC("IODeviceTree:/product/camera", @"bmYssgjtQNKMy3Zhf8N+2w", 115);
}

uint64_t sub_180755A5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int v14 = 368885834;
  __int128 v13 = xmmword_1807A2534;
  int v12 = -526227167;
  __int128 v11 = xmmword_1807A255C;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11) & 1) != 0
    || sub_180743444() == 3)
  {
    uint64_t v8 = MEMORY[0x189604DE0];
  }

  else
  {
    int v10 = sub_180743444();
    uint64_t v8 = MEMORY[0x189604DE0];
  }

  return *(void *)v8;
}

CFTypeRef sub_180755B7C()
{
  return sub_180765200(0, "IOPMPowerSource", @"ExternalChargeCapable");
}

CFTypeRef sub_180755B94()
{
  return sub_1807645D4(8LL, 1, 2LL);
}

BOOL sub_180755BA4(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"rkFHO5dZmWxy3QdOx7r7kA", a2);
}

BOOL sub_180755BC8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"rkFHO5dZmWxy3QdOx7r7kA", 77, a2);
}

CFStringRef sub_180755BDC()
{
  BOOL v0 = (const __CFString *)sub_18076E728( (uint64_t)":/arm-io/wlan",  (uint64_t)@"AppleOLYHAL",  0LL,  (uint64_t)@"ModuleInfo",  0LL);
  if (!v0) {
    return 0LL;
  }
  stat v1 = v0;
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, v0, @" ");
  if (CFArrayGetCount(ArrayBySeparatingStrings) < 1)
  {
LABEL_6:
    CFStringRef v5 = 0LL;
  }

  else
  {
    CFIndex v3 = 0LL;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v3);
      if (CFStringFind(ValueAtIndex, @"chip=", 0LL).location != -1) {
        break;
      }
      if (++v3 >= CFArrayGetCount(ArrayBySeparatingStrings)) {
        goto LABEL_6;
      }
    }

    CFIndex Length = CFStringGetLength(@"chip=");
    v8.length = CFStringGetLength(ValueAtIndex) - Length - 2;
    v8.CFIndex location = Length + 1;
    CFStringRef v5 = CFStringCreateWithSubstring(0LL, ValueAtIndex, v8);
  }

  CFRelease(ArrayBySeparatingStrings);
  CFRelease(v1);
  return v5;
}

BOOL sub_180755CF4()
{
  return sub_1807661DC("IODeviceTree:/chosen", @"tOLVnZop4m/g5/iuC7zlUw", 101);
}

BOOL sub_180755D0C()
{
  return sub_1807661A8("IODeviceTree:/product", @"wlxZYdEZITDTzgs/OnnV+Q", 112);
}

const void *sub_180755D24()
{
  return sub_18074776C((const char **)@"7l0BaQsNxJCanoeHMJ2huA", 0LL);
}

CFNumberRef sub_180755D34()
{
  return sub_180766200("IODeviceTree:/product", @"j/8nlHWXO3OvKHQHgl905Q", 102);
}

uint64_t sub_180755D4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  int v35 = 1602014129;
  __int128 v34 = xmmword_1807A20AC;
  int v33 = -810116762;
  __int128 v32 = xmmword_1807A20C0;
  int v31 = -1195351767;
  __int128 v30 = xmmword_1807A20D4;
  int v29 = -199226823;
  __int128 v28 = xmmword_1807A278C;
  int v27 = 1412427398;
  __int128 v26 = xmmword_1807A27A0;
  int v25 = -1283070668;
  __int128 v24 = xmmword_1807A2778;
  int v23 = 160260070;
  __int128 v22 = xmmword_1807A27B4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v34, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v32)
    || sub_180743444() == 6)
  {
    uint64_t v15 = MEMORY[0x189604DE0];
  }

  else
  {
    int v21 = -926344036;
    __int128 v20 = xmmword_1807A2070;
    int v19 = -954998212;
    __int128 v18 = xmmword_1807A2084;
    int v16 = MGIsDeviceOneOfType((const UInt8 *)&v20, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v18);
    uint64_t v15 = MEMORY[0x189604DE0];
    if (!v16) {
      uint64_t v15 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v15;
}

BOOL sub_180755F30()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"5QM8apssQbhm2ZrUx5g5Tw", 112);
}

BOOL sub_180755F48()
{
  return sub_1807661A8("IODeviceTree:/product", @"hK/qlAUuu8u6SvIRkKmjQQ", 103);
}

CFTypeRef sub_180755F60()
{
  uint64_t v0 = *((void *)off_18C533F28 + 20);
  if (!v0) {
    uint64_t v0 = sub_180746538(20LL, 2LL);
  }
  CFTypeID TypeID = CFStringGetTypeID();
  return sub_1807642E0((uint64_t)"_CTServerConnectionGetActiveWirelessTechnology", v0, TypeID);
}

uint64_t sub_180755FAC()
{
  if (sub_180743444() == 1
    || sub_180743444() == 2
    || sub_180743444() == 3
    || sub_180743444() == 6)
  {
    uint64_t v0 = MEMORY[0x189604DE0];
    BOOL v1 = sub_1807661DC("IODeviceTree:/product", @"disable-spoken-messages", 0);
    uint64_t v2 = MEMORY[0x189604DE8];
    if (v1) {
      uint64_t v2 = v0;
    }
  }

  else
  {
    uint64_t v2 = MEMORY[0x189604DE0];
  }

  return *(void *)v2;
}

BOOL sub_180756034()
{
  return sub_180743444() == 6 && sub_180743AF0((BOOL)@"M11");
}

const void *sub_180756064()
{
  return sub_18074776C((const char **)@"ZApuwHXWV8RCz0iVzMnqLw", 0LL);
}

uint64_t sub_180756074()
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  int v47 = 28030256;
  __int128 v46 = xmmword_1807A2138;
  int v45 = 1214363620;
  __int128 v44 = xmmword_1807A214C;
  int v43 = -798153473;
  __int128 v42 = xmmword_1807A1FA8;
  int v41 = -776721724;
  __int128 v40 = xmmword_1807A1FBC;
  int v39 = -489993439;
  __int128 v38 = xmmword_1807A2638;
  int v37 = 886875686;
  __int128 v36 = xmmword_1807A264C;
  int v35 = -1403227947;
  __int128 v34 = xmmword_1807A25E8;
  int v33 = 729118884;
  __int128 v32 = xmmword_1807A25FC;
  int v31 = 1046806126;
  __int128 v30 = xmmword_1807A2610;
  int v29 = -188760945;
  __int128 v28 = xmmword_1807A2624;
  if (MGIsDeviceOneOfType((const UInt8 *)&v34, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v32))
  {
LABEL_10:
    uint64_t v21 = MEMORY[0x189604DE0];
  }

  else
  {
    int v27 = -350584140;
    __int128 v26 = xmmword_1807A2660;
    int v25 = 368778837;
    __int128 v24 = xmmword_1807A2688;
    int v23 = MGIsDeviceOneOfType((const UInt8 *)&v26, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v24);
    uint64_t v21 = MEMORY[0x189604DE0];
    if (!v23) {
      uint64_t v21 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v21;
}

uint64_t sub_18075632C()
{
  uint64_t v21 = 0LL;
  __int128 v22 = &v21;
  uint64_t v23 = 0x2000000000LL;
  uint64_t v24 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000LL;
  char v20 = 0;
  uint64_t v0 = 0LL;
  if ((sub_1807463A0() & 1) != 0) {
    goto LABEL_17;
  }
  CFMutableDictionaryRef v1 = IOServiceMatching("AppleOLYHAL");
  CFRetain(v1);
  uint64_t v2 = MEMORY[0x1895F87A8];
  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 0x40000000LL;
  void v16[2] = sub_1807629E0;
  v16[3] = &unk_1896F9840;
  v16[4] = &v17;
  v16[5] = &v21;
  sub_180764FD0(v1, (uint64_t)v16);
  if (!*((_BYTE *)v18 + 24))
  {
    CFRetain(v1);
    v15[0] = v2;
    v15[1] = 0x40000000LL;
    v15[2] = sub_180762A5C;
    v15[3] = &unk_1896F9868;
    v15[4] = &v17;
    v15[5] = &v21;
    sub_180765A98((uint64_t)v1, 5, (uint64_t)v15, 0LL);
  }

  if (!v22[3])
  {
    int v3 = *((unsigned __int8 *)v18 + 24);
    uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v4) {
      uint64_t v10 = v4 + 1;
    }
    else {
      uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    if (v3)
    {
      _MGLog( (uint64_t)v10,  3802LL,  (uint64_t)@"failed to fetch wifi vendor (no vendor-id)",  v5,  v6,  v7,  v8,  v9,  v14[0]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v14 = 0;
        uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v12 = "failed to fetch wifi vendor (no vendor-id)";
LABEL_13:
        _os_log_impl(&dword_180741000, v11, OS_LOG_TYPE_DEFAULT, v12, v14, 2u);
      }
    }

    else
    {
      _MGLog( (uint64_t)v10,  3804LL,  (uint64_t)@"failed to fetch wifi vendor (no AppleOLYHAL node)",  v5,  v6,  v7,  v8,  v9,  v14[0]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v14 = 0;
        uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v12 = "failed to fetch wifi vendor (no AppleOLYHAL node)";
        goto LABEL_13;
      }
    }
  }

  if (v1) {
    CFRelease(v1);
  }
  uint64_t v0 = v22[3];
LABEL_17:
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  return v0;
}

CFStringRef sub_180756528()
{
  return sub_1807665C0("IODeviceTree:/product", @"0/QVFV5/X0h5iDjrdYYcog", 112);
}

BOOL sub_180756540()
{
  return sub_1807661A8("IODeviceTree:/product", @"PgQhOQ4/ZYPLM6mgAoPm4A", 97);
}

CFTypeRef sub_180756558()
{
  BOOL v0 = sub_1807661A8("IODeviceTree:/product", @"bluetooth-le", 0);
  CFMutableDictionaryRef v1 = (CFTypeRef *)MEMORY[0x189604DE8];
  if (!v0) {
    CFMutableDictionaryRef v1 = (CFTypeRef *)MEMORY[0x189604DE0];
  }
  CFTypeRef v2 = *v1;
  if (*v1) {
    CFRetain(*v1);
  }
  return v2;
}

uint64_t sub_1807565B4()
{
  if (sub_180743444() == 4)
  {
    BOOL v0 = sub_1807661DC("IODeviceTree:/product", @"builtin-remote", 0);
    uint64_t v1 = MEMORY[0x189604DE0];
    if (!v0) {
      uint64_t v1 = MEMORY[0x189604DE8];
    }
  }

  else
  {
    uint64_t v1 = MEMORY[0x189604DE0];
  }

  return *(void *)v1;
}

BOOL sub_180756610()
{
  return sub_1807661A8("IODeviceTree:/buttons", @"NlddTE7HnMJiw5OzTqbrYA", 102);
}

BOOL sub_18075662C()
{
  BOOL v0 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
  uint64_t v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  values = Mutable;
  LODWORD(v9) = 65280;
  CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberSInt32Type, &v9);
  CFDictionarySetValue(Mutable, @"PrimaryUsagePage", v3);
  CFRelease(v3);
  LODWORD(v9) = 4;
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberSInt32Type, &v9);
  CFDictionarySetValue(Mutable, @"PrimaryUsage", v4);
  CFRelease(v4);
  uint64_t v9 = @"IOPropertyMatch";
  uint64_t v5 = CFDictionaryCreate(0LL, (const void **)&v9, (const void **)&values, 1LL, v0, v1);
  CFRelease(values);
  io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1896086A8], v5);
  io_service_t v7 = MatchingService;
  if (MatchingService) {
    IOObjectRelease(MatchingService);
  }
  return v7 != 0;
}

CFNumberRef sub_180756750()
{
  return sub_180766200("IODeviceTree:/product", @"Ini7+h7Q4ZZctfFM9+KTBw", 112);
}

BOOL sub_180756768()
{
  return sub_1807661A8("IODeviceTree:/product", @"RN/FxX/3jy6LWaEIPR8qpA", 99);
}

uint64_t sub_180756780()
{
  else {
    return sub_18076E49C( (uint64_t)"IODeviceTree:/arm-io",  (uint64_t)@"disp0",  0LL,  (uint64_t)@"always-on-device-flipbook",  0LL);
  }
}

BOOL sub_1807567CC()
{
  return *MEMORY[0x189604DE8] != 0LL;
}

const void *sub_1807567E4()
{
  return sub_18074776C((const char **)@"QVwCp3Lu9RLnxw7LO9DBfQ", 0LL);
}

CFMutableDictionaryRef sub_1807567F4()
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  __int128 v83 = xmmword_1807A2B50;
  __int128 v84 = xmmword_1807A2B40;
  __int128 v81 = xmmword_1807A2B70;
  __int128 v82 = xmmword_1807A2B60;
  __int128 v79 = xmmword_1807A2B90;
  __int128 v80 = xmmword_1807A2B80;
  __int128 v77 = xmmword_1807A2BB0;
  __int128 v78 = xmmword_1807A2BA0;
  __int128 v75 = xmmword_1807A2BC0;
  __int128 v76 = xmmword_1807A2CB0;
  __int128 v73 = xmmword_1807A2CB0;
  __int128 v74 = xmmword_1807A2BD0;
  __int128 v71 = xmmword_1807A2BE0;
  __int128 v72 = xmmword_1807A2C90;
  __int128 v69 = xmmword_1807A2BF0;
  __int128 v70 = xmmword_1807A2C90;
  __int128 v67 = xmmword_1807A2C00;
  __int128 v68 = xmmword_1807A2CB0;
  __int128 v65 = xmmword_1807A2C20;
  __int128 v66 = xmmword_1807A2C10;
  __int128 v63 = xmmword_1807A2C40;
  __int128 v64 = xmmword_1807A2C30;
  __int128 v61 = xmmword_1807A2C60;
  __int128 v62 = xmmword_1807A2C50;
  __int128 v59 = xmmword_1807A2C70;
  __int128 v60 = xmmword_1807A2C90;
  __int128 v57 = xmmword_1807A2C80;
  __int128 v58 = xmmword_1807A2CB0;
  __int128 v56 = xmmword_1807A2C90;
  __int128 v54 = xmmword_1807A2CB0;
  __int128 v55 = xmmword_1807A2CA0;
  __int128 v52 = xmmword_1807A2CD0;
  __int128 v53 = xmmword_1807A2CC0;
  __int128 v50 = xmmword_1807A2CF0;
  __int128 v51 = xmmword_1807A2CE0;
  __int128 v48 = xmmword_1807A2D10;
  __int128 v49 = xmmword_1807A2D00;
  __int128 v47 = xmmword_1807A2D20;
  int v41 = -1;
  int valuePtr = 0;
  BOOL v2 = MGGetBoolAnswer((const char **)@"DeviceSupportsReverseZoom");
  CFNumberRef v3 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  if (v2) {
    CFIndex v4 = 4LL;
  }
  else {
    CFIndex v4 = 2LL;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  v4,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  if (Mutable)
  {
    CFNumberRef v5 = sub_180766200("IODeviceTree:/product", @"artwork-device-subtype", 0);
    CFNumberRef v6 = sub_180766200("IODeviceTree:/product", @"artwork-scale-factor", 0);
    if (v5)
    {
      if (CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr))
      {
        if (!v6 || !CFNumberGetValue(v6, kCFNumberSInt32Type, &v41))
        {
LABEL_104:
          CFRelease(v5);
LABEL_105:
          if (!v6) {
            return Mutable;
          }
LABEL_106:
          CFRelease(v6);
          return Mutable;
        }

        if (v41 == 2 && valuePtr == 2688)
        {
          int valuePtr = 1792;
LABEL_17:
          io_service_t v7 = 0LL;
          uint64_t v8 = 0LL;
          uint64_t v9 = &v75;
          uint64_t v10 = &v74;
          goto LABEL_18;
        }

        if (valuePtr > 2435)
        {
          if (valuePtr <= 2731)
          {
            if (valuePtr > 2555)
            {
              switch(valuePtr)
              {
                case 2556:
                  io_service_t v7 = 0LL;
                  uint64_t v8 = 0LL;
                  uint64_t v9 = &v61;
                  uint64_t v10 = &v60;
                  goto LABEL_18;
                case 2622:
                  io_service_t v7 = 0LL;
                  uint64_t v8 = 0LL;
                  uint64_t v9 = &v57;
                  uint64_t v10 = &v56;
                  goto LABEL_18;
                case 2688:
                  io_service_t v7 = 0LL;
                  uint64_t v8 = 0LL;
                  uint64_t v9 = &v77;
                  uint64_t v10 = &v76;
                  goto LABEL_18;
              }

              goto LABEL_92;
            }

            if (valuePtr != 2436)
            {
              if (valuePtr == 2532)
              {
                io_service_t v7 = 0LL;
                uint64_t v8 = 0LL;
                uint64_t v9 = &v71;
                uint64_t v10 = &v70;
                goto LABEL_18;
              }

              goto LABEL_92;
            }

LABEL_80:
            io_service_t v7 = 0LL;
            uint64_t v8 = 0LL;
            uint64_t v9 = &v73;
            uint64_t v10 = &v72;
            goto LABEL_18;
          }

          if (valuePtr > 2777)
          {
            switch(valuePtr)
            {
              case 2778:
                io_service_t v7 = 0LL;
                uint64_t v8 = 0LL;
                uint64_t v9 = &v69;
                uint64_t v10 = &v68;
                goto LABEL_18;
              case 2796:
                io_service_t v7 = 0LL;
                uint64_t v8 = 0LL;
                uint64_t v9 = &v59;
                uint64_t v10 = &v58;
                goto LABEL_18;
              case 2868:
                io_service_t v7 = 0LL;
                uint64_t v8 = 0LL;
                uint64_t v9 = &v55;
                uint64_t v10 = &v54;
                goto LABEL_18;
            }

            goto LABEL_92;
          }

          if (valuePtr == 2732)
          {
            io_service_t v7 = 0LL;
            if (v2) {
              uint64_t v8 = &v78;
            }
            else {
              uint64_t v8 = 0LL;
            }
            uint64_t v9 = &v80;
            uint64_t v10 = &v79;
LABEL_18:
            uint64_t v11 = (const __CFData *)sub_1807453EC();
            uint64_t v12 = v11;
            if (v11)
            {
              if (CFDataGetLength(v11) >= 16)
              {
                BytePtr = (double *)CFDataGetBytePtr(v12);
                if (valuePtr == 2732)
                {
                  uint64_t v14 = BytePtr;
                  if (BytePtr[1] > *BytePtr)
                  {
                    int v15 = *((_DWORD *)v9 + 1);
                    *((_DWORD *)v9 + 1) = *((_DWORD *)v9 + 3);
                    *((_DWORD *)v9 + 3) = v15;
                    int v16 = *((_DWORD *)v10 + 1);
                    *((_DWORD *)v10 + 1) = *((_DWORD *)v10 + 3);
                    *((_DWORD *)v10 + 3) = v16;
                    if (v8)
                    {
                      int v17 = *((_DWORD *)v8 + 1);
                      *((_DWORD *)v8 + 1) = *((_DWORD *)v8 + 3);
                      *((_DWORD *)v8 + 3) = v17;
                    }

                    uint64_t v18 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
                    _MGLog( (uint64_t)v18,  2046LL,  (uint64_t)@"copyAvailableDisplayZoomSizes: Changed landscape to portrait for %dx%d",  v19,  v20,  v21,  v22,  v23,  (int)v14[1]);
                    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
                    {
                      int v24 = (int)v14[1];
                      int v25 = (int)*v14;
                      *(_DWORD *)buf = 67109376;
                      int v44 = v24;
                      __int16 v45 = 1024;
                      int v46 = v25;
                      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "copyAvailableDisplayZoomSizes: Changed landscape to portrait for %dx%d",  buf,  0xEu);
                    }
                  }
                }
              }
            }

            __int128 v26 = sub_180762ACC((uint64_t)v9);
            if (v26)
            {
              int v27 = v26;
              __int128 v28 = sub_180762ACC((uint64_t)v10);
              if (v28)
              {
                int v29 = v28;
                if (v8)
                {
                  __int128 v30 = sub_180762ACC((uint64_t)v8);
                  if (!v30)
                  {
                    CFRelease(Mutable);
                    int v31 = 0LL;
LABEL_59:
                    CFMutableDictionaryRef Mutable = 0LL;
                    goto LABEL_69;
                  }
                }

                else
                {
                  __int128 v30 = 0LL;
                }

                if (v7)
                {
                  int v31 = sub_180762ACC((uint64_t)v7);
                  if (!v31)
                  {
                    CFRelease(Mutable);
                    goto LABEL_59;
                  }
                }

                else
                {
                  int v31 = 0LL;
                }

                CFDictionarySetValue(Mutable, @"default", v27);
                CFDictionarySetValue(Mutable, @"zoomed", v29);
                if (v8) {
                  CFDictionarySetValue(Mutable, @"dense", v30);
                }
                if (v7) {
                  CFDictionarySetValue(Mutable, @"denser", v31);
                }
LABEL_69:
                CFRelease(v29);
                CFRelease(v27);
                if (v30) {
                  CFRelease(v30);
                }
                if (!v31) {
                  goto LABEL_73;
                }
                goto LABEL_72;
              }

              CFRelease(Mutable);
              CFMutableDictionaryRef Mutable = 0LL;
              int v31 = v27;
            }

            else
            {
              int v31 = Mutable;
              CFMutableDictionaryRef Mutable = 0LL;
            }

LABEL_72:
            CFRelease(v31);
LABEL_73:
            CFRelease(v5);
            if (v12) {
              CFRelease(v12);
            }
            goto LABEL_106;
          }

          if (valuePtr == 2752)
          {
            if (v2) {
              io_service_t v7 = &v47;
            }
            else {
              io_service_t v7 = 0LL;
            }
            if (v2) {
              uint64_t v8 = &v48;
            }
            else {
              uint64_t v8 = 0LL;
            }
            uint64_t v9 = &v49;
            uint64_t v10 = &v50;
            goto LABEL_18;
          }

LABEL_92:
          int v33 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
          _MGLog( (uint64_t)v33,  2022LL,  (uint64_t)@"Unsupported artwork-device-subtype %d",  v34,  v35,  v36,  v37,  v38,  valuePtr);
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            int v44 = valuePtr;
            _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Unsupported artwork-device-subtype %d",  buf,  8u);
          }

          goto LABEL_100;
        }

        if (valuePtr <= 2223)
        {
          if (valuePtr > 569)
          {
            if (valuePtr == 570)
            {
              io_service_t v7 = 0LL;
              uint64_t v8 = 0LL;
              uint64_t v9 = &v82;
              uint64_t v10 = &v81;
              goto LABEL_18;
            }

            if (valuePtr == 1792) {
              goto LABEL_17;
            }
            goto LABEL_92;
          }

          if (valuePtr != 568)
          {
            if (valuePtr == 569)
            {
              io_service_t v7 = 0LL;
              uint64_t v8 = 0LL;
              uint64_t v9 = &v84;
              uint64_t v10 = &v83;
              goto LABEL_18;
            }

            goto LABEL_92;
          }
        }

        else
        {
          if (valuePtr > 2359)
          {
            switch(valuePtr)
            {
              case 2360:
                if (v2)
                {
                  uint64_t v9 = &v64;
                  uint64_t v8 = &v63;
                  io_service_t v7 = &v62;
                  uint64_t v10 = &v63;
                  goto LABEL_18;
                }

                goto LABEL_100;
              case 2388:
                if (v2)
                {
                  uint64_t v9 = &v67;
                  uint64_t v8 = &v66;
                  io_service_t v7 = &v65;
                  uint64_t v10 = &v66;
                  goto LABEL_18;
                }

                goto LABEL_100;
              case 2420:
                if (v2)
                {
                  uint64_t v9 = &v53;
                  uint64_t v8 = &v52;
                  io_service_t v7 = &v51;
                  uint64_t v10 = &v52;
                  goto LABEL_18;
                }

                goto LABEL_100;
            }

            goto LABEL_92;
          }

          if (valuePtr != 2224)
          {
            if (valuePtr == 2340) {
              goto LABEL_80;
            }
            goto LABEL_92;
          }
        }

LABEL_100:
        CFArrayRef v39 = CFArrayCreate(v3, 0LL, 0LL, MEMORY[0x189605228]);
        if (v39)
        {
          CFArrayRef v40 = v39;
          CFDictionarySetValue(Mutable, @"default", v39);
          CFDictionarySetValue(Mutable, @"zoomed", v40);
        }

        else
        {
          CFArrayRef v40 = Mutable;
          CFMutableDictionaryRef Mutable = 0LL;
        }

        CFRelease(v40);
        goto LABEL_104;
      }

      CFRelease(Mutable);
      CFNumberRef v32 = v5;
    }

    else
    {
      CFNumberRef v32 = Mutable;
    }

    CFRelease(v32);
    CFMutableDictionaryRef Mutable = 0LL;
    goto LABEL_105;
  }

  return Mutable;
}

CFNumberRef sub_180757090()
{
  return sub_180766200("IODeviceTree:/product/camera", @"cmkS/KVB6ubxH76sLbumbw", 114);
}

CFNumberRef sub_1807570A8()
{
  return sub_180766200("IODeviceTree:/chosen", @"4JalTKSe5a9I+mb00ATvag", 100);
}

CFStringRef sub_1807570C0()
{
  if (sub_180743B80()) {
    return @"iOS";
  }
  else {
    return (const __CFString *)sub_18074313C((const void *)*MEMORY[0x189604B68], 1);
  }
}

const void *sub_1807570F8()
{
  return sub_18074776C((const char **)@"mtHZd1H8XJ2DMVtNVUSkag", 0LL);
}

BOOL sub_180757108()
{
  return !sub_1807661A8("IODeviceTree:/product", @"wAbB2fAjUqUc6lNBelfWMA", 110);
}

uint64_t sub_180757134()
{
  return 0LL;
}

uint64_t sub_18075713C()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v11 = 1032708406;
  __int128 v10 = xmmword_1807A2160;
  int v9 = 729903963;
  __int128 v8 = xmmword_1807A2174;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8) ^ 1;
}

uint64_t sub_18075723C()
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  BOOL v34 = 0;
  BOOL v1 = sub_180744258((uint64_t)@"AllowsFaceTime", &v34);
  if (v34) {
    return v1;
  }
  uint64_t v2 = (const __CFDictionary *)sub_180742ACC("/System/Library/CoreServices/OverrideSoftwareBehaviors.plist");
  uint64_t v0 = sub_180758308();
  uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v3) {
    int v9 = v3 + 1;
  }
  else {
    int v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v9, 4399LL, (uint64_t)@"Determined that voip capability is: %d", v4, v5, v6, v7, v8, v0);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)uint64_t v36 = v0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Determined that voip capability is: %d",  buf,  8u);
  }

  if (v2)
  {
    __int128 v10 = sub_18074776C((const char **)@"h63QSdBCiT/z0WU6rdQv6Q", 0LL);
    if (v10)
    {
      int v11 = v10;
      if (CFDictionaryContainsKey(v2, v10))
      {
        int Value = (const __CFDictionary *)CFDictionaryGetValue(v2, v11);
        if (Value)
        {
          uint64_t v13 = Value;
          CFTypeID v14 = CFGetTypeID(Value);
          if (v14 == CFDictionaryGetTypeID())
          {
            if (CFDictionaryContainsKey(v13, @"voip"))
            {
              int v15 = CFDictionaryGetValue(v13, @"voip");
              if (v15)
              {
                int v16 = v15;
                CFTypeID v17 = CFGetTypeID(v15);
                if (v17 == CFBooleanGetTypeID() && v16 == (const void *)*MEMORY[0x189604DE8])
                {
                  uint64_t v18 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
                  _MGLog( (uint64_t)v18,  4426LL,  (uint64_t)@"Found the override for regionCode: %@",  v19,  v20,  v21,  v22,  v23,  (char)v11);
                  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    *(void *)uint64_t v36 = v11;
                    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Found the override for regionCode: %@",  buf,  0xCu);
                  }

                  char v33 = 0;
                  LODWORD(v0) = sub_180744258((uint64_t)@"AllowsVoIP", (BOOL *)&v33);
                  int v24 = (uint64_t (*)(const __CFString *))*((void *)off_18C533F28 + 40);
                  if (!v24) {
                    int v24 = (uint64_t (*)(const __CFString *))sub_180746538(40LL, 2LL);
                  }
                  int v25 = v24(@"disablevoipforlocale");
                  __int128 v26 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
                  _MGLog( (uint64_t)v26,  4441LL,  (uint64_t)@"Determined carrier_override_present: %d, carrier_override: %d, springboard_locale_override: %d ",  v27,  v28,  v29,  v30,  v31,  v33);
                  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109632;
                    *(_DWORD *)uint64_t v36 = v33;
                    *(_WORD *)&v36[4] = 1024;
                    *(_DWORD *)&v36[6] = v0;
                    __int16 v37 = 1024;
                    int v38 = v25;
                    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Determined carrier_override_present: %d, carrier_override: %d, springboard_locale_override: %d ",  buf,  0x14u);
                  }

                  if (v33) {
                    uint64_t v0 = v0;
                  }
                  else {
                    uint64_t v0 = v25 ^ 1u;
                  }
                }
              }
            }
          }
        }
      }

      CFRelease(v11);
    }

    CFRelease(@"voip");
    CFRelease(v2);
  }

  return v0;
}

BOOL sub_180757588()
{
  return sub_180743444() == 6;
}

uint64_t sub_1807575A4()
{
  return sub_180762680(1);
}

uint64_t sub_1807575AC()
{
  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1) {
    return sub_180743444() == 3;
  }
  return result;
}

BOOL sub_1807575D4()
{
  return sub_1807661A8("IODeviceTree:/product", @"8bY/L3i3rmxrl4ZjFZZpgQ", 115);
}

const void *sub_1807575EC()
{
  uint64_t v103 = *MEMORY[0x1895F89C0];
  int v102 = 1789837692;
  __int128 v101 = xmmword_1807A1FF8;
  int v100 = -1239654590;
  __int128 v99 = xmmword_1807A2020;
  int v98 = -1579092758;
  __int128 v97 = xmmword_1807A2048;
  int v96 = 48355600;
  __int128 v95 = xmmword_1807A200C;
  int v94 = -679691073;
  __int128 v93 = xmmword_1807A2034;
  int v92 = 1430379884;
  __int128 v91 = xmmword_1807A205C;
  int v90 = -121925081;
  __int128 v89 = xmmword_1807A223C;
  int v88 = 414393924;
  __int128 v87 = xmmword_1807A26B0;
  int v86 = 897736383;
  __int128 v85 = xmmword_1807A26C4;
  int v84 = -996295886;
  __int128 v83 = xmmword_1807A26D8;
  int v82 = -453987047;
  __int128 v81 = xmmword_1807A26EC;
  int v80 = 1602014129;
  __int128 v79 = xmmword_1807A20AC;
  int v78 = -810116762;
  __int128 v77 = xmmword_1807A20C0;
  int v76 = -1195351767;
  __int128 v75 = xmmword_1807A20D4;
  int v74 = -199226823;
  __int128 v73 = xmmword_1807A278C;
  int v72 = 1412427398;
  __int128 v71 = xmmword_1807A27A0;
  int v70 = -1283070668;
  __int128 v69 = xmmword_1807A2778;
  int v68 = 160260070;
  __int128 v67 = xmmword_1807A27B4;
  int v66 = 28030256;
  __int128 v65 = xmmword_1807A2138;
  int v64 = 1214363620;
  __int128 v63 = xmmword_1807A214C;
  int v62 = -798153473;
  __int128 v61 = xmmword_1807A1FA8;
  int v60 = -776721724;
  __int128 v59 = xmmword_1807A1FBC;
  int v58 = -1403227947;
  __int128 v57 = xmmword_1807A25E8;
  int v56 = 729118884;
  __int128 v55 = xmmword_1807A25FC;
  int v54 = 1046806126;
  __int128 v53 = xmmword_1807A2610;
  int v52 = -188760945;
  __int128 v51 = xmmword_1807A2624;
  int v50 = -489993439;
  __int128 v49 = xmmword_1807A2638;
  int v48 = 886875686;
  __int128 v47 = xmmword_1807A264C;
  int v46 = -350584140;
  __int128 v45 = xmmword_1807A2660;
  int v44 = -1418383976;
  __int128 v43 = xmmword_1807A2674;
  else {
    return sub_18074776C((const char **)@"pFpC81KCZegLf4FenQZ2OA", 0LL);
  }
}

uint64_t sub_180757AF0()
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  int v66 = 1789837692;
  __int128 v65 = xmmword_1807A1FF8;
  int v64 = -1239654590;
  __int128 v63 = xmmword_1807A2020;
  int v62 = -1579092758;
  __int128 v61 = xmmword_1807A2048;
  int v60 = 48355600;
  __int128 v59 = xmmword_1807A200C;
  int v58 = -679691073;
  __int128 v57 = xmmword_1807A2034;
  int v56 = 1430379884;
  __int128 v55 = xmmword_1807A205C;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v65, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v63) & 1) != 0
    || (int v54 = -926344036,
        __int128 v53 = xmmword_1807A2070,
        int v52 = -954998212,
        __int128 v51 = xmmword_1807A2084,
        int v50 = 436612651,
        __int128 v49 = xmmword_1807A2098,
        (MGIsDeviceOneOfType((const UInt8 *)&v53, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v51) & 1) != 0))
  {
LABEL_4:
    uint64_t v21 = MEMORY[0x189604DE0];
  }

  else
  {
    int v48 = 1602014129;
    __int128 v47 = xmmword_1807A20AC;
    int v46 = -810116762;
    __int128 v45 = xmmword_1807A20C0;
    int v44 = -1195351767;
    __int128 v43 = xmmword_1807A20D4;
    int v42 = -199226823;
    __int128 v41 = xmmword_1807A278C;
    int v40 = 1412427398;
    __int128 v39 = xmmword_1807A27A0;
    int v38 = -1283070668;
    __int128 v37 = xmmword_1807A2778;
    int v36 = 160260070;
    __int128 v35 = xmmword_1807A27B4;
    char v23 = MGIsDeviceOneOfType((const UInt8 *)&v47, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v45);
    uint64_t v21 = MEMORY[0x189604DE0];
    if ((v23 & 1) == 0)
    {
      int v34 = -1639077591;
      __int128 v33 = xmmword_1807A1FD0;
      int v32 = 338555555;
      __int128 v31 = xmmword_1807A1FE4;
    }
  }

  return *(void *)v21;
}

uint64_t sub_180757E38()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 95);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_180746538(95LL, 2LL);
  }
  unsigned int v1 = v0(0LL);
  unsigned int v2 = v1;
  if (v1 < 4) {
    return (6u >> (v1 & 0xF)) & 1;
  }
  uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v4) {
    uint64_t v10 = v4 + 1;
  }
  else {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog( (uint64_t)v10,  4665LL,  (uint64_t)@"MKBGetDeviceLockState returned unknown state %d",  v5,  v6,  v7,  v8,  v9,  v2);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v12 = v2;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "MKBGetDeviceLockState returned unknown state %d",  buf,  8u);
  }

  return 1LL;
}

const void *sub_180757F4C()
{
  return sub_18074313C(@"MarketingVersion", 1);
}

BOOL sub_180757F5C()
{
  return sub_180762B50(1);
}

CFStringRef sub_180757F64()
{
  uint64_t v0 = (const __CFData *)sub_18074776C((const char **)@"5MXFoiW2zgxfIbaaTb/wvA", 0LL);
  if (!v0) {
    return 0LL;
  }
  unsigned int v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_180758080(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"BQwz+BT9b5mS7OPh2WGD6A", a2);
}

BOOL sub_1807580A4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"BQwz+BT9b5mS7OPh2WGD6A", 83, a2);
}

CFNumberRef sub_1807580B8()
{
  return sub_180766200("IODeviceTree:/chosen", @"+VTSncKV5ykgl9KAsuHFFg", 115);
}

uint64_t sub_1807580D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  int v58 = -526227167;
  __int128 v57 = xmmword_1807A255C;
  int v56 = -1509831889;
  __int128 v55 = xmmword_1807A2570;
  int v54 = 289690957;
  __int128 v53 = xmmword_1807A2188;
  int v52 = 586720268;
  __int128 v51 = xmmword_1807A219C;
  int v50 = 368885834;
  __int128 v49 = xmmword_1807A2534;
  int v48 = -414334491;
  __int128 v47 = xmmword_1807A2548;
  if (MGIsDeviceOneOfType((const UInt8 *)&v49, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v47)
    || (int v46 = -2092955395,
        __int128 v45 = xmmword_1807A21B0,
        int v44 = 674998600,
        __int128 v43 = xmmword_1807A21C4,
        MGIsDeviceOneOfType((const UInt8 *)&v45, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v43)))
  {
LABEL_6:
    uint64_t v36 = MEMORY[0x189604DE0];
  }

  else
  {
    int v42 = 1711910369;
    __int128 v41 = xmmword_1807A21D8;
    int v40 = -1282800328;
    __int128 v39 = xmmword_1807A21EC;
    int v38 = MGIsDeviceOneOfType((const UInt8 *)&v41, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v39);
    uint64_t v36 = MEMORY[0x189604DE0];
    if (!v38) {
      uint64_t v36 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v36;
}

uint64_t sub_1807582C8()
{
  return sub_18076E49C( (uint64_t)"IODeviceTree:/",  (uint64_t)@"4k6Wv56SWfITjzet+hIHMQ",  109LL,  (uint64_t)@"9f5ODNAt2gufqSI82eYnLw",  99LL);
}

BOOL sub_1807582EC()
{
  return sub_180743444() == 3;
}

uint64_t sub_180758308()
{
  BOOL v2 = 0;
  uint64_t result = sub_180744258((uint64_t)@"AllowsVoIP", &v2);
  if (!v2)
  {
    if (MGGetBoolAnswer((const char **)@"6MnVtR+c9LeR46bMxvR5Yw"))
    {
      if (MGGetBoolAnswer((const char **)@"L5al7b+7JATD/izSJeH0aQ"))
      {
        return 0LL;
      }

      else
      {
        unsigned int v1 = (uint64_t (*)(const __CFString *))*((void *)off_18C533F28 + 40);
        if (!v1) {
          unsigned int v1 = (uint64_t (*)(const __CFString *))sub_180746538(40LL, 2LL);
        }
        return v1(@"voip");
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_180758398()
{
  return sub_180769530(0x42474D74u);
}

BOOL sub_1807583A8(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"hfs43coKE3iWlCwnqPgBpg", a2);
}

BOOL sub_1807583CC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"hfs43coKE3iWlCwnqPgBpg", 73, a2);
}

BOOL sub_1807583E0()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"npI2l0ybDY9Um4z/T8K/Sg", 100);
}

uint64_t sub_1807583F8()
{
  return 0LL;
}

const void *sub_180758400()
{
  return sub_18074776C((const char **)@"6iI7/9cVUGIjdrSvIXEt4A", 0LL);
}

BOOL sub_180758410()
{
  return *MEMORY[0x189604DE8] != 0LL;
}

BOOL sub_180758428()
{
  return sub_1807661DC("IODeviceTree:/product", @"8Wunmi1SpU1MxfBxkv3KOw", 100);
}

uint64_t sub_180758440()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 36);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_180746538(36LL, 2LL);
  }
  return v0();
}

const char *sub_18075846C()
{
  uint64_t result = (const char *)sub_180746268();
  if (result) {
    return (const char *)CFStringCreateWithCString(0LL, result, 0x8000100u);
  }
  return result;
}

const void *sub_18075849C()
{
  return sub_180766414("IODeviceTree:/arm-io/disp0", @"Zhoou87qmFpFwcFsm7Jlyg", 118);
}

CFStringRef sub_1807584B4()
{
  return sub_1807665C0("IODeviceTree:/product", @"kc+QzHP4Frf2NvP+mclQ2A", 119);
}

uint64_t sub_1807584CC()
{
  return 1LL;
}

uint64_t sub_1807584D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int v14 = 368885834;
  __int128 v13 = xmmword_1807A2534;
  int v12 = -526227167;
  __int128 v11 = xmmword_1807A255C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11))
  {
    uint64_t v8 = MEMORY[0x189604DE0];
  }

  else
  {
    int v9 = sub_180743444();
    uint64_t v8 = MEMORY[0x189604DE0];
    if (v9 == 6) {
      uint64_t v8 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v8;
}

BOOL sub_180758620()
{
  return sub_1807661A8("IODeviceTree:/product", @"c2ZyLSF00uEyREloINiqVA", 104);
}

BOOL sub_180758638()
{
  uint64_t v0 = sub_1807665C0("IODeviceTree:/chosen", @"osenvironment", 0);
  if (v0 && (v1 = v0, CFComparisonResult v2 = CFStringCompare(v0, @"diagnostics", 0LL), CFRelease(v1), v2 == kCFCompareEqualTo)) {
    return 1LL;
  }
  else {
    return sub_1807661A8("IODeviceTree:/product", @"boot-ios-diagnostics", 0);
  }
}

uint64_t sub_1807586B4()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1807586BC()
{
  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1) {
    return sub_180743444() == 2
  }
        || sub_180743444() == 3
        || sub_180743444() == 6;
  return result;
}

uint64_t sub_180758704()
{
  uint64_t result = MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg");
  if ((_DWORD)result)
  {
    BOOL v1 = sub_1807661A8("IODeviceTree:/product/facetime", @"bitrate-3g", 0);
    uint64_t result = 0LL;
    if (v1)
    {
      BOOL v2 = 0;
      uint64_t result = sub_180744258((uint64_t)@"AllowFaceTimeOverCellular", &v2);
      if (!v2) {
        return sub_18075723C();
      }
    }
  }

  return result;
}

BOOL sub_180758770()
{
  return sub_1807442E4(@"CH") || sub_1807442E4(@"<GERMANY>");
}

uint64_t sub_1807587A4()
{
  uint64_t v0 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen", @"housing-color", 0);
  uint64_t v1 = sub_1807697B4(v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

const void *sub_1807587F0()
{
  return sub_18074776C((const char **)@"BOYfUi496moe56A0RWFbqQ", 0LL);
}

__CFDictionary *sub_180758800()
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  CFMutableDictionaryRef v1 = sub_180765258(1, "als");
  if (v1)
  {
    CFMutableDictionaryRef v2 = v1;
    CFDictionaryAddValue(Mutable, @"als", v1);
    CFRelease(v2);
  }

  CFMutableDictionaryRef v3 = sub_180765258(1, "multi-touch");
  if (v3)
  {
    CFMutableDictionaryRef v4 = v3;
    CFDictionaryAddValue(Mutable, @"multi-touch", v3);
    CFRelease(v4);
  }

  CFMutableDictionaryRef v5 = sub_180765258(1, "prox");
  if (v5)
  {
    CFMutableDictionaryRef v6 = v5;
    CFDictionaryAddValue(Mutable, @"prox", v5);
    CFRelease(v6);
  }

  return Mutable;
}

BOOL sub_1807588D8(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"5mvQIwu3Mqqw/zOKmwGkWw", a2);
}

BOOL sub_1807588FC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"5mvQIwu3Mqqw/zOKmwGkWw", 80, a2);
}

const void *sub_180758910()
{
  return sub_18074776C((const char **)@"AJFQheZDyUbvI6RmBMT9Cg", 0LL);
}

uint64_t sub_180758920()
{
  return sub_18076E620((uint64_t)"IODeviceTree:", (uint64_t)@"tristar", 0LL, (uint64_t)@"esn", 0LL);
}

BOOL sub_180758944(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"o60T6wXe1DDaO4a4gw10TA", a2);
}

BOOL sub_180758968(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"o60T6wXe1DDaO4a4gw10TA", 84, a2);
}

CFTypeRef sub_18075897C()
{
  return sub_1807615E4(@"YonkersSNUM");
}

BOOL sub_180758988(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"67Dsh4G8EGQp4WbPDfS/Xw", a2);
}

BOOL sub_1807589AC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"67Dsh4G8EGQp4WbPDfS/Xw", 89, a2);
}

BOOL sub_1807589C0()
{
  return sub_1807661A8("IODeviceTree:/buttons", @"/ZdBovdn5DLfkQkSAuAskw", 115);
}

CFNumberRef sub_1807589D8()
{
  return sub_180766200("IODeviceTree:/product", @"1HWDBfJwBJZ8TDHcPDafmQ", 101);
}

BOOL sub_1807589F0()
{
  CFStringRef v0 = sub_18075DE24();
  if (!v0) {
    return 0LL;
  }
  CFStringRef v1 = v0;
  BOOL v2 = CFEqual(v0, @"P3") != 0;
  CFRelease(v1);
  return v2;
}

unint64_t sub_180758A3C()
{
  return (unint64_t)sub_180744658() >> 32;
}

BOOL sub_180758A54()
{
  return sub_180743444() == 1
      && sub_1807661DC("IODeviceTree:/product", @"supports-lotx", 0)
      && sub_180762D60();
}

const void *sub_180758A98()
{
  return sub_18074776C((const char **)@"4uzgAFPkzKUmlZG5HpFIkg", 0LL);
}

BOOL sub_180758AA8()
{
  return sub_1807661DC("IODeviceTree:/product", @"FuR7SfqQmxpRW5MyqMm7FQ", 108);
}

BOOL sub_180758AC0()
{
  return sub_180743444() == 6 && sub_180743AF0((BOOL)@"M10");
}

uint64_t sub_180758AF0()
{
  return 1LL;
}

uint64_t sub_180758AF8()
{
  return 0LL;
}

BOOL sub_180758B00()
{
  CFDataRef v0 = sub_18074FAC4();
  if (!v0) {
    return 0LL;
  }
  CFStringRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) >= 6)
  {
    BytePtr = CFDataGetBytePtr(v1);
    if (*BytePtr)
    {
      BOOL v4 = 1LL;
    }

    else
    {
      unint64_t v6 = 0LL;
      do
      {
        unint64_t v7 = v6;
        if (v6 == 5) {
          break;
        }
        ++v6;
      }

      while (!BytePtr[v7 + 1]);
      BOOL v4 = v7 < 5;
    }
  }

  else
  {
    BOOL v4 = 0LL;
  }

  CFRelease(v1);
  return v4;
}

CFNumberRef sub_180758BA4()
{
  CFNumberRef result = sub_180766200("IODeviceTree:/product", @"builtin-mics", 0);
  if (!result)
  {
    int valuePtr = 0;
    return CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
  }

  return result;
}

uint64_t sub_180758BE8()
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  CFTypeRef cf = 0LL;
  if (qword_18C534178 != -1) {
    dispatch_once(&qword_18C534178, &unk_1896F99A0);
  }
  if (off_18C534168) {
    BOOL v0 = off_18C534170 == 0LL;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    CFStringRef v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1) {
      unint64_t v7 = v1 + 1;
    }
    else {
      unint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v7,  5270LL,  (uint64_t)@"Unable to dlsym AMFDRCreateWithOptions and AMFDRSealingMapVerifySealing",  v2,  v3,  v4,  v5,  v6,  v38);
    uint64_t v8 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v8;
    }
    *(_WORD *)buf = 0;
    int v9 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v10 = "Unable to dlsym AMFDRCreateWithOptions and AMFDRSealingMapVerifySealing";
LABEL_27:
    _os_log_impl(&dword_180741000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
    return 0LL;
  }

  uint64_t v11 = *MEMORY[0x189604DB0];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  if (!Mutable)
  {
    uint64_t v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v23) {
      uint64_t v29 = v23 + 1;
    }
    else {
      uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v29, 5252LL, (uint64_t)@"CFDictionaryCreateMutable failed", v24, v25, v26, v27, v28, v38);
    uint64_t v8 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v8;
    }
    *(_WORD *)buf = 0;
    int v9 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v10 = "CFDictionaryCreateMutable failed";
    goto LABEL_27;
  }

  __int128 v13 = Mutable;
  CFDictionarySetValue(Mutable, @"DataStore", @"Local");
  uint64_t v14 = off_18C534168(v11, v13);
  if (v14)
  {
    uint64_t v15 = (const void *)v14;
    uint64_t v8 = off_18C534170(v14, &cf);
    if ((v8 & 1) == 0)
    {
      uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      uint64_t v22 = v16 ? v16 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog( (uint64_t)v22,  5265LL,  (uint64_t)@"AMFDRSealingMapVerifySealing failed: %@",  v17,  v18,  v19,  v20,  v21,  (char)cf);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        CFTypeRef v41 = cf;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "AMFDRSealingMapVerifySealing failed: %@",  buf,  0xCu);
      }
    }

    CFRelease(v15);
  }

  else
  {
    uint64_t v30 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v30) {
      uint64_t v36 = v30 + 1;
    }
    else {
      uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v36, 5260LL, (uint64_t)@"AMFDRCreateWithOptions failed", v31, v32, v33, v34, v35, v38);
    uint64_t v8 = 0LL;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "AMFDRCreateWithOptions failed", buf, 2u);
      uint64_t v8 = 0LL;
    }
  }

  CFRelease(v13);
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

BOOL sub_180758EEC()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"J/a5Y6rhDH0gVkYtWUylOA", 115);
}

BOOL sub_180758F04()
{
  return sub_180743444() == 6 && sub_180743AF0((BOOL)@"M11");
}

__CFArray *sub_180758F34()
{
  return sub_1807669EC(@"encoding");
}

uint64_t sub_180758F40()
{
  return 1LL;
}

const void *sub_180758F48()
{
  BOOL v0 = (const void *)sub_1807455FC();
  CFStringRef v1 = v0;
  if (v0) {
    CFRetain(v0);
  }
  return v1;
}

BOOL sub_180758F78()
{
  return !sub_1807661A8("IODeviceTree:/product", @"/ej/HWmqnKV/QQptXhUZmg", 110);
}

uint64_t sub_180758FA8()
{
  return sub_18076E49C( (uint64_t)"IODeviceTree:/",  (uint64_t)@"M2qC9+75568xA1E3I+r+dg",  115LL,  (uint64_t)@"lFFadhW8h/hfpcu601hyqg",  104LL);
}

CFTypeRef sub_180758FCC()
{
  return sub_180765200(0, "IOSDIOIoCardDevice", @"IOSDIOProductInfo1");
}

CFStringRef sub_180758FE4()
{
  if (sub_180743444() == 3)
  {
    else {
      return @"iOS";
    }
  }

  if ((sub_180743444() == 1 || sub_180743444() == 2 || sub_180743444() == 3)
    && !sub_180743B80())
  {
    return @"iOS";
  }

  if (sub_180743444() == 4 || sub_180743444() == 7)
  {
    CFStringRef v1 = sub_18074776C((const char **)@"h63QSdBCiT/z0WU6rdQv6Q", 0LL);
    uint64_t v2 = CFLocaleCopyCurrent();
    CFTypeRef Value = CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x189604FE0]);
    if (v1 && CFEqual(v1, @"CH"))
    {
      BOOL v0 = @"Apple TVOS";
    }

    else
    {
      if (Value && CFEqual(Value, @"CH")) {
        BOOL v0 = @"Apple TVOS";
      }
      else {
        BOOL v0 = @"tvOS";
      }
      if (!v1) {
        goto LABEL_25;
      }
    }

    CFRelease(v1);
LABEL_25:
    if (v2) {
      CFRelease(v2);
    }
    return v0;
  }

  return (const __CFString *)sub_18074776C((const char **)@"ivIu8YTDnBSrYv/SN4G8Ag", 0LL);
}

uint64_t sub_180759188()
{
  uint64_t v0 = 1LL;
  if (!sub_1807651CC(1, "aop-smart-cover"))
  {
    uint64_t v0 = 0LL;
    if (sub_1807661A8("IODeviceTree:/buttons", @"function-button_halleffect", 0))
    {
      CFStringRef v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v1) {
        unint64_t v7 = v1 + 1;
      }
      else {
        unint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v7,  8170LL,  (uint64_t)@"HallEffectSensorCability true using function-button_halleffect",  v2,  v3,  v4,  v5,  v6,  v9[0]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "HallEffectSensorCability true using function-button_halleffect",  v9,  2u);
      }

      return 1LL;
    }
  }

  return v0;
}

const void *sub_180759254()
{
  return sub_180766414("IODeviceTree:/product", @"GvmsjQ/68T7do2CJxUhMig", 98);
}

BOOL sub_18075926C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"IAJzgzhEVk3SMNuEhChs2w", a2);
}

BOOL sub_180759290(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"IAJzgzhEVk3SMNuEhChs2w", 82, a2);
}

BOOL sub_1807592A4()
{
  return sub_1807661A8("IODeviceTree:/product", @"bhPjDx/0UDk9mzia6ksZ+A", 110);
}

CFDictionaryRef sub_1807592BC()
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  *(_DWORD *)buf = 0;
  else {
    int v0 = 0;
  }
  *(_DWORD *)buf = 0;
  else {
    int v1 = 0;
  }
  if (v0 < v1)
  {
    uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    uint64_t v8 = v2 ? v2 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v8, 4728LL, (uint64_t)@"%dx%d not in landscape mode", v3, v4, v5, v6, v7, v0);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v0;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v1;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "%dx%d not in landscape mode", buf, 0xEu);
    }
  }

  int v9 = @"4:3";
  if (v1)
  {
  }

  *(_OWORD *)buf = xmmword_1896F99C0;
  __int128 v14 = *(_OWORD *)&off_1896F99D0;
  __int128 v15 = xmmword_1896F99E0;
  values[0] = (void *)v9;
  values[1] = @"OFF";
  values[2] = @"ScaleToFit";
  values[3] = @"DisplayPort";
  uint64_t v10 = (void *)*MEMORY[0x189604DE0];
  values[4] = @"NTSC";
  values[5] = v10;
  return CFDictionaryCreate( 0LL,  (const void **)buf,  (const void **)values,  6LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
}

uint64_t sub_1807594AC()
{
  if (sub_180743444() == 6 || sub_180743A48((BOOL)@"H6") || sub_180743A48((BOOL)@"H5"))
  {
    uint64_t v0 = MEMORY[0x189604DE0];
  }

  else
  {
    BOOL v2 = sub_180743A48((BOOL)@"H4");
    uint64_t v0 = MEMORY[0x189604DE0];
    if (!v2) {
      uint64_t v0 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v0;
}

BOOL sub_18075951C()
{
}

CFNumberRef sub_180759564()
{
  return sub_180766200("IODeviceTree:/arm-io/aop/iop-aop-nub/als", @"SIC/2YcTF6ydv8Hfcn9THw", 97);
}

uint64_t sub_18075957C()
{
  int v1 = 0;
  LODWORD(result) = sub_180747E9C((const char **)@"ND6ZSbBBgMgwtMfh+OL5Wg", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0) {
    return result;
  }
  else {
    return 0LL;
  }
}

CFNumberRef sub_1807595C0()
{
  return sub_18074877C(@"screen-capture-width", (const char **)@"g7YQ1Djxh4YiKlEeaoGhzg");
}

BOOL sub_1807595D4()
{
  mach_port_t v0 = *MEMORY[0x1896086A8];
  int v1 = IOServiceMatching("AppleJPEGDriver");
  io_service_t MatchingService = IOServiceGetMatchingService(v0, v1);
  io_service_t v3 = MatchingService;
  if (MatchingService) {
    IOObjectRelease(MatchingService);
  }
  return v3 != 0;
}

BOOL sub_180759628()
{
  return !sub_1807661A8("IODeviceTree:/product", @"PTfO3r9syJ45k+OItTlD3Q", 117);
}

BOOL sub_180759654()
{
  return sub_1807661DC("IODeviceTree:/chosen", @"WbcphnnzI6Yb5r/AzwiyUA", 109);
}

CFStringRef sub_18075966C()
{
  uint64_t valuePtr = 0LL;
  mach_port_t v0 = (const __CFNumber *)sub_18074776C((const char **)@"TF31PAB6aO8KAbPyNKSxKA", 0LL);
  if (!v0) {
    return @"0000000000000000";
  }
  int v1 = v0;
  CFNumberGetValue(v0, kCFNumberLongLongType, &valuePtr);
  CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, @"%qu", valuePtr);
  CFRelease(v1);
  return v2;
}

BOOL sub_1807596F4(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"6WdGcQGw4VLzrgxJo+bcrw", a2);
}

BOOL sub_180759718(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"6WdGcQGw4VLzrgxJo+bcrw", 85, a2);
}

CFNumberRef sub_18075972C()
{
  return sub_180766200("IODeviceTree:/chosen", @"/l0Kz2akvSvEHTNmZeY0nQ", 99);
}

uint64_t sub_180759744()
{
  uint64_t v0 = *MEMORY[0x189604DE0];
  if (sub_1807661A8("IODeviceTree:/product", @"is-muse", 0))
  {
  }

  else
  {
    int v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1) {
      uint64_t v7 = v1 + 1;
    }
    else {
      uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v7, 8441LL, (uint64_t)@"muse not set on product node", v2, v3, v4, v5, v6, v9[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "muse not set on product node", v9, 2u);
    }
  }

  return v0;
}

CFNumberRef sub_180759834()
{
  int valuePtr = 0;
  uint64_t v0 = (const __CFDictionary *)sub_18074776C((const char **)@"NVRAMDictionary", 0LL);
  if (!v0)
  {
    __int128 v14 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v14, 6129LL, (uint64_t)@"Could not copy NVRAMDictionary", v15, v16, v17, v18, v19, v27[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not copy NVRAMDictionary",  buf,  2u);
    }

    return 0LL;
  }

  int v1 = v0;
  CFTypeRef Value = (const __CFNumber *)CFDictionaryGetValue(v0, @"IsServicePart");
  uint64_t v3 = Value;
  if (!Value)
  {
LABEL_23:
    int v12 = v1;
    goto LABEL_24;
  }

  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFDataGetTypeID())
  {
    if (v4 == CFStringGetTypeID())
    {
      int v9 = 0LL;
      goto LABEL_8;
    }

    if (v4 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr);
      __int128 v13 = (const __CFNumber **)MEMORY[0x189604DE8];
      if (valuePtr != 1) {
        __int128 v13 = (const __CFNumber **)MEMORY[0x189604DE0];
      }
      uint64_t v3 = *v13;
      goto LABEL_23;
    }

    goto LABEL_22;
  }

  uint64_t v5 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  BytePtr = CFDataGetBytePtr(v3);
  CFIndex Length = CFDataGetLength(v3);
  CFStringRef v8 = CFStringCreateWithBytes(v5, BytePtr, Length, 0x8000100u, 0);
  if (!v8)
  {
    uint64_t v20 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v20, 6140LL, (uint64_t)@"Could not create string", v21, v22, v23, v24, v25, v27[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      v27[0] = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not create string",  (uint8_t *)v27,  2u);
    }

BOOL sub_180759A70()
{
  return sub_1807661DC("IODeviceTree:/product", @"supports-lotx", 0);
}

CFTypeRef sub_180759A88()
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  return sub_180763F28((uint64_t)"copyDeviceSupportsTethering", (uint64_t)&unk_1896F9A10, TypeID);
}

const void *sub_180759AB0()
{
  if (sub_180743B80()) {
    uint64_t v0 = @"iOSSupportVersion";
  }
  else {
    uint64_t v0 = (const __CFString *)*MEMORY[0x189604B78];
  }
  return sub_18074313C(v0, 1);
}

CFStringRef sub_180759AE4()
{
  return sub_180766600(0, "IOPlatformExpertDevice", @"region-info");
}

BOOL sub_180759AFC()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"IvdL59ITgJvhb5ptpLbqRg", 114);
}

BOOL sub_180759B14()
{
  return !sub_1807442E4(@"KH");
}

uint64_t sub_180759B34()
{
  int v1 = 0;
  LODWORD(result) = sub_180747E9C((const char **)@"wOVK1nhmiAawowdbIwgyaQ", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 59) {
    return result;
  }
  else {
    return 0LL;
  }
}

const void *sub_180759B78()
{
  return sub_18074776C((const char **)@"HV7WDiidgMf7lwAu++Lk5w", 0LL);
}

CFNumberRef sub_180759B88()
{
  int valuePtr = 1065353216;
  return CFNumberCreate(0LL, kCFNumberFloatType, &valuePtr);
}

CFTypeRef sub_180759BD8()
{
  return sub_180765200(1, "rose", @"ECID");
}

BOOL sub_180759BF0(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"CPiqZJJPocpjc5C5qe1tiw", a2);
}

BOOL sub_180759C14(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"CPiqZJJPocpjc5C5qe1tiw", 65, a2);
}

BOOL sub_180759C28()
{
  BOOL v0 = !sub_1807661A8("IODeviceTree:/product/haptics", @"pre-warm-disabled", 0)
    || !sub_1807661DC("IODeviceTree:/product/haptics", @"pre-warm-disabled", 0);
  CFRelease(@"pre-warm-disabled");
  return v0;
}

uint64_t sub_180759CA4()
{
  BOOL v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 43);
  if (!v0) {
    BOOL v0 = (uint64_t (*)(void))sub_180746538(43LL, 2LL);
  }
  return v0();
}

CFStringRef sub_180759CD4()
{
  BOOL v0 = sub_180766600(0, "IOPlatformExpertDevice", @"IOPlatformSerialNumber");
  if (v0)
  {
    CFTypeRef v1 = v0;
    if (CFStringGetLength(v0)) {
      goto LABEL_14;
    }
    CFRelease(v1);
  }

  if (!MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ"))
  {
    CFTypeRef v1 = 0LL;
    goto LABEL_14;
  }

  CFDataRef v2 = sub_1807692D8(0x53724E6Du);
  uint64_t v3 = sub_180766460(v2, (uint64_t)@"SrNm");
  if (v3)
  {
    CFTypeID v4 = v3;
    if (CFStringGetLength(v3) < 1) {
      CFTypeRef v1 = 0LL;
    }
    else {
      CFTypeRef v1 = CFRetain(v4);
    }
    CFRelease(v4);
    if (v2) {
      goto LABEL_13;
    }
  }

  else
  {
    CFTypeRef v1 = 0LL;
    if (v2) {
LABEL_13:
    }
      CFRelease(v2);
  }

LABEL_14:
  if (v1) {
    return (const __CFString *)v1;
  }
  else {
    return &stru_1896FD058;
  }
}

    CFStringRef Copy = 0LL;
  }

  else
  {
    CFStringRef Copy = CFDictionaryCreateCopy(0LL, (CFDictionaryRef)cf);
    IOObjectRelease(v11);
  }

  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0LL;
  }

  return Copy;
}

BOOL sub_180759DB0(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"VasUgeSzVyHdB27g2XpN0g", a2);
}

BOOL sub_180759DD4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"VasUgeSzVyHdB27g2XpN0g", 83, a2);
}

CFNumberRef sub_180759DE8()
{
  return sub_18074877C(@"screen-capture-height", (const char **)@"OjzOua0LkOegX7pQdgMksw");
}

CFTypeRef sub_180759DFC()
{
  uint64_t v0 = *((void *)off_18C533F28 + 11);
  if (!v0) {
    uint64_t v0 = sub_180746538(11LL, 2LL);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  return sub_1807642E0((uint64_t)"_CTServerConnectionCopyFirmwareUpdateInfo", v0, TypeID);
}

uint64_t sub_180759E48()
{
  int v0 = sub_180743B9C();
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

__CFString *sub_180759E78()
{
  unsigned int v0 = sub_180743444() - 1;
  if (v0 < 0xC) {
    return off_1896F9C28[v0];
  }
  CFDataRef v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2) {
    CFStringRef v8 = v2 + 1;
  }
  else {
    CFStringRef v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v8, 2264LL, (uint64_t)@"Unknown DeviceClass", v3, v4, v5, v6, v7, v9);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT)) {
    sub_180799974();
  }
  return 0LL;
}

CFTypeRef sub_180759EFC()
{
  return sub_1807615E4(@"YonkersChipID");
}

BOOL sub_180759F08(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"2/q9qmqGigMfkzY830Zf2g", a2);
}

BOOL sub_180759F2C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"2/q9qmqGigMfkzY830Zf2g", 89, a2);
}

BOOL sub_180759F40()
{
  return !sub_1807661A8("IODeviceTree:/product", @"bbyFCcrPE+k6ZXIVbXSFUw", 117);
}

CFDictionaryRef sub_180759F6C()
{
  return sub_180766794(@"pref-encoding");
}

CFTypeRef sub_180759F78()
{
  uint64_t v0 = *((void *)off_18C533F28 + 9);
  if (!v0) {
    uint64_t v0 = sub_180746538(9LL, 2LL);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  return sub_1807642E0((uint64_t)"_CTServerConnectionCopyFirmwarePreflightInfo", v0, TypeID);
}

BOOL sub_180759FC4()
{
  return sub_1807661A8("IODeviceTree:/product", @"4+ntrbAfaq8rQKPfQo16CQ", 115);
}

uint64_t sub_180759FDC()
{
  return 0LL;
}

CFStringRef sub_180759FE4()
{
  return sub_1807665C0("IODeviceTree:/product", @"tAryHM5IUMkdtvVqqu1tcA", 97);
}

BOOL sub_180759FFC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"UCLOC2TKe3vRkId34ubKWw", a2);
}

BOOL sub_18075A020(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"UCLOC2TKe3vRkId34ubKWw", 65, a2);
}

uint64_t sub_18075A034()
{
  if (!sub_180743AF0((BOOL)@"H13")) {
    return 0LL;
  }
  if (sub_1807437FC((BOOL)@"t8103", 0)
    || sub_1807437FC((BOOL)@"t6000", 0)
    || sub_1807437FC((BOOL)@"t6001", 0))
  {
    return 1LL;
  }

  uint64_t v0 = 1LL;
  if (!sub_1807437FC((BOOL)@"t6002", 0))
  {
    if (sub_1807437FC((BOOL)@"t8110", 0)) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

  return v0;
}

uint64_t sub_18075A0DC()
{
  return sub_18076E49C( (uint64_t)"IODeviceTree:/arm-io",  (uint64_t)@"h0OUwg53vKp+IPdzLG4NrA",  109LL,  (uint64_t)@"aNZeCyuWxI6SE/KwZ129wA",  110LL);
}

uint64_t sub_18075A104()
{
  return 1LL;
}

CFDataRef sub_18075A10C()
{
  else {
    return 0LL;
  }
}

uint64_t sub_18075A154()
{
  return 0LL;
}

BOOL sub_18075A15C()
{
  return sub_1807661A8("IODeviceTree:/product", @"hRBbURJnULvXsPGk42A8Ng", 115);
}

BOOL sub_18075A174()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"9RreaA6rTvewPbqQy5ldRg", 102);
}

BOOL sub_18075A18C()
{
  return sub_180743444() != 4;
}

CFDataRef sub_18075A1A8()
{
  CFDataRef result = (CFDataRef)sub_180766414("IODeviceTree:/chosen", @"mac-address-wifi0", 0);
  if (!result)
  {
    CFDataRef result = (CFDataRef)sub_1807654D8("sdio");
    if (!result)
    {
      CFDataRef result = (CFDataRef)sub_1807654D8("wlan");
      if (!result)
      {
        CFDataRef result = (CFDataRef)sub_1807654D8("marconi-wifi");
        if (!result)
        {
          if ((sub_1807463A0() & 1) != 0) {
            return sub_1807697E8(0x574D6163u);
          }
          CFDataRef result = (CFDataRef)sub_1807654EC();
          if (!result) {
            return sub_1807697E8(0x574D6163u);
          }
        }
      }
    }
  }

  return result;
}

BOOL sub_18075A238(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"eZS2J+wspyGxqNYZeZ/sbA", a2);
}

BOOL sub_18075A25C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"eZS2J+wspyGxqNYZeZ/sbA", 87, a2);
}

BOOL sub_18075A270()
{
  return sub_1807661DC("IODeviceTree:/backlight", @"ZcPQWuQwUJtMR5Oj99uc8w", 115);
}

__CFArray *sub_18075A288()
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v0 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
  if (!Mutable) {
    return Mutable;
  }
  CFDataRef v2 = (const __CFData *)sub_180766414("IODeviceTree:/product", @"strict-wake-vendor-id", 0);
  uint64_t v3 = v2;
  if (!v2)
  {
    LODWORD(v5) = 0;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    WORD2(valuePtr) = 0;
    uint64_t v6 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v7 = "kIODeviceTreePlane :/product strict-wake-vendor-id not found";
    goto LABEL_9;
  }

  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 == CFDataGetTypeID())
  {
    unint64_t v5 = (unint64_t)(int)CFDataGetLength(v3) >> 2;
    goto LABEL_10;
  }

  LODWORD(v5) = 0;
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    WORD2(valuePtr) = 0;
    uint64_t v6 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v7 = "Unexpected type at kIODeviceTreePlane :/product strict-wake-vendor-id";
LABEL_9:
    _os_log_impl(&dword_180741000, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&valuePtr + 4, 2u);
    LODWORD(v5) = 0;
  }

LABEL_10:
  CFStringRef v8 = (const __CFData *)sub_180766414("IODeviceTree:/product", @"strict-wake-product-id", 0);
  char v9 = v8;
  if (!v8)
  {
    LODWORD(v11) = 0;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    WORD2(valuePtr) = 0;
    int v12 = (os_log_s *)MEMORY[0x1895F8DA0];
    __int128 v13 = "kIODeviceTreePlane :/product strict-wake-product-id not found";
LABEL_17:
    _os_log_impl(&dword_180741000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&valuePtr + 4, 2u);
    LODWORD(v11) = 0;
    goto LABEL_18;
  }

  CFTypeID v10 = CFGetTypeID(v8);
  if (v10 != CFDataGetTypeID())
  {
    LODWORD(v11) = 0;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    WORD2(valuePtr) = 0;
    int v12 = (os_log_s *)MEMORY[0x1895F8DA0];
    __int128 v13 = "Unexpected type at kIODeviceTreePlane :/product strict-wake-product-id";
    goto LABEL_17;
  }

  unint64_t v11 = (unint64_t)(int)CFDataGetLength(v9) >> 2;
LABEL_18:
  if ((_DWORD)v5 == (_DWORD)v11)
  {
    if ((int)v5 >= 1)
    {
      CFIndex v14 = 0LL;
      uint64_t v15 = 4LL * v5;
      uint64_t v16 = (os_log_s *)MEMORY[0x1895F8DA0];
      do
      {
        *(void *)buffer = 0LL;
        v29.CFIndex location = v14;
        v29.length = 4LL;
        CFDataGetBytes(v9, v29, &buffer[4]);
        v30.CFIndex location = v14;
        v30.length = 4LL;
        CFDataGetBytes(v3, v30, buffer);
        uint64_t valuePtr = *(void *)buffer;
        CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(v0, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        if (v17)
        {
          uint64_t v18 = v17;
          CFNumberRef v19 = CFNumberCreate(0LL, kCFNumberSInt32Type, (char *)&valuePtr + 4);
          if (v19)
          {
            CFDictionaryAddValue(v18, @"productID", v19);
          }

          else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl(&dword_180741000, v16, OS_LOG_TYPE_DEFAULT, "Failed to create product CF Number", v23, 2u);
          }

          CFNumberRef v20 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
          if (v20)
          {
            CFDictionaryAddValue(v18, @"vendorID", v20);
          }

          else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl(&dword_180741000, v16, OS_LOG_TYPE_DEFAULT, "Failed to create vendor CF Number", v23, 2u);
          }

          CFArrayAppendValue(Mutable, v18);
          CFRelease(v18);
          if (v20) {
            CFRelease(v20);
          }
          if (v19) {
            CFRelease(v19);
          }
        }

        else
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl(&dword_180741000, v16, OS_LOG_TYPE_DEFAULT, "Failed to create the pair dictionary", v23, 2u);
          }

          CFArrayAppendValue(Mutable, 0LL);
        }

        v14 += 4LL;
      }

      while (v15 != v14);
    }
  }

  else if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    HIDWORD(valuePtr) = 67109376;
    int v25 = v5;
    __int16 v26 = 1024;
    int v27 = v11;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Array length mismatch! Vendor length %d vs Product length %d",  (uint8_t *)&valuePtr + 4,  0xEu);
  }

  if (v3) {
    CFRelease(v3);
  }
  if (v9) {
    CFRelease(v9);
  }
  return Mutable;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  return v2;
}

  unint64_t v5 = 0LL;
  do
  {
    uint64_t v6 = *v3++;
    unint64_t v5 = v6 | (v5 << 8);
    --v2;
  }

  while (v2);
  CFDataRef result = 0LL;
  *a2 = v5;
  return result;
}

  CFMutableDictionaryRef v17 = v11 >> 3;
  CFDataRef result = sub_18079730C(&v17, *((unint64_t *)&v15 + 1), (unsigned __int8 *)v15, v9, v10);
  if (!(_DWORD)result)
  {
    if (sub_180794A54) {
      __int128 v13 = byte_1807A4720 == 0LL;
    }
    else {
      __int128 v13 = 1;
    }
    if (v13)
    {
      LOBYTE(v14) = 0;
      CFDataRef result = sub_180794860( &v17,  a2,  *(void *)(a3 + 8),  *(char **)a3,  *(void *)(a4 + 8),  *(unsigned __int8 **)a4,  &v14);
      if (!(_DWORD)result && (_BYTE)v14) {
        return 0LL;
      }
    }

    else
    {
      CFDataRef result = sub_180794A54( &v17,  a2,  *(void *)(a3 + 8),  *(char **)a3,  *(void *)(a4 + 8),  *(unsigned __int8 **)a4,  v19);
      if (!(_DWORD)result)
      {
        sub_1807918E8(16LL, byte_1807A4720, (char *)v19);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_18075A6F4()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/product", (uint64_t)@"6S9CvPHPtzHQqKudHSfsag", 104LL);
}

uint64_t sub_18075A70C()
{
  return 1LL;
}

BOOL sub_18075A714()
{
  return sub_1807661A8("IODeviceTree:/product", @"QY61T8CLLwG/yu92ScTYtw", 115);
}

CFStringRef sub_18075A72C()
{
  CFStringRef result = sub_180766600(0, "AppleHapticsSupportArcEEPROM", @"ArcSerialNumber");
  if (!result)
  {
    CFStringRef result = sub_180766600(0, "AppleAD5860", @"arc-sn");
    if (!result) {
      return sub_1807665C0("IODeviceTree:/product", @"arc-module-serial-num", 0);
    }
  }

  return result;
}

BOOL sub_18075A78C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"KzUQgIyBRinkweVMNUCOWA", a2);
}

BOOL sub_18075A7B0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"KzUQgIyBRinkweVMNUCOWA", 65, a2);
}

BOOL sub_18075A7C4()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"2v9hQi8xVAKZZVCMd/YhjQ", 115);
}

CFNumberRef sub_18075A7DC()
{
  return sub_180766200("IODeviceTree:/product/camera", @"86GizkmSK+IxgCtUMOp2NA", 102);
}

CFTypeRef sub_18075A7F4()
{
  uint64_t v0 = *((void *)off_18C533F28 + 5);
  if (!v0) {
    uint64_t v0 = sub_180746538(5LL, 2LL);
  }
  CFTypeID TypeID = CFArrayGetTypeID();
  return sub_1807642E0((uint64_t)"_CTServerConnectionCopyCarrierBundleInfoArray", v0, TypeID);
}

BOOL sub_18075A840(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"475wW3fne+tyzGr4wleUSQ", a2);
}

BOOL sub_18075A864(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"475wW3fne+tyzGr4wleUSQ", 67, a2);
}

uint64_t sub_18075A878()
{
  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1) {
    return sub_180743444() == 2;
  }
  return result;
}

CFStringRef sub_18075A8A0()
{
  return sub_1807665C0("IODeviceTree:/", @"FQHZ8VqG8mVzDQ+g085l8w", 116);
}

CFTypeRef sub_18075A8B8()
{
  return sub_180760A48(@"FrontIRStructuredLightProjectorSerialNumString");
}

BOOL sub_18075A8C4(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"wH7fRq4TDdYG2pN1KDQW/A", a2);
}

BOOL sub_18075A8E8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"wH7fRq4TDdYG2pN1KDQW/A", 70, a2);
}

uint64_t sub_18075A8FC()
{
  return sub_180769530(0x456E4D74u);
}

CFStringRef sub_18075A908()
{
  uint64_t v0 = (const __CFData *)sub_18074776C((const char **)@"5Y72WwdS5NYHdc00gEZ/DQ", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_18075AA24(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"WAfNjeiwOd/k6+VU6D6SIQ", a2);
}

BOOL sub_18075AA48(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"WAfNjeiwOd/k6+VU6D6SIQ", 69, a2);
}

CFStringRef sub_18075AA5C()
{
  return sub_1807665C0("IODeviceTree:/chosen", @"0jjK6IVSQzA8doQeSwmujA", 115);
}

CFTypeRef sub_18075AA74()
{
  return sub_180760A48(@"BackSuperWideCameraModuleSerialNumString");
}

BOOL sub_18075AA80(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"UZfUiD1Aqy3GOwg72SQcLQ", a2);
}

BOOL sub_18075AAA4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"UZfUiD1Aqy3GOwg72SQcLQ", 82, a2);
}

BOOL sub_18075AAB8()
{
  return sub_1807661A8("IODeviceTree:/product", @"CzGP5+8jQECJMH4h+z4TYA", 111);
}

CFNumberRef sub_18075AAD0()
{
  return sub_1807627D4(0);
}

BOOL sub_18075AAD8()
{
  return sub_1807661DC("IODeviceTree:/product", @"Lrs7l5cKWJ1Gk5ZzgMAKyQ", 115);
}

uint64_t sub_18075AAF0()
{
  return 0LL;
}

BOOL sub_18075AAF8()
{
  return sub_1807661A8("IODeviceTree:/arm-io/i2c0/audio0", @"KWr9OM2iqeLQEhaHS0UshQ", 97);
}

uint64_t sub_18075AB10()
{
  return sub_1807620F4("DisplayPort");
}

BOOL sub_18075AB1C()
{
  return sub_1807661A8("IODeviceTree:/product", @"fb+1apeTeouqt+fo3nZ6sg", 117);
}

uint64_t sub_18075AB34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  int v12 = -1157300313;
  __int128 v11 = xmmword_1807A2304;
  int v10 = -2132668294;
  __int128 v9 = xmmword_1807A2318;
  return MGIsDeviceOneOfType((const UInt8 *)&v11, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v9);
}

BOOL sub_18075AC50()
{
  return sub_1807661DC("IODeviceTree:/backlight", @"/wG6EG34fRtAsZoLk/8YIw", 115);
}

BOOL sub_18075AC68()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"dbYxhQWXkJhjp8uPhoMDvw", 112);
}

CFNumberRef sub_18075AC80()
{
  return sub_180766200("IODeviceTree:/product/camera", @"Lu6Mgo1O0+EoGMk1OtnMRg", 114);
}

uint64_t sub_18075AC98()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 6)
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -526227167;
    __int128 v10 = xmmword_1807A255C;
    int v7 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v8 = MEMORY[0x189604DE8];
    if (!v7) {
      uint64_t v8 = MEMORY[0x189604DE0];
    }
  }

  else
  {
    uint64_t v8 = MEMORY[0x189604DE0];
  }

  return *(void *)v8;
}

CFNumberRef sub_18075AD58()
{
  if (!sub_180743A48((BOOL)@"H6")
    && !sub_180743A48((BOOL)@"H8")
    && !sub_180743A48((BOOL)@"H5")
    && !sub_180743A48((BOOL)@"H7")
    && !sub_180743A48((BOOL)@"H9")
    && sub_180743444() != 4
    && sub_180743444() != 6)
  {
    sub_180743A48((BOOL)@"H4");
  }

  int valuePtr = 1065353216;
  return CFNumberCreate(0LL, kCFNumberFloatType, &valuePtr);
}

BOOL sub_18075ADFC()
{
  return sub_1807661DC("IODeviceTree:/backlight", @"ldJQht23DQY8SUXKJhUvPw", 117);
}

CFDataRef sub_18075AE14()
{
  CFDataRef result = (CFDataRef)sub_180766414("IODeviceTree:/chosen", @"mac-address-ethernet0", 0);
  if (!result)
  {
    CFDataRef result = (CFDataRef)sub_1807654D8("ethernet");
    if (!result) {
      return sub_1807697E8(0x454D6163u);
    }
  }

  return result;
}

BOOL sub_18075AE60(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"aOq/O8u9f/bpWUnKco+xgA", a2);
}

BOOL sub_18075AE84(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"aOq/O8u9f/bpWUnKco+xgA", 69, a2);
}

CFTypeRef sub_18075AE98()
{
  return sub_1807645D4(4LL, 1, 0LL);
}

BOOL sub_18075AEA8(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"inECTnNyR97XWxm7jU8uqA", a2);
}

BOOL sub_18075AECC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"inECTnNyR97XWxm7jU8uqA", 77, a2);
}

CFTypeRef sub_18075AEE0()
{
  return sub_1807615E4(@"YonkersUID");
}

BOOL sub_18075AEEC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"bwLsbkp4shhHuNB5VpRa8w", a2);
}

BOOL sub_18075AF10(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"bwLsbkp4shhHuNB5VpRa8w", 89, a2);
}

BOOL sub_18075AF28()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"HdWhWK8BN8j/O9k8/OHblQ", 115);
}

uint64_t sub_18075AF40()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 7
    || sub_180743444() == 4
    || sub_180743444() == 3
    || sub_180743444() == 2
    || sub_180743444() == 1
    || sub_180743444() == 11
    || sub_180743444() == 8)
  {
    uint64_t v7 = MEMORY[0x189604DE0];
  }

  else
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -526227167;
    __int128 v10 = xmmword_1807A255C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x189604DE0];
    if (!v9) {
      uint64_t v7 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v7;
}

const void *sub_18075B048()
{
  return sub_180766414("IODeviceTree:/", @"b/k0ZT2f/WGV2qJSyPJHoQ", 99);
}

BOOL sub_18075B060(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"SmUPjD77AHIMCLny9nawdw", a2);
}

BOOL sub_18075B084(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"SmUPjD77AHIMCLny9nawdw", 67, a2);
}

BOOL sub_18075B098()
{
  return sub_1807654A4(1, "sgx", @"procedural-antialiasing");
}

CFStringRef sub_18075B0B0()
{
  return @"Non-Mac";
}

BOOL sub_18075B0BC()
{
  return sub_1807661A8("IODeviceTree:/product", @"bxQyyA/qJ3QQXTiHBsW2eg", 111);
}

BOOL sub_18075B0D4()
{
  return sub_1807661A8("IODeviceTree:/product", @"xgs6iXf0KFHUJ9d4FKaRYg", 115);
}

uint64_t sub_18075B0EC()
{
  return sub_18076E49C( (uint64_t)"IODeviceTree:",  (uint64_t)@"RaX3KBmG7H9fUOEtLK/I6w",  115LL,  (uint64_t)@"XyppJjhSQE2982ZYgXlh2g",  115LL);
}

CFNumberRef sub_18075B110()
{
  int v9 = 0;
  int valuePtr = -1;
  uint64_t v0 = (const __CFData *)sub_180766414("IODeviceTree:/chosen", @"marketing-software-behavior", 0);
  if (!v0) {
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt32Type, &v9);
  }
  uint64_t v1 = v0;
  BytePtr = CFDataGetBytePtr(v0);
  if (BytePtr && (v3 = BytePtr, CFTypeID v4 = CFGetTypeID(v1), v4 == CFDataGetTypeID()) && CFDataGetLength(v1) >= 4)
  {
    int v5 = v3[3];
    int valuePtr = v5;
    uint64_t v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt32Type, &valuePtr);
    if (v7) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  }

  CFNumberRef v7 = CFNumberCreate(v6, kCFNumberSInt32Type, &v9);
LABEL_11:
  CFRelease(v1);
  return v7;
}

BOOL sub_18075B21C()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"0gkWjKWKuS2gqzTaFHKxqw", 115);
}

uint64_t sub_18075B234()
{
  else {
    return 20LL;
  }
}

CFDictionaryRef sub_18075B258()
{
  return sub_180766794(@"pref-decoding");
}

uint64_t sub_18075B264()
{
  BOOL v0 = sub_1807661A8("IODeviceTree:/product/camera", @"auto-focus", 0);
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

CFTypeRef sub_18075B2A8()
{
  return sub_180765200(0, "IOPMPowerSource", @"Serial");
}

BOOL sub_18075B2C0(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"DcQNvnO5Uhpc1jjGIrzyng", a2);
}

BOOL sub_18075B2E4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"DcQNvnO5Uhpc1jjGIrzyng", 66, a2);
}

uint64_t sub_18075B2F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  int v58 = 1602014129;
  __int128 v57 = xmmword_1807A20AC;
  int v56 = -810116762;
  __int128 v55 = xmmword_1807A20C0;
  int v54 = -1195351767;
  __int128 v53 = xmmword_1807A20D4;
  int v52 = 1789837692;
  __int128 v51 = xmmword_1807A1FF8;
  int v50 = -1239654590;
  __int128 v49 = xmmword_1807A2020;
  int v48 = -1579092758;
  __int128 v47 = xmmword_1807A2048;
  int v46 = 48355600;
  __int128 v45 = xmmword_1807A200C;
  int v44 = -679691073;
  __int128 v43 = xmmword_1807A2034;
  int v42 = 1430379884;
  __int128 v41 = xmmword_1807A205C;
  int v40 = -38605833;
  __int128 v39 = xmmword_1807A20E8;
  int v38 = -894965712;
  __int128 v37 = xmmword_1807A20FC;
  int v36 = -2101636455;
  __int128 v35 = xmmword_1807A2110;
  int v34 = -1955568593;
  __int128 v33 = xmmword_1807A2124;
  int v32 = 28030256;
  __int128 v31 = xmmword_1807A2138;
  int v30 = 1214363620;
  __int128 v29 = xmmword_1807A214C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v39, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v37))
  {
LABEL_7:
    uint64_t v22 = MEMORY[0x189604DE0];
  }

  else
  {
    int v28 = -926344036;
    __int128 v27 = xmmword_1807A2070;
    int v26 = -954998212;
    __int128 v25 = xmmword_1807A2084;
    int v24 = MGIsDeviceOneOfType((const UInt8 *)&v27, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v25);
    uint64_t v22 = MEMORY[0x189604DE0];
    if (!v24) {
      uint64_t v22 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v22;
}

BOOL sub_18075B618()
{
  return sub_1807661A8("IODeviceTree:/arm-io/aop2", @"hh/NoWpEoq1VF4lGDdPUpw", 114);
}

CFStringRef sub_18075B630()
{
  BOOL v0 = (const __CFData *)sub_18074776C((const char **)@"HzddeW2/HtdBNAc5tsFtDg", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    CFNumberRef v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_18075B74C(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"8bOgXKgqoLvqV/XeSomAfA", a2);
}

BOOL sub_18075B770(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"8bOgXKgqoLvqV/XeSomAfA", 83, a2);
}

const void *sub_18075B784()
{
  return sub_18074776C((const char **)@"H97G3GzDYb4wY5kwJ0AKfQ", 0LL);
}

BOOL sub_18075B794()
{
  return stat("/System/Library/PrivateFrameworks/Sharing.framework", &v1) == 0;
}

__CFDictionary *sub_18075B7C4()
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable)
  {
    int v40 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v40) {
      int v46 = v40 + 1;
    }
    else {
      int v46 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v46,  8276LL,  (uint64_t)@"Allocation failed for IOSurface dictionary.",  v41,  v42,  v43,  v44,  v45,  v58);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return Mutable;
    }
    __int16 v60 = 0;
    __int128 v47 = (os_log_s *)MEMORY[0x1895F8DA0];
    int v48 = "Allocation failed for IOSurface dictionary.";
    __int128 v49 = (uint8_t *)&v60;
LABEL_36:
    _os_log_impl(&dword_180741000, v47, OS_LOG_TYPE_DEFAULT, v48, v49, 2u);
    return Mutable;
  }

  CFStringRef v1 = sub_1807436EC();
  if (!v1)
  {
    int v50 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v50) {
      int v56 = v50 + 1;
    }
    else {
      int v56 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v56,  8282LL,  (uint64_t)@"Failed to get current SOC Generation string",  v51,  v52,  v53,  v54,  v55,  v58);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return Mutable;
    }
    *(_WORD *)buf = 0;
    __int128 v47 = (os_log_s *)MEMORY[0x1895F8DA0];
    int v48 = "Failed to get current SOC Generation string";
    __int128 v49 = buf;
    goto LABEL_36;
  }

  CFStringRef v8 = v1;
  uint64_t v9 = (const void *)*MEMORY[0x189604DE0];
  BOOL v10 = sub_180743BA4((BOOL)v1, @"H10", v2, v3, v4, v5, v6, v7, (uint64_t)@"H11");
  uint64_t v11 = (const void *)*MEMORY[0x189604DE8];
  if (v10) {
    uint64_t v12 = (const void *)*MEMORY[0x189604DE8];
  }
  else {
    uint64_t v12 = v9;
  }
  CFDictionaryAddValue(Mutable, @"media-compression", v12);
  else {
    uint64_t v19 = v9;
  }
  CFDictionaryAddValue(Mutable, @"buffer-compression", v19);
  if (sub_180743BA4((BOOL)v8, @"H12", v20, v21, v22, v23, v24, v25, (uint64_t)@"H11")
    || (int v26 = sub_1807463A0(), v27 = v11, v26))
  {
    __int128 v27 = v9;
  }

  CFDictionaryAddValue(Mutable, @"universal-buffer-compression", v27);
  if (sub_180743BA4((BOOL)v8, @"H13", v28, v29, v30, v31, v32, v33, (uint64_t)@"H12")
    || (int v34 = sub_1807463A0(), v35 = v11, v34))
  {
    __int128 v35 = v9;
  }

  CFDictionaryAddValue(Mutable, @"universal-lossy-buffer-compression", v35);
  BOOL v36 = sub_180743AF0((BOOL)@"H15");
  if (sub_180743AF0((BOOL)@"M11") || v36) {
    __int128 v37 = v11;
  }
  else {
    __int128 v37 = v9;
  }
  CFDictionaryAddValue(Mutable, @"universal-multislice-buffer-compression", v37);
  BOOL v38 = sub_180743AF0((BOOL)@"H16");
  __int128 v39 = v9;
  if (v38)
  {
    if (sub_1807437FC((BOOL)@"t8130", 0)) {
      __int128 v39 = v9;
    }
    else {
      __int128 v39 = v11;
    }
  }

  CFDictionaryAddValue(Mutable, @"universal-pARGB10101010-buffer-compression", v39);
  if (sub_180743AF0((BOOL)@"H17") && !sub_1807437FC((BOOL)@"t8140", 0)) {
    uint64_t v9 = v11;
  }
  CFDictionaryAddValue(Mutable, @"universal-buffer-compression-requires-plane-alignment-2048", v9);
  CFRelease(v8);
  return Mutable;
}

CFStringRef sub_18075BBBC()
{
  else {
    return sub_180766600(1, "baseband", @"device-imei");
  }
}

BOOL sub_18075BBFC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"QZgogo2DypSAZfkRW4dP/A", a2);
}

BOOL sub_18075BC20(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"QZgogo2DypSAZfkRW4dP/A", 73, a2);
}

BOOL sub_18075BC34()
{
  if (sub_1807654A4(1, "vibrator", @"name")) {
    return 1LL;
  }
  if (sub_1807654A4(1, "audio-actuator*", @"name")) {
    return 1LL;
  }
  BOOL result = sub_1807654A4(1, "maggie-arc", @"name");
  if (result) {
    return 1LL;
  }
  return result;
}

CFDataRef sub_18075BCAC()
{
  if (sub_180761D30(@"volume-down-button-location", 0, v1)) {
    return CFDataCreate(0LL, (const UInt8 *)v1, 32LL);
  }
  else {
    return 0LL;
  }
}

BOOL sub_18075BCF4()
{
  return sub_180763128(@"APPLE2") || sub_180763128(@"MTL2,2");
}

const void *sub_18075BD28()
{
  return sub_180766414("IODeviceTree:/chosen", @"/2V8H9h/+z0UxNUr9aRLeQ", 98);
}

BOOL sub_18075BD40()
{
  return sub_180743444() == 1;
}

BOOL sub_18075BD5C()
{
  BOOL result = MGGetBoolAnswer((const char **)@"BWoQXWXYITrPRpFyc9xTLw");
  if (result) {
    return sub_180743444() == 3
  }
        || sub_180743444() == 4
        || sub_180743444() == 1;
  return result;
}

const char *sub_18075BDA8()
{
  BOOL result = (const char *)sub_1807665C0("IODeviceTree:/product", @"thinning-product-type", 0);
  if (!result) {
    return sub_18075846C();
  }
  return result;
}

BOOL sub_18075BDDC()
{
  return sub_1807661A8("IODeviceTree:/product", @"W5kTfIuxkKpHVdWTk42C9A", 110);
}

uint64_t sub_18075BDF4()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/", (uint64_t)@"JOlwW/P8Cw3CDCoFunq8og", 112LL);
}

CFStringRef sub_18075BE0C()
{
  return sub_1807665C0("IODeviceTree:/product", @"mobiledevice-min-ver", 0);
}

BOOL sub_18075BE24()
{
  BOOL v0 = sub_18074BC04();
  if (!v0) {
    return MGGetBoolAnswer((const char **)@"Oji6HRoPi7rH7HPdWVakuw");
  }
  uint64_t v7 = v0;
  BOOL v8 = sub_180743BA4((BOOL)v0, @"Internal", v1, v2, v3, v4, v5, v6, (uint64_t)@"Lite Internal");
  uint64_t v15 = v8 | sub_180743BA4((BOOL)@"Internal", v7, v9, v10, v11, v12, v13, v14, 0LL);
  CFRelease(v7);
  return v15;
}

CFNumberRef sub_18075BEC0()
{
  return sub_180766200("IODeviceTree:/product/facetime", @"RrhB72r1de9N65EG4pgqJw", 116);
}

BOOL sub_18075BED8()
{
  return sub_1807661DC("IODeviceTree:/product", @"+q5wYk81dLM2qjufnC0phw", 115);
}

uint64_t sub_18075BEF0()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t result = MGGetBoolAnswer((const char **)@"magnetometer");
  if ((_DWORD)result)
  {
    int v11 = -1742178852;
    __int128 v10 = xmmword_1807A1F58;
    int v9 = 2146530832;
    __int128 v8 = xmmword_1807A1F6C;
    return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
  }

  return result;
}

uint64_t sub_18075BFE8()
{
  return 0LL;
}

BOOL sub_18075BFF0()
{
  return sub_1807661DC("IODeviceTree:/chosen", @"GO5/TJivIXtQkTkFWkRc9A", 99);
}

BOOL sub_18075C008()
{
  return sub_1807661A8("IODeviceTree:/", @"P1djMN/L3B6otgGpO9WYkw", 115);
}

CFStringRef sub_18075C020()
{
  BOOL v0 = NXGetLocalArchInfo();
  if (v0 && v0->name) {
    return CFStringCreateWithCString(0LL, v0->name, 0x8000100u);
  }
  unint64_t v2 = sub_180744658();
  return CFStringCreateWithFormat(0LL, 0LL, @"%d-%d", v2, HIDWORD(v2));
}

CFStringRef sub_18075C080()
{
  return sub_1807665C0("IODeviceTree:/product", @"e+pTfaabi1k1kfdk2vl1Kw", 108);
}

BOOL sub_18075C098(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"2xSqkUxsVWmOBWk6StVOfQ", a2);
}

BOOL sub_18075C0BC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"2xSqkUxsVWmOBWk6StVOfQ", 76, a2);
}

CFStringRef sub_18075C0D0()
{
  BOOL v0 = (const __CFData *)sub_18074776C((const char **)@"yF2IQrYS4yyREV4ZkbLysw", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_18075C1EC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"W/xqvBX9L07XHb0BOtYycQ", a2);
}

BOOL sub_18075C210(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"W/xqvBX9L07XHb0BOtYycQ", 84, a2);
}

uint64_t sub_18075C224()
{
  else {
    return sub_180743F0C("/var/mobile/Library/Preferences/com.apple.MobileGestalt.plist", @"EnableStark", 0LL);
  }
}

uint64_t sub_18075C264()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 4
    || sub_180743444() == 1
    || sub_180743444() == 3
    || sub_180743444() == 2
    || sub_180743444() == 7
    || sub_180743444() == 11)
  {
    uint64_t v7 = MEMORY[0x189604DE0];
  }

  else
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -526227167;
    __int128 v10 = xmmword_1807A255C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x189604DE0];
    if (!v9) {
      uint64_t v7 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v7;
}

CFDataRef sub_18075C3F0()
{
  return sub_1807692D8(0x53414745u);
}

uint64_t sub_18075C3FC()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/", (uint64_t)@"N6PmkZnK1VRMvFokb0jS/Q", 102LL);
}

BOOL sub_18075C414()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"rt/G6Vk3NTGWs5N9WEjztQ", 102);
}

CFStringRef sub_18075C42C()
{
  return sub_1807665C0("IODeviceTree:/", @"model-number", 0);
}

uint64_t sub_18075C444()
{
  return 1LL;
}

CFTypeRef sub_18075C450()
{
  return sub_180765200(1, "compass", @"compass-calibration");
}

BOOL sub_18075C468(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"qb//mYg6KeTmjv8w4ZAMIg", a2);
}

BOOL sub_18075C48C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"qb//mYg6KeTmjv8w4ZAMIg", 67, a2);
}

CFTypeRef sub_18075C4A0()
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  return sub_180763F28((uint64_t)"copyWiFiCallingCapability", (uint64_t)&unk_1896F9A50, TypeID);
}

CFTypeRef sub_18075C4C8()
{
  return sub_180765200(1, "baseband", @"region-sku");
}

uint64_t sub_18075C4E0()
{
  int v1 = 0;
  LODWORD(result) = sub_180747E9C((const char **)@"ErupMbaQrM6KypD4K0kTDQ", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 >= 196608) {
    return result;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18075C524()
{
  return 1LL;
}

CFTypeRef sub_18075C52C()
{
  return sub_180764878(2LL, 0, 0LL);
}

CFNumberRef sub_18075C53C()
{
  return sub_180766200("IODeviceTree:/product/camera", @"LMvmpCFM38ZaFeEy4r7nNQ", 99);
}

CFDataRef sub_18075C554()
{
  if (sub_180761D30(@"volume-up-button-location", 0, v1)) {
    return CFDataCreate(0LL, (const UInt8 *)v1, 32LL);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18075C59C()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v0 = IOPSGetPercentRemaining();
  if (v0)
  {
    int v1 = v0;
    uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v2) {
      unsigned int v8 = v2 + 1;
    }
    else {
      unsigned int v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v8, 4193LL, (uint64_t)@"Failed to get battery level with error %03X", v3, v4, v5, v6, v7, v1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v11 = v1;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to get battery level with error %03X",  buf,  8u);
    }
  }

  return 101LL;
}

uint64_t sub_18075C688()
{
  return sub_180769530(0x436C4247u);
}

CFNumberRef sub_18075C694()
{
  uint64_t valuePtr = 0LL;
  int v0 = (const __CFDictionary *)sub_18076E07C((uint64_t)@"avd", (uint64_t)@"AppleARMIODevice");
  if (v0)
  {
    int v1 = v0;
    if (CFDictionaryGetValueIfPresent(v0, @"decode-samples-per-second", &cf))
    {
      CFTypeID v2 = CFGetTypeID(cf);
      if (v2 == CFDataGetTypeID())
      {
        uint64_t v3 = *(int *)CFDataGetBytePtr((CFDataRef)cf);
        if ((_DWORD)v3) {
          uint64_t valuePtr = v3 << 16;
        }
      }
    }

    CFRelease(v1);
  }

  return CFNumberCreate(0LL, kCFNumberSInt64Type, &valuePtr);
}

BOOL sub_18075C730()
{
  return sub_1807661DC("IODeviceTree:/product/camera", @"g7yZjVHqRxbfXOqns+Sm9w", 102);
}

uint64_t sub_18075C748()
{
  return *MEMORY[0x189604DE8];
}

uint64_t sub_18075C758()
{
  return sub_180744658();
}

uint64_t sub_18075C76C()
{
  return *MEMORY[0x189604DE8];
}

uint64_t sub_18075C77C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v102 = *MEMORY[0x1895F89C0];
  int v101 = -798153473;
  __int128 v100 = xmmword_1807A1FA8;
  int v99 = -776721724;
  __int128 v98 = xmmword_1807A1FBC;
  int v97 = -1639077591;
  __int128 v96 = xmmword_1807A1FD0;
  int v95 = 338555555;
  __int128 v94 = xmmword_1807A1FE4;
  int v93 = 1789837692;
  __int128 v92 = xmmword_1807A1FF8;
  int v91 = 48355600;
  __int128 v90 = xmmword_1807A200C;
  int v89 = -1239654590;
  __int128 v88 = xmmword_1807A2020;
  int v87 = -679691073;
  __int128 v86 = xmmword_1807A2034;
  int v85 = -1579092758;
  __int128 v84 = xmmword_1807A2048;
  int v83 = 1430379884;
  __int128 v82 = xmmword_1807A205C;
  int v81 = -926344036;
  __int128 v80 = xmmword_1807A2070;
  int v79 = -954998212;
  __int128 v78 = xmmword_1807A2084;
  int v77 = 436612651;
  __int128 v76 = xmmword_1807A2098;
  int v75 = 1602014129;
  __int128 v74 = xmmword_1807A20AC;
  int v73 = -810116762;
  __int128 v72 = xmmword_1807A20C0;
  int v71 = -1195351767;
  __int128 v70 = xmmword_1807A20D4;
  int v69 = -199226823;
  __int128 v68 = xmmword_1807A278C;
  int v67 = 1412427398;
  __int128 v66 = xmmword_1807A27A0;
  int v65 = -1283070668;
  __int128 v64 = xmmword_1807A2778;
  int v63 = 160260070;
  __int128 v62 = xmmword_1807A27B4;
  int v61 = -38605833;
  __int128 v60 = xmmword_1807A20E8;
  int v59 = -894965712;
  __int128 v58 = xmmword_1807A20FC;
  int v57 = -2101636455;
  __int128 v56 = xmmword_1807A2110;
  int v55 = -1955568593;
  __int128 v54 = xmmword_1807A2124;
  int v53 = 28030256;
  __int128 v52 = xmmword_1807A2138;
  int v51 = 1214363620;
  __int128 v50 = xmmword_1807A214C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v60, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v58))
  {
LABEL_9:
    uint64_t v43 = MEMORY[0x189604DE0];
  }

  else
  {
    int v49 = 1032708406;
    __int128 v48 = xmmword_1807A2160;
    int v47 = 729903963;
    __int128 v46 = xmmword_1807A2174;
    int v45 = MGIsDeviceOneOfType((const UInt8 *)&v48, v36, v37, v38, v39, v40, v41, v42, (uint64_t)&v46);
    uint64_t v43 = MEMORY[0x189604DE0];
    if (!v45) {
      uint64_t v43 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v43;
}

CFNumberRef sub_18075CC40()
{
  return sub_180766200("IODeviceTree:/arm-io/aop/iop-aop-nub/als", @"uNNFSosc1xQM/7bwlrqLXA", 109);
}

uint64_t sub_18075CC58()
{
  int v0 = (uint64_t (*)(const __CFString *))*((void *)off_18C533F28 + 90);
  if (!v0) {
    int v0 = (uint64_t (*)(const __CFString *))sub_180746538(90LL, 2LL);
  }
  return v0(@"SupportedKeyboards");
}

uint64_t sub_18075CC90()
{
  return 0LL;
}

BOOL sub_18075CCA8()
{
  return sub_180743444() != 4;
}

uint64_t sub_18075CCC4()
{
  return sub_18076E49C( (uint64_t)"IODeviceTree:/arm-io",  (uint64_t)@"4k6Wv56SWfITjzet+hIHMQ",  109LL,  (uint64_t)@"3uw7204ET4Vk1Cl4iJiNqQ",  116LL);
}

BOOL sub_18075CCE8()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"RR4G+l3k5mfFFr6Igw88kQ", 97);
}

uint64_t sub_18075CD00()
{
  int v0 = sub_180743B9C();
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

CFStringRef sub_18075CD30()
{
  return sub_1807665C0("IODeviceTree:/product", @"dW6ROVcD3o5ACa4jvALJ6A", 100);
}

CFMutableDictionaryRef sub_18075CD48()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  uint64_t v1 = IOServiceNameMatching("compass");
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = sub_1807632A8;
  v3[3] = &unk_1896F9A70;
  v3[4] = Mutable;
  sub_180764FD0(v1, (uint64_t)v3);
  return Mutable;
}

BOOL sub_18075CDD0(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"aoAKcHLuTUp/o3squcJkhA", a2);
}

BOOL sub_18075CDF4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"aoAKcHLuTUp/o3squcJkhA", 67, a2);
}

BOOL sub_18075CE08()
{
  return !sub_1807661A8("IODeviceTree:/product/maps", @"pxqIJ789zCoOILWO6cQ52Q", 110);
}

BOOL sub_18075CE38(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"nZUUCFZgomfWUIPGGzNAqg", a2);
}

BOOL sub_18075CE5C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"nZUUCFZgomfWUIPGGzNAqg", 83, a2);
}

CFNumberRef sub_18075CE70()
{
  return sub_180766200("IODeviceTree:/product/camera", @"D6PT05dEJ0f9Ayk7Yi92RA", 102);
}

BOOL sub_18075CE88()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"PT6XKHaOkrxhQTpTVI8Rlw", 115);
}

BOOL sub_18075CEA0()
{
  return sub_1807661A8("IODeviceTree:/product", @"supports-meteor", 0)
      || MGGetBoolAnswer((const char **)@"noqTy5fUbyK03UHxWigBBQ");
}

float sub_18075CEE0()
{
  float valuePtr = 0.0;
  int v0 = (const __CFNumber *)CFPreferencesCopyAppValue( @"RequiredBatteryLevelForSoftwareUpdate",  (CFStringRef)*MEMORY[0x189605188]);
  if (!v0) {
    return 0.5;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFNumberGetTypeID() || !CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr)) {
    float valuePtr = 0.5;
  }
  CFRelease(v1);
  return valuePtr;
}

uint64_t sub_18075CF68()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/", (uint64_t)@"aL9+NE29t3Wm2lEAE+atZQ", 118LL);
}

uint64_t sub_18075CF80()
{
  int v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 39);
  if (!v0) {
    int v0 = (uint64_t (*)(void))sub_180746538(39LL, 2LL);
  }
  return v0();
}

uint64_t sub_18075CFAC()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  BOOL v0 = sub_180743A48((BOOL)@"H4");
  uint64_t v8 = MEMORY[0x189604DE0];
  if (!v0)
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -526227167;
    __int128 v10 = xmmword_1807A255C;
  }

  return *(void *)v8;
}

uint64_t sub_18075D0B0()
{
  return sub_18076E59C( (uint64_t)"IODeviceTree:/arm-io",  (uint64_t)@"RaX3KBmG7H9fUOEtLK/I6w",  115LL,  (uint64_t)@"aNFMPe3XMOjAHDzk1h0eeA",  101LL);
}

uint64_t sub_18075D0D4()
{
  int v0 = sub_180743B9C();
  uint64_t v1 = MEMORY[0x189604DE8];
  if (!v0) {
    uint64_t v1 = MEMORY[0x189604DE0];
  }
  return *(void *)v1;
}

uint64_t sub_18075D104()
{
  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1) {
    return sub_180743444() == 6 || sub_180743444() == 2;
  }
  return result;
}

CFDataRef sub_18075D140()
{
  if (sub_180761D30(@"camera-button-location", 1, v1)) {
    return CFDataCreate(0LL, (const UInt8 *)v1, 32LL);
  }
  else {
    return 0LL;
  }
}

const void *sub_18075D188()
{
  return sub_180764340((unint64_t)@"CertID", (unint64_t)@"GoldCertID");
}

CFNumberRef sub_18075D19C()
{
  return sub_1807450C4(5u);
}

CFStringRef sub_18075D1A4()
{
  return sub_180766600(0, "IOPlatformExpertDevice", @"mlb-serial-number");
}

BOOL sub_18075D1BC(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"Q1Ty5w8gxMWHx3p4lQ1fhA", a2);
}

BOOL sub_18075D1E0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"Q1Ty5w8gxMWHx3p4lQ1fhA", 77, a2);
}

uint64_t sub_18075D1F4()
{
  int v0 = (const __CFData *)sub_180766414("IODeviceTree:/product", @"cover-glass", 0);
  if (v0)
  {
    uint64_t v1 = v0;
    if (CFDataGetLength(v0) == 8)
    {
      BytePtr = CFDataGetBytePtr(v1);
      if (BytePtr)
      {
        uint64_t v3 = *((unsigned int *)BytePtr + 1);
        uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        __int128 v10 = v4 ? v4 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v10, 5426LL, (uint64_t)@"Invlid glass type", v5, v6, v7, v8, v9, v36);
        uint64_t v3 = 0LL;
        if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
        __int16 v36 = 0;
        int v11 = (os_log_s *)MEMORY[0x1895F8DA0];
        __int128 v12 = "Invlid glass type";
        int v13 = (uint8_t *)&v36;
      }

      else
      {
        uint64_t v28 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v28) {
          uint64_t v34 = v28 + 1;
        }
        else {
          uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v34, 5419LL, (uint64_t)@"CFDataGetBytePtr", v29, v30, v31, v32, v33, v36);
        uint64_t v3 = 0LL;
        if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
        *(_WORD *)uint64_t v37 = 0;
        int v11 = (os_log_s *)MEMORY[0x1895F8DA0];
        __int128 v12 = "CFDataGetBytePtr";
        int v13 = v37;
      }
    }

    else
    {
      uint64_t v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v21) {
        uint64_t v27 = v21 + 1;
      }
      else {
        uint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v27, 5413LL, (uint64_t)@"I/O Invalid data returned", v22, v23, v24, v25, v26, v36);
      uint64_t v3 = 0LL;
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_26;
      }
      __int16 v38 = 0;
      int v11 = (os_log_s *)MEMORY[0x1895F8DA0];
      __int128 v12 = "I/O Invalid data returned";
      int v13 = (uint8_t *)&v38;
    }

    _os_log_impl(&dword_180741000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
    uint64_t v3 = 0LL;
LABEL_26:
    CFRelease(v1);
    return v3;
  }

  uint64_t v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v14) {
    uint64_t v20 = v14 + 1;
  }
  else {
    uint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v20, 5408LL, (uint64_t)@"copyDataFromDeviceTree failed", v15, v16, v17, v18, v19, v36);
  uint64_t v3 = 0LL;
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "copyDataFromDeviceTree failed", buf, 2u);
    return 0LL;
  }

  return v3;
}

CFStringRef sub_18075D420()
{
  uint64_t v1 = (const __CFData *)sub_180765DB4("IODeviceTree:/product", @"product-name", 0);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 == CFDataGetTypeID() && CFDataGetLength(v2) >= 1)
  {
    BytePtr = (const char *)CFDataGetBytePtr(v2);
    CFStringRef v5 = CFStringCreateWithCString(0LL, BytePtr, 0x8000100u);
  }

  else
  {
    CFStringRef v5 = 0LL;
  }

  CFRelease(v2);
  return v5;
}

CFTypeRef sub_18075D4DC()
{
  return sub_180760A48(@"BackTeleCameraModuleSerialNumString");
}

BOOL sub_18075D4E8(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"cm399FbDqnv8IOFoeBLWYg", a2);
}

BOOL sub_18075D50C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"cm399FbDqnv8IOFoeBLWYg", 82, a2);
}

__CFDictionary *sub_18075D520()
{
  int v0 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  if (Mutable)
  {
    int valuePtr = 32401;
    int v32 = 2;
    int v30 = 0;
    CFStringRef v2 = sub_18075DE24();
    if (dyld_get_active_platform() == 6)
    {
      CFStringRef v3 = sub_18075D420();
      CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
      CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberIntType, &v32);
      CFNumberRef v6 = CFNumberCreate(0LL, kCFNumberIntType, &v30);
      if (v3)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceProductDescription", v3);
        CFRelease(v3);
      }

      CFDictionaryAddValue(Mutable, @"ArtworkDeviceIdiom", @"pad");
      CFRelease(@"pad");
      if (v4)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceSubType", v4);
        CFRelease(v4);
      }

      if (v5)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceScaleFactor", v5);
        CFRelease(v5);
      }

      if (v2)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDisplayGamut", v2);
        CFRelease(v2);
      }

      CFDictionaryAddValue(Mutable, @"ArtworkDynamicDisplayMode", @"0");
      CFRelease(@"0");
      if (v6)
      {
        CFDictionaryAddValue(Mutable, @"DevicePerformanceMemoryClass", v6);
        CFRelease(v6);
      }

      CFDictionaryAddValue(Mutable, @"GraphicsFeatureSetClass", @"APPLE4");
      CFRelease(@"APPLE4");
      CFDictionaryAddValue( Mutable,  @"GraphicsFeatureSetFallbacks",  @"APPLE3:APPLE3v1:APPLE2:APPLE1:GLES2,0");
      CFRelease(@"APPLE3:APPLE3v1:APPLE2:APPLE1:GLES2,0");
      CFDictionaryAddValue(Mutable, @"CompatibleDeviceFallback", @"0");
      uint64_t v7 = @"0";
    }

    else
    {
      uint64_t v29 = v0;
      CFStringRef v15 = sub_1807665C0("IODeviceTree:/product", @"product-description", 0);
      CFStringRef v16 = sub_1807665C0("IODeviceTree:/product", @"artwork-device-idiom", 0);
      CFNumberRef v17 = sub_180766200("IODeviceTree:/product", @"artwork-device-subtype", 0);
      CFNumberRef v18 = sub_180766200("IODeviceTree:/product", @"artwork-scale-factor", 0);
      CFStringRef v19 = sub_1807665C0("IODeviceTree:/product", @"artwork-dynamic-displaymode", 0);
      CFNumberRef v20 = sub_180766200("IODeviceTree:/product", @"device-perf-memory-class", 0);
      CFStringRef valuea = sub_1807665C0("IODeviceTree:/product", @"graphics-featureset-class", 0);
      CFStringRef v21 = sub_1807665C0("IODeviceTree:/product", @"graphics-featureset-fallbacks", 0);
      CFStringRef v22 = sub_1807665C0("IODeviceTree:/product", @"compatible-device-fallback", 0);
      if (v15)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceProductDescription", v15);
        CFRelease(v15);
      }

      if (v16)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceIdiom", v16);
        CFRelease(v16);
      }

      if (v17)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceSubType", v17);
        CFRelease(v17);
      }

      if (v18)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceScaleFactor", v18);
        CFRelease(v18);
      }

      if (v2)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDisplayGamut", v2);
        CFRelease(v2);
      }

      if (v19)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDynamicDisplayMode", v19);
        CFRelease(v19);
      }

      if (v20)
      {
        CFDictionaryAddValue(Mutable, @"DevicePerformanceMemoryClass", v20);
        CFRelease(v20);
      }

      if (valuea)
      {
        CFDictionaryAddValue(Mutable, @"GraphicsFeatureSetClass", valuea);
        CFRelease(valuea);
      }

      int v0 = v29;
      if (v21)
      {
        CFDictionaryAddValue(Mutable, @"GraphicsFeatureSetFallbacks", v21);
        CFRelease(v21);
      }

      if (!v22) {
        goto LABEL_40;
      }
      CFDictionaryAddValue(Mutable, @"CompatibleDeviceFallback", v22);
      uint64_t v7 = v22;
    }

    CFRelease(v7);
LABEL_40:
    if (!CFDictionaryGetValue(Mutable, @"ArtworkDeviceScaleFactor"))
    {
      *(_DWORD *)buf = -1082130432;
      BOOL v23 = sub_180747E9C((const char **)@"SNfDJgQFV2Xj7+WnozcJPw", 7, 7, kCFNumberFloat32Type, buf);
      float v24 = *(float *)buf;
      if (!v23) {
        float v24 = -1.0;
      }
      *(float *)buf = v24;
      CFNumberRef v25 = CFNumberCreate(v0, kCFNumberFloatType, buf);
      CFDictionarySetValue(Mutable, @"ArtworkDeviceScaleFactor", v25);
      if (v25) {
        CFRelease(v25);
      }
    }

    return Mutable;
  }

  uint64_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v8) {
    uint64_t v14 = v8 + 1;
  }
  else {
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v14, 5781LL, (uint64_t)@"Failed to create dictionary", v9, v10, v11, v12, v13, value);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Failed to create dictionary", buf, 2u);
  }

  return Mutable;
}

BOOL sub_18075DA6C()
{
  return !sub_1807661A8("IODeviceTree:/product", @"lR7sjp4tOz3cMWoEMlZrLA", 117);
}

BOOL sub_18075DA98()
{
  return sub_1807661DC("IODeviceTree:/product/camera", @"OCKVZEIuMz4sxhLz7vmQ5w", 115);
}

CFNumberRef sub_18075DAB0()
{
  return sub_180766200("IODeviceTree:/product/haptics", @"Mif7940cFpfaXIAHwkYgHQ", 112);
}

BOOL sub_18075DAC8()
{
  int v0 = sub_180766200("IODeviceTree:/chosen", @"development-cert", 0);
  int valuePtr = 0;
  if (!v0) {
    return 1LL;
  }
  uint64_t v1 = v0;
  CFNumberGetValue(v0, kCFNumberIntType, &valuePtr);
  CFRelease(v1);
  return valuePtr == 0;
}

BOOL sub_18075DB34()
{
  return sub_1807661A8("IODeviceTree:/buttons", @"sad18VQX7AeS+291aKhJlw", 102);
}

CFNumberRef sub_18075DB4C()
{
  return sub_180766200("IODeviceTree:/product/facetime", @"7ot70MKj7EdRIEEi91jlcg", 98);
}

BOOL sub_18075DB64()
{
  return sub_1807661DC("IODeviceTree:/chosen", @"lMKshPs7fX9YxDSOEXnoiw", 101);
}

CFNumberRef sub_18075DB7C()
{
  return sub_180766200("IODeviceTree:/product/camera", @"I83EgnDEGxinSKU4QAykmA", 114);
}

BOOL sub_18075DB94()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"vQg8hRTy1PC2j9L+8Jd+vg", 115);
}

const void *sub_18075DBAC()
{
  return sub_18074776C((const char **)@"IMLaTlxS7ITtwfbRfPYWuA", 0LL);
}

BOOL sub_18075DBBC()
{
  return sub_18076E0EC((uint64_t)@"isp", @"camera-front");
}

uint64_t sub_18075DBD0()
{
  int v1 = 0;
  LODWORD(result) = sub_180747E9C((const char **)@"61xs1bQ+9eTk8tlRvG9UKw", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0) {
    return result;
  }
  else {
    return 0LL;
  }
}

BOOL sub_18075DC14()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"EJRyIpTkLz2+Lb6XWy10bQ", 112);
}

uint64_t sub_18075DC2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  int v58 = -414334491;
  __int128 v57 = xmmword_1807A2548;
  int v56 = -1509831889;
  __int128 v55 = xmmword_1807A2570;
  int v54 = 289690957;
  __int128 v53 = xmmword_1807A2188;
  int v52 = 586720268;
  __int128 v51 = xmmword_1807A219C;
  int v50 = 368885834;
  __int128 v49 = xmmword_1807A2534;
  int v48 = -526227167;
  __int128 v47 = xmmword_1807A255C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v49, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v47)
    || (int v46 = -2092955395,
        __int128 v45 = xmmword_1807A21B0,
        int v44 = 674998600,
        __int128 v43 = xmmword_1807A21C4,
        MGIsDeviceOneOfType((const UInt8 *)&v45, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v43)))
  {
LABEL_6:
    uint64_t v36 = MEMORY[0x189604DE0];
  }

  else
  {
    int v42 = 1711910369;
    __int128 v41 = xmmword_1807A21D8;
    int v40 = -1282800328;
    __int128 v39 = xmmword_1807A21EC;
    int v38 = MGIsDeviceOneOfType((const UInt8 *)&v41, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v39);
    uint64_t v36 = MEMORY[0x189604DE0];
    if (!v38) {
      uint64_t v36 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v36;
}

CFStringRef sub_18075DE24()
{
  int active_platform = dyld_get_active_platform();
  CFStringRef result = @"P3";
  if (active_platform != 6)
  {
    CFStringRef result = sub_1807665C0("IODeviceTree:/product", @"artwork-display-gamut", 0);
    if (!result)
    {
      else {
        return 0LL;
      }
    }
  }

  return result;
}

BOOL sub_18075DE80()
{
  return stat("/System/Library/PrivateFrameworks/Sharing.framework", &v1) == 0;
}

uint64_t sub_18075DEB0()
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 1)
  {
    int v59 = 414393924;
    __int128 v58 = xmmword_1807A26B0;
    int v57 = 897736383;
    __int128 v56 = xmmword_1807A26C4;
    int v55 = -996295886;
    __int128 v54 = xmmword_1807A26D8;
    int v53 = -453987047;
    __int128 v52 = xmmword_1807A26EC;
    int v51 = -337121064;
    __int128 v50 = xmmword_1807A2700;
    int v49 = 450980336;
    __int128 v48 = xmmword_1807A2714;
    int v47 = -232427879;
    __int128 v46 = xmmword_1807A2764;
    int v45 = -427474227;
    __int128 v44 = xmmword_1807A273C;
    int v43 = 1477534141;
    __int128 v42 = xmmword_1807A2750;
    int v41 = -1843102369;
    __int128 v40 = xmmword_1807A2728;
    int v39 = -820493242;
    __int128 v38 = xmmword_1807A2200;
    int v37 = -61007701;
    __int128 v36 = xmmword_1807A2214;
    int v35 = -235416490;
    __int128 v34 = xmmword_1807A2228;
    int v33 = -121925081;
    __int128 v32 = xmmword_1807A223C;
    int v31 = 1071957977;
    __int128 v30 = xmmword_1807A2250;
    int v29 = 438437663;
    __int128 v28 = xmmword_1807A2264;
    int v27 = -382792827;
    __int128 v26 = xmmword_1807A2278;
    int v25 = 1575123478;
    __int128 v24 = xmmword_1807A228C;
    int v23 = 123138233;
    __int128 v22 = xmmword_1807A22A0;
    int v21 = 681511593;
    __int128 v20 = xmmword_1807A22B4;
    int v19 = 713503427;
    __int128 v18 = xmmword_1807A22C8;
    int v17 = -1632750650;
    __int128 v16 = xmmword_1807A22DC;
    int v15 = -1431778695;
    __int128 v14 = xmmword_1807A22F0;
    uint64_t v7 = &v56;
    uint64_t v8 = &v58;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }

  if (sub_180743444() == 3)
  {
    int v13 = -1527788847;
    __int128 v12 = xmmword_1807A2804;
    int v11 = 1532898719;
    __int128 v10 = xmmword_1807A27F0;
    uint64_t v7 = &v10;
    uint64_t v8 = &v12;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }

  return 0LL;
}

CFTypeRef sub_18075E8D8()
{
  return sub_180764B1C(1LL);
}

BOOL sub_18075E8E0(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"SZy8T5ma/+a0wJc0ntiaaA", a2);
}

BOOL sub_18075E904(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"SZy8T5ma/+a0wJc0ntiaaA", 80, a2);
}

__CFDictionary *sub_18075E918()
{
  uint64_t v0 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  for (uint64_t i = 0LL; i != 8; ++i)
  {
    uint64_t v3 = off_1896F9A90[i];
    CFStringRef v4 = sub_1807665C0("IODeviceTree:/options", v3, 0);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = CFNumberFormatterCreate(v0, 0LL, kCFNumberFormatterNoStyle);
      CFNumberRef NumberFromString = CFNumberFormatterCreateNumberFromString(v0, v6, v5, 0LL, 1uLL);
      if (NumberFromString)
      {
        CFNumberRef v8 = NumberFromString;
        CFDictionarySetValue(Mutable, v3, NumberFromString);
        CFRelease(v8);
      }

      CFRelease(v6);
      CFRelease(v5);
    }
  }

  return Mutable;
}

uint64_t sub_18075EA1C()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 7)
  {
    uint64_t v7 = MEMORY[0x189604DE0];
  }

  else
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -526227167;
    __int128 v10 = xmmword_1807A255C;
    int v8 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x189604DE0];
    if (!v8) {
      uint64_t v7 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v7;
}

BOOL sub_18075EADC()
{
  return sub_1807661A8("IODeviceTree:/product", @"SLu4aVo/V1CulJ7eyTDh1w", 101);
}

BOOL sub_18075EAF4()
{
  return sub_18076E394((uint64_t)@"twodbl", 0LL);
}

BOOL sub_18075EB04()
{
  return sub_1807661DC("IODeviceTree:/product", @"4OThI5F+/uP2oXUpdDxGnw", 115);
}

CFNumberRef sub_18075EB1C()
{
  return sub_180766200("IODeviceTree:/product/camera", @"knoZzQDWpu6OQWS7wgRWLg", 114);
}

uint64_t sub_18075EB34()
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_180743444() == 4
    || sub_180743444() == 1
    || sub_180743444() == 3
    || sub_180743444() == 2
    || sub_180743444() == 7
    || sub_180743444() == 11)
  {
    uint64_t v7 = MEMORY[0x189604DE0];
  }

  else
  {
    int v13 = 368885834;
    __int128 v12 = xmmword_1807A2534;
    int v11 = -526227167;
    __int128 v10 = xmmword_1807A255C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x189604DE0];
    if (!v9) {
      uint64_t v7 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v7;
}

uint64_t sub_18075EC30()
{
  uint64_t v0 = *MEMORY[0x189604DE0];
  uint64_t v1 = sub_180759E78();
  if (v1)
  {
    uint64_t v2 = v1;
    if (!CFEqual(v1, @"Watch") && sub_180743A48((BOOL)@"H4")) {
      uint64_t v0 = *MEMORY[0x189604DE8];
    }
    CFRelease(v2);
  }

  return v0;
}

BOOL sub_18075EC9C()
{
  return sub_1807661A8("IODeviceTree:/product", @"1oUugT++JJx5gOVyB2la7w", 115);
}

BOOL sub_18075ECB4()
{
  return sub_1807661A8("IODeviceTree:/product/camera", @"flgGiGu1dR1hEWcC1cTLTw", 114);
}

uint64_t sub_18075ECCC()
{
  if (sub_180743B9C() || MGGetBoolAnswer((const char **)@"OysterCapability"))
  {
    uint64_t v0 = MEMORY[0x189604DE8];
  }

  else
  {
    uint64_t v2 = sub_18074F760();
    if (v2)
    {
      uint64_t v3 = v2;
      int valuePtr = -1;
      if (CFNumberGetValue(v2, kCFNumberSInt32Type, &valuePtr)) {
        BOOL v4 = valuePtr == 2;
      }
      else {
        BOOL v4 = 0;
      }
      char v5 = v4;
      CFRelease(v3);
      uint64_t v0 = MEMORY[0x189604DE8];
      if ((v5 & 1) == 0) {
        uint64_t v0 = MEMORY[0x189604DE0];
      }
    }

    else
    {
      uint64_t v0 = MEMORY[0x189604DE0];
    }
  }

  return *(void *)v0;
}

BOOL sub_18075ED70()
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  int v14 = 0;
  size_t v13 = 4LL;
  if (sysctlbyname("hw.cpu64bit_capable", &v14, &v13, 0LL, 0LL) != -1) {
    return v14 != 0;
  }
  uint64_t v1 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2) {
    uint64_t v1 = v2 + 1;
  }
  uint64_t v3 = __error();
  char v4 = strerror(*v3);
  _MGLog((uint64_t)v1, 1393LL, (uint64_t)@"sysctlbyname: %s", v5, v6, v7, v8, v9, v4);
  BOOL v10 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
  BOOL result = 0LL;
  if (v10)
  {
    int v11 = __error();
    __int128 v12 = strerror(*v11);
    *(_DWORD *)buf = 136315138;
    __int128 v16 = v12;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "sysctlbyname: %s", buf, 0xCu);
    return 0LL;
  }

  return result;
}

const void *sub_18075EEA0()
{
  return sub_180766414("IODeviceTree:/chosen", @"jJ+5tnncQBcHo5T26MI5jA", 100);
}

CFStringRef sub_18075EEB8()
{
  uint64_t v0 = (const __CFData *)sub_18074776C((const char **)@"IAJzgzhEVk3SMNuEhChs2w", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_18075EFD4(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"uAIY4Jb2A7Fy2aLrlDU1gg", a2);
}

BOOL sub_18075EFF8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"uAIY4Jb2A7Fy2aLrlDU1gg", 82, a2);
}

uint64_t sub_18075F00C()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 38);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_180746538(38LL, 2LL);
  }
  return v0();
}

uint64_t sub_18075F038()
{
  if (sub_180743444() == 6
    || sub_180743A48((BOOL)@"H6")
    || sub_180743A48((BOOL)@"H5")
    || sub_180743A48((BOOL)@"H7"))
  {
    uint64_t v0 = MEMORY[0x189604DE0];
  }

  else
  {
    BOOL v2 = sub_180743A48((BOOL)@"H4");
    uint64_t v0 = MEMORY[0x189604DE0];
    if (!v2) {
      uint64_t v0 = MEMORY[0x189604DE8];
    }
  }

  return *(void *)v0;
}

CFMutableDictionaryRef sub_18075F0B8()
{
  kern_return_t v2;
  mach_error_t v3;
  const char *v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char v21;
  CFMutableDictionaryRef properties;
  uint8_t buf[4];
  char *v24;
  uint64_t v25;
  int v25 = *MEMORY[0x1895F89C0];
  properties = 0LL;
  io_registry_entry_t v0 = IORegistryEntryFromPath(*MEMORY[0x1896086A8], "IODeviceTree:/options");
  if (v0)
  {
    io_object_t v1 = v0;
    BOOL v2 = IORegistryEntryCreateCFProperties(v0, &properties, (CFAllocatorRef)*MEMORY[0x189604DB0], 0);
    if (v2)
    {
      uint64_t v3 = v2;
      char v4 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v5) {
        char v4 = v5 + 1;
      }
      CFIndex v6 = mach_error_string(v3);
      _MGLog( (uint64_t)v4,  8001LL,  (uint64_t)@"IORegistryEntryCreateCFProperties failed %s",  v7,  v8,  v9,  v10,  v11,  v6);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        __int128 v12 = mach_error_string(v3);
        *(_DWORD *)buf = 136315138;
        __int128 v24 = v12;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "IORegistryEntryCreateCFProperties failed %s",  buf,  0xCu);
      }
    }

    IOObjectRelease(v1);
    return properties;
  }

  else
  {
    int v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v14) {
      __int128 v20 = v14 + 1;
    }
    else {
      __int128 v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v20,  8005LL,  (uint64_t)@"IORegistryEntryFromPath(IODeviceTree:/options) failed",  v15,  v16,  v17,  v18,  v19,  v21);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "IORegistryEntryFromPath(IODeviceTree:/options) failed",  buf,  2u);
    }

    return 0LL;
  }

uint64_t sub_18075F260()
{
  int v0 = sub_180743444();
  uint64_t v1 = MEMORY[0x189604DE0];
  return *(void *)v1;
}

BOOL sub_18075F2A4()
{
  return sub_180746094((uint64_t)@"NoPasscodeLocationTiles", @"RegionalBehaviorNoPasscodeLocationTiles");
}

CFTypeRef sub_18075F2B8()
{
  if (!MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg"))
  {
    uint64_t v7 = (CFTypeRef *)*((void *)off_18C533F28 + 65);
    if (!v7) {
      uint64_t v7 = (CFTypeRef *)sub_180746538(65LL, 1LL);
    }
    CFTypeRef v6 = *v7;
    if (*v7)
    {
      CFRetain(*v7);
      return v6;
    }

    int v11 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v11, 4852LL, (uint64_t)@"no Postponement status available", v12, v13, v14, v15, v16, v38);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v38 = 0;
      uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
      __int128 v18 = "no Postponement status available";
      int v19 = (uint8_t *)&v38;
LABEL_28:
      _os_log_impl(&dword_180741000, v17, OS_LOG_TYPE_DEFAULT, v18, v19, 2u);
    }

    return 0LL;
  }

  int v42 = -1;
  if (sub_180747E9C((const char **)@"XQBHOWjPt2P+uNqlLm1P7A", 5, 5, kCFNumberSInt32Type, &v42) && v42 >= 2)
  {
    uint64_t v0 = *((void *)off_18C533F28 + 16);
    if (!v0) {
      uint64_t v0 = sub_180746538(16LL, 2LL);
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    BOOL v2 = (const __CFDictionary *)sub_1807642E0((uint64_t)"_CTServerConnectionCopyPostponementStatus", v0, TypeID);
    if (v2)
    {
      uint64_t v3 = v2;
      char v4 = (const void **)*((void *)off_18C533F28 + 64);
      if (!v4) {
        char v4 = (const void **)sub_180746538(64LL, 1LL);
      }
      CFTypeRef Value = CFDictionaryGetValue(v3, *v4);
      CFTypeRef v6 = Value;
      if (Value)
      {
        CFRetain(Value);
      }

      else
      {
        __int128 v26 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
        _MGLog((uint64_t)v26, 4840LL, (uint64_t)@"No status in postponement info", v27, v28, v29, v30, v31, v38);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "No status in postponement info",  buf,  2u);
        }
      }

      CFRelease(v3);
      return v6;
    }

    __int128 v20 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog( (uint64_t)v20,  4836LL,  (uint64_t)@"_CTServerConnectionCopyPostponementStatus returned NULL",  v21,  v22,  v23,  v24,  v25,  v38);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v41 = 0;
      uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
      __int128 v18 = "_CTServerConnectionCopyPostponementStatus returned NULL";
      int v19 = (uint8_t *)&v41;
      goto LABEL_28;
    }

    return 0LL;
  }

  uint64_t v8 = *((void *)off_18C533F28 + 22);
  if (!v8) {
    uint64_t v8 = sub_180746538(22LL, 2LL);
  }
  CFTypeID v9 = CFStringGetTypeID();
  CFTypeRef v6 = sub_1807642E0((uint64_t)"_CTServerConnectionGetSIMStatus", v8, v9);
  if (!v6)
  {
    __int128 v32 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v32, 4846LL, (uint64_t)@"no sim status available", v33, v34, v35, v36, v37, v38);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v39 = 0;
      uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
      __int128 v18 = "no sim status available";
      int v19 = v39;
      goto LABEL_28;
    }

    return 0LL;
  }

  return v6;
}

CFStringRef sub_18075F57C()
{
  uint64_t v0 = (const __CFData *)sub_18074776C((const char **)@"lU5WxNTusw4lrrBSEBiZeQ", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_18075F698(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"AGrtXj3nqzz8KFfFHK7/sA", a2);
}

BOOL sub_18075F6BC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"AGrtXj3nqzz8KFfFHK7/sA", 84, a2);
}

const void *sub_18075F6D0()
{
  return sub_18074776C((const char **)@"MTa8c+pEdbK0tHGXP06xOw", 0LL);
}

CFTypeRef sub_18075F6E0()
{
  uint64_t v0 = (const __CFString *)sub_18074776C((const char **)@"zHeENZu+wbg7PUprwNwBWg", 0LL);
  if (v0)
  {
    uint64_t v1 = v0;
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings( (CFAllocatorRef)*MEMORY[0x189604DB0],  v0,  @"/");
    if (ArrayBySeparatingStrings)
    {
      uint64_t v3 = ArrayBySeparatingStrings;
      if (CFArrayGetCount(ArrayBySeparatingStrings) < 2)
      {
        CFTypeRef v5 = 0LL;
      }

      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, 0LL);
        CFTypeRef v5 = CFRetain(ValueAtIndex);
      }

      CFRelease(v3);
    }

    else
    {
      CFTypeRef v5 = 0LL;
    }

    CFRelease(v1);
  }

  else
  {
    CFIndex v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v6) {
      uint64_t v12 = v6 + 1;
    }
    else {
      uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v12, 2115LL, (uint64_t)@"Could not retrieve region info", v7, v8, v9, v10, v11, v14[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not retrieve region info",  v14,  2u);
    }

    return 0LL;
  }

  return v5;
}

BOOL sub_18075F7FC()
{
  return sub_1807661DC("IODeviceTree:/product/camera", @"OJTdSHEAfpOvV6m6o+Ou1w", 109);
}

BOOL sub_18075F814()
{
  return sub_180762B50(2);
}

CFStringRef sub_18075F81C()
{
  uint64_t v0 = (const __CFData *)sub_18074776C((const char **)@"TqrlqJOZiAuRx8Qu3SVr+Q", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_18075F938(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"7VoVaBmSuokzovhUkiDx6Q", a2);
}

BOOL sub_18075F95C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"7VoVaBmSuokzovhUkiDx6Q", 83, a2);
}

uint64_t sub_18075F970()
{
  return sub_18076E6A4(0LL, (uint64_t)@"wlan", 0LL, (uint64_t)@"FirmwareVersion", 0LL);
}

uint64_t sub_18075F990()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/arm-io", (uint64_t)@"mH5IrpyGkVtmgdqs68KHRg", 103LL);
}

BOOL sub_18075F9A8()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"8Kc1MRjWTfDiGKX6E/9XqQ", 108);
}

BOOL sub_18075F9C0()
{
  return sub_1807661DC("IODeviceTree:/product/audio", @"BjJV766k5l7T4e9KHEKuBw", 119);
}

CFStringRef sub_18075F9D8()
{
  uint64_t v0 = (const __CFData *)sub_18074776C((const char **)@"8QNz35Yxm0KqxP1JiE0HIw", 0LL);
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0LL, @":%02x", v8);
      --v6;
    }

    while (v6);
  }

  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
    CFRelease(Mutable);
  }

  else
  {
LABEL_9:
    CFStringRef Copy = 0LL;
  }

  CFRelease(v1);
  return Copy;
}

BOOL sub_18075FAF4(uint64_t a1, __CFString **a2)
{
  return !sub_180760AE4(a1, (uint64_t)@"d27R2IjPvpwp+MX/kUbJ2w", a2);
}

BOOL sub_18075FB18(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_180760BD4(a1, @"d27R2IjPvpwp+MX/kUbJ2w", 80, a2);
}

CFTypeRef sub_18075FB2C()
{
  return sub_180764878(1LL, 0, 1LL);
}

uint64_t sub_18075FB3C()
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v0 = *MEMORY[0x189604DE0];
  if (sub_180743444() == 6)
  {
    int v9 = 368885834;
    __int128 v8 = xmmword_1807A2534;
    if ((MGIsDeviceOfType((const UInt8 *)&v8) & 1) == 0)
    {
      int v7 = -414334491;
      __int128 v6 = xmmword_1807A2548;
      if ((MGIsDeviceOfType((const UInt8 *)&v6) & 1) == 0)
      {
        int v5 = -526227167;
        __int128 v4 = xmmword_1807A255C;
        if ((MGIsDeviceOfType((const UInt8 *)&v4) & 1) == 0)
        {
          int v3 = -1509831889;
          __int128 v2 = xmmword_1807A2570;
        }
      }
    }
  }

  return v0;
}

BOOL sub_18075FC54()
{
  return sub_1807661DC("IODeviceTree:/product", @"supports-lotx", 0);
}

uint64_t sub_18075FC6C()
{
  return sub_18076E528((uint64_t)"IODeviceTree:/arm-io", (uint64_t)@"rwnje21oPXH375umjxV6YQ", 97LL);
}

uint64_t sub_18075FC84()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 37);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_180746538(37LL, 2LL);
  }
  return v0();
}

uint64_t sub_18075FCB8()
{
  BOOL v0 = sub_180744BC4("/usr/libexec/lockdownd");
  uint64_t v1 = MEMORY[0x189604DE8];
  return *(void *)v1;
}

uint64_t sub_18075FD08()
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t result = sub_180743444();
  if ((_DWORD)result != 1)
  {
    if (sub_180743444() == 6)
    {
      uint64_t result = sub_180743AF0((BOOL)@"M11");
      if ((_DWORD)result)
      {
        int v11 = 1530338216;
        __int128 v10 = xmmword_1807A2584;
        int v9 = 406601745;
        __int128 v8 = xmmword_1807A2598;
        return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_18075FE30()
{
  BOOL v0 = (uint64_t (*)(void))*((void *)off_18C533F28 + 50);
  if (!v0) {
    BOOL v0 = (uint64_t (*)(void))sub_180746538(50LL, 2LL);
  }
  return v0();
}

CFArrayRef sub_18075FE5C()
{
  uint64_t v158 = *MEMORY[0x1895F89C0];
  if (sub_180743444() != 1)
  {
    int v112 = -1283070668;
    __int128 v111 = xmmword_1807A2778;
    int v110 = -199226823;
    __int128 v109 = xmmword_1807A278C;
    int v108 = 1412427398;
    __int128 v107 = xmmword_1807A27A0;
    int v106 = 160260070;
    __int128 v105 = xmmword_1807A27B4;
    int v104 = 317289457;
    __int128 v103 = xmmword_1807A27C8;
    int v102 = 401945557;
    __int128 v101 = xmmword_1807A27DC;
    uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v111, v17, v18, v19, v20, v21, v22, v23, (uint64_t)&v109);
    if ((_DWORD)v7)
    {
      uint64_t v24 = 0x147AE0000000LL;
    }

    else
    {
      int v100 = 1532898719;
      __int128 v99 = xmmword_1807A27F0;
      int v98 = -1527788847;
      __int128 v97 = xmmword_1807A2804;
      uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v99, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v97);
      if ((_DWORD)v7)
      {
        uint64_t v24 = 0x17AE20000000LL;
      }

      else
      {
        int v96 = -563086000;
        __int128 v95 = xmmword_1807A2818;
        int v94 = 996646949;
        __int128 v93 = xmmword_1807A282C;
        uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v95, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v93);
        if ((_DWORD)v7)
        {
          uint64_t v16 = 0x405CC3D700000000LL;
          goto LABEL_29;
        }

        int v92 = 1908474541;
        __int128 v91 = xmmword_1807A2840;
        int v90 = 1275676051;
        __int128 v89 = xmmword_1807A2854;
        uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v91, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v89);
        if ((_DWORD)v7
          || (int v88 = -1022451852,
              __int128 v87 = xmmword_1807A2868,
              int v86 = 1729782187,
              __int128 v85 = xmmword_1807A287C,
              uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v87, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v85),
              (_DWORD)v7))
        {
          uint64_t v16 = 0x4061A6B860000000LL;
          goto LABEL_29;
        }

        int v84 = 2030516999;
        __int128 v83 = xmmword_1807A2890;
        int v82 = -1276010597;
        __int128 v81 = xmmword_1807A28A4;
        int v80 = -762483149;
        __int128 v79 = xmmword_1807A28B8;
        int v78 = -1926937532;
        __int128 v77 = xmmword_1807A28CC;
        uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v83, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v81);
        if (!(_DWORD)v7)
        {
          int v76 = -1902732724;
          __int128 v75 = xmmword_1807A28E0;
          int v74 = -342357580;
          __int128 v73 = xmmword_1807A28F4;
          uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v75, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v73);
          if (!(_DWORD)v7) {
            goto LABEL_30;
          }
          uint64_t v16 = 0x405FE8B440000000LL;
          goto LABEL_29;
        }

        uint64_t v24 = 0xC7EFA0000000LL;
      }
    }

    uint64_t v16 = v24 & 0xFFFFFFFFFFFFLL | 0x405B000000000000LL;
    goto LABEL_29;
  }

  int v152 = -1403227947;
  __int128 v151 = xmmword_1807A25E8;
  int v150 = 729118884;
  __int128 v149 = xmmword_1807A25FC;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v151, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v149);
  if ((_DWORD)v7)
  {
    uint64_t v15 = 0xF5C600000000LL;
LABEL_4:
    uint64_t v16 = v15 & 0xFFFFFFFFFFFFLL | 0x4051000000000000LL;
    goto LABEL_29;
  }

  int v148 = 1046806126;
  __int128 v147 = xmmword_1807A2610;
  int v146 = -188760945;
  __int128 v145 = xmmword_1807A2624;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v147, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v145);
  if ((_DWORD)v7)
  {
    uint64_t v16 = 0x404B4820A0000000LL;
    goto LABEL_29;
  }

  int v144 = -489993439;
  __int128 v143 = xmmword_1807A2638;
  int v142 = 886875686;
  __int128 v141 = xmmword_1807A264C;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v143, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v141);
  if ((_DWORD)v7)
  {
    uint64_t v25 = 0x191680000000LL;
LABEL_15:
    uint64_t v16 = v25 & 0xFFFFFFFFFFFFLL | 0x404F000000000000LL;
    goto LABEL_29;
  }

  int v140 = -350584140;
  __int128 v139 = xmmword_1807A2660;
  int v138 = -1418383976;
  __int128 v137 = xmmword_1807A2674;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v139, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v137);
  if ((_DWORD)v7) {
    goto LABEL_27;
  }
  int v136 = 368778837;
  __int128 v135 = xmmword_1807A2688;
  int v134 = -1213485500;
  __int128 v133 = xmmword_1807A269C;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v135, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v133);
  if ((_DWORD)v7) {
    goto LABEL_66;
  }
  int v132 = 414393924;
  __int128 v131 = xmmword_1807A26B0;
  int v130 = 897736383;
  __int128 v129 = xmmword_1807A26C4;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v131, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v129);
  if ((_DWORD)v7)
  {
LABEL_27:
    uint64_t v26 = 0x7D0B60000000LL;
LABEL_28:
    uint64_t v16 = v26 & 0xFFFFFFFFFFFFLL | 0x404D000000000000LL;
    goto LABEL_29;
  }

  int v128 = -996295886;
  __int128 v127 = xmmword_1807A26D8;
  int v126 = -453987047;
  __int128 v125 = xmmword_1807A26EC;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v127, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v125);
  if ((_DWORD)v7)
  {
LABEL_66:
    uint64_t v15 = 0x28D0E0000000LL;
    goto LABEL_4;
  }

  int v124 = -337121064;
  __int128 v123 = xmmword_1807A2700;
  int v122 = 450980336;
  __int128 v121 = xmmword_1807A2714;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v123, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v121);
  if ((_DWORD)v7)
  {
    uint64_t v16 = 0x404E1484E0000000LL;
  }

  else
  {
    int v120 = -1843102369;
    __int128 v119 = xmmword_1807A2728;
    uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v119, v8, v9, v10, v11, v12, v13, v14, 0LL);
    if ((_DWORD)v7)
    {
      uint64_t v25 = 0x49BA0000000LL;
      goto LABEL_15;
    }

    int v118 = -427474227;
    __int128 v117 = xmmword_1807A273C;
    int v116 = 1477534141;
    __int128 v115 = xmmword_1807A2750;
    uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v117, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v115);
    if (!(_DWORD)v7)
    {
      int v114 = -232427879;
      __int128 v113 = xmmword_1807A2764;
      uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v113, v8, v9, v10, v11, v12, v13, v14, 0LL);
      if (!(_DWORD)v7) {
        goto LABEL_30;
      }
      uint64_t v26 = 0xFB0200000000LL;
      goto LABEL_28;
    }

    uint64_t v16 = 0x4050BC3960000000LL;
  }

CFTypeRef sub_180760A24()
{
  return sub_180765200(0, "IOSDIOIoCardDevice", @"IOSDIOManufacturerTuple");
}

uint64_t sub_180760A3C()
{
  return sub_18076E9DC((uint64_t)@"wlan.lowlatency");
}

CFTypeRef sub_180760A48(const __CFString *a1)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  mach_port_t v4 = *MEMORY[0x1896086A8];
  do
  {
    uint64_t v5 = off_1896F9638[v2];
    uint64_t v6 = IOServiceMatching(v5);
    io_service_t MatchingService = IOServiceGetMatchingService(v4, v6);
    if (MatchingService)
    {
      IOObjectRelease(MatchingService);
      uint64_t v3 = (char *)v5;
    }

    ++v2;
  }

  while (v2 != 9);
  if (v3)
  {
    CFTypeRef result = sub_180765200(1, v3, a1);
    if (result) {
      return result;
    }
    sub_1807467C0(12);
  }

  return 0LL;
}

BOOL sub_180760AE4(uint64_t a1, uint64_t a2, __CFString **a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v6 = sandbox_check();
  int v7 = v6;
  if (a3 && v6)
  {
    bzero(buffer, 0x401uLL);
    CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
    *a3 = Mutable;
    uint64_t v9 = sub_180744604(a1, buffer, 1025);
    CFStringAppendFormat(Mutable, 0LL, @"pid %d (%s) does not have sandbox access for %@", a1, v9, a2);
  }

  return v7 == 0;
}

BOOL sub_180760BD4(uint64_t a1, const void *a2, int a3, CFMutableStringRef *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  bzero(buffer, 0x401uLL);
  uint64_t v8 = (uint64_t (*)(uint64_t, const char *))*((void *)off_18C533F28 + 30);
  if (!v8) {
    uint64_t v8 = (uint64_t (*)(uint64_t, const char *))sub_180746538(30LL, 2LL);
  }
  uint64_t v9 = (const __CFArray *)v8(a1, "com.apple.private.MobileGestalt.AllowedProtectedKeys");
  uint64_t v10 = v9;
  if (!v9) {
    goto LABEL_16;
  }
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 != CFArrayGetTypeID())
  {
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    uint64_t v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v14) {
      uint64_t v13 = v14 + 1;
    }
    uint64_t v15 = (uint64_t (*)(uint64_t))*((void *)off_18C533F28 + 35);
    if (!v15) {
      uint64_t v15 = (uint64_t (*)(uint64_t))sub_180746538(35LL, 2LL);
    }
    char v16 = v15(a1);
    _MGLog((uint64_t)v13, 462LL, (uint64_t)@"pid %d entitlement is not an array", v17, v18, v19, v20, v21, v16);
    BOOL v12 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
LABEL_17:
      if (!a4) {
        goto LABEL_34;
      }
      goto LABEL_18;
    }

    uint64_t v22 = (uint64_t (*)(uint64_t))*((void *)off_18C533F28 + 35);
    if (!v22) {
      uint64_t v22 = (uint64_t (*)(uint64_t))sub_180746538(35LL, 2LL);
    }
    *(_DWORD *)buf = 67109120;
    int v35 = v22(a1);
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "pid %d entitlement is not an array",  buf,  8u);
LABEL_16:
    BOOL v12 = 0LL;
    goto LABEL_17;
  }

  v38.length = CFArrayGetCount(v10);
  v38.CFIndex location = 0LL;
  if (CFArrayContainsValue(v10, v38, a2))
  {
    BOOL v12 = 1LL;
    if (!a4) {
      goto LABEL_34;
    }
  }

  else
  {
    BOOL v12 = sub_1807448F8((BOOL)v10, a2, a3);
    if (!a4) {
      goto LABEL_34;
    }
  }

LABEL_18:
  uint64_t v23 = (uint64_t (*)(uint64_t))*((void *)off_18C533F28 + 35);
  if (!v23) {
    uint64_t v23 = (uint64_t (*)(uint64_t))sub_180746538(35LL, 2LL);
  }
  uint64_t v24 = v23(a1);
  if (!v12)
  {
    if (*a4)
    {
      CFStringAppendFormat(*a4, 0LL, @" and IS NOT appropriately entitled", v30);
      goto LABEL_34;
    }

    CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
    *a4 = Mutable;
    uint64_t v32 = sub_180744604(v24, buffer, 1025);
    uint64_t v33 = a2;
    uint64_t v31 = v24;
    uint64_t v28 = @"pid %d (%s) IS NOT appropriately entitled to fetch %@";
    goto LABEL_33;
  }

  BOOL v25 = MGGetBoolAnswer((const char **)@"LBJfwOEzExRxzlAnSuI7eg");
  uint64_t v26 = *a4;
  if (v25)
  {
    if (v26)
    {
      CFStringAppendFormat(v26, 0LL, @" but IS appropriately entitled; NO SANDBOX BUGS need be filed", v30);
      goto LABEL_34;
    }

    CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
    *a4 = Mutable;
    uint64_t v32 = sub_180744604(v24, buffer, 1025);
    uint64_t v33 = a2;
    uint64_t v31 = v24;
    uint64_t v28 = @"pid %d (%s) IS appropriately entitled to fetch %@";
LABEL_33:
    CFStringAppendFormat(Mutable, 0LL, v28, v31, v32, v33);
    goto LABEL_34;
  }

  if (v26) {
    CFRelease(v26);
  }
  *a4 = 0LL;
LABEL_34:
  if (v10) {
    CFRelease(v10);
  }
  return v12;
}

  CFProperties = IORegistryEntryCreateCFProperties(v11, (CFMutableDictionaryRef *)&cf, 0LL, 0);
  if (CFProperties)
  {
    uint64_t v20 = CFProperties;
    uint64_t v21 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
    if (v21) {
      uint64_t v22 = v21 + 1;
    }
    else {
      uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    }
    uint64_t v23 = v8;
    uint64_t v24 = -[__CFString UTF8String](v23, "UTF8String");
    mach_error_string(v20);
    _MGLog( (uint64_t)v22,  215LL,  (uint64_t)@"IORegistryEntryCreateCFProperties failed for '%s': %s",  v25,  v26,  v27,  v28,  v29,  v24);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = -[__CFString UTF8String](v23, "UTF8String");
      uint64_t v31 = mach_error_string(v20);
      *(_DWORD *)buf = 136315394;
      uint64_t v34 = v30;
      int v35 = 2080;
      uint64_t v36 = v31;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "IORegistryEntryCreateCFProperties failed for '%s': %s",  buf,  0x16u);
    }

CFStringRef sub_180760EB8(const char **a1)
{
  int v3 = -1;
  BOOL v1 = sub_180747E9C(a1, 5, 5, kCFNumberSInt32Type, &v3);
  CFStringRef result = @"unknown";
  if (v1 && v3 != -1) {
    return CFStringCreateWithFormat(0LL, 0LL, @"#%02x%02x%02x", BYTE2(v3), BYTE1(v3), v3);
  }
  return result;
}

uint64_t sub_180760F30()
{
  uint64_t v0 = sub_18075846C();
  CFDataRef v1 = sub_180760FC8();
  uint64_t v2 = v1;
  if (!v1 || (CFTypeID v3 = CFGetTypeID(v1), v3 != CFDataGetTypeID()) || CFDataGetLength(v2) < 1)
  {
    sub_1807467C0(1);
    uint64_t v4 = 0xFFFFFFFFLL;
    if (!v0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  uint64_t v4 = *CFDataGetBytePtr(v2);
  if (v0) {
LABEL_7:
  }
    CFRelease(v0);
LABEL_8:
  if (v2) {
    CFRelease(v2);
  }
  return v4;
}

CFDataRef sub_180760FC8()
{
  uint64_t v0 = (const __CFData *)sub_180765200(1, "als", @"als-colorCfg");
  if (v0)
  {
    CFDataRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) > 0) {
      return v1;
    }
    CFRelease(v1);
  }

  return sub_1807692D8(0x436C7243u);
}

uint64_t sub_180761044(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  CFTypeID v2 = (const __CFData *)sub_18074776C((const char **)@"oBbtJ8x+s1q0OkaiocPuog", 0LL);
  if (!v2) {
    return 0LL;
  }
  CFTypeID v3 = v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 24)
  {
    int v28 = -337121064;
    __int128 v27 = xmmword_1807A2700;
    int v26 = 450980336;
    __int128 v25 = xmmword_1807A2714;
    if (MGIsDeviceOneOfType((const UInt8 *)&v27, v5, v6, v7, v8, v9, v10, v11, (uint64_t)&v25))
    {
      BytePtr = CFDataGetBytePtr(v3);
      float v13 = *((float *)BytePtr + 3);
      double v14 = (float)((float)*(int *)BytePtr / v13);
      double v15 = v13;
      *(double *)a1 = v14;
      *(double *)(a1 + 8) = round(522.149562 / v15 * v15 / v15);
      *(void *)(a1 + 16) = 0LL;
      *(double *)(a1 + 24) = round(294.333002 / v15 * v15 / v15);
      uint64_t v16 = 1LL;
    }

    else
    {
      uint64_t v16 = sub_1807611E4((uint64_t *)v24);
      if ((_DWORD)v16)
      {
        uint64_t v18 = (int32x2_t *)CFDataGetBytePtr(v3);
        uint64_t v19 = (const float *)&v18[1] + 1;
        float32x2_t v20 = vld1_dup_f32(v19);
        float64x2_t v21 = vcvtq_f64_f32(vdiv_f32(vcvt_f32_s32(*v18), v20));
        float64x2_t v22 = vmulq_f64(v24[0], v21);
        float64x2_t v23 = vmulq_f64(v24[1], v21);
        *(float64x2_t *)a1 = v22;
        *(float64x2_t *)(a1 + 16) = v23;
      }
    }
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  CFRelease(v3);
  return v16;
}

uint64_t sub_1807611E4(uint64_t *a1)
{
  uint64_t v69 = *MEMORY[0x1895F89C0];
  *a1 = 0LL;
  a1[1] = 0LL;
  __asm { FMOV            V0.2D, #1.0 }

  *((_OWORD *)a1 + 1) = _Q0;
  uint64_t v7 = (const __CFData *)sub_180765DB4("IODeviceTree:/product", @"side-button-location", 0);
  if (v7)
  {
    uint64_t v8 = v7;
    CFIndex Length = CFDataGetLength(v7);
    uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v10) {
      uint64_t v16 = v10 + 1;
    }
    else {
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v16, 7201LL, (uint64_t)@"Size of side-button-location %lu", v11, v12, v13, v14, v15, Length);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)uint64_t v64 = Length;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Size of side-button-location %lu",  buf,  0xCu);
    }

    if (Length == 20)
    {
      BytePtr = CFDataGetBytePtr(v8);
      uint64_t v18 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v18) {
        uint64_t v24 = v18 + 1;
      }
      else {
        uint64_t v24 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v24,  7214LL,  (uint64_t)@"Button info %d - %d - %d - %d - %d",  v19,  v20,  v21,  v22,  v23,  *(_DWORD *)BytePtr);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v25 = *(_DWORD *)BytePtr;
        int v26 = *((_DWORD *)BytePtr + 1);
        int v27 = *((_DWORD *)BytePtr + 2);
        int v28 = *((_DWORD *)BytePtr + 3);
        int v29 = *((_DWORD *)BytePtr + 4);
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)uint64_t v64 = v25;
        *(_WORD *)&v64[4] = 1024;
        *(_DWORD *)&v64[6] = v26;
        LOWORD(v65) = 1024;
        *(_DWORD *)((char *)&v65 + 2) = v27;
        HIWORD(v65) = 1024;
        *(_DWORD *)uint64_t v66 = v28;
        *(_WORD *)&v66[4] = 1024;
        *(_DWORD *)&v66[6] = v29;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Button info %d - %d - %d - %d - %d",  buf,  0x20u);
      }

      if (sub_180743444() == 1)
      {
        *a1 = 0x3FF0000000000000LL;
        float v30 = (float)*((unsigned int *)BytePtr + 1);
        *((double *)a1 + 1) = (float)((float)*((unsigned int *)BytePtr + 2) / v30);
        a1[2] = 0LL;
        double v31 = (float)((float)*((unsigned int *)BytePtr + 3) / v30);
      }

      else
      {
        if (sub_180743444() != 3)
        {
LABEL_30:
          CFIndex v50 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          if (v50) {
            uint64_t v56 = v50 + 1;
          }
          else {
            uint64_t v56 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          }
          _MGLog( (uint64_t)v56,  7232LL,  (uint64_t)@"Normalized Rect %f - %f - %f - %f",  v51,  v52,  v53,  v54,  v55,  *(_OWORD *)a1);
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v57 = *a1;
            uint64_t v58 = a1[1];
            uint64_t v59 = a1[2];
            uint64_t v60 = a1[3];
            *(_DWORD *)buf = 134218752;
            *(void *)uint64_t v64 = v57;
            *(_WORD *)&v64[8] = 2048;
            uint64_t v65 = v58;
            *(_WORD *)uint64_t v66 = 2048;
            *(void *)&v66[2] = v59;
            __int16 v67 = 2048;
            uint64_t v68 = v60;
            _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Normalized Rect %f - %f - %f - %f",  buf,  0x2Au);
          }

          CFRelease(v8);
          return 1LL;
        }

        unsigned int v48 = *(_DWORD *)BytePtr;
        unsigned int v49 = *((_DWORD *)BytePtr + 3);
        a1[1] = 0LL;
        *((double *)a1 + 2) = (float)((float)v49 / (float)v48);
        double v31 = 0.0;
      }

      *((double *)a1 + 3) = v31;
      goto LABEL_30;
    }

    uint64_t v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v41) {
      uint64_t v47 = v41 + 1;
    }
    else {
      uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v47,  7210LL,  (uint64_t)@"Property copyDeviceTreeProperty(IODeviceTree:/product side-button-location) had unexpected size",  v42,  v43,  v44,  v45,  v46,  v62);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Property copyDeviceTreeProperty(IODeviceTree:/product side-button-location) had unexpected size",  buf,  2u);
    }

    CFRelease(v8);
    return 0LL;
  }

  uint64_t v32 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v32) {
    CFRange v38 = v32 + 1;
  }
  else {
    CFRange v38 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog( (uint64_t)v38,  7195LL,  (uint64_t)@"Failed to copyDeviceTreeProperty(IODeviceTree:/product side-button-location)",  v33,  v34,  v35,  v36,  v37,  v61);
  BOOL v39 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v39)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to copyDeviceTreeProperty(IODeviceTree:/product side-button-location)",  buf,  2u);
    return 0LL;
  }

  return result;
}

CFTypeRef sub_1807615E4(const __CFString *a1)
{
  uint64_t v2 = 0LL;
  while (1)
  {
    CFTypeRef v3 = sub_180765200(1, off_1896F9710[v2], a1);
    if (v3) {
      break;
    }
    if (++v2 == 3)
    {
      sub_1807467C0(12);
      return v3;
    }
  }

  return v3;
}

CFTypeRef sub_180761644(uint64_t a1, io_registry_entry_t entry, _BYTE *a3)
{
  CFTypeRef result = IORegistryEntryCreateCFProperty(entry, @"Content", (CFAllocatorRef)*MEMORY[0x189604DB0], 0);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    *a3 = 1;
  }
  return result;
}

uint64_t sub_1807616AC()
{
  uint64_t v0 = (const __CFData *)sub_180765200(1, "als", @"noMultiColorSupport");
  CFDataRef v1 = v0;
  if (v0)
  {
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) != 4 || *(_DWORD *)CFDataGetBytePtr(v1))
    {
      uint64_t v3 = 0xFFFFFFFFLL;
      goto LABEL_12;
    }
  }

  CFDataRef v4 = sub_180760FC8();
  if (!v4)
  {
    sub_1807467C0(1);
    uint64_t v3 = 0xFFFFFFFFLL;
    if (!v1) {
      return v3;
    }
    goto LABEL_12;
  }

  uint64_t v5 = v4;
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 == CFDataGetTypeID() && CFDataGetLength(v5) > 1)
  {
    uint64_t v3 = CFDataGetBytePtr(v5)[1];
  }

  else
  {
    sub_1807467C0(1);
    uint64_t v3 = 0xFFFFFFFFLL;
  }

  CFRelease(v5);
  if (v1) {
LABEL_12:
  }
    CFRelease(v1);
  return v3;
}

CFStringRef sub_1807617A4(const __CFData *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return @"ffffffffffffffffffffffffffffffffffffffff";
  }
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  if (Length == 20)
  {
    CFStringRef v4 = CFStringCreateWithFormat( 0LL,  0LL,  @"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",  *BytePtr,  BytePtr[1],  BytePtr[2],  BytePtr[3],  BytePtr[4],  BytePtr[5],  BytePtr[6],  BytePtr[7],  BytePtr[8],  BytePtr[9],  BytePtr[10],  BytePtr[11],  BytePtr[12],  BytePtr[13],  BytePtr[14],  BytePtr[15],  BytePtr[16],  BytePtr[17],  BytePtr[18],  BytePtr[19]);
    if (!v4)
    {
      uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v5) {
        uint64_t v11 = v5 + 1;
      }
      else {
        uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v11, 3482LL, (uint64_t)@"copyHex20String failed", v6, v7, v8, v9, v10, buf[0]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "copyHex20String failed", buf, 2u);
      }

      CFStringRef v4 = 0LL;
    }
  }

  else
  {
    size_t v12 = Length;
    CFStringRef v4 = CFStringCreateFromExternalRepresentation(0LL, a1, 0x8000100u);
    if (!v4)
    {
      MEMORY[0x1895F8858]();
      memcpy(&buf[-((v12 + 16) & 0xFFFFFFFFFFFFFFF0LL)], BytePtr, v12);
      buf[v12 - ((v12 + 16) & 0xFFFFFFFFFFFFFFF0LL)] = 0;
      uint64_t v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v13) {
        uint64_t v19 = v13 + 1;
      }
      else {
        uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v19,  3491LL,  (uint64_t)@"CFStringCreateFromExternalRepresentation %s failed",  v14,  v15,  v16,  v17,  v18,  (char)&buf[-((v12 + 16) & 0xF0)]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v22 = &buf[-((v12 + 16) & 0xFFFFFFFFFFFFFFF0LL)];
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "CFStringCreateFromExternalRepresentation %s failed",  buf,  0xCu);
      }

      CFStringRef v4 = @"FFFFFFFF-FFFFFFFFFFFFFFFF";
    }
  }

  CFRelease(a1);
  return v4;
}

uint64_t sub_180761A30()
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  uint64_t valuePtr = -1LL;
  mach_port_t v0 = *MEMORY[0x1896086A8];
  CFDataRef v1 = IOBSDNameMatching(*MEMORY[0x1896086A8], 0, "disk0");
  io_service_t MatchingService = IOServiceGetMatchingService(v0, v1);
  if (MatchingService)
  {
    io_object_t v3 = MatchingService;
    CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty( MatchingService,  @"Size",  (CFAllocatorRef)*MEMORY[0x189604DB0],  0);
    if (!CFProperty)
    {
      uint64_t v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v24) {
        float v30 = v24 + 1;
      }
      else {
        float v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v30,  3973LL,  (uint64_t)@"%s: No kIOMediaSizeKey found for disk0!",  v25,  v26,  v27,  v28,  v29,  (char)"SInt64 NANDSize(void)");
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v40 = "SInt64 NANDSize(void)";
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%s: No kIOMediaSizeKey found for disk0!",  buf,  0xCu);
      }

      goto LABEL_28;
    }

    uint64_t v5 = CFProperty;
    CFTypeID v6 = CFGetTypeID(CFProperty);
    if (v6 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue(v5, kCFNumberSInt64Type, &valuePtr)) {
        goto LABEL_27;
      }
      uint64_t v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      uint64_t v13 = v7 ? v7 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog( (uint64_t)v13,  3966LL,  (uint64_t)@"%s: Could not get SInt64 value for kIOMediaSizeKey!",  v8,  v9,  v10,  v11,  v12,  (char)"SInt64 NANDSize(void)");
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v40 = "SInt64 NANDSize(void)";
      uint64_t v14 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v15 = "%s: Could not get SInt64 value for kIOMediaSizeKey!";
    }

    else
    {
      double v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v31) {
        uint64_t v37 = v31 + 1;
      }
      else {
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v37,  3969LL,  (uint64_t)@"%s: kIOMediaSizeKey for disk0 not a CFNumber!",  v32,  v33,  v34,  v35,  v36,  (char)"SInt64 NANDSize(void)");
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v40 = "SInt64 NANDSize(void)";
      uint64_t v14 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v15 = "%s: kIOMediaSizeKey for disk0 not a CFNumber!";
    }

    _os_log_impl(&dword_180741000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
LABEL_27:
    CFRelease(v5);
LABEL_28:
    IOObjectRelease(v3);
    return valuePtr;
  }

  uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v16) {
    uint64_t v22 = v16 + 1;
  }
  else {
    uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog( (uint64_t)v22,  3958LL,  (uint64_t)@"%s: IOServiceGetMatchingService() for disk0 failed!",  v17,  v18,  v19,  v20,  v21,  (char)"SInt64 NANDSize(void)");
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v40 = "SInt64 NANDSize(void)";
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%s: IOServiceGetMatchingService() for disk0 failed!",  buf,  0xCu);
  }

  return -1LL;
}

BOOL sub_180761D30(const __CFString *a1, int a2, uint64_t *a3)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  if (!a3)
  {
    uint64_t v45 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v45, 7307LL, (uint64_t)@"outRect is NULL", v46, v47, v48, v49, v50, v68);
    BOOL v14 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v14;
    }
    *(_WORD *)buf = 0;
    uint64_t v51 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v52 = "outRect is NULL";
    uint32_t v53 = 2;
LABEL_26:
    _os_log_impl(&dword_180741000, v51, OS_LOG_TYPE_DEFAULT, v52, buf, v53);
    return 0LL;
  }

  *a3 = 0LL;
  a3[1] = 0LL;
  __asm { FMOV            V0.2D, #1.0 }

  *((_OWORD *)a3 + 1) = _Q0;
  uint64_t v11 = (const __CFData *)sub_180765DB4("IODeviceTree:/product", a1, 0);
  if (!v11)
  {
    uint64_t v54 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog( (uint64_t)v54,  7315LL,  (uint64_t)@"Failed to copy EDT property for %@",  v55,  v56,  v57,  v58,  v59,  (char)a1);
    BOOL v14 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v14;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)char v70 = a1;
    uint64_t v51 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v52 = "Failed to copy EDT property for %@";
    uint32_t v53 = 12;
    goto LABEL_26;
  }

  uint64_t v12 = v11;
  CFIndex Length = CFDataGetLength(v11);
  BOOL v14 = Length == 20;
  if (Length == 20)
  {
    BytePtr = CFDataGetBytePtr(v12);
    uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v16) {
      uint64_t v22 = v16 + 1;
    }
    else {
      uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v22,  7323LL,  (uint64_t)@"Button info %d - %d - %d - %d - %d",  v17,  v18,  v19,  v20,  v21,  *(_DWORD *)BytePtr);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *(_DWORD *)BytePtr;
      int v24 = *((_DWORD *)BytePtr + 1);
      int v25 = *((_DWORD *)BytePtr + 2);
      int v26 = *((_DWORD *)BytePtr + 3);
      int v27 = *((_DWORD *)BytePtr + 4);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)char v70 = v23;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = v24;
      LOWORD(v71) = 1024;
      *(_DWORD *)((char *)&v71 + 2) = v25;
      HIWORD(v71) = 1024;
      *(_DWORD *)unsigned int v72 = v26;
      *(_WORD *)&v72[4] = 1024;
      *(_DWORD *)&v72[6] = v27;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Button info %d - %d - %d - %d - %d",  buf,  0x20u);
    }

    if (sub_180743444() == 1)
    {
      double v28 = 1.0;
      if (!a2) {
        double v28 = 0.0;
      }
      *(double *)a3 = v28;
      float v29 = (float)*((unsigned int *)BytePtr + 1);
      *((double *)a3 + 1) = (float)((float)*((unsigned int *)BytePtr + 2) / v29);
      a3[2] = 0LL;
      *((double *)a3 + 3) = (float)((float)*((unsigned int *)BytePtr + 3) / v29);
    }

    float v30 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v30) {
      uint64_t v36 = v30 + 1;
    }
    else {
      uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v36,  7339LL,  (uint64_t)@"Normalized Rect %f - %f - %f - %f",  v31,  v32,  v33,  v34,  v35,  *(_OWORD *)a3);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    uint64_t v37 = *a3;
    CFRange v38 = (const __CFString *)a3[1];
    uint64_t v39 = a3[2];
    uint64_t v40 = a3[3];
    *(_DWORD *)buf = 134218752;
    *(void *)char v70 = v37;
    *(_WORD *)&v70[8] = 2048;
    uint64_t v71 = v38;
    *(_WORD *)unsigned int v72 = 2048;
    *(void *)&v72[2] = v39;
    __int16 v73 = 2048;
    uint64_t v74 = v40;
    uint64_t v41 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v42 = "Normalized Rect %f - %f - %f - %f";
    uint32_t v43 = 42;
  }

  else
  {
    CFIndex v60 = Length;
    char v61 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v61, 7320LL, (uint64_t)@"Unexpected size %lu for %@", v62, v63, v64, v65, v66, v60);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 134218242;
    *(void *)char v70 = v60;
    *(_WORD *)&v70[8] = 2112;
    uint64_t v71 = a1;
    uint64_t v41 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v42 = "Unexpected size %lu for %@";
    uint32_t v43 = 22;
  }

  _os_log_impl(&dword_180741000, v41, OS_LOG_TYPE_DEFAULT, v42, buf, v43);
LABEL_20:
  CFRelease(v12);
  return v14;
}

uint64_t sub_1807620F4(char *cStr)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000LL;
  char v9 = 0;
  CFStringRef v1 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], cStr, 0x8000100u);
  CFTypeID v2 = IOServiceMatching("IOPort");
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  v5[2] = sub_1807621B4;
  v5[3] = &unk_1896F9788;
  v5[4] = &v6;
  void v5[5] = v1;
  sub_180764FD0(v2, (uint64_t)v5);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1807621B4(uint64_t a1, io_registry_entry_t entry, _BYTE *a3)
{
  CFProperty = (const __CFArray *)IORegistryEntryCreateCFProperty( entry,  @"TransportsSupported",  (CFAllocatorRef)*MEMORY[0x189604DB0],  0);
  if (CFProperty)
  {
    uint64_t v6 = CFProperty;
    if (CFArrayGetCount(CFProperty) >= 1)
    {
      v7.length = CFArrayGetCount(v6);
      v7.CFIndex location = 0LL;
      if (CFArrayContainsValue(v6, v7, *(const void **)(a1 + 40)))
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
        if (a3) {
          *a3 = 1;
        }
      }
    }

    CFRelease(v6);
  }

uint64_t sub_180762260(uint64_t a1, uint64_t a2, void *a3)
{
  char v12 = 0;
  CFTypeRef cf = 0LL;
  uint64_t v5 = off_18C533F28;
  uint64_t v6 = (uint64_t (*)(uint64_t, void, char *, CFTypeRef *))*((void *)off_18C533F28 + 4);
  if (!v6)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t, void, char *, CFTypeRef *))sub_180746538(4LL, 2LL);
    uint64_t v5 = off_18C533F28;
  }

  CFRange v7 = (void *)v5[55];
  if (!v7) {
    CFRange v7 = (void *)sub_180746538(55LL, 1LL);
  }
  uint64_t v8 = v6(a2, *v7, &v12, &cf);
  if (cf) {
    CFRelease(cf);
  }
  char v9 = (void *)MEMORY[0x189604DE8];
  if (!v12) {
    char v9 = (void *)MEMORY[0x189604DE0];
  }
  *a3 = *v9;
  return v8;
}

uint64_t sub_18076231C(const __CFString *a1, int a2, float64x2_t *a3)
{
  uint64_t v6 = (const __CFData *)sub_18074776C((const char **)@"oBbtJ8x+s1q0OkaiocPuog", 0LL);
  if (!v6) {
    return 0LL;
  }
  CFRange v7 = v6;
  CFTypeID v8 = CFGetTypeID(v6);
  if (v8 == CFDataGetTypeID() && CFDataGetLength(v7) == 24 && sub_180761D30(a1, a2, (uint64_t *)v17))
  {
    BytePtr = (int32x2_t *)CFDataGetBytePtr(v7);
    uint64_t v10 = (const float *)&BytePtr[1] + 1;
    float32x2_t v11 = vld1_dup_f32(v10);
    float64x2_t v12 = vcvtq_f64_f32(vdiv_f32(vcvt_f32_s32(*BytePtr), v11));
    float64x2_t v13 = vmulq_f64(v17[0], v12);
    float64x2_t v14 = vmulq_f64(v17[1], v12);
    *a3 = v13;
    a3[1] = v14;
    uint64_t v15 = 1LL;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  CFRelease(v7);
  return v15;
}

uint64_t sub_1807623F8(const char *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v14[2] = 0LL;
  v14[0] = 5LL;
  v14[1] = 2155872256LL;
  memset(v13, 0, 12);
  CFTypeID v2 = (unsigned int *)(a1 + 88);
  if (!getattrlist(a1 + 88, v14, v13, 0xCuLL, 0)) {
    return *(void *)((char *)v13 + 4);
  }
  int v3 = *__error();
  CFStringRef v4 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5) {
    CFStringRef v4 = v5 + 1;
  }
  strerror(v3);
  _MGLog((uint64_t)v4, 4089LL, (uint64_t)@"getattrlist(%s, ATTR_VOL_SPACEUSED): %s", v6, v7, v8, v9, v10, (char)v2);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    float32x2_t v11 = strerror(v3);
    *(_DWORD *)buf = 136315394;
    uint64_t v16 = v2;
    __int16 v17 = 2080;
    uint64_t v18 = v11;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "getattrlist(%s, ATTR_VOL_SPACEUSED): %s",  buf,  0x16u);
  }

  if (v3 == 45) {
    return (*((void *)a1 + 1) - *((void *)a1 + 2)) * *(unsigned int *)a1;
  }
  else {
    return -1LL;
  }
}

uint64_t sub_18076255C(mach_port_t a1, char a2, void *a3, size_t *a4)
{
  if (a4) {
    size_t v8 = *a4;
  }
  else {
    size_t v8 = 0LL;
  }
  size_t outputStructCnt = v8;
  uint64_t v9 = malloc(8uLL);
  uint64_t v10 = v9;
  if (v9)
  {
    _DWORD *v9 = 1296256323;
    *((_BYTE *)v9 + 4) = a2;
    *((_BYTE *)v9 + 5) = 0;
    uint64_t v11 = IOConnectCallStructMethod(a1, 0, v9, 8uLL, a3, &outputStructCnt);
    if (a4) {
      *a4 = outputStructCnt;
    }
  }

  else
  {
    float64x2_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v12) {
      uint64_t v18 = v12 + 1;
    }
    else {
      uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v18,  5307LL,  (uint64_t)@"Failed to allocate Mesa command object",  v13,  v14,  v15,  v16,  v17,  v20[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to allocate Mesa command object",  v20,  2u);
    }

    uint64_t v11 = 0xFFFFFFFFLL;
  }

  free(v10);
  return v11;
}

uint64_t sub_180762680(int a1)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000LL;
  char v11 = 0;
  CFTypeID v2 = IOServiceMatching("IOAccessoryManager");
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  v5[2] = sub_180762720;
  v5[3] = &unk_1896F9818;
  int v6 = 255;
  int v7 = a1;
  v5[4] = &v8;
  sub_180764FD0(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_180762720(uint64_t a1, io_registry_entry_t entry, _BYTE *a3)
{
  CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty( entry,  @"IOAccessoryManagerType",  (CFAllocatorRef)*MEMORY[0x189604DB0],  0);
  if (CFProperty)
  {
    int v6 = CFProperty;
    CFTypeID v7 = CFGetTypeID(CFProperty);
    if (v7 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
      if ((*(_DWORD *)(a1 + 40) & valuePtr) == *(_DWORD *)(a1 + 44))
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
        *a3 = 1;
      }
    }

    CFRelease(v6);
  }

CFNumberRef sub_1807627D4(int a1)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  int valuePtr = -1;
  CFTypeID v2 = (const __CFData *)sub_180765DB4("IODeviceTree:/product", @"device-colors", 0);
  if (v2)
  {
    uint64_t v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 16)
    {
      BytePtr = CFDataGetBytePtr(v3);
      uint64_t v6 = 10LL;
      if (a1) {
        uint64_t v6 = 6LL;
      }
      uint64_t v7 = 5LL;
      if (!a1) {
        uint64_t v7 = 9LL;
      }
      uint64_t v8 = 8LL;
      if (a1) {
        uint64_t v8 = 4LL;
      }
      int v9 = BytePtr[v8];
      int v10 = BytePtr[v7];
      int v11 = BytePtr[v6];
      int v12 = BytePtr[1];
      if (v12 == 2)
      {
        int v13 = v9 | (v10 << 8) | (v11 << 16);
        goto LABEL_19;
      }

      if (v12 == 1)
      {
        int v13 = (v9 << 16) | (v10 << 8) | v11;
LABEL_19:
        int valuePtr = v13;
LABEL_26:
        CFRelease(v3);
        goto LABEL_27;
      }

      uint64_t v15 = BytePtr;
      uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v16) {
        uint64_t v22 = v16 + 1;
      }
      else {
        uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v22, 2936LL, (uint64_t)@"unknown dclr version %u.%u", v17, v18, v19, v20, v21, v15[1]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        int v23 = v15[1];
        int v24 = *v15;
        *(_DWORD *)buf = 67109376;
        int v28 = v23;
        __int16 v29 = 1024;
        int v30 = v24;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "unknown dclr version %u.%u",  buf,  0xEu);
      }
    }

    int v13 = -1;
    goto LABEL_26;
  }

  if (a1) {
    unsigned int v14 = sub_1807616AC();
  }
  else {
    unsigned int v14 = sub_180760F30();
  }
  if (v14 > 8) {
    return 0LL;
  }
  int v13 = *((_DWORD *)&off_1896F9680 + 4 * v14 + 2);
  int valuePtr = v13;
LABEL_27:
  if (v13 != -1) {
    return CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
  }
  return 0LL;
}

CFTypeRef sub_1807629E0(uint64_t a1, io_registry_entry_t entry, _BYTE *a3)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  CFTypeRef result = IORegistryEntrySearchCFProperty(entry, "IOService", @"vendor-id", 0LL, 3u);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    *a3 = 1;
  }
  return result;
}

BOOL sub_180762A5C(uint64_t a1, io_registry_entry_t entry)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = IORegistryEntrySearchCFProperty( entry,  "IOService",  @"vendor-id",  0LL,  3u);
  return *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) != 0LL;
}

__CFArray *sub_180762ACC(uint64_t a1)
{
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
  if (Mutable)
  {
    for (uint64_t i = 0LL; i != 16; i += 4LL)
    {
      CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, (const void *)(a1 + i));
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
    }
  }

  return Mutable;
}

BOOL sub_180762B50(int a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (sub_18075BE24())
  {
    os_parse_boot_arg_int();
    os_parse_boot_arg_int();
  }

  if (a1 == 1)
  {
    CFTypeID v2 = "manta-b";
    return sub_1807651CC(1, v2);
  }

  if (a1 == 2)
  {
    CFTypeID v2 = "manta-c";
    return sub_1807651CC(1, v2);
  }

  uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v3) {
    int v9 = v3 + 1;
  }
  else {
    int v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v9, 9124LL, (uint64_t)@"Invalid compute hardware type: %d", v4, v5, v6, v7, v8, a1);
  BOOL v10 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
  BOOL result = 0LL;
  if (v10)
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v13) = a1;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Invalid compute hardware type: %d",  buf,  8u);
    return 0LL;
  }

  return result;
}

BOOL sub_180762D60()
{
  mach_port_t v0 = CFLocaleCopyCurrent();
  if (!v0)
  {
    int v12 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v12, 8982LL, (uint64_t)@"locale is NULL", v13, v14, v15, v16, v17, v39);
    BOOL v10 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v10;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "locale is NULL", buf, 2u);
    return 0LL;
  }

  CFStringRef v1 = v0;
  CFTypeRef Value = (const __CFString *)CFLocaleGetValue(v0, (CFLocaleKey)*MEMORY[0x189604FE0]);
  if (!Value)
  {
    uint64_t v18 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v18, 8984LL, (uint64_t)@"country code is NULL", v19, v20, v21, v22, v23, v39);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    __int16 v41 = 0;
    int v24 = (os_log_s *)MEMORY[0x1895F8DA0];
    int v25 = "country code is NULL";
    int v26 = (uint8_t *)&v41;
LABEL_21:
    _os_log_impl(&dword_180741000, v24, OS_LOG_TYPE_DEFAULT, v25, v26, 2u);
    goto LABEL_22;
  }

  uint64_t v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFStringGetTypeID())
  {
    int v27 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v27, 8985LL, (uint64_t)@"country code is unpexpected type", v28, v29, v30, v31, v32, v39);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    __int16 v40 = 0;
    int v24 = (os_log_s *)MEMORY[0x1895F8DA0];
    int v25 = "country code is unpexpected type";
    int v26 = (uint8_t *)&v40;
    goto LABEL_21;
  }

  uint64_t v5 = sub_180744760(v3);
  if (!v5)
  {
    uint64_t v33 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v33, 8987LL, (uint64_t)@"failed to copy country code", v34, v35, v36, v37, v38, v39);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v39 = 0;
      int v24 = (os_log_s *)MEMORY[0x1895F8DA0];
      int v25 = "failed to copy country code";
      int v26 = (uint8_t *)&v39;
      goto LABEL_21;
    }

void sub_180762FAC()
{
  mach_port_t v0 = dlopen("/usr/lib/libFDR.dylib", 1);
  if (v0)
  {
    CFStringRef v1 = v0;
    off_18C534168 = (uint64_t (*)(void, void))dlsym(v0, "AMFDRCreateWithOptions");
    off_18C534170 = (uint64_t (*)(void, void))dlsym(v1, "AMFDRSealingMapVerifySealing");
  }

  else
  {
    CFTypeID v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v2) {
      unint64_t v8 = v2 + 1;
    }
    else {
      unint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v8, 5246LL, (uint64_t)@"Unable to dlopen /usr/lib/libFDR.dylib", v3, v4, v5, v6, v7, v9[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Unable to dlopen /usr/lib/libFDR.dylib",  v9,  2u);
    }
  }

uint64_t sub_180763080(uint64_t a1, uint64_t a2, void *a3)
{
  char v11 = 0;
  int v10 = 0;
  uint64_t v5 = off_18C533F28;
  uint64_t v6 = (uint64_t (*)(uint64_t, void, char *, int *))*((void *)off_18C533F28 + 21);
  if (!v6)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t, void, char *, int *))sub_180746538(21LL, 2LL);
    uint64_t v5 = off_18C533F28;
  }

  uint64_t v7 = (void *)v5[56];
  if (!v7) {
    uint64_t v7 = (void *)sub_180746538(56LL, 1LL);
  }
  uint64_t result = v6(a2, *v7, &v11, &v10);
  int v9 = (void *)MEMORY[0x189604DE8];
  if (v10 < 0) {
    int v9 = (void *)MEMORY[0x189604DE0];
  }
  *a3 = *v9;
  return result;
}

BOOL sub_180763128(const __CFString *a1)
{
  CFTypeID v2 = sub_18075D520();
  CFTypeRef Value = (const __CFString *)CFDictionaryGetValue(v2, @"GraphicsFeatureSetClass");
  uint64_t v4 = (const __CFString *)CFDictionaryGetValue(v2, @"GraphicsFeatureSetFallbacks");
  if (!a1 || !Value) {
    goto LABEL_7;
  }
  uint64_t v5 = v4;
  BOOL v6 = 1LL;
  if (CFStringCompare(Value, a1, 1uLL) == kCFCompareEqualTo) {
    goto LABEL_8;
  }
  if (v5)
  {
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings( (CFAllocatorRef)*MEMORY[0x189604DB0],  v5,  @":");
    v9.length = CFArrayGetCount(ArrayBySeparatingStrings);
    v9.CFIndex location = 0LL;
    BOOL v6 = CFArrayContainsValue(ArrayBySeparatingStrings, v9, a1) != 0;
    if (ArrayBySeparatingStrings) {
      CFRelease(ArrayBySeparatingStrings);
    }
  }

  else
  {
LABEL_7:
    BOOL v6 = 0LL;
  }

uint64_t sub_180763208(uint64_t a1, uint64_t a2, void *a3)
{
  char v10 = 0;
  uint64_t v5 = off_18C533F28;
  BOOL v6 = (uint64_t (*)(uint64_t, void, char *))*((void *)off_18C533F28 + 3);
  if (!v6)
  {
    BOOL v6 = (uint64_t (*)(uint64_t, void, char *))sub_180746538(3LL, 2LL);
    uint64_t v5 = off_18C533F28;
  }

  uint64_t v7 = (void *)v5[54];
  if (!v7) {
    uint64_t v7 = (void *)sub_180746538(54LL, 1LL);
  }
  uint64_t result = v6(a2, *v7, &v10);
  CFRange v9 = (void *)MEMORY[0x189604DE8];
  if (!v10) {
    CFRange v9 = (void *)MEMORY[0x189604DE0];
  }
  *a3 = *v9;
  return result;
}

void sub_1807632A8(uint64_t a1, uint64_t a2)
{
  io_registry_entry_t v2 = a2;
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (!MEMORY[0x186E02060](a2, "IOService", v28))
  {
    uint64_t v4 = v28;
    if (*(unsigned __int16 *)v28 != 47)
    {
      uint64_t v5 = rindex(v28, 47);
      if (v5) {
        uint64_t v4 = v5 + 1;
      }
    }

    BOOL v6 = index(v4, 64);
    if (v6) {
      *BOOL v6 = 0;
    }
    CFStringRef v7 = CFStringCreateWithCString(0LL, v4, 0x8000100u);
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v7))
    {
      unint64_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v8) {
        uint64_t v14 = v8 + 1;
      }
      else {
        uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v14,  4220LL,  (uint64_t)@"already have calibration data for %@\n",  v9,  v10,  v11,  v12,  v13,  (char)v7);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        int v27 = (char *)v7;
        uint64_t v15 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v16 = "already have calibration data for %@\n";
LABEL_13:
        _os_log_impl(&dword_180741000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
      }
    }

    else
    {
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, @"compass-calibration", 0LL, 0);
      if (CFProperty)
      {
        uint64_t v17 = CFProperty;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v7, CFProperty);
        if (!v7)
        {
LABEL_16:
          if (v17) {
            CFRelease(v17);
          }
          return;
        }

LABEL_15:
        CFRelease(v7);
        goto LABEL_16;
      }

      uint64_t v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v19) {
        int v25 = v19 + 1;
      }
      else {
        int v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog( (uint64_t)v25,  4226LL,  (uint64_t)@"couldn't get calibration data for %s\n",  v20,  v21,  v22,  v23,  v24,  (char)v28);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        int v27 = v28;
        uint64_t v15 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v16 = "couldn't get calibration data for %s\n";
        goto LABEL_13;
      }
    }

    uint64_t v17 = 0LL;
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  if (!a4) {
    goto LABEL_19;
  }
LABEL_16:
  CFTypeRef cf = 0LL;
  p_CFTypeRef cf = &cf;
  uint64_t v28 = 0x2000000000LL;
  uint64_t v29 = 0LL;
  v24[0] = 0LL;
  v24[1] = v24;
  float64x2_t v24[2] = 0x2000000000LL;
  int v25 = 0;
  v20[0] = MEMORY[0x1895F87A8];
  v20[1] = 0x40000000LL;
  v20[2] = sub_18077F5F8;
  v20[3] = &unk_1896FA090;
  uint64_t v21 = a3 & a5;
  v20[6] = a2;
  v20[7] = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint8_t v20[8] = v34;
  v20[4] = v24;
  v20[5] = &cf;
  sub_1807650AC(a1, (uint64_t)a4, (uint64_t)v20);
  uint64_t v18 = p_cf[3];
  if (v18)
  {
    CFDictionarySetValue(Mutable, @"4:Children", v18);
    CFRelease(p_cf[3]);
  }

  _Block_object_dispose(v24, 8);
  _Block_object_dispose(&cf, 8);
LABEL_19:
  if (v33) {
    free(v34);
  }
  return Mutable;
}

CFArrayRef sub_1807634C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = (double *)&a9;
  CFMutableStringRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  int v10 = 3;
  do
  {
    uint64_t v11 = v18++;
    float v12 = *v11;
    float valuePtr = v12;
    CFNumberRef v13 = CFNumberCreate(0LL, kCFNumberFloat32Type, &valuePtr);
    if (v13)
    {
      CFNumberRef v14 = v13;
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v14);
    }

    --v10;
  }

  while (v10);
  if (!Mutable) {
    return 0LL;
  }
  CFArrayRef Copy = CFArrayCreateCopy(0LL, Mutable);
  CFRelease(Mutable);
  return Copy;
}

uint64_t sub_180763580()
{
  return pthread_key_create((pthread_key_t *)&qword_18C452090, 0LL);
}

void sub_180763590()
{
  CFMutableStringRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
  CFStringRef v1 = off_18C533F28;
  io_registry_entry_t v2 = (void *)*((void *)off_18C533F28 + 52);
  if (!v2)
  {
    io_registry_entry_t v2 = (void *)sub_180746538(52LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v2)
  {
    uint64_t v3 = (const void **)v1[52];
    if (!v3) {
      uint64_t v3 = (const void **)sub_180746538(52LL, 1LL);
    }
    CFSetAddValue(Mutable, *v3);
    CFStringRef v1 = off_18C533F28;
  }

  uint64_t v4 = (void *)v1[53];
  if (!v4)
  {
    uint64_t v4 = (void *)sub_180746538(53LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v4)
  {
    uint64_t v5 = (const void **)v1[53];
    if (!v5) {
      uint64_t v5 = (const void **)sub_180746538(53LL, 1LL);
    }
    CFSetAddValue(Mutable, *v5);
    CFStringRef v1 = off_18C533F28;
  }

  BOOL v6 = (void *)v1[76];
  if (!v6)
  {
    BOOL v6 = (void *)sub_180746538(76LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v6)
  {
    CFStringRef v7 = (const void **)v1[76];
    if (!v7) {
      CFStringRef v7 = (const void **)sub_180746538(76LL, 1LL);
    }
    CFSetAddValue(Mutable, *v7);
    CFStringRef v1 = off_18C533F28;
  }

  unint64_t v8 = (void *)v1[77];
  if (!v8)
  {
    unint64_t v8 = (void *)sub_180746538(77LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v8)
  {
    uint64_t v9 = (const void **)v1[77];
    if (!v9) {
      uint64_t v9 = (const void **)sub_180746538(77LL, 1LL);
    }
    CFSetAddValue(Mutable, *v9);
    CFStringRef v1 = off_18C533F28;
  }

  int v10 = (void *)v1[78];
  if (!v10)
  {
    int v10 = (void *)sub_180746538(78LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v10)
  {
    uint64_t v11 = (const void **)v1[78];
    if (!v11) {
      uint64_t v11 = (const void **)sub_180746538(78LL, 1LL);
    }
    CFSetAddValue(Mutable, *v11);
    CFStringRef v1 = off_18C533F28;
  }

  float v12 = (void *)v1[79];
  if (!v12)
  {
    float v12 = (void *)sub_180746538(79LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v12)
  {
    CFNumberRef v13 = (const void **)v1[79];
    if (!v13) {
      CFNumberRef v13 = (const void **)sub_180746538(79LL, 1LL);
    }
    CFSetAddValue(Mutable, *v13);
    CFStringRef v1 = off_18C533F28;
  }

  CFNumberRef v14 = (void *)v1[80];
  if (!v14)
  {
    CFNumberRef v14 = (void *)sub_180746538(80LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v14)
  {
    uint64_t v15 = (const void **)v1[80];
    if (!v15) {
      uint64_t v15 = (const void **)sub_180746538(80LL, 1LL);
    }
    CFSetAddValue(Mutable, *v15);
    CFStringRef v1 = off_18C533F28;
  }

  uint64_t v16 = (void *)v1[84];
  if (!v16)
  {
    uint64_t v16 = (void *)sub_180746538(84LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v16)
  {
    uint64_t v17 = (const void **)v1[84];
    if (!v17) {
      uint64_t v17 = (const void **)sub_180746538(84LL, 1LL);
    }
    CFSetAddValue(Mutable, *v17);
    CFStringRef v1 = off_18C533F28;
  }

  uint64_t v18 = (void *)v1[85];
  if (!v18)
  {
    uint64_t v18 = (void *)sub_180746538(85LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v18)
  {
    uint64_t v19 = (const void **)v1[85];
    if (!v19) {
      uint64_t v19 = (const void **)sub_180746538(85LL, 1LL);
    }
    CFSetAddValue(Mutable, *v19);
    CFStringRef v1 = off_18C533F28;
  }

  uint64_t v20 = (void *)v1[86];
  if (!v20)
  {
    uint64_t v20 = (void *)sub_180746538(86LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v20)
  {
    uint64_t v21 = (const void **)v1[86];
    if (!v21) {
      uint64_t v21 = (const void **)sub_180746538(86LL, 1LL);
    }
    CFSetAddValue(Mutable, *v21);
    CFStringRef v1 = off_18C533F28;
  }

  uint64_t v22 = (void *)v1[87];
  if (!v22)
  {
    uint64_t v22 = (void *)sub_180746538(87LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v22)
  {
    uint64_t v23 = (const void **)v1[87];
    if (!v23) {
      uint64_t v23 = (const void **)sub_180746538(87LL, 1LL);
    }
    CFSetAddValue(Mutable, *v23);
    CFStringRef v1 = off_18C533F28;
  }

  uint64_t v24 = (void *)v1[88];
  if (!v24)
  {
    uint64_t v24 = (void *)sub_180746538(88LL, 1LL);
    CFStringRef v1 = off_18C533F28;
  }

  if (*v24)
  {
    int v25 = (const void **)v1[88];
    if (!v25) {
      int v25 = (const void **)sub_180746538(88LL, 1LL);
    }
    CFSetAddValue(Mutable, *v25);
    CFStringRef v1 = off_18C533F28;
  }

  int v26 = (void *)v1[89];
  if (!v26) {
    int v26 = (void *)sub_180746538(89LL, 1LL);
  }
  if (*v26)
  {
    int v27 = (const void **)*((void *)off_18C533F28 + 89);
    if (!v27) {
      int v27 = (const void **)sub_180746538(89LL, 1LL);
    }
    CFSetAddValue(Mutable, *v27);
  }

  qword_18C534138 = (uint64_t)Mutable;
}

uint64_t sub_180763940(uint64_t a1, CFTypeRef cf, int a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (qword_18C451F90 != -1) {
    dispatch_once(&qword_18C451F90, &unk_1896F9BB0);
  }
  uint64_t result = 1LL;
  switch(a3)
  {
    case 0:
    case 1:
      return result;
    case 5:
      uint64_t result = sub_180763CE8(a1, cf, 5, kCFNumberSInt32Type);
      break;
    case 6:
      uint64_t result = sub_180763CE8(a1, cf, 6, kCFNumberSInt64Type);
      break;
    case 7:
      uint64_t result = sub_180763CE8(a1, cf, 7, kCFNumberFloat32Type);
      break;
    case 8:
      uint64_t result = sub_180763CE8(a1, cf, 8, kCFNumberFloat64Type);
      break;
    default:
      CFTypeID v7 = CFGetTypeID(cf);
      CFTypeID v8 = qword_18C451F98[a3];
      if (v7 == v8)
      {
        uint64_t result = 1LL;
      }

      else
      {
        CFStringRef v9 = CFCopyTypeIDDescription(v7);
        CFStringRef v10 = CFCopyTypeIDDescription(v8);
        uint64_t v11 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v11) {
          uint64_t v17 = v11 + 1;
        }
        else {
          uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog( (uint64_t)v17,  600LL,  (uint64_t)@"Value for %@ has incorrect type (should be %@, is %@)",  v12,  v13,  v14,  v15,  v16,  a1);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          uint64_t v19 = a1;
          __int16 v20 = 2112;
          CFStringRef v21 = v10;
          __int16 v22 = 2112;
          CFStringRef v23 = v9;
          _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Value for %@ has incorrect type (should be %@, is %@)",  buf,  0x20u);
        }

        CFRelease(v9);
        CFRelease(v10);
        uint64_t result = 0LL;
      }

      break;
  }

  return result;
}

void sub_180763BB4()
{
  mach_port_t v0 = (uint64_t (*)())*((void *)off_18C533F28 + 29);
  if (!v0) {
    mach_port_t v0 = (uint64_t (*)())sub_180746538(29LL, 2LL);
  }
  if (v0 == sub_180746810)
  {
    CFStringRef v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1) {
      CFTypeID v7 = v1 + 1;
    }
    else {
      CFTypeID v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v7, 752LL, (uint64_t)@"_MGSCopyAnswerFromServer can't be loaded", v2, v3, v4, v5, v6, v8[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFTypeID v8 = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "_MGSCopyAnswerFromServer can't be loaded",  v8,  2u);
    }

    byte_18C534128 = 1;
  }

CFTypeID sub_180763C78()
{
  qword_18C451FA8 = CFDictionaryGetTypeID();
  qword_18C451FB0 = CFArrayGetTypeID();
  qword_18C451FB8 = CFNumberGetTypeID();
  qword_18C451FC0 = CFNumberGetTypeID();
  qword_18C451FC8 = CFNumberGetTypeID();
  qword_18C451FD0 = CFNumberGetTypeID();
  qword_18C451FD8 = CFNumberGetTypeID();
  qword_18C451FE0 = CFStringGetTypeID();
  qword_18C451FE8 = CFDataGetTypeID();
  CFTypeID result = CFBooleanGetTypeID();
  qword_18C451FF0 = result;
  return result;
}

uint64_t sub_180763CE8(uint64_t a1, CFTypeRef cf, int a3, CFNumberType a4)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 != CFNumberGetTypeID())
  {
    CFTypeID v10 = CFGetTypeID(cf);
    CFStringRef v11 = CFCopyTypeIDDescription(v10);
    uint64_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v12) {
      uint64_t v18 = v12 + 1;
    }
    else {
      uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog( (uint64_t)v18,  549LL,  (uint64_t)@"Value for %@ has incorrect type (should be CFNumber, is %@)",  v13,  v14,  v15,  v16,  v17,  a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      int valuePtr = 138412546;
      uint64_t v35 = a1;
      __int16 v36 = 2112;
      CFStringRef v37 = v11;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Value for %@ has incorrect type (should be CFNumber, is %@)",  (uint8_t *)&valuePtr,  0x16u);
    }

    CFRelease(v11);
    return 0LL;
  }

  if (CFNumberGetValue((CFNumberRef)cf, a4, &valuePtr)) {
    return 1LL;
  }
  uint64_t v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v19) {
    int v25 = v19 + 1;
  }
  else {
    int v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  uint64_t v26 = qword_1896A07A8[a3];
  _MGLog( (uint64_t)v25,  556LL,  (uint64_t)@"Value %@ for %@ cannot be represented as %s",  v20,  v21,  v22,  v23,  v24,  (char)cf);
  BOOL v27 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v27)
  {
    *(_DWORD *)buf = 138412802;
    CFTypeRef v29 = cf;
    __int16 v30 = 2112;
    uint64_t v31 = a1;
    __int16 v32 = 2080;
    uint64_t v33 = v26;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Value %@ for %@ cannot be represented as %s",  buf,  0x20u);
    return 0LL;
  }

  return result;
}

void *sub_180763EDC()
{
  if (qword_18C452098 != -1) {
    dispatch_once(&qword_18C452098, &unk_1896F9AF0);
  }
  return pthread_getspecific(qword_18C452090);
}

uint64_t sub_180763F20()
{
  return 0LL;
}

CFTypeRef sub_180763F28(uint64_t a1, uint64_t a2, CFTypeID a3)
{
  v59[2] = *MEMORY[0x1895F89C0];
  CFTypeRef cf = 0LL;
  uint64_t v6 = (uint64_t (*)(uint64_t, const __CFString *, dispatch_queue_global_t, void))*((void *)off_18C533F28
                                                                                             + 19);
  if (!v6) {
    uint64_t v6 = (uint64_t (*)(uint64_t, const __CFString *, dispatch_queue_global_t, void))sub_180746538(19LL, 2LL);
  }
  uint64_t v7 = *MEMORY[0x189604DB0];
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v9 = v6(v7, @"com.apple.mobilegestalt", global_queue, 0LL);
  if (v9)
  {
    CFTypeID v10 = (const void *)v9;
    unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(a2 + 16))(a2, v9, &cf);
    int v12 = v11;
    if (!(_DWORD)v11)
    {
      if (cf)
      {
        CFTypeID v23 = CFGetTypeID(cf);
        if (v23 == a3)
        {
          CFTypeRef v22 = cf;
          CFTypeRef cf = 0LL;
          goto LABEL_27;
        }

        CFTypeID v43 = v23;
        CFStringRef v44 = CFCopyTypeIDDescription(a3);
        CFStringRef v45 = CFCopyTypeIDDescription(v43);
        uint64_t v46 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v46) {
          uint64_t v52 = v46 + 1;
        }
        else {
          uint64_t v52 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        }
        _MGLog( (uint64_t)v52,  67LL,  (uint64_t)@"%s: CommCenter result should have been %@ but was %@",  v47,  v48,  v49,  v50,  v51,  a1);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v56 = a1;
          __int16 v57 = 2112;
          *(void *)uint64_t v58 = v44;
          *(_WORD *)&v58[8] = 2112;
          v59[0] = v45;
          _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%s: CommCenter result should have been %@ but was %@",  buf,  0x20u);
        }

        if (v44) {
          CFRelease(v44);
        }
        if (v45) {
          CFRelease(v45);
        }
LABEL_26:
        CFTypeRef v22 = 0LL;
LABEL_27:
        CFRelease(v10);
        if (cf) {
          CFRelease(cf);
        }
        return v22;
      }

      __int16 v36 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
      if (v36) {
        uint64_t v42 = v36 + 1;
      }
      else {
        uint64_t v42 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
      }
      _MGLog( (uint64_t)v42,  58LL,  (uint64_t)@"%s: CommCenter failed to provide info but returned no error",  v37,  v38,  v39,  v40,  v41,  a1);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v56 = a1;
      __int16 v32 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v33 = "%s: CommCenter failed to provide info but returned no error";
      uint32_t v34 = 12;
LABEL_25:
      _os_log_impl(&dword_180741000, v32, OS_LOG_TYPE_DEFAULT, v33, buf, v34);
      goto LABEL_26;
    }

    unint64_t v13 = HIDWORD(v11);
    if ((_DWORD)v11 == 2)
    {
      uint64_t v14 = mach_error_string(SHIDWORD(v11));
    }

    else
    {
      if ((_DWORD)v11 != 1)
      {
        uint64_t v24 = "Unknown";
        goto LABEL_20;
      }

      uint64_t v14 = strerror(SHIDWORD(v11));
    }

    uint64_t v24 = v14;
LABEL_20:
    int v25 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v25) {
      uint64_t v31 = v25 + 1;
    }
    else {
      uint64_t v31 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v31, 53LL, (uint64_t)@"%s: CommCenter error: %d:%d (%s)", v26, v27, v28, v29, v30, a1);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    *(_DWORD *)buf = 136315906;
    uint64_t v56 = a1;
    __int16 v57 = 1024;
    *(_DWORD *)uint64_t v58 = v12;
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = v13;
    LOWORD(v59[0]) = 2080;
    *(void *)((char *)v59 + 2) = v24;
    __int16 v32 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v33 = "%s: CommCenter error: %d:%d (%s)";
    uint32_t v34 = 34;
    goto LABEL_25;
  }

  uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
  if (v15) {
    uint64_t v21 = v15 + 1;
  }
  else {
    uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
  }
  _MGLog( (uint64_t)v21,  41LL,  (uint64_t)@"could not establish connection to CommCenter",  v16,  v17,  v18,  v19,  v20,  v53);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "could not establish connection to CommCenter",  buf,  2u);
  }

  return 0LL;
}

CFTypeRef sub_1807642E0(uint64_t a1, uint64_t a2, CFTypeID a3)
{
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  v4[2] = sub_180764330;
  v4[3] = &unk_1896F9C88;
  v4[4] = a2;
  return sub_180763F28(a1, (uint64_t)v4, a3);
}

uint64_t sub_180764330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

const void *sub_180764340(unint64_t a1, unint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (a1 | a2)
  {
    uint64_t v4 = *((void *)off_18C533F28 + 10);
    if (!v4) {
      uint64_t v4 = sub_180746538(10LL, 2LL);
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&uint8_t buf[16] = sub_180764330;
    __int16 v36 = &unk_1896F9C88;
    uint64_t v37 = v4;
    uint64_t v6 = (const __CFDictionary *)sub_180763F28( (uint64_t)"_CTServerConnectionCopyFirmwareSecurityInfo",  (uint64_t)buf,  TypeID);
    if (v6)
    {
      uint64_t v7 = v6;
      CFTypeRef Value = CFDictionaryGetValue(v6, (const void *)a1);
      if (Value)
      {
LABEL_6:
        CFRetain(Value);
LABEL_27:
        CFRelease(v7);
        return Value;
      }

      if (a2)
      {
        CFTypeRef Value = CFDictionaryGetValue(v7, (const void *)a2);
        if (Value) {
          goto LABEL_6;
        }
        uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v16) {
          CFTypeRef v22 = v16 + 1;
        }
        else {
          CFTypeRef v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        }
        _MGLog( (uint64_t)v22,  189LL,  (uint64_t)@"No %@ or %@ in CT security info dictionary",  v17,  v18,  v19,  v20,  v21,  a1);
        if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
LABEL_26:
          CFTypeRef Value = 0LL;
          goto LABEL_27;
        }

        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&uint8_t buf[12] = 2112;
        *(void *)&buf[14] = a2;
        CFTypeID v23 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v24 = "No %@ or %@ in CT security info dictionary";
        uint32_t v25 = 22;
      }

      else
      {
        uint64_t v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v26) {
          __int16 v32 = v26 + 1;
        }
        else {
          __int16 v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        }
        _MGLog((uint64_t)v32, 185LL, (uint64_t)@"No %@ in CT security info dictionary", v27, v28, v29, v30, v31, a1);
        if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        CFTypeID v23 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v24 = "No %@ in CT security info dictionary";
        uint32_t v25 = 12;
      }

      _os_log_impl(&dword_180741000, v23, OS_LOG_TYPE_DEFAULT, v24, buf, v25);
      goto LABEL_26;
    }

    uint64_t v9 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v9) {
      uint64_t v15 = v9 + 1;
    }
    else {
      uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v15, 198LL, (uint64_t)@"No CT security info dictionary", v10, v11, v12, v13, v14, v34);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "No CT security info dictionary",  buf,  2u);
    }
  }

  return 0LL;
}

CFTypeRef sub_1807645D4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (!(_DWORD)a1) {
    return 0LL;
  }
  uint64_t v6 = sub_180744CE0(a1);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))*((void *)off_18C533F28 + 27);
  if (!v7) {
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))sub_180746538(27LL, 2LL);
  }
  CFTypeID v8 = (const __CFString *)v7(a1, a3);
  uint64_t v9 = v8;
  if (!v8)
  {
    uint64_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v12) {
      uint64_t v18 = v12 + 1;
    }
    else {
      uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog( (uint64_t)v18,  217LL,  (uint64_t)@"No %@ in CT mobile equipment info dictionary",  v13,  v14,  v15,  v16,  v17,  (char)v6);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = v6;
      uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v20 = "No %@ in CT mobile equipment info dictionary";
LABEL_16:
      _os_log_impl(&dword_180741000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
    }

LABEL_23:
    CFTypeRef v11 = 0LL;
    if (!v6) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  if (!a2) {
    goto LABEL_8;
  }
  CFTypeID v10 = CFGetTypeID(v8);
  if (v10 != CFStringGetTypeID())
  {
    CFTypeID v21 = CFGetTypeID(v9);
    CFStringRef v22 = CFCopyTypeIDDescription(v21);
    CFTypeID v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v23) {
      uint64_t v29 = v23 + 1;
    }
    else {
      uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog( (uint64_t)v29,  224LL,  (uint64_t)@"Non-string (%@) for %@ in CT mobile equipment info dictionary (%@)",  v24,  v25,  v26,  v27,  v28,  (char)v22);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v39 = v22;
      __int16 v40 = 2112;
      uint64_t v41 = v6;
      __int16 v42 = 2112;
      CFTypeID v43 = v9;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Non-string (%@) for %@ in CT mobile equipment info dictionary (%@)",  buf,  0x20u);
    }

    CFRelease(v22);
    goto LABEL_23;
  }

  if (!CFStringGetLength(v9))
  {
    uint64_t v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v31) {
      uint64_t v37 = v31 + 1;
    }
    else {
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog( (uint64_t)v37,  229LL,  (uint64_t)@"Empty string for %@ in CT mobile equipment info dictionary",  v32,  v33,  v34,  v35,  v36,  (char)v6);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = v6;
      uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v20 = "Empty string for %@ in CT mobile equipment info dictionary";
      goto LABEL_16;
    }

    goto LABEL_23;
  }

    CFTypeRef v11 = 0LL;
    if (!v6) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  if (!a2) {
    goto LABEL_8;
  }
  CFTypeID v10 = CFGetTypeID(v8);
  if (v10 != CFStringGetTypeID())
  {
    CFTypeID v21 = CFGetTypeID(v9);
    CFStringRef v22 = CFCopyTypeIDDescription(v21);
    CFTypeID v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v23) {
      uint64_t v29 = v23 + 1;
    }
    else {
      uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog( (uint64_t)v29,  264LL,  (uint64_t)@"Non-string (%@) for %@ in SIM status interface (%@)",  v24,  v25,  v26,  v27,  v28,  (char)v22);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v39 = v22;
      __int16 v40 = 2112;
      uint64_t v41 = v6;
      __int16 v42 = 2112;
      CFTypeID v43 = v9;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Non-string (%@) for %@ in SIM status interface (%@)",  buf,  0x20u);
    }

    CFRelease(v22);
    goto LABEL_23;
  }

  if (!CFStringGetLength(v9))
  {
    uint64_t v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v31) {
      uint64_t v37 = v31 + 1;
    }
    else {
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog( (uint64_t)v37,  269LL,  (uint64_t)@"Empty string for %@ in in SIM status interface",  v32,  v33,  v34,  v35,  v36,  (char)v6);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = v6;
      uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v20 = "Empty string for %@ in in SIM status interface";
      goto LABEL_16;
    }

    goto LABEL_23;
  }

CFTypeRef sub_180764878(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (!(_DWORD)a1) {
    return 0LL;
  }
  uint64_t v6 = sub_180744D28(a1);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))*((void *)off_18C533F28 + 47);
  if (!v7) {
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))sub_180746538(47LL, 2LL);
  }
  CFTypeID v8 = (const __CFString *)v7(a1, a3);
  uint64_t v9 = v8;
  if (!v8)
  {
    uint64_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v12) {
      uint64_t v18 = v12 + 1;
    }
    else {
      uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v18, 257LL, (uint64_t)@"No %@ sim status interface", v13, v14, v15, v16, v17, (char)v6);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = v6;
      uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v20 = "No %@ sim status interface";
LABEL_16:
      _os_log_impl(&dword_180741000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
    }

CFTypeRef sub_180764B1C(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (uint64_t (*)(uint64_t))*((void *)off_18C533F28 + 42);
  if (!v2) {
    uint64_t v2 = (uint64_t (*)(uint64_t))sub_180746538(42LL, 2LL);
  }
  uint64_t v3 = (const void *)v2(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    CFTypeRef v5 = CFRetain(v3);
    CFRelease(v4);
    return v5;
  }

  else
  {
    uint64_t v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v7) {
      uint64_t v13 = v7 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v13, 290LL, (uint64_t)@"Empty phone number for slot %ld.", v8, v9, v10, v11, v12, a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v15 = a1;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Empty phone number for slot %ld.",  buf,  0xCu);
    }

    return 0LL;
  }

const void *sub_180764C54(const void *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  uint64_t v3 = (const __CFDictionary *)sub_180763F28((uint64_t)"copyCTCapabilities", (uint64_t)&unk_1896F9CC8, TypeID);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  CFTypeRef Value = CFDictionaryGetValue(v3, a1);
  uint64_t v6 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v4);
  return v6;
}

uint64_t sub_180764CC0(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char v8 = 0;
  CFTypeRef v5 = (uint64_t (*)(uint64_t, CFTypeRef *, char *))*((void *)off_18C533F28 + 17);
  if (!v5) {
    CFTypeRef v5 = (uint64_t (*)(uint64_t, CFTypeRef *, char *))sub_180746538(17LL, 2LL);
  }
  uint64_t v6 = v5(a2, a3, &v8);
  if (!v8)
  {
    if (*a3) {
      CFRelease(*a3);
    }
    *a3 = 0LL;
  }

  return v6;
}

uint64_t sub_180764D40(const char *a1, io_service_t *a2, io_connect_t *a3)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  uint64_t v6 = IOServiceMatching(a1);
  if (v6)
  {
    io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1896086A8], v6);
    if (MatchingService)
    {
      io_service_t v8 = MatchingService;
      if (IOServiceOpen(MatchingService, *MEMORY[0x1895FBBE0], 0, &connect))
      {
        uint64_t v9 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
        if (v9) {
          uint64_t v15 = v9 + 1;
        }
        else {
          uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
        }
        _MGLog( (uint64_t)v15,  28LL,  (uint64_t)@"IOServiceOpen failed for class '%s'",  v10,  v11,  v12,  v13,  v14,  (char)a1);
        BOOL v16 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0LL;
        if (v16)
        {
          *(_DWORD *)buf = 136315138;
          __int16 v40 = a1;
          uint64_t v18 = (os_log_s *)MEMORY[0x1895F8DA0];
          uint64_t v19 = "IOServiceOpen failed for class '%s'";
LABEL_14:
          uint32_t v28 = 12;
LABEL_20:
          _os_log_impl(&dword_180741000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v28);
          return 0LL;
        }
      }

      else
      {
        *a2 = v8;
        *a3 = connect;
        return 1LL;
      }
    }

    else
    {
      uint64_t v29 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
      if (v29) {
        uint64_t v35 = v29 + 1;
      }
      else {
        uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      }
      _MGLog((uint64_t)v35, 26LL, (uint64_t)@"IOServiceGetMatchingService failed", v30, v31, v32, v33, v34, v37);
      BOOL v36 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0LL;
      if (v36)
      {
        *(_WORD *)buf = 0;
        uint64_t v18 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v19 = "IOServiceGetMatchingService failed";
        uint32_t v28 = 2;
        goto LABEL_20;
      }
    }
  }

  else
  {
    uint64_t v20 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v26, 24LL, (uint64_t)@"IOServiceMatching failed for %s", v21, v22, v23, v24, v25, (char)a1);
    BOOL v27 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v27)
    {
      *(_DWORD *)buf = 136315138;
      __int16 v40 = a1;
      uint64_t v18 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v19 = "IOServiceMatching failed for %s";
      goto LABEL_14;
    }
  }

  return result;
}

uint64_t sub_180764F68(io_iterator_t iterator, uint64_t a2)
{
  char v6 = 0;
  do
  {
    uint64_t result = IOIteratorNext(iterator);
    if (!(_DWORD)result) {
      break;
    }
    io_object_t v5 = result;
    (*(void (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, result, &v6);
    uint64_t result = IOObjectRelease(v5);
  }

  while (!v6);
  return result;
}

void sub_180764FD0(CFDictionaryRef matching, uint64_t a2)
{
  kern_return_t MatchingServices;
  io_iterator_t v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t v13[12];
  io_iterator_t existing;
  existing = 0;
  if (matching)
  {
    MatchingServices = IOServiceGetMatchingServices(*MEMORY[0x1896086A8], matching, &existing);
    uint64_t v4 = existing;
    if (MatchingServices) {
      io_object_t v5 = 1;
    }
    else {
      io_object_t v5 = existing == 0;
    }
    if (!v5)
    {
      sub_180764F68(existing, a2);
      uint64_t v4 = existing;
    }

    if (v4) {
      IOObjectRelease(v4);
    }
  }

  else
  {
    char v6 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v6) {
      uint64_t v12 = v6 + 1;
    }
    else {
      uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v12, 56LL, (uint64_t)@"called with a NULL matching dictionary", v7, v8, v9, v10, v11, v13[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "called with a NULL matching dictionary",  v13,  2u);
    }
  }

uint64_t sub_1807650AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  io_object_t object = 0;
  int v4 = MEMORY[0x186E02048](a1, a2, &object);
  uint64_t result = object;
  if (!v4 && object)
  {
    sub_180764F68(object, a3);
    uint64_t result = object;
  }

  if ((_DWORD)result) {
    return IOObjectRelease(result);
  }
  return result;
}

uint64_t sub_180765100(int a1, char *name)
{
  if (a1) {
    uint64_t v2 = IOServiceNameMatching(name);
  }
  else {
    uint64_t v2 = IOServiceMatching(name);
  }
  if (v2) {
    return IOServiceGetMatchingService(*MEMORY[0x1896086A8], v2);
  }
  int v4 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
  if (v4) {
    uint64_t v10 = v4 + 1;
  }
  else {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
  }
  _MGLog((uint64_t)v10, 90LL, (uint64_t)@"Can't create matching dict", v5, v6, v7, v8, v9, v11[0]);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Can't create matching dict", v11, 2u);
  }

  return 0LL;
}

BOOL sub_1807651CC(int a1, char *a2)
{
  io_object_t v2 = sub_180765100(a1, a2);
  io_object_t v3 = v2;
  if (v2) {
    IOObjectRelease(v2);
  }
  return v3 != 0;
}

CFTypeRef sub_180765200(int a1, char *a2, const __CFString *a3)
{
  io_registry_entry_t v4 = sub_180765100(a1, a2);
  if (!v4) {
    return 0LL;
  }
  io_object_t v5 = v4;
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v4, a3, (CFAllocatorRef)*MEMORY[0x189604DB0], 0);
  IOObjectRelease(v5);
  return CFProperty;
}

CFMutableDictionaryRef sub_180765258(int a1, char *a2)
{
  kern_return_t v5;
  mach_error_t v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  CFMutableDictionaryRef properties;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  io_registry_entry_t v3 = sub_180765100(a1, a2);
  if (!v3) {
    return 0LL;
  }
  io_object_t v4 = v3;
  properties = 0LL;
  io_object_t v5 = IORegistryEntryCreateCFProperties(v3, &properties, 0LL, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    uint64_t v8 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v8) {
      uint64_t v7 = v8 + 1;
    }
    mach_error_string(v6);
    _MGLog( (uint64_t)v7,  134LL,  (uint64_t)@"IORegistryEntryCreateCFProperties failed for '%s': %s",  v9,  v10,  v11,  v12,  v13,  (char)a2);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = mach_error_string(v6);
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = a2;
      uint64_t v19 = 2080;
      uint64_t v20 = v14;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "IORegistryEntryCreateCFProperties failed for '%s': %s",  buf,  0x16u);
    }
  }

  IOObjectRelease(v4);
  return properties;
}

CFTypeRef sub_180765388(int a1, char *a2, const __CFString *a3)
{
  io_registry_entry_t v4 = sub_180765100(a1, a2);
  if (!v4) {
    return 0LL;
  }
  io_object_t v5 = v4;
  CFTypeRef v6 = IORegistryEntrySearchCFProperty(v4, "IOService", a3, (CFAllocatorRef)*MEMORY[0x189604DB0], 1u);
  IOObjectRelease(v5);
  return v6;
}

uint64_t sub_1807653E8()
{
  uint64_t result = sub_180765418("AppleAuthCPRelay");
  if (!result) {
    return sub_180765418("AppleAuthCPAID");
  }
  return result;
}

uint64_t sub_180765418(const char *a1)
{
  uint64_t v5 = 0LL;
  CFTypeRef v6 = &v5;
  uint64_t v7 = 0x2000000000LL;
  uint64_t v8 = 0LL;
  CFStringRef v1 = IOServiceMatching(a1);
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  v4[2] = sub_180766FE0;
  v4[3] = &unk_1896F9DB8;
  v4[4] = &v5;
  sub_180764FD0(v1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

BOOL sub_1807654A4(int a1, char *a2, const __CFString *a3)
{
  CFTypeRef v3 = sub_180765200(a1, a2, a3);
  CFTypeRef v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
  return v4 != 0LL;
}

CFTypeRef sub_1807654D8(char *a1)
{
  return sub_180765200(1, a1, @"local-mac-address");
}

uint64_t sub_1807654EC()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000LL;
  uint64_t v7 = 0LL;
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = sub_180765588;
  v3[3] = &unk_1896F9D18;
  v3[4] = &v4;
  CFMutableDictionaryRef v0 = IOServiceMatching("IONetworkController");
  sub_180765A98((uint64_t)v0, 5, (uint64_t)v3, 0LL);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

BOOL sub_180765588(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  int v3 = MEMORY[0x186E02030](a2, "IOService", 3LL, &v14);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v5) {
      uint64_t v11 = v5 + 1;
    }
    else {
      uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v11, 258LL, (uint64_t)@"unable to create parent iterator: 0x%x\n", v6, v7, v8, v9, v10, v4);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v16 = v4;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "unable to create parent iterator: 0x%x\n",  buf,  8u);
    }
  }

  else
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 0x40000000LL;
    void v13[2] = sub_1807656E0;
    v13[3] = &unk_1896F9CF0;
    v13[4] = *(void *)(a1 + 32);
    sub_180764F68(v14, (uint64_t)v13);
    IOObjectRelease(v14);
  }

  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) != 0LL;
}

void sub_1807656E0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  io_registry_entry_t v4 = a2;
  uint8_t v18[16] = *MEMORY[0x1895F89C0];
  int v6 = MEMORY[0x186E02054](a2, v18);
  if (v6)
  {
    int v7 = v6;
    uint64_t v8 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v8) {
      io_object_t v14 = v8 + 1;
    }
    else {
      io_object_t v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v14, 250LL, (uint64_t)@"unable to get parent entry's name: 0x%x\n", v9, v10, v11, v12, v13, v7);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v17 = v7;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "unable to get parent entry's name: 0x%x\n",  buf,  8u);
    }
  }

  else if (!(LODWORD(v18[0]) ^ 0x6F696473 | BYTE4(v18[0])) {
         || !(LODWORD(v18[0]) ^ 0x6E616C77 | BYTE4(v18[0]))
  }
         || (v18[0] == 0x2D696E6F6372616DLL ? (BOOL v15 = *(void *)((char *)v18 + 5) == 0x696669772D696ELL) : (BOOL v15 = 0),
             !v15))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = IORegistryEntryCreateCFProperty( v4,  @"local-mac-address",  (CFAllocatorRef)*MEMORY[0x189604DB0],  0);
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    *a3 = 1;
  }
}

void sub_180765884(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = dispatch_semaphore_create(0LL);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = sub_180765930;
  block[3] = &unk_1896F9D40;
  int v11 = a1;
  block[4] = a2;
  block[5] = a3;
  block[6] = a4;
  block[7] = v8;
  dispatch_async(global_queue, block);
  dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v8);
}

uint64_t sub_180765930(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  Current = CFRunLoopGetCurrent();
  CFRunLoopAddCommonMode(Current, @"MobileGestaltRunLoopMode");
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16LL))())
  {
    do
    {
      do
        CFRunLoopRunResult v3 = CFRunLoopRunInMode(@"MobileGestaltRunLoopMode", (double)*(int *)(a1 + 64), 1u);
      while (v3 == kCFRunLoopRunHandledSource);
      CFRunLoopRunResult v4 = v3;
      uint64_t v5 = *(void *)(a1 + 40);
    }

    while (v5 && ((*(uint64_t (**)(void))(v5 + 16))() & 1) != 0);
    int v6 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v6) {
      uint64_t v12 = v6 + 1;
    }
    else {
      uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog( (uint64_t)v12,  309LL,  (uint64_t)@"giving up waiting for match - runloop result is %d\n",  v7,  v8,  v9,  v10,  v11,  v4);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      CFRunLoopRunResult v16 = v4;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "giving up waiting for match - runloop result is %d\n",  buf,  8u);
    }
  }

  uint64_t v13 = *(void *)(a1 + 48);
  if (v13) {
    (*(void (**)(void))(v13 + 16))();
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void sub_180765A98(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  v7[0] = 0LL;
  v7[1] = v7;
  v7[2] = 0x2000000000LL;
  int v8 = 0;
  v6[0] = 0LL;
  v6[1] = v6;
  v6[2] = 0x2000000000LL;
  v6[3] = 0LL;
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 0x40000000LL;
  v5[2] = sub_180765B60;
  v5[3] = &unk_1896F9D68;
  v5[4] = a3;
  void v5[5] = v6;
  void v5[6] = v7;
  v5[7] = a1;
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  v4[2] = sub_180765D68;
  v4[3] = &unk_1896F9D90;
  v4[4] = v6;
  void v4[5] = v7;
  sub_180765884(a2, (uint64_t)v5, a4, (uint64_t)v4);
  _Block_object_dispose(v6, 8);
  _Block_object_dispose(v7, 8);
}

BOOL sub_180765B60(uint64_t a1, void *a2)
{
  kern_return_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  io_iterator_t v14;
  uint8_t buf[8];
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, _BYTE *);
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  *a2 = *(void *)(a1 + 32);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = IONotificationPortCreate(*MEMORY[0x1896086A8]);
  Current = CFRunLoopGetCurrent();
  RunLoopSource = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(*(void *)(*(void *)(a1 + 40) + 8LL)
                                                                              + 24LL));
  CFRunLoopAddSource(Current, RunLoopSource, @"MobileGestaltRunLoopMode");
  int v6 = IOServiceAddMatchingNotification( *(IONotificationPortRef *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  "IOServiceMatched",  *(CFDictionaryRef *)(a1 + 56),  (IOServiceMatchingCallback)sub_180765D10,  a2,  (io_iterator_t *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
  if (v6)
  {
    uint64_t v7 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v7) {
      uint64_t v13 = v7 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog( (uint64_t)v13,  349LL,  (uint64_t)@"unable to register for match notifications: 0x%x\n",  v8,  v9,  v10,  v11,  v12,  v6);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "unable to register for match notifications: 0x%x\n",  buf,  8u);
    }
  }

  else
  {
    io_object_t v14 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    *(void *)buf = MEMORY[0x1895F87A8];
    uint64_t v17 = 0x40000000LL;
    uint64_t v18 = sub_1807670B4;
    uint64_t v19 = &unk_1896F9DD8;
    uint64_t v20 = a2;
    sub_180764F68(v14, (uint64_t)buf);
  }

  return v6 == 0;
}

uint64_t sub_180765D10(uint64_t a1, io_iterator_t iterator)
{
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = sub_1807670B4;
  v3[3] = &unk_1896F9DD8;
  v3[4] = a1;
  return sub_180764F68(iterator, (uint64_t)v3);
}

uint64_t sub_180765D68(uint64_t a1)
{
  uint64_t v2 = *(IONotificationPort **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v2) {
    IONotificationPortDestroy(v2);
  }
  uint64_t result = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if ((_DWORD)result) {
    return IOObjectRelease(result);
  }
  return result;
}

CFTypeRef sub_180765DB4(char *path, const __CFString *a2, int a3)
{
  io_registry_entry_t v5 = IORegistryEntryFromPath(*MEMORY[0x1896086A8], path);
  if (v5)
  {
    io_registry_entry_t v6 = v5;
    if (!a3)
    {
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v5, a2, 0LL, 0);
      goto LABEL_7;
    }

    CFTypeRef v7 = IORegistryEntryCreateCFProperty(v5, @"IORegistryEntryPropertyKeys", 0LL, 0);
    if (v7)
    {
      int v8 = v7;
      CFTypeRef CFProperty = sub_18074498C(v6, v7, a2, a3);
      CFRelease(v8);
LABEL_7:
      IOObjectRelease(v6);
      return CFProperty;
    }
  }

  return 0LL;
}

uint64_t sub_180765E6C(char *a1, const __CFString *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  CFTypeRef v9 = sub_180765DB4(a1, a2, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 == CFNumberGetTypeID())
    {
      unsigned int valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)v10, kCFNumberIntType, &valuePtr))
      {
        a4 = valuePtr;
LABEL_31:
        CFRelease(v10);
        return a4;
      }

      uint64_t v31 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
      if (v31) {
        char v37 = v31 + 1;
      }
      else {
        char v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      }
      _MGLog( (uint64_t)v37,  462LL,  (uint64_t)@"Error getting int value for key %@ (%@)!",  v32,  v33,  v34,  v35,  v36,  (char)a2);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 138412546;
      CFTypeID v49 = (CFTypeID)a2;
      __int16 v50 = 2112;
      uint64_t v51 = (void *)v10;
      uint64_t v29 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v30 = "Error getting int value for key %@ (%@)!";
    }

    else
    {
      CFTypeID v19 = CFGetTypeID(v10);
      if (v19 == CFDataGetTypeID())
      {
        CFTypeID v20 = CFGetTypeID(v10);
        if (v20 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v10) == 4)
        {
          a4 = *(unsigned int *)CFDataGetBytePtr((CFDataRef)v10);
          goto LABEL_31;
        }

        uint64_t v39 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
        if (v39) {
          CFStringRef v45 = v39 + 1;
        }
        else {
          CFStringRef v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
        }
        _MGLog( (uint64_t)v45,  468LL,  (uint64_t)@"value for %@ property of %s is invalid (%@)",  v40,  v41,  v42,  v43,  v44,  (char)a2);
        if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_31;
        }
        *(_DWORD *)buf = 138412802;
        CFTypeID v49 = (CFTypeID)a2;
        __int16 v50 = 2080;
        uint64_t v51 = a1;
        __int16 v52 = 2112;
        char v53 = v10;
        uint64_t v29 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v30 = "value for %@ property of %s is invalid (%@)";
        uint32_t v38 = 32;
LABEL_30:
        _os_log_impl(&dword_180741000, v29, OS_LOG_TYPE_DEFAULT, v30, buf, v38);
        goto LABEL_31;
      }

      uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      uint64_t v22 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
      if (v22) {
        uint64_t v21 = v22 + 1;
      }
      char v23 = CFGetTypeID(v10);
      _MGLog((uint64_t)v21, 472LL, (uint64_t)@"invalid CFTypeID %lu for key %@", v24, v25, v26, v27, v28, v23);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 134218242;
      CFTypeID v49 = CFGetTypeID(v10);
      __int16 v50 = 2112;
      uint64_t v51 = (void *)a2;
      uint64_t v29 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v30 = "invalid CFTypeID %lu for key %@";
    }

    uint32_t v38 = 22;
    goto LABEL_30;
  }

  if (a5)
  {
    uint64_t v12 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    uint64_t v18 = v12
        ? v12 + 1
        : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v18, 477LL, (uint64_t)@"missing value for property %@", v13, v14, v15, v16, v17, (char)a2);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFTypeID v49 = (CFTypeID)a2;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "missing value for property %@",  buf,  0xCu);
    }
  }

  return a4;
}

BOOL sub_1807661A8(char *a1, const __CFString *a2, int a3)
{
  CFTypeRef v3 = sub_180765DB4(a1, a2, a3);
  CFTypeRef v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
  return v4 != 0LL;
}

BOOL sub_1807661DC(char *a1, const __CFString *a2, int a3)
{
  return sub_180765E6C(a1, a2, a3, 0LL, 0) != 0;
}

CFNumberRef sub_180766200(char *a1, const __CFString *a2, int a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  io_registry_entry_t v5 = (const __CFData *)sub_180765DB4(a1, a2, a3);
  if (v5)
  {
    io_registry_entry_t v6 = v5;
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFDataGetTypeID())
    {
      CFIndex Length = CFDataGetLength(v6);
      if ((unint64_t)(Length - 1) <= 3)
      {
        BytePtr = CFDataGetBytePtr(v6);
        CFNumberType v10 = kCFNumberSInt32Type;
LABEL_15:
        CFNumberRef v11 = CFNumberCreate(0LL, v10, BytePtr);
        goto LABEL_16;
      }

      if ((unint64_t)(Length - 1) <= 7)
      {
        BytePtr = CFDataGetBytePtr(v6);
        CFNumberType v10 = kCFNumberSInt64Type;
        goto LABEL_15;
      }

      CFIndex v23 = Length;
      uint64_t v24 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
      if (v24) {
        uint64_t v30 = v24 + 1;
      }
      else {
        uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      }
      _MGLog( (uint64_t)v30,  513LL,  (uint64_t)@"can't create number from data %s %@ of length %llu\n",  v25,  v26,  v27,  v28,  v29,  (char)a1);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
LABEL_12:
        CFNumberRef v11 = 0LL;
LABEL_16:
        CFRelease(v6);
        return v11;
      }

      *(_DWORD *)buf = 136315650;
      uint64_t v32 = a1;
      __int16 v33 = 2112;
      uint64_t v34 = a2;
      __int16 v35 = 2048;
      CFIndex v36 = v23;
      CFTypeID v19 = (os_log_s *)MEMORY[0x1895F8DA0];
      CFTypeID v20 = "can't create number from data %s %@ of length %llu\n";
      uint32_t v21 = 32;
    }

    else
    {
      uint64_t v12 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
      if (v12) {
        uint64_t v18 = v12 + 1;
      }
      else {
        uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      }
      _MGLog((uint64_t)v18, 516LL, (uint64_t)@"can't create number from %s %@", v13, v14, v15, v16, v17, (char)a1);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_12;
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v32 = a1;
      __int16 v33 = 2112;
      uint64_t v34 = a2;
      CFTypeID v19 = (os_log_s *)MEMORY[0x1895F8DA0];
      CFTypeID v20 = "can't create number from %s %@";
      uint32_t v21 = 22;
    }

    _os_log_impl(&dword_180741000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
    goto LABEL_12;
  }

  return 0LL;
}

const void *sub_180766414(char *a1, const __CFString *a2, int a3)
{
  CFTypeRef v3 = sub_180765DB4(a1, a2, a3);
  CFTypeRef v4 = v3;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 != CFDataGetTypeID())
    {
      CFRelease(v4);
      return 0LL;
    }
  }

  return v4;
}

CFStringRef sub_180766460(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID()) {
    return (CFStringRef)CFRetain(a1);
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFDataGetTypeID() || CFDataGetLength((CFDataRef)a1) < 1)
  {
    CFNumberType v10 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v10) {
      uint64_t v16 = v10 + 1;
    }
    else {
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v16, 552LL, (uint64_t)@"Unexpected type returned for key %@.", v11, v12, v13, v14, v15, a2);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT)) {
      sub_1807999B8(a2);
    }
    return 0LL;
  }

  BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)a1);
  if (!BytePtr[CFDataGetLength((CFDataRef)a1) - 1]) {
    return CFStringCreateWithCString(0LL, BytePtr, 0x8000100u);
  }
  int v8 = CFDataGetBytePtr((CFDataRef)a1);
  CFIndex Length = CFDataGetLength((CFDataRef)a1);
  return CFStringCreateWithBytes(0LL, v8, Length, 0x8000100u, 0);
}

CFStringRef sub_1807665C0(char *a1, const __CFString *a2, int a3)
{
  CFStringRef result = (CFStringRef)sub_180765DB4(a1, a2, a3);
  if (result)
  {
    CFStringRef v5 = result;
    CFStringRef v6 = sub_180766460(result, (uint64_t)a2);
    CFRelease(v5);
    return v6;
  }

  return result;
}

CFStringRef sub_180766600(int a1, char *a2, const __CFString *a3)
{
  CFStringRef result = (CFStringRef)sub_180765200(a1, a2, a3);
  if (result)
  {
    CFStringRef v5 = result;
    CFStringRef v6 = sub_180766460(result, (uint64_t)a3);
    CFRelease(v5);
    return v6;
  }

  return result;
}

uint64_t sub_180766640(int a1, char *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  CFTypeID v7 = (const __CFData *)sub_180765200(a1, a2, a3);
  int v8 = v7;
  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 == CFDataGetTypeID() && CFDataGetLength(v8) == 4)
    {
      a4 = *(unsigned int *)CFDataGetBytePtr(v8);
LABEL_11:
      CFRelease(v8);
      return a4;
    }
  }

  CFNumberType v10 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
  if (v10) {
    uint64_t v16 = v10 + 1;
  }
  else {
    uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
  }
  _MGLog( (uint64_t)v16,  596LL,  (uint64_t)@"value for %@ property of %s is invalid (%@)",  v11,  v12,  v13,  v14,  v15,  (char)a3);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    CFTypeID v19 = a3;
    __int16 v20 = 2080;
    uint32_t v21 = a2;
    __int16 v22 = 2112;
    CFIndex v23 = v8;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "value for %@ property of %s is invalid (%@)",  buf,  0x20u);
  }

  if (v8) {
    goto LABEL_11;
  }
  return a4;
}

CFDictionaryRef sub_180766794(const __CFString *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (const __CFData *)sub_180765DB4("IODeviceTree:/product/facetime", a1, 0);
  CFTypeRef v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 8)
    {
      BytePtr = (unsigned __int16 *)CFDataGetBytePtr(v3);
      CFDictionaryRef v6 = sub_1807668E4(BytePtr);
LABEL_11:
      CFRelease(v3);
      return v6;
    }
  }

  CFTypeID v7 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
  if (v7) {
    uint64_t v13 = v7 + 1;
  }
  else {
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
  }
  _MGLog((uint64_t)v13, 662LL, (uint64_t)@"unexpected %@ property %@", v8, v9, v10, v11, v12, (char)a1);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    uint64_t v18 = v3;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "unexpected %@ property %@", buf, 0x16u);
  }

  CFDictionaryRef v6 = 0LL;
  CFDictionaryRef result = 0LL;
  if (v3) {
    goto LABEL_11;
  }
  return result;
}

CFDictionaryRef sub_1807668E4(unsigned __int16 *a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  int v1 = *a1;
  int v2 = a1[2];
  int v9 = a1[3];
  int valuePtr = v1;
  int v8 = v2;
  CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, &v9);
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberIntType, &v8);
  *(_OWORD *)keys = xmmword_1896F9DF8;
  uint64_t v13 = @"f";
  values[0] = v3;
  values[1] = v4;
  values[2] = v5;
  CFDictionaryRef v6 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  3LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  CFRelease(v3);
  CFRelease(v4);
  CFRelease(v5);
  return v6;
}

__CFArray *sub_1807669EC(const __CFString *a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  int v2 = (const __CFData *)sub_180765DB4("IODeviceTree:/product/facetime", a1, 0);
  CFNumberRef v3 = v2;
  if (v2 && (CFTypeID v4 = CFGetTypeID(v2), v4 == CFDataGetTypeID()))
  {
    CFIndex Length = CFDataGetLength(v3);
    if ((Length & 7) != 0)
    {
      CFDictionaryRef v6 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
      if (v6) {
        uint64_t v12 = v6 + 1;
      }
      else {
        uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      }
      _MGLog( (uint64_t)v12,  689LL,  (uint64_t)@"%@ property has unexpected length %lu",  v7,  v8,  v9,  v10,  v11,  (char)a1);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v27 = a1;
        __int16 v28 = 2048;
        CFIndex v29 = Length;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%@ property has unexpected length %lu",  buf,  0x16u);
      }

      CFMutableStringRef Mutable = 0LL;
      goto LABEL_17;
    }

    CFMutableStringRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    BytePtr = CFDataGetBytePtr(v3);
    if (Length < 1)
    {
LABEL_17:
      CFRelease(v3);
      return Mutable;
    }

    CFIndex v23 = BytePtr;
    for (CFIndex i = 0LL; i < Length; i += 8LL)
    {
      CFDictionaryRef v25 = sub_1807668E4((unsigned __int16 *)&v23[i]);
      CFArrayAppendValue(Mutable, v25);
      CFRelease(v25);
    }
  }

  else
  {
    uint64_t v14 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v14) {
      __int16 v20 = v14 + 1;
    }
    else {
      __int16 v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v20, 683LL, (uint64_t)@"Could not read %@ data property", v15, v16, v17, v18, v19, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v27 = a1;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not read %@ data property",  buf,  0xCu);
    }

    CFMutableStringRef Mutable = 0LL;
  }

  if (v3) {
    goto LABEL_17;
  }
  return Mutable;
}

CFDataRef sub_180766C14(const char *a1, uint32_t a2, const void *a3, size_t a4, size_t a5)
{
  return sub_180766C2C(a1, a2, 0LL, 0, a3, a4, a5);
}

CFDataRef sub_180766C2C( const char *a1, uint32_t a2, const uint64_t *a3, uint32_t a4, const void *a5, size_t a6, size_t a7)
{
  kern_return_t v15;
  mach_error_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  CFDataRef v32;
  mach_port_t connection[2];
  CFIndex length;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  uint32_t v39;
  __int16 v40;
  char *v41;
  uint64_t v42;
  uint64_t v42 = *MEMORY[0x1895F89C0];
  *(void *)connection = 0LL;
  length = a7;
  if ((sub_180764D40(a1, &connection[1], connection) & 1) == 0)
  {
    CFDictionaryRef v25 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v25) {
      uint64_t v31 = v25 + 1;
    }
    else {
      uint64_t v31 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v31, 721LL, (uint64_t)@"unable to connect to service %s", v26, v27, v28, v29, v30, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v37 = a1;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "unable to connect to service %s",  buf,  0xCu);
    }

    outputStruct = 0LL;
    goto LABEL_13;
  }

  outputStruct = malloc(a7);
  uint64_t v15 = IOConnectCallMethod(connection[0], a2, a3, a4, a5, a6, 0LL, 0LL, outputStruct, (size_t *)&length);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    uint64_t v18 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c",  47);
    if (v18) {
      uint64_t v17 = v18 + 1;
    }
    mach_error_string(v16);
    _MGLog( (uint64_t)v17,  739LL,  (uint64_t)@"IOConnectCallMethod(%s,%u) failed: %s",  v19,  v20,  v21,  v22,  v23,  (char)a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = mach_error_string(v16);
      *(_DWORD *)buf = 136315650;
      uint64_t v37 = a1;
      uint32_t v38 = 1024;
      uint64_t v39 = a2;
      uint64_t v40 = 2080;
      uint64_t v41 = v24;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "IOConnectCallMethod(%s,%u) failed: %s",  buf,  0x1Cu);
    }

LABEL_13:
    uint64_t v32 = 0LL;
    goto LABEL_14;
  }

  uint64_t v32 = CFDataCreateWithBytesNoCopy(0LL, (const UInt8 *)outputStruct, length, (CFAllocatorRef)*MEMORY[0x189604DB8]);
LABEL_14:
  if (connection[0]) {
    IOServiceClose(connection[0]);
  }
  if (connection[1]) {
    IOObjectRelease(connection[1]);
  }
  if (outputStruct && !v32) {
    free(outputStruct);
  }
  return v32;
}

CFDataRef sub_180766E84(const char *a1, uint32_t a2, const uint64_t *a3, uint32_t a4, size_t a5)
{
  return sub_180766C2C(a1, a2, a3, a4, 0LL, 0LL, a5);
}

BOOL sub_180766E94()
{
  CFTypeRef v0 = IOPSCopyPowerSourcesInfo();
  if (v0)
  {
    int v1 = v0;
    int v2 = IOPSCopyPowerSourcesList(v0);
    if (v2)
    {
      CFNumberRef v3 = v2;
      CFIndex Count = CFArrayGetCount(v2);
      if (Count < 1)
      {
        BOOL v7 = 0;
      }

      else
      {
        CFIndex v5 = Count;
        CFIndex v6 = 0LL;
        BOOL v7 = 1;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
          if (ValueAtIndex)
          {
            uint64_t v9 = IOPSGetPowerSourceDescription(v1, ValueAtIndex);
            if (v9)
            {
              uint64_t v10 = v9;
              CFTypeRef Value = (const __CFBoolean *)CFDictionaryGetValue(v9, @"Is Present");
              if (Value)
              {
                uint64_t v12 = Value;
                CFTypeID v13 = CFGetTypeID(Value);
                if (v13 == CFBooleanGetTypeID())
                {
                  if (CFBooleanGetValue(v12))
                  {
                    uint64_t v14 = (const __CFString *)CFDictionaryGetValue(v10, @"Type");
                    if (v14)
                    {
                      uint64_t v15 = v14;
                      CFTypeID v16 = CFGetTypeID(v14);
                      if (v16 == CFStringGetTypeID()
                        && CFStringCompare(v15, @"InternalBattery", 0LL) == kCFCompareEqualTo)
                      {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }

          BOOL v7 = ++v6 < v5;
        }

        while (v5 != v6);
      }

      CFRelease(v3);
    }

    else
    {
      BOOL v7 = 0;
    }

    CFRelease(v1);
  }

  else
  {
    return 0;
  }

  return v7;
}

void sub_180766FE0(uint64_t a1, io_registry_entry_t entry, _BYTE *a3)
{
  CFIndex v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFTypeRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty( entry,  @"flags",  (CFAllocatorRef)*MEMORY[0x189604DB0],  0);
  if (CFProperty)
  {
    uint64_t v8 = CFProperty;
    CFTypeID v9 = CFGetTypeID(CFProperty);
    if (v9 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
      if ((~valuePtr & 0x30000) == 0)
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = IORegistryEntryCreateCFProperty( entry,  @"IDSN",  v6,  0);
        *a3 = 1;
      }
    }

    CFRelease(v8);
  }

uint64_t sub_1807670B4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16LL))();
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = result;
  if ((_DWORD)result) {
    *a3 = 1;
  }
  return result;
}

CFTypeRef sub_1807670F8()
{
  return sub_180767104(@"AppleDiagnosticData");
}

CFTypeRef sub_180767104(const __CFString *a1)
{
  CFTypeRef v2 = sub_180765200(0, "AppleDiagnosticDataAccess", a1);
  if (!v2)
  {
    CFTypeRef v2 = sub_180765200(0, "AppleDiagnosticDataAccessReadOnly", a1);
    if (!v2)
    {
      uint64_t v12 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v12) {
        uint64_t v18 = v12 + 1;
      }
      else {
        uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v18,  122LL,  (uint64_t)@"Unable to read diagnostic data from service",  v13,  v14,  v15,  v16,  v17,  v19[0]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Unable to read diagnostic data from service",  buf,  2u);
      }

      return 0LL;
    }
  }

  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 != CFDataGetTypeID())
  {
    CFTypeID v4 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v4) {
      uint64_t v10 = v4 + 1;
    }
    else {
      uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v10, 129LL, (uint64_t)@"diagnostic data isn't chicken, it's beef!", v5, v6, v7, v8, v9, v19[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "diagnostic data isn't chicken, it's beef!",  v19,  2u);
    }

    CFRelease(v2);
    return 0LL;
  }

  return v2;
}

CFTypeRef sub_180767260()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000LL;
  uint64_t v7 = sub_180766414("IODeviceTree:/chosen", @"syscfg-v2-data", 0);
  CFTypeRef v0 = (CFTypeRef)v5[3];
  if (!v0)
  {
    CFTypeRef v0 = sub_180767104(@"AppleDiagnosticDataSysCfg");
    v5[3] = (uint64_t)v0;
    if (!v0)
    {
      if ((sub_1807463A0() & 1) != 0)
      {
        CFTypeRef v0 = 0LL;
      }

      else
      {
        CFTypeRef v0 = (CFTypeRef)v5[3];
        if (!v0)
        {
          CFMutableDictionaryRef v1 = IOServiceMatching("AppleDiagnosticDataAccessReadOnly");
          v3[0] = MEMORY[0x1895F87A8];
          v3[1] = 0x40000000LL;
          v3[2] = sub_18076735C;
          v3[3] = &unk_1896F9E18;
          v3[4] = &v4;
          sub_180765A98((uint64_t)v1, 5, (uint64_t)v3, 0LL);
          CFTypeRef v0 = (CFTypeRef)v5[3];
        }
      }
    }
  }

  _Block_object_dispose(&v4, 8);
  return v0;
}

uint64_t sub_18076735C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_180767104(@"AppleDiagnosticDataSysCfg");
  return 1LL;
}

const void *sub_180767394()
{
  else {
    return 0LL;
  }
}

__CFData *sub_1807673CC(unsigned int a1)
{
  kern_return_t v2;
  kern_return_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  os_log_s *v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint32_t v20;
  __CFData *Mutable;
  kern_return_t v22;
  kern_return_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char v46;
  uint32_t outputCnt;
  uint64_t output;
  mach_port_t connection[2];
  uint8_t buf[4];
  uint32_t v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  kern_return_t v59;
  uint64_t v60[3];
  uint64_t input[2];
  input[1] = *MEMORY[0x1895F89C0];
  *(void *)connection = 0LL;
  if ((sub_180764D40("AppleNVMeEAN", &connection[1], connection) & 1) == 0)
  {
    uint64_t v13 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v13) {
      uint64_t v19 = v13 + 1;
    }
    else {
      uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v19, 188LL, (uint64_t)@"Could not open EAN service and connect", v14, v15, v16, v17, v18, v46);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_WORD *)buf = 0;
    uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v12 = "Could not open EAN service and connect";
    __int16 v20 = 2;
    goto LABEL_27;
  }

  input[0] = a1;
  output = 0LL;
  outputCnt = 1;
  CFTypeRef v2 = IOConnectCallScalarMethod(connection[0], 3u, input, 1u, &output, &outputCnt);
  if (v2)
  {
    CFTypeID v3 = v2;
    uint64_t v4 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v4) {
      uint64_t v10 = v4 + 1;
    }
    else {
      uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v10,  206LL,  (uint64_t)@"Could not get size of EAN data (IOConnectCallScalarMethod kAppleNVMeEANGetSize returned 0x%X)",  v5,  v6,  v7,  v8,  v9,  v3);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 67109120;
    uint64_t v51 = v3;
    uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v12 = "Could not get size of EAN data (IOConnectCallScalarMethod kAppleNVMeEANGetSize returned 0x%X)";
    goto LABEL_26;
  }

  if (outputCnt != 1)
  {
    uint64_t v31 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v31) {
      uint64_t v37 = v31 + 1;
    }
    else {
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v37,  213LL,  (uint64_t)@"Expected 1 output value for kAppleNVMeEANGetSize but got %d",  v32,  v33,  v34,  v35,  v36,  outputCnt);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 67109120;
    uint64_t v51 = outputCnt;
    uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v12 = "Expected 1 output value for kAppleNVMeEANGetSize but got %d";
LABEL_26:
    __int16 v20 = 8;
LABEL_27:
    _os_log_impl(&dword_180741000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, v20);
LABEL_28:
    CFMutableStringRef Mutable = 0LL;
    goto LABEL_29;
  }

  if (!output)
  {
    uint64_t v39 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v39) {
      CFStringRef v45 = v39 + 1;
    }
    else {
      CFStringRef v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v45,  223LL,  (uint64_t)@"Size of EAN image '%c%c%c%c' is zero. Returning NULL",  v40,  v41,  v42,  v43,  v44,  SHIBYTE(a1));
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 67109888;
    uint64_t v51 = HIBYTE(a1);
    __int16 v52 = 1024;
    char v53 = BYTE2(a1);
    uint64_t v54 = 1024;
    uint64_t v55 = BYTE1(a1);
    uint64_t v56 = 1024;
    __int16 v57 = a1;
    uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v12 = "Size of EAN image '%c%c%c%c' is zero. Returning NULL";
    __int16 v20 = 26;
    goto LABEL_27;
  }

  CFMutableStringRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], output);
  CFDataSetLength(Mutable, output);
  v60[0] = a1;
  v60[1] = (uint64_t)CFDataGetMutableBytePtr(Mutable);
  v60[2] = output;
  __int16 v22 = IOConnectCallScalarMethod(connection[0], 4u, v60, 3u, 0LL, 0LL);
  if (v22)
  {
    CFIndex v23 = v22;
    uint64_t v24 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    uint64_t v30 = v24
        ? v24 + 1
        : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog( (uint64_t)v30,  246LL,  (uint64_t)@"Could not read EAN image '%c%c%c%c' (IOConnectCallScalarMethod kAppleNVMeEANRead returned 0x%X)",  v25,  v26,  v27,  v28,  v29,  SHIBYTE(a1));
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110144;
      uint64_t v51 = HIBYTE(a1);
      __int16 v52 = 1024;
      char v53 = BYTE2(a1);
      uint64_t v54 = 1024;
      uint64_t v55 = BYTE1(a1);
      uint64_t v56 = 1024;
      __int16 v57 = a1;
      uint64_t v58 = 1024;
      uint64_t v59 = v23;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Could not read EAN image '%c%c%c%c' (IOConnectCallScalarMethod kAppleNVMeEANRead returned 0x%X)",  buf,  0x20u);
    }
  }

__CFData *sub_1807677CC(unsigned int a1)
{
  CFMutableDictionaryRef v1 = sub_1807673CC(a1);
  CFTypeRef v2 = v1;
  if (v1)
  {
    CFIndex v3 = sub_180767808(v1);
    CFDataSetLength(v2, v3);
  }

  return v2;
}

CFIndex sub_180767808(const __CFData *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  v13[0] = CFDataGetBytePtr(a1);
  v13[1] = CFDataGetLength(a1);
  int v2 = sub_180781E4C((uint64_t)v13, v12, 0);
  if (!v2) {
    return v12[1] - v13[0] + v12[2];
  }
  int v3 = v2;
  uint64_t v4 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
  if (v4) {
    uint64_t v10 = v4 + 1;
  }
  else {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v10, 1225LL, (uint64_t)@"Failed to DERDecode the buffer with status: %d", v5, v6, v7, v8, v9, v3);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v15 = v3;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to DERDecode the buffer with status: %d",  buf,  8u);
  }

  return CFDataGetLength(a1);
}

const void *sub_180767924()
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&unk_18C534180);
  uint64_t v0 = qword_18C534118;
  CFMutableDictionaryRef v1 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
  if (v1) {
    uint64_t v7 = v1 + 1;
  }
  else {
    uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  if (v0)
  {
    _MGLog( (uint64_t)v7,  302LL,  (uint64_t)@"%s returning previously initialized sysconfig dictionary",  v2,  v3,  v4,  v5,  v6,  (char)"CFDictionaryRef copySyscfgDictionary(void)");
    BOOL v8 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG);
    if (v8) {
      sub_180799B1C(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    CFArrayRef Copy = CFRetain((CFTypeRef)qword_18C534118);
    goto LABEL_56;
  }

  _MGLog( (uint64_t)v7,  307LL,  (uint64_t)@"%s creating new sysconfig dictionary",  v2,  v3,  v4,  v5,  v6,  (char)"CFDictionaryRef copySyscfgDictionary(void)");
  BOOL v17 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG);
  if (v17) {
    sub_180799AA8(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  uint64_t v79 = 0LL;
  CFTypeRef cf = 0LL;
  unsigned int v78 = 0;
  unsigned int v72 = (CFTypeRef *)sub_180767E30(&v78, (unsigned __int8 *)&v79);
  v77[0] = MEMORY[0x1895F87A8];
  v77[1] = 0x40000000LL;
  v77[2] = sub_1807684E4;
  v77[3] = &unk_1896F9E38;
  v77[4] = Mutable;
  unsigned int v71 = v78;
  if (v78)
  {
    uint64_t v26 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v28 = v78;
    uint64_t v27 = v72;
    do
    {
      int v29 = *((unsigned __int8 *)v27 + 16);
      uint64_t v30 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v30) {
        CFIndex v36 = v30 + 1;
      }
      else {
        CFIndex v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      if (!v29)
      {
        _MGLog( (uint64_t)v36,  336LL,  (uint64_t)@"%s skipping: %@. It is not allowed to be loaded.",  v31,  v32,  v33,  v34,  v35,  (char)"CFDictionaryRef copySyscfgDictionary(void)");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          CFTypeRef v38 = v27[1];
          *(_DWORD *)buf = 136315394;
          int v82 = "CFDictionaryRef copySyscfgDictionary(void)";
          __int16 v83 = 2112;
          CFTypeRef v84 = v38;
          _os_log_debug_impl( &dword_180741000,  v26,  OS_LOG_TYPE_DEBUG,  "%s skipping: %@. It is not allowed to be loaded.",  buf,  0x16u);
        }

        goto LABEL_35;
      }

      _MGLog( (uint64_t)v36,  345LL,  (uint64_t)@"%s enumerating: %@",  v31,  v32,  v33,  v34,  v35,  (char)"CFDictionaryRef copySyscfgDictionary(void)");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        CFTypeRef v47 = v27[1];
        *(_DWORD *)buf = 136315394;
        int v82 = "CFDictionaryRef copySyscfgDictionary(void)";
        __int16 v83 = 2112;
        CFTypeRef v84 = v47;
        _os_log_debug_impl(&dword_180741000, v26, OS_LOG_TYPE_DEBUG, "%s enumerating: %@", buf, 0x16u);
      }

      unsigned int v37 = *(_DWORD *)v27;
      if (*(_DWORD *)v27 == 1986883702)
      {
      }

      else if (v37 == 1936023916)
      {
      }

      else if (v37 == 1094992961)
      {
      }

      else if ((sub_180768F1C((uint64_t)&v79, (unsigned int *)v27, (uint64_t)v77) & 1) == 0)
      {
LABEL_30:
        uint64_t v39 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
        if (v39) {
          CFStringRef v45 = v39 + 1;
        }
        else {
          CFStringRef v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
        }
        _MGLog( (uint64_t)v45,  373LL,  (uint64_t)@"%s enumeration of %@ failed.",  v40,  v41,  v42,  v43,  v44,  (char)"CFDictionaryRef copySyscfgDictionary(void)");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          CFTypeRef v46 = v27[1];
          *(_DWORD *)buf = 136315394;
          int v82 = "CFDictionaryRef copySyscfgDictionary(void)";
          __int16 v83 = 2112;
          CFTypeRef v84 = v46;
          _os_log_impl(&dword_180741000, v26, OS_LOG_TYPE_DEFAULT, "%s enumeration of %@ failed.", buf, 0x16u);
        }
      }

LABEL_35:
      v27 += 3;
      --v28;
    }

    while (v28);
  }

  v73[0] = MEMORY[0x1895F87A8];
  v73[1] = 0x40000000LL;
  uint64_t v74 = sub_180769174;
  uint64_t v75 = &unk_1896F9E58;
  int v76 = Mutable;
  if (Mutable)
  {
    CFIndex Count = CFDictionaryGetCount(Mutable);
    CFTypeID v49 = (const void **)malloc(8 * Count);
    CFDictionaryGetKeysAndValues(Mutable, v49, 0LL);
    CFIndex v50 = Count - 1;
    if (Count >= 1)
    {
      uint64_t v51 = v49;
      do
      {
        buf[0] = 0;
        __int16 v52 = *v51++;
        CFTypeRef Value = CFDictionaryGetValue(Mutable, v52);
        ((void (*)(void *, const void *, const void *, uint8_t *))v74)(v73, v52, Value, buf);
        if (buf[0]) {
          BOOL v54 = 1;
        }
        else {
          BOOL v54 = v50 == 0;
        }
        --v50;
      }

      while (!v54);
    }

    free(v49);
  }

  CFArrayRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x189604DB0], Mutable);
  sub_180769280(v72, v71);
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0LL;
  LODWORD(v79) = 0;
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ"))
  {
    uint64_t v55 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v55) {
      char v61 = v55 + 1;
    }
    else {
      char v61 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v61,  399LL,  (uint64_t)@"%s not caching sysconfig dictionary because device is in RestoreOS",  v56,  v57,  v58,  v59,  v60,  (char)"CFDictionaryRef copySyscfgDictionary(void)");
    BOOL v62 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG);
    if (v62) {
      sub_180799A34(v62, v63, v64, v65, v66, v67, v68, v69);
    }
  }

  else
  {
    qword_18C534118 = (uint64_t)CFRetain(Copy);
  }

  uint64_t v12 = v40 != 0;
LABEL_36:
  CFRelease(v3);
  return v12;
}

  if (v13) {
    CFRelease(v13);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v31;
}

void *sub_180767E30(_DWORD *a1, unsigned __int8 *a2)
{
  uint64_t v93 = *MEMORY[0x1895F89C0];
  uint64_t v85 = 0LL;
  CFTypeRef cf = 0LL;
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (unsigned __int8 *)&v85;
  }
  *((void *)v3 + 1) = 0LL;
  *(_DWORD *)uint64_t v3 = 0;
  if (!sub_18076AA24())
  {
    uint64_t v22 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v22) {
      uint64_t v28 = v22 + 1;
    }
    else {
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v28,  663LL,  (uint64_t)@"EAN is not supported on this device. Building default policy.",  v23,  v24,  v25,  v26,  v27,  v82);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "EAN is not supported on this device. Building default policy.",  buf,  2u);
    }

    *a1 = 0;
    goto LABEL_34;
  }

  uint64_t v4 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen", @"syscfg-erly-kbgs-allow-load", 0);
  uint64_t v5 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen", @"syscfg-erly-kbgs-data-class", 0);
  uint64_t v6 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen", @"syscfg-erly-kbgs-allow-unsealed", 0);
  uint64_t v7 = v6;
  if (v4 && v5 && v6)
  {
    CFIndex Length = CFDataGetLength(v4);
    if (Length != CFDataGetLength(v5) || (CFIndex v9 = CFDataGetLength(v4), v9 != CFDataGetLength(v7)))
    {
      CFTypeRef v47 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v47) {
        uint64_t v48 = v47 + 1;
      }
      else {
        uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      char v49 = CFDataGetLength(v4);
      CFDataGetLength(v5);
      CFDataGetLength(v7);
      _MGLog( (uint64_t)v48,  690LL,  (uint64_t)@"Lengths of 'syscfg-erly-kbgs-*' were not equal. earlyKeyBagsAllowLoad (%d) earlyKeyBagsDataClasses (%d) earlyKeyBagsAllowUnsealed (%d)",  v50,  v51,  v52,  v53,  v54,  v49);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      int v55 = CFDataGetLength(v4);
      int v56 = CFDataGetLength(v5);
      int v57 = CFDataGetLength(v7);
      *(_DWORD *)buf = 67109632;
      int v88 = v55;
      __int16 v89 = 1024;
      int v90 = v56;
      __int16 v91 = 1024;
      int v92 = v57;
      uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v20 = "Lengths of 'syscfg-erly-kbgs-*' were not equal. earlyKeyBagsAllowLoad (%d) earlyKeyBagsDataClasses (%d) earl"
            "yKeyBagsAllowUnsealed (%d)";
      uint32_t v21 = 20;
      goto LABEL_53;
    }

    if (CFDataGetLength(v4) <= 0)
    {
      uint64_t v58 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v58) {
        uint64_t v64 = v58 + 1;
      }
      else {
        uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v64,  696LL,  (uint64_t)@"Length of 'syscfg-erly-kbgs-allow-load' was 0",  v59,  v60,  v61,  v62,  v63,  v82);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      *(_WORD *)buf = 0;
      uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v20 = "Length of 'syscfg-erly-kbgs-allow-load' was 0";
    }

    else
    {
      if ((CFDataGetLength(v4) & 3) != 0)
      {
        uint64_t v10 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
        if (v10) {
          uint64_t v11 = v10 + 1;
        }
        else {
          uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
        }
        char v12 = CFDataGetLength(v4);
        _MGLog( (uint64_t)v11,  702LL,  (uint64_t)@"Length of 'syscfg-erly-kbgs-allow-load' (%d) was not a multiple of (%d)",  v13,  v14,  v15,  v16,  v17,  v12);
        if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_54;
        }
        int v18 = CFDataGetLength(v4);
        *(_DWORD *)buf = 67109376;
        int v88 = v18;
        __int16 v89 = 1024;
        int v90 = 4;
        uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v20 = "Length of 'syscfg-erly-kbgs-allow-load' (%d) was not a multiple of (%d)";
        uint32_t v21 = 14;
LABEL_53:
        _os_log_impl(&dword_180741000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
LABEL_54:
        LODWORD(v37) = 0;
        CFIndex v36 = 0LL;
        goto LABEL_55;
      }

      BytePtr = CFDataGetBytePtr(v4);
      uint64_t v66 = CFDataGetBytePtr(v5);
      uint64_t v67 = CFDataGetBytePtr(v7);
      if ((sub_180769950(v3) & 1) != 0)
      {
        CFTypeRef v84 = (int *)v67;
        unint64_t v37 = (unint64_t)CFDataGetLength(v4) >> 2;
        CFIndex v36 = calloc(v37, 0x18uLL);
        if ((_DWORD)v37)
        {
          __int16 v83 = (int *)BytePtr;
          uint64_t v68 = 0LL;
          do
          {
            unsigned int v69 = *(_DWORD *)v66;
            char v70 = v66 + 4;
            unsigned int v71 = (char *)&v36[v68];
            LODWORD(v36[v68]) = v69;
            *(_DWORD *)buf = bswap32(v69);
            *((void *)v71 + 1) = CFStringCreateWithBytes(0LL, buf, 4LL, 0x8000100u, 0);
            int v72 = *v83++;
            v71[16] = sub_1807697F0(v72, v3);
            int v73 = *v84++;
            BOOL v74 = (sub_1807697F0(v73, v3) & 1) != 0 || v3[1] != 0;
            v71[17] = v74;
            v68 += 3LL;
            uint64_t v66 = v70;
          }

          while (3LL * v37 != v68);
        }

        goto LABEL_55;
      }

      uint64_t v75 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v75) {
        __int128 v81 = v75 + 1;
      }
      else {
        __int128 v81 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v81,  711LL,  (uint64_t)@"Failed to copy APTicket properties. Falling back to default policy.",  v76,  v77,  v78,  v79,  v80,  v82);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      *(_WORD *)buf = 0;
      uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v20 = "Failed to copy APTicket properties. Falling back to default policy.";
    }

    uint32_t v21 = 2;
    goto LABEL_53;
  }

  int v29 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
  if (v29) {
    uint64_t v35 = v29 + 1;
  }
  else {
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog( (uint64_t)v35,  676LL,  (uint64_t)@"Failed to copy required 'syscfg-erly-kbgs-*' properties from the EDT",  v30,  v31,  v32,  v33,  v34,  v82);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to copy required 'syscfg-erly-kbgs-*' properties from the EDT",  buf,  2u);
  }

  CFIndex v36 = 0LL;
  LODWORD(v37) = 0;
  if (!v4)
  {
    if (!v5) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }

LABEL_55:
  CFRelease(v4);
  if (v5) {
LABEL_30:
  }
    CFRelease(v5);
LABEL_31:
  if (v7) {
    CFRelease(v7);
  }
  *a1 = v37;
  if (!v36)
  {
LABEL_34:
    CFTypeRef v38 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v38) {
      uint64_t v44 = v38 + 1;
    }
    else {
      uint64_t v44 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v44, 621LL, (uint64_t)@"Creating default MGSysConfigPolicy", v39, v40, v41, v42, v43, v82);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Creating default MGSysConfigPolicy",  buf,  2u);
    }

    else {
      size_t v45 = 1LL;
    }
    CFIndex v36 = calloc(v45, 0x18uLL);
    *(_DWORD *)CFIndex v36 = 1094992961;
    *(_DWORD *)buf = 1094992961;
    v36[1] = CFStringCreateWithBytes(0LL, buf, 4LL, 0x8000100u, 0);
    *((_WORD *)v36 + 8) = 257;
    if (sub_1807463A0())
    {
      *((_DWORD *)v36 + 6) = 1986883702;
      *(_DWORD *)buf = 1987079542;
      v36[4] = CFStringCreateWithBytes(0LL, buf, 4LL, 0x8000100u, 0);
      *((_WORD *)v36 + 20) = 257;
    }

    *((void *)v3 + 1) = 0LL;
    *(_DWORD *)uint64_t v3 = 0;
    *a1 = v45;
  }

  if (cf) {
    CFRelease(cf);
  }
  return v36;
}

void sub_1807684E4(uint64_t a1, unsigned int a2, unsigned int a3, const UInt8 *a4, CFIndex a5)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  *(_DWORD *)bytes = bswap32(a3);
  CFStringRef v10 = CFStringCreateWithBytes(0LL, bytes, 4LL, 0x8000100u, 0);
  CFDataRef v11 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], a4, a5);
  if (v10)
  {
    if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v10))
    {
      *(_DWORD *)bytes = bswap32(a2);
      CFStringRef v12 = CFStringCreateWithBytes(0LL, bytes, 4LL, 0x8000100u, 0);
      uint64_t v13 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v13) {
        uint64_t v19 = v13 + 1;
      }
      else {
        uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v19,  324LL,  (uint64_t)@"Appending syscfg key (0x%X): %@ from %@",  v14,  v15,  v16,  v17,  v18,  a3);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG)) {
        sub_180799B90((uint64_t)v10, (uint64_t)v12, a3);
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v10, v11);
      if (v12) {
        CFRelease(v12);
      }
    }

    CFRelease(v10);
  }

  else
  {
    uint64_t v20 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v26,  318LL,  (uint64_t)@"Failed to convert syscfg key 0x%X to string",  v21,  v22,  v23,  v24,  v25,  a3);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)bytes = 67109120;
      unsigned int v28 = a3;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to convert syscfg key 0x%X to string",  bytes,  8u);
    }
  }

  if (v11) {
    CFRelease(v11);
  }
}

BOOL sub_1807686E0(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (const __CFData *)sub_180767260();
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  unint64_t Length = CFDataGetLength(v2);
  if (Length <= 0x17)
  {
    uint64_t v5 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v5) {
      CFDataRef v11 = v5 + 1;
    }
    else {
      CFDataRef v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v11,  825LL,  (uint64_t)@"syscfg length %lu is too small, header size %lu\n",  v6,  v7,  v8,  v9,  v10,  Length);
    BOOL v12 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 134218240;
    *(void *)uint64_t v53 = Length;
    *(_WORD *)&v53[8] = 2048;
    uint64_t v54 = 24LL;
    uint64_t v13 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v14 = "syscfg length %lu is too small, header size %lu\n";
    uint32_t v15 = 22;
    goto LABEL_21;
  }

  BytePtr = CFDataGetBytePtr(v3);
  if (*(_DWORD *)BytePtr != 1396926055)
  {
    uint64_t v26 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v26) {
      uint64_t v32 = v26 + 1;
    }
    else {
      uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v32, 834LL, (uint64_t)@"syscfg is not initialized!\n", v27, v28, v29, v30, v31, v50);
    BOOL v12 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_36;
    }
    *(_WORD *)buf = 0;
    uint64_t v13 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v14 = "syscfg is not initialized!\n";
    uint32_t v15 = 2;
LABEL_21:
    _os_log_impl(&dword_180741000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, v15);
    BOOL v12 = 0LL;
    goto LABEL_36;
  }

  uint64_t v17 = BytePtr;
  uint64_t v18 = *((unsigned int *)BytePtr + 5);
  if (Length < 20 * (unint64_t)v18 + 24)
  {
    uint64_t v19 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v19) {
      uint64_t v25 = v19 + 1;
    }
    else {
      uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v25,  845LL,  (uint64_t)@"syscfg length %lu is too small, should be at least %lu to contain %u entries\n",  v20,  v21,  v22,  v23,  v24,  Length);
    BOOL v12 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 134218496;
    *(void *)uint64_t v53 = Length;
    *(_WORD *)&v53[8] = 2048;
    uint64_t v54 = 20LL * v18 + 24;
    LOWORD(v55) = 1024;
    *(_DWORD *)((char *)&v55 + 2) = v18;
    uint64_t v13 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v14 = "syscfg length %lu is too small, should be at least %lu to contain %u entries\n";
    uint32_t v15 = 28;
    goto LABEL_21;
  }

  if (!(_DWORD)v18)
  {
LABEL_34:
    int v40 = 1;
    goto LABEL_35;
  }

  uint64_t v33 = 0LL;
  uint64_t v34 = (unsigned int *)(BytePtr + 36);
  while (1)
  {
    char v51 = 0;
    uint64_t v35 = *(v34 - 3);
    CFIndex v36 = v34 - 2;
    if ((_DWORD)v35 == 1129206850) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t, char *))(a1 + 16))( a1,  1094992961LL,  v35,  v36,  16LL,  &v51);
LABEL_32:
    if (!v51)
    {
      ++v33;
      v34 += 5;
      if (v18 != v33) {
        continue;
      }
    }

    goto LABEL_34;
  }

  int v37 = *(v34 - 1);
  unint64_t v38 = *v34;
  if (Length >= v38 && Length >= (v37 + v38))
  {
    (*(void (**)(uint64_t, uint64_t, void, const UInt8 *, void, char *))(a1 + 16))( a1,  1094992961LL,  *v36,  &v17[v38],  *(v34 - 1),  &v51);
    goto LABEL_32;
  }

  uint64_t v42 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
  if (v42) {
    uint64_t v48 = v42 + 1;
  }
  else {
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog( (uint64_t)v48,  866LL,  (uint64_t)@"syscfg entry %u offset %u, len %u is out of range; syscfg length is %lu\n",
    v43,
    v44,
    v45,
    v46,
    v47,
    v33);
  BOOL v49 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
  int v40 = 0;
  if (v49)
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)uint64_t v53 = v33;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = v38;
    LOWORD(v54) = 1024;
    *(_DWORD *)((char *)&v54 + 2) = v37;
    HIWORD(v54) = 2048;
    unint64_t v55 = Length;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "syscfg entry %u offset %u, len %u is out of range; syscfg length is %lu\n",
      buf,
      0x1Eu);
    int v40 = 0;
  }

uint64_t sub_180768AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  uint64_t v4 = sub_1807677CC(0x74727374u);
  uint64_t v5 = sub_1807677CC(0x7365616Cu);
  if (!v5)
  {
    uint64_t v22 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v22) {
      uint64_t v28 = v22 + 1;
    }
    else {
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v28,  1059LL,  (uint64_t)@"failed to copy EAN data for 'seal' - non-fatal.",  v23,  v24,  v25,  v26,  v27,  v55);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    *(_WORD *)buf = 0;
    uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v20 = "failed to copy EAN data for 'seal' - non-fatal.";
    goto LABEL_23;
  }

  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ") || sub_18076A658(a1, v5, v4))
  {
    if (qword_18C5341A0 != -1) {
      dispatch_once(&qword_18C5341A0, &unk_1896F9E98);
    }
    uint64_t v6 = (unsigned int *)qword_18C534190;
    if (qword_18C534190)
    {
      uint64_t v7 = dword_18C534198;
      BytePtr = CFDataGetBytePtr(v5);
      CFIndex Length = CFDataGetLength(v5);
      int v10 = sub_18078B11C((uint64_t)BytePtr, Length, (uint64_t)v60);
      if (!v10)
      {
        if ((_DWORD)v7)
        {
          uint64_t v45 = (os_log_s *)MEMORY[0x1895F8DA0];
          do
          {
            sub_18078A9BC((uint64_t)v60, 1296125520LL, *v6, &v57, &v56);
            if (v46)
            {
              *(_DWORD *)buf = bswap32(*v6);
              CFStringRef v47 = CFStringCreateWithBytes(0LL, buf, 4LL, 0x8000100u, 0);
              uint64_t v48 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
              if (v48) {
                uint64_t v54 = v48 + 1;
              }
              else {
                uint64_t v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
              }
              _MGLog( (uint64_t)v54,  1113LL,  (uint64_t)@"Sealing manifest property '%@' did not exist in the sealing manifest",  v49,  v50,  v51,  v52,  v53,  (char)v47);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                CFStringRef v59 = v47;
                _os_log_impl( &dword_180741000,  v45,  OS_LOG_TYPE_DEFAULT,  "Sealing manifest property '%@' did not exist in the sealing manifest",  buf,  0xCu);
              }

              if (v47) {
                CFRelease(v47);
              }
            }

            else
            {
              buf[0] = 0;
              (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint8_t *))(a2 + 16))( a2,  1936023916LL,  *v6,  v57,  v56,  buf);
              if (buf[0]) {
                goto LABEL_25;
              }
            }

            ++v6;
            --v7;
          }

          while (v7);
        }

        goto LABEL_25;
      }

      int v11 = v10;
      BOOL v12 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v12) {
        uint64_t v18 = v12 + 1;
      }
      else {
        uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v18,  1086LL,  (uint64_t)@"Failed to initialize Img4 manifest with status: 0x%X",  v13,  v14,  v15,  v16,  v17,  v11);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
LABEL_25:
        uint64_t v36 = 1LL;
        goto LABEL_26;
      }

      *(_DWORD *)buf = 67109120;
      LODWORD(v59) = v11;
      uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v20 = "Failed to initialize Img4 manifest with status: 0x%X";
      uint32_t v21 = 8;
LABEL_24:
      _os_log_impl(&dword_180741000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
      goto LABEL_25;
    }

    uint64_t v29 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v29) {
      uint64_t v35 = v29 + 1;
    }
    else {
      uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v35,  1077LL,  (uint64_t)@"Failed to copy sealing manifest allowlist.",  v30,  v31,  v32,  v33,  v34,  v55);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    *(_WORD *)buf = 0;
    uint64_t v19 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v20 = "Failed to copy sealing manifest allowlist.";
LABEL_23:
    uint32_t v21 = 2;
    goto LABEL_24;
  }

  unint64_t v38 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
  if (v38) {
    uint64_t v44 = v38 + 1;
  }
  else {
    uint64_t v44 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v44, 1068LL, (uint64_t)@"_sealingManifestTrusted returned false", v39, v40, v41, v42, v43, v55);
  uint64_t v36 = 0LL;
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "_sealingManifestTrusted returned false",  buf,  2u);
    uint64_t v36 = 0LL;
  }

LABEL_26:
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v36;
}

CFDataRef sub_180768ED4(uint64_t a1)
{
  uint64_t result = (const __CFData *)sub_180767394();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_180769C10(result, 1986883702LL, a1);
    CFRelease(v3);
    return (const __CFData *)v4;
  }

  return result;
}

uint64_t sub_180768F1C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *a2;
  uint64_t v7 = sub_1807677CC(*a2);
  uint64_t v8 = sub_1807677CC(0x74727374u);
  uint64_t v9 = sub_1807677CC(0x7365616Cu);
  if (v7)
  {
    CFDataRef v10 = sub_180769EC8((uint64_t)a2, a1, v7, v9, v8);
    if (v10)
    {
      int v11 = v10;
      if (qword_18C5341A8 != -1) {
        dispatch_once(&qword_18C5341A8, &unk_1896F9ED8);
      }
      uint64_t v12 = sub_180769C10(v11, v6, a3);
      CFRelease(v11);
    }

    else
    {
      uint64_t v20 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v20) {
        uint64_t v26 = v20 + 1;
      }
      else {
        uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v26, 1034LL, (uint64_t)@"_decodeFDRDataClass returned NULL", v21, v22, v23, v24, v25, v28);
      uint64_t v12 = 0LL;
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "_decodeFDRDataClass returned NULL",  buf,  2u);
        uint64_t v12 = 0LL;
      }
    }

    CFRelease(v7);
    if (v8) {
LABEL_19:
    }
      CFRelease(v8);
  }

  else
  {
    uint64_t v13 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v13) {
      uint64_t v19 = v13 + 1;
    }
    else {
      uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v19,  1025LL,  (uint64_t)@"failed to copy EAN data for key %c%c%c%c - non fatal",  v14,  v15,  v16,  v17,  v18,  SBYTE3(v6));
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      unsigned int v30 = BYTE3(v6);
      __int16 v31 = 1024;
      int v32 = BYTE2(v6);
      __int16 v33 = 1024;
      int v34 = BYTE1(v6);
      __int16 v35 = 1024;
      int v36 = v6;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "failed to copy EAN data for key %c%c%c%c - non fatal",  buf,  0x1Au);
    }

    uint64_t v12 = 1LL;
    if (v8) {
      goto LABEL_19;
    }
  }

  if (v9) {
    CFRelease(v9);
  }
  return v12;
}

void sub_180769174(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a3) && !CFDataGetLength((CFDataRef)a3))
  {
    uint64_t v7 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v7) {
      uint64_t v13 = v7 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v13, 386LL, (uint64_t)@"Removing zero length key: %@", v8, v9, v10, v11, v12, (char)a2);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = a2;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Removing zero length key: %@",  buf,  0xCu);
    }

    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), a2);
  }

void sub_180769280(CFTypeRef *a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1 + 1;
    do
    {
      uint64_t v5 = v4 - 1;
      if (*v4) {
        CFRelease(*v4);
      }
      *uint64_t v5 = 0LL;
      *uint64_t v4 = 0LL;
      v4 += 3;
      v5[2] = 0LL;
      --v3;
    }

    while (v3);
  }

  free(a1);
}

CFDataRef sub_1807692D8(unsigned int a1)
{
  return sub_1807692E0(a1, -1LL);
}

CFDataRef sub_1807692E0(unsigned int a1, CFIndex a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ"))
  {
    uint64_t v4 = (const __CFDictionary *)sub_180767924();
  }

  else
  {
    int v27 = 0;
    uint64_t v4 = (const __CFDictionary *)MGCopyAnswerWithError((const char **)@"9/J7LY7zuYSGW1BcSTRpOw", 0LL, &v27);
    if (!v4)
    {
      uint64_t v5 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      uint64_t v11 = v5
          ? v5 + 1
          : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog( (uint64_t)v11,  567LL,  (uint64_t)@"Failed to copy the SysCfgDict MG key with error: %d",  v6,  v7,  v8,  v9,  v10,  v27);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v29) = v27;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to copy the SysCfgDict MG key with error: %d",  buf,  8u);
      }
    }
  }

  if (!v4) {
    return 0LL;
  }
  *(_DWORD *)buf = bswap32(a1);
  CFStringRef v12 = CFStringCreateWithBytes(0LL, buf, 4LL, 0x8000100u, 0);
  CFTypeRef Value = (const __CFData *)CFDictionaryGetValue(v4, v12);
  if (!Value)
  {
    uint64_t v20 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v26, 586LL, (uint64_t)@"Failed to find key %@", v21, v22, v23, v24, v25, (char)v12);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFStringRef v29 = v12;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Failed to find key %@", buf, 0xCu);
    }

    CFDataRef v18 = 0LL;
    if (!v12) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  uint64_t v14 = Value;
  CFIndex Length = CFDataGetLength(Value);
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    if (Length >= a2) {
      goto LABEL_15;
    }
    CFIndex Length = CFDataGetLength(v14);
  }

  a2 = Length;
LABEL_15:
  uint64_t v16 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  BytePtr = CFDataGetBytePtr(v14);
  CFDataRef v18 = CFDataCreate(v16, BytePtr, a2);
  if (v12) {
LABEL_16:
  }
    CFRelease(v12);
LABEL_17:
  CFRelease(v4);
  return v18;
}

uint64_t sub_180769530(unsigned int a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v2 = sub_1807692E0(a1, -1LL);
  if (v2)
  {
    uint64_t v3 = v2;
    __int128 buf = 0uLL;
    sub_180769698(v2, &buf);
    uint64_t v4 = HIDWORD(buf);
    CFRelease(v3);
  }

  else
  {
    uint64_t v5 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    unsigned int v11 = HIBYTE(a1);
    if (v5) {
      CFStringRef v12 = v5 + 1;
    }
    else {
      CFStringRef v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    int v13 = BYTE2(a1);
    int v14 = BYTE1(a1);
    int v15 = a1;
    _MGLog((uint64_t)v12, 435LL, (uint64_t)@"no value found for key %c%c%c%c", v6, v7, v8, v9, v10, SHIBYTE(a1));
    uint64_t v4 = 0LL;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&__int128 buf = __PAIR64__(v11, 67109888);
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = v13;
      HIWORD(buf) = 1024;
      int v18 = v14;
      __int16 v19 = 1024;
      int v20 = v15;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "no value found for key %c%c%c%c",  (uint8_t *)&buf,  0x1Au);
      return 0LL;
    }
  }

  return v4;
}

uint64_t sub_180769670(const __CFData *a1)
{
  __int128 v2 = 0uLL;
  sub_180769698(a1, &v2);
  return HIDWORD(v2);
}

void sub_180769698(const __CFData *a1, _OWORD *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    BytePtr = CFDataGetBytePtr(a1);
    if (BytePtr && (uint64_t v5 = BytePtr, v6 = CFGetTypeID(a1), v6 == CFDataGetTypeID()) && CFDataGetLength(a1) == 16)
    {
      *a2 = *(_OWORD *)v5;
    }

    else
    {
      uint64_t v7 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v7) {
        int v13 = v7 + 1;
      }
      else {
        int v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v13,  459LL,  (uint64_t)@"failed to get to cookSyscfgColorData %@",  v8,  v9,  v10,  v11,  v12,  (char)a1);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        int v15 = a1;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "failed to get to cookSyscfgColorData %@",  buf,  0xCu);
      }
    }
  }

uint64_t sub_1807697B4(const __CFData *a1)
{
  __int128 v2 = 0uLL;
  sub_180769698(a1, &v2);
  if ((_DWORD)v2 == 2) {
    return DWORD2(v2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

CFDataRef sub_1807697E8(unsigned int a1)
{
  return sub_1807692E0(a1, 6LL);
}

uint64_t sub_1807697F0(int a1, unsigned __int8 *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1 <= 1702060896)
  {
    if (!a1) {
      return 0LL;
    }
    if (a1 == 1) {
      return 1LL;
    }
  }

  else
  {
    switch(a1)
    {
      case 1702060897:
        int v3 = a2[3];
        return v3 != 0;
      case 1717663091:
        int v3 = a2[1];
        return v3 != 0;
      case 1718838113:
        int v3 = a2[2];
        return v3 != 0;
    }
  }

  uint64_t v5 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
  if (v5) {
    uint64_t v11 = v5 + 1;
  }
  else {
    uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog( (uint64_t)v11,  612LL,  (uint64_t)@"%s unexpected policy criteria: (0x%X)",  v6,  v7,  v8,  v9,  v10,  (char)"_Bool _policyCriteriaCheck(uint32_t, const MGAPTicket_s *)");
  BOOL v12 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v12)
  {
    *(_DWORD *)__int128 buf = 136315394;
    int v14 = "_Bool _policyCriteriaCheck(uint32_t, const MGAPTicket_s *)";
    __int16 v15 = 1024;
    int v16 = a1;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%s unexpected policy criteria: (0x%X)",  buf,  0x12u);
    return 0LL;
  }

  return result;
}

uint64_t sub_180769950(_OWORD *a1)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  cf[0] = 0LL;
  cf[1] = 0LL;
  __int128 v2 = sub_1807677CC(0x6170746Bu);
  memset(v31, 0, 3);
  if (v2)
  {
    int v3 = v2;
    if ((sub_18076AA6C(v2, dword_1807A2D48, 3LL, (BOOL *)v31, 0LL, (CFDataRef *)&cf[1]) & 1) != 0)
    {
      BYTE1(cf[0]) = v31[0];
      WORD1(cf[0]) = *(_WORD *)((char *)v31 + 1);
      uint64_t v4 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v4) {
        uint64_t v10 = v4 + 1;
      }
      else {
        uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      if (BYTE1(cf[0])) {
        uint64_t v11 = "YES";
      }
      else {
        uint64_t v11 = "NO";
      }
      _MGLog( (uint64_t)v10,  1378LL,  (uint64_t)@"APTicketProperties: {\n\tfaus: %s\n\tfsca: %s\n\tesca: %s\n\ttrustObject: %@\n}",  v5,  v6,  v7,  v8,  v9,  (char)v11);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        if (BYTE1(cf[0])) {
          BOOL v12 = "YES";
        }
        else {
          BOOL v12 = "NO";
        }
        if (BYTE2(cf[0])) {
          int v13 = "YES";
        }
        else {
          int v13 = "NO";
        }
        if (BYTE3(cf[0])) {
          int v14 = "YES";
        }
        else {
          int v14 = "NO";
        }
        *(_DWORD *)__int128 buf = 136315906;
        int v34 = v12;
        __int16 v35 = 2080;
        int v36 = v13;
        __int16 v37 = 2080;
        unint64_t v38 = v14;
        __int16 v39 = 2112;
        CFTypeRef v40 = cf[1];
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "APTicketProperties: {\n\tfaus: %s\n\tfsca: %s\n\tesca: %s\n\ttrustObject: %@\n}",  buf,  0x2Au);
      }

      LOBYTE(cf[0]) = 1;
      if (cf[1]) {
        CFRetain(cf[1]);
      }
      *a1 = *(_OWORD *)cf;
    }

    else
    {
      uint64_t v22 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v22) {
        char v28 = v22 + 1;
      }
      else {
        char v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v28, 1361LL, (uint64_t)@"Failed to decode 'aptk'", v23, v24, v25, v26, v27, v30);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Failed to decode 'aptk'", buf, 2u);
      }
    }

    CFRelease(v3);
    if (cf[1]) {
      CFRelease(cf[1]);
    }
  }

  else
  {
    __int16 v15 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v15) {
      uint64_t v21 = v15 + 1;
    }
    else {
      uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v21, 1353LL, (uint64_t)@"Failed to copy 'aptk' from EAN", v16, v17, v18, v19, v20, v30);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to copy 'aptk' from EAN",  buf,  2u);
    }
  }

  return LOBYTE(cf[0]);
}

uint64_t sub_180769C10(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  CFIndex Length = CFDataGetLength(a1);
  if (Length < 0x100000000LL)
  {
    unsigned int v17 = Length;
    BytePtr = CFDataGetBytePtr(a1);
    uint64_t v19 = sub_180788790((uint64_t)BytePtr, v17);
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      uint64_t v21 = sub_180789924(v19);
      if (v21)
      {
        uint64_t v22 = (unsigned int *)v21;
        char v14 = 1;
        do
        {
          char v47 = 0;
          *(void *)__int128 buf = 0LL;
          uint64_t v46 = 0LL;
          uint64_t v23 = sub_1807891B8(v22);
          int v24 = sub_1807891E4((uint64_t)v22, (uint64_t)buf);
          BOOL v25 = sub_1807891C4((BOOL)v22);
          uint64_t v26 = (const char *)sub_1807891D8((uint64_t)v22);
          if (v24)
          {
            (*(void (**)(uint64_t, uint64_t, unsigned int *, void, void, char *))(a3 + 16))( a3,  a2,  v23,  *(void *)buf,  v46,  &v47);
          }

          else
          {
            uint64_t v27 = v26;
            if (v26)
            {
              size_t v28 = strlen(v26);
              (*(void (**)(uint64_t, uint64_t, unsigned int *, const char *, size_t, char *))(a3 + 16))( a3,  a2,  v23,  v27,  v28,  &v47);
            }

            else if (v25)
            {
              (*(void (**)(uint64_t, uint64_t, unsigned int *, void, void, char *))(a3 + 16))( a3,  a2,  v23,  0LL,  0LL,  &v47);
            }

            else
            {
              CFStringRef v29 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
              if (v29) {
                __int16 v35 = v29 + 1;
              }
              else {
                __int16 v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
              }
              _MGLog( (uint64_t)v35,  941LL,  (uint64_t)@"Unexpected libSysConfig3 payload state",  v30,  v31,  v32,  v33,  v34,  v44[0]);
              char v14 = 0;
              if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t v44 = 0;
                _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Unexpected libSysConfig3 payload state",  v44,  2u);
                char v14 = 0;
              }
            }
          }

          if (v47) {
            break;
          }
          uint64_t v22 = (unsigned int *)sub_18078924C((uint64_t)v22);
        }

        while (v22);
      }

      else
      {
        char v14 = 1;
      }

      sub_1807898A0(v20);
    }

    else
    {
      int v36 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v36) {
        uint64_t v42 = v36 + 1;
      }
      else {
        uint64_t v42 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v42, 909LL, (uint64_t)@"decodeSysConfig3 returned NULL", v37, v38, v39, v40, v41, v44[0]);
      char v14 = 0;
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        __int16 v15 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v16 = "decodeSysConfig3 returned NULL";
        goto LABEL_29;
      }
    }
  }

  else
  {
    uint64_t v7 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v7) {
      int v13 = v7 + 1;
    }
    else {
      int v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v13, 896LL, (uint64_t)@"SysConfig data greater than UINT32_MAX", v8, v9, v10, v11, v12, v44[0]);
    char v14 = 0;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      __int16 v15 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v16 = "SysConfig data greater than UINT32_MAX";
LABEL_29:
      _os_log_impl(&dword_180741000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
      char v14 = 0;
    }
  }

  return v14 & 1;
}

CFDataRef sub_180769EC8(uint64_t a1, uint64_t a2, const __CFData *a3, const __CFData *a4, const __CFData *a5)
{
  uint64_t v98 = *MEMORY[0x1895F89C0];
  if (qword_18C5341B8 != -1) {
    dispatch_once(&qword_18C5341B8, &unk_1896F9F18);
  }
  if (off_18C5341B0)
  {
    memset(length, 0, sizeof(length));
    CFTypeRef cf = 0LL;
    *(_DWORD *)bytes = bswap32(*(_DWORD *)a1);
    uint64_t v10 = CFStringCreateWithBytes(0LL, bytes, 4LL, 0x8000100u, 0);
    if (qword_18C5341B8 != -1) {
      dispatch_once(&qword_18C5341B8, &unk_1896F9F18);
    }
    uint64_t v11 = (const __CFString *)off_18C5341B0(@"seal", &cf);
    if (qword_18C5341B8 != -1) {
      dispatch_once(&qword_18C5341B8, &unk_1896F9F18);
    }
    uint64_t v12 = (const __CFString *)off_18C5341B0(v10, &cf);
    int v13 = *(const __CFData **)(a2 + 8);
    else {
      uint64_t v14 = 0LL;
    }
    if (*(_BYTE *)(a1 + 16))
    {
      uint64_t v56 = v14;
      if (!v11) {
        uint64_t v11 = (const __CFString *)CFRetain(@"UNKNOWN");
      }
      theString = v11;
      if (!v12) {
        uint64_t v12 = (const __CFString *)CFRetain(@"UNKNOWN");
      }
      __int16 v15 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation( (CFAllocatorRef)*MEMORY[0x189604DB0],  v10,  0x8000100u,  0x20u);
      unsigned int v17 = CFStringCreateExternalRepresentation(v15, theString, 0x8000100u, 0x20u);
      uint64_t v18 = CFStringCreateExternalRepresentation(v15, v12, 0x8000100u, 0x20u);
      if (qword_18C5341D0 != -1) {
        dispatch_once(&qword_18C5341D0, &unk_1896F9F98);
      }
      BytePtr = CFDataGetBytePtr(a3);
      int v67 = CFDataGetLength(a3);
      if (a5)
      {
        uint64_t v68 = CFDataGetBytePtr(a5);
        int v19 = CFDataGetLength(a5);
      }

      else
      {
        int v19 = 0;
        uint64_t v68 = 0LL;
      }

      int v69 = v19;
      if (a4)
      {
        char v70 = CFDataGetBytePtr(a4);
        int v35 = CFDataGetLength(a4);
      }

      else
      {
        int v35 = 0;
        char v70 = 0LL;
      }

      int v71 = v35;
      if (v13)
      {
        int v72 = CFDataGetBytePtr(v13);
        int v36 = CFDataGetLength(v13);
      }

      else
      {
        int v36 = 0;
        int v72 = 0LL;
      }

      int v73 = v36;
      if (ExternalRepresentation)
      {
        BOOL v74 = CFDataGetBytePtr(ExternalRepresentation);
        int v37 = CFDataGetLength(ExternalRepresentation);
      }

      else
      {
        int v37 = 0;
        BOOL v74 = 0LL;
      }

      int v75 = v37;
      if (v18)
      {
        uint64_t v76 = CFDataGetBytePtr(v18);
        int v38 = CFStringGetLength(v12);
      }

      else
      {
        int v38 = 0;
        uint64_t v76 = 0LL;
      }

      int v77 = v38;
      if (v17)
      {
        uint64_t v78 = CFDataGetBytePtr(v17);
        int v39 = CFDataGetLength(v17);
      }

      else
      {
        int v39 = 0;
        uint64_t v78 = 0LL;
      }

      int v79 = v39;
      uint64_t v80 = 0LL;
      int v81 = 0;
      uint64_t v82 = 0LL;
      int v83 = 0;
      uint64_t v84 = v56;
      uint64_t v90 = 0LL;
      int v91 = 0;
      uint64_t v92 = 0LL;
      int v93 = 0;
      uint64_t v94 = 0LL;
      int v95 = 0;
      uint64_t v96 = 0LL;
      int v97 = 0;
      __int128 v85 = 0u;
      __int128 v86 = 0u;
      __int128 v87 = 0u;
      __int128 v88 = 0u;
      int v89 = 0;
      uint64_t v40 = sub_1807866D4((uint64_t *)&BytePtr, &length[1], length);
      uint64_t v41 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v41) {
        char v47 = v41 + 1;
      }
      else {
        char v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v47,  1483LL,  (uint64_t)@"%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'",  v42,  v43,  v44,  v45,  v46,  (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)bytes = 136315650;
        uint64_t v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
        __int16 v62 = 2048;
        uint64_t v63 = (uint64_t (*)(void, void))v40;
        __int16 v64 = 2112;
        uint64_t v65 = v10;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'",  bytes,  0x20u);
      }

      uint64_t v48 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v48) {
        uint64_t v54 = v48 + 1;
      }
      else {
        uint64_t v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      if (v40)
      {
        _MGLog( (uint64_t)v54,  1490LL,  (uint64_t)@"%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'. Critical error, skipping data class.",  v49,  v50,  v51,  v52,  v53,  (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)bytes = 136315650;
          uint64_t v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
          __int16 v62 = 2048;
          uint64_t v63 = (uint64_t (*)(void, void))v40;
          __int16 v64 = 2112;
          uint64_t v65 = v10;
          _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'. Critical error, skipping data class.",  bytes,  0x20u);
        }

        CFDataRef v27 = 0LL;
      }

      else
      {
        _MGLog( (uint64_t)v54,  1497LL,  (uint64_t)@"%s attempting to create CFData with %p and length: %d",  v49,  v50,  v51,  v52,  v53,  (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)bytes = 136315650;
          uint64_t v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
          __int16 v62 = 2048;
          uint64_t v63 = *(uint64_t (**)(void, void))&length[1];
          __int16 v64 = 1024;
          LODWORD(v65) = length[0];
          _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s attempting to create CFData with %p and length: %d",  bytes,  0x1Cu);
        }

        CFDataRef v27 = 0LL;
        if (*(void *)&length[1] && length[0]) {
          CFDataRef v27 = CFDataCreate(v15, *(const UInt8 **)&length[1], length[0]);
        }
      }

      uint64_t v11 = theString;
      if (!v10) {
        goto LABEL_71;
      }
    }

    else
    {
      size_t v28 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v28) {
        uint64_t v34 = v28 + 1;
      }
      else {
        uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v34,  1436LL,  (uint64_t)@"%s dataClass '%@' is not allowed to load.",  v29,  v30,  v31,  v32,  v33,  (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)bytes = 136315394;
        uint64_t v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
        __int16 v62 = 2112;
        uint64_t v63 = (uint64_t (*)(void, void))v10;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%s dataClass '%@' is not allowed to load.",  bytes,  0x16u);
      }

      uint64_t v18 = 0LL;
      unsigned int v17 = 0LL;
      CFDataRef ExternalRepresentation = 0LL;
      CFDataRef v27 = 0LL;
      if (!v10) {
        goto LABEL_71;
      }
    }

    CFRelease(v10);
LABEL_71:
    if (v11) {
      CFRelease(v11);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (ExternalRepresentation) {
      CFRelease(ExternalRepresentation);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (cf) {
      CFRelease(cf);
    }
    return v27;
  }

  uint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  uint64_t v21 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
  if (v21) {
    uint64_t v20 = v21 + 1;
  }
  if (qword_18C5341B8 != -1) {
    dispatch_once(&qword_18C5341B8, &unk_1896F9F18);
  }
  _MGLog( (uint64_t)v20,  1402LL,  (uint64_t)@"%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p",  v22,  v23,  v24,  v25,  v26,  (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    if (qword_18C5341B8 != -1) {
      dispatch_once(&qword_18C5341B8, &unk_1896F9F18);
    }
    *(_DWORD *)bytes = 136315394;
    uint64_t v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
    __int16 v62 = 2048;
    uint64_t v63 = off_18C5341B0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p",  bytes,  0x16u);
  }

  return 0LL;
}

BOOL sub_18076A658(uint64_t a1, const __CFData *a2, const __CFData *a3)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  if (qword_18C5341B8 != -1) {
    dispatch_once(&qword_18C5341B8, &unk_1896F9F18);
  }
  if (off_18C5341B0)
  {
    uint64_t v33 = 0LL;
    int v32 = 0;
    CFTypeRef cf = 0LL;
    uint64_t v6 = (const __CFString *)off_18C5341B0(@"seal", &cf);
    uint64_t v7 = *(const __CFData **)(a1 + 8);
    if (!v6) {
      uint64_t v6 = (const __CFString *)CFRetain(@"UNKNOWN");
    }
    uint64_t v8 = v6;
    CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation( (CFAllocatorRef)*MEMORY[0x189604DB0],  v6,  0x8000100u,  0x20u);
    if (qword_18C5341D0 != -1) {
      dispatch_once(&qword_18C5341D0, &unk_1896F9F98);
    }
    __int128 v52 = 0u;
    uint64_t v53 = 0LL;
    __int128 v51 = 0u;
    __int128 v50 = 0u;
    __int128 v49 = 0u;
    __int128 v48 = 0u;
    __int128 v47 = 0u;
    __int128 v46 = 0u;
    __int128 v45 = 0u;
    __int128 v44 = 0u;
    __int128 v43 = 0u;
    __int128 v42 = 0u;
    __int128 v41 = 0u;
    __int128 v40 = 0u;
    __int128 v39 = 0u;
    __int128 v38 = 0u;
    __int128 v37 = 0u;
    *(_OWORD *)&uint8_t buf[8] = 0u;
    *(void *)__int128 buf = CFDataGetBytePtr(a2);
    *(_DWORD *)&uint8_t buf[8] = CFDataGetLength(a2);
    if (a3)
    {
      *(void *)&uint8_t buf[16] = CFDataGetBytePtr(a3);
      int Length = CFDataGetLength(a3);
    }

    else
    {
      int Length = 0;
      *(void *)&uint8_t buf[16] = 0LL;
    }

    LODWORD(v37) = Length;
    if (v7)
    {
      *((void *)&v38 + 1) = CFDataGetBytePtr(v7);
      int v19 = CFDataGetLength(v7);
    }

    else
    {
      int v19 = 0;
      *((void *)&v38 + 1) = 0LL;
    }

    LODWORD(v39) = v19;
    if (ExternalRepresentation)
    {
      *((void *)&v41 + 1) = CFDataGetBytePtr(ExternalRepresentation);
      int v20 = CFDataGetLength(ExternalRepresentation);
    }

    else
    {
      int v20 = 0;
      *((void *)&v41 + 1) = 0LL;
    }

    LODWORD(v42) = v20;
    *((void *)&v44 + 1) = 128LL;
    uint64_t v21 = sub_1807866D4((uint64_t *)buf, &v33, &v32);
    BOOL v18 = v21 == 0;
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      uint64_t v29 = v23
          ? v23 + 1
          : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog( (uint64_t)v29,  1774LL,  (uint64_t)@"Manifest trust evaluation failed with status 0x%llX",  v24,  v25,  v26,  v27,  v28,  v22);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v34 = 134217984;
        uint64_t v35 = v22;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Manifest trust evaluation failed with status 0x%llX",  v34,  0xCu);
      }
    }

    if (v8) {
      CFRelease(v8);
    }
    if (ExternalRepresentation) {
      CFRelease(ExternalRepresentation);
    }
    if (cf) {
      CFRelease(cf);
    }
  }

  else
  {
    uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    uint64_t v12 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v12) {
      uint64_t v11 = v12 + 1;
    }
    if (qword_18C5341B8 != -1) {
      dispatch_once(&qword_18C5341B8, &unk_1896F9F18);
    }
    _MGLog( (uint64_t)v11,  1728LL,  (uint64_t)@"%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p",  v13,  v14,  v15,  v16,  v17,  (char)"_Bool _sealingManifestTrusted(const MGAPTicket_s *, CFDataRef, CFDataRef)");
    BOOL v18 = 0LL;
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      if (qword_18C5341B8 != -1) {
        dispatch_once(&qword_18C5341B8, &unk_1896F9F18);
      }
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "_Bool _sealingManifestTrusted(const MGAPTicket_s *, CFDataRef, CFDataRef)";
      *(_WORD *)&uint8_t buf[12] = 2048;
      *(void *)&buf[14] = off_18C5341B0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p",  buf,  0x16u);
      return 0LL;
    }
  }

  return v18;
}

BOOL sub_18076AA24()
{
  CFTypeRef v0 = sub_180765DB4("IODeviceTree:/defaults", @"ean-storage-present", 0);
  CFTypeRef v1 = v0;
  if (v0) {
    CFRelease(v0);
  }
  return v1 != 0LL;
}

uint64_t sub_18076AA6C(const __CFData *a1, unsigned int *a2, uint64_t a3, BOOL *a4, BOOL *a5, CFDataRef *a6)
{
  uint64_t v83 = *MEMORY[0x1895F89C0];
  uint64_t v11 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen/secure-boot-hashes", @"sfr-manifest-hash", 0);
  uint64_t v12 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen", @"crypto-hash-method", 0);
  uint64_t v13 = v12;
  if (v12)
  {
    uint64_t v14 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    BytePtr = CFDataGetBytePtr(v12);
    uint64_t v16 = (const char *)CFDataGetBytePtr(v13);
    size_t Length = CFDataGetLength(v13);
    size_t v18 = strnlen(v16, Length);
    int v19 = CFStringCreateWithBytes(v14, BytePtr, v18, 0x8000100u, 0);
    if (v11) {
      goto LABEL_6;
    }
  }

  else
  {
    int v19 = 0LL;
    if (v11) {
      goto LABEL_6;
    }
  }

  uint64_t v11 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen", @"boot-manifest-hash", 0);
  if (v11)
  {
LABEL_6:
    if (v13)
    {
      if (v19)
      {
        if ((sub_18076AF88(a1, v11, v19) & 1) == 0)
        {
          __int128 v49 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
          if (v49) {
            char v55 = v49 + 1;
          }
          else {
            char v55 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          }
          _MGLog( (uint64_t)v55,  1291LL,  (uint64_t)@"%s APTicket verification failed!",  v50,  v51,  v52,  v53,  v54,  (char)"_Bool _decodeAPTicket(CFDataRef, uint32_t *, size_t, _Bool *, _Bool *, CFDataRef *)");
          uint64_t v31 = 0LL;
          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_34;
          }
          *(_DWORD *)__int128 buf = 136315138;
          v81[0] = "_Bool _decodeAPTicket(CFDataRef, uint32_t *, size_t, _Bool *, _Bool *, CFDataRef *)";
          int v32 = (os_log_s *)MEMORY[0x1895F8DA0];
          uint64_t v33 = "%s APTicket verification failed!";
          uint32_t v34 = 12;
          goto LABEL_32;
        }

        int v20 = CFDataGetBytePtr(a1);
        CFIndex v21 = CFDataGetLength(a1);
        int v22 = sub_18078B11C((uint64_t)v20, v21, (uint64_t)v82);
        if (v22)
        {
          int v23 = v22;
          uint64_t v24 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
          if (v24) {
            uint64_t v30 = v24 + 1;
          }
          else {
            uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          }
          _MGLog( (uint64_t)v30,  1301LL,  (uint64_t)@"Img4DecodeInitManifest failed with code %d (0x%X)",  v25,  v26,  v27,  v28,  v29,  v23);
          uint64_t v31 = 0LL;
          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_34;
          }
          *(_DWORD *)__int128 buf = 67109376;
          LODWORD(v81[0]) = v23;
          WORD2(v81[0]) = 1024;
          *(_DWORD *)((char *)v81 + 6) = v23;
          int v32 = (os_log_s *)MEMORY[0x1895F8DA0];
          uint64_t v33 = "Img4DecodeInitManifest failed with code %d (0x%X)";
LABEL_15:
          uint32_t v34 = 14;
LABEL_32:
          _os_log_impl(&dword_180741000, v32, OS_LOG_TYPE_DEFAULT, v33, buf, v34);
LABEL_33:
          uint64_t v31 = 0LL;
LABEL_34:
          CFRelease(v11);
          goto LABEL_35;
        }

        if (a3)
        {
          __int16 v64 = a5;
          do
          {
            unsigned int v65 = *a2++;
            int v66 = sub_18078A8A0((uint64_t)v82, 0, v65, a4);
            if (a5) {
              BOOL *v64 = v66 == 0;
            }
            ++v64;
            ++a4;
            --a3;
          }

          while (a3);
        }

        if (a6)
        {
          CFIndex v78 = 0LL;
          int v79 = 0LL;
          sub_18078A9BC((uint64_t)v82, 1718903152LL, 1145525076LL, &v79, &v78);
          if (v67)
          {
            int v68 = v67;
            int v69 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
            if (v69) {
              int v75 = v69 + 1;
            }
            else {
              int v75 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            }
            _MGLog( (uint64_t)v75,  1322LL,  (uint64_t)@"Img4DecodeInitManifest failed get trust object digest with code %d (0x%X)",  v70,  v71,  v72,  v73,  v74,  v68);
            if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_33;
            }
            *(_DWORD *)__int128 buf = 67109376;
            LODWORD(v81[0]) = v68;
            WORD2(v81[0]) = 1024;
            *(_DWORD *)((char *)v81 + 6) = v68;
            int v32 = (os_log_s *)MEMORY[0x1895F8DA0];
            uint64_t v33 = "Img4DecodeInitManifest failed get trust object digest with code %d (0x%X)";
            goto LABEL_15;
          }

          *a6 = CFDataCreate(0LL, v79, v78);
        }

        uint64_t v31 = 1LL;
        goto LABEL_34;
      }

      __int128 v42 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v42) {
        __int128 v48 = v42 + 1;
      }
      else {
        __int128 v48 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v48,  1283LL,  (uint64_t)@"Unable to copy the cryptoHashMethodStr",  v43,  v44,  v45,  v46,  v47,  v76);
      uint64_t v31 = 0LL;
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_WORD *)__int128 buf = 0;
      int v32 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v33 = "Unable to copy the cryptoHashMethodStr";
    }

    else
    {
      uint64_t v35 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v35) {
        __int128 v41 = v35 + 1;
      }
      else {
        __int128 v41 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v41, 1277LL, (uint64_t)@"Unable to copy the cryptoHashMethod", v36, v37, v38, v39, v40, v76);
      uint64_t v31 = 0LL;
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_WORD *)__int128 buf = 0;
      int v32 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v33 = "Unable to copy the cryptoHashMethod";
    }

    uint32_t v34 = 2;
    goto LABEL_32;
  }

  uint64_t v57 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
  if (v57) {
    uint64_t v63 = v57 + 1;
  }
  else {
    uint64_t v63 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v63, 1271LL, (uint64_t)@"Unable to copy the bootManifestHash", v58, v59, v60, v61, v62, v76);
  uint64_t v31 = 0LL;
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Unable to copy the bootManifestHash",  buf,  2u);
    uint64_t v31 = 0LL;
  }

uint64_t sub_18076AF88(const __CFData *a1, const __CFData *a2, CFStringRef theString1)
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  if (CFStringCompare(theString1, @"sha1", 0LL) == kCFCompareEqualTo)
  {
    BytePtr = (char *)CFDataGetBytePtr(a1);
    size_t Length = CFDataGetLength(a1);
    int v21 = sub_18078C4D8(BytePtr, Length, (uint64_t)__s1);
    unsigned int v22 = 20;
    int v23 = off_1896FA410;
    if (!v21)
    {
LABEL_15:
      if (v22 == CFDataGetLength(a2))
      {
        uint32_t v34 = CFDataGetBytePtr(a2);
        if (memcmp(__s1, v34, v22))
        {
          uint64_t v35 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
          if (v35) {
            __int128 v41 = v35 + 1;
          }
          else {
            __int128 v41 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          }
          _MGLog( (uint64_t)v41,  1691LL,  (uint64_t)@"The APTicket and boot manifest digest do not match!",  v36,  v37,  v38,  v39,  v40,  v74);
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "The APTicket and boot manifest digest do not match!",  buf,  2u);
          }

          if (!MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ"))
          {
            BOOL v42 = sub_1807661DC("IODeviceTree:/chosen", @"mix-n-match-prevention-status", 0);
            uint64_t result = 0LL;
            if (v42) {
              return result;
            }
          }

          v80[0] = MGGetSInt64Answer((const char **)@"566JrJVMlDfnslGpwUzNlQ", 0LL);
          v80[1] = MGGetSInt64Answer((const char **)@"TF31PAB6aO8KAbPyNKSxKA", 0LL);
          uint64_t v43 = CFDataGetBytePtr(a1);
          CFIndex v44 = CFDataGetLength(a1);
          int v45 = sub_18078B11C((uint64_t)v43, v44, (uint64_t)buf);
          if (v45)
          {
            int v46 = v45;
            uint64_t v47 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
            if (v47) {
              uint64_t v53 = v47 + 1;
            }
            else {
              uint64_t v53 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            }
            _MGLog( (uint64_t)v53,  1629LL,  (uint64_t)@"%s failed Img4DecodeInitManifest with error %d",  v48,  v49,  v50,  v51,  v52,  (char)"_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)");
            BOOL v54 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
            uint64_t result = 0LL;
            if (!v54) {
              return result;
            }
            int v76 = 136315394;
            int v77 = "_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)";
            __int16 v78 = 1024;
            int v79 = v46;
            uint64_t v15 = (os_log_s *)MEMORY[0x1895F8DA0];
            uint64_t v16 = "%s failed Img4DecodeInitManifest with error %d";
            goto LABEL_43;
          }

          sub_18078B26C(0x72667461u, (uint64_t)buf, (uint64_t)sub_18076C06C, (uint64_t)v23, (uint64_t)v80);
          if (v64)
          {
            int v65 = v64;
            int v66 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
            if (v66) {
              uint64_t v72 = v66 + 1;
            }
            else {
              uint64_t v72 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            }
            _MGLog( (uint64_t)v72,  1637LL,  (uint64_t)@"%s failed Img4DecodePerformTrustEvaluation with error %d",  v67,  v68,  v69,  v70,  v71,  (char)"_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)");
            BOOL v73 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
            uint64_t result = 0LL;
            if (!v73) {
              return result;
            }
            int v76 = 136315394;
            int v77 = "_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)";
            __int16 v78 = 1024;
            int v79 = v65;
            uint64_t v15 = (os_log_s *)MEMORY[0x1895F8DA0];
            uint64_t v16 = "%s failed Img4DecodePerformTrustEvaluation with error %d";
LABEL_43:
            uint64_t v17 = (uint8_t *)&v76;
            uint32_t v18 = 18;
            goto LABEL_35;
          }
        }

        return 1LL;
      }

      char v55 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      uint64_t v56 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v56) {
        char v55 = v56 + 1;
      }
      CFDataGetLength(a2);
      _MGLog( (uint64_t)v55,  1678LL,  (uint64_t)@"The APTicket boot manifest digest lengths did not match %d != %d",  v57,  v58,  v59,  v60,  v61,  v22);
      BOOL v62 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0LL;
      if (!v62) {
        return result;
      }
      int v63 = CFDataGetLength(a2);
      *(_DWORD *)__int128 buf = 67109376;
      *(_DWORD *)uint64_t v82 = v22;
      *(_WORD *)&v82[4] = 1024;
      *(_DWORD *)&v82[6] = v63;
      uint64_t v15 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v16 = "The APTicket boot manifest digest lengths did not match %d != %d";
LABEL_34:
      uint64_t v17 = buf;
      uint32_t v18 = 14;
      goto LABEL_35;
    }

LABEL_9:
    uint64_t v24 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v24) {
      uint64_t v30 = v24 + 1;
    }
    else {
      uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog( (uint64_t)v30,  1672LL,  (uint64_t)@"Failed to digest APTicket with error %d (0x%X)",  v25,  v26,  v27,  v28,  v29,  v21);
    BOOL v31 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (!v31) {
      return result;
    }
    *(_DWORD *)__int128 buf = 67109376;
    *(_DWORD *)uint64_t v82 = v21;
    *(_WORD *)&v82[4] = 1024;
    *(_DWORD *)&v82[6] = v21;
    uint64_t v15 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v16 = "Failed to digest APTicket with error %d (0x%X)";
    goto LABEL_34;
  }

  if (CFStringCompare(theString1, @"sha2-384", 0LL) == kCFCompareEqualTo)
  {
    int v32 = (char *)CFDataGetBytePtr(a1);
    size_t v33 = CFDataGetLength(a1);
    int v21 = sub_18078C574(v32, v33, (uint64_t)__s1);
    unsigned int v22 = 48;
    int v23 = off_1896FA448;
    if (!v21) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  uint64_t v6 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
  if (v6) {
    uint64_t v12 = v6 + 1;
  }
  else {
    uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog( (uint64_t)v12,  1665LL,  (uint64_t)@"Crypto hash method is '%@'. Current support is for hash methods '%@' and '%@'",  v7,  v8,  v9,  v10,  v11,  (char)theString1);
  BOOL v13 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v13)
  {
    *(_DWORD *)__int128 buf = 138412802;
    *(void *)uint64_t v82 = theString1;
    *(_WORD *)&v82[8] = 2112;
    uint64_t v83 = @"sha1";
    __int16 v84 = 2112;
    __int128 v85 = @"sha2-384";
    uint64_t v15 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v16 = "Crypto hash method is '%@'. Current support is for hash methods '%@' and '%@'";
    uint64_t v17 = buf;
    uint32_t v18 = 32;
LABEL_35:
    _os_log_impl(&dword_180741000, v15, OS_LOG_TYPE_DEFAULT, v16, v17, v18);
    return 0LL;
  }

  return result;
}

void sub_18076B4C4()
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  CFTypeRef v0 = (const __CFData *)sub_180765DB4("IODeviceTree:/chosen", @"syscfg-seal-keys-allowed", 0);
  qword_18C534188 = (uint64_t)v0;
  if (v0)
  {
    if (CFDataGetLength(v0) <= 0)
    {
      uint64_t v11 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v11) {
        uint64_t v17 = v11 + 1;
      }
      else {
        uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v17,  1530LL,  (uint64_t)@"syscfg-seal-keys-allowed was zero length",  v12,  v13,  v14,  v15,  v16,  v18);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        uint64_t v8 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v9 = "syscfg-seal-keys-allowed was zero length";
        uint32_t v10 = 2;
        goto LABEL_14;
      }
    }

    else if ((CFDataGetLength((CFDataRef)qword_18C534188) & 3) != 0)
    {
      CFTypeRef v1 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v1) {
        uint64_t v7 = v1 + 1;
      }
      else {
        uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog( (uint64_t)v7,  1536LL,  (uint64_t)@"syscfg-seal-keys-allowed was not a multiple of %d",  v2,  v3,  v4,  v5,  v6,  4);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109120;
        int v20 = 4;
        uint64_t v8 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v9 = "syscfg-seal-keys-allowed was not a multiple of %d";
        uint32_t v10 = 8;
LABEL_14:
        _os_log_impl(&dword_180741000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
      }
    }

    else
    {
      qword_18C534190 = (uint64_t)CFDataGetBytePtr((CFDataRef)qword_18C534188);
      dword_18C534198 = (unint64_t)CFDataGetLength((CFDataRef)qword_18C534188) >> 2;
    }
  }

BOOL sub_18076B664(const __CFString *a1, BOOL *a2)
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  BOOL v81 = 0;
  char v80 = 0;
  *(_DWORD *)buffer = 0;
  if (!a1)
  {
    uint64_t v25 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v25) {
      BOOL v31 = v25 + 1;
    }
    else {
      BOOL v31 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v31, 1827LL, (uint64_t)@"entitlement is NULL", v26, v27, v28, v29, v30, v77);
    BOOL v23 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v23;
    }
    *(_WORD *)__s = 0;
    int v32 = (os_log_s *)MEMORY[0x1895F8DA0];
    size_t v33 = "entitlement is NULL";
LABEL_60:
    _os_log_impl(&dword_180741000, v32, OS_LOG_TYPE_DEFAULT, v33, __s, 2u);
    return 0LL;
  }

  if (CFStringGetLength(a1) != 4)
  {
    uint32_t v34 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v34) {
      uint64_t v40 = v34 + 1;
    }
    else {
      uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v40, 1828LL, (uint64_t)@"invalid entitlement length", v35, v36, v37, v38, v39, v77);
    BOOL v23 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v23;
    }
    *(_WORD *)__s = 0;
    int v32 = (os_log_s *)MEMORY[0x1895F8DA0];
    size_t v33 = "invalid entitlement length";
    goto LABEL_60;
  }

  if (!CFStringGetCString(a1, buffer, 5LL, 0x8000100u))
  {
    __int128 v41 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v41) {
      uint64_t v47 = v41 + 1;
    }
    else {
      uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v47, 1829LL, (uint64_t)@"failed to get entitlement string", v42, v43, v44, v45, v46, v77);
    BOOL v23 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v23;
    }
    *(_WORD *)__s = 0;
    int v32 = (os_log_s *)MEMORY[0x1895F8DA0];
    size_t v33 = "failed to get entitlement string";
    goto LABEL_60;
  }

  unsigned int v78 = bswap32(*(unsigned int *)buffer);
  uint64_t v82 = 0LL;
  bzero(__s, 0x400uLL);
  if (!qword_18C534110)
  {
    __int128 buf = xmmword_1896F9FB8;
    uint64_t v85 = 0LL;
    qword_18C534110 = _sl_dlopen();
  }

  if (qword_18C534110 && sub_18076C3C0())
  {
    uint64_t v4 = (uint64_t (*)(uint64_t, UInt8 *, uint64_t))sub_18076C3C0();
    if (!v4) {
      sub_180799C20();
    }
    uint64_t v5 = v4(2LL, __s, 1024LL);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v7) {
        uint64_t v13 = v7 + 1;
      }
      else {
        uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v13, 1796LL, (uint64_t)@"failed to locate AP ticket: %ld", v8, v9, v10, v11, v12, v6);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v6;
        uint64_t v14 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v15 = "failed to locate AP ticket: %ld";
        uint32_t v16 = 12;
LABEL_44:
        _os_log_impl(&dword_180741000, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&buf, v16);
        goto LABEL_19;
      }

      goto LABEL_19;
    }
  }

  else
  {
    __strlcpy_chk();
  }

  uint64_t v17 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  size_t v18 = strlen((const char *)__s);
  CFURLRef v19 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x189604DB0], __s, v18, 0);
  if (v19)
  {
    CFURLRef v20 = v19;
    int v21 = sub_18078C94C(v17, (CFTypeRef *)&v82, v19);
    if (v21)
    {
      int v55 = v21;
      uint64_t v56 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      BOOL v62 = v56
          ? v56 + 1
          : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v62, 1805LL, (uint64_t)@"failed to read AP ticket: %d", v57, v58, v59, v60, v61, v55);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 67109120;
        DWORD1(buf) = v55;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "failed to read AP ticket: %d",  (uint8_t *)&buf,  8u);
      }
    }

    CFRelease(v20);
    unsigned int v22 = v82;
    if (v82) {
      goto LABEL_20;
    }
  }

  else
  {
    uint64_t v48 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v48) {
      BOOL v54 = v48 + 1;
    }
    else {
      BOOL v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v54, 1802LL, (uint64_t)@"failed to create path URL", v49, v50, v51, v52, v53, v77);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      uint64_t v14 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v15 = "failed to create path URL";
      uint32_t v16 = 2;
      goto LABEL_44;
    }
  }

LABEL_19:
  unsigned int v22 = sub_1807677CC(0x6170746Bu);
  if (!v22)
  {
    uint64_t v70 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v70) {
      int v76 = v70 + 1;
    }
    else {
      int v76 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v76, 1841LL, (uint64_t)@"failed to obtain APTicket", v71, v72, v73, v74, v75, v77);
    BOOL v23 = 0LL;
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      return v23;
    }
    *(_WORD *)__s = 0;
    int v32 = (os_log_s *)MEMORY[0x1895F8DA0];
    size_t v33 = "failed to obtain APTicket";
    goto LABEL_60;
  }

    uint64_t v13 = 3LL;
    goto LABEL_20;
  }

  return result;
}

uint64_t sub_18076BBD0()
{
  return sub_1807885CC((uint64_t)sub_18076BBDC);
}

void sub_18076BBDC(int a1, char *__format, ...)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  vsnprintf(__str, 0xFFuLL, __format, va);
  if (a1 == 1)
  {
    uint64_t v17 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v17) {
      BOOL v23 = v17 + 1;
    }
    else {
      BOOL v23 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v23, 508LL, (uint64_t)@"%s", v18, v19, v20, v21, v22, (char)__str);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint32_t v34 = __str;
      uint64_t v24 = (os_log_s *)MEMORY[0x1895F8DA0];
      os_log_type_t v25 = OS_LOG_TYPE_INFO;
LABEL_18:
      _os_log_impl(&dword_180741000, v24, v25, "%s", buf, 0xCu);
    }
  }

  else
  {
    if (!a1)
    {
      uint64_t v3 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v3) {
        uint64_t v9 = v3 + 1;
      }
      else {
        uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v9, 504LL, (uint64_t)@"%s", v4, v5, v6, v7, v8, (char)__str);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG)) {
        sub_180799C40((uint64_t)__str, v10, v11, v12, v13, v14, v15, v16);
      }
      return;
    }

    uint64_t v26 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v26) {
      int v32 = v26 + 1;
    }
    else {
      int v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v32, 513LL, (uint64_t)@"%s", v27, v28, v29, v30, v31, (char)__str);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint32_t v34 = __str;
      uint64_t v24 = (os_log_s *)MEMORY[0x1895F8DA0];
      os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_18;
    }
  }

void *sub_18076BDB0()
{
  if (qword_18C5341C8 != -1) {
    dispatch_once(&qword_18C5341C8, &unk_1896F9F58);
  }
  uint64_t result = (void *)qword_18C5341C0;
  if (qword_18C5341C0)
  {
    uint64_t result = dlsym((void *)qword_18C5341C0, "AMFDRSealingMapCopyInstanceForClass");
    off_18C5341B0 = (uint64_t (*)(void, void))result;
  }

  return result;
}

void sub_18076BE08()
{
  qword_18C5341C0 = (uint64_t)dlopen("/usr/lib/libFDR.dylib", 1);
  if (!qword_18C5341C0)
  {
    CFTypeRef v0 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v0) {
      uint64_t v6 = v0 + 1;
    }
    else {
      uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v6, 1161LL, (uint64_t)@"Unable to dlopen /usr/lib/libFDR.dylib", v1, v2, v3, v4, v5, v7[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Unable to dlopen /usr/lib/libFDR.dylib",  v7,  2u);
    }
  }

void *sub_18076BEB0()
{
  return sub_1807827E0(sub_18076BEBC);
}

void sub_18076BEBC(unsigned int a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if (a1 >= 5)
  {
    if (a1 - 5 >= 2)
    {
      if (a1 == 7)
      {
        uint64_t v19 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
        os_log_type_t v25 = v19
            ? v19 + 1
            : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
        _MGLog((uint64_t)v25, 1144LL, (uint64_t)@"%s", v20, v21, v22, v23, v24, a2);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEBUG)) {
          sub_180799C40(a2, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }

    else
    {
      uint64_t v12 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
      if (v12) {
        uint64_t v18 = v12 + 1;
      }
      else {
        uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v18, 1140LL, (uint64_t)@"%s", v13, v14, v15, v16, v17, a2);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v34 = a2;
        uint64_t v10 = (os_log_s *)MEMORY[0x1895F8DA0];
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_13;
      }
    }
  }

  else
  {
    uint64_t v3 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
    if (v3) {
      uint64_t v9 = v3 + 1;
    }
    else {
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v9, 1135LL, (uint64_t)@"%s", v4, v5, v6, v7, v8, a2);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v34 = a2;
      uint64_t v10 = (os_log_s *)MEMORY[0x1895F8DA0];
      os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_13:
      _os_log_impl(&dword_180741000, v10, v11, "%s", buf, 0xCu);
    }
  }

uint64_t sub_18076C06C(unsigned int a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  unint64_t v40 = 0LL;
  if (a4)
  {
    if (!a3)
    {
      uint64_t v14 = *a4;
      uint64_t v15 = a4[1];
      if (a1 == 1162037572 || a1 == 1128810832)
      {
        uint64_t v16 = sub_18078AB00(a2, a1, &v40);
        if ((_DWORD)v16)
        {
          uint64_t v4 = v16;
          uint64_t v17 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
          if (v17) {
            uint64_t v23 = v17 + 1;
          }
          else {
            uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          }
          _MGLog( (uint64_t)v23,  1591LL,  (uint64_t)@"%s failed to decode Img4 property tag: 0x%X with error %d",  v18,  v19,  v20,  v21,  v22,  (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 136315650;
            uint64_t v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
            __int16 v43 = 1024;
            *(_DWORD *)uint64_t v44 = a1;
            *(_WORD *)&v44[4] = 1024;
            *(_DWORD *)&v44[6] = v4;
            _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%s failed to decode Img4 property tag: 0x%X with error %d",  buf,  0x18u);
          }

          return v4;
        }

        if (a1 == 1162037572)
        {
          if (v40 != v15)
          {
            size_t v33 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
            if (v33) {
              uint64_t v39 = v33 + 1;
            }
            else {
              uint64_t v39 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            }
            _MGLog( (uint64_t)v39,  1607LL,  (uint64_t)@"%s Img4 UniqueChipID (0x%llX) did not match real UniqueChipID (0x%llX)",  v34,  v35,  v36,  v37,  v38,  (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
            if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
              return 1LL;
            }
            *(_DWORD *)__int128 buf = 136315650;
            uint64_t v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
            __int16 v43 = 2048;
            *(void *)uint64_t v44 = v40;
            *(_WORD *)&v44[8] = 2048;
            uint64_t v45 = v15;
            uint64_t v31 = (os_log_s *)MEMORY[0x1895F8DA0];
            uint64_t v32 = "%s Img4 UniqueChipID (0x%llX) did not match real UniqueChipID (0x%llX)";
            goto LABEL_33;
          }
        }

        else if (a1 == 1128810832 && v40 != v14)
        {
          uint64_t v24 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
          if (v24) {
            uint64_t v30 = v24 + 1;
          }
          else {
            uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          }
          _MGLog( (uint64_t)v30,  1599LL,  (uint64_t)@"%s Img4 ChipID (0x%llX) did not match real ChipID (0x%llX)",  v25,  v26,  v27,  v28,  v29,  (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
          if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
            return 1LL;
          }
          *(_DWORD *)__int128 buf = 136315650;
          uint64_t v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
          __int16 v43 = 2048;
          *(void *)uint64_t v44 = v40;
          *(_WORD *)&v44[8] = 2048;
          uint64_t v45 = v14;
          uint64_t v31 = (os_log_s *)MEMORY[0x1895F8DA0];
          uint64_t v32 = "%s Img4 ChipID (0x%llX) did not match real ChipID (0x%llX)";
LABEL_33:
          _os_log_impl(&dword_180741000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, 0x20u);
          return 1LL;
        }
      }
    }

    return 0LL;
  }

  uint64_t v5 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c",  47);
  if (v5) {
    os_log_type_t v11 = v5 + 1;
  }
  else {
    os_log_type_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog( (uint64_t)v11,  1576LL,  (uint64_t)@"%s context was NULL",  v6,  v7,  v8,  v9,  v10,  (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "%s context was NULL", buf, 0xCu);
  }

  return 6LL;
}

uint64_t sub_18076C3C0()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000LL;
  uint64_t v0 = qword_18C534120;
  uint64_t v6 = qword_18C534120;
  if (!qword_18C534120)
  {
    v2[0] = MEMORY[0x1895F87A8];
    v2[1] = 0x40000000LL;
    v2[2] = sub_18076C454;
    v2[3] = &unk_1896F9FD8;
    v2[4] = &v3;
    sub_18076C454((uint64_t)v2);
    uint64_t v0 = v4[3];
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void *sub_18076C454(uint64_t a1)
{
  if (qword_18C534110)
  {
    uint64_t v2 = (void *)qword_18C534110;
  }

  else
  {
    qword_18C534110 = _sl_dlopen();
    uint64_t v2 = (void *)qword_18C534110;
    if (!qword_18C534110)
    {
      uint64_t v4 = (void *)abort_report_np();
      free(v4);
    }
  }

  uint64_t result = dlsym(v2, "lookupPathForPersonalizedData");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  qword_18C534120 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_18076C544( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

LABEL_17:
  return v12;
}

uint64_t sub_18076DD18()
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (sub_18076DFBC()) {
    return 1LL;
  }
  uint64_t v0 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
  if (v0) {
    uint64_t v6 = v0 + 1;
  }
  else {
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
  }
  _MGLog((uint64_t)v6, 530LL, (uint64_t)@"IOKit is busy, waiting 5s", v1, v2, v3, v4, v5, v33);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "IOKit is busy, waiting 5s", buf, 2u);
  }

  sleep(5u);
  if (sub_18076DFBC()) {
    return 1LL;
  }
  uint64_t v8 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
  if (v8) {
    uint64_t v14 = v8 + 1;
  }
  else {
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
  }
  _MGLog((uint64_t)v14, 538LL, (uint64_t)@"IOKit did not stop, getting busy services", v9, v10, v11, v12, v13, v34);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "IOKit did not stop, getting busy services",  buf,  2u);
  }

  uint64_t v15 = (void *)objc_opt_new();
  if ([v15 createTreeIterator:"IOService"])
  {
    uint64_t v16 = (const __CFArray *)[v15 iteratorCopyBusyServiceNames];
    if (CFArrayGetCount(v16) >= 1)
    {
      CFIndex v17 = 0LL;
      uint64_t v18 = (os_log_s *)MEMORY[0x1895F8DA0];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v16, v17);
        CFTypeID v20 = CFGetTypeID(ValueAtIndex);
        if (v20 == CFStringGetTypeID() && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v36 = ValueAtIndex;
          _os_log_impl(&dword_180741000, v18, OS_LOG_TYPE_DEFAULT, "IOKit is busy with %@", buf, 0xCu);
        }

        ++v17;
      }

      while (v17 < CFArrayGetCount(v16));
    }

    if (CFArrayGetCount(v16) > 0)
    {
      CFIndex Count = CFArrayGetCount(v16);
      uint64_t v22 = CFArrayGetValueAtIndex(v16, Count - 1);
      CFTypeID v23 = CFGetTypeID(v22);
      CFTypeID TypeID = CFStringGetTypeID();
      BOOL v25 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT);
      if (v23 == TypeID)
      {
        if (v25) {
          sub_180799CAC((uint64_t)v22, v26, v27, v28, v29, v30, v31, v32);
        }
      }

      else if (v25)
      {
        sub_180799D1C((uint64_t)v22, v26, v27, v28, v29, v30, v31, v32);
      }
    }

    CFRelease(v16);
  }

  return 0LL;
}

BOOL sub_18076DFBC()
{
  kern_return_t v0;
  BOOL v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t v10[12];
  uint32_t busyState;
  busyState = -1;
  uint64_t v0 = IOKitGetBusyState(*MEMORY[0x1896086A8], &busyState);
  uint64_t v1 = (v0 | busyState) == 0;
  if (!(v0 | busyState))
  {
    uint64_t v2 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
    if (v2) {
      uint64_t v8 = v2 + 1;
    }
    else {
      uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    }
    _MGLog((uint64_t)v8, 517LL, (uint64_t)@"IOKit is ready", v3, v4, v5, v6, v7, v10[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "IOKit is ready", v10, 2u);
    }
  }

  return v1;
}

uint64_t sub_18076E07C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_opt_new();
  else {
    uint64_t v5 = 0LL;
  }

  return v5;
}

BOOL sub_18076E0EC(uint64_t a1, const void *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v4 = (const __CFDictionary *)sub_18076E07C(a1, 0LL);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  CFTypeRef Value = CFDictionaryGetValue(v4, a2);
  BOOL v7 = Value != 0LL;
  uint64_t v8 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
  if (v8) {
    uint64_t v14 = v8 + 1;
  }
  else {
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
  }
  _MGLog((uint64_t)v14, 593LL, (uint64_t)@"Property %@[%@] found %@", v9, v10, v11, v12, v13, a1);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v17 = a1;
    __int16 v18 = 2112;
    uint64_t v19 = a2;
    __int16 v20 = 2112;
    uint64_t v21 = Value;
    _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Property %@[%@] found %@", buf, 0x20u);
  }

  CFRelease(v5);
  return v7;
}

BOOL sub_18076E21C(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v3 = (const __CFDictionary *)sub_18076E07C(a1, a2);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  CFIndex Count = CFDictionaryGetCount(v3);
  BOOL v6 = Count > 0;
  if (Count >= 1)
  {
    BOOL v7 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
    if (v7) {
      uint64_t v13 = v7 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    }
    _MGLog((uint64_t)v13, 607LL, (uint64_t)@"Node %@ found", v8, v9, v10, v11, v12, a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v16 = a1;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Node %@ found", buf, 0xCu);
    }
  }

  CFRelease(v4);
  return v6;
}

uint64_t sub_18076E324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_opt_new();
  else {
    uint64_t v5 = 0LL;
  }

  return v5;
}

BOOL sub_18076E394(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v3 = (const __CFDictionary *)sub_18076E324(a1, a2);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  CFIndex Count = CFDictionaryGetCount(v3);
  BOOL v6 = Count > 0;
  if (Count >= 1)
  {
    BOOL v7 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m",  47);
    if (v7) {
      uint64_t v13 = v7 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    }
    _MGLog((uint64_t)v13, 631LL, (uint64_t)@"Node %@ found", v8, v9, v10, v11, v12, a1);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v16 = a1;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Node %@ found", buf, 0xCu);
    }
  }

  CFRelease(v4);
  return v6;
}

uint64_t sub_18076E49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)objc_opt_new();
  if ([v9 createTreeIterator:"IODeviceTree"]
    && (uint64_t v10 = (const void *)[v9 copyDeviceTreeProperty:a2 withFirstChar:a3 propertyName:a4 withPropertyFirstChar:a5]) != 0)
  {
    CFRelease(v10);
    uint64_t v11 = 1LL;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  return v11;
}

uint64_t sub_18076E528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)objc_opt_new();
  if ([v5 createTreeIterator:"IODeviceTree"]
    && (io_object_t v6 = [v5 copyDeviceTreeStructureNext:a2 withFirstChar:a3]) != 0)
  {
    IOObjectRelease(v6);
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

uint64_t sub_18076E59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)objc_opt_new();
  else {
    uint64_t v10 = 0LL;
  }

  return v10;
}

uint64_t sub_18076E620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)objc_opt_new();
  else {
    uint64_t v10 = 0LL;
  }

  return v10;
}

uint64_t sub_18076E6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)objc_opt_new();
  else {
    uint64_t v10 = 0LL;
  }

  return v10;
}

uint64_t sub_18076E728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)objc_opt_new();
  if ([v9 createTreeIterator:"IOService"]) {
    uint64_t v10 = [v9 copyStringFromServiceTree:a2 withFirstChar:a3 propertyName:a4 withPropertyFirstChar:a5];
  }
  else {
    uint64_t v10 = 0LL;
  }

  return v10;
}

uint64_t sub_18076E7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)objc_opt_new();
  if ([v9 createTreeIterator:"IOService"]) {
    uint64_t v10 = [v9 copyPropertyFromServiceTree:a2 withFirstChar:a3 propertyName:a4 withPropertyFirstChar:a5];
  }
  else {
    uint64_t v10 = 0LL;
  }

  return v10;
}

void *sub_18076E830()
{
  id v0 = objc_alloc_init(MEMORY[0x189603FC8]);
  uint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = sub_18076E59C( (uint64_t)v0,  (uint64_t)@"Ai0zsJQ3+sTFkU6/lLbd5A",  111LL,  (uint64_t)@"yeQy+rgNoD7+YIY6mSVOhg",  101LL);
    uint64_t v3 = (const void *)v2;
    if (v2)
    {
      [MEMORY[0x189607968] numberWithInteger:1];
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
      [v1 setObject:v3 forKey:v4];
    }

    uint64_t v5 = sub_18076E59C( v2,  (uint64_t)@"Ai0zsJQ3+sTFkU6/lLbd5A",  111LL,  (uint64_t)@"UF3CoK9RCYXfTyzttoxNDQ",  101LL);
    io_object_t v6 = (const void *)v5;
    if (v5)
    {
      [MEMORY[0x189607968] numberWithInteger:2];
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
      [v1 setObject:v6 forKey:v7];
    }

    uint64_t v8 = sub_18076E59C( v5,  (uint64_t)@"Ai0zsJQ3+sTFkU6/lLbd5A",  111LL,  (uint64_t)@"mug/QuG6jZ3CYR9p7OWQaw",  98LL);
    uint64_t v9 = (const void *)v8;
    if (v8)
    {
      [MEMORY[0x189607968] numberWithInteger:4];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
      [v1 setObject:v9 forKey:v10];
    }

    uint64_t v11 = (const void *)sub_18076E59C( v8,  (uint64_t)@"4k6Wv56SWfITjzet+hIHMQ",  109LL,  (uint64_t)@"sYxZdpH3i8nwjZNet0QuAw",  102LL);
    if (v11)
    {
      [MEMORY[0x189607968] numberWithInteger:3];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
      [v1 setObject:v11 forKey:v12];
    }

    if (v3) {
      CFRelease(v3);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v11) {
      CFRelease(v11);
    }
    id v13 = v1;
  }

  return v1;
}

uint64_t sub_18076E9DC(uint64_t a1)
{
  uint64_t v2 = sub_18076E49C(a1, (uint64_t)@"marconi-wifi", 0LL, a1, 0LL);
  if ((v2 & 1) != 0) {
    return 1LL;
  }
  else {
    return sub_18076E49C(v2, (uint64_t)@"wlan", 0LL, a1, 0LL);
  }
}

void sub_18076EA38( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

OS_MobileGestalt *MobileGestalt_get_current_device()
{
  return objc_alloc_init(&OBJC_CLASS___OS_MobileGestalt);
}

BOOL MobileGestalt_get_has3GProximityCapability()
{
  return MGGetBoolAnswer((const char **)@"NXJOYK7VhNn7ugbF2kx0zg");
}

BOOL MobileGestalt_get_has3GVeniceCapability()
{
  return MGGetBoolAnswer((const char **)@"DGBWzPMdVuqPxgH7iSz3SA");
}

BOOL MobileGestalt_get_has720PPlaybackCapability()
{
  return MGGetBoolAnswer((const char **)@"Lg1EJX11Jb7EbveB6+YgVQ");
}

uint64_t MobileGestalt_get_aDSCapability(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"qRxbmK4B8fGc06Iwe8YptQ");
  if (v3)
  {
    uint64_t v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      io_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      io_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799DB8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_apnCapability()
{
  return MGGetBoolAnswer((const char **)@"spGVujDEmyCzDznXozB3oA");
}

BOOL MobileGestalt_get_arm64ExecutionCapability()
{
  return MGGetBoolAnswer((const char **)@"kKgJsWN/rBUAkimOtm/wbA");
}

BOOL MobileGestalt_get_arm64EExecutionCapability()
{
  return MGGetBoolAnswer((const char **)@"li+w2foswFu0srn5UxdOug");
}

BOOL MobileGestalt_get_armV6ExecutionCapability()
{
  return MGGetBoolAnswer((const char **)@"g+9NpjmSVwtomd8nyNJimg");
}

BOOL MobileGestalt_get_armV7ExecutionCapability()
{
  return MGGetBoolAnswer((const char **)@"DWrhyh1BwYypYmW5q78Wuw");
}

BOOL MobileGestalt_get_armV7SExecutionCapability()
{
  return MGGetBoolAnswer((const char **)@"RYO2N0gqp5hHCik2TEiSVA");
}

BOOL MobileGestalt_get_aV1DecodingCapability()
{
  return MGGetBoolAnswer((const char **)@"PJKxdi6epBZAu1rqAsrcjQ");
}

const void *MobileGestalt_copy_aVDDecodingRate_obj()
{
  return (id)MGCopyAnswer((const char **)@"J1QHVh74Nnd6Rqyiq71/yw");
}

char *MobileGestalt_copy_awdID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"MWduuAGptrl7qIzWqBmOqQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_awdID_obj()
{
  return (id)MGCopyAnswer((const char **)@"MWduuAGptrl7qIzWqBmOqQ");
}

BOOL MobileGestalt_get_awdLCapability()
{
  return MGGetBoolAnswer((const char **)@"XI87Zkcr5j1B/p2dom/B6A");
}

uint64_t MobileGestalt_get_absoluteDepthLimit(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"FtgLNPlv55lerm7FY/kClw");
  if (v3)
  {
    uint64_t v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      io_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      io_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799E28(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_accelerometerCapability()
{
  return MGGetBoolAnswer((const char **)@"39ZkJVEsL4pmCXbg+89QmQ");
}

BOOL MobileGestalt_get_accessibilityCapability()
{
  return MGGetBoolAnswer((const char **)@"16N2bLOzcgJEsZToEX21Zg");
}

uint64_t MobileGestalt_get_acousticID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"XWAyufZ2SrclH9F9EDmBKw");
  if (v3)
  {
    uint64_t v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      io_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      io_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799E98(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_activationProtocol(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"zP3kBA1Biwz2d6PTIIbmUQ");
  if (v3)
  {
    uint64_t v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      io_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      io_object_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799F08(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_activeWirelessTechnology()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"Eavu9TP+iZ0Lzlk7FU6w6Q");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_activeWirelessTechnology_obj()
{
  return (id)MGCopyAnswer((const char **)@"Eavu9TP+iZ0Lzlk7FU6w6Q");
}

float MobileGestalt_get_actuatorResonantFrequency(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"hhRNi2d3z2WEFmU+xG/EXw");
  if (v2)
  {
    uint64_t v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }

      [v1 log];
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_180799F78(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }

  float v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_additionalTextTonesCapability()
{
  return MGGetBoolAnswer((const char **)@"6k70IxahfOQTZbGwu++QwA");
}

uint64_t MobileGestalt_get_aggregateDevicePhotoZoomFactor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"JLP/IinyzetEPztvoNUNKg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799FE8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_aggregateDeviceVideoZoomFactor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"IweaHIDpz+rknAcb3+xg9g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A058(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_airDropCapability()
{
  return MGGetBoolAnswer((const char **)@"IBqcPacFMPIX8HMWob444A");
}

BOOL MobileGestalt_get_airDropRestriction()
{
  return MGGetBoolAnswer((const char **)@"/bSMNaIuUT58N/BN1nYUjw");
}

BOOL MobileGestalt_get_airplaneMode()
{
  return MGGetBoolAnswer((const char **)@"l/n0Z7pMB8k0GyTKz3v3Tw");
}

BOOL MobileGestalt_get_airplayMirroringCapability()
{
  return MGGetBoolAnswer((const char **)@"yMmSdMRKEHRTCQ72ltCH1w");
}

BOOL MobileGestalt_get_allow32BitApps()
{
  return MGGetBoolAnswer((const char **)@"ibhfX8FQ6b809N632Ey98g");
}

BOOL MobileGestalt_get_allowOnlyATVCPSDKApps()
{
  return MGGetBoolAnswer((const char **)@"Ex6ChutQnIx5Zm6c5uwYuw");
}

BOOL MobileGestalt_get_allowYouTube()
{
  return MGGetBoolAnswer((const char **)@"7l0BaQsNxJCanoeHMJ2huA");
}

BOOL MobileGestalt_get_allowYouTubePlugin()
{
  return MGGetBoolAnswer((const char **)@"MTa8c+pEdbK0tHGXP06xOw");
}

uint64_t MobileGestalt_get_alwaysOnDisplayMaxMemory(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"Ty4lICNS1jQh45sB3wQd7A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A0C8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_ambientLightSensorCapability()
{
  return MGGetBoolAnswer((const char **)@"lo3szoQ4sLy7o3+ZD0GcAQ");
}

char *MobileGestalt_copy_ambientLightSensorSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"UCLOC2TKe3vRkId34ubKWw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_ambientLightSensorSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"UCLOC2TKe3vRkId34ubKWw");
}

UInt8 *MobileGestalt_copy_apnonce()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"hykQtM0zkNe2/IY69+3PPQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_apnonce_obj()
{
  return (id)MGCopyAnswer((const char **)@"hykQtM0zkNe2/IY69+3PPQ");
}

UInt8 *MobileGestalt_copy_apnonceRetrieve()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"UcRWpMcvJDfLzn6utLj3XQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_apnonceRetrieve_obj()
{
  return (id)MGCopyAnswer((const char **)@"UcRWpMcvJDfLzn6utLj3XQ");
}

uint64_t MobileGestalt_get_appCapacityTVOS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"kkSkHTEei96N1ZehicOgoA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A138(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_appStoreCapability()
{
  return MGGetBoolAnswer((const char **)@"XEoV4os3FAUL7yHDxWmSMw");
}

BOOL MobileGestalt_get_appleInternalInstallCapability()
{
  return MGGetBoolAnswer((const char **)@"EqrsVvjcYDdxHBiQmGhAWw");
}

uint64_t MobileGestalt_get_appleNeuralEngineSubtype(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"eJGhnVvylF3dMOHBKJzeiw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A1A8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_applicationInstallationCapability()
{
  return MGGetBoolAnswer((const char **)@"7yzVesPANxqKQ+oqNPhTwg");
}

char *MobileGestalt_copy_arcModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"KzUQgIyBRinkweVMNUCOWA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_arcModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"KzUQgIyBRinkweVMNUCOWA");
}

uint64_t MobileGestalt_get_arrowChipID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"nhGhVMyvrWYe9U2ltAUImg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A218(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_arrowUniqueChipID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"CPiqZJJPocpjc5C5qe1tiw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A288(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_artworkTraitDisplayGamut()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"LTI8wHvEYKy8zR1IXBW1uQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_artworkTraitDisplayGamut_obj()
{
  return (id)MGCopyAnswer((const char **)@"LTI8wHvEYKy8zR1IXBW1uQ");
}

const void *MobileGestalt_copy_artworkTraits_obj()
{
  return (id)MGCopyAnswer((const char **)@"oPeik/9e8lQWMszEjbPzng");
}

BOOL MobileGestalt_get_assistantCapability()
{
  return MGGetBoolAnswer((const char **)@"xOJfWykLmQCc8lKlzMlrLA");
}

char *MobileGestalt_copy_attestationUniqueDeviceID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"0KHhsv2F/BGA9AppFljmKg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_attestationUniqueDeviceID_obj()
{
  return (id)MGCopyAnswer((const char **)@"0KHhsv2F/BGA9AppFljmKg");
}

BOOL MobileGestalt_get_audioPlaybackCapability()
{
  return MGGetBoolAnswer((const char **)@"paR6NqTecAD44x45kzV87g");
}

BOOL MobileGestalt_get_autoFocusCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"o0axLo6LGt8HbuEWdLZ92Q");
}

uint64_t MobileGestalt_get_automaticMicMode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"yLfrxjB6AbZTASUIAcqi2Q");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A2F8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

const void *MobileGestalt_copy_availableDisplayZoomSizes_obj()
{
  return (id)MGCopyAnswer((const char **)@"ILaGO+KV5JAOq7Q5GEwbWQ");
}

BOOL MobileGestalt_get_backlightCapability()
{
  return MGGetBoolAnswer((const char **)@"1DQNgySZSIjPqLWroIzfiQ");
}

UInt8 *MobileGestalt_copy_basebandAPTimeSync()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"HXTqT3UXOKuTEklxz+wMAA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_basebandAPTimeSync_obj()
{
  return (id)MGCopyAnswer((const char **)@"HXTqT3UXOKuTEklxz+wMAA");
}

char *MobileGestalt_copy_basebandBoardSnum()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"ToJGxfcjkIerYyeL2e8c4A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandBoardSnum_obj()
{
  return (id)MGCopyAnswer((const char **)@"ToJGxfcjkIerYyeL2e8c4A");
}

const void *MobileGestalt_copy_basebandCertId_obj()
{
  return (id)MGCopyAnswer((const char **)@"Q5QHkCRPRmiX3L/5xxKrRg");
}

const void *MobileGestalt_copy_basebandChipId_obj()
{
  return (id)MGCopyAnswer((const char **)@"eNgz35a7iZnVeEMwsBQZew");
}

char *MobileGestalt_copy_basebandChipset()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"pB5sZVvnp+QjZQtt2KfQvA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandChipset_obj()
{
  return (id)MGCopyAnswer((const char **)@"pB5sZVvnp+QjZQtt2KfQvA");
}

uint64_t MobileGestalt_get_basebandClass(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"XQBHOWjPt2P+uNqlLm1P7A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A368(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

const void *MobileGestalt_copy_basebandFirmwareManifestData_obj()
{
  return (id)MGCopyAnswer((const char **)@"FkD7K642S082lnfw/ohHzg");
}

const void *MobileGestalt_copy_basebandFirmwareUpdateInfo_obj()
{
  return (id)MGCopyAnswer((const char **)@"Djv9tHz6MLdTUDjnkq0obQ");
}

char *MobileGestalt_copy_basebandFirmwareVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"PQzmRjKVMistuIVsqs6QXA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandFirmwareVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"PQzmRjKVMistuIVsqs6QXA");
}

const void *MobileGestalt_copy_basebandKeyHashInformation_obj()
{
  return (id)MGCopyAnswer((const char **)@"H5HW20mJr/djc40tAehkww");
}

char *MobileGestalt_copy_basebandPostponementStatus()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"vaiFeAcMTIDXMSxTr8JwCw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandPostponementStatus_obj()
{
  return (id)MGCopyAnswer((const char **)@"vaiFeAcMTIDXMSxTr8JwCw");
}

const void *MobileGestalt_copy_basebandPostponementStatusBlob_obj()
{
  return (id)MGCopyAnswer((const char **)@"YUobJKXH3+ukrUe13TXL3Q");
}

UInt8 *MobileGestalt_copy_basebandRegionSKU()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"91LyMcx4z1w3SGVeqteMnA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_basebandRegionSKU_obj()
{
  return (id)MGCopyAnswer((const char **)@"91LyMcx4z1w3SGVeqteMnA");
}

uint64_t MobileGestalt_get_basebandRegionSKURadioTechnology(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"Z3gOHeppbL6+rblIe8H5Ag");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A3D8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

const void *MobileGestalt_copy_basebandSecurityInfoBlob_obj()
{
  return (id)MGCopyAnswer((const char **)@"EImfMz+bzJrUkVQKyY6tEg");
}

UInt8 *MobileGestalt_copy_basebandSerialNumber()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"Nmhz54v5ZLqj2I4NPFIFqQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_basebandSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"Nmhz54v5ZLqj2I4NPFIFqQ");
}

char *MobileGestalt_copy_basebandStatus()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"CN64p1hw1JVdTHCfBdgPLQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandStatus_obj()
{
  return (id)MGCopyAnswer((const char **)@"CN64p1hw1JVdTHCfBdgPLQ");
}

char *MobileGestalt_copy_basebandUniqueId()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"vIccod02kDxScKF5s2h6OA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandUniqueId_obj()
{
  return (id)MGCopyAnswer((const char **)@"vIccod02kDxScKF5s2h6OA");
}

uint64_t MobileGestalt_get_batteryCurrentCapacity(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"f2DlVMUVcV+MeWs/g2ku+g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A448(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_batteryIsCharging()
{
  return MGGetBoolAnswer((const char **)@"sLe8lqXRlqZM74MNUoVcyQ");
}

BOOL MobileGestalt_get_batteryIsFullyCharged()
{
  return MGGetBoolAnswer((const char **)@"jgE7MmmkZAG0BiWVqD7bMQ");
}

char *MobileGestalt_copy_batterySerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"DcQNvnO5Uhpc1jjGIrzyng");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_batterySerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"DcQNvnO5Uhpc1jjGIrzyng");
}

BOOL MobileGestalt_get_blueLightReductionSupported()
{
  return MGGetBoolAnswer((const char **)@"F1Xz9g1JORibBS9DYPUPrg");
}

char *MobileGestalt_copy_bluetoothAddress()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"k5lVWbXuiZHLA17KGiVUAA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_bluetoothAddress_obj()
{
  return (id)MGCopyAnswer((const char **)@"k5lVWbXuiZHLA17KGiVUAA");
}

BOOL MobileGestalt_get_bluetoothCapability()
{
  return MGGetBoolAnswer((const char **)@"XSLlJd/8sMyXO0qtvvUTBQ");
}

BOOL MobileGestalt_get_bluetoothLE2Capability()
{
  return MGGetBoolAnswer((const char **)@"q3JBrhzy5fyJ1+LAITPW0w");
}

BOOL MobileGestalt_get_bluetoothLECapability()
{
  return MGGetBoolAnswer((const char **)@"8/HMvzDR3J6m0aY3NYeqcg");
}

uint64_t MobileGestalt_get_boardId(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"0uthiXrHZ212KvcJizKHEw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A4B8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_boardRevision(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"VqRhf8vgXr9B+SYvpnX39g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A528(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

UInt8 *MobileGestalt_copy_bootManifestHash()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"Qq9/Mya05P4ToEr1pMpGGg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_bootManifestHash_obj()
{
  return (id)MGCopyAnswer((const char **)@"Qq9/Mya05P4ToEr1pMpGGg");
}

UInt8 *MobileGestalt_copy_bootNonce()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"1Rm/mWYEI5ttaC0dJ3sHBQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_bootNonce_obj()
{
  return (id)MGCopyAnswer((const char **)@"1Rm/mWYEI5ttaC0dJ3sHBQ");
}

char *MobileGestalt_copy_bridgeBuild()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"GxXmRWHjsY5yAVhMfCH6Lg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_bridgeBuild_obj()
{
  return (id)MGCopyAnswer((const char **)@"GxXmRWHjsY5yAVhMfCH6Lg");
}

char *MobileGestalt_copy_bridgeRestoreVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"Glo+aTkt0Uw31BghCxnsyQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_bridgeRestoreVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"Glo+aTkt0Uw31BghCxnsyQ");
}

BOOL MobileGestalt_get_buddyLanguagesAnimationRequiresOptimization()
{
  return MGGetBoolAnswer((const char **)@"z+5gEULGC7aEYopBd4ggpA");
}

char *MobileGestalt_copy_buildID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"qwXfFvH5jPXPxrny0XuGtQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_buildID_obj()
{
  return (id)MGCopyAnswer((const char **)@"qwXfFvH5jPXPxrny0XuGtQ");
}

char *MobileGestalt_copy_buildVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"mZfUC7qo4pURNhyMHZ62RQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_buildVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"mZfUC7qo4pURNhyMHZ62RQ");
}

BOOL MobileGestalt_get_c2KDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"tdUWKiiM7JdctnzQuvaVVA");
}

char *MobileGestalt_copy_cpuArchitecture()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"k7QIBwZJJOVw+Sej/8h8VA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_cpuArchitecture_obj()
{
  return (id)MGCopyAnswer((const char **)@"k7QIBwZJJOVw+Sej/8h8VA");
}

uint64_t MobileGestalt_get_cpuSubType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"AWEfP3xWh0q1MjO3JAy/AA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A598(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_cpuType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"xZm4Ky2/qswyf7ykvlchYg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A608(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_callForwardingCapability()
{
  return MGGetBoolAnswer((const char **)@"57eLnXynqDlQaGEi+9JAtQ");
}

BOOL MobileGestalt_get_callWaitingCapability()
{
  return MGGetBoolAnswer((const char **)@"eXCYx/SHTZIn5LInWvZByw");
}

BOOL MobileGestalt_get_callerIDCapability()
{
  return MGGetBoolAnswer((const char **)@"tad3RCjcWdkyLSVI8kUBtA");
}

uint64_t MobileGestalt_get_cameraAppUIVersion(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"NszbG6qiAztVal4mpDQRkg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A678(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

UInt8 *MobileGestalt_copy_cameraButtonCGRect()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"PsIXZ7uVWznKaTEXDbFSYA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_cameraButtonCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)@"PsIXZ7uVWznKaTEXDbFSYA");
}

BOOL MobileGestalt_get_cameraButtonCapability()
{
  return MGGetBoolAnswer((const char **)@"CwvKxM2cEogD3p+HYgaW0Q");
}

UInt8 *MobileGestalt_copy_cameraButtonNormalizedCGRect()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"DxmNcovWWN464hwZdGfonA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_cameraButtonNormalizedCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)@"DxmNcovWWN464hwZdGfonA");
}

BOOL MobileGestalt_get_cameraCapability()
{
  return MGGetBoolAnswer((const char **)@"nv4RoLkNoPT0/rsO8Yaiew");
}

BOOL MobileGestalt_get_cameraFlashCapability()
{
  return MGGetBoolAnswer((const char **)@"jdLgKT+0BZmGrzd9J0cuPA");
}

BOOL MobileGestalt_get_cameraFrontFlashCapability()
{
  return MGGetBoolAnswer((const char **)@"fJZs6N8SqTS4RuQVh3szxA");
}

BOOL MobileGestalt_get_cameraHDR2Capability()
{
  return MGGetBoolAnswer((const char **)@"cWWKdUn+rIclZ60ZGAVhBw");
}

uint64_t MobileGestalt_get_cameraHDRVersion(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"+97cHA72jHlHqQnIkgGBYg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A6E8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_cameraIMUDistanceType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"aDuN0jCthN9lLu4qQ9OrEA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A758(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_cameraLiveEffectsCapability()
{
  return MGGetBoolAnswer((const char **)@"03hWmMtMs+4nzama4/PzHQ");
}

const void *MobileGestalt_copy_cameraMaxBurstLength_obj()
{
  return (id)MGCopyAnswer((const char **)@"gBw7IWiBnLHaA+lBrZBgWw");
}

BOOL MobileGestalt_get_cameraRestriction()
{
  return MGGetBoolAnswer((const char **)@"2pxKjejpRGpWvUE+3yp5mQ");
}

const void *MobileGestalt_copy_carrierBundleInfoArray_obj()
{
  return (id)MGCopyAnswer((const char **)@"475wW3fne+tyzGr4wleUSQ");
}

BOOL MobileGestalt_get_carrierInstallCapability()
{
  return MGGetBoolAnswer((const char **)@"9n2qz3uDC5nSe1xZG1/Bkw");
}

BOOL MobileGestalt_get_cellBroadcastCapability()
{
  return MGGetBoolAnswer((const char **)@"CN/XFuy/9Fdv0yE+28kwRQ");
}

BOOL MobileGestalt_get_cellularDataCapability()
{
  return MGGetBoolAnswer((const char **)@"L5al7b+7JATD/izSJeH0aQ");
}

BOOL MobileGestalt_get_cellularTelephonyCapability()
{
  return MGGetBoolAnswer((const char **)@"ebyBs0j3KAquBsgcfrNZIg");
}

BOOL MobileGestalt_get_certificateProductionStatus()
{
  return MGGetBoolAnswer((const char **)@"uO3aPe7lfB1XxSiz/1xBvA");
}

BOOL MobileGestalt_get_certificateSecurityMode()
{
  return MGGetBoolAnswer((const char **)@"eg8KDO//lXaLwp+URGP6DA");
}

uint64_t MobileGestalt_get_chipID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"566JrJVMlDfnslGpwUzNlQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A7C8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_chromeIdentifier()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"yUqD8AXE/c+IggkuYoxrqA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_chromeIdentifier_obj()
{
  return (id)MGCopyAnswer((const char **)@"yUqD8AXE/c+IggkuYoxrqA");
}

BOOL MobileGestalt_get_cloudPhotoLibraryCapability()
{
  return MGGetBoolAnswer((const char **)@"8OTc3mN30ACaEwecgpKfXA");
}

BOOL MobileGestalt_get_coastlineGlowRenderingCapability()
{
  return MGGetBoolAnswer((const char **)@"diS7AlmwFZz6NyF7CY97sA");
}

UInt8 *MobileGestalt_copy_compassCalibration()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"qb//mYg6KeTmjv8w4ZAMIg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_compassCalibration_obj()
{
  return (id)MGCopyAnswer((const char **)@"qb//mYg6KeTmjv8w4ZAMIg");
}

const void *MobileGestalt_copy_compassCalibrationDictionary_obj()
{
  return (id)MGCopyAnswer((const char **)@"aoAKcHLuTUp/o3squcJkhA");
}

const void *MobileGestalt_copy_compassType_obj()
{
  return (id)MGCopyAnswer((const char **)@"meLhyIpGgxiQoFZD/OGPcQ");
}

const void *MobileGestalt_copy_compatibleAppVariants_obj()
{
  return (id)MGCopyAnswer((const char **)@"VuGdqp8UBpi9vPWHlPluVQ");
}

char *MobileGestalt_copy_computerName()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"v5YVEwERRin1v+reUNjJ5w");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_computerName_obj()
{
  return (id)MGCopyAnswer((const char **)@"v5YVEwERRin1v+reUNjJ5w");
}

char *MobileGestalt_copy_conferenceCallType()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"ol92SaBpqIvQs+KBljuwGA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_conferenceCallType_obj()
{
  return (id)MGCopyAnswer((const char **)@"ol92SaBpqIvQs+KBljuwGA");
}

UInt8 *MobileGestalt_copy_configNumber()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"SmUPjD77AHIMCLny9nawdw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_configNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"SmUPjD77AHIMCLny9nawdw");
}

BOOL MobileGestalt_get_containsCellularRadioCapability()
{
  return MGGetBoolAnswer((const char **)@"yRZv0s7Dpj8ZBk0S+0+nMA");
}

BOOL MobileGestalt_get_continuityCapability()
{
  return MGGetBoolAnswer((const char **)@"y0jtYciPmcx3ywPM582WZw");
}

BOOL MobileGestalt_get_coreRoutineCapability()
{
  return MGGetBoolAnswer((const char **)@"g7vU4YF+9Z+wkSvw/Cm8Dg");
}

char *MobileGestalt_copy_countryOfOrigin()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"gizLvTWx1sMUYQ9EYr/N4g");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_countryOfOrigin_obj()
{
  return (id)MGCopyAnswer((const char **)@"gizLvTWx1sMUYQ9EYr/N4g");
}

char *MobileGestalt_copy_coverglassSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"OWi11Urd09rDmPVy1z5dOQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_coverglassSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"OWi11Urd09rDmPVy1z5dOQ");
}

const void *MobileGestalt_copy_dMin_obj()
{
  return (id)MGCopyAnswer((const char **)@"ZEF0po63sTgpVrc9Ce7YNQ");
}

BOOL MobileGestalt_get_dataPlanCapability()
{
  return MGGetBoolAnswer((const char **)@"KGlZoljMyZQSxfhROj0IFg");
}

UInt8 *MobileGestalt_copy_debugBoardRevision()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"DrSqlXYNVfYXCvAsuUrUDA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_debugBoardRevision_obj()
{
  return (id)MGCopyAnswer((const char **)@"DrSqlXYNVfYXCvAsuUrUDA");
}

BOOL MobileGestalt_get_delaySleepForHeadsetClickCapability()
{
  return MGGetBoolAnswer((const char **)@"Mh+drGtyBfLYKN02sROzxg");
}

BOOL MobileGestalt_get_desenseBuild()
{
  return MGGetBoolAnswer((const char **)@"OWLyWlUOIkl+eQB7Iq37xQ");
}

BOOL MobileGestalt_get_deviceAlwaysPrewarmActuator()
{
  return MGGetBoolAnswer((const char **)@"M+WPVivF4iTnm1CC8c6h+A");
}

uint64_t MobileGestalt_get_deviceBackGlassMaterial(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"bUJD9zcOcitJwFA0ieIkxA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A838(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_deviceBackingColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"CJcvxERO5v/3IWjDFKZKRw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A8A8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_deviceBrand(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"fuKL2rMywRgQF1wowOA/cg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A918(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_deviceClass()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"+3Uf0Pm5F8Xy7Onyvko0vA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceClass_obj()
{
  return (id)MGCopyAnswer((const char **)@"+3Uf0Pm5F8Xy7Onyvko0vA");
}

uint64_t MobileGestalt_get_deviceClassNumber(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"mtrAoWJ3gsq+I90ZnQ0vQw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A988(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_deviceColor()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"mumHZHMLEfAuTkkd28fHlQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceColor_obj()
{
  return (id)MGCopyAnswer((const char **)@"mumHZHMLEfAuTkkd28fHlQ");
}

uint64_t MobileGestalt_get_deviceColorMapPolicy(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"87sSAh2rboMI2TDvFBimkg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079A9F8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_deviceCoprocessorIsT1()
{
  return MGGetBoolAnswer((const char **)@"TLU8Pwcsys+5y2UFoMOjPA");
}

float MobileGestalt_get_deviceCornerRadius(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"y5dppxx/LzxoNuW+iIKR3g");
  if (v2)
  {
    uint64_t v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }

      [v1 log];
      CFTypeID v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      CFTypeID v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_18079AA68(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }

  float v6 = -1.0;
LABEL_11:

  return v6;
}

uint64_t MobileGestalt_get_deviceCoverGlassCoating(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"psOb+c5by4e5OqReDiFm7w");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079AAD8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_deviceCoverGlassColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"9N7qIucqhr0Cy2/Tk27/hw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079AB48(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_deviceCoverGlassMaterial(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"gnQwi8RnEeMG9qBe3IUKrg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079ABB8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_deviceCoverMaterial(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"iaegRQa4jNGOuTA6hnZmcQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079AC28(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_deviceDefaultsToAnalyticsOptIn()
{
  return MGGetBoolAnswer((const char **)@"TpY9O1U1rtUk/m0BvlO58A");
}

char *MobileGestalt_copy_deviceEnclosureColor()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"JhEU414EIaDvAz8ki5DSqw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceEnclosureColor_obj()
{
  return (id)MGCopyAnswer((const char **)@"JhEU414EIaDvAz8ki5DSqw");
}

uint64_t MobileGestalt_get_deviceEnclosureMaterial(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"AtmPEO/j+Pdr8+WKxv4Aaw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079AC98(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_deviceEnclosureRGBColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"TXZxlSojLMQyLqusm9aa/g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079AD08(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_deviceHasAggregateCamera()
{
  return MGGetBoolAnswer((const char **)@"0/VAyl58TL5U/mAQEJNRQw");
}

uint64_t MobileGestalt_get_deviceHasEmbeddedSIMOnlyBoard(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"UDftNoVOBIs9cSeia57q1A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079AD78(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_deviceHasNAN()
{
  return MGGetBoolAnswer((const char **)@"YgC2TeHCEwzJ/ixqmNCzwQ");
}

uint64_t MobileGestalt_get_deviceHousingColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"NJsxTSI2WuD+13rxShXX9w");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079ADE8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

UInt8 *MobileGestalt_copy_deviceHousingColorUncooked()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"0GizaJLOyfzgAbxQ/5aniA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_deviceHousingColorUncooked_obj()
{
  return (id)MGCopyAnswer((const char **)@"0GizaJLOyfzgAbxQ/5aniA");
}

BOOL MobileGestalt_get_deviceIsMuseCapable()
{
  return MGGetBoolAnswer((const char **)@"VGDDUFPWHbX/Ie9RSI0yDQ");
}

BOOL MobileGestalt_get_deviceIsNED()
{
  return MGGetBoolAnswer((const char **)@"NDnoY3adyyskgiIQBNtlyQ");
}

BOOL MobileGestalt_get_deviceIsPortableMac()
{
  return MGGetBoolAnswer((const char **)@"T0FD6BT+PiWc2duMVlTRww");
}

UInt8 *MobileGestalt_copy_deviceKeyboardCalibration()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"DrrXMX9VWX7bMj0MZuhTUA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_deviceKeyboardCalibration_obj()
{
  return (id)MGCopyAnswer((const char **)@"DrrXMX9VWX7bMj0MZuhTUA");
}

const void *MobileGestalt_copy_deviceLaunchTimeLimitScale_obj()
{
  return (id)MGCopyAnswer((const char **)@"emXA9B552rnSoI7xXE91DA");
}

uint64_t MobileGestalt_get_deviceLowBatteryLevel(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"XnXl4MhKZx3zRKvA7ZwIYQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079AE58(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_deviceMemorySize(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"iJAKoV0Bp88r37qG+kkXzw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079AEC8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_deviceMesaType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"iTvGxmtSOnHv548XON379A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079AF38(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_deviceName()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"rkqlwPcRHwixY4gapPjanw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceName_obj()
{
  return (id)MGCopyAnswer((const char **)@"rkqlwPcRHwixY4gapPjanw");
}

char *MobileGestalt_copy_deviceNameString()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"JUWcn+5Ss0nvr5w/jk4WEg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceNameString_obj()
{
  return (id)MGCopyAnswer((const char **)@"JUWcn+5Ss0nvr5w/jk4WEg");
}

BOOL MobileGestalt_get_devicePrefers3DBuildingStrokes()
{
  return MGGetBoolAnswer((const char **)@"xbNo7dj2oAnz92JhEOn9tw");
}

BOOL MobileGestalt_get_devicePrefersBuildingStrokes()
{
  return MGGetBoolAnswer((const char **)@"QFnvO2shAYI+d4bj3qXuFQ");
}

BOOL MobileGestalt_get_devicePrefersCheapTrafficShaders()
{
  return MGGetBoolAnswer((const char **)@"7D54DikSnFQnbDEBwlKQTQ");
}

BOOL MobileGestalt_get_devicePrefersProceduralAntiAliasing()
{
  return MGGetBoolAnswer((const char **)@"bysMryc4yLwQjKvUQGGXXQ");
}

BOOL MobileGestalt_get_devicePrefersTrafficAlpha()
{
  return MGGetBoolAnswer((const char **)@"0VkTunHOJrrZdolQXR5gCg");
}

BOOL MobileGestalt_get_deviceProximityCapability()
{
  return MGGetBoolAnswer((const char **)@"9RryeqF6OCWlbaXP2Qsoag");
}

uint64_t MobileGestalt_get_deviceRGBColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"8/tysfSvORoyVg9IE901oQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079AFA8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_deviceRequiresPetalOptimization()
{
  return MGGetBoolAnswer((const char **)@"82Ono2SP03rNGkhOc5O1Mw");
}

BOOL MobileGestalt_get_deviceRequiresProximityAmeliorations()
{
  return MGGetBoolAnswer((const char **)@"r5QUsvvgcb2Qmuflua13fQ");
}

BOOL MobileGestalt_get_deviceRequiresSoftwareBrightnessCalculations()
{
  return MGGetBoolAnswer((const char **)@"2Qf/8sQyx6voo3Mw3QKgZQ");
}

const void *MobileGestalt_copy_deviceSceneUpdateTimeLimitScale_obj()
{
  return (id)MGCopyAnswer((const char **)@"QbQzuIbef01P4JeoL9EmKg");
}

uint64_t MobileGestalt_get_deviceStingHousingColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"rtIWWK0kM4F+ZMkIqhE7yQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B018(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_deviceSubBrand(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"wtUF1NceYeLT6IHovZvocw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B088(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_deviceSuportsExternalDriverKit()
{
  return MGGetBoolAnswer((const char **)@"Tqr2NqCLwGszJc3HOaPlTw");
}

BOOL MobileGestalt_get_deviceSupports1080P()
{
  return MGGetBoolAnswer((const char **)@"Mk4ZslaChmO+6s3h7L1w6Q");
}

BOOL MobileGestalt_get_deviceSupports3DImagery()
{
  return MGGetBoolAnswer((const char **)@"ohnQBWkVQf2nu9Vr/9uLug");
}

BOOL MobileGestalt_get_deviceSupports3DMaps()
{
  return MGGetBoolAnswer((const char **)@"HIaq6xVZ/V8B9pnigcvqCA");
}

BOOL MobileGestalt_get_deviceSupports3RdPartyHaptics()
{
  return MGGetBoolAnswer((const char **)@"6S9CvPHPtzHQqKudHSfsag");
}

BOOL MobileGestalt_get_deviceSupports4G()
{
  return MGGetBoolAnswer((const char **)@"eu8pUYR7yo+AlS9aojlgwg");
}

BOOL MobileGestalt_get_deviceSupports4K()
{
  return MGGetBoolAnswer((const char **)@"Fh2Ga0/Sj4T3Qn5Z9A9BMw");
}

BOOL MobileGestalt_get_deviceSupports64Bit()
{
  return MGGetBoolAnswer((const char **)@"V2Ykm/0M3CA6nyNhwNInsg");
}

BOOL MobileGestalt_get_deviceSupports720P()
{
  return MGGetBoolAnswer((const char **)@"lwHRTZNO5Jq87pVlzdNGIA");
}

BOOL MobileGestalt_get_deviceSupports80ChargeLimit()
{
  return MGGetBoolAnswer((const char **)@"37NVydb//GP/GrhuTN+exg");
}

BOOL MobileGestalt_get_deviceSupports9Pin()
{
  return MGGetBoolAnswer((const char **)@"qWGVjnlN/wWMhlWgfNcSBg");
}

BOOL MobileGestalt_get_deviceSupportsAODVibrancy()
{
  return MGGetBoolAnswer((const char **)@"ykpu7qyhqFweVMKtxNylWA");
}

BOOL MobileGestalt_get_deviceSupportsAOP()
{
  return MGGetBoolAnswer((const char **)@"HHF6YgqEQ9Kd7MBSVnLsgg");
}

BOOL MobileGestalt_get_deviceSupportsAOP2()
{
  return MGGetBoolAnswer((const char **)@"ceKgtkUE4F9ywcr57zdUWA");
}

BOOL MobileGestalt_get_deviceSupportsARKit()
{
  return MGGetBoolAnswer((const char **)@"67A3BpQkCRe1ihx0Me4lgg");
}

BOOL MobileGestalt_get_deviceSupportsASTC()
{
  return MGGetBoolAnswer((const char **)@"ji56BO1mUeT7Qg9RO7Er9w");
}

BOOL MobileGestalt_get_deviceSupportsAbsoluteAltimeter()
{
  return MGGetBoolAnswer((const char **)@"PFnuFyqMMnGUQQnTqS5byg");
}

BOOL MobileGestalt_get_deviceSupportsAbsoluteDepth()
{
  return MGGetBoolAnswer((const char **)@"Ijs+pw5tRyxqSy5kfgZNuQ");
}

BOOL MobileGestalt_get_deviceSupportsActiveNFCReadingOnly()
{
  return MGGetBoolAnswer((const char **)@"rGc8UCjL0zBt51mv81FtIg");
}

BOOL MobileGestalt_get_deviceSupportsAdaptiveMapsUI()
{
  return MGGetBoolAnswer((const char **)@"whbsdxpLirBFgUbLH3+0JA");
}

BOOL MobileGestalt_get_deviceSupportsAdvancedMapRendering()
{
  return MGGetBoolAnswer((const char **)@"UoeNJcQ336tc+F5/1r4tqQ");
}

BOOL MobileGestalt_get_deviceSupportsAdvancedVoiceProcessorChatFlavor()
{
  return MGGetBoolAnswer((const char **)@"52jOwM53SViDv1B3wZIIOg");
}

BOOL MobileGestalt_get_deviceSupportsAlmond()
{
  return MGGetBoolAnswer((const char **)@"lAu7Xt7uV5eHu3pIdfHyYA");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysAPVoiceTrigger()
{
  return MGGetBoolAnswer((const char **)@"l/bXsek3q5yjYDwoPAktVQ");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysListening()
{
  return MGGetBoolAnswer((const char **)@"U+73bmG4kBGj6kpreQXUTQ");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnCompass()
{
  return MGGetBoolAnswer((const char **)@"aCQx2Qq/TChnNAq1rr6Egw");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnDisplay()
{
  return MGGetBoolAnswer((const char **)@"2OOJf1VhaM7NxfRok3HbWQ");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnDisplayFlipbook()
{
  return MGGetBoolAnswer((const char **)@"aoJSd/MXk7M40NgXTM6x+g");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnTime()
{
  return MGGetBoolAnswer((const char **)@"j8/Omm6s1lsmTDFsXjsBfA");
}

BOOL MobileGestalt_get_deviceSupportsAppleLPM()
{
  return MGGetBoolAnswer((const char **)@"RbiXiBQAmypd3Btw3jADAw");
}

BOOL MobileGestalt_get_deviceSupportsApplePencil()
{
  return MGGetBoolAnswer((const char **)@"yhHcB0iH0d1XzPO/CFd3ow");
}

BOOL MobileGestalt_get_deviceSupportsAutoDim()
{
  return MGGetBoolAnswer((const char **)@"tbdNCtok0BwuLN11WwnwsQ");
}

BOOL MobileGestalt_get_deviceSupportsAutoLowLightVideo()
{
  return MGGetBoolAnswer((const char **)@"AX/UKxSHwm+OuFRIdvNAfg");
}

BOOL MobileGestalt_get_deviceSupportsAvatars()
{
  return MGGetBoolAnswer((const char **)@"y4GIxpQP4MO/j3wWUJdiyg");
}

BOOL MobileGestalt_get_deviceSupportsBatteryInformation()
{
  return MGGetBoolAnswer((const char **)@"Kao6GNYdAy5hwXblxeGYJQ");
}

BOOL MobileGestalt_get_deviceSupportsBatteryModuleAuthentication()
{
  return MGGetBoolAnswer((const char **)@"D6/BMDrlb8V3WSiqL8gL+w");
}

BOOL MobileGestalt_get_deviceSupportsBeacon()
{
  return MGGetBoolAnswer((const char **)@"ugia43pinTp0pukSIYQ7uA");
}

BOOL MobileGestalt_get_deviceSupportsBerkelium2()
{
  return MGGetBoolAnswer((const char **)@"wNdWl5xfBJmJGNWJr5t0zA");
}

BOOL MobileGestalt_get_deviceSupportsBootChime()
{
  return MGGetBoolAnswer((const char **)@"QHxt+hGLaBPbQJbXiUJX3w");
}

BOOL MobileGestalt_get_deviceSupportsBreathingDisturbancesMeasurements()
{
  return MGGetBoolAnswer((const char **)@"e0HV2blYUDBk/MsMEQACNA");
}

BOOL MobileGestalt_get_deviceSupportsBrook()
{
  return MGGetBoolAnswer((const char **)@"TR6Z82EVZEKMVUdHfkhDmQ");
}

BOOL MobileGestalt_get_deviceSupportsBrowserEngine()
{
  return MGGetBoolAnswer((const char **)@"FE4Tff1EICGXaI27X3P/dw");
}

BOOL MobileGestalt_get_deviceSupportsBrowserEngineEmbedded()
{
  return MGGetBoolAnswer((const char **)@"Fe55gxpfp6SByfqjASqF5A");
}

BOOL MobileGestalt_get_deviceSupportsCCK()
{
  return MGGetBoolAnswer((const char **)@"L47fh6KehOmR+AseqK2Xsw");
}

BOOL MobileGestalt_get_deviceSupportsCameraCaptureOnTouchDown()
{
  return MGGetBoolAnswer((const char **)@"gQDt76Te0SPw7N8oTLrBFw");
}

BOOL MobileGestalt_get_deviceSupportsCameraDeferredProcessing()
{
  return MGGetBoolAnswer((const char **)@"E9a3UzlfYjWEB9viQCHNAA");
}

BOOL MobileGestalt_get_deviceSupportsCameraHaptics()
{
  return MGGetBoolAnswer((const char **)@"XriAxQ+JY1z5nt5f3ftXVw");
}

BOOL MobileGestalt_get_deviceSupportsCarIntegration()
{
  return MGGetBoolAnswer((const char **)@"XFtUsQP3AyqT4CazSb5VCw");
}

BOOL MobileGestalt_get_deviceSupportsCarPlay2()
{
  return MGGetBoolAnswer((const char **)@"PR+xeEtTAiUN0R25+EYGfw");
}

BOOL MobileGestalt_get_deviceSupportsCinnamon()
{
  return MGGetBoolAnswer((const char **)@"j1pdCAYnpIEYMqIAitm3JA");
}

BOOL MobileGestalt_get_deviceSupportsClosedLoopHaptics()
{
  return MGGetBoolAnswer((const char **)@"gqDnklGQnpv5ilgh5uHckw");
}

BOOL MobileGestalt_get_deviceSupportsCollisionSOS()
{
  return MGGetBoolAnswer((const char **)@"HCzWusHQwZDea6nNhaKndw");
}

BOOL MobileGestalt_get_deviceSupportsCompassOrienteering()
{
  return MGGetBoolAnswer((const char **)@"GPIs61LYNpcwZqwlFr7bbg");
}

BOOL MobileGestalt_get_deviceSupportsConcurrentHPLPMics()
{
  return MGGetBoolAnswer((const char **)@"dI30ovtFUIeLioNQKDMbGQ");
}

BOOL MobileGestalt_get_deviceSupportsCorrectedTemperature()
{
  return MGGetBoolAnswer((const char **)@"E0wrprlNya8gngoVpPXj2w");
}

BOOL MobileGestalt_get_deviceSupportsCrudeProx()
{
  return MGGetBoolAnswer((const char **)@"a/mex6YNO6gJ8N8SxAA71A");
}

BOOL MobileGestalt_get_deviceSupportsCyclingAutoStartReminders()
{
  return MGGetBoolAnswer((const char **)@"e8KVLQDfW5n4LxdE3N84Xw");
}

BOOL MobileGestalt_get_deviceSupportsDCP()
{
  return MGGetBoolAnswer((const char **)@"IhNb6V2L1pt+hBlZMsm5FQ");
}

BOOL MobileGestalt_get_deviceSupportsDClr()
{
  return MGGetBoolAnswer((const char **)@"XkfGVYlrkBQJgaGabHESJQ");
}

BOOL MobileGestalt_get_deviceSupportsDisplayPort()
{
  return MGGetBoolAnswer((const char **)@"CoWnN4xo783YGn4wLrUatA");
}

BOOL MobileGestalt_get_deviceSupportsDoNotDisturbWhileDriving()
{
  return MGGetBoolAnswer((const char **)@"Kq9K9xqDoUiUP7JEfg+pNw");
}

BOOL MobileGestalt_get_deviceSupportsDynamicEndOfCharge()
{
  return MGGetBoolAnswer((const char **)@"drMm12aFyD64om7eXVFRVA");
}

BOOL MobileGestalt_get_deviceSupportsDynamicEndOfChargeLegacyHW()
{
  return MGGetBoolAnswer((const char **)@"nfR1IphTGCaoFNu3NrCtWQ");
}

BOOL MobileGestalt_get_deviceSupportsDynamicIsland()
{
  return MGGetBoolAnswer((const char **)@"YlEtTtHlNesRBMal1CqRaA");
}

BOOL MobileGestalt_get_deviceSupportsELabel()
{
  return MGGetBoolAnswer((const char **)@"awim/yUQvLyTrKsoKhg2bA");
}

BOOL MobileGestalt_get_deviceSupportsEUCapabilities()
{
  return MGGetBoolAnswer((const char **)@"dz7F2FFseAysXoUZqaANZw");
}

BOOL MobileGestalt_get_deviceSupportsElton()
{
  return MGGetBoolAnswer((const char **)@"l1CWke97nbaAcWDqA6T5LA");
}

BOOL MobileGestalt_get_deviceSupportsEnhancedAC3()
{
  return MGGetBoolAnswer((const char **)@"kyszW/uUGJFTVNQwFaf6og");
}

BOOL MobileGestalt_get_deviceSupportsEnhancedMultitasking()
{
  return MGGetBoolAnswer((const char **)@"qeaj75wk3HF4DwQ8qbIi7g");
}

BOOL MobileGestalt_get_deviceSupportsEnvironmentalDosimetry()
{
  return MGGetBoolAnswer((const char **)@"SaW+DA+cbiqDHrex8MTABA");
}

BOOL MobileGestalt_get_deviceSupportsExternalHDR()
{
  return MGGetBoolAnswer((const char **)@"feC7TgoAAKLjn/KU8JAKFA");
}

BOOL MobileGestalt_get_deviceSupportsFairPlaySecureVideoPath()
{
  return MGGetBoolAnswer((const char **)@"trBC4VS5gVmCv6Wg41Hryw");
}

BOOL MobileGestalt_get_deviceSupportsFindApplePencil()
{
  return MGGetBoolAnswer((const char **)@"nXbrTiBAf1dbo4sCn7xs2w");
}

BOOL MobileGestalt_get_deviceSupportsFloorCounting()
{
  return MGGetBoolAnswer((const char **)@"nK4D+jDUuTGFFwRFPC2lWg");
}

BOOL MobileGestalt_get_deviceSupportsFrameSynchronousBrightness()
{
  return MGGetBoolAnswer((const char **)@"/oWN4fE81uA9pCW4FmD7Ug");
}

BOOL MobileGestalt_get_deviceSupportsGenerativeModelSystems()
{
  return MGGetBoolAnswer((const char **)@"A62OafQ85EJAiiqKn4agtg");
}

BOOL MobileGestalt_get_deviceSupportsGrey()
{
  return MGGetBoolAnswer((const char **)@"8Vbp0HyqndjWuIFZibhu7g");
}

BOOL MobileGestalt_get_deviceSupportsHDRDeferredProcessing()
{
  return MGGetBoolAnswer((const char **)@"JkZlE8z9YwHjE1hnbMhcgA");
}

BOOL MobileGestalt_get_deviceSupportsHDRPhotoDisplay()
{
  return MGGetBoolAnswer((const char **)@"a1r7npIrhXsZ7SmKRKC1eA");
}

BOOL MobileGestalt_get_deviceSupportsHaptics()
{
  return MGGetBoolAnswer((const char **)@"cBy4BcYs5YWtFHbBpt4C6A");
}

BOOL MobileGestalt_get_deviceSupportsHardwareDetents()
{
  return MGGetBoolAnswer((const char **)@"V9pLLbPQhyb75bbdTioZVw");
}

BOOL MobileGestalt_get_deviceSupportsHeartHealthAlerts()
{
  return MGGetBoolAnswer((const char **)@"H+r3Nk8ByXIY9ub/M8broA");
}

BOOL MobileGestalt_get_deviceSupportsHeartRateVariability()
{
  return MGGetBoolAnswer((const char **)@"/Oajtq8qODrC4XBBOULF3A");
}

BOOL MobileGestalt_get_deviceSupportsHiResBuildings()
{
  return MGGetBoolAnswer((const char **)@"MjqwTHDneTCNeqhZ7vCvUw");
}

BOOL MobileGestalt_get_deviceSupportsIndependentOutputOnSpeaker()
{
  return MGGetBoolAnswer((const char **)@"6VRApe6L2vc1r2s+xts9/w");
}

BOOL MobileGestalt_get_deviceSupportsInductiveCharging()
{
  return MGGetBoolAnswer((const char **)@"s7nuHoZIYNoOHCqT9iyZkQ");
}

BOOL MobileGestalt_get_deviceSupportsLaguna()
{
  return MGGetBoolAnswer((const char **)@"s8TgWYc7BjtSNbtuycqauw");
}

BOOL MobileGestalt_get_deviceSupportsLandscapeFaceID()
{
  return MGGetBoolAnswer((const char **)@"eP/CPXY0Q1CoIqAWn/J97g");
}

BOOL MobileGestalt_get_deviceSupportsLanguageDownloadUI()
{
  return MGGetBoolAnswer((const char **)@"TACCxk6y28d14yJN09RtTg");
}

BOOL MobileGestalt_get_deviceSupportsLiDAR()
{
  return MGGetBoolAnswer((const char **)@"8bCjks0zVuOcdivIhytNbQ");
}

BOOL MobileGestalt_get_deviceSupportsLineIn()
{
  return MGGetBoolAnswer((const char **)@"Mgwtle8wzQEz/0vzBk47FQ");
}

BOOL MobileGestalt_get_deviceSupportsLiquidDetectionCorrosionMitigation()
{
  return MGGetBoolAnswer((const char **)@"XxnEk9uiIk5vCdbWEGt7lA");
}

BOOL MobileGestalt_get_deviceSupportsLiveActivities()
{
  return MGGetBoolAnswer((const char **)@"e4ZSDal1Fg7QfCA7rlNmSQ");
}

BOOL MobileGestalt_get_deviceSupportsLivePhotoAuto()
{
  return MGGetBoolAnswer((const char **)@"pQzfsK0Ado+nkNFgPRIA8Q");
}

BOOL MobileGestalt_get_deviceSupportsLiveVideoRendering()
{
  return MGGetBoolAnswer((const char **)@"xqvkN8MjIzTv37omKFzrwg");
}

BOOL MobileGestalt_get_deviceSupportsLockdown()
{
  return MGGetBoolAnswer((const char **)@"7ZipyD32hkjOUTl66Q8REw");
}

BOOL MobileGestalt_get_deviceSupportsLongFormAudio()
{
  return MGGetBoolAnswer((const char **)@"tBrEf4ccS4Q6wtUiNB0WKw");
}

BOOL MobileGestalt_get_deviceSupportsLowLatency()
{
  return MGGetBoolAnswer((const char **)@"1CFbwvaGHR/89vDu2VjnpQ");
}

BOOL MobileGestalt_get_deviceSupportsLowPowerSoundClassification()
{
  return MGGetBoolAnswer((const char **)@"V0d6pv080gHL3QQWNs9aog");
}

BOOL MobileGestalt_get_deviceSupportsMTP()
{
  return MGGetBoolAnswer((const char **)@"68eiAurB2LJ96Vz/CzaAcA");
}

BOOL MobileGestalt_get_deviceSupportsMapsBlurredUI()
{
  return MGGetBoolAnswer((const char **)@"5y8gwXr/HXkhryza4xQeFg");
}

BOOL MobileGestalt_get_deviceSupportsMapsOpticalHeading()
{
  return MGGetBoolAnswer((const char **)@"nJU6/TSuJTVJlJ7t5/Z/ug");
}

BOOL MobileGestalt_get_deviceSupportsMomentCapture()
{
  return MGGetBoolAnswer((const char **)@"DtSpvgyOyNVwNa5W0zigqg");
}

BOOL MobileGestalt_get_deviceSupportsMultiUser()
{
  return MGGetBoolAnswer((const char **)@"il2TbGC66RCTKaEgSOVlgQ");
}

BOOL MobileGestalt_get_deviceSupportsNFC()
{
  return MGGetBoolAnswer((const char **)@"byGRtH44VNik9CzN/QKLCw");
}

BOOL MobileGestalt_get_deviceSupportsNavigation()
{
  return MGGetBoolAnswer((const char **)@"ee9YfVjjsbVte45bYSt4Wg");
}

BOOL MobileGestalt_get_deviceSupportsNewton()
{
  return MGGetBoolAnswer((const char **)@"nAl8QWlApaJQkipRf38fdg");
}

BOOL MobileGestalt_get_deviceSupportsOnDemandPhotoAnalysis()
{
  return MGGetBoolAnswer((const char **)@"ik8OQ5JoYhyK8AoTx29MuA");
}

BOOL MobileGestalt_get_deviceSupportsP3ColorspaceVideoRecording()
{
  return MGGetBoolAnswer((const char **)@"1eBwtCIwbIDdC80wiyzfow");
}

BOOL MobileGestalt_get_deviceSupportsPeriodicALSUpdates()
{
  return MGGetBoolAnswer((const char **)@"Leuy56dCZmAMYoVCQGTfPA");
}

BOOL MobileGestalt_get_deviceSupportsPhotosInpainting()
{
  return MGGetBoolAnswer((const char **)@"XNCjqOupLM/S8fNyxRNQTA");
}

BOOL MobileGestalt_get_deviceSupportsPhotosLocalLight()
{
  return MGGetBoolAnswer((const char **)@"m9ORTKMgu9A+zF+A61Zz5A");
}

BOOL MobileGestalt_get_deviceSupportsPortraitIntensityAdjustments()
{
  return MGGetBoolAnswer((const char **)@"L8CqbJeM+rf7l7NSOjnAHg");
}

BOOL MobileGestalt_get_deviceSupportsPortraitLightEffectFilters()
{
  return MGGetBoolAnswer((const char **)@"hewg+QX1h57eGJGphdCong");
}

BOOL MobileGestalt_get_deviceSupportsRGB10()
{
  return MGGetBoolAnswer((const char **)@"hOkus/A6lBEF6Ar3jV7LrQ");
}

BOOL MobileGestalt_get_deviceSupportsRaiseToSpeak()
{
  return MGGetBoolAnswer((const char **)@"4D8XW4YwJI7QvyPhv1TEdw");
}

BOOL MobileGestalt_get_deviceSupportsReverseZoom()
{
  return MGGetBoolAnswer((const char **)@"sQwlfROu8fcD1Qwm8YJVeg");
}

uint64_t MobileGestalt_get_deviceSupportsSWProRes(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"oWUSugFxOVhHOKYv7DawLw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B0F8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_deviceSupportsScandium()
{
  return MGGetBoolAnswer((const char **)@"eXzS2kvF8nNOI/xIJKquHg");
}

BOOL MobileGestalt_get_deviceSupportsSecureDoubleClick()
{
  return MGGetBoolAnswer((const char **)@"DoMjIR2qPkxXtP/kDu/gfQ");
}

BOOL MobileGestalt_get_deviceSupportsSecureMicrophone()
{
  return MGGetBoolAnswer((const char **)@"7UhDrmrZozgwO+3AgUbHxw");
}

BOOL MobileGestalt_get_deviceSupportsSiDP()
{
  return MGGetBoolAnswer((const char **)@"q69vauqK9djnPlEZBFBV4A");
}

BOOL MobileGestalt_get_deviceSupportsSideButtonClickSpeed()
{
  return MGGetBoolAnswer((const char **)@"Bg8VW4HdQj+GVY+191T3nQ");
}

BOOL MobileGestalt_get_deviceSupportsSimplisticRoadMesh()
{
  return MGGetBoolAnswer((const char **)@"ChBMzkxYdT9Xmw3QN5kMWA");
}

BOOL MobileGestalt_get_deviceSupportsSingleCameraPortrait()
{
  return MGGetBoolAnswer((const char **)@"FymLPtOEy6FdE7TmKeoTdg");
}

BOOL MobileGestalt_get_deviceSupportsSingleDisplayEnhancedMultitasking()
{
  return MGGetBoolAnswer((const char **)@"fbpzGGoBNcvDLt4LlZGnfA");
}

BOOL MobileGestalt_get_deviceSupportsSiriBargeIn()
{
  return MGGetBoolAnswer((const char **)@"WXi7NQbOKnEX4vPQFeZAdQ");
}

BOOL MobileGestalt_get_deviceSupportsSiriHub()
{
  return MGGetBoolAnswer((const char **)@"waGD2UTpntjbDXD1r3oALQ");
}

BOOL MobileGestalt_get_deviceSupportsSiriSpeaks()
{
  return MGGetBoolAnswer((const char **)@"PTQ+ABwag03BwO/CKvIK/A");
}

BOOL MobileGestalt_get_deviceSupportsSiriSpokenMessages()
{
  return MGGetBoolAnswer((const char **)@"0AJUv/uYPsRiZNGpWJ7zfg");
}

uint64_t MobileGestalt_get_deviceSupportsSiriUnderstandingOnDevice(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"K/R1GfGfCkXvEhaPS2Vrng");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B168(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_deviceSupportsSpatialFaceTimeAudioPlayback()
{
  return MGGetBoolAnswer((const char **)@"/EVOCjM/Nmb2roP5ebtEFA");
}

BOOL MobileGestalt_get_deviceSupportsSpatialOverCapture()
{
  return MGGetBoolAnswer((const char **)@"SjQQ07G8UacM7E69G7dPbg");
}

BOOL MobileGestalt_get_deviceSupportsStageLightPortraitPreview()
{
  return MGGetBoolAnswer((const char **)@"IMUksyctl4kC/BFI2K/Qyw");
}

BOOL MobileGestalt_get_deviceSupportsStereoAudioRecording()
{
  return MGGetBoolAnswer((const char **)@"YlK+0xmxNWhNn/+r8SM8kA");
}

BOOL MobileGestalt_get_deviceSupportsStudioLightPortraitPreview()
{
  return MGGetBoolAnswer((const char **)@"oLjiDs+BWEdMVbjE0x6cnw");
}

BOOL MobileGestalt_get_deviceSupportsSwimmingWorkouts()
{
  return MGGetBoolAnswer((const char **)@"cRjPy4Ef+KZwJ+nfPeBV5Q");
}

BOOL MobileGestalt_get_deviceSupportsTVContinuityCamera()
{
  return MGGetBoolAnswer((const char **)@"5hfTRTYOuOthOyRny6a38w");
}

BOOL MobileGestalt_get_deviceSupportsTapToWake()
{
  return MGGetBoolAnswer((const char **)@"yZf3GTRMGTuwSV/lD7Cagw");
}

BOOL MobileGestalt_get_deviceSupportsTelephonyOverUSB()
{
  return MGGetBoolAnswer((const char **)@"YiUtBQygkHRhLcdO3LFB4A");
}

BOOL MobileGestalt_get_deviceSupportsTethering()
{
  return MGGetBoolAnswer((const char **)@"xSh3mf5+Zuoz6xhxEah0zQ");
}

BOOL MobileGestalt_get_deviceSupportsThunderbolt()
{
  return MGGetBoolAnswer((const char **)@"4ec+Q3FdQ1N0HeNpOPsmfA");
}

BOOL MobileGestalt_get_deviceSupportsTimeInDaylight()
{
  return MGGetBoolAnswer((const char **)@"8gVfz9/8R1OtWBBtI0o/+Q");
}

BOOL MobileGestalt_get_deviceSupportsToneMapping()
{
  return MGGetBoolAnswer((const char **)@"Lcu6Zck+C/+AMO8qULacDw");
}

BOOL MobileGestalt_get_deviceSupportsTwilight()
{
  return MGGetBoolAnswer((const char **)@"1Bk5Dr0hTb0bYXl04068MQ");
}

BOOL MobileGestalt_get_deviceSupportsUSBTypeC()
{
  return MGGetBoolAnswer((const char **)@"BWoQXWXYITrPRpFyc9xTLw");
}

BOOL MobileGestalt_get_deviceSupportsUSBTypeCDisplay()
{
  return MGGetBoolAnswer((const char **)@"khE304sL66yzf7K+2e+0cw");
}

BOOL MobileGestalt_get_deviceSupportsUnconditionalPluckItCollection()
{
  return MGGetBoolAnswer((const char **)@"1N37hGont/jibw4G2hwdRg");
}

UInt8 *MobileGestalt_copy_deviceSupportsVSHCompensation()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"QuSuh/r6w4M730U5XhKzrg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_deviceSupportsVSHCompensation_obj()
{
  return (id)MGCopyAnswer((const char **)@"QuSuh/r6w4M730U5XhKzrg");
}

BOOL MobileGestalt_get_deviceSupportsVirtualResearchEnvironment()
{
  return MGGetBoolAnswer((const char **)@"YAbRmHobt+BRHuSPm2OGQw");
}

BOOL MobileGestalt_get_deviceSupportsVoiceOverCanUseSiriVoice()
{
  return MGGetBoolAnswer((const char **)@"tbBVomzeDyPq15QV5VGQGg");
}

BOOL MobileGestalt_get_deviceSupportsWalkingRadiusAnimation()
{
  return MGGetBoolAnswer((const char **)@"X5yfJDYNipZXIS8R2a7RmA");
}

BOOL MobileGestalt_get_deviceSupportsWatchSpeakerPlayback()
{
  return MGGetBoolAnswer((const char **)@"rJl1HTk57uav5OTZZAyc6g");
}

BOOL MobileGestalt_get_deviceSupportsWebkit()
{
  return MGGetBoolAnswer((const char **)@"sJmYs82RucA1MWX5jHFSjA");
}

BOOL MobileGestalt_get_deviceSupportsWirelessChargingEnergyUseNotification()
{
  return MGGetBoolAnswer((const char **)@"FLmEtGw+OD98VLXasx7W6A");
}

BOOL MobileGestalt_get_deviceSupportsWirelessSplitting()
{
  return MGGetBoolAnswer((const char **)@"2zyzecwSf2ZYRpB3tuQhOQ");
}

BOOL MobileGestalt_get_deviceSupportsYCbCr10()
{
  return MGGetBoolAnswer((const char **)@"v2Q3tLoD4+o/XazHC/0FyA");
}

BOOL MobileGestalt_get_deviceSupportseARC()
{
  return MGGetBoolAnswer((const char **)@"K57p2Tit1BlJ8rFbLl/Nqg");
}

char *MobileGestalt_copy_deviceVariant()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"SvI9oDkzw4XJFd+dKen/2Q");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceVariant_obj()
{
  return (id)MGCopyAnswer((const char **)@"SvI9oDkzw4XJFd+dKen/2Q");
}

char *MobileGestalt_copy_deviceVariantGuess()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"IMLaTlxS7ITtwfbRfPYWuA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceVariantGuess_obj()
{
  return (id)MGCopyAnswer((const char **)@"IMLaTlxS7ITtwfbRfPYWuA");
}

UInt8 *MobileGestalt_copy_diagData()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"67x5O+zO+JwnGgmKlq+qdA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_diagData_obj()
{
  return (id)MGCopyAnswer((const char **)@"67x5O+zO+JwnGgmKlq+qdA");
}

BOOL MobileGestalt_get_dictationCapability()
{
  return MGGetBoolAnswer((const char **)@"1uZbhSbBhsNCsVSsopZ4qg");
}

uint64_t MobileGestalt_get_dieId(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"Z/TJS0IaLyq10dcSvUTGPg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B1D8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

const void *MobileGestalt_copy_diskUsage_obj()
{
  return (id)MGCopyAnswer((const char **)@"uyejyEdaxNWSRQQwHmXz1A");
}

uint64_t MobileGestalt_get_displayBootRotation(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"m7lDS+oP8q0pGg+CO7RvPg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B248(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

UInt8 *MobileGestalt_copy_displayDriverICChipID()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"yPqGUljqvtItkM6XMCZaQw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_displayDriverICChipID_obj()
{
  return (id)MGCopyAnswer((const char **)@"yPqGUljqvtItkM6XMCZaQw");
}

BOOL MobileGestalt_get_displayFCCLogosViaSoftwareCapability()
{
  return MGGetBoolAnswer((const char **)@"ueuuYQk48HGWm/cJlHq/Dw");
}

uint64_t MobileGestalt_get_displayInactiveBrightnessClass(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"Z+gc4OJwBMm2YaVtp4usig");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B2B8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_displayMaxNits(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"awLQ2KgwSTZswuKgSSjmEQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B328(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_displayMirroringCapability()
{
  return MGGetBoolAnswer((const char **)@"iFOX66VmcijipO3YRc+AXg");
}

BOOL MobileGestalt_get_displayPortCapability()
{
  return MGGetBoolAnswer((const char **)@"vl45ziHlkqzh1Yt6+M9vBA");
}

BOOL MobileGestalt_get_dualSIMActivationPolicyCapable()
{
  return MGGetBoolAnswer((const char **)@"jkr5aFPOh/d6zTzNKYthBw");
}

char *MobileGestalt_copy_dynamicFunctionRowSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"Bb01MNJ0ezfSmzucKZXrsg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_dynamicFunctionRowSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"Bb01MNJ0ezfSmzucKZXrsg");
}

uint64_t MobileGestalt_get_eOSHalleyConfiguration(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"bt5D9RI67C9koJO1oZ5cfg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B398(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_eUICCChipID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"qWG594bTi87edQCSYxlLeA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B408(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_effectiveProductionStatusAp()
{
  return MGGetBoolAnswer((const char **)@"AQiIpW0UeYQKnhy2da7AXg");
}

BOOL MobileGestalt_get_effectiveProductionStatusSEP()
{
  return MGGetBoolAnswer((const char **)@"PNexcW/LBlPgAm+Skp2EAg");
}

BOOL MobileGestalt_get_effectiveSecurityModeAp()
{
  return MGGetBoolAnswer((const char **)@"vENa/R1xAXLobl8r3PBL6w");
}

BOOL MobileGestalt_get_effectiveSecurityModeSEP()
{
  return MGGetBoolAnswer((const char **)@"QJSuJ2zhdxYX/7DUA2JtUw");
}

BOOL MobileGestalt_get_encodeAACCapability()
{
  return MGGetBoolAnswer((const char **)@"fqNtLlgbYfa9gSNrhg7VGQ");
}

BOOL MobileGestalt_get_encryptedDataPartitionCapability()
{
  return MGGetBoolAnswer((const char **)@"i8+iwUtLtB5jT+WNvqwrEA");
}

BOOL MobileGestalt_get_enforceCameraShutterClick()
{
  return MGGetBoolAnswer((const char **)@"xJUG7IKySthRrPcxII184g");
}

BOOL MobileGestalt_get_enforceGoogleMail()
{
  return MGGetBoolAnswer((const char **)@"Js8HVdVGRs8m5v94pMjkRw");
}

BOOL MobileGestalt_get_ephemeralDataModeEnabled()
{
  return MGGetBoolAnswer((const char **)@"sNm4HYxfChAt48rf54qAyQ");
}

const void *MobileGestalt_copy_ephemeralDataModeOverride_obj()
{
  return (id)MGCopyAnswer((const char **)@"mx9l9PlJACEcOixUVDZEjg");
}

char *MobileGestalt_copy_ethernetMacAddress()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"VG9TCKNqNLCHk0J6zTkuVQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_ethernetMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)@"VG9TCKNqNLCHk0J6zTkuVQ");
}

BOOL MobileGestalt_get_exclaveCapability()
{
  return MGGetBoolAnswer((const char **)@"oAX1wYJl2iL3BX2G9LA7iw");
}

BOOL MobileGestalt_get_explicitContentRestriction()
{
  return MGGetBoolAnswer((const char **)@"AthxlkPBk46HtzM9AxK9vg");
}

char *MobileGestalt_copy_extendedLOMMacAddress()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"WAfNjeiwOd/k6+VU6D6SIQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_extendedLOMMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)@"WAfNjeiwOd/k6+VU6D6SIQ");
}

uint64_t MobileGestalt_get_extendedSecurityDomain(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"9uRuEueUQZFyet0P69AWMw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B478(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_externalChargeCapability()
{
  return MGGetBoolAnswer((const char **)@"NPzjaX07XnS4KcMZ+l8ymA");
}

BOOL MobileGestalt_get_externalPowerSourceConnected()
{
  return MGGetBoolAnswer((const char **)@"na6PSBfq05lkAfWkwAwaGg");
}

BOOL MobileGestalt_get_fdrSealingStatus()
{
  return MGGetBoolAnswer((const char **)@"VHTcx7WQq0V7YgGKZisRWA");
}

BOOL MobileGestalt_get_fmfallowed()
{
  return MGGetBoolAnswer((const char **)@"Y2Y67z0Nq/XdDXgW2EeaVg");
}

uint64_t MobileGestalt_get_facetimeBackCameraTemporalNoiseReductionMode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"JXmZWYUbLoumvz7hu/GL0A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B4E8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_facetimeBitRate2G(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"Nhm02nvVOaQPimpOshlO1g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B558(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_facetimeBitRate3G(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"1rf3rZXIZFgznqrHlPehuQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B5C8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_facetimeBitRateLTE(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"xunfK8NYNCS75N2z2buKWQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B638(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_facetimeBitRateWiFi(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"h8xonkkn/NzDMvvCXLw8cQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B6A8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_facetimeCameraRequiresFastSwitchOptions()
{
  return MGGetBoolAnswer((const char **)@"J912s3mVzhReVtPv4HwqNQ");
}

BOOL MobileGestalt_get_facetimeCameraSupportsHardwareFaceDetection()
{
  return MGGetBoolAnswer((const char **)@"Po0s2Vf6g2ZqymKGNLFxeQ");
}

const void *MobileGestalt_copy_facetimeDecodings_obj()
{
  return (id)MGCopyAnswer((const char **)@"yl8qmYPdAhFLeDBho10sdQ");
}

const void *MobileGestalt_copy_facetimeEncodings_obj()
{
  return (id)MGCopyAnswer((const char **)@"BoNz1QXiAEUgic9RdMVLIg");
}

uint64_t MobileGestalt_get_facetimeFrontCameraTemporalNoiseReductionMode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"CK3I7fFGkgeqzKEhGew9rQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B718(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_facetimePhotosOptIn()
{
  return MGGetBoolAnswer((const char **)@"4RgFi8v1sfuhCZhRdQkxxQ");
}

const void *MobileGestalt_copy_facetimePreferredDecoding_obj()
{
  return (id)MGCopyAnswer((const char **)@"APeknA55ZAcu0FcufqVN4Q");
}

const void *MobileGestalt_copy_facetimePreferredEncoding_obj()
{
  return (id)MGCopyAnswer((const char **)@"ct5Dh6u0D6WDJKg2PrMFVQ");
}

UInt8 *MobileGestalt_copy_firmwareNonce()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"VLfT+eziZYKNjRASM6ntnQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_firmwareNonce_obj()
{
  return (id)MGCopyAnswer((const char **)@"VLfT+eziZYKNjRASM6ntnQ");
}

const void *MobileGestalt_copy_firmwarePreflightInfo_obj()
{
  return (id)MGCopyAnswer((const char **)@"qOwiNS0eFEq9oi3MNsgxWg");
}

char *MobileGestalt_copy_firmwareVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"LeSRsiLoJCMhjn6nd6GWbQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_firmwareVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"LeSRsiLoJCMhjn6nd6GWbQ");
}

const void *MobileGestalt_copy_firstPartyLaunchTimeLimitScale_obj()
{
  return (id)MGCopyAnswer((const char **)@"NUYAz1eq3Flzt7ZQxXC/ng");
}

BOOL MobileGestalt_get_forwardCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"H97G3GzDYb4wY5kwJ0AKfQ");
}

char *MobileGestalt_copy_framebufferIdentifier()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"xojWvSTQWT7Icy+xfVzjAQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_framebufferIdentifier_obj()
{
  return (id)MGCopyAnswer((const char **)@"xojWvSTQWT7Icy+xfVzjAQ");
}

const void *MobileGestalt_copy_frontCameraOffsetFromDisplayCenter_obj()
{
  return (id)MGCopyAnswer((const char **)@"uksZ8eaKeV5sUpLNBPafww");
}

uint64_t MobileGestalt_get_frontCameraRotationForISP(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"dQf5OObttLFgJniqrS19qA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B788(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

const void *MobileGestalt_copy_frontCameraRotationFromDisplayNormal_obj()
{
  return (id)MGCopyAnswer((const char **)@"g5LBi+DCiP5+jUnWVL7Y9w");
}

BOOL MobileGestalt_get_frontFacingCameraAutoHDRCapability()
{
  return MGGetBoolAnswer((const char **)@"fv8ZXM/NhUHQBQqCSk19cA");
}

BOOL MobileGestalt_get_frontFacingCameraBurstCapability()
{
  return MGGetBoolAnswer((const char **)@"Ty5/C8UDfdjcdR853kulmA");
}

BOOL MobileGestalt_get_frontFacingCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"mAAbkChrX3bpxPIffHG1BQ");
}

BOOL MobileGestalt_get_frontFacingCameraHDRCapability()
{
  return MGGetBoolAnswer((const char **)@"7W2eNk/f6uewC8N58mlRrQ");
}

BOOL MobileGestalt_get_frontFacingCameraHDROnCapability()
{
  return MGGetBoolAnswer((const char **)@"HnHX0gXt8RvhMQzIVMM7hw");
}

BOOL MobileGestalt_get_frontFacingCameraHFRCapability()
{
  return MGGetBoolAnswer((const char **)@"1gsBzuZsXu2rXZJBE01M0w");
}

uint64_t MobileGestalt_get_frontFacingCameraHFRVideoCapture1080PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"mL1lk3ZVGDFUQhxU9YLW6Q");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B7F8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_frontFacingCameraHFRVideoCapture720PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"TqAfAH10ANDgiG7V2u8BkQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B868(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_frontFacingCameraMaxVideoZoomFactor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"ZeGw3VKUymUAbp4noKsxoQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B8D8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_frontFacingCameraModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"qlcdNkarcGLcbW3HvBhwaA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_frontFacingCameraModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"qlcdNkarcGLcbW3HvBhwaA");
}

BOOL MobileGestalt_get_frontFacingCameraSingleCameraPortrait()
{
  return MGGetBoolAnswer((const char **)@"fYsrGTmVTbneEs3HKetEdQ");
}

BOOL MobileGestalt_get_frontFacingCameraStageLightPortraitCaptureCapability()
{
  return MGGetBoolAnswer((const char **)@"ocYC+NyuthjbvU9CyI4Z8Q");
}

uint64_t MobileGestalt_get_frontFacingCameraStillDurationForBurst(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"TDM8SEI14n2KE9PGHO0a4A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B948(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_frontFacingCameraSuperWideCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"fI93k3j19qMaEqYkKKI7BQ");
}

BOOL MobileGestalt_get_frontFacingCameraVariableFrameRateCapability()
{
  return MGGetBoolAnswer((const char **)@"THo7EIAWJiQExmTeHpevLg");
}

uint64_t MobileGestalt_get_frontFacingCameraVideoCapture1080PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"3yzXj0lJhQi+r3kgQlwiOg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079B9B8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_frontFacingCameraVideoCapture4KMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"cux58RcuSiBhpxWnT3pE4A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BA28(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_frontFacingCameraVideoCapture720PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"0AFeHRmliNJ4pSlVb8ltZA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BA98(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_frontFacingIRCameraModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"2kuITg6XPwXl8zbpx+hoCw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_frontFacingIRCameraModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"2kuITg6XPwXl8zbpx+hoCw");
}

char *MobileGestalt_copy_frontFacingIRStructuredLightProjectorModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"wH7fRq4TDdYG2pN1KDQW/A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_frontFacingIRStructuredLightProjectorModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"wH7fRq4TDdYG2pN1KDQW/A");
}

BOOL MobileGestalt_get_frontFacingLowLightCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"ud+MF+BkcM1zeTxPJCsHpg");
}

BOOL MobileGestalt_get_full6FeaturesCapability()
{
  return MGGetBoolAnswer((const char **)@"fW9C1U4C1FR8bwe1VqEWug");
}

BOOL MobileGestalt_get_gpsCapability()
{
  return MGGetBoolAnswer((const char **)@"ZiSlYxYSkyaYImU3lrSXWw");
}

char *MobileGestalt_copy_gsDeviceName()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"9s45ldrCC1WF+7b6C4H2BA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_gsDeviceName_obj()
{
  return (id)MGCopyAnswer((const char **)@"9s45ldrCC1WF+7b6C4H2BA");
}

BOOL MobileGestalt_get_gameKitCapability()
{
  return MGGetBoolAnswer((const char **)@"guykxGaRwHdenUK8fJRl8w");
}

BOOL MobileGestalt_get_gasGaugeBatteryCapability()
{
  return MGGetBoolAnswer((const char **)@"FOs+LbLUs+TajsEE4xkbrw");
}

BOOL MobileGestalt_get_generativeModelSystemsCapability()
{
  return MGGetBoolAnswer((const char **)@"I3lidq+FVH2CeOi/ARa0tg");
}

BOOL MobileGestalt_get_greenTeaDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"iyfxmLogGVIaH7aEgqwcIA");
}

BOOL MobileGestalt_get_groundhogEnabled()
{
  return MGGetBoolAnswer((const char **)@"Knrkxkj5zZTf/FrPNQClgg");
}

BOOL MobileGestalt_get_gyroscopeCapability()
{
  return MGGetBoolAnswer((const char **)@"4+qmMh9JBDh72Nq6fD64RQ");
}

BOOL MobileGestalt_get_h264EncoderCapability()
{
  return MGGetBoolAnswer((const char **)@"SCNOHu+KqRX0xhIlj5KXaA");
}

BOOL MobileGestalt_get_hdRImageCaptureCapability()
{
  return MGGetBoolAnswer((const char **)@"fh6DnnDGDVZ5kZ9nYn/GrQ");
}

BOOL MobileGestalt_get_hdVideoCaptureCapability()
{
  return MGGetBoolAnswer((const char **)@"6pjDdEw65TFyL1FmIdszXw");
}

BOOL MobileGestalt_get_hevcDecoder10BitSupported()
{
  return MGGetBoolAnswer((const char **)@"ZEU7pCEskBhjQ4AOMuALDw");
}

BOOL MobileGestalt_get_hevcDecoder12BitSupported()
{
  return MGGetBoolAnswer((const char **)@"sigsyX/a/CpMjoZnrgwIgg");
}

BOOL MobileGestalt_get_hevcDecoder8BitSupported()
{
  return MGGetBoolAnswer((const char **)@"N8lZxRgC7lfdRS3dRLn+Ag");
}

BOOL MobileGestalt_get_hevcEncodingCapability()
{
  return MGGetBoolAnswer((const char **)@"g/MkWm2Ac6+TLNBgtBGxsg");
}

char *MobileGestalt_copy_hwModelStr()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"/YYygAofPDbhrwToVsXdeA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_hwModelStr_obj()
{
  return (id)MGCopyAnswer((const char **)@"/YYygAofPDbhrwToVsXdeA");
}

BOOL MobileGestalt_get_hallEffectSensorCapability()
{
  return MGGetBoolAnswer((const char **)@"/Pop5T2XQdDA60MRyxQJdQ");
}

uint64_t MobileGestalt_get_hapticsPowerControlFeatures(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"s2qnnwugvb7yAD70+Uho7g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BB08(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_hardwareEncodeSnapshotsCapability()
{
  return MGGetBoolAnswer((const char **)@"m+FD6mX8VZzP95hOhM+jow");
}

BOOL MobileGestalt_get_hardwareKeyboardCapability()
{
  return MGGetBoolAnswer((const char **)@"/GK+yfRFY/b5ZDIDpdVImg");
}

char *MobileGestalt_copy_hardwarePlatform()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"5pYKlGnYYBzGvAlIU8RjEQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_hardwarePlatform_obj()
{
  return (id)MGCopyAnswer((const char **)@"5pYKlGnYYBzGvAlIU8RjEQ");
}

BOOL MobileGestalt_get_hardwareSnapshotsRequirePurpleGfxCapability()
{
  return MGGetBoolAnswer((const char **)@"FDsm68UVR7l3wErusGLgKg");
}

BOOL MobileGestalt_get_hardwareSupportsSecureDoubleClick()
{
  return MGGetBoolAnswer((const char **)@"l3rf7ZBrcaYn5mY5o7xiIg");
}

BOOL MobileGestalt_get_hasAllFeaturesCapability()
{
  return MGGetBoolAnswer((const char **)@"QGmb9t2ZMFVwOImO6fewgQ");
}

BOOL MobileGestalt_get_hasAppleNeuralEngine()
{
  return MGGetBoolAnswer((const char **)@"+N9mZUAHooNvMiQnjeTJ8g");
}

BOOL MobileGestalt_get_hasBaseband()
{
  return MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg");
}

BOOL MobileGestalt_get_hasBattery()
{
  return MGGetBoolAnswer((const char **)@"pX2TxZTxWKS7QSXZDC/Z6A");
}

BOOL MobileGestalt_get_hasDaliMode()
{
  return MGGetBoolAnswer((const char **)@"3m1Q0AXlqeA2C/LmqdTndQ");
}

BOOL MobileGestalt_get_hasExtendedColorDisplay()
{
  return MGGetBoolAnswer((const char **)@"Aixt/MEN2O2B7f+8m4TxUA");
}

BOOL MobileGestalt_get_hasHighBandwidthRadio()
{
  return MGGetBoolAnswer((const char **)@"IMZVdlDQXGM67ILcDE7hlA");
}

BOOL MobileGestalt_get_hasIcefall()
{
  return MGGetBoolAnswer((const char **)@"v9YZN998zL0OLA3q6SpPQA");
}

BOOL MobileGestalt_get_hasInternalSettingsBundle()
{
  return MGGetBoolAnswer((const char **)@"Oji6HRoPi7rH7HPdWVakuw");
}

BOOL MobileGestalt_get_hasMesa()
{
  return MGGetBoolAnswer((const char **)@"HV7WDiidgMf7lwAu++Lk5w");
}

BOOL MobileGestalt_get_hasPKA()
{
  return MGGetBoolAnswer((const char **)@"fkWvcjYnYzGRhVKiBoYzgA");
}

BOOL MobileGestalt_get_hasPartiallyOccludedDisplay()
{
  return MGGetBoolAnswer((const char **)@"yf309VokHnvuZ4SyOixR5A");
}

BOOL MobileGestalt_get_hasSEP()
{
  return MGGetBoolAnswer((const char **)@"7DfjbzhvH/GDkhio1dv8fA");
}

BOOL MobileGestalt_get_hasSpringBoard()
{
  return MGGetBoolAnswer((const char **)@"OBqqs000I0SR+EbJ7VO8UQ");
}

BOOL MobileGestalt_get_hasThinBezel()
{
  return MGGetBoolAnswer((const char **)@"RA3I5nhSK65i1ZxkRxQKfg");
}

BOOL MobileGestalt_get_healthKitCapability()
{
  return MGGetBoolAnswer((const char **)@"xDg5n/9rR2cMhp7MK0irBA");
}

BOOL MobileGestalt_get_hearingAidAudioEqualizationCapability()
{
  return MGGetBoolAnswer((const char **)@"SMgTCc2v9AU2ziIHRX8qww");
}

BOOL MobileGestalt_get_hearingAidLowEnergyAudioCapability()
{
  return MGGetBoolAnswer((const char **)@"RyXm3yMC4ejlFvwlEI509w");
}

BOOL MobileGestalt_get_hearingAidPowerReductionCapability()
{
  return MGGetBoolAnswer((const char **)@"u3c0R+31Df4SUTHrICQkTg");
}

BOOL MobileGestalt_get_hidpiCapability()
{
  return MGGetBoolAnswer((const char **)@"lSpe1QHIya0aeNrjLTtaJA");
}

float MobileGestalt_get_hiccoughInterval(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"f8peylp799CJta4Ev/vz8A");
  if (v2)
  {
    uint64_t v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }

      [v1 log];
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_18079BB78(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }

  float v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_hideNonDefaultApplicationsCapability()
{
  return MGGetBoolAnswer((const char **)@"cHla4KIe1wv0OvpRVrzy/w");
}

uint64_t MobileGestalt_get_highestSupportedVideoMode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"ND6ZSbBBgMgwtMfh+OL5Wg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BBE8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_homeButtonType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"JwLB44/jEB8aFDpXQ16Tuw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BC58(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_homeScreenWallpaperCapability()
{
  return MGGetBoolAnswer((const char **)@"mVenV0u+B3ShrqRddinaFQ");
}

BOOL MobileGestalt_get_horsemanCapability()
{
  return MGGetBoolAnswer((const char **)@"X9cK3qXzcFCrVpE258P2lQ");
}

char *MobileGestalt_copy_humanReadableProductVersionString()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"ToLFRidm+eJGWnpw6W4Wwg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_humanReadableProductVersionString_obj()
{
  return (id)MGCopyAnswer((const char **)@"ToLFRidm+eJGWnpw6W4Wwg");
}

BOOL MobileGestalt_get_idamCapability()
{
  return MGGetBoolAnswer((const char **)@"QdL5XM6PGBrjvJ/k187Ueg");
}

BOOL MobileGestalt_get_iOSurfaceBackedImagesCapability()
{
  return MGGetBoolAnswer((const char **)@"0/2HluYMd/whD80Hua4Rpw");
}

const void *MobileGestalt_copy_iOSurfaceFormatDictionary_obj()
{
  return (id)MGCopyAnswer((const char **)@"AoKnINTLPoKML3ctoP0AZg");
}

char *MobileGestalt_copy_iceFallID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"hfs43coKE3iWlCwnqPgBpg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_iceFallID_obj()
{
  return (id)MGCopyAnswer((const char **)@"hfs43coKE3iWlCwnqPgBpg");
}

BOOL MobileGestalt_get_icefallInRestrictedMode()
{
  return MGGetBoolAnswer((const char **)@"2sWGezz2RezScIJJgiIYQg");
}

UInt8 *MobileGestalt_copy_icefallInfo()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"MW1p1oJH8nDJc6igOb8G4g");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_icefallInfo_obj()
{
  return (id)MGCopyAnswer((const char **)@"MW1p1oJH8nDJc6igOb8G4g");
}

char *MobileGestalt_copy_image4CryptoHashMethod()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"Nzu4E/VsXjEIa83CkRdZrQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_image4CryptoHashMethod_obj()
{
  return (id)MGCopyAnswer((const char **)@"Nzu4E/VsXjEIa83CkRdZrQ");
}

BOOL MobileGestalt_get_image4Supported()
{
  return MGGetBoolAnswer((const char **)@"kyxFFGn+VS4L9a/bsvm19Q");
}

BOOL MobileGestalt_get_inDiagnosticsMode()
{
  return MGGetBoolAnswer((const char **)@"3kmXfug8VcxLI5yEmsqQKw");
}

char *MobileGestalt_copy_integratedCircuitCardIdentifier()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"j4dedPnpeXouudM1+j3dsQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_integratedCircuitCardIdentifier_obj()
{
  return (id)MGCopyAnswer((const char **)@"j4dedPnpeXouudM1+j3dsQ");
}

char *MobileGestalt_copy_integratedCircuitCardIdentifier2()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"lHMDJnC58naUz2rOCJyVIw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_integratedCircuitCardIdentifier2_obj()
{
  return (id)MGCopyAnswer((const char **)@"lHMDJnC58naUz2rOCJyVIw");
}

BOOL MobileGestalt_get_internalBuild()
{
  return MGGetBoolAnswer((const char **)@"LBJfwOEzExRxzlAnSuI7eg");
}

char *MobileGestalt_copy_internationalMobileEquipmentIdentity()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"QZgogo2DypSAZfkRW4dP/A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_internationalMobileEquipmentIdentity_obj()
{
  return (id)MGCopyAnswer((const char **)@"QZgogo2DypSAZfkRW4dP/A");
}

char *MobileGestalt_copy_internationalMobileEquipmentIdentity2()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"xRyzf9zFE/ycr/wJPweZvQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_internationalMobileEquipmentIdentity2_obj()
{
  return (id)MGCopyAnswer((const char **)@"xRyzf9zFE/ycr/wJPweZvQ");
}

BOOL MobileGestalt_get_internationalSettingsCapability()
{
  return MGGetBoolAnswer((const char **)@"tUIqcYyzHuWBvBQHsLk8IQ");
}

char *MobileGestalt_copy_inverseDeviceID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"frZQaeyWLUvLjeuEK43hmg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_inverseDeviceID_obj()
{
  return (id)MGCopyAnswer((const char **)@"frZQaeyWLUvLjeuEK43hmg");
}

BOOL MobileGestalt_get_isComputeController()
{
  return MGGetBoolAnswer((const char **)@"NLWYUp5icK9sRsPDI7XJtw");
}

BOOL MobileGestalt_get_isComputeNode()
{
  return MGGetBoolAnswer((const char **)@"RvCUAjrf7O/zAzV1StnBlg");
}

BOOL MobileGestalt_get_isEmulatedDevice()
{
  return MGGetBoolAnswer((const char **)@"z5G/N9jcMdgPm8UegLwbKg");
}

BOOL MobileGestalt_get_isLargeFormatPhone()
{
  return MGGetBoolAnswer((const char **)@"iBLsDETxB4ATmspGucaJyg");
}

BOOL MobileGestalt_get_isPwrOpposedVol()
{
  return MGGetBoolAnswer((const char **)@"euampscYbKXqj/bSaHD0QA");
}

BOOL MobileGestalt_get_isServicePart()
{
  return MGGetBoolAnswer((const char **)@"1plD8faLv1bhScZQ3t0PLQ");
}

BOOL MobileGestalt_get_isSimulator()
{
  return MGGetBoolAnswer((const char **)@"ulMliLomP737aAOJ/w/evA");
}

BOOL MobileGestalt_get_isThereEnoughBatteryLevelForSoftwareUpdate()
{
  return MGGetBoolAnswer((const char **)@"o/mXrucvBSYUXqq7K3UzKA");
}

BOOL MobileGestalt_get_isUIBuild()
{
  return MGGetBoolAnswer((const char **)@"I32sGclpgl5VujQRJxyhKQ");
}

BOOL MobileGestalt_get_isVirtualDevice()
{
  return MGGetBoolAnswer((const char **)@"MrC93gcyPVLHmEbzUu9uzQ");
}

char *MobileGestalt_copy_jasperSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"dJvRNnysMoubdy0ZCK2aRQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_jasperSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"dJvRNnysMoubdy0ZCK2aRQ");
}

BOOL MobileGestalt_get_keyboardMutePreservesRegionalShutterClickBehavior()
{
  return MGGetBoolAnswer((const char **)@"bGUN8lS6sYzy3xhePubp8A");
}

BOOL MobileGestalt_get_keyboardMutePreservesRegionalShutterClickBehaviorForLegacyDevices()
{
  return MGGetBoolAnswer((const char **)@"Bim3FC83Te8QX1kfSpqYKQ");
}

BOOL MobileGestalt_get_lteDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"1X0zc2JwBdYOQrMAyP81DQ");
}

BOOL MobileGestalt_get_launchTimeLimitScaleSupported()
{
  return MGGetBoolAnswer((const char **)@"AklmqJyJMChzHsYT0aiBbw");
}

UInt8 *MobileGestalt_copy_liDARCalibrationPrCL()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"njUcH4bm+JBmvASakDdObg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_liDARCalibrationPrCL_obj()
{
  return (id)MGCopyAnswer((const char **)@"njUcH4bm+JBmvASakDdObg");
}

BOOL MobileGestalt_get_lisaCapability()
{
  return MGGetBoolAnswer((const char **)@"4RwhtNOmePfUXmu57rh+KA");
}

BOOL MobileGestalt_get_loadThumbnailsWhileScrollingCapability()
{
  return MGGetBoolAnswer((const char **)@"1N14oS9TeyskaTU1DxpwoQ");
}

char *MobileGestalt_copy_localizedDeviceNameString()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"+VIu65zA5EW4ztayJXvOUg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_localizedDeviceNameString_obj()
{
  return (id)MGCopyAnswer((const char **)@"+VIu65zA5EW4ztayJXvOUg");
}

BOOL MobileGestalt_get_locationRemindersCapability()
{
  return MGGetBoolAnswer((const char **)@"BOPZue5C0v42pU9iJFYE3A");
}

BOOL MobileGestalt_get_locationServicesCapability()
{
  return MGGetBoolAnswer((const char **)@"0pY9r1XBV1duZ8HO3tBvFg");
}

const void *MobileGestalt_copy_lowPowerExpressModesSupported_obj()
{
  return (id)MGCopyAnswer((const char **)@"JHXk7RXOxvlqK+SxkwcM2A");
}

BOOL MobileGestalt_get_lowPowerWalletMode()
{
  return MGGetBoolAnswer((const char **)@"Birtx7GxrxCCUzsE1JQO8Q");
}

char *MobileGestalt_copy_lunaFlexSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"2xSqkUxsVWmOBWk6StVOfQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_lunaFlexSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"2xSqkUxsVWmOBWk6StVOfQ");
}

UInt8 *MobileGestalt_copy_lynxPublicKey()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"HMpTbnbcAb+mQDi8O71h6Q");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_lynxPublicKey_obj()
{
  return (id)MGCopyAnswer((const char **)@"HMpTbnbcAb+mQDi8O71h6Q");
}

UInt8 *MobileGestalt_copy_lynxSerialNumber()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"r5pA2qLgR86BQKwgMjPWzg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_lynxSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"r5pA2qLgR86BQKwgMjPWzg");
}

char *MobileGestalt_copy_mlbSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"Q1Ty5w8gxMWHx3p4lQ1fhA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mlbSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"Q1Ty5w8gxMWHx3p4lQ1fhA");
}

BOOL MobileGestalt_get_mmsCapability()
{
  return MGGetBoolAnswer((const char **)@"gKzNJcweSCWA+gIGiUQJ5w");
}

UInt8 *MobileGestalt_copy_macBridgingKeys()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"VdSOpM2K054AhCKBaXuiqw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_macBridgingKeys_obj()
{
  return (id)MGCopyAnswer((const char **)@"VdSOpM2K054AhCKBaXuiqw");
}

char *MobileGestalt_copy_macFormFactor()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"m4alZgBFhxNuTZyrEM2nbA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_macFormFactor_obj()
{
  return (id)MGCopyAnswer((const char **)@"m4alZgBFhxNuTZyrEM2nbA");
}

char *MobileGestalt_copy_macPrefsAssetImage()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"a4GiDGlLmW0qD340gOCpFA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_macPrefsAssetImage_obj()
{
  return (id)MGCopyAnswer((const char **)@"a4GiDGlLmW0qD340gOCpFA");
}

BOOL MobileGestalt_get_magnetometerCapability()
{
  return MGGetBoolAnswer((const char **)@"ELLSWiPOyh0roYBypZFHFA");
}

uint64_t MobileGestalt_get_mainDisplayRotation(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"IIYjwu1lbAyGz5t0c4ECoA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BCC8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

UInt8 *MobileGestalt_copy_mainScreenCanvasSizes()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"ybGkijAwLTwevankfVzsDQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_mainScreenCanvasSizes_obj()
{
  return (id)MGCopyAnswer((const char **)@"ybGkijAwLTwevankfVzsDQ");
}

uint64_t MobileGestalt_get_mainScreenClass(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"fdh+s6j3VijuyrK7xLjd7g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BD38(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_mainScreenHeight(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"OjzOua0LkOegX7pQdgMksw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BDA8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

float MobileGestalt_get_mainScreenOrientation(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"1qDdT/85SS7sxriK0wIbbg");
  if (v2)
  {
    uint64_t v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }

      [v1 log];
      CFTypeID v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      CFTypeID v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_18079BE18(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }

  float v6 = -1.0;
LABEL_11:

  return v6;
}

uint64_t MobileGestalt_get_mainScreenPitch(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"0l4wqBtWEAK1tOkeBHkU6Q");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BE88(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

float MobileGestalt_get_mainScreenScale(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"SNfDJgQFV2Xj7+WnozcJPw");
  if (v2)
  {
    uint64_t v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }

      [v1 log];
      CFTypeID v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      CFTypeID v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_18079BEF8(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }

  float v6 = -1.0;
LABEL_11:

  return v6;
}

uint64_t MobileGestalt_get_mainScreenWidth(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"g7YQ1Djxh4YiKlEeaoGhzg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BF68(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_marketingDeviceFamilyName()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"vme9Buk6XiWFCXoHApxNFA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_marketingDeviceFamilyName_obj()
{
  return (id)MGCopyAnswer((const char **)@"vme9Buk6XiWFCXoHApxNFA");
}

char *MobileGestalt_copy_marketingNameString()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"Z/dqyWS6OZTRy10UcmUAhw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_marketingNameString_obj()
{
  return (id)MGCopyAnswer((const char **)@"Z/dqyWS6OZTRy10UcmUAhw");
}

char *MobileGestalt_copy_marketingProductName()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"j9Th5smJpdztHwc+i39zIg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_marketingProductName_obj()
{
  return (id)MGCopyAnswer((const char **)@"j9Th5smJpdztHwc+i39zIg");
}

char *MobileGestalt_copy_marketingSOCNameString()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"Z06ZMtQY6G3kKrC7fs/gOA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_marketingSOCNameString_obj()
{
  return (id)MGCopyAnswer((const char **)@"Z06ZMtQY6G3kKrC7fs/gOA");
}

char *MobileGestalt_copy_marketingVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"QtLcewkuPtPV0RpO+i0Zzw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_marketingVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"QtLcewkuPtPV0RpO+i0Zzw");
}

const void *MobileGestalt_copy_maxH264PlaybackLevel_obj()
{
  return (id)MGCopyAnswer((const char **)@"4W7X4OWHjri5PGaAGsCWxw");
}

uint64_t MobileGestalt_get_maximumScreenScale(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"XmExwNGRvYTII6QC0+jvsA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079BFD8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_medusaFloatingLiveAppCapability()
{
  return MGGetBoolAnswer((const char **)@"mG0AnH/Vy1veoqoLRAIgTA");
}

BOOL MobileGestalt_get_medusaOverlayAppCapability()
{
  return MGGetBoolAnswer((const char **)@"UCG5MkVahJxG1YULbbd5Bg");
}

BOOL MobileGestalt_get_medusaPIPCapability()
{
  return MGGetBoolAnswer((const char **)@"nVh/gwNpy7Jv1NOk00CMrw");
}

BOOL MobileGestalt_get_medusaPinnedAppCapability()
{
  return MGGetBoolAnswer((const char **)@"ZYqko/XM5zD3XBfN5RmaXA");
}

char *MobileGestalt_copy_mesaSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"jWdMTTxiAZc+KNO6Bz2jNg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mesaSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"jWdMTTxiAZc+KNO6Bz2jNg");
}

BOOL MobileGestalt_get_metalCapability()
{
  return MGGetBoolAnswer((const char **)@"hwd9ipb6eezNleN59+6n1Q");
}

uint64_t MobileGestalt_get_metalPerfLevelCapability(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"gme55xrmjlSlBkahnZq36A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C048(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_metalPerfLevelCapabilityOne4IOS()
{
  return MGGetBoolAnswer((const char **)@"oOV1jhJbdV3AddkcCg0AEA");
}

BOOL MobileGestalt_get_metalPerfLevelCapabilityOne4IPhoneAndiPad()
{
  return MGGetBoolAnswer((const char **)@"sI1x188eYDcARhSzXxk3Cg");
}

BOOL MobileGestalt_get_microphoneCapability()
{
  return MGGetBoolAnswer((const char **)@"s2UwZpwDQcywU3de47/ilw");
}

uint64_t MobileGestalt_get_microphoneCount(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"61xs1bQ+9eTk8tlRvG9UKw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C0B8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_minimumSupportediTunesVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"96GRvvjuBKkU4HzNsYcHPA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_minimumSupportediTunesVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"96GRvvjuBKkU4HzNsYcHPA");
}

BOOL MobileGestalt_get_mixAndMatchPrevention()
{
  return MGGetBoolAnswer((const char **)@"rxUlSnmihTL8oDg9Hrgq/A");
}

char *MobileGestalt_copy_mobileDeviceMinimumVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"k+KTni1jrwErpcDMEnn3aw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileDeviceMinimumVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"k+KTni1jrwErpcDMEnn3aw");
}

char *MobileGestalt_copy_mobileEquipmentIdentifier()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"xOEH0P1H/1jmYe2t54+5cQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentIdentifier_obj()
{
  return (id)MGCopyAnswer((const char **)@"xOEH0P1H/1jmYe2t54+5cQ");
}

char *MobileGestalt_copy_mobileEquipmentInfoBaseId()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"inECTnNyR97XWxm7jU8uqA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentInfoBaseId_obj()
{
  return (id)MGCopyAnswer((const char **)@"inECTnNyR97XWxm7jU8uqA");
}

char *MobileGestalt_copy_mobileEquipmentInfoBaseProfile()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"heP+NTlvkhJ2zzWIUznawA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentInfoBaseProfile_obj()
{
  return (id)MGCopyAnswer((const char **)@"heP+NTlvkhJ2zzWIUznawA");
}

char *MobileGestalt_copy_mobileEquipmentInfoBaseVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"RXyKSjeF239SL2vOcru01A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentInfoBaseVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"RXyKSjeF239SL2vOcru01A");
}

char *MobileGestalt_copy_mobileEquipmentInfoCSN()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"rkFHO5dZmWxy3QdOx7r7kA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentInfoCSN_obj()
{
  return (id)MGCopyAnswer((const char **)@"rkFHO5dZmWxy3QdOx7r7kA");
}

char *MobileGestalt_copy_mobileEquipmentInfoDisplayCSN()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"zPHFWx4ZItDiTXNT2onrWQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentInfoDisplayCSN_obj()
{
  return (id)MGCopyAnswer((const char **)@"zPHFWx4ZItDiTXNT2onrWQ");
}

char *MobileGestalt_copy_mobileSubscriberCountryCode()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"CQ6gFmgMhpnnISvG6VakBQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileSubscriberCountryCode_obj()
{
  return (id)MGCopyAnswer((const char **)@"CQ6gFmgMhpnnISvG6VakBQ");
}

char *MobileGestalt_copy_mobileSubscriberNetworkCode()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"oJGeec0N+MudCr0LsdtbHw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileSubscriberNetworkCode_obj()
{
  return (id)MGCopyAnswer((const char **)@"oJGeec0N+MudCr0LsdtbHw");
}

BOOL MobileGestalt_get_mobileWifi()
{
  return MGGetBoolAnswer((const char **)@"mtHZd1H8XJ2DMVtNVUSkag");
}

char *MobileGestalt_copy_modelNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"D0cJ8r7U5zve6uA6QbOiLA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_modelNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"D0cJ8r7U5zve6uA6QbOiLA");
}

BOOL MobileGestalt_get_monarchLowEndHardware()
{
  return MGGetBoolAnswer((const char **)@"s+gaKNe68Gs3PfqKrZhi1w");
}

const void *MobileGestalt_copy_multiLynxPublicKeyArray_obj()
{
  return (id)MGCopyAnswer((const char **)@"niQFEBBY7JaauAIosAyQQg");
}

const void *MobileGestalt_copy_multiLynxSerialNumberArray_obj()
{
  return (id)MGCopyAnswer((const char **)@"juE6wCsjVG4bfAhgHcUVcQ");
}

BOOL MobileGestalt_get_multiTouchCapability()
{
  return MGGetBoolAnswer((const char **)@"pFpC81KCZegLf4FenQZ2OA");
}

uint64_t MobileGestalt_get_multiTouchMaxBootTime(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"EuwCLwMXh+X5LErHKwvuIw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C128(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_multitaskingCapability()
{
  return MGGetBoolAnswer((const char **)@"RECLuzbJ6oh8q4NKR8RtNg");
}

BOOL MobileGestalt_get_multitaskingGesturesCapability()
{
  return MGGetBoolAnswer((const char **)@"UFqkf9tcH1ltsOMzpdwSUw");
}

BOOL MobileGestalt_get_musicStoreCapability()
{
  return MGGetBoolAnswer((const char **)@"izFv/qj3IUhqAIiEuYH6xw");
}

BOOL MobileGestalt_get_n78AHack()
{
  return MGGetBoolAnswer((const char **)@"+bL/lKwaIAv+fzmjsHYZdw");
}

BOOL MobileGestalt_get_nfcRadio()
{
  return MGGetBoolAnswer((const char **)@"zxMIgVSILN6S5ee6MZhf+Q");
}

BOOL MobileGestalt_get_nfcRadioCalibrationDataPresent()
{
  return MGGetBoolAnswer((const char **)@"XFx5cRZ0tJYl+xJUCEgjnQ");
}

char *MobileGestalt_copy_nfcUniqueChipID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"evtY5EeJ8V0nFhmrj/OYjg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_nfcUniqueChipID_obj()
{
  return (id)MGCopyAnswer((const char **)@"evtY5EeJ8V0nFhmrj/OYjg");
}

const void *MobileGestalt_copy_nVRAMDictionary_obj()
{
  return (id)MGCopyAnswer((const char **)@"Q2jR+AUT9PTHUrP/mkdfxQ");
}

char *MobileGestalt_copy_nandControllerUID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"PcQWbThCb7iLEW+EoqZdEQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_nandControllerUID_obj()
{
  return (id)MGCopyAnswer((const char **)@"PcQWbThCb7iLEW+EoqZdEQ");
}

uint64_t MobileGestalt_get_navajoFusingState(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"LcUv5nw5flxnHlxWu9sJvw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C198(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_nikeIpodCapability()
{
  return MGGetBoolAnswer((const char **)@"qHVhw5NhezD+ljFUPvQb4g");
}

BOOL MobileGestalt_get_notGreenTeaDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"4snMZS8LJkSctKypt2m+xA");
}

BOOL MobileGestalt_get_oledDisplay()
{
  return MGGetBoolAnswer((const char **)@"noqTy5fUbyK03UHxWigBBQ");
}

BOOL MobileGestalt_get_otaActivationCapability()
{
  return MGGetBoolAnswer((const char **)@"38C0kq9NiVaMsqjlUsCHcQ");
}

const void *MobileGestalt_copy_oceanComputeCarrierID_obj()
{
  return (id)MGCopyAnswer((const char **)@"qgfS+6l1exvcMW5Tfplv2Q");
}

const void *MobileGestalt_copy_oceanComputeCarrierSlot_obj()
{
  return (id)MGCopyAnswer((const char **)@"LUy+wqFiBmou5hwM5OWbmA");
}

BOOL MobileGestalt_get_offlineDictationCapability()
{
  return MGGetBoolAnswer((const char **)@"c5uqoV7Z9ly+f4c5mYXILg");
}

BOOL MobileGestalt_get_onDeviceSiriCapability()
{
  return MGGetBoolAnswer((const char **)@"O/7gbXWA5X2IRPVtDRU+bw");
}

BOOL MobileGestalt_get_openGLES1Capability()
{
  return MGGetBoolAnswer((const char **)@"kt7gXeIiU0dLEKrgUSsLVw");
}

BOOL MobileGestalt_get_openGLES2Capability()
{
  return MGGetBoolAnswer((const char **)@"ce5pjDJVSOxjcg1HwmAezA");
}

BOOL MobileGestalt_get_openGLES3Capability()
{
  return MGGetBoolAnswer((const char **)@"LAB8o3Bxs3CgNuzDawjRdw");
}

uint64_t MobileGestalt_get_openGLESVersion(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"ErupMbaQrM6KypD4K0kTDQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C208(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_oysterCapability()
{
  return MGGetBoolAnswer((const char **)@"0GUU+Z8xIu+7TE+scKXscg");
}

BOOL MobileGestalt_get_ptpLargeFilesCapability()
{
  return MGGetBoolAnswer((const char **)@"MWpHV1VYKXmaKqhgbmTWCg");
}

char *MobileGestalt_copy_panelSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"YVNo6vlMjhgQ9yGYV8gatw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_panelSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"YVNo6vlMjhgQ9yGYV8gatw");
}

BOOL MobileGestalt_get_panoramaCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"q4cLktMwtrx8dCJAQTeqTg");
}

char *MobileGestalt_copy_partitionStyle()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"yjP8DgByZmLk04Ta6f6DWQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_partitionStyle_obj()
{
  return (id)MGCopyAnswer((const char **)@"yjP8DgByZmLk04Ta6f6DWQ");
}

char *MobileGestalt_copy_partitionType()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"xUHcyT2/HE8oi/4LaOI+Sw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_partitionType_obj()
{
  return (id)MGCopyAnswer((const char **)@"xUHcyT2/HE8oi/4LaOI+Sw");
}

BOOL MobileGestalt_get_passwordConfigured()
{
  return MGGetBoolAnswer((const char **)@"xsaMbRQ5rQ+eyKMKG+ZSSg");
}

BOOL MobileGestalt_get_passwordProtected()
{
  return MGGetBoolAnswer((const char **)@"yNesiJuidlesNpI/K5Ri4A");
}

BOOL MobileGestalt_get_pearlCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"8S7ydMJ4DlCUF38/hI/fJA");
}

BOOL MobileGestalt_get_pearlIDCapability()
{
  return MGGetBoolAnswer((const char **)@"8olRm6C1xqr7AJGpLRnpSw");
}

BOOL MobileGestalt_get_pearlMotionDetectionCapability()
{
  return MGGetBoolAnswer((const char **)@"j39y4QUrP6cvZY8Pjyv64w");
}

BOOL MobileGestalt_get_peekUICapability()
{
  return MGGetBoolAnswer((const char **)@"LvCIFE6lOM10QDqIEyYWRA");
}

uint64_t MobileGestalt_get_peekUIWidth(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"Y2TwC8z+XeBBBswnLf7JsQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C278(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_peer2PeerCapability()
{
  return MGGetBoolAnswer((const char **)@"Ht1HDxwTOy2gyY+THjbd6w");
}

uint64_t MobileGestalt_get_perfLevelCapability(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"eW5H/Gwg0uqbMqFot70pYg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C2E8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_perfLevelCapabilityOne4IOS()
{
  return MGGetBoolAnswer((const char **)@"Mi/ME+v1wZqkvXFU3xX3KA");
}

BOOL MobileGestalt_get_perfLevelCapabilityOne4TvOS()
{
  return MGGetBoolAnswer((const char **)@"2oKaRZpltNseA9gTdIKTQQ");
}

BOOL MobileGestalt_get_perfLevelCapabilityTwo4IOS()
{
  return MGGetBoolAnswer((const char **)@"JWjvsupiqWYtIGwr8yGd8w");
}

BOOL MobileGestalt_get_perfLevelCapabilityiPadM1()
{
  return MGGetBoolAnswer((const char **)@"TqtrpIdOXIIlhOraMmq/pQ");
}

BOOL MobileGestalt_get_personalHotspotCapability()
{
  return MGGetBoolAnswer((const char **)@"wlxZYdEZITDTzgs/OnnV+Q");
}

char *MobileGestalt_copy_phoneNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"H5TSt7Pu4zNCD5RvHuk5CQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_phoneNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"H5TSt7Pu4zNCD5RvHuk5CQ");
}

char *MobileGestalt_copy_phoneNumber2()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"SZy8T5ma/+a0wJc0ntiaaA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_phoneNumber2_obj()
{
  return (id)MGCopyAnswer((const char **)@"SZy8T5ma/+a0wJc0ntiaaA");
}

BOOL MobileGestalt_get_phosphorusCapability()
{
  return MGGetBoolAnswer((const char **)@"7mV26K/1a+wTtqiunvHMUQ");
}

BOOL MobileGestalt_get_photoAdjustmentsCapability()
{
  return MGGetBoolAnswer((const char **)@"H8Pi7AthQFVZ0B6A1J5OTw");
}

BOOL MobileGestalt_get_photoCapability()
{
  return MGGetBoolAnswer((const char **)@"bl+nF6e86pLBiPP4pVJ24g");
}

BOOL MobileGestalt_get_photoSharingCapability()
{
  return MGGetBoolAnswer((const char **)@"UHwjAM1cqBLCR1OuYouf8A");
}

BOOL MobileGestalt_get_photoStreamCapability()
{
  return MGGetBoolAnswer((const char **)@"RYZZuAFEfSNnEKEzwzRnqw");
}

BOOL MobileGestalt_get_photosPostEffectsCapability()
{
  return MGGetBoolAnswer((const char **)@"4Jfu4lqX8dzru4Z+ONQ1rQ");
}

char *MobileGestalt_copy_physicalHardwareNameString()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"bbtR9jQx50Fv5Af/affNtA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_physicalHardwareNameString_obj()
{
  return (id)MGCopyAnswer((const char **)@"bbtR9jQx50Fv5Af/affNtA");
}

BOOL MobileGestalt_get_piezoClickerCapability()
{
  return MGGetBoolAnswer((const char **)@"DdNpmCCXbeMGbqj0kAMCdw");
}

UInt8 *MobileGestalt_copy_pintoMacAddress()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"d27R2IjPvpwp+MX/kUbJ2w");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_pintoMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)@"d27R2IjPvpwp+MX/kUbJ2w");
}

BOOL MobileGestalt_get_pipelinedStillImageProcessingCapability()
{
  return MGGetBoolAnswer((const char **)@"XIcF5FOyQlt/H79oFw9ciA");
}

BOOL MobileGestalt_get_platformStandAloneContactsCapability()
{
  return MGGetBoolAnswer((const char **)@"HMKkoKYsMmBBSN6ozOtw/w");
}

BOOL MobileGestalt_get_platinumCapability()
{
  return MGGetBoolAnswer((const char **)@"1oMPwMsqxTa9BJxUs8v06w");
}

BOOL MobileGestalt_get_pressDemoMode()
{
  return MGGetBoolAnswer((const char **)@"l8Xo/NV8/U585G1uBtW29w");
}

UInt8 *MobileGestalt_copy_productHash()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"TZ/0j62wM3D0CuRt+Nc/Lw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_productHash_obj()
{
  return (id)MGCopyAnswer((const char **)@"TZ/0j62wM3D0CuRt+Nc/Lw");
}

char *MobileGestalt_copy_productName()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"ivIu8YTDnBSrYv/SN4G8Ag");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_productName_obj()
{
  return (id)MGCopyAnswer((const char **)@"ivIu8YTDnBSrYv/SN4G8Ag");
}

char *MobileGestalt_copy_productType()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"h9jDsbgj7xIVeIQ8S3/X3Q");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_productType_obj()
{
  return (id)MGCopyAnswer((const char **)@"h9jDsbgj7xIVeIQ8S3/X3Q");
}

char *MobileGestalt_copy_productVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"qNNddlUK+B/YlooNoymwgA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_productVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"qNNddlUK+B/YlooNoymwgA");
}

char *MobileGestalt_copy_productVersionExtra()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"P5Go9WVVA604m7rKhbVndw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_productVersionExtra_obj()
{
  return (id)MGCopyAnswer((const char **)@"P5Go9WVVA604m7rKhbVndw");
}

char *MobileGestalt_copy_provisioningUniqueDeviceID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"RNcdWbM8+dO5tx82A+YCcQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_provisioningUniqueDeviceID_obj()
{
  return (id)MGCopyAnswer((const char **)@"RNcdWbM8+dO5tx82A+YCcQ");
}

UInt8 *MobileGestalt_copy_proximitySensorCalibration()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"6UUmcaeT7rJoyUVmoPJd4A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_proximitySensorCalibration_obj()
{
  return (id)MGCopyAnswer((const char **)@"6UUmcaeT7rJoyUVmoPJd4A");
}

const void *MobileGestalt_copy_proximitySensorCalibrationDictionary_obj()
{
  return (id)MGCopyAnswer((const char **)@"5mvQIwu3Mqqw/zOKmwGkWw");
}

BOOL MobileGestalt_get_proximitySensorCapability()
{
  return MGGetBoolAnswer((const char **)@"5v2p6i7PyIMdWOK4n/+G4A");
}

BOOL MobileGestalt_get_quickNoteCapability()
{
  return MGGetBoolAnswer((const char **)@"8fyX2yEg28cYgJ10Yl+ueA");
}

uint64_t MobileGestalt_get_rFExposureSeparationDistance(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"5tnvmEsHQKfCoieLEYpnvg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C358(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

UInt8 *MobileGestalt_copy_rawPanelSerialNumber()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"PxEDp0oOasJ92F/V7YBa8A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_rawPanelSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"PxEDp0oOasJ92F/V7YBa8A");
}

BOOL MobileGestalt_get_rearALSCapability()
{
  return MGGetBoolAnswer((const char **)@"PVMLomcejavaax8/I3Ud3A");
}

BOOL MobileGestalt_get_rearCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"6iI7/9cVUGIjdrSvIXEt4A");
}

const void *MobileGestalt_copy_rearCameraOffsetFromDisplayCenter_obj()
{
  return (id)MGCopyAnswer((const char **)@"waWRQ4fj6cyMuJ+wTWJs1g");
}

BOOL MobileGestalt_get_rearFacingCamera60FpsVideoCaptureCapability()
{
  return MGGetBoolAnswer((const char **)@"6RrxXzvfw2GZeUPLKXxrmA");
}

BOOL MobileGestalt_get_rearFacingCameraAutoHDRCapability()
{
  return MGGetBoolAnswer((const char **)@"RLlZndRrTB3oIDuZEihtpQ");
}

BOOL MobileGestalt_get_rearFacingCameraBurstCapability()
{
  return MGGetBoolAnswer((const char **)@"plaYa8bKJaAF5Erc5nvZ+g");
}

BOOL MobileGestalt_get_rearFacingCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"dp7SlZZQotrh8McQoH1xFA");
}

BOOL MobileGestalt_get_rearFacingCameraFocusPixelCalibrationCapability()
{
  return MGGetBoolAnswer((const char **)@"STBQ8gY0pl0CK8VmRcks4w");
}

BOOL MobileGestalt_get_rearFacingCameraHDRCapability()
{
  return MGGetBoolAnswer((const char **)@"TTZrMo1OOEUELa7asaQ7xg");
}

BOOL MobileGestalt_get_rearFacingCameraHDROnCapability()
{
  return MGGetBoolAnswer((const char **)@"LkWb+FyA1+ef2UD1Fx+kAw");
}

BOOL MobileGestalt_get_rearFacingCameraHFRCapability()
{
  return MGGetBoolAnswer((const char **)@"fGpT09KNGDBjFXnqcVbgbw");
}

uint64_t MobileGestalt_get_rearFacingCameraHFRVideoCapture1080PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"jKFTzVOYcfTfNBh+yDrprw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C3C8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_rearFacingCameraHFRVideoCapture720PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"XellXEQUbOIgUPoTrIj5nA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C438(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_rearFacingCameraMaxVideoZoomFactor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"WC6wwFV23k19BlUQIAwDTg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C4A8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_rearFacingCameraModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"nWFV2qG2TjSuH7vZFCdi4w");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_rearFacingCameraModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"nWFV2qG2TjSuH7vZFCdi4w");
}

BOOL MobileGestalt_get_rearFacingCameraStageLightPortraitCaptureCapability()
{
  return MGGetBoolAnswer((const char **)@"8LAJHwc8DUQZwV2TSwsysA");
}

uint64_t MobileGestalt_get_rearFacingCameraStillDurationForBurst(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"gq0j1GmcIcaD4DjJoo9pfg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C518(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_rearFacingCameraSuperWideCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"hnXJ1OpiiIL0+p3jUG/XxQ");
}

BOOL MobileGestalt_get_rearFacingCameraTimeOfFlightCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"QVwCp3Lu9RLnxw7LO9DBfQ");
}

BOOL MobileGestalt_get_rearFacingCameraVariableFrameRateCapability()
{
  return MGGetBoolAnswer((const char **)@"ry09Fs7QIF3ITE0Fx5OdvQ");
}

uint64_t MobileGestalt_get_rearFacingCameraVideoCapture1080PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"jBGZJ71pRJrqD8VZ6Tk2VQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C588(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_rearFacingCameraVideoCapture4KMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"po7g0ATDzGoVI1DO8ISmuw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C5F8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_rearFacingCameraVideoCapture720PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"0/7QNywWU4IqDcyvTv9UYQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C668(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_rearFacingCameraVideoCaptureFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"wOVK1nhmiAawowdbIwgyaQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C6D8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_rearFacingLowLightCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"jaJWtlotaa+Y41lCs7NVHg");
}

char *MobileGestalt_copy_rearFacingSuperWideCameraModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"UZfUiD1Aqy3GOwg72SQcLQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_rearFacingSuperWideCameraModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"UZfUiD1Aqy3GOwg72SQcLQ");
}

BOOL MobileGestalt_get_rearFacingTelephotoCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"YzrS+WPEMqyh/FBv/n/jvA");
}

char *MobileGestalt_copy_rearFacingTelephotoCameraModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"cm399FbDqnv8IOFoeBLWYg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_rearFacingTelephotoCameraModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"cm399FbDqnv8IOFoeBLWYg");
}

BOOL MobileGestalt_get_receiveARCStreamOverAirPlayCapability()
{
  return MGGetBoolAnswer((const char **)@"OHXV8ldryg9nrOCapcyDCQ");
}

char *MobileGestalt_copy_recoveryOSVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"NE090Fbwd79LVOHj0AN+OA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_recoveryOSVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"NE090Fbwd79LVOHj0AN+OA");
}

char *MobileGestalt_copy_regionCode()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"h63QSdBCiT/z0WU6rdQv6Q");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_regionCode_obj()
{
  return (id)MGCopyAnswer((const char **)@"h63QSdBCiT/z0WU6rdQv6Q");
}

char *MobileGestalt_copy_regionInfo()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"zHeENZu+wbg7PUprwNwBWg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_regionInfo_obj()
{
  return (id)MGCopyAnswer((const char **)@"zHeENZu+wbg7PUprwNwBWg");
}

const void *MobileGestalt_copy_regionalBehaviorAll_obj()
{
  return (id)MGCopyAnswer((const char **)@"D4AU4tOIuGKN3G/uix65cQ");
}

BOOL MobileGestalt_get_regionalBehaviorChinaBrick()
{
  return MGGetBoolAnswer((const char **)@"0L5PkT61qoH1b/B1USWqjQ");
}

BOOL MobileGestalt_get_regionalBehaviorEUVolumeLimit()
{
  return MGGetBoolAnswer((const char **)@"Tr9qG122eEQiKGfr6EGRdQ");
}

BOOL MobileGestalt_get_regionalBehaviorGB18030()
{
  return MGGetBoolAnswer((const char **)@"inLiSl5OQHJ1stAIvKH8wg");
}

BOOL MobileGestalt_get_regionalBehaviorGoogleMail()
{
  return MGGetBoolAnswer((const char **)@"4uzgAFPkzKUmlZG5HpFIkg");
}

BOOL MobileGestalt_get_regionalBehaviorNTSC()
{
  return MGGetBoolAnswer((const char **)@"IFBSPGnQVFrGFW+ujtZu6Q");
}

BOOL MobileGestalt_get_regionalBehaviorNoPasscodeLocationTiles()
{
  return MGGetBoolAnswer((const char **)@"0R2aiV2nJVu/v8I7Ex2GcQ");
}

BOOL MobileGestalt_get_regionalBehaviorNoVOIP()
{
  return MGGetBoolAnswer((const char **)@"6MnVtR+c9LeR46bMxvR5Yw");
}

BOOL MobileGestalt_get_regionalBehaviorNoWiFi()
{
  return MGGetBoolAnswer((const char **)@"kjKnJNt7HY90iN6rpbSeFQ");
}

BOOL MobileGestalt_get_regionalBehaviorShutterClick()
{
  return MGGetBoolAnswer((const char **)@"ZgIjA7Nwd2jSo13lhDO1Iw");
}

BOOL MobileGestalt_get_regionalBehaviorValid()
{
  return MGGetBoolAnswer((const char **)@"KMgjmT+dsqBCXu1YQEcOFg");
}

BOOL MobileGestalt_get_regionalBehaviorVolumeLimit()
{
  return MGGetBoolAnswer((const char **)@"HxTvMvHnum5rI8d0Nr4xBw");
}

char *MobileGestalt_copy_regulatoryModelNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_regulatoryModelNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
}

char *MobileGestalt_copy_releaseType()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"9UCjT7Qfi4xLVvPAKIzTCQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_releaseType_obj()
{
  return (id)MGCopyAnswer((const char **)@"9UCjT7Qfi4xLVvPAKIzTCQ");
}

UInt8 *MobileGestalt_copy_remoteBluetoothAddress()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"uAIY4Jb2A7Fy2aLrlDU1gg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_remoteBluetoothAddress_obj()
{
  return (id)MGCopyAnswer((const char **)@"uAIY4Jb2A7Fy2aLrlDU1gg");
}

BOOL MobileGestalt_get_renderWideGamutImagesAtDisplayTime()
{
  return MGGetBoolAnswer((const char **)@"jMiqevikb6QWeHOhvLsw6A");
}

BOOL MobileGestalt_get_rendersLetterPressSlowly()
{
  return MGGetBoolAnswer((const char **)@"MYKMJDMFE/lhvOVXgtDNuw");
}

float MobileGestalt_get_requiredBatteryLevelForSoftwareUpdate(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"AFXhxraF1bvyaCMlBIOZPA");
  if (v2)
  {
    uint64_t v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }

      [v1 log];
      CFRange v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      CFRange v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_18079C748(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }

  float v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_requiresNaturalVolumeButtonArrangement()
{
  return MGGetBoolAnswer((const char **)@"cW+7coMzO/hTtCCDcSvNOw");
}

BOOL MobileGestalt_get_requiresPairedRemote()
{
  return MGGetBoolAnswer((const char **)@"rXbje18EX3b6I7u/pXBYeg");
}

BOOL MobileGestalt_get_researchFuse()
{
  return MGGetBoolAnswer((const char **)@"XYlJKKkj2hztRP1NWWnhlw");
}

BOOL MobileGestalt_get_restoreOSBuild()
{
  return MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ");
}

const void *MobileGestalt_copy_restrictedCountryCodes_obj()
{
  return (id)MGCopyAnswer((const char **)@"nSo8opze5rFk+EdBoR6tBw");
}

UInt8 *MobileGestalt_copy_ringerButtonCGRect()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"qzHhHrOpIDLAq2balBdVZg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_ringerButtonCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)@"qzHhHrOpIDLAq2balBdVZg");
}

BOOL MobileGestalt_get_ringerButtonCapability()
{
  return MGGetBoolAnswer((const char **)@"cT44WE1EohiwRzhsZ8xEsw");
}

UInt8 *MobileGestalt_copy_ringerButtonNormalizedCGRect()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"6JkXMDhnrEMvLiRlYJL6zA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_ringerButtonNormalizedCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)@"6JkXMDhnrEMvLiRlYJL6zA");
}

BOOL MobileGestalt_get_ringerSwitchCapability()
{
  return MGGetBoolAnswer((const char **)@"hx2qJfJRLZ9Sseb37IcQow");
}

char *MobileGestalt_copy_rosalineSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"O8mk69g6k/CbfeET9LtqQA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_rosalineSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"O8mk69g6k/CbfeET9LtqQA");
}

UInt8 *MobileGestalt_copy_roswellChipID()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"OyENNqRhuo8+RHkpbr/82A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_roswellChipID_obj()
{
  return (id)MGCopyAnswer((const char **)@"OyENNqRhuo8+RHkpbr/82A");
}

BOOL MobileGestalt_get_rotateToWakeStatus()
{
  return MGGetBoolAnswer((const char **)@"YdPNjYPBzyE0jJl2X/CayQ");
}

BOOL MobileGestalt_get_sbAllowSensitiveUI()
{
  return MGGetBoolAnswer((const char **)@"CpVSHukvtqlJzCgSdoHW5w");
}

BOOL MobileGestalt_get_sbCanForceDebuggingInfo()
{
  return MGGetBoolAnswer((const char **)@"gPoIZFd4NhmSKrk67qH80w");
}

UInt8 *MobileGestalt_copy_sEInfo()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"atOCpGf+lHCxgJ9GElef8Q");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_sEInfo_obj()
{
  return (id)MGCopyAnswer((const char **)@"atOCpGf+lHCxgJ9GElef8Q");
}

UInt8 *MobileGestalt_copy_sEPNonce()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"IGYvMgBnOsdJjgmSh7Pe1A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_sEPNonce_obj()
{
  return (id)MGCopyAnswer((const char **)@"IGYvMgBnOsdJjgmSh7Pe1A");
}

BOOL MobileGestalt_get_simCapability()
{
  return MGGetBoolAnswer((const char **)@"PUMArrha4PFeOqINeQRM3A");
}

BOOL MobileGestalt_get_simPhonebookCapability()
{
  return MGGetBoolAnswer((const char **)@"tYqUcLmLfhmk7vOgdFvURg");
}

char *MobileGestalt_copy_simStatus()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"yUCaqT4KOwJpYEb+XDPq7g");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_simStatus_obj()
{
  return (id)MGCopyAnswer((const char **)@"yUCaqT4KOwJpYEb+XDPq7g");
}

char *MobileGestalt_copy_simStatus2()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"b2BKAEe88VRfp2WXEjJOyA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_simStatus2_obj()
{
  return (id)MGCopyAnswer((const char **)@"b2BKAEe88VRfp2WXEjJOyA");
}

char *MobileGestalt_copy_simTrayStatus()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"L2Oq7vNNUKuv+iJ4m9xtiw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_simTrayStatus_obj()
{
  return (id)MGCopyAnswer((const char **)@"L2Oq7vNNUKuv+iJ4m9xtiw");
}

char *MobileGestalt_copy_simTrayStatus2()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"sHiXbHqHvvRS3I/qo/rH2Q");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_simTrayStatus2_obj()
{
  return (id)MGCopyAnswer((const char **)@"sHiXbHqHvvRS3I/qo/rH2Q");
}

BOOL MobileGestalt_get_smsCapability()
{
  return MGGetBoolAnswer((const char **)@"OPzhvROZUqCZhgYMyve5BA");
}

UInt8 *MobileGestalt_copy_savageChipID()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"m9OWD0Y4Br0TZHUl6rGcOg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_savageChipID_obj()
{
  return (id)MGCopyAnswer((const char **)@"m9OWD0Y4Br0TZHUl6rGcOg");
}

const void *MobileGestalt_copy_savageInfo_obj()
{
  return (id)MGCopyAnswer((const char **)@"Fhqq6Bhy/XnCEBRAe3TI+g");
}

UInt8 *MobileGestalt_copy_savageSerialNumber()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"LE2kQ7U1iM32AmlhYvlagg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_savageSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"LE2kQ7U1iM32AmlhYvlagg");
}

UInt8 *MobileGestalt_copy_savageUID()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"FNvQ6lBvJIUcYBzQ8ggOUQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_savageUID_obj()
{
  return (id)MGCopyAnswer((const char **)@"FNvQ6lBvJIUcYBzQ8ggOUQ");
}

uint64_t MobileGestalt_get_screenCaptureHeight(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"n6blIRZ4IumqHl/toNJcpg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C7B8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

uint64_t MobileGestalt_get_screenCaptureWidth(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"kj5Hw7ZKY+hm7ZCs0Caznw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C828(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

const void *MobileGestalt_copy_screenDimensionsCapability_obj()
{
  return (id)MGCopyAnswer((const char **)@"HkXhfA7q9eBKIU2+6yTgQg");
}

BOOL MobileGestalt_get_screenRecorderCapability()
{
  return MGGetBoolAnswer((const char **)@"ExSUJyf7MblY5nBQx2OaRw");
}

char *MobileGestalt_copy_screenSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"0D3qCmmfJ/i1mpmjOsV7EA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_screenSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"0D3qCmmfJ/i1mpmjOsV7EA");
}

char *MobileGestalt_copy_secondaryBluetoothMacAddress()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"8bOgXKgqoLvqV/XeSomAfA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_secondaryBluetoothMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)@"8bOgXKgqoLvqV/XeSomAfA");
}

UInt8 *MobileGestalt_copy_secondaryEthernetMacAddress()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"BQwz+BT9b5mS7OPh2WGD6A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_secondaryEthernetMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)@"BQwz+BT9b5mS7OPh2WGD6A");
}

UInt8 *MobileGestalt_copy_secondaryWifiMacAddress()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"7VoVaBmSuokzovhUkiDx6Q");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_secondaryWifiMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)@"7VoVaBmSuokzovhUkiDx6Q");
}

BOOL MobileGestalt_get_secureElement()
{
  return MGGetBoolAnswer((const char **)@"0dnM19zBqLw5ZPhIo4GEkg");
}

char *MobileGestalt_copy_secureElementID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"nZUUCFZgomfWUIPGGzNAqg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_secureElementID_obj()
{
  return (id)MGCopyAnswer((const char **)@"nZUUCFZgomfWUIPGGzNAqg");
}

uint64_t MobileGestalt_get_securityDomain(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"wu9wv8HhpA95iHT4Yyez7A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C898(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_sensitiveUICapability()
{
  return MGGetBoolAnswer((const char **)@"BOYfUi496moe56A0RWFbqQ");
}

char *MobileGestalt_copy_serialNumber()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"VasUgeSzVyHdB27g2XpN0g");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_serialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"VasUgeSzVyHdB27g2XpN0g");
}

BOOL MobileGestalt_get_shoeboxCapability()
{
  return MGGetBoolAnswer((const char **)@"cX1+ZsVacGTXWVKB9enYow");
}

BOOL MobileGestalt_get_shouldHactivate()
{
  return MGGetBoolAnswer((const char **)@"a6vjPkzcRjrsXmniFsm0dg");
}

BOOL MobileGestalt_get_sikaCapability()
{
  return MGGetBoolAnswer((const char **)@"ssIPnsZyWHPGC5sg3Pzkiw");
}

BOOL MobileGestalt_get_signingFuse()
{
  return MGGetBoolAnswer((const char **)@"a5BRUxn1QBPXkAnbAHbmeg");
}

BOOL MobileGestalt_get_siliconBringupBoard()
{
  return MGGetBoolAnswer((const char **)@"cZflGJ39lJHTCPy35/N14Q");
}

BOOL MobileGestalt_get_simultaneousCallAndDataCurrentlySupported()
{
  return MGGetBoolAnswer((const char **)@"xleedMDMw0UV3fSgmHIoaQ");
}

BOOL MobileGestalt_get_simultaneousCallAndDataSupported()
{
  return MGGetBoolAnswer((const char **)@"0uyHvVqOLpJQBpSl/rF3Vg");
}

BOOL MobileGestalt_get_siriGestureCapability()
{
  return MGGetBoolAnswer((const char **)@"8bY/L3i3rmxrl4ZjFZZpgQ");
}

BOOL MobileGestalt_get_siriOfflineCapability()
{
  return MGGetBoolAnswer((const char **)@"ZeeiT4Cdn8HNANoqroPEAA");
}

BOOL MobileGestalt_get_skey()
{
  return MGGetBoolAnswer((const char **)@"XEzIXVPlevxuEIpZrMY+8A");
}

UInt8 *MobileGestalt_copy_softwareBehavior()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"7IgVvZZLtNjMFdInQlKg6A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_softwareBehavior_obj()
{
  return (id)MGCopyAnswer((const char **)@"7IgVvZZLtNjMFdInQlKg6A");
}

char *MobileGestalt_copy_softwareBundleVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"DViRIxZ/ZwO007CLcEYvZw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_softwareBundleVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"DViRIxZ/ZwO007CLcEYvZw");
}

float MobileGestalt_get_softwareDimmingAlpha(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"KXUnLpPZ6IZSE+As45CkhA");
  if (v2)
  {
    uint64_t v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }

      [v1 log];
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_18079C908(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }

  float v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_spatialAudioProfileCapability()
{
  return MGGetBoolAnswer((const char **)@"gB6cQZBLeMojsPAaE/iRtg");
}

UInt8 *MobileGestalt_copy_speakerCalibrationMiGa()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"jxx29Cq5bGHDnkcha4y/Rw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_speakerCalibrationMiGa_obj()
{
  return (id)MGCopyAnswer((const char **)@"jxx29Cq5bGHDnkcha4y/Rw");
}

UInt8 *MobileGestalt_copy_speakerCalibrationSpGa()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"meicxSe0OZJaae1hEiOV5Q");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_speakerCalibrationSpGa_obj()
{
  return (id)MGCopyAnswer((const char **)@"meicxSe0OZJaae1hEiOV5Q");
}

UInt8 *MobileGestalt_copy_speakerCalibrationSpTS()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"Wr2SycNVQwBrdup3ok+LxQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_speakerCalibrationSpTS_obj()
{
  return (id)MGCopyAnswer((const char **)@"Wr2SycNVQwBrdup3ok+LxQ");
}

BOOL MobileGestalt_get_sphereCapability()
{
  return MGGetBoolAnswer((const char **)@"n/aVhqpGjESEbIjvJbEHKg");
}

BOOL MobileGestalt_get_starkCapability()
{
  return MGGetBoolAnswer((const char **)@"L+KOzmOzO5DiJUZl21QGVg");
}

const void *MobileGestalt_copy_stockholmJcopInfo_obj()
{
  return (id)MGCopyAnswer((const char **)@"RgoxDxYGuZ0GzijFt6kSQQ");
}

BOOL MobileGestalt_get_storeDemoMode()
{
  return MGGetBoolAnswer((const char **)@"aadL+4GFBDe6DdsUD2HGGw");
}

const void *MobileGestalt_copy_strictWakeKeyboardCases_obj()
{
  return (id)MGCopyAnswer((const char **)@"I4TfkcdXWazwTr1al8Ml5w");
}

char *MobileGestalt_copy_supplementalBuildVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"gLd6IDfbVM+JiOhktEP7Bw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_supplementalBuildVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"gLd6IDfbVM+JiOhktEP7Bw");
}

const void *MobileGestalt_copy_supportedDeviceFamilies_obj()
{
  return (id)MGCopyAnswer((const char **)@"9MZ5AdH43csAUajl/dU+IQ");
}

const void *MobileGestalt_copy_supportedKeyboards_obj()
{
  return (id)MGCopyAnswer((const char **)@"wBVgxg3VYUU5gawcgq7MXg");
}

BOOL MobileGestalt_get_supportsBurninMitigation()
{
  return MGGetBoolAnswer((const char **)@"SR/QIL//glHfqoE+lOAnbA");
}

BOOL MobileGestalt_get_supportsEDUMU()
{
  return MGGetBoolAnswer((const char **)@"4fT83+9coO3VAUnlxuOOcw");
}

BOOL MobileGestalt_get_supportsForceTouch()
{
  return MGGetBoolAnswer((const char **)@"eQd5mlz0BN0amTp/2ccMoA");
}

BOOL MobileGestalt_get_supportsIrisCapture()
{
  return MGGetBoolAnswer((const char **)@"pLzf7OiX5nWAPUMj7BfI4Q");
}

BOOL MobileGestalt_get_supportsLEDAging()
{
  return MGGetBoolAnswer((const char **)@"AspYltP/iGWg0qxfg7c/3w");
}

BOOL MobileGestalt_get_supportsLowPowerMode()
{
  return MGGetBoolAnswer((const char **)@"f+PE44W6AO2UENJk3p2s5A");
}

BOOL MobileGestalt_get_supportsPerseus()
{
  return MGGetBoolAnswer((const char **)@"GdXjx1ixZYvN9Gg8iSf68A");
}

BOOL MobileGestalt_get_supportsRotateToWake()
{
  return MGGetBoolAnswer((const char **)@"nmOy2K5HzAAs2QNAi8wR+Q");
}

BOOL MobileGestalt_get_supportsSOS()
{
  return MGGetBoolAnswer((const char **)@"5lAK1Xp+ezh1Qu+4jnHAOg");
}

BOOL MobileGestalt_get_supportsSSHBButtonType()
{
  return MGGetBoolAnswer((const char **)@"Jq+xaurJgFzSwxOfTqtBGw");
}

BOOL MobileGestalt_get_supportsTouchRemote()
{
  return MGGetBoolAnswer((const char **)@"OoFyZnd3oLS2Lw/KQTccGA");
}

UInt8 *MobileGestalt_copy_sysCfg()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"0Y4fmR6ZHZPxDZFfPtBnRQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_sysCfg_obj()
{
  return (id)MGCopyAnswer((const char **)@"0Y4fmR6ZHZPxDZFfPtBnRQ");
}

const void *MobileGestalt_copy_sysCfgDict_obj()
{
  return (id)MGCopyAnswer((const char **)@"9/J7LY7zuYSGW1BcSTRpOw");
}

char *MobileGestalt_copy_systemImageID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"4qfpxrvLtWillIHpIsVgMA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_systemImageID_obj()
{
  return (id)MGCopyAnswer((const char **)@"4qfpxrvLtWillIHpIsVgMA");
}

BOOL MobileGestalt_get_systemTelephonyOfAnyKindCapability()
{
  return MGGetBoolAnswer((const char **)@"NrXe/KHDNhJ4r2SC2bMQyA");
}

BOOL MobileGestalt_get_tVOutCrossfadeCapability()
{
  return MGGetBoolAnswer((const char **)@"xU1eZLRifcixnyDzjo52DQ");
}

const void *MobileGestalt_copy_tVOutSettingsCapability_obj()
{
  return (id)MGCopyAnswer((const char **)@"kWVFqaGBc3nOGmfM+ZpoEg");
}

char *MobileGestalt_copy_targetSubType()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"oYicEKzVTz4/CxxE05pEgQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_targetSubType_obj()
{
  return (id)MGCopyAnswer((const char **)@"oYicEKzVTz4/CxxE05pEgQ");
}

BOOL MobileGestalt_get_telephonyCapability()
{
  return MGGetBoolAnswer((const char **)@"ZApuwHXWV8RCz0iVzMnqLw");
}

float MobileGestalt_get_telephonyMaximumGeneration(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"2IDxmg5KyAMBBi/b0rojgQ");
  if (v2)
  {
    uint64_t v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }

      [v1 log];
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_18079C978(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }

  float v6 = -1.0;
LABEL_11:

  return v6;
}

char *MobileGestalt_copy_thinningProductType()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"0+nc/Udy4WNG8S+Q7a/s1A");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_thinningProductType_obj()
{
  return (id)MGCopyAnswer((const char **)@"0+nc/Udy4WNG8S+Q7a/s1A");
}

BOOL MobileGestalt_get_threadRadioCapability()
{
  return MGGetBoolAnswer((const char **)@"BdS2M69XMEc9v/jsHBC3Eg");
}

char *MobileGestalt_copy_threadRadioMacAddress()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"0rbLl0hXmTehfEduXfeJYQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_threadRadioMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)@"0rbLl0hXmTehfEduXfeJYQ");
}

char *MobileGestalt_copy_threadRadioMacAddress64Bit()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"W/xqvBX9L07XHb0BOtYycQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_threadRadioMacAddress64Bit_obj()
{
  return (id)MGCopyAnswer((const char **)@"W/xqvBX9L07XHb0BOtYycQ");
}

char *MobileGestalt_copy_threadRadioMacAddressForProvisioning()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"AGrtXj3nqzz8KFfFHK7/sA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_threadRadioMacAddressForProvisioning_obj()
{
  return (id)MGCopyAnswer((const char **)@"AGrtXj3nqzz8KFfFHK7/sA");
}

BOOL MobileGestalt_get_timeSyncCapability()
{
  return MGGetBoolAnswer((const char **)@"LJ8aZhTg8lXUeVxHzT+hMw");
}

UInt8 *MobileGestalt_copy_topModuleAuthChipID()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"U/nyu97+Q5SFY9yJKJTuSA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_topModuleAuthChipID_obj()
{
  return (id)MGCopyAnswer((const char **)@"U/nyu97+Q5SFY9yJKJTuSA");
}

BOOL MobileGestalt_get_torpedoCapability()
{
  return MGGetBoolAnswer((const char **)@"kT9JwUR2xPCTHTdgvG3UdA");
}

BOOL MobileGestalt_get_touchDelivery120Hz()
{
  return MGGetBoolAnswer((const char **)@"2OK50OGmkXM1ospsh766WQ");
}

BOOL MobileGestalt_get_touchIDCapability()
{
  return MGGetBoolAnswer((const char **)@"8Shl+AdVKo09f1Sldkb0kA");
}

const void *MobileGestalt_copy_tribecaSettings_obj()
{
  return (id)MGCopyAnswer((const char **)@"2tBx5IzZX4CpUVJ79LfsVg");
}

UInt8 *MobileGestalt_copy_tristarID()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"o60T6wXe1DDaO4a4gw10TA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_tristarID_obj()
{
  return (id)MGCopyAnswer((const char **)@"o60T6wXe1DDaO4a4gw10TA");
}

uint64_t MobileGestalt_get_uiBackgroundQuality(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"eH9J8yYIjbRNxg2EeYvNFg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079C9E8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_uiParallaxCapability()
{
  return MGGetBoolAnswer((const char **)@"mmu76v66k1dAtghToInT8g");
}

BOOL MobileGestalt_get_uiProceduralWallpaperCapability()
{
  return MGGetBoolAnswer((const char **)@"UZyrJHlX635ocWEjBkt9YA");
}

BOOL MobileGestalt_get_uiReachability()
{
  return MGGetBoolAnswer((const char **)@"m4UsCAgXhbdnwLebiyKMiw");
}

BOOL MobileGestalt_get_umtsDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"0Yu30fwSQVPKvHVla17kXw");
}

BOOL MobileGestalt_get_unifiedIPodCapability()
{
  return MGGetBoolAnswer((const char **)@"sJ0n0UZHSUVJbmyy2p54Cw");
}

uint64_t MobileGestalt_get_uniqueChipID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1LL;
  uint64_t valuePtr = -1LL;
  uint64_t v3 = MGCopyAnswer((const char **)@"TF31PAB6aO8KAbPyNKSxKA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079CA58(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

char *MobileGestalt_copy_uniqueChipIDString()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"6WdGcQGw4VLzrgxJo+bcrw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_uniqueChipIDString_obj()
{
  return (id)MGCopyAnswer((const char **)@"6WdGcQGw4VLzrgxJo+bcrw");
}

char *MobileGestalt_copy_uniqueDeviceID()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"re6Zb+zwFKJNlkQTUeT+/w");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_uniqueDeviceID_obj()
{
  return (id)MGCopyAnswer((const char **)@"re6Zb+zwFKJNlkQTUeT+/w");
}

UInt8 *MobileGestalt_copy_uniqueDeviceIDData()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"nFRqKto/RuQAV1P+0/qkBA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_uniqueDeviceIDData_obj()
{
  return (id)MGCopyAnswer((const char **)@"nFRqKto/RuQAV1P+0/qkBA");
}

char *MobileGestalt_copy_userAssignedDeviceName()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"ghpAuGJlPoauWijdtPi7sQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_userAssignedDeviceName_obj()
{
  return (id)MGCopyAnswer((const char **)@"ghpAuGJlPoauWijdtPi7sQ");
}

UInt8 *MobileGestalt_copy_userIntentPhysicalButtonCGRect()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"pMeQxE5szZTjLMk10TisDQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_userIntentPhysicalButtonCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)@"pMeQxE5szZTjLMk10TisDQ");
}

char *MobileGestalt_copy_userIntentPhysicalButtonCGRectString()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"rJkMAGeVLdhP5+10G5hVcA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_userIntentPhysicalButtonCGRectString_obj()
{
  return (id)MGCopyAnswer((const char **)@"rJkMAGeVLdhP5+10G5hVcA");
}

UInt8 *MobileGestalt_copy_userIntentPhysicalButtonNormalizedCGRect()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"WPEkba78QeFFU/wgqpOx6w");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_userIntentPhysicalButtonNormalizedCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)@"WPEkba78QeFFU/wgqpOx6w");
}

UInt8 *MobileGestalt_copy_vMUniqueDeviceIDData()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"sjGZBQzow3yV/IOa0wCeoQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_vMUniqueDeviceIDData_obj()
{
  return (id)MGCopyAnswer((const char **)@"sjGZBQzow3yV/IOa0wCeoQ");
}

BOOL MobileGestalt_get_vOIPCapability()
{
  return MGGetBoolAnswer((const char **)@"9ZqSL68MJyQESzQFDvKqXA");
}

const void *MobileGestalt_copy_vSHCompensationMinimumNits_obj()
{
  return (id)MGCopyAnswer((const char **)@"HBf5L3fT108kze+YWeiy+w");
}

BOOL MobileGestalt_get_veniceCapability()
{
  return MGGetBoolAnswer((const char **)@"5MSZn7w3nnJp22VbpqaxLQ");
}

BOOL MobileGestalt_get_vibratorCapability()
{
  return MGGetBoolAnswer((const char **)@"/9luHerXthRoPoNt/PVkTg");
}

BOOL MobileGestalt_get_videoCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"nteaxwXwZWYUI9z46VDRnA");
}

BOOL MobileGestalt_get_videoStillsCapability()
{
  return MGGetBoolAnswer((const char **)@"PxLTGkQx9GkeYcJKOaZguA");
}

BOOL MobileGestalt_get_voiceControlCapability()
{
  return MGGetBoolAnswer((const char **)@"tuwdHA2NDGnLajCo5K3UUA");
}

BOOL MobileGestalt_get_volumeButtonCapability()
{
  return MGGetBoolAnswer((const char **)@"4I0hOaR3n80379Vka7u+Xg");
}

UInt8 *MobileGestalt_copy_volumeDownButtonCGRect()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"PdprWthPO6YyrO6p1vLRgQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_volumeDownButtonCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)@"PdprWthPO6YyrO6p1vLRgQ");
}

UInt8 *MobileGestalt_copy_volumeDownButtonNormalizedCGRect()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"SbXytSPZXB1jQ8GLZOxCPw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_volumeDownButtonNormalizedCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)@"SbXytSPZXB1jQ8GLZOxCPw");
}

UInt8 *MobileGestalt_copy_volumeUpButtonCGRect()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"aD51uqjUwgRKjAC04BCrxg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_volumeUpButtonCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)@"aD51uqjUwgRKjAC04BCrxg");
}

UInt8 *MobileGestalt_copy_volumeUpButtonNormalizedCGRect()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"913P3Zsei09w0GSSOaBD+w");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_volumeUpButtonNormalizedCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)@"913P3Zsei09w0GSSOaBD+w");
}

uint64_t MobileGestalt_get_wAGraphicQuality(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"xYu8vn4nnbLnNTbBe0FT+w");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079CAC8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

BOOL MobileGestalt_get_wapiCapability()
{
  return MGGetBoolAnswer((const char **)@"hiHut/WR+B9Lx/vd0WyeNg");
}

uint64_t MobileGestalt_get_wLANBkgScanCache(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"PLQ6xgfGji63NbFu+sjeYg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079CB38(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

UInt8 *MobileGestalt_copy_wSKU()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"gD8SNRcHQeIxCAvsp+2vjA");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_wSKU_obj()
{
  return (id)MGCopyAnswer((const char **)@"gD8SNRcHQeIxCAvsp+2vjA");
}

BOOL MobileGestalt_get_watchAppButtonCapability()
{
  return MGGetBoolAnswer((const char **)@"FBw/2WrPE2supEKosxxoTw");
}

BOOL MobileGestalt_get_watchCompanionCapability()
{
  return MGGetBoolAnswer((const char **)@"fucd7llSuoCNHrrvLS1QQg");
}

BOOL MobileGestalt_get_watchKeyboardCapability()
{
  return MGGetBoolAnswer((const char **)@"MQJ1mlVrhOwaUUVJehJSVA");
}

BOOL MobileGestalt_get_watchSupportsAutoPlaylistPlayback()
{
  return MGGetBoolAnswer((const char **)@"CnoPCMssOh+xPJJo6pvnog");
}

BOOL MobileGestalt_get_watchSupportsHighQualityClockFaceGraphics()
{
  return MGGetBoolAnswer((const char **)@"Zmd7xYUw9EutGXifzpvfsA");
}

BOOL MobileGestalt_get_watchSupportsListeningOnGesture()
{
  return MGGetBoolAnswer((const char **)@"Xa9nxhMDoHTdmrn/FufA3g");
}

BOOL MobileGestalt_get_watchSupportsMusicStreaming()
{
  return MGGetBoolAnswer((const char **)@"/bfa1LxXd7G1WqHujpjsdA");
}

BOOL MobileGestalt_get_watchSupportsSiriCommute()
{
  return MGGetBoolAnswer((const char **)@"mY5R+ZIWxy5BDEEZTeWlHQ");
}

BOOL MobileGestalt_get_wifiCallingCapability()
{
  return MGGetBoolAnswer((const char **)@"/6FWCRjN1yRdUABG9vF8ow");
}

BOOL MobileGestalt_get_wifiCapability()
{
  return MGGetBoolAnswer((const char **)@"P6z8eNrRPcv0AcKPML0iow");
}

char *MobileGestalt_copy_wifiChipsetRevision()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"wYMBabAO8VguyDDVgCsPdg");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wifiChipsetRevision_obj()
{
  return (id)MGCopyAnswer((const char **)@"wYMBabAO8VguyDDVgCsPdg");
}

char *MobileGestalt_copy_wifiAddress()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"gI6iODv8MZuiP0IA+efJCw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wifiAddress_obj()
{
  return (id)MGCopyAnswer((const char **)@"gI6iODv8MZuiP0IA+efJCw");
}

UInt8 *MobileGestalt_copy_wifiAntennaSKUVersion()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"sFTm4FEVKVfdZ0ChdwQY1g");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_wifiAntennaSKUVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"sFTm4FEVKVfdZ0ChdwQY1g");
}

BOOL MobileGestalt_get_wifiCallingSecondaryDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"eLfYx8jpSlim2NZFIonPzA");
}

char *MobileGestalt_copy_wifiChipset()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"NaA/zJV7myg2w4YNmSe4yQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wifiChipset_obj()
{
  return (id)MGCopyAnswer((const char **)@"NaA/zJV7myg2w4YNmSe4yQ");
}

char *MobileGestalt_copy_wifiFirmwareVersion()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"uB6I2WImAHd8DEGuqYcMbw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wifiFirmwareVersion_obj()
{
  return (id)MGCopyAnswer((const char **)@"uB6I2WImAHd8DEGuqYcMbw");
}

char *MobileGestalt_copy_wifiVendor()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"c7fCSBIbX1mFaRoKT5zTIw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wifiVendor_obj()
{
  return (id)MGCopyAnswer((const char **)@"c7fCSBIbX1mFaRoKT5zTIw");
}

char *MobileGestalt_copy_wirelessBoardSnum()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id v0 = (const __CFString *)MGCopyAnswer((const char **)@"XrPbSCNx9X7Lyw9oGPgMDQ");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024LL, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wirelessBoardSnum_obj()
{
  return (id)MGCopyAnswer((const char **)@"XrPbSCNx9X7Lyw9oGPgMDQ");
}

BOOL MobileGestalt_get_wirelessChargingCapability()
{
  return MGGetBoolAnswer((const char **)@"PpmzzBVLpZVubmP0tCIymg");
}

BOOL MobileGestalt_get_workoutUltraMode()
{
  return MGGetBoolAnswer((const char **)@"fu+4kyf8VcMBtgbMyJlLtg");
}

UInt8 *MobileGestalt_copy_yonkersChipID()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"2/q9qmqGigMfkzY830Zf2g");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_yonkersChipID_obj()
{
  return (id)MGCopyAnswer((const char **)@"2/q9qmqGigMfkzY830Zf2g");
}

UInt8 *MobileGestalt_copy_yonkersSerialNumber()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"67Dsh4G8EGQp4WbPDfS/Xw");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_yonkersSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)@"67Dsh4G8EGQp4WbPDfS/Xw");
}

UInt8 *MobileGestalt_copy_yonkersUID()
{
  id v0 = (const __CFData *)MGCopyAnswer((const char **)@"bwLsbkp4shhHuNB5VpRa8w");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  size_t Length = CFDataGetLength(v0);
  uint64_t v3 = (UInt8 *)malloc(Length);
  v5.CFIndex location = 0LL;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_yonkersUID_obj()
{
  return (id)MGCopyAnswer((const char **)@"bwLsbkp4shhHuNB5VpRa8w");
}

BOOL MobileGestalt_get_youtubeCapability()
{
  return MGGetBoolAnswer((const char **)@"pCbWB0w5vhsKbGJHs/c1jQ");
}

BOOL MobileGestalt_get_youtubePluginCapability()
{
  return MGGetBoolAnswer((const char **)@"81Zj1535/jeXbmfOndlIVA");
}

BOOL MobileGestalt_get_iAP2Capability()
{
  return MGGetBoolAnswer((const char **)@"ZepchaN1K8XQJaBUMMlV5w");
}

BOOL MobileGestalt_get_iPadCapability()
{
  return MGGetBoolAnswer((const char **)@"uKc7FPnEO++lVhHWHFlGbQ");
}

uint64_t MobileGestalt_get_iTunesFamilyID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"1qJmMHedWOh43VwRKPdDrw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }

      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_180799D8C();
      }
    }

    else
    {
      [v1 log];
      float v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_18079CBA8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }

void sub_18077EA84( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_18077EA94( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

uint64_t _MGIterateDevices(int a1, char *name, uint64_t a3)
{
  if (a1 == 5)
  {
    uint64_t result = IORegistryEntryFromPath(*MEMORY[0x1896086A8], name);
    if ((_DWORD)result)
    {
      io_object_t v6 = result;
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, result);
      return IOObjectRelease(v6);
    }
  }

  else
  {
    uint64_t v8 = (const __CFDictionary *)sub_18077EBC8(a1, name);
    if (v8)
    {
      io_iterator_t existing = 0;
      uint64_t result = IOServiceGetMatchingServices(*MEMORY[0x1896086A8], v8, &existing);
      if (!(_DWORD)result)
      {
        v9[0] = MEMORY[0x1895F87A8];
        v9[1] = 0x40000000LL;
        v9[2] = sub_18077EC44;
        v9[3] = &unk_1896FA000;
        v9[4] = a3;
        sub_180764F68(existing, (uint64_t)v9);
        return IOObjectRelease(existing);
      }
    }

    else
    {
      return fprintf((FILE *)*MEMORY[0x1895F89D0], "couldn't get matching dictionary for %d:%s\n", a1, name);
    }
  }

  return result;
}

void *sub_18077EBC8(int a1, char *name)
{
  switch(a1)
  {
    case 1:
      uint64_t result = IOServiceNameMatching(name);
      break;
    case 2:
      uint64_t result = IOServiceMatching(name);
      break;
    case 3:
      uint64_t result = IOBSDNameMatching(*MEMORY[0x1896086A8], 0, name);
      break;
    case 4:
      uint64_t result = (void *)sub_180742ACC(name);
      break;
    case 5:
      uint64_t result = 0LL;
      break;
    default:
      abort();
  }

  return result;
}

uint64_t sub_18077EC44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void _MGWaitForDevices(int a1, char *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a1 == 5) {
    sub_18079CC18();
  }
  uint64_t v10 = sub_18077EBC8(a1, a2);
  if (v10)
  {
    if (!a3)
    {
      if (!a5) {
        sub_18079CC40();
      }
      a3 = 1;
    }

    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 0x40000000LL;
    v11[2] = sub_18077ED18;
    v11[3] = &unk_1896FA028;
    v11[4] = a4;
    sub_180765A98((uint64_t)v10, a3, (uint64_t)v11, a5);
  }

  else
  {
    fprintf((FILE *)*MEMORY[0x1895F89D0], "couldn't get matching dictionary for %d:%s\n", a1, a2);
  }

uint64_t sub_18077ED18(uint64_t a1)
{
  return 0LL;
}

__CFDictionary *_MGCopyDeviceDescription(uint64_t a1, const __CFArray *a2, int a3, const char *a4, int a5)
{
  if (a3 == 1) {
    io_object_t v6 = 0LL;
  }
  else {
    io_object_t v6 = a4;
  }
  if (a3 == 3)
  {
    char v7 = 1;
  }

  else
  {
    a4 = v6;
    char v7 = 0;
  }

  return sub_18077ED64(a1, a2, 1, a4, v7, a5, 0LL);
}

__CFDictionary *sub_18077ED64( uint64_t a1, const __CFArray *a2, int a3, const char *a4, char a5, int a6, void *a7)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  char v34 = a7;
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  char v33 = 0;
  if (!MEMORY[0x186E02054](a1, cStr))
  {
    CFStringRef v14 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
    CFDictionarySetValue(Mutable, @"0:Name", v14);
    CFRelease(v14);
  }

  if (!IOObjectGetClass(a1, className))
  {
    CFStringRef v15 = CFStringCreateWithCString(0LL, className, 0x8000100u);
    CFDictionarySetValue(Mutable, @"1:Class", v15);
    CFRelease(v15);
  }

  sub_18077F350(a1, Mutable, @"2:IOService Path", "IOService", a4, (const char **)&v34, &v33);
  sub_18077F350(a1, Mutable, @"2:IODeviceTree Path", "IODeviceTree", a4, (const char **)&v34, &v33);
  if (a4 && strcmp(a4, "IOService") && strcmp(a4, "IODeviceTree"))
  {
    CFStringRef v16 = CFStringCreateWithFormat(0LL, 0LL, @"2:%s Path", a4);
    sub_18077F350(a1, Mutable, v16, a4, a4, (const char **)&v34, &v33);
    CFRelease(v16);
  }

  if (a3)
  {
    CFTypeRef cf = 0LL;
    if (a2)
    {
      uint64_t v17 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      CFTypeRef cf = v17;
      v31[0] = MEMORY[0x1895F87A8];
      v31[1] = 0x40000000LL;
      _WORD v31[2] = sub_18077F4D8;
      v31[3] = &unk_1896FA048;
      int v32 = a1;
      v31[4] = v17;
      sub_180743C7C(a2, (uint64_t)v31);
      if (v17)
      {
LABEL_12:
        if (a6)
        {
          v30[0] = MEMORY[0x1895F87A8];
          v30[1] = 0x40000000LL;
          v30[2] = sub_18077F548;
          v30[3] = &unk_1896FA068;
          v30[4] = v17;
          sub_180743CFC((const __CFDictionary *)v17, (uint64_t)v30);
          uint64_t v17 = cf;
        }

        CFDictionarySetValue(Mutable, @"3:Properties", v17);
        CFRelease(cf);
        goto LABEL_15;
      }
    }

    else
    {
      IORegistryEntryCreateCFProperties(a1, (CFMutableDictionaryRef *)&cf, 0LL, 0);
      uint64_t v17 = cf;
      if (cf) {
        goto LABEL_12;
      }
    }

    CFDictionarySetValue(Mutable, @"3:Properties", @"*** NOT PRESENT ***");
    if (!a4) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }

CFMutableDictionaryRef _MGPrintIteratedDeviceDescription( FILE *a1, int a2, int a3, char *a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  return sub_18077F174(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

CFMutableDictionaryRef sub_18077F174( FILE *__stream, int a2, int a3, char *name, int a5, int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, char a11)
{
  CFStringRef v15 = name;
  uint64_t v19 = a10;
  char v20 = a11;
  v32[0] = 0LL;
  v32[1] = v32;
  v32[2] = 0x2000000000LL;
  int v33 = 0;
  int v21 = a2 & 4;
  if (__stream)
  {
    if ((a2 & 4) != 0)
    {
      sub_1807814E8(__stream);
      char v20 = a11;
      uint64_t v19 = a10;
      CFStringRef v15 = name;
    }

    CFMutableDictionaryRef v23 = 0LL;
  }

  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    char v20 = a11;
    uint64_t v19 = a10;
    CFStringRef v15 = name;
    CFMutableDictionaryRef v23 = Mutable;
  }

  v27[0] = MEMORY[0x1895F87A8];
  v27[1] = 0x40000000LL;
  v27[2] = sub_18077F764;
  v27[3] = &unk_1896FA0B8;
  char v31 = v20;
  v27[4] = v32;
  v27[5] = a8;
  v27[6] = v19;
  v27[7] = __stream;
  int v28 = a9;
  int v29 = v21;
  int v30 = a2;
  __int16 v27[8] = v23;
  if (a5)
  {
    _MGWaitForDevices(a3, v15, a6, (uint64_t)v27, a7);
    if (!__stream) {
      goto LABEL_12;
    }
  }

  else
  {
    _MGIterateDevices(a3, v15, (uint64_t)v27);
    if (!__stream) {
      goto LABEL_12;
    }
  }

  if (v21) {
    sub_180781620(__stream);
  }
LABEL_12:
  _Block_object_dispose(v32, 8);
  return v23;
}

CFMutableDictionaryRef _MGCopyIteratedDeviceDescription( int a1, char *name, int a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  return sub_18077F174(0LL, 0, a1, name, a3, a4, a5, a6, a7, a8, a9);
}

void sub_18077F350( uint64_t a1, __CFDictionary *a2, const void *a3, const char *a4, const char *a5, const char **a6, _BYTE *a7)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!MEMORY[0x186E02060](a1, a4, __s))
  {
    if (!a5 || strcmp(a5, a4))
    {
      size_t v13 = strlen(a4);
      CFStringRef v14 = CFStringCreateWithCString(0LL, &__s[v13 + 1], 0x8000100u);
LABEL_5:
      CFStringRef v15 = v14;
      CFDictionarySetValue(a2, a3, v14);
      CFRelease(v15);
      return;
    }

    if (*a6)
    {
      uint64_t v19 = &__s[strlen(*a6) + 1];
      CFStringRef v14 = CFStringCreateWithFormat(0LL, 0LL, @".../%s", v19);
      goto LABEL_5;
    }

    size_t v16 = strlen(a4);
    CFStringRef v17 = CFStringCreateWithCString(0LL, &__s[v16 + 1], 0x8000100u);
    CFDictionarySetValue(a2, a3, v17);
    CFRelease(v17);
    size_t v18 = strlen(__s) - 1;
    if (__s[v18] == 47) {
      __s[v18] = 0;
    }
    *a6 = strdup(__s);
    *a7 = 1;
  }

void sub_18077F4D8(uint64_t a1, const __CFString *a2)
{
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(*(_DWORD *)(a1 + 40), a2, 0LL, 0);
  CFTypeID v5 = *(__CFDictionary **)(a1 + 32);
  if (CFProperty)
  {
    CFDictionarySetValue(v5, a2, CFProperty);
    CFRelease(CFProperty);
  }

  else
  {
    CFDictionarySetValue(v5, a2, @"*** NOT PRESENT ***");
  }

void sub_18077F548(uint64_t a1, const void *a2, CFTypeRef cf)
{
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFDataGetTypeID())
  {
    char v7 = sub_180743DB0((CFDataRef)cf);
    if (v7)
    {
      uint64_t v8 = v7;
      CFIndex Length = CFDataGetLength((CFDataRef)cf);
      CFStringRef v10 = CFStringCreateWithFormat(0LL, 0LL, @"Decoded Data[%lld]: %@", Length, v8);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v10);
      CFRelease(v10);
      CFRelease(v8);
    }
  }

void sub_18077F5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v4 = sub_18077ED64( a2,  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 72),  *(void *)(a1 + 56),  *(unsigned __int8 *)(a1 + 73),  *(unsigned __int8 *)(a1 + 74),  *(void *)(a1 + 64));
  if (v4)
  {
    CFTypeID v5 = (const void *)v4;
    if (MEMORY[0x186E02060](a2, *(void *)(a1 + 56), cStr))
    {
      CFStringRef v6 = CFStringCreateWithFormat( 0LL,  0LL,  @"Unknown Child %d",  *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    }

    else
    {
      char v7 = cStr;
      if (*(unsigned __int16 *)cStr != 47)
      {
        uint64_t v8 = rindex(cStr, 47);
        if (v8) {
          char v7 = v8 + 1;
        }
      }

      CFStringRef v6 = CFStringCreateWithCString(0LL, v7, 0x8000100u);
    }

    uint64_t v9 = *(__CFDictionary **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    if (!v9)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = CFDictionaryCreateMutable( 0LL,  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
      uint64_t v9 = *(__CFDictionary **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    }

    CFDictionarySetValue(v9, v6, v5);
    CFRelease(v5);
    CFRelease(v6);
  }

void sub_18077F764(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  time_t v28 = time(0LL);
  int v35 = 0;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  *(_OWORD *)__s = 0u;
  __int128 v30 = 0u;
  ctime_r(&v28, __s);
  __s[strlen(__s) - 1] = 0;
  int v4 = *(_DWORD *)(a1 + 72);
  if (v4 == 1) {
    CFTypeID v5 = 0LL;
  }
  else {
    CFTypeID v5 = *(const char **)(a1 + 48);
  }
  if (v4 == 3) {
    CFStringRef v6 = *(const char **)(a1 + 48);
  }
  else {
    CFStringRef v6 = v5;
  }
  char v7 = sub_18077ED64(a2, *(const __CFArray **)(a1 + 40), 1, v6, v4 == 3, *(unsigned __int8 *)(a1 + 84) != 0, 0LL);
  if (v7)
  {
    uint64_t v8 = v7;
    int v25 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    CFStringRef v14 = CFStringCreateWithFormat(0LL, 0LL, @"%5d: %s");
    CFStringRef v15 = *(FILE **)(a1 + 56);
    if (v15)
    {
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
      {
        sub_18078164C(v15, *(_DWORD *)(a1 + 76), "\n--------------\n", v9, v10, v11, v12, v13, v25);
        CFStringRef v15 = *(FILE **)(a1 + 56);
      }

      sub_18078164C(v15, *(_DWORD *)(a1 + 76), "%@\n", v9, v10, v11, v12, v13, (char)v14);
      sub_180781674(*(FILE **)(a1 + 56), v8, 0, *(unsigned int *)(a1 + 80), v16, v17, v18, v19, v26);
      sub_18078164C(*(FILE **)(a1 + 56), *(_DWORD *)(a1 + 76), "\n", v20, v21, v22, v23, v24, v27);
    }

    else
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), v14, v8);
    }

    CFRelease(v14);
    CFRelease(v8);
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

uint64_t _MGCacheValid()
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (unlink("/var/mobile/Library/Caches/com.apple.MobileGestalt.plist"))
  {
    if (*__error() != 2)
    {
      id v0 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      id v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v1) {
        id v0 = v1 + 1;
      }
      uint64_t v2 = __error();
      char v3 = strerror(*v2);
      _MGLog((uint64_t)v0, 225LL, (uint64_t)@"Failed to delete legacy gestalt cache: %s", v4, v5, v6, v7, v8, v3);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = __error();
        uint64_t v10 = strerror(*v9);
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v24 = v10;
        uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
        uint64_t v12 = "Failed to delete legacy gestalt cache: %s";
        uint32_t v13 = 12;
LABEL_12:
        _os_log_impl(&dword_180741000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, v13);
      }
    }
  }

  else
  {
    CFStringRef v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v14) {
      uint64_t v20 = v14 + 1;
    }
    else {
      uint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog( (uint64_t)v20,  228LL,  (uint64_t)@"Successfully deleted legacy gestalt cache",  v15,  v16,  v17,  v18,  v19,  v22);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      uint64_t v11 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v12 = "Successfully deleted legacy gestalt cache";
      uint32_t v13 = 2;
      goto LABEL_12;
    }
  }

  return sub_18077FA88(0);
}

uint64_t sub_18077FA88(int a1)
{
  uint64_t v116 = *MEMORY[0x1895F89C0];
  uint64_t v108 = 0LL;
  __int128 v109 = &v108;
  uint64_t v110 = 0x2000000000LL;
  char v111 = 0;
  uint64_t v2 = (const __CFDictionary *)sub_180742ACC( "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Lib rary/Caches/com.apple.MobileGestalt.plist");
  if (!v2) {
    goto LABEL_84;
  }
  char v3 = v2;
  uint64_t v4 = (const __CFString *)sub_18074313C((const void *)*MEMORY[0x189604B60], 1);
  if (!v4)
  {
    uint64_t v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v19) {
      uint64_t v25 = v19 + 1;
    }
    else {
      uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog( (uint64_t)v25,  61LL,  (uint64_t)@"can't validate cache version since _kCFSystemVersionBuildVersionKey is missing",  v20,  v21,  v22,  v23,  v24,  v105);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "can't validate cache version since _kCFSystemVersionBuildVersionKey is missing",  buf,  2u);
    }

    goto LABEL_83;
  }

  uint64_t v5 = v4;
  CFTypeRef Value = (const __CFDictionary *)CFDictionaryGetValue(v3, @"CacheExtra");
  if (!Value)
  {
    char v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v26) {
      __int128 v32 = v26 + 1;
    }
    else {
      __int128 v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v32, 68LL, (uint64_t)@"cache extra is missing", v27, v28, v29, v30, v31, v105);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    *(_WORD *)__int128 buf = 0;
    uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v18 = "cache extra is missing";
    goto LABEL_22;
  }

  uint64_t v7 = Value;
  unint64_t v8 = (unint64_t)sub_18074313C(@"ReleaseType", 0);
  unint64_t v9 = (unint64_t)CFDictionaryGetValue(v7, @"9UCjT7Qfi4xLVvPAKIzTCQ");
  if (v8 | v9)
  {
    if (!v8 && v9)
    {
      uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v10) {
        uint64_t v16 = v10 + 1;
      }
      else {
        uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog( (uint64_t)v16,  113LL,  (uint64_t)@"moving from non-GM to release, invalidate cache",  v11,  v12,  v13,  v14,  v15,  v105);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      *(_WORD *)__int128 buf = 0;
      uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v18 = "moving from non-GM to release, invalidate cache";
LABEL_22:
      _os_log_impl(&dword_180741000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 2u);
LABEL_23:
      unint64_t v8 = 0LL;
      goto LABEL_82;
    }

    if (v8 && !v9)
    {
      __int128 v33 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v33) {
        uint64_t v39 = v33 + 1;
      }
      else {
        uint64_t v39 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog( (uint64_t)v39,  118LL,  (uint64_t)@"moving from release to non-GM, invalidate cache",  v34,  v35,  v36,  v37,  v38,  v105);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        unint64_t v40 = (os_log_s *)MEMORY[0x1895F8DA0];
        __int128 v41 = "moving from release to non-GM, invalidate cache";
LABEL_80:
        uint32_t v95 = 2;
        goto LABEL_81;
      }

      goto LABEL_82;
    }

    if (v8 && v9 && !CFEqual((CFTypeRef)v9, (CFTypeRef)v8))
    {
      uint64_t v96 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v96) {
        int v102 = v96 + 1;
      }
      else {
        int v102 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog( (uint64_t)v102,  128LL,  (uint64_t)@"we're switching release types, invalidate cache",  v97,  v98,  v99,  v100,  v101,  v105);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        unint64_t v40 = (os_log_s *)MEMORY[0x1895F8DA0];
        __int128 v41 = "we're switching release types, invalidate cache";
        goto LABEL_80;
      }

      goto LABEL_82;
    }
  }

  uint64_t v42 = CFDictionaryGetValue(v3, @"CacheVersion");
  if (v42)
  {
    CFIndex v43 = (CFIndex)v42;
    if (CFEqual(v42, v5))
    {
      uint64_t v44 = CFDictionaryGetValue(v3, @"CacheUUID");
      if (!v44)
      {
        uint64_t v74 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
        if (v74) {
          char v80 = v74 + 1;
        }
        else {
          char v80 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
        }
        _MGLog( (uint64_t)v80,  147LL,  (uint64_t)@"can't validate cache since uuid is missing",  v75,  v76,  v77,  v78,  v79,  v105);
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          unint64_t v40 = (os_log_s *)MEMORY[0x1895F8DA0];
          __int128 v41 = "can't validate cache since uuid is missing";
          goto LABEL_80;
        }

        goto LABEL_82;
      }

      CFIndex v45 = (CFIndex)v44;
      if (CFEqual(v44, @"74BB7492-6CA6-4593-A498-F1F0D8DD6859"))
      {
        uint64_t v46 = (const __CFData *)CFDictionaryGetValue(v3, @"CacheData");
        if (v46 && (uint64_t v47 = v46, v48 = CFGetTypeID(v46), v48 == CFDataGetTypeID()) && CFDataGetLength(v47) == 5886)
        {
          if (a1)
          {
            os_unfair_lock_lock((os_unfair_lock_t)&unk_18C451F30);
            BytePtr = CFDataGetBytePtr(v47);
            memcpy(qword_18C4523E0, BytePtr, 0x16FEuLL);
          }

          *((_BYTE *)v109 + 24) = 1;
          v106[0] = MEMORY[0x1895F87A8];
          v106[1] = 0x40000000LL;
          v106[2] = sub_180781098;
          v106[3] = &unk_1896FA120;
          char v107 = a1;
          v106[4] = &v108;
          sub_180743CFC(v7, (uint64_t)v106);
          if (a1)
          {
            uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
            uint64_t v51 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c",  47);
            if (v51) {
              uint64_t v50 = v51 + 1;
            }
            char Length = CFDataGetLength(v47);
            CFDictionaryGetCount(v7);
            _MGLog( (uint64_t)v50,  205LL,  (uint64_t)@"Cache loaded with %zu pre-cached in CacheData and %ld items in CacheExtra.",  v53,  v54,  v55,  v56,  v57,  Length);
            if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
            {
              CFIndex v58 = CFDataGetLength(v47);
              CFIndex Count = CFDictionaryGetCount(v7);
              *(_DWORD *)__int128 buf = 134218240;
              CFIndex v113 = v58;
              __int16 v114 = 2048;
              __int128 v115 = (const __CFString *)Count;
              _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Cache loaded with %zu pre-cached in CacheData and %ld items in CacheExtra.",  buf,  0x16u);
            }

            os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C451F30);
          }
        }

        else
        {
          BOOL v81 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
          if (v81) {
            __int128 v87 = v81 + 1;
          }
          else {
            __int128 v87 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
          }
          _MGLog((uint64_t)v87, 158LL, (uint64_t)@"cache data is invalid", v82, v83, v84, v85, v86, v105);
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            unint64_t v40 = (os_log_s *)MEMORY[0x1895F8DA0];
            __int128 v41 = "cache data is invalid";
            goto LABEL_80;
          }
        }

        goto LABEL_82;
      }

      __int128 v88 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v88) {
        uint64_t v94 = v88 + 1;
      }
      else {
        uint64_t v94 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog( (uint64_t)v94,  152LL,  (uint64_t)@"cache UUID %@ doesn't match build UUID %@",  v89,  v90,  v91,  v92,  v93,  v45);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_82;
      }
      *(_DWORD *)__int128 buf = 138412546;
      CFIndex v113 = v45;
      __int16 v114 = 2112;
      __int128 v115 = @"74BB7492-6CA6-4593-A498-F1F0D8DD6859";
      unint64_t v40 = (os_log_s *)MEMORY[0x1895F8DA0];
      __int128 v41 = "cache UUID %@ doesn't match build UUID %@";
    }

    else
    {
      uint64_t v67 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v67) {
        uint64_t v73 = v67 + 1;
      }
      else {
        uint64_t v73 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v73, 141LL, (uint64_t)@"cache %@ doesn't match OS %@", v68, v69, v70, v71, v72, v43);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_82;
      }
      *(_DWORD *)__int128 buf = 138412546;
      CFIndex v113 = v43;
      __int16 v114 = 2112;
      __int128 v115 = v5;
      unint64_t v40 = (os_log_s *)MEMORY[0x1895F8DA0];
      __int128 v41 = "cache %@ doesn't match OS %@";
    }

    uint32_t v95 = 22;
LABEL_81:
    _os_log_impl(&dword_180741000, v40, OS_LOG_TYPE_DEFAULT, v41, buf, v95);
    goto LABEL_82;
  }

  uint64_t v60 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
  if (v60) {
    uint64_t v66 = v60 + 1;
  }
  else {
    uint64_t v66 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
  }
  _MGLog( (uint64_t)v66,  136LL,  (uint64_t)@"can't validate cache version since cacheVers is missing",  v61,  v62,  v63,  v64,  v65,  v105);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    unint64_t v40 = (os_log_s *)MEMORY[0x1895F8DA0];
    __int128 v41 = "can't validate cache version since cacheVers is missing";
    goto LABEL_80;
  }

LABEL_82:
  CFRelease(v3);
  CFRelease(v5);
  char v3 = (const __CFDictionary *)v8;
  if (v8) {
LABEL_83:
  }
    CFRelease(v3);
LABEL_84:
  uint64_t v103 = *((unsigned __int8 *)v109 + 24);
  _Block_object_dispose(&v108, 8);
  return v103;
}

void *sub_1807801E0(uint64_t a1)
{
  if (qword_18C452088 != -1) {
    dispatch_once(&qword_18C452088, &unk_1896FA0F8);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_18C451F30);
  uint64_t v3 = *(__int16 *)(a1 + 154);
  if (*((_BYTE *)&unk_18C4523E0 + v3 + 5232))
  {
    switch(*(_DWORD *)(a1 + 156))
    {
      case 5:
        uint64_t v4 = (char *)&unk_18C4523E0 + 8 * v3;
        CFNumberType v5 = kCFNumberSInt32Type;
        goto LABEL_11;
      case 6:
        uint64_t v4 = (char *)&unk_18C4523E0 + 8 * v3;
        CFNumberType v5 = kCFNumberSInt64Type;
        goto LABEL_11;
      case 7:
        uint64_t v4 = (char *)&unk_18C4523E0 + 8 * v3;
        CFNumberType v5 = kCFNumberFloat32Type;
LABEL_11:
        uint64_t v6 = CFNumberCreate(0LL, v5, v4);
        goto LABEL_13;
      case 0xB:
        if (*((_BYTE *)&unk_18C4523E0 + 8 * v3)) {
          unint64_t v8 = (void **)MEMORY[0x189604DE8];
        }
        else {
          unint64_t v8 = (void **)MEMORY[0x189604DE0];
        }
        uint64_t v2 = *v8;
        break;
      default:
        uint64_t v6 = (void *)CFRetain(*((CFTypeRef *)&unk_18C4523E0 + v3));
LABEL_13:
        uint64_t v2 = v6;
        break;
    }
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C451F30);
  return v2;
}

uint64_t sub_180780324()
{
  return sub_18077FA88(1);
}

void sub_18078032C(uint64_t a1, const __CFBoolean *a2)
{
  if (*(unsigned __int16 *)(a1 + 154) <= 0x28Du)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C451F30);
    uint64_t v4 = *(__int16 *)(a1 + 154);
    if (!*((_BYTE *)&unk_18C4523E0 + v4 + 5232))
    {
      switch(*(_DWORD *)(a1 + 156))
      {
        case 5:
          CFNumberType v5 = (char *)&unk_18C4523E0 + 8 * v4;
          uint64_t v6 = a2;
          CFNumberType v7 = kCFNumberSInt32Type;
          goto LABEL_7;
        case 6:
          CFNumberType v5 = (char *)&unk_18C4523E0 + 8 * v4;
          uint64_t v6 = a2;
          CFNumberType v7 = kCFNumberSInt64Type;
          goto LABEL_7;
        case 7:
          CFNumberType v5 = (char *)&unk_18C4523E0 + 8 * v4;
          uint64_t v6 = a2;
          CFNumberType v7 = kCFNumberFloat32Type;
LABEL_7:
          CFNumberGetValue(v6, v7, v5);
          break;
        case 0xB:
          *((_BYTE *)&unk_18C4523E0 + 8 * *(__int16 *)(a1 + 154)) = CFBooleanGetValue(a2) != 0;
          break;
        default:
          *((void *)&unk_18C4523E0 + *(__int16 *)(a1 + 154)) = CFRetain(a2);
          break;
      }

      *((_BYTE *)&unk_18C4523E0 + *(__int16 *)(a1 + 154) + 5232) = 1;
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C451F30);
  }

void _MGWriteCache()
{
  uint64_t v107 = *MEMORY[0x1895F89C0];
  if ((sub_18076DD18() & 1) != 0)
  {
    _MGClearInProcessCache();
    id v0 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
    id v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(0LL, 0LL, v0, v1);
    uint64_t v4 = CFDataCreateMutable(0LL, 5886LL);
    CFDataSetLength(v4, 5886LL);
    MutableBytePtr = CFDataGetMutableBytePtr(v4);
    uint64_t v6 = MGCopyAnswer((const char **)@"mZfUC7qo4pURNhyMHZ62RQ");
    CFDictionarySetValue(Mutable, @"CacheVersion", v6);
    CFDictionarySetValue(Mutable, @"CacheData", v4);
    CFDictionarySetValue(Mutable, @"CacheExtra", v3);
    CFTypeRef cf = Mutable;
    CFDictionarySetValue(Mutable, @"CacheUUID", @"74BB7492-6CA6-4593-A498-F1F0D8DD6859");
    CFRelease(v6);
    CFRelease(v4);
    CFRelease(v3);
    int v98 = -1;
    CFNumberType v7 = (char *)sub_180746524(&v98);
    int v8 = v98;
    uint32_t v95 = v7;
    if (v98 < 1)
    {
      int v97 = 0;
      int v13 = 0;
      int v12 = 0;
      int v11 = 0;
      int v10 = 0;
    }

    else
    {
      uint64_t v9 = 0LL;
      int v10 = 0;
      int v11 = 0;
      int v12 = 0;
      int v13 = 0;
      int v97 = 0;
      uint64_t v14 = v7 + 156;
      do
      {
        uint64_t v15 = *(const char **)(v14 - 39);
        if (v15)
        {
          ++v10;
          if ((*(_BYTE *)(v14 - 1) & 0x10) != 0)
          {
            uint64_t v16 = (const char **)CFStringCreateWithCString(0LL, v15, 0x8000100u);
            uint64_t v17 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c",  47);
            if (v17) {
              uint64_t v23 = v17 + 1;
            }
            else {
              uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
            }
            _MGLog((uint64_t)v23, 469LL, (uint64_t)@"MGCache: Invoking %@", v18, v19, v20, v21, v22, (char)v16);
            if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)int v102 = v16;
              _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "MGCache: Invoking %@",  buf,  0xCu);
            }

            uint64_t v24 = MGCopyAnswer(v16);
            if (v24)
            {
              uint64_t v25 = v24;
              if (*v14 > 0xBu || ((1 << *v14) & 0x8E0) == 0)
              {
                CFDictionarySetValue(v3, v16, v24);
                ++v13;
              }

              CFRelease(v25);
            }

            else
            {
              ++v97;
            }

            ++v12;
            CFRelease(v16);
            int v8 = v98;
          }
        }

        ++v9;
        v14 += 40;
      }

      while (v9 < v8);
    }

    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C451F30);
    uint64_t v33 = v98;
    if (v98 >= 1)
    {
      uint64_t v34 = v95 + 156;
      do
      {
        if ((*(_BYTE *)(v34 - 1) & 0x10) != 0)
        {
          uint64_t v35 = *((__int16 *)v34 - 1);
          if (*((_BYTE *)&qword_18C4523E0[654] + v35))
          {
            if (*v34 <= 0xBu && ((1 << *v34) & 0x8E0) != 0)
            {
              *(void *)&MutableBytePtr[8 * v35] = qword_18C4523E0[v35];
              MutableBytePtr[*((__int16 *)v34 - 1) + 5232] = 1;
              ++v13;
            }
          }
        }

        v34 += 40;
        --v33;
      }

      while (v33);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C451F30);
    uint64_t v37 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v37) {
      CFIndex v43 = v37 + 1;
    }
    else {
      CFIndex v43 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog( (uint64_t)v43,  531LL,  (uint64_t)@"%d total, %d cacheable, %d precacheable, %d precached, %d null",  v38,  v39,  v40,  v41,  v42,  v10);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67110144;
      *(_DWORD *)int v102 = v10;
      *(_WORD *)&v102[4] = 1024;
      *(_DWORD *)&v102[6] = v11;
      LOWORD(v103) = 1024;
      *(_DWORD *)((char *)&v103 + 2) = v12;
      HIWORD(v103) = 1024;
      int v104 = v13;
      __int16 v105 = 1024;
      int v106 = v97;
      _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%d total, %d cacheable, %d precacheable, %d precached, %d null",  buf,  0x20u);
    }

    CFErrorRef error = 0LL;
    uint64_t v100 = 1LL;
    uint64_t v44 = (const char *)container_system_group_path_for_identifier();
    if (!v44)
    {
      uint64_t v61 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v61) {
        uint64_t v67 = v61 + 1;
      }
      else {
        uint64_t v67 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog( (uint64_t)v67,  349LL,  (uint64_t)@"Failed to look up system group container path: %llu",  v62,  v63,  v64,  v65,  v66,  v100);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        *(void *)int v102 = v100;
        _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to look up system group container path: %llu",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    CFIndex v45 = (char *)v44;
    if (strstr( "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple. MobileGestalt.plist",  v44))
    {
      uint64_t v46 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      size_t v47 = strlen(v45);
      CFTypeID v48 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x189604DB0], (const UInt8 *)v45, v47, 1u);
      if (v48)
      {
        uint64_t v49 = v48;
        uint64_t v50 = CFURLCreateCopyAppendingPathComponent(v46, v48, @"Library", 1u);
        uint64_t v51 = v50;
        if (v50)
        {
          int v52 = 1;
          if (!CFURLSetResourcePropertyForKey( v50,  (CFStringRef)*MEMORY[0x189605380],  (CFTypeRef)*MEMORY[0x189604DE8],  &error)
            && error)
          {
            CFStringRef v53 = CFErrorCopyDescription(error);
            uint64_t v54 = rindex( "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c",  47);
            if (v54) {
              uint64_t v60 = v54 + 1;
            }
            else {
              uint64_t v60 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
            }
            _MGLog( (uint64_t)v60,  376LL,  (uint64_t)@"Failed to set backup exclusion for path: %@",  v55,  v56,  v57,  v58,  v59,  (char)v51);
            if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)int v102 = v51;
              _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to set backup exclusion for path: %@",  buf,  0xCu);
            }

            CFRelease(v53);
            CFRelease(error);
            goto LABEL_80;
          }
        }

        else
        {
          uint64_t v86 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
          if (v86) {
            uint64_t v92 = v86 + 1;
          }
          else {
            uint64_t v92 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
          }
          _MGLog( (uint64_t)v92,  369LL,  (uint64_t)@"Failed to allocate container backup exclusion URL from %@",  v87,  v88,  v89,  v90,  v91,  (char)v49);
          int v52 = 0;
          if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)int v102 = v49;
            _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to allocate container backup exclusion URL from %@",  buf,  0xCu);
LABEL_80:
            int v52 = 0;
          }
        }

        free(v45);
        CFRelease(v49);
        if (v51)
        {
          CFRelease(v51);
          uint64_t v85 = cf;
          if ((v52 & 1) != 0) {
            goto LABEL_85;
          }
        }

        else
        {
          uint64_t v85 = cf;
          if (v52)
          {
LABEL_85:
            uint64_t v93 = (void (*)(__CFDictionary *, const char *))*((void *)off_18C533F28 + 51);
            if (!v93) {
              uint64_t v93 = (void (*)(__CFDictionary *, const char *))sub_180746538(51LL, 2LL);
            }
            v93( v85,  "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.app le.MobileGestalt.plist");
          }
        }

LABEL_73:
        CFRelease(v85);
        return;
      }

      uint64_t v78 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v78) {
        uint64_t v84 = v78 + 1;
      }
      else {
        uint64_t v84 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog( (uint64_t)v84,  363LL,  (uint64_t)@"Failed to allocate container URL from %s",  v79,  v80,  v81,  v82,  v83,  (char)v45);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_71;
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)int v102 = v45;
      uint64_t v75 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v76 = "Failed to allocate container URL from %s";
      uint32_t v77 = 12;
    }

    else
    {
      uint64_t v68 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v68) {
        uint64_t v74 = v68 + 1;
      }
      else {
        uint64_t v74 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog( (uint64_t)v74,  357LL,  (uint64_t)@"System group container path: %s should match expected gestalt cache path: %s",  v69,  v70,  v71,  v72,  v73,  (char)v45);
      if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_71;
      }
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)int v102 = v45;
      *(_WORD *)&v102[8] = 2080;
      uint64_t v103 = "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.appl"
             "e.MobileGestalt.plist";
      uint64_t v75 = (os_log_s *)MEMORY[0x1895F8DA0];
      uint64_t v76 = "System group container path: %s should match expected gestalt cache path: %s";
      uint32_t v77 = 22;
    }

    _os_log_impl(&dword_180741000, v75, OS_LOG_TYPE_DEFAULT, v76, buf, v77);
LABEL_71:
    free(v45);
LABEL_72:
    uint64_t v85 = cf;
    goto LABEL_73;
  }

  char v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
  if (v26) {
    __int128 v32 = v26 + 1;
  }
  else {
    __int128 v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
  }
  _MGLog((uint64_t)v32, 410LL, (uint64_t)@"IOKit is still busy, don't build cache", v27, v28, v29, v30, v31, v94);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "IOKit is still busy, don't build cache",  buf,  2u);
  }

void _MGClearInProcessCache()
{
  int v10 = -1;
  id v0 = (char *)sub_180746524(&v10);
  int v1 = v10;
  if (v10 >= 1)
  {
    uint64_t v2 = 0LL;
    CFMutableDictionaryRef v3 = (__int16 *)(v0 + 154);
    do
    {
      uint64_t v4 = *v3;
      if (v4 != -1 && *((_BYTE *)&qword_18C4523E0[654] + v4))
      {
        unsigned int v5 = *(_DWORD *)(v3 + 1);
        BOOL v6 = v5 > 0xB;
        int v7 = (1 << v5) & 0x8E0;
        if (v6 || v7 == 0)
        {
          uint64_t v9 = (const void *)qword_18C4523E0[v4];
          if (v9)
          {
            CFRelease(v9);
            qword_18C4523E0[*v3] = 0LL;
            int v1 = v10;
          }
        }
      }

      ++v2;
      v3 += 80;
    }

    while (v2 < v1);
  }

  bzero(qword_18C4523E0, 0x16FEuLL);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C451F30);
}

uint64_t _MGRebuildCache()
{
  if ((_MGCacheValid() & 1) == 0)
  {
    id v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v0) {
      BOOL v6 = v0 + 1;
    }
    else {
      BOOL v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v6, 591LL, (uint64_t)@"Waiting for IOKit to quiesce", v1, v2, v3, v4, v5, v15[0]);
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "Waiting for IOKit to quiesce", buf, 2u);
    }

    if (sub_18076DD18())
    {
      _MGWriteCache();
    }

    else
    {
      int v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v7) {
        int v13 = v7 + 1;
      }
      else {
        int v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v13, 595LL, (uint64_t)@"No cache generated", v8, v9, v10, v11, v12, v15[0]);
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT, "No cache generated", v15, 2u);
      }
    }
  }

  return _MGCacheValid();
}

uint64_t sub_180780EA4()
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (!unlink( "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.M obileGestalt.plist"))
  {
    uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v10) {
      uint64_t v16 = v10 + 1;
    }
    else {
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v16, 614LL, (uint64_t)@"Successfully deleted gestalt cache", v11, v12, v13, v14, v15, v28);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    *(_WORD *)__int128 buf = 0;
    uint64_t v8 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v9 = "Successfully deleted gestalt cache";
    goto LABEL_12;
  }

  int v0 = *__error();
  uint64_t v1 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
  uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
  if (v2) {
    uint64_t v1 = v2 + 1;
  }
  if (v0 == 2)
  {
    _MGLog((uint64_t)v1, 611LL, (uint64_t)@"Cache file did not exist. Rebuilding.", v3, v4, v5, v6, v7, v28);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
    {
LABEL_13:
      _MGClearInProcessCache();
      _MGWriteCache();
      return _MGCacheValid();
    }

    *(_WORD *)__int128 buf = 0;
    uint64_t v8 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v9 = "Cache file did not exist. Rebuilding.";
LABEL_12:
    _os_log_impl(&dword_180741000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
    goto LABEL_13;
  }

  uint64_t v18 = __error();
  char v19 = strerror(*v18);
  _MGLog((uint64_t)v1, 608LL, (uint64_t)@"Failed to delete gestalt cache: %s", v20, v21, v22, v23, v24, v19);
  BOOL v25 = os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v25)
  {
    char v26 = __error();
    uint64_t v27 = strerror(*v26);
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v30 = v27;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "Failed to delete gestalt cache: %s",  buf,  0xCu);
    return 0LL;
  }

  return result;
}

const char **_MGCacheCopyValueForKey(const char **a1)
{
  uint64_t result = sub_180746C1C(a1);
  if (result) {
    return (const char **)sub_1807801E0((uint64_t)result);
  }
  return result;
}

void sub_180781098(uint64_t a1, const char **a2, const void *a3, _BYTE *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v8 = sub_180746C1C(a2);
  if (!v8)
  {
    char v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v19) {
      BOOL v25 = v19 + 1;
    }
    else {
      BOOL v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog( (uint64_t)v25,  177LL,  (uint64_t)@"cache extra has invalid question %@",  v20,  v21,  v22,  v23,  v24,  (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v36 = a2;
    uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v18 = "cache extra has invalid question %@";
LABEL_13:
    uint32_t v26 = 12;
LABEL_14:
    _os_log_impl(&dword_180741000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v26);
LABEL_15:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
LABEL_16:
    *a4 = 1;
    return;
  }

  uint64_t v9 = v8;
  if (((_BYTE)v8[19] & 0x10) == 0)
  {
    uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v10) {
      uint64_t v16 = v10 + 1;
    }
    else {
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v16, 182LL, (uint64_t)@"%@ is not precacheable", v11, v12, v13, v14, v15, (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v36 = a2;
    uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v18 = "%@ is not precacheable";
    goto LABEL_13;
  }

  if (*((unsigned __int16 *)v8 + 77) >= 0x28Eu)
  {
    uint64_t v27 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v27) {
      uint64_t v33 = v27 + 1;
    }
    else {
      uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v33, 187LL, (uint64_t)@"index %d is illegal", v28, v29, v30, v31, v32, *((_WORD *)v9 + 77));
    if (!os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    int v34 = *((__int16 *)v9 + 77);
    *(_DWORD *)__int128 buf = 67109120;
    LODWORD(v36) = v34;
    uint64_t v17 = (os_log_s *)MEMORY[0x1895F8DA0];
    uint64_t v18 = "index %d is illegal";
    uint32_t v26 = 8;
    goto LABEL_14;
  }

  if (*(_BYTE *)(a1 + 40))
  {
    qword_18C4523E0[*((__int16 *)v8 + 77)] = CFRetain(a3);
    a4 = (char *)&qword_18C4523E0[654] + *((__int16 *)v9 + 77);
    goto LABEL_16;
  }

void sub_1807812E0(FILE *a1, int a2, char *cStr, va_list a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v7 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  bzero(buffer, 0x400uLL);
  if (v7)
  {
    uint64_t v8 = CFStringCreateWithFormatAndArguments(0LL, 0LL, v7, a4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (CFStringGetCString(v8, buffer, 1024LL, 0x8000100u))
      {
        if (a2)
        {
          size_t v10 = strlen(buffer);
          if (v10)
          {
            size_t v11 = v10;
            for (size_t i = 0LL; i < v11; ++i)
            {
              int v13 = buffer[i];
              if (v13 == 27)
              {
                int v16 = -1;
                if (sscanf(&buffer[i], "\x1B[%dm", &v16) == 1)
                {
                  do
                    int v15 = buffer[i++];
                  while (v15 != 109);
                  --i;
                  if (v16)
                  {
                    v16 -= 30;
                    fprintf(a1, "\\cf%d ");
                  }

                  else
                  {
                    fwrite("\\cf0 ", 5uLL, 1uLL, a1);
                  }
                }

                continue;
              }

              if (v13 != 10) {
                fputc(v13, a1);
              }
              else {
LABEL_14:
              }
                fprintf(a1, "\\%c");
            }
          }
        }

        else
        {
          fputs(buffer, a1);
        }
      }

      CFRelease(v7);
    }

    else
    {
      uint64_t v9 = v7;
    }

    CFRelease(v9);
  }

size_t sub_1807814E8(FILE *__stream)
{
  return fwrite( "\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardir natural\n \n \\f0\\fs24 ",  0x71uLL,  1uLL,  __stream);
}

uint64_t sub_180781620(FILE *a1)
{
  return fflush(a1);
}

void sub_18078164C( FILE *a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_180781674( FILE *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10 = a4 & 4;
  if ((a4 & 4) != 0) {
    int v11 = 1;
  }
  else {
    int v11 = a4 & 2;
  }
  if ((a4 & 4) != 0) {
    int v12 = 1;
  }
  else {
    int v12 = a4 & 1;
  }
  if (!a2)
  {
    sub_18078164C(a1, a4 & 4, "NULL", a4, a5, a6, a7, a8, a9);
    return;
  }

  CFTypeID v16 = CFGetTypeID(a2);
  if (v16 == CFBooleanGetTypeID()) {
    goto LABEL_10;
  }
  CFTypeID v22 = CFGetTypeID(a2);
  if (v22 == CFNumberGetTypeID()) {
    goto LABEL_10;
  }
  CFTypeID v23 = CFGetTypeID(a2);
  if (v23 == CFStringGetTypeID())
  {
    sub_18078164C(a1, v10, "%@", v24, v25, v26, v27, v28, (char)a2);
    return;
  }

  CFTypeID v29 = CFGetTypeID(a2);
  if (v29 == CFDataGetTypeID())
  {
    CFIndex Length = CFDataGetLength((CFDataRef)a2);
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
    BytePtr = CFDataGetBytePtr((CFDataRef)a2);
    uint64_t v38 = BytePtr;
    if (Length < 25)
    {
      if (Length < 1) {
        goto LABEL_42;
      }
      int v96 = v12;
      uint64_t v66 = BytePtr;
      CFIndex v67 = Length;
      do
      {
        unsigned int v68 = *v66++;
        CFStringAppendFormat(Mutable, 0LL, @"%02x", v68);
        --v67;
      }

      while (v67);
    }

    else
    {
      int v96 = v12;
      unint64_t v39 = 0LL;
      do
      {
        CFStringAppendFormat( Mutable,  0LL,  @"%02x%02x%02x%02x",  v38[v39],  v38[v39 + 1],  v38[v39 + 2],  v38[v39 + 3]);
        BOOL v40 = v39 >= 0xC;
        v39 += 4LL;
      }

      while (!v40);
      CFStringAppend(Mutable, @" ... ");
      CFIndex v41 = Length - 8;
      do
      {
        CFStringAppendFormat( Mutable,  0LL,  @"%02x%02x%02x%02x",  v38[v41],  v38[v41 + 1],  v38[v41 + 2],  v38[v41 + 3]);
        v41 += 4LL;
      }

      while (v41 < Length);
    }

    int v12 = v96;
    if ((a4 & 8) != 0 && Length >= 32)
    {
      sub_18078164C(a1, v10, "{ x: %f, y: %f, width: %f, height: %f }", v33, v34, v35, v36, v37, *(_OWORD *)v38);
      goto LABEL_43;
    }

CFComparisonResult sub_180781BF4(uint64_t a1, CFTypeRef *a2, const __CFNumber **a3)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  CFTypeID v6 = CFGetTypeID(*a2);
  uint64_t v7 = (const __CFNumber *)*a2;
  uint64_t v8 = *a3;
  if (TypeID == v6) {
    return CFNumberCompare(v7, v8, 0LL);
  }
  else {
    return CFStringCompare((CFStringRef)v7, (CFStringRef)v8, 0LL);
  }
}

uint64_t sub_180781C54(uint64_t a1, unint64_t *a2)
{
  return sub_180781C5C(a1, a2, 0LL);
}

uint64_t sub_180781C5C(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3LL;
  }
  uint64_t v4 = *(_BYTE **)result;
  if (*(void *)result == -1LL) {
    goto LABEL_68;
  }
  uint64_t v5 = &v4[v3];
  CFTypeID v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    int v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1LL)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_69;
      }
      uint64_t v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15) {
            unint64_t v17 = *v12;
          }
          else {
            unint64_t v17 = v7 - 1;
          }
          BOOL v10 = v5 >= v14;
          unint64_t v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3) {
              return 0LL;
            }
LABEL_34:
            uint64_t result = 0LL;
            *a3 = v15;
            return result;
          }

LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }

        return 3LL;
      }

      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3LL;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3LL;
      }
      if (v14 >= v5 || v14 < v4) {
        goto LABEL_69;
      }
      if (!*v14) {
        return 3LL;
      }
      unint64_t v15 = 0LL;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1LL)
      {
        if (v14 >= v5) {
          goto LABEL_69;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_70;
        }
        unsigned int v24 = *v14++;
        unint64_t v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (a3) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v15 > v22;
          }
          char v26 = v25;
          uint64_t result = 3LL;
          if (v15 < 0x80 || (v26 & 1) != 0) {
            return result;
          }
          if (v15 >= v22) {
            unint64_t v27 = v22;
          }
          else {
            unint64_t v27 = v15;
          }
          BOOL v10 = (unint64_t)v5 >= v23;
          uint64_t v28 = &v5[-v23];
          a2[1] = v23;
          a2[2] = v27;
          if (a3) {
            goto LABEL_34;
          }
          return 0LL;
        }
      }
    }

LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }

  unsigned int v9 = *v6;
  BOOL v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3LL;
  }
  unint64_t v8 = 0LL;
  uint64_t result = 3LL;
  while (v7 >= 2)
  {
    unint64_t v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_69;
    }
    int v12 = (char *)(v6 + 1);
    --v7;
    unsigned __int8 v13 = *v6;
    unint64_t v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3LL;
      }
      goto LABEL_20;
    }
  }

  return result;
}

uint64_t sub_180781E4C(uint64_t result, unint64_t *a2, int a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3LL;
  }
  uint64_t v4 = *(_BYTE **)result;
  if (*(void *)result == -1LL) {
    goto LABEL_54;
  }
  uint64_t v5 = &v4[v3];
  CFTypeID v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    int v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1LL)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_55;
      }
      uint64_t v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        BOOL v17 = v16 < v15 && a3 == 0;
        unint64_t v18 = (unint64_t)(v12 + 1);
        if (v17) {
          return 3LL;
        }
LABEL_28:
        if (v15 > (~v18 & 0x7FFFFFFFFFFFFFFFLL)) {
          return 7LL;
        }
        if (v18 <= v18 + v15)
        {
          uint64_t result = 0LL;
          a2[1] = v18;
          a2[2] = v15;
          return result;
        }

        goto LABEL_55;
      }

      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3LL;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3LL;
      }
      if (v14 >= v5 || v14 < v4)
      {
LABEL_55:
        __break(0x5519u);
LABEL_56:
        __break(0x5515u);
        return result;
      }

      if (!*v14) {
        return 3LL;
      }
      unint64_t v15 = 0LL;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v18 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1LL)
      {
        if (v14 >= v5) {
          goto LABEL_55;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_56;
        }
        unsigned int v23 = *v14++;
        unint64_t v15 = (v15 << 8) | v23;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (v15 <= v22) {
            char v24 = 1;
          }
          else {
            char v24 = a3;
          }
          uint64_t result = 3LL;
          if (v15 >= 0x80 && (v24 & 1) != 0) {
            goto LABEL_28;
          }
          return result;
        }
      }
    }

LABEL_54:
    __break(0x5513u);
    goto LABEL_55;
  }

  unsigned int v9 = *v6;
  BOOL v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3LL;
  }
  unint64_t v8 = 0LL;
  uint64_t result = 3LL;
  while (v7 >= 2)
  {
    unint64_t v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_55;
    }
    int v12 = (char *)(v6 + 1);
    --v7;
    unsigned __int8 v13 = *v6;
    unint64_t v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3LL;
      }
      goto LABEL_20;
    }
  }

  return result;
}

uint64_t sub_18078200C(uint64_t result, unint64_t *a2, _BYTE *a3)
{
  *a3 = 0;
  *a2 = 0LL;
  a2[1] = 0LL;
  if (!*(void *)(result + 8)) {
    return 3LL;
  }
  unsigned int v3 = **(unsigned __int8 **)result;
  *a3 = v3;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != 1)
  {
    if (v3 <= 7)
    {
      unint64_t v5 = v4 - 1;
      if (!v4)
      {
LABEL_20:
        __break(0x5515u);
        goto LABEL_21;
      }

      unint64_t v6 = *(void *)result;
      unint64_t v7 = *(void *)result + v4;
      unint64_t v8 = (unsigned __int8 *)(*(void *)result + v5);
      if ((unint64_t)v8 >= v7 || (unint64_t)v8 < v6)
      {
LABEL_19:
        __break(0x5519u);
        goto LABEL_20;
      }

      if (((0xFFu >> (8 - v3)) & *v8) == 0)
      {
        if (v6 == -1LL)
        {
LABEL_21:
          __break(0x5513u);
          return result;
        }

        unint64_t v10 = v6 + 1;
        if (v6 + 1 <= v7 && v6 <= v10)
        {
          uint64_t result = 0LL;
          *a2 = v10;
          a2[1] = v5;
          return result;
        }

        goto LABEL_19;
      }
    }

    return 3LL;
  }

  if (v3) {
    return 3LL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1807820CC(unsigned __int8 **a1, BOOL *a2)
{
  int v2 = **a1;
  if (v2 != 255 && v2 != 0) {
    return 3LL;
  }
  uint64_t result = 0LL;
  *a2 = v2 != 0;
  return result;
}

uint64_t sub_180782108(unsigned __int8 **a1, BOOL a2, BOOL *a3)
{
  unsigned int v3 = a1[1];
  if (!v3) {
    goto LABEL_9;
  }
  if (v3 == (unsigned __int8 *)1)
  {
    int v4 = **a1;
    if (v4 == 255 || v4 == 0)
    {
      a2 = v4 != 0;
LABEL_9:
      uint64_t result = 0LL;
      *a3 = a2;
      return result;
    }
  }

  return 3LL;
}

uint64_t sub_180782148(char **a1, _DWORD *a2)
{
  v4[1] = *MEMORY[0x1895F89C0];
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = sub_1807821C8(a1, v4);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v4[0]))
    {
      return 7LL;
    }

    else
    {
      uint64_t result = 0LL;
      *a2 = v4[0];
    }
  }

  return result;
}

uint64_t sub_1807821C8(char **a1, unint64_t *a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  if (!v2) {
    return 3LL;
  }
  unsigned int v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0) {
    return 3LL;
  }
  if (**a1)
  {
    if (v2 > 8) {
      return 7LL;
    }
    goto LABEL_10;
  }

  if (v2 >= 2)
  {
    if (v2 > 9) {
      return 7LL;
    }
  }

uint64_t sub_180782230(uint64_t a1, void *a2, void *a3)
{
  v8[3] = *MEMORY[0x1895F89C0];
  memset(v8, 170, 24);
  uint64_t result = sub_180781C5C(a1, v8, 0LL);
  if (!(_DWORD)result)
  {
    unint64_t v6 = v8[0];
    *a2 = v8[0];
    if (v6 >> 1 == 0x1000000000000008LL)
    {
      if (__CFADD__(v8[1], v8[2]))
      {
        __break(0x5513u);
      }

      else
      {
        unint64_t v7 = v8[1] + v8[2];
        if (v8[1] <= v8[1] + v8[2])
        {
          uint64_t result = 0LL;
          *a3 = v8[1];
          a3[1] = v7;
          return result;
        }
      }

      __break(0x5519u);
    }

    else
    {
      return 2LL;
    }
  }

  return result;
}

unint64_t *sub_1807822E8(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = result[1];
  if (__CFADD__(*result, v3))
  {
    __break(0x5513u);
  }

  else
  {
    unint64_t v4 = v2 + v3;
    if (v2 <= v4)
    {
      *a2 = v2;
      a2[1] = v4;
      return 0LL;
    }
  }

  __break(0x5519u);
  return result;
}

uint64_t sub_180782314(unint64_t *a1, unint64_t *a2)
{
  v10[2] = *MEMORY[0x1895F89C0];
  v10[0] = 0LL;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 >= v3) {
    return 1LL;
  }
  v10[0] = *a1;
  v10[1] = v3 - v2;
  uint64_t result = sub_180781C5C((uint64_t)v10, a2, 0LL);
  if (!(_DWORD)result)
  {
    unint64_t v8 = a2[1];
    unint64_t v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      unint64_t v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        uint64_t result = 0LL;
        *a1 = v9;
        return result;
      }

      __break(0x5519u);
    }

    __break(0x5513u);
  }

  return result;
}

uint64_t sub_1807823D0( uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  unint64_t v12[3] = *MEMORY[0x1895F89C0];
  memset(v12, 170, 24);
  uint64_t result = sub_180781C5C(a1, v12, 0LL);
  if (!(_DWORD)result)
  {
    if (v12[0] == 0x2000000000000010LL) {
      return sub_180782498(&v12[1], a2, a3, a4, a5, a6);
    }
    else {
      return 2LL;
    }
  }

  return result;
}

uint64_t sub_180782498( unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  unint64_t v32 = 0LL;
  if (a6)
  {
    if (a6 > a5) {
      goto LABEL_59;
    }
    bzero((void *)a4, a6);
  }

  unint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (__CFADD__(*a1, v11)) {
    goto LABEL_58;
  }
  unint64_t v12 = v10 + v11;
  if (v10 > v12) {
LABEL_59:
  }
    __break(0x5519u);
  unint64_t v32 = *a1;
  unint64_t v33 = v12;
  if (a2)
  {
    unsigned __int16 v13 = 0;
    CFTypeID v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      unint64_t v15 = v32;
      unint64_t v14 = v33;
      uint64_t result = sub_180782314(&v32, v31);
      if ((_DWORD)result) {
        break;
      }
      if (a2 <= v13) {
        return 2LL;
      }
      while (1)
      {
        unsigned __int16 v17 = v13;
        __int16 v18 = *(_WORD *)(a3 + 24LL * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(void *)(a3 + 24LL * v13 + 8)) {
          break;
        }
        uint64_t result = 2LL;
        if ((v18 & 1) != 0)
        {
          ++v13;
        }

        return result;
      }

      if ((v18 & 4) == 0)
      {
        unint64_t v19 = *(void *)(a3 + 24LL * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5) {
          return 7LL;
        }
        if (v19 > ~a4) {
          goto LABEL_58;
        }
        uint64_t v21 = (char *)(a4 + v19);
        *(_OWORD *)uint64_t v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((void *)v21 + 1) <= v14 - v15)
            {
              *(void *)uint64_t v21 = v15;
              return 3LL;
            }

            goto LABEL_59;
          }

          if (v21 + 16 > v29) {
            goto LABEL_59;
          }
          uint64_t v23 = *((void *)v21 + 1);
          unint64_t v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }

          if (v14 < v15 || v24 > v14 - v15) {
            goto LABEL_59;
          }
          *(void *)uint64_t v21 = v15;
          *((void *)v21 + 1) = v24;
        }
      }

      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          unint64_t v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            unint64_t v10 = v31[1] + v31[2];
            unint64_t v12 = *a1 + v28;
            goto LABEL_47;
          }
        }

LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }

      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        unint64_t v10 = v32;
        unint64_t v12 = v33;
        goto LABEL_47;
      }
    }

    if ((_DWORD)result == 1)
    {
      if (a2 <= v13)
      {
        return 0LL;
      }

      else
      {
        BOOL v25 = (__int16 *)(a3 + 24LL * v13 + 16);
        unint64_t v26 = a2 - (unint64_t)v13;
        uint64_t result = 0LL;
        while (1)
        {
          __int16 v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0) {
            break;
          }
          if (!--v26) {
            return result;
          }
        }

        return 5LL;
      }
    }
  }

  else
  {
LABEL_47:
    if (v10 == v12) {
      return 0LL;
    }
    else {
      return 3LL;
    }
  }

  return result;
}

uint64_t sub_180782768(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4) {
    return sub_1807823D0(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  }
  __break(0x5519u);
  return result;
}

BOOL sub_180782788(uint64_t a1, uint64_t a2)
{
  BOOL result = 0LL;
  if (a1 && a2)
  {
    size_t v4 = *(void *)(a1 + 8);
    return v4 == *(void *)(a2 + 8) && memcmp(*(const void **)a1, *(const void **)a2, v4) == 0;
  }

  return result;
}

uint64_t sub_1807827D4(unsigned int *a1)
{
  return bswap32(*a1);
}

void *sub_1807827E0(void *result)
{
  off_18C5341D8 = result;
  return result;
}

uint64_t sub_1807827EC(char *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 6LL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a5)
        {
          unint64_t v10 = *(void **)(a5 + 32);
          if (v10)
          {
            if (*v10 == a4)
            {
              if (sub_180782788(v10[1], (uint64_t)&off_1896FA1F0))
              {
              }

              else if (sub_180782788(*(void *)(*(void *)(a5 + 32) + 8LL), (uint64_t)&off_1896FA200))
              {
              }

              else
              {
              }

              return 3LL;
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_1807828DC( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  int v72 = 0;
  memset(v71, 170, sizeof(v71));
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v69 = v8;
  __int128 v70 = v8;
  __int128 v67 = v8;
  __int128 v68 = v8;
  __int128 v65 = v8;
  __int128 v66 = v8;
  __int128 v63 = v8;
  __int128 v64 = v8;
  __int128 v61 = v8;
  __int128 v62 = v8;
  __int128 v59 = v8;
  __int128 v60 = v8;
  __int128 v57 = v8;
  __int128 v58 = v8;
  __int128 v55 = v8;
  __int128 v56 = v8;
  __int128 v53 = v8;
  __int128 v54 = v8;
  v51[18] = v8;
  __int128 v52 = v8;
  v51[16] = v8;
  v51[17] = v8;
  v51[14] = v8;
  v51[15] = v8;
  v51[12] = v8;
  v51[13] = v8;
  v51[10] = v8;
  v51[11] = v8;
  v51[8] = v8;
  v51[9] = v8;
  v51[6] = v8;
  v51[7] = v8;
  v51[4] = v8;
  v51[5] = v8;
  v51[2] = v8;
  v51[3] = v8;
  v51[0] = v8;
  v51[1] = v8;
  uint64_t v50 = v51;
  if (a8)
  {
    if (a1 && a2)
    {
      if (a5 && a6)
      {
        if (!(_DWORD)a2)
        {
          uint64_t v19 = 3LL;
          sub_180784620(3LL, "%s: _AMFDRDecodeIterateCertChainBegin failed", "_AMFDRDecodeVerifyChain");
          uint64_t v21 = *(void *)a8 | 1LL;
          goto LABEL_56;
        }

        v71[1] = a2;
        v71[2] = 0LL;
        v71[0] = a1;
        sub_180785FE4((uint64_t)v71, *(void *)(a8 + 2016), &v50, &v72);
        uint64_t v15 = v14;
        if (v14 || !v50)
        {
          uint64_t v19 = 3LL;
          sub_180784620(3LL, "%s: _AMFDRDecodeIterateCertChainNext failed (first call)", "_AMFDRDecodeVerifyChain");
          uint64_t v21 = *(void *)a8 | v15;
LABEL_56:
          *(void *)a8 = v21;
          return v19;
        }

        if (*(void *)(a8 + 1944) && *(void *)(a8 + 1952))
        {
          if ((*(_BYTE *)(a8 + 2017) & 1) != 0)
          {
            memset(v49, 0, sizeof(v49));
            __int128 v48 = 0u;
            uint64_t v22 = sub_180784814(a8 + 1768);
            if (v22 == 0x40000000000000LL)
            {
              sub_180784620(4LL, "%s: trustobject does not contain trusted key", "_AMFDRDecodeVerifyChain");
            }

            else if (v22)
            {
              *(void *)a8 |= v22;
              sub_180784620(3LL, "%s: failed to begin decoding trusted key");
              return 3LL;
            }

            int v23 = 0;
LABEL_26:
            while (1)
            {
              unint64_t v73 = 0LL;
              uint64_t v74 = 0LL;
              uint64_t v75 = 0LL;
              int v24 = sub_180782314((unint64_t *)(a8 + 1896), &v73);
              if (v24) {
                break;
              }
              uint64_t v25 = v74;
              unsigned int v26 = v75;
              if (v74) {
                BOOL v27 = (_DWORD)v75 == 0;
              }
              else {
                BOOL v27 = 1;
              }
              if (v27) {
                goto LABEL_40;
              }
              sub_180784620(7LL, "%s: PKI: verify cert was issued by trusted key %d", "_AMFDRDecodeVerifyChain", v23);
              uint64_t v28 = sub_180785688((uint64_t)&v48, v25, v26);
              if (v28)
              {
                sub_180784620(7LL, "%s: PKI: decoding trusted key %d failed with error 0x%016llX");
                goto LABEL_72;
              }

              while (!sub_180782788((uint64_t)(v50 + 1), (*(void **)((char *)&off_18C533F30 + v28))[3])
                   || !sub_180782788((uint64_t)v49, (*(void **)((char *)&off_18C533F30 + v28))[2]))
              {
                v28 += 8LL;
                if (v28 == 24)
                {
                  ++v23;
                  goto LABEL_26;
                }
              }

              __int128 v69 = 0u;
              __int128 v70 = 0u;
              __int128 v68 = 0u;
              __int128 v63 = 0u;
              __int128 v64 = 0u;
              __int128 v61 = 0u;
              __int128 v62 = 0u;
              __int128 v59 = 0u;
              __int128 v60 = 0u;
              __int128 v57 = 0u;
              __int128 v58 = 0u;
              __int128 v55 = 0u;
              __int128 v56 = 0u;
              __int128 v53 = 0u;
              __int128 v54 = 0u;
              __int128 v52 = 0u;
              __int128 v65 = v48;
              __int128 v66 = xmmword_1896FA1C0;
              __int128 v67 = v49[0];
              uint64_t v29 = sub_1807862A0((uint64_t)v50, (uint64_t)&v52, a8 + 1768, *(void *)(a8 + 2016), (void *)a8);
              if (v29 != 0x20000000000LL)
              {
                if (!v29)
                {
                  sub_180784620( 7LL,  "%s: PKI: verify cert was issued by trusted key %d (success)",  "_AMFDRDecodeVerifyChain",  v23);
                  goto LABEL_53;
                }

                goto LABEL_74;
              }
            }

            if (v24 == 1)
            {
LABEL_40:
              sub_180784620(7LL, "%s: end of trusted key sequence found root_key=%d", "_AMFDRDecodeVerifyChain", v23);
              *(void *)a8 |= 0x100uLL;
              goto LABEL_53;
            }

            uint64_t v29 = 0x400000LL;
LABEL_74:
            *(void *)a8 |= v29;
            sub_180784620(7LL, "%s: PKI: verify cert was issued by trusted key %d failed with error 0x%016llX");
            return 3LL;
          }

          uint64_t v16 = sub_1807846EC(a8 + 1768);
          if (v16)
          {
            uint64_t v17 = v16;
            __int16 v18 = "%s: AMFDRDecodeIterateTrustObjectTrustedBegin failed";
LABEL_55:
            uint64_t v19 = 3LL;
            sub_180784620(3LL, v18, "_AMFDRDecodeVerifyChain");
            uint64_t v21 = *(void *)a8 | v17;
            goto LABEL_56;
          }

          uint64_t v30 = a4;
          for (int i = 0; ; ++i)
          {
            __int128 v48 = 0uLL;
            *(void *)&v49[0] = 0LL;
            int v32 = sub_180782314((unint64_t *)(a8 + 1832), (unint64_t *)&v48);
            if (v32) {
              break;
            }
            uint64_t v33 = *((void *)&v48 + 1);
            unsigned int v34 = v49[0];
            if (*((void *)&v48 + 1)) {
              BOOL v35 = LODWORD(v49[0]) == 0;
            }
            else {
              BOOL v35 = 1;
            }
            if (v35) {
              goto LABEL_51;
            }
            sub_180784620(7LL, "%s: PKI: verify cert was issued by trusted root %d", "_AMFDRDecodeVerifyChain", i);
            uint64_t v36 = sub_180785878((unint64_t)&v52, v33, v34);
            if (v36)
            {
              uint64_t v28 = v36;
              sub_180784620(7LL, "%s: PKI: decoding trusted root %d failed with error 0x%016llX");
              goto LABEL_72;
            }

            uint64_t v37 = sub_1807862A0((uint64_t)v50, (uint64_t)&v52, a8 + 1768, 0, 0LL);
            if (v37 != 0x20000000000LL)
            {
              uint64_t v28 = v37;
              if (!v37)
              {
                sub_180784620( 7LL,  "%s: PKI: verify cert was issued by trusted root %d (success)",  "_AMFDRDecodeVerifyChain",  i);
                goto LABEL_52;
              }

              sub_180784620(7LL, "%s: PKI: verify cert was issued by trusted root %d failed with error 0x%016llX");
LABEL_72:
              uint64_t v46 = *(void *)a8 | v28;
              goto LABEL_64;
            }
          }

          if (v32 == 1)
          {
LABEL_51:
            sub_180784620(7LL, "%s: end of trusted root sequence found root_cert=%d", "_AMFDRDecodeVerifyChain", i);
            *(void *)a8 |= 0x100uLL;
LABEL_52:
            a4 = v30;
            goto LABEL_53;
          }

          sub_180784620(7LL, "%s: AMFDRDecodeIterateTrustObjectTrustedNext failed", "_AMFDRDecodeVerifyChain");
          uint64_t v46 = *(void *)a8 | 0x400000LL;
        }

        else
        {
          sub_180784620(4LL, "%s: Skipping trust root check (trustobject unset)", "_AMFDRDecodeVerifyChain");
          *(void *)a8 |= 0x200100uLL;
LABEL_53:
          uint64_t v38 = v50;
          uint64_t v50 = &v52;
          sub_180785FE4((uint64_t)v71, *(void *)(a8 + 2016), &v50, &v72);
          if (v39)
          {
            uint64_t v17 = v39;
            __int16 v18 = "%s: _AMFDRDecodeIterateCertChainNext failed (second call)";
            goto LABEL_55;
          }

          uint64_t v47 = a4;
          int v40 = 1;
          while (1)
          {
            if (!v50)
            {
              *a3 = *((void *)v38 + 26);
              *uint64_t v47 = *((void *)v38 + 27);
              *a5 = *((void *)v38 + 36);
              *a6 = *((void *)v38 + 37);
              __int128 v45 = v38[15];
              *(_OWORD *)(a8 + 312) = v38[14];
              *(_OWORD *)(a8 + 328) = v45;
              sub_180784620(7LL, "%s: PKI: check payload hash with signature (success)", "_AMFDRDecodeVerifyChain");
              return 0LL;
            }

            sub_180784620(7LL, "%s: PKI: verify cert %d was issued by cert %d", "_AMFDRDecodeVerifyChain", v40, v40 - 1);
            uint64_t v41 = sub_1807862A0((uint64_t)v50, (uint64_t)v38, a8 + 1768, *(void *)(a8 + 2016), (void *)a8);
            if (v41) {
              break;
            }
            sub_180784620( 7LL,  "%s: PKI: verify cert %d was issued by %d (success)",  "_AMFDRDecodeVerifyChain",  v40,  v40 - 1);
            ++v40;
            CFTypeID v42 = v50;
            uint64_t v50 = v38;
            sub_180785FE4((uint64_t)v71, *(void *)(a8 + 2016), &v50, &v72);
            uint64_t v38 = v42;
            if (v43)
            {
              uint64_t v44 = v43;
              uint64_t v19 = 3LL;
              sub_180784620(3LL, "%s: _AMFDRDecodeIterateCertChainNext failed (%d)", "_AMFDRDecodeVerifyChain", v40);
              uint64_t v21 = *(void *)a8 | v44;
              goto LABEL_56;
            }
          }

          sub_180784620( 7LL,  "%s: PKI: verify cert %d was issued by cert %d failed with error 0x%016llX",  "_AMFDRDecodeVerifyChain",  v40,  v40 - 1,  v41);
          uint64_t v46 = *(void *)a8 | 0x40000000000LL;
        }

LABEL_64:
        *(void *)a8 = v46;
        return 3LL;
      }

      sub_180784620(3LL, "%s: outImg4Blob must be non NULL and outImg4BlobLength must be non 0");
    }

    else
    {
      sub_180784620(3LL, "%s: chain_blob must be non NULL and chain_blob_length must be non 0");
    }

    *(void *)a8 |= 1uLL;
  }

  else
  {
    sub_180784620(3LL, "%s: context must be non NULL", "_AMFDRDecodeVerifyChain");
  }

  return 6LL;
}

uint64_t sub_180783078( const void *a1, size_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !a2)
  {
    sub_180784620(3LL, "%s: publicKey must be non NULL and publicKeyLength must be non 0");
    goto LABEL_19;
  }

  if (!a3 || !a4)
  {
    sub_180784620(3LL, "%s: signature must be non NULL and publicKeyLsignatureLengthength must be non 0");
    goto LABEL_19;
  }

  if (!a5 || !a6)
  {
    sub_180784620(3LL, "%s: digest must be non NULL and digestLength must be non 0");
    goto LABEL_19;
  }

  if (!a7 || !*(void *)(a7 + 40))
  {
    sub_180784620(3LL, "%s: implementation must be non NULL and signatureOid must be non NULL");
    goto LABEL_19;
  }

  if (**(void **)(a7 + 32) != a6)
  {
    sub_180784620(3LL, "%s: digestLength is %zu, expecting %zu");
    goto LABEL_19;
  }

  if (!sub_180782788(a8 + 312, (uint64_t)&xmmword_1896FA1C0))
  {
    if (sub_180782788(*(void *)(a7 + 40), (uint64_t)&off_1896FA190))
    {
      uint64_t result = sub_18078C5AC((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
    }

    else if (sub_180782788(*(void *)(a7 + 40), (uint64_t)&off_1896FA1A0))
    {
      uint64_t result = sub_18078C7F4((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
    }

    else
    {
      if (!sub_180782788(*(void *)(a7 + 40), (uint64_t)&off_1896FA1B0))
      {
        uint64_t result = 4LL;
LABEL_20:
        if (!a8) {
          return result;
        }
        goto LABEL_21;
      }

      uint64_t result = sub_18078C894((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
    }

    if ((_DWORD)result == 2)
    {
      *(void *)a8 |= 0x80000000000000uLL;
      uint64_t result = 3LL;
LABEL_21:
      *(void *)a8 |= 0x1000000000000uLL;
      return result;
    }

    goto LABEL_47;
  }

  if ((uint64_t (**)())a7 != off_1896FA338 && (uint64_t (**)())a7 != off_1896FA370)
  {
    sub_180784620(3LL, "%s: Expecting kAMFDRDecodeImplementationSha384 or kAMFDRDecodeImplementationOffline");
LABEL_19:
    uint64_t result = 6LL;
    goto LABEL_20;
  }

  __int128 v20 = xmmword_1896FA220;
  if ((*(_BYTE *)(a8 + 2017) & 1) == 0)
  {
    if (!sub_18078C510(*(char **)(a8 + 664), *(void *)(a8 + 672), a8 + 776))
    {
      unsigned int v17 = 32;
      goto LABEL_44;
    }

LABEL_44:
  uint64_t result = sub_18078825C(a1, a2, v20, *((uint64_t *)&v20 + 1), a3, a4, (unsigned __int8 *)(a8 + 776), v17);
  if ((_DWORD)result == 2)
  {
    *(void *)a8 |= 0x80000000000000uLL;
    goto LABEL_46;
  }

uint64_t sub_1807833F4(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v25 = v3;
  __int128 v26 = v3;
  __int128 v23 = v3;
  __int128 v24 = v3;
  memset(v21, 170, sizeof(v21));
  uint64_t v4 = 6LL;
  v22[0] = v3;
  v22[1] = v3;
  if (!a1 || !a2) {
    goto LABEL_46;
  }
  if (!*(void *)(a1 + 320) || (uint64_t v6 = a1 + 312, !*(void *)(a1 + 312)))
  {
    uint64_t v4 = 0LL;
    uint64_t v19 = 0x200000000000LL;
    goto LABEL_36;
  }

  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = sub_180782230(v6, &v29, &v30[2]);
  if ((_DWORD)v7)
  {
    uint64_t v4 = v7;
    sub_180784620(3LL, "%s: failed to init certificate sequence", "_AMFDRDecodeEvaluateCertificateProperties");
    goto LABEL_47;
  }

  if (v29 != 0x2000000000000011LL)
  {
    uint64_t v4 = 2LL;
    goto LABEL_47;
  }

  int v8 = 0;
  unint64_t v9 = (_OWORD *)(a1 + 72);
  unint64_t v10 = (_OWORD *)(a1 + 56);
LABEL_8:
  while (1)
  {
    int v11 = sub_180782314(&v30[2], v28);
    if (v11) {
      break;
    }
    ++v8;
    unint64_t v12 = v10;
    if (v28[0] == 0xE00000004D414E50LL) {
      goto LABEL_12;
    }
    if (v28[0] != 0xE00000004F424A50LL)
    {
LABEL_44:
      sub_180784620(3LL, "%s: unexpected tag 0x%llX in certificate properties");
LABEL_45:
      uint64_t v4 = 2LL;
LABEL_46:
      if (!a2) {
        return v4;
      }
      goto LABEL_47;
    }

    unint64_t v12 = v9;
    if ((*(_BYTE *)(a2 + 2016) & 0x80) == 0)
    {
LABEL_12:
      v21[0] = *v12;
      uint64_t v13 = sub_18078A30C(&v28[1], v28[0], (uint64_t)&v24);
      if ((_DWORD)v13)
      {
        uint64_t v4 = v13;
        sub_180784620(3LL, "%s: failed to parse certificate dictionary");
      }

      else
      {
        if (*((void *)&v26 + 1) != 0x2000000000000011LL) {
          goto LABEL_45;
        }
        uint64_t v14 = sub_1807822E8((unint64_t *)&v25 + 1, v30);
        if (!(_DWORD)v14)
        {
          int v15 = 0;
          while (1)
          {
            int v16 = sub_180782314(v30, v27);
            if (v16)
            {
              if (v16 == 1)
              {
                if (v15) {
                  goto LABEL_8;
                }
                sub_180784620(3LL, "%s: End of Inner Sequence found, before any valid DER.");
              }

              else
              {
                sub_180784620(3LL, "%s: Inner DER did not terminate properly.");
              }

uint64_t sub_180783864( uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8)
  {
    *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v24 = v11;
    __int128 v25 = v11;
    __int128 v22 = v11;
    __int128 v23 = v11;
    *(_OWORD *)__s1 = v11;
    __int128 v21 = v11;
    v19[11] = v11;
    v19[12] = v11;
    v19[9] = v11;
    v19[10] = v11;
    v19[7] = v11;
    v19[8] = v11;
    v19[5] = v11;
    v19[6] = v11;
    v19[3] = v11;
    v19[4] = v11;
    v19[1] = v11;
    v19[2] = v11;
    v19[0] = v11;
    v27[0] = a1;
    v27[1] = a2;
    if (sub_180781C54((uint64_t)v27, v26))
    {
      unint64_t v12 = "%s: malformed offline signing public key";
    }

    else
    {
      if (v26[0] != 2)
      {
        uint64_t v13 = 3LL;
        sub_180784620(3LL, "%s: malformed offline signing public key tag", "_AMFDRDecodeVerifyChainOffline");
        uint64_t v14 = *(void *)a8 | 0x40LL;
        goto LABEL_15;
      }

      if (!sub_180785878((unint64_t)v19, *(void *)(a8 + 296), *(_DWORD *)(a8 + 304)))
      {
        *(void *)a8 |= 0x100uLL;
        unint64_t v15 = v26[2];
        if ((void *)v26[2] == __s1[1])
        {
          unint64_t v16 = v26[1];
          if (!memcmp(__s1[0], (const void *)v26[1], v26[2]))
          {
            uint64_t v13 = 0LL;
            *a3 = v16;
            *a4 = v15;
            *(_OWORD *)(a8 + 312) = xmmword_1896FA1C0;
            return v13;
          }

          uint64_t v17 = "%s: offline signing public key mismatch";
        }

        else
        {
          uint64_t v17 = "%s: offline signing public key length mismatch";
        }

        uint64_t v13 = 3LL;
        sub_180784620(3LL, v17, "_AMFDRDecodeVerifyChainOffline");
        uint64_t v14 = *(void *)a8 | 0x20000000000000LL;
        goto LABEL_15;
      }

      unint64_t v12 = "%s: fail to decode certificate of offline signing";
    }

    uint64_t v13 = 3LL;
    sub_180784620(3LL, v12, "_AMFDRDecodeVerifyChainOffline");
    uint64_t v14 = *(void *)a8 | 0x40000000000LL;
LABEL_15:
    *(void *)a8 = v14;
    return v13;
  }

  sub_180784620(3LL, "%s: context must be non NULL", "_AMFDRDecodeVerifyChainOffline");
  return 6LL;
}

uint64_t sub_180783A4C()
{
  return 0LL;
}

uint64_t sub_180783A54(int a1, uint64_t *a2, int a3, uint64_t a4)
{
  unsigned int v40 = 0;
  uint64_t v39 = 0LL;
  if (!a4)
  {
    sub_180784620(3LL, "%s: fdrDecode is NULL", "_AMFDRDecodeVerifyDataCallback");
    return 6LL;
  }

  if (!a2)
  {
    sub_180784620(3LL, "%s: property is NULL", "_AMFDRDecodeVerifyDataCallback");
    *(void *)a4 |= 1uLL;
    return 6LL;
  }

  if (a1 <= 1634953571)
  {
    if (a1 > 1400000108)
    {
      if (a1 == 1400000109) {
        return 0LL;
      }
      if (a1 == 1400010324)
      {
        uint64_t v9 = sub_18078AC10(a2, 1400010324LL, &v39, &v40);
        if ((_DWORD)v9)
        {
          uint64_t v6 = v9;
          sub_180784620(3LL, "%s: Img4DecodeGetPropertyData(kFDRTag_SrvT) failed.");
          goto LABEL_36;
        }

        if (v40 != 1)
        {
          sub_180784620(3LL, "%s: Invalid property length of kFDRTag_SrvT", "_AMFDRDecodeVerifyDataCallback");
          uint64_t v6 = 0LL;
          uint64_t v10 = *(void *)a4 | 0x200LL;
          goto LABEL_100;
        }

        if (*(_BYTE *)v39 != 48 && (*(_BYTE *)(a4 + 2017) & 4) != 0)
        {
          uint64_t v6 = 3LL;
          sub_180784620(3LL, "%s: Staged sealing is not allowed", "_AMFDRDecodeVerifyDataCallback");
          uint64_t v10 = *(void *)a4 | 0x800000000000000LL;
          goto LABEL_100;
        }

        return 0LL;
      }

      goto LABEL_37;
    }

    if (a1 == 1145525076)
    {
      if ((*(_BYTE *)(a4 + 2017) & 0x10) == 0)
      {
        uint64_t v13 = sub_18078AC10(a2, 1145525076LL, &v39, &v40);
        if ((_DWORD)v13)
        {
          uint64_t v6 = v13;
          sub_180784620(3LL, "%s: Img4DecodeGetPropertyData(kImg4Tag_DGST) failed.");
        }

        else
        {
          if (*(_BYTE *)(a4 + 400))
          {
            if (**(void **)(*(void *)(a4 + 2008) + 32LL) == v40)
            {
              BOOL v27 = "%s: propertyValue != fdrDecode->sealingManifestImg4.payload.hash";
            }

            else
            {
              BOOL v27 = "%s: propertyLength != implementation->digestInfo->digestOutputSize";
            }
          }

          else
          {
            BOOL v27 = "%s: fdrDecode->sealingManifestImg4.payload_hashed is false";
          }

          uint64_t v6 = 3LL;
          sub_180784620(3LL, v27, "_AMFDRDecodeVerifyDataCallback");
        }

LABEL_99:
        uint64_t v10 = *(void *)a4 | 0x8000LL;
        goto LABEL_100;
      }

      uint64_t v17 = "%s: verifying subCC, skip comparing digest of the entire data";
    }

    else
    {
      if (a1 != 1396917319) {
        goto LABEL_37;
      }
      uint64_t v7 = sub_18078AC10(a2, 1396917319LL, &v39, &v40);
      if ((_DWORD)v7)
      {
        uint64_t v6 = v7;
        sub_180784620(3LL, "%s: Img4DecodeGetPropertyData(kFDRTag_SCDG) failed.");
        goto LABEL_99;
      }

      uint64_t v23 = v40;
      *(void *)(a4 + 360) = v39;
      *(void *)(a4 + 368) = v23;
      if ((*(_BYTE *)(a4 + 2017) & 0x10) != 0)
      {
        if (*(void *)(a4 + 128))
        {
          uint64_t v28 = *(unsigned int **)(a4 + 120);
          if (v28)
          {
            __s1 = 0LL;
            size_t __n = 0LL;
            int v29 = sub_1807827D4(v28);
            if (sub_180787338(*(void *)(a4 + 360), *(void *)(a4 + 368), v29, &__s1))
            {
              uint64_t v6 = 0LL;
              sub_180784620(3LL, "%s: failed to find subCC digest");
            }

            else if (*(_BYTE *)(a4 + 400))
            {
              if (__n == **(void **)(*(void *)(a4 + 2008) + 32LL))
              {
                if (!memcmp(__s1, (const void *)(a4 + 584), __n))
                {
                  sub_180784620(5LL, "%s: subCC digest verified", "_AMFDRDecodeVerifyDataCallback");
                  uint64_t v6 = 0LL;
                  *(_BYTE *)(a4 + 376) = 1;
                  return v6;
                }

                uint64_t v6 = 3LL;
                sub_180784620(3LL, "%s: subCC digest mismatch");
              }

              else
              {
                uint64_t v6 = 3LL;
                sub_180784620(3LL, "%s: subCC digest length mismatch");
              }
            }

            else
            {
              uint64_t v6 = 3LL;
              sub_180784620(3LL, "%s: subCC is not hashed");
            }

            uint64_t v10 = *(void *)a4 | 0x1000000000000000LL;
            goto LABEL_100;
          }
        }

        *(void *)a4 |= 0x1000000000000000uLL;
        uint64_t v17 = "%s: subCCName cannot be NULL when kAMFDRDecodeOptionSubCCOnly is set.";
        goto LABEL_103;
      }

      uint64_t v17 = "%s: not verifying subCC payload, skip checking subCC digest";
    }

    uint64_t v18 = 5LL;
    goto LABEL_51;
  }

  if (a1 <= 1717660002)
  {
    if (a1 == 1634953572)
    {
      uint64_t v14 = sub_18078AC10(a2, 1634953572LL, &v39, &v40);
      if ((_DWORD)v14)
      {
        uint64_t v6 = v14;
        sub_180784620(3LL, "%s: Img4DecodeGetPropertyData(kFDRTag_asid) failed.");
        goto LABEL_36;
      }

      size_t v24 = *(void *)(a4 + 224);
      if (v24)
      {
        if (v24 == v40)
        {
          __int128 v25 = *(const void **)(a4 + 216);
          if (v25 && !memcmp(v25, v39, v24)) {
            return 0LL;
          }
          __int128 v26 = "%s: kFDRTag_asid property != fdrDecode->assemblyID";
        }

        else
        {
          __int128 v26 = "%s: kFDRTag_asid property length != fdrDecode->assemblyID.length";
        }

        uint64_t v6 = 3LL;
        sub_180784620(3LL, v26, "_AMFDRDecodeVerifyDataCallback");
        uint64_t v10 = *(void *)a4 | 0x200000000000000LL;
        goto LABEL_100;
      }

      uint64_t v17 = "%s: Skip verifying assembly identifier";
      goto LABEL_42;
    }

    if (a1 == 1668047219)
    {
      if (sub_18078AC10(a2, 1668047219LL, &v39, &v40))
      {
        int v8 = "%s: Img4DecodeGetPropertyData(kFDRTag_clas) failed.";
      }

      else
      {
        if (v39 && v40) {
          return 0LL;
        }
        uint64_t v33 = v40;
        int v8 = "%s: propertyValue must be non NULL with a non-zero length (length=%u)";
      }

      uint64_t v6 = 3LL;
      sub_180784620(3LL, v8, "_AMFDRDecodeVerifyDataCallback", v33);
      uint64_t v10 = *(void *)a4 | 0x400LL;
      goto LABEL_100;
    }

uint64_t sub_18078429C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return *(void *)(a2 + 2024);
  }
  sub_180784620(3LL, "%s: fdrDecode is NULL", "_AMFDRDecodeGetExpectedManifestHash");
  return 0LL;
}

uint64_t sub_1807842E0( unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v21 = (unint64_t *)a5;
  unint64_t v22 = 0xAAAAAAAAAAAA0000LL;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  if (!a5)
  {
    sub_180784620(3LL, "%s: fdrDecode is NULL");
    return 6LL;
  }

  if (*(void *)(a5 + 104) && *(void *)(a5 + 112))
  {
    int v8 = 0;
    goto LABEL_7;
  }

  if ((*(_BYTE *)(a5 + 2017) & 0x20) == 0)
  {
    sub_180784620(3LL, "%s: data instance cannot be missing without kAMFDRDecodeOptionAllowNoDataInstance specified");
    return 6LL;
  }

  int v8 = 1;
LABEL_7:
  uint64_t v9 = sub_1807822E8(a1, &v19);
  if ((_DWORD)v9)
  {
    uint64_t v11 = (uint64_t)v9;
    uint64_t v17 = "%s: can't parse top-level container";
    goto LABEL_34;
  }

  while (1)
  {
    if ((_BYTE)v22) {
      goto LABEL_25;
    }
    sub_18078A508(&v19, a2, a3, a4);
    if ((_DWORD)v10 == 1)
    {
      if (BYTE1(v22)) {
        sub_180784620( 3LL,  "%s: failed to find matching inst object propery, returning a mismatched one",  "_AMFDRDecodePropertiesFilterCallback");
      }
      if ((_BYTE)v22)
      {
        if (!v8) {
          return 0LL;
        }
      }

      else
      {
        *v21 |= 0x4000uLL;
LABEL_25:
        if ((v8 & 1) == 0) {
          return 0LL;
        }
      }

      sub_180784620( 3LL,  "%s: uniqueID is not specified, which is allowed, skip uniqueID mismatch errors",  "_AMFDRDecodePropertiesFilterCallback");
      uint64_t v11 = 0LL;
      uint64_t v14 = v21;
      unint64_t v15 = *v21 & 0xFFFFFFFFFFFFBFFFLL;
      goto LABEL_27;
    }

    uint64_t v11 = v10;
    if ((_DWORD)v10) {
      break;
    }
    if (BYTE1(v22)) {
      char v12 = v8;
    }
    else {
      char v12 = 0;
    }
    if ((v12 & 1) != 0)
    {
      sub_180784620( 3LL,  "%s: multiple entries for tag 0x%llu found, but no unique ID specified",  "_AMFDRDecodePropertiesFilterCallback",  a2);
      if ((_BYTE)v22) {
        return 0LL;
      }
      uint64_t v11 = 0LL;
      uint64_t v14 = v21;
      unint64_t v15 = *v21 | 0x4000;
LABEL_27:
      *uint64_t v14 = v15;
      return v11;
    }

    uint64_t v13 = sub_18078AF10( (unint64_t *)(a4 + 24),  1LL,  (uint64_t (*)(unint64_t, uint64_t *, uint64_t, uint64_t))sub_180786FD4,  (uint64_t)&v21);
    if ((_DWORD)v13)
    {
      uint64_t v11 = v13;
      sub_180784620(5LL, "%s: failed to find corresponding data instance");
      return v11;
    }
  }

  uint64_t v18 = a2;
  uint64_t v17 = "%s: failed to find property tag 0x%llu";
LABEL_34:
  sub_180784620(3LL, v17, "_AMFDRDecodePropertiesFilterCallback", v18, v19, v20);
  return v11;
}

uint64_t sub_18078451C(unint64_t a1, uint64_t a2, unsigned int a3)
{
  v5[0] = a2;
  v5[1] = a3;
  if (sub_1807823D0((uint64_t)v5, 5u, (uint64_t)&unk_1807A31B0, a1, 0x90uLL, 0LL))
  {
    sub_180784620(3LL, "%s: malformed FDR Trust Object Format");
  }

  else if (*(void *)a1 && *(void *)(a1 + 8) == 4LL)
  {
    if (**(_DWORD **)a1 == *(_DWORD *)"secb") {
      return 0LL;
    }
    sub_180784620( 3LL,  "%s: malformed FDR Trust Object, expected tag %c%c%c%c found tag %c%c%c%c",  "AMFDRDecodeTrustObject",  aSecb[0],  aSecb[1]);
  }

  else
  {
    sub_180784620(3LL, "%s: malformed FDR Trust Object, invalid tag length");
  }

  return 0x400000LL;
}

uint64_t sub_180784620(uint64_t a1, char *__format, ...)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v19 = v3;
  __int128 v20 = v3;
  __int128 v17 = v3;
  __int128 v18 = v3;
  __int128 v15 = v3;
  __int128 v16 = v3;
  __int128 v13 = v3;
  __int128 v14 = v3;
  __int128 v11 = v3;
  __int128 v12 = v3;
  __int128 v9 = v3;
  __int128 v10 = v3;
  __int128 v7 = v3;
  __int128 v8 = v3;
  *(_OWORD *)__str = v3;
  __int128 v6 = v3;
  vsnprintf(__str, 0x100uLL, __format, va);
  if (off_18C5341D8) {
    return off_18C5341D8(a1, __str);
  }
  else {
    return sub_18078CE48("%s", __str);
  }
}

uint64_t sub_1807846EC(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  unint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  uint64_t v1 = (unint64_t *)(a1 + 64);
  uint64_t v5 = 0LL;
  if (sub_1807822E8((unint64_t *)(a1 + 16), (unint64_t *)(a1 + 64)))
  {
    sub_180784620(3LL, "%s: can't parse FDR Trust Object trusted sequence");
  }

  else if (sub_180782314(v1, &v3))
  {
    sub_180784620(3LL, "%s: can't parse FDR Trust Object trusted");
  }

  else if (v4 && v5 == 4)
  {
    if (*v4 == *(_DWORD *)"trst") {
      return 0LL;
    }
    sub_180784620( 3LL,  "%s: malformed FDR Trust Object trusted, expected tag %c%c%c%c found tag %c%c%c%c",  "AMFDRDecodeIterateTrustObjectTrustedBegin",  aTrst[0],  aTrst[1]);
  }

  else
  {
    sub_180784620(3LL, "%s: malformed FDR Trust Object trusted, invalid trusted tag length");
  }

  return 0x400000LL;
}

uint64_t sub_180784814(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  unint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v1 = (unint64_t *)(a1 + 128);
  uint64_t v6 = 0LL;
  if (sub_1807822E8((unint64_t *)(a1 + 112), (unint64_t *)(a1 + 128)))
  {
    sub_180784620(3LL, "%s: can't parse FDR Trust Object trusted key sequence");
  }

  else
  {
    int v3 = sub_180782314(v1, &v4);
    if (v3)
    {
      if (v3 == 1) {
        return 0x40000000000000LL;
      }
      sub_180784620(3LL, "%s: can't parse FDR Trust Object trusted key: %d");
    }

    else if (v5 && v6 == 4)
    {
      if (*v5 == *(_DWORD *)"trpk") {
        return 0LL;
      }
      sub_180784620( 3LL,  "%s: malformed FDR Trust Object trusted key, expected tag %c%c%c%c found tag %c%c%c%c",  "AMFDRDecodeIterateTrustObjectTrustedKeyBegin",  aTrpk[0],  aTrpk[1]);
    }

    else
    {
      sub_180784620(3LL, "%s: malformed FDR Trust Object trusted key, invalid trusted key tag length");
    }
  }

  return 0x400000LL;
}

uint64_t sub_18078494C(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  unint64_t v3 = 0LL;
  unint64_t v4 = 0LL;
  uint64_t v1 = (unint64_t *)(a1 + 80);
  uint64_t v5 = 0LL;
  if (sub_1807822E8((unint64_t *)(a1 + 48), (unint64_t *)(a1 + 80)))
  {
    sub_180784620(3LL, "%s: can't parse FDR Trust Object Revoked sequence");
  }

  else if (sub_180782314(v1, &v3))
  {
    sub_180784620(3LL, "%s: can't parse FDR Trust Object Revoked");
  }

  else if (v4 && v5 == 4)
  {
    if (*v4 == *(_DWORD *)"rvok") {
      return 0LL;
    }
    sub_180784620( 3LL,  "%s: malformed FDR Trust Object Revoked, expected tag %c%c%c%c found tag %c%c%c%c",  "AMFDRDecodeIterateTrustObjectRevokedBegin",  aRvok[0],  aRvok[1]);
  }

  else
  {
    sub_180784620(3LL, "%s: malformed FDR Trust Object Revoked, invalid trusted tag length");
  }

  return 0x400000LL;
}

uint64_t sub_180784A74(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = 1LL;
  if (a1 && a2 && a3)
  {
    unint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    int v7 = sub_180782314((unint64_t *)(a1 + 80), &v10);
    if (v7)
    {
      if (v7 == 1)
      {
        int v8 = 0;
        uint64_t v9 = 0LL;
        goto LABEL_9;
      }
    }

    else
    {
      int v8 = v12;
      if (v12 == 32)
      {
        uint64_t v9 = v11;
LABEL_9:
        uint64_t result = 0LL;
        *a2 = v9;
        *a3 = v8;
        return result;
      }
    }

    return 0x400000LL;
  }

  return result;
}

uint64_t sub_180784B00(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 1LL;
  if (a1 && a2 && a3)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
    v6[0] = a2;
    v6[1] = a3;
    if (sub_180782230((uint64_t)v6, &v5, a1))
    {
      sub_180784620(3LL, "%s: can't parse FDR Producer ID sequence", "AMFDRDecodeIterateProducerIDBegin");
      return 0x80000000000LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_180784B78(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __n_4[0] = 0xAAAAAAAAAAAAAAAALL;
  __n_4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = 1LL;
  if (!a1 || !a2 || !a3) {
    return v3;
  }
  sub_180784620(7LL, "%s: AMFDRDecodeCheckProducerIDRevocation", "AMFDRDecodeCheckProducerIDRevocation");
  uint64_t v7 = sub_180784B00(__n_4, a2, a3);
  if (v7)
  {
    uint64_t v3 = v7;
    sub_180784620(3LL, "%s: AMFDRDecodeIterateProducerIDBegin failed with error 0x%016llX");
    return v3;
  }

  unint64_t v17 = 0LL;
  __int128 v18 = 0LL;
  uint64_t v19 = 0LL;
  int v8 = sub_180782314(__n_4, &v17);
  if (v8)
  {
    if (v8 != 1)
    {
      uint64_t v3 = 0x80000000000LL;
      sub_180784620(3LL, "%s: AMFDRDecodeIterateProducerIDNext(first) failed with error 0x%016llX");
      return v3;
    }

    return 0LL;
  }

  uint64_t v9 = v18;
  if (!v18) {
    return 0LL;
  }
  while (2)
  {
    unsigned int __n = 0;
    __s2 = 0LL;
    uint64_t v10 = sub_18078494C(a1);
    if (v10)
    {
      uint64_t v3 = v10;
      sub_180784620(3LL, "%s: AMFDRDecodeIterateTrustObjectRevokedBegin failed");
      return v3;
    }

    while (1)
    {
      uint64_t v11 = sub_180784A74(a1, &__s2, &__n);
      if (v11)
      {
        uint64_t v3 = v11;
        sub_180784620(3LL, "%s: AMFDRDecodeIterateTrustObjectRevokedNext failed");
        return v3;
      }

      if (!__s2) {
        break;
      }
      if (!memcmp(v9, __s2, __n))
      {
        sub_180784620(3LL, "%s: FDR Trust Object revoked certificate found", "AMFDRDecodeCheckProducerIDRevocation");
        return 0x10000000000LL;
      }
    }

    unint64_t v17 = 0LL;
    __int128 v18 = 0LL;
    uint64_t v19 = 0LL;
    int v12 = sub_180782314(__n_4, &v17);
    if (v12)
    {
      if (v12 != 1)
      {
        uint64_t v3 = 0x80000000000LL;
        sub_180784620(3LL, "%s: AMFDRDecodeIterateProducerIDNext(loop) failed with error 0x%016llX");
        return v3;
      }

      return 0LL;
    }

    uint64_t v3 = 0LL;
    uint64_t v9 = v18;
    if (v18) {
      continue;
    }
    break;
  }

  return v3;
}

uint64_t sub_180784D28(uint64_t a1)
{
  if (!*(void *)(a1 + 72) || !*(void *)(a1 + 80)) {
    *(void *)a1 |= 0x40000uLL;
  }
  if ((!*(void *)(a1 + 104) || !*(void *)(a1 + 112)) && (*(_BYTE *)(a1 + 2017) & 0x20) == 0)
  {
    sub_180784620(3LL, "%s: fdrDecode->uniqueID is NULL or 0 size", "AMFDRDecodeEvaluateTrustInternal");
    uint64_t result = *(void *)a1 | 1LL;
LABEL_12:
    *(void *)a1 = result;
    return result;
  }

  if (*(void *)(a1 + 8) && *(void *)(a1 + 16))
  {
    if (sub_18078526C(a1))
    {
      sub_180784620(4LL, "%s: data is unwrapped", "AMFDRDecodeEvaluateTrustInternal");
      uint64_t v3 = *(void *)a1;
      *(void *)(a1 + 1912) = *(void *)(a1 + 8);
      *(void *)(a1 + 1920) = *(void *)(a1 + 16);
      uint64_t result = v3 | 0x5A01C00;
      goto LABEL_12;
    }
  }

  else if (!*(void *)(a1 + 1944) || !*(void *)(a1 + 1952))
  {
    *(void *)a1 |= 0x200000uLL;
  }

  uint64_t v4 = sub_180786E2C(a1);
  if (v4) {
    *(void *)a1 |= v4;
  }
  uint64_t v5 = sub_1807874A8(a1);
  if (v5) {
    *(void *)a1 |= v5;
  }
  __int128 v25 = 0LL;
  int v24 = 0;
  if ((!*(void *)(a1 + 344) || !*(_DWORD *)(a1 + 352)) && (!*(void *)(a1 + 232) || !*(void *)(a1 + 240)))
  {
    sub_180784620(6LL, "%s: No need to verify subCC and asid");
    goto LABEL_56;
  }

  uint64_t v6 = sub_18078694C(*(void *)(a1 + 1912), *(_DWORD *)(a1 + 1920), &v25, &v24);
  uint64_t v7 = v25;
  if (!v25 || v6)
  {
    sub_180784620(3LL, "%s: FDR 3.0 Data can't be decoded!");
    goto LABEL_51;
  }

  char v8 = 0;
  while (1)
  {
    unsigned int v23 = 0;
    char __n_7 = 0;
    unsigned int __n = 0;
    __s2 = 0LL;
    uint64_t v9 = sub_180786C00((uint64_t)v7, &v23, &__n_7, &__s2, &__n, 0LL);
    if (v9)
    {
      if (v9 == 0x40000000000000LL)
      {
        if (*(void *)(a1 + 232) && !((*(void *)(a1 + 240) == 0LL) | v8 & 1)) {
          sub_180784620(4LL, "%s: kFDRTag_asid doesn't exist, but this is allowed");
        }
        goto LABEL_56;
      }

      sub_180784620(3LL, "%s: failed to decode payload: 0x%llx!");
LABEL_51:
      uint64_t v17 = *(void *)a1 | 0x400000000000000LL;
      goto LABEL_55;
    }

    int v10 = sub_1807827D4(&v23);
    if (v10 == 1634953572)
    {
      uint64_t v11 = *(const void **)(a1 + 232);
      if (v11)
      {
        size_t v12 = *(void *)(a1 + 240);
        if (v12)
        {
          if (v12 != __n)
          {
            sub_180784620(3LL, "%s: asid subCC length != fdrDecode->asidSubCCID.length", "_AMFDRDecodeVerifySubCC");
            *(void *)a1 |= 0x200000000000000uLL;
            uint64_t v11 = *(const void **)(a1 + 232);
            size_t v12 = __n;
          }

          if (memcmp(v11, __s2, v12))
          {
            sub_180784620(3LL, "%s: asid subCC data != fdrDecode->asidSubCCID", "_AMFDRDecodeVerifySubCC");
            *(void *)a1 |= 0x200000000000000uLL;
          }

          char v8 = 1;
        }
      }
    }

    if (*(void *)(a1 + 344))
    {
      unint64_t v13 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v13) {
        break;
      }
    }

unint64_t sub_1807850C8(__int16 a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 2) != 0 && (a2 & 0x2600000000100LL) != 0)
  {
    sub_180784620( 4LL,  "%s: ignoring unsealed error 0x%016llX",  "_AMFDRDecodeTolerateErrorsForOptions",  a2 & 0x2600000000100LL);
    v2 &= 0xFFFD9FFFFFFFFEFFLL;
  }

  if ((a1 & 4) != 0 && (v2 & 0x140000) != 0)
  {
    sub_180784620( 4LL,  "%s: ignoring trust object mismatch error 0x%016llX",  "_AMFDRDecodeTolerateErrorsForOptions",  v2 & 0x140000);
    v2 &= 0xFFFFFFFFFFEBFFFFLL;
  }

  if ((a1 & 8) != 0)
  {
    uint64_t v4 = 0x8005A33C80LL;
    if ((a1 & 1) == 0) {
      uint64_t v4 = 0x8005A03C00LL;
    }
    uint64_t v5 = v2 & v4;
    if ((v2 & v4) != 0)
    {
      sub_180784620(4LL, "%s: ignoring raw error 0x%016llX", "_AMFDRDecodeTolerateErrorsForOptions", v5);
      v2 ^= v5;
    }
  }

  if ((a1 & 0x10) != 0 && (v2 & 0x1040000300000LL) != 0)
  {
    sub_180784620( 4LL,  "%s: ignoring offline signing verification error 0x%016llX",  "_AMFDRDecodeTolerateErrorsForOptions",  v2 & 0x1040000300000LL);
    v2 &= 0xFFFEFBFFFFCFFFFFLL;
  }

  if ((a1 & 0x40) != 0 && (v2 & 0x2C0100) != 0)
  {
    sub_180784620( 4LL,  "%s: ignoring no trustobject error 0x%016llX",  "_AMFDRDecodeTolerateErrorsForOptions",  v2 & 0x2C0100);
    v2 &= 0xFFFFFFFFFFD3FEFFLL;
  }

  if ((a1 & 0x4000) != 0 && (v2 & 0x1000000000000000LL) != 0)
  {
    sub_180784620( 4LL,  "%s: ignoring incomplete subcc error 0x%016llX",  "_AMFDRDecodeTolerateErrorsForOptions",  v2 & 0x1000000000000000LL);
    return v2 & 0xEFFFFFFFFFFFFFFFLL;
  }

  return v2;
}

uint64_t sub_18078526C(uint64_t a1)
{
  __int128 v15 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  __int128 v14 = 0u;
  if (sub_180781C54(a1 + 8, v17))
  {
    sub_180784620(3LL, "%s: failed to decode FDR Combined Format", "_AMFDRDecodeCombined");
    *(void *)a1 |= 0x80uLL;
    return 128LL;
  }

  if (v17[0] != 0x2000000000000010LL)
  {
    sub_180784620(3LL, "%s: FDR Combined Format unexpected tag: %llu", "_AMFDRDecodeCombined", v17[0]);
    *(void *)a1 |= 0x10000uLL;
    return 0x10000LL;
  }

  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 8) + v3;
  if (v4 < v17[1] + v17[2])
  {
    sub_180784620(3LL, "%s: item is bigger on the inside", "_AMFDRDecodeCombined");
    *(void *)a1 |= 4uLL;
    return 4LL;
  }

  if (v4 > v17[1] + v17[2])
  {
    sub_180784620(3LL, "%s: Buffer contains %lu unused bytes", "_AMFDRDecodeCombined", v3 - v17[2]);
    *(void *)a1 |= 8uLL;
    return 8LL;
  }

  if (!(void)v14 || *((void *)&v14 + 1) != 4LL) {
    goto LABEL_29;
  }
  if (*(_DWORD *)v14 != *(_DWORD *)"comb")
  {
LABEL_30:
    *(void *)a1 |= 0x20000uLL;
    return 0x20000LL;
  }

  if (!(void)v15 || !*((void *)&v15 + 1))
  {
    *(void *)a1 |= 0x200uLL;
    uint64_t v2 = 512LL;
    goto LABEL_20;
  }

  __int128 v12 = 0u;
  __int128 v13 = 0u;
  if (sub_180782498( (unint64_t *)&v15,  2u,  (uint64_t)&unk_1807A3180,  (unint64_t)&v12,  0x20uLL,  0LL))
  {
    sub_180784620(3LL, "%s: malformed FDR Combined Format (DERFDRItemSpecs)");
    goto LABEL_30;
  }

  if (!(void)v12 || *((void *)&v12 + 1) != 4LL)
  {
LABEL_29:
    sub_180784620(3LL, "%s: malformed FDR Combined Format, invalid tag length");
    goto LABEL_30;
  }

  if (*(_DWORD *)v12 != *(_DWORD *)"fdrd")
  {
    sub_180784620( 3LL,  "%s: malformed FDR Combined Format, expected tag %c%c%c%c found tag %c%c%c%c",  "_AMFDRDecodeCombined",  aFdrd[0],  aFdrd[1]);
    goto LABEL_30;
  }

  uint64_t v9 = *((void *)&v13 + 1);
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + memset(v30, 170, 32) = v9;
  if ((*(_BYTE *)(a1 + 2017) & 8) != 0)
  {
    uint64_t v2 = sub_180787C84(a1);
    if (v2)
    {
      sub_180784620( 4LL,  "%s: cannot decode to a multicombined data, proceed with combined format",  "_AMFDRDecodeCombined");
      uint64_t v11 = *((void *)&v13 + 1);
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + memset(v30, 170, 32) = v11;
    }
  }

  else
  {
    uint64_t v2 = 0LL;
  }

uint64_t sub_180785688(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 1LL;
  if (a1 && a2 && a3)
  {
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + memset(v30, 170, 32) = 0u;
    __int128 v6 = 0uLL;
    unint64_t v5 = 0LL;
    *(void *)(a1 + memset(v30, 170, 32) = a2;
    *(void *)(a1 + 40) = a3;
    if (sub_18078578C(a1 + 32, (unint64_t *)a1, a1 + 48))
    {
      sub_180784620(3LL, "%s: failed to decode public key: %d");
    }

    else
    {
      if (!sub_180782788(a1 + 48, (uint64_t)&xmmword_1896FA1C0))
      {
        sub_180784620(3LL, "%s: public key OID is not EC", "AMFDRDecodePublicKey");
        return 64LL;
      }

      if (!sub_180781C54(a1 + 64, &v5))
      {
        uint64_t result = 0LL;
        *(_OWORD *)(a1 + 16) = v6;
        return result;
      }

      sub_180784620(3LL, "%s: failed to decode params");
    }

    return 16LL;
  }

  return result;
}

uint64_t sub_18078578C(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v8 = v5;
  __int128 v9 = v5;
  char v7 = -86;
  uint64_t result = sub_1807823D0(a1, 2u, (uint64_t)&unk_1807A2F68, (unint64_t)&v8, 0x20uLL, 0x20uLL);
  if (!(_DWORD)result)
  {
    uint64_t result = sub_180782498((unint64_t *)&v8, 2u, (uint64_t)&unk_1807A2F30, a3, 0x20uLL, 0x20uLL);
    if (!(_DWORD)result)
    {
      if (sub_180782788(a3, (uint64_t)&off_1896FA180) || sub_180782788(a3, (uint64_t)&xmmword_1896FA1C0))
      {
        uint64_t result = sub_18078200C((uint64_t)&v9, a2, &v7);
        if (!(_DWORD)result)
        {
          if (v7) {
            return 3LL;
          }
          else {
            return 0LL;
          }
        }
      }

      else
      {
        return 2LL;
      }
    }
  }

  return result;
}

uint64_t sub_180785878(unint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 1LL;
  if (a1 && a2 && a3)
  {
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + memset(v30, 170, 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(void *)(a1 + 256) = a2;
    *(void *)(a1 + 264) = a3;
    if (sub_1807823D0(a1 + 256, 3u, (uint64_t)&unk_1807A2D60, a1, 0x30uLL, 0x30uLL)
      || sub_1807823D0(a1, 0xAu, (uint64_t)&unk_1807A3438, a1 + 48, 0xA0uLL, 0xA0uLL)
      || sub_18078578C(a1 + 144, (unint64_t *)(a1 + 208), a1 + 224))
    {
      return 0x40000000000LL;
    }

    if (*(void *)(a1 + 248))
    {
      if (sub_180782788(a1 + 224, (uint64_t)&xmmword_1896FA1C0))
      {
        if (*(void *)(a1 + 248) != 10LL) {
          return 0x40000000000LL;
        }
        __int128 v5 = *(_BYTE **)(a1 + 240);
        if (*v5 != 6 || v5[1] != 8LL || memcmp(v5 + 2, &unk_1807A302A, 8uLL)) {
          return 0x40000000000LL;
        }
      }

      else if (sub_180782788(a1 + 224, (uint64_t)&off_1896FA180))
      {
        if (*(void *)(a1 + 248) != 2LL) {
          return 0x40000000000LL;
        }
        __int128 v6 = *(_BYTE **)(a1 + 240);
        if (*v6 != 5 || v6[1]) {
          return 0x40000000000LL;
        }
      }
    }

    unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
    if (sub_180785A9C(a1 + 48, (uint64_t)&off_1896FA3C0, &v7, (void *)(a1 + 272), 1))
    {
      sub_180784620(5LL, "%s: ClientID extension not found", "AMFDRDecodeCertificate");
    }

    else if (v7 != 12)
    {
      return 0x40000000000LL;
    }

    if (sub_180785A9C(a1 + 48, (uint64_t)&off_1896FA3D0, &v7, (void *)(a1 + 288), 0))
    {
      sub_180784620(5LL, "%s: Certificate Properties extension not found", "AMFDRDecodeCertificate");
      return 0LL;
    }

    if (v7 == 0x2000000000000011LL) {
      return 0LL;
    }
    return 0x40000000000LL;
  }

  return result;
}

uint64_t sub_180785A9C(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  v20[0] = 0xAAAAAAAAAAAAAAAALL;
  v20[1] = 0xAAAAAAAAAAAAAAAALL;
  memset(v18, 170, sizeof(v18));
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[1] = v5;
  __int128 v17 = v5;
  memset(v15, 170, sizeof(v15));
  uint64_t v6 = 1LL;
  v16[0] = v5;
  if (a1 && a2 && a4)
  {
    *a4 = 0LL;
    a4[1] = 0LL;
    if (*(void *)(a1 + 152) && (v10 = *(void *)(a1 + 144), uint64_t v9 = a1 + 144, v10))
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v6 = 16LL;
      if (!sub_180782230(v9, &v19, v20) && v19 == 0x2000000000000010LL)
      {
        uint64_t v6 = 2LL;
        while (!sub_180782314(v20, v18))
        {
          if (v18[0] != 0x2000000000000010LL
            || sub_180782498( &v18[1],  3u,  (uint64_t)&unk_1807A2EE0,  (unint64_t)v16,  0x30uLL,  0x30uLL))
          {
            return 16LL;
          }

          if (sub_180782788(a2, (uint64_t)v16))
          {
            uint64_t v6 = 0LL;
            *a3 = v15[0];
            if (a5) {
              __int128 v13 = &v15[1];
            }
            else {
              __int128 v13 = (unint64_t *)&v17;
            }
            *(_OWORD *)a4 = *(_OWORD *)v13;
            return v6;
          }
        }
      }
    }

    else
    {
      return 512LL;
    }
  }

  return v6;
}

double sub_180785C34(_OWORD *a1, uint64_t a2, unsigned int a3)
{
  if (a1 && a2 && a3)
  {
    a1[17] = 0u;
    a1[18] = 0u;
    a1[15] = 0u;
    a1[16] = 0u;
    a1[13] = 0u;
    a1[14] = 0u;
    a1[11] = 0u;
    a1[12] = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    memset(v22, 0, sizeof(v22));
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    v17[0] = 0LL;
    v17[1] = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v14 = 0LL;
    __int128 v15 = 0uLL;
    *(void *)&__int128 v25 = a2;
    *((void *)&v25 + 1) = a3;
    if (sub_1807823D0( (uint64_t)&v25,  4u,  (uint64_t)&unk_1807A33D8,  (unint64_t)v22,  0x40uLL,  0x40uLL))
    {
      sub_180784620(3LL, "%s: failed to parse im4c: %d");
    }

    else if (*(void *)&v22[0] && *((void *)&v22[0] + 1) == 4LL)
    {
      if (**(_DWORD **)&v22[0] == *(_DWORD *)"IM4C")
      {
        if (sub_180781C54((uint64_t)&v23, &v16))
        {
          sub_180784620(3LL, "%s: failed to parse signed section sequence: %d");
        }

        else if (v16 == 0x2000000000000011LL)
        {
          if (sub_180782498(v17, 2u, (uint64_t)&unk_1807A33A8, (unint64_t)&v20, 0x20uLL, 0x20uLL))
          {
            sub_180784620(3LL, "%s: failed to parse signed section of im4c: %d");
          }

          else if (sub_180781C54((uint64_t)&v21, &v14))
          {
            sub_180784620(3LL, "%s: failed to parse public key of im4c: %d");
          }

          else if (sub_1807823D0( (uint64_t)&v20,  2u,  (uint64_t)&unk_1807A3378,  (unint64_t)&v18,  0x20uLL,  0x20uLL))
          {
            sub_180784620(3LL, "%s: failed to parse cert properties: %d");
          }

          else if ((void)v18 && *((void *)&v18 + 1) == 4LL)
          {
            if (*(_DWORD *)v18 == *(_DWORD *)"CRTP")
            {
              uint64_t v4 = 0LL;
              __int128 v5 = 0LL;
              do
              {
                uint64_t v6 = 0LL;
                uint64_t v7 = (uint64_t)*(&off_18C533F30 + v4);
                while (*((void *)&v24 + 1) != *(_DWORD *)(v7 + 4) + (_DWORD)v6)
                {
                  if (++v6 == 3) {
                    goto LABEL_22;
                  }
                }

                __int128 v5 = *(_OWORD **)(v7 + 24);
LABEL_22:
                ++v4;
              }

              while (v4 != 3);
              if (v5)
              {
                uint64_t v8 = 0LL;
                while (1)
                {
                  uint64_t v9 = *(uint64_t *)((char *)&off_18C533F30 + v8);
                  if (*((void *)&v15 + 1) == *(_DWORD *)v9) {
                    break;
                  }
                  v8 += 8LL;
                  if (v8 == 24) {
                    goto LABEL_27;
                  }
                }

                uint64_t v11 = *(__int128 **)(v9 + 16);
                if (!v11)
                {
LABEL_27:
                  sub_180784620(3LL, "%s: unsupported public key length: %lu");
                  return result;
                }

                *a1 = v23;
                a1[2] = v24;
                a1[1] = *v5;
                a1[13] = v15;
                a1[14] = xmmword_1896FA1C0;
                __int128 v12 = *v11;
                a1[18] = v19;
                __int128 v13 = v25;
                a1[15] = v12;
                a1[16] = v13;
                double result = *(double *)&v15;
                a1[9] = v15;
              }

              else
              {
                sub_180784620(3LL, "%s: unsupported signature length: %lu");
              }
            }

            else
            {
              sub_180784620(3LL, "%s: malformed cert property key: %c%c%c%c");
            }
          }

          else
          {
            sub_180784620(3LL, "%s: malformed cert property key length: %lu");
          }
        }

        else
        {
          sub_180784620(3LL, "%s: unexpected signed section tag: 0x%llx");
        }
      }

      else
      {
        sub_180784620(3LL, "%s: malformed im4c tag: %c%c%c%c");
      }
    }

    else
    {
      sub_180784620(3LL, "%s: malformed im4c tag length: %lu");
    }
  }

  return result;
}

void sub_180785FE4(uint64_t a1, __int16 a2, _OWORD **a3, _DWORD *a4)
{
  unsigned int v15 = 0;
  if (a1 && a3 && *(void *)a1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      if (!sub_18078663C(*(void *)a1, v7, &v15))
      {
        unint64_t v9 = *(void *)(a1 + 8);
        if (v9 >= v15)
        {
          uint64_t v10 = *a3;
          uint64_t v11 = *(void *)a1;
          if ((a2 & 0x100) != 0) {
            sub_180785C34(v10, v11, v9);
          }
          else {
            uint64_t v12 = sub_180785878((unint64_t)v10, v11, v9);
          }
          if (!v12)
          {
            int v13 = *(unsigned __int16 *)(a1 + 16);
            *(_WORD *)(a1 + 16) = v13 + 1;
            *a4 = v13;
            uint64_t v14 = *(void *)(a1 + 8) - v15;
            *(void *)a1 += v15;
            *(void *)(a1 + 8) = v14;
          }
        }
      }
    }

    else
    {
      *a3 = 0LL;
    }
  }

uint64_t sub_1807860C0(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  unsigned int __n = 0;
  __s2 = 0LL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __s1[0] = v4;
  __s1[1] = v4;
  v18[0] = v4;
  v18[1] = v4;
  __n_4[0] = v4;
  __n_4[1] = v4;
  unsigned int v5 = sub_18078C510(*(char **)(a2 + 256), *(void *)(a2 + 264), (uint64_t)__s1);
  if (v5 || (unsigned int v5 = sub_18078C510(*(char **)(a2 + 144), *(void *)(a2 + 152), (uint64_t)v18)) != 0)
  {
LABEL_3:
    uint64_t v6 = v5;
    uint64_t v7 = "%s: AMSupportDigestSha256 failed";
LABEL_4:
    sub_180784620(3LL, v7, "AMFDRDecodeCheckCertRevocation");
    return v6;
  }

  unint64_t v9 = *(char **)(a2 + 272);
  if (v9 && (size_t v10 = *(void *)(a2 + 280)) != 0)
  {
    unsigned int v5 = sub_18078C510(v9, v10, (uint64_t)__n_4);
    if (v5) {
      goto LABEL_3;
    }
    int v11 = 1;
  }

  else
  {
    int v11 = 0;
  }

  uint64_t v12 = sub_18078494C(a1);
  if (v12)
  {
    uint64_t v6 = v12;
    sub_180784620(3LL, "%s: AMFDRDecodeIterateTrustObjectRevokedBegin failed");
  }

  else
  {
    uint64_t v13 = sub_180784A74(a1, &__s2, &__n);
    if (v13)
    {
      uint64_t v6 = v13;
      sub_180784620(3LL, "%s: AMFDRDecodeIterateTrustObjectRevokedNext failed");
    }

    else
    {
      uint64_t v7 = "%s: AMFDRDecodeIterateTrustObjectRevokedNext failed";
      while (1)
      {
        uint64_t v6 = (uint64_t)__s2;
        if (!__s2) {
          break;
        }
        size_t v14 = __n;
        if (!memcmp(__s1, __s2, __n))
        {
          uint64_t v6 = 0x10000000000LL;
          sub_180784620(3LL, "%s: FDR Trust Object revoked certificate found");
          return v6;
        }

        if (!memcmp(v18, (const void *)v6, v14))
        {
          uint64_t v6 = 0x10000000000LL;
          sub_180784620(3LL, "%s: FDR Trust Object revoked public key found");
          return v6;
        }

        if (v11 && !memcmp(__n_4, (const void *)v6, v14))
        {
          uint64_t v6 = 0x10000000000LL;
          sub_180784620(3LL, "%s: FDR Trust Object revoked client ID found");
          return v6;
        }

        uint64_t v6 = sub_180784A74(a1, &__s2, &__n);
        if (v6) {
          goto LABEL_4;
        }
      }
    }
  }

  return v6;
}

uint64_t sub_1807862A0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, void *a5)
{
  if (a3)
  {
    if ((a4 & 0x100) == 0) {
      return sub_1807863E0(a1, a2, a3, a5);
    }
    uint64_t v8 = *(void *)(a1 + 24);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9)
      {
        if (sub_180787F24( *(void *)(a2 + 208),  *(_DWORD *)(a2 + 216),  *(void *)(a1 + 32),  v9,  *(char **)a1,  *(_DWORD *)(a1 + 8),  *(void *)(a1 + 16),  v8,  a2 + 240,  1,  a5))
        {
          uint64_t v10 = 0x20000000000LL;
          sub_180784620(3LL, "%s: PKI: im4c cert signature validation with issuer pubkey failed");
        }

        else
        {
          sub_180784620( 7LL,  "%s: PKI: verify im4c cert was issued and signed by issuer (success)",  "_AMFDRDecodeVerifyImage4CertIssuer");
          uint64_t v10 = sub_1807860C0(a3, a1);
          if (v10) {
            sub_180784620(3LL, "%s: im4c revocation check failed");
          }
        }
      }

      else
      {
        uint64_t v10 = 0x40000000000LL;
        sub_180784620(3LL, "%s: decoded IM4C signature is empty");
      }
    }

    else
    {
      uint64_t v10 = 0x40000000000LL;
      sub_180784620(3LL, "%s: decoded IM4C signature OID is empty");
    }
  }

  else
  {
    sub_180784620(3LL, "%s: trustObject is NULL", "AMFDRDecodeVerifyCertIssuerWithOptions");
    return 1LL;
  }

  return v10;
}

uint64_t sub_1807863E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v7;
  v19[1] = v7;
  uint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  size_t v8 = *(void *)(a2 + 136);
  if (v8 != *(void *)(a1 + 104) || memcmp(*(const void **)(a2 + 128), *(const void **)(a1 + 96), v8))
  {
    sub_180784620( 3LL,  "%s: PKI: cert was not issued by issuer (subject != issuer)",  "_AMFDRDecodeVerifyCertIssuerInternal");
    uint64_t v10 = (char *)malloc(0x100uLL);
    else {
      int v11 = v10;
    }
    uint64_t v12 = (char *)malloc(0x100uLL);
    else {
      uint64_t v13 = v12;
    }
    sub_180784620(3LL, "%s: subject: %s, issuer: %s", "_AMFDRDecodeVerifyCertIssuerInternal", v11, v13);
    if (v10) {
      free(v10);
    }
    if (v12) {
      free(v12);
    }
    return 0x20000000000LL;
  }

  char v18 = -86;
  if (sub_180782498( (unint64_t *)(a1 + 16),  2u,  (uint64_t)&unk_1807A2F30,  (unint64_t)v19,  0x20uLL,  0x20uLL))
  {
    sub_180784620(3LL, "%s: decodeAlgId failed");
    return 0x40000000000LL;
  }

  if (sub_18078200C(a1 + 32, (unint64_t *)&v16, &v18))
  {
    sub_180784620(3LL, "%s: DERParseBitString(sig) failed");
    return 0x40000000000LL;
  }

  if (v18)
  {
    sub_180784620(3LL, "%s: numUnused != 0");
    return 0x40000000000LL;
  }

  if (sub_180787F24( *(void *)(a2 + 208),  *(_DWORD *)(a2 + 216),  v16,  v17,  *(char **)a1,  *(_DWORD *)(a1 + 8),  *(uint64_t *)&v19[0],  DWORD2(v19[0]),  a1 + 240,  0,  a4))
  {
    sub_180784620( 3LL,  "%s: PKI: cert signature validation with issuer pubkey failed",  "_AMFDRDecodeVerifyCertIssuerInternal");
    return 0x20000000000LL;
  }

  sub_180784620( 7LL,  "%s: PKI: verify cert was issued and signed by issuer (success)",  "_AMFDRDecodeVerifyCertIssuerInternal");
  if (!a3) {
    return 0LL;
  }
  uint64_t v14 = sub_1807860C0(a3, a1);
  if (v14) {
    sub_180784620(3LL, "%s: revocation check failed", "_AMFDRDecodeVerifyCertIssuerInternal");
  }
  return v14;
}

uint64_t sub_18078663C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t result = 1LL;
  if (a1 && a3)
  {
    v7[0] = a1;
    v7[1] = a2;
    if (sub_180781C5C((uint64_t)v7, v6, 0LL))
    {
      sub_180784620(3LL, "%s: failed to decode DER", "AMFDRDecodeParseDERLengthFromBuffer");
      return 2LL;
    }

    else
    {
      uint64_t result = 0LL;
      *a3 = LODWORD(v6[2]) - a1 + LODWORD(v6[1]);
    }
  }

  return result;
}

uint64_t sub_1807866D4(uint64_t *a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = malloc(0x7F8uLL);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    bzero(v6, 0x7F8uLL);
    if (a1)
    {
      uint64_t v8 = *a1;
      if (*a1 && (uint64_t v9 = *((unsigned int *)a1 + 2), (_DWORD)v9))
      {
        if (a2 && a3)
        {
          uint64_t v10 = a1[18];
          if ((v10 & 0x801) != 0)
          {
            *(void *)(v7 + 8) = v8;
            *(void *)(v7 + 16) = v9;
          }

          else
          {
            *(void *)(v7 + 1944) = a1[2];
            *(void *)(v7 + 1952) = *((unsigned int *)a1 + 6);
            *(void *)(v7 + 24) = v8;
            *(void *)(v7 + memset(v30, 170, 32) = v9;
            uint64_t v13 = *((unsigned int *)a1 + 10);
            *(void *)(v7 + 280) = a1[4];
            *(void *)(v7 + 288) = v13;
          }

          uint64_t v14 = *((unsigned int *)a1 + 14);
          *(void *)(v7 + 72) = a1[6];
          *(void *)(v7 + 80) = v14;
          uint64_t v15 = *((unsigned int *)a1 + 18);
          *(void *)(v7 + 88) = a1[8];
          *(void *)(v7 + 96) = v15;
          if ((v10 & 0x80) != 0)
          {
            uint64_t v18 = a1[12];
            uint64_t v19 = *((unsigned int *)a1 + 26);
            uint64_t v16 = v18;
            uint64_t v17 = v19;
          }

          else
          {
            uint64_t v16 = a1[10];
            uint64_t v17 = *((unsigned int *)a1 + 22);
            uint64_t v18 = a1[12];
            uint64_t v19 = *((unsigned int *)a1 + 26);
          }

          *(void *)(v7 + 104) = v16;
          *(void *)(v7 + 112) = v17;
          uint64_t v20 = *((unsigned int *)a1 + 34);
          *(void *)(v7 + 216) = a1[16];
          *(void *)(v7 + 224) = v20;
          uint64_t v21 = *((unsigned int *)a1 + 66);
          *(void *)(v7 + 2memset(v30, 170, 32) = a1[32];
          *(void *)(v7 + 240) = v21;
          *(void *)(v7 + 136) = v18;
          *(void *)(v7 + 144) = v19;
          uint64_t v22 = a1[14];
          uint64_t v23 = *((unsigned int *)a1 + 30);
          *(void *)(v7 + 168) = v22;
          *(void *)(v7 + 176) = v23;
          uint64_t v24 = a1[26];
          if (v24 && (uint64_t v25 = *((unsigned int *)a1 + 54), (_DWORD)v25))
          {
            *(void *)(v7 + 184) = v24;
            uint64_t v23 = v25;
          }

          else
          {
            *(void *)(v7 + 184) = v22;
          }

          *(void *)(v7 + 192) = v23;
          *(void *)(v7 + 2016) = v10;
          if (v22) {
            BOOL v26 = 1;
          }
          else {
            BOOL v26 = (_DWORD)v14 == 48;
          }
          BOOL v27 = !v26 && (v10 & 0x20) == 0;
          uint64_t v28 = off_1896FA300;
          if (!v27) {
            uint64_t v28 = off_1896FA338;
          }
          *(void *)(v7 + 2008) = v28;
          if ((v10 & 0x100) != 0)
          {
            *(void *)(v7 + 2008) = off_1896FA338;
            uint64_t v29 = *((unsigned int *)a1 + 58);
            *(void *)(v7 + 152) = a1[28];
            *(void *)(v7 + 160) = v29;
          }

          if ((v10 & 0x1000) != 0)
          {
            uint64_t v30 = *((unsigned int *)a1 + 62);
            *(void *)(v7 + 120) = a1[30];
            *(void *)(v7 + 128) = v30;
          }

          *(void *)(v7 + 2024) = a1[19];
          uint64_t v31 = a1[34];
          if (v31)
          {
            int v32 = *((_DWORD *)a1 + 70);
            if (v32)
            {
              *(void *)(v7 + 344) = v31;
              *(_DWORD *)(v7 + 352) = v32;
            }
          }

          uint64_t v33 = sub_180784D28(v7);
          *a2 = *(void *)(v7 + 1912);
          *a3 = *(void *)(v7 + 1920);
          if (*(_BYTE *)(v7 + 2032))
          {
            __int128 v34 = *(_OWORD *)(v7 + 744);
            *((_OWORD *)a1 + 10) = *(_OWORD *)(v7 + 728);
            *((_OWORD *)a1 + 11) = v34;
            *((_OWORD *)a1 + 12) = *(_OWORD *)(v7 + 760);
          }

          if (v33) {
            unint64_t v11 = sub_1807850C8(a1[18], v33);
          }
          else {
            unint64_t v11 = 0LL;
          }
          goto LABEL_14;
        }

        sub_180784620(3LL, "%s: outRawData and outRawDataLength must be non NULL");
      }

      else
      {
        sub_180784620(3LL, "%s: ctx->inData must be non NULL and ctx->inDataLength must be non 0");
      }
    }

    else
    {
      sub_180784620(3LL, "%s: ctx must be non NULL");
    }

    unint64_t v11 = 1LL;
LABEL_14:
    free((void *)v7);
    return v11;
  }

  sub_180784620(3LL, "%s: Failed to malloc fdrDecode", "AMFDRDecodeTrustEvaluation");
  return 0x80000000000000LL;
}

uint64_t sub_18078694C(uint64_t a1, unsigned int a2, void *a3, _BYTE *a4)
{
  uint64_t v16 = 0LL;
  uint64_t v4 = 1LL;
  if (!a1) {
    return v4;
  }
  if (!a2) {
    return v4;
  }
  if (!a3) {
    return v4;
  }
  uint64_t v7 = a4;
  if (!a4) {
    return v4;
  }
  uint64_t v9 = (void *)*a3;
  uint64_t v10 = (void *)*a3;
  if (!*a3)
  {
    uint64_t v10 = malloc(0x78uLL);
    if (!v10) {
      return 0x80000000000000LL;
    }
  }

  v10[14] = 0LL;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  v17[0] = a1;
  v17[1] = a2;
  int v11 = sub_1807823D0((uint64_t)v17, 5u, (uint64_t)&unk_1807A32A0, (unint64_t)(v10 + 1), 0x50uLL, 0LL);
  if (v11)
  {
    sub_180784620(3LL, "%s: failed to parse sysconfig sequence: %d", "AMFDRDecodeIterateSysconfigBegin", v11);
    uint64_t v4 = 0x400000000000000LL;
    goto LABEL_32;
  }

  uint64_t v12 = v10[2];
  if (v12 != 4)
  {
    sub_180784620(3LL, "%s: magic size is invalid: %lu", "AMFDRDecodeIterateSysconfigBegin", v12);
    uint64_t v4 = 0x400000000000020LL;
    goto LABEL_32;
  }

  for (uint64_t i = 3LL; i != -1; --i)
    *v7++ = *(_BYTE *)(v10[1] + i);
  if (v10[4] != 4LL)
  {
    sub_180784620(3LL, "%s: version size is invalid: %lu");
    goto LABEL_25;
  }

  int v14 = *(_DWORD *)v10[3];
  if (!(_BYTE)v14)
  {
    sub_180784620(3LL, "%s: minor version not supported: 0x%x");
    goto LABEL_25;
  }

  if ((v14 & 0xFFFF00) != 0x30000)
  {
    sub_180784620(3LL, "%s: sysconfig version not supported: 0x%x");
LABEL_25:
    uint64_t v4 = 0x402000000000000LL;
    goto LABEL_32;
  }

  if (sub_180782230((uint64_t)(v10 + 5), &v16, v10 + 11))
  {
    uint64_t v4 = 0x400000000000010LL;
    sub_180784620(3LL, "%s: failed to decode sysconfig payload: %d");
    goto LABEL_32;
  }

  if (v16 != 0x2000000000000011LL)
  {
    sub_180784620(3LL, "%s: invalid payload tag: 0x%llx");
LABEL_31:
    uint64_t v4 = 0x400000000000040LL;
    goto LABEL_32;
  }

  if (!sub_180782230((uint64_t)(v10 + 7), &v16, v10 + 13))
  {
    if (v16 == 0x2000000000000011LL)
    {
      uint64_t v4 = 0LL;
      *(_BYTE *)uint64_t v10 = 1;
      *a3 = v10;
      return v4;
    }

    sub_180784620(3LL, "%s: invalid metadata tag: 0x%llx");
    goto LABEL_31;
  }

  uint64_t v4 = 0x400000000000010LL;
  sub_180784620(3LL, "%s: failed to decode sysconfig metadata: %d");
LABEL_32:
  if (!v9) {
    free(v10);
  }
  return v4;
}

uint64_t sub_180786C00(uint64_t a1, _BYTE *a2, _BYTE *a3, void *a4, _DWORD *a5, _BYTE *a6)
{
  unint64_t v24 = 0LL;
  v25[0] = 0LL;
  v25[1] = 0LL;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v21 = 0u;
  memset(v20, 0, sizeof(v20));
  uint64_t v6 = 1LL;
  BOOL v19 = 0;
  if (!a3) {
    return v6;
  }
  if (!a1) {
    return v6;
  }
  uint64_t v7 = a2;
  if (!a2 || !a4 || !a5) {
    return v6;
  }
  if (!*(_BYTE *)a1)
  {
    sub_180784620(3LL, "%s: sysconfig context is not initialized");
    return 0x400000000000000LL;
  }

  int v12 = sub_180782314((unint64_t *)(a1 + 88), &v24);
  if (v12 == 1) {
    return 0x40000000000000LL;
  }
  if (v12 || v24 != 0x2000000000000010LL)
  {
    sub_180784620(3LL, "%s: failed to decode payload: %d", "AMFDRDecodeIterateSysconfigPayloadNext", v12);
    return 0x400000000000040LL;
  }

  int v13 = sub_180782498(v25, 5u, (uint64_t)&unk_1807A3228, (unint64_t)v20, 0x50uLL, 0LL);
  if (v13)
  {
    uint64_t v6 = 0x400000000000010LL;
    sub_180784620(3LL, "%s: failed to parse payload content: %d", "AMFDRDecodeIterateSysconfigPayloadNext", v13);
    return v6;
  }

  if (*((void *)&v20[0] + 1) != 4LL)
  {
    sub_180784620( 3LL,  "%s: invalid key length: %lu",  "AMFDRDecodeIterateSysconfigPayloadNext",  *((void *)&v20[0] + 1));
    return 0x400000000000020LL;
  }

  uint64_t v14 = *(void *)&v20[0];
  for (uint64_t i = 3LL; i != -1; --i)
    *v7++ = *(_BYTE *)(v14 + i);
  if (sub_180782108((unsigned __int8 **)&v23, 0, &v19))
  {
    sub_180784620(3LL, "%s: failed to parse BOOLean: %d");
    return 0x400000000000000LL;
  }

  if (v19)
  {
    uint64_t v6 = 0LL;
    *a3 = 1;
  }

  else
  {
    int v17 = DWORD2(v22);
    if (*((void *)&v22 + 1))
    {
      *a4 = v22;
      *a5 = v17;
      uint64_t v6 = 0LL;
      if (a6) {
        *a6 = 1;
      }
    }

    else
    {
      uint64_t v6 = 0LL;
      int v18 = DWORD2(v21);
      *a4 = v21;
      *a5 = v18;
    }
  }

  return v6;
}

uint64_t sub_180786E2C(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 1944);
  if (!v2)
  {
    sub_180784620(3LL, "%s: FDR Trust Object is NULL", "_AMFDRDecodeVerifyTrustObject");
    uint64_t v4 = 0x200000LL;
    goto LABEL_5;
  }

  uint64_t v3 = sub_18078451C(a1 + 1768, v2, *(_DWORD *)(a1 + 1952));
  if (!v3)
  {
    if (!*(void *)(a1 + 72))
    {
      sub_180784620(3LL, "%s: FDR Trust Object digest is NULL", "_AMFDRDecodeVerifyTrustObject");
      uint64_t v4 = 0x40000LL;
      goto LABEL_5;
    }

    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __s2[1] = v6;
    __s2[2] = v6;
    __s2[0] = v6;
    uint64_t v7 = *(void *)(a1 + 80);
    if (v7 == 48)
    {
      if (sub_18078C574(*(char **)(a1 + 1944), *(void *)(a1 + 1952), (uint64_t)__s2))
      {
LABEL_11:
        sub_180784620(3LL, "%s: AMSupportDigestSha256 failed");
LABEL_16:
        uint64_t v4 = 0x100000LL;
        goto LABEL_5;
      }
    }

    else
    {
      if (v7 != 32)
      {
        sub_180784620( 3LL,  "%s: FDR Trust Object digest size not supported. digest is of size %zu",  "_AMFDRDecodeVerifyTrustObject",  v7);
        uint64_t v4 = 0x80000LL;
        goto LABEL_5;
      }
    }

    sub_180784620(3LL, "%s: FDR Trust Object digest mismatch.");
    goto LABEL_16;
  }

  uint64_t v4 = v3;
  sub_180784620(3LL, "%s: malformed FDR Trust Object Format", "_AMFDRDecodeVerifyTrustObject");
LABEL_5:
  *(void *)a1 |= v4;
  return v4;
}

uint64_t sub_180786FD4(int a1, uint64_t *a2, int a3, _WORD *a4)
{
  int v10 = 0;
  if (!*(void *)a4)
  {
    sub_180784620(3LL, "%s: fdrDecode is NULL", "_AMFDRDecodeFilterDataInstanceCallback");
    return 6LL;
  }

  *(void *)uint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  if (!a2)
  {
    sub_180784620(3LL, "%s: property is NULL", "_AMFDRDecodeFilterDataInstanceCallback");
    **(void **)a4 |= 1uLL;
    return 6LL;
  }

  if (a1 != 1768846196) {
    return 0LL;
  }
  uint64_t v6 = sub_18078AC10(a2, 1768846196LL, v9, &v10);
  if ((_DWORD)v6)
  {
    uint64_t v7 = v6;
    sub_180784620(3LL, "%s: Img4DecodeGetPropertyData(kFDRTag_inst) failed.", "_AMFDRDecodeFilterDataInstanceCallback");
    **(void **)a4 |= 0x4000uLL;
    return v7;
  }

  if (a3 != 1)
  {
    sub_180784620(3LL, "%s: unexpected property type != kImg4ObjectProperty", "_AMFDRDecodeFilterDataInstanceCallback");
    return 0LL;
  }

  if ((sub_180787168( *(_DWORD **)v9,  v10,  *(void **)(*(void *)a4 + 104LL),  *(void *)(*(void *)a4 + 112LL),  *(const void **)(*(void *)a4 + 184LL),  *(void *)(*(void *)a4 + 192LL),  1,  *(void **)a4) & 1) != 0)
  {
    sub_180784620( 6LL,  "%s: kFDRTag_inst property == fdrDecode->uniqueID, found corresponding Data Instance.",  "_AMFDRDecodeFilterDataInstanceCallback");
    uint64_t v7 = 0LL;
    a4[4] = 1;
  }

  else
  {
    sub_180784620(3LL, "%s: kFDRTag_inst property != fdrDecode->uniqueID", "_AMFDRDecodeFilterDataInstanceCallback");
    uint64_t v7 = 0LL;
    a4[4] = 256;
  }

  return v7;
}

uint64_t sub_180787168( _DWORD *a1, uint64_t a2, void *__s2, size_t __n, const void *a5, size_t a6, int a7, void *a8)
{
  if (a8)
  {
    uint64_t v11 = a8[252];
    if ((v11 & 0x100) != 0 && a8[19] && a8[20] && (!a7 || (v11 & 0x80) != 0))
    {
      a6 = 0LL;
      a5 = 0LL;
      unsigned int __n = a8[20];
      __s2 = (void *)a8[19];
    }
  }

  if (a2 < 5 || *a1 != 762014067)
  {
    if (__n != a2)
    {
      uint64_t v17 = a2;
      size_t v18 = __n;
      int v12 = "%s: kFDRTag_inst propertyLength (%d) != instLength (%zu)";
      goto LABEL_14;
    }

    if (memcmp(a1, __s2, __n))
    {
      int v12 = "%s: kFDRTag_inst propertyValue != instValue";
LABEL_14:
      uint64_t v13 = 4LL;
LABEL_20:
      sub_180784620(v13, v12, "_AMFDRDecodeInstPropertyMatching", v17, v18);
      return 0LL;
    }

    return 1LL;
  }

  size_t v14 = (a2 - 4);
  if (__n >= v14)
  {
    uint64_t v17 = (a2 - 4);
    size_t v18 = __n;
    int v12 = "%s: kFDRTag_inst propertyLength (sik) (%d) <= instLength (%zu)";
    goto LABEL_19;
  }

  uint64_t v15 = a1 + 1;
  if (memcmp(a1 + 1, __s2, __n))
  {
    int v12 = "%s: kFDRTag_inst propertyValue (sik) != instValue";
    goto LABEL_19;
  }

  if (*((_BYTE *)v15 + __n) != 45)
  {
    int v12 = "%s: kFDRTag_inst propertyValue missing expected -";
    goto LABEL_19;
  }

  uint64_t result = 1LL;
  if (a6 && a5)
  {
    if (a6 == (_DWORD)v14 + ~(_DWORD)__n)
    {
      int v12 = "%s: kFDRTag_inst propertyValue (sik) != sikValue";
    }

    else
    {
      uint64_t v17 = (v14 + ~(_DWORD)__n);
      size_t v18 = a6;
      int v12 = "%s: kFDRTag_inst propertyLength (sik) (%d) != sikLength (%zu)";
    }

uint64_t sub_180787338(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  v15[0] = a1;
  v15[1] = a2;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v9 = v6;
  __int128 v10 = v6;
  uint64_t v14 = 0LL;
  v13[0] = 0LL;
  v13[1] = 0LL;
  v12[0] = 0LL;
  v12[1] = 0LL;
  unint64_t v11 = 0LL;
  if (sub_180782230((uint64_t)v15, &v14, v13) || v14 != 0x2000000000000011LL)
  {
    sub_180784620(3LL, "%s: failed to parse property list");
    return 2LL;
  }

  if (sub_180782314(v13, &v11))
  {
LABEL_8:
    sub_180784620(3LL, "%s: cannot find tag in property list");
    return 2LL;
  }

  while (1)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    if (sub_180782498(v12, 2u, (uint64_t)&unk_1807A3180, (unint64_t)&v9, 0x20uLL, 0LL))
    {
      sub_180784620(3LL, "%s: failed to decode subCC digests sequence");
      return 2LL;
    }
  }

  if (a4)
  {
    uint64_t result = 0LL;
    uint64_t v8 = *((void *)&v10 + 1);
    *a4 = v10;
    a4[1] = v8;
  }

  else
  {
    sub_180784620(3LL, "%s: outValue is NULL", "_AMFDRDecodeSearchEntryFromPropertyList");
    return 1LL;
  }

  return result;
}

uint64_t sub_1807874A8(uint64_t a1)
{
  unsigned int v30 = 0;
  uint64_t v2 = *(void *)(a1 + 2016);
  if ((~*(_DWORD *)(a1 + 2016) & 0x1080LL) == 0)
  {
    sub_180784620(3LL, "%s: cannot set kAMFDRDecodeOptionManifestOnly and kAMFDRDecodeOptionSubCCOnly at the same time");
    goto LABEL_68;
  }

  if ((v2 & 0x80) != 0)
  {
    goto LABEL_7;
  }

  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = (_OWORD *)(a1 + 400);
  if ((v2 & 0x1000) == 0)
  {
    double v6 = sub_18078B034(v3, v4, (uint64_t)v5);
    if (!v7)
    {
LABEL_5:
      uint64_t v2 = *(void *)(a1 + 2016);
      goto LABEL_9;
    }

LABEL_7:
    sub_180784620(3LL, "%s: FDR failed to decode Data img4", v6);
LABEL_18:
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = 83901440LL;
LABEL_19:
    uint64_t result = v9 | v10;
    *(void *)a1 = v9 | v10;
    uint64_t v12 = *(void *)(a1 + 32);
    *(void *)(a1 + 1912) = *(void *)(a1 + 24);
    *(void *)(a1 + 1920) = v12;
    return result;
  }

  *(void *)(a1 + 848) = 0LL;
  double v6 = 0.0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 8memset(v30, 170, 32) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 4memset(v30, 170, 32) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *unsigned int v5 = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 408) = v3;
  *(void *)(a1 + 416) = v4;
  *(void *)(a1 + 488) = "IM4P";
  *(void *)(a1 + 496) = 4LL;
  *(void *)(a1 + 536) = v3;
  *(void *)(a1 + 544) = v4;
LABEL_9:
  uint64_t v8 = *(void *)(a1 + 280);
  if ((v2 & 0x1000) != 0)
  {
    if (v8) {
      goto LABEL_16;
    }
    sub_180784620(3LL, "%s: trust evaluation on subCC requires a reStitchManifest");
LABEL_68:
    uint64_t result = *(void *)a1 | 1LL;
    goto LABEL_36;
  }

  if (!v8)
  {
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    unsigned int v30 = sub_1807827D4(*(unsigned int **)(a1 + 88));
    goto LABEL_22;
  }

LABEL_25:
  uint64_t v16 = *(void *)a1;
  if ((*(_BYTE *)(a1 + 2016) & 0x80) != 0)
  {
    sub_18078B550(a1 + 400, (uint64_t)off_1896FA3A8, *(void *)(a1 + 2008), a1);
    if (!v18) {
      goto LABEL_59;
    }
  }

  else
  {
    sub_18078B29C(v30, a1 + 400, (uint64_t)off_1896FA3A8, *(void *)(a1 + 2008), a1);
    if (!v17) {
      goto LABEL_59;
    }
  }

  uint64_t v19 = *(void *)a1;
  if ((*(void *)a1 & 0x1000000000000LL) == 0)
  {
LABEL_54:
    sub_180784620(3LL, "%s: FDR data trust evaluation failed.", "_AMFDRDecodeVerifyData");
    if (!*(void *)a1) {
      *(void *)a1 = 0x100000000000LL;
    }
    goto LABEL_61;
  }

  uint64_t v20 = *(uint64_t (***)())(a1 + 2008);
  if (v20 == off_1896FA300)
  {
    __int128 v21 = "%s: Evaluation returned code=0x%016llX, re-evaluate with FDR 2.0 format";
    __int128 v22 = off_1896FA338;
    goto LABEL_44;
  }

  if (v20 == off_1896FA338)
  {
    __int128 v21 = "%s: Evaluation returned code=0x%016llX, re-evaluate with FDR 1.0 format";
    __int128 v22 = off_1896FA300;
LABEL_44:
    *(void *)(a1 + 2008) = v22;
    sub_180784620(4LL, v21, "_AMFDRDecodeVerifyData", v19);
  }

  BOOL v27 = *(uint64_t (***)())(a1 + 2008);
  if (v27 != off_1896FA300 && v27 != off_1896FA338) {
    goto LABEL_54;
  }
  uint64_t v28 = *(void *)a1;
  *(void *)a1 = v16;
  *(_BYTE *)(a1 + 400) = 0;
  if ((*(_BYTE *)(a1 + 2016) & 0x80) != 0) {
    sub_18078B550(a1 + 400, (uint64_t)off_1896FA3A8, (uint64_t)v27, a1);
  }
  else {
    sub_18078B29C(v30, a1 + 400, (uint64_t)off_1896FA3A8, (uint64_t)v27, a1);
  }
  if (v29)
  {
    sub_180784620(4LL, "%s: Re-evaluation returned code=0x%016llX", "_AMFDRDecodeVerifyData", *(void *)a1);
    *(void *)a1 = v28;
    goto LABEL_54;
  }

  if ((*(_BYTE *)(a1 + 2016) & 0x20) != 0)
  {
    sub_180784620(3LL, "%s: Re-evaluation succeeded but decode options require version2", "_AMFDRDecodeVerifyData");
    *(void *)a1 |= 0x2000000000000uLL;
  }

  else
  {
    sub_180784620(4LL, "%s: Re-evaluation succeeded", "_AMFDRDecodeVerifyData");
  }

LABEL_59:
  if (*(_BYTE *)(a1 + 401)) {
    *(_BYTE *)(a1 + 20memset(v30, 170, 32) = 1;
  }
LABEL_61:
  if ((*(_BYTE *)(a1 + 2017) & 0x10) != 0)
  {
    uint64_t result = *(void *)a1;
    if (!*(_BYTE *)(a1 + 376))
    {
      result |= 0x1000000000000000uLL;
      *(void *)a1 = result;
    }
  }

  else
  {
    uint64_t result = *(void *)a1;
  }

  *(void *)(a1 + 1912) = *(void *)(a1 + 536);
  *(void *)(a1 + 1920) = *(void *)(a1 + 544);
  return result;
}

double sub_180787970(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  v19[0] = 0xAAAAAAAAAAAAAAAALL;
  v19[1] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[26] = v4;
  v23[27] = v4;
  v23[24] = v4;
  v23[25] = v4;
  v23[22] = v4;
  v23[23] = v4;
  v23[20] = v4;
  v23[21] = v4;
  v23[18] = v4;
  v23[19] = v4;
  v23[16] = v4;
  v23[17] = v4;
  v23[14] = v4;
  v23[15] = v4;
  uint8_t v23[12] = v4;
  v23[13] = v4;
  v23[10] = v4;
  v23[11] = v4;
  v23[8] = v4;
  v23[9] = v4;
  v23[6] = v4;
  v23[7] = v4;
  v23[4] = v4;
  v23[5] = v4;
  v23[3] = v4;
  v23[1] = v4;
  v23[2] = v4;
  v23[0] = v4;
  unsigned int v18 = 0;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  int v16 = 0;
  memset(v15, 170, sizeof(v15));
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  unint64_t v20 = 0LL;
  if (sub_180781C54((uint64_t)(a1 + 3), &v20))
  {
    sub_180784620( 3LL,  "%s: failed to decode FDR Multi Combined Format",  "_AMFDRDecodeGetPayloadSeqAndSetManifestFromMultiCombinedData");
    *a1 |= 0x80uLL;
  }

  else if (v20 == 0x2000000000000010LL)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    if (v6 + v7 >= (unint64_t)(v21 + v22))
    {
      if (v6 + v7 > (unint64_t)(v21 + v22))
      {
        sub_180784620( 3LL,  "%s: Buffer contains %lu unused bytes",  "_AMFDRDecodeGetPayloadSeqAndSetManifestFromMultiCombinedData",  v7 - v22);
        *a1 |= 8uLL;
      }

      else
      {
        double v9 = sub_18078B034(v6, v7, (uint64_t)v23);
        if (v8)
        {
          sub_180784620(3LL, "%s: FDR failed to decode multi combined Data img4", v9);
        }

        else if (sub_18078A808((uint64_t)v23, &v17, &v18))
        {
          sub_180784620(3LL, "%s: FDR failed to get manifest from multi combined data", v10);
        }

        else if (sub_18078A794((uint64_t)v23, &v16))
        {
          sub_180784620(3LL, "%s: FDR failed to get payload type from multi combined data", v11);
        }

        else
        {
          int v12 = v16;
          if (v12 == sub_1807827D4((unsigned int *)"mcmb"))
          {
            if (sub_18078A728((uint64_t)v23, (uint64_t)v19))
            {
              sub_180784620(3LL, "%s: FDR failed to get payload from multi combined data", v13);
            }

            else if (sub_180782230((uint64_t)v19, &v15[16], v15) {
                   || *(void *)&v15[16] != 0x2000000000000011LL)
            }
            {
              sub_180784620(3LL, "%s: payload sequence malformed for multi combined data");
            }

            else
            {
              uint64_t v14 = v18;
              a1[35] = v17;
              a1[36] = v14;
              if (a2)
              {
                double result = *(double *)v15;
                *a2 = *(_OWORD *)v15;
              }
            }
          }

          else
          {
            sub_180784620(3LL, "%s: multi combined payload type is not mcmb");
          }
        }
      }
    }

    else
    {
      sub_180784620( 3LL,  "%s: item is bigger on the inside",  "_AMFDRDecodeGetPayloadSeqAndSetManifestFromMultiCombinedData");
      *a1 |= 4uLL;
    }
  }

  else
  {
    sub_180784620( 3LL,  "%s: FDR Multi Combined Format unexpected tag: %llu",  "_AMFDRDecodeGetPayloadSeqAndSetManifestFromMultiCombinedData",  v20);
    *a1 |= 0x10000uLL;
  }

  return result;
}

uint64_t sub_180787C84(uint64_t a1)
{
  *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v14 = v2;
  *(_OWORD *)unsigned int __n = v2;
  *(_OWORD *)__s1 = v2;
  __int128 v13 = v2;
  v18[0] = 0LL;
  v18[1] = 0LL;
  unint64_t v17 = 0LL;
  sub_180787970((void *)a1, &v16);
  if (v3)
  {
    uint64_t v10 = v3;
    *(void *)a1 |= 0x20000uLL;
    sub_180784620( 3LL,  "%s: Failed to get payload sequence and set manifest from multi combined data",  "_AMFDRDecodeFindDataFromMultiCombined");
    return v10;
  }

  if (*(void *)(a1 + 104) && *(void *)(a1 + 112))
  {
    char v4 = 0;
  }

  else
  {
    if ((*(_BYTE *)(a1 + 2017) & 0x20) == 0)
    {
      sub_180784620( 3LL,  "%s: no data instance is specified when looking for data in multi combined format",  "_AMFDRDecodeFindDataFromMultiCombined");
      return 1LL;
    }

    char v4 = 1;
  }

  char v5 = 0;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  while (1)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v14 = 0u;
      *(_OWORD *)unsigned int __n = 0u;
      *(_OWORD *)__s1 = 0u;
      __int128 v13 = 0u;
      if (sub_180782498(v18, 4u, (uint64_t)&unk_1807A3318, (unint64_t)__s1, 0x40uLL, 0LL))
      {
        sub_180784620( 3LL,  "%s: MultiCombinedItem malformed for multi combined data",  "_AMFDRDecodeFindDataFromMultiCombined");
        return 0x20000LL;
      }

      if (__s1[1] != *(void **)(a1 + 96)
        || memcmp(__s1[0], *(const void **)(a1 + 88), (size_t)__s1[1])
        || (v4 & 1) == 0
        && (v14[1] != *(void *)(a1 + 112) || memcmp((const void *)v14[0], *(const void **)(a1 + 104), v14[1]))
        || __n[1] != *(void *)(a1 + 128))
      {
        goto LABEL_12;
      }

      int v8 = *(const void **)(a1 + 120);
      if (__n[0]) {
        break;
      }
      if (!v8) {
        goto LABEL_24;
      }
LABEL_12:
      if (sub_180782314((unint64_t *)&v16, &v17))
      {
        if ((v5 & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_29;
      }
    }

uint64_t sub_180787F24( uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, char *a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, char a10, void *a11)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  v31[0] = a7;
  v31[1] = a8;
  if (sub_180782788((uint64_t)v31, (uint64_t)&off_1896FA190))
  {
    memset(v32, 170, 20);
    uint64_t result = sub_18078C5AC(a1, a2, a3, a4, (uint64_t)v32, 20LL);
    if (!a11) {
      goto LABEL_36;
    }
LABEL_33:
    if ((_DWORD)result != 2) {
      goto LABEL_36;
    }
    *a11 |= 0x80000000000000uLL;
    return 0xFFFFFFFFLL;
  }

  if (sub_180782788((uint64_t)v31, (uint64_t)&off_1896FA1A0))
  {
    *(void *)&__int128 v18 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)int v32 = v18;
    *(_OWORD *)&v32[16] = v18;
    uint64_t result = sub_18078C7F4(a1, a2, a3, a4, (uint64_t)v32, 32LL);
    if (a11) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }

  if (!sub_180782788((uint64_t)v31, (uint64_t)&off_1896FA1B0))
  {
    if (sub_180782788((uint64_t)v31, (uint64_t)&off_1896FA1D0))
    {
      *(void *)&__int128 v20 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)int v32 = v20;
      *(_OWORD *)&v32[16] = v20;
      unint64_t v29 = 0LL;
      __int128 v30 = 0uLL;
      if (!a9)
      {
        sub_180784620(3LL, "%s: publicKeyParam is NULL!!");
        return 0xFFFFFFFFLL;
      }

      if (!a10)
      {
        goto LABEL_26;
      }

      if (*(void *)(a9 + 8))
      {
        __int128 v30 = *(_OWORD *)a9;
LABEL_26:
        size_t v22 = a2;
        uint64_t v24 = *((void *)&v30 + 1);
        uint64_t v23 = v30;
        uint64_t v25 = a4;
        BOOL v26 = (const void *)a1;
        BOOL v27 = (unsigned __int8 *)a3;
        unint64_t v28 = 32LL;
        goto LABEL_32;
      }

LABEL_38:
      sub_180784620(3LL, "%s: missing public key algorithm parameter OID", "_AMFDRDecodeVerifySignatureDataWithOid");
      return 6LL;
    }

    *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v32[16] = v21;
    __int128 v33 = v21;
    *(_OWORD *)int v32 = v21;
    unint64_t v29 = 0LL;
    __int128 v30 = 0uLL;
    if (!a9)
    {
      sub_180784620(3LL, "%s: publicKeyParam is NULL");
      return 0xFFFFFFFFLL;
    }

    if (a10)
    {
      if (!*(void *)(a9 + 8)) {
        goto LABEL_38;
      }
      __int128 v30 = *(_OWORD *)a9;
    }

    else if (sub_180781C54(a9, &v29))
    {
      return 0xFFFFFFFFLL;
    }

    size_t v22 = a2;
    uint64_t v24 = *((void *)&v30 + 1);
    uint64_t v23 = v30;
    uint64_t v25 = a4;
    BOOL v26 = (const void *)a1;
    BOOL v27 = (unsigned __int8 *)a3;
    unint64_t v28 = 48LL;
LABEL_32:
    uint64_t result = sub_18078825C(v26, v22, v23, v24, v27, v25, v32, v28);
    if (!a11) {
      goto LABEL_36;
    }
    goto LABEL_33;
  }

  *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v32[16] = v19;
  __int128 v33 = v19;
  *(_OWORD *)int v32 = v19;
  uint64_t result = sub_18078C894(a1, a2, a3, a4, (uint64_t)v32, 48LL);
  if (a11) {
    goto LABEL_33;
  }
LABEL_36:
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  return result;
}

          int v12 = v18;
          goto LABEL_36;
        }

        __int128 v21 = &a5[((unint64_t)(sub_18079231C((uint64_t)a2) + 7) >> 3) + 1];
        size_t v22 = &a6[*a2];
        uint64_t v23 = sub_18079231C((uint64_t)a2);
        int v12 = sub_180793650(v11, v22, (unint64_t)(v23 + 7) >> 3, v21);
        if (!(_DWORD)v12)
        {
          if (a3 != 2 || (a6[*a2] & 1LL) == (*a5 & 1))
          {
LABEL_35:
            int v12 = 0LL;
            goto LABEL_36;
          }

          int v12 = 4294967125LL;
        }
      }

uint64_t sub_18078825C( const void *a1, size_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, unint64_t a8)
{
  uint64_t result = 1LL;
  if (a1 && a2)
  {
    if ((a2 & 1) != 0)
    {
      return sub_18078C36C((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
    }

    else
    {
      unint64_t v17 = malloc(a2 + 1);
      if (v17)
      {
        __int128 v18 = v17;
        _BYTE *v17 = 4;
        memcpy(v17 + 1, a1, a2);
        uint64_t v19 = sub_18078C36C((uint64_t)v18, a2 + 1, a3, a4, a5, a6, a7, a8);
        free(v18);
        return v19;
      }

      else
      {
        return 2LL;
      }
    }
  }

  return result;
}

uint64_t sub_180788364(unint64_t a1, unint64_t a2, _OWORD *a3)
{
  v20[0] = a1;
  v20[1] = a2;
  *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v18 = 0uLL;
  unint64_t v17 = 0LL;
  v19[0] = 0LL;
  v19[1] = 0LL;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  if (a3)
  {
    a3[14] = 0uLL;
    a3[15] = 0uLL;
    a3[12] = 0uLL;
    a3[13] = 0uLL;
    a3[10] = 0uLL;
    a3[11] = 0uLL;
    a3[8] = 0uLL;
    a3[9] = 0uLL;
    a3[6] = 0uLL;
    a3[7] = 0uLL;
    a3[4] = 0uLL;
    a3[5] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *a3 = 0uLL;
    a3[1] = 0uLL;
    char v4 = sub_1807822E8(v20, v19);
    if ((_DWORD)v4)
    {
      uint64_t v12 = (uint64_t)v4;
      sub_180784620(3LL, "%s: failed to init sequence");
    }

    else
    {
      uint64_t v5 = 0LL;
      size_t v6 = 255LL;
      while (1)
      {
        uint64_t v7 = sub_180782314(v19, &v17);
        if ((_DWORD)v7) {
          break;
        }
        __int128 v14 = v18;
        if (v17 == 0x2000000000000011LL)
        {
          __int128 v15 = 0u;
          __int128 v16 = 0u;
          uint64_t v8 = sub_1807823D0((uint64_t)&v14, 2u, (uint64_t)&unk_1807A2EA8, (unint64_t)&v15, 0x20uLL, 0LL);
          if ((_DWORD)v8)
          {
            uint64_t v12 = v8;
            sub_180784620(3LL, "%s: malformed AttributeTypeAndValue format: %d");
            return v12;
          }

          if ((void)v16)
          {
            __int128 v14 = v16;
            __int128 v18 = 0uLL;
            unint64_t v17 = 0LL;
            uint64_t v9 = sub_180781C54((uint64_t)&v14, &v17);
            if ((_DWORD)v9)
            {
              uint64_t v12 = v9;
              sub_180784620(3LL, "%s: malformed attribute: %d");
              return v12;
            }

            if (v17 == 19 || v17 == 12)
            {
              if (v5)
              {
                if (!v6) {
                  return 0LL;
                }
                *((_BYTE *)a3 + v5++) = 32;
                --v6;
              }

              uint64_t v10 = (char *)a3 + v5;
              uint64_t v11 = *((void *)&v18 + 1);
              if (v6 < *((void *)&v18 + 1))
              {
                memcpy(v10, (const void *)v18, v6);
                return 0LL;
              }

              v6 -= *((void *)&v18 + 1);
              memcpy(v10, (const void *)v18, *((size_t *)&v18 + 1));
              v5 += v11;
            }
          }
        }

        else
        {
          sub_180784620( 3LL,  "%s: Attribute must be set container. Found unexpected tag 0x%llu, skipping",  "_AMFDRDecodeSequenceString",  v17);
        }
      }

      uint64_t v12 = v7;
      if ((_DWORD)v7 == 1) {
        return 0LL;
      }
      sub_180784620(3LL, "%s: failed to decode all sequences: %d");
    }
  }

  else
  {
    uint64_t v12 = 3LL;
    sub_180784620(3LL, "%s: buffer is NULL");
  }

  return v12;
}

uint64_t sub_1807885AC(char *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 48) {
    return sub_18078C574(a1, a2, a3);
  }
  if (a4 == 32) {
    return sub_18078C510(a1, a2, a3);
  }
  return 1LL;
}

uint64_t sub_1807885CC(uint64_t result)
{
  qword_18C5341E0 = result;
  return result;
}

uint64_t sub_1807885D8()
{
  return qword_18C5341E0;
}

uint64_t sub_1807885E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v8 = (void (*)(uint64_t, const char *, ...))sub_1807885D8();
    if (v8) {
      v8( 2LL,  "%s the refcon arg was NULL",  "DERReturn _DERDecodeSysConfig3ParseAndPopulateMetadataSequence(DERDecodedInfo *__single, _Bool *__single, void *__single)");
    }
    return 6LL;
  }

  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v9 = 0u;
  if ((qword_18C534010 & 0xFFFC) == 0)
  {
    uint64_t v4 = sub_180782498( (unint64_t *)(result + 8),  (unsigned __int16)qword_18C534010,  (uint64_t)&unk_18C533FC8,  (unint64_t)&v9,  0x30uLL,  0x30uLL);
    if (!(_DWORD)v4)
    {
      uint64_t v5 = sub_1807886FC((uint64_t)&v9);
      size_t v6 = sub_1807886FC((uint64_t)&v11);
      uint64_t v7 = sub_180789258(v5, v10, DWORD2(v10), v6);
      sub_180789C08(a3, (uint64_t)v7);
      sub_1807893EC(v7);
      if (v5) {
        free(v5);
      }
      if (v6) {
        free(v6);
      }
    }

    return v4;
  }

  __break(0x5519u);
  return result;
}

char *sub_1807886FC(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = *(const void **)a1;
  if (!*(void *)a1) {
    return 0LL;
  }
  size_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (char *)malloc(v2 + 1);
  if (v3) {
    unint64_t v4 = (unint64_t)&v3[v2 + 1];
  }
  else {
    unint64_t v4 = 0LL;
  }
  BOOL v5 = v4 < (unint64_t)v3 || v2 > v4 - (unint64_t)v3;
  if (v5
    || ((size_t v6 = v3, memcpy(v3, v1, v2), v7 = &v6[v2], &v6[v2] >= v6) ? (v8 = (unint64_t)v7 >= v4) : (v8 = 1),
        v8 || ((char *v7 = 0, v7 + 1 >= v7) ? (v9 = (unint64_t)(v7 + 1) > v4) : (v9 = 1), v9)))
  {
    __break(0x5519u);
    return 0LL;
  }

  return v6;
}

uint64_t sub_180788790(uint64_t result, unsigned int a2)
{
  v25[0] = result;
  v25[1] = a2;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v20 = 0u;
  if (((unsigned __int16)qword_18C5340E0 & 0xFFFEu) < 6uLL)
  {
    if (sub_1807823D0( (uint64_t)v25,  (unsigned __int16)qword_18C5340E0,  (uint64_t)&unk_18C534068,  (unint64_t)&v20,  0x50uLL,  0x50uLL)) {
      return 0LL;
    }
    int v2 = 0;
    if (*((void *)&v20 + 1) == 4LL && (void)v20) {
      int v2 = *(_DWORD *)v20;
    }
    int v3 = 0;
    if (*((void *)&v21 + 1) == 4LL && (void)v21) {
      int v3 = *(_DWORD *)v21;
    }
    if ((sub_180788D1C(v2) & 1) == 0)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *))sub_1807885D8();
      if (v7) {
        v7(2LL, "Sysconfig magic 0x%X is not valid");
      }
      return 0LL;
    }

    unint64_t v4 = sub_1807896A8(v2, v3);
    if (!v4)
    {
      BOOL v8 = (void (*)(uint64_t, const char *))sub_1807885D8();
      if (v8) {
        v8(2LL, "Unable to allocate sysconfig3vX object. Likely due to an unsupported magic: 0x%X or version: 0x%X");
      }
      return 0LL;
    }

    BOOL v5 = v4;
    *((void *)&v32 + 1) = 0LL;
    *(void *)&__int128 v33 = 0LL;
    if (sub_180781C54((uint64_t)&v22, (unint64_t *)&v32))
    {
      size_t v6 = (void (*)(uint64_t, const char *))sub_1807885D8();
      if (v6) {
        v6(2LL, "Unable to decode payload with error %d");
      }
LABEL_24:
      sub_1807898A0(v5);
      return 0LL;
    }

    if ((void)v32 != 0x2000000000000011LL)
    {
      __int128 v10 = (void (*)(uint64_t, const char *))sub_1807885D8();
      if (v10) {
        v10(2LL, "Tag was not the expected Payload tag %llX");
      }
      goto LABEL_24;
    }

    if (sub_180788B2C( (uint64_t)&v22,  (uint64_t (*)(unint64_t *, char *, uint64_t))sub_180788BE8,  (uint64_t)v5)) {
      goto LABEL_20;
    }
    *((void *)&v32 + 1) = 0LL;
    *(void *)&__int128 v33 = 0LL;
    if (sub_180781C54((uint64_t)&v23, (unint64_t *)&v32))
    {
      __int128 v11 = (void (*)(uint64_t, const char *))sub_1807885D8();
      if (v11) {
        v11(2LL, "Unable to decode metadata with error %d");
      }
      goto LABEL_24;
    }

    if ((void)v32 != 0x2000000000000011LL)
    {
      __int128 v13 = (void (*)(uint64_t, const char *))sub_1807885D8();
      if (v13) {
        v13(2LL, "Tag was not the expected metadata tag %llX");
      }
      goto LABEL_24;
    }

    if (sub_180788B2C( (uint64_t)&v23,  (uint64_t (*)(unint64_t *, char *, uint64_t))sub_1807885E4,  (uint64_t)v5))
    {
LABEL_20:
      BOOL v9 = (void (*)(uint64_t, const char *))sub_1807885D8();
      if (v9) {
        v9(2LL, "Decode sequence error: %d");
      }
      goto LABEL_24;
    }

    v35[1] = 0LL;
    v35[2] = 0LL;
    uint64_t result = sub_180781C54((uint64_t)&v24, v35);
    if ((_DWORD)result)
    {
      uint64_t v12 = (void (*)(uint64_t, const char *))sub_1807885D8();
      if (v12) {
        v12(2LL, "Unable to decode manifest with error %d");
      }
      goto LABEL_24;
    }

    if (v35[0] != 0x2000000000000010LL)
    {
      unint64_t v17 = (void (*)(uint64_t, const char *))sub_1807885D8();
      if (v17) {
        v17(2LL, "Tag was not the expected manifest tag %llX");
      }
      goto LABEL_24;
    }

    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v32 = 0u;
    if ((qword_18C534060 & 0xFFFC) == 0)
    {
      int v14 = sub_1807823D0( (uint64_t)&v24,  (unsigned __int16)qword_18C534060,  (uint64_t)&unk_18C534018,  (unint64_t)&v32,  0x30uLL,  0x30uLL);
      if (v14)
      {
        int v15 = v14;
        __int128 v16 = (void (*)(uint64_t, const char *, ...))sub_1807885D8();
        if (v16) {
          v16(2LL, "Decode manifest sequence error: %d", v15);
        }
      }

      else
      {
        uint64_t v30 = v32;
        int v31 = DWORD2(v32);
        uint64_t v28 = v33;
        int v29 = DWORD2(v33);
        uint64_t v26 = v34;
        int v27 = DWORD2(v34);
        if (DWORD2(v33) | DWORD2(v32) | DWORD2(v34))
        {
          int v18 = sub_180789918((uint64_t)v5);
          uint64_t v19 = (int *)sub_180789444(v18, &v30, &v28, &v26);
          sub_1807897D0((uint64_t)v5, v19);
          sub_18078964C(v19);
        }
      }

      return (uint64_t)v5;
    }
  }

  __break(0x5519u);
  return result;
}

uint64_t sub_180788B2C(uint64_t a1, uint64_t (*a2)(unint64_t *, char *, uint64_t), uint64_t a3)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  uint64_t result = sub_180781C54(a1, &v6);
  if (!(_DWORD)result)
  {
    if (v6 - 0x2000000000000012LL >= 0xFFFFFFFFFFFFFFFELL)
    {
      v10[0] = 0LL;
      v10[1] = 0LL;
      uint64_t result = (uint64_t)sub_1807822E8(v7, v10);
      if (!(_DWORD)result)
      {
        v9[1] = 0LL;
        int v9[2] = 0LL;
        char v8 = 0;
        while (1)
        {
          LODWORD(result) = sub_180782314(v10, v9);
          if ((_DWORD)result) {
            break;
          }
          LODWORD(result) = a2(v9, &v8, a3);
          if ((_DWORD)result) {
            break;
          }
          if (v8) {
            return 0LL;
          }
        }

        else {
          return result;
        }
      }
    }

    else
    {
      return 2LL;
    }
  }

  return result;
}

uint64_t sub_180788BE8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 6LL;
  }
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v10 = 0u;
  if (((unsigned __int16)qword_18C533FC0 & 0xFFFEu) < 6uLL)
  {
    uint64_t v4 = sub_180782498( (unint64_t *)(result + 8),  (unsigned __int16)qword_18C533FC0,  (uint64_t)&unk_18C533F48,  (unint64_t)&v10,  0x50uLL,  0x50uLL);
    if (!(_DWORD)v4)
    {
      uint64_t v4 = sub_180782108((unsigned __int8 **)&v14, 0, &v9);
      if (!(_DWORD)v4)
      {
        int v5 = 0;
        if (*((void *)&v10 + 1) == 4LL && (void)v10) {
          int v5 = *(_DWORD *)v10;
        }
        unint64_t v6 = sub_1807886FC((uint64_t)&v11);
        uint64_t v7 = sub_1807886FC((uint64_t)&v13);
        char v8 = sub_180788DE4(v5, v6, (const void *)v12, DWORD2(v12), v7, v9);
        sub_180789B34(a3, (uint64_t)v8);
        sub_18078915C(v8);
        if (v6) {
          free(v6);
        }
        if (v7) {
          free(v7);
        }
      }
    }

    return v4;
  }

  __break(0x5519u);
  return result;
}

uint64_t sub_180788D1C(int a1)
{
  uint64_t result = 1LL;
  if (a1 <= 1682138726)
  {
    if (a1 > 1634758773)
    {
      if (a1 == 1634758774) {
        return result;
      }
      int v3 = 1648584295;
    }

    else
    {
      if (a1 == 809723495) {
        return result;
      }
      int v3 = 1279485543;
    }

    goto LABEL_13;
  }

  if (a1 <= 1715693158)
  {
    if (a1 == 1682138727) {
      return result;
    }
    int v3 = 1698915943;
    goto LABEL_13;
  }

  if (a1 != 1715693159 && a1 != 1936023916)
  {
    int v3 = 1950574183;
LABEL_13:
    if (a1 != v3) {
      return 0LL;
    }
  }

  return result;
}

_OWORD *sub_180788DE4(int a1, const char *a2, const void *a3, size_t a4, const char *a5, int a6)
{
  if (!a1)
  {
    __int128 v12 = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (v12) {
      v12(2LL, "%s key was invalid");
    }
    return 0LL;
  }

  if (a6) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  int v10 = (a3 != 0LL) | (2 * (a5 != 0LL)) | v9;
  if (!v10)
  {
    __int128 v13 = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (v13) {
      v13(2LL, "%s one of data, string, or deleted must be provided");
    }
    return 0LL;
  }

  if ((v10 & (v10 - 1)) != 0)
  {
    __int128 v11 = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (v11) {
      v11(2LL, "%s data, string and deleted are mutually exclusive. Caller provided parameters [%s%s%s ]");
    }
    return 0LL;
  }

  if (a3 && !(_DWORD)a4)
  {
    unint64_t v17 = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (v17) {
      v17(2LL, "%s data was 0 length");
    }
    return 0LL;
  }

  uint64_t result = malloc(0x30uLL);
  if (result) {
    unint64_t v20 = (unint64_t)(result + 3);
  }
  else {
    unint64_t v20 = 0LL;
  }
  if (v20 - (unint64_t)result >= 0x30)
  {
    int v18 = result;
    result[1] = 0u;
    result[2] = 0u;
    *uint64_t result = 0u;
    if ((unint64_t)(result + 3) <= v20)
    {
      *(_DWORD *)uint64_t result = a1;
      if (!a2 || !*a2) {
        a2 = ".";
      }
      *((void *)result + 1) = sub_180789000(a2, 0x1000000uLL);
      if (!a3) {
        goto LABEL_31;
      }
      uint64_t result = sub_1807890B8(a3, a4);
      if (v21 >= (unint64_t)result && (uint64_t)(v21 - (void)result) >= a4)
      {
        *((void *)v18 + 3) = result;
        *((_DWORD *)v18 + 8) = a4;
LABEL_31:
        if (a5) {
          *((void *)v18 + 2) = sub_180789000(a5, 0x1000000uLL);
        }
        *((_BYTE *)v18 + 4) = a6 << 31 >> 31;
        *((void *)v18 + 5) = 0LL;
        return v18;
      }
    }
  }

  __break(0x5519u);
  return result;
}

char *sub_180789000(const char *a1, size_t a2)
{
  if (!a1) {
    goto LABEL_11;
  }
  size_t v3 = strnlen(a1, a2);
  uint64_t v4 = (char *)malloc(v3 + 1);
  strlcpy(v4, a1, v3 + 1);
  int v5 = &v4[v3];
  if (v4 > &v4[v3]) {
    goto LABEL_10;
  }
  unint64_t v6 = (unint64_t)&v4[v3 + 1];
  if (!v4) {
    unint64_t v6 = 0LL;
  }
  BOOL v7 = v5 + 1 < v5 || (unint64_t)(v5 + 1) > v6;
  if (v7 || *v5)
  {
LABEL_10:
    __break(0x5519u);
LABEL_11:
    char v8 = (void (*)(uint64_t, const char *, ...))sub_1807885D8();
    if (v8) {
      v8( 2LL,  "%s source string was NULL",  "char *__single __terminated_by(0)_allocAndCopyString(const char *__single __terminated_by(0), size_t)");
    }
    return 0LL;
  }

  return v4;
}

void *sub_1807890B8(const void *a1, size_t __size)
{
  if ((_DWORD)__size)
  {
    size_t v3 = __size;
    uint64_t result = malloc(__size);
    if (result) {
      unint64_t v5 = (unint64_t)result + v3;
    }
    else {
      unint64_t v5 = 0LL;
    }
    if (v5 < (unint64_t)result || v5 - (unint64_t)result < v3)
    {
      __break(0x5519u);
      return result;
    }

    BOOL v7 = result;
    memcpy(result, a1, v3);
  }

  else
  {
    char v8 = (void (*)(uint64_t, const char *, ...))sub_1807885D8();
    if (v8) {
      v8( 2LL,  "%s data was zero length",  "uint8_t *__indexable_allocAndCopyData(const uint8_t *__single __counted_by(dataLength), uint32_t)");
    }
    return 0LL;
  }

  return v7;
}

void sub_18078915C(void *a1)
{
  if (a1)
  {
    *(_DWORD *)a1 = 0;
    int v2 = (void *)a1[1];
    if (v2)
    {
      free(v2);
      a1[1] = 0LL;
    }

    size_t v3 = (void *)a1[3];
    if (v3)
    {
      free(v3);
      a1[3] = 0LL;
      *((_DWORD *)a1 + 8) = 0;
    }

    uint64_t v4 = (void *)a1[2];
    if (v4) {
      free(v4);
    }
    free(a1);
  }

unsigned int *sub_1807891B8(unsigned int *result)
{
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

BOOL sub_1807891C4(BOOL result)
{
  if (result) {
    return *(_BYTE *)(result + 4) != 0;
  }
  return result;
}

uint64_t sub_1807891D8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_1807891E4(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2)
    {
      int v3 = *(_DWORD *)(a1 + 32);
      *(void *)a2 = v2;
      *(_DWORD *)(a2 + 8) = v3;
      return 1LL;
    }
  }

  else
  {
    uint64_t result = sub_1807885D8();
    if (!result) {
      return result;
    }
    ((void (*)(uint64_t, const char *, ...))result)( 2LL,  "%s invalid arguments. Either entry or data was NULL",  "_Bool sysConfig3PayloadEntryGetData(struct __SysConfig3PayloadEntry *__single, SysConfigData *__single)");
  }

  return 0LL;
}

uint64_t sub_18078924C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

void *sub_180789258(const char *a1, unint64_t a2, size_t a3, const char *a4)
{
  if (!a1)
  {
    int v9 = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (v9) {
      v9(2LL, "%s key must be non-NULL");
    }
    return 0LL;
  }

  if (a2 && a4)
  {
    char v8 = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (v8) {
      v8(2LL, "%s data and string are mutually exclusive");
    }
    return 0LL;
  }

  if (!(a2 | (unint64_t)a4))
  {
    __int128 v11 = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (v11) {
      v11(2LL, "%s either data or string must be non-null");
    }
    return 0LL;
  }

  if (a2 && !(_DWORD)a3)
  {
    int v10 = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (v10) {
      v10(2LL, "%s data cannot be length zero");
    }
    return 0LL;
  }

  uint64_t result = malloc(0x28uLL);
  __int128 v14 = (char *)(result + 5);
  if (result) {
    int v15 = (char *)(result + 5);
  }
  else {
    int v15 = 0LL;
  }
  if ((unint64_t)(v15 - (char *)result) >= 0x28)
  {
    __int128 v12 = result;
    result[4] = 0LL;
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + 1) = 0u;
    uint64_t result = sub_180789000(a1, 0x100uLL);
    if (v14 <= v15)
    {
      *__int128 v12 = result;
      if (!a2)
      {
LABEL_26:
        if (a4) {
          v12[1] = sub_180789000(a4, 0x1000000uLL);
        }
        unint64_t v12[4] = 0LL;
        return v12;
      }

      uint64_t result = sub_1807890B8((const void *)a2, a3);
      if (v16 >= (unint64_t)result && (uint64_t)(v16 - (void)result) >= a3)
      {
        unint64_t v12[2] = result;
        *((_DWORD *)v12 + 6) = a3;
        goto LABEL_26;
      }
    }
  }

  __break(0x5519u);
  return result;
}

void sub_1807893EC(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)*a1;
    if (v2)
    {
      free(v2);
      *a1 = 0LL;
    }

    int v3 = (void *)a1[2];
    if (v3)
    {
      free(v3);
      a1[2] = 0LL;
      *((_DWORD *)a1 + 6) = 0;
    }

    uint64_t v4 = (void *)a1[1];
    if (v4) {
      free(v4);
    }
    free(a1);
  }

void *sub_180789444(int a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (!a2 || !a3 || !a4)
  {
    __int128 v11 = (void (*)(uint64_t, const char *, ...))sub_1807885D8();
    if (v11) {
      v11( 2LL,  "%s one of the hmacs were NULL. payload ptr: %p metdata ptr: %p full ptr: %p",  "struct __SysConfig3ManifestEntry *__singleallocSysConfig3Manifest(SysConfig3Version, const SysConfigData *__sing le, const SysConfigData *__single, const SysConfigData *__single)",  a2,  a3,  a4);
    }
    return 0LL;
  }

  uint64_t result = malloc(0x38uLL);
  if (result) {
    unint64_t v9 = (unint64_t)(result + 7);
  }
  else {
    unint64_t v9 = 0LL;
  }
  if (v9 - (unint64_t)result >= 0x38)
  {
    int v10 = result;
    result[6] = 0LL;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    if ((unint64_t)(result + 7) <= v9)
    {
      *(_DWORD *)uint64_t result = a1;
      if (*(void *)a2 && a2[2]) {
        sub_180789560((uint64_t)a2, (uint64_t)(result + 1));
      }
      if (*(void *)a3 && a3[2]) {
        sub_180789560((uint64_t)a3, (uint64_t)(v10 + 3));
      }
      if (*(void *)a4)
      {
        if (a4[2]) {
          sub_180789560((uint64_t)a4, (uint64_t)(v10 + 5));
        }
      }

      return v10;
    }
  }

  __break(0x5519u);
  return result;
}

char *sub_180789560(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (*(void *)a1) {
      BOOL v5 = (_DWORD)v4 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      *(void *)a2 = 0LL;
      *(_DWORD *)(a2 + 8) = 0;
      uint64_t result = (char *)sub_1807885D8();
      if (result) {
        return (char *)((uint64_t (*)(uint64_t, const char *))result)(2LL, "%s sourceData was 0 length");
      }
    }

    else
    {
      uint64_t result = (char *)malloc(*(unsigned int *)(a1 + 8));
      BOOL v7 = &result[v4];
      if (!result) {
        BOOL v7 = 0LL;
      }
      BOOL v8 = v7 >= result;
      uint64_t v9 = v7 - result;
      BOOL v10 = !v8 || v9 < v4;
      if (v10
        || (*(void *)a2 = result,
            *(_DWORD *)(a2 + 8) = v4,
            size_t v11 = *(unsigned int *)(a1 + 8),
            v11 > v4))
      {
        __break(0x5519u);
      }

      else
      {
        return (char *)memcpy(result, *(const void **)a1, v11);
      }
    }
  }

  else
  {
    uint64_t result = (char *)sub_1807885D8();
    if (result) {
      return (char *)((uint64_t (*)(uint64_t, const char *))result)(2LL, "%s sourceData or destData was NULL");
    }
  }

  return result;
}

void sub_18078964C(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[1];
    if (v2)
    {
      free(v2);
      a1[1] = 0LL;
      *((_DWORD *)a1 + 4) = 0;
    }

    int v3 = (void *)a1[3];
    if (v3)
    {
      free(v3);
      a1[3] = 0LL;
      *((_DWORD *)a1 + 8) = 0;
    }

    uint64_t v4 = (void *)a1[5];
    if (v4) {
      free(v4);
    }
    free(a1);
  }

_OWORD *sub_1807896A8(int a1, int a2)
{
  if ((sub_180788D1C(a1) & 1) == 0)
  {
    BOOL v8 = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (v8) {
      v8(2LL, "%s invalid magic provided 0x%08X");
    }
    return 0LL;
  }

  if ((a2 - 196609) >= 3)
  {
    uint64_t v9 = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (v9) {
      v9(2LL, "%s invalid version provided 0x%08X");
    }
    return 0LL;
  }

  uint64_t result = malloc(0x30uLL);
  if (result) {
    unint64_t v5 = (unint64_t)(result + 3);
  }
  else {
    unint64_t v5 = 0LL;
  }
  if (v5 - (unint64_t)result >= 0x30)
  {
    uint64_t v6 = (uint64_t)result;
    result[1] = 0u;
    result[2] = 0u;
    *uint64_t result = 0u;
    if ((unint64_t)(result + 3) <= v5)
    {
      *(_DWORD *)uint64_t result = a1;
      *((_DWORD *)result + 1) = a2;
      *((void *)result + 2) = 0LL;
      *((void *)result + 3) = 0LL;
      *((void *)result + 1) = 0LL;
      char v12 = 0;
      BOOL v10 = &v12;
      int v11 = 1;
      BOOL v7 = (int *)sub_180789444(a2, &v10, &v10, &v10);
      sub_1807897D0(v6, v7);
      sub_18078964C(v7);
      return (_OWORD *)v6;
    }
  }

  __break(0x5519u);
  return result;
}

void (*sub_1807897D0(uint64_t a1, int *a2))(uint64_t, const char *)
{
  if (!a1 || !a2)
  {
    uint64_t result = (void (*)(uint64_t, const char *))sub_1807885D8();
    if (!result) {
      return result;
    }
    result(2LL, "%s sysconfig (0x%p) or manifest (0x%p) argument was null");
    return 0LL;
  }

  if (*(_DWORD *)(a1 + 4) == *a2)
  {
    sub_18078964C(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0LL;
    uint64_t v4 = sub_180789444(*a2, a2 + 2, a2 + 6, a2 + 10);
    *(void *)(a1 + 24) = v4;
    return (void (*)(uint64_t, const char *))(v4 != 0LL);
  }

  uint64_t result = (void (*)(uint64_t, const char *))sub_1807885D8();
  if (result)
  {
    result(2LL, "%s sysconfig version (0X%08X) did not match manifest version (0X%08X");
    return 0LL;
  }

  return result;
}

void sub_1807898A0(void *a1)
{
  if (a1 && sub_180788D1C(*(_DWORD *)a1))
  {
    *a1 = 0LL;
    while (1)
    {
      uint64_t v2 = (void *)a1[1];
      if (!v2) {
        break;
      }
      a1[1] = v2[5];
      sub_18078915C(v2);
    }

    while (1)
    {
      int v3 = (void *)a1[2];
      if (!v3) {
        break;
      }
      a1[2] = v3[4];
      sub_1807893EC(v3);
    }

    uint64_t v4 = (void *)a1[3];
    if (v4) {
      sub_18078964C(v4);
    }
    free(a1);
  }

uint64_t sub_180789918(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 4);
  }
  return result;
}

uint64_t sub_180789924(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void *sub_180789930(uint64_t a1, int a2)
{
  if (!a1)
  {
    BOOL v10 = (void (*)(uint64_t, const char *, ...))sub_1807885D8();
    if (v10) {
      v10( 2LL,  "%s invalid argument. sysconfig cannot be NULL",  "_Bool _sysConfig3DeletePayloadEntryForKey(struct __SysConfig3 *__single, uint32_t)");
    }
    return (void *)(a1 != 0);
  }

  uint64_t v4 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 8);
  if (!result) {
    return (void *)(a1 != 0);
  }
  uint64_t v6 = 0LL;
  unint64_t v7 = 0LL;
  BOOL v8 = 0LL;
  while (1)
  {
    if (*(_DWORD *)result != a2)
    {
      unint64_t v7 = (unint64_t)(result + 6);
      uint64_t v9 = (void **)(result + 5);
      BOOL v8 = result;
      uint64_t v6 = result;
      goto LABEL_11;
    }

    if (!v6)
    {
      *uint64_t v4 = result[5];
      sub_18078915C(result);
      uint64_t v9 = (void **)(a1 + 8);
      goto LABEL_11;
    }

    v6[5] = result[5];
    uint64_t v9 = (void **)(v6 + 5);
    sub_18078915C(result);
LABEL_11:
    uint64_t result = *v9;
    if (!*v9) {
      return (void *)(a1 != 0);
    }
  }

  __break(0x5519u);
  return result;
}

uint64_t sub_180789A28(uint64_t a1, char *__s2)
{
  if (a1) {
    BOOL v2 = __s2 == 0LL;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (v2)
  {
    char v12 = (void (*)(uint64_t, const char *, ...))sub_1807885D8();
    if (v12) {
      v12( 2LL,  "%s invalid argument. sysconfig and key cannot be NULL",  "_Bool _sysConfig3DeleteMetadataEntryForKey(struct __SysConfig3 *__single, const char *__single __terminated_by(0))");
    }
    return v3;
  }

  uint64_t v4 = (unint64_t *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return v3;
  }
  unint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  unint64_t v9 = 0LL;
  while (1)
  {
    uint64_t result = strncmp(*(const char **)v5, __s2, 0x100uLL);
    if (!(_DWORD)result) {
      break;
    }
    unint64_t v8 = v5 + 40;
    int v11 = (unint64_t *)(v5 + 32);
    unint64_t v9 = v5;
    unint64_t v7 = v5;
LABEL_17:
    unint64_t v5 = *v11;
    if (!*v11) {
      return v3;
    }
  }

  if (!v7)
  {
    *uint64_t v4 = *(void *)(v5 + 32);
    sub_1807893EC((void *)v5);
    int v11 = v4;
    goto LABEL_17;
  }

  if (v7 + 40 <= v8 && v9 <= v7)
  {
    *(void *)(v7 + memset(v30, 170, 32) = *(void *)(v5 + 32);
    int v11 = (unint64_t *)(v7 + 32);
    sub_1807893EC((void *)v5);
    goto LABEL_17;
  }

  __break(0x5519u);
  return result;
}

uint64_t sub_180789B34(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t result = (uint64_t)sub_180789930(a1, *(_DWORD *)a2);
    if ((_DWORD)result)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(void *)(v5 + 40);
        }

        while (v5);
        unint64_t v7 = sub_180788DE4( *(_DWORD *)a2,  *(const char **)(a2 + 8),  *(const void **)(a2 + 24),  *(unsigned int *)(a2 + 32),  *(const char **)(a2 + 16),  *(_BYTE *)(a2 + 4) != 0);
        *(void *)(v6 + 40) = v7;
      }

      else
      {
        unint64_t v7 = sub_180788DE4( *(_DWORD *)a2,  *(const char **)(a2 + 8),  *(const void **)(a2 + 24),  *(unsigned int *)(a2 + 32),  *(const char **)(a2 + 16),  *(_BYTE *)(a2 + 4) != 0);
        *(void *)(a1 + 8) = v7;
      }

      *((void *)v7 + 5) = 0LL;
      return 1LL;
    }
  }

  else
  {
    uint64_t result = sub_1807885D8();
    if (result)
    {
      ((void (*)(uint64_t, const char *, ...))result)( 2LL,  "%s invalid argument. sysconfig and etnry cannot be NULL",  "_Bool _sysConfig3AddPayloadEntry(struct __SysConfig3 *__single, struct __SysConfig3PayloadEntry *__single)");
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_180789C08(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t result = sub_180789A28(a1, *(char **)a2);
    if ((_DWORD)result)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(void *)(v5 + 32);
        }

        while (v5);
        unint64_t v7 = sub_180789258( *(const char **)a2,  *(void *)(a2 + 16),  *(unsigned int *)(a2 + 24),  *(const char **)(a2 + 8));
        *(void *)(v6 + memset(v30, 170, 32) = v7;
      }

      else
      {
        unint64_t v7 = sub_180789258( *(const char **)a2,  *(void *)(a2 + 16),  *(unsigned int *)(a2 + 24),  *(const char **)(a2 + 8));
        *(void *)(a1 + 16) = v7;
      }

      v7[4] = 0LL;
      return 1LL;
    }
  }

  else
  {
    uint64_t result = sub_1807885D8();
    if (result)
    {
      ((void (*)(uint64_t, const char *, ...))result)( 2LL,  "%s invalid argument. sysconfig and entry cannot be NULL",  "_Bool _sysConfig3AddMetadataEntry(struct __SysConfig3 *__single, struct __SysConfig3MetadataEntry *__single)");
      return 0LL;
    }
  }

  return result;
}

double sub_180789CBC(unint64_t *a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v7 = 0LL;
  __int128 v8 = 0uLL;
  while (!sub_180782314(a1, &v7))
  {
    if (v7 == a2)
    {
      double result = *(double *)&v8;
      *a3 = v8;
      return result;
    }
  }

  return result;
}

double sub_180789D1C(unint64_t *a1, uint64_t a2, _OWORD *a3)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  return result;
}

uint64_t sub_180789D64(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 < 4) {
    return 0xFFFFFFFFLL;
  }
  if (v2 != 4) {
    return 1LL;
  }
  unsigned int v5 = 0;
  if (v5 < a2) {
    return 0xFFFFFFFFLL;
  }
  return v5 > a2;
}

uint64_t sub_180789DD8(void *a1, unint64_t a2)
{
  uint64_t result = 6LL;
  if (a1)
  {
    if (a2)
    {
      unint64_t v6 = 0LL;
      unint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      uint64_t result = sub_180781C54((uint64_t)a1, &v6);
      if (!(_DWORD)result)
      {
        if (v6 == 0x2000000000000010LL)
        {
          uint64_t v5 = a1[1];
          if (__CFADD__(*a1, v5) || __CFADD__(v7, v8))
          {
            __break(0x5513u);
          }

          else if (*a1 + v5 == v7 + v8)
          {
            uint64_t result = sub_180782498(&v7, 4u, (uint64_t)&unk_1807A3540, a2, 0x40uLL, 0LL);
            if (!(_DWORD)result) {
              return 2 * (sub_180789D64(a2, 0x494D4734u) != 0);
            }
          }

          else
          {
            return 7LL;
          }
        }

        else
        {
          return 2LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_180789EB8(unint64_t *a1, char **a2)
{
  unsigned int v5 = 2;
  uint64_t result = 6LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = sub_180782498(a1, 2u, (uint64_t)&unk_1807A3858, (unint64_t)a2, 0x20uLL, 0LL);
      if (!(_DWORD)result)
      {
        uint64_t result = sub_180782148(a2, &v5);
        if (!(_DWORD)result)
        {
          if (v5 <= 1) {
            return 0LL;
          }
          else {
            return 6LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_180789F38(uint64_t a1, unint64_t a2)
{
  uint64_t result = 6LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = sub_1807823D0(a1, 7u, (uint64_t)&unk_1807A3630, a2, 0xA0uLL, 0LL);
      if (!(_DWORD)result)
      {
        if (sub_180789D64(a2, 0x494D3450u))
        {
          return 2LL;
        }

        else if (!*(void *)(a2 + 80) {
               || (__int128 v7 = 0u, v8 = 0u,
        }
                            uint64_t result = sub_180789EB8((unint64_t *)(a2 + 80), (char **)&v7),
                            !(_DWORD)result))
        {
          uint64_t v6 = *(void *)(a2 + 96);
          uint64_t v5 = a2 + 96;
          if (!v6) {
            return 0LL;
          }
          __int128 v7 = 0u;
          __int128 v8 = 0u;
          uint64_t result = sub_180789FF0(v5, (unint64_t)&v7);
          if (!(_DWORD)result) {
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_180789FF0(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2) {
      return 6LL;
    }
    if (*(void *)result && *(void *)(result + 8))
    {
      uint64_t result = sub_1807823D0(result, 2u, (uint64_t)&unk_1807A3828, a2, 0x20uLL, 0LL);
      if ((_DWORD)result) {
        return result;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_18078A06C(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t result = 6LL;
  if (a1 && a2)
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    uint64_t result = sub_180789F38(a1, (unint64_t)&v11);
    if ((_DWORD)result)
    {
      uint64_t result = sub_1807823D0(a1, 6u, (uint64_t)&unk_1807A35A0, a2, 0x90uLL, 0LL);
      if (!(_DWORD)result)
      {
        if (sub_180789D64(a2, 0x494D3450u))
        {
          return 2LL;
        }

        else
        {
          uint64_t v6 = *(void *)(a2 + 80);
          uint64_t v5 = (unint64_t *)(a2 + 80);
          if (!v6) {
            return 0LL;
          }
          memset(v10, 0, sizeof(v10));
          uint64_t result = sub_180789EB8(v5, (char **)v10);
          if (!(_DWORD)result) {
            return 0LL;
          }
        }
      }
    }

    else
    {
      __int128 v7 = v12;
      *(_OWORD *)a2 = v11;
      *(_OWORD *)(a2 + 16) = v7;
      __int128 v8 = v14;
      *(_OWORD *)(a2 + memset(v30, 170, 32) = v13;
      *(_OWORD *)(a2 + 48) = v8;
      __int128 v9 = v16;
      *(_OWORD *)(a2 + 64) = v15;
      *(_OWORD *)(a2 + 80) = v9;
    }
  }

  return result;
}

uint64_t sub_18078A174(void *a1, unint64_t a2)
{
  return sub_18078A190(a1, 5uLL, (uint64_t)&unk_1807A36D8, a2, 0x494D344Du);
}

uint64_t sub_18078A190(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t result = 6LL;
  if (a1 && a4)
  {
    if (!*a1 || !a1[1]) {
      return 0LL;
    }
    if (a2 >= 0x10000)
    {
      __break(0x5507u);
      return result;
    }

    uint64_t result = sub_1807823D0((uint64_t)a1, (unsigned __int16)a2, a3, a4, 0xC0uLL, 0LL);
    if (!(_DWORD)result)
    {
      unsigned int v9 = 0;
      uint64_t result = sub_180782148((char **)(a4 + 16), &v9);
      if ((_DWORD)result) {
        return result;
      }
      if (v9 > 2) {
        return 2LL;
      }
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_18078A23C(void *a1, unint64_t a2)
{
  return sub_18078A190(a1, 3uLL, (uint64_t)&unk_1807A37B0, a2, 0x494D344Du);
}

uint64_t sub_18078A258(void *a1, unint64_t a2)
{
  return sub_18078A190(a1, 4uLL, (uint64_t)&unk_1807A3750, a2, 0x494D3443u);
}

uint64_t sub_18078A274(void *a1, unint64_t a2)
{
  return sub_18078A190(a1, 3uLL, (uint64_t)&unk_1807A37B0, a2, 0x494D3443u);
}

uint64_t sub_18078A290(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2) {
      return 6LL;
    }
    if (*(void *)result && *(void *)(result + 8))
    {
      uint64_t result = sub_1807823D0(result, 2u, (uint64_t)&unk_1807A37F8, a2, 0x20uLL, 0LL);
      if ((_DWORD)result) {
        return result;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_18078A30C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 6LL;
  if (a1)
  {
    if (a3)
    {
      unint64_t v14 = 0LL;
      __int128 v15 = 0uLL;
      __int128 v13 = 0uLL;
      uint64_t v11 = 0LL;
      unint64_t v12 = 0LL;
      uint64_t v9 = 0LL;
      unint64_t v10 = 0LL;
      unsigned int v8 = 0;
      uint64_t result = sub_180782230((uint64_t)a1, &v9, &v10);
      if (!(_DWORD)result)
      {
        if (v9 != 0x2000000000000010LL) {
          return 2LL;
        }
        uint64_t result = sub_180782314(&v10, &v14);
        if ((_DWORD)result) {
          return result;
        }
        if (v14 != 22) {
          return 2LL;
        }
        uint64_t result = sub_180782148((char **)&v15, &v8);
        if ((_DWORD)result) {
          return result;
        }
        if ((v8 | 0xE000000000000000LL) != a2) {
          return 2LL;
        }
        *(_OWORD *)a3 = v15;
        uint64_t result = sub_180782314(&v10, &v12);
        if ((_DWORD)result) {
          return result;
        }
        *(void *)(a3 + 40) = v12;
        *(_OWORD *)(a3 + 24) = v13;
        uint64_t result = sub_180782314(&v10, &v12);
        if ((_DWORD)result != 1) {
          return 2LL;
        }
        uint64_t v7 = a1[1];
        if (__CFADD__(*a1, v7))
        {
          __break(0x5513u);
        }

        else if (v11 == *a1 + v7)
        {
          return 0LL;
        }

        else
        {
          return 7LL;
        }
      }
    }
  }

  return result;
}

uint64_t sub_18078A438(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  unsigned int v8 = 0;
  v9[0] = 0LL;
  int v9[2] = 0LL;
  v9[1] = 22LL;
  unint64_t v9[3] = 24LL;
  __int128 v10 = a3;
  uint64_t result = sub_1807823D0(a1, 2u, (uint64_t)v9, a4, 0x30uLL, 0LL);
  if (!(_DWORD)result)
  {
    uint64_t result = sub_180782148((char **)a4, &v8);
    if (!(_DWORD)result)
    {
      if ((v8 | 0xE000000000000000LL) == a2)
      {
        uint64_t result = 0LL;
        *(void *)(a4 + 16) = a2 | 0xE000000000000000LL;
        *(void *)(a4 + 40) = a3;
      }

      else
      {
        return 2LL;
      }
    }
  }

  return result;
}

void sub_18078A508(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  __int128 v8 = 0uLL;
  sub_180789CBC(a1, a2, &v8);
  if (!v7) {
    sub_18078A438((uint64_t)&v8, a2, a3, a4);
  }
}

void sub_18078A560(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
}

void sub_18078A5B8(uint64_t a1, unint64_t a2, unint64_t a3)
{
}

void sub_18078A5C4(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  int v11 = 0;
  if (a1)
  {
    if (a2 | a3)
    {
      unint64_t v14 = 0LL;
      v15[0] = 0LL;
      v15[1] = 0LL;
      memset(v13, 0, sizeof(v13));
      memset(v12, 0, sizeof(v12));
      if (!sub_180781C54(a1 + 264, &v14)
        && v14 == 0x2000000000000011LL
        && !sub_180782148((char **)(a1 + 248), &v11))
      {
        unint64_t v8 = v11 == 2 ? 0x2000000000000010LL : 0x2000000000000011LL;
        sub_18078A560(v15, a4 | 0xE000000000000000LL, v8, (unint64_t)v13);
        if (!v9)
        {
          if (a2) {
            *(_OWORD *)a2 = *(_OWORD *)((char *)&v13[1] + 8);
          }
          sub_18078A560( (unint64_t *)&v13[1] + 1,  0xE00000004D414E50LL,  0x2000000000000011uLL,  (unint64_t)v12);
          if (a3)
          {
            if (!v10) {
              *(_OWORD *)a3 = *(_OWORD *)((char *)&v12[1] + 8);
            }
          }
        }
      }
    }
  }

uint64_t sub_18078A6F0(uint64_t a1, BOOL *a2)
{
  uint64_t result = 6LL;
  if (a1 && a2)
  {
    if (*(void *)(a1 + 136)) {
      BOOL v4 = *(void *)(a1 + 144) != 0LL;
    }
    else {
      BOOL v4 = 0;
    }
    uint64_t result = 0LL;
    *a2 = v4;
  }

  return result;
}

uint64_t sub_18078A728(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    BOOL v5 = 0;
    uint64_t result = sub_18078A6F0(a1, &v5);
    if (!(_DWORD)result)
    {
      if (v5)
      {
        uint64_t result = 0LL;
        *(_OWORD *)a2 = *(_OWORD *)(a1 + 136);
        return result;
      }

      uint64_t result = 1LL;
    }

    goto LABEL_9;
  }

  uint64_t result = 6LL;
  if (a2)
  {
LABEL_9:
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
  }

  return result;
}

uint64_t sub_18078A794(uint64_t a1, _DWORD *a2)
{
  BOOL v5 = 0;
  uint64_t result = 6LL;
  if (!a1 || !a2 || (uint64_t result = sub_18078A6F0(a1, &v5), (_DWORD)result))
  {
LABEL_6:
    if (!a2) {
      return result;
    }
    goto LABEL_7;
  }

  if (v5)
  {
    uint64_t result = sub_180782148((char **)(a1 + 104), a2);
    goto LABEL_6;
  }

  uint64_t result = 1LL;
  if (!a2) {
    return result;
  }
LABEL_7:
  if ((_DWORD)result) {
    *a2 = 0;
  }
  return result;
}

uint64_t sub_18078A808(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = 6LL;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *a2 = v5;
    int v6 = *(_DWORD *)(a1 + 32);
    *a3 = v6;
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    int v8 = v7;
    return (v8 << 31 >> 31);
  }

  return result;
}

uint64_t sub_18078A840(void *a1, unsigned int a2, char *a3)
{
  uint64_t v3 = 6LL;
  if (a2 <= 1 && a1 && a3)
  {
    if (a2 == 1)
    {
      if (!a1[55] || !a1[56]) {
        goto LABEL_11;
      }
    }

    else if (!a1[33] || !a1[34])
    {
LABEL_11:
      char v4 = 0;
      goto LABEL_12;
    }

    char v4 = 1;
LABEL_12:
    uint64_t v3 = 0LL;
    *a3 = v4;
  }

  return v3;
}

uint64_t sub_18078A8A0(uint64_t a1, unsigned int a2, uint64_t a3, BOOL *a4)
{
  uint64_t v4 = 6LL;
  if (a1)
  {
    if (a4)
    {
      sub_18078AA34(a1, a2, a3 | 0xE000000000000000LL, 1uLL, v8);
      uint64_t v4 = v6;
      if (!(_DWORD)v6) {
        return sub_1807820CC((unsigned __int8 **)&v8[1] + 1, a4);
      }
    }
  }

  return v4;
}

double sub_18078A90C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  double result = 0.0;
  memset(v13, 0, sizeof(v13));
  if (a1)
  {
    if (a5)
    {
      sub_18078A5B8(a1, (unint64_t)v14, 0LL);
      if (v10
        || (sub_18078A560(v14, a2 | 0xE000000000000000LL, 0x2000000000000011uLL, (unint64_t)v13), v11)
        || (sub_18078A560((unint64_t *)&v13[1] + 1, a3, a4, (unint64_t)a5), v12))
      {
        double result = 0.0;
        a5[1] = 0u;
        a5[2] = 0u;
        *a5 = 0u;
      }
    }
  }

  return result;
}

void sub_18078A9BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v9 = 0u;
  if (a1 && a4 && a5)
  {
    sub_18078A90C(a1, a2, a3 | 0xE000000000000000LL, 4uLL, &v9);
    if (v7)
    {
      uint64_t v8 = 0LL;
      *a4 = 0LL;
    }

    else
    {
      uint64_t v8 = v11;
      *a4 = *((void *)&v10 + 1);
    }

    *a5 = v8;
  }

double sub_18078AA34(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  *(_OWORD *)__int128 v13 = 0uLL;
  if (a2 <= 1 && a1 && a5)
  {
    char v14 = 0;
    if (!sub_18078A840((void *)a1, a2, &v14) && v14)
    {
      if (a2)
      {
        *(_OWORD *)__int128 v13 = *(_OWORD *)(a1 + 440);
        goto LABEL_9;
      }

      sub_18078A5B8(a1, 0LL, (unint64_t)v13);
      if (!v10)
      {
LABEL_9:
        sub_18078A560(v13, a3, a4, (unint64_t)a5);
        if (!v12) {
          return result;
        }
      }
    }

    double result = 0.0;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }

  return result;
}

uint64_t sub_18078AB00(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v7 = 0u;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  v6[0] = *(void *)a1;
  v6[1] = v4;
  uint64_t result = sub_18078A30C(v6, a2 | 0xE000000000000000LL, (uint64_t)&v7);
  if (!(_DWORD)result)
  {
    if (*((void *)&v9 + 1) != 2LL)
    {
      uint64_t result = 2LL;
      if (!a3) {
        return result;
      }
      goto LABEL_6;
    }

    if (!a3) {
      return 6LL;
    }
    uint64_t result = sub_1807821C8((char **)&v8 + 1, a3);
  }

  if (!a3) {
    return result;
  }
LABEL_6:
  if ((_DWORD)result) {
    *a3 = 0LL;
  }
  return result;
}

uint64_t sub_18078AB90(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  v6[0] = *(void *)a1;
  v6[1] = v4;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  uint64_t result = sub_18078A30C(v6, a2 | 0xE000000000000000LL, (uint64_t)&v7);
  if (!(_DWORD)result)
  {
    if (*((void *)&v9 + 1) == 1LL)
    {
      if (a3) {
        return sub_1807820CC((unsigned __int8 **)&v8 + 1, a3);
      }
      else {
        return 6LL;
      }
    }

    else
    {
      return 2LL;
    }
  }

  return result;
}

uint64_t sub_18078AC10(uint64_t *a1, uint64_t a2, void *a3, _DWORD *a4)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v12 = 0u;
  uint64_t result = 6LL;
  if (a3 && a4)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *((unsigned int *)a1 + 2);
    v11[0] = v8;
    v11[1] = v9;
    uint64_t result = sub_18078A30C(v11, a2 | 0xE000000000000000LL, (uint64_t)&v12);
    if (!(_DWORD)result)
    {
      if (*((void *)&v14 + 1) == 4LL)
      {
        uint64_t result = 0LL;
        *a3 = *((void *)&v13 + 1);
        int v10 = v14;
LABEL_6:
        *a4 = v10;
        return result;
      }

      uint64_t result = 2LL;
    }

    int v10 = 0;
    *a3 = 0LL;
    goto LABEL_6;
  }

  return result;
}

void sub_18078ACA4(void *a1)
{
}

void sub_18078ACAC(void *a1, _OWORD *a2)
{
  v21[0] = 0LL;
  v21[1] = 0LL;
  v20[0] = 0LL;
  v20[1] = 0LL;
  uint64_t v19 = 0LL;
  __int128 v18 = 0uLL;
  size_t __n = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v14 = 0LL;
  __s1 = 0LL;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  memset(v9, 0, sizeof(v9));
  __int128 __s2 = 0uLL;
  __int128 v7 = 0uLL;
  if (a1 && a1[40] && !sub_180782230((uint64_t)(a1 + 39), &v19, v21) && v19 == 0x2000000000000011LL)
  {
    while (1)
    {
      uint64_t v4 = (__int128 *)(a1 + 7);
      switch(v17)
      {
        case 0xE00000004D414E50LL:
LABEL_11:
          __int128 v7 = *v4;
          if (sub_18078A30C(&v18, v17, (uint64_t)&v11)
            || *((void *)&v13 + 1) != 0x2000000000000011LL
            || sub_1807822E8((unint64_t *)&v12 + 1, v20))
          {
            return;
          }

          while (1)
          {
            int v5 = sub_180782314(v20, (unint64_t *)&v14);
            if (v5) {
              break;
            }
            sub_180789D1C((unint64_t *)&v7, v14, &__s2);
            if (*((void *)&v10 + 1) <= 4uLL && ((1LL << SBYTE8(v10)) & 0x16) != 0)
            {
              if (v6) {
                return;
              }
              if (__n != *((void *)&__s2 + 1)) {
                return;
              }
              int v6 = memcmp(__s1, (const void *)__s2, __n);
              if (v6) {
                return;
              }
            }

            else if (*((void *)&v10 + 1) != 0xA000000000000000LL)
            {
              if (*((void *)&v10 + 1) != 0xA000000000000001LL || v6 != 1) {
                return;
              }
              int v6 = 0;
            }

            if (v6) {
              return;
            }
          }

          if (v5 != 1) {
            return;
          }
          break;
        case 0xE00000006D616E78LL:
          if (a2) {
            *a2 = v18;
          }
          break;
        case 0xE00000004F424A50LL:
          uint64_t v4 = (__int128 *)(a1 + 9);
          if (a1[9]) {
            goto LABEL_11;
          }
          uint64_t v4 = (__int128 *)(a1 + 9);
          if (a1[10]) {
            goto LABEL_11;
          }
          break;
        default:
          return;
      }
    }
  }

uint64_t sub_18078AF10( unint64_t *a1, uint64_t a2, uint64_t (*a3)(unint64_t, uint64_t *, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v15 = 0LL;
  unint64_t v16 = 0LL;
  unint64_t v14 = 0LL;
  v13[0] = 0LL;
  v13[1] = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v10 = 0LL;
  memset(v8, 0, sizeof(v8));
  __int128 v9 = 0u;
  if (!a3) {
    return 6LL;
  }
  uint64_t result = (uint64_t)sub_1807822E8(a1, v13);
  if (!(_DWORD)result)
  {
    while (1)
    {
      uint64_t result = sub_180782314(v13, &v14);
      if ((_DWORD)result == 1) {
        return 0LL;
      }
      if ((_DWORD)result) {
        return result;
      }
      uint64_t result = sub_18078A30C(&v15, v14, (uint64_t)v8);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t result = 2LL;
      if (*((void *)&v9 + 1) > 0x16uLL
        || ((1LL << SBYTE8(v9)) & 0x400016) == 0
        || !(v14 >> 62)
        || (v14 & 0x2000000000000000LL) == 0)
      {
        return result;
      }

      if (HIDWORD(v16)) {
        break;
      }
      uint64_t v10 = v15;
      LODWORD(v11) = v16;
      uint64_t v12 = *((void *)&v9 + 1);
      uint64_t result = a3(v14, &v10, a2, a4);
      if ((_DWORD)result) {
        return result;
      }
    }

    return 7LL;
  }

  return result;
}

double sub_18078B034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a3)
    {
      v9[0] = a1;
      v9[1] = a2;
      __int128 v7 = 0u;
      __int128 v8 = 0u;
      __int128 v5 = 0u;
      __int128 v6 = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + memset(v30, 170, 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      *(_OWORD *)(a3 + 128) = 0u;
      *(_OWORD *)(a3 + 144) = 0u;
      *(_OWORD *)(a3 + 160) = 0u;
      *(_OWORD *)(a3 + 176) = 0u;
      *(_OWORD *)(a3 + 192) = 0u;
      *(_OWORD *)(a3 + 208) = 0u;
      *(_OWORD *)(a3 + 224) = 0u;
      *(_OWORD *)(a3 + 240) = 0u;
      *(_OWORD *)(a3 + 256) = 0u;
      *(_OWORD *)(a3 + 272) = 0u;
      *(_OWORD *)(a3 + 288) = 0u;
      *(_OWORD *)(a3 + 304) = 0u;
      *(_OWORD *)(a3 + 320) = 0u;
      *(_OWORD *)(a3 + 336) = 0u;
      *(_OWORD *)(a3 + 352) = 0u;
      *(_OWORD *)(a3 + 368) = 0u;
      *(_OWORD *)(a3 + 384) = 0u;
      *(_OWORD *)(a3 + 400) = 0u;
      *(_OWORD *)(a3 + 416) = 0u;
      *(_OWORD *)(a3 + 4memset(v30, 170, 32) = 0u;
      *(void *)(a3 + 448) = 0LL;
      if (!sub_180789DD8(v9, (unint64_t)&v5)
        && !sub_18078A06C((uint64_t)&v6, a3 + 88)
        && !sub_18078A174(&v7, a3 + 232)
        && !sub_18078A290((uint64_t)&v8, a3 + 424))
      {
        *(_OWORD *)(a3 + 8) = v6;
        double result = *(double *)&v7;
        *(_OWORD *)(a3 + 24) = v7;
      }
    }
  }

  return result;
}

uint64_t sub_18078B11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18078B130(a1, a2, 1, a3, 1229796429);
}

uint64_t sub_18078B130(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t result = 6LL;
  if (a1 && a4)
  {
    uint64_t v15 = a1;
    uint64_t v16 = a2;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + memset(v30, 170, 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 208) = 0u;
    *(_OWORD *)(a4 + 224) = 0u;
    *(_OWORD *)(a4 + 240) = 0u;
    *(_OWORD *)(a4 + 256) = 0u;
    *(_OWORD *)(a4 + 272) = 0u;
    *(_OWORD *)(a4 + 288) = 0u;
    *(_OWORD *)(a4 + 304) = 0u;
    *(_OWORD *)(a4 + 320) = 0u;
    *(_OWORD *)(a4 + 336) = 0u;
    *(_OWORD *)(a4 + 352) = 0u;
    *(_OWORD *)(a4 + 368) = 0u;
    *(_OWORD *)(a4 + 384) = 0u;
    *(_OWORD *)(a4 + 400) = 0u;
    *(_OWORD *)(a4 + 416) = 0u;
    *(_OWORD *)(a4 + 4memset(v30, 170, 32) = 0u;
    *(void *)(a4 + 448) = 0LL;
    if (a5 == 1229796419)
    {
      unint64_t v10 = a4 + 232;
      if (a3) {
        uint64_t result = sub_18078A258(&v15, v10);
      }
      else {
        uint64_t result = sub_18078A274(&v15, v10);
      }
    }

    else
    {
      if (a5 != 1229796429) {
        return 2LL;
      }
      unint64_t v9 = a4 + 232;
      if (a3) {
        uint64_t result = sub_18078A174(&v15, v9);
      }
      else {
        uint64_t result = sub_18078A23C(&v15, v9);
      }
    }

    if (!(_DWORD)result)
    {
      if (*(void *)(a4 + 264))
      {
        unint64_t v12 = 0LL;
        uint64_t v13 = 0LL;
        uint64_t v14 = 0LL;
        uint64_t v15 = a1;
        uint64_t v16 = a2;
        uint64_t result = sub_180781C5C((uint64_t)&v15, &v12, 0LL);
        if (!(_DWORD)result)
        {
          *(void *)(a4 + 24) = a1;
          uint64_t v11 = v14 + v13 - a1;
          if (__CFADD__(v14, v13 - a1))
          {
            __break(0x5500u);
          }

          else
          {
            *(void *)(a4 + memset(v30, 170, 32) = v11;
            if (v11 == a2) {
              return 0LL;
            }
            else {
              return 7LL;
            }
          }
        }
      }

      else
      {
        return 3LL;
      }
    }
  }

  return result;
}

void sub_18078B26C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[1] = 0LL;
  void v5[2] = 0LL;
  v5[0] = a3;
  sub_18078B2A8(a1, a2, (uint64_t)v5, a4, 0, a5);
}

void sub_18078B29C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_18078B2A8(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  memset(v24, 0, sizeof(v24));
  if (a2)
  {
    if (a3)
    {
      BOOL v21 = 0;
      if (a4)
      {
        if (*(void *)a3)
        {
          if (*(void *)a4)
          {
            if (*(void *)(a4 + 24))
            {
              if (*(void *)(a4 + 8))
              {
                if (*(void *)(a4 + 16))
                {
                  unint64_t v9 = *(void **)(a4 + 32);
                  if (v9)
                  {
                    if (*(void *)(a2 + 24) && *v9 <= 0x30uLL && !(*(unsigned int (**)(void))a4)())
                    {
                      *(_BYTE *)(a2 + 1) = 1;
                      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
                      if (v13
                        && (uint64_t v14 = (const void *)v13(a2, a6)) != 0LL
                        && !memcmp((const void *)(a2 + 328), v14, **(void **)(a4 + 32)))
                      {
                        int v15 = 0;
                      }

                      else
                      {
                        if ((*(unsigned int (**)(void, void, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8))( *(void *)(a2 + 296),  *(void *)(a2 + 304),  &v22,  &v23,  a2 + 312,  a2 + 320,  a4,  a6)
                          || **(void **)(a4 + 32) > 0x30uLL
                          || (*(unsigned int (**)(void, void, uint64_t))a4)( *(void *)(a2 + 264),  *(void *)(a2 + 272),  a2 + 376)
                          || (*(unsigned int (**)(uint64_t, uint64_t, void, void, uint64_t, void, uint64_t, uint64_t))(a4 + 16))( v22,  v23,  *(void *)(a2 + 280),  *(void *)(a2 + 288),  a2 + 376,  **(void **)(a4 + 32),  a4,  a6))
                        {
                          return;
                        }

                        int v15 = 1;
                      }

                      sub_18078A5B8(a2, a2 + 40, a2 + 56);
                      if (v16) {
                        return;
                      }
                      if ((a5 & 1) == 0)
                      {
                        uint64_t v17 = *(unsigned int (**)(unint64_t *, unint64_t, uint64_t, _OWORD *, uint64_t))(a3 + 16);
                        unint64_t v18 = a1 | 0xE000000000000000LL;
                        uint64_t v19 = (unint64_t *)(a2 + 40);
                        if (v17)
                        {
                          if (v17(v19, v18, 0x2000000000000011LL, v24, a6)) {
                            return;
                          }
                        }

                        else
                        {
                          sub_18078A560(v19, v18, 0x2000000000000011uLL, (unint64_t)v24);
                          if (v20) {
                            return;
                          }
                        }

                        *(_OWORD *)(a2 + 72) = *(_OWORD *)((char *)&v24[1] + 8);
                      }

                      if ((!v15 || !(*(unsigned int (**)(uint64_t, uint64_t))(a4 + 24))(a2, a6))
                        && **(void **)(a4 + 32) <= 0x30uLL
                        && !sub_18078A6F0(a2, &v21))
                      {
                        if (v21)
                        {
                          if ((*(unsigned int (**)(void, void, uint64_t, void, uint64_t))a4)( *(void *)(a2 + 8),  *(void *)(a2 + 16),  a2 + 184,  **(void **)(a4 + 32),  a4))
                          {
                            return;
                          }

                          *(_BYTE *)a2 = 1;
                        }

                        if (!sub_18078AF10( (unint64_t *)(a2 + 56),  0LL,  *(uint64_t (**)(unint64_t, uint64_t *, uint64_t, uint64_t))a3,  a6)
                          && (a5 & 1) == 0)
                        {
                          sub_18078AF10( (unint64_t *)(a2 + 72),  1LL,  *(uint64_t (**)(unint64_t, uint64_t *, uint64_t, uint64_t))a3,  a6);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

void sub_18078B550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_18078B56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float64x2_t v24[2] = *MEMORY[0x1895F89C0];
  if (a5 != 4096 && a5 != 3072) {
    return 0xFFFFFFFFLL;
  }
  v24[0] = 0LL;
  v24[1] = 0LL;
  unint64_t v9 = (unint64_t)(a5 + 63) >> 6;
  MEMORY[0x1895F8858]();
  uint64_t v11 = (unint64_t *)((char *)&v21 - v10);
  bzero((char *)&v21 - v10, v10);
  unint64_t *v11 = v9;
  uint64_t v12 = *(unsigned int *)(a1 + 8);
  v23[0] = *(void *)a1;
  v23[1] = v12;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t result = sub_1807823D0((uint64_t)v23, 2u, (uint64_t)&unk_1807A2FA0, (unint64_t)&v21, 0x20uLL, 0x20uLL);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v14 = *((void *)&v21 + 1);
  int v15 = (unsigned __int8 *)v21;
  __int128 v16 = v22;
  if (*((void *)&v21 + 1))
  {
    while (!*v15)
    {
      ++v15;
      if (!--v14)
      {
        int v15 = (unsigned __int8 *)(v21 + *((void *)&v21 + 1));
        break;
      }
    }
  }

  if (v14 >= 0xFFFFFFFFFFFFFFF8LL)
  {
    __break(0x5500u);
    return result;
  }

  unint64_t v17 = (v14 + 7) >> 3;
  if (v17 > *v11) {
    return 0xFFFFFFFFLL;
  }
  unint64_t *v11 = v17;
  if (sub_180794A54) {
    BOOL v18 = byte_1807A4720 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    int v20 = sub_180794A54(v11, a2, *(void *)(a3 + 8), *(char **)a3, *(void *)(a4 + 8), *(unsigned __int8 **)a4, v24);
    return 0xFFFFFFFFLL;
  }

  LOBYTE(v21) = 0;
  int v19 = sub_180794860(v11, a2, *(void *)(a3 + 8), *(char **)a3, *(void *)(a4 + 8), *(unsigned __int8 **)a4, &v21);
  uint64_t result = 0xFFFFFFFFLL;
  if (!v19 && (_BYTE)v21) {
    return 0LL;
  }
  return result;
}

uint64_t sub_18078B778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v13[0] = a1;
  v13[1] = a2;
  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  if (!a4) {
    return 0xFFFFFFFFLL;
  }
  if (!a5) {
    return 0xFFFFFFFFLL;
  }
  if (!a6) {
    return 0xFFFFFFFFLL;
  }
  if (!a7) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *(void *)(a7 + 32);
  if (!v7) {
    return 0xFFFFFFFFLL;
  }
  __int128 v8 = *(void ***)(v7 + 16);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v9 = *v8;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  if (*v9 != a6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = sub_18078B56C((uint64_t)v13, v9[4], (uint64_t)v11, (uint64_t)v12, 4096LL);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_18078B80C( unint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1)
  {
    unsigned int v9 = a2;
    if (a2)
    {
      if (a3 && a4)
      {
        bzero(&v28, 0x2F0uLL);
        v26[0] = a1;
        v26[1] = v9;
        v27[0] = &unk_1807A3888;
        v27[1] = 1215LL;
        if (!sub_18078C138(v26, (uint64_t)v27, 3u)
          && !sub_18078BAF0((uint64_t)v27, 3u, (uint64_t)&v29, (uint64_t)v31, (uint64_t)v34, (uint64_t)v37))
        {
          __int128 v24 = a6;
          uint64_t v15 = 0LL;
          __int128 v16 = (const void **)v32;
          unint64_t v17 = &v30;
          BOOL v18 = (const void **)v32;
          while (1)
          {
            int v19 = &v26[20 * v15];
            size_t v20 = v19[37];
            __int128 v21 = *v18;
            v18 += 20;
            uint64_t result = sub_18078BD54(&v34[v15], v17, a7);
            if ((_DWORD)result) {
              break;
            }
            v17 += 6;
            ++v15;
            __int128 v16 = v18;
            if (v15 == 2)
            {
              __int128 v25 = 0uLL;
              if ((unint64_t)v31 > 0xFFFFFFFFFFFFFF5FLL)
              {
LABEL_34:
                __break(0x5513u);
                return result;
              }

              v42[0] = 0LL;
              v42[1] = 0LL;
              unint64_t v40 = 0LL;
              v41[0] = 0LL;
              v41[1] = 0LL;
LABEL_14:
              if (!sub_180782314(v42, &v40) && v40 == 0x2000000000000011LL)
              {
                v47[0] = 0LL;
                v47[1] = 0LL;
                unint64_t v45 = 0LL;
                v46[0] = 0LL;
                v46[1] = 0LL;
                __int128 v43 = 0u;
                __int128 v44 = 0u;
                if (!sub_1807822E8(v41, v47))
                {
                  do
                  {
                    int v22 = sub_180782314(v47, &v45);
                    if (v22)
                    {
                      if (v22 == 1) {
                        goto LABEL_14;
                      }
                      return 0xFFFFFFFFLL;
                    }

                    if (v45 != 0x2000000000000010LL
                      || sub_180782498( v46,  2u,  (uint64_t)&unk_1807A2EA8,  (unint64_t)&v43,  0x20uLL,  0x20uLL))
                    {
                      return 0xFFFFFFFFLL;
                    }
                  }

                  while (!sub_180782788((uint64_t)&off_1896FA250, (uint64_t)&v43));
                  __int128 v25 = v44;
                  uint64_t result = sub_180782788((uint64_t)&off_1896FA480, (uint64_t)&v25);
                  if (!(_DWORD)result) {
                    return 0xFFFFFFFFLL;
                  }
                  *a3 = v35;
                  *a4 = v36;
                  if (!v38) {
                    return 0LL;
                  }
                  uint64_t v23 = v39;
                  if (!v39) {
                    return 0LL;
                  }
                  uint64_t result = 0LL;
                  if (a5)
                  {
                    if (v24)
                    {
                      uint64_t result = 0LL;
                      *a5 = v38;
                      *__int128 v24 = v23;
                    }
                  }

                  return result;
                }
              }

              return 0xFFFFFFFFLL;
            }
          }
        }

        return 0xFFFFFFFFLL;
      }
    }
  }

  return result;
}

uint64_t sub_18078BAF0(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = 0LL;
  uint64_t v15 = result;
  unint64_t v18 = ~result;
  unint64_t v17 = ~a3;
  unint64_t v14 = ~a4;
  unint64_t v13 = ~a5;
  unint64_t v11 = ~a6;
  uint64_t v10 = a2;
  while (1)
  {
    unint64_t v9 = 16 * v8;
    if (16 * v8 > v18 || 48 * v8 > v17) {
      break;
    }
    uint64_t result = sub_1807823D0(v15 + 16 * v8, 3u, (uint64_t)&unk_1807A2D60, a3 + 48 * v8, 0x30uLL, 0x30uLL);
    if ((_DWORD)result) {
      return 0xFFFFFFFFLL;
    }
    if (160 * v8 > v14) {
      break;
    }
    uint64_t result = sub_1807823D0(a3 + 48 * v8, 0xAu, (uint64_t)&unk_1807A2DB0, a4 + 160 * v8, 0xA0uLL, 0xA0uLL);
    if ((_DWORD)result) {
      return 0xFFFFFFFFLL;
    }
    if (v9 > v13) {
      break;
    }
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    char v21 = 0;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    if (sub_180782498( (unint64_t *)(a4 + 160 * v8 + 96),  2u,  (uint64_t)&unk_1807A2F68,  (unint64_t)&v22,  0x20uLL,  0x20uLL)) {
      return 0xFFFFFFFFLL;
    }
    if (sub_180782498( (unint64_t *)&v22,  2u,  (uint64_t)&unk_1807A2F30,  (unint64_t)&v19,  0x20uLL,  0x20uLL)) {
      return 0xFFFFFFFFLL;
    }
    uint64_t result = sub_180782788((uint64_t)&v19, (uint64_t)&off_1896FA180);
    if (!(_DWORD)result) {
      return 0xFFFFFFFFLL;
    }
    if (*((void *)&v20 + 1))
    {
      if (*((void *)&v20 + 1) != 2LL || *(_BYTE *)v20 != 5) {
        return 0xFFFFFFFFLL;
      }
      if ((void)v20 == -1LL) {
        break;
      }
      if (*(_BYTE *)(v20 + 1)) {
        return 0xFFFFFFFFLL;
      }
    }

    uint64_t result = sub_18078200C((uint64_t)&v23, (unint64_t *)(a5 + 16 * v8), &v21);
    if ((_DWORD)result || v21) {
      return 0xFFFFFFFFLL;
    }
    if (v9 > v11) {
      break;
    }
    uint64_t result = sub_18078C210(a4 + 160 * v8, (void *)(a6 + 16 * v8));
    if ((_DWORD)result) {
      return 0xFFFFFFFFLL;
    }
    if (++v8 == v10) {
      return 0LL;
    }
  }

  __break(0x5513u);
  return result;
}

uint64_t sub_18078BD54(void *a1, void *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  char v10 = 0;
  memset(v13, 0, sizeof(v13));
  unint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  __int128 v5 = *(void **)(a3 + 32);
  if (!v5
    || !v5[2]
    || !*(void *)a3
    || !*(void *)(a3 + 40)
    || *v5 > 0x30uLL
    || sub_180782498(a2 + 2, 2u, (uint64_t)&unk_1807A2F30, (unint64_t)&v11, 0x20uLL, 0x20uLL))
  {
    return 0xFFFFFFFFLL;
  }

  if (*((void *)&v12 + 1))
  {
    uint64_t result = sub_180782788((uint64_t)&v11, (uint64_t)&xmmword_1896FA1C0);
    if ((result & 1) == 0)
    {
      if (*((void *)&v12 + 1) != 2LL || *(_BYTE *)v12 != 5) {
        return 0xFFFFFFFFLL;
      }
      if ((void)v12 == -1LL)
      {
        __break(0x5513u);
        return result;
      }

      if (*(_BYTE *)(v12 + 1)) {
        return 0xFFFFFFFFLL;
      }
    }
  }

  if ((*(unsigned int (**)(void, void, _OWORD *, void, uint64_t))a3)( *a2,  a2[1],  v13,  **(void **)(a3 + 32),  a3))
  {
    return 0xFFFFFFFFLL;
  }

  if (v10) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = (*(uint64_t (**)(void, void, unint64_t, uint64_t, _OWORD *, void, uint64_t, void))(a3 + 16))( *a1,  a1[1],  v8,  v9,  v13,  **(void **)(a3 + 32),  a3,  0LL);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_18078BEF8( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, unsigned int (*a8)(void *, _BYTE *, uint64_t))
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1)
  {
    unsigned int v10 = a2;
    if (a2)
    {
      if (a3 && a4)
      {
        bzero(v22, 0x300uLL);
        v21[0] = a1;
        v21[1] = v10;
        if (a8(v21, v22, 2LL)) {
          return 0xFFFFFFFFLL;
        }
        uint64_t result = sub_18078BAF0((uint64_t)v22, 2u, (uint64_t)v23, (uint64_t)&v24, (uint64_t)v27, (uint64_t)v28);
        if ((_DWORD)result)
        {
          return 0xFFFFFFFFLL;
        }

        else
        {
          char v16 = 1;
          uint64_t v17 = 1LL;
          while ((v16 & 1) != 0)
          {
            unint64_t v18 = &v21[20 * v17];
            if (__n == v18[33] && !memcmp(__s1, (const void *)v18[32], __n))
            {
              uint64_t result = sub_18078BD54(v27, &v23[3 * v17], a7);
              char v16 = 0;
              uint64_t v17 = 2LL;
              if (!(_DWORD)result) {
                continue;
              }
            }

            return 0xFFFFFFFFLL;
          }

          if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEFLL
            || (*a3 = v27[2], *a4 = v27[3], (unint64_t)v28 > 0xFFFFFFFFFFFFFFEFLL))
          {
            __break(0x5513u);
          }

          else if (v29 && (uint64_t v19 = v30) != 0)
          {
            uint64_t result = 0LL;
            if (a5 && a6)
            {
              uint64_t result = 0LL;
              *a5 = v29;
              *a6 = v19;
            }
          }

          else
          {
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_18078C088(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  return sub_18078BEF8( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (unsigned int (*)(void *, _BYTE *, uint64_t))sub_18078C094);
}

uint64_t sub_18078C094(unint64_t *a1, void *a2, unsigned int a3)
{
  *a2 = &unk_1807A3D80;
  a2[1] = 1374LL;
  else {
    return 0LL;
  }
}

uint64_t sub_18078C0C8(char *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a5)
  {
    unint64_t v8 = *(void **)(a5 + 32);
    if (v8 && (uint64_t v9 = (void **)v8[2]) != 0LL && *v8 == a4 && (v10 = *v9) != 0LL && *v10 == a4)
    {
      sub_18078DF18((uint64_t)v10, a2, a1, a3);
      return 0LL;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_18078C138(unint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v18 = 0LL;
  unint64_t v19 = 0LL;
  unint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  unint64_t v5 = ~a2;
  unsigned int v6 = 1;
  unint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  while (1)
  {
    unint64_t v18 = v7;
    unint64_t v19 = v8;
    uint64_t result = sub_180781C54((uint64_t)&v18, &v15);
    if ((_DWORD)result) {
      return 0xFFFFFFFFLL;
    }
    if (__CFADD__(v16, v17)) {
      break;
    }
    unint64_t v10 = v16 + v17;
    unint64_t v11 = v16 + v17 - v7;
    BOOL v12 = !(v11 >> 17) && v8 >= v11;
    if (!v12 || v6 >= a3) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v14 = (unint64_t *)(a2 + 16LL * v6);
    *uint64_t v14 = v7;
    v14[1] = v11;
    if (v10 < v7) {
      break;
    }
    BOOL v12 = v8 >= v11;
    v8 -= v11;
    if (!v12) {
      goto LABEL_21;
    }
    ++v6;
    unint64_t v7 = v10;
    if (!v8)
    {
      if (v6 == a3) {
        return 0LL;
      }
      return 0xFFFFFFFFLL;
    }
  }

  __break(0x5513u);
LABEL_21:
  __break(0x5515u);
  return result;
}

uint64_t sub_18078C210(uint64_t a1, void *a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  v9[1] = 0LL;
  uint64_t v10 = 0LL;
  unint64_t v8 = 0LL;
  v9[0] = 0LL;
  __int128 v7 = 0u;
  memset(v6, 0, sizeof(v6));
  *a2 = 0LL;
  a2[1] = 0LL;
  if (!*(void *)(a1 + 152)) {
    return 0LL;
  }
  char v3 = 1;
  while (1)
  {
    int v4 = sub_180782314(v11, &v8);
    if (v4) {
      break;
    }
    if (v8 != 0x2000000000000010LL
      || sub_180782498(v9, 3u, (uint64_t)&unk_1807A2EE0, (unint64_t)v6, 0x30uLL, 0x30uLL))
    {
      return 0xFFFFFFFFLL;
    }

    char v3 = 0;
    if (sub_180782788((uint64_t)&off_1896FA260, (uint64_t)v6))
    {
      memset(v12, 0, sizeof(v12));
      char v3 = 0;
      *(_OWORD *)a2 = v7;
    }
  }

  if (v4 != 1 || (v3 & 1) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18078C36C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, unint64_t a8)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  BOOL v22 = 0;
  uint64_t v14 = sub_180791968(a2);
  unint64_t v15 = (unint64_t *)sub_18078F894(v14);
  MEMORY[0x1895F8858]();
  uint64_t v17 = (unint64_t **)&v21[-v16];
  bzero(&v21[-v16], v16);
  uint64_t *v17 = v15;
  uint64_t result = 1LL;
  if (a1 && a5 && a7)
  {
    int v19 = sub_18078FF18(v15, a2, a1, v17);
    if (v19 == -13) {
      return 2LL;
    }
    if (v19) {
      return 6LL;
    }
    int v20 = sub_1807917B0(v17, a8, a7, a6, a5, &v22);
    if (v20 == -13) {
      return 2LL;
    }
    if (v20)
    {
      return 6LL;
    }

    else if (v22)
    {
      return 0LL;
    }

    else
    {
      return 6LL;
    }
  }

  return result;
}

uint64_t sub_18078C4D8(char *a1, size_t a2, uint64_t a3)
{
  if (!a1) {
    return 1LL;
  }
  sub_18078DF18((uint64_t)off_18C5340E8, a2, a1, a3);
  return 0LL;
}

uint64_t sub_18078C510(char *a1, size_t a2, uint64_t a3)
{
  if (!a1) {
    return 1LL;
  }
  unsigned int v6 = off_18C5340F0;
  if (!off_18C5340F0)
  {
    unsigned int v6 = sub_180799418();
    off_18C5340F0 = v6;
  }

  sub_18078DF18((uint64_t)v6, a2, a1, a3);
  return 0LL;
}

uint64_t sub_18078C574(char *a1, size_t a2, uint64_t a3)
{
  if (!a1) {
    return 1LL;
  }
  sub_18078DF18((uint64_t)off_18C5340F8, a2, a1, a3);
  return 0LL;
}

uint64_t sub_18078C5AC(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  void v12[2] = *MEMORY[0x1895F89C0];
  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  uint64_t v6 = 6LL;
  if (a6 == 20)
  {
    int v7 = sub_18078C64C((uint64_t)v12, (uint64_t)"\x06\x05+\x0E\x03\x02\x1A", (uint64_t)v10, (uint64_t)v11);
    if (v7) {
      unsigned int v8 = 6;
    }
    else {
      unsigned int v8 = 0;
    }
    if (v7 == -13) {
      return 2LL;
    }
    else {
      return v8;
    }
  }

  return v6;
}

uint64_t sub_18078C64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v19[2] = *MEMORY[0x1895F89C0];
  v19[0] = 0LL;
  v19[1] = 0LL;
  bzero(&v18, 0x638uLL);
  unint64_t v17 = 64LL;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  v16[0] = *(void *)a1;
  v16[1] = v8;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  unint64_t v9 = *((void *)&v14 + 1);
  uint64_t v10 = (unsigned __int8 *)v14;
  if (*((void *)&v14 + 1))
  {
    unint64_t v11 = 7LL;
    while (!*v10)
    {
      ++v10;
      if (!--v9)
      {
        uint64_t v10 = (unsigned __int8 *)(v14 + *((void *)&v14 + 1));
        goto LABEL_10;
      }
    }

    unint64_t v11 = v9 + 7;
    if (v9 + 7 >= 0x208) {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    unint64_t v11 = 7LL;
  }

uint64_t sub_18078C7F4(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  void v12[2] = *MEMORY[0x1895F89C0];
  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  uint64_t v6 = 6LL;
  if (a6 == 32)
  {
    if (v7) {
      unsigned int v8 = 6;
    }
    else {
      unsigned int v8 = 0;
    }
    if (v7 == -13) {
      return 2LL;
    }
    else {
      return v8;
    }
  }

  return v6;
}

uint64_t sub_18078C894(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  void v12[2] = *MEMORY[0x1895F89C0];
  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  uint64_t v6 = 6LL;
  if (a6 == 48)
  {
    if (v7) {
      unsigned int v8 = 6;
    }
    else {
      unsigned int v8 = 0;
    }
    if (v7 == -13) {
      return 2LL;
    }
    else {
      return v8;
    }
  }

  return v6;
}

void sub_18078C934(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void sub_18078C940(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t sub_18078C94C(const __CFAllocator *a1, CFTypeRef *a2, CFTypeRef cf)
{
  cfa[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  cfa[0] = 0LL;
  uint64_t v3 = 1LL;
  if (a2 && cf)
  {
    uint64_t v6 = sub_18078CA14(a1, cf, cfa, 0);
    if ((_DWORD)v6)
    {
      uint64_t v3 = v6;
      sub_18078CC68( 3LL,  (uint64_t)"AMSupportCreateDataFromFileURL",  (uint64_t)"AMSupportCopyPreserveFileURL failed.",  v7,  v8,  v9,  v10,  v11,  (char)cfa[0]);
    }

    else
    {
      uint64_t v3 = sub_18078D1C0(a1, a2, (const __CFURL *)cfa[0]);
    }

    if (cfa[0]) {
      CFRelease(cfa[0]);
    }
  }

  return v3;
}

uint64_t sub_18078CA14(const __CFAllocator *a1, CFTypeRef cf, CFTypeRef *a3, int a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v4 = 1LL;
  char v20 = 1;
  if (cf && a3)
  {
    uint64_t v7 = (const __CFURL *)CFRetain(cf);
    CFTypeRef v8 = CFRetain(cf);
    CFStringRef v9 = 0LL;
    CFMutableStringRef Mutable = 0LL;
    CFStringRef v11 = 0LL;
    uint64_t v12 = 1LL;
    while (1)
    {
      uint64_t v13 = sub_18078CEF4(v7, (BOOL *)&v20);
      if ((_DWORD)v13)
      {
        uint64_t v4 = v13;
        goto LABEL_25;
      }

      if (!v20) {
        goto LABEL_21;
      }
      if (v11) {
        CFRelease(v11);
      }
      CFStringRef v11 = CFStringCreateWithFormat(a1, 0LL, @"~%d", v12);
      if (!v11) {
        goto LABEL_38;
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v9) {
        CFRelease(v9);
      }
      CFMutableStringRef Mutable = CFStringCreateMutable(a1, 0LL);
      if (!Mutable) {
        break;
      }
      CFStringRef v9 = CFURLCopyFileSystemPath((CFURLRef)cf, kCFURLPOSIXPathStyle);
      if (!v9) {
        goto LABEL_38;
      }
      CFStringAppend(Mutable, v9);
      CFStringAppend(Mutable, v11);
      if (v8) {
        CFRelease(v8);
      }
      CFTypeRef v8 = CFRetain(v7);
      CFRelease(v7);
      CFURLRef v14 = CFURLCreateWithFileSystemPath(a1, Mutable, kCFURLPOSIXPathStyle, 0);
      if (!v14)
      {
        uint64_t v4 = 2LL;
LABEL_28:
        CFRelease(v11);
        goto LABEL_29;
      }

      uint64_t v7 = v14;
      if (v20)
      {
        BOOL v15 = v12 > 0x1E;
        uint64_t v12 = (v12 + 1);
        if (!v15) {
          continue;
        }
      }

uint64_t sub_18078CC34(int level, const char *a2)
{
  return asl_log(0LL, 0LL, level, "%s", a2);
}

void sub_18078CC68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = MEMORY[0x1895F8858]();
  CFStringRef v11 = v10;
  uint64_t v13 = v12;
  int v14 = v9;
  uint64_t v31 = *MEMORY[0x1895F89C0];
  bzero(__str, 0x1000uLL);
  BOOL v15 = "";
  if (v13) {
    BOOL v15 = v13;
  }
  unsigned int v16 = snprintf(__str, 0x1000uLL, "%s: ", v15);
  unint64_t v17 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  uint64_t v18 = CFStringCreateWithCStringNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  v11,  0x8000100u,  (CFAllocatorRef)*MEMORY[0x189604DC8]);
  if (!v18)
  {
    char v20 = 0LL;
    goto LABEL_9;
  }

  int v19 = CFStringCreateWithFormatAndArguments(v17, 0LL, v18, &a9);
  char v20 = v19;
  if (!v19)
  {
LABEL_9:
    uint64_t v28 = 0LL;
    int v27 = 0LL;
    goto LABEL_14;
  }

  uint64_t v21 = v16;
  unsigned int v22 = 4096 - v16;
  unsigned int Length = CFStringGetLength(v19);
  unsigned int v24 = Length;
  if (4096 - v16 < Length && (__int128 v25 = (char *)malloc(v16 + Length + 1)) != 0LL)
  {
    uint64_t v26 = v25;
    unsigned int v22 = v24 + 1;
    memcpy(v25, __str, v16);
    int v27 = v26;
  }

  else
  {
    int v27 = 0LL;
    uint64_t v26 = __str;
  }

  if (CFStringGetCString(v20, &v26[v21], v22, 0x8000100u)) {
    uint64_t v28 = v26;
  }
  else {
    uint64_t v28 = 0LL;
  }
LABEL_14:
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = "failed to format log message";
  }
  off_18C534100(v14, v29);
  sub_18078C934(v18);
  sub_18078C934(v20);
  sub_18078C940(v27);
}

uint64_t sub_18078CE48(char *__format, ...)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v4 = 0u;
  __int128 v5 = 0u;
  *(_OWORD *)__str = 0u;
  __int128 v3 = 0u;
  vsnprintf(__str, 0x100uLL, __format, va);
  return fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", __str);
}

uint64_t sub_18078CEF4(const __CFURL *a1, BOOL *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t result = 1LL;
  if (a1 && a2)
  {
    memset(&v7, 0, sizeof(v7));
    bzero(v6, 0x400uLL);
    if (CFURLGetFileSystemRepresentation(a1, 1u, v6, 1024LL))
    {
      int v5 = stat((const char *)v6, &v7);
      uint64_t result = 0LL;
      *a2 = v5 == 0;
    }

    else
    {
      return 3LL;
    }
  }

  return result;
}

uint64_t sub_18078CFC0(void *a1, off_t *a2, char *a3)
{
  char v3 = (char)a3;
  uint64_t v56 = *MEMORY[0x1895F89C0];
  memset(&v55, 0, sizeof(v55));
  int v6 = open(a3, 0, 0LL);
  if ((v6 & 0x80000000) == 0)
  {
    int v7 = v6;
    if (fstat(v6, &v55) < 0)
    {
      unsigned int v24 = __error();
      char v25 = strerror(*v24);
      sub_18078CC68( 3LL,  (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath",  (uint64_t)"fstat failed: %s",  v26,  v27,  v28,  v29,  v30,  v25);
      sub_18078CC68( 7LL,  (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath",  (uint64_t)"%s",  v31,  v32,  v33,  v34,  v35,  v3);
    }

    else
    {
      off_t st_size = v55.st_size;
      __int128 v9 = malloc(v55.st_size);
      if (!v9)
      {
        uint64_t v36 = __error();
        strerror(*v36);
        sub_18078CC68( 3LL,  (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath",  (uint64_t)"malloc(%d) failed: %s",  v37,  v38,  v39,  v40,  v41,  st_size);
        uint64_t v11 = 2LL;
        goto LABEL_11;
      }

      __int128 v10 = v9;
      if (read(v7, v9, st_size) == st_size)
      {
        uint64_t v11 = 0LL;
        *a1 = v10;
        *a2 = st_size;
LABEL_11:
        close(v7);
        return v11;
      }

      CFTypeID v42 = __error();
      char v43 = strerror(*v42);
      sub_18078CC68( 3LL,  (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath",  (uint64_t)"read failed: %s",  v44,  v45,  v46,  v47,  v48,  v43);
      sub_18078CC68( 7LL,  (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath",  (uint64_t)"%s",  v49,  v50,  v51,  v52,  v53,  v3);
      free(v10);
    }

    uint64_t v11 = 4LL;
    goto LABEL_11;
  }

  __int128 v12 = __error();
  char v13 = strerror(*v12);
  sub_18078CC68( 3LL,  (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath",  (uint64_t)"open failed: %s",  v14,  v15,  v16,  v17,  v18,  v13);
  sub_18078CC68( 7LL,  (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath",  (uint64_t)"%s",  v19,  v20,  v21,  v22,  v23,  v3);
  return 4LL;
}

uint64_t sub_18078D1C0(const __CFAllocator *a1, CFTypeRef *a2, const __CFURL *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  bzero(buffer, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a3, 1u, buffer, 1024LL))
  {
    off_t v12 = 0LL;
    char v13 = 0LL;
    uint64_t v6 = sub_18078CFC0(&v13, &v12, (char *)buffer);
    if ((_DWORD)v6)
    {
      uint64_t v10 = v6;
      CFDataRef v9 = 0LL;
    }

    else
    {
      int v7 = v13;
      CFDataRef v8 = CFDataCreateWithBytesNoCopy(a1, v13, v12, (CFAllocatorRef)*MEMORY[0x189604DB8]);
      CFDataRef v9 = v8;
      if (v8)
      {
        uint64_t v10 = 0LL;
        *a2 = CFRetain(v8);
      }

      else
      {
        free(v7);
        uint64_t v10 = 2LL;
      }
    }
  }

  else
  {
    CFDataRef v9 = 0LL;
    uint64_t v10 = 3LL;
  }

  sub_18078C934(v9);
  return v10;
}

uint64_t sub_18078D2D0(uint64_t result, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5)
{
  if (a3)
  {
    uint64_t v5 = *(unsigned int *)(result + 240);
    if ((_DWORD)v5 == 160 || (_DWORD)v5 == 192 || (_DWORD)v5 == 224)
    {
      do
      {
        uint64_t v6 = v5 - 16;
        a4 += 16LL;
        _Q2 = *(int8x16_t *)result;
        int v7 = (int8x16_t *)(result + 16);
        do
        {
          __asm
          {
            AESE            V0.16B, V2.16B
            AESMC           V0.16B, V0.16B
          }

          _Q2 = *v7++;
          BOOL v15 = v6 <= 16;
          v6 -= 16LL;
        }

        while (!v15);
        __asm { AESE            V0.16B, V2.16B }

        int8x16_t v17 = veorq_s8(_Q0, *v7);
        uint64_t result = (uint64_t)v7->i64 - v5;
        *a5++ = v17;
        BOOL v15 = a3-- <= 1;
      }

      while (!v15);
      uint64_t result = 0LL;
      *a2 = v17;
    }

    else
    {
      return -1LL;
    }
  }

  return result;
}

uint64_t sub_18078D350(unint64_t *a1, uint64_t a2, int a3, int a4)
{
  __int128 v4 = &byte_1807A42E8;
  *(_DWORD *)(a2 + 240) = 16 * a4;
  if (a3 == 6)
  {
    unint64_t v15 = *a1;
    unint64_t v16 = a1[1];
    uint64_t v14 = (uint64_t *)(a1 + 2);
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = v16;
    int8x16_t v17 = (uint64_t *)(a2 + 16);
    uint64_t v18 = *v14;
    uint64_t *v17 = *v14;
    uint64_t v19 = (unint64_t *)(v17 + 1);
    int v20 = 4 * a4 - 2;
    do
    {
      HIDWORD(v21) = HIDWORD(v18);
      LODWORD(v21) = HIDWORD(v18);
      unsigned int v22 = *v4++;
      uint64_t result = v22;
      uint64_t v23 = (byte_1807A42F4[BYTE5(v18)] | (byte_1807A42F4[(v21 >> 8) >> 24] << 24) | (byte_1807A42F4[((v21 >> 8) >> 16)] << 16) | (byte_1807A42F4[(unsigned __int16)(HIDWORD(v18) >> 8) >> 8] << 8)) ^ v22;
      v15 ^= v23 ^ ((v15 ^ v23) << 32);
      v16 ^= HIDWORD(v15) ^ ((v16 ^ HIDWORD(v15)) << 32);
      v18 ^= HIDWORD(v16) ^ ((v18 ^ HIDWORD(v16)) << 32);
      *uint64_t v19 = v15;
      v19[1] = v16;
      unsigned int v24 = v19 + 2;
      *unsigned int v24 = v18;
      uint64_t v19 = v24 + 1;
      BOOL v13 = __OFSUB__(v20, 6);
      v20 -= 6;
    }

    while (!((v20 < 0) ^ v13 | (v20 == 0)));
  }

  else if (a3 == 8)
  {
    unint64_t v26 = *a1;
    unint64_t v27 = a1[1];
    char v25 = a1 + 2;
    *(void *)a2 = v26;
    *(void *)(a2 + 8) = v27;
    uint64_t v28 = (unint64_t *)(a2 + 16);
    unint64_t v29 = *v25;
    unint64_t v30 = v25[1];
    unint64_t *v28 = *v25;
    v28[1] = v30;
    uint64_t v31 = v28 + 2;
    int v32 = 4 * a4 - 4;
    do
    {
      HIDWORD(v33) = HIDWORD(v30);
      LODWORD(v33) = HIDWORD(v30);
      unsigned int v34 = *v4++;
      uint64_t result = v34;
      uint64_t v35 = (byte_1807A42F4[BYTE5(v30)] | (byte_1807A42F4[(v33 >> 8) >> 24] << 24) | (byte_1807A42F4[((v33 >> 8) >> 16)] << 16) | (byte_1807A42F4[(unsigned __int16)(HIDWORD(v30) >> 8) >> 8] << 8)) ^ v34;
      v26 ^= v35 ^ ((v26 ^ v35) << 32);
      v27 ^= HIDWORD(v26) ^ ((v27 ^ HIDWORD(v26)) << 32);
      unint64_t *v31 = v26;
      v31[1] = v27;
      uint64_t v36 = v31 + 2;
      int v37 = v32 - 4;
      if (!v37) {
        break;
      }
      uint64_t result = byte_1807A42F4[HIBYTE(HIDWORD(v27))];
      uint64_t v38 = byte_1807A42F4[BYTE4(v27)] | ((_DWORD)result << 24) | (byte_1807A42F4[BYTE6(v27)] << 16) | (byte_1807A42F4[BYTE5(v27)] << 8);
      v29 ^= v38 ^ ((v29 ^ v38) << 32);
      v30 ^= HIDWORD(v29) ^ ((v30 ^ HIDWORD(v29)) << 32);
      *uint64_t v36 = v29;
      v36[1] = v30;
      uint64_t v31 = v36 + 2;
      BOOL v13 = __OFSUB__(v37, 4);
      int v32 = v37 - 4;
    }

    while (!((v32 < 0) ^ v13 | (v32 == 0)));
  }

  else
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *(void *)a2 = *a1;
    *(void *)(a2 + 8) = v6;
    int v7 = (unint64_t *)(a2 + 16);
    int v8 = 4 * a4;
    do
    {
      HIDWORD(v9) = HIDWORD(v6);
      LODWORD(v9) = HIDWORD(v6);
      unsigned int v11 = *v4++;
      uint64_t result = v11;
      uint64_t v12 = (byte_1807A42F4[BYTE5(v6)] | (byte_1807A42F4[(v9 >> 8) >> 24] << 24) | (byte_1807A42F4[((v9 >> 8) >> 16)] << 16) | (byte_1807A42F4[(unsigned __int16)(HIDWORD(v6) >> 8) >> 8] << 8)) ^ v11;
      v5 ^= v12 ^ ((v5 ^ v12) << 32);
      v6 ^= HIDWORD(v5) ^ ((v6 ^ HIDWORD(v5)) << 32);
      unint64_t *v7 = v5;
      v7[1] = v6;
      v7 += 2;
      BOOL v13 = __OFSUB__(v8, 4);
      v8 -= 4;
    }

    while (!((v8 < 0) ^ v13 | (v8 == 0)));
  }

  return result;
}

uint64_t sub_18078D540(unint64_t *a1, uint64_t a2)
{
  return sub_18078D350(a1, a2, 4, 10);
}

uint64_t sub_18078D550(unint64_t *a1, uint64_t a2)
{
  return sub_18078D350(a1, a2, 6, 12);
}

uint64_t sub_18078D560(unint64_t *a1, uint64_t a2)
{
  return sub_18078D350(a1, a2, 8, 14);
}

__n128 sub_18078D570(unint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  __int128 v4 = (__n128 *)(a2 + 16);
  uint64_t v5 = a4 - 1;
  do
  {
    --v5;
    _Q0 = *v4;
    __asm { AESIMC          V0.16B, V0.16B }

    *v4++ = result;
  }

  while (!(_NF ^ _VF | _ZF));
  return result;
}

double sub_18078D5B0(unint64_t *a1, uint64_t a2)
{
  *(void *)&double result = sub_18078D570(a1, a2, 4, 10LL).n128_u64[0];
  return result;
}

double sub_18078D5D0(unint64_t *a1, uint64_t a2)
{
  *(void *)&double result = sub_18078D570(a1, a2, 6, 12LL).n128_u64[0];
  return result;
}

double sub_18078D5F0(unint64_t *a1, uint64_t a2)
{
  *(void *)&double result = sub_18078D570(a1, a2, 8, 14LL).n128_u64[0];
  return result;
}

uint64_t sub_18078D610(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6 = a2;
  unint64_t v8 = a3;
  if (a3 > 32) {
    unint64_t v8 = (unint64_t)a3 >> 3;
  }
  switch(v8)
  {
    case 0x10uLL:
      sub_18078D540(a4, v6);
      break;
    case 0x18uLL:
      sub_18078D550(a4, v6);
      break;
    case 0x20uLL:
      sub_18078D560(a4, v6);
      break;
    default:
      return -1LL;
  }

  return 0LL;
}

uint64_t sub_18078D680(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6 = a2;
  unint64_t v8 = a3;
  if (a3 > 32) {
    unint64_t v8 = (unint64_t)a3 >> 3;
  }
  switch(v8)
  {
    case 0x10uLL:
      sub_18078D5B0(a4, v6);
      break;
    case 0x18uLL:
      sub_18078D5D0(a4, v6);
      break;
    case 0x20uLL:
      sub_18078D5F0(a4, v6);
      break;
    default:
      return -1LL;
  }

  return 0LL;
}

uint64_t sub_18078D6EC(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = sub_180792F2C();
  for (uint64_t i = __ROR8__(0x5555555555555555LL, a2 | (2 * result)); a1; --a1)
  {
    uint64_t v10 = *a4 ^ *a3;
    *a3 ^= result;
    uint64_t v11 = *a4 ^ result;
    *a4 = v11;
    uint64_t v12 = *a3 ^ v10 & 0x5555555555555555LL;
    uint64_t v13 = v11 ^ v10 & 0x5555555555555555LL;
    uint64_t v14 = v10 & i;
    *a3++ = v12 ^ v14 ^ result;
    *a4++ = v13 ^ v14 ^ result;
  }

  return result;
}

uint64_t sub_18078D784(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = sub_180792314(a2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  uint64_t v11 = (unint64_t *)sub_180799370(a2);
  if (sub_180793C34(v8, v10, v11, 2uLL)) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = sub_180792F48(a1, a2, a3, a4, v10);
  }
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_18078D828(unsigned __int8 **a1, uint64_t a2, unsigned __int8 **a3)
{
  unint64_t v8 = 0LL;
  uint64_t result = sub_18078DAAC(a1, a2, &v8, 0);
  if ((_DWORD)result)
  {
    uint64_t v6 = *a1;
    int v7 = &(*a1)[v8];
    *a1 = v7;
    *a3 = v6;
    a3[1] = v7;
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
  }

  return result;
}

uint64_t sub_18078D880(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_18078D888(a1, a2, 1);
}

uint64_t sub_18078D888(unsigned __int8 **a1, unint64_t *a2, int a3)
{
  __int128 v4 = *a1;
  unint64_t v3 = (unint64_t)a1[1];
  if (*a1) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v7 = v4 + 1;
  unint64_t v8 = *v4;
  if ((char)*v4 < 0)
  {
    switch(*v4)
    {
      case 0x81u:
        if ((uint64_t)(v3 - (void)v7) >= 1)
        {
          int v7 = v4 + 2;
          int v10 = (char)v4[1];
          unint64_t v8 = v10;
          if (!a3 || v10 < 0) {
            break;
          }
        }

        goto LABEL_10;
      case 0x82u:
        if ((uint64_t)(v3 - (void)v7) >= 2)
        {
          int v7 = v4 + 3;
          unint64_t v8 = __rev16(*(unsigned __int16 *)(v4 + 1));
          if (!a3 || v8 >= 0x100) {
            break;
          }
        }

        goto LABEL_10;
      case 0x83u:
        if ((uint64_t)(v3 - (void)v7) >= 3)
        {
          int v7 = v4 + 4;
          unint64_t v8 = ((unint64_t)v4[1] << 16) | ((unint64_t)v4[2] << 8) | v4[3];
          if (!a3 || v8 >= 0x10000) {
            break;
          }
        }

        goto LABEL_10;
      case 0x84u:
        if ((uint64_t)(v3 - (void)v7) >= 4)
        {
          int v7 = v4 + 5;
          unint64_t v8 = bswap32(*(_DWORD *)(v4 + 1));
          if (!a3 || v8 >> 24) {
            break;
          }
        }

        goto LABEL_10;
      default:
        goto LABEL_10;
    }
  }

  if (v3 - (unint64_t)v7 < v8)
  {
LABEL_10:
    uint64_t result = 0LL;
    *a2 = 0LL;
  }

  else
  {
    *a2 = v8;
    *a1 = v7;
    return 1LL;
  }

  return result;
}

uint64_t sub_18078D9A4(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_18078D888(a1, a2, 0);
}

uint64_t sub_18078D9AC(unsigned __int8 **a1, unint64_t a2, void *a3, void *a4)
{
  unint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t result = sub_18078DA24(a1, &v8);
  if ((_DWORD)result)
  {
    uint64_t result = sub_18078DB98(&v8, a2, a3);
    if ((_DWORD)result)
    {
      uint64_t result = sub_18078DB98(&v8, a2, a4);
      if ((_DWORD)result) {
        return v8 == v9;
      }
    }
  }

  return result;
}

uint64_t sub_18078DA24(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_18078D828(a1, 0x2000000000000010LL, a2);
}

uint64_t sub_18078DA34(unsigned __int8 **a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = (unint64_t)a1[1];
  if (*a1) {
    BOOL v4 = (unint64_t)v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0LL;
  }
  unsigned int v8 = *v2;
  uint64_t v6 = v2 + 1;
  unint64_t v7 = v8;
  unint64_t v9 = v8 & 0x1F;
  if (v9 == 31)
  {
    unint64_t v9 = 0LL;
    while (1)
    {
      uint64_t v5 = 0LL;
      unint64_t v10 = v9;
      if (v9 >> 57) {
        break;
      }
      char v11 = *v6++;
      unint64_t v9 = v11 & 0x7F | (v9 << 7);
      if ((v11 & 0x80) == 0)
      {
        if (v10 >> 54) {
          return 0LL;
        }
        goto LABEL_13;
      }
    }
  }

  else
  {
LABEL_13:
    *a2 = v9 | (v7 >> 5 << 61);
    *a1 = v6;
    return 1LL;
  }

  return v5;
}

uint64_t sub_18078DAAC(unsigned __int8 **a1, uint64_t a2, unint64_t *a3, int a4)
{
  unint64_t v10 = 0LL;
  *a3 = 0LL;
  int v8 = sub_18078DA34(a1, &v10);
  uint64_t result = 0LL;
  if (v8 && v10 == a2)
  {
    if (a4) {
      return sub_18078D880(a1, a3);
    }
    else {
      return sub_18078D9A4(a1, a3);
    }
  }

  return result;
}

BOOL sub_18078DB24(unsigned __int8 **a1, unint64_t a2, void *a3)
{
  unint64_t v3 = *a1;
  BOOL v4 = a1[1];
  if (!*v3)
  {
    if (++v3 == v4)
    {
      unint64_t v3 = a1[1];
      goto LABEL_4;
    }

    if (((char)*v3 & 0x80000000) == 0)
    {
LABEL_7:
      uint64_t v5 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      return v5;
    }
  }

LABEL_4:
  *a1 = v3;
  return sub_180793650(a2, a3, v4 - v3, v3) == 0;
}

uint64_t sub_18078DB98(unsigned __int8 **a1, unint64_t a2, void *a3)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  uint64_t result = sub_18078D828(a1, 2LL, v6);
  if ((_DWORD)result) {
    return sub_18078DB24(v6, a2, a3);
  }
  return result;
}

uint64_t sub_18078DBE4(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    unint64_t v2 = result;
    uint64_t result = 0LL;
    unint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *a2++;
      ++v3;
      if (v4) {
        uint64_t result = v3;
      }
    }

    while (v3 < v2);
  }

  return result;
}

void *sub_18078DC10(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = sub_180792314(a2);
  return sub_180793720(v6, a3, a4);
}

uint64_t sub_18078DC40(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 56LL))();
}

void sub_18078DC4C()
{
}

uint64_t sub_18078DC58(uint64_t result)
{
  if ((_DWORD)result) {
    sub_180793198();
  }
  return result;
}

unint64_t sub_18078DC70(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = sub_180792314(a1);
  BOOL v7 = sub_1807935CC(v6, a3) != 0;
  int v8 = (uint64_t *)sub_180799370(a1);
  return sub_180797428(v6, v7, a2, (unint64_t *)a3, v8);
}

unint64_t sub_18078DCD8(uint64_t a1, unsigned __int8 a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = sub_180792314(a1);
  uint64_t v9 = (sub_1807935CC(v8, a4) != 0) & a2;
  unint64_t v10 = (uint64_t *)sub_180799370(a1);
  return sub_180797428(v8, v9, a3, (unint64_t *)a4, v10);
}

void *sub_18078DD48(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = sub_180792314(a2);
  return sub_180793720(v6, a3, a4);
}

uint64_t sub_18078DD78(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 64LL))();
}

unint64_t sub_18078DD90(uint64_t a1, void *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4 = 0LL;
  if ((a1 & 1) != 0)
  {
    unint64_t v5 = *a3++;
    unint64_t v4 = (v5 * (unsigned __int128)a4) >> 64;
    *a2++ = v5 * a4;
    --a1;
  }

  if ((a1 & 2) != 0)
  {
    unint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    a3 += 2;
    unsigned __int128 v8 = v6 * (unsigned __int128)a4 + __PAIR128__(v7 * a4, v4);
    unint64_t v4 = (__CFADD__(__CFADD__(v6 * a4, v4), (v6 * (unsigned __int128)a4) >> 64) | __CFADD__( v7 * a4,  *((void *)&v8 + 1)))
       + ((v7 * (unsigned __int128)a4) >> 64);
    *(_OWORD *)a2 = v8;
    a2 += 2;
    a1 -= 2LL;
  }

  while (1)
  {
    BOOL v9 = a1 < 4;
    a1 -= 4LL;
    if (v9) {
      break;
    }
    unint64_t v11 = *a3;
    unint64_t v12 = a3[1];
    unint64_t v10 = a3 + 2;
    unint64_t v14 = *v10;
    unint64_t v15 = v10[1];
    a3 = v10 + 2;
    uint64_t v16 = (v12 * (unsigned __int128)a4) >> 64;
    BOOL v17 = __CFADD__(__CFADD__(v11 * a4, v4), (v11 * (unsigned __int128)a4) >> 64);
    unsigned __int128 v13 = v11 * (unsigned __int128)a4 + __PAIR128__(v12 * a4, v4);
    *(_OWORD *)a2 = v13;
    uint64_t v18 = a2 + 2;
    uint64_t v19 = (v14 * (unsigned __int128)a4) >> 64;
    uint64_t v20 = v16 + (v17 | __CFADD__(v12 * a4, *((void *)&v13 + 1))) + v14 * a4;
    uint64_t v22 = __CFADD__(v17 | __CFADD__(v12 * a4, *((void *)&v13 + 1)), v14 * a4) | __CFADD__(v16, (v17 | __CFADD__(v12 * a4, *((void *)&v13 + 1))) + v14 * a4);
    BOOL v17 = __CFADD__(v22, v19);
    uint64_t v21 = v22 + v19;
    unint64_t v4 = (v17 | __CFADD__(v15 * a4, v21)) + ((v15 * (unsigned __int128)a4) >> 64);
    void *v18 = v20;
    v18[1] = v15 * a4 + v21;
    a2 = v18 + 2;
  }

  return v4;
}

uint64_t sub_18078DE38(uint64_t a1, size_t a2, char *a3, uint64_t a4)
{
  v11[1] = *MEMORY[0x1895F89C0];
  size_t v8 = (*(void *)(a1 + 8) + *(void *)(a1 + 16) + 19LL) & 0xFFFFFFFFFFFFFFF8LL;
  BOOL v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  bzero(v9, v8);
  sub_18078E154(a1, v9);
  sub_18078E1B8((unint64_t *)a1, v9, a2, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(a1 + 56))(a1, v9, a4);
  return sub_1807980F8(*(void *)(a1 + 8) + *(void *)(a1 + 16) + 12LL, v9);
}

uint64_t sub_18078DF18(uint64_t a1, size_t a2, char *a3, uint64_t a4)
{
  BOOL v9 = sub_1807974D4();
  sub_18078DE38(a1, a2, a3, a4);
  return sub_1807995F4((unsigned int *)&v9);
}

uint64_t sub_18078DF78(uint64_t a1, const void *a2, uint64_t a3)
{
  v20[1] = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = (uint64_t)a2 + v7 + 8;
  size_t v9 = (v7 + v6 + 19) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (void *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  bzero(v10, v9);
  memcpy(v10, a2, v7 + v6 + 12);
  unint64_t v11 = (char *)v10 + v7;
  uint64_t v12 = (uint64_t)v10 + v7 + 8;
  unsigned __int128 v13 = (char *)(v12 + v6);
  uint64_t v14 = *(unsigned int *)(v12 + v6);
  *v10 += (8 * v14);
  *(_DWORD *)(v12 + v6) = v14 + 1;
  *(_BYTE *)(v12 + v14) = 0x80;
  unint64_t v15 = *(unsigned int *)(v12 + v6);
  if (v15 < 0x39)
  {
    if (v15 == 56) {
      goto LABEL_9;
    }
  }

  else
  {
    if (v15 <= 0x3F)
    {
      do
      {
        *(_DWORD *)unsigned __int128 v13 = v15 + 1;
        *(_BYTE *)(v12 + v15) = 0;
        unint64_t v15 = *(unsigned int *)v13;
      }

      while (v15 < 0x40);
    }

    (*(void (**)(void *, uint64_t))(a1 + 48))(v10 + 1, 1LL);
    unint64_t v15 = 0LL;
    unint64_t v11 = (char *)v10 + *(void *)(a1 + 8);
    uint64_t v12 = (uint64_t)(v11 + 8);
    unsigned __int128 v13 = &v11[*(void *)(a1 + 16) + 8];
    *(_DWORD *)unsigned __int128 v13 = 0;
  }

  do
  {
    *(_DWORD *)unsigned __int128 v13 = v15 + 1;
    *(_BYTE *)(v12 + v15) = 0;
    unint64_t v15 = *(unsigned int *)v13;
  }

  while (v15 < 0x38);
LABEL_9:
  *((void *)v11 + 8) = bswap64(*v10);
  (*(void (**)(void *, uint64_t))(a1 + 48))(v10 + 1, 1LL);
  if (*(void *)a1 >= 4uLL)
  {
    unsigned int v16 = 0;
    unint64_t v17 = 0LL;
    unsigned int v18 = 1;
    do
    {
      *(_DWORD *)(a3 + v16) = bswap32(*((_DWORD *)v10 + v17 + 2));
      unint64_t v17 = v18++;
      v16 += 4;
    }

    while (v17 < *(void *)a1 >> 2);
  }

  return sub_1807980F8(*(void *)(a1 + 8) + *(void *)(a1 + 16) + 12LL, v10);
}

void *sub_18078E154(uint64_t a1, void *a2)
{
  uint64_t result = memcpy(a2 + 1, *(const void **)(a1 + 40), *(void *)(a1 + 8));
  *a2 = 0LL;
  *(_DWORD *)((char *)a2 + *(void *)(a1 + 8) + *(void *)(a1 + 16) + 8) = 0;
  return result;
}

unint64_t sub_18078E198(uint64_t *a1)
{
  return (unint64_t)(sub_18079231C(*a1) + 7) >> 3;
}

unint64_t *sub_18078E1B8(unint64_t *result, void *a2, size_t a3, char *__src)
{
  size_t v5 = a3;
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (uint64_t)a2 + result[1] + 8;
  if (a3)
  {
    unint64_t v10 = a2 + 1;
    do
    {
      size_t v11 = v7[2];
      uint64_t v12 = (char *)v10 + v7[1];
      uint64_t v13 = *(unsigned int *)&v12[v11];
      if (v5 > v11 && (_DWORD)v13 == 0)
      {
        if (v11 == 128)
        {
          size_t v22 = v5 >> 7;
          size_t v16 = v5 & 0xFFFFFFFFFFFFFF80LL;
        }

        else if (v11 == 64)
        {
          size_t v22 = v5 >> 6;
          size_t v16 = v5 & 0xFFFFFFFFFFFFFFC0LL;
        }

        else
        {
          size_t v22 = v5 / v11;
          size_t v16 = v5 / v11 * v11;
        }

        uint64_t result = (unint64_t *)((uint64_t (*)(void *, size_t, char *))v7[6])(a2 + 1, v22, __src);
        *a2 += 8 * v16;
      }

      else
      {
        size_t v15 = v11 - v13;
        if (v15 >= v5) {
          size_t v16 = v5;
        }
        else {
          size_t v16 = v15;
        }
        uint64_t result = (unint64_t *)memcpy(&v12[v13], __src, v16);
        unint64_t v17 = v7[2];
        unsigned int v18 = (char *)v10 + v7[1];
        uint64_t v19 = (*(_DWORD *)&v18[v17] + v16);
        *(_DWORD *)&v18[v17] = v19;
        if (v17 == v19)
        {
          uint64_t result = (unint64_t *)((uint64_t (*)(void *, uint64_t))v7[6])(a2 + 1, 1LL);
          unint64_t v20 = v7[2];
          uint64_t v21 = (char *)v10 + v7[1];
          *a2 += (8 * *(_DWORD *)&v21[v20]);
          *(_DWORD *)&v21[v20] = 0;
        }
      }

      __src += v16;
      v5 -= v16;
    }

    while (v5);
  }

  return result;
}

uint64_t sub_18078E2F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  if (sub_180792B10(a2, a4)) {
    return 4294967289LL;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  uint64_t v9 = sub_180792308(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_18078DD78(a1, (uint64_t)a2);
  sub_18078DD78(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v8;
  return v9;
}

uint64_t sub_18078E424(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  if (sub_180792B10(a2, a4)) {
    return 4294967289LL;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  sub_180799364(a1, (uint64_t)a2);
  uint64_t v9 = sub_180792308(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_18078DD78(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v8;
  return v9;
}

void *sub_18078E4F8()
{
  return &unk_1896FA490;
}

uint64_t sub_18078E504(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v16[3] = *MEMORY[0x1895F89C0];
  uint64_t v7 = a4[4];
  v16[0] = a4[3];
  v16[1] = v16[0];
  void v16[2] = 0LL;
  v15[0] = 0LL;
  v15[1] = v7;
  unint64_t v15[2] = v7;
  v14[0] = a4[5];
  v14[1] = v14[0];
  unint64_t v14[2] = v14[0];
  BOOL v8 = sub_180792D68(a1, 3LL, a3, a4, v16);
  BOOL v9 = sub_180792D68(a1, 3LL, a3, a3, v15) + v8;
  v13[0] = v9 + sub_180792D68(a1, 3LL, a3, a3, v14);
  v13[1] = v13[0];
  void v13[2] = 0LL;
  LOBYTE(v9) = sub_180792D68(a1, 3LL, v13, a3, v13);
  unint64_t v10 = (unint64_t *)sub_180799370(a2);
  BOOL v11 = sub_180793B6C(a1, 3LL, a3, v13, v10);
  return sub_180792ECC(3LL, !v11 | v9, a3, a3, v13);
}

unint64_t sub_18078E62C(uint64_t a1, unint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * a2);
  unint64_t result = sub_1807935C8(a2 - 1, (void *)(v9 + 8), a4 + 1, *a4);
  *(void *)(v9 + 8 * a2) = result;
  __int128 v11 = *a4;
  *a3 = *a4 * *a4;
  unint64_t v12 = *(void *)(v9 + 8);
  else {
    uint64_t v13 = v12 >> 63;
  }
  a3[1] = (__PAIR128__(2LL, v11) * v11) >> 64;
  unint64_t v14 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = v9 + 8 * a2 + 8;
    unint64_t v17 = (unint64_t *)(v9 + 24);
    unsigned int v18 = a3 + 3;
    do
    {
      unint64_t result = sub_180791B6C(v14, v17, &a4[v15 + 2], a4[v15 + 1]);
      *(void *)(v16 + v15 * 8) = result;
      unint64_t v19 = a4[v15 + 1];
      uint64_t v20 = (v19 * (unsigned __int128)v19) >> 64;
      unint64_t v21 = v19 * v19;
      BOOL v22 = __CFADD__(v21, v13);
      unint64_t v23 = v21 + v13;
      if (v22) {
        ++v20;
      }
      unint64_t v24 = *(v17 - 1);
      *(v18 - 1) = v23 + 2 * v24;
      unint64_t v25 = *v17;
      v17 += 2;
      uint64_t v26 = v25 >> 63;
      BOOL v22 = __CFADD__(v20, 2 * v25);
      uint64_t v27 = v20 + 2 * v25;
      if (v22) {
        uint64_t v28 = v26 + 1;
      }
      else {
        uint64_t v28 = v26;
      }
      BOOL v22 = __CFADD__(__CFADD__(v23, 2 * v24), v27) | __CFADD__(v24 >> 63, __CFADD__(v23, 2 * v24) + v27);
      unint64_t v29 = (v24 >> 63) + __CFADD__(v23, 2 * v24) + v27;
      if (v22) {
        uint64_t v13 = v28 + 1;
      }
      else {
        uint64_t v13 = v28;
      }
      unint64_t *v18 = v29;
      v18 += 2;
      ++v15;
      --v14;
    }

    while (v14 != -1LL);
  }

  *(void *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_18078E750(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  return sub_180792440(a1, a2, a3, a4, 0x60uLL, qword_1807A43F8, &unk_1807A4418);
}

uint64_t sub_18078E768(uint64_t a1, uint64_t a2)
{
  return sub_1807990F0(a1, a2);
}

uint64_t sub_18078E77C(uint64_t a1, uint64_t a2)
{
  return sub_1807990F0(a1, a2);
}

uint64_t sub_18078E790(uint64_t a1, uint64_t a2)
{
  return sub_1807990F0(a1, a2);
}

void *sub_18078E7A4()
{
  return &unk_1896FA5E0;
}

uint64_t sub_18078E7B0(uint64_t a1, uint64_t a2, uint64_t *a3, int8x16_t *a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v15 = 0LL;
  memset(v14, 0, sizeof(v14));
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  sub_180793734(9LL, v12, a4 + 4, 9LL);
  v13 += a4[4].i64[0] & 0x1FF;
  uint64_t v8 = sub_180792D68(a1, 8LL, v12, v12[0].i64, a4->i64);
  v13 += v8;
  uint64_t v9 = (unint64_t *)sub_180799370(a2);
  char v10 = sub_180793B6C(a1, 9LL, v14, v12[0].i64, v9);
  return sub_180792ECC(9LL, v10, a3, v12[0].i64, (uint64_t *)v14);
}

uint64_t sub_18078E8B4(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_180799364(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  uint64_t result = sub_18079940C(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_18078EB3C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9 = *a2;
  uint64_t v14 = *(void *)(a1 + 16);
  char v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  __int128 v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  if (a6) {
    sub_1807983A8(a1, (uint64_t)a2);
  }
  else {
    sub_18079940C(a1, (uint64_t)a2);
  }
  if (sub_1807935CC(v9, v10) || sub_1807935CC(v9, v11))
  {
    if (sub_1807935CC(v9, v10) || !sub_1807935CC(v9, v11))
    {
      sub_1807983A8(a1, (uint64_t)a2);
      sub_18079940C(a1, (uint64_t)a2);
      sub_1807983A8(a1, (uint64_t)a2);
      sub_18079940C(a1, (uint64_t)a2);
      sub_1807990F0(a1, (uint64_t)a2);
      sub_180799364(a1, (uint64_t)a2);
      sub_1807990F0(a1, (uint64_t)a2);
      sub_1807990F0(a1, (uint64_t)a2);
      sub_180799364(a1, (uint64_t)a2);
      sub_18079940C(a1, (uint64_t)a2);
      sub_18079940C(a1, (uint64_t)a2);
      sub_18079940C(a1, (uint64_t)a2);
      sub_1807990F0(a1, (uint64_t)a2);
      sub_1807990F0(a1, (uint64_t)a2);
      sub_18079940C(a1, (uint64_t)a2);
      uint64_t result = sub_180798780(a1, (uint64_t)a2, (int8x16_t *)&a3[v9], &a3[v9]);
    }

    else
    {
      sub_1807973D4(v9, a3, 1LL);
      sub_18078DC40(a1, (uint64_t)a2);
      sub_180793720(v9, &a3[v9], a3);
      uint64_t result = sub_1807980F8(8 * v9, &a3[2 * v9]);
    }
  }

  else
  {
    uint64_t result = sub_18078E8B4(a1, a2);
  }

  *(void *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_18078EECC(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, char *a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *a2;
  if (sub_180792B10(a2, a4))
  {
    sub_180793720(v11, a3, a5);
    sub_180793720(v11, &a3[8 * *a2], &a5[8 * *a2]);
    uint64_t result = (uint64_t)sub_180793720(v11, &a3[16 * *a2], &a5[16 * *a2]);
  }

  else
  {
    uint64_t result = sub_18078EB3C(a1, a2, a3, a4, (uint64_t)a5, 0);
  }

  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_18078EF84(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = sub_180792314((uint64_t)a2);
  uint64_t v16 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  sub_18078F670(a1, (uint64_t)a2);
  sub_18078F670(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  uint64_t v7 = sub_180792314((uint64_t)a2);
  uint64_t v8 = *a2;
  uint64_t v9 = &a3[*a2];
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  uint64_t v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  sub_180793720(v7, v10, v9);
  sub_18078DD78(a1, (uint64_t)a2);
  BOOL v12 = sub_1807935CC(v7, v11) == 1 && *v11 == 1;
  uint64_t v13 = &a3[2 * v8];
  if (sub_1807935CC(v7, a3)) {
    BOOL v12 = 0;
  }
  char v14 = v12 & (sub_1807935CC(v7, v13) == 0);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_180792ECC(v7, v14, a3, (uint64_t *)v10, a3);
  uint64_t result = sub_180792ECC(v7, v14, v9, (uint64_t *)v10, v9);
  *(void *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_18078F670(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_180792314(a2);
  uint64_t v5 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_1807990F0(a1, a2);
  sub_180799364(a1, a2);
  uint64_t result = sub_1807990F0(a1, a2);
  *(void *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_18078F724(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 88LL))();
}

uint64_t sub_18078F730(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, char *a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *a2;
  if (sub_180792B10(a2, a4))
  {
    sub_180793720(v11, a3, a5);
    sub_18078DC70((uint64_t)a2, (uint64_t *)&a3[8 * *a2], (uint64_t *)&a5[8 * *a2]);
    uint64_t result = (uint64_t)sub_180793720(v11, &a3[16 * *a2], &a5[16 * *a2]);
  }

  else
  {
    uint64_t result = sub_18078EB3C(a1, a2, a3, a4, (uint64_t)a5, 1);
  }

  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_18078F7E8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v8 = *a2;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * *a2);
  sub_180793720(v8, v10, a5);
  sub_18078DC70((uint64_t)a2, (uint64_t *)&v10[8 * *a2], (uint64_t *)&a5[8 * *a2]);
  sub_180793720(v8, &v10[16 * *a2], &a5[16 * *a2]);
  uint64_t result = sub_18078F724(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v9;
  return result;
}

void *sub_18078F894(uint64_t a1)
{
  if (a1 <= 255)
  {
    if (a1 == 192) {
      return sub_18078E4F8();
    }
    if (a1 == 224) {
      return sub_18078E778();
    }
  }

  else
  {
    switch(a1)
    {
      case 256LL:
        return sub_18078E78C();
      case 384LL:
        return sub_18078E7A0();
      case 521LL:
        return sub_18078E7A4();
    }
  }

  return 0LL;
}

uint64_t sub_18078F8E0(uint64_t a1)
{
  BOOL v4 = sub_1807974D4();
  uint64_t v2 = 1LL;
  if (a1 <= 255)
  {
    if (a1 != 192 && a1 != 224) {
      goto LABEL_8;
    }
  }

  else if (a1 != 256 && a1 != 384 && a1 != 521)
  {
LABEL_8:
    uint64_t v2 = 0LL;
  }

  sub_1807995F4((unsigned int *)&v4);
  return v2;
}

int8x16_t *sub_18078F9B0(int8x16_t *a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5, uint64_t a6)
{
  int v6 = a5[15].i32[0];
  BOOL v8 = __OFSUB__(a3, 128LL);
  BOOL v7 = a3 - 128 < 0;
  uint64_t v9 = a3 - 128;
  if (v7 != v8) {
    return sub_18078FE4C(a1, a2, v9, a4, a5, a6, v6);
  }
  else {
    return (int8x16_t *)sub_18078FA00(a1, a2, v9, (uint64_t)a4, a5, a6, v6);
  }
}

uint64_t sub_18078FA00(_OWORD *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, uint64_t a6, int a7)
{
  do
  {
    int64x2_t v8 = vaddq_s64(v7, vaddq_s64(v7, vaddq_s64(v7, vaddq_s64(v7, v8))));
    _Q20 = *a5;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }

    _Q20 = a5[1];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }

    _Q20 = a5[2];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }

    _Q20 = a5[3];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }

    _Q20 = a5[4];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }

    _Q20 = a5[5];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }

    _Q20 = a5[6];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }

    _Q20 = a5[7];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }

    _Q20 = a5[8];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }

    _Q20 = a5[9];
    int8x16_t v167 = a5[10];
    if (a7 > 160)
    {
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }

      _Q20 = a5[10];
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }

      _Q20 = a5[11];
      int8x16_t v167 = a5[12];
      if (a7 > 192)
      {
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }

        _Q20 = a5[12];
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }

        _Q20 = a5[13];
        int8x16_t v167 = a5[14];
      }
    }

    int8x16_t v235 = *(int8x16_t *)a1;
    int8x16_t v236 = *((int8x16_t *)a1 + 1);
    int8x16_t v237 = *((int8x16_t *)a1 + 2);
    int8x16_t v238 = *((int8x16_t *)a1 + 3);
    v234 = a1 + 4;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESE            V23.16B, V20.16B
      AESE            V24.16B, V20.16B
      AESE            V25.16B, V20.16B
    }

    int8x16_t v243 = veorq_s8(v235, veorq_s8(_Q22, v167));
    int8x16_t v244 = veorq_s8(v236, veorq_s8(_Q23, v167));
    int8x16_t v245 = veorq_s8(v237, veorq_s8(_Q24, v167));
    int8x16_t v246 = veorq_s8(v238, veorq_s8(_Q25, v167));
    int8x16_t v247 = *(int8x16_t *)v234;
    int8x16_t v248 = *((int8x16_t *)v234 + 1);
    int8x16_t v249 = *((int8x16_t *)v234 + 2);
    int8x16_t v250 = *((int8x16_t *)v234 + 3);
    a1 = v234 + 4;
    __asm
    {
      AESE            V26.16B, V20.16B
      AESE            V27.16B, V20.16B
      AESE            V28.16B, V20.16B
      AESE            V29.16B, V20.16B
    }

    *a2 = v243;
    a2[1] = v244;
    a2[2] = v245;
    a2[3] = v246;
    v255 = a2 + 4;
    int8x16_t *v255 = veorq_s8(v247, veorq_s8(_Q26, v167));
    v255[1] = veorq_s8(v248, veorq_s8(_Q27, v167));
    v255[2] = veorq_s8(v249, veorq_s8(_Q28, v167));
    v255[3] = veorq_s8(v250, veorq_s8(_Q29, v167));
    a2 = v255 + 4;
    _VF = __OFSUB__(a3, 128LL);
    _NF = a3 - 128 < 0;
    a3 -= 128LL;
  }

  while (_NF == _VF);
  return sub_18078FE4C();
}

int8x16_t *sub_18078FE4C( int8x16_t *result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5, uint64_t a6, int a7)
{
  BOOL v10 = a3 < -112;
  for (uint64_t i = a3 + 112; !v10; i -= 16LL)
  {
    _Q4 = *a5;
    _Q5 = a5[1];
    _Q6 = a5[2];
    int64x2_t v9 = vaddq_s64(v7, v9);
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }

    _Q4 = a5[3];
    _Q5 = a5[4];
    _Q6 = a5[5];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }

    _Q4 = a5[6];
    _Q5 = a5[7];
    _Q6 = a5[8];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }

    _Q20 = a5[9];
    _Q21 = a5[10];
    if (a7 > 160)
    {
      __asm
      {
        AESE            V7.16B, V20.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V21.16B
        AESMC           V7.16B, V7.16B
      }

      _Q20 = a5[11];
      _Q21 = a5[12];
      if (a7 > 192)
      {
        __asm
        {
          AESE            V7.16B, V20.16B
          AESMC           V7.16B, V7.16B
          AESE            V7.16B, V21.16B
          AESMC           V7.16B, V7.16B
        }

        _Q20 = a5[13];
        _Q21 = a5[14];
      }
    }

    __asm { AESE            V7.16B, V20.16B }

    int8x16_t v54 = *result++;
    *a2++ = veorq_s8(v54, veorq_s8(_Q7, _Q21));
    BOOL v10 = i < 16;
  }

  *a4 = vqtbl1q_s8((int8x16_t)v9, v8);
  return result;
}

uint64_t sub_18078FF1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  if ((sub_180793194(*a2, a4, a2 + 3) & 0x80000000) != 0)
  {
    sub_18078DC40(a1, (uint64_t)a2);
    sub_180799364(a1, (uint64_t)a2);
    sub_1807990F0(a1, (uint64_t)a2);
    sub_1807983A8(a1, (uint64_t)a2);
    sub_1807983A8(a1, (uint64_t)a2);
    sub_18079940C(a1, (uint64_t)a2);
    sub_1807983A8(a1, (uint64_t)a2);
    uint64_t result = sub_18079295C(a1, (uint64_t)a2);
    if (!(_DWORD)result)
    {
      sub_18078DD78(a1, (uint64_t)a2);
      sub_18078DD78(a1, (uint64_t)a2);
      uint64_t result = 0LL;
    }
  }

  else
  {
    uint64_t result = 4294967289LL;
  }

  *(void *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_180790098( uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, int a8, unsigned __int8 *a9)
{
  *(void *)a9 = 0LL;
  *((void *)a9 + 1) = 0LL;
  uint64_t v16 = a2 + 3;
  unint64_t v17 = *a2;
  unint64_t v18 = sub_180793C64(*a2, a2 + 3);
  BOOL v19 = v18 >= a6;
  if (a8 != 2110636126) {
    BOOL v19 = v18 == a6;
  }
  if (v19)
  {
    uint64_t v26 = a3;
    uint64_t v27 = a5;
    uint64_t v20 = *(void *)(a1 + 16);
    unint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v17);
    BOOL v22 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v17);
    sub_1807980F8(8 * (*(void *)(a1 + 16) - v20), (void *)(*(void *)a1 + 8 * v20));
    unint64_t v23 = sub_180793C64(v17, v16);
    if (sub_18079371C(v17, v21, a6, a7))
    {
      int v24 = -23;
    }

    else
    {
      unsigned int v29 = sub_1807947B0(a1, a2, v22, (uint64_t)v21);
      if (v29)
      {
LABEL_9:
        *(void *)(a1 + 16) = v20;
        return v29;
      }

      sub_1807973E4(v17, (unint64_t *)v22);
      else {
        int v24 = a9[8] ^ a9[4] ^ a9[3] ^ a9[13] ^ 0x89 ^ a9[15] ^ a9[10] ^ a9[1] ^ a9[11] ^ a9[14] ^ a9[6] ^ a9[2] ^ a9[9] ^ a9[12] ^ *a9 ^ a9[7] ^ a9[5];
      }
    }

    unsigned int v29 = v24;
    goto LABEL_9;
  }

  return 4294967273LL;
}

uint64_t sub_180790324(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4, unint64_t a5, uint64_t *a6)
{
  BOOL v12 = a2 + 4;
  uint64_t v51 = a3;
  __src = a4;
  int8x16_t v54 = v12;
  uint64_t v14 = *a2;
  unint64_t v15 = (a5 + 63) >> 6;
  uint64_t v53 = *(void *)(a1 + 16);
  uint64_t v16 = 3 * *a2;
  unint64_t v17 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v16);
  unint64_t v18 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v14);
  BOOL v55 = sub_1807935CC(v14, a6) == 0;
  if (a5 + 63 >= 0x40) {
    sub_180793720((a5 + 63) >> 6, v18, a4);
  }
  sub_1807973CC(v14 - v15, (char *)v18 + 8 * v15);
  v18->i64[v15 - 1] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
  unint64_t v50 = (a5 + 63) >> 6;
  __int128 v57 = v18;
  sub_180793734(v50, v18, v18, v55);
  sub_18078E8B4(a1, a2);
  sub_180792ECC(3 * v14, !v55, v17, a6, v17);
  if (!sub_1807935CC(v14, v17))
  {
LABEL_13:
    uint64_t result = 0xFFFFFFFFLL;
    goto LABEL_16;
  }

  if (sub_18079231C((uint64_t)&v54[5 * *a2]) >= a5)
  {
    unint64_t v19 = *a2;
    if (sub_1807935CC(*a2, v17))
    {
      uint64_t v47 = v16;
      uint64_t v45 = *(void *)(a1 + 16);
      uint64_t v20 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      unint64_t v49 = v19;
      unint64_t v21 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      uint64_t v56 = 2 * v19;
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      uint64_t v23 = *a2;
      uint64_t v42 = *(void *)(a1 + 16);
      __dst = (void *)v22;
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v23);
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v23);
      sub_180799364(a1, (uint64_t)a2);
      sub_1807983A8(a1, (uint64_t)a2);
      sub_1807983A8(a1, (uint64_t)a2);
      sub_180799364(a1, (uint64_t)a2);
      sub_180799364(a1, (uint64_t)a2);
      sub_1807983A8(a1, (uint64_t)a2);
      sub_1807983A8(a1, (uint64_t)a2);
      sub_18079940C(a1, (uint64_t)a2);
      sub_180799364(a1, (uint64_t)a2);
      sub_1807983A8(a1, (uint64_t)a2);
      sub_1807983A8(a1, (uint64_t)a2);
      uint64_t v46 = v17;
      sub_1807990F0(a1, (uint64_t)a2);
      sub_180799364(a1, (uint64_t)a2);
      sub_18079940C(a1, (uint64_t)a2);
      sub_18079940C(a1, (uint64_t)a2);
      uint64_t v24 = a1;
      uint64_t v25 = a1;
      uint64_t v26 = (uint64_t *)v20;
      sub_18079940C(v24, (uint64_t)a2);
      sub_1807990F0(v25, (uint64_t)a2);
      sub_180799364(v25, (uint64_t)a2);
      sub_1807983A8(v25, (uint64_t)a2);
      sub_18079940C(v25, (uint64_t)a2);
      uint64_t v48 = v25;
      *(void *)(v25 + 16) = v42;
      uint64_t v27 = v18;
      unint64_t v28 = *(unint64_t *)((char *)v18->i64 + (((a5 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (a5
                                                                                                 - 1);
      char v29 = v28 & 1;
      unsigned __int8 v30 = !(v28 & 1);
      unint64_t v31 = a5 - 2;
      if (a5 == 2)
      {
        char v43 = !(v28 & 1);
        LOBYTE(vmemset(v30, 170, 32) = v28 & 1;
      }

      else
      {
        LOBYTE(vmemset(v30, 170, 32) = v28 & 1;
        do
        {
          char v33 = v32;
          uint64_t v32 = (*(unint64_t *)((char *)v27->i64 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v31) & 1;
          sub_18078DCD8((uint64_t)a2, v30, &v21[v49], &v21[v49]);
          sub_18078D6EC(v56, v32 ^ v33 | v29 ^ 1, v26, v21);
          sub_180790B64(v25, a2);
          sub_180790DB0(v25, a2);
          unsigned __int8 v30 = v32 & (v29 ^ 1);
          uint64_t v27 = v18;
          v29 |= v32;
          --v31;
        }

        while (v31);
        char v43 = v29 ^ 1;
      }

      sub_18078DCD8((uint64_t)a2, v30, &v21[v49], &v21[v49]);
      sub_18078D6EC(v56, v27->i8[0] & 1 ^ v32, v26, v21);
      sub_180790B64(v25, a2);
      sub_180793720(v56, __dst, v21);
      uint64_t v41 = v27->i64[0] & 1;
      sub_18078D6EC(v56, v27->i8[0] & 1, v26, v21);
      unsigned int v34 = v26;
      a1 = v25;
      uint64_t v35 = v51;
      uint64_t v40 = *(void *)(v25 + 16);
      sub_18079940C(v25, (uint64_t)a2);
      sub_1807990F0(v25, (uint64_t)a2);
      sub_1807990F0(v25, (uint64_t)a2);
      sub_1807990F0(v25, (uint64_t)a2);
      sub_1807990F0(v25, (uint64_t)a2);
      sub_180799364(v25, (uint64_t)a2);
      sub_1807990F0(v25, (uint64_t)a2);
      *(void *)(v25 + 16) = v40;
      sub_18078D6EC(v56, v41, v34, v21);
      sub_180790DB0(v25, a2);
      sub_180792ECC(v56, v41, v34, v21, v34);
      sub_1807990F0(v25, (uint64_t)a2);
      sub_1807990F0(v25, (uint64_t)a2);
      uint64_t v36 = (unint64_t *)sub_180799370((uint64_t)&v54[5 * *a2]);
      sub_180793C34(v49, __dst, v36, 1uLL);
      unsigned __int8 v37 = (sub_18079243C(v50, (uint64_t)v57, v49, (uint64_t)__dst) & 1) == 0;
      BOOL v38 = sub_180792B10(a2, (uint64_t)v46);
      sub_180792ECC(3 * v49, v43 | v38 | v37, v35, v46, v35);
      sub_18078DCD8((uint64_t)a2, v37, &v35[*a2], &v35[*a2]);
      char v39 = v43 & ~v57->i32[0] & 1;
      sub_180796B80(v49, v39, &v51[2 * *a2]);
      sub_1807973D4(v49, v34, 1LL);
      sub_18078DC40(v48, (uint64_t)a2);
      sub_180792ECC(v49, v39, v35, v34, v35);
      sub_180792ECC(v49, v39, &v35[*a2], v34, &v35[*a2]);
      *(void *)(v48 + 16) = v45;
      sub_18078F724(v48, (uint64_t)a2);
      sub_180792ECC(v47, *__src & v55, v35, v46, v35);
      uint64_t result = 0LL;
      goto LABEL_16;
    }

    goto LABEL_13;
  }

  uint64_t result = 4294967289LL;
LABEL_16:
  *(void *)(a1 + 16) = v53;
  return result;
}

uint64_t sub_180790B58(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 96LL))();
}

uint64_t sub_180790B64(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_18079940C(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  uint64_t result = sub_18079940C(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_180790DB0(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_18079940C(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  uint64_t result = sub_18079940C(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v5;
  return result;
}

unint64_t sub_180790F60(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4 = 0LL;
  if ((a1 & 1) != 0)
  {
    unint64_t v5 = *a3++;
    unint64_t v4 = (v5 * (unsigned __int128)a4 + *a2) >> 64;
    *a2++ += v5 * a4;
    --a1;
  }

  if ((a1 & 2) != 0)
  {
    unint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    a3 += 2;
    unsigned __int128 v8 = *(_OWORD *)a2 + __PAIR128__(v7 * a4, v4);
    unsigned __int128 v9 = v8 + v6 * (unsigned __int128)a4;
    unint64_t v4 = (__CFADD__(__CFADD__((void)v8, v6 * a4), *((void *)&v8 + 1)) | __CFADD__( (v6 * (unsigned __int128)a4) >> 64,  *((void *)&v9 + 1)))
    *(_OWORD *)a2 = v9;
    a2 += 2;
    a1 -= 2LL;
  }

  while (1)
  {
    BOOL v10 = a1 < 4;
    a1 -= 4LL;
    if (v10) {
      break;
    }
    unint64_t v11 = a2[2];
    unint64_t v12 = a2[3];
    unint64_t v14 = *a3;
    unint64_t v15 = a3[1];
    uint64_t v13 = a3 + 2;
    unint64_t v16 = *v13;
    unint64_t v17 = v13[1];
    a3 = v13 + 2;
    uint64_t v18 = (v15 * (unsigned __int128)a4) >> 64;
    unsigned __int128 v19 = *(_OWORD *)a2 + __PAIR128__(v15 * a4, v4);
    BOOL v20 = __CFADD__( __CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v15 * a4, *((void *)&v19 + 1)),  v11);
    unint64_t v21 = (__CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v15 * a4, *((void *)&v19 + 1))) + v11;
    v20 |= __CFADD__(v18, v21);
    v21 += v18;
    BOOL v23 = v20;
    BOOL v20 = __CFADD__(v20, v12);
    unint64_t v22 = v23 + v12;
    v20 |= __CFADD__(v17 * a4, v22);
    v22 += v17 * a4;
    uint64_t v24 = v20 + ((v17 * (unsigned __int128)a4) >> 64);
    unsigned __int128 v25 = v19 + v14 * (unsigned __int128)a4;
    *(_OWORD *)a2 = v25;
    uint64_t v26 = a2 + 2;
    uint64_t v27 = (v16 * (unsigned __int128)a4) >> 64;
    uint64_t v29 = __CFADD__(__CFADD__((void)v19, v14 * a4), *((void *)&v19 + 1)) | __CFADD__( (v14 * (unsigned __int128)a4) >> 64,  *((void *)&v25 + 1));
    BOOL v20 = __CFADD__(v29, v21);
    uint64_t v28 = v29 + v21;
    uint64_t v31 = v20 | __CFADD__(v16 * a4, v28);
    BOOL v20 = __CFADD__(v31, v22);
    uint64_t v30 = v31 + v22;
    unint64_t v4 = (v20 | __CFADD__(v27, v30)) + v24;
    *uint64_t v26 = v16 * a4 + v28;
    v26[1] = v27 + v30;
    a2 = v26 + 2;
  }

  return v4;
}

uint64_t (**sub_180791040( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(void, unint64_t, uint64_t)))(void, unint64_t, uint64_t)
{
  unint64_t v5 = a5;
  uint64_t v9 = *(void *)(a1 + 16);
  if (a5)
  {
    uint64_t v10 = sub_18079231C((uint64_t)a2);
    unint64_t v5 = (uint64_t (**)(void, unint64_t, uint64_t))sub_1807935D0(v10 - 1, a3 + 16 * *a2, v5);
    sub_18079739C(a3 + 16 * *a2, v10 - 2, 1LL);
    sub_180799364(a1, (uint64_t)a2);
    sub_1807990F0(a1, (uint64_t)a2);
    sub_1807990F0(a1, (uint64_t)a2);
    sub_1807990F0(a1, (uint64_t)a2);
  }

  else
  {
    sub_1807973D4(*a2, (void *)(a3 + 16 * *a2), 1LL);
    sub_18078DC40(a1, (uint64_t)a2);
  }

  sub_18078DC40(a1, (uint64_t)a2);
  sub_18078DC40(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v9;
  return v5;
}

uint64_t sub_1807911A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 72LL))();
}

uint64_t sub_1807911B4( uint64_t a1, uint64_t *a2, char *a3, unint64_t *a4, uint64_t a5, unint64_t *a6, char *a7)
{
  v28[1] = *MEMORY[0x1895F89C0];
  unint64_t v12 = *a2;
  uint64_t v24 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  uint64_t v25 = 3 * v12;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 12 * v12);
  unint64_t v15 = v14 + 48 * v12;
  uint64_t v26 = v14;
  uint64_t v16 = v14 + 72 * v12;
  sub_18078F724(a1, (uint64_t)a2);
  sub_18078F7E8(a1, a2, v16, a5, a7);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  unsigned int v23 = sub_180792308(a1, (uint64_t)a2);
  if (!v23)
  {
    sub_18079157C(a1, a2);
    sub_18079157C(a1, a2);
    sub_18079157C(a1, a2);
    sub_18079157C(a1, a2);
    sub_1807973D4(v12, v13, 1LL);
    sub_18078DC40(a1, (uint64_t)a2);
    sub_180793720(v12, (void *)(v26 + 24 * v12 + 16 * *a2), (void *)(v26 + 16 * *a2));
    sub_180793720(v12, (void *)(v15 + 16 * *a2), (void *)(v26 + 16 * *a2));
    sub_180793720(v12, (void *)(v16 + 16 * *a2), (void *)(v26 + 16 * *a2));
    unint64_t v17 = sub_180793190(v12, a4);
    unint64_t v18 = sub_180793190(v12, a6);
    v27[1] = 0LL;
    void v27[2] = 0LL;
    if (v17 <= v18) {
      unint64_t v17 = v18;
    }
    v27[0] = 0LL;
    sub_180792B34((uint64_t)v27, v17, (uint64_t)a4, (uint64_t)a6);
    sub_180793720(v12, a3, (void *)(v26 + 16 * *a2));
    sub_180793720(v12, &a3[8 * *a2], (void *)(v26 + 16 * *a2));
    sub_1807980F8(8 * v12, &a3[16 * *a2]);
    for (; v17 != -1LL; --v17)
    {
      sub_18078E8B4(a1, a2);
      v28[0] = 0LL;
      sub_180792C04((uint64_t)v27, v17, (uint64_t)v28);
      if (v28[0])
      {
        unsigned __int128 v19 = (char *)(v26 + 8 * sub_180792D1C(v28) * v25);
        else {
          sub_18078F730(a1, a2, a3, (uint64_t)a3, v19);
        }
      }
    }
  }

  *(void *)(a1 + 16) = v24;
  return v23;
}

uint64_t sub_18079157C(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  uint64_t result = sub_1807990F0(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_18079168C( uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, void *a7)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (a7)
  {
    *a7 = 0LL;
    a7[1] = 0LL;
  }

  __int128 v19 = 0uLL;
  unint64_t v13 = **a2;
  uint64_t v14 = *(void *)(a1 + 16);
  unint64_t v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  uint64_t v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  if (sub_180794230(v13, v15, v16, a6, &a6[a5]) == &a6[a5])
  {
    uint64_t result = sub_180797A7C(a1, a2, a3, a4, v15, v16, (uint64_t)&v19);
    if (a7 && !(_DWORD)result) {
      *(_OWORD *)a7 = v19;
    }
  }

  else
  {
    uint64_t result = 4294967289LL;
  }

  *(void *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_1807917B0( unint64_t **a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5, BOOL *a6)
{
  BOOL v19 = sub_1807974D4();
  *a6 = 0;
  v17[0] = sub_180799424(376 * **a1);
  v17[1] = 47 * **a1;
  void v17[2] = 0LL;
  unint64_t v17[3] = sub_18079945C;
  unint64_t v18 = sub_1807994A0;
  if (v17[0])
  {
    unsigned int v12 = sub_18079168C((uint64_t)v17, a1, a2, a3, a4, a5, 0LL);
    v18((uint64_t)v17);
    if (v12 == -146) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = v12;
    }
    BOOL v14 = v12 == 0;
    if (v12) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 0LL;
    }
    *a6 = v14;
  }

  else
  {
    uint64_t v15 = 4294967283LL;
  }

  sub_1807995F4((unsigned int *)&v19);
  return v15;
}

unint64_t sub_1807918B0(uint64_t a1, char *a2, char *a3)
{
  if (!a1) {
    return 1LL;
  }
  unsigned __int8 v3 = 0;
  do
  {
    char v5 = *a2++;
    char v4 = v5;
    char v6 = *a3++;
    v3 |= v6 ^ v4;
    --a1;
  }

  while (a1);
  return ((unint64_t)v3 + 0xFFFFFFFF) >> 32;
}

unint64_t sub_1807918E8(uint64_t a1, char *a2, char *a3)
{
  BOOL v12 = sub_1807974D4();
  if (a1)
  {
    unsigned __int8 v6 = 0;
    do
    {
      char v8 = *a2++;
      char v7 = v8;
      char v9 = *a3++;
      v6 |= v9 ^ v7;
      --a1;
    }

    while (a1);
    unint64_t v10 = ((unint64_t)v6 + 0xFFFFFFFF) >> 32;
  }

  else
  {
    unint64_t v10 = 1LL;
  }

  sub_1807995F4((unsigned int *)&v12);
  return v10;
}

uint64_t sub_180791968(uint64_t a1)
{
  if (a1 <= 64)
  {
    if (a1 == 49) {
      return 192LL;
    }
    if (a1 == 57) {
      return 224LL;
    }
  }

  else
  {
    switch(a1)
    {
      case 65LL:
        return 256LL;
      case 97LL:
        return 384LL;
      case 133LL:
        return 521LL;
    }
  }

  return 0LL;
}

uint64_t sub_1807919C8( uint64_t a1, unint64_t *a2, uint64_t a3, unsigned __int8 *a4, unint64_t **a5)
{
  if (!a3) {
    return 4294967289LL;
  }
  if (a3 == 1)
  {
    int v10 = *a4;
    if (!*a4) {
      return 4294967136LL;
    }
  }

  else
  {
    int v10 = *a4;
  }

  unsigned int v12 = v10 - 2;
  if (v12 > 5 || ((0x37u >> v12) & 1) == 0) {
    return 4294967289LL;
  }
  int v13 = dword_1807A4438[(char)v12];
  uint64_t v14 = *(void *)(a1 + 16);
  *a5 = a2;
  uint64_t result = sub_180794B7C(a1, a2, v13, a3, a4, a5 + 2);
  if (!(_DWORD)result)
  {
    sub_1807973D4(*a2, &a5[2 * **a5 + 2], 1LL);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * *a2);
    uint64_t result = sub_1807994F0(a1, (uint64_t *)a2, v15, (uint64_t)(a5 + 2));
  }

  *(void *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_180791AC4(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v8 = sub_180799424(160 * *a1);
  uint64_t v9 = 20 * *a1;
  v12[0] = v8;
  v12[1] = v9;
  void v12[2] = 0LL;
  void v12[3] = sub_18079945C;
  int v13 = sub_1807994A0;
  if (!v8) {
    return 4294967283LL;
  }
  uint64_t v10 = sub_1807919C8((uint64_t)v12, a1, a2, a3, a4);
  v13((uint64_t)v12);
  return v10;
}

BOOL sub_180791B70(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a1)
  {
    unsigned __int8 v3 = a2;
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *a3++;
      *v3++ = ~v5;
      --v4;
    }

    while (v4);
  }

  return sub_180792EAC(0LL, a1, a2, a2, 1LL);
}

uint64_t sub_180791BA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  unint64_t v8 = sub_180792314(a2);
  uint64_t v9 = sub_180799370(v6);
  if ((sub_180793194(v8, a4, v9) & 0x80000000) == 0) {
    return 4294967289LL;
  }
  uint64_t v46 = *(void *)(a1 + 16);
  __s = a3;
  unint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  unsigned int v12 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  sub_18078DD78(a1, v6);
  int v13 = (void *)sub_180799370(v6);
  sub_180793720(v8, v12, v13);
  uint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  uint64_t v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  uint64_t v53 = v14;
  sub_1807973D4(v8, v14, 1LL);
  uint64_t __n = 8 * v8;
  int8x16_t v54 = v15;
  sub_1807980F8(8 * v8, v15);
  uint64_t v52 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  unint64_t v16 = (v8 << 7) | 0x1E;
  if (v16 != 30)
  {
    uint64_t v17 = 0LL;
    unint64_t v49 = v8 - 1;
    unint64_t v50 = v16 / 0x1F;
    unint64_t v48 = v8 - 2;
    uint64_t v51 = (void *)v6;
    uint64_t v56 = v8;
    do
    {
      uint64_t v18 = v11[v49];
      uint64_t v19 = v12[v49];
      uint64_t v55 = v17;
      if (v8 >= 2)
      {
        unint64_t v20 = v48;
        do
        {
          char v21 = __clz(v19 | v18 | 1);
          uint64_t v18 = (v11[v20] >> v22) | (v18 << v21);
          uint64_t v19 = (v12[v20--] >> v22) | (v19 << v21);
        }

        while (v20 < v8);
      }

      unint64_t v23 = 0LL;
      uint64_t v24 = 0LL;
      unint64_t v25 = v18 & 0xFFFFFFFF80000000LL | *v11 & 0x7FFFFFFFLL;
      unint64_t v26 = v19 & 0xFFFFFFFF80000000LL | *v12 & 0x7FFFFFFFLL;
      uint64_t v27 = 31LL;
      uint64_t v28 = 0x80000000LL;
      unint64_t v29 = 0x80000000LL;
      do
      {
        unint64_t v30 = v25 & 1;
        unint64_t v31 = v25 >> !(v25 & 1);
        unint64_t v32 = v31 ^ v26;
        unint64_t v33 = v25 & ((((v31 - v26) ^ v31 | v31 ^ v26) ^ v31) >> 63);
        uint64_t v34 = -(uint64_t)v33;
        unint64_t v35 = v26 & -(uint64_t)v33--;
        unint64_t v36 = v33 & v31 | v35;
        unint64_t v26 = v32 ^ v36;
        unint64_t v37 = v33 & v29 | v24 & v34;
        v24 ^= v29 ^ v37;
        unint64_t v38 = v33 & v23 | v28 & v34;
        v28 ^= v23 ^ v38;
        unint64_t v25 = (v36 - (v26 & -(uint64_t)v30)) >> v30;
        unint64_t v29 = (v37 - (v24 & -(uint64_t)v30)) & 0x8000000000000000LL | ((v37 - (v24 & -(uint64_t)v30)) >> 1);
        unint64_t v23 = (v38 - (v28 & -(uint64_t)v30)) & 0x8000000000000000LL | ((v38 - (v28 & -(uint64_t)v30)) >> 1);
        --v27;
      }

      while (v27);
      uint64_t v39 = a1;
      unint64_t v40 = sub_180791FDC( a1,  v8,  v52,  v11,  (v37 - (v24 & -(uint64_t)v30)) & 0x8000000000000000LL | ((v37 - (v24 & -(uint64_t)v30)) >> 1),  v12,  (v38 - (v28 & -(uint64_t)v30)) & 0x8000000000000000LL | ((v38 - (v28 & -(uint64_t)v30)) >> 1));
      unint64_t v41 = sub_180791FDC(v39, v56, v12, v11, v24, v12, v28);
      sub_180793720(v56, v11, v52);
      unint64_t v42 = v40 - 1;
      uint64_t v43 = -(uint64_t)v40;
      a1 = v39;
      uint64_t v44 = v42 & v23 | v43 & -(uint64_t)v23;
      uint64_t v6 = (uint64_t)v51;
      unint64_t v8 = v56;
      sub_180792158(v39, v51, v52, v53, v42 & v29 | v43 & -(uint64_t)v29, v54, v44);
      sub_180792158( v39,  v51,  v54,  v53,  (v41 - 1) & v24 | -(uint64_t)v41 & -v24,  v54,  (v41 - 1) & v28 | -(uint64_t)v41 & -v28);
      sub_180793720(v56, v53, v52);
      uint64_t v17 = v55 + 1;
    }

    while (v55 + 1 != v50);
  }

  if (sub_1807935CC(v8, v12) == 1 && *v12 == 1LL)
  {
    sub_18078DC40(a1, v6);
    uint64_t result = 0LL;
  }

  else
  {
    sub_1807980F8(__n, __s);
    uint64_t result = 4294967289LL;
  }

  *(void *)(a1 + 16) = v46;
  return result;
}

unint64_t sub_180791FDC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v13 = a2 + 1;
  uint64_t v14 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, a2 + 1);
  uint64_t v15 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v13);
  if (a2) {
    sub_180793720(a2, v14, a4);
  }
  sub_1807973CC(1LL, (char *)v14 + 8 * a2);
  sub_180793DC8(v13, a5 < 0, v14->i64, v14->i64);
  if (a2) {
    sub_180793720(a2, v15, a6);
  }
  sub_1807973CC(1LL, &v15[8 * a2]);
  sub_180793DC8(v13, a7 < 0, (uint64_t *)v15, (uint64_t *)v15);
  sub_1807935C8(v13, v14, (unint64_t *)v14, (a5 ^ (a5 >> 63)) + ((unint64_t)a5 >> 63));
  sub_180791B6C(v13, v14, v15, (a7 ^ (a7 >> 63)) + ((unint64_t)a7 >> 63));
  unint64_t v16 = (unint64_t)v14->i64[a2] >> 63;
  sub_180793DC8(v13, v14->i64[a2] < 0, v14->i64, v14->i64);
  sub_180793734(v13, v14, v14, 31LL);
  sub_180793720(a2, a3, v14);
  *(void *)(a1 + 16) = v19;
  return v16;
}

uint64_t sub_180792158(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12 = sub_180792314((uint64_t)a2);
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v13 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  uint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  sub_18078DCD8((uint64_t)a2, a5 < 0, v13->i64, a4);
  sub_18078DCD8((uint64_t)a2, a7 < 0, v14, a6);
  v13->i64[v12] = sub_1807935C8(v12, v13, (unint64_t *)v13, (a5 ^ (a5 >> 63)) + ((unint64_t)a5 >> 63));
  v13->i64[v12] += sub_180791B6C(v12, v13, v14, (a7 ^ (a7 >> 63)) + ((unint64_t)a7 >> 63));
  uint64_t v15 = sub_180799370((uint64_t)a2);
  v13->i64[v12] += sub_180791B6C(v12, v13, v15, (LODWORD(a2[*a2 + 3]) * v13->i32[0]) & 0x7FFFFFFF);
  sub_180793734(v12 + 1, v13, v13, 31LL);
  sub_180793720(v12, a3, v13);
  unint64_t v16 = (unint64_t *)sub_180799370((uint64_t)a2);
  char v17 = sub_18079427C(v12 + 1, v13, v13->i64, v12, v16);
  uint64_t result = sub_180792ECC(v12, v17, (uint64_t *)a3, (uint64_t *)a3, v13->i64);
  *(void *)(a1 + 16) = v21;
  return result;
}

uint64_t sub_180792308(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 40LL))();
}

uint64_t sub_180792314(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_18079231C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_180792330(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    result *= -8LL;
    uint64_t v4 = (unint64_t *)(a2 - result);
    uint64_t v5 = a3 - result;
    uint64_t v6 = a4 - result;
    uint64_t v7 = result;
    uint64_t v8 = result;
    unint64_t v9 = 0LL;
    unint64_t v10 = *(void *)(v6 + result);
    do
    {
      unsigned __int128 v11 = *(unint64_t *)(v5 + v8) * (unsigned __int128)v10 + v9;
      *(unint64_t *)((char *)v4 + v8) = v11;
      unint64_t v9 = *((void *)&v11 + 1);
      v8 += 8LL;
    }

    while (v8);
    while (1)
    {
      *uint64_t v4 = v9;
      v7 += 8LL;
      if (!v7) {
        break;
      }
      ++v4;
      uint64_t v12 = result;
      unint64_t v9 = 0LL;
      unint64_t v13 = *(void *)(v6 + v7);
      do
      {
        unsigned __int128 v14 = *(unint64_t *)(v5 + v12) * (unsigned __int128)v13 + v9 + *(unint64_t *)((char *)v4 + v12);
        *(unint64_t *)((char *)v4 + v12) = v14;
        unint64_t v9 = *((void *)&v14 + 1);
        v12 += 8LL;
      }

      while (v12);
    }
  }

  return result;
}

uint64_t sub_1807923D8(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a1 >= a3) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = a1;
  }
  if (a1 >= a3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a4;
  }
  if (a1 <= a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = a1;
  }
  if (a1 < a3) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 1;
  }
  unsigned int v8 = sub_180793194(v4, a2, a4);
  else {
    return v8;
  }
}

uint64_t sub_180792440( uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, unint64_t a5, unint64_t *a6, void *a7)
{
  uint64_t v12 = sub_180792314(a2);
  uint64_t v23 = *(void *)(a1 + 16);
  unint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  unsigned __int128 v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  uint64_t result = sub_180792F48(a1, a2, a3, a4, a6);
  uint64_t v18 = v23;
  if (!(_DWORD)result)
  {
    sub_1807973D4(v12, v16, 1LL);
    unint64_t v25 = v16;
    sub_18078DC40(a1, a2);
    sub_180793720(v12, v15, a7);
    sub_180799364(a1, a2);
    sub_1807990F0(a1, a2);
    sub_1807990F0(a1, a2);
    if (a5 >= 2)
    {
      while (1)
      {
        sub_180793720(v12, v14, v13);
        if (a5 - 1 < 2) {
          break;
        }
        uint64_t v19 = 2LL;
        do
        {
          sub_180799364(a1, a2);
          ++v19;
        }

        while (a5 != v19);
        char v20 = sub_180793194(v12, v14, v25) & 1;
        sub_1807990F0(a1, a2);
        sub_180792ECC(v12, v20, a3, (uint64_t *)v14, a3);
        sub_180799364(a1, a2);
        sub_1807990F0(a1, a2);
        sub_180792ECC(v12, v20, (uint64_t *)v13, (uint64_t *)v14, (uint64_t *)v13);
        --a5;
      }

      char v21 = sub_180793194(v12, v14, v25) & 1;
      sub_1807990F0(a1, a2);
      sub_180792ECC(v12, v21, a3, (uint64_t *)v14, a3);
      sub_180799364(a1, a2);
      sub_1807990F0(a1, a2);
      sub_180792ECC(v12, v21, (uint64_t *)v13, (uint64_t *)v14, (uint64_t *)v13);
    }

    sub_180799364(a1, a2);
    else {
      uint64_t result = 0LL;
    }
    uint64_t v18 = v23;
  }

  *(void *)(a1 + 16) = v18;
  return result;
}

uint64_t sub_180792744(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = ~*(_DWORD *)sub_180799370(a2) & 3LL;
  uint64_t v9 = sub_180792314(a2);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned __int128 v11 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  uint64_t v12 = (void *)sub_180799370(a2);
  if (v8)
  {
    sub_180793720(v9, v11, v12);
    v11->i64[0] &= ~1uLL;
    unint64_t v14 = sub_180797554(v9, (uint64_t)v11);
    sub_180793740(v9, v11, v11, v14);
    uint64_t v15 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
    sub_180793C34(v9, v15, (unint64_t *)v11, 1uLL);
    sub_180793734(v9, v15, v15, 1LL);
    unint64_t v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
    sub_1807973D4(v9, v16, 1LL);
    uint64_t result = sub_180792F48(a1, a2, v16, v16, (unint64_t *)v11);
    if (!(_DWORD)result) {
      uint64_t result = sub_180792440(a1, a2, a3, a4, v14, (unint64_t *)v15, v16);
    }
  }

  else
  {
    sub_180792EAC(a1, v9, v11, (uint64_t *)v12, 1LL);
    sub_180793734(v9, v11, v11, 2LL);
    uint64_t result = sub_180792F48(a1, a2, a3, a4, (unint64_t *)v11);
    if (!(_DWORD)result)
    {
      sub_180799364(a1, a2);
      else {
        uint64_t result = 0LL;
      }
    }
  }

  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_18079295C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 48LL))();
}

uint64_t sub_180792968()
{
  return 24LL;
}

BOOL sub_180792970(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_18079940C(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  sub_1807990F0(a1, (uint64_t)a2);
  sub_1807983A8(a1, (uint64_t)a2);
  sub_180799364(a1, (uint64_t)a2);
  BOOL result = sub_180793194(v4, v7, v6) == 0;
  *(void *)(a1 + 16) = v5;
  return result;
}

BOOL sub_180792B10(uint64_t *a1, uint64_t a2)
{
  return sub_1807935CC(*a1, (uint64_t *)(a2 + 16 * *a1)) == 0;
}

uint64_t sub_180792B34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0LL;
  void v16[2] = *MEMORY[0x1895F89C0];
  unint64_t v5 = (unint64_t)(a2 - 1) >> 6;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  char v6 = (a2 - 1) & 0x3F;
  unint64_t v7 = (unint64_t)(a2 - 2) >> 6;
  char v8 = (a2 - 2) & 0x3F;
  v16[0] = a3;
  v16[1] = a4;
  unint64_t v9 = (unint64_t)(a2 - 3) >> 6;
  char v10 = (a2 - 3) & 0x3F;
  unint64_t v11 = (unint64_t)(a2 - 4) >> 6;
  char v12 = (a2 - 4) & 0x3F;
  char v13 = 1;
  do
  {
    char v14 = v13;
    uint64_t v15 = v16[v4];
    *(_BYTE *)(result + v4) = (8 * ((*(void *)(v15 + 8 * v5) >> v6) & 1)) | (4
                                                                             * ((*(void *)(v15 + 8 * v7) >> v8) & 1)) | (2 * ((*(void *)(v15 + 8 * v9) >> v10) & 1)) | (*(void *)(v15 + 8 * v11) >> v12) & 1;
    uint64_t v4 = 1LL;
    char v13 = 0;
  }

  while ((v14 & 1) != 0);
  return result;
}

uint64_t sub_180792C04(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v12 = *MEMORY[0x1895F89C0];
  __int16 v10 = 0;
  if ((*(_BYTE *)result & 0x20) != 0) {
    char v4 = *(_BYTE *)result & 0x1F ^ 0x1F;
  }
  else {
    char v4 = *(_BYTE *)result & 0x1F;
  }
  LOBYTE(v10) = v4;
  if ((*(_BYTE *)(result + 1) & 0x20) != 0) {
    char v5 = *(_BYTE *)(result + 1) & 0x1F ^ 0x1F;
  }
  else {
    char v5 = *(_BYTE *)(result + 1) & 0x1F;
  }
  HIBYTE(v10) = v5;
  __int128 v11 = *(_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    char v7 = v6;
    if (a2 < 5) {
      LOBYTE(v8) = 0;
    }
    else {
      uint64_t v8 = (*(void *)(*((void *)&v11 + v3) + 8 * ((a2 - 5) >> 6)) >> ((a2 - 5) & 0x3F)) & 1LL;
    }
    if (*((unsigned __int8 *)&v10 + v3) >= byte_1807A4450[*((unsigned __int8 *)&v10 + (v3 ^ 1))])
    {
      LOBYTE(v8) = v8 | 0x20;
      if ((*(_BYTE *)(result + v3) & 0x20) != 0) {
        int v9 = -1;
      }
      else {
        int v9 = 1;
      }
    }

    else
    {
      int v9 = 0;
    }

    char v6 = 0;
    *(_DWORD *)(a3 + 4 * v3) = v9;
    *(_BYTE *)(result + v3) = v8 ^ (2 * *(_BYTE *)(result + v3));
    uint64_t v3 = 1LL;
  }

  while ((v7 & 1) != 0);
  return result;
}

unint64_t sub_180792D1C(_DWORD *a1)
{
  return (*a1 & 1 | (2 * (a1[1] & 1u))) - (unint64_t)(*a1 + a1[1] != 0);
}

uint64_t sub_180792D38(unsigned int *a1)
{
  uint64_t result = *a1;
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result && a1[1] == -1) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1LL;
    }
  }

  return result;
}

BOOL sub_180792D68(uint64_t a1, BOOL a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  return sub_180792DF8(a2, a3, a4, a5);
}

uint64_t sub_180792D7C()
{
  if (qword_18C5341F0 != -1) {
    _os_once();
  }
  return qword_18C5341E8;
}

os_log_t sub_180792DC4(os_log_t *a1)
{
  os_log_t result = os_log_create("com.apple.corecrypto", "default");
  *a1 = result;
  return result;
}

BOOL sub_180792DF8(BOOL result, void *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v4 = 0;
  if (result)
  {
    if (result)
    {
      uint64_t v6 = *a3++;
      uint64_t v5 = v6;
      uint64_t v7 = *a4++;
      BOOL v4 = __CFADD__(v5, v7);
      *a2++ = v5 + v7;
    }

    if (result & 2)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = a3[1];
      a3 += 2;
      uint64_t v10 = *a4;
      uint64_t v11 = a4[1];
      a4 += 2;
      uint64_t v13 = v4 + v8;
      BOOL v4 = __CFADD__(v4, v8) | __CFADD__(v10, v13);
      uint64_t v12 = v10 + v13;
      uint64_t v14 = v4 + v9;
      BOOL v4 = __CFADD__(v4, v9) | __CFADD__(v11, v14);
      *a2 = v12;
      a2[1] = v11 + v14;
      a2 += 2;
    }

    BOOL v15 = result & 0xFFFFFFFC;
    if (v15)
    {
      int v16 = v15 - 4;
      uint64_t v18 = *a3;
      uint64_t v19 = a3[1];
      char v17 = a3 + 2;
      uint64_t v21 = *a4;
      uint64_t v22 = a4[1];
      char v20 = a4 + 2;
      uint64_t v24 = *v17;
      uint64_t v25 = v17[1];
      uint64_t v23 = v17 + 2;
      uint64_t v27 = *v20;
      uint64_t v28 = v20[1];
      for (uint64_t i = v20 + 2; v16; uint64_t i = v38 + 2)
      {
        uint64_t v30 = v4 + v18;
        BOOL v4 = __CFADD__(v4, v18) | __CFADD__(v21, v30);
        uint64_t v29 = v21 + v30;
        uint64_t v32 = v4 + v19;
        BOOL v4 = __CFADD__(v4, v19) | __CFADD__(v22, v32);
        uint64_t v31 = v22 + v32;
        uint64_t v18 = *v23;
        uint64_t v19 = v23[1];
        unint64_t v33 = v23 + 2;
        uint64_t v35 = v4 + v24;
        BOOL v4 = __CFADD__(v4, v24) | __CFADD__(v27, v35);
        uint64_t v34 = v27 + v35;
        *a2 = v29;
        a2[1] = v31;
        unint64_t v36 = a2 + 2;
        uint64_t v37 = v4 + v25;
        BOOL v4 = __CFADD__(v4, v25) | __CFADD__(v28, v37);
        uint64_t v21 = *i;
        uint64_t v22 = i[1];
        unint64_t v38 = i + 2;
        *unint64_t v36 = v34;
        v36[1] = v28 + v37;
        a2 = v36 + 2;
        v16 -= 4;
        uint64_t v24 = *v33;
        uint64_t v25 = v33[1];
        uint64_t v23 = v33 + 2;
        uint64_t v27 = *v38;
        uint64_t v28 = v38[1];
      }

      uint64_t v40 = v4 + v18;
      BOOL v4 = __CFADD__(v4, v18) | __CFADD__(v21, v40);
      uint64_t v39 = v21 + v40;
      uint64_t v42 = v4 + v19;
      BOOL v4 = __CFADD__(v4, v19) | __CFADD__(v22, v42);
      uint64_t v41 = v22 + v42;
      uint64_t v44 = v4 + v24;
      BOOL v4 = __CFADD__(v4, v24) | __CFADD__(v27, v44);
      uint64_t v43 = v27 + v44;
      uint64_t v45 = v4 + v25;
      BOOL v4 = __CFADD__(v4, v25) | __CFADD__(v28, v45);
      *a2 = v39;
      a2[1] = v41;
      uint64_t v46 = a2 + 2;
      *uint64_t v46 = v43;
      v46[1] = v28 + v45;
    }

    return v4;
  }

  return result;
}

BOOL sub_180792EAC(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5)
{
  if (a2) {
    return sub_180793D90(a2, a3, a4, a5);
  }
  else {
    return a5;
  }
}

uint64_t sub_180792ECC(uint64_t result, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v5 = qword_18C534108 ^ (qword_18C534108 << 13) ^ ((qword_18C534108 ^ (unint64_t)(qword_18C534108 << 13)) >> 7);
  uint64_t v6 = v5 ^ (v5 << 17);
  qword_18C534108 = v6;
  for (uint64_t i = __ROR8__(0x5555555555555555LL, a2 | (2 * v6)); result; --result)
  {
    uint64_t v9 = *a4++;
    uint64_t v8 = v9;
    uint64_t v10 = *a5++;
    *a3 = v10 ^ v6;
    *a3++ = (v10 ^ v8) & 0x5555555555555555LL ^ v10 ^ v6 ^ (v10 ^ v8) & i ^ v6;
  }

  return result;
}

uint64_t sub_180792F2C()
{
  unint64_t v0 = qword_18C534108 ^ (qword_18C534108 << 13) ^ ((qword_18C534108 ^ (unint64_t)(qword_18C534108 << 13)) >> 7);
  uint64_t result = v0 ^ (v0 << 17);
  qword_18C534108 = result;
  return result;
}

uint64_t sub_180792F48(uint64_t a1, uint64_t a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v10 = sub_180792314(a2);
  unint64_t v11 = sub_180793190(v10, a5);
  if (v11)
  {
    unint64_t v12 = v11;
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v13 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v10);
    sub_180793720(v10, v13, a4);
    sub_180799364(a1, a2);
    sub_1807990F0(a1, a2);
    uint64_t v14 = (*(unint64_t *)((char *)a5 + (((v12 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v12 - 1)) & 1;
    if ((v12 & 1) == 0) {
      uint64_t v14 = (*(unint64_t *)((char *)a5 + (((v12 - 2) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> (v12 - 2)) & 1 | (2 * v14);
    }
    sub_180793720(v10, a3, &v13[8 * (v14 - 1) * v10]);
    if ((v12 | 0xFFFFFFFFFFFFFFFELL) + v12)
    {
      unint64_t v15 = v12 + (v12 | 0xFFFFFFFFFFFFFFFELL) - 1;
      do
      {
        sub_180799364(a1, a2);
        sub_180799364(a1, a2);
        v15 -= 2LL;
      }

      while (v15 != -1LL);
    }

    *(void *)(a1 + 16) = v17;
  }

  else
  {
    sub_1807973D4(v10, a3, 1LL);
    sub_18078DC40(a1, a2);
  }

  return 0LL;
}

unint64_t sub_180793138(unint64_t result, unint64_t *a2)
{
  if (result)
  {
    unint64_t v2 = result;
    uint64_t result = 0LL;
    uint64_t v3 = 64LL;
    do
    {
      unint64_t v4 = *a2++;
      uint64_t result = ((((v4 | HIDWORD(v4)) + 0xFFFFFFFF) >> 32) - 1) & result | (v3 - __clz(v4 | 1)) & -(uint64_t)(((v4 | HIDWORD(v4)) + 0xFFFFFFFF) >> 32);
      v3 += 64LL;
      --v2;
    }

    while (v2);
  }

  return result;
}

void sub_180793198()
{
}

uint64_t sub_1807931A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_180792330(a2, a3, a4, a5);
}

uint64_t sub_1807931B8( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t *a8)
{
  v65[2] = *MEMORY[0x1895F89C0];
  uint64_t v12 = sub_1807935CC(a6, a8);
  unint64_t v13 = a2 - v12;
  uint64_t v50 = *(void *)(a1 + 16);
  uint64_t v14 = v12 + 1;
  unint64_t v15 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  int v16 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  uint64_t v59 = a1;
  uint64_t v17 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  v15[v12] = 0LL;
  uint64_t v57 = v12 - 1;
  unint64_t v18 = __clz(a8[v12 - 1]);
  sub_180797B0C(v12, (uint64_t)v15, (uint64_t)a8, v18, v19);
  int v20 = -(int)v18;
  unint64_t v60 = v18;
  unint64_t v21 = v18 + 0xFFFFFFFF;
  if (v12) {
    sub_180793720(v12, v16, (void *)(a3 + 8 * v13));
  }
  uint64_t v53 = -(uint64_t)HIDWORD(v21);
  char v54 = v20 & 0x3F;
  sub_1807973CC(1LL, (char *)v16 + 8 * v12);
  sub_180797B0C(v14, (uint64_t)v16, (uint64_t)v16, v60, v22);
  unint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  unint64_t v26 = v15[v57];
  uint64_t v27 = -(uint64_t)v26;
  unint64_t v29 = (unsigned __int128)-(__int128)__PAIR128__(v28, v26) >> 64;
  uint64_t v30 = 65LL;
  unint64_t v31 = v26;
  do
  {
    unsigned __int128 v32 = __PAIR128__(v29, v27) - __PAIR128__(v31, v23);
    unint64_t v33 = (unint64_t)((__PAIR128__(v29, v27) - __PAIR128__(v31, v23)) >> 64) >> 63;
    uint64_t v34 = v29 & ((uint64_t)((__PAIR128__(v29, v27) - __PAIR128__(v31, v23)) >> 64) >> 63);
    uint64_t v27 = (v33 - 1) & v32 | v27 & (*((uint64_t *)&v32 + 1) >> 63);
    *((void *)&v35 + 1) = v25;
    *(void *)&__int128 v35 = v24;
    uint64_t v25 = v35 >> 63;
    *((void *)&v35 + 1) = v24;
    *(void *)&__int128 v35 = *((void *)&v32 + 1);
    unint64_t v29 = (v33 != 0 ? 0 : *((void *)&v32 + 1)) | v34;
    uint64_t v24 = (v35 >> 63) ^ 1;
    *((void *)&v35 + 1) = v31;
    *(void *)&__int128 v35 = v23;
    unint64_t v23 = v35 >> 1;
    v31 >>= 1;
    --v30;
  }

  while (v30);
  unint64_t v56 = (v24 + 2) | ((((HIDWORD(v15[v57]) ^ 0x80000000 | v15[v57]) + 0xFFFFFFFF) >> 32) - 1);
  size_t v52 = 8 * v12;
  uint64_t v58 = v12;
  unint64_t v36 = (void *)(a3 - 8 * v12 + 8 * a2);
  unint64_t v37 = v13;
  do
  {
    unint64_t v38 = v13;
    uint64_t v39 = *v36 << v60;
    v16->i64[0] = v39;
    if (v37) {
      v16->i64[0] = ((*(v36 - 1) & (unint64_t)v53) >> v54) | v39;
    }
    unint64_t v40 = v16->u64[v58];
    uint64_t v41 = v16->i64[v57];
    uint64_t v63 = v15[v57];
    unint64_t v42 = ((__PAIR128__(v40, v41) - (unint64_t)v63) >> 64) + ((v40 * (unsigned __int128)v56) >> 64) + 2;
    if (v42 < v40) {
      unint64_t v42 = -1LL;
    }
    unint64_t v62 = v42;
    v65[0] = 0LL;
    v65[1] = 0LL;
    sub_180792330(1LL, (uint64_t)v65, (uint64_t)&v62, (uint64_t)&v63);
    v64[0] = v41;
    v64[1] = v40;
    BOOL v43 = sub_180793B6C(0LL, 2LL, v65, v64, (unint64_t *)v65);
    v62 -= 2 * v43;
    BOOL v44 = sub_180792EAC(0LL, 2LL, v65, v65, v63);
    unint64_t v45 = v62 + v44;
    v17[v58] = sub_1807935C8(v58, v17, v15, v62 + v44);
    BOOL v46 = sub_180793B6C(v59, v14, v16, v16->i64, v17);
    uint64_t v47 = v46 - sub_18079810C(v14, v46, v16->i64, v16->i64, (uint64_t *)v15);
    uint64_t result = sub_18079810C(v14, v47, v16->i64, v16->i64, (uint64_t *)v15);
    if (a5 && v37 < a4) {
      *(void *)(a5 + 8 * v37) = v45 - (v46 + v47);
    }
    if (v37) {
      uint64_t result = (uint64_t)memmove(&v16->u64[1], v16, v52);
    }
    --v37;
    --v36;
    unint64_t v13 = v38;
  }

  while (v37 <= v38);
  if (a5 && a4 > v38 + 1) {
    uint64_t result = sub_1807980F8(8 * (a4 - (v38 + 1)), (void *)(a5 + 8 * (v38 + 1)));
  }
  if (a7)
  {
    sub_180793734(v58, v16, v16, v60);
    if (v58) {
      sub_180793720(v58, a7, v16);
    }
    uint64_t result = sub_1807973CC(a6 - v58, &a7[8 * v58]);
  }

  *(void *)(v59 + 16) = v50;
  return result;
}

uint64_t sub_1807935D0(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, unint64_t, uint64_t))
{
  char v4 = a1;
  unint64_t v5 = (unint64_t)(a1 + 63) >> 6;
  uint64_t result = (*a3)(a3, 8 * v5, a2);
  if (!(_DWORD)result) {
    *(void *)(a2 + 8 * v5 - 8) &= 0xFFFFFFFFFFFFFFFFLL >> -(((((unint64_t)(v4 & 0x3F) + 0xFFFFFFFF) >> 32) - 1) & 0x40 | v4 & 0x3F);
  }
  return result;
}

uint64_t sub_180793650(unint64_t a1, void *a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = 8 * a1;
  if (a3 > 8 * a1)
  {
    int v5 = 0;
    unint64_t v6 = a3 - v4;
    uint64_t v7 = a4;
    do
    {
      int v8 = *v7++;
      v5 |= v8;
      --a3;
    }

    while (a3 > v4);
    if (v5) {
      return 4294967289LL;
    }
    a4 += v6;
    a3 = 8 * a1;
  }

  if (a3 < 8)
  {
    unint64_t v10 = 0LL;
  }

  else
  {
    unint64_t v10 = ((a3 - 8) >> 3) + 1;
    unint64_t v11 = a2;
    unint64_t v12 = v10;
    do
    {
      *v11++ = bswap64(*(void *)&a4[a3 - 8]);
      a3 -= 8LL;
      --v12;
    }

    while (v12);
  }

  if (a3)
  {
    unint64_t v13 = 0LL;
    uint64_t v14 = -(uint64_t)a3;
    do
      unint64_t v13 = a4[a3 + v14] | (v13 << 8);
    while (!__CFADD__(v14++, 1LL));
    a2[v10++] = v13;
  }

  if (v10 < a1) {
    bzero(&a2[v10], v4 - 8 * v10);
  }
  return 0LL;
}

void *sub_180793720(uint64_t a1, void *__dst, void *__src)
{
  return memmove(__dst, __src, 8 * a1);
}

uint64_t sub_180793734(uint64_t result, int8x16_t *a2, int8x16_t *a3, uint64_t a4)
{
  if (result) {
    return sub_1807971F4(result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_180793740(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t a4)
{
  uint64_t result = sub_180793734(a1, a2, a3, a4 & 0x3F);
  if (a1)
  {
    uint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = v8;
      do
      {
        v9 |= ((((v10 ^ ((_DWORD)v8 + (a4 >> 6)) | ((v10 ^ (v8 + (a4 >> 6))) >> 32))
               + 0xFFFFFFFF) >> 32)
             - 1) & a2->i64[v10];
        ++v10;
      }

      while (a1 != v10);
      a2->i64[v8++] = v9;
    }

    while (v8 != a1);
  }

  return result;
}

void *sub_1807937D0()
{
  return &unk_1896FA8C8;
}

void *sub_1807937DC(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, unint64_t *a5)
{
  return sub_180793E80(a3, a4, a5);
}

void *sub_1807937EC(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  return sub_180793E80(a3, a4, a4);
}

uint64_t sub_1807937FC(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = 4;
  uint64_t v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4LL);
  uint64_t v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4LL);
  unint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4LL);
  sub_180793E80(v9, a4, a4);
  sub_180793E80(v10, v9, a4);
  sub_180793E80(v10, v10, v10);
  sub_180793E80(v10, v10, v10);
  sub_180793E80(v9, v9, v10);
  sub_180793E80(v10, v9, a4);
  sub_180793720(4LL, v11, v10);
  do
  {
    sub_180793E80(v10, v10, v10);
    --v8;
  }

  while (v8);
  sub_180793E80(v9, v9, v10);
  sub_180793E80(v10, v9, a4);
  int v12 = 8;
  do
  {
    sub_180793E80(v10, v10, v10);
    --v12;
  }

  while (v12);
  sub_180793E80(v9, v9, v10);
  sub_180793E80(v10, v9, a4);
  int v13 = 16;
  do
  {
    sub_180793E80(v10, v10, v10);
    --v13;
  }

  while (v13);
  sub_180793E80(v9, v9, v10);
  sub_180793E80(v10, v9, a4);
  sub_180793720(4LL, v11, v10);
  int v14 = 32;
  do
  {
    sub_180793E80(v11, v11, v11);
    --v14;
  }

  while (v14);
  sub_180793E80(v11, v11, v10);
  int v15 = 32;
  do
  {
    sub_180793E80(v11, v11, v11);
    --v15;
  }

  while (v15);
  sub_180793E80(v11, v11, v10);
  sub_180793720(4LL, v10, v11);
  int v16 = 32;
  do
  {
    sub_180793E80(v11, v11, v11);
    --v16;
  }

  while (v16);
  sub_180793E80(v11, v11, v9);
  int v17 = 96;
  do
  {
    sub_180793E80(v11, v11, v11);
    --v17;
  }

  while (v17);
  sub_180793E80(v10, v10, v11);
  sub_180793E80(v9, v10, a4);
  v19[0] = xmmword_1807A4470;
  v19[1] = unk_1807A4480;
  sub_180793E80(v9, v9, (unint64_t *)v19);
  if (sub_1807935CC(4LL, (uint64_t *)v9) == 1 && *v9 == 1)
  {
    sub_180793720(4LL, a3, v10);
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t result = 4294967254LL;
  }

  *(void *)(a1 + 16) = v7;
  return result;
}

void *sub_180793B08(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  v5[0] = xmmword_1807A4470;
  v5[1] = unk_1807A4480;
  return sub_180793E80(a3, a4, (unint64_t *)v5);
}

BOOL sub_180793B6C(uint64_t a1, BOOL a2, void *a3, uint64_t *a4, unint64_t *a5)
{
  return sub_180793B80(a2, a3, a4, a5);
}

BOOL sub_180793B80(BOOL result, void *a2, uint64_t *a3, unint64_t *a4)
{
  _BOOL1 v4 = 1;
  if (result)
  {
    if (result)
    {
      unint64_t v6 = *a3++;
      unint64_t v5 = v6;
      unint64_t v7 = *a4++;
      _BOOL1 v4 = v5 >= v7;
      *a2++ = v5 - v7;
    }

    if (result & 2)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = a3[1];
      a3 += 2;
      unint64_t v10 = *a4;
      unint64_t v11 = a4[1];
      a4 += 2;
      _BOOL1 v13 = v4;
      _BOOL1 v4 = __CFSUB__(v8, v10, v4);
      uint64_t v12 = v8 - (v10 + !v13);
      _BOOL1 v14 = v4;
      _BOOL1 v4 = __CFSUB__(v9, v11, v4);
      *a2 = v12;
      a2[1] = v9 - (v11 + !v14);
      a2 += 2;
    }

    BOOL v15 = result & 0xFFFFFFFC;
    if (v15)
    {
      int v16 = v15 - 4;
      uint64_t v18 = *a3;
      uint64_t v19 = a3[1];
      int v17 = a3 + 2;
      unint64_t v21 = *a4;
      uint64_t v22 = a4[1];
      uint64_t v20 = (uint64_t *)(a4 + 2);
      uint64_t v24 = *v17;
      uint64_t v25 = v17[1];
      unint64_t v23 = v17 + 2;
      uint64_t v27 = *v20;
      uint64_t v28 = v20[1];
      for (uint64_t i = v20 + 2; v16; uint64_t i = v38 + 2)
      {
        _BOOL1 v30 = v4;
        _BOOL1 v4 = __CFSUB__(v18, v21, v4);
        uint64_t v29 = v18 - (v21 + !v30);
        _BOOL1 v32 = v4;
        _BOOL1 v4 = __CFSUB__(v19, v22, v4);
        uint64_t v31 = v19 - (v22 + !v32);
        uint64_t v18 = *v23;
        uint64_t v19 = v23[1];
        unint64_t v33 = v23 + 2;
        _BOOL1 v35 = v4;
        _BOOL1 v4 = __CFSUB__(v24, v27, v4);
        uint64_t v34 = v24 - (v27 + !v35);
        *a2 = v29;
        a2[1] = v31;
        unint64_t v36 = a2 + 2;
        _BOOL1 v37 = v4;
        _BOOL1 v4 = __CFSUB__(v25, v28, v4);
        unint64_t v21 = *i;
        uint64_t v22 = i[1];
        unint64_t v38 = i + 2;
        *unint64_t v36 = v34;
        v36[1] = v25 - (v28 + !v37);
        a2 = v36 + 2;
        v16 -= 4;
        uint64_t v24 = *v33;
        uint64_t v25 = v33[1];
        unint64_t v23 = v33 + 2;
        uint64_t v27 = *v38;
        uint64_t v28 = v38[1];
      }

      _BOOL1 v40 = v4;
      _BOOL1 v4 = __CFSUB__(v18, v21, v4);
      uint64_t v39 = v18 - (v21 + !v40);
      _BOOL1 v42 = v4;
      _BOOL1 v4 = __CFSUB__(v19, v22, v4);
      uint64_t v41 = v19 - (v22 + !v42);
      _BOOL1 v44 = v4;
      _BOOL1 v4 = __CFSUB__(v24, v27, v4);
      uint64_t v43 = v24 - (v27 + !v44);
      _BOOL1 v45 = v4;
      _BOOL1 v4 = __CFSUB__(v25, v28, v4);
      *a2 = v39;
      a2[1] = v41;
      BOOL v46 = a2 + 2;
      *BOOL v46 = v43;
      v46[1] = v25 - (v28 + !v45);
    }

    return !v4;
  }

  return result;
}

unint64_t sub_180793C34(uint64_t a1, void *a2, unint64_t *a3, unint64_t a4)
{
  {
    unint64_t v4 = *a3++;
    unsigned __int128 v5 = v4 - (unsigned __int128)a4;
    *a2++ = v5;
    a4 = *((void *)&v5 + 1) >> 63;
  }

  return a4;
}

unint64_t sub_180793C64(unint64_t a1, unint64_t *a2)
{
  return (sub_180793138(a1, a2) + 7) >> 3;
}

uint64_t sub_180793C80(unint64_t a1, unint64_t *a2, unint64_t a3, char *__s)
{
  if (a3 > 0x7FFFFFFE) {
    return 4294967289LL;
  }
  unint64_t v6 = 8 * a1;
  if (8 * a1 > 0x7FFFFFFE) {
    return 4294967289LL;
  }
  unint64_t v7 = __s;
  unint64_t v8 = a3;
  unint64_t v10 = a3 - v6;
  if (a3 <= v6)
  {
    LODWORD(v10) = 0;
  }

  else
  {
    sub_1807980F8(a3 - v6, __s);
    v7 += v10;
    unint64_t v8 = v6;
  }

  unint64_t v11 = sub_180793138(a1, a2);
  if (v8 < (v11 + 7) >> 3) {
    return 4294967289LL;
  }
  uint64_t result = (_DWORD)v10 + (_DWORD)v8 - ((v11 + 7) >> 3);
  if (v8 < 8)
  {
    unint64_t v12 = 0LL;
  }

  else
  {
    unint64_t v12 = ((v8 - 8) >> 3) + 1;
    _BOOL1 v13 = a2;
    unint64_t v14 = v12;
    do
    {
      unint64_t v15 = *v13++;
      *(void *)&v7[v8 - 8] = bswap64(v15);
      v8 -= 8LL;
      --v14;
    }

    while (v14);
  }

  if (v8)
  {
    unint64_t v16 = a2[v12];
    int v17 = &v7[v8 - 1];
    do
    {
      *v17-- = v16;
      v16 >>= 8;
      --v8;
    }

    while (v8);
  }

  return result;
}

BOOL sub_180793D90(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  if (!a1) {
    return a4;
  }
  uint64_t v5 = *a3;
  unint64_t v4 = a3 + 1;
  BOOL v6 = __CFADD__(v5, a4);
  *a2 = v5 + a4;
  for (uint64_t i = a2 + 1; --a1; ++i)
  {
    uint64_t v8 = *v4++;
    BOOL v9 = v6;
    BOOL v6 = __CFADD__(v6, v8);
    void *i = v9 + v8;
  }

  return v6;
}

uint64_t sub_180793DC8(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = sub_180792F2C();
  uint64_t v9 = __ROR8__(0x5555555555555555LL, a2 | (2 * result));
  if (a1)
  {
    BOOL v10 = 1LL;
    do
    {
      uint64_t v12 = *a4++;
      uint64_t v11 = v12;
      BOOL v13 = v10 + ~v12;
      BOOL v10 = __CFADD__(v10, ~v12);
      uint64_t v14 = v11 ^ v13;
      uint64_t v15 = v11 ^ result;
      *a3 = v15;
      *a3++ = v14 & v9 ^ v14 & 0x5555555555555555LL ^ v15 ^ result;
      --a1;
    }

    while (a1);
  }

  return result;
}

unint64_t sub_180793E54(uint64_t a1)
{
  return ((unint64_t)(sub_18079231C(a1) + 7) >> 3) + 1;
}

uint64_t sub_180793E74()
{
  return 8LL;
}

void *sub_180793E80(void *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v3 = a2 + 2;
  unint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  unint64_t v9 = *a3;
  unint64_t v10 = a3[1];
  uint64_t v8 = a3 + 2;
  unint64_t v11 = *v8;
  unint64_t v12 = v8[1];
  uint64_t v13 = v4 * v9;
  uint64_t v14 = (v5 * (unsigned __int128)v9) >> 64;
  uint64_t v15 = *v3 * v9;
  uint64_t v16 = (v6 * (unsigned __int128)v9) >> 64;
  unint64_t v18 = v9;
  uint64_t v17 = (__PAIR128__(v5, v4) * v9) >> 64;
  _BOOL1 v19 = __CFADD__(__CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9), v14);
  uint64_t v20 = __CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9) + v14;
  v19 |= __CFADD__(v15, v20);
  v20 += v15;
  uint64_t v21 = (v7 * (unsigned __int128)v9) >> 64;
  uint64_t v22 = (v7 * (unsigned __int128)v10) >> 64;
  BOOL v24 = v19;
  _BOOL1 v19 = __CFADD__(v19, v16);
  uint64_t v23 = v24 + v16;
  v19 |= __CFADD__(v7 * v9, v23);
  v23 += v7 * v9;
  BOOL v26 = v19;
  _BOOL1 v19 = __CFADD__(v19, v21);
  uint64_t v25 = v26 + v21;
  v19 |= __CFADD__(v7 * v10, v25);
  v25 += v7 * v10;
  uint64_t v27 = v7 * *v8;
  uint64_t v28 = (v7 * (unsigned __int128)v11) >> 64;
  BOOL v30 = v19;
  _BOOL1 v19 = __CFADD__(v19, v22);
  uint64_t v29 = v30 + v22;
  v19 |= __CFADD__(v27, v29);
  v29 += v27;
  BOOL v32 = v19;
  _BOOL1 v19 = __CFADD__(v19, v28);
  uint64_t v31 = v32 + v28;
  v19 |= __CFADD__(v7 * v12, v31);
  v31 += v7 * v12;
  uint64_t v33 = v19 + ((v7 * (unsigned __int128)v12) >> 64);
  uint64_t v34 = (v4 * (unsigned __int128)v10) >> 64;
  _BOOL1 v19 = __CFADD__(v17, v4 * v10);
  uint64_t v35 = (__PAIR128__(v10, v18) * __PAIR128__(v5, v4)) >> 64;
  BOOL v37 = v19;
  _BOOL1 v19 = __CFADD__(v19, v20);
  uint64_t v36 = v37 + v20;
  v19 |= __CFADD__(v34, v36);
  v36 += v34;
  uint64_t v38 = (v6 * (unsigned __int128)v10) >> 64;
  BOOL v40 = v19;
  _BOOL1 v19 = __CFADD__(v19, v23);
  uint64_t v39 = v40 + v23;
  v19 |= __CFADD__(v6 * v10, v39);
  v39 += v6 * v10;
  BOOL v42 = v19;
  _BOOL1 v19 = __CFADD__(v19, v25);
  uint64_t v41 = v42 + v25;
  v19 |= __CFADD__(v38, v41);
  v41 += v38;
  uint64_t v43 = (v6 * (unsigned __int128)v12) >> 64;
  BOOL v45 = v19;
  _BOOL1 v19 = __CFADD__(v19, v29);
  uint64_t v44 = v45 + v29;
  v19 |= __CFADD__(v6 * v12, v44);
  v44 += v6 * v12;
  BOOL v47 = v19;
  _BOOL1 v19 = __CFADD__(v19, v31);
  uint64_t v46 = v47 + v31;
  v19 |= __CFADD__(v43, v46);
  v46 += v43;
  uint64_t v48 = v19 + v33;
  uint64_t v49 = (v5 * (unsigned __int128)v10) >> 64;
  _BOOL1 v19 = __CFADD__(v36, v5 * v10);
  uint64_t v50 = v36 + v5 * v10;
  BOOL v52 = v19;
  _BOOL1 v19 = __CFADD__(v19, v39);
  uint64_t v51 = v52 + v39;
  v19 |= __CFADD__(v49, v51);
  v51 += v49;
  uint64_t v53 = (v6 * (unsigned __int128)v11) >> 64;
  BOOL v55 = v19;
  _BOOL1 v19 = __CFADD__(v19, v41);
  uint64_t v54 = v55 + v41;
  v19 |= __CFADD__(v6 * v11, v54);
  v54 += v6 * v11;
  BOOL v57 = v19;
  _BOOL1 v19 = __CFADD__(v19, v44);
  uint64_t v56 = v57 + v44;
  v19 |= __CFADD__(v53, v56);
  v56 += v53;
  BOOL v58 = v19;
  uint64_t v59 = (v4 * (unsigned __int128)v11) >> 64;
  _BOOL1 v19 = __CFADD__(v50, v4 * v11);
  uint64_t v60 = v50 + v4 * v11;
  BOOL v62 = v19;
  _BOOL1 v19 = __CFADD__(v19, v51);
  uint64_t v61 = v62 + v51;
  v19 |= __CFADD__(v59, v61);
  v61 += v59;
  uint64_t v63 = (v5 * (unsigned __int128)v12) >> 64;
  BOOL v65 = v19;
  _BOOL1 v19 = __CFADD__(v19, v54);
  uint64_t v64 = v65 + v54;
  v19 |= __CFADD__(v5 * v12, v64);
  v64 += v5 * v12;
  BOOL v67 = v19;
  _BOOL1 v19 = __CFADD__(v19, v56);
  uint64_t v66 = v67 + v56;
  v19 |= __CFADD__(v63, v66);
  v66 += v63;
  uint64_t v68 = v19 + v58;
  uint64_t v69 = (v5 * (unsigned __int128)v11) >> 64;
  _BOOL1 v19 = __CFADD__(v61, v5 * v11);
  uint64_t v70 = v61 + v5 * v11;
  BOOL v72 = v19;
  _BOOL1 v19 = __CFADD__(v19, v64);
  uint64_t v71 = v72 + v64;
  v19 |= __CFADD__(v69, v71);
  v71 += v69;
  uint64_t v73 = v19;
  uint64_t v74 = (v4 * (unsigned __int128)v12) >> 64;
  _BOOL1 v19 = __CFADD__(v70, v4 * v12);
  uint64_t v75 = v70 + v4 * v12;
  BOOL v77 = v19;
  _BOOL1 v19 = __CFADD__(v19, v71);
  uint64_t v76 = v77 + v71;
  v19 |= __CFADD__(v74, v76);
  v76 += v74;
  BOOL v79 = v19;
  _BOOL1 v19 = __CFADD__(v19, v66);
  uint64_t v78 = v79 + v66;
  v19 |= __CFADD__(v73, v78);
  v78 += v73;
  BOOL v81 = v19;
  _BOOL1 v19 = __CFADD__(v19, v46);
  uint64_t v80 = v81 + v46;
  v19 |= __CFADD__(v68, v80);
  v80 += v68;
  uint64_t v82 = v19 + v48;
  unint64_t v83 = 0xFFFFFFFF00000000LL * v13;
  unint64_t v84 = (unint64_t)-v13 >> 32;
  _BOOL1 v19 = __CFADD__(__CFADD__(v13, -v13), v35);
  unint64_t v85 = __CFADD__(v13, -v13) + v35;
  BOOL v87 = v19;
  _BOOL1 v19 = __CFADD__(v19, v60);
  uint64_t v86 = v87 + v60;
  BOOL v89 = v19;
  _BOOL1 v19 = __CFADD__(v19, v75);
  unint64_t v88 = v89 + v75;
  v19 |= __CFADD__(0xFFFFFFFF00000000LL * v13, v88);
  v88 += 0xFFFFFFFF00000000LL * v13;
  unint64_t v90 = v19 + v84;
  _BOOL1 v19 = v85 >= v83;
  unint64_t v91 = v85 - v83;
  LOBYTE(v89) = v19;
  _BOOL1 v19 = __CFSUB__(v86, v84, v19);
  unint64_t v92 = v86 - (v84 + !v89);
  unsigned __int128 v93 = __PAIR128__(v90, v88) - !v19;
  unint64_t v94 = 0xFFFFFFFF00000000LL * v91;
  unint64_t v95 = (unint64_t)-(uint64_t)v91 >> 32;
  _BOOL1 v19 = __CFADD__(__CFADD__(v91, -(uint64_t)v91), v92);
  unsigned __int128 v98 = __PAIR128__(v93, __CFADD__(v91, -(uint64_t)v91)) + v92;
  uint64_t v97 = v98 >> 64;
  unint64_t v96 = v98;
  BOOL v100 = __CFADD__(v19, (void)v93);
  _BOOL1 v19 = __CFADD__(v100, v76);
  unint64_t v99 = v100 + v76;
  v19 |= __CFADD__(0xFFFFFFFF00000000LL * v91, v99);
  v99 += 0xFFFFFFFF00000000LL * v91;
  unint64_t v101 = v19 + v95;
  _BOOL1 v19 = v96 >= v94;
  unint64_t v102 = v96 - v94;
  LOBYTE(v100) = v19;
  _BOOL1 v19 = __CFSUB__(v97, v95, v19);
  unint64_t v103 = v97 - (v95 + !v100);
  unsigned __int128 v104 = __PAIR128__(v101, v99) - !v19;
  unint64_t v105 = 0xFFFFFFFF00000000LL * v102;
  unint64_t v106 = (unint64_t)-(uint64_t)v102 >> 32;
  _BOOL1 v19 = __CFADD__(__CFADD__(v102, -(uint64_t)v102), v103);
  unsigned __int128 v109 = __PAIR128__(v104, __CFADD__(v102, -(uint64_t)v102)) + v103;
  uint64_t v108 = v109 >> 64;
  unint64_t v107 = v109;
  BOOL v111 = __CFADD__(v19, (void)v104);
  _BOOL1 v19 = __CFADD__(v111, v78);
  unint64_t v110 = v111 + v78;
  v19 |= __CFADD__(0xFFFFFFFF00000000LL * v102, v110);
  v110 += 0xFFFFFFFF00000000LL * v102;
  unint64_t v112 = v19 + v106;
  _BOOL1 v19 = v107 >= v105;
  unint64_t v113 = v107 - v105;
  LOBYTE(v111) = v19;
  _BOOL1 v19 = __CFSUB__(v108, v106, v19);
  unint64_t v114 = v108 - (v106 + !v111);
  unsigned __int128 v115 = __PAIR128__(v112, v110) - !v19;
  unint64_t v116 = 0xFFFFFFFF00000000LL * v113;
  unint64_t v117 = (unint64_t)-(uint64_t)v113 >> 32;
  _BOOL1 v19 = __CFADD__(__CFADD__(v113, -(uint64_t)v113), v114);
  unsigned __int128 v120 = __PAIR128__(v115, __CFADD__(v113, -(uint64_t)v113)) + v114;
  uint64_t v119 = v120 >> 64;
  unint64_t v118 = v120;
  BOOL v122 = __CFADD__(v19, (void)v115);
  _BOOL1 v19 = __CFADD__(v122, v80);
  unint64_t v121 = v122 + v80;
  v19 |= __CFADD__(0xFFFFFFFF00000000LL * v113, v121);
  v121 += 0xFFFFFFFF00000000LL * v113;
  unint64_t v123 = v19 + v117;
  _BOOL1 v19 = v118 >= v116;
  unint64_t v124 = v118 - v116;
  LOBYTE(v122) = v19;
  _BOOL1 v19 = __CFSUB__(v119, v117, v19);
  uint64_t v125 = v119 - (v117 + !v122);
  unsigned __int128 v126 = __PAIR128__(v123, v121) - !v19;
  uint64_t v127 = v126
  uint64_t v128 = v82
       + (__CFADD__( __CFADD__(__CFADD__(*((void *)&v93 + 1), v124), *((void *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((void *)&v93 + 1), v124) + *((void *)&v104 + 1)),  *((void *)&v115 + 1)) | __CFADD__( (void)v126,  (__CFADD__( __CFADD__(*((void *)&v93 + 1), v124),  *((void *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((void *)&v93 + 1), v124) + *((void *)&v104 + 1)))
                                                       + *((void *)&v115 + 1)))
       + *((void *)&v126 + 1);
  uint64_t v129 = *((void *)&v93 + 1) + v124 - 1;
  uint64_t v130 = v125
       + __CFADD__(*((void *)&v93 + 1), v124)
       + *((void *)&v104 + 1)
       - ((*((void *)&v93 + 1) + v124 == 0)
        - 0x100000000LL);
  _BOOL1 v19 = __CFSUB__( v127,  -1LL,  __PAIR128__( v125 + (unint64_t)__CFADD__(*((void *)&v93 + 1), v124) + *((void *)&v104 + 1),  *((void *)&v93 + 1) + v124) >= __PAIR128__(0xFFFFFFFF00000000LL, 1LL));
  uint64_t v131 = v127
       - ((__PAIR128__( v125 + (unint64_t)__CFADD__(*((void *)&v93 + 1), v124) + *((void *)&v104 + 1),  *((void *)&v93 + 1) + v124) < __PAIR128__(0xFFFFFFFF00000000LL, 1LL))
        - 1LL);
  LOBYTE(v122) = v19;
  _BOOL1 v19 = __CFSUB__(v128, 0xFFFFFFFFLL, v19);
  uint64_t v132 = v128 - (!v122 + 0xFFFFFFFFLL);
  unint64_t v133 = 1LL - !v19;
  uint64_t v134 = 1 - !v19;
  _BOOL1 v19 = __CFADD__(__CFADD__(v129, v133 >> 63), v130);
  uint64_t v135 = __CFADD__(v129, v133 >> 63) + v130;
  uint64_t v137 = v19 | __CFADD__(v133 & 0xFFFFFFFF00000000LL, v135);
  _BOOL1 v19 = __CFADD__(v137, v131);
  uint64_t v136 = v137 + v131;
  *a1 = v129 + (v133 >> 63);
  a1[1] = (v133 & 0xFFFFFFFF00000000LL) + v135;
  uint64_t result = a1 + 2;
  *uint64_t result = v133 + v136;
  result[1] = v134 + (v19 | __CFADD__(v133, v136)) + v132;
  return result;
}

uint64_t sub_1807940A4(unint64_t a1, _BYTE *a2, unint64_t a3, char *a4, uint64_t a5, void *a6)
{
  *a6 = 0LL;
  a6[1] = 0LL;
  if (a5)
  {
    uint64_t v9 = *(unsigned __int8 *)(a5 + 1);
    uint64_t v10 = a3 + v9 + 10;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = a3;
  }

  if (v10 + 11 > a1) {
    return 4294967273LL;
  }
  unint64_t v12 = a2 + 2;
  char v13 = a2[1] ^ 1 | *a2;
  if (a1 - v10 != 3)
  {
    uint64_t v14 = v10 - a1 + 3;
    do
    {
      char v15 = *v12++;
      v13 |= ~v15;
    }

    while (!__CFADD__(v14++, 1LL));
    unint64_t v12 = &a2[~v10 + a1];
  }

  uint64_t v17 = v12 + 1;
  char v18 = *v12 | v13;
  if (a5)
  {
    char v19 = v12[1] ^ 0x30;
    char v20 = v12[2] ^ (v10 - 2);
    char v21 = v12[3] ^ 0x30;
    uint64_t v22 = v12 + 5;
    char v23 = v12[4] ^ (v9 + 4);
    uint64_t v24 = v9 + 2;
    char v25 = sub_1807918B0(v9 + 2, v12 + 5, (char *)a5);
    BOOL v26 = &v22[v24];
    char v27 = v22[v24] ^ 5;
    char v28 = v22[v24 + 1];
    char v29 = v22[v24 + 2] ^ 4;
    uint64_t v17 = &v22[v24 + 4];
    v18 |= v19 | v20 | v21 | v23 | v25 | v27 | v28 | v29 | v26[3] ^ a3;
  }

  sub_1807942D0((uint64_t)a6, (uint64_t)&unk_1807A4720, a3, (uint64_t)a4, (uint64_t)v17);
  return (v18 | sub_1807918B0(a3, v17, a4));
}

unsigned __int8 *sub_180794230( unint64_t a1, void *a2, void *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (!a4) {
    return 0LL;
  }
  v6[0] = a4;
  v6[1] = a5;
  else {
    return 0LL;
  }
}

unint64_t sub_18079427C(uint64_t a1, void *a2, uint64_t *a3, BOOL a4, unint64_t *a5)
{
  uint64_t v5 = a1 - a4;
  unint64_t v6 = &a2[a4];
  unint64_t v7 = (unint64_t *)&a3[a4];
  unint64_t v8 = sub_180793B6C(0LL, a4, a2, a3, a5);
  return sub_180793C34(v5, v6, v7, v8);
}

uint64_t sub_1807942D0(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  for (unint64_t i = 0LL; i != 16; ++i)
    *(_BYTE *)(result + i) = *(_BYTE *)(a5 + i % a3) ^ *(_BYTE *)(a4 + i % a3) ^ *(_BYTE *)(a2 + i);
  if (a3 >= 0x11)
  {
    for (uint64_t j = 16LL; j != a3; ++j)
      *(_BYTE *)(result + (j & 0xF)) ^= *(_BYTE *)(a5 + j) ^ *(_BYTE *)(a4 + j);
  }

  return result;
}

uint64_t sub_180794338(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = sub_180799370((uint64_t)&a1[5 * *a1 + 4]);
  if ((sub_180793194(v4, a2, v5) & 0x80000000) == 0) {
    return 0xFFFFFFFFLL;
  }
  if (sub_1807935CC(*a1, a2)) {
    return 0LL;
  }
  return 0xFFFFFFFFLL;
}

int32x4_t *sub_1807944B0(int32x4_t *result, uint64_t a2, int8x16_t *a3)
{
  if (a2)
  {
    int8x16_t v4 = *a3;
    int8x16_t v5 = a3[1];
    int8x16_t v6 = a3[2];
    int8x16_t v7 = a3[3];
    uint64_t v3 = a3 + 4;
    _Q1 = (int32x4_t)vrev32q_s8(v5);
    int32x4_t v9 = *result;
    _Q2 = (int32x4_t)vrev32q_s8(v6);
    _Q17 = result[1];
    _Q3 = (int32x4_t)vrev32q_s8(v7);
    _Q18 = *result;
    _Q4 = vaddq_s32((int32x4_t)vrev32q_s8(v4), (int32x4_t)xmmword_1807943B0);
    _Q5 = vaddq_s32(_Q1, (int32x4_t)xmmword_1807943C0);
    _Q19 = _Q17;
    _Q6 = vaddq_s32(_Q2, (int32x4_t)xmmword_1807943D0);
    _Q7 = vaddq_s32(_Q3, (int32x4_t)xmmword_1807943E0);
    char v19 = &xmmword_1807943F0;
    int v20 = 3;
    do
    {
      _Q20 = _Q18;
      int32x4_t v22 = (int32x4_t)*v19;
      __asm { SHA256SU0       V0.4S, V1.4S }

      int32x4_t v28 = (int32x4_t)v19[1];
      __asm { SHA256H         Q18, Q19, V4.4S }

      int32x4_t v30 = (int32x4_t)v19[2];
      __asm { SHA256SU1       V0.4S, V2.4S, V3.4S }

      int32x4_t v32 = (int32x4_t)v19[3];
      __asm { SHA256H2        Q19, Q20, V4.4S }

      v19 += 4;
      _Q4 = vaddq_s32(_Q0, v22);
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V1.4S, V2.4S
        SHA256H         Q18, Q19, V5.4S
        SHA256SU1       V1.4S, V3.4S, V0.4S
        SHA256H2        Q19, Q20, V5.4S
      }

      _Q5 = vaddq_s32(_Q1, v28);
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V2.4S, V3.4S
        SHA256H         Q18, Q19, V6.4S
        SHA256SU1       V2.4S, V0.4S, V1.4S
        SHA256H2        Q19, Q20, V6.4S
      }

      _Q6 = vaddq_s32(_Q2, v30);
      --v20;
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V3.4S, V0.4S
        SHA256H         Q18, Q19, V7.4S
        SHA256SU1       V3.4S, V1.4S, V2.4S
        SHA256H2        Q19, Q20, V7.4S
      }

      _Q7 = vaddq_s32(_Q3, v32);
    }

    while (!(_NF ^ _VF | _ZF));
    BOOL v44 = a2 <= 1;
    uint64_t v45 = a2 - 1;
    if (!v44)
    {
      uint64_t v46 = (int32x4_t *)(v19 - 16);
      do
      {
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V4.4S }

        int8x16_t v49 = v3[1];
        int8x16_t v50 = v3[2];
        __asm { SHA256H2        Q19, Q20, V4.4S }

        int8x16_t v52 = v3[3];
        _Q4 = vaddq_s32((int32x4_t)vrev32q_s8(*v3), *v46);
        _Q20 = _Q18;
        v3 += 4;
        __asm { SHA256H         Q18, Q19, V5.4S }

        _Q1 = (int32x4_t)vrev32q_s8(v49);
        __asm { SHA256H2        Q19, Q20, V5.4S }

        _Q5 = vaddq_s32(_Q1, v46[1]);
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V6.4S }

        _Q2 = (int32x4_t)vrev32q_s8(v50);
        __asm { SHA256H2        Q19, Q20, V6.4S }

        _Q6 = vaddq_s32(_Q2, v46[2]);
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V7.4S }

        _Q3 = (int32x4_t)vrev32q_s8(v52);
        __asm { SHA256H2        Q19, Q20, V7.4S }

        _Q7 = vaddq_s32(_Q3, v46[3]);
        int32x4_t v9 = vaddq_s32(v9, _Q18);
        _Q17 = vaddq_s32(_Q17, _Q19);
        _Q20 = v9;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }

        _Q4 = vaddq_s32(_Q0, v46[4]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }

        _Q5 = vaddq_s32(_Q1, v46[5]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }

        _Q6 = vaddq_s32(_Q2, v46[6]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }

        _Q7 = vaddq_s32(_Q3, v46[7]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }

        _Q4 = vaddq_s32(_Q0, v46[8]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }

        _Q5 = vaddq_s32(_Q1, v46[9]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }

        _Q6 = vaddq_s32(_Q2, v46[10]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }

        _Q7 = vaddq_s32(_Q3, v46[11]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }

        _Q4 = vaddq_s32(_Q0, v46[12]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }

        _Q5 = vaddq_s32(_Q1, v46[13]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }

        _Q6 = vaddq_s32(_Q2, v46[14]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }

        _Q7 = vaddq_s32(_Q3, v46[15]);
        BOOL v44 = v45-- <= 1;
      }

      while (!v44);
    }

    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V4.4S
      SHA256H2        Q19, Q20, V4.4S
    }

    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V5.4S
      SHA256H2        Q19, Q20, V5.4S
    }

    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V6.4S
      SHA256H2        Q19, Q20, V6.4S
    }

    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V7.4S
      SHA256H2        Q19, Q20, V7.4S
    }

    *uint64_t result = vaddq_s32(v9, _Q18);
    result[1] = vaddq_s32(_Q17, _Q19);
  }

  return result;
}

uint64_t sub_1807947B0(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = (uint64_t *)(a2 + 3);
  uint64_t v9 = *a2;
  unint64_t v10 = sub_180793190(*a2, &a2[2 * *a2 + 4]);
  if (v9) {
    BOOL v11 = v10 >= 2;
  }
  else {
    BOOL v11 = 0;
  }
  else {
    return 4294967268LL;
  }
}

uint64_t sub_180794860( unint64_t *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, _BYTE *a7)
{
  void v25[2] = *MEMORY[0x1895F89C0];
  BOOL v24 = sub_1807974D4();
  *a7 = 0;
  unint64_t v13 = *a1;
  uint64_t v14 = sub_180792968();
  unint64_t v15 = sub_180793E74();
  v22[0] = sub_180799424(8 * ((v14 + v15 - 1) / v15 + 13 * v13) + 8);
  unint64_t v16 = *a1;
  uint64_t v17 = sub_180792968();
  unint64_t v18 = sub_180793E74();
  v22[1] = (v17 + v18 - 1) / v18 + 13 * v16 + 1;
  _OWORD v22[2] = 0LL;
  v22[3] = sub_18079945C;
  char v23 = sub_1807994A0;
  if (v22[0])
  {
    v25[0] = 0LL;
    v25[1] = 0LL;
    uint64_t v19 = sub_180790098((uint64_t)v22, a1, a2, a3, a4, a5, a6, 0, (unsigned __int8 *)v25);
    v23((uint64_t)v22);
    if ((_DWORD)v19)
    {
      if ((_DWORD)v19 == -146) {
        uint64_t v19 = 0LL;
      }
      else {
        uint64_t v19 = v19;
      }
    }

    else
    {
      *a7 = 1;
    }
  }

  else
  {
    uint64_t v19 = 4294967283LL;
  }

  sub_1807995F4((unsigned int *)&v24);
  return v19;
}

double sub_1807949DC( uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, void *a8)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (a8)
  {
    *a8 = 0LL;
    a8[1] = 0LL;
  }

  __int128 v10 = 0uLL;
  sub_180790098(a1, a2, a3, a4, a5, a6, a7, 0, (unsigned __int8 *)&v10);
  if (a8)
  {
    double result = *(double *)&v10;
    *(_OWORD *)a8 = v10;
  }

  return result;
}

uint64_t sub_180794A54( unint64_t *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, void *a7)
{
  BOOL v26 = sub_1807974D4();
  unint64_t v13 = *a1;
  uint64_t v14 = sub_180792968();
  unint64_t v15 = sub_180793E74();
  v24[0] = sub_180799424(8 * ((v14 + v15 - 1) / v15 + 13 * v13) + 8);
  unint64_t v16 = *a1;
  uint64_t v17 = sub_180792968();
  unint64_t v18 = sub_180793E74();
  v24[1] = (v17 + v18 - 1) / v18 + 13 * v16 + 1;
  float64x2_t v24[2] = 0LL;
  void v24[3] = sub_18079945C;
  char v25 = sub_1807994A0;
  if (v24[0])
  {
    double v19 = sub_1807949DC((uint64_t)v24, a1, a2, a3, a4, a5, a6, a7);
    uint64_t v21 = v20;
    ((void (*)(void *, double))v25)(v24, v19);
  }

  else
  {
    uint64_t v21 = 4294967283LL;
  }

  sub_1807995F4((unsigned int *)&v26);
  return v21;
}

uint64_t sub_180794B7C(uint64_t a1, unint64_t *a2, int a3, uint64_t a4, unsigned __int8 *a5, void *a6)
{
  if (!a4) {
    return 4294967289LL;
  }
  unint64_t v11 = *a2;
  if (a4 == 1 && !*a5) {
    return 4294967136LL;
  }
  switch(a3)
  {
    case 4:
      uint64_t v12 = 4294967124LL;
      goto LABEL_20;
    case 1:
      uint64_t v12 = 4294967126LL;
      if (*a5 != 4) {
        return v12;
      }
LABEL_20:
      uint64_t v14 = *(void *)(a1 + 16);
      unint64_t v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v11);
      if (a3 == 4) {
        unint64_t v16 = a5;
      }
      else {
        unint64_t v16 = a5 + 1;
      }
      uint64_t v17 = sub_18079231C((uint64_t)a2);
      uint64_t v18 = sub_180793650(v11, a6, (unint64_t)(v17 + 7) >> 3, v16);
      if ((_DWORD)v18) {
        goto LABEL_38;
      }
      if (sub_180793194(v11, a6, a2 + 3) == -1)
      {
        if ((a3 - 3) <= 1)
        {
          uint64_t v18 = sub_18078FF1C(a1, a2, (uint64_t)a6, (uint64_t)a6);
          if (!(_DWORD)v18)
          {
            sub_18078DC70((uint64_t)a2, v15, &a6[*a2]);
            double v19 = &a6[*a2];
            if (a3 == 4) {
              unsigned int v20 = sub_180793194(v11, v15, v19) >> 31;
            }
            else {
              LOBYTE(v20) = (*v19 & 1) != (*a5 & 1);
            }
            sub_180792ECC(v11, v20, v19, v15, v19);
            goto LABEL_35;
          }

unsigned int *sub_180794E30(unsigned int *result, uint64_t a2, const char *a3)
{
  uint64_t v102 = *MEMORY[0x1895F89C0];
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  memset(v98, 0, sizeof(v98));
  int8x16_t v96 = 0u;
  int8x16_t v97 = 0u;
  int8x16_t v94 = 0u;
  int8x16_t v95 = 0u;
  if (a2)
  {
    unsigned int v3 = *result;
    int v4 = result[1];
    int v5 = result[2];
    int v6 = result[3];
    int v7 = result[4];
    do
    {
      uint64_t v8 = 0LL;
      int8x16x4_t v103 = vld4q_s8(a3);
      uint16x8_t v9 = vmovl_u8(*(uint8x8_t *)v103.val[0].i8);
      uint16x8_t v10 = vmovl_high_u8((uint8x16_t)v103.val[0]);
      _Q16 = vmovl_u8(*(uint8x8_t *)v103.val[1].i8);
      _Q17 = vmovl_high_u8((uint8x16_t)v103.val[1]);
      __asm
      {
        SHLL2           V18.4S, V17.8H, #0x10
        SHLL2           V19.4S, V16.8H, #0x10
      }

      uint16x8_t v19 = vmovl_high_u8((uint8x16_t)v103.val[2]);
      uint16x8_t v20 = vmovl_u8(*(uint8x8_t *)v103.val[2].i8);
      int8x16_t v21 = vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v20.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v9.i8), 0x18uLL));
      uint16x8_t v22 = vmovl_high_u8((uint8x16_t)v103.val[3]);
      v103.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v103.val[3].i8);
      int8x16_t v96 = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v19.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v10.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v22.i8));
      int8x16_t v97 = vorrq_s8( vorrq_s8( vorrq_s8(_Q18, (int8x16_t)vshll_high_n_u16(v19, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v10), 0x18uLL)),  (int8x16_t)vmovl_high_u16(v22));
      int8x16_t v94 = vorrq_s8(v21, (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[0].i8));
      int8x16_t v95 = vorrq_s8( vorrq_s8( vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v20, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v9), 0x18uLL)),  (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[0]));
      do
      {
        HIDWORD(v23) = v96.i32[v8] ^ v97.i32[v8 + 1] ^ v94.i32[v8 + 2] ^ v94.i32[v8];
        LODWORD(v23) = HIDWORD(v23);
        *(_DWORD *)((char *)v98 + v8 * 4) = v23 >> 31;
        ++v8;
      }

      while (v8 != 64);
      unint64_t v24 = -5LL;
      char v25 = &v94.i32[2];
      int v26 = v7;
      int v27 = v6;
      int v28 = v5;
      int v29 = v4;
      unsigned int v30 = v3;
      do
      {
        HIDWORD(v31) = v30;
        LODWORD(v31) = v30;
        unsigned int v32 = (v31 >> 27) + v26 + 1518500249 + (v28 & v29 | v27 & ~v29) + *(v25 - 2);
        HIDWORD(v31) = v29;
        LODWORD(v31) = v29;
        int v33 = v31 >> 2;
        unint64_t v34 = __PAIR64__(v32, __ROR4__(v29, 2));
        int v35 = v30 & v34 | v28 & ~v30;
        LODWORD(v34) = v32;
        unsigned int v36 = v27 + 1518500249 + v35 + *(v25 - 1) + (v34 >> 27);
        HIDWORD(v34) = v30;
        LODWORD(v34) = v30;
        int v37 = v34 >> 2;
        unint64_t v38 = __PAIR64__(v36, __ROR4__(v30, 2));
        int v39 = v32 & v38 | v33 & ~v32;
        LODWORD(v38) = v36;
        unsigned int v40 = v28 + 1518500249 + *v25 + v39 + (v38 >> 27);
        HIDWORD(v38) = v32;
        LODWORD(v38) = v32;
        int v26 = v38 >> 2;
        unint64_t v41 = __PAIR64__(v40, __ROR4__(v32, 2));
        int v42 = v36 & v41 | v37 & ~v36;
        LODWORD(v41) = v40;
        int v29 = v33 + 1518500249 + v25[1] + v42 + (v41 >> 27);
        HIDWORD(v41) = v36;
        LODWORD(v41) = v36;
        int v27 = v41 >> 2;
        HIDWORD(v41) = v29;
        LODWORD(v41) = v29;
        int v43 = v41 >> 27;
        unint64_t v44 = __PAIR64__(v40, __ROR4__(v36, 2));
        unsigned int v30 = v37 + 1518500249 + v25[2] + (v40 & v44 | v26 & ~v40) + v43;
        LODWORD(v44) = v40;
        int v28 = v44 >> 2;
        v24 += 5LL;
        v25 += 5;
      }

      while (v24 < 0xF);
      --a2;
      uint64_t v45 = (int *)v99;
      for (unint64_t i = 15LL; i < 0x23; i += 5LL)
      {
        HIDWORD(v47) = v30;
        LODWORD(v47) = v30;
        unsigned int v48 = (v47 >> 27) + 1859775393 + (v28 ^ v29 ^ v27) + v26 + *(v45 - 4);
        HIDWORD(v47) = v29;
        LODWORD(v47) = v29;
        int v49 = v47 >> 2;
        HIDWORD(v47) = v48;
        LODWORD(v47) = v48;
        int v50 = v47 >> 27;
        unint64_t v51 = __PAIR64__(v30, __ROR4__(v29, 2));
        unsigned int v52 = v27 + 1859775393 + (v30 ^ v51 ^ v28) + *(v45 - 3) + v50;
        LODWORD(v51) = v30;
        int v53 = v51 >> 2;
        HIDWORD(v51) = v52;
        LODWORD(v51) = v52;
        int v54 = v51 >> 27;
        unint64_t v55 = __PAIR64__(v48, __ROR4__(v30, 2));
        unsigned int v56 = v28 + 1859775393 + *(v45 - 2) + (v49 ^ v55 ^ v48) + v54;
        LODWORD(v55) = v48;
        int v26 = v55 >> 2;
        HIDWORD(v55) = v56;
        LODWORD(v55) = v56;
        int v57 = v55 >> 27;
        unint64_t v58 = __PAIR64__(v52, __ROR4__(v30, 2));
        int v29 = v49 + 1859775393 + *(v45 - 1) + (v26 ^ v58 ^ v52) + v57;
        LODWORD(v58) = v52;
        int v27 = v58 >> 2;
        HIDWORD(v58) = v29;
        LODWORD(v58) = v29;
        int v59 = v58 >> 27;
        unint64_t v60 = __PAIR64__(v56, __ROR4__(v48, 2));
        int v61 = *v45;
        v45 += 5;
        unsigned int v30 = v53 + 1859775393 + v61 + (v27 ^ v60 ^ v56) + v59;
        LODWORD(v60) = v56;
        int v28 = v60 >> 2;
      }

      BOOL v62 = (int *)v100;
      unint64_t v63 = 35LL;
      do
      {
        HIDWORD(v65) = v30;
        LODWORD(v65) = v30;
        int v64 = v65 >> 27;
        HIDWORD(v65) = v29;
        LODWORD(v65) = v29;
        int v66 = v65 >> 2;
        int v67 = v64 + v26 - 1894007588 + (v27 & (v28 | v29) | v28 & v29) + *(v62 - 4);
        HIDWORD(v65) = v67;
        LODWORD(v65) = v67;
        int v68 = v65 >> 27;
        unint64_t v69 = __PAIR64__(v30, __ROR4__(v29, 2));
        int v70 = (v30 | v69) & v28 | v30 & __ROR4__(v29, 2);
        LODWORD(v69) = v30;
        int v71 = v69 >> 2;
        int v72 = v27 - 1894007588 + v70 + *(v62 - 3) + v68;
        HIDWORD(v69) = v72;
        LODWORD(v69) = v72;
        int v73 = v28
            - 1894007588
            + *(v62 - 2)
            + ((v67 | __ROR4__(v30, 2)) & __ROR4__(v29, 2) | v67 & __ROR4__(v30, 2))
            + (v69 >> 27);
        HIDWORD(v69) = v73;
        LODWORD(v69) = v73;
        int v29 = v66
            - 1894007588
            + *(v62 - 1)
            + ((v72 | __ROR4__(v67, 2)) & __ROR4__(v30, 2) | v72 & __ROR4__(v67, 2))
            + (v69 >> 27);
        unint64_t v74 = __PAIR64__(v67, __ROR4__(v67, 2));
        int v75 = (v73 | __ROR4__(v72, 2)) & v74 | v73 & __ROR4__(v72, 2);
        int v76 = *v62;
        v62 += 5;
        LODWORD(v74) = v67;
        int v26 = v74 >> 2;
        HIDWORD(v74) = v72;
        LODWORD(v74) = v72;
        int v27 = v74 >> 2;
        HIDWORD(v74) = v29;
        LODWORD(v74) = v29;
        unsigned int v30 = v71 - 1894007588 + v76 + v75 + (v74 >> 27);
        v63 += 5LL;
        HIDWORD(v74) = v73;
        LODWORD(v74) = v73;
        int v28 = v74 >> 2;
      }

      while (v63 < 0x37);
      BOOL v77 = (int *)v101;
      for (unint64_t j = 55LL; j < 0x4B; j += 5LL)
      {
        HIDWORD(v79) = v30;
        LODWORD(v79) = v30;
        unsigned int v80 = (v79 >> 27) - 899497514 + (v28 ^ v29 ^ v27) + v26 + *(v77 - 4);
        HIDWORD(v79) = v29;
        LODWORD(v79) = v29;
        int v81 = v79 >> 2;
        HIDWORD(v79) = v80;
        LODWORD(v79) = v80;
        int v82 = v79 >> 27;
        unint64_t v83 = __PAIR64__(v30, __ROR4__(v29, 2));
        unsigned int v84 = v27 - 899497514 + (v30 ^ v83 ^ v28) + *(v77 - 3) + v82;
        LODWORD(v83) = v30;
        int v85 = v83 >> 2;
        HIDWORD(v83) = v84;
        LODWORD(v83) = v84;
        int v86 = v83 >> 27;
        unint64_t v87 = __PAIR64__(v80, __ROR4__(v30, 2));
        unsigned int v88 = v28 - 899497514 + *(v77 - 2) + (v81 ^ v87 ^ v80) + v86;
        LODWORD(v87) = v80;
        int v26 = v87 >> 2;
        HIDWORD(v87) = v88;
        LODWORD(v87) = v88;
        int v89 = v87 >> 27;
        unint64_t v90 = __PAIR64__(v84, __ROR4__(v30, 2));
        int v29 = v81 - 899497514 + *(v77 - 1) + (v26 ^ v90 ^ v84) + v89;
        LODWORD(v90) = v84;
        int v27 = v90 >> 2;
        HIDWORD(v90) = v29;
        LODWORD(v90) = v29;
        int v91 = v90 >> 27;
        unint64_t v92 = __PAIR64__(v88, __ROR4__(v80, 2));
        int v93 = *v77;
        v77 += 5;
        unsigned int v30 = v85 - 899497514 + v93 + (v27 ^ v92 ^ v88) + v91;
        LODWORD(v92) = v88;
        int v28 = v92 >> 2;
      }

      v3 += v30;
      v4 += v29;
      *double result = v3;
      result[1] = v4;
      v5 += v28;
      v6 += v27;
      result[2] = v5;
      result[3] = v6;
      v7 += v26;
      a3 += 64;
      result[4] = v7;
    }

    while (a2);
  }

  return result;
}

int8x16_t sub_180795380( int8x16_t *a1, int8x16_t *a2, double a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  int32x4_t v8 = (int32x4_t)vqtbl1q_s8(*a2, *(int8x16_t *)qword_1807959C0);
  int8x16_t v9 = veorq_s8(a8, a8);
  int8x16_t v10 = veorq_s8( vandq_s8( vextq_s8(*(int8x16_t *)&qword_1807959C0[2], *(int8x16_t *)&qword_1807959C0[2], 8uLL),  (int8x16_t)vshrq_n_s32(vdupq_laneq_s32(v8, 3), 0x1FuLL)),  vorrq_s8( vextq_s8(v9, (int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x3FuLL), 8uLL),  (int8x16_t)vshlq_n_s64((int64x2_t)v8, 1uLL)));
  *a1 = v10;
  a1[8] = veorq_s8(v10, vextq_s8(v10, v10, 8uLL));
  int8x16_t v11 = (int8x16_t)vmull_high_p64((uint64x2_t)v10, (uint64x2_t)v10);
  int8x16_t v12 = (int8x16_t)vmull_p64(v10.u64[0], v10.u64[0]);
  int8x16_t v13 = veorq_s8( v12,  veorq_s8( v11,  (int8x16_t)vmull_p64( veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0],  veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0])));
  int8x16_t v14 = veorq_s8(vextq_s8(v9, v13, 8uLL), v12);
  int8x16_t v15 = veorq_s8(vextq_s8(v14, v14, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v14.u64[0]));
  int8x16_t v16 = veorq_s8( veorq_s8(vextq_s8(v13, v9, 8uLL), v11),  veorq_s8(vextq_s8(v15, v15, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v15.u64[0])));
  a1[1] = v16;
  a1[9] = veorq_s8(v16, vextq_s8(v16, v16, 8uLL));
  v13.i64[0] = veorq_s8(v16, vextq_s8(v16, v16, 8uLL)).u64[0];
  int8x16_t v17 = (int8x16_t)vmull_high_p64((uint64x2_t)v16, (uint64x2_t)v10);
  int8x16_t v18 = (int8x16_t)vmull_p64(v16.u64[0], v10.u64[0]);
  int8x16_t v19 = veorq_s8(v18, veorq_s8(v17, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v13.u64[0])));
  int8x16_t v20 = veorq_s8(vextq_s8(v9, v19, 8uLL), v18);
  int8x16_t v21 = veorq_s8(vextq_s8(v20, v20, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v20.u64[0]));
  int8x16_t v22 = veorq_s8( veorq_s8(vextq_s8(v19, v9, 8uLL), v17),  veorq_s8(vextq_s8(v21, v21, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v21.u64[0])));
  a1[2] = v22;
  a1[10] = veorq_s8(v22, vextq_s8(v22, v22, 8uLL));
  v19.i64[0] = veorq_s8(v22, vextq_s8(v22, v22, 8uLL)).u64[0];
  int8x16_t v23 = (int8x16_t)vmull_high_p64((uint64x2_t)v22, (uint64x2_t)v10);
  int8x16_t v24 = (int8x16_t)vmull_p64(v22.u64[0], v10.u64[0]);
  int8x16_t v25 = veorq_s8(v24, veorq_s8(v23, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v19.u64[0])));
  int8x16_t v26 = veorq_s8(vextq_s8(v9, v25, 8uLL), v24);
  int8x16_t v27 = veorq_s8(vextq_s8(v26, v26, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v26.u64[0]));
  int8x16_t v28 = veorq_s8( veorq_s8(vextq_s8(v25, v9, 8uLL), v23),  veorq_s8(vextq_s8(v27, v27, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v27.u64[0])));
  a1[3] = v28;
  a1[11] = veorq_s8(v28, vextq_s8(v28, v28, 8uLL));
  v25.i64[0] = veorq_s8(v28, vextq_s8(v28, v28, 8uLL)).u64[0];
  int8x16_t v29 = (int8x16_t)vmull_high_p64((uint64x2_t)v28, (uint64x2_t)v10);
  int8x16_t v30 = (int8x16_t)vmull_p64(v28.u64[0], v10.u64[0]);
  int8x16_t v31 = veorq_s8(v30, veorq_s8(v29, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v25.u64[0])));
  int8x16_t v32 = veorq_s8(vextq_s8(v9, v31, 8uLL), v30);
  int8x16_t v33 = veorq_s8(vextq_s8(v32, v32, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v32.u64[0]));
  int8x16_t v34 = veorq_s8( veorq_s8(vextq_s8(v31, v9, 8uLL), v29),  veorq_s8(vextq_s8(v33, v33, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v33.u64[0])));
  a1[4] = v34;
  a1[12] = veorq_s8(v34, vextq_s8(v34, v34, 8uLL));
  v31.i64[0] = veorq_s8(v34, vextq_s8(v34, v34, 8uLL)).u64[0];
  int8x16_t v35 = (int8x16_t)vmull_high_p64((uint64x2_t)v34, (uint64x2_t)v10);
  int8x16_t v36 = (int8x16_t)vmull_p64(v34.u64[0], v10.u64[0]);
  int8x16_t v37 = veorq_s8(v36, veorq_s8(v35, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v31.u64[0])));
  int8x16_t v38 = veorq_s8(vextq_s8(v9, v37, 8uLL), v36);
  int8x16_t v39 = veorq_s8(vextq_s8(v38, v38, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v38.u64[0]));
  int8x16_t v40 = veorq_s8( veorq_s8(vextq_s8(v37, v9, 8uLL), v35),  veorq_s8(vextq_s8(v39, v39, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v39.u64[0])));
  a1[5] = v40;
  a1[13] = veorq_s8(v40, vextq_s8(v40, v40, 8uLL));
  v37.i64[0] = veorq_s8(v40, vextq_s8(v40, v40, 8uLL)).u64[0];
  int8x16_t v41 = (int8x16_t)vmull_high_p64((uint64x2_t)v40, (uint64x2_t)v10);
  int8x16_t v42 = (int8x16_t)vmull_p64(v40.u64[0], v10.u64[0]);
  int8x16_t v43 = veorq_s8(v42, veorq_s8(v41, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v37.u64[0])));
  int8x16_t v44 = veorq_s8(vextq_s8(v9, v43, 8uLL), v42);
  int8x16_t v45 = veorq_s8(vextq_s8(v44, v44, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v44.u64[0]));
  int8x16_t v46 = veorq_s8( veorq_s8(vextq_s8(v43, v9, 8uLL), v41),  veorq_s8(vextq_s8(v45, v45, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v45.u64[0])));
  a1[6] = v46;
  a1[14] = veorq_s8(v46, vextq_s8(v46, v46, 8uLL));
  v43.i64[0] = veorq_s8(v46, vextq_s8(v46, v46, 8uLL)).u64[0];
  int8x16_t v47 = (int8x16_t)vmull_high_p64((uint64x2_t)v46, (uint64x2_t)v10);
  int8x16_t v48 = (int8x16_t)vmull_p64(v46.u64[0], v10.u64[0]);
  int8x16_t v49 = veorq_s8(v48, veorq_s8(v47, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v43.u64[0])));
  int8x16_t v50 = veorq_s8(vextq_s8(v9, v49, 8uLL), v48);
  int8x16_t v51 = veorq_s8(vextq_s8(v50, v50, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v50.u64[0]));
  int8x16_t result = veorq_s8( veorq_s8(vextq_s8(v49, v9, 8uLL), v47),  veorq_s8(vextq_s8(v51, v51, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v51.u64[0])));
  a1[7] = result;
  a1[15] = veorq_s8(result, vextq_s8(result, result, 8uLL));
  return result;
}

int8x16_t sub_180795680( int8x16_t *a1, uint64x2_t *a2, int8x16_t *a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  int8x16_t v9 = vqtbl1q_s8(*a1, *(int8x16_t *)qword_1807959C0);
  int8x16_t v10 = veorq_s8(a9, a9);
  unint64_t v11 = veorq_s8(v9, vextq_s8(v9, v9, 8uLL)).u64[0];
  int8x16_t v12 = (int8x16_t)vmull_high_p64((uint64x2_t)v9, *a2);
  int8x16_t v13 = (int8x16_t)vmull_p64(v9.u64[0], a2->i64[0]);
  int8x16_t v14 = veorq_s8( v13,  veorq_s8( v12,  (int8x16_t)vmull_p64( veorq_s8(*(int8x16_t *)a2, vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)).u64[0],  v11)));
  int8x16_t v15 = veorq_s8(vextq_s8(v10, v14, 8uLL), v13);
  int8x16_t v16 = veorq_s8(vextq_s8(v15, v15, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v15.u64[0]));
  int8x16_t result = vqtbl1q_s8( veorq_s8( veorq_s8(vextq_s8(v14, v10, 8uLL), v12),  veorq_s8(vextq_s8(v16, v16, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000LL, v16.u64[0]))),  *(int8x16_t *)qword_1807959C0);
  *a3 = result;
  return result;
}

int8x16_t sub_180795700(int8x16_t *a1, uint64x2_t *a2, int8x16_t *a3, uint64_t a4)
{
  int8x16_t v5 = veorq_s8(v4, v4);
  int8x16_t v6 = vqtbl1q_s8(*a1, *(int8x16_t *)qword_1807959C0);
  BOOL v7 = a4 < 128;
  for (uint64_t i = a4 - 128; !v7; i -= 128LL)
  {
    int8x16_t v9 = vqtbl1q_s8(a3[7], *(int8x16_t *)qword_1807959C0);
    int8x16_t v10 = (int8x16_t)vmull_p64(a2->i64[0], v9.u64[0]);
    int8x16_t v11 = (int8x16_t)vmull_high_p64(*a2, (uint64x2_t)v9);
    int8x16_t v12 = (int8x16_t)vmull_p64(a2[8].u64[0], veorq_s8(v9, vextq_s8(v9, v9, 8uLL)).u64[0]);
    int8x16_t v13 = vqtbl1q_s8(a3[6], *(int8x16_t *)qword_1807959C0);
    uint64x2_t v14 = a2[1];
    int8x16_t v15 = veorq_s8(v10, (int8x16_t)vmull_p64(v14.u64[0], v13.u64[0]));
    int8x16_t v16 = veorq_s8(v11, (int8x16_t)vmull_high_p64(v14, (uint64x2_t)v13));
    int8x16_t v17 = veorq_s8(v12, (int8x16_t)vmull_p64(a2[9].u64[0], veorq_s8(v13, vextq_s8(v13, v13, 8uLL)).u64[0]));
    int8x16_t v18 = vqtbl1q_s8(a3[5], *(int8x16_t *)qword_1807959C0);
    uint64x2_t v19 = a2[2];
    int8x16_t v20 = veorq_s8(v15, (int8x16_t)vmull_p64(v19.u64[0], v18.u64[0]));
    int8x16_t v21 = veorq_s8(v16, (int8x16_t)vmull_high_p64(v19, (uint64x2_t)v18));
    int8x16_t v22 = veorq_s8(v17, (int8x16_t)vmull_p64(a2[10].u64[0], veorq_s8(v18, vextq_s8(v18, v18, 8uLL)).u64[0]));
    int8x16_t v23 = vqtbl1q_s8(a3[4], *(int8x16_t *)qword_1807959C0);
    uint64x2_t v24 = a2[3];
    int8x16_t v25 = veorq_s8(v20, (int8x16_t)vmull_p64(v24.u64[0], v23.u64[0]));
    int8x16_t v26 = veorq_s8(v21, (int8x16_t)vmull_high_p64(v24, (uint64x2_t)v23));
    int8x16_t v27 = veorq_s8(v22, (int8x16_t)vmull_p64(a2[11].u64[0], veorq_s8(v23, vextq_s8(v23, v23, 8uLL)).u64[0]));
    int8x16_t v28 = vqtbl1q_s8(a3[3], *(int8x16_t *)qword_1807959C0);
    uint64x2_t v29 = a2[4];
    int8x16_t v30 = veorq_s8(v25, (int8x16_t)vmull_p64(v29.u64[0], v28.u64[0]));
    int8x16_t v31 = veorq_s8(v26, (int8x16_t)vmull_high_p64(v29, (uint64x2_t)v28));
    int8x16_t v32 = veorq_s8(v27, (int8x16_t)vmull_p64(a2[12].u64[0], veorq_s8(v28, vextq_s8(v28, v28, 8uLL)).u64[0]));
    int8x16_t v33 = vqtbl1q_s8(a3[2], *(int8x16_t *)qword_1807959C0);
    uint64x2_t v34 = a2[5];
    int8x16_t v35 = veorq_s8(v30, (int8x16_t)vmull_p64(v34.u64[0], v33.u64[0]));
    int8x16_t v36 = veorq_s8(v31, (int8x16_t)vmull_high_p64(v34, (uint64x2_t)v33));
    int8x16_t v37 = veorq_s8(v32, (int8x16_t)vmull_p64(a2[13].u64[0], veorq_s8(v33, vextq_s8(v33, v33, 8uLL)).u64[0]));
    int8x16_t v38 = vqtbl1q_s8(a3[1], *(int8x16_t *)qword_1807959C0);
    uint64x2_t v39 = a2[6];
    int8x16_t v40 = veorq_s8(v35, (int8x16_t)vmull_p64(v39.u64[0], v38.u64[0]));
    int8x16_t v41 = veorq_s8(v36, (int8x16_t)vmull_high_p64(v39, (uint64x2_t)v38));
    int8x16_t v42 = veorq_s8(v37, (int8x16_t)vmull_p64(a2[14].u64[0], veorq_s8(v38, vextq_s8(v38, v38, 8uLL)).u64[0]));
    uint64x2_t v43 = a2[7];
    int8x16_t v44 = veorq_s8(vqtbl1q_s8(*a3, *(int8x16_t *)qword_1807959C0), v6);
    int8x16_t v45 = veorq_s8(v40, (int8x16_t)vmull_p64(v43.u64[0], v44.u64[0]));
    int8x16_t v46 = veorq_s8(v41, (int8x16_t)vmull_high_p64(v43, (uint64x2_t)v44));
    int8x16_t v47 = veorq_s8( v46,  veorq_s8( v45,  veorq_s8(v42, (int8x16_t)vmull_p64(a2[15].u64[0], veorq_s8(v44, vextq_s8(v44, v44, 8uLL)).u64[0]))));
    int8x16_t v48 = veorq_s8(v45, vextq_s8(v5, v47, 8uLL));
    int8x16_t v49 = veorq_s8((int8x16_t)vmull_p64(0xC200000000000000LL, v48.u64[0]), vextq_s8(v48, v48, 8uLL));
    int8x16_t v6 = veorq_s8( veorq_s8(v46, vextq_s8(v47, v5, 8uLL)),  veorq_s8((int8x16_t)vmull_p64(0xC200000000000000LL, v49.u64[0]), vextq_s8(v49, v49, 8uLL)));
    a3 += 8;
    BOOL v7 = i < 128;
  }

  BOOL v7 = i < -112;
  uint64_t v50 = i + 112;
  if (!v7)
  {
    int8x16_t v52 = *a3;
    int8x16_t v51 = a3 + 1;
    int8x16_t v53 = veorq_s8(v6, vqtbl1q_s8(v52, *(int8x16_t *)qword_1807959C0));
    int v54 = (uint64x2_t *)((char *)a2 + v50);
    uint64x2_t v55 = *(uint64x2_t *)((char *)a2 + v50);
    int8x16_t v56 = (int8x16_t)vmull_p64(v53.u64[0], v55.u64[0]);
    int8x16_t v57 = (int8x16_t)vmull_high_p64((uint64x2_t)v53, v55);
    int8x16_t v58 = (int8x16_t)vmull_p64( veorq_s8(v53, vextq_s8(v53, v53, 8uLL)).u64[0],  *(unint64_t *)((char *)a2[8].u64 + v50));
    BOOL v7 = v50 < 16;
    for (uint64_t j = v50 - 16; !v7; j -= 16LL)
    {
      --v54;
      int8x16_t v60 = *v51++;
      int8x16_t v61 = vqtbl1q_s8(v60, *(int8x16_t *)qword_1807959C0);
      int8x16_t v56 = veorq_s8(v56, (int8x16_t)vmull_p64(v61.u64[0], v54->i64[0]));
      int8x16_t v57 = veorq_s8(v57, (int8x16_t)vmull_high_p64((uint64x2_t)v61, *v54));
      int8x16_t v58 = veorq_s8(v58, (int8x16_t)vmull_p64(veorq_s8(v61, vextq_s8(v61, v61, 8uLL)).u64[0], v54[8].u64[0]));
      BOOL v7 = j < 16;
    }

    int8x16_t v62 = veorq_s8(v57, veorq_s8(v56, v58));
    int8x16_t v63 = veorq_s8(v56, vextq_s8(v5, v62, 8uLL));
    int8x16_t v64 = veorq_s8((int8x16_t)vmull_p64(0xC200000000000000LL, v63.u64[0]), vextq_s8(v63, v63, 8uLL));
    int8x16_t v6 = veorq_s8( veorq_s8(v57, vextq_s8(v62, v5, 8uLL)),  veorq_s8((int8x16_t)vmull_p64(0xC200000000000000LL, v64.u64[0]), vextq_s8(v64, v64, 8uLL)));
  }

  int8x16_t result = vqtbl1q_s8(v6, *(int8x16_t *)qword_1807959C0);
  *a1 = result;
  return result;
}

int64x2_t *sub_1807959E0(int64x2_t *result, uint64_t a2, int8x16_t *a3)
{
  if (a2)
  {
    int64x2_t v3 = *result;
    int64x2_t v4 = result[1];
    int64x2_t v5 = result[2];
    int64x2_t v6 = result[3];
    do
    {
      _Q24 = v3;
      _Q25 = v4;
      _Q0 = vrev64q_s8(*a3);
      _Q1 = vrev64q_s8(a3[1]);
      _Q2 = vrev64q_s8(a3[2]);
      _Q3 = vrev64q_s8(a3[3]);
      _Q4 = vrev64q_s8(a3[4]);
      _Q5 = vrev64q_s8(a3[5]);
      _Q6 = vrev64q_s8(a3[6]);
      _Q7 = vrev64q_s8(a3[7]);
      a3 += 8;
      _Q29 = vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL);
      _Q28 = vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }

      int64x2_t v26 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }

      int8x16_t v29 = (int8x16_t)vaddq_s64(v4, v26);
      _Q29 = vextq_s8(v29, (int8x16_t)v5, 8uLL);
      _Q28 = vextq_s8((int8x16_t)v3, v29, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }

      int64x2_t v35 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }

      int8x16_t v38 = (int8x16_t)vaddq_s64(v3, v35);
      _Q29 = vextq_s8(v38, v29, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v38, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }

      int64x2_t v44 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }

      int8x16_t v47 = (int8x16_t)vaddq_s64(_Q27, v44);
      _Q29 = vextq_s8(v47, v38, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v47, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }

      int64x2_t v53 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }

      int8x16_t v56 = (int8x16_t)vaddq_s64(_Q26, v53);
      _Q29 = vextq_s8(v56, v47, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v56, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }

      int64x2_t v62 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }

      int8x16_t v65 = (int8x16_t)vaddq_s64(_Q25, v62);
      _Q29 = vextq_s8(v65, v56, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v65, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }

      int64x2_t v71 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }

      int8x16_t v74 = (int8x16_t)vaddq_s64(_Q24, v71);
      _Q29 = vextq_s8(v74, v65, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v74, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }

      int64x2_t v80 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }

      int8x16_t v83 = (int8x16_t)vaddq_s64(_Q27, v80);
      _Q29 = vextq_s8(v83, v74, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v83, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }

      int64x2_t v89 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }

      int8x16_t v92 = (int8x16_t)vaddq_s64(_Q26, v89);
      _Q29 = vextq_s8(v92, v83, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v92, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }

      int64x2_t v98 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }

      int8x16_t v101 = (int8x16_t)vaddq_s64(_Q25, v98);
      _Q29 = vextq_s8(v101, v92, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v101, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }

      int64x2_t v107 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }

      int8x16_t v110 = (int8x16_t)vaddq_s64(_Q24, v107);
      _Q29 = vextq_s8(v110, v101, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v110, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }

      int64x2_t v116 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }

      int8x16_t v119 = (int8x16_t)vaddq_s64(_Q27, v116);
      _Q29 = vextq_s8(v119, v110, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v119, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }

      int64x2_t v125 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }

      int8x16_t v128 = (int8x16_t)vaddq_s64(_Q26, v125);
      _Q29 = vextq_s8(v128, v119, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v128, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }

      int64x2_t v134 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }

      int8x16_t v137 = (int8x16_t)vaddq_s64(_Q25, v134);
      _Q29 = vextq_s8(v137, v128, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v137, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }

      int64x2_t v143 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }

      int8x16_t v146 = (int8x16_t)vaddq_s64(_Q24, v143);
      _Q29 = vextq_s8(v146, v137, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v146, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }

      int64x2_t v152 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }

      int8x16_t v155 = (int8x16_t)vaddq_s64(_Q27, v152);
      _Q29 = vextq_s8(v155, v146, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v155, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }

      int64x2_t v161 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }

      int8x16_t v164 = (int8x16_t)vaddq_s64(_Q26, v161);
      _Q29 = vextq_s8(v164, v155, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v164, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }

      int64x2_t v170 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }

      int8x16_t v173 = (int8x16_t)vaddq_s64(_Q25, v170);
      _Q29 = vextq_s8(v173, v164, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v173, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }

      int64x2_t v179 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }

      int8x16_t v182 = (int8x16_t)vaddq_s64(_Q24, v179);
      _Q29 = vextq_s8(v182, v173, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v182, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }

      int64x2_t v188 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }

      int8x16_t v191 = (int8x16_t)vaddq_s64(_Q27, v188);
      _Q29 = vextq_s8(v191, v182, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v191, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }

      int64x2_t v197 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }

      int8x16_t v200 = (int8x16_t)vaddq_s64(_Q26, v197);
      _Q29 = vextq_s8(v200, v191, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v200, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }

      int64x2_t v206 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }

      int8x16_t v209 = (int8x16_t)vaddq_s64(_Q25, v206);
      _Q29 = vextq_s8(v209, v200, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v209, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }

      int64x2_t v215 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }

      int8x16_t v218 = (int8x16_t)vaddq_s64(_Q24, v215);
      _Q29 = vextq_s8(v218, v209, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v218, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }

      int64x2_t v224 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }

      int8x16_t v227 = (int8x16_t)vaddq_s64(_Q27, v224);
      _Q29 = vextq_s8(v227, v218, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v227, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }

      int64x2_t v233 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }

      int8x16_t v236 = (int8x16_t)vaddq_s64(_Q26, v233);
      _Q29 = vextq_s8(v236, v227, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v236, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }

      int64x2_t v242 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }

      int8x16_t v245 = (int8x16_t)vaddq_s64(_Q25, v242);
      _Q29 = vextq_s8(v245, v236, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v245, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }

      int64x2_t v251 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }

      int8x16_t v254 = (int8x16_t)vaddq_s64(_Q24, v251);
      _Q29 = vextq_s8(v254, v245, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v254, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }

      int64x2_t v260 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }

      int8x16_t v263 = (int8x16_t)vaddq_s64(_Q27, v260);
      _Q29 = vextq_s8(v263, v254, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v263, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }

      int64x2_t v269 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }

      int8x16_t v272 = (int8x16_t)vaddq_s64(_Q26, v269);
      _Q29 = vextq_s8(v272, v263, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v272, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }

      int64x2_t v278 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }

      int8x16_t v281 = (int8x16_t)vaddq_s64(_Q25, v278);
      _Q29 = vextq_s8(v281, v272, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v281, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }

      int64x2_t v287 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }

      int8x16_t v290 = (int8x16_t)vaddq_s64(_Q24, v287);
      _Q29 = vextq_s8(v290, v281, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v290, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }

      int64x2_t v296 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }

      int8x16_t v299 = (int8x16_t)vaddq_s64(_Q27, v296);
      _Q29 = vextq_s8(v299, v290, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v299, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }

      int64x2_t v305 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }

      int8x16_t v308 = (int8x16_t)vaddq_s64(_Q26, v305);
      _Q29 = vextq_s8(v308, v299, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v308, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q27, Q25, V24.2D
      }

      int8x16_t v313 = (int8x16_t)vaddq_s64(_Q25, _Q30);
      _Q29 = vextq_s8(v313, v308, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v313, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q26, Q24, V27.2D
      }

      int8x16_t v318 = (int8x16_t)vaddq_s64(_Q24, _Q30);
      _Q29 = vextq_s8(v318, v313, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v318, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q25, Q27, V26.2D
      }

      int8x16_t v323 = (int8x16_t)vaddq_s64(_Q27, _Q30);
      _Q29 = vextq_s8(v323, v318, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v323, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q24, Q26, V25.2D
      }

      int8x16_t v328 = (int8x16_t)vaddq_s64(_Q26, _Q30);
      _Q29 = vextq_s8(v328, v323, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v328, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q27, Q25, V24.2D
      }

      int8x16_t v333 = (int8x16_t)vaddq_s64(_Q25, _Q30);
      _Q29 = vextq_s8(v333, v328, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v333, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q26, Q24, V27.2D
      }

      int8x16_t v338 = (int8x16_t)vaddq_s64(_Q24, _Q30);
      _Q29 = vextq_s8(v338, v333, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v338, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q25, Q27, V26.2D
      }

      int64x2_t v343 = vaddq_s64(_Q27, _Q30);
      _Q29 = vextq_s8((int8x16_t)v343, v338, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, (int8x16_t)v343, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q24, Q26, V25.2D
      }

      int64x2_t v3 = vaddq_s64(v3, _Q24);
      int64x2_t v4 = vaddq_s64(v4, _Q25);
      int64x2_t v5 = vaddq_s64(v5, vaddq_s64(_Q26, _Q30));
      int64x2_t v6 = vaddq_s64(v6, v343);
    }

    while (a2-- > 1);
    *int8x16_t result = v3;
    result[1] = v4;
    result[2] = v5;
    result[3] = v6;
  }

  return result;
}

void *sub_180796250()
{
  return &unk_1896FAA98;
}

_OWORD *sub_18079625C(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, unint64_t *a5)
{
  return sub_180799100(a3, a4, a5);
}

_OWORD *sub_18079626C(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  return sub_180799100(a3, a4, a4);
}

uint64_t sub_18079627C(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = 4;
  int8x16_t v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4LL);
  int8x16_t v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4LL);
  int8x16_t v11 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4LL);
  sub_180799100(v11, a4, a4);
  sub_180799100(v10, v11, a4);
  sub_180799100(v10, v10, v10);
  sub_180799100(v10, v10, v10);
  sub_180799100(v9, v10, a4);
  sub_180799100(v10, v9, v11);
  do
  {
    sub_180799100(v10, v10, v10);
    --v8;
  }

  while (v8);
  sub_180799100(v9, v9, v10);
  sub_180799100(v10, v9, v11);
  int v12 = 8;
  do
  {
    sub_180799100(v10, v10, v10);
    --v12;
  }

  while (v12);
  sub_180799100(v9, v9, v10);
  sub_180799100(v10, v9, v11);
  int v13 = 16;
  do
  {
    sub_180799100(v10, v10, v10);
    --v13;
  }

  while (v13);
  sub_180799100(v9, v9, v10);
  sub_180799100(v10, v9, v11);
  sub_180793720(4LL, v11, v10);
  int v14 = 32;
  do
  {
    sub_180799100(v11, v11, v11);
    --v14;
  }

  while (v14);
  sub_180799100(v11, v11, a4);
  int v15 = 128;
  do
  {
    sub_180799100(v11, v11, v11);
    --v15;
  }

  while (v15);
  sub_180799100(v11, v11, v10);
  int v16 = 32;
  do
  {
    sub_180799100(v11, v11, v11);
    --v16;
  }

  while (v16);
  sub_180799100(v11, v11, v10);
  int v17 = 32;
  do
  {
    sub_180799100(v11, v11, v11);
    --v17;
  }

  while (v17);
  sub_180799100(v10, v11, v9);
  sub_180799100(v9, v10, a4);
  v19[0] = xmmword_1807A4748;
  v19[1] = unk_1807A4758;
  sub_180799100(v9, v9, (unint64_t *)v19);
  if (sub_1807935CC(4LL, (uint64_t *)v9) == 1 && *v9 == 1)
  {
    sub_180793720(4LL, a3, v10);
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t result = 4294967254LL;
  }

  *(void *)(a1 + 16) = v7;
  return result;
}

_OWORD *sub_180796564(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  v5[0] = xmmword_1807A4748;
  v5[1] = unk_1807A4758;
  return sub_180799100(a3, a4, (unint64_t *)v5);
}

unsigned int *sub_1807965C8(unsigned int *result, uint64_t a2, const char *a3)
{
  uint64_t v81 = *MEMORY[0x1895F89C0];
  memset(v80, 0, sizeof(v80));
  int8x16_t v78 = 0u;
  int8x16_t v79 = 0u;
  int8x16_t v76 = 0u;
  int8x16_t v77 = 0u;
  if (a2)
  {
    unsigned int v3 = *result;
    unsigned int v4 = result[1];
    unsigned int v5 = result[2];
    unsigned int v6 = result[3];
    int v7 = result[4];
    int v8 = result[5];
    int v9 = result[6];
    int v10 = result[7];
    do
    {
      uint64_t v11 = 0LL;
      --a2;
      int8x16x4_t v82 = vld4q_s8(a3);
      uint16x8_t v12 = vmovl_u8(*(uint8x8_t *)v82.val[0].i8);
      uint16x8_t v13 = vmovl_high_u8((uint8x16_t)v82.val[0]);
      _Q16 = vmovl_high_u8((uint8x16_t)v82.val[1]);
      _Q17 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v82.val[1].i8);
      int8x16_t v16 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL);
      __asm
      {
        SHLL2           V19.4S, V16.8H, #0x10
        SHLL2           V17.4S, V17.8H, #0x10
      }

      uint16x8_t v22 = vmovl_u8(*(uint8x8_t *)v82.val[2].i8);
      uint16x8_t v23 = vmovl_high_u8((uint8x16_t)v82.val[2]);
      int8x16_t v24 = vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v23.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v13.i8), 0x18uLL));
      uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v82.val[3].i8);
      v82.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v82.val[3]);
      int8x16_t v78 = vorrq_s8(v24, (int8x16_t)vmovl_u16(*(uint16x4_t *)v82.val[0].i8));
      int8x16_t v79 = vorrq_s8( vorrq_s8( vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v23, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v13), 0x18uLL)),  (int8x16_t)vmovl_high_u16((uint16x8_t)v82.val[0]));
      int8x16_t v76 = vorrq_s8( vorrq_s8( vorrq_s8(v16, (int8x16_t)vshll_n_u16(*(uint16x4_t *)v22.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v12.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v25.i8));
      int8x16_t v77 = vorrq_s8( vorrq_s8( vorrq_s8(_Q17, (int8x16_t)vshll_high_n_u16(v22, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v12), 0x18uLL)),  (int8x16_t)vmovl_high_u16(v25));
      __int32 v26 = v76.i32[0];
      do
      {
        HIDWORD(v27) = v79.i32[v11 + 2];
        LODWORD(v27) = HIDWORD(v27);
        int v28 = (v27 >> 17) ^ __ROR4__(HIDWORD(v27), 19) ^ (HIDWORD(v27) >> 10);
        HIDWORD(v27) = v76.i32[v11 + 1];
        LODWORD(v27) = HIDWORD(v27);
        *(_DWORD *)((char *)v80 + v11 * 4) = v28
                                           + v78.i32[v11 + 1]
                                           + v26
                                           + ((v27 >> 7) ^ __ROR4__(HIDWORD(v27), 18) ^ (HIDWORD(v27) >> 3));
        ++v11;
        __int32 v26 = HIDWORD(v27);
      }

      while (v11 != 48);
      int8x16_t v29 = &dword_1807A4780;
      unint64_t v30 = -8LL;
      int8x16_t v31 = &v77;
      int v32 = v10;
      int v33 = v9;
      int v34 = v8;
      int v35 = v7;
      unsigned int v36 = v6;
      unsigned int v37 = v5;
      unsigned int v38 = v4;
      unsigned int v39 = v3;
      do
      {
        HIDWORD(v40) = v35;
        LODWORD(v40) = v35;
        int v41 = (v40 >> 6) ^ __ROR4__(v35, 11);
        unint64_t v43 = __PAIR64__(v39, __ROR4__(v35, 25));
        int v42 = v41 ^ v43;
        LODWORD(v43) = v39;
        int v44 = v32 + (v34 & v35 | v33 & ~v35) + *(v29 - 4) + v31[-1].i32[0] + v42;
        int v45 = v44 + v36;
        unsigned int v46 = ((v38 | v39) & v37 | v38 & v39) + ((v43 >> 2) ^ __ROR4__(v39, 13) ^ __ROR4__(v39, 22)) + v44;
        HIDWORD(v43) = v45;
        LODWORD(v43) = v45;
        int v47 = (v43 >> 6) ^ __ROR4__(v45, 11);
        unint64_t v48 = __PAIR64__(v46, __ROR4__(v45, 25));
        int v49 = *(v29 - 3) + v33 + v31[-1].i32[1] + (v35 & v45 | v34 & ~v45) + (v47 ^ v48);
        LODWORD(v48) = v46;
        int v50 = v49 + v37;
        unsigned int v51 = ((v48 >> 2) ^ __ROR4__(v46, 13) ^ __ROR4__(v46, 22)) + ((v46 | v39) & v38 | v46 & v39) + v49;
        HIDWORD(v48) = v50;
        LODWORD(v48) = v50;
        int v52 = (v48 >> 6) ^ __ROR4__(v50, 11);
        unint64_t v54 = __PAIR64__(v51, __ROR4__(v50, 25));
        int v53 = v52 ^ v54;
        LODWORD(v54) = v51;
        int v55 = *(v29 - 2) + v34 + v31[-1].i32[2] + (v45 & v50 | v35 & ~v50) + v53;
        int v56 = v55 + v38;
        unsigned int v57 = ((v54 >> 2) ^ __ROR4__(v51, 13) ^ __ROR4__(v51, 22)) + ((v51 | v46) & v39 | v51 & v46) + v55;
        HIDWORD(v54) = v56;
        LODWORD(v54) = v56;
        int v58 = (v54 >> 6) ^ __ROR4__(v56, 11);
        unint64_t v59 = __PAIR64__(v57, __ROR4__(v56, 25));
        int v60 = *(v29 - 1) + v35 + v31[-1].i32[3] + (v50 & v56 | v45 & ~v56) + (v58 ^ v59);
        LODWORD(v59) = v57;
        int v61 = v60 + v39;
        unsigned int v62 = ((v59 >> 2) ^ __ROR4__(v57, 13) ^ __ROR4__(v57, 22)) + ((v57 | v51) & v46 | v57 & v51) + v60;
        HIDWORD(v59) = v61;
        LODWORD(v59) = v61;
        int v63 = (v59 >> 6) ^ __ROR4__(v61, 11);
        unint64_t v65 = __PAIR64__(v62, __ROR4__(v61, 25));
        int v64 = v63 ^ v65;
        LODWORD(v65) = v62;
        int v66 = *v29 + v31->i32[0] + v45 + (v56 & v61 | v50 & ~v61) + v64;
        int v32 = v66 + v46;
        unsigned int v36 = ((v65 >> 2) ^ __ROR4__(v62, 13) ^ __ROR4__(v62, 22)) + ((v62 | v57) & v51 | v62 & v57) + v66;
        HIDWORD(v65) = v32;
        LODWORD(v65) = v32;
        int v67 = (v65 >> 6) ^ __ROR4__(v32, 11);
        unint64_t v68 = __PAIR64__(v36, __ROR4__(v32, 25));
        int v69 = v50 + v29[1] + v31->i32[1] + (v61 & v32 | v56 & ~v32) + (v67 ^ v68);
        LODWORD(v68) = v36;
        int v33 = v69 + v51;
        unsigned int v37 = ((v68 >> 2) ^ __ROR4__(v36, 13) ^ __ROR4__(v36, 22)) + ((v36 | v62) & v57 | v36 & v62) + v69;
        HIDWORD(v68) = v33;
        LODWORD(v68) = v33;
        int v70 = (v68 >> 6) ^ __ROR4__(v33, 11);
        unint64_t v71 = __PAIR64__(v37, __ROR4__(v33, 25));
        int v72 = v31->i32[2] + v29[2] + v56 + (v32 & v33 | v61 & ~v33) + (v70 ^ v71);
        LODWORD(v71) = v37;
        int v34 = v72 + v57;
        unsigned int v38 = ((v71 >> 2) ^ __ROR4__(v37, 13) ^ __ROR4__(v37, 22)) + ((v37 | v36) & v62 | v37 & v36) + v72;
        HIDWORD(v71) = v34;
        LODWORD(v71) = v34;
        int v73 = (v71 >> 6) ^ __ROR4__(v34, 11);
        unint64_t v74 = __PAIR64__(v38, __ROR4__(v34, 25));
        int v75 = v31->i32[3] + v29[3] + v61 + (v33 & v34 | v32 & ~v34) + (v73 ^ v74);
        LODWORD(v74) = v38;
        int v35 = v75 + v62;
        unsigned int v39 = ((v74 >> 2) ^ __ROR4__(v38, 13) ^ __ROR4__(v38, 22)) + ((v38 | v37) & v36 | v38 & v37) + v75;
        v30 += 8LL;
        v31 += 2;
        v29 += 8;
      }

      while (v30 < 0x38);
      v3 += v39;
      v4 += v38;
      *uint64_t result = v3;
      result[1] = v4;
      v5 += v37;
      v6 += v36;
      result[2] = v5;
      result[3] = v6;
      v7 += v35;
      v8 += v34;
      result[4] = v7;
      result[5] = v8;
      v9 += v33;
      v10 += v32;
      a3 += 64;
      result[6] = v9;
      result[7] = v10;
    }

    while (a2);
  }

  return result;
}

uint64_t sub_180796A98(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = sub_180792314((uint64_t)a2);
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = a2[*a2 + 3];
    uint64_t v11 = a4;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = sub_180799370((uint64_t)a2);
      uint64_t *v11 = sub_180791B6C(v9, v11, v13, *v11 * v10);
      ++v11;
      --v12;
    }

    while (v12);
  }

  BOOL v14 = sub_180792D68(a1, v9, &a4[v9], &a4[v9], a4);
  int v15 = (unint64_t *)sub_180799370((uint64_t)a2);
  char v16 = sub_180793B6C(a1, v9, a4, &a4[v9], v15) ^ v14;
  return sub_180792ECC(v9, v16, a3, &a4[v9], a4);
}

uint64_t sub_180796B80(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t result = sub_180792F2C();
  for (uint64_t i = __ROR8__(0x5555555555555555LL, a2 | (2 * result)); a1; --a1)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = *a3 ^ result;
    *a3 = v9;
    *a3++ = v9 ^ v8 & 0x5555555555555555LL ^ v8 & i ^ result;
  }

  return result;
}

void sub_180796BEC(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  bzero(v41, 0x280uLL);
  for (; a2; --a2)
  {
    uint64_t v6 = 0LL;
    __int128 v7 = a1[1];
    __int128 v43 = *a1;
    __int128 v44 = v7;
    __int128 v8 = a1[3];
    __int128 v45 = a1[2];
    __int128 v46 = v8;
    do
    {
      v41[v6] = bswap64(*(void *)(a3 + v6 * 8));
      ++v6;
    }

    while (v6 != 16);
    unint64_t v9 = 0LL;
    unint64_t v10 = v41[0];
    do
    {
      unint64_t v11 = v41[v9 / 8 + 1];
      *(void *)&v42[v9 + 96] = (__ROR8__(*(void *)&v42[v9 + 80], 19) ^ __ROR8__(*(void *)&v42[v9 + 80], 61) ^ (*(void *)&v42[v9 + 80] >> 6))
                               + *(void *)&v42[v9 + 40]
                               + v10
                               + (__ROR8__(v11, 1) ^ __ROR8__(v11, 8) ^ (v11 >> 7));
      v9 += 8LL;
      unint64_t v10 = v11;
    }

    while (v9 != 512);
    uint64_t v12 = *((void *)&v46 + 1);
    uint64_t v13 = v46;
    uint64_t v15 = *((void *)&v45 + 1);
    uint64_t v14 = v45;
    uint64_t v16 = *((void *)&v43 + 1);
    uint64_t v17 = v43;
    int8x16_t v18 = &xmmword_1807A44B0;
    unint64_t v19 = -8LL;
    uint64_t v20 = v42;
    uint64_t v21 = *((void *)&v44 + 1);
    uint64_t v22 = v44;
    do
    {
      uint64_t v23 = (__ROR8__(v14, 14) ^ __ROR8__(v14, 18) ^ __ROR8__(v14, 41))
          + v12
          + *((void *)v18 - 4)
          + *(v20 - 4)
          + (v15 & v14 | v13 & ~v14);
      uint64_t v24 = v21 + v23;
      uint64_t v25 = v23 + (__ROR8__(v17, 28) ^ __ROR8__(v17, 34) ^ __ROR8__(v17, 39)) + ((v16 | v17) & v22 | v16 & v17);
      uint64_t v26 = (v14 & v24 | v15 & ~v24)
          + v13
          + *((void *)v18 - 3)
          + *(v20 - 3)
          + (__ROR8__(v24, 14) ^ __ROR8__(v24, 18) ^ __ROR8__(v24, 41));
      uint64_t v27 = v26 + v22;
      uint64_t v28 = (__ROR8__(v25, 28) ^ __ROR8__(v25, 34) ^ __ROR8__(v25, 39)) + ((v25 | v17) & v16 | v25 & v17) + v26;
      uint64_t v29 = *((void *)v18 - 2)
          + v15
          + *(v20 - 2)
          + (v24 & v27 | v14 & ~v27)
          + (__ROR8__(v27, 14) ^ __ROR8__(v27, 18) ^ __ROR8__(v27, 41));
      uint64_t v30 = v29 + v16;
      uint64_t v31 = (__ROR8__(v28, 28) ^ __ROR8__(v28, 34) ^ __ROR8__(v28, 39)) + ((v28 | v25) & v17 | v28 & v25) + v29;
      uint64_t v32 = *((void *)v18 - 1)
          + v14
          + *(v20 - 1)
          + (v27 & v30 | v24 & ~v30)
          + (__ROR8__(v30, 14) ^ __ROR8__(v30, 18) ^ __ROR8__(v30, 41));
      uint64_t v33 = v32 + v17;
      uint64_t v34 = (__ROR8__(v31, 28) ^ __ROR8__(v31, 34) ^ __ROR8__(v31, 39)) + ((v31 | v28) & v25 | v31 & v28) + v32;
      uint64_t v35 = *(void *)v18
          + *v20
          + v24
          + (v30 & v33 | v27 & ~v33)
          + (__ROR8__(v33, 14) ^ __ROR8__(v33, 18) ^ __ROR8__(v33, 41));
      uint64_t v12 = v35 + v25;
      uint64_t v21 = (__ROR8__(v34, 28) ^ __ROR8__(v34, 34) ^ __ROR8__(v34, 39)) + ((v34 | v31) & v28 | v34 & v31) + v35;
      uint64_t v36 = *((void *)v18 + 1)
          + v20[1]
          + v27
          + (v33 & v12 | v30 & ~v12)
          + (__ROR8__(v12, 14) ^ __ROR8__(v12, 18) ^ __ROR8__(v12, 41));
      uint64_t v13 = v36 + v28;
      uint64_t v22 = (__ROR8__(v21, 28) ^ __ROR8__(v21, 34) ^ __ROR8__(v21, 39)) + ((v21 | v34) & v31 | v21 & v34) + v36;
      uint64_t v37 = *((void *)v18 + 2)
          + v20[2]
          + v30
          + (v12 & v13 | v33 & ~v13)
          + (__ROR8__(v13, 14) ^ __ROR8__(v13, 18) ^ __ROR8__(v13, 41));
      uint64_t v15 = v37 + v31;
      uint64_t v16 = (__ROR8__(v22, 28) ^ __ROR8__(v22, 34) ^ __ROR8__(v22, 39)) + ((v22 | v21) & v34 | v22 & v21) + v37;
      uint64_t v38 = *((void *)v18 + 3)
          + v20[3]
          + v33
          + (v13 & v15 | v12 & ~v15)
          + (__ROR8__(v15, 14) ^ __ROR8__(v15, 18) ^ __ROR8__(v15, 41));
      uint64_t v39 = (__ROR8__(v16, 28) ^ __ROR8__(v16, 34) ^ __ROR8__(v16, 39)) + ((v16 | v22) & v21 | v16 & v22);
      uint64_t v14 = v38 + v34;
      uint64_t v17 = v39 + v38;
      v19 += 8LL;
      v20 += 8;
      v18 += 4;
    }

    while (v19 < 0x48);
    uint64_t v40 = 0LL;
    *(void *)&__int128 v46 = v13;
    *((void *)&v46 + 1) = v12;
    *(void *)&__int128 v45 = v14;
    *((void *)&v45 + 1) = v15;
    *(void *)&__int128 v43 = v39 + v38;
    *((void *)&v43 + 1) = v16;
    *(void *)&__int128 v44 = v22;
    *((void *)&v44 + 1) = v21;
    do
    {
      a1[v40] = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v43 + v40 * 16), (int64x2_t)a1[v40]);
      ++v40;
    }

    while (v40 != 4);
    a3 += 128LL;
  }

uint64_t sub_18079700C(uint64_t a1, const void *a2, uint64_t a3)
{
  v22[1] = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = (uint64_t)a2 + v7 + 8;
  unint64_t v9 = v7 + 8 + v6;
  size_t v10 = (v9 + 11) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (void *)((char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  bzero(v11, v10);
  memcpy(v11, a2, v9 + 4);
  uint64_t v12 = (char *)v11 + v7 + 8;
  uint64_t v13 = *(unsigned int *)&v12[v6];
  *v11 += (8 * v13);
  *(_DWORD *)&v12[v6] = v13 + 1;
  v12[v13] = 0x80;
  unint64_t v14 = *(unsigned int *)&v12[v6];
  if (v6 - 16 < v14)
  {
    while (v6 > v14)
    {
      *(_DWORD *)&v12[v6] = v14 + 1;
      v12[v14] = 0;
      unint64_t v14 = *(unsigned int *)&v12[v6];
    }

    (*(void (**)(void *, uint64_t))(a1 + 48))(v11 + 1, 1LL);
    LODWORD(v14) = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v6 = *(void *)(a1 + 16);
    *(_DWORD *)((char *)v11 + v7 + v6 + 8) = 0;
  }

  uint64_t v15 = (uint64_t)v11 + v7 + 8;
  uint64_t v16 = (_DWORD *)(v15 + v6);
  if (v6 - 8 > v14)
  {
    unint64_t v17 = v14;
    do
    {
      *uint64_t v16 = v14 + 1;
      *(_BYTE *)(v15 + v17) = 0;
      unint64_t v17 = *v16;
      LODWORD(v14) = *v16;
    }

    while (v6 - 8 > v17);
  }

  *((void *)v16 - 1) = bswap64(*v11);
  (*(void (**)(void *, uint64_t))(a1 + 48))(v11 + 1, 1LL);
  if (*(void *)a1 >= 8uLL)
  {
    unsigned int v18 = 0;
    unint64_t v19 = 0LL;
    unsigned int v20 = 1;
    do
    {
      *(void *)(a3 + v18) = bswap64(v11[v19 + 1]);
      unint64_t v19 = v20++;
      v18 += 8;
    }

    while (v19 < *(void *)a1 >> 3);
  }

  return sub_1807980F8(*(void *)(a1 + 8) + *(void *)(a1 + 16) + 12LL, v11);
}

uint64_t sub_1807971F4(uint64_t result, int8x16_t *a2, int8x16_t *a3, uint64_t a4)
{
  if (result)
  {
    unint64_t v4 = a3->i64[0];
    char v5 = 64 - a4;
    uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(64 - a4);
    uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(-a4);
    BOOL v8 = result == 4;
    BOOL v9 = result < 4;
    result -= 4LL;
    if (!v9)
    {
      if (v8)
      {
        int8x16_t v13 = a3[1];
        *a2 = veorq_s8( (int8x16_t)vshlq_u64(*(uint64x2_t *)a3, v7),  (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(*a3, v13, 8uLL), v6));
        a2[1] = veorq_s8( (int8x16_t)vshlq_u64((uint64x2_t)v13, v7),  (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v13, v13, 8uLL).u64[0], v6));
        return result;
      }

      do
      {
        int8x16_t v10 = *a3;
        int8x16_t v11 = a3[1];
        a3 += 2;
        unint64_t v4 = a3->i64[0];
        v12.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
        v12.i64[1] = a3->i64[0];
        *a2 = veorq_s8( (int8x16_t)vshlq_u64((uint64x2_t)v10, v7),  (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v10, v11, 8uLL), v6));
        a2[1] = veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v11, v7), (int8x16_t)vshlq_u64(v12, v6));
        a2 += 2;
        BOOL v9 = result <= 4;
        result -= 4LL;
      }

      while (!v9);
    }

    uint64_t v14 = result + 4;
    uint64_t v15 = &a3->u64[1];
    BOOL v16 = v14 == 2;
    BOOL v9 = v14 < 2;
    uint64_t result = v14 - 2;
    if (!v9)
    {
      if (v16)
      {
        uint64_t v19 = *v15 >> a4;
        a2->i64[0] = (v4 >> a4) | (*v15 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        a2->i64[1] = v19;
        return result;
      }

      do
      {
        unint64_t v17 = *v15;
        unint64_t v18 = v15[1];
        v15 += 2;
        a2->i64[0] = (v4 >> a4) | (v17 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        a2->i64[1] = (v17 >> a4) | (v18 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        ++a2;
        unint64_t v4 = v18;
        BOOL v9 = result <= 2;
        result -= 2LL;
      }

      while (!v9);
    }

    a2->i64[0] = v4 >> a4;
  }

  return result;
}

uint64_t sub_18079730C( unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 *a5)
{
  BOOL v9 = a1 + 3;
  unint64_t v8 = *a1;
  else {
    return sub_180798984(a1);
  }
}

uint64_t sub_18079739C(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = 1LL << a2;
  uint64_t v4 = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  if (a3) {
    uint64_t v5 = *(void *)(result + v4) | v3;
  }
  else {
    uint64_t v5 = *(void *)(result + v4) & ~v3;
  }
  *(void *)(result + v4) = v5;
  return result;
}

uint64_t sub_1807973CC(uint64_t a1, void *a2)
{
  return sub_1807980F8(8 * a1, a2);
}

uint64_t sub_1807973D4(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = a3;
  return sub_1807980F8(8 * a1 - 8, a2 + 1);
}

uint64_t sub_1807973E4(uint64_t result, unint64_t *a2)
{
  for (uint64_t i = &a2[result - 1]; a2 < i; --i)
  {
    unint64_t v3 = bswap64(*a2);
    *a2++ = bswap64(*i);
    unint64_t *i = v3;
  }

  if ((result & 1) != 0) {
    *a2 = bswap64(*a2);
  }
  return result;
}

unint64_t sub_180797428(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = sub_180792F2C();
  uint64_t v11 = __ROR8__(0x5555555555555555LL, a2 | (2 * v10));
  if (a1)
  {
    uint64_t v12 = 0LL;
    do
    {
      unint64_t v14 = *a4++;
      unint64_t v13 = v14;
      uint64_t v15 = *a5++;
      unsigned __int128 v16 = __PAIR128__(v12, v12) - v13;
      uint64_t v17 = v16 + v15;
      if (__CFADD__((void)v16, v15)) {
        uint64_t v18 = *((void *)&v16 + 1) + 1LL;
      }
      else {
        uint64_t v18 = (__PAIR128__(v12, v12) - v13) >> 64;
      }
      uint64_t v12 = v18 >> 63;
      uint64_t v19 = v13 ^ v17;
      uint64_t v20 = v13 ^ v10;
      *a3 = v20;
      *a3++ = v19 & v11 ^ v19 & 0x5555555555555555LL ^ v20 ^ v10;
      --a1;
    }

    while (a1);
    unint64_t v21 = (unint64_t)v18 >> 63;
  }

  else
  {
    unint64_t v21 = 0LL;
  }

  return v21 & a2;
}

BOOL sub_1807974D4()
{
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000LL) != 0)
  {
    BOOL v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) != 0;
    __asm { MSR             DIT, #1 }
  }

  else
  {
    BOOL v0 = 0LL;
  }

  if ((MEMORY[0xFFFFFC010] & 0x200000000000LL) != 0)
  {
    sub_18079754C();
  }

  else
  {
    __dsb(0xFu);
    __isb(0xFu);
  }

  return v0;
}

uint64_t sub_180797530(uint64_t result)
{
  if ((result & 1) == 0 && (MEMORY[0xFFFFFC010] & 0x200000000000000LL) != 0) {
    __asm { MSR             DIT, #0 }
  }

  return result;
}

void sub_18079754C()
{
  __asm { SB }

unint64_t sub_180797554(unint64_t result, uint64_t a2)
{
  if (result)
  {
    unint64_t v2 = result;
    uint64_t result = 0LL;
    unint64_t v3 = v2 - 1;
    uint64_t v4 = (v2 << 6) - 64;
    do
    {
      unint64_t v5 = *(void *)(a2 + 8 * v3);
      --v3;
      v4 -= 64LL;
    }

    while (v3 < v2);
  }

  return result;
}

uint64_t sub_1807975BC( uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v14 = (uint64_t *)*a2;
  uint64_t v16 = (uint64_t)(*a2 + 4);
  unint64_t v15 = **a2;
  if (a3 <= 0xF)
  {
    uint64_t v34 = (os_log_s *)sub_180792D7C();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT)) {
      sub_180797A98(a3, v34);
    }
  }

  if (!sub_180794338(v14, a5) && !sub_180794338(v14, a6))
  {
    uint64_t v38 = (unint64_t *)a5;
    uint64_t v41 = *(void *)(a1 + 16);
    uint64_t v19 = (int8x16_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    uint64_t v39 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    __int128 v44 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    __int128 v43 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    uint64_t v40 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v15);
    int v42 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v15);
    size_t v20 = sub_18078E198((uint64_t *)a2);
    uint64_t v36 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    memset(v36, 170, v20);
    __s = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    unint64_t v37 = v20;
    memset(__s, 255, v20);
    uint64_t v21 = sub_18079231C(v16 + 40 * *v14);
    unint64_t v22 = v21;
    else {
      unint64_t v23 = (unint64_t)(v21 + 7) >> 3;
    }
    uint64_t v24 = sub_18079371C(v15, v19, v23, a4);
    if ((v24 & 0x80000000) == 0)
    {
      if (v22 < 8 * a3) {
        sub_180793734(v15, v19, v19, -(int)v22 & 7LL);
      }
      uint64_t v25 = (unint64_t *)sub_180799370(v16 + 40 * v15);
      if (!sub_180793B6C(a1, v15, v39, v19->i64, v25)) {
        sub_180793720(v15, v19, v39);
      }
      if (sub_180792308(a1, v16 + 40 * v15)
        || (sub_1807990F0(a1, v16 + 40 * v15),
            sub_1807990F0(a1, v16 + 40 * v15),
            uint64_t v26 = a2 + 2,
            sub_1807935CC(v15, (uint64_t *)&a2[2 * *v14 + 2]) != 1)
        || v26[2 * *v14] != (unint64_t *)1)
      {
LABEL_37:
        uint64_t v17 = 4294967289LL;
LABEL_39:
        uint64_t v29 = v41;
LABEL_34:
        *(void *)(a1 + 16) = v29;
        return v17;
      }

      uint64_t v27 = v16 + 40 * v15;
      uint64_t v24 = sub_1807911A8(a1, (uint64_t)v14);
      if (!(_DWORD)v24)
      {
        uint64_t v24 = sub_1807911A8(a1, (uint64_t)v14);
        if (!(_DWORD)v24)
        {
          if (sub_180792B0C(a1, v14, v42))
          {
            uint64_t v28 = *v14;
            if (sub_180793194(*v14, v16 + 16 * *v14 + 8 * *v14, v26))
            {
              uint64_t v17 = sub_1807911B4(a1, v14, v40, v44, (uint64_t)v40, v43, v42);
              uint64_t v29 = v41;
              if ((_DWORD)v17) {
                goto LABEL_34;
              }
            }

            else
            {
              uint64_t v30 = v16 + 40 * v28;
              uint64_t v31 = *(void *)(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v28);
              sub_18079231C(v30);
              if (sub_180790B58(a1, (uint64_t)v14)
                || (sub_18079231C(v30), sub_180790B58(a1, (uint64_t)v14)))
              {
                uint64_t v17 = 0xFFFFFFFFLL;
              }

              else
              {
                sub_18078F724(a1, (uint64_t)v14);
                uint64_t v17 = 0LL;
              }

              uint64_t v29 = v41;
              *(void *)(a1 + 16) = v31;
              if ((_DWORD)v17) {
                goto LABEL_34;
              }
            }

            if (sub_18078E424(a1, v14, (uint64_t)v40, (uint64_t)v40))
            {
              uint64_t v17 = 4294967289LL;
            }

            else
            {
              uint64_t v32 = sub_180799370(v27);
              if ((sub_180793194(v15, v40, v32) & 0x80000000) == 0)
              {
                uint64_t v33 = (unint64_t *)sub_180799370(v27);
                sub_180793B6C(a1, v15, v40, (uint64_t *)v40, v33);
              }

              else {
                uint64_t v17 = 0LL;
              }
              sub_180793C80(v15, v38, v37, (char *)v36);
              sub_180793C80(v15, (unint64_t *)v40, v37, (char *)__s);
              sub_1807942D0(a8, (uint64_t)&unk_1807A4710, v37, (uint64_t)v36, (uint64_t)__s);
            }

            goto LABEL_34;
          }

          goto LABEL_37;
        }
      }
    }

    uint64_t v17 = v24;
    goto LABEL_39;
  }

  return 4294967289LL;
}

uint64_t sub_180797A7C( uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  return sub_1807975BC(a1, a2, a3, a4, a5, a6, (uint64_t)&(*a2)[2 * **a2 + 4 + **a2], a7);
}

void sub_180797A98(uint64_t a1, os_log_s *a2)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_fault_impl( &dword_180741000,  a2,  OS_LOG_TYPE_FAULT,  "Digest should be at least 128 bits long: argument digest_len = %lu",  (uint8_t *)&v2,  0xCu);
}

double sub_180797B0C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64x2_t a5)
{
  uint64_t v5 = a2 + 8 * a1;
  uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(a4);
  uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(a4 - 64);
  unint64_t v8 = (unint64_t *)(a3 + 8 * a1 - 8);
  BOOL v9 = a1 == 4;
  BOOL v10 = a1 < 4;
  uint64_t v11 = a1 - 4;
  if (!v10)
  {
    if (v9)
    {
      v16.i64[0] = 0LL;
      v16.i64[1] = *(v8 - 3);
      a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(v16, v7), (int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 3), v6));
      int8x16_t v17 = veorq_s8( (int8x16_t)vshlq_u64(*((uint64x2_t *)v8 - 1), v7),  (int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 1), v6));
      *(uint64x2_t *)(v5 - memset(v30, 170, 32) = a5;
      *(int8x16_t *)(v5 - 16) = v17;
      return *(double *)a5.i64;
    }

    do
    {
      uint64x2_t v12 = *(uint64x2_t *)(v8 - 3);
      uint64x2_t v13 = *(uint64x2_t *)(v8 - 1);
      uint64x2_t v14 = *((uint64x2_t *)v8 - 2);
      uint64x2_t v15 = *((uint64x2_t *)v8 - 1);
      v8 -= 4;
      a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(v14, v7), (int8x16_t)vshlq_u64(v12, v6));
      *(uint64x2_t *)(v5 - memset(v30, 170, 32) = a5;
      *(int8x16_t *)(v5 - 16) = veorq_s8((int8x16_t)vshlq_u64(v15, v7), (int8x16_t)vshlq_u64(v13, v6));
      v5 -= 32LL;
      BOOL v10 = v11 <= 4;
      v11 -= 4LL;
    }

    while (!v10);
  }

  uint64_t v18 = v11 & 3;
  if (!v18) {
    return *(double *)a5.i64;
  }
  if (v18 == 3)
  {
    uint64x2_t v19 = *((uint64x2_t *)v8 - 1);
  }

  else
  {
    if ((v18 & 2) == 0) {
      goto LABEL_13;
    }
    v19.i64[0] = 0LL;
    v19.i64[1] = *(v8 - 1);
  }

  a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 1), v6), (int8x16_t)vshlq_u64(v19, v7));
  v8 -= 2;
  *(uint64x2_t *)(v5 - 16) = a5;
  v5 -= 16LL;
LABEL_13:
  if ((v18 & 1) != 0)
  {
    a5.i64[0] = *v8;
    a5.i64[0] = vshlq_u64(a5, v6).u64[0];
    *(void *)(v5 - 8) = a5.i64[0];
  }

  return *(double *)a5.i64;
}

void *sub_180797C00(void *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v3 = a2 + 2;
  unint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  v3 += 2;
  unint64_t v8 = *v3;
  unint64_t v9 = v3[1];
  unint64_t v11 = *a3;
  unint64_t v12 = a3[1];
  BOOL v10 = a3 + 2;
  unint64_t v13 = *v10;
  unint64_t v14 = v10[1];
  v10 += 2;
  unint64_t v15 = *v10;
  unint64_t v16 = v10[1];
  unsigned __int128 v17 = v5 * (unsigned __int128)v11 + ((v4 * (unsigned __int128)v11) >> 64);
  unsigned __int128 v18 = v17 + v4 * (unsigned __int128)v12;
  uint64_t v19 = __CFADD__(__CFADD__((void)v17, v4 * v12), *((void *)&v17 + 1)) | __CFADD__( (v4 * (unsigned __int128)v12) >> 64,  *((void *)&v18 + 1));
  uint64_t v20 = (v6 * (unsigned __int128)v11) >> 64;
  uint64_t v21 = *((void *)&v18 + 1) + v6 * v11;
  _BOOL1 v22 = __CFADD__(__CFADD__(*((void *)&v18 + 1), v6 * v11), v19);
  uint64_t v23 = __CFADD__(*((void *)&v18 + 1), v6 * v11) + v19;
  v22 |= __CFADD__(v20, v23);
  v23 += v20;
  BOOL v24 = v22;
  uint64_t v25 = (v5 * (unsigned __int128)v12) >> 64;
  _BOOL1 v22 = __CFADD__(v21, v5 * v12);
  unint64_t v26 = v21 + v5 * v12;
  BOOL v28 = v22;
  _BOOL1 v22 = __CFADD__(v22, v23);
  uint64_t v27 = v28 + v23;
  v22 |= __CFADD__(v25, v27);
  v27 += v25;
  BOOL v29 = v22 + v24;
  uint64_t v30 = (v4 * (unsigned __int128)v13) >> 64;
  _BOOL1 v22 = __CFADD__(v26, v4 * v13);
  unint64_t v31 = v26 + v4 * v13;
  BOOL v33 = v22;
  _BOOL1 v22 = __CFADD__(v22, v27);
  uint64_t v32 = v33 + v27;
  v22 |= __CFADD__(v30, v32);
  v32 += v30;
  BOOL v34 = v22 + v29;
  uint64_t v35 = (v7 * (unsigned __int128)v11) >> 64;
  _BOOL1 v22 = __CFADD__(v32, v7 * v11);
  uint64_t v36 = v32 + v7 * v11;
  BOOL v38 = v22;
  _BOOL1 v22 = __CFADD__(v22, v34);
  uint64_t v37 = v38 + v34;
  v22 |= __CFADD__(v35, v37);
  v37 += v35;
  BOOL v39 = v22;
  uint64_t v40 = (v6 * (unsigned __int128)v12) >> 64;
  _BOOL1 v22 = __CFADD__(v36, v6 * v12);
  uint64_t v41 = v36 + v6 * v12;
  BOOL v43 = v22;
  _BOOL1 v22 = __CFADD__(v22, v37);
  uint64_t v42 = v43 + v37;
  v22 |= __CFADD__(v40, v42);
  v42 += v40;
  BOOL v44 = v22 + v39;
  uint64_t v45 = (v5 * (unsigned __int128)v13) >> 64;
  _BOOL1 v22 = __CFADD__(v41, v5 * v13);
  uint64_t v46 = v41 + v5 * v13;
  BOOL v48 = v22;
  _BOOL1 v22 = __CFADD__(v22, v42);
  uint64_t v47 = v48 + v42;
  v22 |= __CFADD__(v45, v47);
  v47 += v45;
  BOOL v49 = v22 + v44;
  uint64_t v50 = (v4 * (unsigned __int128)v14) >> 64;
  _BOOL1 v22 = __CFADD__(v46, v4 * v14);
  unint64_t v51 = v46 + v4 * v14;
  BOOL v53 = v22;
  _BOOL1 v22 = __CFADD__(v22, v47);
  uint64_t v52 = v53 + v47;
  v22 |= __CFADD__(v50, v52);
  v52 += v50;
  BOOL v54 = v22 + v49;
  uint64_t v55 = (*v3 * (unsigned __int128)v11) >> 64;
  _BOOL1 v22 = __CFADD__(v52, *v3 * v11);
  uint64_t v56 = v52 + *v3 * v11;
  BOOL v58 = v22;
  _BOOL1 v22 = __CFADD__(v22, v54);
  uint64_t v57 = v58 + v54;
  v22 |= __CFADD__(v55, v57);
  v57 += v55;
  BOOL v59 = v22;
  uint64_t v60 = (v7 * (unsigned __int128)v12) >> 64;
  _BOOL1 v22 = __CFADD__(v56, v7 * v12);
  uint64_t v61 = v56 + v7 * v12;
  BOOL v63 = v22;
  _BOOL1 v22 = __CFADD__(v22, v57);
  uint64_t v62 = v63 + v57;
  v22 |= __CFADD__(v60, v62);
  v62 += v60;
  BOOL v64 = v22 + v59;
  uint64_t v65 = (v6 * (unsigned __int128)v13) >> 64;
  _BOOL1 v22 = __CFADD__(v61, v6 * v13);
  uint64_t v66 = v61 + v6 * v13;
  BOOL v68 = v22;
  _BOOL1 v22 = __CFADD__(v22, v62);
  uint64_t v67 = v68 + v62;
  v22 |= __CFADD__(v65, v67);
  v67 += v65;
  BOOL v69 = v22 + v64;
  uint64_t v70 = (v5 * (unsigned __int128)v14) >> 64;
  _BOOL1 v22 = __CFADD__(v66, v5 * v14);
  uint64_t v71 = v66 + v5 * v14;
  BOOL v73 = v22;
  _BOOL1 v22 = __CFADD__(v22, v67);
  uint64_t v72 = v73 + v67;
  v22 |= __CFADD__(v70, v72);
  v72 += v70;
  BOOL v74 = v22 + v69;
  uint64_t v75 = (v4 * (unsigned __int128)v15) >> 64;
  _BOOL1 v22 = __CFADD__(v71, v4 * v15);
  unint64_t v76 = v71 + v4 * v15;
  BOOL v78 = v22;
  _BOOL1 v22 = __CFADD__(v22, v72);
  uint64_t v77 = v78 + v72;
  v22 |= __CFADD__(v75, v77);
  v77 += v75;
  BOOL v79 = v22 + v74;
  uint64_t v80 = (v9 * (unsigned __int128)v11) >> 64;
  _BOOL1 v22 = __CFADD__(v77, v9 * v11);
  uint64_t v81 = v77 + v9 * v11;
  BOOL v83 = v22;
  _BOOL1 v22 = __CFADD__(v22, v79);
  uint64_t v82 = v83 + v79;
  v22 |= __CFADD__(v80, v82);
  v82 += v80;
  BOOL v84 = v22;
  uint64_t v85 = (*v3 * (unsigned __int128)v12) >> 64;
  _BOOL1 v22 = __CFADD__(v81, *v3 * v12);
  uint64_t v86 = v81 + *v3 * v12;
  BOOL v88 = v22;
  _BOOL1 v22 = __CFADD__(v22, v82);
  uint64_t v87 = v88 + v82;
  v22 |= __CFADD__(v85, v87);
  v87 += v85;
  BOOL v89 = v22 + v84;
  uint64_t v90 = (v7 * (unsigned __int128)v13) >> 64;
  _BOOL1 v22 = __CFADD__(v86, v7 * v13);
  uint64_t v91 = v86 + v7 * v13;
  BOOL v93 = v22;
  _BOOL1 v22 = __CFADD__(v22, v87);
  uint64_t v92 = v93 + v87;
  v22 |= __CFADD__(v90, v92);
  v92 += v90;
  BOOL v94 = v22 + v89;
  uint64_t v95 = (v6 * (unsigned __int128)v14) >> 64;
  _BOOL1 v22 = __CFADD__(v91, v6 * v14);
  uint64_t v96 = v91 + v6 * v14;
  BOOL v98 = v22;
  _BOOL1 v22 = __CFADD__(v22, v92);
  uint64_t v97 = v98 + v92;
  v22 |= __CFADD__(v95, v97);
  v97 += v95;
  BOOL v99 = v22 + v94;
  uint64_t v100 = (v5 * (unsigned __int128)v15) >> 64;
  _BOOL1 v22 = __CFADD__(v96, v5 * v15);
  uint64_t v101 = v96 + v5 * v15;
  BOOL v103 = v22;
  _BOOL1 v22 = __CFADD__(v22, v97);
  uint64_t v102 = v103 + v97;
  v22 |= __CFADD__(v100, v102);
  v102 += v100;
  BOOL v104 = v22 + v99;
  uint64_t v105 = (v4 * (unsigned __int128)v16) >> 64;
  _BOOL1 v22 = __CFADD__(v101, v4 * v16);
  unint64_t v106 = v101 + v4 * v16;
  BOOL v108 = v22;
  _BOOL1 v22 = __CFADD__(v22, v102);
  uint64_t v107 = v108 + v102;
  v22 |= __CFADD__(v105, v107);
  v107 += v105;
  unint64_t v109 = 0x100000001LL * v4 * v11;
  unint64_t v110 = HIDWORD(v109);
  unint64_t v111 = HIDWORD(v109) + __CFADD__(v4 * v11, (v4 * v11) << 32) + (void)v18;
  unsigned __int128 v112 = __PAIR128__( v51,  __CFADD__(__CFADD__(v4 * v11, (v4 * v11) << 32), (void)v18) | __CFADD__( HIDWORD(v109),  __CFADD__( v4 * v11,  (v4 * v11) << 32)
                                                                                            + (void)v18))
       + v31;
  BOOL v113 = __CFADD__( __CFADD__( __CFADD__(__CFADD__(v4 * v11, (v4 * v11) << 32), (void)v18) | __CFADD__( HIDWORD(v109),  __CFADD__( v4 * v11,  (v4 * v11) << 32)
                                                                                              + (void)v18),
             v31),
           v51);
  unsigned __int128 v114 = __PAIR128__(v106, v113) + v76;
  BOOL v116 = __CFADD__(__CFADD__(v113, v76), v106);
  unint64_t v115 = v109 + v116 + v107;
  unint64_t v117 = (__CFADD__(v116, v107) | __CFADD__(v109, v116 + v107)) + v22 + v104;
  _BOOL1 v22 = v111 >= (v4 * v11) << 32;
  unsigned __int128 v120 = __PAIR128__(v112, v111) - __PAIR128__(v109, (v4 * v11) << 32);
  unint64_t v119 = v120 >> 64;
  uint64_t v118 = v120;
  BOOL v121 = !__CFSUB__((void)v112, v109, v22);
  _BOOL1 v22 = v119 >= v110;
  unsigned __int128 v124 = __PAIR128__(*((unint64_t *)&v112 + 1), v119) - __PAIR128__(v121, v110);
  uint64_t v123 = v124 >> 64;
  uint64_t v122 = v124;
  _BOOL1 v126 = __CFSUB__(*((void *)&v112 + 1), v121, v22);
  unint64_t v125 = v114 - !v126;
  BOOL v128 = (unint64_t)v114 >= !v126;
  unint64_t v127 = *((void *)&v114 + 1) - !v128;
  unsigned __int128 v129 = __PAIR128__(v117, v115) - (*((void *)&v114 + 1) < (unint64_t)!v128);
  unsigned __int128 v130 = v129 + v9 * (unsigned __int128)v12;
  unsigned __int128 v131 = v130 + v8 * (unsigned __int128)v13;
  unsigned __int128 v132 = v131 + v7 * (unsigned __int128)v14;
  unsigned __int128 v133 = v132 + v6 * (unsigned __int128)v15;
  unsigned __int128 v134 = v133 + v5 * (unsigned __int128)v16;
  uint64_t v135 = 0x100000001LL * v118;
  unint64_t v136 = (unint64_t)(0x100000001LL * v118) >> 32;
  _BOOL1 v22 = __CFADD__(__CFADD__(v118, v118 << 32), v122);
  unint64_t v137 = __CFADD__(v118, v118 << 32) + v122;
  v22 |= __CFADD__(v136, v137);
  v137 += v136;
  uint64_t v138 = v22 + v123;
  BOOL v139 = __CFADD__(v22, v123);
  unsigned __int128 v140 = __PAIR128__(v127, v139) + v125;
  BOOL v142 = __CFADD__(__CFADD__(v139, v125), v127);
  unint64_t v141 = v142 + v134;
  uint64_t v143 = v135 + __CFADD__(v142, (void)v134) + *((void *)&v134 + 1);
  unint64_t v144 = (__CFADD__(__CFADD__(v142, (void)v134), *((void *)&v134 + 1)) | __CFADD__( v135,  __CFADD__( v142,  (void)v134)
                                                                                              + *((void *)&v134 + 1)))
       + (__CFADD__(__CFADD__((void)v133, v5 * v16), *((void *)&v133 + 1)) | __CFADD__( (v5 * (unsigned __int128)v16) >> 64,  *((void *)&v134 + 1)))
       + (__CFADD__(__CFADD__((void)v132, v6 * v15), *((void *)&v132 + 1)) | __CFADD__( (v6 * (unsigned __int128)v15) >> 64,  *((void *)&v133 + 1)))
       + (__CFADD__(__CFADD__((void)v131, v7 * v14), *((void *)&v131 + 1)) | __CFADD__( (v7 * (unsigned __int128)v14) >> 64,  *((void *)&v132 + 1)))
       + (__CFADD__(__CFADD__((void)v130, v8 * v13), *((void *)&v130 + 1)) | __CFADD__( (v8 * (unsigned __int128)v13) >> 64,  *((void *)&v131 + 1)))
       + (unint64_t)(__CFADD__(__CFADD__((void)v129, v9 * v12), *((void *)&v129 + 1)) | __CFADD__((v9 * (unsigned __int128)v12) >> 64, *((void *)&v130 + 1)));
  _BOOL1 v22 = v137 >= v135 << 32;
  unint64_t v145 = v137 - (v135 << 32);
  LOBYTE(v142) = v22;
  _BOOL1 v22 = __CFSUB__(v138, v135, v22);
  unint64_t v146 = v138 - (v135 + !v142);
  uint64_t v147 = !v22;
  _BOOL1 v22 = v146 >= v136;
  unsigned __int128 v150 = __PAIR128__(v140, v146) - __PAIR128__(v147, v136);
  uint64_t v149 = v150 >> 64;
  uint64_t v148 = v150;
  _BOOL1 v152 = __CFSUB__((void)v140, v147, v22);
  unint64_t v151 = *((void *)&v140 + 1) - !v152;
  BOOL v154 = *((void *)&v140 + 1) >= (unint64_t)!v152;
  _BOOL1 v22 = v141 >= !v154;
  unint64_t v153 = v141 - !v154;
  unsigned __int128 v155 = __PAIR128__(v144, v143) - !v22;
  unsigned __int128 v156 = v155 + v9 * (unsigned __int128)v13;
  unsigned __int128 v157 = v156 + v8 * (unsigned __int128)v14;
  unsigned __int128 v158 = v157 + v7 * (unsigned __int128)v15;
  unsigned __int128 v159 = v158 + v6 * (unsigned __int128)v16;
  uint64_t v160 = 0x100000001LL * v145;
  unint64_t v161 = (0x100000001LL * v145) >> 32;
  _BOOL1 v22 = __CFADD__(__CFADD__(v145, v145 << 32), v148);
  unint64_t v162 = __CFADD__(v145, v145 << 32) + v148;
  v22 |= __CFADD__(v161, v162);
  v162 += v161;
  uint64_t v163 = v22 + v149;
  BOOL v164 = __CFADD__(v22, v149);
  unsigned __int128 v165 = __PAIR128__(v153, v164) + v151;
  BOOL v167 = __CFADD__(__CFADD__(v164, v151), v153);
  unint64_t v166 = v167 + v159;
  uint64_t v168 = v160 + __CFADD__(v167, (void)v159) + *((void *)&v159 + 1);
  unint64_t v169 = (__CFADD__(__CFADD__(v167, (void)v159), *((void *)&v159 + 1)) | __CFADD__( v160,  __CFADD__( v167,  (void)v159)
                                                                                              + *((void *)&v159 + 1)))
       + (__CFADD__(__CFADD__((void)v158, v6 * v16), *((void *)&v158 + 1)) | __CFADD__( (v6 * (unsigned __int128)v16) >> 64,  *((void *)&v159 + 1)))
       + (__CFADD__(__CFADD__((void)v157, v7 * v15), *((void *)&v157 + 1)) | __CFADD__( (v7 * (unsigned __int128)v15) >> 64,  *((void *)&v158 + 1)))
       + (__CFADD__(__CFADD__((void)v156, v8 * v14), *((void *)&v156 + 1)) | __CFADD__( (v8 * (unsigned __int128)v14) >> 64,  *((void *)&v157 + 1)))
       + (unint64_t)(__CFADD__(__CFADD__((void)v155, v9 * v13), *((void *)&v155 + 1)) | __CFADD__((v9 * (unsigned __int128)v13) >> 64, *((void *)&v156 + 1)));
  _BOOL1 v22 = v162 >= v160 << 32;
  unint64_t v170 = v162 - (v160 << 32);
  LOBYTE(v167) = v22;
  _BOOL1 v22 = __CFSUB__(v163, v160, v22);
  unint64_t v171 = v163 - (v160 + !v167);
  uint64_t v172 = !v22;
  _BOOL1 v22 = v171 >= v161;
  unsigned __int128 v175 = __PAIR128__(v165, v171) - __PAIR128__(v172, v161);
  uint64_t v174 = v175 >> 64;
  uint64_t v173 = v175;
  _BOOL1 v177 = __CFSUB__((void)v165, v172, v22);
  unint64_t v176 = *((void *)&v165 + 1) - !v177;
  BOOL v179 = *((void *)&v165 + 1) >= (unint64_t)!v177;
  _BOOL1 v22 = v166 >= !v179;
  unint64_t v178 = v166 - !v179;
  unsigned __int128 v180 = __PAIR128__(v169, v168) - !v22;
  unsigned __int128 v181 = v180 + v9 * (unsigned __int128)v14;
  unsigned __int128 v182 = v181 + v8 * (unsigned __int128)v15;
  unsigned __int128 v183 = v182 + v7 * (unsigned __int128)v16;
  uint64_t v184 = 0x100000001LL * v170;
  unint64_t v185 = (0x100000001LL * v170) >> 32;
  _BOOL1 v22 = __CFADD__(__CFADD__(v170, v170 << 32), v173);
  unint64_t v186 = __CFADD__(v170, v170 << 32) + v173;
  v22 |= __CFADD__(v185, v186);
  v186 += v185;
  uint64_t v187 = v22 + v174;
  BOOL v188 = __CFADD__(v22, v174);
  unsigned __int128 v189 = __PAIR128__(v178, v188) + v176;
  BOOL v191 = __CFADD__(__CFADD__(v188, v176), v178);
  unint64_t v190 = v191 + v183;
  uint64_t v192 = v184 + __CFADD__(v191, (void)v183) + *((void *)&v183 + 1);
  unint64_t v193 = (__CFADD__(__CFADD__(v191, (void)v183), *((void *)&v183 + 1)) | __CFADD__( v184,  __CFADD__( v191,  (void)v183)
                                                                                              + *((void *)&v183 + 1)))
       + (__CFADD__(__CFADD__((void)v182, v7 * v16), *((void *)&v182 + 1)) | __CFADD__( (v7 * (unsigned __int128)v16) >> 64,  *((void *)&v183 + 1)))
       + (__CFADD__(__CFADD__((void)v181, v8 * v15), *((void *)&v181 + 1)) | __CFADD__( (v8 * (unsigned __int128)v15) >> 64,  *((void *)&v182 + 1)))
       + (unint64_t)(__CFADD__(__CFADD__((void)v180, v9 * v14), *((void *)&v180 + 1)) | __CFADD__((v9 * (unsigned __int128)v14) >> 64, *((void *)&v181 + 1)));
  _BOOL1 v22 = v186 >= v184 << 32;
  unint64_t v194 = v186 - (v184 << 32);
  LOBYTE(v191) = v22;
  _BOOL1 v22 = __CFSUB__(v187, v184, v22);
  unint64_t v195 = v187 - (v184 + !v191);
  uint64_t v196 = !v22;
  _BOOL1 v22 = v195 >= v185;
  unsigned __int128 v199 = __PAIR128__(v189, v195) - __PAIR128__(v196, v185);
  uint64_t v198 = v199 >> 64;
  uint64_t v197 = v199;
  _BOOL1 v201 = __CFSUB__((void)v189, v196, v22);
  unint64_t v200 = *((void *)&v189 + 1) - !v201;
  BOOL v203 = *((void *)&v189 + 1) >= (unint64_t)!v201;
  _BOOL1 v22 = v190 >= !v203;
  unint64_t v202 = v190 - !v203;
  unsigned __int128 v204 = __PAIR128__(v193, v192) - !v22;
  unsigned __int128 v205 = v204 + v9 * (unsigned __int128)v15;
  unsigned __int128 v206 = v205 + v8 * (unsigned __int128)v16;
  uint64_t v207 = 0x100000001LL * v194;
  unint64_t v208 = (0x100000001LL * v194) >> 32;
  _BOOL1 v22 = __CFADD__(__CFADD__(v194, v194 << 32), v197);
  unint64_t v209 = __CFADD__(v194, v194 << 32) + v197;
  v22 |= __CFADD__(v208, v209);
  v209 += v208;
  uint64_t v210 = v22 + v198;
  BOOL v211 = __CFADD__(v22, v198);
  unsigned __int128 v212 = __PAIR128__(v202, v211) + v200;
  BOOL v214 = __CFADD__(__CFADD__(v211, v200), v202);
  unint64_t v213 = v214 + v206;
  uint64_t v215 = v207 + __CFADD__(v214, (void)v206) + *((void *)&v206 + 1);
  unint64_t v216 = (__CFADD__(__CFADD__(v214, (void)v206), *((void *)&v206 + 1)) | __CFADD__( v207,  __CFADD__( v214,  (void)v206)
                                                                                              + *((void *)&v206 + 1)))
       + (__CFADD__(__CFADD__((void)v205, v8 * v16), *((void *)&v205 + 1)) | __CFADD__( (v8 * (unsigned __int128)v16) >> 64,  *((void *)&v206 + 1)))
       + (unint64_t)(__CFADD__(__CFADD__((void)v204, v9 * v15), *((void *)&v204 + 1)) | __CFADD__((v9 * (unsigned __int128)v15) >> 64, *((void *)&v205 + 1)));
  _BOOL1 v22 = v209 >= v207 << 32;
  unint64_t v217 = v209 - (v207 << 32);
  LOBYTE(v214) = v22;
  _BOOL1 v22 = __CFSUB__(v210, v207, v22);
  unint64_t v218 = v210 - (v207 + !v214);
  uint64_t v219 = !v22;
  _BOOL1 v22 = v218 >= v208;
  unsigned __int128 v222 = __PAIR128__(v212, v218) - __PAIR128__(v219, v208);
  uint64_t v221 = v222 >> 64;
  uint64_t v220 = v222;
  _BOOL1 v224 = __CFSUB__((void)v212, v219, v22);
  unint64_t v223 = *((void *)&v212 + 1) - !v224;
  BOOL v226 = *((void *)&v212 + 1) >= (unint64_t)!v224;
  _BOOL1 v22 = v213 >= !v226;
  unint64_t v225 = v213 - !v226;
  unsigned __int128 v227 = __PAIR128__(v216, v215) - !v22;
  unsigned __int128 v228 = v227 + v9 * (unsigned __int128)v16;
  uint64_t v229 = 0x100000001LL * v217;
  unint64_t v230 = (0x100000001LL * v217) >> 32;
  _BOOL1 v22 = __CFADD__(__CFADD__(v217, v217 << 32), v220);
  unint64_t v231 = __CFADD__(v217, v217 << 32) + v220;
  v22 |= __CFADD__(v230, v231);
  v231 += v230;
  uint64_t v232 = v22 + v221;
  BOOL v233 = __CFADD__(v22, v221);
  unsigned __int128 v234 = __PAIR128__(v225, v233) + v223;
  BOOL v236 = __CFADD__(__CFADD__(v233, v223), v225);
  unint64_t v235 = v236 + v228;
  uint64_t v237 = v229 + __CFADD__(v236, (void)v228) + *((void *)&v228 + 1);
  unint64_t v238 = (__CFADD__(__CFADD__(v236, (void)v228), *((void *)&v228 + 1)) | __CFADD__( v229,  __CFADD__( v236,  (void)v228)
                                                                                              + *((void *)&v228 + 1)))
       + (unint64_t)(__CFADD__(__CFADD__((void)v227, v9 * v16), *((void *)&v227 + 1)) | __CFADD__((v9 * (unsigned __int128)v16) >> 64, *((void *)&v228 + 1)));
  _BOOL1 v22 = v231 >= v229 << 32;
  unint64_t v239 = v231 - (v229 << 32);
  LOBYTE(v236) = v22;
  _BOOL1 v22 = __CFSUB__(v232, v229, v22);
  unint64_t v240 = v232 - (v229 + !v236);
  uint64_t v241 = !v22;
  _BOOL1 v22 = v240 >= v230;
  unsigned __int128 v244 = __PAIR128__(v234, v240) - __PAIR128__(v241, v230);
  uint64_t v243 = v244 >> 64;
  uint64_t v242 = v244;
  _BOOL1 v246 = __CFSUB__((void)v234, v241, v22);
  uint64_t v245 = *((void *)&v234 + 1) - !v246;
  BOOL v248 = *((void *)&v234 + 1) >= (unint64_t)!v246;
  _BOOL1 v22 = v235 >= !v248;
  unint64_t v247 = v235 - !v248;
  unsigned __int128 v249 = __PAIR128__(v238, v237) - !v22;
  _BOOL1 v22 = v239 >= 0xFFFFFFFF;
  unint64_t v250 = v239 - 0xFFFFFFFF;
  _BOOL1 v252 = v22;
  _BOOL1 v22 = __CFSUB__(v242, 0xFFFFFFFF00000000LL, v22);
  uint64_t v251 = v242 - (!v252 - 0x100000000LL);
  _BOOL1 v254 = v22;
  _BOOL1 v22 = __CFSUB__(v243, -2LL, v22);
  uint64_t v253 = v243 - (!v254 - 2LL);
  _BOOL1 v256 = v22;
  _BOOL1 v22 = __CFSUB__(v245, -1LL, v22);
  uint64_t v255 = v245 - (!v256 - 1LL);
  _BOOL1 v258 = v22;
  _BOOL1 v22 = __CFSUB__(v247, -1LL, v22);
  unint64_t v257 = v247 - (!v258 - 1LL);
  uint64_t v259 = v249 - (!v22 - 1LL);
  uint64_t v260 = *((void *)&v249 + 1) - !__CFSUB__((void)v249, -1LL, v22);
  _BOOL1 v22 = __CFADD__(__CFADD__(v250, (v260 & 0xFFFFFFFF00000000LL) >> 32), v251);
  uint64_t v261 = __CFADD__(v250, (v260 & 0xFFFFFFFF00000000LL) >> 32) + v251;
  uint64_t v263 = v22 | __CFADD__(v260 & 0xFFFFFFFF00000000LL, v261);
  _BOOL1 v22 = __CFADD__(v263, v253);
  uint64_t v262 = v263 + v253;
  uint64_t v265 = v22 | __CFADD__(v260 & 0xFFFFFFFFFFFFFFFELL, v262);
  _BOOL1 v22 = __CFADD__(v265, v255);
  uint64_t v264 = v265 + v255;
  uint64_t v267 = v22 | __CFADD__(v260, v264);
  _BOOL1 v22 = __CFADD__(v267, v257);
  uint64_t v266 = v267 + v257;
  *a1 = v250 + ((v260 & 0xFFFFFFFF00000000LL) >> 32);
  a1[1] = (v260 & 0xFFFFFFFF00000000LL) + v261;
  v268 = a1 + 2;
  void *v268 = (v260 & 0xFFFFFFFFFFFFFFFELL) + v262;
  v268[1] = v260 + v264;
  uint64_t result = v268 + 2;
  *uint64_t result = v260 + v266;
  result[1] = v260 + (v22 | __CFADD__(v260, v266)) + v259;
  return result;
}

uint64_t sub_1807980F8(rsize_t __n, void *__s)
{
  return memset_s(__s, __n, 0, __n);
}

uint64_t sub_18079810C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = sub_180792F2C();
  uint64_t v11 = __ROR8__(0x5555555555555555LL, a2 | (2 * v10));
  uint64_t v12 = 0LL;
  if (a1)
  {
    uint64_t v13 = 0LL;
    do
    {
      uint64_t v15 = *a4++;
      uint64_t v14 = v15;
      uint64_t v17 = *a5++;
      uint64_t v16 = v17;
      BOOL v18 = __CFADD__(v12, v14);
      uint64_t v19 = v12 + v14;
      if (v18) {
        uint64_t v13 = 1LL;
      }
      BOOL v18 = __CFADD__(v19, v16);
      uint64_t v20 = v19 + v16;
      if (v18) {
        uint64_t v12 = v13 + 1;
      }
      else {
        uint64_t v12 = v13;
      }
      uint64_t v21 = v14 ^ v20;
      uint64_t v22 = v14 ^ v10;
      *a3 = v22;
      *a3++ = v21 & v11 ^ v21 & 0x5555555555555555LL ^ v22 ^ v10;
      uint64_t v13 = 0LL;
      --a1;
    }

    while (a1);
  }

  return v12 & a2;
}

uint64_t sub_1807981B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_180792314(a2);
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  unint64_t v9 = (void *)sub_180799370(a2);
  sub_180793720(v6, v8, v9);
  v8->i64[0] &= ~1uLL;
  uint64_t v10 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  sub_180793734(v6, v10, v8, 1LL);
  uint64_t v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  unsigned int v12 = sub_180792F48(a1, a2, v11, a3, (unint64_t *)v10);
  sub_18078DD78(a1, a2);
  BOOL v13 = sub_1807935CC(v6, v11) == 1 && *v11 == 1;
  uint64_t result = v13 & ~(((v12 | ((unint64_t)(int)v12 >> 32)) + 0xFFFFFFFF) >> 32);
  *(void *)(a1 + 16) = v7;
  return result;
}

uint64_t sub_1807982E4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = sub_180792314(a2);
  unsigned int v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v11);
  LOBYTE(a5) = sub_180792D68(a1, v11, a3, a4, a5);
  BOOL v13 = (unint64_t *)sub_180799370(a2);
  BOOL v14 = sub_180793B6C(a1, v11, v12, a3, v13);
  uint64_t result = sub_180792ECC(v11, !v14 | a5, a3, v12, a3);
  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1807983A8(uint64_t a1, uint64_t a2)
{
  return (**(uint64_t (***)(void))(a2 + 16))();
}

void *sub_1807983B4()
{
  return &unk_1896FACF8;
}

void *sub_1807983C0(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, unint64_t *a5)
{
  return sub_180797C00(a3, a4, a5);
}

void *sub_1807983D0(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  return sub_180797C00(a3, a4, a4);
}

uint64_t sub_1807983E0(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6LL);
  unint64_t v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6LL);
  uint64_t v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6LL);
  sub_180797C00(v10, a4, a4);
  sub_180797C00(v9, v10, a4);
  sub_180797C00(v9, v9, v9);
  sub_180797C00(v9, v9, v9);
  sub_180797C00(v8, v9, a4);
  sub_180797C00(v9, v8, v10);
  int v11 = 4;
  do
  {
    sub_180797C00(v9, v9, v9);
    --v11;
  }

  while (v11);
  sub_180797C00(v8, v8, v9);
  sub_180797C00(v9, v8, v10);
  int v12 = 8;
  do
  {
    sub_180797C00(v9, v9, v9);
    --v12;
  }

  while (v12);
  sub_180797C00(v8, v8, v9);
  sub_180797C00(v9, v8, v10);
  int v13 = 16;
  do
  {
    sub_180797C00(v9, v9, v9);
    --v13;
  }

  while (v13);
  sub_180797C00(v8, v8, v9);
  sub_180797C00(v9, v8, a4);
  sub_180797C00(v10, v9, a4);
  int v14 = 32;
  do
  {
    sub_180797C00(v10, v10, v10);
    --v14;
  }

  while (v14);
  sub_180797C00(v9, v10, v9);
  int v15 = 64;
  do
  {
    sub_180797C00(v10, v10, v10);
    --v15;
  }

  while (v15);
  sub_180797C00(v10, v10, v8);
  sub_180797C00(v8, v9, a4);
  int v16 = 64;
  do
  {
    sub_180797C00(v8, v8, v8);
    --v16;
  }

  while (v16);
  sub_180797C00(v9, v8, v9);
  sub_180797C00(v8, v9, a4);
  int v17 = 128;
  do
  {
    sub_180797C00(v8, v8, v8);
    --v17;
  }

  while (v17);
  sub_180797C00(v8, v8, v9);
  int v18 = 128;
  do
  {
    sub_180797C00(v8, v8, v8);
    --v18;
  }

  while (v18);
  sub_180797C00(v9, v8, v10);
  sub_180797C00(v8, v9, a4);
  uint64_t v23 = 0LL;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  unint64_t v20 = 1LL;
  sub_180797C00(v8, v8, &v20);
  if (sub_1807935CC(6LL, (uint64_t *)v8) == 1 && *v8 == 1)
  {
    sub_180793720(6LL, a3, v9);
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t result = 4294967254LL;
  }

  *(void *)(a1 + 16) = v7;
  return result;
}

void *sub_180798718(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v8 = 0LL;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  unint64_t v5 = 1LL;
  return sub_180797C00(a3, a4, &v5);
}

uint64_t sub_180798780(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t *a4)
{
  uint64_t v7 = sub_180792314(a2);
  uint64_t v8 = *a4 & 1;
  uint64_t v9 = (uint64_t *)sub_180799370(a2);
  uint64_t v10 = sub_18079810C(v7, v8, a3->i64, a4, v9);
  uint64_t result = sub_180793734(v7, a3, a3, 1LL);
  a3->i64[v7 - 1] |= v10 << 63;
  return result;
}

uint64_t sub_180798810(uint64_t a1, void *a2)
{
  unint64_t v4 = (uint64_t *)sub_180799370((uint64_t)a2);
  uint64_t v5 = sub_180792314((uint64_t)a2);
  a2[2] = off_1896FA880;
  unint64_t v7 = sub_180792314((uint64_t)a2);
  uint64_t v8 = (unint64_t *)sub_180799370((uint64_t)a2);
  a2[1] = sub_180793138(v7, v8);
  uint64_t v9 = (2 - ((3 * *v4) ^ 2) * *v4) * ((3 * *v4) ^ 2);
  uint64_t v10 = (2 - (2 - v9 * *v4) * v9 * *v4) * (2 - v9 * *v4) * v9;
  a2[*a2 + 3] = (v10 * *v4 - 2) * v10;
  uint64_t v11 = sub_180792314((uint64_t)a2);
  uint64_t v12 = *(void *)(a1 + 16);
  int v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v11);
  memset(&v13[v11], 255, 8 * v11);
  int v14 = (uint64_t *)sub_180799370((uint64_t)a2);
  sub_180791B70(v11, v13, v14);
  int v15 = (char *)&a2[*a2 + 4];
  int v16 = (uint64_t *)sub_180799370((uint64_t)a2);
  sub_1807931B8(a1, 2 * v11, (uint64_t)v13, 0LL, 0LL, v11, v15, v16);
  uint64_t result = 0LL;
  *(void *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_180798984(void *a1)
{
  uint64_t v2 = sub_180792314((uint64_t)a1);
  v5[0] = sub_180799424(40 * v2 + 24);
  v5[1] = 5 * sub_180792314((uint64_t)a1) + 3;
  _OWORD v5[2] = 0LL;
  void v5[3] = sub_18079945C;
  __int128 v6 = sub_1807994A0;
  if (!v5[0]) {
    return 4294967283LL;
  }
  uint64_t v3 = sub_180798810((uint64_t)v5, a1);
  v6((uint64_t)v5);
  return v3;
}

uint64_t sub_180798A18(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, char *a5)
{
  unint64_t v10 = sub_180792314((uint64_t)a2);
  uint64_t v11 = v10;
  if ((a4 - 1) / v10 <= 1) {
    unint64_t v12 = 1LL;
  }
  else {
    unint64_t v12 = (a4 - 1) / v10;
  }
  uint64_t v17 = a4;
  uint64_t v18 = *(void *)(a1 + 16);
  int v13 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v10);
  uint64_t v19 = a5;
  sub_180793720(v11, v13, a5);
  unint64_t v14 = v12 - 1;
  if (v12 != 1)
  {
    int v15 = &v19[8 * v11];
    do
    {
      sub_180793720(v11, &v13[8 * v11], v15);
      sub_180796A98(a1, a2, (uint64_t *)v13, (uint64_t *)v13);
      v15 += 8 * v11;
      --v14;
    }

    while (v14);
  }

  if (v17 != v12 * v11) {
    sub_180793720(v17 - v12 * v11, &v13[8 * v11], &v19[8 * v12 * v11]);
  }
  sub_1807973CC(v11 - (v17 - v12 * v11), &v13[8 * v11 + 8 * (v17 - v12 * v11)]);
  sub_180796A98(a1, a2, a3, (uint64_t *)v13);
  do
  {
    sub_1807931A4(a1, v11, (uint64_t)v13, (uint64_t)a3, (uint64_t)&a2[*a2 + 4]);
    uint64_t result = sub_180796A98(a1, a2, a3, (uint64_t *)v13);
    --v12;
  }

  while (v12);
  *(void *)(a1 + 16) = v18;
  return result;
}

uint64_t sub_180798B8C(uint64_t a1, void *a2, uint64_t *a3, char *a4)
{
  uint64_t v8 = 2 * sub_180792314((uint64_t)a2);
  return sub_180798A18(a1, a2, a3, v8, a4);
}

uint64_t sub_180798BD8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 32LL))();
}

uint64_t sub_180798BE4(uint64_t a1, const void *a2, uint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v10 = sub_180792314((uint64_t)a2);
  uint64_t v11 = sub_180799370((uint64_t)a2);
  if ((sub_180793194(v10, a4, v11) & 0x80000000) == 0) {
    return 4294967289LL;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  int v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  sub_1807980F8(8 * (*(void *)(a1 + 16) - v13), (void *)(*(void *)a1 + 8 * v13));
  int v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v10 + 4);
  uint64_t v17 = sub_180792314((uint64_t)a2);
  memcpy(v16, a2, 16 * v17 + 32);
  void v16[2] = off_1896FAEF0;
  sub_180798D30(a1, v16, v14, a4);
  uint64_t v12 = sub_180792F48(a1, (uint64_t)v16, v15, v14, a5);
  if (!(_DWORD)v12) {
    sub_180798DC8(a1, v16, a3, v15);
  }
  *(void *)(a1 + 16) = v13;
  return v12;
}

uint64_t sub_180798D30(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = sub_180792314((uint64_t)a2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v8);
  sub_1807931A4(a1, v8, (uint64_t)v10, a4, (uint64_t)&a2[*a2 + 4]);
  uint64_t result = sub_180796A98(a1, a2, a3, v10);
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_180798DC8(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = sub_180792314((uint64_t)a2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v8);
  if (v8) {
    sub_180793720(v8, v10, a4);
  }
  sub_1807973CC(v8, &v10[8 * v8]);
  uint64_t result = sub_180796A98(a1, a2, a3, (uint64_t *)v10);
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_180798E60(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = sub_180792314((uint64_t)a2);
  uint64_t v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v11);
  sub_1807931A4(a1, v11, (uint64_t)v12, a4, a5);
  uint64_t result = sub_180796A98(a1, a2, a3, v12);
  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_180798EF8(uint64_t a1, void *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = sub_180792314((uint64_t)a2);
  uint64_t v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v9);
  sub_18078E62C(a1, v9, v10, a4);
  uint64_t result = sub_180796A98(a1, a2, a3, v10);
  *(void *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_180798F88(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = 2 * sub_180792314((uint64_t)a2);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  sub_180793720(v9, v10, a4);
  uint64_t result = sub_180796A98(a1, a2, a3, (uint64_t *)v10);
  *(void *)(a1 + 16) = v8;
  return result;
}

void sub_180799014()
{
}

uint64_t sub_180799028()
{
  return 0xFFFFFFFFLL;
}

void sub_180799034()
{
}

uint64_t sub_180799048()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_180799054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = sub_180792314(a2);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v10);
  uint64_t v12 = sub_180792314(a2);
  sub_1807931A4(a1, v12, v11, a4, a5);
  uint64_t result = sub_180798BD8(a1, a2);
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_1807990F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 16LL))();
}

_OWORD *sub_180799100(void *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v3 = a2 + 2;
  unint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  unint64_t v9 = *a3;
  unint64_t v10 = a3[1];
  uint64_t v8 = a3 + 2;
  unint64_t v11 = *v8;
  unint64_t v12 = v8[1];
  unint64_t v13 = v4 * v9;
  uint64_t v14 = (v5 * (unsigned __int128)v9) >> 64;
  uint64_t v15 = *v3 * v9;
  uint64_t v16 = (v6 * (unsigned __int128)v9) >> 64;
  unint64_t v18 = v9;
  uint64_t v17 = (__PAIR128__(v5, v4) * v9) >> 64;
  _BOOL1 v19 = __CFADD__(__CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9), v14);
  uint64_t v20 = __CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9) + v14;
  v19 |= __CFADD__(v15, v20);
  v20 += v15;
  uint64_t v21 = (v7 * (unsigned __int128)v9) >> 64;
  uint64_t v22 = (v7 * (unsigned __int128)v10) >> 64;
  BOOL v24 = v19;
  _BOOL1 v19 = __CFADD__(v19, v16);
  uint64_t v23 = v24 + v16;
  v19 |= __CFADD__(v7 * v9, v23);
  v23 += v7 * v9;
  BOOL v26 = v19;
  _BOOL1 v19 = __CFADD__(v19, v21);
  uint64_t v25 = v26 + v21;
  v19 |= __CFADD__(v7 * v10, v25);
  v25 += v7 * v10;
  uint64_t v27 = v7 * *v8;
  uint64_t v28 = (v7 * (unsigned __int128)v11) >> 64;
  BOOL v30 = v19;
  _BOOL1 v19 = __CFADD__(v19, v22);
  uint64_t v29 = v30 + v22;
  v19 |= __CFADD__(v27, v29);
  v29 += v27;
  BOOL v32 = v19;
  _BOOL1 v19 = __CFADD__(v19, v28);
  uint64_t v31 = v32 + v28;
  v19 |= __CFADD__(v7 * v12, v31);
  v31 += v7 * v12;
  uint64_t v33 = v19 + ((v7 * (unsigned __int128)v12) >> 64);
  uint64_t v34 = (v4 * (unsigned __int128)v10) >> 64;
  _BOOL1 v19 = __CFADD__(v17, v4 * v10);
  uint64_t v35 = (__PAIR128__(v10, v18) * __PAIR128__(v5, v4)) >> 64;
  BOOL v37 = v19;
  _BOOL1 v19 = __CFADD__(v19, v20);
  uint64_t v36 = v37 + v20;
  v19 |= __CFADD__(v34, v36);
  v36 += v34;
  uint64_t v38 = (v6 * (unsigned __int128)v10) >> 64;
  BOOL v40 = v19;
  _BOOL1 v19 = __CFADD__(v19, v23);
  uint64_t v39 = v40 + v23;
  v19 |= __CFADD__(v6 * v10, v39);
  v39 += v6 * v10;
  BOOL v42 = v19;
  _BOOL1 v19 = __CFADD__(v19, v25);
  uint64_t v41 = v42 + v25;
  v19 |= __CFADD__(v38, v41);
  v41 += v38;
  uint64_t v43 = (v6 * (unsigned __int128)v12) >> 64;
  BOOL v45 = v19;
  _BOOL1 v19 = __CFADD__(v19, v29);
  uint64_t v44 = v45 + v29;
  v19 |= __CFADD__(v6 * v12, v44);
  v44 += v6 * v12;
  BOOL v47 = v19;
  _BOOL1 v19 = __CFADD__(v19, v31);
  uint64_t v46 = v47 + v31;
  v19 |= __CFADD__(v43, v46);
  v46 += v43;
  uint64_t v48 = v19 + v33;
  uint64_t v49 = (v5 * (unsigned __int128)v10) >> 64;
  _BOOL1 v19 = __CFADD__(v36, v5 * v10);
  uint64_t v50 = v36 + v5 * v10;
  BOOL v52 = v19;
  _BOOL1 v19 = __CFADD__(v19, v39);
  uint64_t v51 = v52 + v39;
  v19 |= __CFADD__(v49, v51);
  v51 += v49;
  uint64_t v53 = (v6 * (unsigned __int128)v11) >> 64;
  BOOL v55 = v19;
  _BOOL1 v19 = __CFADD__(v19, v41);
  uint64_t v54 = v55 + v41;
  v19 |= __CFADD__(v6 * v11, v54);
  v54 += v6 * v11;
  BOOL v57 = v19;
  _BOOL1 v19 = __CFADD__(v19, v44);
  uint64_t v56 = v57 + v44;
  v19 |= __CFADD__(v53, v56);
  v56 += v53;
  BOOL v58 = v19;
  uint64_t v59 = (v4 * (unsigned __int128)v11) >> 64;
  _BOOL1 v19 = __CFADD__(v50, v4 * v11);
  uint64_t v60 = v50 + v4 * v11;
  BOOL v62 = v19;
  _BOOL1 v19 = __CFADD__(v19, v51);
  uint64_t v61 = v62 + v51;
  v19 |= __CFADD__(v59, v61);
  v61 += v59;
  uint64_t v63 = (v5 * (unsigned __int128)v12) >> 64;
  BOOL v65 = v19;
  _BOOL1 v19 = __CFADD__(v19, v54);
  uint64_t v64 = v65 + v54;
  v19 |= __CFADD__(v5 * v12, v64);
  v64 += v5 * v12;
  BOOL v67 = v19;
  _BOOL1 v19 = __CFADD__(v19, v56);
  uint64_t v66 = v67 + v56;
  v19 |= __CFADD__(v63, v66);
  v66 += v63;
  uint64_t v68 = v19 + v58;
  uint64_t v69 = (v5 * (unsigned __int128)v11) >> 64;
  _BOOL1 v19 = __CFADD__(v61, v5 * v11);
  uint64_t v70 = v61 + v5 * v11;
  BOOL v72 = v19;
  _BOOL1 v19 = __CFADD__(v19, v64);
  uint64_t v71 = v72 + v64;
  v19 |= __CFADD__(v69, v71);
  v71 += v69;
  uint64_t v73 = v19;
  uint64_t v74 = (v4 * (unsigned __int128)v12) >> 64;
  _BOOL1 v19 = __CFADD__(v70, v4 * v12);
  uint64_t v75 = v70 + v4 * v12;
  BOOL v77 = v19;
  _BOOL1 v19 = __CFADD__(v19, v71);
  uint64_t v76 = v77 + v71;
  v19 |= __CFADD__(v74, v76);
  v76 += v74;
  BOOL v79 = v19;
  _BOOL1 v19 = __CFADD__(v19, v66);
  uint64_t v78 = v79 + v66;
  v19 |= __CFADD__(v73, v78);
  v78 += v73;
  BOOL v81 = v19;
  _BOOL1 v19 = __CFADD__(v19, v46);
  uint64_t v80 = v81 + v46;
  v19 |= __CFADD__(v68, v80);
  v80 += v68;
  uint64_t v82 = v19 + v48;
  _BOOL1 v19 = __CFADD__(v35, v13 << 32);
  unint64_t v83 = v35 + (v13 << 32);
  BOOL v85 = v19;
  _BOOL1 v19 = __CFADD__(v19, v60);
  uint64_t v84 = v85 + v60;
  v19 |= __CFADD__(HIDWORD(v13), v84);
  v84 += HIDWORD(v13);
  BOOL v87 = v19;
  _BOOL1 v19 = __CFADD__(v19, v75);
  uint64_t v86 = v87 + v75;
  v19 |= __CFADD__(0xFFFFFFFF00000001LL * v13, v86);
  v86 += 0xFFFFFFFF00000001LL * v13;
  uint64_t v88 = v19 + ((v13 * (unsigned __int128)0xFFFFFFFF00000001LL) >> 64);
  _BOOL1 v19 = __CFADD__(v84, v83 << 32);
  unint64_t v89 = v84 + (v83 << 32);
  BOOL v91 = v19;
  _BOOL1 v19 = __CFADD__(v19, v86);
  uint64_t v90 = v91 + v86;
  v19 |= __CFADD__(HIDWORD(v83), v90);
  v90 += HIDWORD(v83);
  BOOL v93 = v19;
  _BOOL1 v19 = __CFADD__(v19, v76);
  uint64_t v92 = v93 + v76;
  v19 |= __CFADD__(0xFFFFFFFF00000001LL * v83, v92);
  v92 += 0xFFFFFFFF00000001LL * v83;
  uint64_t v94 = v19 + ((v83 * (unsigned __int128)0xFFFFFFFF00000001LL) >> 64);
  _BOOL1 v19 = __CFADD__(v90, v89 << 32);
  unint64_t v95 = v90 + (v89 << 32);
  BOOL v97 = v19;
  _BOOL1 v19 = __CFADD__(v19, v92);
  uint64_t v96 = v97 + v92;
  v19 |= __CFADD__(HIDWORD(v89), v96);
  v96 += HIDWORD(v89);
  BOOL v99 = v19;
  _BOOL1 v19 = __CFADD__(v19, v78);
  uint64_t v98 = v99 + v78;
  v19 |= __CFADD__(0xFFFFFFFF00000001LL * v89, v98);
  v98 += 0xFFFFFFFF00000001LL * v89;
  uint64_t v100 = v19 + ((v89 * (unsigned __int128)0xFFFFFFFF00000001LL) >> 64);
  _BOOL1 v19 = __CFADD__(v96, v95 << 32);
  uint64_t v101 = v96 + (v95 << 32);
  BOOL v103 = v19;
  _BOOL1 v19 = __CFADD__(v19, v98);
  uint64_t v102 = v103 + v98;
  v19 |= __CFADD__(HIDWORD(v95), v102);
  v102 += HIDWORD(v95);
  BOOL v105 = v19;
  _BOOL1 v19 = __CFADD__(v19, v80);
  uint64_t v104 = v105 + v80;
  v19 |= __CFADD__(0xFFFFFFFF00000001LL * v95, v104);
  v104 += 0xFFFFFFFF00000001LL * v95;
  uint64_t v106 = v19 + ((v95 * (unsigned __int128)0xFFFFFFFF00000001LL) >> 64);
  _BOOL1 v19 = __CFADD__(v88, v101);
  uint64_t v107 = v88 + v101;
  BOOL v109 = v19;
  _BOOL1 v19 = __CFADD__(v19, v94);
  uint64_t v108 = v109 + v94;
  v19 |= __CFADD__(v102, v108);
  v108 += v102;
  BOOL v111 = v19;
  _BOOL1 v19 = __CFADD__(v19, v100);
  unint64_t v110 = v111 + v100;
  v19 |= __CFADD__(v104, v110);
  v110 += v104;
  BOOL v113 = v19;
  _BOOL1 v19 = __CFADD__(v19, v106);
  uint64_t v112 = v113 + v106;
  v19 |= __CFADD__(v82, v112);
  v112 += v82;
  BOOL v114 = v19;
  _BOOL1 v19 = __CFADD__(v107++, 1LL);
  LOBYTE(v113) = v19;
  _BOOL1 v19 = __CFSUB__(v108, 0xFFFFFFFFLL, v19);
  uint64_t v115 = v108 - (!v113 + 0xFFFFFFFFLL);
  LOBYTE(v113) = v19;
  _BOOL1 v19 = v110 >= !v19;
  unint64_t v116 = v110 - !v113;
  LOBYTE(v113) = v19;
  _BOOL1 v19 = __CFSUB__(v112, 0xFFFFFFFF00000001LL, v19);
  BOOL v117 = v114 - !v19;
  uint64_t v118 = v114 - !v19;
  _BOOL1 v19 = __CFADD__(__CFADD__(v107, v117), v115);
  uint64_t v119 = __CFADD__(v107, v117) + v115;
  *a1 = v107 + v117;
  a1[1] = v118 + v119;
  uint64_t result = a1 + 2;
  return result;
}

uint64_t sub_1807992D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = sub_180792314(a2);
  unint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v8);
  sub_18078E62C(a1, v8, v9, a4);
  uint64_t result = sub_180798BD8(a1, a2);
  *(void *)(a1 + 16) = v7;
  return result;
}

uint64_t sub_180799364(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 24LL))();
}

uint64_t sub_180799370(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_180799378(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = sub_180792314(a2);
  BOOL v12 = sub_180793B6C(a1, v11, a3, a4, a5);
  unint64_t v13 = (uint64_t *)sub_180799370(a2);
  uint64_t result = sub_18079810C(v11, v12, a3, a3, v13);
  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_18079940C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 8LL))();
}

void *sub_180799418()
{
  return &unk_1896FAC68;
}

void *sub_180799424(size_t a1)
{
  uint64_t v2 = malloc(a1);
  uint64_t v3 = v2;
  if (v2) {
    bzero(v2, a1);
  }
  return v3;
}

uint64_t sub_18079945C(void *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *a1 + 8 * v2;
  unint64_t v5 = v2 + a2;
  a1[2] = v5;
  sub_18078DC58(v5 > v3);
  return v4;
}

void sub_1807994A0(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
}

uint64_t sub_1807994F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = sub_180799370((uint64_t)a2);
  uint64_t v10 = *a2;
  uint64_t v11 = a4 + 8 * *a2;
  uint64_t v12 = sub_180799370((uint64_t)a2);
  uint64_t result = sub_1807911A8(a1, (uint64_t)a2);
  if (!(_DWORD)result)
  {
    else {
      return 4294967289LL;
    }
  }

  return result;
}

uint64_t sub_1807995C0(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  if (result)
  {
    unint64_t v3 = result;
    uint64_t result = 0LL;
    do
    {
      unint64_t v5 = *a2++;
      unint64_t v4 = v5;
      unint64_t v6 = *a3++;
      BOOL v7 = v4 >= v6;
      if (v4 > v6) {
        uint64_t result = 1LL;
      }
      if (!v7) {
        uint64_t result = -1LL;
      }
    }

    while (v3-- > 1);
  }

  return result;
}

uint64_t sub_1807995F4(unsigned int *a1)
{
  return sub_180797530(*a1);
}

void sub_1807995FC()
{
}

void sub_180799624()
{
}

void sub_18079964C()
{
}

void sub_180799674(int a1)
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_fault_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_FAULT,  "request for unknown screen param %d",  (uint8_t *)v1,  8u);
}

void sub_1807996F0()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  int v0 = 138412290;
  uint64_t v1 = qword_18C451F78;
  _os_log_fault_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_FAULT,  "invalid product id '%@'",  (uint8_t *)&v0,  0xCu);
}

void sub_180799774(unsigned int *a1, uint64_t a2, const void *a3)
{
  unint64_t v6 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  _MGLog( (uint64_t)v6,  974LL,  (uint64_t)@"%@ does not return a BOOL, actually returns a %s",  v7,  v8,  v9,  v10,  v11,  a2);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = qword_1896A07A8[*a1];
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v14 = a2;
    __int16 v15 = 2080;
    uint64_t v16 = v12;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%@ does not return a BOOL, actually returns a %s",  buf,  0x16u);
    if (!a3) {
LABEL_3:
    }
      abort();
  }

  else if (!a3)
  {
    goto LABEL_3;
  }

  CFRelease(a3);
  abort();
}

void sub_18079983C(int a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_180746774("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  uint64_t v7 = qword_1896A07A8[a1];
  _MGLog((uint64_t)v6, 998LL, (uint64_t)@"%@ value %@ can't be converted to %s", v8, v9, v10, v11, v12, a2);
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v14 = a2;
    __int16 v15 = 2112;
    uint64_t v16 = a3;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    _os_log_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "%@ value %@ can't be converted to %s",  buf,  0x20u);
  }

  abort();
}

void sub_1807998F4(const __CFData *a1)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  int v1 = 134217984;
  CFIndex Length = CFDataGetLength(a1);
  _os_log_fault_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_FAULT,  "TMAC address has unexpected length %zu",  (uint8_t *)&v1,  0xCu);
}

void sub_180799974()
{
  *(_WORD *)int v0 = 0;
  _os_log_fault_impl(&dword_180741000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_FAULT, "Unknown DeviceClass", v0, 2u);
}

void sub_1807999B8(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_fault_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_FAULT,  "Unexpected type returned for key %@.",  (uint8_t *)&v1,  0xCu);
}

void sub_180799A34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_180799AA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_180799B1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_18076C544( &dword_180741000,  MEMORY[0x1895F8DA0],  a3,  "%s returning previously initialized sysconfig dictionary",  a5,  a6,  a7,  a8,  2u);
  sub_18076C554();
}

void sub_180799B90(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  v3[0] = 67109634;
  v3[1] = a3;
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_debug_impl( &dword_180741000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEBUG,  "Appending syscfg key (0x%X): %@ from %@",  (uint8_t *)v3,  0x1Cu);
}

uint64_t sub_180799C20()
{
  uint64_t v0 = abort_report_np();
  return sub_180799C40(v0);
}

void sub_180799C40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_180799CAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_180799D1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_180799D8C()
{
}

void sub_180799DB8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_180799E28( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_180799E98( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_180799F08( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_180799F78( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_180799FE8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A058( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A0C8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A138( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A1A8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A218( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A288( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A2F8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A368( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A3D8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A448( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A4B8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A528( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A598( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A608( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A678( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A6E8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A758( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A7C8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A838( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A8A8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A918( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A988( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079A9F8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AA68( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AAD8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AB48( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079ABB8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AC28( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AC98( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AD08( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AD78( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079ADE8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AE58( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AEC8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AF38( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079AFA8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B018( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B088( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B0F8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B168( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B1D8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B248( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B2B8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B328( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B398( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B408( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B478( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B4E8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B558( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B5C8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B638( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B6A8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B718( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B788( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B7F8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B868( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B8D8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B948( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079B9B8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BA28( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BA98( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BB08( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BB78( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BBE8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BC58( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BCC8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BD38( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BDA8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BE18( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BE88( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BEF8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BF68( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079BFD8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C048( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C0B8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C128( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C198( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C208( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C278( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C2E8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C358( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C3C8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C438( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C4A8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C518( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C588( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C5F8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C668( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C6D8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C748( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C7B8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C828( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C898( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C908( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C978( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079C9E8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079CA58( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079CAC8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079CB38( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079CBA8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_18079CC18()
{
  __assert_rtn("_MGWaitForDevices", "MGDeviceIteration.c", 60, "type != MGDeviceIterationTypePath");
}

void sub_18079CC40()
{
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1895F8270](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1895F8290](data, *(void *)&len, md);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x189602630](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate( CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x189602638](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x189602640](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x189602648](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x189602660](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x189602690]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x189602698](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1896027C8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1896027D0](BOOLean);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x189602A38](type_id);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x189602A58](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x189602A60](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x189602A68](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy( CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x189602A80](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x189602A98](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x189602AB0](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x189602AC0](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x189602AC8]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x189602B90](theDict, key);
}

CFDictionaryRef CFDictionaryCreate( CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x189602BA8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x189602BB0](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x189602BB8](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x189602BD0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x189602BF0]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x189602C00](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x189602C08](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x189602C38](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x189602C48](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x189602D30](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x189602D60]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x189602DA0](locale, key);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x189602E90](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x189602EA0](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate( CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x189602EB0](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString( CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x189602EB8](allocator, formatter, string, rangep, options);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x189602F08]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x189602F10](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x189602F68](key, applicationID);
}

CFPropertyListRef CFPropertyListCreateWithData( CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x189602FF0](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1896030F0](cf);
}

void CFRunLoopAddCommonMode(CFRunLoopRef rl, CFRunLoopMode mode)
{
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x189603138]();
}

CFRunLoopRunResult CFRunLoopRunInMode( CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x189603198](mode, returnAfterSourceHandled, seconds);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x189603248](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x189603260](allocator, capacity, callBacks);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare( CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1896033C0](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings( CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x189603400](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x189603418](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation( CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x189603420](alloc, theString, *(void *)&encoding, lossByte);
}

CFStringRef CFStringCreateFromExternalRepresentation( CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x189603428](alloc, data, *(void *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x189603430](alloc, maxLength);
}

CFStringRef CFStringCreateWithBytes( CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x189603450](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x189603468](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy( CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x189603470](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x189603490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments( CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x189603498](alloc, formatOptions, format, arguments);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1896034A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1896034C0](theString, stringToFind, compareOptions);
  result.length = v4;
  result.CFIndex location = v3;
  return result;
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1896034F8](theString, buffer, bufferSize, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x189603510](theString, idx);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x189603540](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x189603548](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x189603558](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x189603590]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1896035A0](theString, prefix);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1896036B8](anURL, pathStyle);
}

CFURLRef CFURLCreateCopyAppendingPathComponent( CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x189603748](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateFromFileSystemRepresentation( CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x189603780](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath( CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1896037C0](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation( CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x189603818](url, resolveAgainstBase, buffer, maxBufLen);
}

Boolean CFURLSetResourcePropertyForKey( CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return MEMORY[0x189603858](url, key, propertyValue, error);
}

uint64_t CNEncode()
{
  return MEMORY[0x1895F8368]();
}

CFMutableDictionaryRef IOBSDNameMatching(mach_port_t mainPort, uint32_t options, const char *bsdName)
{
  return (CFMutableDictionaryRef)MEMORY[0x189607C80](*(void *)&mainPort, *(void *)&options, bsdName);
}

kern_return_t IOConnectCallMethod( mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x189607CB8]( *(void *)&connection,  *(void *)&selector,  input,  *(void *)&inputCnt,  inputStruct,  inputStructCnt,  output,  outputCnt);
}

kern_return_t IOConnectCallScalarMethod( mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return MEMORY[0x189607CC0]( *(void *)&connection,  *(void *)&selector,  input,  *(void *)&inputCnt,  output,  outputCnt);
}

kern_return_t IOConnectCallStructMethod( mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x189607CC8]( *(void *)&connection,  *(void *)&selector,  inputStruct,  inputStructCnt,  outputStruct,  outputStructCnt);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1896082F0](*(void *)&iterator);
}

kern_return_t IOKitGetBusyState(mach_port_t mainPort, uint32_t *busyState)
{
  return MEMORY[0x189608308](*(void *)&mainPort, busyState);
}

uint64_t IOMobileFramebufferGetCanvasSizes()
{
  return MEMORY[0x18960FFE0]();
}

uint64_t IOMobileFramebufferGetDisplaySize()
{
  return MEMORY[0x18960FFE8]();
}

uint64_t IOMobileFramebufferGetDotPitch()
{
  return MEMORY[0x18960FFF0]();
}

uint64_t IOMobileFramebufferGetMainDisplay()
{
  return MEMORY[0x18960FFF8]();
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x189608330](*(void *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return (CFRunLoopSourceRef)MEMORY[0x189608348](notify);
}

CFStringRef IOObjectCopyClass(io_object_t object)
{
  return (CFStringRef)MEMORY[0x189608368](*(void *)&object);
}

kern_return_t IOObjectGetClass(io_object_t object, io_name_t className)
{
  return MEMORY[0x189608370](*(void *)&object, className);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x189608398](*(void *)&object);
}

CFTypeRef IOPSCopyPowerSourcesInfo(void)
{
  return (CFTypeRef)MEMORY[0x189608400]();
}

CFArrayRef IOPSCopyPowerSourcesList(CFTypeRef blob)
{
  return (CFArrayRef)MEMORY[0x189608408](blob);
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return MEMORY[0x189608418]();
}

uint64_t IOPSGetPercentRemaining()
{
  return MEMORY[0x189608420]();
}

CFDictionaryRef IOPSGetPowerSourceDescription(CFTypeRef blob, CFTypeRef ps)
{
  return (CFDictionaryRef)MEMORY[0x189608428](blob, ps);
}

kern_return_t IORegistryCreateIterator( mach_port_t mainPort, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return MEMORY[0x189608448](*(void *)&mainPort, plane, *(void *)&options, iterator);
}

kern_return_t IORegistryEntryCreateCFProperties( io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x189608458](*(void *)&entry, properties, allocator, *(void *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty( io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x189608470](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IORegistryEntryCreateIterator( io_registry_entry_t entry, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return MEMORY[0x189608480](*(void *)&entry, plane, *(void *)&options, iterator);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x189608488](*(void *)&mainPort, path);
}

kern_return_t IORegistryEntryGetChildIterator( io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x189608498](*(void *)&entry, plane, iterator);
}

kern_return_t IORegistryEntryGetName(io_registry_entry_t entry, io_name_t name)
{
  return MEMORY[0x1896084B0](*(void *)&entry, name);
}

kern_return_t IORegistryEntryGetPath(io_registry_entry_t entry, const io_name_t plane, io_string_t path)
{
  return MEMORY[0x1896084E0](*(void *)&entry, plane, path);
}

CFTypeRef IORegistryEntrySearchCFProperty( io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x189608520](*(void *)&entry, plane, key, allocator, *(void *)&options);
}

kern_return_t IOServiceAddMatchingNotification( IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x189608548](notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x189608550](*(void *)&connect);
}

kern_return_t IOServiceGetBusyState(io_service_t service, uint32_t *busyState)
{
  return MEMORY[0x189608558](*(void *)&service, busyState);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x189608560](*(void *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices( mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x189608578](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x189608580](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x189608590](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x189608598](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

fat_arch *__cdecl NXFindBestFatArch( cpu_type_t cputype, cpu_subtype_t cpusubtype, fat_arch *fat_archs, uint32_t nfat_archs)
{
  return (fat_arch *)MEMORY[0x1895F8548](*(void *)&cputype, *(void *)&cpusubtype, fat_archs, *(void *)&nfat_archs);
}

const NXArchInfo *__cdecl NXGetArchInfoFromName(const char *name)
{
  return (const NXArchInfo *)MEMORY[0x1895F8558](name);
}

const NXArchInfo *NXGetLocalArchInfo(void)
{
  return (const NXArchInfo *)MEMORY[0x1895F8560]();
}

CFStringRef SCDynamicStoreCopyComputerName(SCDynamicStoreRef store, CFStringEncoding *nameEncoding)
{
  return (CFStringRef)MEMORY[0x18960C198](store, nameEncoding);
}

int SCError(void)
{
  return MEMORY[0x18960C220]();
}

const char *__cdecl SCErrorString(int status)
{
  return (const char *)MEMORY[0x18960C228](*(void *)&status);
}

Boolean SCPreferencesApplyChanges(SCPreferencesRef prefs)
{
  return MEMORY[0x18960C3E8](prefs);
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  return MEMORY[0x18960C3F0](prefs);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return (SCPreferencesRef)MEMORY[0x18960C3F8](allocator, name, prefsID);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x18960C410](prefs, key);
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  return MEMORY[0x18960C418](prefs, wait);
}

Boolean SCPreferencesSetValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  return MEMORY[0x18960C440](prefs, key, value);
}

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  return MEMORY[0x18960C450](prefs);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFCopySupplementalVersionDictionary()
{
  return MEMORY[0x189604230]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x189604238]();
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x189604398]();
}

uint64_t _CFPreferencesCopyValueWithContainer()
{
  return MEMORY[0x189604440]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1895F8918](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1895F8930]();
}

uint64_t __strcat_chk()
{
  return MEMORY[0x1895F89F0]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1895F8A08]();
}

void _os_log_debug_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_once()
{
  return MEMORY[0x1895F8E38]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x189612738]();
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x1895F9308]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1895F9328](a1, *(void *)&a2);
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x1895F9510](client, msg, *(void *)&level, format);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

uint64_t container_system_group_path_for_identifier()
{
  return MEMORY[0x1895FA9D8]();
}

char *__cdecl ctime_r(const time_t *a1, char *a2)
{
  return (char *)MEMORY[0x1895FAAC0](a1, a2);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(uint64_t identifier, unint64_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1895FAC40](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_release(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(uint64_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1895FADF0](value);
}

uint64_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1895FAE00](dsema);
}

uint64_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1895FAE08](dsema, timeout);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1895FAF58]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1895FAF60](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1895FAF78](__handle, __symbol);
}

uint64_t dyld_get_active_platform()
{
  return MEMORY[0x1895FAFD8]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1895FB088]();
}

int fclose(FILE *a1)
{
  return MEMORY[0x1895FB208](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1895FB248](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1895FB268](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1895FB290](a1, *(void *)&a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1895FB348](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1895FB370](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1895FB378](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1895FB448](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB4C8](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1895FB4F8](a1, a2, a3, a4, *(void *)&a5);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1895FB538](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1895FB628]();
}

kern_return_t host_info( host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1895FB780](*(void *)&host, *(void *)&flavor, host_info_out, host_info_outCnt);
}

char *__cdecl index(const char *a1, int a2)
{
  return (char *)MEMORY[0x1895FB810](a1, *(void *)&a2);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1895FBAC0](*(void *)&error_value);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1895FBAD0]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1895FBE48](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1895FBE68](__s, __smax, *(void *)&__c, __n);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1896165C0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1896165F0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x189616600]();
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616728](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x189616740]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x189616818](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x189616820](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1895FC440](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

uint64_t os_parse_boot_arg_int()
{
  return MEMORY[0x1895FC5E0]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1895FC6C0]();
}

uint64_t os_variant_is_darwinos()
{
  return MEMORY[0x1895FC6D8]();
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1895FC8E0](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1895FCA40](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1895FCA60](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA98](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCAA8](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1895FCB48](a1, a2);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1895FCC38](*(void *)&a1, a2, a3);
}

char *__cdecl rindex(const char *a1, int a2)
{
  return (char *)MEMORY[0x1895FCD78](a1, *(void *)&a2);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1895FCD90]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1895FCF88](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1895FCFD0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1895FD018](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1895FD050](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1895FD078](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1895FD080](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1895FD0B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1895FD100](__s1, __n);
}

char *__cdecl strstr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1895FD148](__big, __little);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1895FD2B8](a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1895FD400](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1895FD468](a1);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1895FD610](__str, __size, __format, a4);
}

uint64_t objc_msgSend_copyDataFromDeviceTree_withFirstChar_propertyName_withPropertyFirstChar_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_copyDataFromDeviceTree_withFirstChar_propertyName_withPropertyFirstChar_);
}

uint64_t objc_msgSend_copyDeviceTreeProperty_withFirstChar_propertyName_withPropertyFirstChar_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_copyDeviceTreeProperty_withFirstChar_propertyName_withPropertyFirstChar_);
}

uint64_t objc_msgSend_copyNumberFromDeviceTree_withFirstChar_propertyName_withPropertyFirstChar_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_copyNumberFromDeviceTree_withFirstChar_propertyName_withPropertyFirstChar_);
}

uint64_t objc_msgSend_copyPropertyFromServiceTree_withFirstChar_propertyName_withPropertyFirstChar_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_copyPropertyFromServiceTree_withFirstChar_propertyName_withPropertyFirstChar_);
}

uint64_t objc_msgSend_copyServiceTreeProperty_withFirstChar_propertyName_withPropertyFirstChar_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_copyServiceTreeProperty_withFirstChar_propertyName_withPropertyFirstChar_);
}

uint64_t objc_msgSend_copyStringFromDeviceTree_withFirstChar_propertyName_withPropertyFirstChar_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_copyStringFromDeviceTree_withFirstChar_propertyName_withPropertyFirstChar_);
}

uint64_t objc_msgSend_copyStringFromServiceTree_withFirstChar_propertyName_withPropertyFirstChar_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_copyStringFromServiceTree_withFirstChar_propertyName_withPropertyFirstChar_);
}